import{S as Ibt,i as Dbt,s as jbt,e as a,k as l,w as f,t as o,M as Nbt,c as n,d as t,m as i,a as s,x as m,h as r,b as d,F as e,g as b,y as g,q as h,o as p,B as _}from"../../chunks/vendor-4833417e.js";import{T as Q0r}from"../../chunks/Tip-fffd6df1.js";import{D as E}from"../../chunks/Docstring-7b52c3d4.js";import{C as w}from"../../chunks/CodeBlock-6a3d1b46.js";import{I as V}from"../../chunks/IconCopyLink-4b81c553.js";import"../../chunks/CopyButton-dacfbfaf.js";function qbt(Li){let J,Be,de,me,no,ce,ue,Go,Bi,yf,sa,xi,ki,EM,wf,ye,io,Ri,In,yM,Dn,jn,wM,Si,Nn,AM,Pi,Af,$a;return{c(){J=a("p"),Be=o("If your "),de=a("code"),me=o("NewModelConfig"),no=o(" is a subclass of "),ce=a("code"),ue=o("PretrainedConfig"),Go=o(`, make sure its
`),Bi=a("code"),yf=o("model_type"),sa=o(" attribute is set to the same key you use when registering the config (here "),xi=a("code"),ki=o('"new-model"'),EM=o(")."),wf=l(),ye=a("p"),io=o("Likewise, if your "),Ri=a("code"),In=o("NewModel"),yM=o(" is a subclass of "),Dn=a("a"),jn=o("PreTrainedModel"),wM=o(`, make sure its
`),Si=a("code"),Nn=o("config_class"),AM=o(` attribute is set to the same class you use when registering the model (here
`),Pi=a("code"),Af=o("NewModelConfig"),$a=o(")."),this.h()},l(co){J=n(co,"P",{});var ge=s(J);Be=r(ge,"If your "),de=n(ge,"CODE",{});var c8=s(de);me=r(c8,"NewModelConfig"),c8.forEach(t),no=r(ge," is a subclass of "),ce=n(ge,"CODE",{});var $i=s(ce);ue=r($i,"PretrainedConfig"),$i.forEach(t),Go=r(ge,`, make sure its
`),Bi=n(ge,"CODE",{});var f8=s(Bi);yf=r(f8,"model_type"),f8.forEach(t),sa=r(ge," attribute is set to the same key you use when registering the config (here "),xi=n(ge,"CODE",{});var m8=s(xi);ki=r(m8,'"new-model"'),m8.forEach(t),EM=r(ge,")."),ge.forEach(t),wf=i(co),ye=n(co,"P",{});var Oo=s(ye);io=r(Oo,"Likewise, if your "),Ri=n(Oo,"CODE",{});var Ia=s(Ri);In=r(Ia,"NewModel"),Ia.forEach(t),yM=r(Oo," is a subclass of "),Dn=n(Oo,"A",{href:!0});var g8=s(Dn);jn=r(g8,"PreTrainedModel"),g8.forEach(t),wM=r(Oo,`, make sure its
`),Si=n(Oo,"CODE",{});var Lf=s(Si);Nn=r(Lf,"config_class"),Lf.forEach(t),AM=r(Oo,` attribute is set to the same class you use when registering the model (here
`),Pi=n(Oo,"CODE",{});var h8=s(Pi);Af=r(h8,"NewModelConfig"),h8.forEach(t),$a=r(Oo,")."),Oo.forEach(t),this.h()},h(){d(Dn,"href","/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel")},m(co,ge){b(co,J,ge),e(J,Be),e(J,de),e(de,me),e(J,no),e(J,ce),e(ce,ue),e(J,Go),e(J,Bi),e(Bi,yf),e(J,sa),e(J,xi),e(xi,ki),e(J,EM),b(co,wf,ge),b(co,ye,ge),e(ye,io),e(ye,Ri),e(Ri,In),e(ye,yM),e(ye,Dn),e(Dn,jn),e(ye,wM),e(ye,Si),e(Si,Nn),e(ye,AM),e(ye,Pi),e(Pi,Af),e(ye,$a)},d(co){co&&t(J),co&&t(wf),co&&t(ye)}}}function Gbt(Li){let J,Be,de,me,no;return{c(){J=a("p"),Be=o("Passing "),de=a("code"),me=o("use_auth_token=True"),no=o(" is required when you want to use a private model.")},l(ce){J=n(ce,"P",{});var ue=s(J);Be=r(ue,"Passing "),de=n(ue,"CODE",{});var Go=s(de);me=r(Go,"use_auth_token=True"),Go.forEach(t),no=r(ue," is required when you want to use a private model."),ue.forEach(t)},m(ce,ue){b(ce,J,ue),e(J,Be),e(J,de),e(de,me),e(J,no)},d(ce){ce&&t(J)}}}function Obt(Li){let J,Be,de,me,no;return{c(){J=a("p"),Be=o("Passing "),de=a("code"),me=o("use_auth_token=True"),no=o(" is required when you want to use a private model.")},l(ce){J=n(ce,"P",{});var ue=s(J);Be=r(ue,"Passing "),de=n(ue,"CODE",{});var Go=s(de);me=r(Go,"use_auth_token=True"),Go.forEach(t),no=r(ue," is required when you want to use a private model."),ue.forEach(t)},m(ce,ue){b(ce,J,ue),e(J,Be),e(J,de),e(de,me),e(J,no)},d(ce){ce&&t(J)}}}function Xbt(Li){let J,Be,de,me,no,ce,ue,Go,Bi,yf,sa,xi,ki,EM,wf,ye,io,Ri,In,yM,Dn,jn,wM,Si,Nn,AM,Pi,Af,$a,co,ge,c8,$i,f8,m8,Oo,Ia,g8,Lf,h8,VRe,P7e,Ii,Bf,wW,LM,zRe,AW,WRe,$7e,qn,QRe,LW,HRe,URe,BW,JRe,YRe,I7e,BM,D7e,p8,KRe,j7e,xf,N7e,Di,kf,xW,xM,ZRe,kW,eSe,q7e,Xo,kM,oSe,RM,rSe,_8,tSe,aSe,nSe,SM,sSe,RW,lSe,iSe,dSe,fo,PM,cSe,SW,fSe,mSe,ji,gSe,PW,hSe,pSe,$W,_Se,uSe,bSe,v,Rf,IW,vSe,TSe,u8,FSe,CSe,MSe,Sf,DW,ESe,ySe,b8,wSe,ASe,LSe,Pf,jW,BSe,xSe,v8,kSe,RSe,SSe,$f,NW,PSe,$Se,T8,ISe,DSe,jSe,If,qW,NSe,qSe,F8,GSe,OSe,XSe,Df,GW,VSe,zSe,C8,WSe,QSe,HSe,jf,OW,USe,JSe,M8,YSe,KSe,ZSe,Nf,XW,ePe,oPe,E8,rPe,tPe,aPe,qf,VW,nPe,sPe,y8,lPe,iPe,dPe,Gf,zW,cPe,fPe,w8,mPe,gPe,hPe,Of,WW,pPe,_Pe,A8,uPe,bPe,vPe,Xf,QW,TPe,FPe,L8,CPe,MPe,EPe,Vf,HW,yPe,wPe,B8,APe,LPe,BPe,zf,UW,xPe,kPe,x8,RPe,SPe,PPe,Wf,JW,$Pe,IPe,k8,DPe,jPe,NPe,Qf,YW,qPe,GPe,R8,OPe,XPe,VPe,Hf,KW,zPe,WPe,S8,QPe,HPe,UPe,Uf,ZW,JPe,YPe,P8,KPe,ZPe,e$e,Jf,eQ,o$e,r$e,$8,t$e,a$e,n$e,Yf,oQ,s$e,l$e,I8,i$e,d$e,c$e,Kf,rQ,f$e,m$e,D8,g$e,h$e,p$e,Zf,tQ,_$e,u$e,j8,b$e,v$e,T$e,em,aQ,F$e,C$e,N8,M$e,E$e,y$e,om,nQ,w$e,A$e,q8,L$e,B$e,x$e,rm,sQ,k$e,R$e,G8,S$e,P$e,$$e,tm,lQ,I$e,D$e,O8,j$e,N$e,q$e,am,iQ,G$e,O$e,X8,X$e,V$e,z$e,nm,dQ,W$e,Q$e,V8,H$e,U$e,J$e,sm,cQ,Y$e,K$e,z8,Z$e,eIe,oIe,lm,fQ,rIe,tIe,W8,aIe,nIe,sIe,im,mQ,lIe,iIe,Q8,dIe,cIe,fIe,dm,gQ,mIe,gIe,H8,hIe,pIe,_Ie,cm,hQ,uIe,bIe,U8,vIe,TIe,FIe,fm,pQ,CIe,MIe,J8,EIe,yIe,wIe,mm,_Q,AIe,LIe,Y8,BIe,xIe,kIe,gm,uQ,RIe,SIe,K8,PIe,$Ie,IIe,hm,bQ,DIe,jIe,Z8,NIe,qIe,GIe,pm,vQ,OIe,XIe,e7,VIe,zIe,WIe,_m,TQ,QIe,HIe,o7,UIe,JIe,YIe,um,FQ,KIe,ZIe,r7,eDe,oDe,rDe,bm,CQ,tDe,aDe,t7,nDe,sDe,lDe,vm,MQ,iDe,dDe,a7,cDe,fDe,mDe,Tm,EQ,gDe,hDe,n7,pDe,_De,uDe,Fm,yQ,bDe,vDe,s7,TDe,FDe,CDe,Cm,wQ,MDe,EDe,l7,yDe,wDe,ADe,Mm,AQ,LDe,BDe,i7,xDe,kDe,RDe,Em,LQ,SDe,PDe,d7,$De,IDe,DDe,ym,BQ,jDe,NDe,c7,qDe,GDe,ODe,wm,xQ,XDe,VDe,f7,zDe,WDe,QDe,Am,kQ,HDe,UDe,m7,JDe,YDe,KDe,Lm,RQ,ZDe,eje,g7,oje,rje,tje,Bm,SQ,aje,nje,h7,sje,lje,ije,xm,PQ,dje,cje,p7,fje,mje,gje,km,$Q,hje,pje,_7,_je,uje,bje,Rm,IQ,vje,Tje,u7,Fje,Cje,Mje,Sm,DQ,Eje,yje,b7,wje,Aje,Lje,Pm,jQ,Bje,xje,v7,kje,Rje,Sje,$m,NQ,Pje,$je,T7,Ije,Dje,jje,Im,qQ,Nje,qje,F7,Gje,Oje,Xje,Dm,GQ,Vje,zje,C7,Wje,Qje,Hje,jm,OQ,Uje,Jje,M7,Yje,Kje,Zje,Nm,XQ,eNe,oNe,E7,rNe,tNe,aNe,qm,VQ,nNe,sNe,y7,lNe,iNe,dNe,Gm,zQ,cNe,fNe,w7,mNe,gNe,hNe,Om,WQ,pNe,_Ne,A7,uNe,bNe,vNe,Xm,QQ,TNe,FNe,L7,CNe,MNe,ENe,Vm,HQ,yNe,wNe,B7,ANe,LNe,BNe,zm,UQ,xNe,kNe,x7,RNe,SNe,PNe,Wm,JQ,$Ne,INe,k7,DNe,jNe,NNe,Qm,YQ,qNe,GNe,R7,ONe,XNe,VNe,Hm,KQ,zNe,WNe,S7,QNe,HNe,UNe,Um,ZQ,JNe,YNe,P7,KNe,ZNe,eqe,Jm,eH,oqe,rqe,$7,tqe,aqe,nqe,Ym,oH,sqe,lqe,I7,iqe,dqe,cqe,Km,rH,fqe,mqe,D7,gqe,hqe,pqe,Zm,tH,_qe,uqe,j7,bqe,vqe,Tqe,eg,aH,Fqe,Cqe,N7,Mqe,Eqe,yqe,og,nH,wqe,Aqe,q7,Lqe,Bqe,xqe,rg,sH,kqe,Rqe,G7,Sqe,Pqe,$qe,tg,lH,Iqe,Dqe,O7,jqe,Nqe,qqe,ag,iH,Gqe,Oqe,X7,Xqe,Vqe,zqe,ng,dH,Wqe,Qqe,V7,Hqe,Uqe,Jqe,sg,cH,Yqe,Kqe,z7,Zqe,eGe,oGe,lg,fH,rGe,tGe,W7,aGe,nGe,sGe,ig,mH,lGe,iGe,Q7,dGe,cGe,fGe,dg,gH,mGe,gGe,H7,hGe,pGe,_Ge,cg,hH,uGe,bGe,U7,vGe,TGe,FGe,fg,pH,CGe,MGe,J7,EGe,yGe,wGe,mg,_H,AGe,LGe,Y7,BGe,xGe,kGe,gg,uH,RGe,SGe,K7,PGe,$Ge,IGe,hg,bH,DGe,jGe,Z7,NGe,qGe,GGe,pg,vH,OGe,XGe,eB,VGe,zGe,WGe,_g,TH,QGe,HGe,oB,UGe,JGe,YGe,ug,FH,KGe,ZGe,rB,eOe,oOe,rOe,CH,tOe,aOe,$M,nOe,bg,IM,sOe,MH,lOe,G7e,Ni,vg,EH,DM,iOe,yH,dOe,O7e,Vo,jM,cOe,NM,fOe,tB,mOe,gOe,hOe,qM,pOe,wH,_Oe,uOe,bOe,mo,GM,vOe,AH,TOe,FOe,Da,COe,LH,MOe,EOe,BH,yOe,wOe,xH,AOe,LOe,BOe,M,Gn,kH,xOe,kOe,aB,ROe,SOe,nB,POe,$Oe,IOe,On,RH,DOe,jOe,sB,NOe,qOe,lB,GOe,OOe,XOe,Xn,SH,VOe,zOe,iB,WOe,QOe,dB,HOe,UOe,JOe,Tg,PH,YOe,KOe,cB,ZOe,eXe,oXe,Vn,$H,rXe,tXe,fB,aXe,nXe,mB,sXe,lXe,iXe,Fg,IH,dXe,cXe,gB,fXe,mXe,gXe,Cg,DH,hXe,pXe,hB,_Xe,uXe,bXe,Mg,jH,vXe,TXe,pB,FXe,CXe,MXe,zn,NH,EXe,yXe,_B,wXe,AXe,uB,LXe,BXe,xXe,Wn,qH,kXe,RXe,bB,SXe,PXe,vB,$Xe,IXe,DXe,Qn,GH,jXe,NXe,TB,qXe,GXe,FB,OXe,XXe,VXe,Eg,OH,zXe,WXe,CB,QXe,HXe,UXe,yg,XH,JXe,YXe,MB,KXe,ZXe,eVe,Hn,VH,oVe,rVe,EB,tVe,aVe,yB,nVe,sVe,lVe,wg,zH,iVe,dVe,wB,cVe,fVe,mVe,Un,WH,gVe,hVe,AB,pVe,_Ve,LB,uVe,bVe,vVe,Jn,QH,TVe,FVe,BB,CVe,MVe,xB,EVe,yVe,wVe,Yn,HH,AVe,LVe,kB,BVe,xVe,UH,kVe,RVe,SVe,Ag,JH,PVe,$Ve,RB,IVe,DVe,jVe,Kn,YH,NVe,qVe,SB,GVe,OVe,PB,XVe,VVe,zVe,Lg,KH,WVe,QVe,$B,HVe,UVe,JVe,Zn,ZH,YVe,KVe,IB,ZVe,eze,DB,oze,rze,tze,es,eU,aze,nze,jB,sze,lze,NB,ize,dze,cze,os,oU,fze,mze,qB,gze,hze,GB,pze,_ze,uze,Bg,rU,bze,vze,OB,Tze,Fze,Cze,rs,tU,Mze,Eze,XB,yze,wze,VB,Aze,Lze,Bze,xg,aU,xze,kze,zB,Rze,Sze,Pze,ts,nU,$ze,Ize,WB,Dze,jze,QB,Nze,qze,Gze,as,sU,Oze,Xze,HB,Vze,zze,UB,Wze,Qze,Hze,ns,lU,Uze,Jze,JB,Yze,Kze,YB,Zze,eWe,oWe,ss,iU,rWe,tWe,KB,aWe,nWe,ZB,sWe,lWe,iWe,kg,dU,dWe,cWe,ex,fWe,mWe,gWe,ls,cU,hWe,pWe,ox,_We,uWe,rx,bWe,vWe,TWe,is,fU,FWe,CWe,tx,MWe,EWe,ax,yWe,wWe,AWe,ds,mU,LWe,BWe,nx,xWe,kWe,sx,RWe,SWe,PWe,cs,gU,$We,IWe,lx,DWe,jWe,ix,NWe,qWe,GWe,fs,hU,OWe,XWe,dx,VWe,zWe,cx,WWe,QWe,HWe,ms,pU,UWe,JWe,fx,YWe,KWe,mx,ZWe,eQe,oQe,Rg,_U,rQe,tQe,gx,aQe,nQe,sQe,gs,uU,lQe,iQe,hx,dQe,cQe,px,fQe,mQe,gQe,Sg,bU,hQe,pQe,_x,_Qe,uQe,bQe,Pg,vU,vQe,TQe,ux,FQe,CQe,MQe,hs,TU,EQe,yQe,bx,wQe,AQe,vx,LQe,BQe,xQe,ps,FU,kQe,RQe,Tx,SQe,PQe,Fx,$Qe,IQe,DQe,$g,CU,jQe,NQe,Cx,qQe,GQe,OQe,_s,MU,XQe,VQe,Mx,zQe,WQe,Ex,QQe,HQe,UQe,us,EU,JQe,YQe,yx,KQe,ZQe,wx,eHe,oHe,rHe,bs,yU,tHe,aHe,Ax,nHe,sHe,Lx,lHe,iHe,dHe,vs,wU,cHe,fHe,Bx,mHe,gHe,xx,hHe,pHe,_He,Ts,AU,uHe,bHe,kx,vHe,THe,Rx,FHe,CHe,MHe,Ig,LU,EHe,yHe,Sx,wHe,AHe,LHe,Dg,BU,BHe,xHe,Px,kHe,RHe,SHe,jg,xU,PHe,$He,$x,IHe,DHe,jHe,Ng,kU,NHe,qHe,Ix,GHe,OHe,XHe,Fs,RU,VHe,zHe,Dx,WHe,QHe,jx,HHe,UHe,JHe,qg,SU,YHe,KHe,Nx,ZHe,eUe,oUe,Cs,PU,rUe,tUe,qx,aUe,nUe,Gx,sUe,lUe,iUe,Ms,$U,dUe,cUe,Ox,fUe,mUe,Xx,gUe,hUe,pUe,Es,IU,_Ue,uUe,Vx,bUe,vUe,zx,TUe,FUe,CUe,ys,DU,MUe,EUe,Wx,yUe,wUe,Qx,AUe,LUe,BUe,ws,jU,xUe,kUe,Hx,RUe,SUe,Ux,PUe,$Ue,IUe,As,NU,DUe,jUe,Jx,NUe,qUe,Yx,GUe,OUe,XUe,Gg,qU,VUe,zUe,Kx,WUe,QUe,HUe,Og,GU,UUe,JUe,Zx,YUe,KUe,ZUe,Ls,OU,eJe,oJe,ek,rJe,tJe,ok,aJe,nJe,sJe,Bs,XU,lJe,iJe,rk,dJe,cJe,tk,fJe,mJe,gJe,xs,VU,hJe,pJe,ak,_Je,uJe,nk,bJe,vJe,TJe,Xg,zU,FJe,CJe,sk,MJe,EJe,yJe,Vg,WU,wJe,AJe,lk,LJe,BJe,xJe,zg,QU,kJe,RJe,ik,SJe,PJe,$Je,Wg,HU,IJe,DJe,dk,jJe,NJe,qJe,ks,UU,GJe,OJe,ck,XJe,VJe,fk,zJe,WJe,QJe,Qg,JU,HJe,UJe,mk,JJe,YJe,KJe,Hg,YU,ZJe,eYe,gk,oYe,rYe,tYe,Rs,KU,aYe,nYe,hk,sYe,lYe,pk,iYe,dYe,cYe,Ss,ZU,fYe,mYe,_k,gYe,hYe,uk,pYe,_Ye,uYe,eJ,bYe,vYe,OM,TYe,Ug,XM,FYe,oJ,CYe,X7e,qi,Jg,rJ,VM,MYe,tJ,EYe,V7e,zo,zM,yYe,WM,wYe,bk,AYe,LYe,BYe,QM,xYe,aJ,kYe,RYe,SYe,xe,HM,PYe,nJ,$Ye,IYe,ja,DYe,sJ,jYe,NYe,lJ,qYe,GYe,iJ,OYe,XYe,VYe,ae,Yg,dJ,zYe,WYe,vk,QYe,HYe,UYe,Kg,cJ,JYe,YYe,Tk,KYe,ZYe,eKe,Zg,fJ,oKe,rKe,Fk,tKe,aKe,nKe,eh,mJ,sKe,lKe,Ck,iKe,dKe,cKe,oh,gJ,fKe,mKe,Mk,gKe,hKe,pKe,rh,hJ,_Ke,uKe,Ek,bKe,vKe,TKe,th,pJ,FKe,CKe,yk,MKe,EKe,yKe,ah,_J,wKe,AKe,wk,LKe,BKe,xKe,nh,uJ,kKe,RKe,Ak,SKe,PKe,$Ke,sh,bJ,IKe,DKe,Lk,jKe,NKe,qKe,lh,vJ,GKe,OKe,Bk,XKe,VKe,zKe,ih,TJ,WKe,QKe,xk,HKe,UKe,JKe,dh,FJ,YKe,KKe,kk,ZKe,eZe,oZe,ch,CJ,rZe,tZe,Rk,aZe,nZe,sZe,fh,MJ,lZe,iZe,Sk,dZe,cZe,fZe,mh,EJ,mZe,gZe,Pk,hZe,pZe,_Ze,gh,uZe,yJ,bZe,vZe,UM,TZe,hh,JM,FZe,wJ,CZe,z7e,Gi,ph,AJ,YM,MZe,LJ,EZe,W7e,Wo,KM,yZe,ZM,wZe,$k,AZe,LZe,BZe,eE,xZe,BJ,kZe,RZe,SZe,ke,oE,PZe,xJ,$Ze,IZe,Oi,DZe,kJ,jZe,NZe,RJ,qZe,GZe,OZe,we,_h,SJ,XZe,VZe,Ik,zZe,WZe,QZe,uh,PJ,HZe,UZe,Dk,JZe,YZe,KZe,bh,$J,ZZe,eeo,jk,oeo,reo,teo,vh,IJ,aeo,neo,Nk,seo,leo,ieo,Th,DJ,deo,ceo,qk,feo,meo,geo,Fh,jJ,heo,peo,Gk,_eo,ueo,beo,Ch,NJ,veo,Teo,Ok,Feo,Ceo,Meo,Mh,qJ,Eeo,yeo,Xk,weo,Aeo,Leo,Eh,Beo,GJ,xeo,keo,rE,Reo,yh,tE,Seo,OJ,Peo,Q7e,Xi,wh,XJ,aE,$eo,VJ,Ieo,H7e,Qo,nE,Deo,Vi,jeo,zJ,Neo,qeo,WJ,Geo,Oeo,Xeo,sE,Veo,QJ,zeo,Weo,Qeo,qr,lE,Heo,HJ,Ueo,Jeo,zi,Yeo,UJ,Keo,Zeo,JJ,eoo,ooo,roo,YJ,too,aoo,iE,noo,Re,dE,soo,KJ,loo,ioo,Na,doo,ZJ,coo,foo,eY,moo,goo,oY,hoo,poo,_oo,F,Ah,rY,uoo,boo,Vk,voo,Too,Foo,Lh,tY,Coo,Moo,zk,Eoo,yoo,woo,Bh,aY,Aoo,Loo,Wk,Boo,xoo,koo,xh,nY,Roo,Soo,Qk,Poo,$oo,Ioo,kh,sY,Doo,joo,Hk,Noo,qoo,Goo,Rh,lY,Ooo,Xoo,Uk,Voo,zoo,Woo,Sh,iY,Qoo,Hoo,Jk,Uoo,Joo,Yoo,Ph,dY,Koo,Zoo,Yk,ero,oro,rro,$h,cY,tro,aro,Kk,nro,sro,lro,Ih,fY,iro,dro,Zk,cro,fro,mro,Dh,mY,gro,hro,eR,pro,_ro,uro,jh,gY,bro,vro,oR,Tro,Fro,Cro,Nh,hY,Mro,Ero,rR,yro,wro,Aro,qh,pY,Lro,Bro,tR,xro,kro,Rro,Gh,_Y,Sro,Pro,aR,$ro,Iro,Dro,Oh,uY,jro,Nro,nR,qro,Gro,Oro,Xh,bY,Xro,Vro,sR,zro,Wro,Qro,Vh,vY,Hro,Uro,lR,Jro,Yro,Kro,zh,TY,Zro,eto,iR,oto,rto,tto,Wh,FY,ato,nto,dR,sto,lto,ito,Qh,CY,dto,cto,cR,fto,mto,gto,Hh,MY,hto,pto,fR,_to,uto,bto,Uh,EY,vto,Tto,mR,Fto,Cto,Mto,Jh,yY,Eto,yto,gR,wto,Ato,Lto,Yh,wY,Bto,xto,hR,kto,Rto,Sto,Kh,AY,Pto,$to,pR,Ito,Dto,jto,Zh,LY,Nto,qto,_R,Gto,Oto,Xto,Ps,BY,Vto,zto,uR,Wto,Qto,bR,Hto,Uto,Jto,ep,xY,Yto,Kto,vR,Zto,eao,oao,op,kY,rao,tao,TR,aao,nao,sao,rp,RY,lao,iao,FR,dao,cao,fao,tp,SY,mao,gao,CR,hao,pao,_ao,ap,PY,uao,bao,MR,vao,Tao,Fao,np,$Y,Cao,Mao,ER,Eao,yao,wao,sp,IY,Aao,Lao,yR,Bao,xao,kao,lp,DY,Rao,Sao,wR,Pao,$ao,Iao,ip,jY,Dao,jao,AR,Nao,qao,Gao,dp,NY,Oao,Xao,LR,Vao,zao,Wao,cp,qY,Qao,Hao,BR,Uao,Jao,Yao,fp,GY,Kao,Zao,xR,eno,ono,rno,mp,OY,tno,ano,kR,nno,sno,lno,gp,XY,ino,dno,RR,cno,fno,mno,hp,VY,gno,hno,SR,pno,_no,uno,pp,zY,bno,vno,PR,Tno,Fno,Cno,_p,WY,Mno,Eno,$R,yno,wno,Ano,up,QY,Lno,Bno,IR,xno,kno,Rno,bp,HY,Sno,Pno,DR,$no,Ino,Dno,vp,UY,jno,Nno,jR,qno,Gno,Ono,Tp,JY,Xno,Vno,NR,zno,Wno,Qno,Fp,YY,Hno,Uno,qR,Jno,Yno,Kno,Cp,KY,Zno,eso,GR,oso,rso,tso,Mp,ZY,aso,nso,OR,sso,lso,iso,Ep,eK,dso,cso,XR,fso,mso,gso,yp,oK,hso,pso,VR,_so,uso,bso,wp,rK,vso,Tso,zR,Fso,Cso,Mso,Ap,tK,Eso,yso,WR,wso,Aso,Lso,Lp,aK,Bso,xso,QR,kso,Rso,Sso,Bp,nK,Pso,$so,HR,Iso,Dso,jso,xp,sK,Nso,qso,UR,Gso,Oso,Xso,kp,lK,Vso,zso,JR,Wso,Qso,Hso,Rp,iK,Uso,Jso,YR,Yso,Kso,Zso,Sp,dK,elo,olo,KR,rlo,tlo,alo,Pp,cK,nlo,slo,ZR,llo,ilo,dlo,$p,fK,clo,flo,eS,mlo,glo,hlo,Ip,mK,plo,_lo,oS,ulo,blo,vlo,Dp,gK,Tlo,Flo,rS,Clo,Mlo,Elo,jp,hK,ylo,wlo,tS,Alo,Llo,Blo,Np,pK,xlo,klo,aS,Rlo,Slo,Plo,qp,_K,$lo,Ilo,nS,Dlo,jlo,Nlo,Gp,uK,qlo,Glo,sS,Olo,Xlo,Vlo,Op,bK,zlo,Wlo,lS,Qlo,Hlo,Ulo,Xp,vK,Jlo,Ylo,iS,Klo,Zlo,eio,Vp,TK,oio,rio,dS,tio,aio,nio,zp,FK,sio,lio,cS,iio,dio,cio,Wp,CK,fio,mio,fS,gio,hio,pio,Qp,MK,_io,uio,mS,bio,vio,Tio,Hp,EK,Fio,Cio,gS,Mio,Eio,yio,Up,yK,wio,Aio,hS,Lio,Bio,xio,Jp,wK,kio,Rio,pS,Sio,Pio,$io,Yp,AK,Iio,Dio,_S,jio,Nio,qio,Kp,LK,Gio,Oio,uS,Xio,Vio,zio,Zp,BK,Wio,Qio,bS,Hio,Uio,Jio,e_,xK,Yio,Kio,vS,Zio,edo,odo,o_,kK,rdo,tdo,TS,ado,ndo,sdo,r_,RK,ldo,ido,FS,ddo,cdo,fdo,t_,SK,mdo,gdo,CS,hdo,pdo,_do,a_,PK,udo,bdo,MS,vdo,Tdo,Fdo,n_,Cdo,$K,Mdo,Edo,IK,ydo,wdo,DK,Ado,Ldo,cE,U7e,Wi,s_,jK,fE,Bdo,NK,xdo,J7e,Ho,mE,kdo,Qi,Rdo,qK,Sdo,Pdo,GK,$do,Ido,Ddo,gE,jdo,OK,Ndo,qdo,Gdo,Gr,hE,Odo,XK,Xdo,Vdo,Hi,zdo,VK,Wdo,Qdo,zK,Hdo,Udo,Jdo,WK,Ydo,Kdo,pE,Zdo,Se,_E,eco,QK,oco,rco,qa,tco,HK,aco,nco,UK,sco,lco,JK,ico,dco,cco,k,l_,YK,fco,mco,ES,gco,hco,pco,i_,KK,_co,uco,yS,bco,vco,Tco,d_,ZK,Fco,Cco,wS,Mco,Eco,yco,c_,eZ,wco,Aco,AS,Lco,Bco,xco,f_,oZ,kco,Rco,LS,Sco,Pco,$co,m_,rZ,Ico,Dco,BS,jco,Nco,qco,g_,tZ,Gco,Oco,xS,Xco,Vco,zco,h_,aZ,Wco,Qco,kS,Hco,Uco,Jco,p_,nZ,Yco,Kco,RS,Zco,efo,ofo,__,sZ,rfo,tfo,SS,afo,nfo,sfo,u_,lZ,lfo,ifo,PS,dfo,cfo,ffo,b_,iZ,mfo,gfo,$S,hfo,pfo,_fo,v_,dZ,ufo,bfo,IS,vfo,Tfo,Ffo,T_,cZ,Cfo,Mfo,DS,Efo,yfo,wfo,F_,fZ,Afo,Lfo,jS,Bfo,xfo,kfo,C_,mZ,Rfo,Sfo,NS,Pfo,$fo,Ifo,M_,gZ,Dfo,jfo,qS,Nfo,qfo,Gfo,E_,hZ,Ofo,Xfo,GS,Vfo,zfo,Wfo,y_,pZ,Qfo,Hfo,OS,Ufo,Jfo,Yfo,w_,_Z,Kfo,Zfo,XS,emo,omo,rmo,A_,uZ,tmo,amo,VS,nmo,smo,lmo,L_,bZ,imo,dmo,zS,cmo,fmo,mmo,B_,vZ,gmo,hmo,WS,pmo,_mo,umo,x_,TZ,bmo,vmo,QS,Tmo,Fmo,Cmo,k_,FZ,Mmo,Emo,HS,ymo,wmo,Amo,R_,CZ,Lmo,Bmo,US,xmo,kmo,Rmo,S_,MZ,Smo,Pmo,JS,$mo,Imo,Dmo,P_,EZ,jmo,Nmo,YS,qmo,Gmo,Omo,$_,yZ,Xmo,Vmo,KS,zmo,Wmo,Qmo,I_,wZ,Hmo,Umo,ZS,Jmo,Ymo,Kmo,D_,AZ,Zmo,ego,eP,ogo,rgo,tgo,j_,LZ,ago,ngo,oP,sgo,lgo,igo,N_,BZ,dgo,cgo,rP,fgo,mgo,ggo,q_,xZ,hgo,pgo,tP,_go,ugo,bgo,G_,kZ,vgo,Tgo,aP,Fgo,Cgo,Mgo,O_,RZ,Ego,ygo,nP,wgo,Ago,Lgo,X_,SZ,Bgo,xgo,sP,kgo,Rgo,Sgo,V_,PZ,Pgo,$go,lP,Igo,Dgo,jgo,z_,$Z,Ngo,qgo,iP,Ggo,Ogo,Xgo,W_,Vgo,IZ,zgo,Wgo,DZ,Qgo,Hgo,jZ,Ugo,Jgo,uE,Y7e,Ui,Q_,NZ,bE,Ygo,qZ,Kgo,K7e,Uo,vE,Zgo,Ji,eho,GZ,oho,rho,OZ,tho,aho,nho,TE,sho,XZ,lho,iho,dho,Or,FE,cho,VZ,fho,mho,Yi,gho,zZ,hho,pho,WZ,_ho,uho,bho,QZ,vho,Tho,CE,Fho,Pe,ME,Cho,HZ,Mho,Eho,Ga,yho,UZ,who,Aho,JZ,Lho,Bho,YZ,xho,kho,Rho,$,H_,KZ,Sho,Pho,dP,$ho,Iho,Dho,U_,ZZ,jho,Nho,cP,qho,Gho,Oho,J_,eee,Xho,Vho,fP,zho,Who,Qho,Y_,oee,Hho,Uho,mP,Jho,Yho,Kho,K_,ree,Zho,epo,gP,opo,rpo,tpo,Z_,tee,apo,npo,hP,spo,lpo,ipo,eu,aee,dpo,cpo,pP,fpo,mpo,gpo,ou,nee,hpo,ppo,_P,_po,upo,bpo,ru,see,vpo,Tpo,uP,Fpo,Cpo,Mpo,tu,lee,Epo,ypo,bP,wpo,Apo,Lpo,au,iee,Bpo,xpo,vP,kpo,Rpo,Spo,nu,dee,Ppo,$po,TP,Ipo,Dpo,jpo,su,cee,Npo,qpo,FP,Gpo,Opo,Xpo,lu,fee,Vpo,zpo,CP,Wpo,Qpo,Hpo,iu,mee,Upo,Jpo,MP,Ypo,Kpo,Zpo,du,gee,e_o,o_o,EP,r_o,t_o,a_o,cu,hee,n_o,s_o,yP,l_o,i_o,d_o,fu,pee,c_o,f_o,wP,m_o,g_o,h_o,mu,_ee,p_o,__o,AP,u_o,b_o,v_o,gu,uee,T_o,F_o,LP,C_o,M_o,E_o,hu,bee,y_o,w_o,BP,A_o,L_o,B_o,pu,vee,x_o,k_o,xP,R_o,S_o,P_o,_u,Tee,$_o,I_o,kP,D_o,j_o,N_o,uu,Fee,q_o,G_o,RP,O_o,X_o,V_o,bu,Cee,z_o,W_o,SP,Q_o,H_o,U_o,vu,Mee,J_o,Y_o,PP,K_o,Z_o,euo,Tu,Eee,ouo,ruo,$P,tuo,auo,nuo,Fu,yee,suo,luo,IP,iuo,duo,cuo,Cu,wee,fuo,muo,DP,guo,huo,puo,Mu,Aee,_uo,uuo,jP,buo,vuo,Tuo,Eu,Lee,Fuo,Cuo,NP,Muo,Euo,yuo,yu,Bee,wuo,Auo,qP,Luo,Buo,xuo,wu,xee,kuo,Ruo,GP,Suo,Puo,$uo,Au,kee,Iuo,Duo,OP,juo,Nuo,quo,Lu,Ree,Guo,Ouo,XP,Xuo,Vuo,zuo,Bu,Wuo,See,Quo,Huo,Pee,Uuo,Juo,$ee,Yuo,Kuo,EE,Z7e,Ki,xu,Iee,yE,Zuo,Dee,e2o,eBe,Jo,wE,o2o,Zi,r2o,jee,t2o,a2o,Nee,n2o,s2o,l2o,AE,i2o,qee,d2o,c2o,f2o,Xr,LE,m2o,Gee,g2o,h2o,ed,p2o,Oee,_2o,u2o,Xee,b2o,v2o,T2o,Vee,F2o,C2o,BE,M2o,$e,xE,E2o,zee,y2o,w2o,Oa,A2o,Wee,L2o,B2o,Qee,x2o,k2o,Hee,R2o,S2o,P2o,I,ku,Uee,$2o,I2o,VP,D2o,j2o,N2o,Ru,Jee,q2o,G2o,zP,O2o,X2o,V2o,Su,Yee,z2o,W2o,WP,Q2o,H2o,U2o,Pu,Kee,J2o,Y2o,QP,K2o,Z2o,e1o,$u,Zee,o1o,r1o,HP,t1o,a1o,n1o,Iu,eoe,s1o,l1o,UP,i1o,d1o,c1o,Du,ooe,f1o,m1o,JP,g1o,h1o,p1o,ju,roe,_1o,u1o,YP,b1o,v1o,T1o,Nu,toe,F1o,C1o,KP,M1o,E1o,y1o,qu,aoe,w1o,A1o,ZP,L1o,B1o,x1o,Gu,noe,k1o,R1o,e$,S1o,P1o,$1o,Ou,soe,I1o,D1o,o$,j1o,N1o,q1o,Xu,loe,G1o,O1o,r$,X1o,V1o,z1o,Vu,ioe,W1o,Q1o,t$,H1o,U1o,J1o,zu,doe,Y1o,K1o,a$,Z1o,ebo,obo,Wu,coe,rbo,tbo,n$,abo,nbo,sbo,Qu,foe,lbo,ibo,s$,dbo,cbo,fbo,Hu,moe,mbo,gbo,l$,hbo,pbo,_bo,Uu,goe,ubo,bbo,i$,vbo,Tbo,Fbo,Ju,hoe,Cbo,Mbo,d$,Ebo,ybo,wbo,Yu,poe,Abo,Lbo,c$,Bbo,xbo,kbo,Ku,_oe,Rbo,Sbo,f$,Pbo,$bo,Ibo,Zu,uoe,Dbo,jbo,m$,Nbo,qbo,Gbo,e2,boe,Obo,Xbo,g$,Vbo,zbo,Wbo,o2,voe,Qbo,Hbo,h$,Ubo,Jbo,Ybo,r2,Toe,Kbo,Zbo,p$,e3o,o3o,r3o,t2,Foe,t3o,a3o,_$,n3o,s3o,l3o,a2,Coe,i3o,d3o,u$,c3o,f3o,m3o,n2,Moe,g3o,h3o,b$,p3o,_3o,u3o,s2,Eoe,b3o,v3o,v$,T3o,F3o,C3o,l2,yoe,M3o,E3o,woe,y3o,w3o,A3o,i2,Aoe,L3o,B3o,T$,x3o,k3o,R3o,d2,Loe,S3o,P3o,F$,$3o,I3o,D3o,c2,Boe,j3o,N3o,C$,q3o,G3o,O3o,f2,xoe,X3o,V3o,M$,z3o,W3o,Q3o,m2,H3o,koe,U3o,J3o,Roe,Y3o,K3o,Soe,Z3o,e5o,kE,oBe,od,g2,Poe,RE,o5o,$oe,r5o,rBe,Yo,SE,t5o,rd,a5o,Ioe,n5o,s5o,Doe,l5o,i5o,d5o,PE,c5o,joe,f5o,m5o,g5o,Vr,$E,h5o,Noe,p5o,_5o,td,u5o,qoe,b5o,v5o,Goe,T5o,F5o,C5o,Ooe,M5o,E5o,IE,y5o,Ie,DE,w5o,Xoe,A5o,L5o,Xa,B5o,Voe,x5o,k5o,zoe,R5o,S5o,Woe,P5o,$5o,I5o,ne,h2,Qoe,D5o,j5o,E$,N5o,q5o,G5o,p2,Hoe,O5o,X5o,y$,V5o,z5o,W5o,_2,Uoe,Q5o,H5o,w$,U5o,J5o,Y5o,u2,Joe,K5o,Z5o,A$,evo,ovo,rvo,b2,Yoe,tvo,avo,L$,nvo,svo,lvo,v2,Koe,ivo,dvo,B$,cvo,fvo,mvo,T2,Zoe,gvo,hvo,x$,pvo,_vo,uvo,F2,ere,bvo,vvo,k$,Tvo,Fvo,Cvo,C2,ore,Mvo,Evo,R$,yvo,wvo,Avo,M2,rre,Lvo,Bvo,S$,xvo,kvo,Rvo,E2,tre,Svo,Pvo,P$,$vo,Ivo,Dvo,y2,are,jvo,Nvo,$$,qvo,Gvo,Ovo,w2,nre,Xvo,Vvo,I$,zvo,Wvo,Qvo,A2,sre,Hvo,Uvo,D$,Jvo,Yvo,Kvo,L2,lre,Zvo,eTo,j$,oTo,rTo,tTo,B2,ire,aTo,nTo,N$,sTo,lTo,iTo,x2,dTo,dre,cTo,fTo,cre,mTo,gTo,fre,hTo,pTo,jE,tBe,ad,k2,mre,NE,_To,gre,uTo,aBe,Ko,qE,bTo,nd,vTo,hre,TTo,FTo,pre,CTo,MTo,ETo,GE,yTo,_re,wTo,ATo,LTo,zr,OE,BTo,ure,xTo,kTo,sd,RTo,bre,STo,PTo,vre,$To,ITo,DTo,Tre,jTo,NTo,XE,qTo,De,VE,GTo,Fre,OTo,XTo,Va,VTo,Cre,zTo,WTo,Mre,QTo,HTo,Ere,UTo,JTo,YTo,A,R2,yre,KTo,ZTo,q$,eFo,oFo,rFo,S2,wre,tFo,aFo,G$,nFo,sFo,lFo,P2,Are,iFo,dFo,O$,cFo,fFo,mFo,$2,Lre,gFo,hFo,X$,pFo,_Fo,uFo,I2,Bre,bFo,vFo,V$,TFo,FFo,CFo,D2,xre,MFo,EFo,z$,yFo,wFo,AFo,j2,kre,LFo,BFo,W$,xFo,kFo,RFo,N2,Rre,SFo,PFo,Q$,$Fo,IFo,DFo,q2,Sre,jFo,NFo,H$,qFo,GFo,OFo,G2,Pre,XFo,VFo,U$,zFo,WFo,QFo,O2,$re,HFo,UFo,J$,JFo,YFo,KFo,X2,Ire,ZFo,e9o,Y$,o9o,r9o,t9o,V2,Dre,a9o,n9o,K$,s9o,l9o,i9o,z2,jre,d9o,c9o,Z$,f9o,m9o,g9o,W2,Nre,h9o,p9o,eI,_9o,u9o,b9o,Q2,qre,v9o,T9o,oI,F9o,C9o,M9o,H2,Gre,E9o,y9o,rI,w9o,A9o,L9o,U2,Ore,B9o,x9o,tI,k9o,R9o,S9o,J2,Xre,P9o,$9o,aI,I9o,D9o,j9o,Y2,Vre,N9o,q9o,nI,G9o,O9o,X9o,K2,zre,V9o,z9o,sI,W9o,Q9o,H9o,Z2,Wre,U9o,J9o,lI,Y9o,K9o,Z9o,e1,Qre,eCo,oCo,iI,rCo,tCo,aCo,o1,Hre,nCo,sCo,dI,lCo,iCo,dCo,r1,Ure,cCo,fCo,cI,mCo,gCo,hCo,t1,Jre,pCo,_Co,fI,uCo,bCo,vCo,a1,Yre,TCo,FCo,mI,CCo,MCo,ECo,n1,Kre,yCo,wCo,gI,ACo,LCo,BCo,s1,Zre,xCo,kCo,hI,RCo,SCo,PCo,l1,ete,$Co,ICo,pI,DCo,jCo,NCo,i1,ote,qCo,GCo,_I,OCo,XCo,VCo,d1,rte,zCo,WCo,uI,QCo,HCo,UCo,c1,tte,JCo,YCo,bI,KCo,ZCo,e4o,f1,ate,o4o,r4o,vI,t4o,a4o,n4o,m1,nte,s4o,l4o,TI,i4o,d4o,c4o,g1,ste,f4o,m4o,FI,g4o,h4o,p4o,h1,lte,_4o,u4o,CI,b4o,v4o,T4o,p1,ite,F4o,C4o,MI,M4o,E4o,y4o,_1,dte,w4o,A4o,EI,L4o,B4o,x4o,u1,cte,k4o,R4o,yI,S4o,P4o,$4o,b1,fte,I4o,D4o,wI,j4o,N4o,q4o,v1,mte,G4o,O4o,AI,X4o,V4o,z4o,T1,gte,W4o,Q4o,LI,H4o,U4o,J4o,F1,hte,Y4o,K4o,BI,Z4o,eMo,oMo,C1,pte,rMo,tMo,xI,aMo,nMo,sMo,M1,_te,lMo,iMo,kI,dMo,cMo,fMo,E1,mMo,ute,gMo,hMo,bte,pMo,_Mo,vte,uMo,bMo,zE,nBe,ld,y1,Tte,WE,vMo,Fte,TMo,sBe,Zo,QE,FMo,id,CMo,Cte,MMo,EMo,Mte,yMo,wMo,AMo,HE,LMo,Ete,BMo,xMo,kMo,Wr,UE,RMo,yte,SMo,PMo,dd,$Mo,wte,IMo,DMo,Ate,jMo,NMo,qMo,Lte,GMo,OMo,JE,XMo,je,YE,VMo,Bte,zMo,WMo,za,QMo,xte,HMo,UMo,kte,JMo,YMo,Rte,KMo,ZMo,eEo,G,w1,Ste,oEo,rEo,RI,tEo,aEo,nEo,A1,Pte,sEo,lEo,SI,iEo,dEo,cEo,L1,$te,fEo,mEo,PI,gEo,hEo,pEo,B1,Ite,_Eo,uEo,$I,bEo,vEo,TEo,x1,Dte,FEo,CEo,II,MEo,EEo,yEo,k1,jte,wEo,AEo,DI,LEo,BEo,xEo,R1,Nte,kEo,REo,jI,SEo,PEo,$Eo,S1,qte,IEo,DEo,NI,jEo,NEo,qEo,P1,Gte,GEo,OEo,qI,XEo,VEo,zEo,$1,Ote,WEo,QEo,GI,HEo,UEo,JEo,I1,Xte,YEo,KEo,OI,ZEo,eyo,oyo,D1,Vte,ryo,tyo,XI,ayo,nyo,syo,j1,zte,lyo,iyo,VI,dyo,cyo,fyo,N1,Wte,myo,gyo,zI,hyo,pyo,_yo,q1,Qte,uyo,byo,WI,vyo,Tyo,Fyo,G1,Hte,Cyo,Myo,QI,Eyo,yyo,wyo,O1,Ute,Ayo,Lyo,HI,Byo,xyo,kyo,X1,Jte,Ryo,Syo,UI,Pyo,$yo,Iyo,V1,Yte,Dyo,jyo,JI,Nyo,qyo,Gyo,z1,Kte,Oyo,Xyo,YI,Vyo,zyo,Wyo,W1,Zte,Qyo,Hyo,KI,Uyo,Jyo,Yyo,Q1,eae,Kyo,Zyo,ZI,ewo,owo,rwo,H1,oae,two,awo,eD,nwo,swo,lwo,U1,rae,iwo,dwo,oD,cwo,fwo,mwo,J1,tae,gwo,hwo,rD,pwo,_wo,uwo,Y1,aae,bwo,vwo,tD,Two,Fwo,Cwo,K1,nae,Mwo,Ewo,aD,ywo,wwo,Awo,Z1,sae,Lwo,Bwo,nD,xwo,kwo,Rwo,eb,Swo,lae,Pwo,$wo,iae,Iwo,Dwo,dae,jwo,Nwo,KE,lBe,cd,ob,cae,ZE,qwo,fae,Gwo,iBe,er,ey,Owo,fd,Xwo,mae,Vwo,zwo,gae,Wwo,Qwo,Hwo,oy,Uwo,hae,Jwo,Ywo,Kwo,Qr,ry,Zwo,pae,e6o,o6o,md,r6o,_ae,t6o,a6o,uae,n6o,s6o,l6o,bae,i6o,d6o,ty,c6o,Ne,ay,f6o,vae,m6o,g6o,Wa,h6o,Tae,p6o,_6o,Fae,u6o,b6o,Cae,v6o,T6o,F6o,na,rb,Mae,C6o,M6o,sD,E6o,y6o,w6o,tb,Eae,A6o,L6o,lD,B6o,x6o,k6o,ab,yae,R6o,S6o,iD,P6o,$6o,I6o,nb,wae,D6o,j6o,dD,N6o,q6o,G6o,sb,Aae,O6o,X6o,cD,V6o,z6o,W6o,lb,Q6o,Lae,H6o,U6o,Bae,J6o,Y6o,xae,K6o,Z6o,ny,dBe,gd,ib,kae,sy,eAo,Rae,oAo,cBe,or,ly,rAo,hd,tAo,Sae,aAo,nAo,Pae,sAo,lAo,iAo,iy,dAo,$ae,cAo,fAo,mAo,Hr,dy,gAo,Iae,hAo,pAo,pd,_Ao,Dae,uAo,bAo,jae,vAo,TAo,FAo,Nae,CAo,MAo,cy,EAo,qe,fy,yAo,qae,wAo,AAo,Qa,LAo,Gae,BAo,xAo,Oae,kAo,RAo,Xae,SAo,PAo,$Ao,N,db,Vae,IAo,DAo,fD,jAo,NAo,qAo,cb,zae,GAo,OAo,mD,XAo,VAo,zAo,fb,Wae,WAo,QAo,gD,HAo,UAo,JAo,mb,Qae,YAo,KAo,hD,ZAo,e0o,o0o,gb,Hae,r0o,t0o,pD,a0o,n0o,s0o,hb,Uae,l0o,i0o,_D,d0o,c0o,f0o,pb,Jae,m0o,g0o,uD,h0o,p0o,_0o,_b,Yae,u0o,b0o,bD,v0o,T0o,F0o,ub,Kae,C0o,M0o,vD,E0o,y0o,w0o,bb,Zae,A0o,L0o,TD,B0o,x0o,k0o,vb,ene,R0o,S0o,FD,P0o,$0o,I0o,Tb,one,D0o,j0o,CD,N0o,q0o,G0o,Fb,rne,O0o,X0o,MD,V0o,z0o,W0o,Cb,tne,Q0o,H0o,ED,U0o,J0o,Y0o,Mb,ane,K0o,Z0o,yD,eLo,oLo,rLo,Eb,nne,tLo,aLo,wD,nLo,sLo,lLo,yb,sne,iLo,dLo,AD,cLo,fLo,mLo,wb,lne,gLo,hLo,LD,pLo,_Lo,uLo,Ab,ine,bLo,vLo,BD,TLo,FLo,CLo,Lb,dne,MLo,ELo,xD,yLo,wLo,ALo,Bb,cne,LLo,BLo,kD,xLo,kLo,RLo,xb,fne,SLo,PLo,RD,$Lo,ILo,DLo,kb,mne,jLo,NLo,SD,qLo,GLo,OLo,Rb,gne,XLo,VLo,PD,zLo,WLo,QLo,Sb,hne,HLo,ULo,$D,JLo,YLo,KLo,Pb,pne,ZLo,e8o,ID,o8o,r8o,t8o,$b,_ne,a8o,n8o,DD,s8o,l8o,i8o,Ib,une,d8o,c8o,jD,f8o,m8o,g8o,Db,bne,h8o,p8o,ND,_8o,u8o,b8o,jb,vne,v8o,T8o,qD,F8o,C8o,M8o,Nb,Tne,E8o,y8o,GD,w8o,A8o,L8o,qb,Fne,B8o,x8o,OD,k8o,R8o,S8o,Gb,Cne,P8o,$8o,XD,I8o,D8o,j8o,Ob,N8o,Mne,q8o,G8o,Ene,O8o,X8o,yne,V8o,z8o,my,fBe,_d,Xb,wne,gy,W8o,Ane,Q8o,mBe,rr,hy,H8o,ud,U8o,Lne,J8o,Y8o,Bne,K8o,Z8o,e7o,py,o7o,xne,r7o,t7o,a7o,Ur,_y,n7o,kne,s7o,l7o,bd,i7o,Rne,d7o,c7o,Sne,f7o,m7o,g7o,Pne,h7o,p7o,uy,_7o,Ge,by,u7o,$ne,b7o,v7o,Ha,T7o,Ine,F7o,C7o,Dne,M7o,E7o,jne,y7o,w7o,A7o,R,Vb,Nne,L7o,B7o,VD,x7o,k7o,R7o,zb,qne,S7o,P7o,zD,$7o,I7o,D7o,Wb,Gne,j7o,N7o,WD,q7o,G7o,O7o,Qb,One,X7o,V7o,QD,z7o,W7o,Q7o,Hb,Xne,H7o,U7o,HD,J7o,Y7o,K7o,Ub,Vne,Z7o,eBo,UD,oBo,rBo,tBo,Jb,zne,aBo,nBo,JD,sBo,lBo,iBo,Yb,Wne,dBo,cBo,YD,fBo,mBo,gBo,Kb,Qne,hBo,pBo,KD,_Bo,uBo,bBo,Zb,Hne,vBo,TBo,ZD,FBo,CBo,MBo,e3,Une,EBo,yBo,ej,wBo,ABo,LBo,o3,Jne,BBo,xBo,oj,kBo,RBo,SBo,r3,Yne,PBo,$Bo,rj,IBo,DBo,jBo,t3,Kne,NBo,qBo,tj,GBo,OBo,XBo,a3,Zne,VBo,zBo,aj,WBo,QBo,HBo,n3,ese,UBo,JBo,nj,YBo,KBo,ZBo,s3,ose,exo,oxo,sj,rxo,txo,axo,l3,rse,nxo,sxo,lj,lxo,ixo,dxo,i3,tse,cxo,fxo,ij,mxo,gxo,hxo,d3,ase,pxo,_xo,dj,uxo,bxo,vxo,c3,nse,Txo,Fxo,cj,Cxo,Mxo,Exo,f3,sse,yxo,wxo,fj,Axo,Lxo,Bxo,m3,lse,xxo,kxo,mj,Rxo,Sxo,Pxo,g3,ise,$xo,Ixo,gj,Dxo,jxo,Nxo,h3,dse,qxo,Gxo,hj,Oxo,Xxo,Vxo,p3,cse,zxo,Wxo,pj,Qxo,Hxo,Uxo,_3,fse,Jxo,Yxo,_j,Kxo,Zxo,eko,u3,mse,oko,rko,uj,tko,ako,nko,b3,gse,sko,lko,bj,iko,dko,cko,v3,hse,fko,mko,vj,gko,hko,pko,T3,pse,_ko,uko,Tj,bko,vko,Tko,F3,_se,Fko,Cko,Fj,Mko,Eko,yko,C3,use,wko,Ako,Cj,Lko,Bko,xko,M3,bse,kko,Rko,Mj,Sko,Pko,$ko,E3,vse,Iko,Dko,Ej,jko,Nko,qko,y3,Tse,Gko,Oko,yj,Xko,Vko,zko,w3,Fse,Wko,Qko,wj,Hko,Uko,Jko,A3,Cse,Yko,Kko,Aj,Zko,eRo,oRo,L3,Mse,rRo,tRo,Lj,aRo,nRo,sRo,B3,lRo,Ese,iRo,dRo,yse,cRo,fRo,wse,mRo,gRo,vy,gBe,vd,x3,Ase,Ty,hRo,Lse,pRo,hBe,tr,Fy,_Ro,Td,uRo,Bse,bRo,vRo,xse,TRo,FRo,CRo,Cy,MRo,kse,ERo,yRo,wRo,Jr,My,ARo,Rse,LRo,BRo,Fd,xRo,Sse,kRo,RRo,Pse,SRo,PRo,$Ro,$se,IRo,DRo,Ey,jRo,Oe,yy,NRo,Ise,qRo,GRo,Ua,ORo,Dse,XRo,VRo,jse,zRo,WRo,Nse,QRo,HRo,URo,qse,k3,Gse,JRo,YRo,Bj,KRo,ZRo,eSo,R3,oSo,Ose,rSo,tSo,Xse,aSo,nSo,Vse,sSo,lSo,wy,pBe,Cd,S3,zse,Ay,iSo,Wse,dSo,_Be,ar,Ly,cSo,Md,fSo,Qse,mSo,gSo,Hse,hSo,pSo,_So,By,uSo,Use,bSo,vSo,TSo,Yr,xy,FSo,Jse,CSo,MSo,Ed,ESo,Yse,ySo,wSo,Kse,ASo,LSo,BSo,Zse,xSo,kSo,ky,RSo,Xe,Ry,SSo,ele,PSo,$So,Ja,ISo,ole,DSo,jSo,rle,NSo,qSo,tle,GSo,OSo,XSo,be,P3,ale,VSo,zSo,xj,WSo,QSo,HSo,$3,nle,USo,JSo,kj,YSo,KSo,ZSo,$s,sle,ePo,oPo,Rj,rPo,tPo,Sj,aPo,nPo,sPo,I3,lle,lPo,iPo,Pj,dPo,cPo,fPo,la,ile,mPo,gPo,$j,hPo,pPo,Ij,_Po,uPo,Dj,bPo,vPo,TPo,D3,dle,FPo,CPo,jj,MPo,EPo,yPo,j3,cle,wPo,APo,Nj,LPo,BPo,xPo,N3,fle,kPo,RPo,qj,SPo,PPo,$Po,q3,mle,IPo,DPo,Gj,jPo,NPo,qPo,G3,GPo,gle,OPo,XPo,hle,VPo,zPo,ple,WPo,QPo,Sy,uBe,yd,O3,_le,Py,HPo,ule,UPo,bBe,nr,$y,JPo,wd,YPo,ble,KPo,ZPo,vle,e$o,o$o,r$o,Iy,t$o,Tle,a$o,n$o,s$o,Kr,Dy,l$o,Fle,i$o,d$o,Ad,c$o,Cle,f$o,m$o,Mle,g$o,h$o,p$o,Ele,_$o,u$o,jy,b$o,Ve,Ny,v$o,yle,T$o,F$o,Ya,C$o,wle,M$o,E$o,Ale,y$o,w$o,Lle,A$o,L$o,B$o,Ble,X3,xle,x$o,k$o,Oj,R$o,S$o,P$o,V3,$$o,kle,I$o,D$o,Rle,j$o,N$o,Sle,q$o,G$o,qy,vBe,Ld,z3,Ple,Gy,O$o,$le,X$o,TBe,sr,Oy,V$o,Bd,z$o,Ile,W$o,Q$o,Dle,H$o,U$o,J$o,Xy,Y$o,jle,K$o,Z$o,eIo,Zr,Vy,oIo,Nle,rIo,tIo,xd,aIo,qle,nIo,sIo,Gle,lIo,iIo,dIo,Ole,cIo,fIo,zy,mIo,ze,Wy,gIo,Xle,hIo,pIo,Ka,_Io,Vle,uIo,bIo,zle,vIo,TIo,Wle,FIo,CIo,MIo,Ae,W3,Qle,EIo,yIo,Xj,wIo,AIo,LIo,Q3,Hle,BIo,xIo,Vj,kIo,RIo,SIo,H3,Ule,PIo,$Io,zj,IIo,DIo,jIo,U3,Jle,NIo,qIo,Wj,GIo,OIo,XIo,J3,Yle,VIo,zIo,Qj,WIo,QIo,HIo,Y3,Kle,UIo,JIo,Hj,YIo,KIo,ZIo,K3,Zle,eDo,oDo,Uj,rDo,tDo,aDo,Z3,eie,nDo,sDo,Jj,lDo,iDo,dDo,e5,cDo,oie,fDo,mDo,rie,gDo,hDo,tie,pDo,_Do,Qy,FBe,kd,o5,aie,Hy,uDo,nie,bDo,CBe,lr,Uy,vDo,Rd,TDo,sie,FDo,CDo,lie,MDo,EDo,yDo,Jy,wDo,iie,ADo,LDo,BDo,et,Yy,xDo,die,kDo,RDo,Sd,SDo,cie,PDo,$Do,fie,IDo,DDo,jDo,mie,NDo,qDo,Ky,GDo,We,Zy,ODo,gie,XDo,VDo,Za,zDo,hie,WDo,QDo,pie,HDo,UDo,_ie,JDo,YDo,KDo,en,r5,uie,ZDo,ejo,Yj,ojo,rjo,tjo,t5,bie,ajo,njo,Kj,sjo,ljo,ijo,a5,vie,djo,cjo,Zj,fjo,mjo,gjo,n5,Tie,hjo,pjo,eN,_jo,ujo,bjo,s5,vjo,Fie,Tjo,Fjo,Cie,Cjo,Mjo,Mie,Ejo,yjo,ew,MBe,Pd,l5,Eie,ow,wjo,yie,Ajo,EBe,ir,rw,Ljo,$d,Bjo,wie,xjo,kjo,Aie,Rjo,Sjo,Pjo,tw,$jo,Lie,Ijo,Djo,jjo,ot,aw,Njo,Bie,qjo,Gjo,Id,Ojo,xie,Xjo,Vjo,kie,zjo,Wjo,Qjo,Rie,Hjo,Ujo,nw,Jjo,Qe,sw,Yjo,Sie,Kjo,Zjo,on,eNo,Pie,oNo,rNo,$ie,tNo,aNo,Iie,nNo,sNo,lNo,Le,i5,Die,iNo,dNo,oN,cNo,fNo,mNo,d5,jie,gNo,hNo,rN,pNo,_No,uNo,c5,Nie,bNo,vNo,tN,TNo,FNo,CNo,f5,qie,MNo,ENo,aN,yNo,wNo,ANo,m5,Gie,LNo,BNo,nN,xNo,kNo,RNo,g5,Oie,SNo,PNo,sN,$No,INo,DNo,h5,Xie,jNo,NNo,lN,qNo,GNo,ONo,p5,Vie,XNo,VNo,iN,zNo,WNo,QNo,_5,HNo,zie,UNo,JNo,Wie,YNo,KNo,Qie,ZNo,eqo,lw,yBe,Dd,u5,Hie,iw,oqo,Uie,rqo,wBe,dr,dw,tqo,jd,aqo,Jie,nqo,sqo,Yie,lqo,iqo,dqo,cw,cqo,Kie,fqo,mqo,gqo,rt,fw,hqo,Zie,pqo,_qo,Nd,uqo,ede,bqo,vqo,ode,Tqo,Fqo,Cqo,rde,Mqo,Eqo,mw,yqo,He,gw,wqo,tde,Aqo,Lqo,rn,Bqo,ade,xqo,kqo,nde,Rqo,Sqo,sde,Pqo,$qo,Iqo,hw,b5,lde,Dqo,jqo,dN,Nqo,qqo,Gqo,v5,ide,Oqo,Xqo,cN,Vqo,zqo,Wqo,T5,Qqo,dde,Hqo,Uqo,cde,Jqo,Yqo,fde,Kqo,Zqo,pw,ABe,qd,F5,mde,_w,eGo,gde,oGo,LBe,cr,uw,rGo,Gd,tGo,hde,aGo,nGo,pde,sGo,lGo,iGo,bw,dGo,_de,cGo,fGo,mGo,tt,vw,gGo,ude,hGo,pGo,Od,_Go,bde,uGo,bGo,vde,vGo,TGo,FGo,Tde,CGo,MGo,Tw,EGo,Ue,Fw,yGo,Fde,wGo,AGo,tn,LGo,Cde,BGo,xGo,Mde,kGo,RGo,Ede,SGo,PGo,$Go,an,C5,yde,IGo,DGo,fN,jGo,NGo,qGo,M5,wde,GGo,OGo,mN,XGo,VGo,zGo,E5,Ade,WGo,QGo,gN,HGo,UGo,JGo,y5,Lde,YGo,KGo,hN,ZGo,eOo,oOo,w5,rOo,Bde,tOo,aOo,xde,nOo,sOo,kde,lOo,iOo,Cw,BBe,Xd,A5,Rde,Mw,dOo,Sde,cOo,xBe,fr,Ew,fOo,Vd,mOo,Pde,gOo,hOo,$de,pOo,_Oo,uOo,yw,bOo,Ide,vOo,TOo,FOo,at,ww,COo,Dde,MOo,EOo,zd,yOo,jde,wOo,AOo,Nde,LOo,BOo,xOo,qde,kOo,ROo,Aw,SOo,Je,Lw,POo,Gde,$Oo,IOo,nn,DOo,Ode,jOo,NOo,Xde,qOo,GOo,Vde,OOo,XOo,VOo,Wd,L5,zde,zOo,WOo,pN,QOo,HOo,UOo,B5,Wde,JOo,YOo,_N,KOo,ZOo,eXo,x5,Qde,oXo,rXo,uN,tXo,aXo,nXo,k5,sXo,Hde,lXo,iXo,Ude,dXo,cXo,Jde,fXo,mXo,Bw,kBe,Qd,R5,Yde,xw,gXo,Kde,hXo,RBe,mr,kw,pXo,Hd,_Xo,Zde,uXo,bXo,ece,vXo,TXo,FXo,Rw,CXo,oce,MXo,EXo,yXo,nt,Sw,wXo,rce,AXo,LXo,Ud,BXo,tce,xXo,kXo,ace,RXo,SXo,PXo,nce,$Xo,IXo,Pw,DXo,Ye,$w,jXo,sce,NXo,qXo,sn,GXo,lce,OXo,XXo,ice,VXo,zXo,dce,WXo,QXo,HXo,cce,S5,fce,UXo,JXo,bN,YXo,KXo,ZXo,P5,eVo,mce,oVo,rVo,gce,tVo,aVo,hce,nVo,sVo,Iw,SBe,Jd,$5,pce,Dw,lVo,_ce,iVo,PBe,gr,jw,dVo,Yd,cVo,uce,fVo,mVo,bce,gVo,hVo,pVo,Nw,_Vo,vce,uVo,bVo,vVo,st,qw,TVo,Tce,FVo,CVo,Kd,MVo,Fce,EVo,yVo,Cce,wVo,AVo,LVo,Mce,BVo,xVo,Gw,kVo,Ke,Ow,RVo,Ece,SVo,PVo,ln,$Vo,yce,IVo,DVo,wce,jVo,NVo,Ace,qVo,GVo,OVo,Lce,I5,Bce,XVo,VVo,vN,zVo,WVo,QVo,D5,HVo,xce,UVo,JVo,kce,YVo,KVo,Rce,ZVo,ezo,Xw,$Be,Zd,j5,Sce,Vw,ozo,Pce,rzo,IBe,hr,zw,tzo,ec,azo,$ce,nzo,szo,Ice,lzo,izo,dzo,Ww,czo,Dce,fzo,mzo,gzo,lt,Qw,hzo,jce,pzo,_zo,oc,uzo,Nce,bzo,vzo,qce,Tzo,Fzo,Czo,Gce,Mzo,Ezo,Hw,yzo,Ze,Uw,wzo,Oce,Azo,Lzo,dn,Bzo,Xce,xzo,kzo,Vce,Rzo,Szo,zce,Pzo,$zo,Izo,Jw,N5,Wce,Dzo,jzo,TN,Nzo,qzo,Gzo,q5,Qce,Ozo,Xzo,FN,Vzo,zzo,Wzo,G5,Qzo,Hce,Hzo,Uzo,Uce,Jzo,Yzo,Jce,Kzo,Zzo,Yw,DBe,rc,O5,Yce,Kw,eWo,Kce,oWo,jBe,pr,Zw,rWo,tc,tWo,Zce,aWo,nWo,efe,sWo,lWo,iWo,e6,dWo,ofe,cWo,fWo,mWo,it,o6,gWo,rfe,hWo,pWo,ac,_Wo,tfe,uWo,bWo,afe,vWo,TWo,FWo,nfe,CWo,MWo,r6,EWo,go,t6,yWo,sfe,wWo,AWo,cn,LWo,lfe,BWo,xWo,ife,kWo,RWo,dfe,SWo,PWo,$Wo,B,X5,cfe,IWo,DWo,CN,jWo,NWo,qWo,V5,ffe,GWo,OWo,MN,XWo,VWo,zWo,z5,mfe,WWo,QWo,EN,HWo,UWo,JWo,W5,gfe,YWo,KWo,yN,ZWo,eQo,oQo,Q5,hfe,rQo,tQo,wN,aQo,nQo,sQo,H5,pfe,lQo,iQo,AN,dQo,cQo,fQo,U5,_fe,mQo,gQo,LN,hQo,pQo,_Qo,J5,ufe,uQo,bQo,BN,vQo,TQo,FQo,Y5,bfe,CQo,MQo,xN,EQo,yQo,wQo,K5,vfe,AQo,LQo,kN,BQo,xQo,kQo,Z5,Tfe,RQo,SQo,RN,PQo,$Qo,IQo,ev,Ffe,DQo,jQo,SN,NQo,qQo,GQo,ov,Cfe,OQo,XQo,PN,VQo,zQo,WQo,rv,Mfe,QQo,HQo,$N,UQo,JQo,YQo,tv,Efe,KQo,ZQo,IN,eHo,oHo,rHo,av,yfe,tHo,aHo,DN,nHo,sHo,lHo,Is,wfe,iHo,dHo,jN,cHo,fHo,NN,mHo,gHo,hHo,nv,Afe,pHo,_Ho,qN,uHo,bHo,vHo,sv,Lfe,THo,FHo,GN,CHo,MHo,EHo,lv,Bfe,yHo,wHo,ON,AHo,LHo,BHo,iv,xfe,xHo,kHo,XN,RHo,SHo,PHo,dv,kfe,$Ho,IHo,VN,DHo,jHo,NHo,cv,Rfe,qHo,GHo,zN,OHo,XHo,VHo,fv,Sfe,zHo,WHo,WN,QHo,HHo,UHo,mv,Pfe,JHo,YHo,QN,KHo,ZHo,eUo,gv,$fe,oUo,rUo,HN,tUo,aUo,nUo,hv,Ife,sUo,lUo,UN,iUo,dUo,cUo,pv,Dfe,fUo,mUo,JN,gUo,hUo,pUo,_v,jfe,_Uo,uUo,YN,bUo,vUo,TUo,uv,Nfe,FUo,CUo,KN,MUo,EUo,yUo,bv,qfe,wUo,AUo,ZN,LUo,BUo,xUo,vv,Gfe,kUo,RUo,eq,SUo,PUo,$Uo,Tv,Ofe,IUo,DUo,oq,jUo,NUo,qUo,Fv,Xfe,GUo,OUo,rq,XUo,VUo,zUo,Cv,Vfe,WUo,QUo,tq,HUo,UUo,JUo,Mv,zfe,YUo,KUo,aq,ZUo,eJo,oJo,Ev,Wfe,rJo,tJo,nq,aJo,nJo,sJo,yv,Qfe,lJo,iJo,sq,dJo,cJo,fJo,wv,Hfe,mJo,gJo,lq,hJo,pJo,_Jo,Av,Ufe,uJo,bJo,iq,vJo,TJo,FJo,Lv,Jfe,CJo,MJo,dq,EJo,yJo,wJo,Bv,Yfe,AJo,LJo,cq,BJo,xJo,kJo,Kfe,RJo,SJo,a6,NBe,nc,xv,Zfe,n6,PJo,eme,$Jo,qBe,_r,s6,IJo,sc,DJo,ome,jJo,NJo,rme,qJo,GJo,OJo,l6,XJo,tme,VJo,zJo,WJo,dt,i6,QJo,ame,HJo,UJo,lc,JJo,nme,YJo,KJo,sme,ZJo,eYo,oYo,lme,rYo,tYo,d6,aYo,ho,c6,nYo,ime,sYo,lYo,fn,iYo,dme,dYo,cYo,cme,fYo,mYo,fme,gYo,hYo,pYo,H,kv,mme,_Yo,uYo,fq,bYo,vYo,TYo,Rv,gme,FYo,CYo,mq,MYo,EYo,yYo,Sv,hme,wYo,AYo,gq,LYo,BYo,xYo,Pv,pme,kYo,RYo,hq,SYo,PYo,$Yo,$v,_me,IYo,DYo,pq,jYo,NYo,qYo,Iv,ume,GYo,OYo,_q,XYo,VYo,zYo,Dv,bme,WYo,QYo,uq,HYo,UYo,JYo,jv,vme,YYo,KYo,bq,ZYo,eKo,oKo,Nv,Tme,rKo,tKo,vq,aKo,nKo,sKo,qv,Fme,lKo,iKo,Tq,dKo,cKo,fKo,Gv,Cme,mKo,gKo,Fq,hKo,pKo,_Ko,Ov,Mme,uKo,bKo,Cq,vKo,TKo,FKo,Xv,Eme,CKo,MKo,Mq,EKo,yKo,wKo,Vv,yme,AKo,LKo,Eq,BKo,xKo,kKo,zv,wme,RKo,SKo,yq,PKo,$Ko,IKo,Wv,Ame,DKo,jKo,wq,NKo,qKo,GKo,Qv,Lme,OKo,XKo,Aq,VKo,zKo,WKo,Hv,Bme,QKo,HKo,Lq,UKo,JKo,YKo,Uv,xme,KKo,ZKo,Bq,eZo,oZo,rZo,Jv,kme,tZo,aZo,xq,nZo,sZo,lZo,Yv,Rme,iZo,dZo,kq,cZo,fZo,mZo,Kv,Sme,gZo,hZo,Rq,pZo,_Zo,uZo,Pme,bZo,vZo,f6,GBe,ic,Zv,$me,m6,TZo,Ime,FZo,OBe,ur,g6,CZo,dc,MZo,Dme,EZo,yZo,jme,wZo,AZo,LZo,h6,BZo,Nme,xZo,kZo,RZo,ct,p6,SZo,qme,PZo,$Zo,cc,IZo,Gme,DZo,jZo,Ome,NZo,qZo,GZo,Xme,OZo,XZo,_6,VZo,po,u6,zZo,Vme,WZo,QZo,mn,HZo,zme,UZo,JZo,Wme,YZo,KZo,Qme,ZZo,eer,oer,he,eT,Hme,rer,ter,Sq,aer,ner,ser,oT,Ume,ler,ier,Pq,der,cer,fer,rT,Jme,mer,ger,$q,her,per,_er,tT,Yme,uer,ber,Iq,ver,Ter,Fer,aT,Kme,Cer,Mer,Dq,Eer,yer,wer,nT,Zme,Aer,Ler,jq,Ber,xer,ker,sT,ege,Rer,Ser,Nq,Per,$er,Ier,lT,oge,Der,jer,qq,Ner,qer,Ger,iT,rge,Oer,Xer,Gq,Ver,zer,Wer,dT,tge,Qer,Her,Oq,Uer,Jer,Yer,age,Ker,Zer,b6,XBe,fc,cT,nge,v6,eor,sge,oor,VBe,br,T6,ror,mc,tor,lge,aor,nor,ige,sor,lor,ior,F6,dor,dge,cor,mor,gor,ft,C6,hor,cge,por,_or,gc,uor,fge,bor,vor,mge,Tor,For,Cor,gge,Mor,Eor,M6,yor,_o,E6,wor,hge,Aor,Lor,gn,Bor,pge,xor,kor,_ge,Ror,Sor,uge,Por,$or,Ior,y6,fT,bge,Dor,jor,Xq,Nor,qor,Gor,mT,vge,Oor,Xor,Vq,Vor,zor,Wor,Tge,Qor,Hor,w6,zBe,hc,gT,Fge,A6,Uor,Cge,Jor,WBe,vr,L6,Yor,pc,Kor,Mge,Zor,err,Ege,orr,rrr,trr,B6,arr,yge,nrr,srr,lrr,mt,x6,irr,wge,drr,crr,_c,frr,Age,mrr,grr,Lge,hrr,prr,_rr,Bge,urr,brr,k6,vrr,uo,R6,Trr,xge,Frr,Crr,hn,Mrr,kge,Err,yrr,Rge,wrr,Arr,Sge,Lrr,Brr,xrr,Y,hT,Pge,krr,Rrr,zq,Srr,Prr,$rr,pT,$ge,Irr,Drr,Wq,jrr,Nrr,qrr,_T,Ige,Grr,Orr,Qq,Xrr,Vrr,zrr,uT,Dge,Wrr,Qrr,Hq,Hrr,Urr,Jrr,bT,jge,Yrr,Krr,Uq,Zrr,etr,otr,vT,Nge,rtr,ttr,Jq,atr,ntr,str,TT,qge,ltr,itr,Yq,dtr,ctr,ftr,FT,Gge,mtr,gtr,Kq,htr,ptr,_tr,CT,Oge,utr,btr,Zq,vtr,Ttr,Ftr,MT,Xge,Ctr,Mtr,eG,Etr,ytr,wtr,ET,Vge,Atr,Ltr,oG,Btr,xtr,ktr,yT,zge,Rtr,Str,rG,Ptr,$tr,Itr,wT,Wge,Dtr,jtr,tG,Ntr,qtr,Gtr,AT,Qge,Otr,Xtr,aG,Vtr,ztr,Wtr,LT,Hge,Qtr,Htr,nG,Utr,Jtr,Ytr,BT,Uge,Ktr,Ztr,sG,ear,oar,rar,xT,Jge,tar,aar,lG,nar,sar,lar,kT,Yge,iar,dar,iG,car,far,mar,RT,Kge,gar,har,dG,par,_ar,uar,ST,Zge,bar,Tar,cG,Far,Car,Mar,ehe,Ear,yar,S6,QBe,uc,PT,ohe,P6,war,rhe,Aar,HBe,Tr,$6,Lar,bc,Bar,the,xar,kar,ahe,Rar,Sar,Par,I6,$ar,nhe,Iar,Dar,jar,gt,D6,Nar,she,qar,Gar,vc,Oar,lhe,Xar,Var,ihe,zar,War,Qar,dhe,Har,Uar,j6,Jar,bo,N6,Yar,che,Kar,Zar,pn,enr,fhe,onr,rnr,mhe,tnr,anr,ghe,nnr,snr,lnr,pe,$T,hhe,inr,dnr,fG,cnr,fnr,mnr,IT,phe,gnr,hnr,mG,pnr,_nr,unr,DT,_he,bnr,vnr,gG,Tnr,Fnr,Cnr,jT,uhe,Mnr,Enr,hG,ynr,wnr,Anr,NT,bhe,Lnr,Bnr,pG,xnr,knr,Rnr,qT,vhe,Snr,Pnr,_G,$nr,Inr,Dnr,GT,The,jnr,Nnr,uG,qnr,Gnr,Onr,OT,Fhe,Xnr,Vnr,bG,znr,Wnr,Qnr,XT,Che,Hnr,Unr,vG,Jnr,Ynr,Knr,VT,Mhe,Znr,esr,TG,osr,rsr,tsr,Ehe,asr,nsr,q6,UBe,Tc,zT,yhe,G6,ssr,whe,lsr,JBe,Fr,O6,isr,Fc,dsr,Ahe,csr,fsr,Lhe,msr,gsr,hsr,X6,psr,Bhe,_sr,usr,bsr,ht,V6,vsr,xhe,Tsr,Fsr,Cc,Csr,khe,Msr,Esr,Rhe,ysr,wsr,Asr,She,Lsr,Bsr,z6,xsr,vo,W6,ksr,Phe,Rsr,Ssr,_n,Psr,$he,$sr,Isr,Ihe,Dsr,jsr,Dhe,Nsr,qsr,Gsr,X,WT,jhe,Osr,Xsr,FG,Vsr,zsr,Wsr,QT,Nhe,Qsr,Hsr,CG,Usr,Jsr,Ysr,HT,qhe,Ksr,Zsr,MG,elr,olr,rlr,UT,Ghe,tlr,alr,EG,nlr,slr,llr,JT,Ohe,ilr,dlr,yG,clr,flr,mlr,YT,Xhe,glr,hlr,wG,plr,_lr,ulr,KT,Vhe,blr,vlr,AG,Tlr,Flr,Clr,ZT,zhe,Mlr,Elr,LG,ylr,wlr,Alr,eF,Whe,Llr,Blr,BG,xlr,klr,Rlr,oF,Qhe,Slr,Plr,xG,$lr,Ilr,Dlr,rF,Hhe,jlr,Nlr,kG,qlr,Glr,Olr,tF,Uhe,Xlr,Vlr,RG,zlr,Wlr,Qlr,aF,Jhe,Hlr,Ulr,SG,Jlr,Ylr,Klr,nF,Yhe,Zlr,eir,PG,oir,rir,tir,sF,Khe,air,nir,$G,sir,lir,iir,lF,Zhe,dir,cir,IG,fir,mir,gir,iF,epe,hir,pir,DG,_ir,uir,bir,dF,ope,vir,Tir,jG,Fir,Cir,Mir,cF,rpe,Eir,yir,NG,wir,Air,Lir,fF,tpe,Bir,xir,qG,kir,Rir,Sir,mF,ape,Pir,$ir,GG,Iir,Dir,jir,gF,npe,Nir,qir,OG,Gir,Oir,Xir,hF,spe,Vir,zir,XG,Wir,Qir,Hir,pF,lpe,Uir,Jir,VG,Yir,Kir,Zir,_F,ipe,edr,odr,zG,rdr,tdr,adr,dpe,ndr,sdr,Q6,YBe,Mc,uF,cpe,H6,ldr,fpe,idr,KBe,Cr,U6,ddr,Ec,cdr,mpe,fdr,mdr,gpe,gdr,hdr,pdr,J6,_dr,hpe,udr,bdr,vdr,pt,Y6,Tdr,ppe,Fdr,Cdr,yc,Mdr,_pe,Edr,ydr,upe,wdr,Adr,Ldr,bpe,Bdr,xdr,K6,kdr,To,Z6,Rdr,vpe,Sdr,Pdr,un,$dr,Tpe,Idr,Ddr,Fpe,jdr,Ndr,Cpe,qdr,Gdr,Odr,te,bF,Mpe,Xdr,Vdr,WG,zdr,Wdr,Qdr,vF,Epe,Hdr,Udr,QG,Jdr,Ydr,Kdr,TF,ype,Zdr,ecr,HG,ocr,rcr,tcr,FF,wpe,acr,ncr,UG,scr,lcr,icr,CF,Ape,dcr,ccr,JG,fcr,mcr,gcr,MF,Lpe,hcr,pcr,YG,_cr,ucr,bcr,EF,Bpe,vcr,Tcr,KG,Fcr,Ccr,Mcr,yF,xpe,Ecr,ycr,ZG,wcr,Acr,Lcr,wF,kpe,Bcr,xcr,eO,kcr,Rcr,Scr,AF,Rpe,Pcr,$cr,oO,Icr,Dcr,jcr,LF,Spe,Ncr,qcr,rO,Gcr,Ocr,Xcr,BF,Ppe,Vcr,zcr,tO,Wcr,Qcr,Hcr,xF,$pe,Ucr,Jcr,aO,Ycr,Kcr,Zcr,kF,Ipe,efr,ofr,nO,rfr,tfr,afr,RF,Dpe,nfr,sfr,sO,lfr,ifr,dfr,SF,jpe,cfr,ffr,lO,mfr,gfr,hfr,PF,Npe,pfr,_fr,iO,ufr,bfr,vfr,qpe,Tfr,Ffr,eA,ZBe,wc,$F,Gpe,oA,Cfr,Ope,Mfr,exe,Mr,rA,Efr,Ac,yfr,Xpe,wfr,Afr,Vpe,Lfr,Bfr,xfr,tA,kfr,zpe,Rfr,Sfr,Pfr,_t,aA,$fr,Wpe,Ifr,Dfr,Lc,jfr,Qpe,Nfr,qfr,Hpe,Gfr,Ofr,Xfr,Upe,Vfr,zfr,nA,Wfr,Fo,sA,Qfr,Jpe,Hfr,Ufr,bn,Jfr,Ype,Yfr,Kfr,Kpe,Zfr,emr,Zpe,omr,rmr,tmr,e_e,IF,o_e,amr,nmr,dO,smr,lmr,imr,r_e,dmr,cmr,lA,oxe,Bc,DF,t_e,iA,fmr,a_e,mmr,rxe,Er,dA,gmr,xc,hmr,n_e,pmr,_mr,s_e,umr,bmr,vmr,cA,Tmr,l_e,Fmr,Cmr,Mmr,ut,fA,Emr,i_e,ymr,wmr,kc,Amr,d_e,Lmr,Bmr,c_e,xmr,kmr,Rmr,f_e,Smr,Pmr,mA,$mr,Co,gA,Imr,m_e,Dmr,jmr,vn,Nmr,g_e,qmr,Gmr,h_e,Omr,Xmr,p_e,Vmr,zmr,Wmr,K,jF,__e,Qmr,Hmr,cO,Umr,Jmr,Ymr,NF,u_e,Kmr,Zmr,fO,egr,ogr,rgr,qF,b_e,tgr,agr,mO,ngr,sgr,lgr,GF,v_e,igr,dgr,gO,cgr,fgr,mgr,OF,T_e,ggr,hgr,hO,pgr,_gr,ugr,XF,F_e,bgr,vgr,pO,Tgr,Fgr,Cgr,VF,C_e,Mgr,Egr,_O,ygr,wgr,Agr,zF,M_e,Lgr,Bgr,uO,xgr,kgr,Rgr,WF,E_e,Sgr,Pgr,bO,$gr,Igr,Dgr,QF,y_e,jgr,Ngr,vO,qgr,Ggr,Ogr,HF,w_e,Xgr,Vgr,TO,zgr,Wgr,Qgr,UF,A_e,Hgr,Ugr,FO,Jgr,Ygr,Kgr,JF,L_e,Zgr,ehr,CO,ohr,rhr,thr,YF,B_e,ahr,nhr,MO,shr,lhr,ihr,KF,x_e,dhr,chr,EO,fhr,mhr,ghr,ZF,k_e,hhr,phr,yO,_hr,uhr,bhr,e9,R_e,vhr,Thr,wO,Fhr,Chr,Mhr,o9,S_e,Ehr,yhr,AO,whr,Ahr,Lhr,r9,P_e,Bhr,xhr,LO,khr,Rhr,Shr,t9,$_e,Phr,$hr,BO,Ihr,Dhr,jhr,I_e,Nhr,qhr,hA,txe,Rc,a9,D_e,pA,Ghr,j_e,Ohr,axe,yr,_A,Xhr,Sc,Vhr,N_e,zhr,Whr,q_e,Qhr,Hhr,Uhr,uA,Jhr,G_e,Yhr,Khr,Zhr,bt,bA,epr,O_e,opr,rpr,Pc,tpr,X_e,apr,npr,V_e,spr,lpr,ipr,z_e,dpr,cpr,vA,fpr,Mo,TA,mpr,W_e,gpr,hpr,Tn,ppr,Q_e,_pr,upr,H_e,bpr,vpr,U_e,Tpr,Fpr,Cpr,Z,n9,J_e,Mpr,Epr,xO,ypr,wpr,Apr,s9,Y_e,Lpr,Bpr,kO,xpr,kpr,Rpr,l9,K_e,Spr,Ppr,RO,$pr,Ipr,Dpr,i9,Z_e,jpr,Npr,SO,qpr,Gpr,Opr,d9,eue,Xpr,Vpr,PO,zpr,Wpr,Qpr,c9,oue,Hpr,Upr,$O,Jpr,Ypr,Kpr,f9,rue,Zpr,e_r,IO,o_r,r_r,t_r,m9,tue,a_r,n_r,DO,s_r,l_r,i_r,g9,aue,d_r,c_r,jO,f_r,m_r,g_r,h9,nue,h_r,p_r,NO,__r,u_r,b_r,p9,sue,v_r,T_r,qO,F_r,C_r,M_r,_9,lue,E_r,y_r,GO,w_r,A_r,L_r,u9,iue,B_r,x_r,OO,k_r,R_r,S_r,b9,due,P_r,$_r,XO,I_r,D_r,j_r,v9,cue,N_r,q_r,VO,G_r,O_r,X_r,T9,fue,V_r,z_r,zO,W_r,Q_r,H_r,F9,mue,U_r,J_r,WO,Y_r,K_r,Z_r,C9,gue,eur,our,QO,rur,tur,aur,M9,hue,nur,sur,HO,lur,iur,dur,pue,cur,fur,FA,nxe,$c,E9,_ue,CA,mur,uue,gur,sxe,wr,MA,hur,Ic,pur,bue,_ur,uur,vue,bur,vur,Tur,EA,Fur,Tue,Cur,Mur,Eur,vt,yA,yur,Fue,wur,Aur,Dc,Lur,Cue,Bur,xur,Mue,kur,Rur,Sur,Eue,Pur,$ur,wA,Iur,Eo,AA,Dur,yue,jur,Nur,Fn,qur,wue,Gur,Our,Aue,Xur,Vur,Lue,zur,Wur,Qur,Bue,y9,xue,Hur,Uur,UO,Jur,Yur,Kur,kue,Zur,e2r,LA,lxe,jc,w9,Rue,BA,o2r,Sue,r2r,ixe,Ar,xA,t2r,Nc,a2r,Pue,n2r,s2r,$ue,l2r,i2r,d2r,kA,c2r,Iue,f2r,m2r,g2r,Tt,RA,h2r,Due,p2r,_2r,qc,u2r,jue,b2r,v2r,Nue,T2r,F2r,C2r,que,M2r,E2r,SA,y2r,yo,PA,w2r,Gue,A2r,L2r,Cn,B2r,Oue,x2r,k2r,Xue,R2r,S2r,Vue,P2r,$2r,I2r,zue,A9,Wue,D2r,j2r,JO,N2r,q2r,G2r,Que,O2r,X2r,$A,dxe,Gc,L9,Hue,IA,V2r,Uue,z2r,cxe,Lr,DA,W2r,Oc,Q2r,Jue,H2r,U2r,Yue,J2r,Y2r,K2r,jA,Z2r,Kue,e1r,o1r,r1r,Ft,NA,t1r,Zue,a1r,n1r,Xc,s1r,e2e,l1r,i1r,o2e,d1r,c1r,f1r,r2e,m1r,g1r,qA,h1r,wo,GA,p1r,t2e,_1r,u1r,Mn,b1r,a2e,v1r,T1r,n2e,F1r,C1r,s2e,M1r,E1r,y1r,z,B9,l2e,w1r,A1r,YO,L1r,B1r,x1r,x9,i2e,k1r,R1r,KO,S1r,P1r,$1r,k9,d2e,I1r,D1r,ZO,j1r,N1r,q1r,R9,c2e,G1r,O1r,eX,X1r,V1r,z1r,S9,f2e,W1r,Q1r,oX,H1r,U1r,J1r,P9,m2e,Y1r,K1r,rX,Z1r,ebr,obr,$9,g2e,rbr,tbr,tX,abr,nbr,sbr,I9,h2e,lbr,ibr,aX,dbr,cbr,fbr,D9,p2e,mbr,gbr,nX,hbr,pbr,_br,j9,_2e,ubr,bbr,sX,vbr,Tbr,Fbr,N9,u2e,Cbr,Mbr,lX,Ebr,ybr,wbr,q9,b2e,Abr,Lbr,iX,Bbr,xbr,kbr,G9,v2e,Rbr,Sbr,dX,Pbr,$br,Ibr,O9,T2e,Dbr,jbr,cX,Nbr,qbr,Gbr,X9,F2e,Obr,Xbr,fX,Vbr,zbr,Wbr,V9,C2e,Qbr,Hbr,mX,Ubr,Jbr,Ybr,z9,M2e,Kbr,Zbr,gX,e3r,o3r,r3r,W9,E2e,t3r,a3r,hX,n3r,s3r,l3r,Q9,y2e,i3r,d3r,pX,c3r,f3r,m3r,H9,w2e,g3r,h3r,_X,p3r,_3r,u3r,U9,A2e,b3r,v3r,uX,T3r,F3r,C3r,J9,L2e,M3r,E3r,bX,y3r,w3r,A3r,Y9,B2e,L3r,B3r,vX,x3r,k3r,R3r,K9,x2e,S3r,P3r,TX,$3r,I3r,D3r,k2e,j3r,N3r,OA,fxe,Vc,Z9,R2e,XA,q3r,S2e,G3r,mxe,Br,VA,O3r,zc,X3r,P2e,V3r,z3r,$2e,W3r,Q3r,H3r,zA,U3r,I2e,J3r,Y3r,K3r,Ct,WA,Z3r,D2e,e5r,o5r,Wc,r5r,j2e,t5r,a5r,N2e,n5r,s5r,l5r,q2e,i5r,d5r,QA,c5r,Ao,HA,f5r,G2e,m5r,g5r,En,h5r,O2e,p5r,_5r,X2e,u5r,b5r,V2e,v5r,T5r,F5r,yn,eC,z2e,C5r,M5r,FX,E5r,y5r,w5r,oC,W2e,A5r,L5r,CX,B5r,x5r,k5r,rC,Q2e,R5r,S5r,MX,P5r,$5r,I5r,tC,H2e,D5r,j5r,EX,N5r,q5r,G5r,U2e,O5r,X5r,UA,gxe,Qc,aC,J2e,JA,V5r,Y2e,z5r,hxe,xr,YA,W5r,Hc,Q5r,K2e,H5r,U5r,Z2e,J5r,Y5r,K5r,KA,Z5r,e1e,evr,ovr,rvr,Mt,ZA,tvr,o1e,avr,nvr,Uc,svr,r1e,lvr,ivr,t1e,dvr,cvr,fvr,a1e,mvr,gvr,e0,hvr,Lo,o0,pvr,n1e,_vr,uvr,wn,bvr,s1e,vvr,Tvr,l1e,Fvr,Cvr,i1e,Mvr,Evr,yvr,fe,nC,d1e,wvr,Avr,yX,Lvr,Bvr,xvr,sC,c1e,kvr,Rvr,wX,Svr,Pvr,$vr,lC,f1e,Ivr,Dvr,AX,jvr,Nvr,qvr,iC,m1e,Gvr,Ovr,LX,Xvr,Vvr,zvr,dC,g1e,Wvr,Qvr,BX,Hvr,Uvr,Jvr,cC,h1e,Yvr,Kvr,xX,Zvr,eTr,oTr,fC,p1e,rTr,tTr,kX,aTr,nTr,sTr,mC,_1e,lTr,iTr,RX,dTr,cTr,fTr,gC,u1e,mTr,gTr,SX,hTr,pTr,_Tr,hC,b1e,uTr,bTr,PX,vTr,TTr,FTr,pC,v1e,CTr,MTr,$X,ETr,yTr,wTr,T1e,ATr,LTr,r0,pxe,Jc,_C,F1e,t0,BTr,C1e,xTr,_xe,kr,a0,kTr,Yc,RTr,M1e,STr,PTr,E1e,$Tr,ITr,DTr,n0,jTr,y1e,NTr,qTr,GTr,Et,s0,OTr,w1e,XTr,VTr,Kc,zTr,A1e,WTr,QTr,L1e,HTr,UTr,JTr,B1e,YTr,KTr,l0,ZTr,Bo,i0,eFr,x1e,oFr,rFr,An,tFr,k1e,aFr,nFr,R1e,sFr,lFr,S1e,iFr,dFr,cFr,ve,uC,P1e,fFr,mFr,IX,gFr,hFr,pFr,bC,$1e,_Fr,uFr,DX,bFr,vFr,TFr,vC,I1e,FFr,CFr,jX,MFr,EFr,yFr,TC,D1e,wFr,AFr,NX,LFr,BFr,xFr,FC,j1e,kFr,RFr,qX,SFr,PFr,$Fr,CC,N1e,IFr,DFr,GX,jFr,NFr,qFr,MC,q1e,GFr,OFr,OX,XFr,VFr,zFr,EC,G1e,WFr,QFr,XX,HFr,UFr,JFr,yC,O1e,YFr,KFr,VX,ZFr,e9r,o9r,X1e,r9r,t9r,d0,uxe,Zc,wC,V1e,c0,a9r,z1e,n9r,bxe,Rr,f0,s9r,ef,l9r,W1e,i9r,d9r,Q1e,c9r,f9r,m9r,m0,g9r,H1e,h9r,p9r,_9r,yt,g0,u9r,U1e,b9r,v9r,of,T9r,J1e,F9r,C9r,Y1e,M9r,E9r,y9r,K1e,w9r,A9r,h0,L9r,xo,p0,B9r,Z1e,x9r,k9r,Ln,R9r,ebe,S9r,P9r,obe,$9r,I9r,rbe,D9r,j9r,N9r,Te,AC,tbe,q9r,G9r,zX,O9r,X9r,V9r,LC,abe,z9r,W9r,WX,Q9r,H9r,U9r,BC,nbe,J9r,Y9r,QX,K9r,Z9r,eCr,xC,sbe,oCr,rCr,HX,tCr,aCr,nCr,kC,lbe,sCr,lCr,UX,iCr,dCr,cCr,RC,ibe,fCr,mCr,JX,gCr,hCr,pCr,SC,dbe,_Cr,uCr,YX,bCr,vCr,TCr,PC,cbe,FCr,CCr,KX,MCr,ECr,yCr,$C,fbe,wCr,ACr,ZX,LCr,BCr,xCr,mbe,kCr,RCr,_0,vxe,rf,IC,gbe,u0,SCr,hbe,PCr,Txe,Sr,b0,$Cr,tf,ICr,pbe,DCr,jCr,_be,NCr,qCr,GCr,v0,OCr,ube,XCr,VCr,zCr,wt,T0,WCr,bbe,QCr,HCr,af,UCr,vbe,JCr,YCr,Tbe,KCr,ZCr,e4r,Fbe,o4r,r4r,F0,t4r,ko,C0,a4r,Cbe,n4r,s4r,Bn,l4r,Mbe,i4r,d4r,Ebe,c4r,f4r,ybe,m4r,g4r,h4r,Fe,DC,wbe,p4r,_4r,eV,u4r,b4r,v4r,jC,Abe,T4r,F4r,oV,C4r,M4r,E4r,NC,Lbe,y4r,w4r,rV,A4r,L4r,B4r,qC,Bbe,x4r,k4r,tV,R4r,S4r,P4r,GC,xbe,$4r,I4r,aV,D4r,j4r,N4r,OC,kbe,q4r,G4r,nV,O4r,X4r,V4r,XC,Rbe,z4r,W4r,sV,Q4r,H4r,U4r,VC,Sbe,J4r,Y4r,lV,K4r,Z4r,eMr,zC,Pbe,oMr,rMr,iV,tMr,aMr,nMr,$be,sMr,lMr,M0,Fxe,nf,WC,Ibe,E0,iMr,Dbe,dMr,Cxe,Pr,y0,cMr,sf,fMr,jbe,mMr,gMr,Nbe,hMr,pMr,_Mr,w0,uMr,qbe,bMr,vMr,TMr,At,A0,FMr,Gbe,CMr,MMr,lf,EMr,Obe,yMr,wMr,Xbe,AMr,LMr,BMr,Vbe,xMr,kMr,L0,RMr,Ro,B0,SMr,zbe,PMr,$Mr,xn,IMr,Wbe,DMr,jMr,Qbe,NMr,qMr,Hbe,GMr,OMr,XMr,Ce,QC,Ube,VMr,zMr,dV,WMr,QMr,HMr,HC,Jbe,UMr,JMr,cV,YMr,KMr,ZMr,UC,Ybe,eEr,oEr,fV,rEr,tEr,aEr,JC,Kbe,nEr,sEr,mV,lEr,iEr,dEr,YC,Zbe,cEr,fEr,gV,mEr,gEr,hEr,KC,e3e,pEr,_Er,hV,uEr,bEr,vEr,ZC,o3e,TEr,FEr,pV,CEr,MEr,EEr,e4,r3e,yEr,wEr,_V,AEr,LEr,BEr,o4,t3e,xEr,kEr,uV,REr,SEr,PEr,a3e,$Er,IEr,x0,Mxe,df,r4,n3e,k0,DEr,s3e,jEr,Exe,$r,R0,NEr,cf,qEr,l3e,GEr,OEr,i3e,XEr,VEr,zEr,S0,WEr,d3e,QEr,HEr,UEr,Lt,P0,JEr,c3e,YEr,KEr,ff,ZEr,f3e,eyr,oyr,m3e,ryr,tyr,ayr,g3e,nyr,syr,$0,lyr,So,I0,iyr,h3e,dyr,cyr,kn,fyr,p3e,myr,gyr,_3e,hyr,pyr,u3e,_yr,uyr,byr,so,t4,b3e,vyr,Tyr,bV,Fyr,Cyr,Myr,a4,v3e,Eyr,yyr,vV,wyr,Ayr,Lyr,n4,T3e,Byr,xyr,TV,kyr,Ryr,Syr,s4,F3e,Pyr,$yr,FV,Iyr,Dyr,jyr,l4,C3e,Nyr,qyr,CV,Gyr,Oyr,Xyr,i4,M3e,Vyr,zyr,MV,Wyr,Qyr,Hyr,d4,E3e,Uyr,Jyr,EV,Yyr,Kyr,Zyr,y3e,ewr,owr,D0,yxe,mf,c4,w3e,j0,rwr,A3e,twr,wxe,Ir,N0,awr,gf,nwr,L3e,swr,lwr,B3e,iwr,dwr,cwr,q0,fwr,x3e,mwr,gwr,hwr,Bt,G0,pwr,k3e,_wr,uwr,hf,bwr,R3e,vwr,Twr,S3e,Fwr,Cwr,Mwr,P3e,Ewr,ywr,O0,wwr,Po,X0,Awr,$3e,Lwr,Bwr,Rn,xwr,I3e,kwr,Rwr,D3e,Swr,Pwr,j3e,$wr,Iwr,Dwr,lo,f4,N3e,jwr,Nwr,yV,qwr,Gwr,Owr,m4,q3e,Xwr,Vwr,wV,zwr,Wwr,Qwr,g4,G3e,Hwr,Uwr,AV,Jwr,Ywr,Kwr,h4,O3e,Zwr,e6r,LV,o6r,r6r,t6r,p4,X3e,a6r,n6r,BV,s6r,l6r,i6r,_4,V3e,d6r,c6r,xV,f6r,m6r,g6r,u4,z3e,h6r,p6r,kV,_6r,u6r,b6r,W3e,v6r,T6r,V0,Axe,pf,b4,Q3e,z0,F6r,H3e,C6r,Lxe,Dr,W0,M6r,_f,E6r,U3e,y6r,w6r,J3e,A6r,L6r,B6r,Q0,x6r,Y3e,k6r,R6r,S6r,xt,H0,P6r,K3e,$6r,I6r,uf,D6r,Z3e,j6r,N6r,e5e,q6r,G6r,O6r,o5e,X6r,V6r,U0,z6r,$o,J0,W6r,r5e,Q6r,H6r,Sn,U6r,t5e,J6r,Y6r,a5e,K6r,Z6r,n5e,eAr,oAr,rAr,s5e,v4,l5e,tAr,aAr,RV,nAr,sAr,lAr,i5e,iAr,dAr,Y0,Bxe,bf,T4,d5e,K0,cAr,c5e,fAr,xxe,jr,Z0,mAr,vf,gAr,f5e,hAr,pAr,m5e,_Ar,uAr,bAr,eL,vAr,g5e,TAr,FAr,CAr,kt,oL,MAr,h5e,EAr,yAr,Tf,wAr,p5e,AAr,LAr,_5e,BAr,xAr,kAr,u5e,RAr,SAr,rL,PAr,Io,tL,$Ar,b5e,IAr,DAr,Pn,jAr,v5e,NAr,qAr,T5e,GAr,OAr,F5e,XAr,VAr,zAr,aL,F4,C5e,WAr,QAr,SV,HAr,UAr,JAr,C4,M5e,YAr,KAr,PV,ZAr,e0r,o0r,E5e,r0r,t0r,nL,kxe,Ff,M4,y5e,sL,a0r,w5e,n0r,Rxe,Nr,lL,s0r,Cf,l0r,A5e,i0r,d0r,L5e,c0r,f0r,m0r,iL,g0r,B5e,h0r,p0r,_0r,Rt,dL,u0r,x5e,b0r,v0r,Mf,T0r,k5e,F0r,C0r,R5e,M0r,E0r,y0r,S5e,w0r,A0r,cL,L0r,Do,fL,B0r,P5e,x0r,k0r,$n,R0r,$5e,S0r,P0r,I5e,$0r,I0r,D5e,D0r,j0r,N0r,j5e,E4,N5e,q0r,G0r,$V,O0r,X0r,V0r,q5e,z0r,W0r,mL,Sxe;return ce=new V({}),$a=new w({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),LM=new V({}),BM=new w({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),xf=new Q0r({props:{warning:"&lcub;true}",$$slots:{default:[qbt]},$$scope:{ctx:Li}}}),xM=new V({}),kM=new E({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/configuration_auto.py#L526"}}),PM=new E({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/configuration_auto.py#L549",parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}]}}),$M=new w({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),IM=new E({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/configuration_auto.py#L671",parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}]}}),DM=new V({}),jM=new E({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/tokenization_auto.py#L352"}}),GM=new E({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/tokenization_auto.py#L366",parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_15923/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}]}}),OM=new w({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),XM=new E({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/tokenization_auto.py#L562",parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}]}}),VM=new V({}),zM=new E({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/feature_extraction_auto.py#L170"}}),HM=new E({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/feature_extraction_auto.py#L184",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_15923/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),gh=new Q0r({props:{$$slots:{default:[Gbt]},$$scope:{ctx:Li}}}),UM=new w({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),JM=new E({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/feature_extraction_auto.py#L311",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}]}}),YM=new V({}),KM=new E({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/processing_auto.py#L71"}}),oE=new E({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/processing_auto.py#L85",parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),Eh=new Q0r({props:{$$slots:{default:[Obt]},$$scope:{ctx:Li}}}),rE=new w({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),tE=new E({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/processing_auto.py#L238",parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}]}}),aE=new V({}),nE=new E({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/modeling_auto.py#L697"}}),lE=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15923/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_15923/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),iE=new w({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),dE=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),cE=new w({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),fE=new V({}),mE=new E({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/modeling_auto.py#L704"}}),hE=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15923/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),pE=new w({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),_E=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),uE=new w({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),bE=new V({}),vE=new E({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/modeling_auto.py#L719"}}),FE=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15923/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),CE=new w({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),ME=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),EE=new w({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),yE=new V({}),wE=new E({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/modeling_auto.py#L726"}}),LE=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15923/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code>(Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),BE=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),xE=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),kE=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),RE=new V({}),SE=new E({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/modeling_auto.py#L733"}}),$E=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15923/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}]}}),IE=new w({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),DE=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),jE=new w({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),NE=new V({}),qE=new E({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/modeling_auto.py#L742"}}),OE=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15923/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),XE=new w({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),VE=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),zE=new w({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),WE=new V({}),QE=new E({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/modeling_auto.py#L776"}}),UE=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15923/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),JE=new w({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),YE=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),KE=new w({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ZE=new V({}),ey=new E({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/modeling_auto.py#L783"}}),ry=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15923/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}]}}),ty=new w({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),ay=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ny=new w({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),sy=new V({}),ly=new E({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/modeling_auto.py#L769"}}),dy=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15923/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),cy=new w({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),fy=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),my=new w({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),gy=new V({}),hy=new E({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/modeling_auto.py#L751"}}),_y=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15923/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),uy=new w({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),by=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),vy=new w({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ty=new V({}),Fy=new E({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/modeling_auto.py#L758"}}),My=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15923/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),Ey=new w({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),yy=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),wy=new w({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ay=new V({}),Ly=new E({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/modeling_auto.py#L792"}}),xy=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15923/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_15923/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_15923/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_15923/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),ky=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),Ry=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Sy=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Py=new V({}),$y=new E({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/modeling_auto.py#L831"}}),Dy=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15923/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),jy=new w({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),Ny=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),qy=new w({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Gy=new V({}),Oy=new E({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/modeling_auto.py#L838"}}),Vy=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15923/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),zy=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),Wy=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Qy=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Hy=new V({}),Uy=new E({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/modeling_auto.py#L861"}}),Yy=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15923/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),Ky=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),Zy=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ew=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ow=new V({}),rw=new E({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/modeling_auto.py#L845"}}),aw=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15923/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),nw=new w({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),sw=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),lw=new w({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),iw=new V({}),dw=new E({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/modeling_auto.py#L852"}}),fw=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15923/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}]}}),mw=new w({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),gw=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),pw=new w({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),_w=new V({}),uw=new E({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/modeling_auto.py#L870"}}),vw=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15923/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),Tw=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),Fw=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Cw=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Mw=new V({}),Ew=new E({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/modeling_auto.py#L877"}}),ww=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15923/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}]}}),Aw=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),Lw=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Bw=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),xw=new V({}),kw=new E({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/modeling_auto.py#L824"}}),Sw=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15923/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
</ul>`,name:"config"}]}}),Pw=new w({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),$w=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Iw=new w({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Dw=new V({}),jw=new E({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/modeling_auto.py#L799"}}),qw=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15923/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}]}}),Gw=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),Ow=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Xw=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Vw=new V({}),zw=new E({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/modeling_auto.py#L806"}}),Qw=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15923/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}]}}),Hw=new w({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),Uw=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Yw=new w({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Kw=new V({}),Zw=new E({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/modeling_tf_auto.py#L373"}}),o6=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15923/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_15923/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),r6=new w({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),t6=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),a6=new w({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),n6=new V({}),s6=new E({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/modeling_tf_auto.py#L380"}}),i6=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15923/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),d6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),c6=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),f6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),m6=new V({}),g6=new E({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/modeling_tf_auto.py#L395"}}),p6=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15923/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),_6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),u6=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),b6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),v6=new V({}),T6=new E({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/modeling_tf_auto.py#L402"}}),C6=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15923/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),M6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),E6=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),w6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),A6=new V({}),L6=new E({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/modeling_tf_auto.py#L416"}}),x6=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15923/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),k6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),R6=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),S6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),P6=new V({}),$6=new E({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/modeling_tf_auto.py#L423"}}),D6=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15923/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),j6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),N6=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),q6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),G6=new V({}),O6=new E({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/modeling_tf_auto.py#L432"}}),V6=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15923/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),z6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),W6=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Q6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),H6=new V({}),U6=new E({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/modeling_tf_auto.py#L468"}}),Y6=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15923/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),K6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),Z6=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),eA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),oA=new V({}),rA=new E({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/modeling_tf_auto.py#L448"}}),aA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15923/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),nA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),sA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),lA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),iA=new V({}),dA=new E({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/modeling_tf_auto.py#L459"}}),fA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15923/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),mA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),gA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),hA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),pA=new V({}),_A=new E({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/modeling_tf_auto.py#L441"}}),bA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15923/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),vA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),TA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),FA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),CA=new V({}),MA=new E({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/modeling_tf_auto.py#L409"}}),yA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15923/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),wA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),AA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),LA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),BA=new V({}),xA=new E({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/modeling_tf_auto.py#L484"}}),RA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15923/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}]}}),SA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),PA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),$A=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),IA=new V({}),DA=new E({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/modeling_flax_auto.py#L229"}}),NA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15923/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
</ul>`,name:"config"}]}}),qA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),GA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),OA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),XA=new V({}),VA=new E({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/modeling_flax_auto.py#L243"}}),WA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15923/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}]}}),QA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),HA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),UA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),JA=new V({}),YA=new E({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/modeling_flax_auto.py#L236"}}),ZA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15923/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
</ul>`,name:"config"}]}}),e0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),o0=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),r0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),t0=new V({}),a0=new E({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/modeling_flax_auto.py#L250"}}),s0=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15923/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
</ul>`,name:"config"}]}}),l0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),i0=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),d0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),c0=new V({}),f0=new E({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/modeling_flax_auto.py#L257"}}),g0=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15923/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),h0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),p0=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),_0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),u0=new V({}),b0=new E({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/modeling_flax_auto.py#L266"}}),T0=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15923/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
</ul>`,name:"config"}]}}),F0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),C0=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),M0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),E0=new V({}),y0=new E({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/modeling_flax_auto.py#L275"}}),A0=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15923/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
</ul>`,name:"config"}]}}),L0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),B0=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),x0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),k0=new V({}),R0=new E({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/modeling_flax_auto.py#L282"}}),P0=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15923/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
</ul>`,name:"config"}]}}),$0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),I0=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),D0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),j0=new V({}),N0=new E({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/modeling_flax_auto.py#L291"}}),G0=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15923/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
</ul>`,name:"config"}]}}),O0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),X0=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),V0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),z0=new V({}),W0=new E({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/modeling_flax_auto.py#L298"}}),H0=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15923/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}]}}),U0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),J0=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Y0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),K0=new V({}),Z0=new E({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/modeling_flax_auto.py#L307"}}),oL=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15923/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15923/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),rL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),tL=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),nL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),sL=new V({}),lL=new E({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/modeling_flax_auto.py#L316"}}),dL=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15923/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15923/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),cL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),fL=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15923/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15923/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15923/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),mL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){J=a("meta"),Be=l(),de=a("h1"),me=a("a"),no=a("span"),f(ce.$$.fragment),ue=l(),Go=a("span"),Bi=o("Auto Classes"),yf=l(),sa=a("p"),xi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ki=a("code"),EM=o("from_pretrained()"),wf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),ye=l(),io=a("p"),Ri=o("Instantiating one of "),In=a("a"),yM=o("AutoConfig"),Dn=o(", "),jn=a("a"),wM=o("AutoModel"),Si=o(`, and
`),Nn=a("a"),AM=o("AutoTokenizer"),Pi=o(" will directly create a class of the relevant architecture. For instance"),Af=l(),f($a.$$.fragment),co=l(),ge=a("p"),c8=o("will create a model that is an instance of "),$i=a("a"),f8=o("BertModel"),m8=o("."),Oo=l(),Ia=a("p"),g8=o("There is one class of "),Lf=a("code"),h8=o("AutoModel"),VRe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),P7e=l(),Ii=a("h2"),Bf=a("a"),wW=a("span"),f(LM.$$.fragment),zRe=l(),AW=a("span"),WRe=o("Extending the Auto Classes"),$7e=l(),qn=a("p"),QRe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),LW=a("code"),HRe=o("NewModel"),URe=o(", make sure you have a "),BW=a("code"),JRe=o("NewModelConfig"),YRe=o(` then you can add those to the auto
classes like this:`),I7e=l(),f(BM.$$.fragment),D7e=l(),p8=a("p"),KRe=o("You will then be able to use the auto classes like you would usually do!"),j7e=l(),f(xf.$$.fragment),N7e=l(),Di=a("h2"),kf=a("a"),xW=a("span"),f(xM.$$.fragment),ZRe=l(),kW=a("span"),eSe=o("AutoConfig"),q7e=l(),Xo=a("div"),f(kM.$$.fragment),oSe=l(),RM=a("p"),rSe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),_8=a("a"),tSe=o("from_pretrained()"),aSe=o(" class method."),nSe=l(),SM=a("p"),sSe=o("This class cannot be instantiated directly using "),RW=a("code"),lSe=o("__init__()"),iSe=o(" (throws an error)."),dSe=l(),fo=a("div"),f(PM.$$.fragment),cSe=l(),SW=a("p"),fSe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),mSe=l(),ji=a("p"),gSe=o("The configuration class to instantiate is selected based on the "),PW=a("code"),hSe=o("model_type"),pSe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),$W=a("code"),_Se=o("pretrained_model_name_or_path"),uSe=o(":"),bSe=l(),v=a("ul"),Rf=a("li"),IW=a("strong"),vSe=o("albert"),TSe=o(" \u2014 "),u8=a("a"),FSe=o("AlbertConfig"),CSe=o(" (ALBERT model)"),MSe=l(),Sf=a("li"),DW=a("strong"),ESe=o("bart"),ySe=o(" \u2014 "),b8=a("a"),wSe=o("BartConfig"),ASe=o(" (BART model)"),LSe=l(),Pf=a("li"),jW=a("strong"),BSe=o("beit"),xSe=o(" \u2014 "),v8=a("a"),kSe=o("BeitConfig"),RSe=o(" (BEiT model)"),SSe=l(),$f=a("li"),NW=a("strong"),PSe=o("bert"),$Se=o(" \u2014 "),T8=a("a"),ISe=o("BertConfig"),DSe=o(" (BERT model)"),jSe=l(),If=a("li"),qW=a("strong"),NSe=o("bert-generation"),qSe=o(" \u2014 "),F8=a("a"),GSe=o("BertGenerationConfig"),OSe=o(" (Bert Generation model)"),XSe=l(),Df=a("li"),GW=a("strong"),VSe=o("big_bird"),zSe=o(" \u2014 "),C8=a("a"),WSe=o("BigBirdConfig"),QSe=o(" (BigBird model)"),HSe=l(),jf=a("li"),OW=a("strong"),USe=o("bigbird_pegasus"),JSe=o(" \u2014 "),M8=a("a"),YSe=o("BigBirdPegasusConfig"),KSe=o(" (BigBirdPegasus model)"),ZSe=l(),Nf=a("li"),XW=a("strong"),ePe=o("blenderbot"),oPe=o(" \u2014 "),E8=a("a"),rPe=o("BlenderbotConfig"),tPe=o(" (Blenderbot model)"),aPe=l(),qf=a("li"),VW=a("strong"),nPe=o("blenderbot-small"),sPe=o(" \u2014 "),y8=a("a"),lPe=o("BlenderbotSmallConfig"),iPe=o(" (BlenderbotSmall model)"),dPe=l(),Gf=a("li"),zW=a("strong"),cPe=o("camembert"),fPe=o(" \u2014 "),w8=a("a"),mPe=o("CamembertConfig"),gPe=o(" (CamemBERT model)"),hPe=l(),Of=a("li"),WW=a("strong"),pPe=o("canine"),_Pe=o(" \u2014 "),A8=a("a"),uPe=o("CanineConfig"),bPe=o(" (Canine model)"),vPe=l(),Xf=a("li"),QW=a("strong"),TPe=o("clip"),FPe=o(" \u2014 "),L8=a("a"),CPe=o("CLIPConfig"),MPe=o(" (CLIP model)"),EPe=l(),Vf=a("li"),HW=a("strong"),yPe=o("convbert"),wPe=o(" \u2014 "),B8=a("a"),APe=o("ConvBertConfig"),LPe=o(" (ConvBERT model)"),BPe=l(),zf=a("li"),UW=a("strong"),xPe=o("convnext"),kPe=o(" \u2014 "),x8=a("a"),RPe=o("ConvNextConfig"),SPe=o(" (ConvNext model)"),PPe=l(),Wf=a("li"),JW=a("strong"),$Pe=o("ctrl"),IPe=o(" \u2014 "),k8=a("a"),DPe=o("CTRLConfig"),jPe=o(" (CTRL model)"),NPe=l(),Qf=a("li"),YW=a("strong"),qPe=o("data2vec-audio"),GPe=o(" \u2014 "),R8=a("a"),OPe=o("Data2VecAudioConfig"),XPe=o(" (Data2VecAudio model)"),VPe=l(),Hf=a("li"),KW=a("strong"),zPe=o("data2vec-text"),WPe=o(" \u2014 "),S8=a("a"),QPe=o("Data2VecTextConfig"),HPe=o(" (Data2VecText model)"),UPe=l(),Uf=a("li"),ZW=a("strong"),JPe=o("deberta"),YPe=o(" \u2014 "),P8=a("a"),KPe=o("DebertaConfig"),ZPe=o(" (DeBERTa model)"),e$e=l(),Jf=a("li"),eQ=a("strong"),o$e=o("deberta-v2"),r$e=o(" \u2014 "),$8=a("a"),t$e=o("DebertaV2Config"),a$e=o(" (DeBERTa-v2 model)"),n$e=l(),Yf=a("li"),oQ=a("strong"),s$e=o("deit"),l$e=o(" \u2014 "),I8=a("a"),i$e=o("DeiTConfig"),d$e=o(" (DeiT model)"),c$e=l(),Kf=a("li"),rQ=a("strong"),f$e=o("detr"),m$e=o(" \u2014 "),D8=a("a"),g$e=o("DetrConfig"),h$e=o(" (DETR model)"),p$e=l(),Zf=a("li"),tQ=a("strong"),_$e=o("distilbert"),u$e=o(" \u2014 "),j8=a("a"),b$e=o("DistilBertConfig"),v$e=o(" (DistilBERT model)"),T$e=l(),em=a("li"),aQ=a("strong"),F$e=o("dpr"),C$e=o(" \u2014 "),N8=a("a"),M$e=o("DPRConfig"),E$e=o(" (DPR model)"),y$e=l(),om=a("li"),nQ=a("strong"),w$e=o("electra"),A$e=o(" \u2014 "),q8=a("a"),L$e=o("ElectraConfig"),B$e=o(" (ELECTRA model)"),x$e=l(),rm=a("li"),sQ=a("strong"),k$e=o("encoder-decoder"),R$e=o(" \u2014 "),G8=a("a"),S$e=o("EncoderDecoderConfig"),P$e=o(" (Encoder decoder model)"),$$e=l(),tm=a("li"),lQ=a("strong"),I$e=o("flaubert"),D$e=o(" \u2014 "),O8=a("a"),j$e=o("FlaubertConfig"),N$e=o(" (FlauBERT model)"),q$e=l(),am=a("li"),iQ=a("strong"),G$e=o("fnet"),O$e=o(" \u2014 "),X8=a("a"),X$e=o("FNetConfig"),V$e=o(" (FNet model)"),z$e=l(),nm=a("li"),dQ=a("strong"),W$e=o("fsmt"),Q$e=o(" \u2014 "),V8=a("a"),H$e=o("FSMTConfig"),U$e=o(" (FairSeq Machine-Translation model)"),J$e=l(),sm=a("li"),cQ=a("strong"),Y$e=o("funnel"),K$e=o(" \u2014 "),z8=a("a"),Z$e=o("FunnelConfig"),eIe=o(" (Funnel Transformer model)"),oIe=l(),lm=a("li"),fQ=a("strong"),rIe=o("gpt2"),tIe=o(" \u2014 "),W8=a("a"),aIe=o("GPT2Config"),nIe=o(" (OpenAI GPT-2 model)"),sIe=l(),im=a("li"),mQ=a("strong"),lIe=o("gpt_neo"),iIe=o(" \u2014 "),Q8=a("a"),dIe=o("GPTNeoConfig"),cIe=o(" (GPT Neo model)"),fIe=l(),dm=a("li"),gQ=a("strong"),mIe=o("gptj"),gIe=o(" \u2014 "),H8=a("a"),hIe=o("GPTJConfig"),pIe=o(" (GPT-J model)"),_Ie=l(),cm=a("li"),hQ=a("strong"),uIe=o("hubert"),bIe=o(" \u2014 "),U8=a("a"),vIe=o("HubertConfig"),TIe=o(" (Hubert model)"),FIe=l(),fm=a("li"),pQ=a("strong"),CIe=o("ibert"),MIe=o(" \u2014 "),J8=a("a"),EIe=o("IBertConfig"),yIe=o(" (I-BERT model)"),wIe=l(),mm=a("li"),_Q=a("strong"),AIe=o("imagegpt"),LIe=o(" \u2014 "),Y8=a("a"),BIe=o("ImageGPTConfig"),xIe=o(" (ImageGPT model)"),kIe=l(),gm=a("li"),uQ=a("strong"),RIe=o("layoutlm"),SIe=o(" \u2014 "),K8=a("a"),PIe=o("LayoutLMConfig"),$Ie=o(" (LayoutLM model)"),IIe=l(),hm=a("li"),bQ=a("strong"),DIe=o("layoutlmv2"),jIe=o(" \u2014 "),Z8=a("a"),NIe=o("LayoutLMv2Config"),qIe=o(" (LayoutLMv2 model)"),GIe=l(),pm=a("li"),vQ=a("strong"),OIe=o("led"),XIe=o(" \u2014 "),e7=a("a"),VIe=o("LEDConfig"),zIe=o(" (LED model)"),WIe=l(),_m=a("li"),TQ=a("strong"),QIe=o("longformer"),HIe=o(" \u2014 "),o7=a("a"),UIe=o("LongformerConfig"),JIe=o(" (Longformer model)"),YIe=l(),um=a("li"),FQ=a("strong"),KIe=o("luke"),ZIe=o(" \u2014 "),r7=a("a"),eDe=o("LukeConfig"),oDe=o(" (LUKE model)"),rDe=l(),bm=a("li"),CQ=a("strong"),tDe=o("lxmert"),aDe=o(" \u2014 "),t7=a("a"),nDe=o("LxmertConfig"),sDe=o(" (LXMERT model)"),lDe=l(),vm=a("li"),MQ=a("strong"),iDe=o("m2m_100"),dDe=o(" \u2014 "),a7=a("a"),cDe=o("M2M100Config"),fDe=o(" (M2M100 model)"),mDe=l(),Tm=a("li"),EQ=a("strong"),gDe=o("marian"),hDe=o(" \u2014 "),n7=a("a"),pDe=o("MarianConfig"),_De=o(" (Marian model)"),uDe=l(),Fm=a("li"),yQ=a("strong"),bDe=o("maskformer"),vDe=o(" \u2014 "),s7=a("a"),TDe=o("MaskFormerConfig"),FDe=o(" (MaskFormer model)"),CDe=l(),Cm=a("li"),wQ=a("strong"),MDe=o("mbart"),EDe=o(" \u2014 "),l7=a("a"),yDe=o("MBartConfig"),wDe=o(" (mBART model)"),ADe=l(),Mm=a("li"),AQ=a("strong"),LDe=o("megatron-bert"),BDe=o(" \u2014 "),i7=a("a"),xDe=o("MegatronBertConfig"),kDe=o(" (MegatronBert model)"),RDe=l(),Em=a("li"),LQ=a("strong"),SDe=o("mobilebert"),PDe=o(" \u2014 "),d7=a("a"),$De=o("MobileBertConfig"),IDe=o(" (MobileBERT model)"),DDe=l(),ym=a("li"),BQ=a("strong"),jDe=o("mpnet"),NDe=o(" \u2014 "),c7=a("a"),qDe=o("MPNetConfig"),GDe=o(" (MPNet model)"),ODe=l(),wm=a("li"),xQ=a("strong"),XDe=o("mt5"),VDe=o(" \u2014 "),f7=a("a"),zDe=o("MT5Config"),WDe=o(" (mT5 model)"),QDe=l(),Am=a("li"),kQ=a("strong"),HDe=o("nystromformer"),UDe=o(" \u2014 "),m7=a("a"),JDe=o("NystromformerConfig"),YDe=o(" (Nystromformer model)"),KDe=l(),Lm=a("li"),RQ=a("strong"),ZDe=o("openai-gpt"),eje=o(" \u2014 "),g7=a("a"),oje=o("OpenAIGPTConfig"),rje=o(" (OpenAI GPT model)"),tje=l(),Bm=a("li"),SQ=a("strong"),aje=o("pegasus"),nje=o(" \u2014 "),h7=a("a"),sje=o("PegasusConfig"),lje=o(" (Pegasus model)"),ije=l(),xm=a("li"),PQ=a("strong"),dje=o("perceiver"),cje=o(" \u2014 "),p7=a("a"),fje=o("PerceiverConfig"),mje=o(" (Perceiver model)"),gje=l(),km=a("li"),$Q=a("strong"),hje=o("plbart"),pje=o(" \u2014 "),_7=a("a"),_je=o("PLBartConfig"),uje=o(" (PLBart model)"),bje=l(),Rm=a("li"),IQ=a("strong"),vje=o("poolformer"),Tje=o(" \u2014 "),u7=a("a"),Fje=o("PoolFormerConfig"),Cje=o(" (PoolFormer model)"),Mje=l(),Sm=a("li"),DQ=a("strong"),Eje=o("prophetnet"),yje=o(" \u2014 "),b7=a("a"),wje=o("ProphetNetConfig"),Aje=o(" (ProphetNet model)"),Lje=l(),Pm=a("li"),jQ=a("strong"),Bje=o("qdqbert"),xje=o(" \u2014 "),v7=a("a"),kje=o("QDQBertConfig"),Rje=o(" (QDQBert model)"),Sje=l(),$m=a("li"),NQ=a("strong"),Pje=o("rag"),$je=o(" \u2014 "),T7=a("a"),Ije=o("RagConfig"),Dje=o(" (RAG model)"),jje=l(),Im=a("li"),qQ=a("strong"),Nje=o("realm"),qje=o(" \u2014 "),F7=a("a"),Gje=o("RealmConfig"),Oje=o(" (Realm model)"),Xje=l(),Dm=a("li"),GQ=a("strong"),Vje=o("reformer"),zje=o(" \u2014 "),C7=a("a"),Wje=o("ReformerConfig"),Qje=o(" (Reformer model)"),Hje=l(),jm=a("li"),OQ=a("strong"),Uje=o("rembert"),Jje=o(" \u2014 "),M7=a("a"),Yje=o("RemBertConfig"),Kje=o(" (RemBERT model)"),Zje=l(),Nm=a("li"),XQ=a("strong"),eNe=o("retribert"),oNe=o(" \u2014 "),E7=a("a"),rNe=o("RetriBertConfig"),tNe=o(" (RetriBERT model)"),aNe=l(),qm=a("li"),VQ=a("strong"),nNe=o("roberta"),sNe=o(" \u2014 "),y7=a("a"),lNe=o("RobertaConfig"),iNe=o(" (RoBERTa model)"),dNe=l(),Gm=a("li"),zQ=a("strong"),cNe=o("roformer"),fNe=o(" \u2014 "),w7=a("a"),mNe=o("RoFormerConfig"),gNe=o(" (RoFormer model)"),hNe=l(),Om=a("li"),WQ=a("strong"),pNe=o("segformer"),_Ne=o(" \u2014 "),A7=a("a"),uNe=o("SegformerConfig"),bNe=o(" (SegFormer model)"),vNe=l(),Xm=a("li"),QQ=a("strong"),TNe=o("sew"),FNe=o(" \u2014 "),L7=a("a"),CNe=o("SEWConfig"),MNe=o(" (SEW model)"),ENe=l(),Vm=a("li"),HQ=a("strong"),yNe=o("sew-d"),wNe=o(" \u2014 "),B7=a("a"),ANe=o("SEWDConfig"),LNe=o(" (SEW-D model)"),BNe=l(),zm=a("li"),UQ=a("strong"),xNe=o("speech-encoder-decoder"),kNe=o(" \u2014 "),x7=a("a"),RNe=o("SpeechEncoderDecoderConfig"),SNe=o(" (Speech Encoder decoder model)"),PNe=l(),Wm=a("li"),JQ=a("strong"),$Ne=o("speech_to_text"),INe=o(" \u2014 "),k7=a("a"),DNe=o("Speech2TextConfig"),jNe=o(" (Speech2Text model)"),NNe=l(),Qm=a("li"),YQ=a("strong"),qNe=o("speech_to_text_2"),GNe=o(" \u2014 "),R7=a("a"),ONe=o("Speech2Text2Config"),XNe=o(" (Speech2Text2 model)"),VNe=l(),Hm=a("li"),KQ=a("strong"),zNe=o("splinter"),WNe=o(" \u2014 "),S7=a("a"),QNe=o("SplinterConfig"),HNe=o(" (Splinter model)"),UNe=l(),Um=a("li"),ZQ=a("strong"),JNe=o("squeezebert"),YNe=o(" \u2014 "),P7=a("a"),KNe=o("SqueezeBertConfig"),ZNe=o(" (SqueezeBERT model)"),eqe=l(),Jm=a("li"),eH=a("strong"),oqe=o("swin"),rqe=o(" \u2014 "),$7=a("a"),tqe=o("SwinConfig"),aqe=o(" (Swin model)"),nqe=l(),Ym=a("li"),oH=a("strong"),sqe=o("t5"),lqe=o(" \u2014 "),I7=a("a"),iqe=o("T5Config"),dqe=o(" (T5 model)"),cqe=l(),Km=a("li"),rH=a("strong"),fqe=o("tapas"),mqe=o(" \u2014 "),D7=a("a"),gqe=o("TapasConfig"),hqe=o(" (TAPAS model)"),pqe=l(),Zm=a("li"),tH=a("strong"),_qe=o("transfo-xl"),uqe=o(" \u2014 "),j7=a("a"),bqe=o("TransfoXLConfig"),vqe=o(" (Transformer-XL model)"),Tqe=l(),eg=a("li"),aH=a("strong"),Fqe=o("trocr"),Cqe=o(" \u2014 "),N7=a("a"),Mqe=o("TrOCRConfig"),Eqe=o(" (TrOCR model)"),yqe=l(),og=a("li"),nH=a("strong"),wqe=o("unispeech"),Aqe=o(" \u2014 "),q7=a("a"),Lqe=o("UniSpeechConfig"),Bqe=o(" (UniSpeech model)"),xqe=l(),rg=a("li"),sH=a("strong"),kqe=o("unispeech-sat"),Rqe=o(" \u2014 "),G7=a("a"),Sqe=o("UniSpeechSatConfig"),Pqe=o(" (UniSpeechSat model)"),$qe=l(),tg=a("li"),lH=a("strong"),Iqe=o("vilt"),Dqe=o(" \u2014 "),O7=a("a"),jqe=o("ViltConfig"),Nqe=o(" (ViLT model)"),qqe=l(),ag=a("li"),iH=a("strong"),Gqe=o("vision-encoder-decoder"),Oqe=o(" \u2014 "),X7=a("a"),Xqe=o("VisionEncoderDecoderConfig"),Vqe=o(" (Vision Encoder decoder model)"),zqe=l(),ng=a("li"),dH=a("strong"),Wqe=o("vision-text-dual-encoder"),Qqe=o(" \u2014 "),V7=a("a"),Hqe=o("VisionTextDualEncoderConfig"),Uqe=o(" (VisionTextDualEncoder model)"),Jqe=l(),sg=a("li"),cH=a("strong"),Yqe=o("visual_bert"),Kqe=o(" \u2014 "),z7=a("a"),Zqe=o("VisualBertConfig"),eGe=o(" (VisualBert model)"),oGe=l(),lg=a("li"),fH=a("strong"),rGe=o("vit"),tGe=o(" \u2014 "),W7=a("a"),aGe=o("ViTConfig"),nGe=o(" (ViT model)"),sGe=l(),ig=a("li"),mH=a("strong"),lGe=o("vit_mae"),iGe=o(" \u2014 "),Q7=a("a"),dGe=o("ViTMAEConfig"),cGe=o(" (ViTMAE model)"),fGe=l(),dg=a("li"),gH=a("strong"),mGe=o("wav2vec2"),gGe=o(" \u2014 "),H7=a("a"),hGe=o("Wav2Vec2Config"),pGe=o(" (Wav2Vec2 model)"),_Ge=l(),cg=a("li"),hH=a("strong"),uGe=o("wavlm"),bGe=o(" \u2014 "),U7=a("a"),vGe=o("WavLMConfig"),TGe=o(" (WavLM model)"),FGe=l(),fg=a("li"),pH=a("strong"),CGe=o("xglm"),MGe=o(" \u2014 "),J7=a("a"),EGe=o("XGLMConfig"),yGe=o(" (XGLM model)"),wGe=l(),mg=a("li"),_H=a("strong"),AGe=o("xlm"),LGe=o(" \u2014 "),Y7=a("a"),BGe=o("XLMConfig"),xGe=o(" (XLM model)"),kGe=l(),gg=a("li"),uH=a("strong"),RGe=o("xlm-prophetnet"),SGe=o(" \u2014 "),K7=a("a"),PGe=o("XLMProphetNetConfig"),$Ge=o(" (XLMProphetNet model)"),IGe=l(),hg=a("li"),bH=a("strong"),DGe=o("xlm-roberta"),jGe=o(" \u2014 "),Z7=a("a"),NGe=o("XLMRobertaConfig"),qGe=o(" (XLM-RoBERTa model)"),GGe=l(),pg=a("li"),vH=a("strong"),OGe=o("xlm-roberta-xl"),XGe=o(" \u2014 "),eB=a("a"),VGe=o("XLMRobertaXLConfig"),zGe=o(" (XLM-RoBERTa-XL model)"),WGe=l(),_g=a("li"),TH=a("strong"),QGe=o("xlnet"),HGe=o(" \u2014 "),oB=a("a"),UGe=o("XLNetConfig"),JGe=o(" (XLNet model)"),YGe=l(),ug=a("li"),FH=a("strong"),KGe=o("yoso"),ZGe=o(" \u2014 "),rB=a("a"),eOe=o("YosoConfig"),oOe=o(" (YOSO model)"),rOe=l(),CH=a("p"),tOe=o("Examples:"),aOe=l(),f($M.$$.fragment),nOe=l(),bg=a("div"),f(IM.$$.fragment),sOe=l(),MH=a("p"),lOe=o("Register a new configuration for this class."),G7e=l(),Ni=a("h2"),vg=a("a"),EH=a("span"),f(DM.$$.fragment),iOe=l(),yH=a("span"),dOe=o("AutoTokenizer"),O7e=l(),Vo=a("div"),f(jM.$$.fragment),cOe=l(),NM=a("p"),fOe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),tB=a("a"),mOe=o("AutoTokenizer.from_pretrained()"),gOe=o(" class method."),hOe=l(),qM=a("p"),pOe=o("This class cannot be instantiated directly using "),wH=a("code"),_Oe=o("__init__()"),uOe=o(" (throws an error)."),bOe=l(),mo=a("div"),f(GM.$$.fragment),vOe=l(),AH=a("p"),TOe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),FOe=l(),Da=a("p"),COe=o("The tokenizer class to instantiate is selected based on the "),LH=a("code"),MOe=o("model_type"),EOe=o(` property of the config object (either
passed as an argument or loaded from `),BH=a("code"),yOe=o("pretrained_model_name_or_path"),wOe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xH=a("code"),AOe=o("pretrained_model_name_or_path"),LOe=o(":"),BOe=l(),M=a("ul"),Gn=a("li"),kH=a("strong"),xOe=o("albert"),kOe=o(" \u2014 "),aB=a("a"),ROe=o("AlbertTokenizer"),SOe=o(" or "),nB=a("a"),POe=o("AlbertTokenizerFast"),$Oe=o(" (ALBERT model)"),IOe=l(),On=a("li"),RH=a("strong"),DOe=o("bart"),jOe=o(" \u2014 "),sB=a("a"),NOe=o("BartTokenizer"),qOe=o(" or "),lB=a("a"),GOe=o("BartTokenizerFast"),OOe=o(" (BART model)"),XOe=l(),Xn=a("li"),SH=a("strong"),VOe=o("barthez"),zOe=o(" \u2014 "),iB=a("a"),WOe=o("BarthezTokenizer"),QOe=o(" or "),dB=a("a"),HOe=o("BarthezTokenizerFast"),UOe=o(" (BARThez model)"),JOe=l(),Tg=a("li"),PH=a("strong"),YOe=o("bartpho"),KOe=o(" \u2014 "),cB=a("a"),ZOe=o("BartphoTokenizer"),eXe=o(" (BARTpho model)"),oXe=l(),Vn=a("li"),$H=a("strong"),rXe=o("bert"),tXe=o(" \u2014 "),fB=a("a"),aXe=o("BertTokenizer"),nXe=o(" or "),mB=a("a"),sXe=o("BertTokenizerFast"),lXe=o(" (BERT model)"),iXe=l(),Fg=a("li"),IH=a("strong"),dXe=o("bert-generation"),cXe=o(" \u2014 "),gB=a("a"),fXe=o("BertGenerationTokenizer"),mXe=o(" (Bert Generation model)"),gXe=l(),Cg=a("li"),DH=a("strong"),hXe=o("bert-japanese"),pXe=o(" \u2014 "),hB=a("a"),_Xe=o("BertJapaneseTokenizer"),uXe=o(" (BertJapanese model)"),bXe=l(),Mg=a("li"),jH=a("strong"),vXe=o("bertweet"),TXe=o(" \u2014 "),pB=a("a"),FXe=o("BertweetTokenizer"),CXe=o(" (Bertweet model)"),MXe=l(),zn=a("li"),NH=a("strong"),EXe=o("big_bird"),yXe=o(" \u2014 "),_B=a("a"),wXe=o("BigBirdTokenizer"),AXe=o(" or "),uB=a("a"),LXe=o("BigBirdTokenizerFast"),BXe=o(" (BigBird model)"),xXe=l(),Wn=a("li"),qH=a("strong"),kXe=o("bigbird_pegasus"),RXe=o(" \u2014 "),bB=a("a"),SXe=o("PegasusTokenizer"),PXe=o(" or "),vB=a("a"),$Xe=o("PegasusTokenizerFast"),IXe=o(" (BigBirdPegasus model)"),DXe=l(),Qn=a("li"),GH=a("strong"),jXe=o("blenderbot"),NXe=o(" \u2014 "),TB=a("a"),qXe=o("BlenderbotTokenizer"),GXe=o(" or "),FB=a("a"),OXe=o("BlenderbotTokenizerFast"),XXe=o(" (Blenderbot model)"),VXe=l(),Eg=a("li"),OH=a("strong"),zXe=o("blenderbot-small"),WXe=o(" \u2014 "),CB=a("a"),QXe=o("BlenderbotSmallTokenizer"),HXe=o(" (BlenderbotSmall model)"),UXe=l(),yg=a("li"),XH=a("strong"),JXe=o("byt5"),YXe=o(" \u2014 "),MB=a("a"),KXe=o("ByT5Tokenizer"),ZXe=o(" (ByT5 model)"),eVe=l(),Hn=a("li"),VH=a("strong"),oVe=o("camembert"),rVe=o(" \u2014 "),EB=a("a"),tVe=o("CamembertTokenizer"),aVe=o(" or "),yB=a("a"),nVe=o("CamembertTokenizerFast"),sVe=o(" (CamemBERT model)"),lVe=l(),wg=a("li"),zH=a("strong"),iVe=o("canine"),dVe=o(" \u2014 "),wB=a("a"),cVe=o("CanineTokenizer"),fVe=o(" (Canine model)"),mVe=l(),Un=a("li"),WH=a("strong"),gVe=o("clip"),hVe=o(" \u2014 "),AB=a("a"),pVe=o("CLIPTokenizer"),_Ve=o(" or "),LB=a("a"),uVe=o("CLIPTokenizerFast"),bVe=o(" (CLIP model)"),vVe=l(),Jn=a("li"),QH=a("strong"),TVe=o("convbert"),FVe=o(" \u2014 "),BB=a("a"),CVe=o("ConvBertTokenizer"),MVe=o(" or "),xB=a("a"),EVe=o("ConvBertTokenizerFast"),yVe=o(" (ConvBERT model)"),wVe=l(),Yn=a("li"),HH=a("strong"),AVe=o("cpm"),LVe=o(" \u2014 "),kB=a("a"),BVe=o("CpmTokenizer"),xVe=o(" or "),UH=a("code"),kVe=o("CpmTokenizerFast"),RVe=o(" (CPM model)"),SVe=l(),Ag=a("li"),JH=a("strong"),PVe=o("ctrl"),$Ve=o(" \u2014 "),RB=a("a"),IVe=o("CTRLTokenizer"),DVe=o(" (CTRL model)"),jVe=l(),Kn=a("li"),YH=a("strong"),NVe=o("deberta"),qVe=o(" \u2014 "),SB=a("a"),GVe=o("DebertaTokenizer"),OVe=o(" or "),PB=a("a"),XVe=o("DebertaTokenizerFast"),VVe=o(" (DeBERTa model)"),zVe=l(),Lg=a("li"),KH=a("strong"),WVe=o("deberta-v2"),QVe=o(" \u2014 "),$B=a("a"),HVe=o("DebertaV2Tokenizer"),UVe=o(" (DeBERTa-v2 model)"),JVe=l(),Zn=a("li"),ZH=a("strong"),YVe=o("distilbert"),KVe=o(" \u2014 "),IB=a("a"),ZVe=o("DistilBertTokenizer"),eze=o(" or "),DB=a("a"),oze=o("DistilBertTokenizerFast"),rze=o(" (DistilBERT model)"),tze=l(),es=a("li"),eU=a("strong"),aze=o("dpr"),nze=o(" \u2014 "),jB=a("a"),sze=o("DPRQuestionEncoderTokenizer"),lze=o(" or "),NB=a("a"),ize=o("DPRQuestionEncoderTokenizerFast"),dze=o(" (DPR model)"),cze=l(),os=a("li"),oU=a("strong"),fze=o("electra"),mze=o(" \u2014 "),qB=a("a"),gze=o("ElectraTokenizer"),hze=o(" or "),GB=a("a"),pze=o("ElectraTokenizerFast"),_ze=o(" (ELECTRA model)"),uze=l(),Bg=a("li"),rU=a("strong"),bze=o("flaubert"),vze=o(" \u2014 "),OB=a("a"),Tze=o("FlaubertTokenizer"),Fze=o(" (FlauBERT model)"),Cze=l(),rs=a("li"),tU=a("strong"),Mze=o("fnet"),Eze=o(" \u2014 "),XB=a("a"),yze=o("FNetTokenizer"),wze=o(" or "),VB=a("a"),Aze=o("FNetTokenizerFast"),Lze=o(" (FNet model)"),Bze=l(),xg=a("li"),aU=a("strong"),xze=o("fsmt"),kze=o(" \u2014 "),zB=a("a"),Rze=o("FSMTTokenizer"),Sze=o(" (FairSeq Machine-Translation model)"),Pze=l(),ts=a("li"),nU=a("strong"),$ze=o("funnel"),Ize=o(" \u2014 "),WB=a("a"),Dze=o("FunnelTokenizer"),jze=o(" or "),QB=a("a"),Nze=o("FunnelTokenizerFast"),qze=o(" (Funnel Transformer model)"),Gze=l(),as=a("li"),sU=a("strong"),Oze=o("gpt2"),Xze=o(" \u2014 "),HB=a("a"),Vze=o("GPT2Tokenizer"),zze=o(" or "),UB=a("a"),Wze=o("GPT2TokenizerFast"),Qze=o(" (OpenAI GPT-2 model)"),Hze=l(),ns=a("li"),lU=a("strong"),Uze=o("gpt_neo"),Jze=o(" \u2014 "),JB=a("a"),Yze=o("GPT2Tokenizer"),Kze=o(" or "),YB=a("a"),Zze=o("GPT2TokenizerFast"),eWe=o(" (GPT Neo model)"),oWe=l(),ss=a("li"),iU=a("strong"),rWe=o("herbert"),tWe=o(" \u2014 "),KB=a("a"),aWe=o("HerbertTokenizer"),nWe=o(" or "),ZB=a("a"),sWe=o("HerbertTokenizerFast"),lWe=o(" (HerBERT model)"),iWe=l(),kg=a("li"),dU=a("strong"),dWe=o("hubert"),cWe=o(" \u2014 "),ex=a("a"),fWe=o("Wav2Vec2CTCTokenizer"),mWe=o(" (Hubert model)"),gWe=l(),ls=a("li"),cU=a("strong"),hWe=o("ibert"),pWe=o(" \u2014 "),ox=a("a"),_We=o("RobertaTokenizer"),uWe=o(" or "),rx=a("a"),bWe=o("RobertaTokenizerFast"),vWe=o(" (I-BERT model)"),TWe=l(),is=a("li"),fU=a("strong"),FWe=o("layoutlm"),CWe=o(" \u2014 "),tx=a("a"),MWe=o("LayoutLMTokenizer"),EWe=o(" or "),ax=a("a"),yWe=o("LayoutLMTokenizerFast"),wWe=o(" (LayoutLM model)"),AWe=l(),ds=a("li"),mU=a("strong"),LWe=o("layoutlmv2"),BWe=o(" \u2014 "),nx=a("a"),xWe=o("LayoutLMv2Tokenizer"),kWe=o(" or "),sx=a("a"),RWe=o("LayoutLMv2TokenizerFast"),SWe=o(" (LayoutLMv2 model)"),PWe=l(),cs=a("li"),gU=a("strong"),$We=o("layoutxlm"),IWe=o(" \u2014 "),lx=a("a"),DWe=o("LayoutXLMTokenizer"),jWe=o(" or "),ix=a("a"),NWe=o("LayoutXLMTokenizerFast"),qWe=o(" (LayoutXLM model)"),GWe=l(),fs=a("li"),hU=a("strong"),OWe=o("led"),XWe=o(" \u2014 "),dx=a("a"),VWe=o("LEDTokenizer"),zWe=o(" or "),cx=a("a"),WWe=o("LEDTokenizerFast"),QWe=o(" (LED model)"),HWe=l(),ms=a("li"),pU=a("strong"),UWe=o("longformer"),JWe=o(" \u2014 "),fx=a("a"),YWe=o("LongformerTokenizer"),KWe=o(" or "),mx=a("a"),ZWe=o("LongformerTokenizerFast"),eQe=o(" (Longformer model)"),oQe=l(),Rg=a("li"),_U=a("strong"),rQe=o("luke"),tQe=o(" \u2014 "),gx=a("a"),aQe=o("LukeTokenizer"),nQe=o(" (LUKE model)"),sQe=l(),gs=a("li"),uU=a("strong"),lQe=o("lxmert"),iQe=o(" \u2014 "),hx=a("a"),dQe=o("LxmertTokenizer"),cQe=o(" or "),px=a("a"),fQe=o("LxmertTokenizerFast"),mQe=o(" (LXMERT model)"),gQe=l(),Sg=a("li"),bU=a("strong"),hQe=o("m2m_100"),pQe=o(" \u2014 "),_x=a("a"),_Qe=o("M2M100Tokenizer"),uQe=o(" (M2M100 model)"),bQe=l(),Pg=a("li"),vU=a("strong"),vQe=o("marian"),TQe=o(" \u2014 "),ux=a("a"),FQe=o("MarianTokenizer"),CQe=o(" (Marian model)"),MQe=l(),hs=a("li"),TU=a("strong"),EQe=o("mbart"),yQe=o(" \u2014 "),bx=a("a"),wQe=o("MBartTokenizer"),AQe=o(" or "),vx=a("a"),LQe=o("MBartTokenizerFast"),BQe=o(" (mBART model)"),xQe=l(),ps=a("li"),FU=a("strong"),kQe=o("mbart50"),RQe=o(" \u2014 "),Tx=a("a"),SQe=o("MBart50Tokenizer"),PQe=o(" or "),Fx=a("a"),$Qe=o("MBart50TokenizerFast"),IQe=o(" (mBART-50 model)"),DQe=l(),$g=a("li"),CU=a("strong"),jQe=o("mluke"),NQe=o(" \u2014 "),Cx=a("a"),qQe=o("MLukeTokenizer"),GQe=o(" (mLUKE model)"),OQe=l(),_s=a("li"),MU=a("strong"),XQe=o("mobilebert"),VQe=o(" \u2014 "),Mx=a("a"),zQe=o("MobileBertTokenizer"),WQe=o(" or "),Ex=a("a"),QQe=o("MobileBertTokenizerFast"),HQe=o(" (MobileBERT model)"),UQe=l(),us=a("li"),EU=a("strong"),JQe=o("mpnet"),YQe=o(" \u2014 "),yx=a("a"),KQe=o("MPNetTokenizer"),ZQe=o(" or "),wx=a("a"),eHe=o("MPNetTokenizerFast"),oHe=o(" (MPNet model)"),rHe=l(),bs=a("li"),yU=a("strong"),tHe=o("mt5"),aHe=o(" \u2014 "),Ax=a("a"),nHe=o("MT5Tokenizer"),sHe=o(" or "),Lx=a("a"),lHe=o("MT5TokenizerFast"),iHe=o(" (mT5 model)"),dHe=l(),vs=a("li"),wU=a("strong"),cHe=o("openai-gpt"),fHe=o(" \u2014 "),Bx=a("a"),mHe=o("OpenAIGPTTokenizer"),gHe=o(" or "),xx=a("a"),hHe=o("OpenAIGPTTokenizerFast"),pHe=o(" (OpenAI GPT model)"),_He=l(),Ts=a("li"),AU=a("strong"),uHe=o("pegasus"),bHe=o(" \u2014 "),kx=a("a"),vHe=o("PegasusTokenizer"),THe=o(" or "),Rx=a("a"),FHe=o("PegasusTokenizerFast"),CHe=o(" (Pegasus model)"),MHe=l(),Ig=a("li"),LU=a("strong"),EHe=o("perceiver"),yHe=o(" \u2014 "),Sx=a("a"),wHe=o("PerceiverTokenizer"),AHe=o(" (Perceiver model)"),LHe=l(),Dg=a("li"),BU=a("strong"),BHe=o("phobert"),xHe=o(" \u2014 "),Px=a("a"),kHe=o("PhobertTokenizer"),RHe=o(" (PhoBERT model)"),SHe=l(),jg=a("li"),xU=a("strong"),PHe=o("plbart"),$He=o(" \u2014 "),$x=a("a"),IHe=o("PLBartTokenizer"),DHe=o(" (PLBart model)"),jHe=l(),Ng=a("li"),kU=a("strong"),NHe=o("prophetnet"),qHe=o(" \u2014 "),Ix=a("a"),GHe=o("ProphetNetTokenizer"),OHe=o(" (ProphetNet model)"),XHe=l(),Fs=a("li"),RU=a("strong"),VHe=o("qdqbert"),zHe=o(" \u2014 "),Dx=a("a"),WHe=o("BertTokenizer"),QHe=o(" or "),jx=a("a"),HHe=o("BertTokenizerFast"),UHe=o(" (QDQBert model)"),JHe=l(),qg=a("li"),SU=a("strong"),YHe=o("rag"),KHe=o(" \u2014 "),Nx=a("a"),ZHe=o("RagTokenizer"),eUe=o(" (RAG model)"),oUe=l(),Cs=a("li"),PU=a("strong"),rUe=o("realm"),tUe=o(" \u2014 "),qx=a("a"),aUe=o("RealmTokenizer"),nUe=o(" or "),Gx=a("a"),sUe=o("RealmTokenizerFast"),lUe=o(" (Realm model)"),iUe=l(),Ms=a("li"),$U=a("strong"),dUe=o("reformer"),cUe=o(" \u2014 "),Ox=a("a"),fUe=o("ReformerTokenizer"),mUe=o(" or "),Xx=a("a"),gUe=o("ReformerTokenizerFast"),hUe=o(" (Reformer model)"),pUe=l(),Es=a("li"),IU=a("strong"),_Ue=o("rembert"),uUe=o(" \u2014 "),Vx=a("a"),bUe=o("RemBertTokenizer"),vUe=o(" or "),zx=a("a"),TUe=o("RemBertTokenizerFast"),FUe=o(" (RemBERT model)"),CUe=l(),ys=a("li"),DU=a("strong"),MUe=o("retribert"),EUe=o(" \u2014 "),Wx=a("a"),yUe=o("RetriBertTokenizer"),wUe=o(" or "),Qx=a("a"),AUe=o("RetriBertTokenizerFast"),LUe=o(" (RetriBERT model)"),BUe=l(),ws=a("li"),jU=a("strong"),xUe=o("roberta"),kUe=o(" \u2014 "),Hx=a("a"),RUe=o("RobertaTokenizer"),SUe=o(" or "),Ux=a("a"),PUe=o("RobertaTokenizerFast"),$Ue=o(" (RoBERTa model)"),IUe=l(),As=a("li"),NU=a("strong"),DUe=o("roformer"),jUe=o(" \u2014 "),Jx=a("a"),NUe=o("RoFormerTokenizer"),qUe=o(" or "),Yx=a("a"),GUe=o("RoFormerTokenizerFast"),OUe=o(" (RoFormer model)"),XUe=l(),Gg=a("li"),qU=a("strong"),VUe=o("speech_to_text"),zUe=o(" \u2014 "),Kx=a("a"),WUe=o("Speech2TextTokenizer"),QUe=o(" (Speech2Text model)"),HUe=l(),Og=a("li"),GU=a("strong"),UUe=o("speech_to_text_2"),JUe=o(" \u2014 "),Zx=a("a"),YUe=o("Speech2Text2Tokenizer"),KUe=o(" (Speech2Text2 model)"),ZUe=l(),Ls=a("li"),OU=a("strong"),eJe=o("splinter"),oJe=o(" \u2014 "),ek=a("a"),rJe=o("SplinterTokenizer"),tJe=o(" or "),ok=a("a"),aJe=o("SplinterTokenizerFast"),nJe=o(" (Splinter model)"),sJe=l(),Bs=a("li"),XU=a("strong"),lJe=o("squeezebert"),iJe=o(" \u2014 "),rk=a("a"),dJe=o("SqueezeBertTokenizer"),cJe=o(" or "),tk=a("a"),fJe=o("SqueezeBertTokenizerFast"),mJe=o(" (SqueezeBERT model)"),gJe=l(),xs=a("li"),VU=a("strong"),hJe=o("t5"),pJe=o(" \u2014 "),ak=a("a"),_Je=o("T5Tokenizer"),uJe=o(" or "),nk=a("a"),bJe=o("T5TokenizerFast"),vJe=o(" (T5 model)"),TJe=l(),Xg=a("li"),zU=a("strong"),FJe=o("tapas"),CJe=o(" \u2014 "),sk=a("a"),MJe=o("TapasTokenizer"),EJe=o(" (TAPAS model)"),yJe=l(),Vg=a("li"),WU=a("strong"),wJe=o("transfo-xl"),AJe=o(" \u2014 "),lk=a("a"),LJe=o("TransfoXLTokenizer"),BJe=o(" (Transformer-XL model)"),xJe=l(),zg=a("li"),QU=a("strong"),kJe=o("wav2vec2"),RJe=o(" \u2014 "),ik=a("a"),SJe=o("Wav2Vec2CTCTokenizer"),PJe=o(" (Wav2Vec2 model)"),$Je=l(),Wg=a("li"),HU=a("strong"),IJe=o("wav2vec2_phoneme"),DJe=o(" \u2014 "),dk=a("a"),jJe=o("Wav2Vec2PhonemeCTCTokenizer"),NJe=o(" (Wav2Vec2Phoneme model)"),qJe=l(),ks=a("li"),UU=a("strong"),GJe=o("xglm"),OJe=o(" \u2014 "),ck=a("a"),XJe=o("XGLMTokenizer"),VJe=o(" or "),fk=a("a"),zJe=o("XGLMTokenizerFast"),WJe=o(" (XGLM model)"),QJe=l(),Qg=a("li"),JU=a("strong"),HJe=o("xlm"),UJe=o(" \u2014 "),mk=a("a"),JJe=o("XLMTokenizer"),YJe=o(" (XLM model)"),KJe=l(),Hg=a("li"),YU=a("strong"),ZJe=o("xlm-prophetnet"),eYe=o(" \u2014 "),gk=a("a"),oYe=o("XLMProphetNetTokenizer"),rYe=o(" (XLMProphetNet model)"),tYe=l(),Rs=a("li"),KU=a("strong"),aYe=o("xlm-roberta"),nYe=o(" \u2014 "),hk=a("a"),sYe=o("XLMRobertaTokenizer"),lYe=o(" or "),pk=a("a"),iYe=o("XLMRobertaTokenizerFast"),dYe=o(" (XLM-RoBERTa model)"),cYe=l(),Ss=a("li"),ZU=a("strong"),fYe=o("xlnet"),mYe=o(" \u2014 "),_k=a("a"),gYe=o("XLNetTokenizer"),hYe=o(" or "),uk=a("a"),pYe=o("XLNetTokenizerFast"),_Ye=o(" (XLNet model)"),uYe=l(),eJ=a("p"),bYe=o("Examples:"),vYe=l(),f(OM.$$.fragment),TYe=l(),Ug=a("div"),f(XM.$$.fragment),FYe=l(),oJ=a("p"),CYe=o("Register a new tokenizer in this mapping."),X7e=l(),qi=a("h2"),Jg=a("a"),rJ=a("span"),f(VM.$$.fragment),MYe=l(),tJ=a("span"),EYe=o("AutoFeatureExtractor"),V7e=l(),zo=a("div"),f(zM.$$.fragment),yYe=l(),WM=a("p"),wYe=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),bk=a("a"),AYe=o("AutoFeatureExtractor.from_pretrained()"),LYe=o(" class method."),BYe=l(),QM=a("p"),xYe=o("This class cannot be instantiated directly using "),aJ=a("code"),kYe=o("__init__()"),RYe=o(" (throws an error)."),SYe=l(),xe=a("div"),f(HM.$$.fragment),PYe=l(),nJ=a("p"),$Ye=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),IYe=l(),ja=a("p"),DYe=o("The feature extractor class to instantiate is selected based on the "),sJ=a("code"),jYe=o("model_type"),NYe=o(` property of the config object
(either passed as an argument or loaded from `),lJ=a("code"),qYe=o("pretrained_model_name_or_path"),GYe=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),iJ=a("code"),OYe=o("pretrained_model_name_or_path"),XYe=o(":"),VYe=l(),ae=a("ul"),Yg=a("li"),dJ=a("strong"),zYe=o("beit"),WYe=o(" \u2014 "),vk=a("a"),QYe=o("BeitFeatureExtractor"),HYe=o(" (BEiT model)"),UYe=l(),Kg=a("li"),cJ=a("strong"),JYe=o("clip"),YYe=o(" \u2014 "),Tk=a("a"),KYe=o("CLIPFeatureExtractor"),ZYe=o(" (CLIP model)"),eKe=l(),Zg=a("li"),fJ=a("strong"),oKe=o("convnext"),rKe=o(" \u2014 "),Fk=a("a"),tKe=o("ConvNextFeatureExtractor"),aKe=o(" (ConvNext model)"),nKe=l(),eh=a("li"),mJ=a("strong"),sKe=o("deit"),lKe=o(" \u2014 "),Ck=a("a"),iKe=o("DeiTFeatureExtractor"),dKe=o(" (DeiT model)"),cKe=l(),oh=a("li"),gJ=a("strong"),fKe=o("detr"),mKe=o(" \u2014 "),Mk=a("a"),gKe=o("DetrFeatureExtractor"),hKe=o(" (DETR model)"),pKe=l(),rh=a("li"),hJ=a("strong"),_Ke=o("hubert"),uKe=o(" \u2014 "),Ek=a("a"),bKe=o("Wav2Vec2FeatureExtractor"),vKe=o(" (Hubert model)"),TKe=l(),th=a("li"),pJ=a("strong"),FKe=o("layoutlmv2"),CKe=o(" \u2014 "),yk=a("a"),MKe=o("LayoutLMv2FeatureExtractor"),EKe=o(" (LayoutLMv2 model)"),yKe=l(),ah=a("li"),_J=a("strong"),wKe=o("maskformer"),AKe=o(" \u2014 "),wk=a("a"),LKe=o("MaskFormerFeatureExtractor"),BKe=o(" (MaskFormer model)"),xKe=l(),nh=a("li"),uJ=a("strong"),kKe=o("perceiver"),RKe=o(" \u2014 "),Ak=a("a"),SKe=o("PerceiverFeatureExtractor"),PKe=o(" (Perceiver model)"),$Ke=l(),sh=a("li"),bJ=a("strong"),IKe=o("poolformer"),DKe=o(" \u2014 "),Lk=a("a"),jKe=o("PoolFormerFeatureExtractor"),NKe=o(" (PoolFormer model)"),qKe=l(),lh=a("li"),vJ=a("strong"),GKe=o("segformer"),OKe=o(" \u2014 "),Bk=a("a"),XKe=o("SegformerFeatureExtractor"),VKe=o(" (SegFormer model)"),zKe=l(),ih=a("li"),TJ=a("strong"),WKe=o("speech_to_text"),QKe=o(" \u2014 "),xk=a("a"),HKe=o("Speech2TextFeatureExtractor"),UKe=o(" (Speech2Text model)"),JKe=l(),dh=a("li"),FJ=a("strong"),YKe=o("swin"),KKe=o(" \u2014 "),kk=a("a"),ZKe=o("ViTFeatureExtractor"),eZe=o(" (Swin model)"),oZe=l(),ch=a("li"),CJ=a("strong"),rZe=o("vit"),tZe=o(" \u2014 "),Rk=a("a"),aZe=o("ViTFeatureExtractor"),nZe=o(" (ViT model)"),sZe=l(),fh=a("li"),MJ=a("strong"),lZe=o("vit_mae"),iZe=o(" \u2014 "),Sk=a("a"),dZe=o("ViTFeatureExtractor"),cZe=o(" (ViTMAE model)"),fZe=l(),mh=a("li"),EJ=a("strong"),mZe=o("wav2vec2"),gZe=o(" \u2014 "),Pk=a("a"),hZe=o("Wav2Vec2FeatureExtractor"),pZe=o(" (Wav2Vec2 model)"),_Ze=l(),f(gh.$$.fragment),uZe=l(),yJ=a("p"),bZe=o("Examples:"),vZe=l(),f(UM.$$.fragment),TZe=l(),hh=a("div"),f(JM.$$.fragment),FZe=l(),wJ=a("p"),CZe=o("Register a new feature extractor for this class."),z7e=l(),Gi=a("h2"),ph=a("a"),AJ=a("span"),f(YM.$$.fragment),MZe=l(),LJ=a("span"),EZe=o("AutoProcessor"),W7e=l(),Wo=a("div"),f(KM.$$.fragment),yZe=l(),ZM=a("p"),wZe=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),$k=a("a"),AZe=o("AutoProcessor.from_pretrained()"),LZe=o(" class method."),BZe=l(),eE=a("p"),xZe=o("This class cannot be instantiated directly using "),BJ=a("code"),kZe=o("__init__()"),RZe=o(" (throws an error)."),SZe=l(),ke=a("div"),f(oE.$$.fragment),PZe=l(),xJ=a("p"),$Ze=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),IZe=l(),Oi=a("p"),DZe=o("The processor class to instantiate is selected based on the "),kJ=a("code"),jZe=o("model_type"),NZe=o(` property of the config object (either
passed as an argument or loaded from `),RJ=a("code"),qZe=o("pretrained_model_name_or_path"),GZe=o(" if possible):"),OZe=l(),we=a("ul"),_h=a("li"),SJ=a("strong"),XZe=o("clip"),VZe=o(" \u2014 "),Ik=a("a"),zZe=o("CLIPProcessor"),WZe=o(" (CLIP model)"),QZe=l(),uh=a("li"),PJ=a("strong"),HZe=o("layoutlmv2"),UZe=o(" \u2014 "),Dk=a("a"),JZe=o("LayoutLMv2Processor"),YZe=o(" (LayoutLMv2 model)"),KZe=l(),bh=a("li"),$J=a("strong"),ZZe=o("layoutxlm"),eeo=o(" \u2014 "),jk=a("a"),oeo=o("LayoutXLMProcessor"),reo=o(" (LayoutXLM model)"),teo=l(),vh=a("li"),IJ=a("strong"),aeo=o("speech_to_text"),neo=o(" \u2014 "),Nk=a("a"),seo=o("Speech2TextProcessor"),leo=o(" (Speech2Text model)"),ieo=l(),Th=a("li"),DJ=a("strong"),deo=o("speech_to_text_2"),ceo=o(" \u2014 "),qk=a("a"),feo=o("Speech2Text2Processor"),meo=o(" (Speech2Text2 model)"),geo=l(),Fh=a("li"),jJ=a("strong"),heo=o("trocr"),peo=o(" \u2014 "),Gk=a("a"),_eo=o("TrOCRProcessor"),ueo=o(" (TrOCR model)"),beo=l(),Ch=a("li"),NJ=a("strong"),veo=o("vision-text-dual-encoder"),Teo=o(" \u2014 "),Ok=a("a"),Feo=o("VisionTextDualEncoderProcessor"),Ceo=o(" (VisionTextDualEncoder model)"),Meo=l(),Mh=a("li"),qJ=a("strong"),Eeo=o("wav2vec2"),yeo=o(" \u2014 "),Xk=a("a"),weo=o("Wav2Vec2Processor"),Aeo=o(" (Wav2Vec2 model)"),Leo=l(),f(Eh.$$.fragment),Beo=l(),GJ=a("p"),xeo=o("Examples:"),keo=l(),f(rE.$$.fragment),Reo=l(),yh=a("div"),f(tE.$$.fragment),Seo=l(),OJ=a("p"),Peo=o("Register a new processor for this class."),Q7e=l(),Xi=a("h2"),wh=a("a"),XJ=a("span"),f(aE.$$.fragment),$eo=l(),VJ=a("span"),Ieo=o("AutoModel"),H7e=l(),Qo=a("div"),f(nE.$$.fragment),Deo=l(),Vi=a("p"),jeo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),zJ=a("code"),Neo=o("from_pretrained()"),qeo=o("class method or the "),WJ=a("code"),Geo=o("from_config()"),Oeo=o(`class
method.`),Xeo=l(),sE=a("p"),Veo=o("This class cannot be instantiated directly using "),QJ=a("code"),zeo=o("__init__()"),Weo=o(" (throws an error)."),Qeo=l(),qr=a("div"),f(lE.$$.fragment),Heo=l(),HJ=a("p"),Ueo=o("Instantiates one of the base model classes of the library from a configuration."),Jeo=l(),zi=a("p"),Yeo=o(`Note:
Loading a model from its configuration file does `),UJ=a("strong"),Keo=o("not"),Zeo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JJ=a("code"),eoo=o("from_pretrained()"),ooo=o("to load the model weights."),roo=l(),YJ=a("p"),too=o("Examples:"),aoo=l(),f(iE.$$.fragment),noo=l(),Re=a("div"),f(dE.$$.fragment),soo=l(),KJ=a("p"),loo=o("Instantiate one of the base model classes of the library from a pretrained model."),ioo=l(),Na=a("p"),doo=o("The model class to instantiate is selected based on the "),ZJ=a("code"),coo=o("model_type"),foo=o(` property of the config object (either
passed as an argument or loaded from `),eY=a("code"),moo=o("pretrained_model_name_or_path"),goo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oY=a("code"),hoo=o("pretrained_model_name_or_path"),poo=o(":"),_oo=l(),F=a("ul"),Ah=a("li"),rY=a("strong"),uoo=o("albert"),boo=o(" \u2014 "),Vk=a("a"),voo=o("AlbertModel"),Too=o(" (ALBERT model)"),Foo=l(),Lh=a("li"),tY=a("strong"),Coo=o("bart"),Moo=o(" \u2014 "),zk=a("a"),Eoo=o("BartModel"),yoo=o(" (BART model)"),woo=l(),Bh=a("li"),aY=a("strong"),Aoo=o("beit"),Loo=o(" \u2014 "),Wk=a("a"),Boo=o("BeitModel"),xoo=o(" (BEiT model)"),koo=l(),xh=a("li"),nY=a("strong"),Roo=o("bert"),Soo=o(" \u2014 "),Qk=a("a"),Poo=o("BertModel"),$oo=o(" (BERT model)"),Ioo=l(),kh=a("li"),sY=a("strong"),Doo=o("bert-generation"),joo=o(" \u2014 "),Hk=a("a"),Noo=o("BertGenerationEncoder"),qoo=o(" (Bert Generation model)"),Goo=l(),Rh=a("li"),lY=a("strong"),Ooo=o("big_bird"),Xoo=o(" \u2014 "),Uk=a("a"),Voo=o("BigBirdModel"),zoo=o(" (BigBird model)"),Woo=l(),Sh=a("li"),iY=a("strong"),Qoo=o("bigbird_pegasus"),Hoo=o(" \u2014 "),Jk=a("a"),Uoo=o("BigBirdPegasusModel"),Joo=o(" (BigBirdPegasus model)"),Yoo=l(),Ph=a("li"),dY=a("strong"),Koo=o("blenderbot"),Zoo=o(" \u2014 "),Yk=a("a"),ero=o("BlenderbotModel"),oro=o(" (Blenderbot model)"),rro=l(),$h=a("li"),cY=a("strong"),tro=o("blenderbot-small"),aro=o(" \u2014 "),Kk=a("a"),nro=o("BlenderbotSmallModel"),sro=o(" (BlenderbotSmall model)"),lro=l(),Ih=a("li"),fY=a("strong"),iro=o("camembert"),dro=o(" \u2014 "),Zk=a("a"),cro=o("CamembertModel"),fro=o(" (CamemBERT model)"),mro=l(),Dh=a("li"),mY=a("strong"),gro=o("canine"),hro=o(" \u2014 "),eR=a("a"),pro=o("CanineModel"),_ro=o(" (Canine model)"),uro=l(),jh=a("li"),gY=a("strong"),bro=o("clip"),vro=o(" \u2014 "),oR=a("a"),Tro=o("CLIPModel"),Fro=o(" (CLIP model)"),Cro=l(),Nh=a("li"),hY=a("strong"),Mro=o("convbert"),Ero=o(" \u2014 "),rR=a("a"),yro=o("ConvBertModel"),wro=o(" (ConvBERT model)"),Aro=l(),qh=a("li"),pY=a("strong"),Lro=o("convnext"),Bro=o(" \u2014 "),tR=a("a"),xro=o("ConvNextModel"),kro=o(" (ConvNext model)"),Rro=l(),Gh=a("li"),_Y=a("strong"),Sro=o("ctrl"),Pro=o(" \u2014 "),aR=a("a"),$ro=o("CTRLModel"),Iro=o(" (CTRL model)"),Dro=l(),Oh=a("li"),uY=a("strong"),jro=o("data2vec-audio"),Nro=o(" \u2014 "),nR=a("a"),qro=o("Data2VecAudioModel"),Gro=o(" (Data2VecAudio model)"),Oro=l(),Xh=a("li"),bY=a("strong"),Xro=o("data2vec-text"),Vro=o(" \u2014 "),sR=a("a"),zro=o("Data2VecTextModel"),Wro=o(" (Data2VecText model)"),Qro=l(),Vh=a("li"),vY=a("strong"),Hro=o("deberta"),Uro=o(" \u2014 "),lR=a("a"),Jro=o("DebertaModel"),Yro=o(" (DeBERTa model)"),Kro=l(),zh=a("li"),TY=a("strong"),Zro=o("deberta-v2"),eto=o(" \u2014 "),iR=a("a"),oto=o("DebertaV2Model"),rto=o(" (DeBERTa-v2 model)"),tto=l(),Wh=a("li"),FY=a("strong"),ato=o("deit"),nto=o(" \u2014 "),dR=a("a"),sto=o("DeiTModel"),lto=o(" (DeiT model)"),ito=l(),Qh=a("li"),CY=a("strong"),dto=o("detr"),cto=o(" \u2014 "),cR=a("a"),fto=o("DetrModel"),mto=o(" (DETR model)"),gto=l(),Hh=a("li"),MY=a("strong"),hto=o("distilbert"),pto=o(" \u2014 "),fR=a("a"),_to=o("DistilBertModel"),uto=o(" (DistilBERT model)"),bto=l(),Uh=a("li"),EY=a("strong"),vto=o("dpr"),Tto=o(" \u2014 "),mR=a("a"),Fto=o("DPRQuestionEncoder"),Cto=o(" (DPR model)"),Mto=l(),Jh=a("li"),yY=a("strong"),Eto=o("electra"),yto=o(" \u2014 "),gR=a("a"),wto=o("ElectraModel"),Ato=o(" (ELECTRA model)"),Lto=l(),Yh=a("li"),wY=a("strong"),Bto=o("flaubert"),xto=o(" \u2014 "),hR=a("a"),kto=o("FlaubertModel"),Rto=o(" (FlauBERT model)"),Sto=l(),Kh=a("li"),AY=a("strong"),Pto=o("fnet"),$to=o(" \u2014 "),pR=a("a"),Ito=o("FNetModel"),Dto=o(" (FNet model)"),jto=l(),Zh=a("li"),LY=a("strong"),Nto=o("fsmt"),qto=o(" \u2014 "),_R=a("a"),Gto=o("FSMTModel"),Oto=o(" (FairSeq Machine-Translation model)"),Xto=l(),Ps=a("li"),BY=a("strong"),Vto=o("funnel"),zto=o(" \u2014 "),uR=a("a"),Wto=o("FunnelModel"),Qto=o(" or "),bR=a("a"),Hto=o("FunnelBaseModel"),Uto=o(" (Funnel Transformer model)"),Jto=l(),ep=a("li"),xY=a("strong"),Yto=o("gpt2"),Kto=o(" \u2014 "),vR=a("a"),Zto=o("GPT2Model"),eao=o(" (OpenAI GPT-2 model)"),oao=l(),op=a("li"),kY=a("strong"),rao=o("gpt_neo"),tao=o(" \u2014 "),TR=a("a"),aao=o("GPTNeoModel"),nao=o(" (GPT Neo model)"),sao=l(),rp=a("li"),RY=a("strong"),lao=o("gptj"),iao=o(" \u2014 "),FR=a("a"),dao=o("GPTJModel"),cao=o(" (GPT-J model)"),fao=l(),tp=a("li"),SY=a("strong"),mao=o("hubert"),gao=o(" \u2014 "),CR=a("a"),hao=o("HubertModel"),pao=o(" (Hubert model)"),_ao=l(),ap=a("li"),PY=a("strong"),uao=o("ibert"),bao=o(" \u2014 "),MR=a("a"),vao=o("IBertModel"),Tao=o(" (I-BERT model)"),Fao=l(),np=a("li"),$Y=a("strong"),Cao=o("imagegpt"),Mao=o(" \u2014 "),ER=a("a"),Eao=o("ImageGPTModel"),yao=o(" (ImageGPT model)"),wao=l(),sp=a("li"),IY=a("strong"),Aao=o("layoutlm"),Lao=o(" \u2014 "),yR=a("a"),Bao=o("LayoutLMModel"),xao=o(" (LayoutLM model)"),kao=l(),lp=a("li"),DY=a("strong"),Rao=o("layoutlmv2"),Sao=o(" \u2014 "),wR=a("a"),Pao=o("LayoutLMv2Model"),$ao=o(" (LayoutLMv2 model)"),Iao=l(),ip=a("li"),jY=a("strong"),Dao=o("led"),jao=o(" \u2014 "),AR=a("a"),Nao=o("LEDModel"),qao=o(" (LED model)"),Gao=l(),dp=a("li"),NY=a("strong"),Oao=o("longformer"),Xao=o(" \u2014 "),LR=a("a"),Vao=o("LongformerModel"),zao=o(" (Longformer model)"),Wao=l(),cp=a("li"),qY=a("strong"),Qao=o("luke"),Hao=o(" \u2014 "),BR=a("a"),Uao=o("LukeModel"),Jao=o(" (LUKE model)"),Yao=l(),fp=a("li"),GY=a("strong"),Kao=o("lxmert"),Zao=o(" \u2014 "),xR=a("a"),eno=o("LxmertModel"),ono=o(" (LXMERT model)"),rno=l(),mp=a("li"),OY=a("strong"),tno=o("m2m_100"),ano=o(" \u2014 "),kR=a("a"),nno=o("M2M100Model"),sno=o(" (M2M100 model)"),lno=l(),gp=a("li"),XY=a("strong"),ino=o("marian"),dno=o(" \u2014 "),RR=a("a"),cno=o("MarianModel"),fno=o(" (Marian model)"),mno=l(),hp=a("li"),VY=a("strong"),gno=o("maskformer"),hno=o(" \u2014 "),SR=a("a"),pno=o("MaskFormerModel"),_no=o(" (MaskFormer model)"),uno=l(),pp=a("li"),zY=a("strong"),bno=o("mbart"),vno=o(" \u2014 "),PR=a("a"),Tno=o("MBartModel"),Fno=o(" (mBART model)"),Cno=l(),_p=a("li"),WY=a("strong"),Mno=o("megatron-bert"),Eno=o(" \u2014 "),$R=a("a"),yno=o("MegatronBertModel"),wno=o(" (MegatronBert model)"),Ano=l(),up=a("li"),QY=a("strong"),Lno=o("mobilebert"),Bno=o(" \u2014 "),IR=a("a"),xno=o("MobileBertModel"),kno=o(" (MobileBERT model)"),Rno=l(),bp=a("li"),HY=a("strong"),Sno=o("mpnet"),Pno=o(" \u2014 "),DR=a("a"),$no=o("MPNetModel"),Ino=o(" (MPNet model)"),Dno=l(),vp=a("li"),UY=a("strong"),jno=o("mt5"),Nno=o(" \u2014 "),jR=a("a"),qno=o("MT5Model"),Gno=o(" (mT5 model)"),Ono=l(),Tp=a("li"),JY=a("strong"),Xno=o("nystromformer"),Vno=o(" \u2014 "),NR=a("a"),zno=o("NystromformerModel"),Wno=o(" (Nystromformer model)"),Qno=l(),Fp=a("li"),YY=a("strong"),Hno=o("openai-gpt"),Uno=o(" \u2014 "),qR=a("a"),Jno=o("OpenAIGPTModel"),Yno=o(" (OpenAI GPT model)"),Kno=l(),Cp=a("li"),KY=a("strong"),Zno=o("pegasus"),eso=o(" \u2014 "),GR=a("a"),oso=o("PegasusModel"),rso=o(" (Pegasus model)"),tso=l(),Mp=a("li"),ZY=a("strong"),aso=o("perceiver"),nso=o(" \u2014 "),OR=a("a"),sso=o("PerceiverModel"),lso=o(" (Perceiver model)"),iso=l(),Ep=a("li"),eK=a("strong"),dso=o("plbart"),cso=o(" \u2014 "),XR=a("a"),fso=o("PLBartModel"),mso=o(" (PLBart model)"),gso=l(),yp=a("li"),oK=a("strong"),hso=o("poolformer"),pso=o(" \u2014 "),VR=a("a"),_so=o("PoolFormerModel"),uso=o(" (PoolFormer model)"),bso=l(),wp=a("li"),rK=a("strong"),vso=o("prophetnet"),Tso=o(" \u2014 "),zR=a("a"),Fso=o("ProphetNetModel"),Cso=o(" (ProphetNet model)"),Mso=l(),Ap=a("li"),tK=a("strong"),Eso=o("qdqbert"),yso=o(" \u2014 "),WR=a("a"),wso=o("QDQBertModel"),Aso=o(" (QDQBert model)"),Lso=l(),Lp=a("li"),aK=a("strong"),Bso=o("reformer"),xso=o(" \u2014 "),QR=a("a"),kso=o("ReformerModel"),Rso=o(" (Reformer model)"),Sso=l(),Bp=a("li"),nK=a("strong"),Pso=o("rembert"),$so=o(" \u2014 "),HR=a("a"),Iso=o("RemBertModel"),Dso=o(" (RemBERT model)"),jso=l(),xp=a("li"),sK=a("strong"),Nso=o("retribert"),qso=o(" \u2014 "),UR=a("a"),Gso=o("RetriBertModel"),Oso=o(" (RetriBERT model)"),Xso=l(),kp=a("li"),lK=a("strong"),Vso=o("roberta"),zso=o(" \u2014 "),JR=a("a"),Wso=o("RobertaModel"),Qso=o(" (RoBERTa model)"),Hso=l(),Rp=a("li"),iK=a("strong"),Uso=o("roformer"),Jso=o(" \u2014 "),YR=a("a"),Yso=o("RoFormerModel"),Kso=o(" (RoFormer model)"),Zso=l(),Sp=a("li"),dK=a("strong"),elo=o("segformer"),olo=o(" \u2014 "),KR=a("a"),rlo=o("SegformerModel"),tlo=o(" (SegFormer model)"),alo=l(),Pp=a("li"),cK=a("strong"),nlo=o("sew"),slo=o(" \u2014 "),ZR=a("a"),llo=o("SEWModel"),ilo=o(" (SEW model)"),dlo=l(),$p=a("li"),fK=a("strong"),clo=o("sew-d"),flo=o(" \u2014 "),eS=a("a"),mlo=o("SEWDModel"),glo=o(" (SEW-D model)"),hlo=l(),Ip=a("li"),mK=a("strong"),plo=o("speech_to_text"),_lo=o(" \u2014 "),oS=a("a"),ulo=o("Speech2TextModel"),blo=o(" (Speech2Text model)"),vlo=l(),Dp=a("li"),gK=a("strong"),Tlo=o("splinter"),Flo=o(" \u2014 "),rS=a("a"),Clo=o("SplinterModel"),Mlo=o(" (Splinter model)"),Elo=l(),jp=a("li"),hK=a("strong"),ylo=o("squeezebert"),wlo=o(" \u2014 "),tS=a("a"),Alo=o("SqueezeBertModel"),Llo=o(" (SqueezeBERT model)"),Blo=l(),Np=a("li"),pK=a("strong"),xlo=o("swin"),klo=o(" \u2014 "),aS=a("a"),Rlo=o("SwinModel"),Slo=o(" (Swin model)"),Plo=l(),qp=a("li"),_K=a("strong"),$lo=o("t5"),Ilo=o(" \u2014 "),nS=a("a"),Dlo=o("T5Model"),jlo=o(" (T5 model)"),Nlo=l(),Gp=a("li"),uK=a("strong"),qlo=o("tapas"),Glo=o(" \u2014 "),sS=a("a"),Olo=o("TapasModel"),Xlo=o(" (TAPAS model)"),Vlo=l(),Op=a("li"),bK=a("strong"),zlo=o("transfo-xl"),Wlo=o(" \u2014 "),lS=a("a"),Qlo=o("TransfoXLModel"),Hlo=o(" (Transformer-XL model)"),Ulo=l(),Xp=a("li"),vK=a("strong"),Jlo=o("unispeech"),Ylo=o(" \u2014 "),iS=a("a"),Klo=o("UniSpeechModel"),Zlo=o(" (UniSpeech model)"),eio=l(),Vp=a("li"),TK=a("strong"),oio=o("unispeech-sat"),rio=o(" \u2014 "),dS=a("a"),tio=o("UniSpeechSatModel"),aio=o(" (UniSpeechSat model)"),nio=l(),zp=a("li"),FK=a("strong"),sio=o("vilt"),lio=o(" \u2014 "),cS=a("a"),iio=o("ViltModel"),dio=o(" (ViLT model)"),cio=l(),Wp=a("li"),CK=a("strong"),fio=o("vision-text-dual-encoder"),mio=o(" \u2014 "),fS=a("a"),gio=o("VisionTextDualEncoderModel"),hio=o(" (VisionTextDualEncoder model)"),pio=l(),Qp=a("li"),MK=a("strong"),_io=o("visual_bert"),uio=o(" \u2014 "),mS=a("a"),bio=o("VisualBertModel"),vio=o(" (VisualBert model)"),Tio=l(),Hp=a("li"),EK=a("strong"),Fio=o("vit"),Cio=o(" \u2014 "),gS=a("a"),Mio=o("ViTModel"),Eio=o(" (ViT model)"),yio=l(),Up=a("li"),yK=a("strong"),wio=o("vit_mae"),Aio=o(" \u2014 "),hS=a("a"),Lio=o("ViTMAEModel"),Bio=o(" (ViTMAE model)"),xio=l(),Jp=a("li"),wK=a("strong"),kio=o("wav2vec2"),Rio=o(" \u2014 "),pS=a("a"),Sio=o("Wav2Vec2Model"),Pio=o(" (Wav2Vec2 model)"),$io=l(),Yp=a("li"),AK=a("strong"),Iio=o("wavlm"),Dio=o(" \u2014 "),_S=a("a"),jio=o("WavLMModel"),Nio=o(" (WavLM model)"),qio=l(),Kp=a("li"),LK=a("strong"),Gio=o("xglm"),Oio=o(" \u2014 "),uS=a("a"),Xio=o("XGLMModel"),Vio=o(" (XGLM model)"),zio=l(),Zp=a("li"),BK=a("strong"),Wio=o("xlm"),Qio=o(" \u2014 "),bS=a("a"),Hio=o("XLMModel"),Uio=o(" (XLM model)"),Jio=l(),e_=a("li"),xK=a("strong"),Yio=o("xlm-prophetnet"),Kio=o(" \u2014 "),vS=a("a"),Zio=o("XLMProphetNetModel"),edo=o(" (XLMProphetNet model)"),odo=l(),o_=a("li"),kK=a("strong"),rdo=o("xlm-roberta"),tdo=o(" \u2014 "),TS=a("a"),ado=o("XLMRobertaModel"),ndo=o(" (XLM-RoBERTa model)"),sdo=l(),r_=a("li"),RK=a("strong"),ldo=o("xlm-roberta-xl"),ido=o(" \u2014 "),FS=a("a"),ddo=o("XLMRobertaXLModel"),cdo=o(" (XLM-RoBERTa-XL model)"),fdo=l(),t_=a("li"),SK=a("strong"),mdo=o("xlnet"),gdo=o(" \u2014 "),CS=a("a"),hdo=o("XLNetModel"),pdo=o(" (XLNet model)"),_do=l(),a_=a("li"),PK=a("strong"),udo=o("yoso"),bdo=o(" \u2014 "),MS=a("a"),vdo=o("YosoModel"),Tdo=o(" (YOSO model)"),Fdo=l(),n_=a("p"),Cdo=o("The model is set in evaluation mode by default using "),$K=a("code"),Mdo=o("model.eval()"),Edo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),IK=a("code"),ydo=o("model.train()"),wdo=l(),DK=a("p"),Ado=o("Examples:"),Ldo=l(),f(cE.$$.fragment),U7e=l(),Wi=a("h2"),s_=a("a"),jK=a("span"),f(fE.$$.fragment),Bdo=l(),NK=a("span"),xdo=o("AutoModelForPreTraining"),J7e=l(),Ho=a("div"),f(mE.$$.fragment),kdo=l(),Qi=a("p"),Rdo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),qK=a("code"),Sdo=o("from_pretrained()"),Pdo=o("class method or the "),GK=a("code"),$do=o("from_config()"),Ido=o(`class
method.`),Ddo=l(),gE=a("p"),jdo=o("This class cannot be instantiated directly using "),OK=a("code"),Ndo=o("__init__()"),qdo=o(" (throws an error)."),Gdo=l(),Gr=a("div"),f(hE.$$.fragment),Odo=l(),XK=a("p"),Xdo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Vdo=l(),Hi=a("p"),zdo=o(`Note:
Loading a model from its configuration file does `),VK=a("strong"),Wdo=o("not"),Qdo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zK=a("code"),Hdo=o("from_pretrained()"),Udo=o("to load the model weights."),Jdo=l(),WK=a("p"),Ydo=o("Examples:"),Kdo=l(),f(pE.$$.fragment),Zdo=l(),Se=a("div"),f(_E.$$.fragment),eco=l(),QK=a("p"),oco=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),rco=l(),qa=a("p"),tco=o("The model class to instantiate is selected based on the "),HK=a("code"),aco=o("model_type"),nco=o(` property of the config object (either
passed as an argument or loaded from `),UK=a("code"),sco=o("pretrained_model_name_or_path"),lco=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JK=a("code"),ico=o("pretrained_model_name_or_path"),dco=o(":"),cco=l(),k=a("ul"),l_=a("li"),YK=a("strong"),fco=o("albert"),mco=o(" \u2014 "),ES=a("a"),gco=o("AlbertForPreTraining"),hco=o(" (ALBERT model)"),pco=l(),i_=a("li"),KK=a("strong"),_co=o("bart"),uco=o(" \u2014 "),yS=a("a"),bco=o("BartForConditionalGeneration"),vco=o(" (BART model)"),Tco=l(),d_=a("li"),ZK=a("strong"),Fco=o("bert"),Cco=o(" \u2014 "),wS=a("a"),Mco=o("BertForPreTraining"),Eco=o(" (BERT model)"),yco=l(),c_=a("li"),eZ=a("strong"),wco=o("big_bird"),Aco=o(" \u2014 "),AS=a("a"),Lco=o("BigBirdForPreTraining"),Bco=o(" (BigBird model)"),xco=l(),f_=a("li"),oZ=a("strong"),kco=o("camembert"),Rco=o(" \u2014 "),LS=a("a"),Sco=o("CamembertForMaskedLM"),Pco=o(" (CamemBERT model)"),$co=l(),m_=a("li"),rZ=a("strong"),Ico=o("ctrl"),Dco=o(" \u2014 "),BS=a("a"),jco=o("CTRLLMHeadModel"),Nco=o(" (CTRL model)"),qco=l(),g_=a("li"),tZ=a("strong"),Gco=o("data2vec-text"),Oco=o(" \u2014 "),xS=a("a"),Xco=o("Data2VecTextForMaskedLM"),Vco=o(" (Data2VecText model)"),zco=l(),h_=a("li"),aZ=a("strong"),Wco=o("deberta"),Qco=o(" \u2014 "),kS=a("a"),Hco=o("DebertaForMaskedLM"),Uco=o(" (DeBERTa model)"),Jco=l(),p_=a("li"),nZ=a("strong"),Yco=o("deberta-v2"),Kco=o(" \u2014 "),RS=a("a"),Zco=o("DebertaV2ForMaskedLM"),efo=o(" (DeBERTa-v2 model)"),ofo=l(),__=a("li"),sZ=a("strong"),rfo=o("distilbert"),tfo=o(" \u2014 "),SS=a("a"),afo=o("DistilBertForMaskedLM"),nfo=o(" (DistilBERT model)"),sfo=l(),u_=a("li"),lZ=a("strong"),lfo=o("electra"),ifo=o(" \u2014 "),PS=a("a"),dfo=o("ElectraForPreTraining"),cfo=o(" (ELECTRA model)"),ffo=l(),b_=a("li"),iZ=a("strong"),mfo=o("flaubert"),gfo=o(" \u2014 "),$S=a("a"),hfo=o("FlaubertWithLMHeadModel"),pfo=o(" (FlauBERT model)"),_fo=l(),v_=a("li"),dZ=a("strong"),ufo=o("fnet"),bfo=o(" \u2014 "),IS=a("a"),vfo=o("FNetForPreTraining"),Tfo=o(" (FNet model)"),Ffo=l(),T_=a("li"),cZ=a("strong"),Cfo=o("fsmt"),Mfo=o(" \u2014 "),DS=a("a"),Efo=o("FSMTForConditionalGeneration"),yfo=o(" (FairSeq Machine-Translation model)"),wfo=l(),F_=a("li"),fZ=a("strong"),Afo=o("funnel"),Lfo=o(" \u2014 "),jS=a("a"),Bfo=o("FunnelForPreTraining"),xfo=o(" (Funnel Transformer model)"),kfo=l(),C_=a("li"),mZ=a("strong"),Rfo=o("gpt2"),Sfo=o(" \u2014 "),NS=a("a"),Pfo=o("GPT2LMHeadModel"),$fo=o(" (OpenAI GPT-2 model)"),Ifo=l(),M_=a("li"),gZ=a("strong"),Dfo=o("ibert"),jfo=o(" \u2014 "),qS=a("a"),Nfo=o("IBertForMaskedLM"),qfo=o(" (I-BERT model)"),Gfo=l(),E_=a("li"),hZ=a("strong"),Ofo=o("layoutlm"),Xfo=o(" \u2014 "),GS=a("a"),Vfo=o("LayoutLMForMaskedLM"),zfo=o(" (LayoutLM model)"),Wfo=l(),y_=a("li"),pZ=a("strong"),Qfo=o("longformer"),Hfo=o(" \u2014 "),OS=a("a"),Ufo=o("LongformerForMaskedLM"),Jfo=o(" (Longformer model)"),Yfo=l(),w_=a("li"),_Z=a("strong"),Kfo=o("lxmert"),Zfo=o(" \u2014 "),XS=a("a"),emo=o("LxmertForPreTraining"),omo=o(" (LXMERT model)"),rmo=l(),A_=a("li"),uZ=a("strong"),tmo=o("megatron-bert"),amo=o(" \u2014 "),VS=a("a"),nmo=o("MegatronBertForPreTraining"),smo=o(" (MegatronBert model)"),lmo=l(),L_=a("li"),bZ=a("strong"),imo=o("mobilebert"),dmo=o(" \u2014 "),zS=a("a"),cmo=o("MobileBertForPreTraining"),fmo=o(" (MobileBERT model)"),mmo=l(),B_=a("li"),vZ=a("strong"),gmo=o("mpnet"),hmo=o(" \u2014 "),WS=a("a"),pmo=o("MPNetForMaskedLM"),_mo=o(" (MPNet model)"),umo=l(),x_=a("li"),TZ=a("strong"),bmo=o("openai-gpt"),vmo=o(" \u2014 "),QS=a("a"),Tmo=o("OpenAIGPTLMHeadModel"),Fmo=o(" (OpenAI GPT model)"),Cmo=l(),k_=a("li"),FZ=a("strong"),Mmo=o("retribert"),Emo=o(" \u2014 "),HS=a("a"),ymo=o("RetriBertModel"),wmo=o(" (RetriBERT model)"),Amo=l(),R_=a("li"),CZ=a("strong"),Lmo=o("roberta"),Bmo=o(" \u2014 "),US=a("a"),xmo=o("RobertaForMaskedLM"),kmo=o(" (RoBERTa model)"),Rmo=l(),S_=a("li"),MZ=a("strong"),Smo=o("squeezebert"),Pmo=o(" \u2014 "),JS=a("a"),$mo=o("SqueezeBertForMaskedLM"),Imo=o(" (SqueezeBERT model)"),Dmo=l(),P_=a("li"),EZ=a("strong"),jmo=o("t5"),Nmo=o(" \u2014 "),YS=a("a"),qmo=o("T5ForConditionalGeneration"),Gmo=o(" (T5 model)"),Omo=l(),$_=a("li"),yZ=a("strong"),Xmo=o("tapas"),Vmo=o(" \u2014 "),KS=a("a"),zmo=o("TapasForMaskedLM"),Wmo=o(" (TAPAS model)"),Qmo=l(),I_=a("li"),wZ=a("strong"),Hmo=o("transfo-xl"),Umo=o(" \u2014 "),ZS=a("a"),Jmo=o("TransfoXLLMHeadModel"),Ymo=o(" (Transformer-XL model)"),Kmo=l(),D_=a("li"),AZ=a("strong"),Zmo=o("unispeech"),ego=o(" \u2014 "),eP=a("a"),ogo=o("UniSpeechForPreTraining"),rgo=o(" (UniSpeech model)"),tgo=l(),j_=a("li"),LZ=a("strong"),ago=o("unispeech-sat"),ngo=o(" \u2014 "),oP=a("a"),sgo=o("UniSpeechSatForPreTraining"),lgo=o(" (UniSpeechSat model)"),igo=l(),N_=a("li"),BZ=a("strong"),dgo=o("visual_bert"),cgo=o(" \u2014 "),rP=a("a"),fgo=o("VisualBertForPreTraining"),mgo=o(" (VisualBert model)"),ggo=l(),q_=a("li"),xZ=a("strong"),hgo=o("vit_mae"),pgo=o(" \u2014 "),tP=a("a"),_go=o("ViTMAEForPreTraining"),ugo=o(" (ViTMAE model)"),bgo=l(),G_=a("li"),kZ=a("strong"),vgo=o("wav2vec2"),Tgo=o(" \u2014 "),aP=a("a"),Fgo=o("Wav2Vec2ForPreTraining"),Cgo=o(" (Wav2Vec2 model)"),Mgo=l(),O_=a("li"),RZ=a("strong"),Ego=o("xlm"),ygo=o(" \u2014 "),nP=a("a"),wgo=o("XLMWithLMHeadModel"),Ago=o(" (XLM model)"),Lgo=l(),X_=a("li"),SZ=a("strong"),Bgo=o("xlm-roberta"),xgo=o(" \u2014 "),sP=a("a"),kgo=o("XLMRobertaForMaskedLM"),Rgo=o(" (XLM-RoBERTa model)"),Sgo=l(),V_=a("li"),PZ=a("strong"),Pgo=o("xlm-roberta-xl"),$go=o(" \u2014 "),lP=a("a"),Igo=o("XLMRobertaXLForMaskedLM"),Dgo=o(" (XLM-RoBERTa-XL model)"),jgo=l(),z_=a("li"),$Z=a("strong"),Ngo=o("xlnet"),qgo=o(" \u2014 "),iP=a("a"),Ggo=o("XLNetLMHeadModel"),Ogo=o(" (XLNet model)"),Xgo=l(),W_=a("p"),Vgo=o("The model is set in evaluation mode by default using "),IZ=a("code"),zgo=o("model.eval()"),Wgo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),DZ=a("code"),Qgo=o("model.train()"),Hgo=l(),jZ=a("p"),Ugo=o("Examples:"),Jgo=l(),f(uE.$$.fragment),Y7e=l(),Ui=a("h2"),Q_=a("a"),NZ=a("span"),f(bE.$$.fragment),Ygo=l(),qZ=a("span"),Kgo=o("AutoModelForCausalLM"),K7e=l(),Uo=a("div"),f(vE.$$.fragment),Zgo=l(),Ji=a("p"),eho=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),GZ=a("code"),oho=o("from_pretrained()"),rho=o("class method or the "),OZ=a("code"),tho=o("from_config()"),aho=o(`class
method.`),nho=l(),TE=a("p"),sho=o("This class cannot be instantiated directly using "),XZ=a("code"),lho=o("__init__()"),iho=o(" (throws an error)."),dho=l(),Or=a("div"),f(FE.$$.fragment),cho=l(),VZ=a("p"),fho=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),mho=l(),Yi=a("p"),gho=o(`Note:
Loading a model from its configuration file does `),zZ=a("strong"),hho=o("not"),pho=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WZ=a("code"),_ho=o("from_pretrained()"),uho=o("to load the model weights."),bho=l(),QZ=a("p"),vho=o("Examples:"),Tho=l(),f(CE.$$.fragment),Fho=l(),Pe=a("div"),f(ME.$$.fragment),Cho=l(),HZ=a("p"),Mho=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Eho=l(),Ga=a("p"),yho=o("The model class to instantiate is selected based on the "),UZ=a("code"),who=o("model_type"),Aho=o(` property of the config object (either
passed as an argument or loaded from `),JZ=a("code"),Lho=o("pretrained_model_name_or_path"),Bho=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YZ=a("code"),xho=o("pretrained_model_name_or_path"),kho=o(":"),Rho=l(),$=a("ul"),H_=a("li"),KZ=a("strong"),Sho=o("bart"),Pho=o(" \u2014 "),dP=a("a"),$ho=o("BartForCausalLM"),Iho=o(" (BART model)"),Dho=l(),U_=a("li"),ZZ=a("strong"),jho=o("bert"),Nho=o(" \u2014 "),cP=a("a"),qho=o("BertLMHeadModel"),Gho=o(" (BERT model)"),Oho=l(),J_=a("li"),eee=a("strong"),Xho=o("bert-generation"),Vho=o(" \u2014 "),fP=a("a"),zho=o("BertGenerationDecoder"),Who=o(" (Bert Generation model)"),Qho=l(),Y_=a("li"),oee=a("strong"),Hho=o("big_bird"),Uho=o(" \u2014 "),mP=a("a"),Jho=o("BigBirdForCausalLM"),Yho=o(" (BigBird model)"),Kho=l(),K_=a("li"),ree=a("strong"),Zho=o("bigbird_pegasus"),epo=o(" \u2014 "),gP=a("a"),opo=o("BigBirdPegasusForCausalLM"),rpo=o(" (BigBirdPegasus model)"),tpo=l(),Z_=a("li"),tee=a("strong"),apo=o("blenderbot"),npo=o(" \u2014 "),hP=a("a"),spo=o("BlenderbotForCausalLM"),lpo=o(" (Blenderbot model)"),ipo=l(),eu=a("li"),aee=a("strong"),dpo=o("blenderbot-small"),cpo=o(" \u2014 "),pP=a("a"),fpo=o("BlenderbotSmallForCausalLM"),mpo=o(" (BlenderbotSmall model)"),gpo=l(),ou=a("li"),nee=a("strong"),hpo=o("camembert"),ppo=o(" \u2014 "),_P=a("a"),_po=o("CamembertForCausalLM"),upo=o(" (CamemBERT model)"),bpo=l(),ru=a("li"),see=a("strong"),vpo=o("ctrl"),Tpo=o(" \u2014 "),uP=a("a"),Fpo=o("CTRLLMHeadModel"),Cpo=o(" (CTRL model)"),Mpo=l(),tu=a("li"),lee=a("strong"),Epo=o("data2vec-text"),ypo=o(" \u2014 "),bP=a("a"),wpo=o("Data2VecTextForCausalLM"),Apo=o(" (Data2VecText model)"),Lpo=l(),au=a("li"),iee=a("strong"),Bpo=o("electra"),xpo=o(" \u2014 "),vP=a("a"),kpo=o("ElectraForCausalLM"),Rpo=o(" (ELECTRA model)"),Spo=l(),nu=a("li"),dee=a("strong"),Ppo=o("gpt2"),$po=o(" \u2014 "),TP=a("a"),Ipo=o("GPT2LMHeadModel"),Dpo=o(" (OpenAI GPT-2 model)"),jpo=l(),su=a("li"),cee=a("strong"),Npo=o("gpt_neo"),qpo=o(" \u2014 "),FP=a("a"),Gpo=o("GPTNeoForCausalLM"),Opo=o(" (GPT Neo model)"),Xpo=l(),lu=a("li"),fee=a("strong"),Vpo=o("gptj"),zpo=o(" \u2014 "),CP=a("a"),Wpo=o("GPTJForCausalLM"),Qpo=o(" (GPT-J model)"),Hpo=l(),iu=a("li"),mee=a("strong"),Upo=o("marian"),Jpo=o(" \u2014 "),MP=a("a"),Ypo=o("MarianForCausalLM"),Kpo=o(" (Marian model)"),Zpo=l(),du=a("li"),gee=a("strong"),e_o=o("mbart"),o_o=o(" \u2014 "),EP=a("a"),r_o=o("MBartForCausalLM"),t_o=o(" (mBART model)"),a_o=l(),cu=a("li"),hee=a("strong"),n_o=o("megatron-bert"),s_o=o(" \u2014 "),yP=a("a"),l_o=o("MegatronBertForCausalLM"),i_o=o(" (MegatronBert model)"),d_o=l(),fu=a("li"),pee=a("strong"),c_o=o("openai-gpt"),f_o=o(" \u2014 "),wP=a("a"),m_o=o("OpenAIGPTLMHeadModel"),g_o=o(" (OpenAI GPT model)"),h_o=l(),mu=a("li"),_ee=a("strong"),p_o=o("pegasus"),__o=o(" \u2014 "),AP=a("a"),u_o=o("PegasusForCausalLM"),b_o=o(" (Pegasus model)"),v_o=l(),gu=a("li"),uee=a("strong"),T_o=o("plbart"),F_o=o(" \u2014 "),LP=a("a"),C_o=o("PLBartForCausalLM"),M_o=o(" (PLBart model)"),E_o=l(),hu=a("li"),bee=a("strong"),y_o=o("prophetnet"),w_o=o(" \u2014 "),BP=a("a"),A_o=o("ProphetNetForCausalLM"),L_o=o(" (ProphetNet model)"),B_o=l(),pu=a("li"),vee=a("strong"),x_o=o("qdqbert"),k_o=o(" \u2014 "),xP=a("a"),R_o=o("QDQBertLMHeadModel"),S_o=o(" (QDQBert model)"),P_o=l(),_u=a("li"),Tee=a("strong"),$_o=o("reformer"),I_o=o(" \u2014 "),kP=a("a"),D_o=o("ReformerModelWithLMHead"),j_o=o(" (Reformer model)"),N_o=l(),uu=a("li"),Fee=a("strong"),q_o=o("rembert"),G_o=o(" \u2014 "),RP=a("a"),O_o=o("RemBertForCausalLM"),X_o=o(" (RemBERT model)"),V_o=l(),bu=a("li"),Cee=a("strong"),z_o=o("roberta"),W_o=o(" \u2014 "),SP=a("a"),Q_o=o("RobertaForCausalLM"),H_o=o(" (RoBERTa model)"),U_o=l(),vu=a("li"),Mee=a("strong"),J_o=o("roformer"),Y_o=o(" \u2014 "),PP=a("a"),K_o=o("RoFormerForCausalLM"),Z_o=o(" (RoFormer model)"),euo=l(),Tu=a("li"),Eee=a("strong"),ouo=o("speech_to_text_2"),ruo=o(" \u2014 "),$P=a("a"),tuo=o("Speech2Text2ForCausalLM"),auo=o(" (Speech2Text2 model)"),nuo=l(),Fu=a("li"),yee=a("strong"),suo=o("transfo-xl"),luo=o(" \u2014 "),IP=a("a"),iuo=o("TransfoXLLMHeadModel"),duo=o(" (Transformer-XL model)"),cuo=l(),Cu=a("li"),wee=a("strong"),fuo=o("trocr"),muo=o(" \u2014 "),DP=a("a"),guo=o("TrOCRForCausalLM"),huo=o(" (TrOCR model)"),puo=l(),Mu=a("li"),Aee=a("strong"),_uo=o("xglm"),uuo=o(" \u2014 "),jP=a("a"),buo=o("XGLMForCausalLM"),vuo=o(" (XGLM model)"),Tuo=l(),Eu=a("li"),Lee=a("strong"),Fuo=o("xlm"),Cuo=o(" \u2014 "),NP=a("a"),Muo=o("XLMWithLMHeadModel"),Euo=o(" (XLM model)"),yuo=l(),yu=a("li"),Bee=a("strong"),wuo=o("xlm-prophetnet"),Auo=o(" \u2014 "),qP=a("a"),Luo=o("XLMProphetNetForCausalLM"),Buo=o(" (XLMProphetNet model)"),xuo=l(),wu=a("li"),xee=a("strong"),kuo=o("xlm-roberta"),Ruo=o(" \u2014 "),GP=a("a"),Suo=o("XLMRobertaForCausalLM"),Puo=o(" (XLM-RoBERTa model)"),$uo=l(),Au=a("li"),kee=a("strong"),Iuo=o("xlm-roberta-xl"),Duo=o(" \u2014 "),OP=a("a"),juo=o("XLMRobertaXLForCausalLM"),Nuo=o(" (XLM-RoBERTa-XL model)"),quo=l(),Lu=a("li"),Ree=a("strong"),Guo=o("xlnet"),Ouo=o(" \u2014 "),XP=a("a"),Xuo=o("XLNetLMHeadModel"),Vuo=o(" (XLNet model)"),zuo=l(),Bu=a("p"),Wuo=o("The model is set in evaluation mode by default using "),See=a("code"),Quo=o("model.eval()"),Huo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pee=a("code"),Uuo=o("model.train()"),Juo=l(),$ee=a("p"),Yuo=o("Examples:"),Kuo=l(),f(EE.$$.fragment),Z7e=l(),Ki=a("h2"),xu=a("a"),Iee=a("span"),f(yE.$$.fragment),Zuo=l(),Dee=a("span"),e2o=o("AutoModelForMaskedLM"),eBe=l(),Jo=a("div"),f(wE.$$.fragment),o2o=l(),Zi=a("p"),r2o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),jee=a("code"),t2o=o("from_pretrained()"),a2o=o("class method or the "),Nee=a("code"),n2o=o("from_config()"),s2o=o(`class
method.`),l2o=l(),AE=a("p"),i2o=o("This class cannot be instantiated directly using "),qee=a("code"),d2o=o("__init__()"),c2o=o(" (throws an error)."),f2o=l(),Xr=a("div"),f(LE.$$.fragment),m2o=l(),Gee=a("p"),g2o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),h2o=l(),ed=a("p"),p2o=o(`Note:
Loading a model from its configuration file does `),Oee=a("strong"),_2o=o("not"),u2o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Xee=a("code"),b2o=o("from_pretrained()"),v2o=o("to load the model weights."),T2o=l(),Vee=a("p"),F2o=o("Examples:"),C2o=l(),f(BE.$$.fragment),M2o=l(),$e=a("div"),f(xE.$$.fragment),E2o=l(),zee=a("p"),y2o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),w2o=l(),Oa=a("p"),A2o=o("The model class to instantiate is selected based on the "),Wee=a("code"),L2o=o("model_type"),B2o=o(` property of the config object (either
passed as an argument or loaded from `),Qee=a("code"),x2o=o("pretrained_model_name_or_path"),k2o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hee=a("code"),R2o=o("pretrained_model_name_or_path"),S2o=o(":"),P2o=l(),I=a("ul"),ku=a("li"),Uee=a("strong"),$2o=o("albert"),I2o=o(" \u2014 "),VP=a("a"),D2o=o("AlbertForMaskedLM"),j2o=o(" (ALBERT model)"),N2o=l(),Ru=a("li"),Jee=a("strong"),q2o=o("bart"),G2o=o(" \u2014 "),zP=a("a"),O2o=o("BartForConditionalGeneration"),X2o=o(" (BART model)"),V2o=l(),Su=a("li"),Yee=a("strong"),z2o=o("bert"),W2o=o(" \u2014 "),WP=a("a"),Q2o=o("BertForMaskedLM"),H2o=o(" (BERT model)"),U2o=l(),Pu=a("li"),Kee=a("strong"),J2o=o("big_bird"),Y2o=o(" \u2014 "),QP=a("a"),K2o=o("BigBirdForMaskedLM"),Z2o=o(" (BigBird model)"),e1o=l(),$u=a("li"),Zee=a("strong"),o1o=o("camembert"),r1o=o(" \u2014 "),HP=a("a"),t1o=o("CamembertForMaskedLM"),a1o=o(" (CamemBERT model)"),n1o=l(),Iu=a("li"),eoe=a("strong"),s1o=o("convbert"),l1o=o(" \u2014 "),UP=a("a"),i1o=o("ConvBertForMaskedLM"),d1o=o(" (ConvBERT model)"),c1o=l(),Du=a("li"),ooe=a("strong"),f1o=o("data2vec-text"),m1o=o(" \u2014 "),JP=a("a"),g1o=o("Data2VecTextForMaskedLM"),h1o=o(" (Data2VecText model)"),p1o=l(),ju=a("li"),roe=a("strong"),_1o=o("deberta"),u1o=o(" \u2014 "),YP=a("a"),b1o=o("DebertaForMaskedLM"),v1o=o(" (DeBERTa model)"),T1o=l(),Nu=a("li"),toe=a("strong"),F1o=o("deberta-v2"),C1o=o(" \u2014 "),KP=a("a"),M1o=o("DebertaV2ForMaskedLM"),E1o=o(" (DeBERTa-v2 model)"),y1o=l(),qu=a("li"),aoe=a("strong"),w1o=o("distilbert"),A1o=o(" \u2014 "),ZP=a("a"),L1o=o("DistilBertForMaskedLM"),B1o=o(" (DistilBERT model)"),x1o=l(),Gu=a("li"),noe=a("strong"),k1o=o("electra"),R1o=o(" \u2014 "),e$=a("a"),S1o=o("ElectraForMaskedLM"),P1o=o(" (ELECTRA model)"),$1o=l(),Ou=a("li"),soe=a("strong"),I1o=o("flaubert"),D1o=o(" \u2014 "),o$=a("a"),j1o=o("FlaubertWithLMHeadModel"),N1o=o(" (FlauBERT model)"),q1o=l(),Xu=a("li"),loe=a("strong"),G1o=o("fnet"),O1o=o(" \u2014 "),r$=a("a"),X1o=o("FNetForMaskedLM"),V1o=o(" (FNet model)"),z1o=l(),Vu=a("li"),ioe=a("strong"),W1o=o("funnel"),Q1o=o(" \u2014 "),t$=a("a"),H1o=o("FunnelForMaskedLM"),U1o=o(" (Funnel Transformer model)"),J1o=l(),zu=a("li"),doe=a("strong"),Y1o=o("ibert"),K1o=o(" \u2014 "),a$=a("a"),Z1o=o("IBertForMaskedLM"),ebo=o(" (I-BERT model)"),obo=l(),Wu=a("li"),coe=a("strong"),rbo=o("layoutlm"),tbo=o(" \u2014 "),n$=a("a"),abo=o("LayoutLMForMaskedLM"),nbo=o(" (LayoutLM model)"),sbo=l(),Qu=a("li"),foe=a("strong"),lbo=o("longformer"),ibo=o(" \u2014 "),s$=a("a"),dbo=o("LongformerForMaskedLM"),cbo=o(" (Longformer model)"),fbo=l(),Hu=a("li"),moe=a("strong"),mbo=o("mbart"),gbo=o(" \u2014 "),l$=a("a"),hbo=o("MBartForConditionalGeneration"),pbo=o(" (mBART model)"),_bo=l(),Uu=a("li"),goe=a("strong"),ubo=o("megatron-bert"),bbo=o(" \u2014 "),i$=a("a"),vbo=o("MegatronBertForMaskedLM"),Tbo=o(" (MegatronBert model)"),Fbo=l(),Ju=a("li"),hoe=a("strong"),Cbo=o("mobilebert"),Mbo=o(" \u2014 "),d$=a("a"),Ebo=o("MobileBertForMaskedLM"),ybo=o(" (MobileBERT model)"),wbo=l(),Yu=a("li"),poe=a("strong"),Abo=o("mpnet"),Lbo=o(" \u2014 "),c$=a("a"),Bbo=o("MPNetForMaskedLM"),xbo=o(" (MPNet model)"),kbo=l(),Ku=a("li"),_oe=a("strong"),Rbo=o("nystromformer"),Sbo=o(" \u2014 "),f$=a("a"),Pbo=o("NystromformerForMaskedLM"),$bo=o(" (Nystromformer model)"),Ibo=l(),Zu=a("li"),uoe=a("strong"),Dbo=o("perceiver"),jbo=o(" \u2014 "),m$=a("a"),Nbo=o("PerceiverForMaskedLM"),qbo=o(" (Perceiver model)"),Gbo=l(),e2=a("li"),boe=a("strong"),Obo=o("qdqbert"),Xbo=o(" \u2014 "),g$=a("a"),Vbo=o("QDQBertForMaskedLM"),zbo=o(" (QDQBert model)"),Wbo=l(),o2=a("li"),voe=a("strong"),Qbo=o("reformer"),Hbo=o(" \u2014 "),h$=a("a"),Ubo=o("ReformerForMaskedLM"),Jbo=o(" (Reformer model)"),Ybo=l(),r2=a("li"),Toe=a("strong"),Kbo=o("rembert"),Zbo=o(" \u2014 "),p$=a("a"),e3o=o("RemBertForMaskedLM"),o3o=o(" (RemBERT model)"),r3o=l(),t2=a("li"),Foe=a("strong"),t3o=o("roberta"),a3o=o(" \u2014 "),_$=a("a"),n3o=o("RobertaForMaskedLM"),s3o=o(" (RoBERTa model)"),l3o=l(),a2=a("li"),Coe=a("strong"),i3o=o("roformer"),d3o=o(" \u2014 "),u$=a("a"),c3o=o("RoFormerForMaskedLM"),f3o=o(" (RoFormer model)"),m3o=l(),n2=a("li"),Moe=a("strong"),g3o=o("squeezebert"),h3o=o(" \u2014 "),b$=a("a"),p3o=o("SqueezeBertForMaskedLM"),_3o=o(" (SqueezeBERT model)"),u3o=l(),s2=a("li"),Eoe=a("strong"),b3o=o("tapas"),v3o=o(" \u2014 "),v$=a("a"),T3o=o("TapasForMaskedLM"),F3o=o(" (TAPAS model)"),C3o=l(),l2=a("li"),yoe=a("strong"),M3o=o("wav2vec2"),E3o=o(" \u2014 "),woe=a("code"),y3o=o("Wav2Vec2ForMaskedLM"),w3o=o("(Wav2Vec2 model)"),A3o=l(),i2=a("li"),Aoe=a("strong"),L3o=o("xlm"),B3o=o(" \u2014 "),T$=a("a"),x3o=o("XLMWithLMHeadModel"),k3o=o(" (XLM model)"),R3o=l(),d2=a("li"),Loe=a("strong"),S3o=o("xlm-roberta"),P3o=o(" \u2014 "),F$=a("a"),$3o=o("XLMRobertaForMaskedLM"),I3o=o(" (XLM-RoBERTa model)"),D3o=l(),c2=a("li"),Boe=a("strong"),j3o=o("xlm-roberta-xl"),N3o=o(" \u2014 "),C$=a("a"),q3o=o("XLMRobertaXLForMaskedLM"),G3o=o(" (XLM-RoBERTa-XL model)"),O3o=l(),f2=a("li"),xoe=a("strong"),X3o=o("yoso"),V3o=o(" \u2014 "),M$=a("a"),z3o=o("YosoForMaskedLM"),W3o=o(" (YOSO model)"),Q3o=l(),m2=a("p"),H3o=o("The model is set in evaluation mode by default using "),koe=a("code"),U3o=o("model.eval()"),J3o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Roe=a("code"),Y3o=o("model.train()"),K3o=l(),Soe=a("p"),Z3o=o("Examples:"),e5o=l(),f(kE.$$.fragment),oBe=l(),od=a("h2"),g2=a("a"),Poe=a("span"),f(RE.$$.fragment),o5o=l(),$oe=a("span"),r5o=o("AutoModelForSeq2SeqLM"),rBe=l(),Yo=a("div"),f(SE.$$.fragment),t5o=l(),rd=a("p"),a5o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Ioe=a("code"),n5o=o("from_pretrained()"),s5o=o("class method or the "),Doe=a("code"),l5o=o("from_config()"),i5o=o(`class
method.`),d5o=l(),PE=a("p"),c5o=o("This class cannot be instantiated directly using "),joe=a("code"),f5o=o("__init__()"),m5o=o(" (throws an error)."),g5o=l(),Vr=a("div"),f($E.$$.fragment),h5o=l(),Noe=a("p"),p5o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),_5o=l(),td=a("p"),u5o=o(`Note:
Loading a model from its configuration file does `),qoe=a("strong"),b5o=o("not"),v5o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Goe=a("code"),T5o=o("from_pretrained()"),F5o=o("to load the model weights."),C5o=l(),Ooe=a("p"),M5o=o("Examples:"),E5o=l(),f(IE.$$.fragment),y5o=l(),Ie=a("div"),f(DE.$$.fragment),w5o=l(),Xoe=a("p"),A5o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),L5o=l(),Xa=a("p"),B5o=o("The model class to instantiate is selected based on the "),Voe=a("code"),x5o=o("model_type"),k5o=o(` property of the config object (either
passed as an argument or loaded from `),zoe=a("code"),R5o=o("pretrained_model_name_or_path"),S5o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Woe=a("code"),P5o=o("pretrained_model_name_or_path"),$5o=o(":"),I5o=l(),ne=a("ul"),h2=a("li"),Qoe=a("strong"),D5o=o("bart"),j5o=o(" \u2014 "),E$=a("a"),N5o=o("BartForConditionalGeneration"),q5o=o(" (BART model)"),G5o=l(),p2=a("li"),Hoe=a("strong"),O5o=o("bigbird_pegasus"),X5o=o(" \u2014 "),y$=a("a"),V5o=o("BigBirdPegasusForConditionalGeneration"),z5o=o(" (BigBirdPegasus model)"),W5o=l(),_2=a("li"),Uoe=a("strong"),Q5o=o("blenderbot"),H5o=o(" \u2014 "),w$=a("a"),U5o=o("BlenderbotForConditionalGeneration"),J5o=o(" (Blenderbot model)"),Y5o=l(),u2=a("li"),Joe=a("strong"),K5o=o("blenderbot-small"),Z5o=o(" \u2014 "),A$=a("a"),evo=o("BlenderbotSmallForConditionalGeneration"),ovo=o(" (BlenderbotSmall model)"),rvo=l(),b2=a("li"),Yoe=a("strong"),tvo=o("encoder-decoder"),avo=o(" \u2014 "),L$=a("a"),nvo=o("EncoderDecoderModel"),svo=o(" (Encoder decoder model)"),lvo=l(),v2=a("li"),Koe=a("strong"),ivo=o("fsmt"),dvo=o(" \u2014 "),B$=a("a"),cvo=o("FSMTForConditionalGeneration"),fvo=o(" (FairSeq Machine-Translation model)"),mvo=l(),T2=a("li"),Zoe=a("strong"),gvo=o("led"),hvo=o(" \u2014 "),x$=a("a"),pvo=o("LEDForConditionalGeneration"),_vo=o(" (LED model)"),uvo=l(),F2=a("li"),ere=a("strong"),bvo=o("m2m_100"),vvo=o(" \u2014 "),k$=a("a"),Tvo=o("M2M100ForConditionalGeneration"),Fvo=o(" (M2M100 model)"),Cvo=l(),C2=a("li"),ore=a("strong"),Mvo=o("marian"),Evo=o(" \u2014 "),R$=a("a"),yvo=o("MarianMTModel"),wvo=o(" (Marian model)"),Avo=l(),M2=a("li"),rre=a("strong"),Lvo=o("mbart"),Bvo=o(" \u2014 "),S$=a("a"),xvo=o("MBartForConditionalGeneration"),kvo=o(" (mBART model)"),Rvo=l(),E2=a("li"),tre=a("strong"),Svo=o("mt5"),Pvo=o(" \u2014 "),P$=a("a"),$vo=o("MT5ForConditionalGeneration"),Ivo=o(" (mT5 model)"),Dvo=l(),y2=a("li"),are=a("strong"),jvo=o("pegasus"),Nvo=o(" \u2014 "),$$=a("a"),qvo=o("PegasusForConditionalGeneration"),Gvo=o(" (Pegasus model)"),Ovo=l(),w2=a("li"),nre=a("strong"),Xvo=o("plbart"),Vvo=o(" \u2014 "),I$=a("a"),zvo=o("PLBartForConditionalGeneration"),Wvo=o(" (PLBart model)"),Qvo=l(),A2=a("li"),sre=a("strong"),Hvo=o("prophetnet"),Uvo=o(" \u2014 "),D$=a("a"),Jvo=o("ProphetNetForConditionalGeneration"),Yvo=o(" (ProphetNet model)"),Kvo=l(),L2=a("li"),lre=a("strong"),Zvo=o("t5"),eTo=o(" \u2014 "),j$=a("a"),oTo=o("T5ForConditionalGeneration"),rTo=o(" (T5 model)"),tTo=l(),B2=a("li"),ire=a("strong"),aTo=o("xlm-prophetnet"),nTo=o(" \u2014 "),N$=a("a"),sTo=o("XLMProphetNetForConditionalGeneration"),lTo=o(" (XLMProphetNet model)"),iTo=l(),x2=a("p"),dTo=o("The model is set in evaluation mode by default using "),dre=a("code"),cTo=o("model.eval()"),fTo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cre=a("code"),mTo=o("model.train()"),gTo=l(),fre=a("p"),hTo=o("Examples:"),pTo=l(),f(jE.$$.fragment),tBe=l(),ad=a("h2"),k2=a("a"),mre=a("span"),f(NE.$$.fragment),_To=l(),gre=a("span"),uTo=o("AutoModelForSequenceClassification"),aBe=l(),Ko=a("div"),f(qE.$$.fragment),bTo=l(),nd=a("p"),vTo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),hre=a("code"),TTo=o("from_pretrained()"),FTo=o("class method or the "),pre=a("code"),CTo=o("from_config()"),MTo=o(`class
method.`),ETo=l(),GE=a("p"),yTo=o("This class cannot be instantiated directly using "),_re=a("code"),wTo=o("__init__()"),ATo=o(" (throws an error)."),LTo=l(),zr=a("div"),f(OE.$$.fragment),BTo=l(),ure=a("p"),xTo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),kTo=l(),sd=a("p"),RTo=o(`Note:
Loading a model from its configuration file does `),bre=a("strong"),STo=o("not"),PTo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vre=a("code"),$To=o("from_pretrained()"),ITo=o("to load the model weights."),DTo=l(),Tre=a("p"),jTo=o("Examples:"),NTo=l(),f(XE.$$.fragment),qTo=l(),De=a("div"),f(VE.$$.fragment),GTo=l(),Fre=a("p"),OTo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),XTo=l(),Va=a("p"),VTo=o("The model class to instantiate is selected based on the "),Cre=a("code"),zTo=o("model_type"),WTo=o(` property of the config object (either
passed as an argument or loaded from `),Mre=a("code"),QTo=o("pretrained_model_name_or_path"),HTo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ere=a("code"),UTo=o("pretrained_model_name_or_path"),JTo=o(":"),YTo=l(),A=a("ul"),R2=a("li"),yre=a("strong"),KTo=o("albert"),ZTo=o(" \u2014 "),q$=a("a"),eFo=o("AlbertForSequenceClassification"),oFo=o(" (ALBERT model)"),rFo=l(),S2=a("li"),wre=a("strong"),tFo=o("bart"),aFo=o(" \u2014 "),G$=a("a"),nFo=o("BartForSequenceClassification"),sFo=o(" (BART model)"),lFo=l(),P2=a("li"),Are=a("strong"),iFo=o("bert"),dFo=o(" \u2014 "),O$=a("a"),cFo=o("BertForSequenceClassification"),fFo=o(" (BERT model)"),mFo=l(),$2=a("li"),Lre=a("strong"),gFo=o("big_bird"),hFo=o(" \u2014 "),X$=a("a"),pFo=o("BigBirdForSequenceClassification"),_Fo=o(" (BigBird model)"),uFo=l(),I2=a("li"),Bre=a("strong"),bFo=o("bigbird_pegasus"),vFo=o(" \u2014 "),V$=a("a"),TFo=o("BigBirdPegasusForSequenceClassification"),FFo=o(" (BigBirdPegasus model)"),CFo=l(),D2=a("li"),xre=a("strong"),MFo=o("camembert"),EFo=o(" \u2014 "),z$=a("a"),yFo=o("CamembertForSequenceClassification"),wFo=o(" (CamemBERT model)"),AFo=l(),j2=a("li"),kre=a("strong"),LFo=o("canine"),BFo=o(" \u2014 "),W$=a("a"),xFo=o("CanineForSequenceClassification"),kFo=o(" (Canine model)"),RFo=l(),N2=a("li"),Rre=a("strong"),SFo=o("convbert"),PFo=o(" \u2014 "),Q$=a("a"),$Fo=o("ConvBertForSequenceClassification"),IFo=o(" (ConvBERT model)"),DFo=l(),q2=a("li"),Sre=a("strong"),jFo=o("ctrl"),NFo=o(" \u2014 "),H$=a("a"),qFo=o("CTRLForSequenceClassification"),GFo=o(" (CTRL model)"),OFo=l(),G2=a("li"),Pre=a("strong"),XFo=o("data2vec-text"),VFo=o(" \u2014 "),U$=a("a"),zFo=o("Data2VecTextForSequenceClassification"),WFo=o(" (Data2VecText model)"),QFo=l(),O2=a("li"),$re=a("strong"),HFo=o("deberta"),UFo=o(" \u2014 "),J$=a("a"),JFo=o("DebertaForSequenceClassification"),YFo=o(" (DeBERTa model)"),KFo=l(),X2=a("li"),Ire=a("strong"),ZFo=o("deberta-v2"),e9o=o(" \u2014 "),Y$=a("a"),o9o=o("DebertaV2ForSequenceClassification"),r9o=o(" (DeBERTa-v2 model)"),t9o=l(),V2=a("li"),Dre=a("strong"),a9o=o("distilbert"),n9o=o(" \u2014 "),K$=a("a"),s9o=o("DistilBertForSequenceClassification"),l9o=o(" (DistilBERT model)"),i9o=l(),z2=a("li"),jre=a("strong"),d9o=o("electra"),c9o=o(" \u2014 "),Z$=a("a"),f9o=o("ElectraForSequenceClassification"),m9o=o(" (ELECTRA model)"),g9o=l(),W2=a("li"),Nre=a("strong"),h9o=o("flaubert"),p9o=o(" \u2014 "),eI=a("a"),_9o=o("FlaubertForSequenceClassification"),u9o=o(" (FlauBERT model)"),b9o=l(),Q2=a("li"),qre=a("strong"),v9o=o("fnet"),T9o=o(" \u2014 "),oI=a("a"),F9o=o("FNetForSequenceClassification"),C9o=o(" (FNet model)"),M9o=l(),H2=a("li"),Gre=a("strong"),E9o=o("funnel"),y9o=o(" \u2014 "),rI=a("a"),w9o=o("FunnelForSequenceClassification"),A9o=o(" (Funnel Transformer model)"),L9o=l(),U2=a("li"),Ore=a("strong"),B9o=o("gpt2"),x9o=o(" \u2014 "),tI=a("a"),k9o=o("GPT2ForSequenceClassification"),R9o=o(" (OpenAI GPT-2 model)"),S9o=l(),J2=a("li"),Xre=a("strong"),P9o=o("gpt_neo"),$9o=o(" \u2014 "),aI=a("a"),I9o=o("GPTNeoForSequenceClassification"),D9o=o(" (GPT Neo model)"),j9o=l(),Y2=a("li"),Vre=a("strong"),N9o=o("gptj"),q9o=o(" \u2014 "),nI=a("a"),G9o=o("GPTJForSequenceClassification"),O9o=o(" (GPT-J model)"),X9o=l(),K2=a("li"),zre=a("strong"),V9o=o("ibert"),z9o=o(" \u2014 "),sI=a("a"),W9o=o("IBertForSequenceClassification"),Q9o=o(" (I-BERT model)"),H9o=l(),Z2=a("li"),Wre=a("strong"),U9o=o("layoutlm"),J9o=o(" \u2014 "),lI=a("a"),Y9o=o("LayoutLMForSequenceClassification"),K9o=o(" (LayoutLM model)"),Z9o=l(),e1=a("li"),Qre=a("strong"),eCo=o("layoutlmv2"),oCo=o(" \u2014 "),iI=a("a"),rCo=o("LayoutLMv2ForSequenceClassification"),tCo=o(" (LayoutLMv2 model)"),aCo=l(),o1=a("li"),Hre=a("strong"),nCo=o("led"),sCo=o(" \u2014 "),dI=a("a"),lCo=o("LEDForSequenceClassification"),iCo=o(" (LED model)"),dCo=l(),r1=a("li"),Ure=a("strong"),cCo=o("longformer"),fCo=o(" \u2014 "),cI=a("a"),mCo=o("LongformerForSequenceClassification"),gCo=o(" (Longformer model)"),hCo=l(),t1=a("li"),Jre=a("strong"),pCo=o("mbart"),_Co=o(" \u2014 "),fI=a("a"),uCo=o("MBartForSequenceClassification"),bCo=o(" (mBART model)"),vCo=l(),a1=a("li"),Yre=a("strong"),TCo=o("megatron-bert"),FCo=o(" \u2014 "),mI=a("a"),CCo=o("MegatronBertForSequenceClassification"),MCo=o(" (MegatronBert model)"),ECo=l(),n1=a("li"),Kre=a("strong"),yCo=o("mobilebert"),wCo=o(" \u2014 "),gI=a("a"),ACo=o("MobileBertForSequenceClassification"),LCo=o(" (MobileBERT model)"),BCo=l(),s1=a("li"),Zre=a("strong"),xCo=o("mpnet"),kCo=o(" \u2014 "),hI=a("a"),RCo=o("MPNetForSequenceClassification"),SCo=o(" (MPNet model)"),PCo=l(),l1=a("li"),ete=a("strong"),$Co=o("nystromformer"),ICo=o(" \u2014 "),pI=a("a"),DCo=o("NystromformerForSequenceClassification"),jCo=o(" (Nystromformer model)"),NCo=l(),i1=a("li"),ote=a("strong"),qCo=o("openai-gpt"),GCo=o(" \u2014 "),_I=a("a"),OCo=o("OpenAIGPTForSequenceClassification"),XCo=o(" (OpenAI GPT model)"),VCo=l(),d1=a("li"),rte=a("strong"),zCo=o("perceiver"),WCo=o(" \u2014 "),uI=a("a"),QCo=o("PerceiverForSequenceClassification"),HCo=o(" (Perceiver model)"),UCo=l(),c1=a("li"),tte=a("strong"),JCo=o("plbart"),YCo=o(" \u2014 "),bI=a("a"),KCo=o("PLBartForSequenceClassification"),ZCo=o(" (PLBart model)"),e4o=l(),f1=a("li"),ate=a("strong"),o4o=o("qdqbert"),r4o=o(" \u2014 "),vI=a("a"),t4o=o("QDQBertForSequenceClassification"),a4o=o(" (QDQBert model)"),n4o=l(),m1=a("li"),nte=a("strong"),s4o=o("reformer"),l4o=o(" \u2014 "),TI=a("a"),i4o=o("ReformerForSequenceClassification"),d4o=o(" (Reformer model)"),c4o=l(),g1=a("li"),ste=a("strong"),f4o=o("rembert"),m4o=o(" \u2014 "),FI=a("a"),g4o=o("RemBertForSequenceClassification"),h4o=o(" (RemBERT model)"),p4o=l(),h1=a("li"),lte=a("strong"),_4o=o("roberta"),u4o=o(" \u2014 "),CI=a("a"),b4o=o("RobertaForSequenceClassification"),v4o=o(" (RoBERTa model)"),T4o=l(),p1=a("li"),ite=a("strong"),F4o=o("roformer"),C4o=o(" \u2014 "),MI=a("a"),M4o=o("RoFormerForSequenceClassification"),E4o=o(" (RoFormer model)"),y4o=l(),_1=a("li"),dte=a("strong"),w4o=o("squeezebert"),A4o=o(" \u2014 "),EI=a("a"),L4o=o("SqueezeBertForSequenceClassification"),B4o=o(" (SqueezeBERT model)"),x4o=l(),u1=a("li"),cte=a("strong"),k4o=o("tapas"),R4o=o(" \u2014 "),yI=a("a"),S4o=o("TapasForSequenceClassification"),P4o=o(" (TAPAS model)"),$4o=l(),b1=a("li"),fte=a("strong"),I4o=o("transfo-xl"),D4o=o(" \u2014 "),wI=a("a"),j4o=o("TransfoXLForSequenceClassification"),N4o=o(" (Transformer-XL model)"),q4o=l(),v1=a("li"),mte=a("strong"),G4o=o("xlm"),O4o=o(" \u2014 "),AI=a("a"),X4o=o("XLMForSequenceClassification"),V4o=o(" (XLM model)"),z4o=l(),T1=a("li"),gte=a("strong"),W4o=o("xlm-roberta"),Q4o=o(" \u2014 "),LI=a("a"),H4o=o("XLMRobertaForSequenceClassification"),U4o=o(" (XLM-RoBERTa model)"),J4o=l(),F1=a("li"),hte=a("strong"),Y4o=o("xlm-roberta-xl"),K4o=o(" \u2014 "),BI=a("a"),Z4o=o("XLMRobertaXLForSequenceClassification"),eMo=o(" (XLM-RoBERTa-XL model)"),oMo=l(),C1=a("li"),pte=a("strong"),rMo=o("xlnet"),tMo=o(" \u2014 "),xI=a("a"),aMo=o("XLNetForSequenceClassification"),nMo=o(" (XLNet model)"),sMo=l(),M1=a("li"),_te=a("strong"),lMo=o("yoso"),iMo=o(" \u2014 "),kI=a("a"),dMo=o("YosoForSequenceClassification"),cMo=o(" (YOSO model)"),fMo=l(),E1=a("p"),mMo=o("The model is set in evaluation mode by default using "),ute=a("code"),gMo=o("model.eval()"),hMo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bte=a("code"),pMo=o("model.train()"),_Mo=l(),vte=a("p"),uMo=o("Examples:"),bMo=l(),f(zE.$$.fragment),nBe=l(),ld=a("h2"),y1=a("a"),Tte=a("span"),f(WE.$$.fragment),vMo=l(),Fte=a("span"),TMo=o("AutoModelForMultipleChoice"),sBe=l(),Zo=a("div"),f(QE.$$.fragment),FMo=l(),id=a("p"),CMo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Cte=a("code"),MMo=o("from_pretrained()"),EMo=o("class method or the "),Mte=a("code"),yMo=o("from_config()"),wMo=o(`class
method.`),AMo=l(),HE=a("p"),LMo=o("This class cannot be instantiated directly using "),Ete=a("code"),BMo=o("__init__()"),xMo=o(" (throws an error)."),kMo=l(),Wr=a("div"),f(UE.$$.fragment),RMo=l(),yte=a("p"),SMo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),PMo=l(),dd=a("p"),$Mo=o(`Note:
Loading a model from its configuration file does `),wte=a("strong"),IMo=o("not"),DMo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ate=a("code"),jMo=o("from_pretrained()"),NMo=o("to load the model weights."),qMo=l(),Lte=a("p"),GMo=o("Examples:"),OMo=l(),f(JE.$$.fragment),XMo=l(),je=a("div"),f(YE.$$.fragment),VMo=l(),Bte=a("p"),zMo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),WMo=l(),za=a("p"),QMo=o("The model class to instantiate is selected based on the "),xte=a("code"),HMo=o("model_type"),UMo=o(` property of the config object (either
passed as an argument or loaded from `),kte=a("code"),JMo=o("pretrained_model_name_or_path"),YMo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rte=a("code"),KMo=o("pretrained_model_name_or_path"),ZMo=o(":"),eEo=l(),G=a("ul"),w1=a("li"),Ste=a("strong"),oEo=o("albert"),rEo=o(" \u2014 "),RI=a("a"),tEo=o("AlbertForMultipleChoice"),aEo=o(" (ALBERT model)"),nEo=l(),A1=a("li"),Pte=a("strong"),sEo=o("bert"),lEo=o(" \u2014 "),SI=a("a"),iEo=o("BertForMultipleChoice"),dEo=o(" (BERT model)"),cEo=l(),L1=a("li"),$te=a("strong"),fEo=o("big_bird"),mEo=o(" \u2014 "),PI=a("a"),gEo=o("BigBirdForMultipleChoice"),hEo=o(" (BigBird model)"),pEo=l(),B1=a("li"),Ite=a("strong"),_Eo=o("camembert"),uEo=o(" \u2014 "),$I=a("a"),bEo=o("CamembertForMultipleChoice"),vEo=o(" (CamemBERT model)"),TEo=l(),x1=a("li"),Dte=a("strong"),FEo=o("canine"),CEo=o(" \u2014 "),II=a("a"),MEo=o("CanineForMultipleChoice"),EEo=o(" (Canine model)"),yEo=l(),k1=a("li"),jte=a("strong"),wEo=o("convbert"),AEo=o(" \u2014 "),DI=a("a"),LEo=o("ConvBertForMultipleChoice"),BEo=o(" (ConvBERT model)"),xEo=l(),R1=a("li"),Nte=a("strong"),kEo=o("data2vec-text"),REo=o(" \u2014 "),jI=a("a"),SEo=o("Data2VecTextForMultipleChoice"),PEo=o(" (Data2VecText model)"),$Eo=l(),S1=a("li"),qte=a("strong"),IEo=o("distilbert"),DEo=o(" \u2014 "),NI=a("a"),jEo=o("DistilBertForMultipleChoice"),NEo=o(" (DistilBERT model)"),qEo=l(),P1=a("li"),Gte=a("strong"),GEo=o("electra"),OEo=o(" \u2014 "),qI=a("a"),XEo=o("ElectraForMultipleChoice"),VEo=o(" (ELECTRA model)"),zEo=l(),$1=a("li"),Ote=a("strong"),WEo=o("flaubert"),QEo=o(" \u2014 "),GI=a("a"),HEo=o("FlaubertForMultipleChoice"),UEo=o(" (FlauBERT model)"),JEo=l(),I1=a("li"),Xte=a("strong"),YEo=o("fnet"),KEo=o(" \u2014 "),OI=a("a"),ZEo=o("FNetForMultipleChoice"),eyo=o(" (FNet model)"),oyo=l(),D1=a("li"),Vte=a("strong"),ryo=o("funnel"),tyo=o(" \u2014 "),XI=a("a"),ayo=o("FunnelForMultipleChoice"),nyo=o(" (Funnel Transformer model)"),syo=l(),j1=a("li"),zte=a("strong"),lyo=o("ibert"),iyo=o(" \u2014 "),VI=a("a"),dyo=o("IBertForMultipleChoice"),cyo=o(" (I-BERT model)"),fyo=l(),N1=a("li"),Wte=a("strong"),myo=o("longformer"),gyo=o(" \u2014 "),zI=a("a"),hyo=o("LongformerForMultipleChoice"),pyo=o(" (Longformer model)"),_yo=l(),q1=a("li"),Qte=a("strong"),uyo=o("megatron-bert"),byo=o(" \u2014 "),WI=a("a"),vyo=o("MegatronBertForMultipleChoice"),Tyo=o(" (MegatronBert model)"),Fyo=l(),G1=a("li"),Hte=a("strong"),Cyo=o("mobilebert"),Myo=o(" \u2014 "),QI=a("a"),Eyo=o("MobileBertForMultipleChoice"),yyo=o(" (MobileBERT model)"),wyo=l(),O1=a("li"),Ute=a("strong"),Ayo=o("mpnet"),Lyo=o(" \u2014 "),HI=a("a"),Byo=o("MPNetForMultipleChoice"),xyo=o(" (MPNet model)"),kyo=l(),X1=a("li"),Jte=a("strong"),Ryo=o("nystromformer"),Syo=o(" \u2014 "),UI=a("a"),Pyo=o("NystromformerForMultipleChoice"),$yo=o(" (Nystromformer model)"),Iyo=l(),V1=a("li"),Yte=a("strong"),Dyo=o("qdqbert"),jyo=o(" \u2014 "),JI=a("a"),Nyo=o("QDQBertForMultipleChoice"),qyo=o(" (QDQBert model)"),Gyo=l(),z1=a("li"),Kte=a("strong"),Oyo=o("rembert"),Xyo=o(" \u2014 "),YI=a("a"),Vyo=o("RemBertForMultipleChoice"),zyo=o(" (RemBERT model)"),Wyo=l(),W1=a("li"),Zte=a("strong"),Qyo=o("roberta"),Hyo=o(" \u2014 "),KI=a("a"),Uyo=o("RobertaForMultipleChoice"),Jyo=o(" (RoBERTa model)"),Yyo=l(),Q1=a("li"),eae=a("strong"),Kyo=o("roformer"),Zyo=o(" \u2014 "),ZI=a("a"),ewo=o("RoFormerForMultipleChoice"),owo=o(" (RoFormer model)"),rwo=l(),H1=a("li"),oae=a("strong"),two=o("squeezebert"),awo=o(" \u2014 "),eD=a("a"),nwo=o("SqueezeBertForMultipleChoice"),swo=o(" (SqueezeBERT model)"),lwo=l(),U1=a("li"),rae=a("strong"),iwo=o("xlm"),dwo=o(" \u2014 "),oD=a("a"),cwo=o("XLMForMultipleChoice"),fwo=o(" (XLM model)"),mwo=l(),J1=a("li"),tae=a("strong"),gwo=o("xlm-roberta"),hwo=o(" \u2014 "),rD=a("a"),pwo=o("XLMRobertaForMultipleChoice"),_wo=o(" (XLM-RoBERTa model)"),uwo=l(),Y1=a("li"),aae=a("strong"),bwo=o("xlm-roberta-xl"),vwo=o(" \u2014 "),tD=a("a"),Two=o("XLMRobertaXLForMultipleChoice"),Fwo=o(" (XLM-RoBERTa-XL model)"),Cwo=l(),K1=a("li"),nae=a("strong"),Mwo=o("xlnet"),Ewo=o(" \u2014 "),aD=a("a"),ywo=o("XLNetForMultipleChoice"),wwo=o(" (XLNet model)"),Awo=l(),Z1=a("li"),sae=a("strong"),Lwo=o("yoso"),Bwo=o(" \u2014 "),nD=a("a"),xwo=o("YosoForMultipleChoice"),kwo=o(" (YOSO model)"),Rwo=l(),eb=a("p"),Swo=o("The model is set in evaluation mode by default using "),lae=a("code"),Pwo=o("model.eval()"),$wo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),iae=a("code"),Iwo=o("model.train()"),Dwo=l(),dae=a("p"),jwo=o("Examples:"),Nwo=l(),f(KE.$$.fragment),lBe=l(),cd=a("h2"),ob=a("a"),cae=a("span"),f(ZE.$$.fragment),qwo=l(),fae=a("span"),Gwo=o("AutoModelForNextSentencePrediction"),iBe=l(),er=a("div"),f(ey.$$.fragment),Owo=l(),fd=a("p"),Xwo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),mae=a("code"),Vwo=o("from_pretrained()"),zwo=o("class method or the "),gae=a("code"),Wwo=o("from_config()"),Qwo=o(`class
method.`),Hwo=l(),oy=a("p"),Uwo=o("This class cannot be instantiated directly using "),hae=a("code"),Jwo=o("__init__()"),Ywo=o(" (throws an error)."),Kwo=l(),Qr=a("div"),f(ry.$$.fragment),Zwo=l(),pae=a("p"),e6o=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),o6o=l(),md=a("p"),r6o=o(`Note:
Loading a model from its configuration file does `),_ae=a("strong"),t6o=o("not"),a6o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uae=a("code"),n6o=o("from_pretrained()"),s6o=o("to load the model weights."),l6o=l(),bae=a("p"),i6o=o("Examples:"),d6o=l(),f(ty.$$.fragment),c6o=l(),Ne=a("div"),f(ay.$$.fragment),f6o=l(),vae=a("p"),m6o=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),g6o=l(),Wa=a("p"),h6o=o("The model class to instantiate is selected based on the "),Tae=a("code"),p6o=o("model_type"),_6o=o(` property of the config object (either
passed as an argument or loaded from `),Fae=a("code"),u6o=o("pretrained_model_name_or_path"),b6o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cae=a("code"),v6o=o("pretrained_model_name_or_path"),T6o=o(":"),F6o=l(),na=a("ul"),rb=a("li"),Mae=a("strong"),C6o=o("bert"),M6o=o(" \u2014 "),sD=a("a"),E6o=o("BertForNextSentencePrediction"),y6o=o(" (BERT model)"),w6o=l(),tb=a("li"),Eae=a("strong"),A6o=o("fnet"),L6o=o(" \u2014 "),lD=a("a"),B6o=o("FNetForNextSentencePrediction"),x6o=o(" (FNet model)"),k6o=l(),ab=a("li"),yae=a("strong"),R6o=o("megatron-bert"),S6o=o(" \u2014 "),iD=a("a"),P6o=o("MegatronBertForNextSentencePrediction"),$6o=o(" (MegatronBert model)"),I6o=l(),nb=a("li"),wae=a("strong"),D6o=o("mobilebert"),j6o=o(" \u2014 "),dD=a("a"),N6o=o("MobileBertForNextSentencePrediction"),q6o=o(" (MobileBERT model)"),G6o=l(),sb=a("li"),Aae=a("strong"),O6o=o("qdqbert"),X6o=o(" \u2014 "),cD=a("a"),V6o=o("QDQBertForNextSentencePrediction"),z6o=o(" (QDQBert model)"),W6o=l(),lb=a("p"),Q6o=o("The model is set in evaluation mode by default using "),Lae=a("code"),H6o=o("model.eval()"),U6o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bae=a("code"),J6o=o("model.train()"),Y6o=l(),xae=a("p"),K6o=o("Examples:"),Z6o=l(),f(ny.$$.fragment),dBe=l(),gd=a("h2"),ib=a("a"),kae=a("span"),f(sy.$$.fragment),eAo=l(),Rae=a("span"),oAo=o("AutoModelForTokenClassification"),cBe=l(),or=a("div"),f(ly.$$.fragment),rAo=l(),hd=a("p"),tAo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Sae=a("code"),aAo=o("from_pretrained()"),nAo=o("class method or the "),Pae=a("code"),sAo=o("from_config()"),lAo=o(`class
method.`),iAo=l(),iy=a("p"),dAo=o("This class cannot be instantiated directly using "),$ae=a("code"),cAo=o("__init__()"),fAo=o(" (throws an error)."),mAo=l(),Hr=a("div"),f(dy.$$.fragment),gAo=l(),Iae=a("p"),hAo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),pAo=l(),pd=a("p"),_Ao=o(`Note:
Loading a model from its configuration file does `),Dae=a("strong"),uAo=o("not"),bAo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jae=a("code"),vAo=o("from_pretrained()"),TAo=o("to load the model weights."),FAo=l(),Nae=a("p"),CAo=o("Examples:"),MAo=l(),f(cy.$$.fragment),EAo=l(),qe=a("div"),f(fy.$$.fragment),yAo=l(),qae=a("p"),wAo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),AAo=l(),Qa=a("p"),LAo=o("The model class to instantiate is selected based on the "),Gae=a("code"),BAo=o("model_type"),xAo=o(` property of the config object (either
passed as an argument or loaded from `),Oae=a("code"),kAo=o("pretrained_model_name_or_path"),RAo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xae=a("code"),SAo=o("pretrained_model_name_or_path"),PAo=o(":"),$Ao=l(),N=a("ul"),db=a("li"),Vae=a("strong"),IAo=o("albert"),DAo=o(" \u2014 "),fD=a("a"),jAo=o("AlbertForTokenClassification"),NAo=o(" (ALBERT model)"),qAo=l(),cb=a("li"),zae=a("strong"),GAo=o("bert"),OAo=o(" \u2014 "),mD=a("a"),XAo=o("BertForTokenClassification"),VAo=o(" (BERT model)"),zAo=l(),fb=a("li"),Wae=a("strong"),WAo=o("big_bird"),QAo=o(" \u2014 "),gD=a("a"),HAo=o("BigBirdForTokenClassification"),UAo=o(" (BigBird model)"),JAo=l(),mb=a("li"),Qae=a("strong"),YAo=o("camembert"),KAo=o(" \u2014 "),hD=a("a"),ZAo=o("CamembertForTokenClassification"),e0o=o(" (CamemBERT model)"),o0o=l(),gb=a("li"),Hae=a("strong"),r0o=o("canine"),t0o=o(" \u2014 "),pD=a("a"),a0o=o("CanineForTokenClassification"),n0o=o(" (Canine model)"),s0o=l(),hb=a("li"),Uae=a("strong"),l0o=o("convbert"),i0o=o(" \u2014 "),_D=a("a"),d0o=o("ConvBertForTokenClassification"),c0o=o(" (ConvBERT model)"),f0o=l(),pb=a("li"),Jae=a("strong"),m0o=o("data2vec-text"),g0o=o(" \u2014 "),uD=a("a"),h0o=o("Data2VecTextForTokenClassification"),p0o=o(" (Data2VecText model)"),_0o=l(),_b=a("li"),Yae=a("strong"),u0o=o("deberta"),b0o=o(" \u2014 "),bD=a("a"),v0o=o("DebertaForTokenClassification"),T0o=o(" (DeBERTa model)"),F0o=l(),ub=a("li"),Kae=a("strong"),C0o=o("deberta-v2"),M0o=o(" \u2014 "),vD=a("a"),E0o=o("DebertaV2ForTokenClassification"),y0o=o(" (DeBERTa-v2 model)"),w0o=l(),bb=a("li"),Zae=a("strong"),A0o=o("distilbert"),L0o=o(" \u2014 "),TD=a("a"),B0o=o("DistilBertForTokenClassification"),x0o=o(" (DistilBERT model)"),k0o=l(),vb=a("li"),ene=a("strong"),R0o=o("electra"),S0o=o(" \u2014 "),FD=a("a"),P0o=o("ElectraForTokenClassification"),$0o=o(" (ELECTRA model)"),I0o=l(),Tb=a("li"),one=a("strong"),D0o=o("flaubert"),j0o=o(" \u2014 "),CD=a("a"),N0o=o("FlaubertForTokenClassification"),q0o=o(" (FlauBERT model)"),G0o=l(),Fb=a("li"),rne=a("strong"),O0o=o("fnet"),X0o=o(" \u2014 "),MD=a("a"),V0o=o("FNetForTokenClassification"),z0o=o(" (FNet model)"),W0o=l(),Cb=a("li"),tne=a("strong"),Q0o=o("funnel"),H0o=o(" \u2014 "),ED=a("a"),U0o=o("FunnelForTokenClassification"),J0o=o(" (Funnel Transformer model)"),Y0o=l(),Mb=a("li"),ane=a("strong"),K0o=o("gpt2"),Z0o=o(" \u2014 "),yD=a("a"),eLo=o("GPT2ForTokenClassification"),oLo=o(" (OpenAI GPT-2 model)"),rLo=l(),Eb=a("li"),nne=a("strong"),tLo=o("ibert"),aLo=o(" \u2014 "),wD=a("a"),nLo=o("IBertForTokenClassification"),sLo=o(" (I-BERT model)"),lLo=l(),yb=a("li"),sne=a("strong"),iLo=o("layoutlm"),dLo=o(" \u2014 "),AD=a("a"),cLo=o("LayoutLMForTokenClassification"),fLo=o(" (LayoutLM model)"),mLo=l(),wb=a("li"),lne=a("strong"),gLo=o("layoutlmv2"),hLo=o(" \u2014 "),LD=a("a"),pLo=o("LayoutLMv2ForTokenClassification"),_Lo=o(" (LayoutLMv2 model)"),uLo=l(),Ab=a("li"),ine=a("strong"),bLo=o("longformer"),vLo=o(" \u2014 "),BD=a("a"),TLo=o("LongformerForTokenClassification"),FLo=o(" (Longformer model)"),CLo=l(),Lb=a("li"),dne=a("strong"),MLo=o("megatron-bert"),ELo=o(" \u2014 "),xD=a("a"),yLo=o("MegatronBertForTokenClassification"),wLo=o(" (MegatronBert model)"),ALo=l(),Bb=a("li"),cne=a("strong"),LLo=o("mobilebert"),BLo=o(" \u2014 "),kD=a("a"),xLo=o("MobileBertForTokenClassification"),kLo=o(" (MobileBERT model)"),RLo=l(),xb=a("li"),fne=a("strong"),SLo=o("mpnet"),PLo=o(" \u2014 "),RD=a("a"),$Lo=o("MPNetForTokenClassification"),ILo=o(" (MPNet model)"),DLo=l(),kb=a("li"),mne=a("strong"),jLo=o("nystromformer"),NLo=o(" \u2014 "),SD=a("a"),qLo=o("NystromformerForTokenClassification"),GLo=o(" (Nystromformer model)"),OLo=l(),Rb=a("li"),gne=a("strong"),XLo=o("qdqbert"),VLo=o(" \u2014 "),PD=a("a"),zLo=o("QDQBertForTokenClassification"),WLo=o(" (QDQBert model)"),QLo=l(),Sb=a("li"),hne=a("strong"),HLo=o("rembert"),ULo=o(" \u2014 "),$D=a("a"),JLo=o("RemBertForTokenClassification"),YLo=o(" (RemBERT model)"),KLo=l(),Pb=a("li"),pne=a("strong"),ZLo=o("roberta"),e8o=o(" \u2014 "),ID=a("a"),o8o=o("RobertaForTokenClassification"),r8o=o(" (RoBERTa model)"),t8o=l(),$b=a("li"),_ne=a("strong"),a8o=o("roformer"),n8o=o(" \u2014 "),DD=a("a"),s8o=o("RoFormerForTokenClassification"),l8o=o(" (RoFormer model)"),i8o=l(),Ib=a("li"),une=a("strong"),d8o=o("squeezebert"),c8o=o(" \u2014 "),jD=a("a"),f8o=o("SqueezeBertForTokenClassification"),m8o=o(" (SqueezeBERT model)"),g8o=l(),Db=a("li"),bne=a("strong"),h8o=o("xlm"),p8o=o(" \u2014 "),ND=a("a"),_8o=o("XLMForTokenClassification"),u8o=o(" (XLM model)"),b8o=l(),jb=a("li"),vne=a("strong"),v8o=o("xlm-roberta"),T8o=o(" \u2014 "),qD=a("a"),F8o=o("XLMRobertaForTokenClassification"),C8o=o(" (XLM-RoBERTa model)"),M8o=l(),Nb=a("li"),Tne=a("strong"),E8o=o("xlm-roberta-xl"),y8o=o(" \u2014 "),GD=a("a"),w8o=o("XLMRobertaXLForTokenClassification"),A8o=o(" (XLM-RoBERTa-XL model)"),L8o=l(),qb=a("li"),Fne=a("strong"),B8o=o("xlnet"),x8o=o(" \u2014 "),OD=a("a"),k8o=o("XLNetForTokenClassification"),R8o=o(" (XLNet model)"),S8o=l(),Gb=a("li"),Cne=a("strong"),P8o=o("yoso"),$8o=o(" \u2014 "),XD=a("a"),I8o=o("YosoForTokenClassification"),D8o=o(" (YOSO model)"),j8o=l(),Ob=a("p"),N8o=o("The model is set in evaluation mode by default using "),Mne=a("code"),q8o=o("model.eval()"),G8o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ene=a("code"),O8o=o("model.train()"),X8o=l(),yne=a("p"),V8o=o("Examples:"),z8o=l(),f(my.$$.fragment),fBe=l(),_d=a("h2"),Xb=a("a"),wne=a("span"),f(gy.$$.fragment),W8o=l(),Ane=a("span"),Q8o=o("AutoModelForQuestionAnswering"),mBe=l(),rr=a("div"),f(hy.$$.fragment),H8o=l(),ud=a("p"),U8o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Lne=a("code"),J8o=o("from_pretrained()"),Y8o=o("class method or the "),Bne=a("code"),K8o=o("from_config()"),Z8o=o(`class
method.`),e7o=l(),py=a("p"),o7o=o("This class cannot be instantiated directly using "),xne=a("code"),r7o=o("__init__()"),t7o=o(" (throws an error)."),a7o=l(),Ur=a("div"),f(_y.$$.fragment),n7o=l(),kne=a("p"),s7o=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),l7o=l(),bd=a("p"),i7o=o(`Note:
Loading a model from its configuration file does `),Rne=a("strong"),d7o=o("not"),c7o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Sne=a("code"),f7o=o("from_pretrained()"),m7o=o("to load the model weights."),g7o=l(),Pne=a("p"),h7o=o("Examples:"),p7o=l(),f(uy.$$.fragment),_7o=l(),Ge=a("div"),f(by.$$.fragment),u7o=l(),$ne=a("p"),b7o=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),v7o=l(),Ha=a("p"),T7o=o("The model class to instantiate is selected based on the "),Ine=a("code"),F7o=o("model_type"),C7o=o(` property of the config object (either
passed as an argument or loaded from `),Dne=a("code"),M7o=o("pretrained_model_name_or_path"),E7o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jne=a("code"),y7o=o("pretrained_model_name_or_path"),w7o=o(":"),A7o=l(),R=a("ul"),Vb=a("li"),Nne=a("strong"),L7o=o("albert"),B7o=o(" \u2014 "),VD=a("a"),x7o=o("AlbertForQuestionAnswering"),k7o=o(" (ALBERT model)"),R7o=l(),zb=a("li"),qne=a("strong"),S7o=o("bart"),P7o=o(" \u2014 "),zD=a("a"),$7o=o("BartForQuestionAnswering"),I7o=o(" (BART model)"),D7o=l(),Wb=a("li"),Gne=a("strong"),j7o=o("bert"),N7o=o(" \u2014 "),WD=a("a"),q7o=o("BertForQuestionAnswering"),G7o=o(" (BERT model)"),O7o=l(),Qb=a("li"),One=a("strong"),X7o=o("big_bird"),V7o=o(" \u2014 "),QD=a("a"),z7o=o("BigBirdForQuestionAnswering"),W7o=o(" (BigBird model)"),Q7o=l(),Hb=a("li"),Xne=a("strong"),H7o=o("bigbird_pegasus"),U7o=o(" \u2014 "),HD=a("a"),J7o=o("BigBirdPegasusForQuestionAnswering"),Y7o=o(" (BigBirdPegasus model)"),K7o=l(),Ub=a("li"),Vne=a("strong"),Z7o=o("camembert"),eBo=o(" \u2014 "),UD=a("a"),oBo=o("CamembertForQuestionAnswering"),rBo=o(" (CamemBERT model)"),tBo=l(),Jb=a("li"),zne=a("strong"),aBo=o("canine"),nBo=o(" \u2014 "),JD=a("a"),sBo=o("CanineForQuestionAnswering"),lBo=o(" (Canine model)"),iBo=l(),Yb=a("li"),Wne=a("strong"),dBo=o("convbert"),cBo=o(" \u2014 "),YD=a("a"),fBo=o("ConvBertForQuestionAnswering"),mBo=o(" (ConvBERT model)"),gBo=l(),Kb=a("li"),Qne=a("strong"),hBo=o("data2vec-text"),pBo=o(" \u2014 "),KD=a("a"),_Bo=o("Data2VecTextForQuestionAnswering"),uBo=o(" (Data2VecText model)"),bBo=l(),Zb=a("li"),Hne=a("strong"),vBo=o("deberta"),TBo=o(" \u2014 "),ZD=a("a"),FBo=o("DebertaForQuestionAnswering"),CBo=o(" (DeBERTa model)"),MBo=l(),e3=a("li"),Une=a("strong"),EBo=o("deberta-v2"),yBo=o(" \u2014 "),ej=a("a"),wBo=o("DebertaV2ForQuestionAnswering"),ABo=o(" (DeBERTa-v2 model)"),LBo=l(),o3=a("li"),Jne=a("strong"),BBo=o("distilbert"),xBo=o(" \u2014 "),oj=a("a"),kBo=o("DistilBertForQuestionAnswering"),RBo=o(" (DistilBERT model)"),SBo=l(),r3=a("li"),Yne=a("strong"),PBo=o("electra"),$Bo=o(" \u2014 "),rj=a("a"),IBo=o("ElectraForQuestionAnswering"),DBo=o(" (ELECTRA model)"),jBo=l(),t3=a("li"),Kne=a("strong"),NBo=o("flaubert"),qBo=o(" \u2014 "),tj=a("a"),GBo=o("FlaubertForQuestionAnsweringSimple"),OBo=o(" (FlauBERT model)"),XBo=l(),a3=a("li"),Zne=a("strong"),VBo=o("fnet"),zBo=o(" \u2014 "),aj=a("a"),WBo=o("FNetForQuestionAnswering"),QBo=o(" (FNet model)"),HBo=l(),n3=a("li"),ese=a("strong"),UBo=o("funnel"),JBo=o(" \u2014 "),nj=a("a"),YBo=o("FunnelForQuestionAnswering"),KBo=o(" (Funnel Transformer model)"),ZBo=l(),s3=a("li"),ose=a("strong"),exo=o("gptj"),oxo=o(" \u2014 "),sj=a("a"),rxo=o("GPTJForQuestionAnswering"),txo=o(" (GPT-J model)"),axo=l(),l3=a("li"),rse=a("strong"),nxo=o("ibert"),sxo=o(" \u2014 "),lj=a("a"),lxo=o("IBertForQuestionAnswering"),ixo=o(" (I-BERT model)"),dxo=l(),i3=a("li"),tse=a("strong"),cxo=o("layoutlmv2"),fxo=o(" \u2014 "),ij=a("a"),mxo=o("LayoutLMv2ForQuestionAnswering"),gxo=o(" (LayoutLMv2 model)"),hxo=l(),d3=a("li"),ase=a("strong"),pxo=o("led"),_xo=o(" \u2014 "),dj=a("a"),uxo=o("LEDForQuestionAnswering"),bxo=o(" (LED model)"),vxo=l(),c3=a("li"),nse=a("strong"),Txo=o("longformer"),Fxo=o(" \u2014 "),cj=a("a"),Cxo=o("LongformerForQuestionAnswering"),Mxo=o(" (Longformer model)"),Exo=l(),f3=a("li"),sse=a("strong"),yxo=o("lxmert"),wxo=o(" \u2014 "),fj=a("a"),Axo=o("LxmertForQuestionAnswering"),Lxo=o(" (LXMERT model)"),Bxo=l(),m3=a("li"),lse=a("strong"),xxo=o("mbart"),kxo=o(" \u2014 "),mj=a("a"),Rxo=o("MBartForQuestionAnswering"),Sxo=o(" (mBART model)"),Pxo=l(),g3=a("li"),ise=a("strong"),$xo=o("megatron-bert"),Ixo=o(" \u2014 "),gj=a("a"),Dxo=o("MegatronBertForQuestionAnswering"),jxo=o(" (MegatronBert model)"),Nxo=l(),h3=a("li"),dse=a("strong"),qxo=o("mobilebert"),Gxo=o(" \u2014 "),hj=a("a"),Oxo=o("MobileBertForQuestionAnswering"),Xxo=o(" (MobileBERT model)"),Vxo=l(),p3=a("li"),cse=a("strong"),zxo=o("mpnet"),Wxo=o(" \u2014 "),pj=a("a"),Qxo=o("MPNetForQuestionAnswering"),Hxo=o(" (MPNet model)"),Uxo=l(),_3=a("li"),fse=a("strong"),Jxo=o("nystromformer"),Yxo=o(" \u2014 "),_j=a("a"),Kxo=o("NystromformerForQuestionAnswering"),Zxo=o(" (Nystromformer model)"),eko=l(),u3=a("li"),mse=a("strong"),oko=o("qdqbert"),rko=o(" \u2014 "),uj=a("a"),tko=o("QDQBertForQuestionAnswering"),ako=o(" (QDQBert model)"),nko=l(),b3=a("li"),gse=a("strong"),sko=o("reformer"),lko=o(" \u2014 "),bj=a("a"),iko=o("ReformerForQuestionAnswering"),dko=o(" (Reformer model)"),cko=l(),v3=a("li"),hse=a("strong"),fko=o("rembert"),mko=o(" \u2014 "),vj=a("a"),gko=o("RemBertForQuestionAnswering"),hko=o(" (RemBERT model)"),pko=l(),T3=a("li"),pse=a("strong"),_ko=o("roberta"),uko=o(" \u2014 "),Tj=a("a"),bko=o("RobertaForQuestionAnswering"),vko=o(" (RoBERTa model)"),Tko=l(),F3=a("li"),_se=a("strong"),Fko=o("roformer"),Cko=o(" \u2014 "),Fj=a("a"),Mko=o("RoFormerForQuestionAnswering"),Eko=o(" (RoFormer model)"),yko=l(),C3=a("li"),use=a("strong"),wko=o("splinter"),Ako=o(" \u2014 "),Cj=a("a"),Lko=o("SplinterForQuestionAnswering"),Bko=o(" (Splinter model)"),xko=l(),M3=a("li"),bse=a("strong"),kko=o("squeezebert"),Rko=o(" \u2014 "),Mj=a("a"),Sko=o("SqueezeBertForQuestionAnswering"),Pko=o(" (SqueezeBERT model)"),$ko=l(),E3=a("li"),vse=a("strong"),Iko=o("xlm"),Dko=o(" \u2014 "),Ej=a("a"),jko=o("XLMForQuestionAnsweringSimple"),Nko=o(" (XLM model)"),qko=l(),y3=a("li"),Tse=a("strong"),Gko=o("xlm-roberta"),Oko=o(" \u2014 "),yj=a("a"),Xko=o("XLMRobertaForQuestionAnswering"),Vko=o(" (XLM-RoBERTa model)"),zko=l(),w3=a("li"),Fse=a("strong"),Wko=o("xlm-roberta-xl"),Qko=o(" \u2014 "),wj=a("a"),Hko=o("XLMRobertaXLForQuestionAnswering"),Uko=o(" (XLM-RoBERTa-XL model)"),Jko=l(),A3=a("li"),Cse=a("strong"),Yko=o("xlnet"),Kko=o(" \u2014 "),Aj=a("a"),Zko=o("XLNetForQuestionAnsweringSimple"),eRo=o(" (XLNet model)"),oRo=l(),L3=a("li"),Mse=a("strong"),rRo=o("yoso"),tRo=o(" \u2014 "),Lj=a("a"),aRo=o("YosoForQuestionAnswering"),nRo=o(" (YOSO model)"),sRo=l(),B3=a("p"),lRo=o("The model is set in evaluation mode by default using "),Ese=a("code"),iRo=o("model.eval()"),dRo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yse=a("code"),cRo=o("model.train()"),fRo=l(),wse=a("p"),mRo=o("Examples:"),gRo=l(),f(vy.$$.fragment),gBe=l(),vd=a("h2"),x3=a("a"),Ase=a("span"),f(Ty.$$.fragment),hRo=l(),Lse=a("span"),pRo=o("AutoModelForTableQuestionAnswering"),hBe=l(),tr=a("div"),f(Fy.$$.fragment),_Ro=l(),Td=a("p"),uRo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Bse=a("code"),bRo=o("from_pretrained()"),vRo=o("class method or the "),xse=a("code"),TRo=o("from_config()"),FRo=o(`class
method.`),CRo=l(),Cy=a("p"),MRo=o("This class cannot be instantiated directly using "),kse=a("code"),ERo=o("__init__()"),yRo=o(" (throws an error)."),wRo=l(),Jr=a("div"),f(My.$$.fragment),ARo=l(),Rse=a("p"),LRo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),BRo=l(),Fd=a("p"),xRo=o(`Note:
Loading a model from its configuration file does `),Sse=a("strong"),kRo=o("not"),RRo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Pse=a("code"),SRo=o("from_pretrained()"),PRo=o("to load the model weights."),$Ro=l(),$se=a("p"),IRo=o("Examples:"),DRo=l(),f(Ey.$$.fragment),jRo=l(),Oe=a("div"),f(yy.$$.fragment),NRo=l(),Ise=a("p"),qRo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),GRo=l(),Ua=a("p"),ORo=o("The model class to instantiate is selected based on the "),Dse=a("code"),XRo=o("model_type"),VRo=o(` property of the config object (either
passed as an argument or loaded from `),jse=a("code"),zRo=o("pretrained_model_name_or_path"),WRo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nse=a("code"),QRo=o("pretrained_model_name_or_path"),HRo=o(":"),URo=l(),qse=a("ul"),k3=a("li"),Gse=a("strong"),JRo=o("tapas"),YRo=o(" \u2014 "),Bj=a("a"),KRo=o("TapasForQuestionAnswering"),ZRo=o(" (TAPAS model)"),eSo=l(),R3=a("p"),oSo=o("The model is set in evaluation mode by default using "),Ose=a("code"),rSo=o("model.eval()"),tSo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xse=a("code"),aSo=o("model.train()"),nSo=l(),Vse=a("p"),sSo=o("Examples:"),lSo=l(),f(wy.$$.fragment),pBe=l(),Cd=a("h2"),S3=a("a"),zse=a("span"),f(Ay.$$.fragment),iSo=l(),Wse=a("span"),dSo=o("AutoModelForImageClassification"),_Be=l(),ar=a("div"),f(Ly.$$.fragment),cSo=l(),Md=a("p"),fSo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Qse=a("code"),mSo=o("from_pretrained()"),gSo=o("class method or the "),Hse=a("code"),hSo=o("from_config()"),pSo=o(`class
method.`),_So=l(),By=a("p"),uSo=o("This class cannot be instantiated directly using "),Use=a("code"),bSo=o("__init__()"),vSo=o(" (throws an error)."),TSo=l(),Yr=a("div"),f(xy.$$.fragment),FSo=l(),Jse=a("p"),CSo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),MSo=l(),Ed=a("p"),ESo=o(`Note:
Loading a model from its configuration file does `),Yse=a("strong"),ySo=o("not"),wSo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Kse=a("code"),ASo=o("from_pretrained()"),LSo=o("to load the model weights."),BSo=l(),Zse=a("p"),xSo=o("Examples:"),kSo=l(),f(ky.$$.fragment),RSo=l(),Xe=a("div"),f(Ry.$$.fragment),SSo=l(),ele=a("p"),PSo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),$So=l(),Ja=a("p"),ISo=o("The model class to instantiate is selected based on the "),ole=a("code"),DSo=o("model_type"),jSo=o(` property of the config object (either
passed as an argument or loaded from `),rle=a("code"),NSo=o("pretrained_model_name_or_path"),qSo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tle=a("code"),GSo=o("pretrained_model_name_or_path"),OSo=o(":"),XSo=l(),be=a("ul"),P3=a("li"),ale=a("strong"),VSo=o("beit"),zSo=o(" \u2014 "),xj=a("a"),WSo=o("BeitForImageClassification"),QSo=o(" (BEiT model)"),HSo=l(),$3=a("li"),nle=a("strong"),USo=o("convnext"),JSo=o(" \u2014 "),kj=a("a"),YSo=o("ConvNextForImageClassification"),KSo=o(" (ConvNext model)"),ZSo=l(),$s=a("li"),sle=a("strong"),ePo=o("deit"),oPo=o(" \u2014 "),Rj=a("a"),rPo=o("DeiTForImageClassification"),tPo=o(" or "),Sj=a("a"),aPo=o("DeiTForImageClassificationWithTeacher"),nPo=o(" (DeiT model)"),sPo=l(),I3=a("li"),lle=a("strong"),lPo=o("imagegpt"),iPo=o(" \u2014 "),Pj=a("a"),dPo=o("ImageGPTForImageClassification"),cPo=o(" (ImageGPT model)"),fPo=l(),la=a("li"),ile=a("strong"),mPo=o("perceiver"),gPo=o(" \u2014 "),$j=a("a"),hPo=o("PerceiverForImageClassificationLearned"),pPo=o(" or "),Ij=a("a"),_Po=o("PerceiverForImageClassificationFourier"),uPo=o(" or "),Dj=a("a"),bPo=o("PerceiverForImageClassificationConvProcessing"),vPo=o(" (Perceiver model)"),TPo=l(),D3=a("li"),dle=a("strong"),FPo=o("poolformer"),CPo=o(" \u2014 "),jj=a("a"),MPo=o("PoolFormerForImageClassification"),EPo=o(" (PoolFormer model)"),yPo=l(),j3=a("li"),cle=a("strong"),wPo=o("segformer"),APo=o(" \u2014 "),Nj=a("a"),LPo=o("SegformerForImageClassification"),BPo=o(" (SegFormer model)"),xPo=l(),N3=a("li"),fle=a("strong"),kPo=o("swin"),RPo=o(" \u2014 "),qj=a("a"),SPo=o("SwinForImageClassification"),PPo=o(" (Swin model)"),$Po=l(),q3=a("li"),mle=a("strong"),IPo=o("vit"),DPo=o(" \u2014 "),Gj=a("a"),jPo=o("ViTForImageClassification"),NPo=o(" (ViT model)"),qPo=l(),G3=a("p"),GPo=o("The model is set in evaluation mode by default using "),gle=a("code"),OPo=o("model.eval()"),XPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hle=a("code"),VPo=o("model.train()"),zPo=l(),ple=a("p"),WPo=o("Examples:"),QPo=l(),f(Sy.$$.fragment),uBe=l(),yd=a("h2"),O3=a("a"),_le=a("span"),f(Py.$$.fragment),HPo=l(),ule=a("span"),UPo=o("AutoModelForVision2Seq"),bBe=l(),nr=a("div"),f($y.$$.fragment),JPo=l(),wd=a("p"),YPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),ble=a("code"),KPo=o("from_pretrained()"),ZPo=o("class method or the "),vle=a("code"),e$o=o("from_config()"),o$o=o(`class
method.`),r$o=l(),Iy=a("p"),t$o=o("This class cannot be instantiated directly using "),Tle=a("code"),a$o=o("__init__()"),n$o=o(" (throws an error)."),s$o=l(),Kr=a("div"),f(Dy.$$.fragment),l$o=l(),Fle=a("p"),i$o=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),d$o=l(),Ad=a("p"),c$o=o(`Note:
Loading a model from its configuration file does `),Cle=a("strong"),f$o=o("not"),m$o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Mle=a("code"),g$o=o("from_pretrained()"),h$o=o("to load the model weights."),p$o=l(),Ele=a("p"),_$o=o("Examples:"),u$o=l(),f(jy.$$.fragment),b$o=l(),Ve=a("div"),f(Ny.$$.fragment),v$o=l(),yle=a("p"),T$o=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),F$o=l(),Ya=a("p"),C$o=o("The model class to instantiate is selected based on the "),wle=a("code"),M$o=o("model_type"),E$o=o(` property of the config object (either
passed as an argument or loaded from `),Ale=a("code"),y$o=o("pretrained_model_name_or_path"),w$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lle=a("code"),A$o=o("pretrained_model_name_or_path"),L$o=o(":"),B$o=l(),Ble=a("ul"),X3=a("li"),xle=a("strong"),x$o=o("vision-encoder-decoder"),k$o=o(" \u2014 "),Oj=a("a"),R$o=o("VisionEncoderDecoderModel"),S$o=o(" (Vision Encoder decoder model)"),P$o=l(),V3=a("p"),$$o=o("The model is set in evaluation mode by default using "),kle=a("code"),I$o=o("model.eval()"),D$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rle=a("code"),j$o=o("model.train()"),N$o=l(),Sle=a("p"),q$o=o("Examples:"),G$o=l(),f(qy.$$.fragment),vBe=l(),Ld=a("h2"),z3=a("a"),Ple=a("span"),f(Gy.$$.fragment),O$o=l(),$le=a("span"),X$o=o("AutoModelForAudioClassification"),TBe=l(),sr=a("div"),f(Oy.$$.fragment),V$o=l(),Bd=a("p"),z$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),Ile=a("code"),W$o=o("from_pretrained()"),Q$o=o("class method or the "),Dle=a("code"),H$o=o("from_config()"),U$o=o(`class
method.`),J$o=l(),Xy=a("p"),Y$o=o("This class cannot be instantiated directly using "),jle=a("code"),K$o=o("__init__()"),Z$o=o(" (throws an error)."),eIo=l(),Zr=a("div"),f(Vy.$$.fragment),oIo=l(),Nle=a("p"),rIo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),tIo=l(),xd=a("p"),aIo=o(`Note:
Loading a model from its configuration file does `),qle=a("strong"),nIo=o("not"),sIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Gle=a("code"),lIo=o("from_pretrained()"),iIo=o("to load the model weights."),dIo=l(),Ole=a("p"),cIo=o("Examples:"),fIo=l(),f(zy.$$.fragment),mIo=l(),ze=a("div"),f(Wy.$$.fragment),gIo=l(),Xle=a("p"),hIo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),pIo=l(),Ka=a("p"),_Io=o("The model class to instantiate is selected based on the "),Vle=a("code"),uIo=o("model_type"),bIo=o(` property of the config object (either
passed as an argument or loaded from `),zle=a("code"),vIo=o("pretrained_model_name_or_path"),TIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wle=a("code"),FIo=o("pretrained_model_name_or_path"),CIo=o(":"),MIo=l(),Ae=a("ul"),W3=a("li"),Qle=a("strong"),EIo=o("data2vec-audio"),yIo=o(" \u2014 "),Xj=a("a"),wIo=o("Data2VecAudioForSequenceClassification"),AIo=o(" (Data2VecAudio model)"),LIo=l(),Q3=a("li"),Hle=a("strong"),BIo=o("hubert"),xIo=o(" \u2014 "),Vj=a("a"),kIo=o("HubertForSequenceClassification"),RIo=o(" (Hubert model)"),SIo=l(),H3=a("li"),Ule=a("strong"),PIo=o("sew"),$Io=o(" \u2014 "),zj=a("a"),IIo=o("SEWForSequenceClassification"),DIo=o(" (SEW model)"),jIo=l(),U3=a("li"),Jle=a("strong"),NIo=o("sew-d"),qIo=o(" \u2014 "),Wj=a("a"),GIo=o("SEWDForSequenceClassification"),OIo=o(" (SEW-D model)"),XIo=l(),J3=a("li"),Yle=a("strong"),VIo=o("unispeech"),zIo=o(" \u2014 "),Qj=a("a"),WIo=o("UniSpeechForSequenceClassification"),QIo=o(" (UniSpeech model)"),HIo=l(),Y3=a("li"),Kle=a("strong"),UIo=o("unispeech-sat"),JIo=o(" \u2014 "),Hj=a("a"),YIo=o("UniSpeechSatForSequenceClassification"),KIo=o(" (UniSpeechSat model)"),ZIo=l(),K3=a("li"),Zle=a("strong"),eDo=o("wav2vec2"),oDo=o(" \u2014 "),Uj=a("a"),rDo=o("Wav2Vec2ForSequenceClassification"),tDo=o(" (Wav2Vec2 model)"),aDo=l(),Z3=a("li"),eie=a("strong"),nDo=o("wavlm"),sDo=o(" \u2014 "),Jj=a("a"),lDo=o("WavLMForSequenceClassification"),iDo=o(" (WavLM model)"),dDo=l(),e5=a("p"),cDo=o("The model is set in evaluation mode by default using "),oie=a("code"),fDo=o("model.eval()"),mDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rie=a("code"),gDo=o("model.train()"),hDo=l(),tie=a("p"),pDo=o("Examples:"),_Do=l(),f(Qy.$$.fragment),FBe=l(),kd=a("h2"),o5=a("a"),aie=a("span"),f(Hy.$$.fragment),uDo=l(),nie=a("span"),bDo=o("AutoModelForAudioFrameClassification"),CBe=l(),lr=a("div"),f(Uy.$$.fragment),vDo=l(),Rd=a("p"),TDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),sie=a("code"),FDo=o("from_pretrained()"),CDo=o("class method or the "),lie=a("code"),MDo=o("from_config()"),EDo=o(`class
method.`),yDo=l(),Jy=a("p"),wDo=o("This class cannot be instantiated directly using "),iie=a("code"),ADo=o("__init__()"),LDo=o(" (throws an error)."),BDo=l(),et=a("div"),f(Yy.$$.fragment),xDo=l(),die=a("p"),kDo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),RDo=l(),Sd=a("p"),SDo=o(`Note:
Loading a model from its configuration file does `),cie=a("strong"),PDo=o("not"),$Do=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fie=a("code"),IDo=o("from_pretrained()"),DDo=o("to load the model weights."),jDo=l(),mie=a("p"),NDo=o("Examples:"),qDo=l(),f(Ky.$$.fragment),GDo=l(),We=a("div"),f(Zy.$$.fragment),ODo=l(),gie=a("p"),XDo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),VDo=l(),Za=a("p"),zDo=o("The model class to instantiate is selected based on the "),hie=a("code"),WDo=o("model_type"),QDo=o(` property of the config object (either
passed as an argument or loaded from `),pie=a("code"),HDo=o("pretrained_model_name_or_path"),UDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_ie=a("code"),JDo=o("pretrained_model_name_or_path"),YDo=o(":"),KDo=l(),en=a("ul"),r5=a("li"),uie=a("strong"),ZDo=o("data2vec-audio"),ejo=o(" \u2014 "),Yj=a("a"),ojo=o("Data2VecAudioForAudioFrameClassification"),rjo=o(" (Data2VecAudio model)"),tjo=l(),t5=a("li"),bie=a("strong"),ajo=o("unispeech-sat"),njo=o(" \u2014 "),Kj=a("a"),sjo=o("UniSpeechSatForAudioFrameClassification"),ljo=o(" (UniSpeechSat model)"),ijo=l(),a5=a("li"),vie=a("strong"),djo=o("wav2vec2"),cjo=o(" \u2014 "),Zj=a("a"),fjo=o("Wav2Vec2ForAudioFrameClassification"),mjo=o(" (Wav2Vec2 model)"),gjo=l(),n5=a("li"),Tie=a("strong"),hjo=o("wavlm"),pjo=o(" \u2014 "),eN=a("a"),_jo=o("WavLMForAudioFrameClassification"),ujo=o(" (WavLM model)"),bjo=l(),s5=a("p"),vjo=o("The model is set in evaluation mode by default using "),Fie=a("code"),Tjo=o("model.eval()"),Fjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cie=a("code"),Cjo=o("model.train()"),Mjo=l(),Mie=a("p"),Ejo=o("Examples:"),yjo=l(),f(ew.$$.fragment),MBe=l(),Pd=a("h2"),l5=a("a"),Eie=a("span"),f(ow.$$.fragment),wjo=l(),yie=a("span"),Ajo=o("AutoModelForCTC"),EBe=l(),ir=a("div"),f(rw.$$.fragment),Ljo=l(),$d=a("p"),Bjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),wie=a("code"),xjo=o("from_pretrained()"),kjo=o("class method or the "),Aie=a("code"),Rjo=o("from_config()"),Sjo=o(`class
method.`),Pjo=l(),tw=a("p"),$jo=o("This class cannot be instantiated directly using "),Lie=a("code"),Ijo=o("__init__()"),Djo=o(" (throws an error)."),jjo=l(),ot=a("div"),f(aw.$$.fragment),Njo=l(),Bie=a("p"),qjo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Gjo=l(),Id=a("p"),Ojo=o(`Note:
Loading a model from its configuration file does `),xie=a("strong"),Xjo=o("not"),Vjo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kie=a("code"),zjo=o("from_pretrained()"),Wjo=o("to load the model weights."),Qjo=l(),Rie=a("p"),Hjo=o("Examples:"),Ujo=l(),f(nw.$$.fragment),Jjo=l(),Qe=a("div"),f(sw.$$.fragment),Yjo=l(),Sie=a("p"),Kjo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Zjo=l(),on=a("p"),eNo=o("The model class to instantiate is selected based on the "),Pie=a("code"),oNo=o("model_type"),rNo=o(` property of the config object (either
passed as an argument or loaded from `),$ie=a("code"),tNo=o("pretrained_model_name_or_path"),aNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Iie=a("code"),nNo=o("pretrained_model_name_or_path"),sNo=o(":"),lNo=l(),Le=a("ul"),i5=a("li"),Die=a("strong"),iNo=o("data2vec-audio"),dNo=o(" \u2014 "),oN=a("a"),cNo=o("Data2VecAudioForCTC"),fNo=o(" (Data2VecAudio model)"),mNo=l(),d5=a("li"),jie=a("strong"),gNo=o("hubert"),hNo=o(" \u2014 "),rN=a("a"),pNo=o("HubertForCTC"),_No=o(" (Hubert model)"),uNo=l(),c5=a("li"),Nie=a("strong"),bNo=o("sew"),vNo=o(" \u2014 "),tN=a("a"),TNo=o("SEWForCTC"),FNo=o(" (SEW model)"),CNo=l(),f5=a("li"),qie=a("strong"),MNo=o("sew-d"),ENo=o(" \u2014 "),aN=a("a"),yNo=o("SEWDForCTC"),wNo=o(" (SEW-D model)"),ANo=l(),m5=a("li"),Gie=a("strong"),LNo=o("unispeech"),BNo=o(" \u2014 "),nN=a("a"),xNo=o("UniSpeechForCTC"),kNo=o(" (UniSpeech model)"),RNo=l(),g5=a("li"),Oie=a("strong"),SNo=o("unispeech-sat"),PNo=o(" \u2014 "),sN=a("a"),$No=o("UniSpeechSatForCTC"),INo=o(" (UniSpeechSat model)"),DNo=l(),h5=a("li"),Xie=a("strong"),jNo=o("wav2vec2"),NNo=o(" \u2014 "),lN=a("a"),qNo=o("Wav2Vec2ForCTC"),GNo=o(" (Wav2Vec2 model)"),ONo=l(),p5=a("li"),Vie=a("strong"),XNo=o("wavlm"),VNo=o(" \u2014 "),iN=a("a"),zNo=o("WavLMForCTC"),WNo=o(" (WavLM model)"),QNo=l(),_5=a("p"),HNo=o("The model is set in evaluation mode by default using "),zie=a("code"),UNo=o("model.eval()"),JNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wie=a("code"),YNo=o("model.train()"),KNo=l(),Qie=a("p"),ZNo=o("Examples:"),eqo=l(),f(lw.$$.fragment),yBe=l(),Dd=a("h2"),u5=a("a"),Hie=a("span"),f(iw.$$.fragment),oqo=l(),Uie=a("span"),rqo=o("AutoModelForSpeechSeq2Seq"),wBe=l(),dr=a("div"),f(dw.$$.fragment),tqo=l(),jd=a("p"),aqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Jie=a("code"),nqo=o("from_pretrained()"),sqo=o("class method or the "),Yie=a("code"),lqo=o("from_config()"),iqo=o(`class
method.`),dqo=l(),cw=a("p"),cqo=o("This class cannot be instantiated directly using "),Kie=a("code"),fqo=o("__init__()"),mqo=o(" (throws an error)."),gqo=l(),rt=a("div"),f(fw.$$.fragment),hqo=l(),Zie=a("p"),pqo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),_qo=l(),Nd=a("p"),uqo=o(`Note:
Loading a model from its configuration file does `),ede=a("strong"),bqo=o("not"),vqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ode=a("code"),Tqo=o("from_pretrained()"),Fqo=o("to load the model weights."),Cqo=l(),rde=a("p"),Mqo=o("Examples:"),Eqo=l(),f(mw.$$.fragment),yqo=l(),He=a("div"),f(gw.$$.fragment),wqo=l(),tde=a("p"),Aqo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Lqo=l(),rn=a("p"),Bqo=o("The model class to instantiate is selected based on the "),ade=a("code"),xqo=o("model_type"),kqo=o(` property of the config object (either
passed as an argument or loaded from `),nde=a("code"),Rqo=o("pretrained_model_name_or_path"),Sqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sde=a("code"),Pqo=o("pretrained_model_name_or_path"),$qo=o(":"),Iqo=l(),hw=a("ul"),b5=a("li"),lde=a("strong"),Dqo=o("speech-encoder-decoder"),jqo=o(" \u2014 "),dN=a("a"),Nqo=o("SpeechEncoderDecoderModel"),qqo=o(" (Speech Encoder decoder model)"),Gqo=l(),v5=a("li"),ide=a("strong"),Oqo=o("speech_to_text"),Xqo=o(" \u2014 "),cN=a("a"),Vqo=o("Speech2TextForConditionalGeneration"),zqo=o(" (Speech2Text model)"),Wqo=l(),T5=a("p"),Qqo=o("The model is set in evaluation mode by default using "),dde=a("code"),Hqo=o("model.eval()"),Uqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cde=a("code"),Jqo=o("model.train()"),Yqo=l(),fde=a("p"),Kqo=o("Examples:"),Zqo=l(),f(pw.$$.fragment),ABe=l(),qd=a("h2"),F5=a("a"),mde=a("span"),f(_w.$$.fragment),eGo=l(),gde=a("span"),oGo=o("AutoModelForAudioXVector"),LBe=l(),cr=a("div"),f(uw.$$.fragment),rGo=l(),Gd=a("p"),tGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),hde=a("code"),aGo=o("from_pretrained()"),nGo=o("class method or the "),pde=a("code"),sGo=o("from_config()"),lGo=o(`class
method.`),iGo=l(),bw=a("p"),dGo=o("This class cannot be instantiated directly using "),_de=a("code"),cGo=o("__init__()"),fGo=o(" (throws an error)."),mGo=l(),tt=a("div"),f(vw.$$.fragment),gGo=l(),ude=a("p"),hGo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),pGo=l(),Od=a("p"),_Go=o(`Note:
Loading a model from its configuration file does `),bde=a("strong"),uGo=o("not"),bGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vde=a("code"),vGo=o("from_pretrained()"),TGo=o("to load the model weights."),FGo=l(),Tde=a("p"),CGo=o("Examples:"),MGo=l(),f(Tw.$$.fragment),EGo=l(),Ue=a("div"),f(Fw.$$.fragment),yGo=l(),Fde=a("p"),wGo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),AGo=l(),tn=a("p"),LGo=o("The model class to instantiate is selected based on the "),Cde=a("code"),BGo=o("model_type"),xGo=o(` property of the config object (either
passed as an argument or loaded from `),Mde=a("code"),kGo=o("pretrained_model_name_or_path"),RGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ede=a("code"),SGo=o("pretrained_model_name_or_path"),PGo=o(":"),$Go=l(),an=a("ul"),C5=a("li"),yde=a("strong"),IGo=o("data2vec-audio"),DGo=o(" \u2014 "),fN=a("a"),jGo=o("Data2VecAudioForXVector"),NGo=o(" (Data2VecAudio model)"),qGo=l(),M5=a("li"),wde=a("strong"),GGo=o("unispeech-sat"),OGo=o(" \u2014 "),mN=a("a"),XGo=o("UniSpeechSatForXVector"),VGo=o(" (UniSpeechSat model)"),zGo=l(),E5=a("li"),Ade=a("strong"),WGo=o("wav2vec2"),QGo=o(" \u2014 "),gN=a("a"),HGo=o("Wav2Vec2ForXVector"),UGo=o(" (Wav2Vec2 model)"),JGo=l(),y5=a("li"),Lde=a("strong"),YGo=o("wavlm"),KGo=o(" \u2014 "),hN=a("a"),ZGo=o("WavLMForXVector"),eOo=o(" (WavLM model)"),oOo=l(),w5=a("p"),rOo=o("The model is set in evaluation mode by default using "),Bde=a("code"),tOo=o("model.eval()"),aOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xde=a("code"),nOo=o("model.train()"),sOo=l(),kde=a("p"),lOo=o("Examples:"),iOo=l(),f(Cw.$$.fragment),BBe=l(),Xd=a("h2"),A5=a("a"),Rde=a("span"),f(Mw.$$.fragment),dOo=l(),Sde=a("span"),cOo=o("AutoModelForMaskedImageModeling"),xBe=l(),fr=a("div"),f(Ew.$$.fragment),fOo=l(),Vd=a("p"),mOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Pde=a("code"),gOo=o("from_pretrained()"),hOo=o("class method or the "),$de=a("code"),pOo=o("from_config()"),_Oo=o(`class
method.`),uOo=l(),yw=a("p"),bOo=o("This class cannot be instantiated directly using "),Ide=a("code"),vOo=o("__init__()"),TOo=o(" (throws an error)."),FOo=l(),at=a("div"),f(ww.$$.fragment),COo=l(),Dde=a("p"),MOo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),EOo=l(),zd=a("p"),yOo=o(`Note:
Loading a model from its configuration file does `),jde=a("strong"),wOo=o("not"),AOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Nde=a("code"),LOo=o("from_pretrained()"),BOo=o("to load the model weights."),xOo=l(),qde=a("p"),kOo=o("Examples:"),ROo=l(),f(Aw.$$.fragment),SOo=l(),Je=a("div"),f(Lw.$$.fragment),POo=l(),Gde=a("p"),$Oo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),IOo=l(),nn=a("p"),DOo=o("The model class to instantiate is selected based on the "),Ode=a("code"),jOo=o("model_type"),NOo=o(` property of the config object (either
passed as an argument or loaded from `),Xde=a("code"),qOo=o("pretrained_model_name_or_path"),GOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vde=a("code"),OOo=o("pretrained_model_name_or_path"),XOo=o(":"),VOo=l(),Wd=a("ul"),L5=a("li"),zde=a("strong"),zOo=o("deit"),WOo=o(" \u2014 "),pN=a("a"),QOo=o("DeiTForMaskedImageModeling"),HOo=o(" (DeiT model)"),UOo=l(),B5=a("li"),Wde=a("strong"),JOo=o("swin"),YOo=o(" \u2014 "),_N=a("a"),KOo=o("SwinForMaskedImageModeling"),ZOo=o(" (Swin model)"),eXo=l(),x5=a("li"),Qde=a("strong"),oXo=o("vit"),rXo=o(" \u2014 "),uN=a("a"),tXo=o("ViTForMaskedImageModeling"),aXo=o(" (ViT model)"),nXo=l(),k5=a("p"),sXo=o("The model is set in evaluation mode by default using "),Hde=a("code"),lXo=o("model.eval()"),iXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ude=a("code"),dXo=o("model.train()"),cXo=l(),Jde=a("p"),fXo=o("Examples:"),mXo=l(),f(Bw.$$.fragment),kBe=l(),Qd=a("h2"),R5=a("a"),Yde=a("span"),f(xw.$$.fragment),gXo=l(),Kde=a("span"),hXo=o("AutoModelForObjectDetection"),RBe=l(),mr=a("div"),f(kw.$$.fragment),pXo=l(),Hd=a("p"),_Xo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Zde=a("code"),uXo=o("from_pretrained()"),bXo=o("class method or the "),ece=a("code"),vXo=o("from_config()"),TXo=o(`class
method.`),FXo=l(),Rw=a("p"),CXo=o("This class cannot be instantiated directly using "),oce=a("code"),MXo=o("__init__()"),EXo=o(" (throws an error)."),yXo=l(),nt=a("div"),f(Sw.$$.fragment),wXo=l(),rce=a("p"),AXo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),LXo=l(),Ud=a("p"),BXo=o(`Note:
Loading a model from its configuration file does `),tce=a("strong"),xXo=o("not"),kXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ace=a("code"),RXo=o("from_pretrained()"),SXo=o("to load the model weights."),PXo=l(),nce=a("p"),$Xo=o("Examples:"),IXo=l(),f(Pw.$$.fragment),DXo=l(),Ye=a("div"),f($w.$$.fragment),jXo=l(),sce=a("p"),NXo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),qXo=l(),sn=a("p"),GXo=o("The model class to instantiate is selected based on the "),lce=a("code"),OXo=o("model_type"),XXo=o(` property of the config object (either
passed as an argument or loaded from `),ice=a("code"),VXo=o("pretrained_model_name_or_path"),zXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dce=a("code"),WXo=o("pretrained_model_name_or_path"),QXo=o(":"),HXo=l(),cce=a("ul"),S5=a("li"),fce=a("strong"),UXo=o("detr"),JXo=o(" \u2014 "),bN=a("a"),YXo=o("DetrForObjectDetection"),KXo=o(" (DETR model)"),ZXo=l(),P5=a("p"),eVo=o("The model is set in evaluation mode by default using "),mce=a("code"),oVo=o("model.eval()"),rVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gce=a("code"),tVo=o("model.train()"),aVo=l(),hce=a("p"),nVo=o("Examples:"),sVo=l(),f(Iw.$$.fragment),SBe=l(),Jd=a("h2"),$5=a("a"),pce=a("span"),f(Dw.$$.fragment),lVo=l(),_ce=a("span"),iVo=o("AutoModelForImageSegmentation"),PBe=l(),gr=a("div"),f(jw.$$.fragment),dVo=l(),Yd=a("p"),cVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),uce=a("code"),fVo=o("from_pretrained()"),mVo=o("class method or the "),bce=a("code"),gVo=o("from_config()"),hVo=o(`class
method.`),pVo=l(),Nw=a("p"),_Vo=o("This class cannot be instantiated directly using "),vce=a("code"),uVo=o("__init__()"),bVo=o(" (throws an error)."),vVo=l(),st=a("div"),f(qw.$$.fragment),TVo=l(),Tce=a("p"),FVo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),CVo=l(),Kd=a("p"),MVo=o(`Note:
Loading a model from its configuration file does `),Fce=a("strong"),EVo=o("not"),yVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Cce=a("code"),wVo=o("from_pretrained()"),AVo=o("to load the model weights."),LVo=l(),Mce=a("p"),BVo=o("Examples:"),xVo=l(),f(Gw.$$.fragment),kVo=l(),Ke=a("div"),f(Ow.$$.fragment),RVo=l(),Ece=a("p"),SVo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),PVo=l(),ln=a("p"),$Vo=o("The model class to instantiate is selected based on the "),yce=a("code"),IVo=o("model_type"),DVo=o(` property of the config object (either
passed as an argument or loaded from `),wce=a("code"),jVo=o("pretrained_model_name_or_path"),NVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ace=a("code"),qVo=o("pretrained_model_name_or_path"),GVo=o(":"),OVo=l(),Lce=a("ul"),I5=a("li"),Bce=a("strong"),XVo=o("detr"),VVo=o(" \u2014 "),vN=a("a"),zVo=o("DetrForSegmentation"),WVo=o(" (DETR model)"),QVo=l(),D5=a("p"),HVo=o("The model is set in evaluation mode by default using "),xce=a("code"),UVo=o("model.eval()"),JVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kce=a("code"),YVo=o("model.train()"),KVo=l(),Rce=a("p"),ZVo=o("Examples:"),ezo=l(),f(Xw.$$.fragment),$Be=l(),Zd=a("h2"),j5=a("a"),Sce=a("span"),f(Vw.$$.fragment),ozo=l(),Pce=a("span"),rzo=o("AutoModelForSemanticSegmentation"),IBe=l(),hr=a("div"),f(zw.$$.fragment),tzo=l(),ec=a("p"),azo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),$ce=a("code"),nzo=o("from_pretrained()"),szo=o("class method or the "),Ice=a("code"),lzo=o("from_config()"),izo=o(`class
method.`),dzo=l(),Ww=a("p"),czo=o("This class cannot be instantiated directly using "),Dce=a("code"),fzo=o("__init__()"),mzo=o(" (throws an error)."),gzo=l(),lt=a("div"),f(Qw.$$.fragment),hzo=l(),jce=a("p"),pzo=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),_zo=l(),oc=a("p"),uzo=o(`Note:
Loading a model from its configuration file does `),Nce=a("strong"),bzo=o("not"),vzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qce=a("code"),Tzo=o("from_pretrained()"),Fzo=o("to load the model weights."),Czo=l(),Gce=a("p"),Mzo=o("Examples:"),Ezo=l(),f(Hw.$$.fragment),yzo=l(),Ze=a("div"),f(Uw.$$.fragment),wzo=l(),Oce=a("p"),Azo=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Lzo=l(),dn=a("p"),Bzo=o("The model class to instantiate is selected based on the "),Xce=a("code"),xzo=o("model_type"),kzo=o(` property of the config object (either
passed as an argument or loaded from `),Vce=a("code"),Rzo=o("pretrained_model_name_or_path"),Szo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zce=a("code"),Pzo=o("pretrained_model_name_or_path"),$zo=o(":"),Izo=l(),Jw=a("ul"),N5=a("li"),Wce=a("strong"),Dzo=o("beit"),jzo=o(" \u2014 "),TN=a("a"),Nzo=o("BeitForSemanticSegmentation"),qzo=o(" (BEiT model)"),Gzo=l(),q5=a("li"),Qce=a("strong"),Ozo=o("segformer"),Xzo=o(" \u2014 "),FN=a("a"),Vzo=o("SegformerForSemanticSegmentation"),zzo=o(" (SegFormer model)"),Wzo=l(),G5=a("p"),Qzo=o("The model is set in evaluation mode by default using "),Hce=a("code"),Hzo=o("model.eval()"),Uzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Uce=a("code"),Jzo=o("model.train()"),Yzo=l(),Jce=a("p"),Kzo=o("Examples:"),Zzo=l(),f(Yw.$$.fragment),DBe=l(),rc=a("h2"),O5=a("a"),Yce=a("span"),f(Kw.$$.fragment),eWo=l(),Kce=a("span"),oWo=o("TFAutoModel"),jBe=l(),pr=a("div"),f(Zw.$$.fragment),rWo=l(),tc=a("p"),tWo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Zce=a("code"),aWo=o("from_pretrained()"),nWo=o("class method or the "),efe=a("code"),sWo=o("from_config()"),lWo=o(`class
method.`),iWo=l(),e6=a("p"),dWo=o("This class cannot be instantiated directly using "),ofe=a("code"),cWo=o("__init__()"),fWo=o(" (throws an error)."),mWo=l(),it=a("div"),f(o6.$$.fragment),gWo=l(),rfe=a("p"),hWo=o("Instantiates one of the base model classes of the library from a configuration."),pWo=l(),ac=a("p"),_Wo=o(`Note:
Loading a model from its configuration file does `),tfe=a("strong"),uWo=o("not"),bWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),afe=a("code"),vWo=o("from_pretrained()"),TWo=o("to load the model weights."),FWo=l(),nfe=a("p"),CWo=o("Examples:"),MWo=l(),f(r6.$$.fragment),EWo=l(),go=a("div"),f(t6.$$.fragment),yWo=l(),sfe=a("p"),wWo=o("Instantiate one of the base model classes of the library from a pretrained model."),AWo=l(),cn=a("p"),LWo=o("The model class to instantiate is selected based on the "),lfe=a("code"),BWo=o("model_type"),xWo=o(` property of the config object (either
passed as an argument or loaded from `),ife=a("code"),kWo=o("pretrained_model_name_or_path"),RWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dfe=a("code"),SWo=o("pretrained_model_name_or_path"),PWo=o(":"),$Wo=l(),B=a("ul"),X5=a("li"),cfe=a("strong"),IWo=o("albert"),DWo=o(" \u2014 "),CN=a("a"),jWo=o("TFAlbertModel"),NWo=o(" (ALBERT model)"),qWo=l(),V5=a("li"),ffe=a("strong"),GWo=o("bart"),OWo=o(" \u2014 "),MN=a("a"),XWo=o("TFBartModel"),VWo=o(" (BART model)"),zWo=l(),z5=a("li"),mfe=a("strong"),WWo=o("bert"),QWo=o(" \u2014 "),EN=a("a"),HWo=o("TFBertModel"),UWo=o(" (BERT model)"),JWo=l(),W5=a("li"),gfe=a("strong"),YWo=o("blenderbot"),KWo=o(" \u2014 "),yN=a("a"),ZWo=o("TFBlenderbotModel"),eQo=o(" (Blenderbot model)"),oQo=l(),Q5=a("li"),hfe=a("strong"),rQo=o("blenderbot-small"),tQo=o(" \u2014 "),wN=a("a"),aQo=o("TFBlenderbotSmallModel"),nQo=o(" (BlenderbotSmall model)"),sQo=l(),H5=a("li"),pfe=a("strong"),lQo=o("camembert"),iQo=o(" \u2014 "),AN=a("a"),dQo=o("TFCamembertModel"),cQo=o(" (CamemBERT model)"),fQo=l(),U5=a("li"),_fe=a("strong"),mQo=o("clip"),gQo=o(" \u2014 "),LN=a("a"),hQo=o("TFCLIPModel"),pQo=o(" (CLIP model)"),_Qo=l(),J5=a("li"),ufe=a("strong"),uQo=o("convbert"),bQo=o(" \u2014 "),BN=a("a"),vQo=o("TFConvBertModel"),TQo=o(" (ConvBERT model)"),FQo=l(),Y5=a("li"),bfe=a("strong"),CQo=o("convnext"),MQo=o(" \u2014 "),xN=a("a"),EQo=o("TFConvNextModel"),yQo=o(" (ConvNext model)"),wQo=l(),K5=a("li"),vfe=a("strong"),AQo=o("ctrl"),LQo=o(" \u2014 "),kN=a("a"),BQo=o("TFCTRLModel"),xQo=o(" (CTRL model)"),kQo=l(),Z5=a("li"),Tfe=a("strong"),RQo=o("deberta"),SQo=o(" \u2014 "),RN=a("a"),PQo=o("TFDebertaModel"),$Qo=o(" (DeBERTa model)"),IQo=l(),ev=a("li"),Ffe=a("strong"),DQo=o("deberta-v2"),jQo=o(" \u2014 "),SN=a("a"),NQo=o("TFDebertaV2Model"),qQo=o(" (DeBERTa-v2 model)"),GQo=l(),ov=a("li"),Cfe=a("strong"),OQo=o("distilbert"),XQo=o(" \u2014 "),PN=a("a"),VQo=o("TFDistilBertModel"),zQo=o(" (DistilBERT model)"),WQo=l(),rv=a("li"),Mfe=a("strong"),QQo=o("dpr"),HQo=o(" \u2014 "),$N=a("a"),UQo=o("TFDPRQuestionEncoder"),JQo=o(" (DPR model)"),YQo=l(),tv=a("li"),Efe=a("strong"),KQo=o("electra"),ZQo=o(" \u2014 "),IN=a("a"),eHo=o("TFElectraModel"),oHo=o(" (ELECTRA model)"),rHo=l(),av=a("li"),yfe=a("strong"),tHo=o("flaubert"),aHo=o(" \u2014 "),DN=a("a"),nHo=o("TFFlaubertModel"),sHo=o(" (FlauBERT model)"),lHo=l(),Is=a("li"),wfe=a("strong"),iHo=o("funnel"),dHo=o(" \u2014 "),jN=a("a"),cHo=o("TFFunnelModel"),fHo=o(" or "),NN=a("a"),mHo=o("TFFunnelBaseModel"),gHo=o(" (Funnel Transformer model)"),hHo=l(),nv=a("li"),Afe=a("strong"),pHo=o("gpt2"),_Ho=o(" \u2014 "),qN=a("a"),uHo=o("TFGPT2Model"),bHo=o(" (OpenAI GPT-2 model)"),vHo=l(),sv=a("li"),Lfe=a("strong"),THo=o("hubert"),FHo=o(" \u2014 "),GN=a("a"),CHo=o("TFHubertModel"),MHo=o(" (Hubert model)"),EHo=l(),lv=a("li"),Bfe=a("strong"),yHo=o("layoutlm"),wHo=o(" \u2014 "),ON=a("a"),AHo=o("TFLayoutLMModel"),LHo=o(" (LayoutLM model)"),BHo=l(),iv=a("li"),xfe=a("strong"),xHo=o("led"),kHo=o(" \u2014 "),XN=a("a"),RHo=o("TFLEDModel"),SHo=o(" (LED model)"),PHo=l(),dv=a("li"),kfe=a("strong"),$Ho=o("longformer"),IHo=o(" \u2014 "),VN=a("a"),DHo=o("TFLongformerModel"),jHo=o(" (Longformer model)"),NHo=l(),cv=a("li"),Rfe=a("strong"),qHo=o("lxmert"),GHo=o(" \u2014 "),zN=a("a"),OHo=o("TFLxmertModel"),XHo=o(" (LXMERT model)"),VHo=l(),fv=a("li"),Sfe=a("strong"),zHo=o("marian"),WHo=o(" \u2014 "),WN=a("a"),QHo=o("TFMarianModel"),HHo=o(" (Marian model)"),UHo=l(),mv=a("li"),Pfe=a("strong"),JHo=o("mbart"),YHo=o(" \u2014 "),QN=a("a"),KHo=o("TFMBartModel"),ZHo=o(" (mBART model)"),eUo=l(),gv=a("li"),$fe=a("strong"),oUo=o("mobilebert"),rUo=o(" \u2014 "),HN=a("a"),tUo=o("TFMobileBertModel"),aUo=o(" (MobileBERT model)"),nUo=l(),hv=a("li"),Ife=a("strong"),sUo=o("mpnet"),lUo=o(" \u2014 "),UN=a("a"),iUo=o("TFMPNetModel"),dUo=o(" (MPNet model)"),cUo=l(),pv=a("li"),Dfe=a("strong"),fUo=o("mt5"),mUo=o(" \u2014 "),JN=a("a"),gUo=o("TFMT5Model"),hUo=o(" (mT5 model)"),pUo=l(),_v=a("li"),jfe=a("strong"),_Uo=o("openai-gpt"),uUo=o(" \u2014 "),YN=a("a"),bUo=o("TFOpenAIGPTModel"),vUo=o(" (OpenAI GPT model)"),TUo=l(),uv=a("li"),Nfe=a("strong"),FUo=o("pegasus"),CUo=o(" \u2014 "),KN=a("a"),MUo=o("TFPegasusModel"),EUo=o(" (Pegasus model)"),yUo=l(),bv=a("li"),qfe=a("strong"),wUo=o("rembert"),AUo=o(" \u2014 "),ZN=a("a"),LUo=o("TFRemBertModel"),BUo=o(" (RemBERT model)"),xUo=l(),vv=a("li"),Gfe=a("strong"),kUo=o("roberta"),RUo=o(" \u2014 "),eq=a("a"),SUo=o("TFRobertaModel"),PUo=o(" (RoBERTa model)"),$Uo=l(),Tv=a("li"),Ofe=a("strong"),IUo=o("roformer"),DUo=o(" \u2014 "),oq=a("a"),jUo=o("TFRoFormerModel"),NUo=o(" (RoFormer model)"),qUo=l(),Fv=a("li"),Xfe=a("strong"),GUo=o("speech_to_text"),OUo=o(" \u2014 "),rq=a("a"),XUo=o("TFSpeech2TextModel"),VUo=o(" (Speech2Text model)"),zUo=l(),Cv=a("li"),Vfe=a("strong"),WUo=o("t5"),QUo=o(" \u2014 "),tq=a("a"),HUo=o("TFT5Model"),UUo=o(" (T5 model)"),JUo=l(),Mv=a("li"),zfe=a("strong"),YUo=o("tapas"),KUo=o(" \u2014 "),aq=a("a"),ZUo=o("TFTapasModel"),eJo=o(" (TAPAS model)"),oJo=l(),Ev=a("li"),Wfe=a("strong"),rJo=o("transfo-xl"),tJo=o(" \u2014 "),nq=a("a"),aJo=o("TFTransfoXLModel"),nJo=o(" (Transformer-XL model)"),sJo=l(),yv=a("li"),Qfe=a("strong"),lJo=o("vit"),iJo=o(" \u2014 "),sq=a("a"),dJo=o("TFViTModel"),cJo=o(" (ViT model)"),fJo=l(),wv=a("li"),Hfe=a("strong"),mJo=o("wav2vec2"),gJo=o(" \u2014 "),lq=a("a"),hJo=o("TFWav2Vec2Model"),pJo=o(" (Wav2Vec2 model)"),_Jo=l(),Av=a("li"),Ufe=a("strong"),uJo=o("xlm"),bJo=o(" \u2014 "),iq=a("a"),vJo=o("TFXLMModel"),TJo=o(" (XLM model)"),FJo=l(),Lv=a("li"),Jfe=a("strong"),CJo=o("xlm-roberta"),MJo=o(" \u2014 "),dq=a("a"),EJo=o("TFXLMRobertaModel"),yJo=o(" (XLM-RoBERTa model)"),wJo=l(),Bv=a("li"),Yfe=a("strong"),AJo=o("xlnet"),LJo=o(" \u2014 "),cq=a("a"),BJo=o("TFXLNetModel"),xJo=o(" (XLNet model)"),kJo=l(),Kfe=a("p"),RJo=o("Examples:"),SJo=l(),f(a6.$$.fragment),NBe=l(),nc=a("h2"),xv=a("a"),Zfe=a("span"),f(n6.$$.fragment),PJo=l(),eme=a("span"),$Jo=o("TFAutoModelForPreTraining"),qBe=l(),_r=a("div"),f(s6.$$.fragment),IJo=l(),sc=a("p"),DJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),ome=a("code"),jJo=o("from_pretrained()"),NJo=o("class method or the "),rme=a("code"),qJo=o("from_config()"),GJo=o(`class
method.`),OJo=l(),l6=a("p"),XJo=o("This class cannot be instantiated directly using "),tme=a("code"),VJo=o("__init__()"),zJo=o(" (throws an error)."),WJo=l(),dt=a("div"),f(i6.$$.fragment),QJo=l(),ame=a("p"),HJo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),UJo=l(),lc=a("p"),JJo=o(`Note:
Loading a model from its configuration file does `),nme=a("strong"),YJo=o("not"),KJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sme=a("code"),ZJo=o("from_pretrained()"),eYo=o("to load the model weights."),oYo=l(),lme=a("p"),rYo=o("Examples:"),tYo=l(),f(d6.$$.fragment),aYo=l(),ho=a("div"),f(c6.$$.fragment),nYo=l(),ime=a("p"),sYo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),lYo=l(),fn=a("p"),iYo=o("The model class to instantiate is selected based on the "),dme=a("code"),dYo=o("model_type"),cYo=o(` property of the config object (either
passed as an argument or loaded from `),cme=a("code"),fYo=o("pretrained_model_name_or_path"),mYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fme=a("code"),gYo=o("pretrained_model_name_or_path"),hYo=o(":"),pYo=l(),H=a("ul"),kv=a("li"),mme=a("strong"),_Yo=o("albert"),uYo=o(" \u2014 "),fq=a("a"),bYo=o("TFAlbertForPreTraining"),vYo=o(" (ALBERT model)"),TYo=l(),Rv=a("li"),gme=a("strong"),FYo=o("bart"),CYo=o(" \u2014 "),mq=a("a"),MYo=o("TFBartForConditionalGeneration"),EYo=o(" (BART model)"),yYo=l(),Sv=a("li"),hme=a("strong"),wYo=o("bert"),AYo=o(" \u2014 "),gq=a("a"),LYo=o("TFBertForPreTraining"),BYo=o(" (BERT model)"),xYo=l(),Pv=a("li"),pme=a("strong"),kYo=o("camembert"),RYo=o(" \u2014 "),hq=a("a"),SYo=o("TFCamembertForMaskedLM"),PYo=o(" (CamemBERT model)"),$Yo=l(),$v=a("li"),_me=a("strong"),IYo=o("ctrl"),DYo=o(" \u2014 "),pq=a("a"),jYo=o("TFCTRLLMHeadModel"),NYo=o(" (CTRL model)"),qYo=l(),Iv=a("li"),ume=a("strong"),GYo=o("distilbert"),OYo=o(" \u2014 "),_q=a("a"),XYo=o("TFDistilBertForMaskedLM"),VYo=o(" (DistilBERT model)"),zYo=l(),Dv=a("li"),bme=a("strong"),WYo=o("electra"),QYo=o(" \u2014 "),uq=a("a"),HYo=o("TFElectraForPreTraining"),UYo=o(" (ELECTRA model)"),JYo=l(),jv=a("li"),vme=a("strong"),YYo=o("flaubert"),KYo=o(" \u2014 "),bq=a("a"),ZYo=o("TFFlaubertWithLMHeadModel"),eKo=o(" (FlauBERT model)"),oKo=l(),Nv=a("li"),Tme=a("strong"),rKo=o("funnel"),tKo=o(" \u2014 "),vq=a("a"),aKo=o("TFFunnelForPreTraining"),nKo=o(" (Funnel Transformer model)"),sKo=l(),qv=a("li"),Fme=a("strong"),lKo=o("gpt2"),iKo=o(" \u2014 "),Tq=a("a"),dKo=o("TFGPT2LMHeadModel"),cKo=o(" (OpenAI GPT-2 model)"),fKo=l(),Gv=a("li"),Cme=a("strong"),mKo=o("layoutlm"),gKo=o(" \u2014 "),Fq=a("a"),hKo=o("TFLayoutLMForMaskedLM"),pKo=o(" (LayoutLM model)"),_Ko=l(),Ov=a("li"),Mme=a("strong"),uKo=o("lxmert"),bKo=o(" \u2014 "),Cq=a("a"),vKo=o("TFLxmertForPreTraining"),TKo=o(" (LXMERT model)"),FKo=l(),Xv=a("li"),Eme=a("strong"),CKo=o("mobilebert"),MKo=o(" \u2014 "),Mq=a("a"),EKo=o("TFMobileBertForPreTraining"),yKo=o(" (MobileBERT model)"),wKo=l(),Vv=a("li"),yme=a("strong"),AKo=o("mpnet"),LKo=o(" \u2014 "),Eq=a("a"),BKo=o("TFMPNetForMaskedLM"),xKo=o(" (MPNet model)"),kKo=l(),zv=a("li"),wme=a("strong"),RKo=o("openai-gpt"),SKo=o(" \u2014 "),yq=a("a"),PKo=o("TFOpenAIGPTLMHeadModel"),$Ko=o(" (OpenAI GPT model)"),IKo=l(),Wv=a("li"),Ame=a("strong"),DKo=o("roberta"),jKo=o(" \u2014 "),wq=a("a"),NKo=o("TFRobertaForMaskedLM"),qKo=o(" (RoBERTa model)"),GKo=l(),Qv=a("li"),Lme=a("strong"),OKo=o("t5"),XKo=o(" \u2014 "),Aq=a("a"),VKo=o("TFT5ForConditionalGeneration"),zKo=o(" (T5 model)"),WKo=l(),Hv=a("li"),Bme=a("strong"),QKo=o("tapas"),HKo=o(" \u2014 "),Lq=a("a"),UKo=o("TFTapasForMaskedLM"),JKo=o(" (TAPAS model)"),YKo=l(),Uv=a("li"),xme=a("strong"),KKo=o("transfo-xl"),ZKo=o(" \u2014 "),Bq=a("a"),eZo=o("TFTransfoXLLMHeadModel"),oZo=o(" (Transformer-XL model)"),rZo=l(),Jv=a("li"),kme=a("strong"),tZo=o("xlm"),aZo=o(" \u2014 "),xq=a("a"),nZo=o("TFXLMWithLMHeadModel"),sZo=o(" (XLM model)"),lZo=l(),Yv=a("li"),Rme=a("strong"),iZo=o("xlm-roberta"),dZo=o(" \u2014 "),kq=a("a"),cZo=o("TFXLMRobertaForMaskedLM"),fZo=o(" (XLM-RoBERTa model)"),mZo=l(),Kv=a("li"),Sme=a("strong"),gZo=o("xlnet"),hZo=o(" \u2014 "),Rq=a("a"),pZo=o("TFXLNetLMHeadModel"),_Zo=o(" (XLNet model)"),uZo=l(),Pme=a("p"),bZo=o("Examples:"),vZo=l(),f(f6.$$.fragment),GBe=l(),ic=a("h2"),Zv=a("a"),$me=a("span"),f(m6.$$.fragment),TZo=l(),Ime=a("span"),FZo=o("TFAutoModelForCausalLM"),OBe=l(),ur=a("div"),f(g6.$$.fragment),CZo=l(),dc=a("p"),MZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Dme=a("code"),EZo=o("from_pretrained()"),yZo=o("class method or the "),jme=a("code"),wZo=o("from_config()"),AZo=o(`class
method.`),LZo=l(),h6=a("p"),BZo=o("This class cannot be instantiated directly using "),Nme=a("code"),xZo=o("__init__()"),kZo=o(" (throws an error)."),RZo=l(),ct=a("div"),f(p6.$$.fragment),SZo=l(),qme=a("p"),PZo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),$Zo=l(),cc=a("p"),IZo=o(`Note:
Loading a model from its configuration file does `),Gme=a("strong"),DZo=o("not"),jZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ome=a("code"),NZo=o("from_pretrained()"),qZo=o("to load the model weights."),GZo=l(),Xme=a("p"),OZo=o("Examples:"),XZo=l(),f(_6.$$.fragment),VZo=l(),po=a("div"),f(u6.$$.fragment),zZo=l(),Vme=a("p"),WZo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),QZo=l(),mn=a("p"),HZo=o("The model class to instantiate is selected based on the "),zme=a("code"),UZo=o("model_type"),JZo=o(` property of the config object (either
passed as an argument or loaded from `),Wme=a("code"),YZo=o("pretrained_model_name_or_path"),KZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qme=a("code"),ZZo=o("pretrained_model_name_or_path"),eer=o(":"),oer=l(),he=a("ul"),eT=a("li"),Hme=a("strong"),rer=o("bert"),ter=o(" \u2014 "),Sq=a("a"),aer=o("TFBertLMHeadModel"),ner=o(" (BERT model)"),ser=l(),oT=a("li"),Ume=a("strong"),ler=o("ctrl"),ier=o(" \u2014 "),Pq=a("a"),der=o("TFCTRLLMHeadModel"),cer=o(" (CTRL model)"),fer=l(),rT=a("li"),Jme=a("strong"),mer=o("gpt2"),ger=o(" \u2014 "),$q=a("a"),her=o("TFGPT2LMHeadModel"),per=o(" (OpenAI GPT-2 model)"),_er=l(),tT=a("li"),Yme=a("strong"),uer=o("openai-gpt"),ber=o(" \u2014 "),Iq=a("a"),ver=o("TFOpenAIGPTLMHeadModel"),Ter=o(" (OpenAI GPT model)"),Fer=l(),aT=a("li"),Kme=a("strong"),Cer=o("rembert"),Mer=o(" \u2014 "),Dq=a("a"),Eer=o("TFRemBertForCausalLM"),yer=o(" (RemBERT model)"),wer=l(),nT=a("li"),Zme=a("strong"),Aer=o("roberta"),Ler=o(" \u2014 "),jq=a("a"),Ber=o("TFRobertaForCausalLM"),xer=o(" (RoBERTa model)"),ker=l(),sT=a("li"),ege=a("strong"),Rer=o("roformer"),Ser=o(" \u2014 "),Nq=a("a"),Per=o("TFRoFormerForCausalLM"),$er=o(" (RoFormer model)"),Ier=l(),lT=a("li"),oge=a("strong"),Der=o("transfo-xl"),jer=o(" \u2014 "),qq=a("a"),Ner=o("TFTransfoXLLMHeadModel"),qer=o(" (Transformer-XL model)"),Ger=l(),iT=a("li"),rge=a("strong"),Oer=o("xlm"),Xer=o(" \u2014 "),Gq=a("a"),Ver=o("TFXLMWithLMHeadModel"),zer=o(" (XLM model)"),Wer=l(),dT=a("li"),tge=a("strong"),Qer=o("xlnet"),Her=o(" \u2014 "),Oq=a("a"),Uer=o("TFXLNetLMHeadModel"),Jer=o(" (XLNet model)"),Yer=l(),age=a("p"),Ker=o("Examples:"),Zer=l(),f(b6.$$.fragment),XBe=l(),fc=a("h2"),cT=a("a"),nge=a("span"),f(v6.$$.fragment),eor=l(),sge=a("span"),oor=o("TFAutoModelForImageClassification"),VBe=l(),br=a("div"),f(T6.$$.fragment),ror=l(),mc=a("p"),tor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),lge=a("code"),aor=o("from_pretrained()"),nor=o("class method or the "),ige=a("code"),sor=o("from_config()"),lor=o(`class
method.`),ior=l(),F6=a("p"),dor=o("This class cannot be instantiated directly using "),dge=a("code"),cor=o("__init__()"),mor=o(" (throws an error)."),gor=l(),ft=a("div"),f(C6.$$.fragment),hor=l(),cge=a("p"),por=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),_or=l(),gc=a("p"),uor=o(`Note:
Loading a model from its configuration file does `),fge=a("strong"),bor=o("not"),vor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mge=a("code"),Tor=o("from_pretrained()"),For=o("to load the model weights."),Cor=l(),gge=a("p"),Mor=o("Examples:"),Eor=l(),f(M6.$$.fragment),yor=l(),_o=a("div"),f(E6.$$.fragment),wor=l(),hge=a("p"),Aor=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Lor=l(),gn=a("p"),Bor=o("The model class to instantiate is selected based on the "),pge=a("code"),xor=o("model_type"),kor=o(` property of the config object (either
passed as an argument or loaded from `),_ge=a("code"),Ror=o("pretrained_model_name_or_path"),Sor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uge=a("code"),Por=o("pretrained_model_name_or_path"),$or=o(":"),Ior=l(),y6=a("ul"),fT=a("li"),bge=a("strong"),Dor=o("convnext"),jor=o(" \u2014 "),Xq=a("a"),Nor=o("TFConvNextForImageClassification"),qor=o(" (ConvNext model)"),Gor=l(),mT=a("li"),vge=a("strong"),Oor=o("vit"),Xor=o(" \u2014 "),Vq=a("a"),Vor=o("TFViTForImageClassification"),zor=o(" (ViT model)"),Wor=l(),Tge=a("p"),Qor=o("Examples:"),Hor=l(),f(w6.$$.fragment),zBe=l(),hc=a("h2"),gT=a("a"),Fge=a("span"),f(A6.$$.fragment),Uor=l(),Cge=a("span"),Jor=o("TFAutoModelForMaskedLM"),WBe=l(),vr=a("div"),f(L6.$$.fragment),Yor=l(),pc=a("p"),Kor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Mge=a("code"),Zor=o("from_pretrained()"),err=o("class method or the "),Ege=a("code"),orr=o("from_config()"),rrr=o(`class
method.`),trr=l(),B6=a("p"),arr=o("This class cannot be instantiated directly using "),yge=a("code"),nrr=o("__init__()"),srr=o(" (throws an error)."),lrr=l(),mt=a("div"),f(x6.$$.fragment),irr=l(),wge=a("p"),drr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),crr=l(),_c=a("p"),frr=o(`Note:
Loading a model from its configuration file does `),Age=a("strong"),mrr=o("not"),grr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Lge=a("code"),hrr=o("from_pretrained()"),prr=o("to load the model weights."),_rr=l(),Bge=a("p"),urr=o("Examples:"),brr=l(),f(k6.$$.fragment),vrr=l(),uo=a("div"),f(R6.$$.fragment),Trr=l(),xge=a("p"),Frr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Crr=l(),hn=a("p"),Mrr=o("The model class to instantiate is selected based on the "),kge=a("code"),Err=o("model_type"),yrr=o(` property of the config object (either
passed as an argument or loaded from `),Rge=a("code"),wrr=o("pretrained_model_name_or_path"),Arr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sge=a("code"),Lrr=o("pretrained_model_name_or_path"),Brr=o(":"),xrr=l(),Y=a("ul"),hT=a("li"),Pge=a("strong"),krr=o("albert"),Rrr=o(" \u2014 "),zq=a("a"),Srr=o("TFAlbertForMaskedLM"),Prr=o(" (ALBERT model)"),$rr=l(),pT=a("li"),$ge=a("strong"),Irr=o("bert"),Drr=o(" \u2014 "),Wq=a("a"),jrr=o("TFBertForMaskedLM"),Nrr=o(" (BERT model)"),qrr=l(),_T=a("li"),Ige=a("strong"),Grr=o("camembert"),Orr=o(" \u2014 "),Qq=a("a"),Xrr=o("TFCamembertForMaskedLM"),Vrr=o(" (CamemBERT model)"),zrr=l(),uT=a("li"),Dge=a("strong"),Wrr=o("convbert"),Qrr=o(" \u2014 "),Hq=a("a"),Hrr=o("TFConvBertForMaskedLM"),Urr=o(" (ConvBERT model)"),Jrr=l(),bT=a("li"),jge=a("strong"),Yrr=o("deberta"),Krr=o(" \u2014 "),Uq=a("a"),Zrr=o("TFDebertaForMaskedLM"),etr=o(" (DeBERTa model)"),otr=l(),vT=a("li"),Nge=a("strong"),rtr=o("deberta-v2"),ttr=o(" \u2014 "),Jq=a("a"),atr=o("TFDebertaV2ForMaskedLM"),ntr=o(" (DeBERTa-v2 model)"),str=l(),TT=a("li"),qge=a("strong"),ltr=o("distilbert"),itr=o(" \u2014 "),Yq=a("a"),dtr=o("TFDistilBertForMaskedLM"),ctr=o(" (DistilBERT model)"),ftr=l(),FT=a("li"),Gge=a("strong"),mtr=o("electra"),gtr=o(" \u2014 "),Kq=a("a"),htr=o("TFElectraForMaskedLM"),ptr=o(" (ELECTRA model)"),_tr=l(),CT=a("li"),Oge=a("strong"),utr=o("flaubert"),btr=o(" \u2014 "),Zq=a("a"),vtr=o("TFFlaubertWithLMHeadModel"),Ttr=o(" (FlauBERT model)"),Ftr=l(),MT=a("li"),Xge=a("strong"),Ctr=o("funnel"),Mtr=o(" \u2014 "),eG=a("a"),Etr=o("TFFunnelForMaskedLM"),ytr=o(" (Funnel Transformer model)"),wtr=l(),ET=a("li"),Vge=a("strong"),Atr=o("layoutlm"),Ltr=o(" \u2014 "),oG=a("a"),Btr=o("TFLayoutLMForMaskedLM"),xtr=o(" (LayoutLM model)"),ktr=l(),yT=a("li"),zge=a("strong"),Rtr=o("longformer"),Str=o(" \u2014 "),rG=a("a"),Ptr=o("TFLongformerForMaskedLM"),$tr=o(" (Longformer model)"),Itr=l(),wT=a("li"),Wge=a("strong"),Dtr=o("mobilebert"),jtr=o(" \u2014 "),tG=a("a"),Ntr=o("TFMobileBertForMaskedLM"),qtr=o(" (MobileBERT model)"),Gtr=l(),AT=a("li"),Qge=a("strong"),Otr=o("mpnet"),Xtr=o(" \u2014 "),aG=a("a"),Vtr=o("TFMPNetForMaskedLM"),ztr=o(" (MPNet model)"),Wtr=l(),LT=a("li"),Hge=a("strong"),Qtr=o("rembert"),Htr=o(" \u2014 "),nG=a("a"),Utr=o("TFRemBertForMaskedLM"),Jtr=o(" (RemBERT model)"),Ytr=l(),BT=a("li"),Uge=a("strong"),Ktr=o("roberta"),Ztr=o(" \u2014 "),sG=a("a"),ear=o("TFRobertaForMaskedLM"),oar=o(" (RoBERTa model)"),rar=l(),xT=a("li"),Jge=a("strong"),tar=o("roformer"),aar=o(" \u2014 "),lG=a("a"),nar=o("TFRoFormerForMaskedLM"),sar=o(" (RoFormer model)"),lar=l(),kT=a("li"),Yge=a("strong"),iar=o("tapas"),dar=o(" \u2014 "),iG=a("a"),car=o("TFTapasForMaskedLM"),far=o(" (TAPAS model)"),mar=l(),RT=a("li"),Kge=a("strong"),gar=o("xlm"),har=o(" \u2014 "),dG=a("a"),par=o("TFXLMWithLMHeadModel"),_ar=o(" (XLM model)"),uar=l(),ST=a("li"),Zge=a("strong"),bar=o("xlm-roberta"),Tar=o(" \u2014 "),cG=a("a"),Far=o("TFXLMRobertaForMaskedLM"),Car=o(" (XLM-RoBERTa model)"),Mar=l(),ehe=a("p"),Ear=o("Examples:"),yar=l(),f(S6.$$.fragment),QBe=l(),uc=a("h2"),PT=a("a"),ohe=a("span"),f(P6.$$.fragment),war=l(),rhe=a("span"),Aar=o("TFAutoModelForSeq2SeqLM"),HBe=l(),Tr=a("div"),f($6.$$.fragment),Lar=l(),bc=a("p"),Bar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),the=a("code"),xar=o("from_pretrained()"),kar=o("class method or the "),ahe=a("code"),Rar=o("from_config()"),Sar=o(`class
method.`),Par=l(),I6=a("p"),$ar=o("This class cannot be instantiated directly using "),nhe=a("code"),Iar=o("__init__()"),Dar=o(" (throws an error)."),jar=l(),gt=a("div"),f(D6.$$.fragment),Nar=l(),she=a("p"),qar=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Gar=l(),vc=a("p"),Oar=o(`Note:
Loading a model from its configuration file does `),lhe=a("strong"),Xar=o("not"),Var=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ihe=a("code"),zar=o("from_pretrained()"),War=o("to load the model weights."),Qar=l(),dhe=a("p"),Har=o("Examples:"),Uar=l(),f(j6.$$.fragment),Jar=l(),bo=a("div"),f(N6.$$.fragment),Yar=l(),che=a("p"),Kar=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Zar=l(),pn=a("p"),enr=o("The model class to instantiate is selected based on the "),fhe=a("code"),onr=o("model_type"),rnr=o(` property of the config object (either
passed as an argument or loaded from `),mhe=a("code"),tnr=o("pretrained_model_name_or_path"),anr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ghe=a("code"),nnr=o("pretrained_model_name_or_path"),snr=o(":"),lnr=l(),pe=a("ul"),$T=a("li"),hhe=a("strong"),inr=o("bart"),dnr=o(" \u2014 "),fG=a("a"),cnr=o("TFBartForConditionalGeneration"),fnr=o(" (BART model)"),mnr=l(),IT=a("li"),phe=a("strong"),gnr=o("blenderbot"),hnr=o(" \u2014 "),mG=a("a"),pnr=o("TFBlenderbotForConditionalGeneration"),_nr=o(" (Blenderbot model)"),unr=l(),DT=a("li"),_he=a("strong"),bnr=o("blenderbot-small"),vnr=o(" \u2014 "),gG=a("a"),Tnr=o("TFBlenderbotSmallForConditionalGeneration"),Fnr=o(" (BlenderbotSmall model)"),Cnr=l(),jT=a("li"),uhe=a("strong"),Mnr=o("encoder-decoder"),Enr=o(" \u2014 "),hG=a("a"),ynr=o("TFEncoderDecoderModel"),wnr=o(" (Encoder decoder model)"),Anr=l(),NT=a("li"),bhe=a("strong"),Lnr=o("led"),Bnr=o(" \u2014 "),pG=a("a"),xnr=o("TFLEDForConditionalGeneration"),knr=o(" (LED model)"),Rnr=l(),qT=a("li"),vhe=a("strong"),Snr=o("marian"),Pnr=o(" \u2014 "),_G=a("a"),$nr=o("TFMarianMTModel"),Inr=o(" (Marian model)"),Dnr=l(),GT=a("li"),The=a("strong"),jnr=o("mbart"),Nnr=o(" \u2014 "),uG=a("a"),qnr=o("TFMBartForConditionalGeneration"),Gnr=o(" (mBART model)"),Onr=l(),OT=a("li"),Fhe=a("strong"),Xnr=o("mt5"),Vnr=o(" \u2014 "),bG=a("a"),znr=o("TFMT5ForConditionalGeneration"),Wnr=o(" (mT5 model)"),Qnr=l(),XT=a("li"),Che=a("strong"),Hnr=o("pegasus"),Unr=o(" \u2014 "),vG=a("a"),Jnr=o("TFPegasusForConditionalGeneration"),Ynr=o(" (Pegasus model)"),Knr=l(),VT=a("li"),Mhe=a("strong"),Znr=o("t5"),esr=o(" \u2014 "),TG=a("a"),osr=o("TFT5ForConditionalGeneration"),rsr=o(" (T5 model)"),tsr=l(),Ehe=a("p"),asr=o("Examples:"),nsr=l(),f(q6.$$.fragment),UBe=l(),Tc=a("h2"),zT=a("a"),yhe=a("span"),f(G6.$$.fragment),ssr=l(),whe=a("span"),lsr=o("TFAutoModelForSequenceClassification"),JBe=l(),Fr=a("div"),f(O6.$$.fragment),isr=l(),Fc=a("p"),dsr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Ahe=a("code"),csr=o("from_pretrained()"),fsr=o("class method or the "),Lhe=a("code"),msr=o("from_config()"),gsr=o(`class
method.`),hsr=l(),X6=a("p"),psr=o("This class cannot be instantiated directly using "),Bhe=a("code"),_sr=o("__init__()"),usr=o(" (throws an error)."),bsr=l(),ht=a("div"),f(V6.$$.fragment),vsr=l(),xhe=a("p"),Tsr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Fsr=l(),Cc=a("p"),Csr=o(`Note:
Loading a model from its configuration file does `),khe=a("strong"),Msr=o("not"),Esr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Rhe=a("code"),ysr=o("from_pretrained()"),wsr=o("to load the model weights."),Asr=l(),She=a("p"),Lsr=o("Examples:"),Bsr=l(),f(z6.$$.fragment),xsr=l(),vo=a("div"),f(W6.$$.fragment),ksr=l(),Phe=a("p"),Rsr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Ssr=l(),_n=a("p"),Psr=o("The model class to instantiate is selected based on the "),$he=a("code"),$sr=o("model_type"),Isr=o(` property of the config object (either
passed as an argument or loaded from `),Ihe=a("code"),Dsr=o("pretrained_model_name_or_path"),jsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dhe=a("code"),Nsr=o("pretrained_model_name_or_path"),qsr=o(":"),Gsr=l(),X=a("ul"),WT=a("li"),jhe=a("strong"),Osr=o("albert"),Xsr=o(" \u2014 "),FG=a("a"),Vsr=o("TFAlbertForSequenceClassification"),zsr=o(" (ALBERT model)"),Wsr=l(),QT=a("li"),Nhe=a("strong"),Qsr=o("bert"),Hsr=o(" \u2014 "),CG=a("a"),Usr=o("TFBertForSequenceClassification"),Jsr=o(" (BERT model)"),Ysr=l(),HT=a("li"),qhe=a("strong"),Ksr=o("camembert"),Zsr=o(" \u2014 "),MG=a("a"),elr=o("TFCamembertForSequenceClassification"),olr=o(" (CamemBERT model)"),rlr=l(),UT=a("li"),Ghe=a("strong"),tlr=o("convbert"),alr=o(" \u2014 "),EG=a("a"),nlr=o("TFConvBertForSequenceClassification"),slr=o(" (ConvBERT model)"),llr=l(),JT=a("li"),Ohe=a("strong"),ilr=o("ctrl"),dlr=o(" \u2014 "),yG=a("a"),clr=o("TFCTRLForSequenceClassification"),flr=o(" (CTRL model)"),mlr=l(),YT=a("li"),Xhe=a("strong"),glr=o("deberta"),hlr=o(" \u2014 "),wG=a("a"),plr=o("TFDebertaForSequenceClassification"),_lr=o(" (DeBERTa model)"),ulr=l(),KT=a("li"),Vhe=a("strong"),blr=o("deberta-v2"),vlr=o(" \u2014 "),AG=a("a"),Tlr=o("TFDebertaV2ForSequenceClassification"),Flr=o(" (DeBERTa-v2 model)"),Clr=l(),ZT=a("li"),zhe=a("strong"),Mlr=o("distilbert"),Elr=o(" \u2014 "),LG=a("a"),ylr=o("TFDistilBertForSequenceClassification"),wlr=o(" (DistilBERT model)"),Alr=l(),eF=a("li"),Whe=a("strong"),Llr=o("electra"),Blr=o(" \u2014 "),BG=a("a"),xlr=o("TFElectraForSequenceClassification"),klr=o(" (ELECTRA model)"),Rlr=l(),oF=a("li"),Qhe=a("strong"),Slr=o("flaubert"),Plr=o(" \u2014 "),xG=a("a"),$lr=o("TFFlaubertForSequenceClassification"),Ilr=o(" (FlauBERT model)"),Dlr=l(),rF=a("li"),Hhe=a("strong"),jlr=o("funnel"),Nlr=o(" \u2014 "),kG=a("a"),qlr=o("TFFunnelForSequenceClassification"),Glr=o(" (Funnel Transformer model)"),Olr=l(),tF=a("li"),Uhe=a("strong"),Xlr=o("gpt2"),Vlr=o(" \u2014 "),RG=a("a"),zlr=o("TFGPT2ForSequenceClassification"),Wlr=o(" (OpenAI GPT-2 model)"),Qlr=l(),aF=a("li"),Jhe=a("strong"),Hlr=o("layoutlm"),Ulr=o(" \u2014 "),SG=a("a"),Jlr=o("TFLayoutLMForSequenceClassification"),Ylr=o(" (LayoutLM model)"),Klr=l(),nF=a("li"),Yhe=a("strong"),Zlr=o("longformer"),eir=o(" \u2014 "),PG=a("a"),oir=o("TFLongformerForSequenceClassification"),rir=o(" (Longformer model)"),tir=l(),sF=a("li"),Khe=a("strong"),air=o("mobilebert"),nir=o(" \u2014 "),$G=a("a"),sir=o("TFMobileBertForSequenceClassification"),lir=o(" (MobileBERT model)"),iir=l(),lF=a("li"),Zhe=a("strong"),dir=o("mpnet"),cir=o(" \u2014 "),IG=a("a"),fir=o("TFMPNetForSequenceClassification"),mir=o(" (MPNet model)"),gir=l(),iF=a("li"),epe=a("strong"),hir=o("openai-gpt"),pir=o(" \u2014 "),DG=a("a"),_ir=o("TFOpenAIGPTForSequenceClassification"),uir=o(" (OpenAI GPT model)"),bir=l(),dF=a("li"),ope=a("strong"),vir=o("rembert"),Tir=o(" \u2014 "),jG=a("a"),Fir=o("TFRemBertForSequenceClassification"),Cir=o(" (RemBERT model)"),Mir=l(),cF=a("li"),rpe=a("strong"),Eir=o("roberta"),yir=o(" \u2014 "),NG=a("a"),wir=o("TFRobertaForSequenceClassification"),Air=o(" (RoBERTa model)"),Lir=l(),fF=a("li"),tpe=a("strong"),Bir=o("roformer"),xir=o(" \u2014 "),qG=a("a"),kir=o("TFRoFormerForSequenceClassification"),Rir=o(" (RoFormer model)"),Sir=l(),mF=a("li"),ape=a("strong"),Pir=o("tapas"),$ir=o(" \u2014 "),GG=a("a"),Iir=o("TFTapasForSequenceClassification"),Dir=o(" (TAPAS model)"),jir=l(),gF=a("li"),npe=a("strong"),Nir=o("transfo-xl"),qir=o(" \u2014 "),OG=a("a"),Gir=o("TFTransfoXLForSequenceClassification"),Oir=o(" (Transformer-XL model)"),Xir=l(),hF=a("li"),spe=a("strong"),Vir=o("xlm"),zir=o(" \u2014 "),XG=a("a"),Wir=o("TFXLMForSequenceClassification"),Qir=o(" (XLM model)"),Hir=l(),pF=a("li"),lpe=a("strong"),Uir=o("xlm-roberta"),Jir=o(" \u2014 "),VG=a("a"),Yir=o("TFXLMRobertaForSequenceClassification"),Kir=o(" (XLM-RoBERTa model)"),Zir=l(),_F=a("li"),ipe=a("strong"),edr=o("xlnet"),odr=o(" \u2014 "),zG=a("a"),rdr=o("TFXLNetForSequenceClassification"),tdr=o(" (XLNet model)"),adr=l(),dpe=a("p"),ndr=o("Examples:"),sdr=l(),f(Q6.$$.fragment),YBe=l(),Mc=a("h2"),uF=a("a"),cpe=a("span"),f(H6.$$.fragment),ldr=l(),fpe=a("span"),idr=o("TFAutoModelForMultipleChoice"),KBe=l(),Cr=a("div"),f(U6.$$.fragment),ddr=l(),Ec=a("p"),cdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),mpe=a("code"),fdr=o("from_pretrained()"),mdr=o("class method or the "),gpe=a("code"),gdr=o("from_config()"),hdr=o(`class
method.`),pdr=l(),J6=a("p"),_dr=o("This class cannot be instantiated directly using "),hpe=a("code"),udr=o("__init__()"),bdr=o(" (throws an error)."),vdr=l(),pt=a("div"),f(Y6.$$.fragment),Tdr=l(),ppe=a("p"),Fdr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Cdr=l(),yc=a("p"),Mdr=o(`Note:
Loading a model from its configuration file does `),_pe=a("strong"),Edr=o("not"),ydr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),upe=a("code"),wdr=o("from_pretrained()"),Adr=o("to load the model weights."),Ldr=l(),bpe=a("p"),Bdr=o("Examples:"),xdr=l(),f(K6.$$.fragment),kdr=l(),To=a("div"),f(Z6.$$.fragment),Rdr=l(),vpe=a("p"),Sdr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Pdr=l(),un=a("p"),$dr=o("The model class to instantiate is selected based on the "),Tpe=a("code"),Idr=o("model_type"),Ddr=o(` property of the config object (either
passed as an argument or loaded from `),Fpe=a("code"),jdr=o("pretrained_model_name_or_path"),Ndr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cpe=a("code"),qdr=o("pretrained_model_name_or_path"),Gdr=o(":"),Odr=l(),te=a("ul"),bF=a("li"),Mpe=a("strong"),Xdr=o("albert"),Vdr=o(" \u2014 "),WG=a("a"),zdr=o("TFAlbertForMultipleChoice"),Wdr=o(" (ALBERT model)"),Qdr=l(),vF=a("li"),Epe=a("strong"),Hdr=o("bert"),Udr=o(" \u2014 "),QG=a("a"),Jdr=o("TFBertForMultipleChoice"),Ydr=o(" (BERT model)"),Kdr=l(),TF=a("li"),ype=a("strong"),Zdr=o("camembert"),ecr=o(" \u2014 "),HG=a("a"),ocr=o("TFCamembertForMultipleChoice"),rcr=o(" (CamemBERT model)"),tcr=l(),FF=a("li"),wpe=a("strong"),acr=o("convbert"),ncr=o(" \u2014 "),UG=a("a"),scr=o("TFConvBertForMultipleChoice"),lcr=o(" (ConvBERT model)"),icr=l(),CF=a("li"),Ape=a("strong"),dcr=o("distilbert"),ccr=o(" \u2014 "),JG=a("a"),fcr=o("TFDistilBertForMultipleChoice"),mcr=o(" (DistilBERT model)"),gcr=l(),MF=a("li"),Lpe=a("strong"),hcr=o("electra"),pcr=o(" \u2014 "),YG=a("a"),_cr=o("TFElectraForMultipleChoice"),ucr=o(" (ELECTRA model)"),bcr=l(),EF=a("li"),Bpe=a("strong"),vcr=o("flaubert"),Tcr=o(" \u2014 "),KG=a("a"),Fcr=o("TFFlaubertForMultipleChoice"),Ccr=o(" (FlauBERT model)"),Mcr=l(),yF=a("li"),xpe=a("strong"),Ecr=o("funnel"),ycr=o(" \u2014 "),ZG=a("a"),wcr=o("TFFunnelForMultipleChoice"),Acr=o(" (Funnel Transformer model)"),Lcr=l(),wF=a("li"),kpe=a("strong"),Bcr=o("longformer"),xcr=o(" \u2014 "),eO=a("a"),kcr=o("TFLongformerForMultipleChoice"),Rcr=o(" (Longformer model)"),Scr=l(),AF=a("li"),Rpe=a("strong"),Pcr=o("mobilebert"),$cr=o(" \u2014 "),oO=a("a"),Icr=o("TFMobileBertForMultipleChoice"),Dcr=o(" (MobileBERT model)"),jcr=l(),LF=a("li"),Spe=a("strong"),Ncr=o("mpnet"),qcr=o(" \u2014 "),rO=a("a"),Gcr=o("TFMPNetForMultipleChoice"),Ocr=o(" (MPNet model)"),Xcr=l(),BF=a("li"),Ppe=a("strong"),Vcr=o("rembert"),zcr=o(" \u2014 "),tO=a("a"),Wcr=o("TFRemBertForMultipleChoice"),Qcr=o(" (RemBERT model)"),Hcr=l(),xF=a("li"),$pe=a("strong"),Ucr=o("roberta"),Jcr=o(" \u2014 "),aO=a("a"),Ycr=o("TFRobertaForMultipleChoice"),Kcr=o(" (RoBERTa model)"),Zcr=l(),kF=a("li"),Ipe=a("strong"),efr=o("roformer"),ofr=o(" \u2014 "),nO=a("a"),rfr=o("TFRoFormerForMultipleChoice"),tfr=o(" (RoFormer model)"),afr=l(),RF=a("li"),Dpe=a("strong"),nfr=o("xlm"),sfr=o(" \u2014 "),sO=a("a"),lfr=o("TFXLMForMultipleChoice"),ifr=o(" (XLM model)"),dfr=l(),SF=a("li"),jpe=a("strong"),cfr=o("xlm-roberta"),ffr=o(" \u2014 "),lO=a("a"),mfr=o("TFXLMRobertaForMultipleChoice"),gfr=o(" (XLM-RoBERTa model)"),hfr=l(),PF=a("li"),Npe=a("strong"),pfr=o("xlnet"),_fr=o(" \u2014 "),iO=a("a"),ufr=o("TFXLNetForMultipleChoice"),bfr=o(" (XLNet model)"),vfr=l(),qpe=a("p"),Tfr=o("Examples:"),Ffr=l(),f(eA.$$.fragment),ZBe=l(),wc=a("h2"),$F=a("a"),Gpe=a("span"),f(oA.$$.fragment),Cfr=l(),Ope=a("span"),Mfr=o("TFAutoModelForTableQuestionAnswering"),exe=l(),Mr=a("div"),f(rA.$$.fragment),Efr=l(),Ac=a("p"),yfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Xpe=a("code"),wfr=o("from_pretrained()"),Afr=o("class method or the "),Vpe=a("code"),Lfr=o("from_config()"),Bfr=o(`class
method.`),xfr=l(),tA=a("p"),kfr=o("This class cannot be instantiated directly using "),zpe=a("code"),Rfr=o("__init__()"),Sfr=o(" (throws an error)."),Pfr=l(),_t=a("div"),f(aA.$$.fragment),$fr=l(),Wpe=a("p"),Ifr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Dfr=l(),Lc=a("p"),jfr=o(`Note:
Loading a model from its configuration file does `),Qpe=a("strong"),Nfr=o("not"),qfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Hpe=a("code"),Gfr=o("from_pretrained()"),Ofr=o("to load the model weights."),Xfr=l(),Upe=a("p"),Vfr=o("Examples:"),zfr=l(),f(nA.$$.fragment),Wfr=l(),Fo=a("div"),f(sA.$$.fragment),Qfr=l(),Jpe=a("p"),Hfr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Ufr=l(),bn=a("p"),Jfr=o("The model class to instantiate is selected based on the "),Ype=a("code"),Yfr=o("model_type"),Kfr=o(` property of the config object (either
passed as an argument or loaded from `),Kpe=a("code"),Zfr=o("pretrained_model_name_or_path"),emr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zpe=a("code"),omr=o("pretrained_model_name_or_path"),rmr=o(":"),tmr=l(),e_e=a("ul"),IF=a("li"),o_e=a("strong"),amr=o("tapas"),nmr=o(" \u2014 "),dO=a("a"),smr=o("TFTapasForQuestionAnswering"),lmr=o(" (TAPAS model)"),imr=l(),r_e=a("p"),dmr=o("Examples:"),cmr=l(),f(lA.$$.fragment),oxe=l(),Bc=a("h2"),DF=a("a"),t_e=a("span"),f(iA.$$.fragment),fmr=l(),a_e=a("span"),mmr=o("TFAutoModelForTokenClassification"),rxe=l(),Er=a("div"),f(dA.$$.fragment),gmr=l(),xc=a("p"),hmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),n_e=a("code"),pmr=o("from_pretrained()"),_mr=o("class method or the "),s_e=a("code"),umr=o("from_config()"),bmr=o(`class
method.`),vmr=l(),cA=a("p"),Tmr=o("This class cannot be instantiated directly using "),l_e=a("code"),Fmr=o("__init__()"),Cmr=o(" (throws an error)."),Mmr=l(),ut=a("div"),f(fA.$$.fragment),Emr=l(),i_e=a("p"),ymr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),wmr=l(),kc=a("p"),Amr=o(`Note:
Loading a model from its configuration file does `),d_e=a("strong"),Lmr=o("not"),Bmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),c_e=a("code"),xmr=o("from_pretrained()"),kmr=o("to load the model weights."),Rmr=l(),f_e=a("p"),Smr=o("Examples:"),Pmr=l(),f(mA.$$.fragment),$mr=l(),Co=a("div"),f(gA.$$.fragment),Imr=l(),m_e=a("p"),Dmr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),jmr=l(),vn=a("p"),Nmr=o("The model class to instantiate is selected based on the "),g_e=a("code"),qmr=o("model_type"),Gmr=o(` property of the config object (either
passed as an argument or loaded from `),h_e=a("code"),Omr=o("pretrained_model_name_or_path"),Xmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p_e=a("code"),Vmr=o("pretrained_model_name_or_path"),zmr=o(":"),Wmr=l(),K=a("ul"),jF=a("li"),__e=a("strong"),Qmr=o("albert"),Hmr=o(" \u2014 "),cO=a("a"),Umr=o("TFAlbertForTokenClassification"),Jmr=o(" (ALBERT model)"),Ymr=l(),NF=a("li"),u_e=a("strong"),Kmr=o("bert"),Zmr=o(" \u2014 "),fO=a("a"),egr=o("TFBertForTokenClassification"),ogr=o(" (BERT model)"),rgr=l(),qF=a("li"),b_e=a("strong"),tgr=o("camembert"),agr=o(" \u2014 "),mO=a("a"),ngr=o("TFCamembertForTokenClassification"),sgr=o(" (CamemBERT model)"),lgr=l(),GF=a("li"),v_e=a("strong"),igr=o("convbert"),dgr=o(" \u2014 "),gO=a("a"),cgr=o("TFConvBertForTokenClassification"),fgr=o(" (ConvBERT model)"),mgr=l(),OF=a("li"),T_e=a("strong"),ggr=o("deberta"),hgr=o(" \u2014 "),hO=a("a"),pgr=o("TFDebertaForTokenClassification"),_gr=o(" (DeBERTa model)"),ugr=l(),XF=a("li"),F_e=a("strong"),bgr=o("deberta-v2"),vgr=o(" \u2014 "),pO=a("a"),Tgr=o("TFDebertaV2ForTokenClassification"),Fgr=o(" (DeBERTa-v2 model)"),Cgr=l(),VF=a("li"),C_e=a("strong"),Mgr=o("distilbert"),Egr=o(" \u2014 "),_O=a("a"),ygr=o("TFDistilBertForTokenClassification"),wgr=o(" (DistilBERT model)"),Agr=l(),zF=a("li"),M_e=a("strong"),Lgr=o("electra"),Bgr=o(" \u2014 "),uO=a("a"),xgr=o("TFElectraForTokenClassification"),kgr=o(" (ELECTRA model)"),Rgr=l(),WF=a("li"),E_e=a("strong"),Sgr=o("flaubert"),Pgr=o(" \u2014 "),bO=a("a"),$gr=o("TFFlaubertForTokenClassification"),Igr=o(" (FlauBERT model)"),Dgr=l(),QF=a("li"),y_e=a("strong"),jgr=o("funnel"),Ngr=o(" \u2014 "),vO=a("a"),qgr=o("TFFunnelForTokenClassification"),Ggr=o(" (Funnel Transformer model)"),Ogr=l(),HF=a("li"),w_e=a("strong"),Xgr=o("layoutlm"),Vgr=o(" \u2014 "),TO=a("a"),zgr=o("TFLayoutLMForTokenClassification"),Wgr=o(" (LayoutLM model)"),Qgr=l(),UF=a("li"),A_e=a("strong"),Hgr=o("longformer"),Ugr=o(" \u2014 "),FO=a("a"),Jgr=o("TFLongformerForTokenClassification"),Ygr=o(" (Longformer model)"),Kgr=l(),JF=a("li"),L_e=a("strong"),Zgr=o("mobilebert"),ehr=o(" \u2014 "),CO=a("a"),ohr=o("TFMobileBertForTokenClassification"),rhr=o(" (MobileBERT model)"),thr=l(),YF=a("li"),B_e=a("strong"),ahr=o("mpnet"),nhr=o(" \u2014 "),MO=a("a"),shr=o("TFMPNetForTokenClassification"),lhr=o(" (MPNet model)"),ihr=l(),KF=a("li"),x_e=a("strong"),dhr=o("rembert"),chr=o(" \u2014 "),EO=a("a"),fhr=o("TFRemBertForTokenClassification"),mhr=o(" (RemBERT model)"),ghr=l(),ZF=a("li"),k_e=a("strong"),hhr=o("roberta"),phr=o(" \u2014 "),yO=a("a"),_hr=o("TFRobertaForTokenClassification"),uhr=o(" (RoBERTa model)"),bhr=l(),e9=a("li"),R_e=a("strong"),vhr=o("roformer"),Thr=o(" \u2014 "),wO=a("a"),Fhr=o("TFRoFormerForTokenClassification"),Chr=o(" (RoFormer model)"),Mhr=l(),o9=a("li"),S_e=a("strong"),Ehr=o("xlm"),yhr=o(" \u2014 "),AO=a("a"),whr=o("TFXLMForTokenClassification"),Ahr=o(" (XLM model)"),Lhr=l(),r9=a("li"),P_e=a("strong"),Bhr=o("xlm-roberta"),xhr=o(" \u2014 "),LO=a("a"),khr=o("TFXLMRobertaForTokenClassification"),Rhr=o(" (XLM-RoBERTa model)"),Shr=l(),t9=a("li"),$_e=a("strong"),Phr=o("xlnet"),$hr=o(" \u2014 "),BO=a("a"),Ihr=o("TFXLNetForTokenClassification"),Dhr=o(" (XLNet model)"),jhr=l(),I_e=a("p"),Nhr=o("Examples:"),qhr=l(),f(hA.$$.fragment),txe=l(),Rc=a("h2"),a9=a("a"),D_e=a("span"),f(pA.$$.fragment),Ghr=l(),j_e=a("span"),Ohr=o("TFAutoModelForQuestionAnswering"),axe=l(),yr=a("div"),f(_A.$$.fragment),Xhr=l(),Sc=a("p"),Vhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),N_e=a("code"),zhr=o("from_pretrained()"),Whr=o("class method or the "),q_e=a("code"),Qhr=o("from_config()"),Hhr=o(`class
method.`),Uhr=l(),uA=a("p"),Jhr=o("This class cannot be instantiated directly using "),G_e=a("code"),Yhr=o("__init__()"),Khr=o(" (throws an error)."),Zhr=l(),bt=a("div"),f(bA.$$.fragment),epr=l(),O_e=a("p"),opr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),rpr=l(),Pc=a("p"),tpr=o(`Note:
Loading a model from its configuration file does `),X_e=a("strong"),apr=o("not"),npr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),V_e=a("code"),spr=o("from_pretrained()"),lpr=o("to load the model weights."),ipr=l(),z_e=a("p"),dpr=o("Examples:"),cpr=l(),f(vA.$$.fragment),fpr=l(),Mo=a("div"),f(TA.$$.fragment),mpr=l(),W_e=a("p"),gpr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),hpr=l(),Tn=a("p"),ppr=o("The model class to instantiate is selected based on the "),Q_e=a("code"),_pr=o("model_type"),upr=o(` property of the config object (either
passed as an argument or loaded from `),H_e=a("code"),bpr=o("pretrained_model_name_or_path"),vpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U_e=a("code"),Tpr=o("pretrained_model_name_or_path"),Fpr=o(":"),Cpr=l(),Z=a("ul"),n9=a("li"),J_e=a("strong"),Mpr=o("albert"),Epr=o(" \u2014 "),xO=a("a"),ypr=o("TFAlbertForQuestionAnswering"),wpr=o(" (ALBERT model)"),Apr=l(),s9=a("li"),Y_e=a("strong"),Lpr=o("bert"),Bpr=o(" \u2014 "),kO=a("a"),xpr=o("TFBertForQuestionAnswering"),kpr=o(" (BERT model)"),Rpr=l(),l9=a("li"),K_e=a("strong"),Spr=o("camembert"),Ppr=o(" \u2014 "),RO=a("a"),$pr=o("TFCamembertForQuestionAnswering"),Ipr=o(" (CamemBERT model)"),Dpr=l(),i9=a("li"),Z_e=a("strong"),jpr=o("convbert"),Npr=o(" \u2014 "),SO=a("a"),qpr=o("TFConvBertForQuestionAnswering"),Gpr=o(" (ConvBERT model)"),Opr=l(),d9=a("li"),eue=a("strong"),Xpr=o("deberta"),Vpr=o(" \u2014 "),PO=a("a"),zpr=o("TFDebertaForQuestionAnswering"),Wpr=o(" (DeBERTa model)"),Qpr=l(),c9=a("li"),oue=a("strong"),Hpr=o("deberta-v2"),Upr=o(" \u2014 "),$O=a("a"),Jpr=o("TFDebertaV2ForQuestionAnswering"),Ypr=o(" (DeBERTa-v2 model)"),Kpr=l(),f9=a("li"),rue=a("strong"),Zpr=o("distilbert"),e_r=o(" \u2014 "),IO=a("a"),o_r=o("TFDistilBertForQuestionAnswering"),r_r=o(" (DistilBERT model)"),t_r=l(),m9=a("li"),tue=a("strong"),a_r=o("electra"),n_r=o(" \u2014 "),DO=a("a"),s_r=o("TFElectraForQuestionAnswering"),l_r=o(" (ELECTRA model)"),i_r=l(),g9=a("li"),aue=a("strong"),d_r=o("flaubert"),c_r=o(" \u2014 "),jO=a("a"),f_r=o("TFFlaubertForQuestionAnsweringSimple"),m_r=o(" (FlauBERT model)"),g_r=l(),h9=a("li"),nue=a("strong"),h_r=o("funnel"),p_r=o(" \u2014 "),NO=a("a"),__r=o("TFFunnelForQuestionAnswering"),u_r=o(" (Funnel Transformer model)"),b_r=l(),p9=a("li"),sue=a("strong"),v_r=o("longformer"),T_r=o(" \u2014 "),qO=a("a"),F_r=o("TFLongformerForQuestionAnswering"),C_r=o(" (Longformer model)"),M_r=l(),_9=a("li"),lue=a("strong"),E_r=o("mobilebert"),y_r=o(" \u2014 "),GO=a("a"),w_r=o("TFMobileBertForQuestionAnswering"),A_r=o(" (MobileBERT model)"),L_r=l(),u9=a("li"),iue=a("strong"),B_r=o("mpnet"),x_r=o(" \u2014 "),OO=a("a"),k_r=o("TFMPNetForQuestionAnswering"),R_r=o(" (MPNet model)"),S_r=l(),b9=a("li"),due=a("strong"),P_r=o("rembert"),$_r=o(" \u2014 "),XO=a("a"),I_r=o("TFRemBertForQuestionAnswering"),D_r=o(" (RemBERT model)"),j_r=l(),v9=a("li"),cue=a("strong"),N_r=o("roberta"),q_r=o(" \u2014 "),VO=a("a"),G_r=o("TFRobertaForQuestionAnswering"),O_r=o(" (RoBERTa model)"),X_r=l(),T9=a("li"),fue=a("strong"),V_r=o("roformer"),z_r=o(" \u2014 "),zO=a("a"),W_r=o("TFRoFormerForQuestionAnswering"),Q_r=o(" (RoFormer model)"),H_r=l(),F9=a("li"),mue=a("strong"),U_r=o("xlm"),J_r=o(" \u2014 "),WO=a("a"),Y_r=o("TFXLMForQuestionAnsweringSimple"),K_r=o(" (XLM model)"),Z_r=l(),C9=a("li"),gue=a("strong"),eur=o("xlm-roberta"),our=o(" \u2014 "),QO=a("a"),rur=o("TFXLMRobertaForQuestionAnswering"),tur=o(" (XLM-RoBERTa model)"),aur=l(),M9=a("li"),hue=a("strong"),nur=o("xlnet"),sur=o(" \u2014 "),HO=a("a"),lur=o("TFXLNetForQuestionAnsweringSimple"),iur=o(" (XLNet model)"),dur=l(),pue=a("p"),cur=o("Examples:"),fur=l(),f(FA.$$.fragment),nxe=l(),$c=a("h2"),E9=a("a"),_ue=a("span"),f(CA.$$.fragment),mur=l(),uue=a("span"),gur=o("TFAutoModelForVision2Seq"),sxe=l(),wr=a("div"),f(MA.$$.fragment),hur=l(),Ic=a("p"),pur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),bue=a("code"),_ur=o("from_pretrained()"),uur=o("class method or the "),vue=a("code"),bur=o("from_config()"),vur=o(`class
method.`),Tur=l(),EA=a("p"),Fur=o("This class cannot be instantiated directly using "),Tue=a("code"),Cur=o("__init__()"),Mur=o(" (throws an error)."),Eur=l(),vt=a("div"),f(yA.$$.fragment),yur=l(),Fue=a("p"),wur=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Aur=l(),Dc=a("p"),Lur=o(`Note:
Loading a model from its configuration file does `),Cue=a("strong"),Bur=o("not"),xur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Mue=a("code"),kur=o("from_pretrained()"),Rur=o("to load the model weights."),Sur=l(),Eue=a("p"),Pur=o("Examples:"),$ur=l(),f(wA.$$.fragment),Iur=l(),Eo=a("div"),f(AA.$$.fragment),Dur=l(),yue=a("p"),jur=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Nur=l(),Fn=a("p"),qur=o("The model class to instantiate is selected based on the "),wue=a("code"),Gur=o("model_type"),Our=o(` property of the config object (either
passed as an argument or loaded from `),Aue=a("code"),Xur=o("pretrained_model_name_or_path"),Vur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lue=a("code"),zur=o("pretrained_model_name_or_path"),Wur=o(":"),Qur=l(),Bue=a("ul"),y9=a("li"),xue=a("strong"),Hur=o("vision-encoder-decoder"),Uur=o(" \u2014 "),UO=a("a"),Jur=o("TFVisionEncoderDecoderModel"),Yur=o(" (Vision Encoder decoder model)"),Kur=l(),kue=a("p"),Zur=o("Examples:"),e2r=l(),f(LA.$$.fragment),lxe=l(),jc=a("h2"),w9=a("a"),Rue=a("span"),f(BA.$$.fragment),o2r=l(),Sue=a("span"),r2r=o("TFAutoModelForSpeechSeq2Seq"),ixe=l(),Ar=a("div"),f(xA.$$.fragment),t2r=l(),Nc=a("p"),a2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Pue=a("code"),n2r=o("from_pretrained()"),s2r=o("class method or the "),$ue=a("code"),l2r=o("from_config()"),i2r=o(`class
method.`),d2r=l(),kA=a("p"),c2r=o("This class cannot be instantiated directly using "),Iue=a("code"),f2r=o("__init__()"),m2r=o(" (throws an error)."),g2r=l(),Tt=a("div"),f(RA.$$.fragment),h2r=l(),Due=a("p"),p2r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),_2r=l(),qc=a("p"),u2r=o(`Note:
Loading a model from its configuration file does `),jue=a("strong"),b2r=o("not"),v2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Nue=a("code"),T2r=o("from_pretrained()"),F2r=o("to load the model weights."),C2r=l(),que=a("p"),M2r=o("Examples:"),E2r=l(),f(SA.$$.fragment),y2r=l(),yo=a("div"),f(PA.$$.fragment),w2r=l(),Gue=a("p"),A2r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),L2r=l(),Cn=a("p"),B2r=o("The model class to instantiate is selected based on the "),Oue=a("code"),x2r=o("model_type"),k2r=o(` property of the config object (either
passed as an argument or loaded from `),Xue=a("code"),R2r=o("pretrained_model_name_or_path"),S2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vue=a("code"),P2r=o("pretrained_model_name_or_path"),$2r=o(":"),I2r=l(),zue=a("ul"),A9=a("li"),Wue=a("strong"),D2r=o("speech_to_text"),j2r=o(" \u2014 "),JO=a("a"),N2r=o("TFSpeech2TextForConditionalGeneration"),q2r=o(" (Speech2Text model)"),G2r=l(),Que=a("p"),O2r=o("Examples:"),X2r=l(),f($A.$$.fragment),dxe=l(),Gc=a("h2"),L9=a("a"),Hue=a("span"),f(IA.$$.fragment),V2r=l(),Uue=a("span"),z2r=o("FlaxAutoModel"),cxe=l(),Lr=a("div"),f(DA.$$.fragment),W2r=l(),Oc=a("p"),Q2r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Jue=a("code"),H2r=o("from_pretrained()"),U2r=o("class method or the "),Yue=a("code"),J2r=o("from_config()"),Y2r=o(`class
method.`),K2r=l(),jA=a("p"),Z2r=o("This class cannot be instantiated directly using "),Kue=a("code"),e1r=o("__init__()"),o1r=o(" (throws an error)."),r1r=l(),Ft=a("div"),f(NA.$$.fragment),t1r=l(),Zue=a("p"),a1r=o("Instantiates one of the base model classes of the library from a configuration."),n1r=l(),Xc=a("p"),s1r=o(`Note:
Loading a model from its configuration file does `),e2e=a("strong"),l1r=o("not"),i1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),o2e=a("code"),d1r=o("from_pretrained()"),c1r=o("to load the model weights."),f1r=l(),r2e=a("p"),m1r=o("Examples:"),g1r=l(),f(qA.$$.fragment),h1r=l(),wo=a("div"),f(GA.$$.fragment),p1r=l(),t2e=a("p"),_1r=o("Instantiate one of the base model classes of the library from a pretrained model."),u1r=l(),Mn=a("p"),b1r=o("The model class to instantiate is selected based on the "),a2e=a("code"),v1r=o("model_type"),T1r=o(` property of the config object (either
passed as an argument or loaded from `),n2e=a("code"),F1r=o("pretrained_model_name_or_path"),C1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s2e=a("code"),M1r=o("pretrained_model_name_or_path"),E1r=o(":"),y1r=l(),z=a("ul"),B9=a("li"),l2e=a("strong"),w1r=o("albert"),A1r=o(" \u2014 "),YO=a("a"),L1r=o("FlaxAlbertModel"),B1r=o(" (ALBERT model)"),x1r=l(),x9=a("li"),i2e=a("strong"),k1r=o("bart"),R1r=o(" \u2014 "),KO=a("a"),S1r=o("FlaxBartModel"),P1r=o(" (BART model)"),$1r=l(),k9=a("li"),d2e=a("strong"),I1r=o("beit"),D1r=o(" \u2014 "),ZO=a("a"),j1r=o("FlaxBeitModel"),N1r=o(" (BEiT model)"),q1r=l(),R9=a("li"),c2e=a("strong"),G1r=o("bert"),O1r=o(" \u2014 "),eX=a("a"),X1r=o("FlaxBertModel"),V1r=o(" (BERT model)"),z1r=l(),S9=a("li"),f2e=a("strong"),W1r=o("big_bird"),Q1r=o(" \u2014 "),oX=a("a"),H1r=o("FlaxBigBirdModel"),U1r=o(" (BigBird model)"),J1r=l(),P9=a("li"),m2e=a("strong"),Y1r=o("blenderbot"),K1r=o(" \u2014 "),rX=a("a"),Z1r=o("FlaxBlenderbotModel"),ebr=o(" (Blenderbot model)"),obr=l(),$9=a("li"),g2e=a("strong"),rbr=o("blenderbot-small"),tbr=o(" \u2014 "),tX=a("a"),abr=o("FlaxBlenderbotSmallModel"),nbr=o(" (BlenderbotSmall model)"),sbr=l(),I9=a("li"),h2e=a("strong"),lbr=o("clip"),ibr=o(" \u2014 "),aX=a("a"),dbr=o("FlaxCLIPModel"),cbr=o(" (CLIP model)"),fbr=l(),D9=a("li"),p2e=a("strong"),mbr=o("distilbert"),gbr=o(" \u2014 "),nX=a("a"),hbr=o("FlaxDistilBertModel"),pbr=o(" (DistilBERT model)"),_br=l(),j9=a("li"),_2e=a("strong"),ubr=o("electra"),bbr=o(" \u2014 "),sX=a("a"),vbr=o("FlaxElectraModel"),Tbr=o(" (ELECTRA model)"),Fbr=l(),N9=a("li"),u2e=a("strong"),Cbr=o("gpt2"),Mbr=o(" \u2014 "),lX=a("a"),Ebr=o("FlaxGPT2Model"),ybr=o(" (OpenAI GPT-2 model)"),wbr=l(),q9=a("li"),b2e=a("strong"),Abr=o("gpt_neo"),Lbr=o(" \u2014 "),iX=a("a"),Bbr=o("FlaxGPTNeoModel"),xbr=o(" (GPT Neo model)"),kbr=l(),G9=a("li"),v2e=a("strong"),Rbr=o("gptj"),Sbr=o(" \u2014 "),dX=a("a"),Pbr=o("FlaxGPTJModel"),$br=o(" (GPT-J model)"),Ibr=l(),O9=a("li"),T2e=a("strong"),Dbr=o("marian"),jbr=o(" \u2014 "),cX=a("a"),Nbr=o("FlaxMarianModel"),qbr=o(" (Marian model)"),Gbr=l(),X9=a("li"),F2e=a("strong"),Obr=o("mbart"),Xbr=o(" \u2014 "),fX=a("a"),Vbr=o("FlaxMBartModel"),zbr=o(" (mBART model)"),Wbr=l(),V9=a("li"),C2e=a("strong"),Qbr=o("mt5"),Hbr=o(" \u2014 "),mX=a("a"),Ubr=o("FlaxMT5Model"),Jbr=o(" (mT5 model)"),Ybr=l(),z9=a("li"),M2e=a("strong"),Kbr=o("pegasus"),Zbr=o(" \u2014 "),gX=a("a"),e3r=o("FlaxPegasusModel"),o3r=o(" (Pegasus model)"),r3r=l(),W9=a("li"),E2e=a("strong"),t3r=o("roberta"),a3r=o(" \u2014 "),hX=a("a"),n3r=o("FlaxRobertaModel"),s3r=o(" (RoBERTa model)"),l3r=l(),Q9=a("li"),y2e=a("strong"),i3r=o("roformer"),d3r=o(" \u2014 "),pX=a("a"),c3r=o("FlaxRoFormerModel"),f3r=o(" (RoFormer model)"),m3r=l(),H9=a("li"),w2e=a("strong"),g3r=o("t5"),h3r=o(" \u2014 "),_X=a("a"),p3r=o("FlaxT5Model"),_3r=o(" (T5 model)"),u3r=l(),U9=a("li"),A2e=a("strong"),b3r=o("vision-text-dual-encoder"),v3r=o(" \u2014 "),uX=a("a"),T3r=o("FlaxVisionTextDualEncoderModel"),F3r=o(" (VisionTextDualEncoder model)"),C3r=l(),J9=a("li"),L2e=a("strong"),M3r=o("vit"),E3r=o(" \u2014 "),bX=a("a"),y3r=o("FlaxViTModel"),w3r=o(" (ViT model)"),A3r=l(),Y9=a("li"),B2e=a("strong"),L3r=o("wav2vec2"),B3r=o(" \u2014 "),vX=a("a"),x3r=o("FlaxWav2Vec2Model"),k3r=o(" (Wav2Vec2 model)"),R3r=l(),K9=a("li"),x2e=a("strong"),S3r=o("xglm"),P3r=o(" \u2014 "),TX=a("a"),$3r=o("FlaxXGLMModel"),I3r=o(" (XGLM model)"),D3r=l(),k2e=a("p"),j3r=o("Examples:"),N3r=l(),f(OA.$$.fragment),fxe=l(),Vc=a("h2"),Z9=a("a"),R2e=a("span"),f(XA.$$.fragment),q3r=l(),S2e=a("span"),G3r=o("FlaxAutoModelForCausalLM"),mxe=l(),Br=a("div"),f(VA.$$.fragment),O3r=l(),zc=a("p"),X3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),P2e=a("code"),V3r=o("from_pretrained()"),z3r=o("class method or the "),$2e=a("code"),W3r=o("from_config()"),Q3r=o(`class
method.`),H3r=l(),zA=a("p"),U3r=o("This class cannot be instantiated directly using "),I2e=a("code"),J3r=o("__init__()"),Y3r=o(" (throws an error)."),K3r=l(),Ct=a("div"),f(WA.$$.fragment),Z3r=l(),D2e=a("p"),e5r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),o5r=l(),Wc=a("p"),r5r=o(`Note:
Loading a model from its configuration file does `),j2e=a("strong"),t5r=o("not"),a5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),N2e=a("code"),n5r=o("from_pretrained()"),s5r=o("to load the model weights."),l5r=l(),q2e=a("p"),i5r=o("Examples:"),d5r=l(),f(QA.$$.fragment),c5r=l(),Ao=a("div"),f(HA.$$.fragment),f5r=l(),G2e=a("p"),m5r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),g5r=l(),En=a("p"),h5r=o("The model class to instantiate is selected based on the "),O2e=a("code"),p5r=o("model_type"),_5r=o(` property of the config object (either
passed as an argument or loaded from `),X2e=a("code"),u5r=o("pretrained_model_name_or_path"),b5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V2e=a("code"),v5r=o("pretrained_model_name_or_path"),T5r=o(":"),F5r=l(),yn=a("ul"),eC=a("li"),z2e=a("strong"),C5r=o("gpt2"),M5r=o(" \u2014 "),FX=a("a"),E5r=o("FlaxGPT2LMHeadModel"),y5r=o(" (OpenAI GPT-2 model)"),w5r=l(),oC=a("li"),W2e=a("strong"),A5r=o("gpt_neo"),L5r=o(" \u2014 "),CX=a("a"),B5r=o("FlaxGPTNeoForCausalLM"),x5r=o(" (GPT Neo model)"),k5r=l(),rC=a("li"),Q2e=a("strong"),R5r=o("gptj"),S5r=o(" \u2014 "),MX=a("a"),P5r=o("FlaxGPTJForCausalLM"),$5r=o(" (GPT-J model)"),I5r=l(),tC=a("li"),H2e=a("strong"),D5r=o("xglm"),j5r=o(" \u2014 "),EX=a("a"),N5r=o("FlaxXGLMForCausalLM"),q5r=o(" (XGLM model)"),G5r=l(),U2e=a("p"),O5r=o("Examples:"),X5r=l(),f(UA.$$.fragment),gxe=l(),Qc=a("h2"),aC=a("a"),J2e=a("span"),f(JA.$$.fragment),V5r=l(),Y2e=a("span"),z5r=o("FlaxAutoModelForPreTraining"),hxe=l(),xr=a("div"),f(YA.$$.fragment),W5r=l(),Hc=a("p"),Q5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),K2e=a("code"),H5r=o("from_pretrained()"),U5r=o("class method or the "),Z2e=a("code"),J5r=o("from_config()"),Y5r=o(`class
method.`),K5r=l(),KA=a("p"),Z5r=o("This class cannot be instantiated directly using "),e1e=a("code"),evr=o("__init__()"),ovr=o(" (throws an error)."),rvr=l(),Mt=a("div"),f(ZA.$$.fragment),tvr=l(),o1e=a("p"),avr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),nvr=l(),Uc=a("p"),svr=o(`Note:
Loading a model from its configuration file does `),r1e=a("strong"),lvr=o("not"),ivr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),t1e=a("code"),dvr=o("from_pretrained()"),cvr=o("to load the model weights."),fvr=l(),a1e=a("p"),mvr=o("Examples:"),gvr=l(),f(e0.$$.fragment),hvr=l(),Lo=a("div"),f(o0.$$.fragment),pvr=l(),n1e=a("p"),_vr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),uvr=l(),wn=a("p"),bvr=o("The model class to instantiate is selected based on the "),s1e=a("code"),vvr=o("model_type"),Tvr=o(` property of the config object (either
passed as an argument or loaded from `),l1e=a("code"),Fvr=o("pretrained_model_name_or_path"),Cvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i1e=a("code"),Mvr=o("pretrained_model_name_or_path"),Evr=o(":"),yvr=l(),fe=a("ul"),nC=a("li"),d1e=a("strong"),wvr=o("albert"),Avr=o(" \u2014 "),yX=a("a"),Lvr=o("FlaxAlbertForPreTraining"),Bvr=o(" (ALBERT model)"),xvr=l(),sC=a("li"),c1e=a("strong"),kvr=o("bart"),Rvr=o(" \u2014 "),wX=a("a"),Svr=o("FlaxBartForConditionalGeneration"),Pvr=o(" (BART model)"),$vr=l(),lC=a("li"),f1e=a("strong"),Ivr=o("bert"),Dvr=o(" \u2014 "),AX=a("a"),jvr=o("FlaxBertForPreTraining"),Nvr=o(" (BERT model)"),qvr=l(),iC=a("li"),m1e=a("strong"),Gvr=o("big_bird"),Ovr=o(" \u2014 "),LX=a("a"),Xvr=o("FlaxBigBirdForPreTraining"),Vvr=o(" (BigBird model)"),zvr=l(),dC=a("li"),g1e=a("strong"),Wvr=o("electra"),Qvr=o(" \u2014 "),BX=a("a"),Hvr=o("FlaxElectraForPreTraining"),Uvr=o(" (ELECTRA model)"),Jvr=l(),cC=a("li"),h1e=a("strong"),Yvr=o("mbart"),Kvr=o(" \u2014 "),xX=a("a"),Zvr=o("FlaxMBartForConditionalGeneration"),eTr=o(" (mBART model)"),oTr=l(),fC=a("li"),p1e=a("strong"),rTr=o("mt5"),tTr=o(" \u2014 "),kX=a("a"),aTr=o("FlaxMT5ForConditionalGeneration"),nTr=o(" (mT5 model)"),sTr=l(),mC=a("li"),_1e=a("strong"),lTr=o("roberta"),iTr=o(" \u2014 "),RX=a("a"),dTr=o("FlaxRobertaForMaskedLM"),cTr=o(" (RoBERTa model)"),fTr=l(),gC=a("li"),u1e=a("strong"),mTr=o("roformer"),gTr=o(" \u2014 "),SX=a("a"),hTr=o("FlaxRoFormerForMaskedLM"),pTr=o(" (RoFormer model)"),_Tr=l(),hC=a("li"),b1e=a("strong"),uTr=o("t5"),bTr=o(" \u2014 "),PX=a("a"),vTr=o("FlaxT5ForConditionalGeneration"),TTr=o(" (T5 model)"),FTr=l(),pC=a("li"),v1e=a("strong"),CTr=o("wav2vec2"),MTr=o(" \u2014 "),$X=a("a"),ETr=o("FlaxWav2Vec2ForPreTraining"),yTr=o(" (Wav2Vec2 model)"),wTr=l(),T1e=a("p"),ATr=o("Examples:"),LTr=l(),f(r0.$$.fragment),pxe=l(),Jc=a("h2"),_C=a("a"),F1e=a("span"),f(t0.$$.fragment),BTr=l(),C1e=a("span"),xTr=o("FlaxAutoModelForMaskedLM"),_xe=l(),kr=a("div"),f(a0.$$.fragment),kTr=l(),Yc=a("p"),RTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),M1e=a("code"),STr=o("from_pretrained()"),PTr=o("class method or the "),E1e=a("code"),$Tr=o("from_config()"),ITr=o(`class
method.`),DTr=l(),n0=a("p"),jTr=o("This class cannot be instantiated directly using "),y1e=a("code"),NTr=o("__init__()"),qTr=o(" (throws an error)."),GTr=l(),Et=a("div"),f(s0.$$.fragment),OTr=l(),w1e=a("p"),XTr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),VTr=l(),Kc=a("p"),zTr=o(`Note:
Loading a model from its configuration file does `),A1e=a("strong"),WTr=o("not"),QTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),L1e=a("code"),HTr=o("from_pretrained()"),UTr=o("to load the model weights."),JTr=l(),B1e=a("p"),YTr=o("Examples:"),KTr=l(),f(l0.$$.fragment),ZTr=l(),Bo=a("div"),f(i0.$$.fragment),eFr=l(),x1e=a("p"),oFr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),rFr=l(),An=a("p"),tFr=o("The model class to instantiate is selected based on the "),k1e=a("code"),aFr=o("model_type"),nFr=o(` property of the config object (either
passed as an argument or loaded from `),R1e=a("code"),sFr=o("pretrained_model_name_or_path"),lFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S1e=a("code"),iFr=o("pretrained_model_name_or_path"),dFr=o(":"),cFr=l(),ve=a("ul"),uC=a("li"),P1e=a("strong"),fFr=o("albert"),mFr=o(" \u2014 "),IX=a("a"),gFr=o("FlaxAlbertForMaskedLM"),hFr=o(" (ALBERT model)"),pFr=l(),bC=a("li"),$1e=a("strong"),_Fr=o("bart"),uFr=o(" \u2014 "),DX=a("a"),bFr=o("FlaxBartForConditionalGeneration"),vFr=o(" (BART model)"),TFr=l(),vC=a("li"),I1e=a("strong"),FFr=o("bert"),CFr=o(" \u2014 "),jX=a("a"),MFr=o("FlaxBertForMaskedLM"),EFr=o(" (BERT model)"),yFr=l(),TC=a("li"),D1e=a("strong"),wFr=o("big_bird"),AFr=o(" \u2014 "),NX=a("a"),LFr=o("FlaxBigBirdForMaskedLM"),BFr=o(" (BigBird model)"),xFr=l(),FC=a("li"),j1e=a("strong"),kFr=o("distilbert"),RFr=o(" \u2014 "),qX=a("a"),SFr=o("FlaxDistilBertForMaskedLM"),PFr=o(" (DistilBERT model)"),$Fr=l(),CC=a("li"),N1e=a("strong"),IFr=o("electra"),DFr=o(" \u2014 "),GX=a("a"),jFr=o("FlaxElectraForMaskedLM"),NFr=o(" (ELECTRA model)"),qFr=l(),MC=a("li"),q1e=a("strong"),GFr=o("mbart"),OFr=o(" \u2014 "),OX=a("a"),XFr=o("FlaxMBartForConditionalGeneration"),VFr=o(" (mBART model)"),zFr=l(),EC=a("li"),G1e=a("strong"),WFr=o("roberta"),QFr=o(" \u2014 "),XX=a("a"),HFr=o("FlaxRobertaForMaskedLM"),UFr=o(" (RoBERTa model)"),JFr=l(),yC=a("li"),O1e=a("strong"),YFr=o("roformer"),KFr=o(" \u2014 "),VX=a("a"),ZFr=o("FlaxRoFormerForMaskedLM"),e9r=o(" (RoFormer model)"),o9r=l(),X1e=a("p"),r9r=o("Examples:"),t9r=l(),f(d0.$$.fragment),uxe=l(),Zc=a("h2"),wC=a("a"),V1e=a("span"),f(c0.$$.fragment),a9r=l(),z1e=a("span"),n9r=o("FlaxAutoModelForSeq2SeqLM"),bxe=l(),Rr=a("div"),f(f0.$$.fragment),s9r=l(),ef=a("p"),l9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),W1e=a("code"),i9r=o("from_pretrained()"),d9r=o("class method or the "),Q1e=a("code"),c9r=o("from_config()"),f9r=o(`class
method.`),m9r=l(),m0=a("p"),g9r=o("This class cannot be instantiated directly using "),H1e=a("code"),h9r=o("__init__()"),p9r=o(" (throws an error)."),_9r=l(),yt=a("div"),f(g0.$$.fragment),u9r=l(),U1e=a("p"),b9r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),v9r=l(),of=a("p"),T9r=o(`Note:
Loading a model from its configuration file does `),J1e=a("strong"),F9r=o("not"),C9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Y1e=a("code"),M9r=o("from_pretrained()"),E9r=o("to load the model weights."),y9r=l(),K1e=a("p"),w9r=o("Examples:"),A9r=l(),f(h0.$$.fragment),L9r=l(),xo=a("div"),f(p0.$$.fragment),B9r=l(),Z1e=a("p"),x9r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),k9r=l(),Ln=a("p"),R9r=o("The model class to instantiate is selected based on the "),ebe=a("code"),S9r=o("model_type"),P9r=o(` property of the config object (either
passed as an argument or loaded from `),obe=a("code"),$9r=o("pretrained_model_name_or_path"),I9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rbe=a("code"),D9r=o("pretrained_model_name_or_path"),j9r=o(":"),N9r=l(),Te=a("ul"),AC=a("li"),tbe=a("strong"),q9r=o("bart"),G9r=o(" \u2014 "),zX=a("a"),O9r=o("FlaxBartForConditionalGeneration"),X9r=o(" (BART model)"),V9r=l(),LC=a("li"),abe=a("strong"),z9r=o("blenderbot"),W9r=o(" \u2014 "),WX=a("a"),Q9r=o("FlaxBlenderbotForConditionalGeneration"),H9r=o(" (Blenderbot model)"),U9r=l(),BC=a("li"),nbe=a("strong"),J9r=o("blenderbot-small"),Y9r=o(" \u2014 "),QX=a("a"),K9r=o("FlaxBlenderbotSmallForConditionalGeneration"),Z9r=o(" (BlenderbotSmall model)"),eCr=l(),xC=a("li"),sbe=a("strong"),oCr=o("encoder-decoder"),rCr=o(" \u2014 "),HX=a("a"),tCr=o("FlaxEncoderDecoderModel"),aCr=o(" (Encoder decoder model)"),nCr=l(),kC=a("li"),lbe=a("strong"),sCr=o("marian"),lCr=o(" \u2014 "),UX=a("a"),iCr=o("FlaxMarianMTModel"),dCr=o(" (Marian model)"),cCr=l(),RC=a("li"),ibe=a("strong"),fCr=o("mbart"),mCr=o(" \u2014 "),JX=a("a"),gCr=o("FlaxMBartForConditionalGeneration"),hCr=o(" (mBART model)"),pCr=l(),SC=a("li"),dbe=a("strong"),_Cr=o("mt5"),uCr=o(" \u2014 "),YX=a("a"),bCr=o("FlaxMT5ForConditionalGeneration"),vCr=o(" (mT5 model)"),TCr=l(),PC=a("li"),cbe=a("strong"),FCr=o("pegasus"),CCr=o(" \u2014 "),KX=a("a"),MCr=o("FlaxPegasusForConditionalGeneration"),ECr=o(" (Pegasus model)"),yCr=l(),$C=a("li"),fbe=a("strong"),wCr=o("t5"),ACr=o(" \u2014 "),ZX=a("a"),LCr=o("FlaxT5ForConditionalGeneration"),BCr=o(" (T5 model)"),xCr=l(),mbe=a("p"),kCr=o("Examples:"),RCr=l(),f(_0.$$.fragment),vxe=l(),rf=a("h2"),IC=a("a"),gbe=a("span"),f(u0.$$.fragment),SCr=l(),hbe=a("span"),PCr=o("FlaxAutoModelForSequenceClassification"),Txe=l(),Sr=a("div"),f(b0.$$.fragment),$Cr=l(),tf=a("p"),ICr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),pbe=a("code"),DCr=o("from_pretrained()"),jCr=o("class method or the "),_be=a("code"),NCr=o("from_config()"),qCr=o(`class
method.`),GCr=l(),v0=a("p"),OCr=o("This class cannot be instantiated directly using "),ube=a("code"),XCr=o("__init__()"),VCr=o(" (throws an error)."),zCr=l(),wt=a("div"),f(T0.$$.fragment),WCr=l(),bbe=a("p"),QCr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),HCr=l(),af=a("p"),UCr=o(`Note:
Loading a model from its configuration file does `),vbe=a("strong"),JCr=o("not"),YCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Tbe=a("code"),KCr=o("from_pretrained()"),ZCr=o("to load the model weights."),e4r=l(),Fbe=a("p"),o4r=o("Examples:"),r4r=l(),f(F0.$$.fragment),t4r=l(),ko=a("div"),f(C0.$$.fragment),a4r=l(),Cbe=a("p"),n4r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),s4r=l(),Bn=a("p"),l4r=o("The model class to instantiate is selected based on the "),Mbe=a("code"),i4r=o("model_type"),d4r=o(` property of the config object (either
passed as an argument or loaded from `),Ebe=a("code"),c4r=o("pretrained_model_name_or_path"),f4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ybe=a("code"),m4r=o("pretrained_model_name_or_path"),g4r=o(":"),h4r=l(),Fe=a("ul"),DC=a("li"),wbe=a("strong"),p4r=o("albert"),_4r=o(" \u2014 "),eV=a("a"),u4r=o("FlaxAlbertForSequenceClassification"),b4r=o(" (ALBERT model)"),v4r=l(),jC=a("li"),Abe=a("strong"),T4r=o("bart"),F4r=o(" \u2014 "),oV=a("a"),C4r=o("FlaxBartForSequenceClassification"),M4r=o(" (BART model)"),E4r=l(),NC=a("li"),Lbe=a("strong"),y4r=o("bert"),w4r=o(" \u2014 "),rV=a("a"),A4r=o("FlaxBertForSequenceClassification"),L4r=o(" (BERT model)"),B4r=l(),qC=a("li"),Bbe=a("strong"),x4r=o("big_bird"),k4r=o(" \u2014 "),tV=a("a"),R4r=o("FlaxBigBirdForSequenceClassification"),S4r=o(" (BigBird model)"),P4r=l(),GC=a("li"),xbe=a("strong"),$4r=o("distilbert"),I4r=o(" \u2014 "),aV=a("a"),D4r=o("FlaxDistilBertForSequenceClassification"),j4r=o(" (DistilBERT model)"),N4r=l(),OC=a("li"),kbe=a("strong"),q4r=o("electra"),G4r=o(" \u2014 "),nV=a("a"),O4r=o("FlaxElectraForSequenceClassification"),X4r=o(" (ELECTRA model)"),V4r=l(),XC=a("li"),Rbe=a("strong"),z4r=o("mbart"),W4r=o(" \u2014 "),sV=a("a"),Q4r=o("FlaxMBartForSequenceClassification"),H4r=o(" (mBART model)"),U4r=l(),VC=a("li"),Sbe=a("strong"),J4r=o("roberta"),Y4r=o(" \u2014 "),lV=a("a"),K4r=o("FlaxRobertaForSequenceClassification"),Z4r=o(" (RoBERTa model)"),eMr=l(),zC=a("li"),Pbe=a("strong"),oMr=o("roformer"),rMr=o(" \u2014 "),iV=a("a"),tMr=o("FlaxRoFormerForSequenceClassification"),aMr=o(" (RoFormer model)"),nMr=l(),$be=a("p"),sMr=o("Examples:"),lMr=l(),f(M0.$$.fragment),Fxe=l(),nf=a("h2"),WC=a("a"),Ibe=a("span"),f(E0.$$.fragment),iMr=l(),Dbe=a("span"),dMr=o("FlaxAutoModelForQuestionAnswering"),Cxe=l(),Pr=a("div"),f(y0.$$.fragment),cMr=l(),sf=a("p"),fMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),jbe=a("code"),mMr=o("from_pretrained()"),gMr=o("class method or the "),Nbe=a("code"),hMr=o("from_config()"),pMr=o(`class
method.`),_Mr=l(),w0=a("p"),uMr=o("This class cannot be instantiated directly using "),qbe=a("code"),bMr=o("__init__()"),vMr=o(" (throws an error)."),TMr=l(),At=a("div"),f(A0.$$.fragment),FMr=l(),Gbe=a("p"),CMr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),MMr=l(),lf=a("p"),EMr=o(`Note:
Loading a model from its configuration file does `),Obe=a("strong"),yMr=o("not"),wMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Xbe=a("code"),AMr=o("from_pretrained()"),LMr=o("to load the model weights."),BMr=l(),Vbe=a("p"),xMr=o("Examples:"),kMr=l(),f(L0.$$.fragment),RMr=l(),Ro=a("div"),f(B0.$$.fragment),SMr=l(),zbe=a("p"),PMr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),$Mr=l(),xn=a("p"),IMr=o("The model class to instantiate is selected based on the "),Wbe=a("code"),DMr=o("model_type"),jMr=o(` property of the config object (either
passed as an argument or loaded from `),Qbe=a("code"),NMr=o("pretrained_model_name_or_path"),qMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hbe=a("code"),GMr=o("pretrained_model_name_or_path"),OMr=o(":"),XMr=l(),Ce=a("ul"),QC=a("li"),Ube=a("strong"),VMr=o("albert"),zMr=o(" \u2014 "),dV=a("a"),WMr=o("FlaxAlbertForQuestionAnswering"),QMr=o(" (ALBERT model)"),HMr=l(),HC=a("li"),Jbe=a("strong"),UMr=o("bart"),JMr=o(" \u2014 "),cV=a("a"),YMr=o("FlaxBartForQuestionAnswering"),KMr=o(" (BART model)"),ZMr=l(),UC=a("li"),Ybe=a("strong"),eEr=o("bert"),oEr=o(" \u2014 "),fV=a("a"),rEr=o("FlaxBertForQuestionAnswering"),tEr=o(" (BERT model)"),aEr=l(),JC=a("li"),Kbe=a("strong"),nEr=o("big_bird"),sEr=o(" \u2014 "),mV=a("a"),lEr=o("FlaxBigBirdForQuestionAnswering"),iEr=o(" (BigBird model)"),dEr=l(),YC=a("li"),Zbe=a("strong"),cEr=o("distilbert"),fEr=o(" \u2014 "),gV=a("a"),mEr=o("FlaxDistilBertForQuestionAnswering"),gEr=o(" (DistilBERT model)"),hEr=l(),KC=a("li"),e3e=a("strong"),pEr=o("electra"),_Er=o(" \u2014 "),hV=a("a"),uEr=o("FlaxElectraForQuestionAnswering"),bEr=o(" (ELECTRA model)"),vEr=l(),ZC=a("li"),o3e=a("strong"),TEr=o("mbart"),FEr=o(" \u2014 "),pV=a("a"),CEr=o("FlaxMBartForQuestionAnswering"),MEr=o(" (mBART model)"),EEr=l(),e4=a("li"),r3e=a("strong"),yEr=o("roberta"),wEr=o(" \u2014 "),_V=a("a"),AEr=o("FlaxRobertaForQuestionAnswering"),LEr=o(" (RoBERTa model)"),BEr=l(),o4=a("li"),t3e=a("strong"),xEr=o("roformer"),kEr=o(" \u2014 "),uV=a("a"),REr=o("FlaxRoFormerForQuestionAnswering"),SEr=o(" (RoFormer model)"),PEr=l(),a3e=a("p"),$Er=o("Examples:"),IEr=l(),f(x0.$$.fragment),Mxe=l(),df=a("h2"),r4=a("a"),n3e=a("span"),f(k0.$$.fragment),DEr=l(),s3e=a("span"),jEr=o("FlaxAutoModelForTokenClassification"),Exe=l(),$r=a("div"),f(R0.$$.fragment),NEr=l(),cf=a("p"),qEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),l3e=a("code"),GEr=o("from_pretrained()"),OEr=o("class method or the "),i3e=a("code"),XEr=o("from_config()"),VEr=o(`class
method.`),zEr=l(),S0=a("p"),WEr=o("This class cannot be instantiated directly using "),d3e=a("code"),QEr=o("__init__()"),HEr=o(" (throws an error)."),UEr=l(),Lt=a("div"),f(P0.$$.fragment),JEr=l(),c3e=a("p"),YEr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),KEr=l(),ff=a("p"),ZEr=o(`Note:
Loading a model from its configuration file does `),f3e=a("strong"),eyr=o("not"),oyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),m3e=a("code"),ryr=o("from_pretrained()"),tyr=o("to load the model weights."),ayr=l(),g3e=a("p"),nyr=o("Examples:"),syr=l(),f($0.$$.fragment),lyr=l(),So=a("div"),f(I0.$$.fragment),iyr=l(),h3e=a("p"),dyr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),cyr=l(),kn=a("p"),fyr=o("The model class to instantiate is selected based on the "),p3e=a("code"),myr=o("model_type"),gyr=o(` property of the config object (either
passed as an argument or loaded from `),_3e=a("code"),hyr=o("pretrained_model_name_or_path"),pyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u3e=a("code"),_yr=o("pretrained_model_name_or_path"),uyr=o(":"),byr=l(),so=a("ul"),t4=a("li"),b3e=a("strong"),vyr=o("albert"),Tyr=o(" \u2014 "),bV=a("a"),Fyr=o("FlaxAlbertForTokenClassification"),Cyr=o(" (ALBERT model)"),Myr=l(),a4=a("li"),v3e=a("strong"),Eyr=o("bert"),yyr=o(" \u2014 "),vV=a("a"),wyr=o("FlaxBertForTokenClassification"),Ayr=o(" (BERT model)"),Lyr=l(),n4=a("li"),T3e=a("strong"),Byr=o("big_bird"),xyr=o(" \u2014 "),TV=a("a"),kyr=o("FlaxBigBirdForTokenClassification"),Ryr=o(" (BigBird model)"),Syr=l(),s4=a("li"),F3e=a("strong"),Pyr=o("distilbert"),$yr=o(" \u2014 "),FV=a("a"),Iyr=o("FlaxDistilBertForTokenClassification"),Dyr=o(" (DistilBERT model)"),jyr=l(),l4=a("li"),C3e=a("strong"),Nyr=o("electra"),qyr=o(" \u2014 "),CV=a("a"),Gyr=o("FlaxElectraForTokenClassification"),Oyr=o(" (ELECTRA model)"),Xyr=l(),i4=a("li"),M3e=a("strong"),Vyr=o("roberta"),zyr=o(" \u2014 "),MV=a("a"),Wyr=o("FlaxRobertaForTokenClassification"),Qyr=o(" (RoBERTa model)"),Hyr=l(),d4=a("li"),E3e=a("strong"),Uyr=o("roformer"),Jyr=o(" \u2014 "),EV=a("a"),Yyr=o("FlaxRoFormerForTokenClassification"),Kyr=o(" (RoFormer model)"),Zyr=l(),y3e=a("p"),ewr=o("Examples:"),owr=l(),f(D0.$$.fragment),yxe=l(),mf=a("h2"),c4=a("a"),w3e=a("span"),f(j0.$$.fragment),rwr=l(),A3e=a("span"),twr=o("FlaxAutoModelForMultipleChoice"),wxe=l(),Ir=a("div"),f(N0.$$.fragment),awr=l(),gf=a("p"),nwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),L3e=a("code"),swr=o("from_pretrained()"),lwr=o("class method or the "),B3e=a("code"),iwr=o("from_config()"),dwr=o(`class
method.`),cwr=l(),q0=a("p"),fwr=o("This class cannot be instantiated directly using "),x3e=a("code"),mwr=o("__init__()"),gwr=o(" (throws an error)."),hwr=l(),Bt=a("div"),f(G0.$$.fragment),pwr=l(),k3e=a("p"),_wr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),uwr=l(),hf=a("p"),bwr=o(`Note:
Loading a model from its configuration file does `),R3e=a("strong"),vwr=o("not"),Twr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),S3e=a("code"),Fwr=o("from_pretrained()"),Cwr=o("to load the model weights."),Mwr=l(),P3e=a("p"),Ewr=o("Examples:"),ywr=l(),f(O0.$$.fragment),wwr=l(),Po=a("div"),f(X0.$$.fragment),Awr=l(),$3e=a("p"),Lwr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Bwr=l(),Rn=a("p"),xwr=o("The model class to instantiate is selected based on the "),I3e=a("code"),kwr=o("model_type"),Rwr=o(` property of the config object (either
passed as an argument or loaded from `),D3e=a("code"),Swr=o("pretrained_model_name_or_path"),Pwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j3e=a("code"),$wr=o("pretrained_model_name_or_path"),Iwr=o(":"),Dwr=l(),lo=a("ul"),f4=a("li"),N3e=a("strong"),jwr=o("albert"),Nwr=o(" \u2014 "),yV=a("a"),qwr=o("FlaxAlbertForMultipleChoice"),Gwr=o(" (ALBERT model)"),Owr=l(),m4=a("li"),q3e=a("strong"),Xwr=o("bert"),Vwr=o(" \u2014 "),wV=a("a"),zwr=o("FlaxBertForMultipleChoice"),Wwr=o(" (BERT model)"),Qwr=l(),g4=a("li"),G3e=a("strong"),Hwr=o("big_bird"),Uwr=o(" \u2014 "),AV=a("a"),Jwr=o("FlaxBigBirdForMultipleChoice"),Ywr=o(" (BigBird model)"),Kwr=l(),h4=a("li"),O3e=a("strong"),Zwr=o("distilbert"),e6r=o(" \u2014 "),LV=a("a"),o6r=o("FlaxDistilBertForMultipleChoice"),r6r=o(" (DistilBERT model)"),t6r=l(),p4=a("li"),X3e=a("strong"),a6r=o("electra"),n6r=o(" \u2014 "),BV=a("a"),s6r=o("FlaxElectraForMultipleChoice"),l6r=o(" (ELECTRA model)"),i6r=l(),_4=a("li"),V3e=a("strong"),d6r=o("roberta"),c6r=o(" \u2014 "),xV=a("a"),f6r=o("FlaxRobertaForMultipleChoice"),m6r=o(" (RoBERTa model)"),g6r=l(),u4=a("li"),z3e=a("strong"),h6r=o("roformer"),p6r=o(" \u2014 "),kV=a("a"),_6r=o("FlaxRoFormerForMultipleChoice"),u6r=o(" (RoFormer model)"),b6r=l(),W3e=a("p"),v6r=o("Examples:"),T6r=l(),f(V0.$$.fragment),Axe=l(),pf=a("h2"),b4=a("a"),Q3e=a("span"),f(z0.$$.fragment),F6r=l(),H3e=a("span"),C6r=o("FlaxAutoModelForNextSentencePrediction"),Lxe=l(),Dr=a("div"),f(W0.$$.fragment),M6r=l(),_f=a("p"),E6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),U3e=a("code"),y6r=o("from_pretrained()"),w6r=o("class method or the "),J3e=a("code"),A6r=o("from_config()"),L6r=o(`class
method.`),B6r=l(),Q0=a("p"),x6r=o("This class cannot be instantiated directly using "),Y3e=a("code"),k6r=o("__init__()"),R6r=o(" (throws an error)."),S6r=l(),xt=a("div"),f(H0.$$.fragment),P6r=l(),K3e=a("p"),$6r=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),I6r=l(),uf=a("p"),D6r=o(`Note:
Loading a model from its configuration file does `),Z3e=a("strong"),j6r=o("not"),N6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),e5e=a("code"),q6r=o("from_pretrained()"),G6r=o("to load the model weights."),O6r=l(),o5e=a("p"),X6r=o("Examples:"),V6r=l(),f(U0.$$.fragment),z6r=l(),$o=a("div"),f(J0.$$.fragment),W6r=l(),r5e=a("p"),Q6r=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),H6r=l(),Sn=a("p"),U6r=o("The model class to instantiate is selected based on the "),t5e=a("code"),J6r=o("model_type"),Y6r=o(` property of the config object (either
passed as an argument or loaded from `),a5e=a("code"),K6r=o("pretrained_model_name_or_path"),Z6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n5e=a("code"),eAr=o("pretrained_model_name_or_path"),oAr=o(":"),rAr=l(),s5e=a("ul"),v4=a("li"),l5e=a("strong"),tAr=o("bert"),aAr=o(" \u2014 "),RV=a("a"),nAr=o("FlaxBertForNextSentencePrediction"),sAr=o(" (BERT model)"),lAr=l(),i5e=a("p"),iAr=o("Examples:"),dAr=l(),f(Y0.$$.fragment),Bxe=l(),bf=a("h2"),T4=a("a"),d5e=a("span"),f(K0.$$.fragment),cAr=l(),c5e=a("span"),fAr=o("FlaxAutoModelForImageClassification"),xxe=l(),jr=a("div"),f(Z0.$$.fragment),mAr=l(),vf=a("p"),gAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),f5e=a("code"),hAr=o("from_pretrained()"),pAr=o("class method or the "),m5e=a("code"),_Ar=o("from_config()"),uAr=o(`class
method.`),bAr=l(),eL=a("p"),vAr=o("This class cannot be instantiated directly using "),g5e=a("code"),TAr=o("__init__()"),FAr=o(" (throws an error)."),CAr=l(),kt=a("div"),f(oL.$$.fragment),MAr=l(),h5e=a("p"),EAr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),yAr=l(),Tf=a("p"),wAr=o(`Note:
Loading a model from its configuration file does `),p5e=a("strong"),AAr=o("not"),LAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_5e=a("code"),BAr=o("from_pretrained()"),xAr=o("to load the model weights."),kAr=l(),u5e=a("p"),RAr=o("Examples:"),SAr=l(),f(rL.$$.fragment),PAr=l(),Io=a("div"),f(tL.$$.fragment),$Ar=l(),b5e=a("p"),IAr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),DAr=l(),Pn=a("p"),jAr=o("The model class to instantiate is selected based on the "),v5e=a("code"),NAr=o("model_type"),qAr=o(` property of the config object (either
passed as an argument or loaded from `),T5e=a("code"),GAr=o("pretrained_model_name_or_path"),OAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F5e=a("code"),XAr=o("pretrained_model_name_or_path"),VAr=o(":"),zAr=l(),aL=a("ul"),F4=a("li"),C5e=a("strong"),WAr=o("beit"),QAr=o(" \u2014 "),SV=a("a"),HAr=o("FlaxBeitForImageClassification"),UAr=o(" (BEiT model)"),JAr=l(),C4=a("li"),M5e=a("strong"),YAr=o("vit"),KAr=o(" \u2014 "),PV=a("a"),ZAr=o("FlaxViTForImageClassification"),e0r=o(" (ViT model)"),o0r=l(),E5e=a("p"),r0r=o("Examples:"),t0r=l(),f(nL.$$.fragment),kxe=l(),Ff=a("h2"),M4=a("a"),y5e=a("span"),f(sL.$$.fragment),a0r=l(),w5e=a("span"),n0r=o("FlaxAutoModelForVision2Seq"),Rxe=l(),Nr=a("div"),f(lL.$$.fragment),s0r=l(),Cf=a("p"),l0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),A5e=a("code"),i0r=o("from_pretrained()"),d0r=o("class method or the "),L5e=a("code"),c0r=o("from_config()"),f0r=o(`class
method.`),m0r=l(),iL=a("p"),g0r=o("This class cannot be instantiated directly using "),B5e=a("code"),h0r=o("__init__()"),p0r=o(" (throws an error)."),_0r=l(),Rt=a("div"),f(dL.$$.fragment),u0r=l(),x5e=a("p"),b0r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),v0r=l(),Mf=a("p"),T0r=o(`Note:
Loading a model from its configuration file does `),k5e=a("strong"),F0r=o("not"),C0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),R5e=a("code"),M0r=o("from_pretrained()"),E0r=o("to load the model weights."),y0r=l(),S5e=a("p"),w0r=o("Examples:"),A0r=l(),f(cL.$$.fragment),L0r=l(),Do=a("div"),f(fL.$$.fragment),B0r=l(),P5e=a("p"),x0r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),k0r=l(),$n=a("p"),R0r=o("The model class to instantiate is selected based on the "),$5e=a("code"),S0r=o("model_type"),P0r=o(` property of the config object (either
passed as an argument or loaded from `),I5e=a("code"),$0r=o("pretrained_model_name_or_path"),I0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D5e=a("code"),D0r=o("pretrained_model_name_or_path"),j0r=o(":"),N0r=l(),j5e=a("ul"),E4=a("li"),N5e=a("strong"),q0r=o("vision-encoder-decoder"),G0r=o(" \u2014 "),$V=a("a"),O0r=o("FlaxVisionEncoderDecoderModel"),X0r=o(" (Vision Encoder decoder model)"),V0r=l(),q5e=a("p"),z0r=o("Examples:"),W0r=l(),f(mL.$$.fragment),this.h()},l(c){const u=Nbt('[data-svelte="svelte-1phssyn"]',document.head);J=n(u,"META",{name:!0,content:!0}),u.forEach(t),Be=i(c),de=n(c,"H1",{class:!0});var gL=s(de);me=n(gL,"A",{id:!0,class:!0,href:!0});var G5e=s(me);no=n(G5e,"SPAN",{});var O5e=s(no);m(ce.$$.fragment,O5e),O5e.forEach(t),G5e.forEach(t),ue=i(gL),Go=n(gL,"SPAN",{});var H0r=s(Go);Bi=r(H0r,"Auto Classes"),H0r.forEach(t),gL.forEach(t),yf=i(c),sa=n(c,"P",{});var Pxe=s(sa);xi=r(Pxe,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ki=n(Pxe,"CODE",{});var U0r=s(ki);EM=r(U0r,"from_pretrained()"),U0r.forEach(t),wf=r(Pxe,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Pxe.forEach(t),ye=i(c),io=n(c,"P",{});var y4=s(io);Ri=r(y4,"Instantiating one of "),In=n(y4,"A",{href:!0});var J0r=s(In);yM=r(J0r,"AutoConfig"),J0r.forEach(t),Dn=r(y4,", "),jn=n(y4,"A",{href:!0});var Y0r=s(jn);wM=r(Y0r,"AutoModel"),Y0r.forEach(t),Si=r(y4,`, and
`),Nn=n(y4,"A",{href:!0});var K0r=s(Nn);AM=r(K0r,"AutoTokenizer"),K0r.forEach(t),Pi=r(y4," will directly create a class of the relevant architecture. For instance"),y4.forEach(t),Af=i(c),m($a.$$.fragment,c),co=i(c),ge=n(c,"P",{});var $xe=s(ge);c8=r($xe,"will create a model that is an instance of "),$i=n($xe,"A",{href:!0});var Z0r=s($i);f8=r(Z0r,"BertModel"),Z0r.forEach(t),m8=r($xe,"."),$xe.forEach(t),Oo=i(c),Ia=n(c,"P",{});var Ixe=s(Ia);g8=r(Ixe,"There is one class of "),Lf=n(Ixe,"CODE",{});var eLr=s(Lf);h8=r(eLr,"AutoModel"),eLr.forEach(t),VRe=r(Ixe," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Ixe.forEach(t),P7e=i(c),Ii=n(c,"H2",{class:!0});var Dxe=s(Ii);Bf=n(Dxe,"A",{id:!0,class:!0,href:!0});var oLr=s(Bf);wW=n(oLr,"SPAN",{});var rLr=s(wW);m(LM.$$.fragment,rLr),rLr.forEach(t),oLr.forEach(t),zRe=i(Dxe),AW=n(Dxe,"SPAN",{});var tLr=s(AW);WRe=r(tLr,"Extending the Auto Classes"),tLr.forEach(t),Dxe.forEach(t),$7e=i(c),qn=n(c,"P",{});var IV=s(qn);QRe=r(IV,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),LW=n(IV,"CODE",{});var aLr=s(LW);HRe=r(aLr,"NewModel"),aLr.forEach(t),URe=r(IV,", make sure you have a "),BW=n(IV,"CODE",{});var nLr=s(BW);JRe=r(nLr,"NewModelConfig"),nLr.forEach(t),YRe=r(IV,` then you can add those to the auto
classes like this:`),IV.forEach(t),I7e=i(c),m(BM.$$.fragment,c),D7e=i(c),p8=n(c,"P",{});var sLr=s(p8);KRe=r(sLr,"You will then be able to use the auto classes like you would usually do!"),sLr.forEach(t),j7e=i(c),m(xf.$$.fragment,c),N7e=i(c),Di=n(c,"H2",{class:!0});var jxe=s(Di);kf=n(jxe,"A",{id:!0,class:!0,href:!0});var lLr=s(kf);xW=n(lLr,"SPAN",{});var iLr=s(xW);m(xM.$$.fragment,iLr),iLr.forEach(t),lLr.forEach(t),ZRe=i(jxe),kW=n(jxe,"SPAN",{});var dLr=s(kW);eSe=r(dLr,"AutoConfig"),dLr.forEach(t),jxe.forEach(t),q7e=i(c),Xo=n(c,"DIV",{class:!0});var Ds=s(Xo);m(kM.$$.fragment,Ds),oSe=i(Ds),RM=n(Ds,"P",{});var Nxe=s(RM);rSe=r(Nxe,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),_8=n(Nxe,"A",{href:!0});var cLr=s(_8);tSe=r(cLr,"from_pretrained()"),cLr.forEach(t),aSe=r(Nxe," class method."),Nxe.forEach(t),nSe=i(Ds),SM=n(Ds,"P",{});var qxe=s(SM);sSe=r(qxe,"This class cannot be instantiated directly using "),RW=n(qxe,"CODE",{});var fLr=s(RW);lSe=r(fLr,"__init__()"),fLr.forEach(t),iSe=r(qxe," (throws an error)."),qxe.forEach(t),dSe=i(Ds),fo=n(Ds,"DIV",{class:!0});var ia=s(fo);m(PM.$$.fragment,ia),cSe=i(ia),SW=n(ia,"P",{});var mLr=s(SW);fSe=r(mLr,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),mLr.forEach(t),mSe=i(ia),ji=n(ia,"P",{});var DV=s(ji);gSe=r(DV,"The configuration class to instantiate is selected based on the "),PW=n(DV,"CODE",{});var gLr=s(PW);hSe=r(gLr,"model_type"),gLr.forEach(t),pSe=r(DV,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),$W=n(DV,"CODE",{});var hLr=s($W);_Se=r(hLr,"pretrained_model_name_or_path"),hLr.forEach(t),uSe=r(DV,":"),DV.forEach(t),bSe=i(ia),v=n(ia,"UL",{});var T=s(v);Rf=n(T,"LI",{});var X5e=s(Rf);IW=n(X5e,"STRONG",{});var pLr=s(IW);vSe=r(pLr,"albert"),pLr.forEach(t),TSe=r(X5e," \u2014 "),u8=n(X5e,"A",{href:!0});var _Lr=s(u8);FSe=r(_Lr,"AlbertConfig"),_Lr.forEach(t),CSe=r(X5e," (ALBERT model)"),X5e.forEach(t),MSe=i(T),Sf=n(T,"LI",{});var V5e=s(Sf);DW=n(V5e,"STRONG",{});var uLr=s(DW);ESe=r(uLr,"bart"),uLr.forEach(t),ySe=r(V5e," \u2014 "),b8=n(V5e,"A",{href:!0});var bLr=s(b8);wSe=r(bLr,"BartConfig"),bLr.forEach(t),ASe=r(V5e," (BART model)"),V5e.forEach(t),LSe=i(T),Pf=n(T,"LI",{});var z5e=s(Pf);jW=n(z5e,"STRONG",{});var vLr=s(jW);BSe=r(vLr,"beit"),vLr.forEach(t),xSe=r(z5e," \u2014 "),v8=n(z5e,"A",{href:!0});var TLr=s(v8);kSe=r(TLr,"BeitConfig"),TLr.forEach(t),RSe=r(z5e," (BEiT model)"),z5e.forEach(t),SSe=i(T),$f=n(T,"LI",{});var W5e=s($f);NW=n(W5e,"STRONG",{});var FLr=s(NW);PSe=r(FLr,"bert"),FLr.forEach(t),$Se=r(W5e," \u2014 "),T8=n(W5e,"A",{href:!0});var CLr=s(T8);ISe=r(CLr,"BertConfig"),CLr.forEach(t),DSe=r(W5e," (BERT model)"),W5e.forEach(t),jSe=i(T),If=n(T,"LI",{});var Q5e=s(If);qW=n(Q5e,"STRONG",{});var MLr=s(qW);NSe=r(MLr,"bert-generation"),MLr.forEach(t),qSe=r(Q5e," \u2014 "),F8=n(Q5e,"A",{href:!0});var ELr=s(F8);GSe=r(ELr,"BertGenerationConfig"),ELr.forEach(t),OSe=r(Q5e," (Bert Generation model)"),Q5e.forEach(t),XSe=i(T),Df=n(T,"LI",{});var H5e=s(Df);GW=n(H5e,"STRONG",{});var yLr=s(GW);VSe=r(yLr,"big_bird"),yLr.forEach(t),zSe=r(H5e," \u2014 "),C8=n(H5e,"A",{href:!0});var wLr=s(C8);WSe=r(wLr,"BigBirdConfig"),wLr.forEach(t),QSe=r(H5e," (BigBird model)"),H5e.forEach(t),HSe=i(T),jf=n(T,"LI",{});var U5e=s(jf);OW=n(U5e,"STRONG",{});var ALr=s(OW);USe=r(ALr,"bigbird_pegasus"),ALr.forEach(t),JSe=r(U5e," \u2014 "),M8=n(U5e,"A",{href:!0});var LLr=s(M8);YSe=r(LLr,"BigBirdPegasusConfig"),LLr.forEach(t),KSe=r(U5e," (BigBirdPegasus model)"),U5e.forEach(t),ZSe=i(T),Nf=n(T,"LI",{});var J5e=s(Nf);XW=n(J5e,"STRONG",{});var BLr=s(XW);ePe=r(BLr,"blenderbot"),BLr.forEach(t),oPe=r(J5e," \u2014 "),E8=n(J5e,"A",{href:!0});var xLr=s(E8);rPe=r(xLr,"BlenderbotConfig"),xLr.forEach(t),tPe=r(J5e," (Blenderbot model)"),J5e.forEach(t),aPe=i(T),qf=n(T,"LI",{});var Y5e=s(qf);VW=n(Y5e,"STRONG",{});var kLr=s(VW);nPe=r(kLr,"blenderbot-small"),kLr.forEach(t),sPe=r(Y5e," \u2014 "),y8=n(Y5e,"A",{href:!0});var RLr=s(y8);lPe=r(RLr,"BlenderbotSmallConfig"),RLr.forEach(t),iPe=r(Y5e," (BlenderbotSmall model)"),Y5e.forEach(t),dPe=i(T),Gf=n(T,"LI",{});var K5e=s(Gf);zW=n(K5e,"STRONG",{});var SLr=s(zW);cPe=r(SLr,"camembert"),SLr.forEach(t),fPe=r(K5e," \u2014 "),w8=n(K5e,"A",{href:!0});var PLr=s(w8);mPe=r(PLr,"CamembertConfig"),PLr.forEach(t),gPe=r(K5e," (CamemBERT model)"),K5e.forEach(t),hPe=i(T),Of=n(T,"LI",{});var Z5e=s(Of);WW=n(Z5e,"STRONG",{});var $Lr=s(WW);pPe=r($Lr,"canine"),$Lr.forEach(t),_Pe=r(Z5e," \u2014 "),A8=n(Z5e,"A",{href:!0});var ILr=s(A8);uPe=r(ILr,"CanineConfig"),ILr.forEach(t),bPe=r(Z5e," (Canine model)"),Z5e.forEach(t),vPe=i(T),Xf=n(T,"LI",{});var eve=s(Xf);QW=n(eve,"STRONG",{});var DLr=s(QW);TPe=r(DLr,"clip"),DLr.forEach(t),FPe=r(eve," \u2014 "),L8=n(eve,"A",{href:!0});var jLr=s(L8);CPe=r(jLr,"CLIPConfig"),jLr.forEach(t),MPe=r(eve," (CLIP model)"),eve.forEach(t),EPe=i(T),Vf=n(T,"LI",{});var ove=s(Vf);HW=n(ove,"STRONG",{});var NLr=s(HW);yPe=r(NLr,"convbert"),NLr.forEach(t),wPe=r(ove," \u2014 "),B8=n(ove,"A",{href:!0});var qLr=s(B8);APe=r(qLr,"ConvBertConfig"),qLr.forEach(t),LPe=r(ove," (ConvBERT model)"),ove.forEach(t),BPe=i(T),zf=n(T,"LI",{});var rve=s(zf);UW=n(rve,"STRONG",{});var GLr=s(UW);xPe=r(GLr,"convnext"),GLr.forEach(t),kPe=r(rve," \u2014 "),x8=n(rve,"A",{href:!0});var OLr=s(x8);RPe=r(OLr,"ConvNextConfig"),OLr.forEach(t),SPe=r(rve," (ConvNext model)"),rve.forEach(t),PPe=i(T),Wf=n(T,"LI",{});var tve=s(Wf);JW=n(tve,"STRONG",{});var XLr=s(JW);$Pe=r(XLr,"ctrl"),XLr.forEach(t),IPe=r(tve," \u2014 "),k8=n(tve,"A",{href:!0});var VLr=s(k8);DPe=r(VLr,"CTRLConfig"),VLr.forEach(t),jPe=r(tve," (CTRL model)"),tve.forEach(t),NPe=i(T),Qf=n(T,"LI",{});var ave=s(Qf);YW=n(ave,"STRONG",{});var zLr=s(YW);qPe=r(zLr,"data2vec-audio"),zLr.forEach(t),GPe=r(ave," \u2014 "),R8=n(ave,"A",{href:!0});var WLr=s(R8);OPe=r(WLr,"Data2VecAudioConfig"),WLr.forEach(t),XPe=r(ave," (Data2VecAudio model)"),ave.forEach(t),VPe=i(T),Hf=n(T,"LI",{});var nve=s(Hf);KW=n(nve,"STRONG",{});var QLr=s(KW);zPe=r(QLr,"data2vec-text"),QLr.forEach(t),WPe=r(nve," \u2014 "),S8=n(nve,"A",{href:!0});var HLr=s(S8);QPe=r(HLr,"Data2VecTextConfig"),HLr.forEach(t),HPe=r(nve," (Data2VecText model)"),nve.forEach(t),UPe=i(T),Uf=n(T,"LI",{});var sve=s(Uf);ZW=n(sve,"STRONG",{});var ULr=s(ZW);JPe=r(ULr,"deberta"),ULr.forEach(t),YPe=r(sve," \u2014 "),P8=n(sve,"A",{href:!0});var JLr=s(P8);KPe=r(JLr,"DebertaConfig"),JLr.forEach(t),ZPe=r(sve," (DeBERTa model)"),sve.forEach(t),e$e=i(T),Jf=n(T,"LI",{});var lve=s(Jf);eQ=n(lve,"STRONG",{});var YLr=s(eQ);o$e=r(YLr,"deberta-v2"),YLr.forEach(t),r$e=r(lve," \u2014 "),$8=n(lve,"A",{href:!0});var KLr=s($8);t$e=r(KLr,"DebertaV2Config"),KLr.forEach(t),a$e=r(lve," (DeBERTa-v2 model)"),lve.forEach(t),n$e=i(T),Yf=n(T,"LI",{});var ive=s(Yf);oQ=n(ive,"STRONG",{});var ZLr=s(oQ);s$e=r(ZLr,"deit"),ZLr.forEach(t),l$e=r(ive," \u2014 "),I8=n(ive,"A",{href:!0});var e8r=s(I8);i$e=r(e8r,"DeiTConfig"),e8r.forEach(t),d$e=r(ive," (DeiT model)"),ive.forEach(t),c$e=i(T),Kf=n(T,"LI",{});var dve=s(Kf);rQ=n(dve,"STRONG",{});var o8r=s(rQ);f$e=r(o8r,"detr"),o8r.forEach(t),m$e=r(dve," \u2014 "),D8=n(dve,"A",{href:!0});var r8r=s(D8);g$e=r(r8r,"DetrConfig"),r8r.forEach(t),h$e=r(dve," (DETR model)"),dve.forEach(t),p$e=i(T),Zf=n(T,"LI",{});var cve=s(Zf);tQ=n(cve,"STRONG",{});var t8r=s(tQ);_$e=r(t8r,"distilbert"),t8r.forEach(t),u$e=r(cve," \u2014 "),j8=n(cve,"A",{href:!0});var a8r=s(j8);b$e=r(a8r,"DistilBertConfig"),a8r.forEach(t),v$e=r(cve," (DistilBERT model)"),cve.forEach(t),T$e=i(T),em=n(T,"LI",{});var fve=s(em);aQ=n(fve,"STRONG",{});var n8r=s(aQ);F$e=r(n8r,"dpr"),n8r.forEach(t),C$e=r(fve," \u2014 "),N8=n(fve,"A",{href:!0});var s8r=s(N8);M$e=r(s8r,"DPRConfig"),s8r.forEach(t),E$e=r(fve," (DPR model)"),fve.forEach(t),y$e=i(T),om=n(T,"LI",{});var mve=s(om);nQ=n(mve,"STRONG",{});var l8r=s(nQ);w$e=r(l8r,"electra"),l8r.forEach(t),A$e=r(mve," \u2014 "),q8=n(mve,"A",{href:!0});var i8r=s(q8);L$e=r(i8r,"ElectraConfig"),i8r.forEach(t),B$e=r(mve," (ELECTRA model)"),mve.forEach(t),x$e=i(T),rm=n(T,"LI",{});var gve=s(rm);sQ=n(gve,"STRONG",{});var d8r=s(sQ);k$e=r(d8r,"encoder-decoder"),d8r.forEach(t),R$e=r(gve," \u2014 "),G8=n(gve,"A",{href:!0});var c8r=s(G8);S$e=r(c8r,"EncoderDecoderConfig"),c8r.forEach(t),P$e=r(gve," (Encoder decoder model)"),gve.forEach(t),$$e=i(T),tm=n(T,"LI",{});var hve=s(tm);lQ=n(hve,"STRONG",{});var f8r=s(lQ);I$e=r(f8r,"flaubert"),f8r.forEach(t),D$e=r(hve," \u2014 "),O8=n(hve,"A",{href:!0});var m8r=s(O8);j$e=r(m8r,"FlaubertConfig"),m8r.forEach(t),N$e=r(hve," (FlauBERT model)"),hve.forEach(t),q$e=i(T),am=n(T,"LI",{});var pve=s(am);iQ=n(pve,"STRONG",{});var g8r=s(iQ);G$e=r(g8r,"fnet"),g8r.forEach(t),O$e=r(pve," \u2014 "),X8=n(pve,"A",{href:!0});var h8r=s(X8);X$e=r(h8r,"FNetConfig"),h8r.forEach(t),V$e=r(pve," (FNet model)"),pve.forEach(t),z$e=i(T),nm=n(T,"LI",{});var _ve=s(nm);dQ=n(_ve,"STRONG",{});var p8r=s(dQ);W$e=r(p8r,"fsmt"),p8r.forEach(t),Q$e=r(_ve," \u2014 "),V8=n(_ve,"A",{href:!0});var _8r=s(V8);H$e=r(_8r,"FSMTConfig"),_8r.forEach(t),U$e=r(_ve," (FairSeq Machine-Translation model)"),_ve.forEach(t),J$e=i(T),sm=n(T,"LI",{});var uve=s(sm);cQ=n(uve,"STRONG",{});var u8r=s(cQ);Y$e=r(u8r,"funnel"),u8r.forEach(t),K$e=r(uve," \u2014 "),z8=n(uve,"A",{href:!0});var b8r=s(z8);Z$e=r(b8r,"FunnelConfig"),b8r.forEach(t),eIe=r(uve," (Funnel Transformer model)"),uve.forEach(t),oIe=i(T),lm=n(T,"LI",{});var bve=s(lm);fQ=n(bve,"STRONG",{});var v8r=s(fQ);rIe=r(v8r,"gpt2"),v8r.forEach(t),tIe=r(bve," \u2014 "),W8=n(bve,"A",{href:!0});var T8r=s(W8);aIe=r(T8r,"GPT2Config"),T8r.forEach(t),nIe=r(bve," (OpenAI GPT-2 model)"),bve.forEach(t),sIe=i(T),im=n(T,"LI",{});var vve=s(im);mQ=n(vve,"STRONG",{});var F8r=s(mQ);lIe=r(F8r,"gpt_neo"),F8r.forEach(t),iIe=r(vve," \u2014 "),Q8=n(vve,"A",{href:!0});var C8r=s(Q8);dIe=r(C8r,"GPTNeoConfig"),C8r.forEach(t),cIe=r(vve," (GPT Neo model)"),vve.forEach(t),fIe=i(T),dm=n(T,"LI",{});var Tve=s(dm);gQ=n(Tve,"STRONG",{});var M8r=s(gQ);mIe=r(M8r,"gptj"),M8r.forEach(t),gIe=r(Tve," \u2014 "),H8=n(Tve,"A",{href:!0});var E8r=s(H8);hIe=r(E8r,"GPTJConfig"),E8r.forEach(t),pIe=r(Tve," (GPT-J model)"),Tve.forEach(t),_Ie=i(T),cm=n(T,"LI",{});var Fve=s(cm);hQ=n(Fve,"STRONG",{});var y8r=s(hQ);uIe=r(y8r,"hubert"),y8r.forEach(t),bIe=r(Fve," \u2014 "),U8=n(Fve,"A",{href:!0});var w8r=s(U8);vIe=r(w8r,"HubertConfig"),w8r.forEach(t),TIe=r(Fve," (Hubert model)"),Fve.forEach(t),FIe=i(T),fm=n(T,"LI",{});var Cve=s(fm);pQ=n(Cve,"STRONG",{});var A8r=s(pQ);CIe=r(A8r,"ibert"),A8r.forEach(t),MIe=r(Cve," \u2014 "),J8=n(Cve,"A",{href:!0});var L8r=s(J8);EIe=r(L8r,"IBertConfig"),L8r.forEach(t),yIe=r(Cve," (I-BERT model)"),Cve.forEach(t),wIe=i(T),mm=n(T,"LI",{});var Mve=s(mm);_Q=n(Mve,"STRONG",{});var B8r=s(_Q);AIe=r(B8r,"imagegpt"),B8r.forEach(t),LIe=r(Mve," \u2014 "),Y8=n(Mve,"A",{href:!0});var x8r=s(Y8);BIe=r(x8r,"ImageGPTConfig"),x8r.forEach(t),xIe=r(Mve," (ImageGPT model)"),Mve.forEach(t),kIe=i(T),gm=n(T,"LI",{});var Eve=s(gm);uQ=n(Eve,"STRONG",{});var k8r=s(uQ);RIe=r(k8r,"layoutlm"),k8r.forEach(t),SIe=r(Eve," \u2014 "),K8=n(Eve,"A",{href:!0});var R8r=s(K8);PIe=r(R8r,"LayoutLMConfig"),R8r.forEach(t),$Ie=r(Eve," (LayoutLM model)"),Eve.forEach(t),IIe=i(T),hm=n(T,"LI",{});var yve=s(hm);bQ=n(yve,"STRONG",{});var S8r=s(bQ);DIe=r(S8r,"layoutlmv2"),S8r.forEach(t),jIe=r(yve," \u2014 "),Z8=n(yve,"A",{href:!0});var P8r=s(Z8);NIe=r(P8r,"LayoutLMv2Config"),P8r.forEach(t),qIe=r(yve," (LayoutLMv2 model)"),yve.forEach(t),GIe=i(T),pm=n(T,"LI",{});var wve=s(pm);vQ=n(wve,"STRONG",{});var $8r=s(vQ);OIe=r($8r,"led"),$8r.forEach(t),XIe=r(wve," \u2014 "),e7=n(wve,"A",{href:!0});var I8r=s(e7);VIe=r(I8r,"LEDConfig"),I8r.forEach(t),zIe=r(wve," (LED model)"),wve.forEach(t),WIe=i(T),_m=n(T,"LI",{});var Ave=s(_m);TQ=n(Ave,"STRONG",{});var D8r=s(TQ);QIe=r(D8r,"longformer"),D8r.forEach(t),HIe=r(Ave," \u2014 "),o7=n(Ave,"A",{href:!0});var j8r=s(o7);UIe=r(j8r,"LongformerConfig"),j8r.forEach(t),JIe=r(Ave," (Longformer model)"),Ave.forEach(t),YIe=i(T),um=n(T,"LI",{});var Lve=s(um);FQ=n(Lve,"STRONG",{});var N8r=s(FQ);KIe=r(N8r,"luke"),N8r.forEach(t),ZIe=r(Lve," \u2014 "),r7=n(Lve,"A",{href:!0});var q8r=s(r7);eDe=r(q8r,"LukeConfig"),q8r.forEach(t),oDe=r(Lve," (LUKE model)"),Lve.forEach(t),rDe=i(T),bm=n(T,"LI",{});var Bve=s(bm);CQ=n(Bve,"STRONG",{});var G8r=s(CQ);tDe=r(G8r,"lxmert"),G8r.forEach(t),aDe=r(Bve," \u2014 "),t7=n(Bve,"A",{href:!0});var O8r=s(t7);nDe=r(O8r,"LxmertConfig"),O8r.forEach(t),sDe=r(Bve," (LXMERT model)"),Bve.forEach(t),lDe=i(T),vm=n(T,"LI",{});var xve=s(vm);MQ=n(xve,"STRONG",{});var X8r=s(MQ);iDe=r(X8r,"m2m_100"),X8r.forEach(t),dDe=r(xve," \u2014 "),a7=n(xve,"A",{href:!0});var V8r=s(a7);cDe=r(V8r,"M2M100Config"),V8r.forEach(t),fDe=r(xve," (M2M100 model)"),xve.forEach(t),mDe=i(T),Tm=n(T,"LI",{});var kve=s(Tm);EQ=n(kve,"STRONG",{});var z8r=s(EQ);gDe=r(z8r,"marian"),z8r.forEach(t),hDe=r(kve," \u2014 "),n7=n(kve,"A",{href:!0});var W8r=s(n7);pDe=r(W8r,"MarianConfig"),W8r.forEach(t),_De=r(kve," (Marian model)"),kve.forEach(t),uDe=i(T),Fm=n(T,"LI",{});var Rve=s(Fm);yQ=n(Rve,"STRONG",{});var Q8r=s(yQ);bDe=r(Q8r,"maskformer"),Q8r.forEach(t),vDe=r(Rve," \u2014 "),s7=n(Rve,"A",{href:!0});var H8r=s(s7);TDe=r(H8r,"MaskFormerConfig"),H8r.forEach(t),FDe=r(Rve," (MaskFormer model)"),Rve.forEach(t),CDe=i(T),Cm=n(T,"LI",{});var Sve=s(Cm);wQ=n(Sve,"STRONG",{});var U8r=s(wQ);MDe=r(U8r,"mbart"),U8r.forEach(t),EDe=r(Sve," \u2014 "),l7=n(Sve,"A",{href:!0});var J8r=s(l7);yDe=r(J8r,"MBartConfig"),J8r.forEach(t),wDe=r(Sve," (mBART model)"),Sve.forEach(t),ADe=i(T),Mm=n(T,"LI",{});var Pve=s(Mm);AQ=n(Pve,"STRONG",{});var Y8r=s(AQ);LDe=r(Y8r,"megatron-bert"),Y8r.forEach(t),BDe=r(Pve," \u2014 "),i7=n(Pve,"A",{href:!0});var K8r=s(i7);xDe=r(K8r,"MegatronBertConfig"),K8r.forEach(t),kDe=r(Pve," (MegatronBert model)"),Pve.forEach(t),RDe=i(T),Em=n(T,"LI",{});var $ve=s(Em);LQ=n($ve,"STRONG",{});var Z8r=s(LQ);SDe=r(Z8r,"mobilebert"),Z8r.forEach(t),PDe=r($ve," \u2014 "),d7=n($ve,"A",{href:!0});var e7r=s(d7);$De=r(e7r,"MobileBertConfig"),e7r.forEach(t),IDe=r($ve," (MobileBERT model)"),$ve.forEach(t),DDe=i(T),ym=n(T,"LI",{});var Ive=s(ym);BQ=n(Ive,"STRONG",{});var o7r=s(BQ);jDe=r(o7r,"mpnet"),o7r.forEach(t),NDe=r(Ive," \u2014 "),c7=n(Ive,"A",{href:!0});var r7r=s(c7);qDe=r(r7r,"MPNetConfig"),r7r.forEach(t),GDe=r(Ive," (MPNet model)"),Ive.forEach(t),ODe=i(T),wm=n(T,"LI",{});var Dve=s(wm);xQ=n(Dve,"STRONG",{});var t7r=s(xQ);XDe=r(t7r,"mt5"),t7r.forEach(t),VDe=r(Dve," \u2014 "),f7=n(Dve,"A",{href:!0});var a7r=s(f7);zDe=r(a7r,"MT5Config"),a7r.forEach(t),WDe=r(Dve," (mT5 model)"),Dve.forEach(t),QDe=i(T),Am=n(T,"LI",{});var jve=s(Am);kQ=n(jve,"STRONG",{});var n7r=s(kQ);HDe=r(n7r,"nystromformer"),n7r.forEach(t),UDe=r(jve," \u2014 "),m7=n(jve,"A",{href:!0});var s7r=s(m7);JDe=r(s7r,"NystromformerConfig"),s7r.forEach(t),YDe=r(jve," (Nystromformer model)"),jve.forEach(t),KDe=i(T),Lm=n(T,"LI",{});var Nve=s(Lm);RQ=n(Nve,"STRONG",{});var l7r=s(RQ);ZDe=r(l7r,"openai-gpt"),l7r.forEach(t),eje=r(Nve," \u2014 "),g7=n(Nve,"A",{href:!0});var i7r=s(g7);oje=r(i7r,"OpenAIGPTConfig"),i7r.forEach(t),rje=r(Nve," (OpenAI GPT model)"),Nve.forEach(t),tje=i(T),Bm=n(T,"LI",{});var qve=s(Bm);SQ=n(qve,"STRONG",{});var d7r=s(SQ);aje=r(d7r,"pegasus"),d7r.forEach(t),nje=r(qve," \u2014 "),h7=n(qve,"A",{href:!0});var c7r=s(h7);sje=r(c7r,"PegasusConfig"),c7r.forEach(t),lje=r(qve," (Pegasus model)"),qve.forEach(t),ije=i(T),xm=n(T,"LI",{});var Gve=s(xm);PQ=n(Gve,"STRONG",{});var f7r=s(PQ);dje=r(f7r,"perceiver"),f7r.forEach(t),cje=r(Gve," \u2014 "),p7=n(Gve,"A",{href:!0});var m7r=s(p7);fje=r(m7r,"PerceiverConfig"),m7r.forEach(t),mje=r(Gve," (Perceiver model)"),Gve.forEach(t),gje=i(T),km=n(T,"LI",{});var Ove=s(km);$Q=n(Ove,"STRONG",{});var g7r=s($Q);hje=r(g7r,"plbart"),g7r.forEach(t),pje=r(Ove," \u2014 "),_7=n(Ove,"A",{href:!0});var h7r=s(_7);_je=r(h7r,"PLBartConfig"),h7r.forEach(t),uje=r(Ove," (PLBart model)"),Ove.forEach(t),bje=i(T),Rm=n(T,"LI",{});var Xve=s(Rm);IQ=n(Xve,"STRONG",{});var p7r=s(IQ);vje=r(p7r,"poolformer"),p7r.forEach(t),Tje=r(Xve," \u2014 "),u7=n(Xve,"A",{href:!0});var _7r=s(u7);Fje=r(_7r,"PoolFormerConfig"),_7r.forEach(t),Cje=r(Xve," (PoolFormer model)"),Xve.forEach(t),Mje=i(T),Sm=n(T,"LI",{});var Vve=s(Sm);DQ=n(Vve,"STRONG",{});var u7r=s(DQ);Eje=r(u7r,"prophetnet"),u7r.forEach(t),yje=r(Vve," \u2014 "),b7=n(Vve,"A",{href:!0});var b7r=s(b7);wje=r(b7r,"ProphetNetConfig"),b7r.forEach(t),Aje=r(Vve," (ProphetNet model)"),Vve.forEach(t),Lje=i(T),Pm=n(T,"LI",{});var zve=s(Pm);jQ=n(zve,"STRONG",{});var v7r=s(jQ);Bje=r(v7r,"qdqbert"),v7r.forEach(t),xje=r(zve," \u2014 "),v7=n(zve,"A",{href:!0});var T7r=s(v7);kje=r(T7r,"QDQBertConfig"),T7r.forEach(t),Rje=r(zve," (QDQBert model)"),zve.forEach(t),Sje=i(T),$m=n(T,"LI",{});var Wve=s($m);NQ=n(Wve,"STRONG",{});var F7r=s(NQ);Pje=r(F7r,"rag"),F7r.forEach(t),$je=r(Wve," \u2014 "),T7=n(Wve,"A",{href:!0});var C7r=s(T7);Ije=r(C7r,"RagConfig"),C7r.forEach(t),Dje=r(Wve," (RAG model)"),Wve.forEach(t),jje=i(T),Im=n(T,"LI",{});var Qve=s(Im);qQ=n(Qve,"STRONG",{});var M7r=s(qQ);Nje=r(M7r,"realm"),M7r.forEach(t),qje=r(Qve," \u2014 "),F7=n(Qve,"A",{href:!0});var E7r=s(F7);Gje=r(E7r,"RealmConfig"),E7r.forEach(t),Oje=r(Qve," (Realm model)"),Qve.forEach(t),Xje=i(T),Dm=n(T,"LI",{});var Hve=s(Dm);GQ=n(Hve,"STRONG",{});var y7r=s(GQ);Vje=r(y7r,"reformer"),y7r.forEach(t),zje=r(Hve," \u2014 "),C7=n(Hve,"A",{href:!0});var w7r=s(C7);Wje=r(w7r,"ReformerConfig"),w7r.forEach(t),Qje=r(Hve," (Reformer model)"),Hve.forEach(t),Hje=i(T),jm=n(T,"LI",{});var Uve=s(jm);OQ=n(Uve,"STRONG",{});var A7r=s(OQ);Uje=r(A7r,"rembert"),A7r.forEach(t),Jje=r(Uve," \u2014 "),M7=n(Uve,"A",{href:!0});var L7r=s(M7);Yje=r(L7r,"RemBertConfig"),L7r.forEach(t),Kje=r(Uve," (RemBERT model)"),Uve.forEach(t),Zje=i(T),Nm=n(T,"LI",{});var Jve=s(Nm);XQ=n(Jve,"STRONG",{});var B7r=s(XQ);eNe=r(B7r,"retribert"),B7r.forEach(t),oNe=r(Jve," \u2014 "),E7=n(Jve,"A",{href:!0});var x7r=s(E7);rNe=r(x7r,"RetriBertConfig"),x7r.forEach(t),tNe=r(Jve," (RetriBERT model)"),Jve.forEach(t),aNe=i(T),qm=n(T,"LI",{});var Yve=s(qm);VQ=n(Yve,"STRONG",{});var k7r=s(VQ);nNe=r(k7r,"roberta"),k7r.forEach(t),sNe=r(Yve," \u2014 "),y7=n(Yve,"A",{href:!0});var R7r=s(y7);lNe=r(R7r,"RobertaConfig"),R7r.forEach(t),iNe=r(Yve," (RoBERTa model)"),Yve.forEach(t),dNe=i(T),Gm=n(T,"LI",{});var Kve=s(Gm);zQ=n(Kve,"STRONG",{});var S7r=s(zQ);cNe=r(S7r,"roformer"),S7r.forEach(t),fNe=r(Kve," \u2014 "),w7=n(Kve,"A",{href:!0});var P7r=s(w7);mNe=r(P7r,"RoFormerConfig"),P7r.forEach(t),gNe=r(Kve," (RoFormer model)"),Kve.forEach(t),hNe=i(T),Om=n(T,"LI",{});var Zve=s(Om);WQ=n(Zve,"STRONG",{});var $7r=s(WQ);pNe=r($7r,"segformer"),$7r.forEach(t),_Ne=r(Zve," \u2014 "),A7=n(Zve,"A",{href:!0});var I7r=s(A7);uNe=r(I7r,"SegformerConfig"),I7r.forEach(t),bNe=r(Zve," (SegFormer model)"),Zve.forEach(t),vNe=i(T),Xm=n(T,"LI",{});var eTe=s(Xm);QQ=n(eTe,"STRONG",{});var D7r=s(QQ);TNe=r(D7r,"sew"),D7r.forEach(t),FNe=r(eTe," \u2014 "),L7=n(eTe,"A",{href:!0});var j7r=s(L7);CNe=r(j7r,"SEWConfig"),j7r.forEach(t),MNe=r(eTe," (SEW model)"),eTe.forEach(t),ENe=i(T),Vm=n(T,"LI",{});var oTe=s(Vm);HQ=n(oTe,"STRONG",{});var N7r=s(HQ);yNe=r(N7r,"sew-d"),N7r.forEach(t),wNe=r(oTe," \u2014 "),B7=n(oTe,"A",{href:!0});var q7r=s(B7);ANe=r(q7r,"SEWDConfig"),q7r.forEach(t),LNe=r(oTe," (SEW-D model)"),oTe.forEach(t),BNe=i(T),zm=n(T,"LI",{});var rTe=s(zm);UQ=n(rTe,"STRONG",{});var G7r=s(UQ);xNe=r(G7r,"speech-encoder-decoder"),G7r.forEach(t),kNe=r(rTe," \u2014 "),x7=n(rTe,"A",{href:!0});var O7r=s(x7);RNe=r(O7r,"SpeechEncoderDecoderConfig"),O7r.forEach(t),SNe=r(rTe," (Speech Encoder decoder model)"),rTe.forEach(t),PNe=i(T),Wm=n(T,"LI",{});var tTe=s(Wm);JQ=n(tTe,"STRONG",{});var X7r=s(JQ);$Ne=r(X7r,"speech_to_text"),X7r.forEach(t),INe=r(tTe," \u2014 "),k7=n(tTe,"A",{href:!0});var V7r=s(k7);DNe=r(V7r,"Speech2TextConfig"),V7r.forEach(t),jNe=r(tTe," (Speech2Text model)"),tTe.forEach(t),NNe=i(T),Qm=n(T,"LI",{});var aTe=s(Qm);YQ=n(aTe,"STRONG",{});var z7r=s(YQ);qNe=r(z7r,"speech_to_text_2"),z7r.forEach(t),GNe=r(aTe," \u2014 "),R7=n(aTe,"A",{href:!0});var W7r=s(R7);ONe=r(W7r,"Speech2Text2Config"),W7r.forEach(t),XNe=r(aTe," (Speech2Text2 model)"),aTe.forEach(t),VNe=i(T),Hm=n(T,"LI",{});var nTe=s(Hm);KQ=n(nTe,"STRONG",{});var Q7r=s(KQ);zNe=r(Q7r,"splinter"),Q7r.forEach(t),WNe=r(nTe," \u2014 "),S7=n(nTe,"A",{href:!0});var H7r=s(S7);QNe=r(H7r,"SplinterConfig"),H7r.forEach(t),HNe=r(nTe," (Splinter model)"),nTe.forEach(t),UNe=i(T),Um=n(T,"LI",{});var sTe=s(Um);ZQ=n(sTe,"STRONG",{});var U7r=s(ZQ);JNe=r(U7r,"squeezebert"),U7r.forEach(t),YNe=r(sTe," \u2014 "),P7=n(sTe,"A",{href:!0});var J7r=s(P7);KNe=r(J7r,"SqueezeBertConfig"),J7r.forEach(t),ZNe=r(sTe," (SqueezeBERT model)"),sTe.forEach(t),eqe=i(T),Jm=n(T,"LI",{});var lTe=s(Jm);eH=n(lTe,"STRONG",{});var Y7r=s(eH);oqe=r(Y7r,"swin"),Y7r.forEach(t),rqe=r(lTe," \u2014 "),$7=n(lTe,"A",{href:!0});var K7r=s($7);tqe=r(K7r,"SwinConfig"),K7r.forEach(t),aqe=r(lTe," (Swin model)"),lTe.forEach(t),nqe=i(T),Ym=n(T,"LI",{});var iTe=s(Ym);oH=n(iTe,"STRONG",{});var Z7r=s(oH);sqe=r(Z7r,"t5"),Z7r.forEach(t),lqe=r(iTe," \u2014 "),I7=n(iTe,"A",{href:!0});var eBr=s(I7);iqe=r(eBr,"T5Config"),eBr.forEach(t),dqe=r(iTe," (T5 model)"),iTe.forEach(t),cqe=i(T),Km=n(T,"LI",{});var dTe=s(Km);rH=n(dTe,"STRONG",{});var oBr=s(rH);fqe=r(oBr,"tapas"),oBr.forEach(t),mqe=r(dTe," \u2014 "),D7=n(dTe,"A",{href:!0});var rBr=s(D7);gqe=r(rBr,"TapasConfig"),rBr.forEach(t),hqe=r(dTe," (TAPAS model)"),dTe.forEach(t),pqe=i(T),Zm=n(T,"LI",{});var cTe=s(Zm);tH=n(cTe,"STRONG",{});var tBr=s(tH);_qe=r(tBr,"transfo-xl"),tBr.forEach(t),uqe=r(cTe," \u2014 "),j7=n(cTe,"A",{href:!0});var aBr=s(j7);bqe=r(aBr,"TransfoXLConfig"),aBr.forEach(t),vqe=r(cTe," (Transformer-XL model)"),cTe.forEach(t),Tqe=i(T),eg=n(T,"LI",{});var fTe=s(eg);aH=n(fTe,"STRONG",{});var nBr=s(aH);Fqe=r(nBr,"trocr"),nBr.forEach(t),Cqe=r(fTe," \u2014 "),N7=n(fTe,"A",{href:!0});var sBr=s(N7);Mqe=r(sBr,"TrOCRConfig"),sBr.forEach(t),Eqe=r(fTe," (TrOCR model)"),fTe.forEach(t),yqe=i(T),og=n(T,"LI",{});var mTe=s(og);nH=n(mTe,"STRONG",{});var lBr=s(nH);wqe=r(lBr,"unispeech"),lBr.forEach(t),Aqe=r(mTe," \u2014 "),q7=n(mTe,"A",{href:!0});var iBr=s(q7);Lqe=r(iBr,"UniSpeechConfig"),iBr.forEach(t),Bqe=r(mTe," (UniSpeech model)"),mTe.forEach(t),xqe=i(T),rg=n(T,"LI",{});var gTe=s(rg);sH=n(gTe,"STRONG",{});var dBr=s(sH);kqe=r(dBr,"unispeech-sat"),dBr.forEach(t),Rqe=r(gTe," \u2014 "),G7=n(gTe,"A",{href:!0});var cBr=s(G7);Sqe=r(cBr,"UniSpeechSatConfig"),cBr.forEach(t),Pqe=r(gTe," (UniSpeechSat model)"),gTe.forEach(t),$qe=i(T),tg=n(T,"LI",{});var hTe=s(tg);lH=n(hTe,"STRONG",{});var fBr=s(lH);Iqe=r(fBr,"vilt"),fBr.forEach(t),Dqe=r(hTe," \u2014 "),O7=n(hTe,"A",{href:!0});var mBr=s(O7);jqe=r(mBr,"ViltConfig"),mBr.forEach(t),Nqe=r(hTe," (ViLT model)"),hTe.forEach(t),qqe=i(T),ag=n(T,"LI",{});var pTe=s(ag);iH=n(pTe,"STRONG",{});var gBr=s(iH);Gqe=r(gBr,"vision-encoder-decoder"),gBr.forEach(t),Oqe=r(pTe," \u2014 "),X7=n(pTe,"A",{href:!0});var hBr=s(X7);Xqe=r(hBr,"VisionEncoderDecoderConfig"),hBr.forEach(t),Vqe=r(pTe," (Vision Encoder decoder model)"),pTe.forEach(t),zqe=i(T),ng=n(T,"LI",{});var _Te=s(ng);dH=n(_Te,"STRONG",{});var pBr=s(dH);Wqe=r(pBr,"vision-text-dual-encoder"),pBr.forEach(t),Qqe=r(_Te," \u2014 "),V7=n(_Te,"A",{href:!0});var _Br=s(V7);Hqe=r(_Br,"VisionTextDualEncoderConfig"),_Br.forEach(t),Uqe=r(_Te," (VisionTextDualEncoder model)"),_Te.forEach(t),Jqe=i(T),sg=n(T,"LI",{});var uTe=s(sg);cH=n(uTe,"STRONG",{});var uBr=s(cH);Yqe=r(uBr,"visual_bert"),uBr.forEach(t),Kqe=r(uTe," \u2014 "),z7=n(uTe,"A",{href:!0});var bBr=s(z7);Zqe=r(bBr,"VisualBertConfig"),bBr.forEach(t),eGe=r(uTe," (VisualBert model)"),uTe.forEach(t),oGe=i(T),lg=n(T,"LI",{});var bTe=s(lg);fH=n(bTe,"STRONG",{});var vBr=s(fH);rGe=r(vBr,"vit"),vBr.forEach(t),tGe=r(bTe," \u2014 "),W7=n(bTe,"A",{href:!0});var TBr=s(W7);aGe=r(TBr,"ViTConfig"),TBr.forEach(t),nGe=r(bTe," (ViT model)"),bTe.forEach(t),sGe=i(T),ig=n(T,"LI",{});var vTe=s(ig);mH=n(vTe,"STRONG",{});var FBr=s(mH);lGe=r(FBr,"vit_mae"),FBr.forEach(t),iGe=r(vTe," \u2014 "),Q7=n(vTe,"A",{href:!0});var CBr=s(Q7);dGe=r(CBr,"ViTMAEConfig"),CBr.forEach(t),cGe=r(vTe," (ViTMAE model)"),vTe.forEach(t),fGe=i(T),dg=n(T,"LI",{});var TTe=s(dg);gH=n(TTe,"STRONG",{});var MBr=s(gH);mGe=r(MBr,"wav2vec2"),MBr.forEach(t),gGe=r(TTe," \u2014 "),H7=n(TTe,"A",{href:!0});var EBr=s(H7);hGe=r(EBr,"Wav2Vec2Config"),EBr.forEach(t),pGe=r(TTe," (Wav2Vec2 model)"),TTe.forEach(t),_Ge=i(T),cg=n(T,"LI",{});var FTe=s(cg);hH=n(FTe,"STRONG",{});var yBr=s(hH);uGe=r(yBr,"wavlm"),yBr.forEach(t),bGe=r(FTe," \u2014 "),U7=n(FTe,"A",{href:!0});var wBr=s(U7);vGe=r(wBr,"WavLMConfig"),wBr.forEach(t),TGe=r(FTe," (WavLM model)"),FTe.forEach(t),FGe=i(T),fg=n(T,"LI",{});var CTe=s(fg);pH=n(CTe,"STRONG",{});var ABr=s(pH);CGe=r(ABr,"xglm"),ABr.forEach(t),MGe=r(CTe," \u2014 "),J7=n(CTe,"A",{href:!0});var LBr=s(J7);EGe=r(LBr,"XGLMConfig"),LBr.forEach(t),yGe=r(CTe," (XGLM model)"),CTe.forEach(t),wGe=i(T),mg=n(T,"LI",{});var MTe=s(mg);_H=n(MTe,"STRONG",{});var BBr=s(_H);AGe=r(BBr,"xlm"),BBr.forEach(t),LGe=r(MTe," \u2014 "),Y7=n(MTe,"A",{href:!0});var xBr=s(Y7);BGe=r(xBr,"XLMConfig"),xBr.forEach(t),xGe=r(MTe," (XLM model)"),MTe.forEach(t),kGe=i(T),gg=n(T,"LI",{});var ETe=s(gg);uH=n(ETe,"STRONG",{});var kBr=s(uH);RGe=r(kBr,"xlm-prophetnet"),kBr.forEach(t),SGe=r(ETe," \u2014 "),K7=n(ETe,"A",{href:!0});var RBr=s(K7);PGe=r(RBr,"XLMProphetNetConfig"),RBr.forEach(t),$Ge=r(ETe," (XLMProphetNet model)"),ETe.forEach(t),IGe=i(T),hg=n(T,"LI",{});var yTe=s(hg);bH=n(yTe,"STRONG",{});var SBr=s(bH);DGe=r(SBr,"xlm-roberta"),SBr.forEach(t),jGe=r(yTe," \u2014 "),Z7=n(yTe,"A",{href:!0});var PBr=s(Z7);NGe=r(PBr,"XLMRobertaConfig"),PBr.forEach(t),qGe=r(yTe," (XLM-RoBERTa model)"),yTe.forEach(t),GGe=i(T),pg=n(T,"LI",{});var wTe=s(pg);vH=n(wTe,"STRONG",{});var $Br=s(vH);OGe=r($Br,"xlm-roberta-xl"),$Br.forEach(t),XGe=r(wTe," \u2014 "),eB=n(wTe,"A",{href:!0});var IBr=s(eB);VGe=r(IBr,"XLMRobertaXLConfig"),IBr.forEach(t),zGe=r(wTe," (XLM-RoBERTa-XL model)"),wTe.forEach(t),WGe=i(T),_g=n(T,"LI",{});var ATe=s(_g);TH=n(ATe,"STRONG",{});var DBr=s(TH);QGe=r(DBr,"xlnet"),DBr.forEach(t),HGe=r(ATe," \u2014 "),oB=n(ATe,"A",{href:!0});var jBr=s(oB);UGe=r(jBr,"XLNetConfig"),jBr.forEach(t),JGe=r(ATe," (XLNet model)"),ATe.forEach(t),YGe=i(T),ug=n(T,"LI",{});var LTe=s(ug);FH=n(LTe,"STRONG",{});var NBr=s(FH);KGe=r(NBr,"yoso"),NBr.forEach(t),ZGe=r(LTe," \u2014 "),rB=n(LTe,"A",{href:!0});var qBr=s(rB);eOe=r(qBr,"YosoConfig"),qBr.forEach(t),oOe=r(LTe," (YOSO model)"),LTe.forEach(t),T.forEach(t),rOe=i(ia),CH=n(ia,"P",{});var GBr=s(CH);tOe=r(GBr,"Examples:"),GBr.forEach(t),aOe=i(ia),m($M.$$.fragment,ia),ia.forEach(t),nOe=i(Ds),bg=n(Ds,"DIV",{class:!0});var Gxe=s(bg);m(IM.$$.fragment,Gxe),sOe=i(Gxe),MH=n(Gxe,"P",{});var OBr=s(MH);lOe=r(OBr,"Register a new configuration for this class."),OBr.forEach(t),Gxe.forEach(t),Ds.forEach(t),G7e=i(c),Ni=n(c,"H2",{class:!0});var Oxe=s(Ni);vg=n(Oxe,"A",{id:!0,class:!0,href:!0});var XBr=s(vg);EH=n(XBr,"SPAN",{});var VBr=s(EH);m(DM.$$.fragment,VBr),VBr.forEach(t),XBr.forEach(t),iOe=i(Oxe),yH=n(Oxe,"SPAN",{});var zBr=s(yH);dOe=r(zBr,"AutoTokenizer"),zBr.forEach(t),Oxe.forEach(t),O7e=i(c),Vo=n(c,"DIV",{class:!0});var js=s(Vo);m(jM.$$.fragment,js),cOe=i(js),NM=n(js,"P",{});var Xxe=s(NM);fOe=r(Xxe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),tB=n(Xxe,"A",{href:!0});var WBr=s(tB);mOe=r(WBr,"AutoTokenizer.from_pretrained()"),WBr.forEach(t),gOe=r(Xxe," class method."),Xxe.forEach(t),hOe=i(js),qM=n(js,"P",{});var Vxe=s(qM);pOe=r(Vxe,"This class cannot be instantiated directly using "),wH=n(Vxe,"CODE",{});var QBr=s(wH);_Oe=r(QBr,"__init__()"),QBr.forEach(t),uOe=r(Vxe," (throws an error)."),Vxe.forEach(t),bOe=i(js),mo=n(js,"DIV",{class:!0});var da=s(mo);m(GM.$$.fragment,da),vOe=i(da),AH=n(da,"P",{});var HBr=s(AH);TOe=r(HBr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),HBr.forEach(t),FOe=i(da),Da=n(da,"P",{});var w4=s(Da);COe=r(w4,"The tokenizer class to instantiate is selected based on the "),LH=n(w4,"CODE",{});var UBr=s(LH);MOe=r(UBr,"model_type"),UBr.forEach(t),EOe=r(w4,` property of the config object (either
passed as an argument or loaded from `),BH=n(w4,"CODE",{});var JBr=s(BH);yOe=r(JBr,"pretrained_model_name_or_path"),JBr.forEach(t),wOe=r(w4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xH=n(w4,"CODE",{});var YBr=s(xH);AOe=r(YBr,"pretrained_model_name_or_path"),YBr.forEach(t),LOe=r(w4,":"),w4.forEach(t),BOe=i(da),M=n(da,"UL",{});var y=s(M);Gn=n(y,"LI",{});var hL=s(Gn);kH=n(hL,"STRONG",{});var KBr=s(kH);xOe=r(KBr,"albert"),KBr.forEach(t),kOe=r(hL," \u2014 "),aB=n(hL,"A",{href:!0});var ZBr=s(aB);ROe=r(ZBr,"AlbertTokenizer"),ZBr.forEach(t),SOe=r(hL," or "),nB=n(hL,"A",{href:!0});var exr=s(nB);POe=r(exr,"AlbertTokenizerFast"),exr.forEach(t),$Oe=r(hL," (ALBERT model)"),hL.forEach(t),IOe=i(y),On=n(y,"LI",{});var pL=s(On);RH=n(pL,"STRONG",{});var oxr=s(RH);DOe=r(oxr,"bart"),oxr.forEach(t),jOe=r(pL," \u2014 "),sB=n(pL,"A",{href:!0});var rxr=s(sB);NOe=r(rxr,"BartTokenizer"),rxr.forEach(t),qOe=r(pL," or "),lB=n(pL,"A",{href:!0});var txr=s(lB);GOe=r(txr,"BartTokenizerFast"),txr.forEach(t),OOe=r(pL," (BART model)"),pL.forEach(t),XOe=i(y),Xn=n(y,"LI",{});var _L=s(Xn);SH=n(_L,"STRONG",{});var axr=s(SH);VOe=r(axr,"barthez"),axr.forEach(t),zOe=r(_L," \u2014 "),iB=n(_L,"A",{href:!0});var nxr=s(iB);WOe=r(nxr,"BarthezTokenizer"),nxr.forEach(t),QOe=r(_L," or "),dB=n(_L,"A",{href:!0});var sxr=s(dB);HOe=r(sxr,"BarthezTokenizerFast"),sxr.forEach(t),UOe=r(_L," (BARThez model)"),_L.forEach(t),JOe=i(y),Tg=n(y,"LI",{});var BTe=s(Tg);PH=n(BTe,"STRONG",{});var lxr=s(PH);YOe=r(lxr,"bartpho"),lxr.forEach(t),KOe=r(BTe," \u2014 "),cB=n(BTe,"A",{href:!0});var ixr=s(cB);ZOe=r(ixr,"BartphoTokenizer"),ixr.forEach(t),eXe=r(BTe," (BARTpho model)"),BTe.forEach(t),oXe=i(y),Vn=n(y,"LI",{});var uL=s(Vn);$H=n(uL,"STRONG",{});var dxr=s($H);rXe=r(dxr,"bert"),dxr.forEach(t),tXe=r(uL," \u2014 "),fB=n(uL,"A",{href:!0});var cxr=s(fB);aXe=r(cxr,"BertTokenizer"),cxr.forEach(t),nXe=r(uL," or "),mB=n(uL,"A",{href:!0});var fxr=s(mB);sXe=r(fxr,"BertTokenizerFast"),fxr.forEach(t),lXe=r(uL," (BERT model)"),uL.forEach(t),iXe=i(y),Fg=n(y,"LI",{});var xTe=s(Fg);IH=n(xTe,"STRONG",{});var mxr=s(IH);dXe=r(mxr,"bert-generation"),mxr.forEach(t),cXe=r(xTe," \u2014 "),gB=n(xTe,"A",{href:!0});var gxr=s(gB);fXe=r(gxr,"BertGenerationTokenizer"),gxr.forEach(t),mXe=r(xTe," (Bert Generation model)"),xTe.forEach(t),gXe=i(y),Cg=n(y,"LI",{});var kTe=s(Cg);DH=n(kTe,"STRONG",{});var hxr=s(DH);hXe=r(hxr,"bert-japanese"),hxr.forEach(t),pXe=r(kTe," \u2014 "),hB=n(kTe,"A",{href:!0});var pxr=s(hB);_Xe=r(pxr,"BertJapaneseTokenizer"),pxr.forEach(t),uXe=r(kTe," (BertJapanese model)"),kTe.forEach(t),bXe=i(y),Mg=n(y,"LI",{});var RTe=s(Mg);jH=n(RTe,"STRONG",{});var _xr=s(jH);vXe=r(_xr,"bertweet"),_xr.forEach(t),TXe=r(RTe," \u2014 "),pB=n(RTe,"A",{href:!0});var uxr=s(pB);FXe=r(uxr,"BertweetTokenizer"),uxr.forEach(t),CXe=r(RTe," (Bertweet model)"),RTe.forEach(t),MXe=i(y),zn=n(y,"LI",{});var bL=s(zn);NH=n(bL,"STRONG",{});var bxr=s(NH);EXe=r(bxr,"big_bird"),bxr.forEach(t),yXe=r(bL," \u2014 "),_B=n(bL,"A",{href:!0});var vxr=s(_B);wXe=r(vxr,"BigBirdTokenizer"),vxr.forEach(t),AXe=r(bL," or "),uB=n(bL,"A",{href:!0});var Txr=s(uB);LXe=r(Txr,"BigBirdTokenizerFast"),Txr.forEach(t),BXe=r(bL," (BigBird model)"),bL.forEach(t),xXe=i(y),Wn=n(y,"LI",{});var vL=s(Wn);qH=n(vL,"STRONG",{});var Fxr=s(qH);kXe=r(Fxr,"bigbird_pegasus"),Fxr.forEach(t),RXe=r(vL," \u2014 "),bB=n(vL,"A",{href:!0});var Cxr=s(bB);SXe=r(Cxr,"PegasusTokenizer"),Cxr.forEach(t),PXe=r(vL," or "),vB=n(vL,"A",{href:!0});var Mxr=s(vB);$Xe=r(Mxr,"PegasusTokenizerFast"),Mxr.forEach(t),IXe=r(vL," (BigBirdPegasus model)"),vL.forEach(t),DXe=i(y),Qn=n(y,"LI",{});var TL=s(Qn);GH=n(TL,"STRONG",{});var Exr=s(GH);jXe=r(Exr,"blenderbot"),Exr.forEach(t),NXe=r(TL," \u2014 "),TB=n(TL,"A",{href:!0});var yxr=s(TB);qXe=r(yxr,"BlenderbotTokenizer"),yxr.forEach(t),GXe=r(TL," or "),FB=n(TL,"A",{href:!0});var wxr=s(FB);OXe=r(wxr,"BlenderbotTokenizerFast"),wxr.forEach(t),XXe=r(TL," (Blenderbot model)"),TL.forEach(t),VXe=i(y),Eg=n(y,"LI",{});var STe=s(Eg);OH=n(STe,"STRONG",{});var Axr=s(OH);zXe=r(Axr,"blenderbot-small"),Axr.forEach(t),WXe=r(STe," \u2014 "),CB=n(STe,"A",{href:!0});var Lxr=s(CB);QXe=r(Lxr,"BlenderbotSmallTokenizer"),Lxr.forEach(t),HXe=r(STe," (BlenderbotSmall model)"),STe.forEach(t),UXe=i(y),yg=n(y,"LI",{});var PTe=s(yg);XH=n(PTe,"STRONG",{});var Bxr=s(XH);JXe=r(Bxr,"byt5"),Bxr.forEach(t),YXe=r(PTe," \u2014 "),MB=n(PTe,"A",{href:!0});var xxr=s(MB);KXe=r(xxr,"ByT5Tokenizer"),xxr.forEach(t),ZXe=r(PTe," (ByT5 model)"),PTe.forEach(t),eVe=i(y),Hn=n(y,"LI",{});var FL=s(Hn);VH=n(FL,"STRONG",{});var kxr=s(VH);oVe=r(kxr,"camembert"),kxr.forEach(t),rVe=r(FL," \u2014 "),EB=n(FL,"A",{href:!0});var Rxr=s(EB);tVe=r(Rxr,"CamembertTokenizer"),Rxr.forEach(t),aVe=r(FL," or "),yB=n(FL,"A",{href:!0});var Sxr=s(yB);nVe=r(Sxr,"CamembertTokenizerFast"),Sxr.forEach(t),sVe=r(FL," (CamemBERT model)"),FL.forEach(t),lVe=i(y),wg=n(y,"LI",{});var $Te=s(wg);zH=n($Te,"STRONG",{});var Pxr=s(zH);iVe=r(Pxr,"canine"),Pxr.forEach(t),dVe=r($Te," \u2014 "),wB=n($Te,"A",{href:!0});var $xr=s(wB);cVe=r($xr,"CanineTokenizer"),$xr.forEach(t),fVe=r($Te," (Canine model)"),$Te.forEach(t),mVe=i(y),Un=n(y,"LI",{});var CL=s(Un);WH=n(CL,"STRONG",{});var Ixr=s(WH);gVe=r(Ixr,"clip"),Ixr.forEach(t),hVe=r(CL," \u2014 "),AB=n(CL,"A",{href:!0});var Dxr=s(AB);pVe=r(Dxr,"CLIPTokenizer"),Dxr.forEach(t),_Ve=r(CL," or "),LB=n(CL,"A",{href:!0});var jxr=s(LB);uVe=r(jxr,"CLIPTokenizerFast"),jxr.forEach(t),bVe=r(CL," (CLIP model)"),CL.forEach(t),vVe=i(y),Jn=n(y,"LI",{});var ML=s(Jn);QH=n(ML,"STRONG",{});var Nxr=s(QH);TVe=r(Nxr,"convbert"),Nxr.forEach(t),FVe=r(ML," \u2014 "),BB=n(ML,"A",{href:!0});var qxr=s(BB);CVe=r(qxr,"ConvBertTokenizer"),qxr.forEach(t),MVe=r(ML," or "),xB=n(ML,"A",{href:!0});var Gxr=s(xB);EVe=r(Gxr,"ConvBertTokenizerFast"),Gxr.forEach(t),yVe=r(ML," (ConvBERT model)"),ML.forEach(t),wVe=i(y),Yn=n(y,"LI",{});var EL=s(Yn);HH=n(EL,"STRONG",{});var Oxr=s(HH);AVe=r(Oxr,"cpm"),Oxr.forEach(t),LVe=r(EL," \u2014 "),kB=n(EL,"A",{href:!0});var Xxr=s(kB);BVe=r(Xxr,"CpmTokenizer"),Xxr.forEach(t),xVe=r(EL," or "),UH=n(EL,"CODE",{});var Vxr=s(UH);kVe=r(Vxr,"CpmTokenizerFast"),Vxr.forEach(t),RVe=r(EL," (CPM model)"),EL.forEach(t),SVe=i(y),Ag=n(y,"LI",{});var ITe=s(Ag);JH=n(ITe,"STRONG",{});var zxr=s(JH);PVe=r(zxr,"ctrl"),zxr.forEach(t),$Ve=r(ITe," \u2014 "),RB=n(ITe,"A",{href:!0});var Wxr=s(RB);IVe=r(Wxr,"CTRLTokenizer"),Wxr.forEach(t),DVe=r(ITe," (CTRL model)"),ITe.forEach(t),jVe=i(y),Kn=n(y,"LI",{});var yL=s(Kn);YH=n(yL,"STRONG",{});var Qxr=s(YH);NVe=r(Qxr,"deberta"),Qxr.forEach(t),qVe=r(yL," \u2014 "),SB=n(yL,"A",{href:!0});var Hxr=s(SB);GVe=r(Hxr,"DebertaTokenizer"),Hxr.forEach(t),OVe=r(yL," or "),PB=n(yL,"A",{href:!0});var Uxr=s(PB);XVe=r(Uxr,"DebertaTokenizerFast"),Uxr.forEach(t),VVe=r(yL," (DeBERTa model)"),yL.forEach(t),zVe=i(y),Lg=n(y,"LI",{});var DTe=s(Lg);KH=n(DTe,"STRONG",{});var Jxr=s(KH);WVe=r(Jxr,"deberta-v2"),Jxr.forEach(t),QVe=r(DTe," \u2014 "),$B=n(DTe,"A",{href:!0});var Yxr=s($B);HVe=r(Yxr,"DebertaV2Tokenizer"),Yxr.forEach(t),UVe=r(DTe," (DeBERTa-v2 model)"),DTe.forEach(t),JVe=i(y),Zn=n(y,"LI",{});var wL=s(Zn);ZH=n(wL,"STRONG",{});var Kxr=s(ZH);YVe=r(Kxr,"distilbert"),Kxr.forEach(t),KVe=r(wL," \u2014 "),IB=n(wL,"A",{href:!0});var Zxr=s(IB);ZVe=r(Zxr,"DistilBertTokenizer"),Zxr.forEach(t),eze=r(wL," or "),DB=n(wL,"A",{href:!0});var ekr=s(DB);oze=r(ekr,"DistilBertTokenizerFast"),ekr.forEach(t),rze=r(wL," (DistilBERT model)"),wL.forEach(t),tze=i(y),es=n(y,"LI",{});var AL=s(es);eU=n(AL,"STRONG",{});var okr=s(eU);aze=r(okr,"dpr"),okr.forEach(t),nze=r(AL," \u2014 "),jB=n(AL,"A",{href:!0});var rkr=s(jB);sze=r(rkr,"DPRQuestionEncoderTokenizer"),rkr.forEach(t),lze=r(AL," or "),NB=n(AL,"A",{href:!0});var tkr=s(NB);ize=r(tkr,"DPRQuestionEncoderTokenizerFast"),tkr.forEach(t),dze=r(AL," (DPR model)"),AL.forEach(t),cze=i(y),os=n(y,"LI",{});var LL=s(os);oU=n(LL,"STRONG",{});var akr=s(oU);fze=r(akr,"electra"),akr.forEach(t),mze=r(LL," \u2014 "),qB=n(LL,"A",{href:!0});var nkr=s(qB);gze=r(nkr,"ElectraTokenizer"),nkr.forEach(t),hze=r(LL," or "),GB=n(LL,"A",{href:!0});var skr=s(GB);pze=r(skr,"ElectraTokenizerFast"),skr.forEach(t),_ze=r(LL," (ELECTRA model)"),LL.forEach(t),uze=i(y),Bg=n(y,"LI",{});var jTe=s(Bg);rU=n(jTe,"STRONG",{});var lkr=s(rU);bze=r(lkr,"flaubert"),lkr.forEach(t),vze=r(jTe," \u2014 "),OB=n(jTe,"A",{href:!0});var ikr=s(OB);Tze=r(ikr,"FlaubertTokenizer"),ikr.forEach(t),Fze=r(jTe," (FlauBERT model)"),jTe.forEach(t),Cze=i(y),rs=n(y,"LI",{});var BL=s(rs);tU=n(BL,"STRONG",{});var dkr=s(tU);Mze=r(dkr,"fnet"),dkr.forEach(t),Eze=r(BL," \u2014 "),XB=n(BL,"A",{href:!0});var ckr=s(XB);yze=r(ckr,"FNetTokenizer"),ckr.forEach(t),wze=r(BL," or "),VB=n(BL,"A",{href:!0});var fkr=s(VB);Aze=r(fkr,"FNetTokenizerFast"),fkr.forEach(t),Lze=r(BL," (FNet model)"),BL.forEach(t),Bze=i(y),xg=n(y,"LI",{});var NTe=s(xg);aU=n(NTe,"STRONG",{});var mkr=s(aU);xze=r(mkr,"fsmt"),mkr.forEach(t),kze=r(NTe," \u2014 "),zB=n(NTe,"A",{href:!0});var gkr=s(zB);Rze=r(gkr,"FSMTTokenizer"),gkr.forEach(t),Sze=r(NTe," (FairSeq Machine-Translation model)"),NTe.forEach(t),Pze=i(y),ts=n(y,"LI",{});var xL=s(ts);nU=n(xL,"STRONG",{});var hkr=s(nU);$ze=r(hkr,"funnel"),hkr.forEach(t),Ize=r(xL," \u2014 "),WB=n(xL,"A",{href:!0});var pkr=s(WB);Dze=r(pkr,"FunnelTokenizer"),pkr.forEach(t),jze=r(xL," or "),QB=n(xL,"A",{href:!0});var _kr=s(QB);Nze=r(_kr,"FunnelTokenizerFast"),_kr.forEach(t),qze=r(xL," (Funnel Transformer model)"),xL.forEach(t),Gze=i(y),as=n(y,"LI",{});var kL=s(as);sU=n(kL,"STRONG",{});var ukr=s(sU);Oze=r(ukr,"gpt2"),ukr.forEach(t),Xze=r(kL," \u2014 "),HB=n(kL,"A",{href:!0});var bkr=s(HB);Vze=r(bkr,"GPT2Tokenizer"),bkr.forEach(t),zze=r(kL," or "),UB=n(kL,"A",{href:!0});var vkr=s(UB);Wze=r(vkr,"GPT2TokenizerFast"),vkr.forEach(t),Qze=r(kL," (OpenAI GPT-2 model)"),kL.forEach(t),Hze=i(y),ns=n(y,"LI",{});var RL=s(ns);lU=n(RL,"STRONG",{});var Tkr=s(lU);Uze=r(Tkr,"gpt_neo"),Tkr.forEach(t),Jze=r(RL," \u2014 "),JB=n(RL,"A",{href:!0});var Fkr=s(JB);Yze=r(Fkr,"GPT2Tokenizer"),Fkr.forEach(t),Kze=r(RL," or "),YB=n(RL,"A",{href:!0});var Ckr=s(YB);Zze=r(Ckr,"GPT2TokenizerFast"),Ckr.forEach(t),eWe=r(RL," (GPT Neo model)"),RL.forEach(t),oWe=i(y),ss=n(y,"LI",{});var SL=s(ss);iU=n(SL,"STRONG",{});var Mkr=s(iU);rWe=r(Mkr,"herbert"),Mkr.forEach(t),tWe=r(SL," \u2014 "),KB=n(SL,"A",{href:!0});var Ekr=s(KB);aWe=r(Ekr,"HerbertTokenizer"),Ekr.forEach(t),nWe=r(SL," or "),ZB=n(SL,"A",{href:!0});var ykr=s(ZB);sWe=r(ykr,"HerbertTokenizerFast"),ykr.forEach(t),lWe=r(SL," (HerBERT model)"),SL.forEach(t),iWe=i(y),kg=n(y,"LI",{});var qTe=s(kg);dU=n(qTe,"STRONG",{});var wkr=s(dU);dWe=r(wkr,"hubert"),wkr.forEach(t),cWe=r(qTe," \u2014 "),ex=n(qTe,"A",{href:!0});var Akr=s(ex);fWe=r(Akr,"Wav2Vec2CTCTokenizer"),Akr.forEach(t),mWe=r(qTe," (Hubert model)"),qTe.forEach(t),gWe=i(y),ls=n(y,"LI",{});var PL=s(ls);cU=n(PL,"STRONG",{});var Lkr=s(cU);hWe=r(Lkr,"ibert"),Lkr.forEach(t),pWe=r(PL," \u2014 "),ox=n(PL,"A",{href:!0});var Bkr=s(ox);_We=r(Bkr,"RobertaTokenizer"),Bkr.forEach(t),uWe=r(PL," or "),rx=n(PL,"A",{href:!0});var xkr=s(rx);bWe=r(xkr,"RobertaTokenizerFast"),xkr.forEach(t),vWe=r(PL," (I-BERT model)"),PL.forEach(t),TWe=i(y),is=n(y,"LI",{});var $L=s(is);fU=n($L,"STRONG",{});var kkr=s(fU);FWe=r(kkr,"layoutlm"),kkr.forEach(t),CWe=r($L," \u2014 "),tx=n($L,"A",{href:!0});var Rkr=s(tx);MWe=r(Rkr,"LayoutLMTokenizer"),Rkr.forEach(t),EWe=r($L," or "),ax=n($L,"A",{href:!0});var Skr=s(ax);yWe=r(Skr,"LayoutLMTokenizerFast"),Skr.forEach(t),wWe=r($L," (LayoutLM model)"),$L.forEach(t),AWe=i(y),ds=n(y,"LI",{});var IL=s(ds);mU=n(IL,"STRONG",{});var Pkr=s(mU);LWe=r(Pkr,"layoutlmv2"),Pkr.forEach(t),BWe=r(IL," \u2014 "),nx=n(IL,"A",{href:!0});var $kr=s(nx);xWe=r($kr,"LayoutLMv2Tokenizer"),$kr.forEach(t),kWe=r(IL," or "),sx=n(IL,"A",{href:!0});var Ikr=s(sx);RWe=r(Ikr,"LayoutLMv2TokenizerFast"),Ikr.forEach(t),SWe=r(IL," (LayoutLMv2 model)"),IL.forEach(t),PWe=i(y),cs=n(y,"LI",{});var DL=s(cs);gU=n(DL,"STRONG",{});var Dkr=s(gU);$We=r(Dkr,"layoutxlm"),Dkr.forEach(t),IWe=r(DL," \u2014 "),lx=n(DL,"A",{href:!0});var jkr=s(lx);DWe=r(jkr,"LayoutXLMTokenizer"),jkr.forEach(t),jWe=r(DL," or "),ix=n(DL,"A",{href:!0});var Nkr=s(ix);NWe=r(Nkr,"LayoutXLMTokenizerFast"),Nkr.forEach(t),qWe=r(DL," (LayoutXLM model)"),DL.forEach(t),GWe=i(y),fs=n(y,"LI",{});var jL=s(fs);hU=n(jL,"STRONG",{});var qkr=s(hU);OWe=r(qkr,"led"),qkr.forEach(t),XWe=r(jL," \u2014 "),dx=n(jL,"A",{href:!0});var Gkr=s(dx);VWe=r(Gkr,"LEDTokenizer"),Gkr.forEach(t),zWe=r(jL," or "),cx=n(jL,"A",{href:!0});var Okr=s(cx);WWe=r(Okr,"LEDTokenizerFast"),Okr.forEach(t),QWe=r(jL," (LED model)"),jL.forEach(t),HWe=i(y),ms=n(y,"LI",{});var NL=s(ms);pU=n(NL,"STRONG",{});var Xkr=s(pU);UWe=r(Xkr,"longformer"),Xkr.forEach(t),JWe=r(NL," \u2014 "),fx=n(NL,"A",{href:!0});var Vkr=s(fx);YWe=r(Vkr,"LongformerTokenizer"),Vkr.forEach(t),KWe=r(NL," or "),mx=n(NL,"A",{href:!0});var zkr=s(mx);ZWe=r(zkr,"LongformerTokenizerFast"),zkr.forEach(t),eQe=r(NL," (Longformer model)"),NL.forEach(t),oQe=i(y),Rg=n(y,"LI",{});var GTe=s(Rg);_U=n(GTe,"STRONG",{});var Wkr=s(_U);rQe=r(Wkr,"luke"),Wkr.forEach(t),tQe=r(GTe," \u2014 "),gx=n(GTe,"A",{href:!0});var Qkr=s(gx);aQe=r(Qkr,"LukeTokenizer"),Qkr.forEach(t),nQe=r(GTe," (LUKE model)"),GTe.forEach(t),sQe=i(y),gs=n(y,"LI",{});var qL=s(gs);uU=n(qL,"STRONG",{});var Hkr=s(uU);lQe=r(Hkr,"lxmert"),Hkr.forEach(t),iQe=r(qL," \u2014 "),hx=n(qL,"A",{href:!0});var Ukr=s(hx);dQe=r(Ukr,"LxmertTokenizer"),Ukr.forEach(t),cQe=r(qL," or "),px=n(qL,"A",{href:!0});var Jkr=s(px);fQe=r(Jkr,"LxmertTokenizerFast"),Jkr.forEach(t),mQe=r(qL," (LXMERT model)"),qL.forEach(t),gQe=i(y),Sg=n(y,"LI",{});var OTe=s(Sg);bU=n(OTe,"STRONG",{});var Ykr=s(bU);hQe=r(Ykr,"m2m_100"),Ykr.forEach(t),pQe=r(OTe," \u2014 "),_x=n(OTe,"A",{href:!0});var Kkr=s(_x);_Qe=r(Kkr,"M2M100Tokenizer"),Kkr.forEach(t),uQe=r(OTe," (M2M100 model)"),OTe.forEach(t),bQe=i(y),Pg=n(y,"LI",{});var XTe=s(Pg);vU=n(XTe,"STRONG",{});var Zkr=s(vU);vQe=r(Zkr,"marian"),Zkr.forEach(t),TQe=r(XTe," \u2014 "),ux=n(XTe,"A",{href:!0});var eRr=s(ux);FQe=r(eRr,"MarianTokenizer"),eRr.forEach(t),CQe=r(XTe," (Marian model)"),XTe.forEach(t),MQe=i(y),hs=n(y,"LI",{});var GL=s(hs);TU=n(GL,"STRONG",{});var oRr=s(TU);EQe=r(oRr,"mbart"),oRr.forEach(t),yQe=r(GL," \u2014 "),bx=n(GL,"A",{href:!0});var rRr=s(bx);wQe=r(rRr,"MBartTokenizer"),rRr.forEach(t),AQe=r(GL," or "),vx=n(GL,"A",{href:!0});var tRr=s(vx);LQe=r(tRr,"MBartTokenizerFast"),tRr.forEach(t),BQe=r(GL," (mBART model)"),GL.forEach(t),xQe=i(y),ps=n(y,"LI",{});var OL=s(ps);FU=n(OL,"STRONG",{});var aRr=s(FU);kQe=r(aRr,"mbart50"),aRr.forEach(t),RQe=r(OL," \u2014 "),Tx=n(OL,"A",{href:!0});var nRr=s(Tx);SQe=r(nRr,"MBart50Tokenizer"),nRr.forEach(t),PQe=r(OL," or "),Fx=n(OL,"A",{href:!0});var sRr=s(Fx);$Qe=r(sRr,"MBart50TokenizerFast"),sRr.forEach(t),IQe=r(OL," (mBART-50 model)"),OL.forEach(t),DQe=i(y),$g=n(y,"LI",{});var VTe=s($g);CU=n(VTe,"STRONG",{});var lRr=s(CU);jQe=r(lRr,"mluke"),lRr.forEach(t),NQe=r(VTe," \u2014 "),Cx=n(VTe,"A",{href:!0});var iRr=s(Cx);qQe=r(iRr,"MLukeTokenizer"),iRr.forEach(t),GQe=r(VTe," (mLUKE model)"),VTe.forEach(t),OQe=i(y),_s=n(y,"LI",{});var XL=s(_s);MU=n(XL,"STRONG",{});var dRr=s(MU);XQe=r(dRr,"mobilebert"),dRr.forEach(t),VQe=r(XL," \u2014 "),Mx=n(XL,"A",{href:!0});var cRr=s(Mx);zQe=r(cRr,"MobileBertTokenizer"),cRr.forEach(t),WQe=r(XL," or "),Ex=n(XL,"A",{href:!0});var fRr=s(Ex);QQe=r(fRr,"MobileBertTokenizerFast"),fRr.forEach(t),HQe=r(XL," (MobileBERT model)"),XL.forEach(t),UQe=i(y),us=n(y,"LI",{});var VL=s(us);EU=n(VL,"STRONG",{});var mRr=s(EU);JQe=r(mRr,"mpnet"),mRr.forEach(t),YQe=r(VL," \u2014 "),yx=n(VL,"A",{href:!0});var gRr=s(yx);KQe=r(gRr,"MPNetTokenizer"),gRr.forEach(t),ZQe=r(VL," or "),wx=n(VL,"A",{href:!0});var hRr=s(wx);eHe=r(hRr,"MPNetTokenizerFast"),hRr.forEach(t),oHe=r(VL," (MPNet model)"),VL.forEach(t),rHe=i(y),bs=n(y,"LI",{});var zL=s(bs);yU=n(zL,"STRONG",{});var pRr=s(yU);tHe=r(pRr,"mt5"),pRr.forEach(t),aHe=r(zL," \u2014 "),Ax=n(zL,"A",{href:!0});var _Rr=s(Ax);nHe=r(_Rr,"MT5Tokenizer"),_Rr.forEach(t),sHe=r(zL," or "),Lx=n(zL,"A",{href:!0});var uRr=s(Lx);lHe=r(uRr,"MT5TokenizerFast"),uRr.forEach(t),iHe=r(zL," (mT5 model)"),zL.forEach(t),dHe=i(y),vs=n(y,"LI",{});var WL=s(vs);wU=n(WL,"STRONG",{});var bRr=s(wU);cHe=r(bRr,"openai-gpt"),bRr.forEach(t),fHe=r(WL," \u2014 "),Bx=n(WL,"A",{href:!0});var vRr=s(Bx);mHe=r(vRr,"OpenAIGPTTokenizer"),vRr.forEach(t),gHe=r(WL," or "),xx=n(WL,"A",{href:!0});var TRr=s(xx);hHe=r(TRr,"OpenAIGPTTokenizerFast"),TRr.forEach(t),pHe=r(WL," (OpenAI GPT model)"),WL.forEach(t),_He=i(y),Ts=n(y,"LI",{});var QL=s(Ts);AU=n(QL,"STRONG",{});var FRr=s(AU);uHe=r(FRr,"pegasus"),FRr.forEach(t),bHe=r(QL," \u2014 "),kx=n(QL,"A",{href:!0});var CRr=s(kx);vHe=r(CRr,"PegasusTokenizer"),CRr.forEach(t),THe=r(QL," or "),Rx=n(QL,"A",{href:!0});var MRr=s(Rx);FHe=r(MRr,"PegasusTokenizerFast"),MRr.forEach(t),CHe=r(QL," (Pegasus model)"),QL.forEach(t),MHe=i(y),Ig=n(y,"LI",{});var zTe=s(Ig);LU=n(zTe,"STRONG",{});var ERr=s(LU);EHe=r(ERr,"perceiver"),ERr.forEach(t),yHe=r(zTe," \u2014 "),Sx=n(zTe,"A",{href:!0});var yRr=s(Sx);wHe=r(yRr,"PerceiverTokenizer"),yRr.forEach(t),AHe=r(zTe," (Perceiver model)"),zTe.forEach(t),LHe=i(y),Dg=n(y,"LI",{});var WTe=s(Dg);BU=n(WTe,"STRONG",{});var wRr=s(BU);BHe=r(wRr,"phobert"),wRr.forEach(t),xHe=r(WTe," \u2014 "),Px=n(WTe,"A",{href:!0});var ARr=s(Px);kHe=r(ARr,"PhobertTokenizer"),ARr.forEach(t),RHe=r(WTe," (PhoBERT model)"),WTe.forEach(t),SHe=i(y),jg=n(y,"LI",{});var QTe=s(jg);xU=n(QTe,"STRONG",{});var LRr=s(xU);PHe=r(LRr,"plbart"),LRr.forEach(t),$He=r(QTe," \u2014 "),$x=n(QTe,"A",{href:!0});var BRr=s($x);IHe=r(BRr,"PLBartTokenizer"),BRr.forEach(t),DHe=r(QTe," (PLBart model)"),QTe.forEach(t),jHe=i(y),Ng=n(y,"LI",{});var HTe=s(Ng);kU=n(HTe,"STRONG",{});var xRr=s(kU);NHe=r(xRr,"prophetnet"),xRr.forEach(t),qHe=r(HTe," \u2014 "),Ix=n(HTe,"A",{href:!0});var kRr=s(Ix);GHe=r(kRr,"ProphetNetTokenizer"),kRr.forEach(t),OHe=r(HTe," (ProphetNet model)"),HTe.forEach(t),XHe=i(y),Fs=n(y,"LI",{});var HL=s(Fs);RU=n(HL,"STRONG",{});var RRr=s(RU);VHe=r(RRr,"qdqbert"),RRr.forEach(t),zHe=r(HL," \u2014 "),Dx=n(HL,"A",{href:!0});var SRr=s(Dx);WHe=r(SRr,"BertTokenizer"),SRr.forEach(t),QHe=r(HL," or "),jx=n(HL,"A",{href:!0});var PRr=s(jx);HHe=r(PRr,"BertTokenizerFast"),PRr.forEach(t),UHe=r(HL," (QDQBert model)"),HL.forEach(t),JHe=i(y),qg=n(y,"LI",{});var UTe=s(qg);SU=n(UTe,"STRONG",{});var $Rr=s(SU);YHe=r($Rr,"rag"),$Rr.forEach(t),KHe=r(UTe," \u2014 "),Nx=n(UTe,"A",{href:!0});var IRr=s(Nx);ZHe=r(IRr,"RagTokenizer"),IRr.forEach(t),eUe=r(UTe," (RAG model)"),UTe.forEach(t),oUe=i(y),Cs=n(y,"LI",{});var UL=s(Cs);PU=n(UL,"STRONG",{});var DRr=s(PU);rUe=r(DRr,"realm"),DRr.forEach(t),tUe=r(UL," \u2014 "),qx=n(UL,"A",{href:!0});var jRr=s(qx);aUe=r(jRr,"RealmTokenizer"),jRr.forEach(t),nUe=r(UL," or "),Gx=n(UL,"A",{href:!0});var NRr=s(Gx);sUe=r(NRr,"RealmTokenizerFast"),NRr.forEach(t),lUe=r(UL," (Realm model)"),UL.forEach(t),iUe=i(y),Ms=n(y,"LI",{});var JL=s(Ms);$U=n(JL,"STRONG",{});var qRr=s($U);dUe=r(qRr,"reformer"),qRr.forEach(t),cUe=r(JL," \u2014 "),Ox=n(JL,"A",{href:!0});var GRr=s(Ox);fUe=r(GRr,"ReformerTokenizer"),GRr.forEach(t),mUe=r(JL," or "),Xx=n(JL,"A",{href:!0});var ORr=s(Xx);gUe=r(ORr,"ReformerTokenizerFast"),ORr.forEach(t),hUe=r(JL," (Reformer model)"),JL.forEach(t),pUe=i(y),Es=n(y,"LI",{});var YL=s(Es);IU=n(YL,"STRONG",{});var XRr=s(IU);_Ue=r(XRr,"rembert"),XRr.forEach(t),uUe=r(YL," \u2014 "),Vx=n(YL,"A",{href:!0});var VRr=s(Vx);bUe=r(VRr,"RemBertTokenizer"),VRr.forEach(t),vUe=r(YL," or "),zx=n(YL,"A",{href:!0});var zRr=s(zx);TUe=r(zRr,"RemBertTokenizerFast"),zRr.forEach(t),FUe=r(YL," (RemBERT model)"),YL.forEach(t),CUe=i(y),ys=n(y,"LI",{});var KL=s(ys);DU=n(KL,"STRONG",{});var WRr=s(DU);MUe=r(WRr,"retribert"),WRr.forEach(t),EUe=r(KL," \u2014 "),Wx=n(KL,"A",{href:!0});var QRr=s(Wx);yUe=r(QRr,"RetriBertTokenizer"),QRr.forEach(t),wUe=r(KL," or "),Qx=n(KL,"A",{href:!0});var HRr=s(Qx);AUe=r(HRr,"RetriBertTokenizerFast"),HRr.forEach(t),LUe=r(KL," (RetriBERT model)"),KL.forEach(t),BUe=i(y),ws=n(y,"LI",{});var ZL=s(ws);jU=n(ZL,"STRONG",{});var URr=s(jU);xUe=r(URr,"roberta"),URr.forEach(t),kUe=r(ZL," \u2014 "),Hx=n(ZL,"A",{href:!0});var JRr=s(Hx);RUe=r(JRr,"RobertaTokenizer"),JRr.forEach(t),SUe=r(ZL," or "),Ux=n(ZL,"A",{href:!0});var YRr=s(Ux);PUe=r(YRr,"RobertaTokenizerFast"),YRr.forEach(t),$Ue=r(ZL," (RoBERTa model)"),ZL.forEach(t),IUe=i(y),As=n(y,"LI",{});var e8=s(As);NU=n(e8,"STRONG",{});var KRr=s(NU);DUe=r(KRr,"roformer"),KRr.forEach(t),jUe=r(e8," \u2014 "),Jx=n(e8,"A",{href:!0});var ZRr=s(Jx);NUe=r(ZRr,"RoFormerTokenizer"),ZRr.forEach(t),qUe=r(e8," or "),Yx=n(e8,"A",{href:!0});var eSr=s(Yx);GUe=r(eSr,"RoFormerTokenizerFast"),eSr.forEach(t),OUe=r(e8," (RoFormer model)"),e8.forEach(t),XUe=i(y),Gg=n(y,"LI",{});var JTe=s(Gg);qU=n(JTe,"STRONG",{});var oSr=s(qU);VUe=r(oSr,"speech_to_text"),oSr.forEach(t),zUe=r(JTe," \u2014 "),Kx=n(JTe,"A",{href:!0});var rSr=s(Kx);WUe=r(rSr,"Speech2TextTokenizer"),rSr.forEach(t),QUe=r(JTe," (Speech2Text model)"),JTe.forEach(t),HUe=i(y),Og=n(y,"LI",{});var YTe=s(Og);GU=n(YTe,"STRONG",{});var tSr=s(GU);UUe=r(tSr,"speech_to_text_2"),tSr.forEach(t),JUe=r(YTe," \u2014 "),Zx=n(YTe,"A",{href:!0});var aSr=s(Zx);YUe=r(aSr,"Speech2Text2Tokenizer"),aSr.forEach(t),KUe=r(YTe," (Speech2Text2 model)"),YTe.forEach(t),ZUe=i(y),Ls=n(y,"LI",{});var o8=s(Ls);OU=n(o8,"STRONG",{});var nSr=s(OU);eJe=r(nSr,"splinter"),nSr.forEach(t),oJe=r(o8," \u2014 "),ek=n(o8,"A",{href:!0});var sSr=s(ek);rJe=r(sSr,"SplinterTokenizer"),sSr.forEach(t),tJe=r(o8," or "),ok=n(o8,"A",{href:!0});var lSr=s(ok);aJe=r(lSr,"SplinterTokenizerFast"),lSr.forEach(t),nJe=r(o8," (Splinter model)"),o8.forEach(t),sJe=i(y),Bs=n(y,"LI",{});var r8=s(Bs);XU=n(r8,"STRONG",{});var iSr=s(XU);lJe=r(iSr,"squeezebert"),iSr.forEach(t),iJe=r(r8," \u2014 "),rk=n(r8,"A",{href:!0});var dSr=s(rk);dJe=r(dSr,"SqueezeBertTokenizer"),dSr.forEach(t),cJe=r(r8," or "),tk=n(r8,"A",{href:!0});var cSr=s(tk);fJe=r(cSr,"SqueezeBertTokenizerFast"),cSr.forEach(t),mJe=r(r8," (SqueezeBERT model)"),r8.forEach(t),gJe=i(y),xs=n(y,"LI",{});var t8=s(xs);VU=n(t8,"STRONG",{});var fSr=s(VU);hJe=r(fSr,"t5"),fSr.forEach(t),pJe=r(t8," \u2014 "),ak=n(t8,"A",{href:!0});var mSr=s(ak);_Je=r(mSr,"T5Tokenizer"),mSr.forEach(t),uJe=r(t8," or "),nk=n(t8,"A",{href:!0});var gSr=s(nk);bJe=r(gSr,"T5TokenizerFast"),gSr.forEach(t),vJe=r(t8," (T5 model)"),t8.forEach(t),TJe=i(y),Xg=n(y,"LI",{});var KTe=s(Xg);zU=n(KTe,"STRONG",{});var hSr=s(zU);FJe=r(hSr,"tapas"),hSr.forEach(t),CJe=r(KTe," \u2014 "),sk=n(KTe,"A",{href:!0});var pSr=s(sk);MJe=r(pSr,"TapasTokenizer"),pSr.forEach(t),EJe=r(KTe," (TAPAS model)"),KTe.forEach(t),yJe=i(y),Vg=n(y,"LI",{});var ZTe=s(Vg);WU=n(ZTe,"STRONG",{});var _Sr=s(WU);wJe=r(_Sr,"transfo-xl"),_Sr.forEach(t),AJe=r(ZTe," \u2014 "),lk=n(ZTe,"A",{href:!0});var uSr=s(lk);LJe=r(uSr,"TransfoXLTokenizer"),uSr.forEach(t),BJe=r(ZTe," (Transformer-XL model)"),ZTe.forEach(t),xJe=i(y),zg=n(y,"LI",{});var eFe=s(zg);QU=n(eFe,"STRONG",{});var bSr=s(QU);kJe=r(bSr,"wav2vec2"),bSr.forEach(t),RJe=r(eFe," \u2014 "),ik=n(eFe,"A",{href:!0});var vSr=s(ik);SJe=r(vSr,"Wav2Vec2CTCTokenizer"),vSr.forEach(t),PJe=r(eFe," (Wav2Vec2 model)"),eFe.forEach(t),$Je=i(y),Wg=n(y,"LI",{});var oFe=s(Wg);HU=n(oFe,"STRONG",{});var TSr=s(HU);IJe=r(TSr,"wav2vec2_phoneme"),TSr.forEach(t),DJe=r(oFe," \u2014 "),dk=n(oFe,"A",{href:!0});var FSr=s(dk);jJe=r(FSr,"Wav2Vec2PhonemeCTCTokenizer"),FSr.forEach(t),NJe=r(oFe," (Wav2Vec2Phoneme model)"),oFe.forEach(t),qJe=i(y),ks=n(y,"LI",{});var a8=s(ks);UU=n(a8,"STRONG",{});var CSr=s(UU);GJe=r(CSr,"xglm"),CSr.forEach(t),OJe=r(a8," \u2014 "),ck=n(a8,"A",{href:!0});var MSr=s(ck);XJe=r(MSr,"XGLMTokenizer"),MSr.forEach(t),VJe=r(a8," or "),fk=n(a8,"A",{href:!0});var ESr=s(fk);zJe=r(ESr,"XGLMTokenizerFast"),ESr.forEach(t),WJe=r(a8," (XGLM model)"),a8.forEach(t),QJe=i(y),Qg=n(y,"LI",{});var rFe=s(Qg);JU=n(rFe,"STRONG",{});var ySr=s(JU);HJe=r(ySr,"xlm"),ySr.forEach(t),UJe=r(rFe," \u2014 "),mk=n(rFe,"A",{href:!0});var wSr=s(mk);JJe=r(wSr,"XLMTokenizer"),wSr.forEach(t),YJe=r(rFe," (XLM model)"),rFe.forEach(t),KJe=i(y),Hg=n(y,"LI",{});var tFe=s(Hg);YU=n(tFe,"STRONG",{});var ASr=s(YU);ZJe=r(ASr,"xlm-prophetnet"),ASr.forEach(t),eYe=r(tFe," \u2014 "),gk=n(tFe,"A",{href:!0});var LSr=s(gk);oYe=r(LSr,"XLMProphetNetTokenizer"),LSr.forEach(t),rYe=r(tFe," (XLMProphetNet model)"),tFe.forEach(t),tYe=i(y),Rs=n(y,"LI",{});var n8=s(Rs);KU=n(n8,"STRONG",{});var BSr=s(KU);aYe=r(BSr,"xlm-roberta"),BSr.forEach(t),nYe=r(n8," \u2014 "),hk=n(n8,"A",{href:!0});var xSr=s(hk);sYe=r(xSr,"XLMRobertaTokenizer"),xSr.forEach(t),lYe=r(n8," or "),pk=n(n8,"A",{href:!0});var kSr=s(pk);iYe=r(kSr,"XLMRobertaTokenizerFast"),kSr.forEach(t),dYe=r(n8," (XLM-RoBERTa model)"),n8.forEach(t),cYe=i(y),Ss=n(y,"LI",{});var s8=s(Ss);ZU=n(s8,"STRONG",{});var RSr=s(ZU);fYe=r(RSr,"xlnet"),RSr.forEach(t),mYe=r(s8," \u2014 "),_k=n(s8,"A",{href:!0});var SSr=s(_k);gYe=r(SSr,"XLNetTokenizer"),SSr.forEach(t),hYe=r(s8," or "),uk=n(s8,"A",{href:!0});var PSr=s(uk);pYe=r(PSr,"XLNetTokenizerFast"),PSr.forEach(t),_Ye=r(s8," (XLNet model)"),s8.forEach(t),y.forEach(t),uYe=i(da),eJ=n(da,"P",{});var $Sr=s(eJ);bYe=r($Sr,"Examples:"),$Sr.forEach(t),vYe=i(da),m(OM.$$.fragment,da),da.forEach(t),TYe=i(js),Ug=n(js,"DIV",{class:!0});var zxe=s(Ug);m(XM.$$.fragment,zxe),FYe=i(zxe),oJ=n(zxe,"P",{});var ISr=s(oJ);CYe=r(ISr,"Register a new tokenizer in this mapping."),ISr.forEach(t),zxe.forEach(t),js.forEach(t),X7e=i(c),qi=n(c,"H2",{class:!0});var Wxe=s(qi);Jg=n(Wxe,"A",{id:!0,class:!0,href:!0});var DSr=s(Jg);rJ=n(DSr,"SPAN",{});var jSr=s(rJ);m(VM.$$.fragment,jSr),jSr.forEach(t),DSr.forEach(t),MYe=i(Wxe),tJ=n(Wxe,"SPAN",{});var NSr=s(tJ);EYe=r(NSr,"AutoFeatureExtractor"),NSr.forEach(t),Wxe.forEach(t),V7e=i(c),zo=n(c,"DIV",{class:!0});var Ns=s(zo);m(zM.$$.fragment,Ns),yYe=i(Ns),WM=n(Ns,"P",{});var Qxe=s(WM);wYe=r(Qxe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),bk=n(Qxe,"A",{href:!0});var qSr=s(bk);AYe=r(qSr,"AutoFeatureExtractor.from_pretrained()"),qSr.forEach(t),LYe=r(Qxe," class method."),Qxe.forEach(t),BYe=i(Ns),QM=n(Ns,"P",{});var Hxe=s(QM);xYe=r(Hxe,"This class cannot be instantiated directly using "),aJ=n(Hxe,"CODE",{});var GSr=s(aJ);kYe=r(GSr,"__init__()"),GSr.forEach(t),RYe=r(Hxe," (throws an error)."),Hxe.forEach(t),SYe=i(Ns),xe=n(Ns,"DIV",{class:!0});var St=s(xe);m(HM.$$.fragment,St),PYe=i(St),nJ=n(St,"P",{});var OSr=s(nJ);$Ye=r(OSr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),OSr.forEach(t),IYe=i(St),ja=n(St,"P",{});var A4=s(ja);DYe=r(A4,"The feature extractor class to instantiate is selected based on the "),sJ=n(A4,"CODE",{});var XSr=s(sJ);jYe=r(XSr,"model_type"),XSr.forEach(t),NYe=r(A4,` property of the config object
(either passed as an argument or loaded from `),lJ=n(A4,"CODE",{});var VSr=s(lJ);qYe=r(VSr,"pretrained_model_name_or_path"),VSr.forEach(t),GYe=r(A4,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),iJ=n(A4,"CODE",{});var zSr=s(iJ);OYe=r(zSr,"pretrained_model_name_or_path"),zSr.forEach(t),XYe=r(A4,":"),A4.forEach(t),VYe=i(St),ae=n(St,"UL",{});var le=s(ae);Yg=n(le,"LI",{});var aFe=s(Yg);dJ=n(aFe,"STRONG",{});var WSr=s(dJ);zYe=r(WSr,"beit"),WSr.forEach(t),WYe=r(aFe," \u2014 "),vk=n(aFe,"A",{href:!0});var QSr=s(vk);QYe=r(QSr,"BeitFeatureExtractor"),QSr.forEach(t),HYe=r(aFe," (BEiT model)"),aFe.forEach(t),UYe=i(le),Kg=n(le,"LI",{});var nFe=s(Kg);cJ=n(nFe,"STRONG",{});var HSr=s(cJ);JYe=r(HSr,"clip"),HSr.forEach(t),YYe=r(nFe," \u2014 "),Tk=n(nFe,"A",{href:!0});var USr=s(Tk);KYe=r(USr,"CLIPFeatureExtractor"),USr.forEach(t),ZYe=r(nFe," (CLIP model)"),nFe.forEach(t),eKe=i(le),Zg=n(le,"LI",{});var sFe=s(Zg);fJ=n(sFe,"STRONG",{});var JSr=s(fJ);oKe=r(JSr,"convnext"),JSr.forEach(t),rKe=r(sFe," \u2014 "),Fk=n(sFe,"A",{href:!0});var YSr=s(Fk);tKe=r(YSr,"ConvNextFeatureExtractor"),YSr.forEach(t),aKe=r(sFe," (ConvNext model)"),sFe.forEach(t),nKe=i(le),eh=n(le,"LI",{});var lFe=s(eh);mJ=n(lFe,"STRONG",{});var KSr=s(mJ);sKe=r(KSr,"deit"),KSr.forEach(t),lKe=r(lFe," \u2014 "),Ck=n(lFe,"A",{href:!0});var ZSr=s(Ck);iKe=r(ZSr,"DeiTFeatureExtractor"),ZSr.forEach(t),dKe=r(lFe," (DeiT model)"),lFe.forEach(t),cKe=i(le),oh=n(le,"LI",{});var iFe=s(oh);gJ=n(iFe,"STRONG",{});var ePr=s(gJ);fKe=r(ePr,"detr"),ePr.forEach(t),mKe=r(iFe," \u2014 "),Mk=n(iFe,"A",{href:!0});var oPr=s(Mk);gKe=r(oPr,"DetrFeatureExtractor"),oPr.forEach(t),hKe=r(iFe," (DETR model)"),iFe.forEach(t),pKe=i(le),rh=n(le,"LI",{});var dFe=s(rh);hJ=n(dFe,"STRONG",{});var rPr=s(hJ);_Ke=r(rPr,"hubert"),rPr.forEach(t),uKe=r(dFe," \u2014 "),Ek=n(dFe,"A",{href:!0});var tPr=s(Ek);bKe=r(tPr,"Wav2Vec2FeatureExtractor"),tPr.forEach(t),vKe=r(dFe," (Hubert model)"),dFe.forEach(t),TKe=i(le),th=n(le,"LI",{});var cFe=s(th);pJ=n(cFe,"STRONG",{});var aPr=s(pJ);FKe=r(aPr,"layoutlmv2"),aPr.forEach(t),CKe=r(cFe," \u2014 "),yk=n(cFe,"A",{href:!0});var nPr=s(yk);MKe=r(nPr,"LayoutLMv2FeatureExtractor"),nPr.forEach(t),EKe=r(cFe," (LayoutLMv2 model)"),cFe.forEach(t),yKe=i(le),ah=n(le,"LI",{});var fFe=s(ah);_J=n(fFe,"STRONG",{});var sPr=s(_J);wKe=r(sPr,"maskformer"),sPr.forEach(t),AKe=r(fFe," \u2014 "),wk=n(fFe,"A",{href:!0});var lPr=s(wk);LKe=r(lPr,"MaskFormerFeatureExtractor"),lPr.forEach(t),BKe=r(fFe," (MaskFormer model)"),fFe.forEach(t),xKe=i(le),nh=n(le,"LI",{});var mFe=s(nh);uJ=n(mFe,"STRONG",{});var iPr=s(uJ);kKe=r(iPr,"perceiver"),iPr.forEach(t),RKe=r(mFe," \u2014 "),Ak=n(mFe,"A",{href:!0});var dPr=s(Ak);SKe=r(dPr,"PerceiverFeatureExtractor"),dPr.forEach(t),PKe=r(mFe," (Perceiver model)"),mFe.forEach(t),$Ke=i(le),sh=n(le,"LI",{});var gFe=s(sh);bJ=n(gFe,"STRONG",{});var cPr=s(bJ);IKe=r(cPr,"poolformer"),cPr.forEach(t),DKe=r(gFe," \u2014 "),Lk=n(gFe,"A",{href:!0});var fPr=s(Lk);jKe=r(fPr,"PoolFormerFeatureExtractor"),fPr.forEach(t),NKe=r(gFe," (PoolFormer model)"),gFe.forEach(t),qKe=i(le),lh=n(le,"LI",{});var hFe=s(lh);vJ=n(hFe,"STRONG",{});var mPr=s(vJ);GKe=r(mPr,"segformer"),mPr.forEach(t),OKe=r(hFe," \u2014 "),Bk=n(hFe,"A",{href:!0});var gPr=s(Bk);XKe=r(gPr,"SegformerFeatureExtractor"),gPr.forEach(t),VKe=r(hFe," (SegFormer model)"),hFe.forEach(t),zKe=i(le),ih=n(le,"LI",{});var pFe=s(ih);TJ=n(pFe,"STRONG",{});var hPr=s(TJ);WKe=r(hPr,"speech_to_text"),hPr.forEach(t),QKe=r(pFe," \u2014 "),xk=n(pFe,"A",{href:!0});var pPr=s(xk);HKe=r(pPr,"Speech2TextFeatureExtractor"),pPr.forEach(t),UKe=r(pFe," (Speech2Text model)"),pFe.forEach(t),JKe=i(le),dh=n(le,"LI",{});var _Fe=s(dh);FJ=n(_Fe,"STRONG",{});var _Pr=s(FJ);YKe=r(_Pr,"swin"),_Pr.forEach(t),KKe=r(_Fe," \u2014 "),kk=n(_Fe,"A",{href:!0});var uPr=s(kk);ZKe=r(uPr,"ViTFeatureExtractor"),uPr.forEach(t),eZe=r(_Fe," (Swin model)"),_Fe.forEach(t),oZe=i(le),ch=n(le,"LI",{});var uFe=s(ch);CJ=n(uFe,"STRONG",{});var bPr=s(CJ);rZe=r(bPr,"vit"),bPr.forEach(t),tZe=r(uFe," \u2014 "),Rk=n(uFe,"A",{href:!0});var vPr=s(Rk);aZe=r(vPr,"ViTFeatureExtractor"),vPr.forEach(t),nZe=r(uFe," (ViT model)"),uFe.forEach(t),sZe=i(le),fh=n(le,"LI",{});var bFe=s(fh);MJ=n(bFe,"STRONG",{});var TPr=s(MJ);lZe=r(TPr,"vit_mae"),TPr.forEach(t),iZe=r(bFe," \u2014 "),Sk=n(bFe,"A",{href:!0});var FPr=s(Sk);dZe=r(FPr,"ViTFeatureExtractor"),FPr.forEach(t),cZe=r(bFe," (ViTMAE model)"),bFe.forEach(t),fZe=i(le),mh=n(le,"LI",{});var vFe=s(mh);EJ=n(vFe,"STRONG",{});var CPr=s(EJ);mZe=r(CPr,"wav2vec2"),CPr.forEach(t),gZe=r(vFe," \u2014 "),Pk=n(vFe,"A",{href:!0});var MPr=s(Pk);hZe=r(MPr,"Wav2Vec2FeatureExtractor"),MPr.forEach(t),pZe=r(vFe," (Wav2Vec2 model)"),vFe.forEach(t),le.forEach(t),_Ze=i(St),m(gh.$$.fragment,St),uZe=i(St),yJ=n(St,"P",{});var EPr=s(yJ);bZe=r(EPr,"Examples:"),EPr.forEach(t),vZe=i(St),m(UM.$$.fragment,St),St.forEach(t),TZe=i(Ns),hh=n(Ns,"DIV",{class:!0});var Uxe=s(hh);m(JM.$$.fragment,Uxe),FZe=i(Uxe),wJ=n(Uxe,"P",{});var yPr=s(wJ);CZe=r(yPr,"Register a new feature extractor for this class."),yPr.forEach(t),Uxe.forEach(t),Ns.forEach(t),z7e=i(c),Gi=n(c,"H2",{class:!0});var Jxe=s(Gi);ph=n(Jxe,"A",{id:!0,class:!0,href:!0});var wPr=s(ph);AJ=n(wPr,"SPAN",{});var APr=s(AJ);m(YM.$$.fragment,APr),APr.forEach(t),wPr.forEach(t),MZe=i(Jxe),LJ=n(Jxe,"SPAN",{});var LPr=s(LJ);EZe=r(LPr,"AutoProcessor"),LPr.forEach(t),Jxe.forEach(t),W7e=i(c),Wo=n(c,"DIV",{class:!0});var qs=s(Wo);m(KM.$$.fragment,qs),yZe=i(qs),ZM=n(qs,"P",{});var Yxe=s(ZM);wZe=r(Yxe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),$k=n(Yxe,"A",{href:!0});var BPr=s($k);AZe=r(BPr,"AutoProcessor.from_pretrained()"),BPr.forEach(t),LZe=r(Yxe," class method."),Yxe.forEach(t),BZe=i(qs),eE=n(qs,"P",{});var Kxe=s(eE);xZe=r(Kxe,"This class cannot be instantiated directly using "),BJ=n(Kxe,"CODE",{});var xPr=s(BJ);kZe=r(xPr,"__init__()"),xPr.forEach(t),RZe=r(Kxe," (throws an error)."),Kxe.forEach(t),SZe=i(qs),ke=n(qs,"DIV",{class:!0});var Pt=s(ke);m(oE.$$.fragment,Pt),PZe=i(Pt),xJ=n(Pt,"P",{});var kPr=s(xJ);$Ze=r(kPr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),kPr.forEach(t),IZe=i(Pt),Oi=n(Pt,"P",{});var jV=s(Oi);DZe=r(jV,"The processor class to instantiate is selected based on the "),kJ=n(jV,"CODE",{});var RPr=s(kJ);jZe=r(RPr,"model_type"),RPr.forEach(t),NZe=r(jV,` property of the config object (either
passed as an argument or loaded from `),RJ=n(jV,"CODE",{});var SPr=s(RJ);qZe=r(SPr,"pretrained_model_name_or_path"),SPr.forEach(t),GZe=r(jV," if possible):"),jV.forEach(t),OZe=i(Pt),we=n(Pt,"UL",{});var jo=s(we);_h=n(jo,"LI",{});var TFe=s(_h);SJ=n(TFe,"STRONG",{});var PPr=s(SJ);XZe=r(PPr,"clip"),PPr.forEach(t),VZe=r(TFe," \u2014 "),Ik=n(TFe,"A",{href:!0});var $Pr=s(Ik);zZe=r($Pr,"CLIPProcessor"),$Pr.forEach(t),WZe=r(TFe," (CLIP model)"),TFe.forEach(t),QZe=i(jo),uh=n(jo,"LI",{});var FFe=s(uh);PJ=n(FFe,"STRONG",{});var IPr=s(PJ);HZe=r(IPr,"layoutlmv2"),IPr.forEach(t),UZe=r(FFe," \u2014 "),Dk=n(FFe,"A",{href:!0});var DPr=s(Dk);JZe=r(DPr,"LayoutLMv2Processor"),DPr.forEach(t),YZe=r(FFe," (LayoutLMv2 model)"),FFe.forEach(t),KZe=i(jo),bh=n(jo,"LI",{});var CFe=s(bh);$J=n(CFe,"STRONG",{});var jPr=s($J);ZZe=r(jPr,"layoutxlm"),jPr.forEach(t),eeo=r(CFe," \u2014 "),jk=n(CFe,"A",{href:!0});var NPr=s(jk);oeo=r(NPr,"LayoutXLMProcessor"),NPr.forEach(t),reo=r(CFe," (LayoutXLM model)"),CFe.forEach(t),teo=i(jo),vh=n(jo,"LI",{});var MFe=s(vh);IJ=n(MFe,"STRONG",{});var qPr=s(IJ);aeo=r(qPr,"speech_to_text"),qPr.forEach(t),neo=r(MFe," \u2014 "),Nk=n(MFe,"A",{href:!0});var GPr=s(Nk);seo=r(GPr,"Speech2TextProcessor"),GPr.forEach(t),leo=r(MFe," (Speech2Text model)"),MFe.forEach(t),ieo=i(jo),Th=n(jo,"LI",{});var EFe=s(Th);DJ=n(EFe,"STRONG",{});var OPr=s(DJ);deo=r(OPr,"speech_to_text_2"),OPr.forEach(t),ceo=r(EFe," \u2014 "),qk=n(EFe,"A",{href:!0});var XPr=s(qk);feo=r(XPr,"Speech2Text2Processor"),XPr.forEach(t),meo=r(EFe," (Speech2Text2 model)"),EFe.forEach(t),geo=i(jo),Fh=n(jo,"LI",{});var yFe=s(Fh);jJ=n(yFe,"STRONG",{});var VPr=s(jJ);heo=r(VPr,"trocr"),VPr.forEach(t),peo=r(yFe," \u2014 "),Gk=n(yFe,"A",{href:!0});var zPr=s(Gk);_eo=r(zPr,"TrOCRProcessor"),zPr.forEach(t),ueo=r(yFe," (TrOCR model)"),yFe.forEach(t),beo=i(jo),Ch=n(jo,"LI",{});var wFe=s(Ch);NJ=n(wFe,"STRONG",{});var WPr=s(NJ);veo=r(WPr,"vision-text-dual-encoder"),WPr.forEach(t),Teo=r(wFe," \u2014 "),Ok=n(wFe,"A",{href:!0});var QPr=s(Ok);Feo=r(QPr,"VisionTextDualEncoderProcessor"),QPr.forEach(t),Ceo=r(wFe," (VisionTextDualEncoder model)"),wFe.forEach(t),Meo=i(jo),Mh=n(jo,"LI",{});var AFe=s(Mh);qJ=n(AFe,"STRONG",{});var HPr=s(qJ);Eeo=r(HPr,"wav2vec2"),HPr.forEach(t),yeo=r(AFe," \u2014 "),Xk=n(AFe,"A",{href:!0});var UPr=s(Xk);weo=r(UPr,"Wav2Vec2Processor"),UPr.forEach(t),Aeo=r(AFe," (Wav2Vec2 model)"),AFe.forEach(t),jo.forEach(t),Leo=i(Pt),m(Eh.$$.fragment,Pt),Beo=i(Pt),GJ=n(Pt,"P",{});var JPr=s(GJ);xeo=r(JPr,"Examples:"),JPr.forEach(t),keo=i(Pt),m(rE.$$.fragment,Pt),Pt.forEach(t),Reo=i(qs),yh=n(qs,"DIV",{class:!0});var Zxe=s(yh);m(tE.$$.fragment,Zxe),Seo=i(Zxe),OJ=n(Zxe,"P",{});var YPr=s(OJ);Peo=r(YPr,"Register a new processor for this class."),YPr.forEach(t),Zxe.forEach(t),qs.forEach(t),Q7e=i(c),Xi=n(c,"H2",{class:!0});var eke=s(Xi);wh=n(eke,"A",{id:!0,class:!0,href:!0});var KPr=s(wh);XJ=n(KPr,"SPAN",{});var ZPr=s(XJ);m(aE.$$.fragment,ZPr),ZPr.forEach(t),KPr.forEach(t),$eo=i(eke),VJ=n(eke,"SPAN",{});var e$r=s(VJ);Ieo=r(e$r,"AutoModel"),e$r.forEach(t),eke.forEach(t),H7e=i(c),Qo=n(c,"DIV",{class:!0});var Gs=s(Qo);m(nE.$$.fragment,Gs),Deo=i(Gs),Vi=n(Gs,"P",{});var NV=s(Vi);jeo=r(NV,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),zJ=n(NV,"CODE",{});var o$r=s(zJ);Neo=r(o$r,"from_pretrained()"),o$r.forEach(t),qeo=r(NV,"class method or the "),WJ=n(NV,"CODE",{});var r$r=s(WJ);Geo=r(r$r,"from_config()"),r$r.forEach(t),Oeo=r(NV,`class
method.`),NV.forEach(t),Xeo=i(Gs),sE=n(Gs,"P",{});var oke=s(sE);Veo=r(oke,"This class cannot be instantiated directly using "),QJ=n(oke,"CODE",{});var t$r=s(QJ);zeo=r(t$r,"__init__()"),t$r.forEach(t),Weo=r(oke," (throws an error)."),oke.forEach(t),Qeo=i(Gs),qr=n(Gs,"DIV",{class:!0});var Os=s(qr);m(lE.$$.fragment,Os),Heo=i(Os),HJ=n(Os,"P",{});var a$r=s(HJ);Ueo=r(a$r,"Instantiates one of the base model classes of the library from a configuration."),a$r.forEach(t),Jeo=i(Os),zi=n(Os,"P",{});var qV=s(zi);Yeo=r(qV,`Note:
Loading a model from its configuration file does `),UJ=n(qV,"STRONG",{});var n$r=s(UJ);Keo=r(n$r,"not"),n$r.forEach(t),Zeo=r(qV,` load the model weights. It only affects the
model\u2019s configuration. Use `),JJ=n(qV,"CODE",{});var s$r=s(JJ);eoo=r(s$r,"from_pretrained()"),s$r.forEach(t),ooo=r(qV,"to load the model weights."),qV.forEach(t),roo=i(Os),YJ=n(Os,"P",{});var l$r=s(YJ);too=r(l$r,"Examples:"),l$r.forEach(t),aoo=i(Os),m(iE.$$.fragment,Os),Os.forEach(t),noo=i(Gs),Re=n(Gs,"DIV",{class:!0});var $t=s(Re);m(dE.$$.fragment,$t),soo=i($t),KJ=n($t,"P",{});var i$r=s(KJ);loo=r(i$r,"Instantiate one of the base model classes of the library from a pretrained model."),i$r.forEach(t),ioo=i($t),Na=n($t,"P",{});var L4=s(Na);doo=r(L4,"The model class to instantiate is selected based on the "),ZJ=n(L4,"CODE",{});var d$r=s(ZJ);coo=r(d$r,"model_type"),d$r.forEach(t),foo=r(L4,` property of the config object (either
passed as an argument or loaded from `),eY=n(L4,"CODE",{});var c$r=s(eY);moo=r(c$r,"pretrained_model_name_or_path"),c$r.forEach(t),goo=r(L4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oY=n(L4,"CODE",{});var f$r=s(oY);hoo=r(f$r,"pretrained_model_name_or_path"),f$r.forEach(t),poo=r(L4,":"),L4.forEach(t),_oo=i($t),F=n($t,"UL",{});var C=s(F);Ah=n(C,"LI",{});var LFe=s(Ah);rY=n(LFe,"STRONG",{});var m$r=s(rY);uoo=r(m$r,"albert"),m$r.forEach(t),boo=r(LFe," \u2014 "),Vk=n(LFe,"A",{href:!0});var g$r=s(Vk);voo=r(g$r,"AlbertModel"),g$r.forEach(t),Too=r(LFe," (ALBERT model)"),LFe.forEach(t),Foo=i(C),Lh=n(C,"LI",{});var BFe=s(Lh);tY=n(BFe,"STRONG",{});var h$r=s(tY);Coo=r(h$r,"bart"),h$r.forEach(t),Moo=r(BFe," \u2014 "),zk=n(BFe,"A",{href:!0});var p$r=s(zk);Eoo=r(p$r,"BartModel"),p$r.forEach(t),yoo=r(BFe," (BART model)"),BFe.forEach(t),woo=i(C),Bh=n(C,"LI",{});var xFe=s(Bh);aY=n(xFe,"STRONG",{});var _$r=s(aY);Aoo=r(_$r,"beit"),_$r.forEach(t),Loo=r(xFe," \u2014 "),Wk=n(xFe,"A",{href:!0});var u$r=s(Wk);Boo=r(u$r,"BeitModel"),u$r.forEach(t),xoo=r(xFe," (BEiT model)"),xFe.forEach(t),koo=i(C),xh=n(C,"LI",{});var kFe=s(xh);nY=n(kFe,"STRONG",{});var b$r=s(nY);Roo=r(b$r,"bert"),b$r.forEach(t),Soo=r(kFe," \u2014 "),Qk=n(kFe,"A",{href:!0});var v$r=s(Qk);Poo=r(v$r,"BertModel"),v$r.forEach(t),$oo=r(kFe," (BERT model)"),kFe.forEach(t),Ioo=i(C),kh=n(C,"LI",{});var RFe=s(kh);sY=n(RFe,"STRONG",{});var T$r=s(sY);Doo=r(T$r,"bert-generation"),T$r.forEach(t),joo=r(RFe," \u2014 "),Hk=n(RFe,"A",{href:!0});var F$r=s(Hk);Noo=r(F$r,"BertGenerationEncoder"),F$r.forEach(t),qoo=r(RFe," (Bert Generation model)"),RFe.forEach(t),Goo=i(C),Rh=n(C,"LI",{});var SFe=s(Rh);lY=n(SFe,"STRONG",{});var C$r=s(lY);Ooo=r(C$r,"big_bird"),C$r.forEach(t),Xoo=r(SFe," \u2014 "),Uk=n(SFe,"A",{href:!0});var M$r=s(Uk);Voo=r(M$r,"BigBirdModel"),M$r.forEach(t),zoo=r(SFe," (BigBird model)"),SFe.forEach(t),Woo=i(C),Sh=n(C,"LI",{});var PFe=s(Sh);iY=n(PFe,"STRONG",{});var E$r=s(iY);Qoo=r(E$r,"bigbird_pegasus"),E$r.forEach(t),Hoo=r(PFe," \u2014 "),Jk=n(PFe,"A",{href:!0});var y$r=s(Jk);Uoo=r(y$r,"BigBirdPegasusModel"),y$r.forEach(t),Joo=r(PFe," (BigBirdPegasus model)"),PFe.forEach(t),Yoo=i(C),Ph=n(C,"LI",{});var $Fe=s(Ph);dY=n($Fe,"STRONG",{});var w$r=s(dY);Koo=r(w$r,"blenderbot"),w$r.forEach(t),Zoo=r($Fe," \u2014 "),Yk=n($Fe,"A",{href:!0});var A$r=s(Yk);ero=r(A$r,"BlenderbotModel"),A$r.forEach(t),oro=r($Fe," (Blenderbot model)"),$Fe.forEach(t),rro=i(C),$h=n(C,"LI",{});var IFe=s($h);cY=n(IFe,"STRONG",{});var L$r=s(cY);tro=r(L$r,"blenderbot-small"),L$r.forEach(t),aro=r(IFe," \u2014 "),Kk=n(IFe,"A",{href:!0});var B$r=s(Kk);nro=r(B$r,"BlenderbotSmallModel"),B$r.forEach(t),sro=r(IFe," (BlenderbotSmall model)"),IFe.forEach(t),lro=i(C),Ih=n(C,"LI",{});var DFe=s(Ih);fY=n(DFe,"STRONG",{});var x$r=s(fY);iro=r(x$r,"camembert"),x$r.forEach(t),dro=r(DFe," \u2014 "),Zk=n(DFe,"A",{href:!0});var k$r=s(Zk);cro=r(k$r,"CamembertModel"),k$r.forEach(t),fro=r(DFe," (CamemBERT model)"),DFe.forEach(t),mro=i(C),Dh=n(C,"LI",{});var jFe=s(Dh);mY=n(jFe,"STRONG",{});var R$r=s(mY);gro=r(R$r,"canine"),R$r.forEach(t),hro=r(jFe," \u2014 "),eR=n(jFe,"A",{href:!0});var S$r=s(eR);pro=r(S$r,"CanineModel"),S$r.forEach(t),_ro=r(jFe," (Canine model)"),jFe.forEach(t),uro=i(C),jh=n(C,"LI",{});var NFe=s(jh);gY=n(NFe,"STRONG",{});var P$r=s(gY);bro=r(P$r,"clip"),P$r.forEach(t),vro=r(NFe," \u2014 "),oR=n(NFe,"A",{href:!0});var $$r=s(oR);Tro=r($$r,"CLIPModel"),$$r.forEach(t),Fro=r(NFe," (CLIP model)"),NFe.forEach(t),Cro=i(C),Nh=n(C,"LI",{});var qFe=s(Nh);hY=n(qFe,"STRONG",{});var I$r=s(hY);Mro=r(I$r,"convbert"),I$r.forEach(t),Ero=r(qFe," \u2014 "),rR=n(qFe,"A",{href:!0});var D$r=s(rR);yro=r(D$r,"ConvBertModel"),D$r.forEach(t),wro=r(qFe," (ConvBERT model)"),qFe.forEach(t),Aro=i(C),qh=n(C,"LI",{});var GFe=s(qh);pY=n(GFe,"STRONG",{});var j$r=s(pY);Lro=r(j$r,"convnext"),j$r.forEach(t),Bro=r(GFe," \u2014 "),tR=n(GFe,"A",{href:!0});var N$r=s(tR);xro=r(N$r,"ConvNextModel"),N$r.forEach(t),kro=r(GFe," (ConvNext model)"),GFe.forEach(t),Rro=i(C),Gh=n(C,"LI",{});var OFe=s(Gh);_Y=n(OFe,"STRONG",{});var q$r=s(_Y);Sro=r(q$r,"ctrl"),q$r.forEach(t),Pro=r(OFe," \u2014 "),aR=n(OFe,"A",{href:!0});var G$r=s(aR);$ro=r(G$r,"CTRLModel"),G$r.forEach(t),Iro=r(OFe," (CTRL model)"),OFe.forEach(t),Dro=i(C),Oh=n(C,"LI",{});var XFe=s(Oh);uY=n(XFe,"STRONG",{});var O$r=s(uY);jro=r(O$r,"data2vec-audio"),O$r.forEach(t),Nro=r(XFe," \u2014 "),nR=n(XFe,"A",{href:!0});var X$r=s(nR);qro=r(X$r,"Data2VecAudioModel"),X$r.forEach(t),Gro=r(XFe," (Data2VecAudio model)"),XFe.forEach(t),Oro=i(C),Xh=n(C,"LI",{});var VFe=s(Xh);bY=n(VFe,"STRONG",{});var V$r=s(bY);Xro=r(V$r,"data2vec-text"),V$r.forEach(t),Vro=r(VFe," \u2014 "),sR=n(VFe,"A",{href:!0});var z$r=s(sR);zro=r(z$r,"Data2VecTextModel"),z$r.forEach(t),Wro=r(VFe," (Data2VecText model)"),VFe.forEach(t),Qro=i(C),Vh=n(C,"LI",{});var zFe=s(Vh);vY=n(zFe,"STRONG",{});var W$r=s(vY);Hro=r(W$r,"deberta"),W$r.forEach(t),Uro=r(zFe," \u2014 "),lR=n(zFe,"A",{href:!0});var Q$r=s(lR);Jro=r(Q$r,"DebertaModel"),Q$r.forEach(t),Yro=r(zFe," (DeBERTa model)"),zFe.forEach(t),Kro=i(C),zh=n(C,"LI",{});var WFe=s(zh);TY=n(WFe,"STRONG",{});var H$r=s(TY);Zro=r(H$r,"deberta-v2"),H$r.forEach(t),eto=r(WFe," \u2014 "),iR=n(WFe,"A",{href:!0});var U$r=s(iR);oto=r(U$r,"DebertaV2Model"),U$r.forEach(t),rto=r(WFe," (DeBERTa-v2 model)"),WFe.forEach(t),tto=i(C),Wh=n(C,"LI",{});var QFe=s(Wh);FY=n(QFe,"STRONG",{});var J$r=s(FY);ato=r(J$r,"deit"),J$r.forEach(t),nto=r(QFe," \u2014 "),dR=n(QFe,"A",{href:!0});var Y$r=s(dR);sto=r(Y$r,"DeiTModel"),Y$r.forEach(t),lto=r(QFe," (DeiT model)"),QFe.forEach(t),ito=i(C),Qh=n(C,"LI",{});var HFe=s(Qh);CY=n(HFe,"STRONG",{});var K$r=s(CY);dto=r(K$r,"detr"),K$r.forEach(t),cto=r(HFe," \u2014 "),cR=n(HFe,"A",{href:!0});var Z$r=s(cR);fto=r(Z$r,"DetrModel"),Z$r.forEach(t),mto=r(HFe," (DETR model)"),HFe.forEach(t),gto=i(C),Hh=n(C,"LI",{});var UFe=s(Hh);MY=n(UFe,"STRONG",{});var eIr=s(MY);hto=r(eIr,"distilbert"),eIr.forEach(t),pto=r(UFe," \u2014 "),fR=n(UFe,"A",{href:!0});var oIr=s(fR);_to=r(oIr,"DistilBertModel"),oIr.forEach(t),uto=r(UFe," (DistilBERT model)"),UFe.forEach(t),bto=i(C),Uh=n(C,"LI",{});var JFe=s(Uh);EY=n(JFe,"STRONG",{});var rIr=s(EY);vto=r(rIr,"dpr"),rIr.forEach(t),Tto=r(JFe," \u2014 "),mR=n(JFe,"A",{href:!0});var tIr=s(mR);Fto=r(tIr,"DPRQuestionEncoder"),tIr.forEach(t),Cto=r(JFe," (DPR model)"),JFe.forEach(t),Mto=i(C),Jh=n(C,"LI",{});var YFe=s(Jh);yY=n(YFe,"STRONG",{});var aIr=s(yY);Eto=r(aIr,"electra"),aIr.forEach(t),yto=r(YFe," \u2014 "),gR=n(YFe,"A",{href:!0});var nIr=s(gR);wto=r(nIr,"ElectraModel"),nIr.forEach(t),Ato=r(YFe," (ELECTRA model)"),YFe.forEach(t),Lto=i(C),Yh=n(C,"LI",{});var KFe=s(Yh);wY=n(KFe,"STRONG",{});var sIr=s(wY);Bto=r(sIr,"flaubert"),sIr.forEach(t),xto=r(KFe," \u2014 "),hR=n(KFe,"A",{href:!0});var lIr=s(hR);kto=r(lIr,"FlaubertModel"),lIr.forEach(t),Rto=r(KFe," (FlauBERT model)"),KFe.forEach(t),Sto=i(C),Kh=n(C,"LI",{});var ZFe=s(Kh);AY=n(ZFe,"STRONG",{});var iIr=s(AY);Pto=r(iIr,"fnet"),iIr.forEach(t),$to=r(ZFe," \u2014 "),pR=n(ZFe,"A",{href:!0});var dIr=s(pR);Ito=r(dIr,"FNetModel"),dIr.forEach(t),Dto=r(ZFe," (FNet model)"),ZFe.forEach(t),jto=i(C),Zh=n(C,"LI",{});var e9e=s(Zh);LY=n(e9e,"STRONG",{});var cIr=s(LY);Nto=r(cIr,"fsmt"),cIr.forEach(t),qto=r(e9e," \u2014 "),_R=n(e9e,"A",{href:!0});var fIr=s(_R);Gto=r(fIr,"FSMTModel"),fIr.forEach(t),Oto=r(e9e," (FairSeq Machine-Translation model)"),e9e.forEach(t),Xto=i(C),Ps=n(C,"LI",{});var l8=s(Ps);BY=n(l8,"STRONG",{});var mIr=s(BY);Vto=r(mIr,"funnel"),mIr.forEach(t),zto=r(l8," \u2014 "),uR=n(l8,"A",{href:!0});var gIr=s(uR);Wto=r(gIr,"FunnelModel"),gIr.forEach(t),Qto=r(l8," or "),bR=n(l8,"A",{href:!0});var hIr=s(bR);Hto=r(hIr,"FunnelBaseModel"),hIr.forEach(t),Uto=r(l8," (Funnel Transformer model)"),l8.forEach(t),Jto=i(C),ep=n(C,"LI",{});var o9e=s(ep);xY=n(o9e,"STRONG",{});var pIr=s(xY);Yto=r(pIr,"gpt2"),pIr.forEach(t),Kto=r(o9e," \u2014 "),vR=n(o9e,"A",{href:!0});var _Ir=s(vR);Zto=r(_Ir,"GPT2Model"),_Ir.forEach(t),eao=r(o9e," (OpenAI GPT-2 model)"),o9e.forEach(t),oao=i(C),op=n(C,"LI",{});var r9e=s(op);kY=n(r9e,"STRONG",{});var uIr=s(kY);rao=r(uIr,"gpt_neo"),uIr.forEach(t),tao=r(r9e," \u2014 "),TR=n(r9e,"A",{href:!0});var bIr=s(TR);aao=r(bIr,"GPTNeoModel"),bIr.forEach(t),nao=r(r9e," (GPT Neo model)"),r9e.forEach(t),sao=i(C),rp=n(C,"LI",{});var t9e=s(rp);RY=n(t9e,"STRONG",{});var vIr=s(RY);lao=r(vIr,"gptj"),vIr.forEach(t),iao=r(t9e," \u2014 "),FR=n(t9e,"A",{href:!0});var TIr=s(FR);dao=r(TIr,"GPTJModel"),TIr.forEach(t),cao=r(t9e," (GPT-J model)"),t9e.forEach(t),fao=i(C),tp=n(C,"LI",{});var a9e=s(tp);SY=n(a9e,"STRONG",{});var FIr=s(SY);mao=r(FIr,"hubert"),FIr.forEach(t),gao=r(a9e," \u2014 "),CR=n(a9e,"A",{href:!0});var CIr=s(CR);hao=r(CIr,"HubertModel"),CIr.forEach(t),pao=r(a9e," (Hubert model)"),a9e.forEach(t),_ao=i(C),ap=n(C,"LI",{});var n9e=s(ap);PY=n(n9e,"STRONG",{});var MIr=s(PY);uao=r(MIr,"ibert"),MIr.forEach(t),bao=r(n9e," \u2014 "),MR=n(n9e,"A",{href:!0});var EIr=s(MR);vao=r(EIr,"IBertModel"),EIr.forEach(t),Tao=r(n9e," (I-BERT model)"),n9e.forEach(t),Fao=i(C),np=n(C,"LI",{});var s9e=s(np);$Y=n(s9e,"STRONG",{});var yIr=s($Y);Cao=r(yIr,"imagegpt"),yIr.forEach(t),Mao=r(s9e," \u2014 "),ER=n(s9e,"A",{href:!0});var wIr=s(ER);Eao=r(wIr,"ImageGPTModel"),wIr.forEach(t),yao=r(s9e," (ImageGPT model)"),s9e.forEach(t),wao=i(C),sp=n(C,"LI",{});var l9e=s(sp);IY=n(l9e,"STRONG",{});var AIr=s(IY);Aao=r(AIr,"layoutlm"),AIr.forEach(t),Lao=r(l9e," \u2014 "),yR=n(l9e,"A",{href:!0});var LIr=s(yR);Bao=r(LIr,"LayoutLMModel"),LIr.forEach(t),xao=r(l9e," (LayoutLM model)"),l9e.forEach(t),kao=i(C),lp=n(C,"LI",{});var i9e=s(lp);DY=n(i9e,"STRONG",{});var BIr=s(DY);Rao=r(BIr,"layoutlmv2"),BIr.forEach(t),Sao=r(i9e," \u2014 "),wR=n(i9e,"A",{href:!0});var xIr=s(wR);Pao=r(xIr,"LayoutLMv2Model"),xIr.forEach(t),$ao=r(i9e," (LayoutLMv2 model)"),i9e.forEach(t),Iao=i(C),ip=n(C,"LI",{});var d9e=s(ip);jY=n(d9e,"STRONG",{});var kIr=s(jY);Dao=r(kIr,"led"),kIr.forEach(t),jao=r(d9e," \u2014 "),AR=n(d9e,"A",{href:!0});var RIr=s(AR);Nao=r(RIr,"LEDModel"),RIr.forEach(t),qao=r(d9e," (LED model)"),d9e.forEach(t),Gao=i(C),dp=n(C,"LI",{});var c9e=s(dp);NY=n(c9e,"STRONG",{});var SIr=s(NY);Oao=r(SIr,"longformer"),SIr.forEach(t),Xao=r(c9e," \u2014 "),LR=n(c9e,"A",{href:!0});var PIr=s(LR);Vao=r(PIr,"LongformerModel"),PIr.forEach(t),zao=r(c9e," (Longformer model)"),c9e.forEach(t),Wao=i(C),cp=n(C,"LI",{});var f9e=s(cp);qY=n(f9e,"STRONG",{});var $Ir=s(qY);Qao=r($Ir,"luke"),$Ir.forEach(t),Hao=r(f9e," \u2014 "),BR=n(f9e,"A",{href:!0});var IIr=s(BR);Uao=r(IIr,"LukeModel"),IIr.forEach(t),Jao=r(f9e," (LUKE model)"),f9e.forEach(t),Yao=i(C),fp=n(C,"LI",{});var m9e=s(fp);GY=n(m9e,"STRONG",{});var DIr=s(GY);Kao=r(DIr,"lxmert"),DIr.forEach(t),Zao=r(m9e," \u2014 "),xR=n(m9e,"A",{href:!0});var jIr=s(xR);eno=r(jIr,"LxmertModel"),jIr.forEach(t),ono=r(m9e," (LXMERT model)"),m9e.forEach(t),rno=i(C),mp=n(C,"LI",{});var g9e=s(mp);OY=n(g9e,"STRONG",{});var NIr=s(OY);tno=r(NIr,"m2m_100"),NIr.forEach(t),ano=r(g9e," \u2014 "),kR=n(g9e,"A",{href:!0});var qIr=s(kR);nno=r(qIr,"M2M100Model"),qIr.forEach(t),sno=r(g9e," (M2M100 model)"),g9e.forEach(t),lno=i(C),gp=n(C,"LI",{});var h9e=s(gp);XY=n(h9e,"STRONG",{});var GIr=s(XY);ino=r(GIr,"marian"),GIr.forEach(t),dno=r(h9e," \u2014 "),RR=n(h9e,"A",{href:!0});var OIr=s(RR);cno=r(OIr,"MarianModel"),OIr.forEach(t),fno=r(h9e," (Marian model)"),h9e.forEach(t),mno=i(C),hp=n(C,"LI",{});var p9e=s(hp);VY=n(p9e,"STRONG",{});var XIr=s(VY);gno=r(XIr,"maskformer"),XIr.forEach(t),hno=r(p9e," \u2014 "),SR=n(p9e,"A",{href:!0});var VIr=s(SR);pno=r(VIr,"MaskFormerModel"),VIr.forEach(t),_no=r(p9e," (MaskFormer model)"),p9e.forEach(t),uno=i(C),pp=n(C,"LI",{});var _9e=s(pp);zY=n(_9e,"STRONG",{});var zIr=s(zY);bno=r(zIr,"mbart"),zIr.forEach(t),vno=r(_9e," \u2014 "),PR=n(_9e,"A",{href:!0});var WIr=s(PR);Tno=r(WIr,"MBartModel"),WIr.forEach(t),Fno=r(_9e," (mBART model)"),_9e.forEach(t),Cno=i(C),_p=n(C,"LI",{});var u9e=s(_p);WY=n(u9e,"STRONG",{});var QIr=s(WY);Mno=r(QIr,"megatron-bert"),QIr.forEach(t),Eno=r(u9e," \u2014 "),$R=n(u9e,"A",{href:!0});var HIr=s($R);yno=r(HIr,"MegatronBertModel"),HIr.forEach(t),wno=r(u9e," (MegatronBert model)"),u9e.forEach(t),Ano=i(C),up=n(C,"LI",{});var b9e=s(up);QY=n(b9e,"STRONG",{});var UIr=s(QY);Lno=r(UIr,"mobilebert"),UIr.forEach(t),Bno=r(b9e," \u2014 "),IR=n(b9e,"A",{href:!0});var JIr=s(IR);xno=r(JIr,"MobileBertModel"),JIr.forEach(t),kno=r(b9e," (MobileBERT model)"),b9e.forEach(t),Rno=i(C),bp=n(C,"LI",{});var v9e=s(bp);HY=n(v9e,"STRONG",{});var YIr=s(HY);Sno=r(YIr,"mpnet"),YIr.forEach(t),Pno=r(v9e," \u2014 "),DR=n(v9e,"A",{href:!0});var KIr=s(DR);$no=r(KIr,"MPNetModel"),KIr.forEach(t),Ino=r(v9e," (MPNet model)"),v9e.forEach(t),Dno=i(C),vp=n(C,"LI",{});var T9e=s(vp);UY=n(T9e,"STRONG",{});var ZIr=s(UY);jno=r(ZIr,"mt5"),ZIr.forEach(t),Nno=r(T9e," \u2014 "),jR=n(T9e,"A",{href:!0});var eDr=s(jR);qno=r(eDr,"MT5Model"),eDr.forEach(t),Gno=r(T9e," (mT5 model)"),T9e.forEach(t),Ono=i(C),Tp=n(C,"LI",{});var F9e=s(Tp);JY=n(F9e,"STRONG",{});var oDr=s(JY);Xno=r(oDr,"nystromformer"),oDr.forEach(t),Vno=r(F9e," \u2014 "),NR=n(F9e,"A",{href:!0});var rDr=s(NR);zno=r(rDr,"NystromformerModel"),rDr.forEach(t),Wno=r(F9e," (Nystromformer model)"),F9e.forEach(t),Qno=i(C),Fp=n(C,"LI",{});var C9e=s(Fp);YY=n(C9e,"STRONG",{});var tDr=s(YY);Hno=r(tDr,"openai-gpt"),tDr.forEach(t),Uno=r(C9e," \u2014 "),qR=n(C9e,"A",{href:!0});var aDr=s(qR);Jno=r(aDr,"OpenAIGPTModel"),aDr.forEach(t),Yno=r(C9e," (OpenAI GPT model)"),C9e.forEach(t),Kno=i(C),Cp=n(C,"LI",{});var M9e=s(Cp);KY=n(M9e,"STRONG",{});var nDr=s(KY);Zno=r(nDr,"pegasus"),nDr.forEach(t),eso=r(M9e," \u2014 "),GR=n(M9e,"A",{href:!0});var sDr=s(GR);oso=r(sDr,"PegasusModel"),sDr.forEach(t),rso=r(M9e," (Pegasus model)"),M9e.forEach(t),tso=i(C),Mp=n(C,"LI",{});var E9e=s(Mp);ZY=n(E9e,"STRONG",{});var lDr=s(ZY);aso=r(lDr,"perceiver"),lDr.forEach(t),nso=r(E9e," \u2014 "),OR=n(E9e,"A",{href:!0});var iDr=s(OR);sso=r(iDr,"PerceiverModel"),iDr.forEach(t),lso=r(E9e," (Perceiver model)"),E9e.forEach(t),iso=i(C),Ep=n(C,"LI",{});var y9e=s(Ep);eK=n(y9e,"STRONG",{});var dDr=s(eK);dso=r(dDr,"plbart"),dDr.forEach(t),cso=r(y9e," \u2014 "),XR=n(y9e,"A",{href:!0});var cDr=s(XR);fso=r(cDr,"PLBartModel"),cDr.forEach(t),mso=r(y9e," (PLBart model)"),y9e.forEach(t),gso=i(C),yp=n(C,"LI",{});var w9e=s(yp);oK=n(w9e,"STRONG",{});var fDr=s(oK);hso=r(fDr,"poolformer"),fDr.forEach(t),pso=r(w9e," \u2014 "),VR=n(w9e,"A",{href:!0});var mDr=s(VR);_so=r(mDr,"PoolFormerModel"),mDr.forEach(t),uso=r(w9e," (PoolFormer model)"),w9e.forEach(t),bso=i(C),wp=n(C,"LI",{});var A9e=s(wp);rK=n(A9e,"STRONG",{});var gDr=s(rK);vso=r(gDr,"prophetnet"),gDr.forEach(t),Tso=r(A9e," \u2014 "),zR=n(A9e,"A",{href:!0});var hDr=s(zR);Fso=r(hDr,"ProphetNetModel"),hDr.forEach(t),Cso=r(A9e," (ProphetNet model)"),A9e.forEach(t),Mso=i(C),Ap=n(C,"LI",{});var L9e=s(Ap);tK=n(L9e,"STRONG",{});var pDr=s(tK);Eso=r(pDr,"qdqbert"),pDr.forEach(t),yso=r(L9e," \u2014 "),WR=n(L9e,"A",{href:!0});var _Dr=s(WR);wso=r(_Dr,"QDQBertModel"),_Dr.forEach(t),Aso=r(L9e," (QDQBert model)"),L9e.forEach(t),Lso=i(C),Lp=n(C,"LI",{});var B9e=s(Lp);aK=n(B9e,"STRONG",{});var uDr=s(aK);Bso=r(uDr,"reformer"),uDr.forEach(t),xso=r(B9e," \u2014 "),QR=n(B9e,"A",{href:!0});var bDr=s(QR);kso=r(bDr,"ReformerModel"),bDr.forEach(t),Rso=r(B9e," (Reformer model)"),B9e.forEach(t),Sso=i(C),Bp=n(C,"LI",{});var x9e=s(Bp);nK=n(x9e,"STRONG",{});var vDr=s(nK);Pso=r(vDr,"rembert"),vDr.forEach(t),$so=r(x9e," \u2014 "),HR=n(x9e,"A",{href:!0});var TDr=s(HR);Iso=r(TDr,"RemBertModel"),TDr.forEach(t),Dso=r(x9e," (RemBERT model)"),x9e.forEach(t),jso=i(C),xp=n(C,"LI",{});var k9e=s(xp);sK=n(k9e,"STRONG",{});var FDr=s(sK);Nso=r(FDr,"retribert"),FDr.forEach(t),qso=r(k9e," \u2014 "),UR=n(k9e,"A",{href:!0});var CDr=s(UR);Gso=r(CDr,"RetriBertModel"),CDr.forEach(t),Oso=r(k9e," (RetriBERT model)"),k9e.forEach(t),Xso=i(C),kp=n(C,"LI",{});var R9e=s(kp);lK=n(R9e,"STRONG",{});var MDr=s(lK);Vso=r(MDr,"roberta"),MDr.forEach(t),zso=r(R9e," \u2014 "),JR=n(R9e,"A",{href:!0});var EDr=s(JR);Wso=r(EDr,"RobertaModel"),EDr.forEach(t),Qso=r(R9e," (RoBERTa model)"),R9e.forEach(t),Hso=i(C),Rp=n(C,"LI",{});var S9e=s(Rp);iK=n(S9e,"STRONG",{});var yDr=s(iK);Uso=r(yDr,"roformer"),yDr.forEach(t),Jso=r(S9e," \u2014 "),YR=n(S9e,"A",{href:!0});var wDr=s(YR);Yso=r(wDr,"RoFormerModel"),wDr.forEach(t),Kso=r(S9e," (RoFormer model)"),S9e.forEach(t),Zso=i(C),Sp=n(C,"LI",{});var P9e=s(Sp);dK=n(P9e,"STRONG",{});var ADr=s(dK);elo=r(ADr,"segformer"),ADr.forEach(t),olo=r(P9e," \u2014 "),KR=n(P9e,"A",{href:!0});var LDr=s(KR);rlo=r(LDr,"SegformerModel"),LDr.forEach(t),tlo=r(P9e," (SegFormer model)"),P9e.forEach(t),alo=i(C),Pp=n(C,"LI",{});var $9e=s(Pp);cK=n($9e,"STRONG",{});var BDr=s(cK);nlo=r(BDr,"sew"),BDr.forEach(t),slo=r($9e," \u2014 "),ZR=n($9e,"A",{href:!0});var xDr=s(ZR);llo=r(xDr,"SEWModel"),xDr.forEach(t),ilo=r($9e," (SEW model)"),$9e.forEach(t),dlo=i(C),$p=n(C,"LI",{});var I9e=s($p);fK=n(I9e,"STRONG",{});var kDr=s(fK);clo=r(kDr,"sew-d"),kDr.forEach(t),flo=r(I9e," \u2014 "),eS=n(I9e,"A",{href:!0});var RDr=s(eS);mlo=r(RDr,"SEWDModel"),RDr.forEach(t),glo=r(I9e," (SEW-D model)"),I9e.forEach(t),hlo=i(C),Ip=n(C,"LI",{});var D9e=s(Ip);mK=n(D9e,"STRONG",{});var SDr=s(mK);plo=r(SDr,"speech_to_text"),SDr.forEach(t),_lo=r(D9e," \u2014 "),oS=n(D9e,"A",{href:!0});var PDr=s(oS);ulo=r(PDr,"Speech2TextModel"),PDr.forEach(t),blo=r(D9e," (Speech2Text model)"),D9e.forEach(t),vlo=i(C),Dp=n(C,"LI",{});var j9e=s(Dp);gK=n(j9e,"STRONG",{});var $Dr=s(gK);Tlo=r($Dr,"splinter"),$Dr.forEach(t),Flo=r(j9e," \u2014 "),rS=n(j9e,"A",{href:!0});var IDr=s(rS);Clo=r(IDr,"SplinterModel"),IDr.forEach(t),Mlo=r(j9e," (Splinter model)"),j9e.forEach(t),Elo=i(C),jp=n(C,"LI",{});var N9e=s(jp);hK=n(N9e,"STRONG",{});var DDr=s(hK);ylo=r(DDr,"squeezebert"),DDr.forEach(t),wlo=r(N9e," \u2014 "),tS=n(N9e,"A",{href:!0});var jDr=s(tS);Alo=r(jDr,"SqueezeBertModel"),jDr.forEach(t),Llo=r(N9e," (SqueezeBERT model)"),N9e.forEach(t),Blo=i(C),Np=n(C,"LI",{});var q9e=s(Np);pK=n(q9e,"STRONG",{});var NDr=s(pK);xlo=r(NDr,"swin"),NDr.forEach(t),klo=r(q9e," \u2014 "),aS=n(q9e,"A",{href:!0});var qDr=s(aS);Rlo=r(qDr,"SwinModel"),qDr.forEach(t),Slo=r(q9e," (Swin model)"),q9e.forEach(t),Plo=i(C),qp=n(C,"LI",{});var G9e=s(qp);_K=n(G9e,"STRONG",{});var GDr=s(_K);$lo=r(GDr,"t5"),GDr.forEach(t),Ilo=r(G9e," \u2014 "),nS=n(G9e,"A",{href:!0});var ODr=s(nS);Dlo=r(ODr,"T5Model"),ODr.forEach(t),jlo=r(G9e," (T5 model)"),G9e.forEach(t),Nlo=i(C),Gp=n(C,"LI",{});var O9e=s(Gp);uK=n(O9e,"STRONG",{});var XDr=s(uK);qlo=r(XDr,"tapas"),XDr.forEach(t),Glo=r(O9e," \u2014 "),sS=n(O9e,"A",{href:!0});var VDr=s(sS);Olo=r(VDr,"TapasModel"),VDr.forEach(t),Xlo=r(O9e," (TAPAS model)"),O9e.forEach(t),Vlo=i(C),Op=n(C,"LI",{});var X9e=s(Op);bK=n(X9e,"STRONG",{});var zDr=s(bK);zlo=r(zDr,"transfo-xl"),zDr.forEach(t),Wlo=r(X9e," \u2014 "),lS=n(X9e,"A",{href:!0});var WDr=s(lS);Qlo=r(WDr,"TransfoXLModel"),WDr.forEach(t),Hlo=r(X9e," (Transformer-XL model)"),X9e.forEach(t),Ulo=i(C),Xp=n(C,"LI",{});var V9e=s(Xp);vK=n(V9e,"STRONG",{});var QDr=s(vK);Jlo=r(QDr,"unispeech"),QDr.forEach(t),Ylo=r(V9e," \u2014 "),iS=n(V9e,"A",{href:!0});var HDr=s(iS);Klo=r(HDr,"UniSpeechModel"),HDr.forEach(t),Zlo=r(V9e," (UniSpeech model)"),V9e.forEach(t),eio=i(C),Vp=n(C,"LI",{});var z9e=s(Vp);TK=n(z9e,"STRONG",{});var UDr=s(TK);oio=r(UDr,"unispeech-sat"),UDr.forEach(t),rio=r(z9e," \u2014 "),dS=n(z9e,"A",{href:!0});var JDr=s(dS);tio=r(JDr,"UniSpeechSatModel"),JDr.forEach(t),aio=r(z9e," (UniSpeechSat model)"),z9e.forEach(t),nio=i(C),zp=n(C,"LI",{});var W9e=s(zp);FK=n(W9e,"STRONG",{});var YDr=s(FK);sio=r(YDr,"vilt"),YDr.forEach(t),lio=r(W9e," \u2014 "),cS=n(W9e,"A",{href:!0});var KDr=s(cS);iio=r(KDr,"ViltModel"),KDr.forEach(t),dio=r(W9e," (ViLT model)"),W9e.forEach(t),cio=i(C),Wp=n(C,"LI",{});var Q9e=s(Wp);CK=n(Q9e,"STRONG",{});var ZDr=s(CK);fio=r(ZDr,"vision-text-dual-encoder"),ZDr.forEach(t),mio=r(Q9e," \u2014 "),fS=n(Q9e,"A",{href:!0});var ejr=s(fS);gio=r(ejr,"VisionTextDualEncoderModel"),ejr.forEach(t),hio=r(Q9e," (VisionTextDualEncoder model)"),Q9e.forEach(t),pio=i(C),Qp=n(C,"LI",{});var H9e=s(Qp);MK=n(H9e,"STRONG",{});var ojr=s(MK);_io=r(ojr,"visual_bert"),ojr.forEach(t),uio=r(H9e," \u2014 "),mS=n(H9e,"A",{href:!0});var rjr=s(mS);bio=r(rjr,"VisualBertModel"),rjr.forEach(t),vio=r(H9e," (VisualBert model)"),H9e.forEach(t),Tio=i(C),Hp=n(C,"LI",{});var U9e=s(Hp);EK=n(U9e,"STRONG",{});var tjr=s(EK);Fio=r(tjr,"vit"),tjr.forEach(t),Cio=r(U9e," \u2014 "),gS=n(U9e,"A",{href:!0});var ajr=s(gS);Mio=r(ajr,"ViTModel"),ajr.forEach(t),Eio=r(U9e," (ViT model)"),U9e.forEach(t),yio=i(C),Up=n(C,"LI",{});var J9e=s(Up);yK=n(J9e,"STRONG",{});var njr=s(yK);wio=r(njr,"vit_mae"),njr.forEach(t),Aio=r(J9e," \u2014 "),hS=n(J9e,"A",{href:!0});var sjr=s(hS);Lio=r(sjr,"ViTMAEModel"),sjr.forEach(t),Bio=r(J9e," (ViTMAE model)"),J9e.forEach(t),xio=i(C),Jp=n(C,"LI",{});var Y9e=s(Jp);wK=n(Y9e,"STRONG",{});var ljr=s(wK);kio=r(ljr,"wav2vec2"),ljr.forEach(t),Rio=r(Y9e," \u2014 "),pS=n(Y9e,"A",{href:!0});var ijr=s(pS);Sio=r(ijr,"Wav2Vec2Model"),ijr.forEach(t),Pio=r(Y9e," (Wav2Vec2 model)"),Y9e.forEach(t),$io=i(C),Yp=n(C,"LI",{});var K9e=s(Yp);AK=n(K9e,"STRONG",{});var djr=s(AK);Iio=r(djr,"wavlm"),djr.forEach(t),Dio=r(K9e," \u2014 "),_S=n(K9e,"A",{href:!0});var cjr=s(_S);jio=r(cjr,"WavLMModel"),cjr.forEach(t),Nio=r(K9e," (WavLM model)"),K9e.forEach(t),qio=i(C),Kp=n(C,"LI",{});var Z9e=s(Kp);LK=n(Z9e,"STRONG",{});var fjr=s(LK);Gio=r(fjr,"xglm"),fjr.forEach(t),Oio=r(Z9e," \u2014 "),uS=n(Z9e,"A",{href:!0});var mjr=s(uS);Xio=r(mjr,"XGLMModel"),mjr.forEach(t),Vio=r(Z9e," (XGLM model)"),Z9e.forEach(t),zio=i(C),Zp=n(C,"LI",{});var eCe=s(Zp);BK=n(eCe,"STRONG",{});var gjr=s(BK);Wio=r(gjr,"xlm"),gjr.forEach(t),Qio=r(eCe," \u2014 "),bS=n(eCe,"A",{href:!0});var hjr=s(bS);Hio=r(hjr,"XLMModel"),hjr.forEach(t),Uio=r(eCe," (XLM model)"),eCe.forEach(t),Jio=i(C),e_=n(C,"LI",{});var oCe=s(e_);xK=n(oCe,"STRONG",{});var pjr=s(xK);Yio=r(pjr,"xlm-prophetnet"),pjr.forEach(t),Kio=r(oCe," \u2014 "),vS=n(oCe,"A",{href:!0});var _jr=s(vS);Zio=r(_jr,"XLMProphetNetModel"),_jr.forEach(t),edo=r(oCe," (XLMProphetNet model)"),oCe.forEach(t),odo=i(C),o_=n(C,"LI",{});var rCe=s(o_);kK=n(rCe,"STRONG",{});var ujr=s(kK);rdo=r(ujr,"xlm-roberta"),ujr.forEach(t),tdo=r(rCe," \u2014 "),TS=n(rCe,"A",{href:!0});var bjr=s(TS);ado=r(bjr,"XLMRobertaModel"),bjr.forEach(t),ndo=r(rCe," (XLM-RoBERTa model)"),rCe.forEach(t),sdo=i(C),r_=n(C,"LI",{});var tCe=s(r_);RK=n(tCe,"STRONG",{});var vjr=s(RK);ldo=r(vjr,"xlm-roberta-xl"),vjr.forEach(t),ido=r(tCe," \u2014 "),FS=n(tCe,"A",{href:!0});var Tjr=s(FS);ddo=r(Tjr,"XLMRobertaXLModel"),Tjr.forEach(t),cdo=r(tCe," (XLM-RoBERTa-XL model)"),tCe.forEach(t),fdo=i(C),t_=n(C,"LI",{});var aCe=s(t_);SK=n(aCe,"STRONG",{});var Fjr=s(SK);mdo=r(Fjr,"xlnet"),Fjr.forEach(t),gdo=r(aCe," \u2014 "),CS=n(aCe,"A",{href:!0});var Cjr=s(CS);hdo=r(Cjr,"XLNetModel"),Cjr.forEach(t),pdo=r(aCe," (XLNet model)"),aCe.forEach(t),_do=i(C),a_=n(C,"LI",{});var nCe=s(a_);PK=n(nCe,"STRONG",{});var Mjr=s(PK);udo=r(Mjr,"yoso"),Mjr.forEach(t),bdo=r(nCe," \u2014 "),MS=n(nCe,"A",{href:!0});var Ejr=s(MS);vdo=r(Ejr,"YosoModel"),Ejr.forEach(t),Tdo=r(nCe," (YOSO model)"),nCe.forEach(t),C.forEach(t),Fdo=i($t),n_=n($t,"P",{});var sCe=s(n_);Cdo=r(sCe,"The model is set in evaluation mode by default using "),$K=n(sCe,"CODE",{});var yjr=s($K);Mdo=r(yjr,"model.eval()"),yjr.forEach(t),Edo=r(sCe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),IK=n(sCe,"CODE",{});var wjr=s(IK);ydo=r(wjr,"model.train()"),wjr.forEach(t),sCe.forEach(t),wdo=i($t),DK=n($t,"P",{});var Ajr=s(DK);Ado=r(Ajr,"Examples:"),Ajr.forEach(t),Ldo=i($t),m(cE.$$.fragment,$t),$t.forEach(t),Gs.forEach(t),U7e=i(c),Wi=n(c,"H2",{class:!0});var rke=s(Wi);s_=n(rke,"A",{id:!0,class:!0,href:!0});var Ljr=s(s_);jK=n(Ljr,"SPAN",{});var Bjr=s(jK);m(fE.$$.fragment,Bjr),Bjr.forEach(t),Ljr.forEach(t),Bdo=i(rke),NK=n(rke,"SPAN",{});var xjr=s(NK);xdo=r(xjr,"AutoModelForPreTraining"),xjr.forEach(t),rke.forEach(t),J7e=i(c),Ho=n(c,"DIV",{class:!0});var Xs=s(Ho);m(mE.$$.fragment,Xs),kdo=i(Xs),Qi=n(Xs,"P",{});var GV=s(Qi);Rdo=r(GV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),qK=n(GV,"CODE",{});var kjr=s(qK);Sdo=r(kjr,"from_pretrained()"),kjr.forEach(t),Pdo=r(GV,"class method or the "),GK=n(GV,"CODE",{});var Rjr=s(GK);$do=r(Rjr,"from_config()"),Rjr.forEach(t),Ido=r(GV,`class
method.`),GV.forEach(t),Ddo=i(Xs),gE=n(Xs,"P",{});var tke=s(gE);jdo=r(tke,"This class cannot be instantiated directly using "),OK=n(tke,"CODE",{});var Sjr=s(OK);Ndo=r(Sjr,"__init__()"),Sjr.forEach(t),qdo=r(tke," (throws an error)."),tke.forEach(t),Gdo=i(Xs),Gr=n(Xs,"DIV",{class:!0});var Vs=s(Gr);m(hE.$$.fragment,Vs),Odo=i(Vs),XK=n(Vs,"P",{});var Pjr=s(XK);Xdo=r(Pjr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Pjr.forEach(t),Vdo=i(Vs),Hi=n(Vs,"P",{});var OV=s(Hi);zdo=r(OV,`Note:
Loading a model from its configuration file does `),VK=n(OV,"STRONG",{});var $jr=s(VK);Wdo=r($jr,"not"),$jr.forEach(t),Qdo=r(OV,` load the model weights. It only affects the
model\u2019s configuration. Use `),zK=n(OV,"CODE",{});var Ijr=s(zK);Hdo=r(Ijr,"from_pretrained()"),Ijr.forEach(t),Udo=r(OV,"to load the model weights."),OV.forEach(t),Jdo=i(Vs),WK=n(Vs,"P",{});var Djr=s(WK);Ydo=r(Djr,"Examples:"),Djr.forEach(t),Kdo=i(Vs),m(pE.$$.fragment,Vs),Vs.forEach(t),Zdo=i(Xs),Se=n(Xs,"DIV",{class:!0});var It=s(Se);m(_E.$$.fragment,It),eco=i(It),QK=n(It,"P",{});var jjr=s(QK);oco=r(jjr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),jjr.forEach(t),rco=i(It),qa=n(It,"P",{});var B4=s(qa);tco=r(B4,"The model class to instantiate is selected based on the "),HK=n(B4,"CODE",{});var Njr=s(HK);aco=r(Njr,"model_type"),Njr.forEach(t),nco=r(B4,` property of the config object (either
passed as an argument or loaded from `),UK=n(B4,"CODE",{});var qjr=s(UK);sco=r(qjr,"pretrained_model_name_or_path"),qjr.forEach(t),lco=r(B4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JK=n(B4,"CODE",{});var Gjr=s(JK);ico=r(Gjr,"pretrained_model_name_or_path"),Gjr.forEach(t),dco=r(B4,":"),B4.forEach(t),cco=i(It),k=n(It,"UL",{});var S=s(k);l_=n(S,"LI",{});var lCe=s(l_);YK=n(lCe,"STRONG",{});var Ojr=s(YK);fco=r(Ojr,"albert"),Ojr.forEach(t),mco=r(lCe," \u2014 "),ES=n(lCe,"A",{href:!0});var Xjr=s(ES);gco=r(Xjr,"AlbertForPreTraining"),Xjr.forEach(t),hco=r(lCe," (ALBERT model)"),lCe.forEach(t),pco=i(S),i_=n(S,"LI",{});var iCe=s(i_);KK=n(iCe,"STRONG",{});var Vjr=s(KK);_co=r(Vjr,"bart"),Vjr.forEach(t),uco=r(iCe," \u2014 "),yS=n(iCe,"A",{href:!0});var zjr=s(yS);bco=r(zjr,"BartForConditionalGeneration"),zjr.forEach(t),vco=r(iCe," (BART model)"),iCe.forEach(t),Tco=i(S),d_=n(S,"LI",{});var dCe=s(d_);ZK=n(dCe,"STRONG",{});var Wjr=s(ZK);Fco=r(Wjr,"bert"),Wjr.forEach(t),Cco=r(dCe," \u2014 "),wS=n(dCe,"A",{href:!0});var Qjr=s(wS);Mco=r(Qjr,"BertForPreTraining"),Qjr.forEach(t),Eco=r(dCe," (BERT model)"),dCe.forEach(t),yco=i(S),c_=n(S,"LI",{});var cCe=s(c_);eZ=n(cCe,"STRONG",{});var Hjr=s(eZ);wco=r(Hjr,"big_bird"),Hjr.forEach(t),Aco=r(cCe," \u2014 "),AS=n(cCe,"A",{href:!0});var Ujr=s(AS);Lco=r(Ujr,"BigBirdForPreTraining"),Ujr.forEach(t),Bco=r(cCe," (BigBird model)"),cCe.forEach(t),xco=i(S),f_=n(S,"LI",{});var fCe=s(f_);oZ=n(fCe,"STRONG",{});var Jjr=s(oZ);kco=r(Jjr,"camembert"),Jjr.forEach(t),Rco=r(fCe," \u2014 "),LS=n(fCe,"A",{href:!0});var Yjr=s(LS);Sco=r(Yjr,"CamembertForMaskedLM"),Yjr.forEach(t),Pco=r(fCe," (CamemBERT model)"),fCe.forEach(t),$co=i(S),m_=n(S,"LI",{});var mCe=s(m_);rZ=n(mCe,"STRONG",{});var Kjr=s(rZ);Ico=r(Kjr,"ctrl"),Kjr.forEach(t),Dco=r(mCe," \u2014 "),BS=n(mCe,"A",{href:!0});var Zjr=s(BS);jco=r(Zjr,"CTRLLMHeadModel"),Zjr.forEach(t),Nco=r(mCe," (CTRL model)"),mCe.forEach(t),qco=i(S),g_=n(S,"LI",{});var gCe=s(g_);tZ=n(gCe,"STRONG",{});var eNr=s(tZ);Gco=r(eNr,"data2vec-text"),eNr.forEach(t),Oco=r(gCe," \u2014 "),xS=n(gCe,"A",{href:!0});var oNr=s(xS);Xco=r(oNr,"Data2VecTextForMaskedLM"),oNr.forEach(t),Vco=r(gCe," (Data2VecText model)"),gCe.forEach(t),zco=i(S),h_=n(S,"LI",{});var hCe=s(h_);aZ=n(hCe,"STRONG",{});var rNr=s(aZ);Wco=r(rNr,"deberta"),rNr.forEach(t),Qco=r(hCe," \u2014 "),kS=n(hCe,"A",{href:!0});var tNr=s(kS);Hco=r(tNr,"DebertaForMaskedLM"),tNr.forEach(t),Uco=r(hCe," (DeBERTa model)"),hCe.forEach(t),Jco=i(S),p_=n(S,"LI",{});var pCe=s(p_);nZ=n(pCe,"STRONG",{});var aNr=s(nZ);Yco=r(aNr,"deberta-v2"),aNr.forEach(t),Kco=r(pCe," \u2014 "),RS=n(pCe,"A",{href:!0});var nNr=s(RS);Zco=r(nNr,"DebertaV2ForMaskedLM"),nNr.forEach(t),efo=r(pCe," (DeBERTa-v2 model)"),pCe.forEach(t),ofo=i(S),__=n(S,"LI",{});var _Ce=s(__);sZ=n(_Ce,"STRONG",{});var sNr=s(sZ);rfo=r(sNr,"distilbert"),sNr.forEach(t),tfo=r(_Ce," \u2014 "),SS=n(_Ce,"A",{href:!0});var lNr=s(SS);afo=r(lNr,"DistilBertForMaskedLM"),lNr.forEach(t),nfo=r(_Ce," (DistilBERT model)"),_Ce.forEach(t),sfo=i(S),u_=n(S,"LI",{});var uCe=s(u_);lZ=n(uCe,"STRONG",{});var iNr=s(lZ);lfo=r(iNr,"electra"),iNr.forEach(t),ifo=r(uCe," \u2014 "),PS=n(uCe,"A",{href:!0});var dNr=s(PS);dfo=r(dNr,"ElectraForPreTraining"),dNr.forEach(t),cfo=r(uCe," (ELECTRA model)"),uCe.forEach(t),ffo=i(S),b_=n(S,"LI",{});var bCe=s(b_);iZ=n(bCe,"STRONG",{});var cNr=s(iZ);mfo=r(cNr,"flaubert"),cNr.forEach(t),gfo=r(bCe," \u2014 "),$S=n(bCe,"A",{href:!0});var fNr=s($S);hfo=r(fNr,"FlaubertWithLMHeadModel"),fNr.forEach(t),pfo=r(bCe," (FlauBERT model)"),bCe.forEach(t),_fo=i(S),v_=n(S,"LI",{});var vCe=s(v_);dZ=n(vCe,"STRONG",{});var mNr=s(dZ);ufo=r(mNr,"fnet"),mNr.forEach(t),bfo=r(vCe," \u2014 "),IS=n(vCe,"A",{href:!0});var gNr=s(IS);vfo=r(gNr,"FNetForPreTraining"),gNr.forEach(t),Tfo=r(vCe," (FNet model)"),vCe.forEach(t),Ffo=i(S),T_=n(S,"LI",{});var TCe=s(T_);cZ=n(TCe,"STRONG",{});var hNr=s(cZ);Cfo=r(hNr,"fsmt"),hNr.forEach(t),Mfo=r(TCe," \u2014 "),DS=n(TCe,"A",{href:!0});var pNr=s(DS);Efo=r(pNr,"FSMTForConditionalGeneration"),pNr.forEach(t),yfo=r(TCe," (FairSeq Machine-Translation model)"),TCe.forEach(t),wfo=i(S),F_=n(S,"LI",{});var FCe=s(F_);fZ=n(FCe,"STRONG",{});var _Nr=s(fZ);Afo=r(_Nr,"funnel"),_Nr.forEach(t),Lfo=r(FCe," \u2014 "),jS=n(FCe,"A",{href:!0});var uNr=s(jS);Bfo=r(uNr,"FunnelForPreTraining"),uNr.forEach(t),xfo=r(FCe," (Funnel Transformer model)"),FCe.forEach(t),kfo=i(S),C_=n(S,"LI",{});var CCe=s(C_);mZ=n(CCe,"STRONG",{});var bNr=s(mZ);Rfo=r(bNr,"gpt2"),bNr.forEach(t),Sfo=r(CCe," \u2014 "),NS=n(CCe,"A",{href:!0});var vNr=s(NS);Pfo=r(vNr,"GPT2LMHeadModel"),vNr.forEach(t),$fo=r(CCe," (OpenAI GPT-2 model)"),CCe.forEach(t),Ifo=i(S),M_=n(S,"LI",{});var MCe=s(M_);gZ=n(MCe,"STRONG",{});var TNr=s(gZ);Dfo=r(TNr,"ibert"),TNr.forEach(t),jfo=r(MCe," \u2014 "),qS=n(MCe,"A",{href:!0});var FNr=s(qS);Nfo=r(FNr,"IBertForMaskedLM"),FNr.forEach(t),qfo=r(MCe," (I-BERT model)"),MCe.forEach(t),Gfo=i(S),E_=n(S,"LI",{});var ECe=s(E_);hZ=n(ECe,"STRONG",{});var CNr=s(hZ);Ofo=r(CNr,"layoutlm"),CNr.forEach(t),Xfo=r(ECe," \u2014 "),GS=n(ECe,"A",{href:!0});var MNr=s(GS);Vfo=r(MNr,"LayoutLMForMaskedLM"),MNr.forEach(t),zfo=r(ECe," (LayoutLM model)"),ECe.forEach(t),Wfo=i(S),y_=n(S,"LI",{});var yCe=s(y_);pZ=n(yCe,"STRONG",{});var ENr=s(pZ);Qfo=r(ENr,"longformer"),ENr.forEach(t),Hfo=r(yCe," \u2014 "),OS=n(yCe,"A",{href:!0});var yNr=s(OS);Ufo=r(yNr,"LongformerForMaskedLM"),yNr.forEach(t),Jfo=r(yCe," (Longformer model)"),yCe.forEach(t),Yfo=i(S),w_=n(S,"LI",{});var wCe=s(w_);_Z=n(wCe,"STRONG",{});var wNr=s(_Z);Kfo=r(wNr,"lxmert"),wNr.forEach(t),Zfo=r(wCe," \u2014 "),XS=n(wCe,"A",{href:!0});var ANr=s(XS);emo=r(ANr,"LxmertForPreTraining"),ANr.forEach(t),omo=r(wCe," (LXMERT model)"),wCe.forEach(t),rmo=i(S),A_=n(S,"LI",{});var ACe=s(A_);uZ=n(ACe,"STRONG",{});var LNr=s(uZ);tmo=r(LNr,"megatron-bert"),LNr.forEach(t),amo=r(ACe," \u2014 "),VS=n(ACe,"A",{href:!0});var BNr=s(VS);nmo=r(BNr,"MegatronBertForPreTraining"),BNr.forEach(t),smo=r(ACe," (MegatronBert model)"),ACe.forEach(t),lmo=i(S),L_=n(S,"LI",{});var LCe=s(L_);bZ=n(LCe,"STRONG",{});var xNr=s(bZ);imo=r(xNr,"mobilebert"),xNr.forEach(t),dmo=r(LCe," \u2014 "),zS=n(LCe,"A",{href:!0});var kNr=s(zS);cmo=r(kNr,"MobileBertForPreTraining"),kNr.forEach(t),fmo=r(LCe," (MobileBERT model)"),LCe.forEach(t),mmo=i(S),B_=n(S,"LI",{});var BCe=s(B_);vZ=n(BCe,"STRONG",{});var RNr=s(vZ);gmo=r(RNr,"mpnet"),RNr.forEach(t),hmo=r(BCe," \u2014 "),WS=n(BCe,"A",{href:!0});var SNr=s(WS);pmo=r(SNr,"MPNetForMaskedLM"),SNr.forEach(t),_mo=r(BCe," (MPNet model)"),BCe.forEach(t),umo=i(S),x_=n(S,"LI",{});var xCe=s(x_);TZ=n(xCe,"STRONG",{});var PNr=s(TZ);bmo=r(PNr,"openai-gpt"),PNr.forEach(t),vmo=r(xCe," \u2014 "),QS=n(xCe,"A",{href:!0});var $Nr=s(QS);Tmo=r($Nr,"OpenAIGPTLMHeadModel"),$Nr.forEach(t),Fmo=r(xCe," (OpenAI GPT model)"),xCe.forEach(t),Cmo=i(S),k_=n(S,"LI",{});var kCe=s(k_);FZ=n(kCe,"STRONG",{});var INr=s(FZ);Mmo=r(INr,"retribert"),INr.forEach(t),Emo=r(kCe," \u2014 "),HS=n(kCe,"A",{href:!0});var DNr=s(HS);ymo=r(DNr,"RetriBertModel"),DNr.forEach(t),wmo=r(kCe," (RetriBERT model)"),kCe.forEach(t),Amo=i(S),R_=n(S,"LI",{});var RCe=s(R_);CZ=n(RCe,"STRONG",{});var jNr=s(CZ);Lmo=r(jNr,"roberta"),jNr.forEach(t),Bmo=r(RCe," \u2014 "),US=n(RCe,"A",{href:!0});var NNr=s(US);xmo=r(NNr,"RobertaForMaskedLM"),NNr.forEach(t),kmo=r(RCe," (RoBERTa model)"),RCe.forEach(t),Rmo=i(S),S_=n(S,"LI",{});var SCe=s(S_);MZ=n(SCe,"STRONG",{});var qNr=s(MZ);Smo=r(qNr,"squeezebert"),qNr.forEach(t),Pmo=r(SCe," \u2014 "),JS=n(SCe,"A",{href:!0});var GNr=s(JS);$mo=r(GNr,"SqueezeBertForMaskedLM"),GNr.forEach(t),Imo=r(SCe," (SqueezeBERT model)"),SCe.forEach(t),Dmo=i(S),P_=n(S,"LI",{});var PCe=s(P_);EZ=n(PCe,"STRONG",{});var ONr=s(EZ);jmo=r(ONr,"t5"),ONr.forEach(t),Nmo=r(PCe," \u2014 "),YS=n(PCe,"A",{href:!0});var XNr=s(YS);qmo=r(XNr,"T5ForConditionalGeneration"),XNr.forEach(t),Gmo=r(PCe," (T5 model)"),PCe.forEach(t),Omo=i(S),$_=n(S,"LI",{});var $Ce=s($_);yZ=n($Ce,"STRONG",{});var VNr=s(yZ);Xmo=r(VNr,"tapas"),VNr.forEach(t),Vmo=r($Ce," \u2014 "),KS=n($Ce,"A",{href:!0});var zNr=s(KS);zmo=r(zNr,"TapasForMaskedLM"),zNr.forEach(t),Wmo=r($Ce," (TAPAS model)"),$Ce.forEach(t),Qmo=i(S),I_=n(S,"LI",{});var ICe=s(I_);wZ=n(ICe,"STRONG",{});var WNr=s(wZ);Hmo=r(WNr,"transfo-xl"),WNr.forEach(t),Umo=r(ICe," \u2014 "),ZS=n(ICe,"A",{href:!0});var QNr=s(ZS);Jmo=r(QNr,"TransfoXLLMHeadModel"),QNr.forEach(t),Ymo=r(ICe," (Transformer-XL model)"),ICe.forEach(t),Kmo=i(S),D_=n(S,"LI",{});var DCe=s(D_);AZ=n(DCe,"STRONG",{});var HNr=s(AZ);Zmo=r(HNr,"unispeech"),HNr.forEach(t),ego=r(DCe," \u2014 "),eP=n(DCe,"A",{href:!0});var UNr=s(eP);ogo=r(UNr,"UniSpeechForPreTraining"),UNr.forEach(t),rgo=r(DCe," (UniSpeech model)"),DCe.forEach(t),tgo=i(S),j_=n(S,"LI",{});var jCe=s(j_);LZ=n(jCe,"STRONG",{});var JNr=s(LZ);ago=r(JNr,"unispeech-sat"),JNr.forEach(t),ngo=r(jCe," \u2014 "),oP=n(jCe,"A",{href:!0});var YNr=s(oP);sgo=r(YNr,"UniSpeechSatForPreTraining"),YNr.forEach(t),lgo=r(jCe," (UniSpeechSat model)"),jCe.forEach(t),igo=i(S),N_=n(S,"LI",{});var NCe=s(N_);BZ=n(NCe,"STRONG",{});var KNr=s(BZ);dgo=r(KNr,"visual_bert"),KNr.forEach(t),cgo=r(NCe," \u2014 "),rP=n(NCe,"A",{href:!0});var ZNr=s(rP);fgo=r(ZNr,"VisualBertForPreTraining"),ZNr.forEach(t),mgo=r(NCe," (VisualBert model)"),NCe.forEach(t),ggo=i(S),q_=n(S,"LI",{});var qCe=s(q_);xZ=n(qCe,"STRONG",{});var eqr=s(xZ);hgo=r(eqr,"vit_mae"),eqr.forEach(t),pgo=r(qCe," \u2014 "),tP=n(qCe,"A",{href:!0});var oqr=s(tP);_go=r(oqr,"ViTMAEForPreTraining"),oqr.forEach(t),ugo=r(qCe," (ViTMAE model)"),qCe.forEach(t),bgo=i(S),G_=n(S,"LI",{});var GCe=s(G_);kZ=n(GCe,"STRONG",{});var rqr=s(kZ);vgo=r(rqr,"wav2vec2"),rqr.forEach(t),Tgo=r(GCe," \u2014 "),aP=n(GCe,"A",{href:!0});var tqr=s(aP);Fgo=r(tqr,"Wav2Vec2ForPreTraining"),tqr.forEach(t),Cgo=r(GCe," (Wav2Vec2 model)"),GCe.forEach(t),Mgo=i(S),O_=n(S,"LI",{});var OCe=s(O_);RZ=n(OCe,"STRONG",{});var aqr=s(RZ);Ego=r(aqr,"xlm"),aqr.forEach(t),ygo=r(OCe," \u2014 "),nP=n(OCe,"A",{href:!0});var nqr=s(nP);wgo=r(nqr,"XLMWithLMHeadModel"),nqr.forEach(t),Ago=r(OCe," (XLM model)"),OCe.forEach(t),Lgo=i(S),X_=n(S,"LI",{});var XCe=s(X_);SZ=n(XCe,"STRONG",{});var sqr=s(SZ);Bgo=r(sqr,"xlm-roberta"),sqr.forEach(t),xgo=r(XCe," \u2014 "),sP=n(XCe,"A",{href:!0});var lqr=s(sP);kgo=r(lqr,"XLMRobertaForMaskedLM"),lqr.forEach(t),Rgo=r(XCe," (XLM-RoBERTa model)"),XCe.forEach(t),Sgo=i(S),V_=n(S,"LI",{});var VCe=s(V_);PZ=n(VCe,"STRONG",{});var iqr=s(PZ);Pgo=r(iqr,"xlm-roberta-xl"),iqr.forEach(t),$go=r(VCe," \u2014 "),lP=n(VCe,"A",{href:!0});var dqr=s(lP);Igo=r(dqr,"XLMRobertaXLForMaskedLM"),dqr.forEach(t),Dgo=r(VCe," (XLM-RoBERTa-XL model)"),VCe.forEach(t),jgo=i(S),z_=n(S,"LI",{});var zCe=s(z_);$Z=n(zCe,"STRONG",{});var cqr=s($Z);Ngo=r(cqr,"xlnet"),cqr.forEach(t),qgo=r(zCe," \u2014 "),iP=n(zCe,"A",{href:!0});var fqr=s(iP);Ggo=r(fqr,"XLNetLMHeadModel"),fqr.forEach(t),Ogo=r(zCe," (XLNet model)"),zCe.forEach(t),S.forEach(t),Xgo=i(It),W_=n(It,"P",{});var WCe=s(W_);Vgo=r(WCe,"The model is set in evaluation mode by default using "),IZ=n(WCe,"CODE",{});var mqr=s(IZ);zgo=r(mqr,"model.eval()"),mqr.forEach(t),Wgo=r(WCe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),DZ=n(WCe,"CODE",{});var gqr=s(DZ);Qgo=r(gqr,"model.train()"),gqr.forEach(t),WCe.forEach(t),Hgo=i(It),jZ=n(It,"P",{});var hqr=s(jZ);Ugo=r(hqr,"Examples:"),hqr.forEach(t),Jgo=i(It),m(uE.$$.fragment,It),It.forEach(t),Xs.forEach(t),Y7e=i(c),Ui=n(c,"H2",{class:!0});var ake=s(Ui);Q_=n(ake,"A",{id:!0,class:!0,href:!0});var pqr=s(Q_);NZ=n(pqr,"SPAN",{});var _qr=s(NZ);m(bE.$$.fragment,_qr),_qr.forEach(t),pqr.forEach(t),Ygo=i(ake),qZ=n(ake,"SPAN",{});var uqr=s(qZ);Kgo=r(uqr,"AutoModelForCausalLM"),uqr.forEach(t),ake.forEach(t),K7e=i(c),Uo=n(c,"DIV",{class:!0});var zs=s(Uo);m(vE.$$.fragment,zs),Zgo=i(zs),Ji=n(zs,"P",{});var XV=s(Ji);eho=r(XV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),GZ=n(XV,"CODE",{});var bqr=s(GZ);oho=r(bqr,"from_pretrained()"),bqr.forEach(t),rho=r(XV,"class method or the "),OZ=n(XV,"CODE",{});var vqr=s(OZ);tho=r(vqr,"from_config()"),vqr.forEach(t),aho=r(XV,`class
method.`),XV.forEach(t),nho=i(zs),TE=n(zs,"P",{});var nke=s(TE);sho=r(nke,"This class cannot be instantiated directly using "),XZ=n(nke,"CODE",{});var Tqr=s(XZ);lho=r(Tqr,"__init__()"),Tqr.forEach(t),iho=r(nke," (throws an error)."),nke.forEach(t),dho=i(zs),Or=n(zs,"DIV",{class:!0});var Ws=s(Or);m(FE.$$.fragment,Ws),cho=i(Ws),VZ=n(Ws,"P",{});var Fqr=s(VZ);fho=r(Fqr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Fqr.forEach(t),mho=i(Ws),Yi=n(Ws,"P",{});var VV=s(Yi);gho=r(VV,`Note:
Loading a model from its configuration file does `),zZ=n(VV,"STRONG",{});var Cqr=s(zZ);hho=r(Cqr,"not"),Cqr.forEach(t),pho=r(VV,` load the model weights. It only affects the
model\u2019s configuration. Use `),WZ=n(VV,"CODE",{});var Mqr=s(WZ);_ho=r(Mqr,"from_pretrained()"),Mqr.forEach(t),uho=r(VV,"to load the model weights."),VV.forEach(t),bho=i(Ws),QZ=n(Ws,"P",{});var Eqr=s(QZ);vho=r(Eqr,"Examples:"),Eqr.forEach(t),Tho=i(Ws),m(CE.$$.fragment,Ws),Ws.forEach(t),Fho=i(zs),Pe=n(zs,"DIV",{class:!0});var Dt=s(Pe);m(ME.$$.fragment,Dt),Cho=i(Dt),HZ=n(Dt,"P",{});var yqr=s(HZ);Mho=r(yqr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),yqr.forEach(t),Eho=i(Dt),Ga=n(Dt,"P",{});var x4=s(Ga);yho=r(x4,"The model class to instantiate is selected based on the "),UZ=n(x4,"CODE",{});var wqr=s(UZ);who=r(wqr,"model_type"),wqr.forEach(t),Aho=r(x4,` property of the config object (either
passed as an argument or loaded from `),JZ=n(x4,"CODE",{});var Aqr=s(JZ);Lho=r(Aqr,"pretrained_model_name_or_path"),Aqr.forEach(t),Bho=r(x4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YZ=n(x4,"CODE",{});var Lqr=s(YZ);xho=r(Lqr,"pretrained_model_name_or_path"),Lqr.forEach(t),kho=r(x4,":"),x4.forEach(t),Rho=i(Dt),$=n(Dt,"UL",{});var D=s($);H_=n(D,"LI",{});var QCe=s(H_);KZ=n(QCe,"STRONG",{});var Bqr=s(KZ);Sho=r(Bqr,"bart"),Bqr.forEach(t),Pho=r(QCe," \u2014 "),dP=n(QCe,"A",{href:!0});var xqr=s(dP);$ho=r(xqr,"BartForCausalLM"),xqr.forEach(t),Iho=r(QCe," (BART model)"),QCe.forEach(t),Dho=i(D),U_=n(D,"LI",{});var HCe=s(U_);ZZ=n(HCe,"STRONG",{});var kqr=s(ZZ);jho=r(kqr,"bert"),kqr.forEach(t),Nho=r(HCe," \u2014 "),cP=n(HCe,"A",{href:!0});var Rqr=s(cP);qho=r(Rqr,"BertLMHeadModel"),Rqr.forEach(t),Gho=r(HCe," (BERT model)"),HCe.forEach(t),Oho=i(D),J_=n(D,"LI",{});var UCe=s(J_);eee=n(UCe,"STRONG",{});var Sqr=s(eee);Xho=r(Sqr,"bert-generation"),Sqr.forEach(t),Vho=r(UCe," \u2014 "),fP=n(UCe,"A",{href:!0});var Pqr=s(fP);zho=r(Pqr,"BertGenerationDecoder"),Pqr.forEach(t),Who=r(UCe," (Bert Generation model)"),UCe.forEach(t),Qho=i(D),Y_=n(D,"LI",{});var JCe=s(Y_);oee=n(JCe,"STRONG",{});var $qr=s(oee);Hho=r($qr,"big_bird"),$qr.forEach(t),Uho=r(JCe," \u2014 "),mP=n(JCe,"A",{href:!0});var Iqr=s(mP);Jho=r(Iqr,"BigBirdForCausalLM"),Iqr.forEach(t),Yho=r(JCe," (BigBird model)"),JCe.forEach(t),Kho=i(D),K_=n(D,"LI",{});var YCe=s(K_);ree=n(YCe,"STRONG",{});var Dqr=s(ree);Zho=r(Dqr,"bigbird_pegasus"),Dqr.forEach(t),epo=r(YCe," \u2014 "),gP=n(YCe,"A",{href:!0});var jqr=s(gP);opo=r(jqr,"BigBirdPegasusForCausalLM"),jqr.forEach(t),rpo=r(YCe," (BigBirdPegasus model)"),YCe.forEach(t),tpo=i(D),Z_=n(D,"LI",{});var KCe=s(Z_);tee=n(KCe,"STRONG",{});var Nqr=s(tee);apo=r(Nqr,"blenderbot"),Nqr.forEach(t),npo=r(KCe," \u2014 "),hP=n(KCe,"A",{href:!0});var qqr=s(hP);spo=r(qqr,"BlenderbotForCausalLM"),qqr.forEach(t),lpo=r(KCe," (Blenderbot model)"),KCe.forEach(t),ipo=i(D),eu=n(D,"LI",{});var ZCe=s(eu);aee=n(ZCe,"STRONG",{});var Gqr=s(aee);dpo=r(Gqr,"blenderbot-small"),Gqr.forEach(t),cpo=r(ZCe," \u2014 "),pP=n(ZCe,"A",{href:!0});var Oqr=s(pP);fpo=r(Oqr,"BlenderbotSmallForCausalLM"),Oqr.forEach(t),mpo=r(ZCe," (BlenderbotSmall model)"),ZCe.forEach(t),gpo=i(D),ou=n(D,"LI",{});var e4e=s(ou);nee=n(e4e,"STRONG",{});var Xqr=s(nee);hpo=r(Xqr,"camembert"),Xqr.forEach(t),ppo=r(e4e," \u2014 "),_P=n(e4e,"A",{href:!0});var Vqr=s(_P);_po=r(Vqr,"CamembertForCausalLM"),Vqr.forEach(t),upo=r(e4e," (CamemBERT model)"),e4e.forEach(t),bpo=i(D),ru=n(D,"LI",{});var o4e=s(ru);see=n(o4e,"STRONG",{});var zqr=s(see);vpo=r(zqr,"ctrl"),zqr.forEach(t),Tpo=r(o4e," \u2014 "),uP=n(o4e,"A",{href:!0});var Wqr=s(uP);Fpo=r(Wqr,"CTRLLMHeadModel"),Wqr.forEach(t),Cpo=r(o4e," (CTRL model)"),o4e.forEach(t),Mpo=i(D),tu=n(D,"LI",{});var r4e=s(tu);lee=n(r4e,"STRONG",{});var Qqr=s(lee);Epo=r(Qqr,"data2vec-text"),Qqr.forEach(t),ypo=r(r4e," \u2014 "),bP=n(r4e,"A",{href:!0});var Hqr=s(bP);wpo=r(Hqr,"Data2VecTextForCausalLM"),Hqr.forEach(t),Apo=r(r4e," (Data2VecText model)"),r4e.forEach(t),Lpo=i(D),au=n(D,"LI",{});var t4e=s(au);iee=n(t4e,"STRONG",{});var Uqr=s(iee);Bpo=r(Uqr,"electra"),Uqr.forEach(t),xpo=r(t4e," \u2014 "),vP=n(t4e,"A",{href:!0});var Jqr=s(vP);kpo=r(Jqr,"ElectraForCausalLM"),Jqr.forEach(t),Rpo=r(t4e," (ELECTRA model)"),t4e.forEach(t),Spo=i(D),nu=n(D,"LI",{});var a4e=s(nu);dee=n(a4e,"STRONG",{});var Yqr=s(dee);Ppo=r(Yqr,"gpt2"),Yqr.forEach(t),$po=r(a4e," \u2014 "),TP=n(a4e,"A",{href:!0});var Kqr=s(TP);Ipo=r(Kqr,"GPT2LMHeadModel"),Kqr.forEach(t),Dpo=r(a4e," (OpenAI GPT-2 model)"),a4e.forEach(t),jpo=i(D),su=n(D,"LI",{});var n4e=s(su);cee=n(n4e,"STRONG",{});var Zqr=s(cee);Npo=r(Zqr,"gpt_neo"),Zqr.forEach(t),qpo=r(n4e," \u2014 "),FP=n(n4e,"A",{href:!0});var eGr=s(FP);Gpo=r(eGr,"GPTNeoForCausalLM"),eGr.forEach(t),Opo=r(n4e," (GPT Neo model)"),n4e.forEach(t),Xpo=i(D),lu=n(D,"LI",{});var s4e=s(lu);fee=n(s4e,"STRONG",{});var oGr=s(fee);Vpo=r(oGr,"gptj"),oGr.forEach(t),zpo=r(s4e," \u2014 "),CP=n(s4e,"A",{href:!0});var rGr=s(CP);Wpo=r(rGr,"GPTJForCausalLM"),rGr.forEach(t),Qpo=r(s4e," (GPT-J model)"),s4e.forEach(t),Hpo=i(D),iu=n(D,"LI",{});var l4e=s(iu);mee=n(l4e,"STRONG",{});var tGr=s(mee);Upo=r(tGr,"marian"),tGr.forEach(t),Jpo=r(l4e," \u2014 "),MP=n(l4e,"A",{href:!0});var aGr=s(MP);Ypo=r(aGr,"MarianForCausalLM"),aGr.forEach(t),Kpo=r(l4e," (Marian model)"),l4e.forEach(t),Zpo=i(D),du=n(D,"LI",{});var i4e=s(du);gee=n(i4e,"STRONG",{});var nGr=s(gee);e_o=r(nGr,"mbart"),nGr.forEach(t),o_o=r(i4e," \u2014 "),EP=n(i4e,"A",{href:!0});var sGr=s(EP);r_o=r(sGr,"MBartForCausalLM"),sGr.forEach(t),t_o=r(i4e," (mBART model)"),i4e.forEach(t),a_o=i(D),cu=n(D,"LI",{});var d4e=s(cu);hee=n(d4e,"STRONG",{});var lGr=s(hee);n_o=r(lGr,"megatron-bert"),lGr.forEach(t),s_o=r(d4e," \u2014 "),yP=n(d4e,"A",{href:!0});var iGr=s(yP);l_o=r(iGr,"MegatronBertForCausalLM"),iGr.forEach(t),i_o=r(d4e," (MegatronBert model)"),d4e.forEach(t),d_o=i(D),fu=n(D,"LI",{});var c4e=s(fu);pee=n(c4e,"STRONG",{});var dGr=s(pee);c_o=r(dGr,"openai-gpt"),dGr.forEach(t),f_o=r(c4e," \u2014 "),wP=n(c4e,"A",{href:!0});var cGr=s(wP);m_o=r(cGr,"OpenAIGPTLMHeadModel"),cGr.forEach(t),g_o=r(c4e," (OpenAI GPT model)"),c4e.forEach(t),h_o=i(D),mu=n(D,"LI",{});var f4e=s(mu);_ee=n(f4e,"STRONG",{});var fGr=s(_ee);p_o=r(fGr,"pegasus"),fGr.forEach(t),__o=r(f4e," \u2014 "),AP=n(f4e,"A",{href:!0});var mGr=s(AP);u_o=r(mGr,"PegasusForCausalLM"),mGr.forEach(t),b_o=r(f4e," (Pegasus model)"),f4e.forEach(t),v_o=i(D),gu=n(D,"LI",{});var m4e=s(gu);uee=n(m4e,"STRONG",{});var gGr=s(uee);T_o=r(gGr,"plbart"),gGr.forEach(t),F_o=r(m4e," \u2014 "),LP=n(m4e,"A",{href:!0});var hGr=s(LP);C_o=r(hGr,"PLBartForCausalLM"),hGr.forEach(t),M_o=r(m4e," (PLBart model)"),m4e.forEach(t),E_o=i(D),hu=n(D,"LI",{});var g4e=s(hu);bee=n(g4e,"STRONG",{});var pGr=s(bee);y_o=r(pGr,"prophetnet"),pGr.forEach(t),w_o=r(g4e," \u2014 "),BP=n(g4e,"A",{href:!0});var _Gr=s(BP);A_o=r(_Gr,"ProphetNetForCausalLM"),_Gr.forEach(t),L_o=r(g4e," (ProphetNet model)"),g4e.forEach(t),B_o=i(D),pu=n(D,"LI",{});var h4e=s(pu);vee=n(h4e,"STRONG",{});var uGr=s(vee);x_o=r(uGr,"qdqbert"),uGr.forEach(t),k_o=r(h4e," \u2014 "),xP=n(h4e,"A",{href:!0});var bGr=s(xP);R_o=r(bGr,"QDQBertLMHeadModel"),bGr.forEach(t),S_o=r(h4e," (QDQBert model)"),h4e.forEach(t),P_o=i(D),_u=n(D,"LI",{});var p4e=s(_u);Tee=n(p4e,"STRONG",{});var vGr=s(Tee);$_o=r(vGr,"reformer"),vGr.forEach(t),I_o=r(p4e," \u2014 "),kP=n(p4e,"A",{href:!0});var TGr=s(kP);D_o=r(TGr,"ReformerModelWithLMHead"),TGr.forEach(t),j_o=r(p4e," (Reformer model)"),p4e.forEach(t),N_o=i(D),uu=n(D,"LI",{});var _4e=s(uu);Fee=n(_4e,"STRONG",{});var FGr=s(Fee);q_o=r(FGr,"rembert"),FGr.forEach(t),G_o=r(_4e," \u2014 "),RP=n(_4e,"A",{href:!0});var CGr=s(RP);O_o=r(CGr,"RemBertForCausalLM"),CGr.forEach(t),X_o=r(_4e," (RemBERT model)"),_4e.forEach(t),V_o=i(D),bu=n(D,"LI",{});var u4e=s(bu);Cee=n(u4e,"STRONG",{});var MGr=s(Cee);z_o=r(MGr,"roberta"),MGr.forEach(t),W_o=r(u4e," \u2014 "),SP=n(u4e,"A",{href:!0});var EGr=s(SP);Q_o=r(EGr,"RobertaForCausalLM"),EGr.forEach(t),H_o=r(u4e," (RoBERTa model)"),u4e.forEach(t),U_o=i(D),vu=n(D,"LI",{});var b4e=s(vu);Mee=n(b4e,"STRONG",{});var yGr=s(Mee);J_o=r(yGr,"roformer"),yGr.forEach(t),Y_o=r(b4e," \u2014 "),PP=n(b4e,"A",{href:!0});var wGr=s(PP);K_o=r(wGr,"RoFormerForCausalLM"),wGr.forEach(t),Z_o=r(b4e," (RoFormer model)"),b4e.forEach(t),euo=i(D),Tu=n(D,"LI",{});var v4e=s(Tu);Eee=n(v4e,"STRONG",{});var AGr=s(Eee);ouo=r(AGr,"speech_to_text_2"),AGr.forEach(t),ruo=r(v4e," \u2014 "),$P=n(v4e,"A",{href:!0});var LGr=s($P);tuo=r(LGr,"Speech2Text2ForCausalLM"),LGr.forEach(t),auo=r(v4e," (Speech2Text2 model)"),v4e.forEach(t),nuo=i(D),Fu=n(D,"LI",{});var T4e=s(Fu);yee=n(T4e,"STRONG",{});var BGr=s(yee);suo=r(BGr,"transfo-xl"),BGr.forEach(t),luo=r(T4e," \u2014 "),IP=n(T4e,"A",{href:!0});var xGr=s(IP);iuo=r(xGr,"TransfoXLLMHeadModel"),xGr.forEach(t),duo=r(T4e," (Transformer-XL model)"),T4e.forEach(t),cuo=i(D),Cu=n(D,"LI",{});var F4e=s(Cu);wee=n(F4e,"STRONG",{});var kGr=s(wee);fuo=r(kGr,"trocr"),kGr.forEach(t),muo=r(F4e," \u2014 "),DP=n(F4e,"A",{href:!0});var RGr=s(DP);guo=r(RGr,"TrOCRForCausalLM"),RGr.forEach(t),huo=r(F4e," (TrOCR model)"),F4e.forEach(t),puo=i(D),Mu=n(D,"LI",{});var C4e=s(Mu);Aee=n(C4e,"STRONG",{});var SGr=s(Aee);_uo=r(SGr,"xglm"),SGr.forEach(t),uuo=r(C4e," \u2014 "),jP=n(C4e,"A",{href:!0});var PGr=s(jP);buo=r(PGr,"XGLMForCausalLM"),PGr.forEach(t),vuo=r(C4e," (XGLM model)"),C4e.forEach(t),Tuo=i(D),Eu=n(D,"LI",{});var M4e=s(Eu);Lee=n(M4e,"STRONG",{});var $Gr=s(Lee);Fuo=r($Gr,"xlm"),$Gr.forEach(t),Cuo=r(M4e," \u2014 "),NP=n(M4e,"A",{href:!0});var IGr=s(NP);Muo=r(IGr,"XLMWithLMHeadModel"),IGr.forEach(t),Euo=r(M4e," (XLM model)"),M4e.forEach(t),yuo=i(D),yu=n(D,"LI",{});var E4e=s(yu);Bee=n(E4e,"STRONG",{});var DGr=s(Bee);wuo=r(DGr,"xlm-prophetnet"),DGr.forEach(t),Auo=r(E4e," \u2014 "),qP=n(E4e,"A",{href:!0});var jGr=s(qP);Luo=r(jGr,"XLMProphetNetForCausalLM"),jGr.forEach(t),Buo=r(E4e," (XLMProphetNet model)"),E4e.forEach(t),xuo=i(D),wu=n(D,"LI",{});var y4e=s(wu);xee=n(y4e,"STRONG",{});var NGr=s(xee);kuo=r(NGr,"xlm-roberta"),NGr.forEach(t),Ruo=r(y4e," \u2014 "),GP=n(y4e,"A",{href:!0});var qGr=s(GP);Suo=r(qGr,"XLMRobertaForCausalLM"),qGr.forEach(t),Puo=r(y4e," (XLM-RoBERTa model)"),y4e.forEach(t),$uo=i(D),Au=n(D,"LI",{});var w4e=s(Au);kee=n(w4e,"STRONG",{});var GGr=s(kee);Iuo=r(GGr,"xlm-roberta-xl"),GGr.forEach(t),Duo=r(w4e," \u2014 "),OP=n(w4e,"A",{href:!0});var OGr=s(OP);juo=r(OGr,"XLMRobertaXLForCausalLM"),OGr.forEach(t),Nuo=r(w4e," (XLM-RoBERTa-XL model)"),w4e.forEach(t),quo=i(D),Lu=n(D,"LI",{});var A4e=s(Lu);Ree=n(A4e,"STRONG",{});var XGr=s(Ree);Guo=r(XGr,"xlnet"),XGr.forEach(t),Ouo=r(A4e," \u2014 "),XP=n(A4e,"A",{href:!0});var VGr=s(XP);Xuo=r(VGr,"XLNetLMHeadModel"),VGr.forEach(t),Vuo=r(A4e," (XLNet model)"),A4e.forEach(t),D.forEach(t),zuo=i(Dt),Bu=n(Dt,"P",{});var L4e=s(Bu);Wuo=r(L4e,"The model is set in evaluation mode by default using "),See=n(L4e,"CODE",{});var zGr=s(See);Quo=r(zGr,"model.eval()"),zGr.forEach(t),Huo=r(L4e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pee=n(L4e,"CODE",{});var WGr=s(Pee);Uuo=r(WGr,"model.train()"),WGr.forEach(t),L4e.forEach(t),Juo=i(Dt),$ee=n(Dt,"P",{});var QGr=s($ee);Yuo=r(QGr,"Examples:"),QGr.forEach(t),Kuo=i(Dt),m(EE.$$.fragment,Dt),Dt.forEach(t),zs.forEach(t),Z7e=i(c),Ki=n(c,"H2",{class:!0});var ske=s(Ki);xu=n(ske,"A",{id:!0,class:!0,href:!0});var HGr=s(xu);Iee=n(HGr,"SPAN",{});var UGr=s(Iee);m(yE.$$.fragment,UGr),UGr.forEach(t),HGr.forEach(t),Zuo=i(ske),Dee=n(ske,"SPAN",{});var JGr=s(Dee);e2o=r(JGr,"AutoModelForMaskedLM"),JGr.forEach(t),ske.forEach(t),eBe=i(c),Jo=n(c,"DIV",{class:!0});var Qs=s(Jo);m(wE.$$.fragment,Qs),o2o=i(Qs),Zi=n(Qs,"P",{});var zV=s(Zi);r2o=r(zV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),jee=n(zV,"CODE",{});var YGr=s(jee);t2o=r(YGr,"from_pretrained()"),YGr.forEach(t),a2o=r(zV,"class method or the "),Nee=n(zV,"CODE",{});var KGr=s(Nee);n2o=r(KGr,"from_config()"),KGr.forEach(t),s2o=r(zV,`class
method.`),zV.forEach(t),l2o=i(Qs),AE=n(Qs,"P",{});var lke=s(AE);i2o=r(lke,"This class cannot be instantiated directly using "),qee=n(lke,"CODE",{});var ZGr=s(qee);d2o=r(ZGr,"__init__()"),ZGr.forEach(t),c2o=r(lke," (throws an error)."),lke.forEach(t),f2o=i(Qs),Xr=n(Qs,"DIV",{class:!0});var Hs=s(Xr);m(LE.$$.fragment,Hs),m2o=i(Hs),Gee=n(Hs,"P",{});var eOr=s(Gee);g2o=r(eOr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),eOr.forEach(t),h2o=i(Hs),ed=n(Hs,"P",{});var WV=s(ed);p2o=r(WV,`Note:
Loading a model from its configuration file does `),Oee=n(WV,"STRONG",{});var oOr=s(Oee);_2o=r(oOr,"not"),oOr.forEach(t),u2o=r(WV,` load the model weights. It only affects the
model\u2019s configuration. Use `),Xee=n(WV,"CODE",{});var rOr=s(Xee);b2o=r(rOr,"from_pretrained()"),rOr.forEach(t),v2o=r(WV,"to load the model weights."),WV.forEach(t),T2o=i(Hs),Vee=n(Hs,"P",{});var tOr=s(Vee);F2o=r(tOr,"Examples:"),tOr.forEach(t),C2o=i(Hs),m(BE.$$.fragment,Hs),Hs.forEach(t),M2o=i(Qs),$e=n(Qs,"DIV",{class:!0});var jt=s($e);m(xE.$$.fragment,jt),E2o=i(jt),zee=n(jt,"P",{});var aOr=s(zee);y2o=r(aOr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),aOr.forEach(t),w2o=i(jt),Oa=n(jt,"P",{});var k4=s(Oa);A2o=r(k4,"The model class to instantiate is selected based on the "),Wee=n(k4,"CODE",{});var nOr=s(Wee);L2o=r(nOr,"model_type"),nOr.forEach(t),B2o=r(k4,` property of the config object (either
passed as an argument or loaded from `),Qee=n(k4,"CODE",{});var sOr=s(Qee);x2o=r(sOr,"pretrained_model_name_or_path"),sOr.forEach(t),k2o=r(k4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hee=n(k4,"CODE",{});var lOr=s(Hee);R2o=r(lOr,"pretrained_model_name_or_path"),lOr.forEach(t),S2o=r(k4,":"),k4.forEach(t),P2o=i(jt),I=n(jt,"UL",{});var j=s(I);ku=n(j,"LI",{});var B4e=s(ku);Uee=n(B4e,"STRONG",{});var iOr=s(Uee);$2o=r(iOr,"albert"),iOr.forEach(t),I2o=r(B4e," \u2014 "),VP=n(B4e,"A",{href:!0});var dOr=s(VP);D2o=r(dOr,"AlbertForMaskedLM"),dOr.forEach(t),j2o=r(B4e," (ALBERT model)"),B4e.forEach(t),N2o=i(j),Ru=n(j,"LI",{});var x4e=s(Ru);Jee=n(x4e,"STRONG",{});var cOr=s(Jee);q2o=r(cOr,"bart"),cOr.forEach(t),G2o=r(x4e," \u2014 "),zP=n(x4e,"A",{href:!0});var fOr=s(zP);O2o=r(fOr,"BartForConditionalGeneration"),fOr.forEach(t),X2o=r(x4e," (BART model)"),x4e.forEach(t),V2o=i(j),Su=n(j,"LI",{});var k4e=s(Su);Yee=n(k4e,"STRONG",{});var mOr=s(Yee);z2o=r(mOr,"bert"),mOr.forEach(t),W2o=r(k4e," \u2014 "),WP=n(k4e,"A",{href:!0});var gOr=s(WP);Q2o=r(gOr,"BertForMaskedLM"),gOr.forEach(t),H2o=r(k4e," (BERT model)"),k4e.forEach(t),U2o=i(j),Pu=n(j,"LI",{});var R4e=s(Pu);Kee=n(R4e,"STRONG",{});var hOr=s(Kee);J2o=r(hOr,"big_bird"),hOr.forEach(t),Y2o=r(R4e," \u2014 "),QP=n(R4e,"A",{href:!0});var pOr=s(QP);K2o=r(pOr,"BigBirdForMaskedLM"),pOr.forEach(t),Z2o=r(R4e," (BigBird model)"),R4e.forEach(t),e1o=i(j),$u=n(j,"LI",{});var S4e=s($u);Zee=n(S4e,"STRONG",{});var _Or=s(Zee);o1o=r(_Or,"camembert"),_Or.forEach(t),r1o=r(S4e," \u2014 "),HP=n(S4e,"A",{href:!0});var uOr=s(HP);t1o=r(uOr,"CamembertForMaskedLM"),uOr.forEach(t),a1o=r(S4e," (CamemBERT model)"),S4e.forEach(t),n1o=i(j),Iu=n(j,"LI",{});var P4e=s(Iu);eoe=n(P4e,"STRONG",{});var bOr=s(eoe);s1o=r(bOr,"convbert"),bOr.forEach(t),l1o=r(P4e," \u2014 "),UP=n(P4e,"A",{href:!0});var vOr=s(UP);i1o=r(vOr,"ConvBertForMaskedLM"),vOr.forEach(t),d1o=r(P4e," (ConvBERT model)"),P4e.forEach(t),c1o=i(j),Du=n(j,"LI",{});var $4e=s(Du);ooe=n($4e,"STRONG",{});var TOr=s(ooe);f1o=r(TOr,"data2vec-text"),TOr.forEach(t),m1o=r($4e," \u2014 "),JP=n($4e,"A",{href:!0});var FOr=s(JP);g1o=r(FOr,"Data2VecTextForMaskedLM"),FOr.forEach(t),h1o=r($4e," (Data2VecText model)"),$4e.forEach(t),p1o=i(j),ju=n(j,"LI",{});var I4e=s(ju);roe=n(I4e,"STRONG",{});var COr=s(roe);_1o=r(COr,"deberta"),COr.forEach(t),u1o=r(I4e," \u2014 "),YP=n(I4e,"A",{href:!0});var MOr=s(YP);b1o=r(MOr,"DebertaForMaskedLM"),MOr.forEach(t),v1o=r(I4e," (DeBERTa model)"),I4e.forEach(t),T1o=i(j),Nu=n(j,"LI",{});var D4e=s(Nu);toe=n(D4e,"STRONG",{});var EOr=s(toe);F1o=r(EOr,"deberta-v2"),EOr.forEach(t),C1o=r(D4e," \u2014 "),KP=n(D4e,"A",{href:!0});var yOr=s(KP);M1o=r(yOr,"DebertaV2ForMaskedLM"),yOr.forEach(t),E1o=r(D4e," (DeBERTa-v2 model)"),D4e.forEach(t),y1o=i(j),qu=n(j,"LI",{});var j4e=s(qu);aoe=n(j4e,"STRONG",{});var wOr=s(aoe);w1o=r(wOr,"distilbert"),wOr.forEach(t),A1o=r(j4e," \u2014 "),ZP=n(j4e,"A",{href:!0});var AOr=s(ZP);L1o=r(AOr,"DistilBertForMaskedLM"),AOr.forEach(t),B1o=r(j4e," (DistilBERT model)"),j4e.forEach(t),x1o=i(j),Gu=n(j,"LI",{});var N4e=s(Gu);noe=n(N4e,"STRONG",{});var LOr=s(noe);k1o=r(LOr,"electra"),LOr.forEach(t),R1o=r(N4e," \u2014 "),e$=n(N4e,"A",{href:!0});var BOr=s(e$);S1o=r(BOr,"ElectraForMaskedLM"),BOr.forEach(t),P1o=r(N4e," (ELECTRA model)"),N4e.forEach(t),$1o=i(j),Ou=n(j,"LI",{});var q4e=s(Ou);soe=n(q4e,"STRONG",{});var xOr=s(soe);I1o=r(xOr,"flaubert"),xOr.forEach(t),D1o=r(q4e," \u2014 "),o$=n(q4e,"A",{href:!0});var kOr=s(o$);j1o=r(kOr,"FlaubertWithLMHeadModel"),kOr.forEach(t),N1o=r(q4e," (FlauBERT model)"),q4e.forEach(t),q1o=i(j),Xu=n(j,"LI",{});var G4e=s(Xu);loe=n(G4e,"STRONG",{});var ROr=s(loe);G1o=r(ROr,"fnet"),ROr.forEach(t),O1o=r(G4e," \u2014 "),r$=n(G4e,"A",{href:!0});var SOr=s(r$);X1o=r(SOr,"FNetForMaskedLM"),SOr.forEach(t),V1o=r(G4e," (FNet model)"),G4e.forEach(t),z1o=i(j),Vu=n(j,"LI",{});var O4e=s(Vu);ioe=n(O4e,"STRONG",{});var POr=s(ioe);W1o=r(POr,"funnel"),POr.forEach(t),Q1o=r(O4e," \u2014 "),t$=n(O4e,"A",{href:!0});var $Or=s(t$);H1o=r($Or,"FunnelForMaskedLM"),$Or.forEach(t),U1o=r(O4e," (Funnel Transformer model)"),O4e.forEach(t),J1o=i(j),zu=n(j,"LI",{});var X4e=s(zu);doe=n(X4e,"STRONG",{});var IOr=s(doe);Y1o=r(IOr,"ibert"),IOr.forEach(t),K1o=r(X4e," \u2014 "),a$=n(X4e,"A",{href:!0});var DOr=s(a$);Z1o=r(DOr,"IBertForMaskedLM"),DOr.forEach(t),ebo=r(X4e," (I-BERT model)"),X4e.forEach(t),obo=i(j),Wu=n(j,"LI",{});var V4e=s(Wu);coe=n(V4e,"STRONG",{});var jOr=s(coe);rbo=r(jOr,"layoutlm"),jOr.forEach(t),tbo=r(V4e," \u2014 "),n$=n(V4e,"A",{href:!0});var NOr=s(n$);abo=r(NOr,"LayoutLMForMaskedLM"),NOr.forEach(t),nbo=r(V4e," (LayoutLM model)"),V4e.forEach(t),sbo=i(j),Qu=n(j,"LI",{});var z4e=s(Qu);foe=n(z4e,"STRONG",{});var qOr=s(foe);lbo=r(qOr,"longformer"),qOr.forEach(t),ibo=r(z4e," \u2014 "),s$=n(z4e,"A",{href:!0});var GOr=s(s$);dbo=r(GOr,"LongformerForMaskedLM"),GOr.forEach(t),cbo=r(z4e," (Longformer model)"),z4e.forEach(t),fbo=i(j),Hu=n(j,"LI",{});var W4e=s(Hu);moe=n(W4e,"STRONG",{});var OOr=s(moe);mbo=r(OOr,"mbart"),OOr.forEach(t),gbo=r(W4e," \u2014 "),l$=n(W4e,"A",{href:!0});var XOr=s(l$);hbo=r(XOr,"MBartForConditionalGeneration"),XOr.forEach(t),pbo=r(W4e," (mBART model)"),W4e.forEach(t),_bo=i(j),Uu=n(j,"LI",{});var Q4e=s(Uu);goe=n(Q4e,"STRONG",{});var VOr=s(goe);ubo=r(VOr,"megatron-bert"),VOr.forEach(t),bbo=r(Q4e," \u2014 "),i$=n(Q4e,"A",{href:!0});var zOr=s(i$);vbo=r(zOr,"MegatronBertForMaskedLM"),zOr.forEach(t),Tbo=r(Q4e," (MegatronBert model)"),Q4e.forEach(t),Fbo=i(j),Ju=n(j,"LI",{});var H4e=s(Ju);hoe=n(H4e,"STRONG",{});var WOr=s(hoe);Cbo=r(WOr,"mobilebert"),WOr.forEach(t),Mbo=r(H4e," \u2014 "),d$=n(H4e,"A",{href:!0});var QOr=s(d$);Ebo=r(QOr,"MobileBertForMaskedLM"),QOr.forEach(t),ybo=r(H4e," (MobileBERT model)"),H4e.forEach(t),wbo=i(j),Yu=n(j,"LI",{});var U4e=s(Yu);poe=n(U4e,"STRONG",{});var HOr=s(poe);Abo=r(HOr,"mpnet"),HOr.forEach(t),Lbo=r(U4e," \u2014 "),c$=n(U4e,"A",{href:!0});var UOr=s(c$);Bbo=r(UOr,"MPNetForMaskedLM"),UOr.forEach(t),xbo=r(U4e," (MPNet model)"),U4e.forEach(t),kbo=i(j),Ku=n(j,"LI",{});var J4e=s(Ku);_oe=n(J4e,"STRONG",{});var JOr=s(_oe);Rbo=r(JOr,"nystromformer"),JOr.forEach(t),Sbo=r(J4e," \u2014 "),f$=n(J4e,"A",{href:!0});var YOr=s(f$);Pbo=r(YOr,"NystromformerForMaskedLM"),YOr.forEach(t),$bo=r(J4e," (Nystromformer model)"),J4e.forEach(t),Ibo=i(j),Zu=n(j,"LI",{});var Y4e=s(Zu);uoe=n(Y4e,"STRONG",{});var KOr=s(uoe);Dbo=r(KOr,"perceiver"),KOr.forEach(t),jbo=r(Y4e," \u2014 "),m$=n(Y4e,"A",{href:!0});var ZOr=s(m$);Nbo=r(ZOr,"PerceiverForMaskedLM"),ZOr.forEach(t),qbo=r(Y4e," (Perceiver model)"),Y4e.forEach(t),Gbo=i(j),e2=n(j,"LI",{});var K4e=s(e2);boe=n(K4e,"STRONG",{});var eXr=s(boe);Obo=r(eXr,"qdqbert"),eXr.forEach(t),Xbo=r(K4e," \u2014 "),g$=n(K4e,"A",{href:!0});var oXr=s(g$);Vbo=r(oXr,"QDQBertForMaskedLM"),oXr.forEach(t),zbo=r(K4e," (QDQBert model)"),K4e.forEach(t),Wbo=i(j),o2=n(j,"LI",{});var Z4e=s(o2);voe=n(Z4e,"STRONG",{});var rXr=s(voe);Qbo=r(rXr,"reformer"),rXr.forEach(t),Hbo=r(Z4e," \u2014 "),h$=n(Z4e,"A",{href:!0});var tXr=s(h$);Ubo=r(tXr,"ReformerForMaskedLM"),tXr.forEach(t),Jbo=r(Z4e," (Reformer model)"),Z4e.forEach(t),Ybo=i(j),r2=n(j,"LI",{});var eMe=s(r2);Toe=n(eMe,"STRONG",{});var aXr=s(Toe);Kbo=r(aXr,"rembert"),aXr.forEach(t),Zbo=r(eMe," \u2014 "),p$=n(eMe,"A",{href:!0});var nXr=s(p$);e3o=r(nXr,"RemBertForMaskedLM"),nXr.forEach(t),o3o=r(eMe," (RemBERT model)"),eMe.forEach(t),r3o=i(j),t2=n(j,"LI",{});var oMe=s(t2);Foe=n(oMe,"STRONG",{});var sXr=s(Foe);t3o=r(sXr,"roberta"),sXr.forEach(t),a3o=r(oMe," \u2014 "),_$=n(oMe,"A",{href:!0});var lXr=s(_$);n3o=r(lXr,"RobertaForMaskedLM"),lXr.forEach(t),s3o=r(oMe," (RoBERTa model)"),oMe.forEach(t),l3o=i(j),a2=n(j,"LI",{});var rMe=s(a2);Coe=n(rMe,"STRONG",{});var iXr=s(Coe);i3o=r(iXr,"roformer"),iXr.forEach(t),d3o=r(rMe," \u2014 "),u$=n(rMe,"A",{href:!0});var dXr=s(u$);c3o=r(dXr,"RoFormerForMaskedLM"),dXr.forEach(t),f3o=r(rMe," (RoFormer model)"),rMe.forEach(t),m3o=i(j),n2=n(j,"LI",{});var tMe=s(n2);Moe=n(tMe,"STRONG",{});var cXr=s(Moe);g3o=r(cXr,"squeezebert"),cXr.forEach(t),h3o=r(tMe," \u2014 "),b$=n(tMe,"A",{href:!0});var fXr=s(b$);p3o=r(fXr,"SqueezeBertForMaskedLM"),fXr.forEach(t),_3o=r(tMe," (SqueezeBERT model)"),tMe.forEach(t),u3o=i(j),s2=n(j,"LI",{});var aMe=s(s2);Eoe=n(aMe,"STRONG",{});var mXr=s(Eoe);b3o=r(mXr,"tapas"),mXr.forEach(t),v3o=r(aMe," \u2014 "),v$=n(aMe,"A",{href:!0});var gXr=s(v$);T3o=r(gXr,"TapasForMaskedLM"),gXr.forEach(t),F3o=r(aMe," (TAPAS model)"),aMe.forEach(t),C3o=i(j),l2=n(j,"LI",{});var nMe=s(l2);yoe=n(nMe,"STRONG",{});var hXr=s(yoe);M3o=r(hXr,"wav2vec2"),hXr.forEach(t),E3o=r(nMe," \u2014 "),woe=n(nMe,"CODE",{});var pXr=s(woe);y3o=r(pXr,"Wav2Vec2ForMaskedLM"),pXr.forEach(t),w3o=r(nMe,"(Wav2Vec2 model)"),nMe.forEach(t),A3o=i(j),i2=n(j,"LI",{});var sMe=s(i2);Aoe=n(sMe,"STRONG",{});var _Xr=s(Aoe);L3o=r(_Xr,"xlm"),_Xr.forEach(t),B3o=r(sMe," \u2014 "),T$=n(sMe,"A",{href:!0});var uXr=s(T$);x3o=r(uXr,"XLMWithLMHeadModel"),uXr.forEach(t),k3o=r(sMe," (XLM model)"),sMe.forEach(t),R3o=i(j),d2=n(j,"LI",{});var lMe=s(d2);Loe=n(lMe,"STRONG",{});var bXr=s(Loe);S3o=r(bXr,"xlm-roberta"),bXr.forEach(t),P3o=r(lMe," \u2014 "),F$=n(lMe,"A",{href:!0});var vXr=s(F$);$3o=r(vXr,"XLMRobertaForMaskedLM"),vXr.forEach(t),I3o=r(lMe," (XLM-RoBERTa model)"),lMe.forEach(t),D3o=i(j),c2=n(j,"LI",{});var iMe=s(c2);Boe=n(iMe,"STRONG",{});var TXr=s(Boe);j3o=r(TXr,"xlm-roberta-xl"),TXr.forEach(t),N3o=r(iMe," \u2014 "),C$=n(iMe,"A",{href:!0});var FXr=s(C$);q3o=r(FXr,"XLMRobertaXLForMaskedLM"),FXr.forEach(t),G3o=r(iMe," (XLM-RoBERTa-XL model)"),iMe.forEach(t),O3o=i(j),f2=n(j,"LI",{});var dMe=s(f2);xoe=n(dMe,"STRONG",{});var CXr=s(xoe);X3o=r(CXr,"yoso"),CXr.forEach(t),V3o=r(dMe," \u2014 "),M$=n(dMe,"A",{href:!0});var MXr=s(M$);z3o=r(MXr,"YosoForMaskedLM"),MXr.forEach(t),W3o=r(dMe," (YOSO model)"),dMe.forEach(t),j.forEach(t),Q3o=i(jt),m2=n(jt,"P",{});var cMe=s(m2);H3o=r(cMe,"The model is set in evaluation mode by default using "),koe=n(cMe,"CODE",{});var EXr=s(koe);U3o=r(EXr,"model.eval()"),EXr.forEach(t),J3o=r(cMe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Roe=n(cMe,"CODE",{});var yXr=s(Roe);Y3o=r(yXr,"model.train()"),yXr.forEach(t),cMe.forEach(t),K3o=i(jt),Soe=n(jt,"P",{});var wXr=s(Soe);Z3o=r(wXr,"Examples:"),wXr.forEach(t),e5o=i(jt),m(kE.$$.fragment,jt),jt.forEach(t),Qs.forEach(t),oBe=i(c),od=n(c,"H2",{class:!0});var ike=s(od);g2=n(ike,"A",{id:!0,class:!0,href:!0});var AXr=s(g2);Poe=n(AXr,"SPAN",{});var LXr=s(Poe);m(RE.$$.fragment,LXr),LXr.forEach(t),AXr.forEach(t),o5o=i(ike),$oe=n(ike,"SPAN",{});var BXr=s($oe);r5o=r(BXr,"AutoModelForSeq2SeqLM"),BXr.forEach(t),ike.forEach(t),rBe=i(c),Yo=n(c,"DIV",{class:!0});var Us=s(Yo);m(SE.$$.fragment,Us),t5o=i(Us),rd=n(Us,"P",{});var QV=s(rd);a5o=r(QV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Ioe=n(QV,"CODE",{});var xXr=s(Ioe);n5o=r(xXr,"from_pretrained()"),xXr.forEach(t),s5o=r(QV,"class method or the "),Doe=n(QV,"CODE",{});var kXr=s(Doe);l5o=r(kXr,"from_config()"),kXr.forEach(t),i5o=r(QV,`class
method.`),QV.forEach(t),d5o=i(Us),PE=n(Us,"P",{});var dke=s(PE);c5o=r(dke,"This class cannot be instantiated directly using "),joe=n(dke,"CODE",{});var RXr=s(joe);f5o=r(RXr,"__init__()"),RXr.forEach(t),m5o=r(dke," (throws an error)."),dke.forEach(t),g5o=i(Us),Vr=n(Us,"DIV",{class:!0});var Js=s(Vr);m($E.$$.fragment,Js),h5o=i(Js),Noe=n(Js,"P",{});var SXr=s(Noe);p5o=r(SXr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),SXr.forEach(t),_5o=i(Js),td=n(Js,"P",{});var HV=s(td);u5o=r(HV,`Note:
Loading a model from its configuration file does `),qoe=n(HV,"STRONG",{});var PXr=s(qoe);b5o=r(PXr,"not"),PXr.forEach(t),v5o=r(HV,` load the model weights. It only affects the
model\u2019s configuration. Use `),Goe=n(HV,"CODE",{});var $Xr=s(Goe);T5o=r($Xr,"from_pretrained()"),$Xr.forEach(t),F5o=r(HV,"to load the model weights."),HV.forEach(t),C5o=i(Js),Ooe=n(Js,"P",{});var IXr=s(Ooe);M5o=r(IXr,"Examples:"),IXr.forEach(t),E5o=i(Js),m(IE.$$.fragment,Js),Js.forEach(t),y5o=i(Us),Ie=n(Us,"DIV",{class:!0});var Nt=s(Ie);m(DE.$$.fragment,Nt),w5o=i(Nt),Xoe=n(Nt,"P",{});var DXr=s(Xoe);A5o=r(DXr,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),DXr.forEach(t),L5o=i(Nt),Xa=n(Nt,"P",{});var R4=s(Xa);B5o=r(R4,"The model class to instantiate is selected based on the "),Voe=n(R4,"CODE",{});var jXr=s(Voe);x5o=r(jXr,"model_type"),jXr.forEach(t),k5o=r(R4,` property of the config object (either
passed as an argument or loaded from `),zoe=n(R4,"CODE",{});var NXr=s(zoe);R5o=r(NXr,"pretrained_model_name_or_path"),NXr.forEach(t),S5o=r(R4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Woe=n(R4,"CODE",{});var qXr=s(Woe);P5o=r(qXr,"pretrained_model_name_or_path"),qXr.forEach(t),$5o=r(R4,":"),R4.forEach(t),I5o=i(Nt),ne=n(Nt,"UL",{});var ie=s(ne);h2=n(ie,"LI",{});var fMe=s(h2);Qoe=n(fMe,"STRONG",{});var GXr=s(Qoe);D5o=r(GXr,"bart"),GXr.forEach(t),j5o=r(fMe," \u2014 "),E$=n(fMe,"A",{href:!0});var OXr=s(E$);N5o=r(OXr,"BartForConditionalGeneration"),OXr.forEach(t),q5o=r(fMe," (BART model)"),fMe.forEach(t),G5o=i(ie),p2=n(ie,"LI",{});var mMe=s(p2);Hoe=n(mMe,"STRONG",{});var XXr=s(Hoe);O5o=r(XXr,"bigbird_pegasus"),XXr.forEach(t),X5o=r(mMe," \u2014 "),y$=n(mMe,"A",{href:!0});var VXr=s(y$);V5o=r(VXr,"BigBirdPegasusForConditionalGeneration"),VXr.forEach(t),z5o=r(mMe," (BigBirdPegasus model)"),mMe.forEach(t),W5o=i(ie),_2=n(ie,"LI",{});var gMe=s(_2);Uoe=n(gMe,"STRONG",{});var zXr=s(Uoe);Q5o=r(zXr,"blenderbot"),zXr.forEach(t),H5o=r(gMe," \u2014 "),w$=n(gMe,"A",{href:!0});var WXr=s(w$);U5o=r(WXr,"BlenderbotForConditionalGeneration"),WXr.forEach(t),J5o=r(gMe," (Blenderbot model)"),gMe.forEach(t),Y5o=i(ie),u2=n(ie,"LI",{});var hMe=s(u2);Joe=n(hMe,"STRONG",{});var QXr=s(Joe);K5o=r(QXr,"blenderbot-small"),QXr.forEach(t),Z5o=r(hMe," \u2014 "),A$=n(hMe,"A",{href:!0});var HXr=s(A$);evo=r(HXr,"BlenderbotSmallForConditionalGeneration"),HXr.forEach(t),ovo=r(hMe," (BlenderbotSmall model)"),hMe.forEach(t),rvo=i(ie),b2=n(ie,"LI",{});var pMe=s(b2);Yoe=n(pMe,"STRONG",{});var UXr=s(Yoe);tvo=r(UXr,"encoder-decoder"),UXr.forEach(t),avo=r(pMe," \u2014 "),L$=n(pMe,"A",{href:!0});var JXr=s(L$);nvo=r(JXr,"EncoderDecoderModel"),JXr.forEach(t),svo=r(pMe," (Encoder decoder model)"),pMe.forEach(t),lvo=i(ie),v2=n(ie,"LI",{});var _Me=s(v2);Koe=n(_Me,"STRONG",{});var YXr=s(Koe);ivo=r(YXr,"fsmt"),YXr.forEach(t),dvo=r(_Me," \u2014 "),B$=n(_Me,"A",{href:!0});var KXr=s(B$);cvo=r(KXr,"FSMTForConditionalGeneration"),KXr.forEach(t),fvo=r(_Me," (FairSeq Machine-Translation model)"),_Me.forEach(t),mvo=i(ie),T2=n(ie,"LI",{});var uMe=s(T2);Zoe=n(uMe,"STRONG",{});var ZXr=s(Zoe);gvo=r(ZXr,"led"),ZXr.forEach(t),hvo=r(uMe," \u2014 "),x$=n(uMe,"A",{href:!0});var eVr=s(x$);pvo=r(eVr,"LEDForConditionalGeneration"),eVr.forEach(t),_vo=r(uMe," (LED model)"),uMe.forEach(t),uvo=i(ie),F2=n(ie,"LI",{});var bMe=s(F2);ere=n(bMe,"STRONG",{});var oVr=s(ere);bvo=r(oVr,"m2m_100"),oVr.forEach(t),vvo=r(bMe," \u2014 "),k$=n(bMe,"A",{href:!0});var rVr=s(k$);Tvo=r(rVr,"M2M100ForConditionalGeneration"),rVr.forEach(t),Fvo=r(bMe," (M2M100 model)"),bMe.forEach(t),Cvo=i(ie),C2=n(ie,"LI",{});var vMe=s(C2);ore=n(vMe,"STRONG",{});var tVr=s(ore);Mvo=r(tVr,"marian"),tVr.forEach(t),Evo=r(vMe," \u2014 "),R$=n(vMe,"A",{href:!0});var aVr=s(R$);yvo=r(aVr,"MarianMTModel"),aVr.forEach(t),wvo=r(vMe," (Marian model)"),vMe.forEach(t),Avo=i(ie),M2=n(ie,"LI",{});var TMe=s(M2);rre=n(TMe,"STRONG",{});var nVr=s(rre);Lvo=r(nVr,"mbart"),nVr.forEach(t),Bvo=r(TMe," \u2014 "),S$=n(TMe,"A",{href:!0});var sVr=s(S$);xvo=r(sVr,"MBartForConditionalGeneration"),sVr.forEach(t),kvo=r(TMe," (mBART model)"),TMe.forEach(t),Rvo=i(ie),E2=n(ie,"LI",{});var FMe=s(E2);tre=n(FMe,"STRONG",{});var lVr=s(tre);Svo=r(lVr,"mt5"),lVr.forEach(t),Pvo=r(FMe," \u2014 "),P$=n(FMe,"A",{href:!0});var iVr=s(P$);$vo=r(iVr,"MT5ForConditionalGeneration"),iVr.forEach(t),Ivo=r(FMe," (mT5 model)"),FMe.forEach(t),Dvo=i(ie),y2=n(ie,"LI",{});var CMe=s(y2);are=n(CMe,"STRONG",{});var dVr=s(are);jvo=r(dVr,"pegasus"),dVr.forEach(t),Nvo=r(CMe," \u2014 "),$$=n(CMe,"A",{href:!0});var cVr=s($$);qvo=r(cVr,"PegasusForConditionalGeneration"),cVr.forEach(t),Gvo=r(CMe," (Pegasus model)"),CMe.forEach(t),Ovo=i(ie),w2=n(ie,"LI",{});var MMe=s(w2);nre=n(MMe,"STRONG",{});var fVr=s(nre);Xvo=r(fVr,"plbart"),fVr.forEach(t),Vvo=r(MMe," \u2014 "),I$=n(MMe,"A",{href:!0});var mVr=s(I$);zvo=r(mVr,"PLBartForConditionalGeneration"),mVr.forEach(t),Wvo=r(MMe," (PLBart model)"),MMe.forEach(t),Qvo=i(ie),A2=n(ie,"LI",{});var EMe=s(A2);sre=n(EMe,"STRONG",{});var gVr=s(sre);Hvo=r(gVr,"prophetnet"),gVr.forEach(t),Uvo=r(EMe," \u2014 "),D$=n(EMe,"A",{href:!0});var hVr=s(D$);Jvo=r(hVr,"ProphetNetForConditionalGeneration"),hVr.forEach(t),Yvo=r(EMe," (ProphetNet model)"),EMe.forEach(t),Kvo=i(ie),L2=n(ie,"LI",{});var yMe=s(L2);lre=n(yMe,"STRONG",{});var pVr=s(lre);Zvo=r(pVr,"t5"),pVr.forEach(t),eTo=r(yMe," \u2014 "),j$=n(yMe,"A",{href:!0});var _Vr=s(j$);oTo=r(_Vr,"T5ForConditionalGeneration"),_Vr.forEach(t),rTo=r(yMe," (T5 model)"),yMe.forEach(t),tTo=i(ie),B2=n(ie,"LI",{});var wMe=s(B2);ire=n(wMe,"STRONG",{});var uVr=s(ire);aTo=r(uVr,"xlm-prophetnet"),uVr.forEach(t),nTo=r(wMe," \u2014 "),N$=n(wMe,"A",{href:!0});var bVr=s(N$);sTo=r(bVr,"XLMProphetNetForConditionalGeneration"),bVr.forEach(t),lTo=r(wMe," (XLMProphetNet model)"),wMe.forEach(t),ie.forEach(t),iTo=i(Nt),x2=n(Nt,"P",{});var AMe=s(x2);dTo=r(AMe,"The model is set in evaluation mode by default using "),dre=n(AMe,"CODE",{});var vVr=s(dre);cTo=r(vVr,"model.eval()"),vVr.forEach(t),fTo=r(AMe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cre=n(AMe,"CODE",{});var TVr=s(cre);mTo=r(TVr,"model.train()"),TVr.forEach(t),AMe.forEach(t),gTo=i(Nt),fre=n(Nt,"P",{});var FVr=s(fre);hTo=r(FVr,"Examples:"),FVr.forEach(t),pTo=i(Nt),m(jE.$$.fragment,Nt),Nt.forEach(t),Us.forEach(t),tBe=i(c),ad=n(c,"H2",{class:!0});var cke=s(ad);k2=n(cke,"A",{id:!0,class:!0,href:!0});var CVr=s(k2);mre=n(CVr,"SPAN",{});var MVr=s(mre);m(NE.$$.fragment,MVr),MVr.forEach(t),CVr.forEach(t),_To=i(cke),gre=n(cke,"SPAN",{});var EVr=s(gre);uTo=r(EVr,"AutoModelForSequenceClassification"),EVr.forEach(t),cke.forEach(t),aBe=i(c),Ko=n(c,"DIV",{class:!0});var Ys=s(Ko);m(qE.$$.fragment,Ys),bTo=i(Ys),nd=n(Ys,"P",{});var UV=s(nd);vTo=r(UV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),hre=n(UV,"CODE",{});var yVr=s(hre);TTo=r(yVr,"from_pretrained()"),yVr.forEach(t),FTo=r(UV,"class method or the "),pre=n(UV,"CODE",{});var wVr=s(pre);CTo=r(wVr,"from_config()"),wVr.forEach(t),MTo=r(UV,`class
method.`),UV.forEach(t),ETo=i(Ys),GE=n(Ys,"P",{});var fke=s(GE);yTo=r(fke,"This class cannot be instantiated directly using "),_re=n(fke,"CODE",{});var AVr=s(_re);wTo=r(AVr,"__init__()"),AVr.forEach(t),ATo=r(fke," (throws an error)."),fke.forEach(t),LTo=i(Ys),zr=n(Ys,"DIV",{class:!0});var Ks=s(zr);m(OE.$$.fragment,Ks),BTo=i(Ks),ure=n(Ks,"P",{});var LVr=s(ure);xTo=r(LVr,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),LVr.forEach(t),kTo=i(Ks),sd=n(Ks,"P",{});var JV=s(sd);RTo=r(JV,`Note:
Loading a model from its configuration file does `),bre=n(JV,"STRONG",{});var BVr=s(bre);STo=r(BVr,"not"),BVr.forEach(t),PTo=r(JV,` load the model weights. It only affects the
model\u2019s configuration. Use `),vre=n(JV,"CODE",{});var xVr=s(vre);$To=r(xVr,"from_pretrained()"),xVr.forEach(t),ITo=r(JV,"to load the model weights."),JV.forEach(t),DTo=i(Ks),Tre=n(Ks,"P",{});var kVr=s(Tre);jTo=r(kVr,"Examples:"),kVr.forEach(t),NTo=i(Ks),m(XE.$$.fragment,Ks),Ks.forEach(t),qTo=i(Ys),De=n(Ys,"DIV",{class:!0});var qt=s(De);m(VE.$$.fragment,qt),GTo=i(qt),Fre=n(qt,"P",{});var RVr=s(Fre);OTo=r(RVr,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),RVr.forEach(t),XTo=i(qt),Va=n(qt,"P",{});var S4=s(Va);VTo=r(S4,"The model class to instantiate is selected based on the "),Cre=n(S4,"CODE",{});var SVr=s(Cre);zTo=r(SVr,"model_type"),SVr.forEach(t),WTo=r(S4,` property of the config object (either
passed as an argument or loaded from `),Mre=n(S4,"CODE",{});var PVr=s(Mre);QTo=r(PVr,"pretrained_model_name_or_path"),PVr.forEach(t),HTo=r(S4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ere=n(S4,"CODE",{});var $Vr=s(Ere);UTo=r($Vr,"pretrained_model_name_or_path"),$Vr.forEach(t),JTo=r(S4,":"),S4.forEach(t),YTo=i(qt),A=n(qt,"UL",{});var L=s(A);R2=n(L,"LI",{});var LMe=s(R2);yre=n(LMe,"STRONG",{});var IVr=s(yre);KTo=r(IVr,"albert"),IVr.forEach(t),ZTo=r(LMe," \u2014 "),q$=n(LMe,"A",{href:!0});var DVr=s(q$);eFo=r(DVr,"AlbertForSequenceClassification"),DVr.forEach(t),oFo=r(LMe," (ALBERT model)"),LMe.forEach(t),rFo=i(L),S2=n(L,"LI",{});var BMe=s(S2);wre=n(BMe,"STRONG",{});var jVr=s(wre);tFo=r(jVr,"bart"),jVr.forEach(t),aFo=r(BMe," \u2014 "),G$=n(BMe,"A",{href:!0});var NVr=s(G$);nFo=r(NVr,"BartForSequenceClassification"),NVr.forEach(t),sFo=r(BMe," (BART model)"),BMe.forEach(t),lFo=i(L),P2=n(L,"LI",{});var xMe=s(P2);Are=n(xMe,"STRONG",{});var qVr=s(Are);iFo=r(qVr,"bert"),qVr.forEach(t),dFo=r(xMe," \u2014 "),O$=n(xMe,"A",{href:!0});var GVr=s(O$);cFo=r(GVr,"BertForSequenceClassification"),GVr.forEach(t),fFo=r(xMe," (BERT model)"),xMe.forEach(t),mFo=i(L),$2=n(L,"LI",{});var kMe=s($2);Lre=n(kMe,"STRONG",{});var OVr=s(Lre);gFo=r(OVr,"big_bird"),OVr.forEach(t),hFo=r(kMe," \u2014 "),X$=n(kMe,"A",{href:!0});var XVr=s(X$);pFo=r(XVr,"BigBirdForSequenceClassification"),XVr.forEach(t),_Fo=r(kMe," (BigBird model)"),kMe.forEach(t),uFo=i(L),I2=n(L,"LI",{});var RMe=s(I2);Bre=n(RMe,"STRONG",{});var VVr=s(Bre);bFo=r(VVr,"bigbird_pegasus"),VVr.forEach(t),vFo=r(RMe," \u2014 "),V$=n(RMe,"A",{href:!0});var zVr=s(V$);TFo=r(zVr,"BigBirdPegasusForSequenceClassification"),zVr.forEach(t),FFo=r(RMe," (BigBirdPegasus model)"),RMe.forEach(t),CFo=i(L),D2=n(L,"LI",{});var SMe=s(D2);xre=n(SMe,"STRONG",{});var WVr=s(xre);MFo=r(WVr,"camembert"),WVr.forEach(t),EFo=r(SMe," \u2014 "),z$=n(SMe,"A",{href:!0});var QVr=s(z$);yFo=r(QVr,"CamembertForSequenceClassification"),QVr.forEach(t),wFo=r(SMe," (CamemBERT model)"),SMe.forEach(t),AFo=i(L),j2=n(L,"LI",{});var PMe=s(j2);kre=n(PMe,"STRONG",{});var HVr=s(kre);LFo=r(HVr,"canine"),HVr.forEach(t),BFo=r(PMe," \u2014 "),W$=n(PMe,"A",{href:!0});var UVr=s(W$);xFo=r(UVr,"CanineForSequenceClassification"),UVr.forEach(t),kFo=r(PMe," (Canine model)"),PMe.forEach(t),RFo=i(L),N2=n(L,"LI",{});var $Me=s(N2);Rre=n($Me,"STRONG",{});var JVr=s(Rre);SFo=r(JVr,"convbert"),JVr.forEach(t),PFo=r($Me," \u2014 "),Q$=n($Me,"A",{href:!0});var YVr=s(Q$);$Fo=r(YVr,"ConvBertForSequenceClassification"),YVr.forEach(t),IFo=r($Me," (ConvBERT model)"),$Me.forEach(t),DFo=i(L),q2=n(L,"LI",{});var IMe=s(q2);Sre=n(IMe,"STRONG",{});var KVr=s(Sre);jFo=r(KVr,"ctrl"),KVr.forEach(t),NFo=r(IMe," \u2014 "),H$=n(IMe,"A",{href:!0});var ZVr=s(H$);qFo=r(ZVr,"CTRLForSequenceClassification"),ZVr.forEach(t),GFo=r(IMe," (CTRL model)"),IMe.forEach(t),OFo=i(L),G2=n(L,"LI",{});var DMe=s(G2);Pre=n(DMe,"STRONG",{});var ezr=s(Pre);XFo=r(ezr,"data2vec-text"),ezr.forEach(t),VFo=r(DMe," \u2014 "),U$=n(DMe,"A",{href:!0});var ozr=s(U$);zFo=r(ozr,"Data2VecTextForSequenceClassification"),ozr.forEach(t),WFo=r(DMe," (Data2VecText model)"),DMe.forEach(t),QFo=i(L),O2=n(L,"LI",{});var jMe=s(O2);$re=n(jMe,"STRONG",{});var rzr=s($re);HFo=r(rzr,"deberta"),rzr.forEach(t),UFo=r(jMe," \u2014 "),J$=n(jMe,"A",{href:!0});var tzr=s(J$);JFo=r(tzr,"DebertaForSequenceClassification"),tzr.forEach(t),YFo=r(jMe," (DeBERTa model)"),jMe.forEach(t),KFo=i(L),X2=n(L,"LI",{});var NMe=s(X2);Ire=n(NMe,"STRONG",{});var azr=s(Ire);ZFo=r(azr,"deberta-v2"),azr.forEach(t),e9o=r(NMe," \u2014 "),Y$=n(NMe,"A",{href:!0});var nzr=s(Y$);o9o=r(nzr,"DebertaV2ForSequenceClassification"),nzr.forEach(t),r9o=r(NMe," (DeBERTa-v2 model)"),NMe.forEach(t),t9o=i(L),V2=n(L,"LI",{});var qMe=s(V2);Dre=n(qMe,"STRONG",{});var szr=s(Dre);a9o=r(szr,"distilbert"),szr.forEach(t),n9o=r(qMe," \u2014 "),K$=n(qMe,"A",{href:!0});var lzr=s(K$);s9o=r(lzr,"DistilBertForSequenceClassification"),lzr.forEach(t),l9o=r(qMe," (DistilBERT model)"),qMe.forEach(t),i9o=i(L),z2=n(L,"LI",{});var GMe=s(z2);jre=n(GMe,"STRONG",{});var izr=s(jre);d9o=r(izr,"electra"),izr.forEach(t),c9o=r(GMe," \u2014 "),Z$=n(GMe,"A",{href:!0});var dzr=s(Z$);f9o=r(dzr,"ElectraForSequenceClassification"),dzr.forEach(t),m9o=r(GMe," (ELECTRA model)"),GMe.forEach(t),g9o=i(L),W2=n(L,"LI",{});var OMe=s(W2);Nre=n(OMe,"STRONG",{});var czr=s(Nre);h9o=r(czr,"flaubert"),czr.forEach(t),p9o=r(OMe," \u2014 "),eI=n(OMe,"A",{href:!0});var fzr=s(eI);_9o=r(fzr,"FlaubertForSequenceClassification"),fzr.forEach(t),u9o=r(OMe," (FlauBERT model)"),OMe.forEach(t),b9o=i(L),Q2=n(L,"LI",{});var XMe=s(Q2);qre=n(XMe,"STRONG",{});var mzr=s(qre);v9o=r(mzr,"fnet"),mzr.forEach(t),T9o=r(XMe," \u2014 "),oI=n(XMe,"A",{href:!0});var gzr=s(oI);F9o=r(gzr,"FNetForSequenceClassification"),gzr.forEach(t),C9o=r(XMe," (FNet model)"),XMe.forEach(t),M9o=i(L),H2=n(L,"LI",{});var VMe=s(H2);Gre=n(VMe,"STRONG",{});var hzr=s(Gre);E9o=r(hzr,"funnel"),hzr.forEach(t),y9o=r(VMe," \u2014 "),rI=n(VMe,"A",{href:!0});var pzr=s(rI);w9o=r(pzr,"FunnelForSequenceClassification"),pzr.forEach(t),A9o=r(VMe," (Funnel Transformer model)"),VMe.forEach(t),L9o=i(L),U2=n(L,"LI",{});var zMe=s(U2);Ore=n(zMe,"STRONG",{});var _zr=s(Ore);B9o=r(_zr,"gpt2"),_zr.forEach(t),x9o=r(zMe," \u2014 "),tI=n(zMe,"A",{href:!0});var uzr=s(tI);k9o=r(uzr,"GPT2ForSequenceClassification"),uzr.forEach(t),R9o=r(zMe," (OpenAI GPT-2 model)"),zMe.forEach(t),S9o=i(L),J2=n(L,"LI",{});var WMe=s(J2);Xre=n(WMe,"STRONG",{});var bzr=s(Xre);P9o=r(bzr,"gpt_neo"),bzr.forEach(t),$9o=r(WMe," \u2014 "),aI=n(WMe,"A",{href:!0});var vzr=s(aI);I9o=r(vzr,"GPTNeoForSequenceClassification"),vzr.forEach(t),D9o=r(WMe," (GPT Neo model)"),WMe.forEach(t),j9o=i(L),Y2=n(L,"LI",{});var QMe=s(Y2);Vre=n(QMe,"STRONG",{});var Tzr=s(Vre);N9o=r(Tzr,"gptj"),Tzr.forEach(t),q9o=r(QMe," \u2014 "),nI=n(QMe,"A",{href:!0});var Fzr=s(nI);G9o=r(Fzr,"GPTJForSequenceClassification"),Fzr.forEach(t),O9o=r(QMe," (GPT-J model)"),QMe.forEach(t),X9o=i(L),K2=n(L,"LI",{});var HMe=s(K2);zre=n(HMe,"STRONG",{});var Czr=s(zre);V9o=r(Czr,"ibert"),Czr.forEach(t),z9o=r(HMe," \u2014 "),sI=n(HMe,"A",{href:!0});var Mzr=s(sI);W9o=r(Mzr,"IBertForSequenceClassification"),Mzr.forEach(t),Q9o=r(HMe," (I-BERT model)"),HMe.forEach(t),H9o=i(L),Z2=n(L,"LI",{});var UMe=s(Z2);Wre=n(UMe,"STRONG",{});var Ezr=s(Wre);U9o=r(Ezr,"layoutlm"),Ezr.forEach(t),J9o=r(UMe," \u2014 "),lI=n(UMe,"A",{href:!0});var yzr=s(lI);Y9o=r(yzr,"LayoutLMForSequenceClassification"),yzr.forEach(t),K9o=r(UMe," (LayoutLM model)"),UMe.forEach(t),Z9o=i(L),e1=n(L,"LI",{});var JMe=s(e1);Qre=n(JMe,"STRONG",{});var wzr=s(Qre);eCo=r(wzr,"layoutlmv2"),wzr.forEach(t),oCo=r(JMe," \u2014 "),iI=n(JMe,"A",{href:!0});var Azr=s(iI);rCo=r(Azr,"LayoutLMv2ForSequenceClassification"),Azr.forEach(t),tCo=r(JMe," (LayoutLMv2 model)"),JMe.forEach(t),aCo=i(L),o1=n(L,"LI",{});var YMe=s(o1);Hre=n(YMe,"STRONG",{});var Lzr=s(Hre);nCo=r(Lzr,"led"),Lzr.forEach(t),sCo=r(YMe," \u2014 "),dI=n(YMe,"A",{href:!0});var Bzr=s(dI);lCo=r(Bzr,"LEDForSequenceClassification"),Bzr.forEach(t),iCo=r(YMe," (LED model)"),YMe.forEach(t),dCo=i(L),r1=n(L,"LI",{});var KMe=s(r1);Ure=n(KMe,"STRONG",{});var xzr=s(Ure);cCo=r(xzr,"longformer"),xzr.forEach(t),fCo=r(KMe," \u2014 "),cI=n(KMe,"A",{href:!0});var kzr=s(cI);mCo=r(kzr,"LongformerForSequenceClassification"),kzr.forEach(t),gCo=r(KMe," (Longformer model)"),KMe.forEach(t),hCo=i(L),t1=n(L,"LI",{});var ZMe=s(t1);Jre=n(ZMe,"STRONG",{});var Rzr=s(Jre);pCo=r(Rzr,"mbart"),Rzr.forEach(t),_Co=r(ZMe," \u2014 "),fI=n(ZMe,"A",{href:!0});var Szr=s(fI);uCo=r(Szr,"MBartForSequenceClassification"),Szr.forEach(t),bCo=r(ZMe," (mBART model)"),ZMe.forEach(t),vCo=i(L),a1=n(L,"LI",{});var eEe=s(a1);Yre=n(eEe,"STRONG",{});var Pzr=s(Yre);TCo=r(Pzr,"megatron-bert"),Pzr.forEach(t),FCo=r(eEe," \u2014 "),mI=n(eEe,"A",{href:!0});var $zr=s(mI);CCo=r($zr,"MegatronBertForSequenceClassification"),$zr.forEach(t),MCo=r(eEe," (MegatronBert model)"),eEe.forEach(t),ECo=i(L),n1=n(L,"LI",{});var oEe=s(n1);Kre=n(oEe,"STRONG",{});var Izr=s(Kre);yCo=r(Izr,"mobilebert"),Izr.forEach(t),wCo=r(oEe," \u2014 "),gI=n(oEe,"A",{href:!0});var Dzr=s(gI);ACo=r(Dzr,"MobileBertForSequenceClassification"),Dzr.forEach(t),LCo=r(oEe," (MobileBERT model)"),oEe.forEach(t),BCo=i(L),s1=n(L,"LI",{});var rEe=s(s1);Zre=n(rEe,"STRONG",{});var jzr=s(Zre);xCo=r(jzr,"mpnet"),jzr.forEach(t),kCo=r(rEe," \u2014 "),hI=n(rEe,"A",{href:!0});var Nzr=s(hI);RCo=r(Nzr,"MPNetForSequenceClassification"),Nzr.forEach(t),SCo=r(rEe," (MPNet model)"),rEe.forEach(t),PCo=i(L),l1=n(L,"LI",{});var tEe=s(l1);ete=n(tEe,"STRONG",{});var qzr=s(ete);$Co=r(qzr,"nystromformer"),qzr.forEach(t),ICo=r(tEe," \u2014 "),pI=n(tEe,"A",{href:!0});var Gzr=s(pI);DCo=r(Gzr,"NystromformerForSequenceClassification"),Gzr.forEach(t),jCo=r(tEe," (Nystromformer model)"),tEe.forEach(t),NCo=i(L),i1=n(L,"LI",{});var aEe=s(i1);ote=n(aEe,"STRONG",{});var Ozr=s(ote);qCo=r(Ozr,"openai-gpt"),Ozr.forEach(t),GCo=r(aEe," \u2014 "),_I=n(aEe,"A",{href:!0});var Xzr=s(_I);OCo=r(Xzr,"OpenAIGPTForSequenceClassification"),Xzr.forEach(t),XCo=r(aEe," (OpenAI GPT model)"),aEe.forEach(t),VCo=i(L),d1=n(L,"LI",{});var nEe=s(d1);rte=n(nEe,"STRONG",{});var Vzr=s(rte);zCo=r(Vzr,"perceiver"),Vzr.forEach(t),WCo=r(nEe," \u2014 "),uI=n(nEe,"A",{href:!0});var zzr=s(uI);QCo=r(zzr,"PerceiverForSequenceClassification"),zzr.forEach(t),HCo=r(nEe," (Perceiver model)"),nEe.forEach(t),UCo=i(L),c1=n(L,"LI",{});var sEe=s(c1);tte=n(sEe,"STRONG",{});var Wzr=s(tte);JCo=r(Wzr,"plbart"),Wzr.forEach(t),YCo=r(sEe," \u2014 "),bI=n(sEe,"A",{href:!0});var Qzr=s(bI);KCo=r(Qzr,"PLBartForSequenceClassification"),Qzr.forEach(t),ZCo=r(sEe," (PLBart model)"),sEe.forEach(t),e4o=i(L),f1=n(L,"LI",{});var lEe=s(f1);ate=n(lEe,"STRONG",{});var Hzr=s(ate);o4o=r(Hzr,"qdqbert"),Hzr.forEach(t),r4o=r(lEe," \u2014 "),vI=n(lEe,"A",{href:!0});var Uzr=s(vI);t4o=r(Uzr,"QDQBertForSequenceClassification"),Uzr.forEach(t),a4o=r(lEe," (QDQBert model)"),lEe.forEach(t),n4o=i(L),m1=n(L,"LI",{});var iEe=s(m1);nte=n(iEe,"STRONG",{});var Jzr=s(nte);s4o=r(Jzr,"reformer"),Jzr.forEach(t),l4o=r(iEe," \u2014 "),TI=n(iEe,"A",{href:!0});var Yzr=s(TI);i4o=r(Yzr,"ReformerForSequenceClassification"),Yzr.forEach(t),d4o=r(iEe," (Reformer model)"),iEe.forEach(t),c4o=i(L),g1=n(L,"LI",{});var dEe=s(g1);ste=n(dEe,"STRONG",{});var Kzr=s(ste);f4o=r(Kzr,"rembert"),Kzr.forEach(t),m4o=r(dEe," \u2014 "),FI=n(dEe,"A",{href:!0});var Zzr=s(FI);g4o=r(Zzr,"RemBertForSequenceClassification"),Zzr.forEach(t),h4o=r(dEe," (RemBERT model)"),dEe.forEach(t),p4o=i(L),h1=n(L,"LI",{});var cEe=s(h1);lte=n(cEe,"STRONG",{});var eWr=s(lte);_4o=r(eWr,"roberta"),eWr.forEach(t),u4o=r(cEe," \u2014 "),CI=n(cEe,"A",{href:!0});var oWr=s(CI);b4o=r(oWr,"RobertaForSequenceClassification"),oWr.forEach(t),v4o=r(cEe," (RoBERTa model)"),cEe.forEach(t),T4o=i(L),p1=n(L,"LI",{});var fEe=s(p1);ite=n(fEe,"STRONG",{});var rWr=s(ite);F4o=r(rWr,"roformer"),rWr.forEach(t),C4o=r(fEe," \u2014 "),MI=n(fEe,"A",{href:!0});var tWr=s(MI);M4o=r(tWr,"RoFormerForSequenceClassification"),tWr.forEach(t),E4o=r(fEe," (RoFormer model)"),fEe.forEach(t),y4o=i(L),_1=n(L,"LI",{});var mEe=s(_1);dte=n(mEe,"STRONG",{});var aWr=s(dte);w4o=r(aWr,"squeezebert"),aWr.forEach(t),A4o=r(mEe," \u2014 "),EI=n(mEe,"A",{href:!0});var nWr=s(EI);L4o=r(nWr,"SqueezeBertForSequenceClassification"),nWr.forEach(t),B4o=r(mEe," (SqueezeBERT model)"),mEe.forEach(t),x4o=i(L),u1=n(L,"LI",{});var gEe=s(u1);cte=n(gEe,"STRONG",{});var sWr=s(cte);k4o=r(sWr,"tapas"),sWr.forEach(t),R4o=r(gEe," \u2014 "),yI=n(gEe,"A",{href:!0});var lWr=s(yI);S4o=r(lWr,"TapasForSequenceClassification"),lWr.forEach(t),P4o=r(gEe," (TAPAS model)"),gEe.forEach(t),$4o=i(L),b1=n(L,"LI",{});var hEe=s(b1);fte=n(hEe,"STRONG",{});var iWr=s(fte);I4o=r(iWr,"transfo-xl"),iWr.forEach(t),D4o=r(hEe," \u2014 "),wI=n(hEe,"A",{href:!0});var dWr=s(wI);j4o=r(dWr,"TransfoXLForSequenceClassification"),dWr.forEach(t),N4o=r(hEe," (Transformer-XL model)"),hEe.forEach(t),q4o=i(L),v1=n(L,"LI",{});var pEe=s(v1);mte=n(pEe,"STRONG",{});var cWr=s(mte);G4o=r(cWr,"xlm"),cWr.forEach(t),O4o=r(pEe," \u2014 "),AI=n(pEe,"A",{href:!0});var fWr=s(AI);X4o=r(fWr,"XLMForSequenceClassification"),fWr.forEach(t),V4o=r(pEe," (XLM model)"),pEe.forEach(t),z4o=i(L),T1=n(L,"LI",{});var _Ee=s(T1);gte=n(_Ee,"STRONG",{});var mWr=s(gte);W4o=r(mWr,"xlm-roberta"),mWr.forEach(t),Q4o=r(_Ee," \u2014 "),LI=n(_Ee,"A",{href:!0});var gWr=s(LI);H4o=r(gWr,"XLMRobertaForSequenceClassification"),gWr.forEach(t),U4o=r(_Ee," (XLM-RoBERTa model)"),_Ee.forEach(t),J4o=i(L),F1=n(L,"LI",{});var uEe=s(F1);hte=n(uEe,"STRONG",{});var hWr=s(hte);Y4o=r(hWr,"xlm-roberta-xl"),hWr.forEach(t),K4o=r(uEe," \u2014 "),BI=n(uEe,"A",{href:!0});var pWr=s(BI);Z4o=r(pWr,"XLMRobertaXLForSequenceClassification"),pWr.forEach(t),eMo=r(uEe," (XLM-RoBERTa-XL model)"),uEe.forEach(t),oMo=i(L),C1=n(L,"LI",{});var bEe=s(C1);pte=n(bEe,"STRONG",{});var _Wr=s(pte);rMo=r(_Wr,"xlnet"),_Wr.forEach(t),tMo=r(bEe," \u2014 "),xI=n(bEe,"A",{href:!0});var uWr=s(xI);aMo=r(uWr,"XLNetForSequenceClassification"),uWr.forEach(t),nMo=r(bEe," (XLNet model)"),bEe.forEach(t),sMo=i(L),M1=n(L,"LI",{});var vEe=s(M1);_te=n(vEe,"STRONG",{});var bWr=s(_te);lMo=r(bWr,"yoso"),bWr.forEach(t),iMo=r(vEe," \u2014 "),kI=n(vEe,"A",{href:!0});var vWr=s(kI);dMo=r(vWr,"YosoForSequenceClassification"),vWr.forEach(t),cMo=r(vEe," (YOSO model)"),vEe.forEach(t),L.forEach(t),fMo=i(qt),E1=n(qt,"P",{});var TEe=s(E1);mMo=r(TEe,"The model is set in evaluation mode by default using "),ute=n(TEe,"CODE",{});var TWr=s(ute);gMo=r(TWr,"model.eval()"),TWr.forEach(t),hMo=r(TEe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bte=n(TEe,"CODE",{});var FWr=s(bte);pMo=r(FWr,"model.train()"),FWr.forEach(t),TEe.forEach(t),_Mo=i(qt),vte=n(qt,"P",{});var CWr=s(vte);uMo=r(CWr,"Examples:"),CWr.forEach(t),bMo=i(qt),m(zE.$$.fragment,qt),qt.forEach(t),Ys.forEach(t),nBe=i(c),ld=n(c,"H2",{class:!0});var mke=s(ld);y1=n(mke,"A",{id:!0,class:!0,href:!0});var MWr=s(y1);Tte=n(MWr,"SPAN",{});var EWr=s(Tte);m(WE.$$.fragment,EWr),EWr.forEach(t),MWr.forEach(t),vMo=i(mke),Fte=n(mke,"SPAN",{});var yWr=s(Fte);TMo=r(yWr,"AutoModelForMultipleChoice"),yWr.forEach(t),mke.forEach(t),sBe=i(c),Zo=n(c,"DIV",{class:!0});var Zs=s(Zo);m(QE.$$.fragment,Zs),FMo=i(Zs),id=n(Zs,"P",{});var YV=s(id);CMo=r(YV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Cte=n(YV,"CODE",{});var wWr=s(Cte);MMo=r(wWr,"from_pretrained()"),wWr.forEach(t),EMo=r(YV,"class method or the "),Mte=n(YV,"CODE",{});var AWr=s(Mte);yMo=r(AWr,"from_config()"),AWr.forEach(t),wMo=r(YV,`class
method.`),YV.forEach(t),AMo=i(Zs),HE=n(Zs,"P",{});var gke=s(HE);LMo=r(gke,"This class cannot be instantiated directly using "),Ete=n(gke,"CODE",{});var LWr=s(Ete);BMo=r(LWr,"__init__()"),LWr.forEach(t),xMo=r(gke," (throws an error)."),gke.forEach(t),kMo=i(Zs),Wr=n(Zs,"DIV",{class:!0});var el=s(Wr);m(UE.$$.fragment,el),RMo=i(el),yte=n(el,"P",{});var BWr=s(yte);SMo=r(BWr,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),BWr.forEach(t),PMo=i(el),dd=n(el,"P",{});var KV=s(dd);$Mo=r(KV,`Note:
Loading a model from its configuration file does `),wte=n(KV,"STRONG",{});var xWr=s(wte);IMo=r(xWr,"not"),xWr.forEach(t),DMo=r(KV,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ate=n(KV,"CODE",{});var kWr=s(Ate);jMo=r(kWr,"from_pretrained()"),kWr.forEach(t),NMo=r(KV,"to load the model weights."),KV.forEach(t),qMo=i(el),Lte=n(el,"P",{});var RWr=s(Lte);GMo=r(RWr,"Examples:"),RWr.forEach(t),OMo=i(el),m(JE.$$.fragment,el),el.forEach(t),XMo=i(Zs),je=n(Zs,"DIV",{class:!0});var Gt=s(je);m(YE.$$.fragment,Gt),VMo=i(Gt),Bte=n(Gt,"P",{});var SWr=s(Bte);zMo=r(SWr,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),SWr.forEach(t),WMo=i(Gt),za=n(Gt,"P",{});var P4=s(za);QMo=r(P4,"The model class to instantiate is selected based on the "),xte=n(P4,"CODE",{});var PWr=s(xte);HMo=r(PWr,"model_type"),PWr.forEach(t),UMo=r(P4,` property of the config object (either
passed as an argument or loaded from `),kte=n(P4,"CODE",{});var $Wr=s(kte);JMo=r($Wr,"pretrained_model_name_or_path"),$Wr.forEach(t),YMo=r(P4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rte=n(P4,"CODE",{});var IWr=s(Rte);KMo=r(IWr,"pretrained_model_name_or_path"),IWr.forEach(t),ZMo=r(P4,":"),P4.forEach(t),eEo=i(Gt),G=n(Gt,"UL",{});var O=s(G);w1=n(O,"LI",{});var FEe=s(w1);Ste=n(FEe,"STRONG",{});var DWr=s(Ste);oEo=r(DWr,"albert"),DWr.forEach(t),rEo=r(FEe," \u2014 "),RI=n(FEe,"A",{href:!0});var jWr=s(RI);tEo=r(jWr,"AlbertForMultipleChoice"),jWr.forEach(t),aEo=r(FEe," (ALBERT model)"),FEe.forEach(t),nEo=i(O),A1=n(O,"LI",{});var CEe=s(A1);Pte=n(CEe,"STRONG",{});var NWr=s(Pte);sEo=r(NWr,"bert"),NWr.forEach(t),lEo=r(CEe," \u2014 "),SI=n(CEe,"A",{href:!0});var qWr=s(SI);iEo=r(qWr,"BertForMultipleChoice"),qWr.forEach(t),dEo=r(CEe," (BERT model)"),CEe.forEach(t),cEo=i(O),L1=n(O,"LI",{});var MEe=s(L1);$te=n(MEe,"STRONG",{});var GWr=s($te);fEo=r(GWr,"big_bird"),GWr.forEach(t),mEo=r(MEe," \u2014 "),PI=n(MEe,"A",{href:!0});var OWr=s(PI);gEo=r(OWr,"BigBirdForMultipleChoice"),OWr.forEach(t),hEo=r(MEe," (BigBird model)"),MEe.forEach(t),pEo=i(O),B1=n(O,"LI",{});var EEe=s(B1);Ite=n(EEe,"STRONG",{});var XWr=s(Ite);_Eo=r(XWr,"camembert"),XWr.forEach(t),uEo=r(EEe," \u2014 "),$I=n(EEe,"A",{href:!0});var VWr=s($I);bEo=r(VWr,"CamembertForMultipleChoice"),VWr.forEach(t),vEo=r(EEe," (CamemBERT model)"),EEe.forEach(t),TEo=i(O),x1=n(O,"LI",{});var yEe=s(x1);Dte=n(yEe,"STRONG",{});var zWr=s(Dte);FEo=r(zWr,"canine"),zWr.forEach(t),CEo=r(yEe," \u2014 "),II=n(yEe,"A",{href:!0});var WWr=s(II);MEo=r(WWr,"CanineForMultipleChoice"),WWr.forEach(t),EEo=r(yEe," (Canine model)"),yEe.forEach(t),yEo=i(O),k1=n(O,"LI",{});var wEe=s(k1);jte=n(wEe,"STRONG",{});var QWr=s(jte);wEo=r(QWr,"convbert"),QWr.forEach(t),AEo=r(wEe," \u2014 "),DI=n(wEe,"A",{href:!0});var HWr=s(DI);LEo=r(HWr,"ConvBertForMultipleChoice"),HWr.forEach(t),BEo=r(wEe," (ConvBERT model)"),wEe.forEach(t),xEo=i(O),R1=n(O,"LI",{});var AEe=s(R1);Nte=n(AEe,"STRONG",{});var UWr=s(Nte);kEo=r(UWr,"data2vec-text"),UWr.forEach(t),REo=r(AEe," \u2014 "),jI=n(AEe,"A",{href:!0});var JWr=s(jI);SEo=r(JWr,"Data2VecTextForMultipleChoice"),JWr.forEach(t),PEo=r(AEe," (Data2VecText model)"),AEe.forEach(t),$Eo=i(O),S1=n(O,"LI",{});var LEe=s(S1);qte=n(LEe,"STRONG",{});var YWr=s(qte);IEo=r(YWr,"distilbert"),YWr.forEach(t),DEo=r(LEe," \u2014 "),NI=n(LEe,"A",{href:!0});var KWr=s(NI);jEo=r(KWr,"DistilBertForMultipleChoice"),KWr.forEach(t),NEo=r(LEe," (DistilBERT model)"),LEe.forEach(t),qEo=i(O),P1=n(O,"LI",{});var BEe=s(P1);Gte=n(BEe,"STRONG",{});var ZWr=s(Gte);GEo=r(ZWr,"electra"),ZWr.forEach(t),OEo=r(BEe," \u2014 "),qI=n(BEe,"A",{href:!0});var eQr=s(qI);XEo=r(eQr,"ElectraForMultipleChoice"),eQr.forEach(t),VEo=r(BEe," (ELECTRA model)"),BEe.forEach(t),zEo=i(O),$1=n(O,"LI",{});var xEe=s($1);Ote=n(xEe,"STRONG",{});var oQr=s(Ote);WEo=r(oQr,"flaubert"),oQr.forEach(t),QEo=r(xEe," \u2014 "),GI=n(xEe,"A",{href:!0});var rQr=s(GI);HEo=r(rQr,"FlaubertForMultipleChoice"),rQr.forEach(t),UEo=r(xEe," (FlauBERT model)"),xEe.forEach(t),JEo=i(O),I1=n(O,"LI",{});var kEe=s(I1);Xte=n(kEe,"STRONG",{});var tQr=s(Xte);YEo=r(tQr,"fnet"),tQr.forEach(t),KEo=r(kEe," \u2014 "),OI=n(kEe,"A",{href:!0});var aQr=s(OI);ZEo=r(aQr,"FNetForMultipleChoice"),aQr.forEach(t),eyo=r(kEe," (FNet model)"),kEe.forEach(t),oyo=i(O),D1=n(O,"LI",{});var REe=s(D1);Vte=n(REe,"STRONG",{});var nQr=s(Vte);ryo=r(nQr,"funnel"),nQr.forEach(t),tyo=r(REe," \u2014 "),XI=n(REe,"A",{href:!0});var sQr=s(XI);ayo=r(sQr,"FunnelForMultipleChoice"),sQr.forEach(t),nyo=r(REe," (Funnel Transformer model)"),REe.forEach(t),syo=i(O),j1=n(O,"LI",{});var SEe=s(j1);zte=n(SEe,"STRONG",{});var lQr=s(zte);lyo=r(lQr,"ibert"),lQr.forEach(t),iyo=r(SEe," \u2014 "),VI=n(SEe,"A",{href:!0});var iQr=s(VI);dyo=r(iQr,"IBertForMultipleChoice"),iQr.forEach(t),cyo=r(SEe," (I-BERT model)"),SEe.forEach(t),fyo=i(O),N1=n(O,"LI",{});var PEe=s(N1);Wte=n(PEe,"STRONG",{});var dQr=s(Wte);myo=r(dQr,"longformer"),dQr.forEach(t),gyo=r(PEe," \u2014 "),zI=n(PEe,"A",{href:!0});var cQr=s(zI);hyo=r(cQr,"LongformerForMultipleChoice"),cQr.forEach(t),pyo=r(PEe," (Longformer model)"),PEe.forEach(t),_yo=i(O),q1=n(O,"LI",{});var $Ee=s(q1);Qte=n($Ee,"STRONG",{});var fQr=s(Qte);uyo=r(fQr,"megatron-bert"),fQr.forEach(t),byo=r($Ee," \u2014 "),WI=n($Ee,"A",{href:!0});var mQr=s(WI);vyo=r(mQr,"MegatronBertForMultipleChoice"),mQr.forEach(t),Tyo=r($Ee," (MegatronBert model)"),$Ee.forEach(t),Fyo=i(O),G1=n(O,"LI",{});var IEe=s(G1);Hte=n(IEe,"STRONG",{});var gQr=s(Hte);Cyo=r(gQr,"mobilebert"),gQr.forEach(t),Myo=r(IEe," \u2014 "),QI=n(IEe,"A",{href:!0});var hQr=s(QI);Eyo=r(hQr,"MobileBertForMultipleChoice"),hQr.forEach(t),yyo=r(IEe," (MobileBERT model)"),IEe.forEach(t),wyo=i(O),O1=n(O,"LI",{});var DEe=s(O1);Ute=n(DEe,"STRONG",{});var pQr=s(Ute);Ayo=r(pQr,"mpnet"),pQr.forEach(t),Lyo=r(DEe," \u2014 "),HI=n(DEe,"A",{href:!0});var _Qr=s(HI);Byo=r(_Qr,"MPNetForMultipleChoice"),_Qr.forEach(t),xyo=r(DEe," (MPNet model)"),DEe.forEach(t),kyo=i(O),X1=n(O,"LI",{});var jEe=s(X1);Jte=n(jEe,"STRONG",{});var uQr=s(Jte);Ryo=r(uQr,"nystromformer"),uQr.forEach(t),Syo=r(jEe," \u2014 "),UI=n(jEe,"A",{href:!0});var bQr=s(UI);Pyo=r(bQr,"NystromformerForMultipleChoice"),bQr.forEach(t),$yo=r(jEe," (Nystromformer model)"),jEe.forEach(t),Iyo=i(O),V1=n(O,"LI",{});var NEe=s(V1);Yte=n(NEe,"STRONG",{});var vQr=s(Yte);Dyo=r(vQr,"qdqbert"),vQr.forEach(t),jyo=r(NEe," \u2014 "),JI=n(NEe,"A",{href:!0});var TQr=s(JI);Nyo=r(TQr,"QDQBertForMultipleChoice"),TQr.forEach(t),qyo=r(NEe," (QDQBert model)"),NEe.forEach(t),Gyo=i(O),z1=n(O,"LI",{});var qEe=s(z1);Kte=n(qEe,"STRONG",{});var FQr=s(Kte);Oyo=r(FQr,"rembert"),FQr.forEach(t),Xyo=r(qEe," \u2014 "),YI=n(qEe,"A",{href:!0});var CQr=s(YI);Vyo=r(CQr,"RemBertForMultipleChoice"),CQr.forEach(t),zyo=r(qEe," (RemBERT model)"),qEe.forEach(t),Wyo=i(O),W1=n(O,"LI",{});var GEe=s(W1);Zte=n(GEe,"STRONG",{});var MQr=s(Zte);Qyo=r(MQr,"roberta"),MQr.forEach(t),Hyo=r(GEe," \u2014 "),KI=n(GEe,"A",{href:!0});var EQr=s(KI);Uyo=r(EQr,"RobertaForMultipleChoice"),EQr.forEach(t),Jyo=r(GEe," (RoBERTa model)"),GEe.forEach(t),Yyo=i(O),Q1=n(O,"LI",{});var OEe=s(Q1);eae=n(OEe,"STRONG",{});var yQr=s(eae);Kyo=r(yQr,"roformer"),yQr.forEach(t),Zyo=r(OEe," \u2014 "),ZI=n(OEe,"A",{href:!0});var wQr=s(ZI);ewo=r(wQr,"RoFormerForMultipleChoice"),wQr.forEach(t),owo=r(OEe," (RoFormer model)"),OEe.forEach(t),rwo=i(O),H1=n(O,"LI",{});var XEe=s(H1);oae=n(XEe,"STRONG",{});var AQr=s(oae);two=r(AQr,"squeezebert"),AQr.forEach(t),awo=r(XEe," \u2014 "),eD=n(XEe,"A",{href:!0});var LQr=s(eD);nwo=r(LQr,"SqueezeBertForMultipleChoice"),LQr.forEach(t),swo=r(XEe," (SqueezeBERT model)"),XEe.forEach(t),lwo=i(O),U1=n(O,"LI",{});var VEe=s(U1);rae=n(VEe,"STRONG",{});var BQr=s(rae);iwo=r(BQr,"xlm"),BQr.forEach(t),dwo=r(VEe," \u2014 "),oD=n(VEe,"A",{href:!0});var xQr=s(oD);cwo=r(xQr,"XLMForMultipleChoice"),xQr.forEach(t),fwo=r(VEe," (XLM model)"),VEe.forEach(t),mwo=i(O),J1=n(O,"LI",{});var zEe=s(J1);tae=n(zEe,"STRONG",{});var kQr=s(tae);gwo=r(kQr,"xlm-roberta"),kQr.forEach(t),hwo=r(zEe," \u2014 "),rD=n(zEe,"A",{href:!0});var RQr=s(rD);pwo=r(RQr,"XLMRobertaForMultipleChoice"),RQr.forEach(t),_wo=r(zEe," (XLM-RoBERTa model)"),zEe.forEach(t),uwo=i(O),Y1=n(O,"LI",{});var WEe=s(Y1);aae=n(WEe,"STRONG",{});var SQr=s(aae);bwo=r(SQr,"xlm-roberta-xl"),SQr.forEach(t),vwo=r(WEe," \u2014 "),tD=n(WEe,"A",{href:!0});var PQr=s(tD);Two=r(PQr,"XLMRobertaXLForMultipleChoice"),PQr.forEach(t),Fwo=r(WEe," (XLM-RoBERTa-XL model)"),WEe.forEach(t),Cwo=i(O),K1=n(O,"LI",{});var QEe=s(K1);nae=n(QEe,"STRONG",{});var $Qr=s(nae);Mwo=r($Qr,"xlnet"),$Qr.forEach(t),Ewo=r(QEe," \u2014 "),aD=n(QEe,"A",{href:!0});var IQr=s(aD);ywo=r(IQr,"XLNetForMultipleChoice"),IQr.forEach(t),wwo=r(QEe," (XLNet model)"),QEe.forEach(t),Awo=i(O),Z1=n(O,"LI",{});var HEe=s(Z1);sae=n(HEe,"STRONG",{});var DQr=s(sae);Lwo=r(DQr,"yoso"),DQr.forEach(t),Bwo=r(HEe," \u2014 "),nD=n(HEe,"A",{href:!0});var jQr=s(nD);xwo=r(jQr,"YosoForMultipleChoice"),jQr.forEach(t),kwo=r(HEe," (YOSO model)"),HEe.forEach(t),O.forEach(t),Rwo=i(Gt),eb=n(Gt,"P",{});var UEe=s(eb);Swo=r(UEe,"The model is set in evaluation mode by default using "),lae=n(UEe,"CODE",{});var NQr=s(lae);Pwo=r(NQr,"model.eval()"),NQr.forEach(t),$wo=r(UEe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),iae=n(UEe,"CODE",{});var qQr=s(iae);Iwo=r(qQr,"model.train()"),qQr.forEach(t),UEe.forEach(t),Dwo=i(Gt),dae=n(Gt,"P",{});var GQr=s(dae);jwo=r(GQr,"Examples:"),GQr.forEach(t),Nwo=i(Gt),m(KE.$$.fragment,Gt),Gt.forEach(t),Zs.forEach(t),lBe=i(c),cd=n(c,"H2",{class:!0});var hke=s(cd);ob=n(hke,"A",{id:!0,class:!0,href:!0});var OQr=s(ob);cae=n(OQr,"SPAN",{});var XQr=s(cae);m(ZE.$$.fragment,XQr),XQr.forEach(t),OQr.forEach(t),qwo=i(hke),fae=n(hke,"SPAN",{});var VQr=s(fae);Gwo=r(VQr,"AutoModelForNextSentencePrediction"),VQr.forEach(t),hke.forEach(t),iBe=i(c),er=n(c,"DIV",{class:!0});var ol=s(er);m(ey.$$.fragment,ol),Owo=i(ol),fd=n(ol,"P",{});var ZV=s(fd);Xwo=r(ZV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),mae=n(ZV,"CODE",{});var zQr=s(mae);Vwo=r(zQr,"from_pretrained()"),zQr.forEach(t),zwo=r(ZV,"class method or the "),gae=n(ZV,"CODE",{});var WQr=s(gae);Wwo=r(WQr,"from_config()"),WQr.forEach(t),Qwo=r(ZV,`class
method.`),ZV.forEach(t),Hwo=i(ol),oy=n(ol,"P",{});var pke=s(oy);Uwo=r(pke,"This class cannot be instantiated directly using "),hae=n(pke,"CODE",{});var QQr=s(hae);Jwo=r(QQr,"__init__()"),QQr.forEach(t),Ywo=r(pke," (throws an error)."),pke.forEach(t),Kwo=i(ol),Qr=n(ol,"DIV",{class:!0});var rl=s(Qr);m(ry.$$.fragment,rl),Zwo=i(rl),pae=n(rl,"P",{});var HQr=s(pae);e6o=r(HQr,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),HQr.forEach(t),o6o=i(rl),md=n(rl,"P",{});var ez=s(md);r6o=r(ez,`Note:
Loading a model from its configuration file does `),_ae=n(ez,"STRONG",{});var UQr=s(_ae);t6o=r(UQr,"not"),UQr.forEach(t),a6o=r(ez,` load the model weights. It only affects the
model\u2019s configuration. Use `),uae=n(ez,"CODE",{});var JQr=s(uae);n6o=r(JQr,"from_pretrained()"),JQr.forEach(t),s6o=r(ez,"to load the model weights."),ez.forEach(t),l6o=i(rl),bae=n(rl,"P",{});var YQr=s(bae);i6o=r(YQr,"Examples:"),YQr.forEach(t),d6o=i(rl),m(ty.$$.fragment,rl),rl.forEach(t),c6o=i(ol),Ne=n(ol,"DIV",{class:!0});var Ot=s(Ne);m(ay.$$.fragment,Ot),f6o=i(Ot),vae=n(Ot,"P",{});var KQr=s(vae);m6o=r(KQr,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),KQr.forEach(t),g6o=i(Ot),Wa=n(Ot,"P",{});var $4=s(Wa);h6o=r($4,"The model class to instantiate is selected based on the "),Tae=n($4,"CODE",{});var ZQr=s(Tae);p6o=r(ZQr,"model_type"),ZQr.forEach(t),_6o=r($4,` property of the config object (either
passed as an argument or loaded from `),Fae=n($4,"CODE",{});var eHr=s(Fae);u6o=r(eHr,"pretrained_model_name_or_path"),eHr.forEach(t),b6o=r($4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cae=n($4,"CODE",{});var oHr=s(Cae);v6o=r(oHr,"pretrained_model_name_or_path"),oHr.forEach(t),T6o=r($4,":"),$4.forEach(t),F6o=i(Ot),na=n(Ot,"UL",{});var tl=s(na);rb=n(tl,"LI",{});var JEe=s(rb);Mae=n(JEe,"STRONG",{});var rHr=s(Mae);C6o=r(rHr,"bert"),rHr.forEach(t),M6o=r(JEe," \u2014 "),sD=n(JEe,"A",{href:!0});var tHr=s(sD);E6o=r(tHr,"BertForNextSentencePrediction"),tHr.forEach(t),y6o=r(JEe," (BERT model)"),JEe.forEach(t),w6o=i(tl),tb=n(tl,"LI",{});var YEe=s(tb);Eae=n(YEe,"STRONG",{});var aHr=s(Eae);A6o=r(aHr,"fnet"),aHr.forEach(t),L6o=r(YEe," \u2014 "),lD=n(YEe,"A",{href:!0});var nHr=s(lD);B6o=r(nHr,"FNetForNextSentencePrediction"),nHr.forEach(t),x6o=r(YEe," (FNet model)"),YEe.forEach(t),k6o=i(tl),ab=n(tl,"LI",{});var KEe=s(ab);yae=n(KEe,"STRONG",{});var sHr=s(yae);R6o=r(sHr,"megatron-bert"),sHr.forEach(t),S6o=r(KEe," \u2014 "),iD=n(KEe,"A",{href:!0});var lHr=s(iD);P6o=r(lHr,"MegatronBertForNextSentencePrediction"),lHr.forEach(t),$6o=r(KEe," (MegatronBert model)"),KEe.forEach(t),I6o=i(tl),nb=n(tl,"LI",{});var ZEe=s(nb);wae=n(ZEe,"STRONG",{});var iHr=s(wae);D6o=r(iHr,"mobilebert"),iHr.forEach(t),j6o=r(ZEe," \u2014 "),dD=n(ZEe,"A",{href:!0});var dHr=s(dD);N6o=r(dHr,"MobileBertForNextSentencePrediction"),dHr.forEach(t),q6o=r(ZEe," (MobileBERT model)"),ZEe.forEach(t),G6o=i(tl),sb=n(tl,"LI",{});var eye=s(sb);Aae=n(eye,"STRONG",{});var cHr=s(Aae);O6o=r(cHr,"qdqbert"),cHr.forEach(t),X6o=r(eye," \u2014 "),cD=n(eye,"A",{href:!0});var fHr=s(cD);V6o=r(fHr,"QDQBertForNextSentencePrediction"),fHr.forEach(t),z6o=r(eye," (QDQBert model)"),eye.forEach(t),tl.forEach(t),W6o=i(Ot),lb=n(Ot,"P",{});var oye=s(lb);Q6o=r(oye,"The model is set in evaluation mode by default using "),Lae=n(oye,"CODE",{});var mHr=s(Lae);H6o=r(mHr,"model.eval()"),mHr.forEach(t),U6o=r(oye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bae=n(oye,"CODE",{});var gHr=s(Bae);J6o=r(gHr,"model.train()"),gHr.forEach(t),oye.forEach(t),Y6o=i(Ot),xae=n(Ot,"P",{});var hHr=s(xae);K6o=r(hHr,"Examples:"),hHr.forEach(t),Z6o=i(Ot),m(ny.$$.fragment,Ot),Ot.forEach(t),ol.forEach(t),dBe=i(c),gd=n(c,"H2",{class:!0});var _ke=s(gd);ib=n(_ke,"A",{id:!0,class:!0,href:!0});var pHr=s(ib);kae=n(pHr,"SPAN",{});var _Hr=s(kae);m(sy.$$.fragment,_Hr),_Hr.forEach(t),pHr.forEach(t),eAo=i(_ke),Rae=n(_ke,"SPAN",{});var uHr=s(Rae);oAo=r(uHr,"AutoModelForTokenClassification"),uHr.forEach(t),_ke.forEach(t),cBe=i(c),or=n(c,"DIV",{class:!0});var al=s(or);m(ly.$$.fragment,al),rAo=i(al),hd=n(al,"P",{});var oz=s(hd);tAo=r(oz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Sae=n(oz,"CODE",{});var bHr=s(Sae);aAo=r(bHr,"from_pretrained()"),bHr.forEach(t),nAo=r(oz,"class method or the "),Pae=n(oz,"CODE",{});var vHr=s(Pae);sAo=r(vHr,"from_config()"),vHr.forEach(t),lAo=r(oz,`class
method.`),oz.forEach(t),iAo=i(al),iy=n(al,"P",{});var uke=s(iy);dAo=r(uke,"This class cannot be instantiated directly using "),$ae=n(uke,"CODE",{});var THr=s($ae);cAo=r(THr,"__init__()"),THr.forEach(t),fAo=r(uke," (throws an error)."),uke.forEach(t),mAo=i(al),Hr=n(al,"DIV",{class:!0});var nl=s(Hr);m(dy.$$.fragment,nl),gAo=i(nl),Iae=n(nl,"P",{});var FHr=s(Iae);hAo=r(FHr,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),FHr.forEach(t),pAo=i(nl),pd=n(nl,"P",{});var rz=s(pd);_Ao=r(rz,`Note:
Loading a model from its configuration file does `),Dae=n(rz,"STRONG",{});var CHr=s(Dae);uAo=r(CHr,"not"),CHr.forEach(t),bAo=r(rz,` load the model weights. It only affects the
model\u2019s configuration. Use `),jae=n(rz,"CODE",{});var MHr=s(jae);vAo=r(MHr,"from_pretrained()"),MHr.forEach(t),TAo=r(rz,"to load the model weights."),rz.forEach(t),FAo=i(nl),Nae=n(nl,"P",{});var EHr=s(Nae);CAo=r(EHr,"Examples:"),EHr.forEach(t),MAo=i(nl),m(cy.$$.fragment,nl),nl.forEach(t),EAo=i(al),qe=n(al,"DIV",{class:!0});var Xt=s(qe);m(fy.$$.fragment,Xt),yAo=i(Xt),qae=n(Xt,"P",{});var yHr=s(qae);wAo=r(yHr,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),yHr.forEach(t),AAo=i(Xt),Qa=n(Xt,"P",{});var I4=s(Qa);LAo=r(I4,"The model class to instantiate is selected based on the "),Gae=n(I4,"CODE",{});var wHr=s(Gae);BAo=r(wHr,"model_type"),wHr.forEach(t),xAo=r(I4,` property of the config object (either
passed as an argument or loaded from `),Oae=n(I4,"CODE",{});var AHr=s(Oae);kAo=r(AHr,"pretrained_model_name_or_path"),AHr.forEach(t),RAo=r(I4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xae=n(I4,"CODE",{});var LHr=s(Xae);SAo=r(LHr,"pretrained_model_name_or_path"),LHr.forEach(t),PAo=r(I4,":"),I4.forEach(t),$Ao=i(Xt),N=n(Xt,"UL",{});var q=s(N);db=n(q,"LI",{});var rye=s(db);Vae=n(rye,"STRONG",{});var BHr=s(Vae);IAo=r(BHr,"albert"),BHr.forEach(t),DAo=r(rye," \u2014 "),fD=n(rye,"A",{href:!0});var xHr=s(fD);jAo=r(xHr,"AlbertForTokenClassification"),xHr.forEach(t),NAo=r(rye," (ALBERT model)"),rye.forEach(t),qAo=i(q),cb=n(q,"LI",{});var tye=s(cb);zae=n(tye,"STRONG",{});var kHr=s(zae);GAo=r(kHr,"bert"),kHr.forEach(t),OAo=r(tye," \u2014 "),mD=n(tye,"A",{href:!0});var RHr=s(mD);XAo=r(RHr,"BertForTokenClassification"),RHr.forEach(t),VAo=r(tye," (BERT model)"),tye.forEach(t),zAo=i(q),fb=n(q,"LI",{});var aye=s(fb);Wae=n(aye,"STRONG",{});var SHr=s(Wae);WAo=r(SHr,"big_bird"),SHr.forEach(t),QAo=r(aye," \u2014 "),gD=n(aye,"A",{href:!0});var PHr=s(gD);HAo=r(PHr,"BigBirdForTokenClassification"),PHr.forEach(t),UAo=r(aye," (BigBird model)"),aye.forEach(t),JAo=i(q),mb=n(q,"LI",{});var nye=s(mb);Qae=n(nye,"STRONG",{});var $Hr=s(Qae);YAo=r($Hr,"camembert"),$Hr.forEach(t),KAo=r(nye," \u2014 "),hD=n(nye,"A",{href:!0});var IHr=s(hD);ZAo=r(IHr,"CamembertForTokenClassification"),IHr.forEach(t),e0o=r(nye," (CamemBERT model)"),nye.forEach(t),o0o=i(q),gb=n(q,"LI",{});var sye=s(gb);Hae=n(sye,"STRONG",{});var DHr=s(Hae);r0o=r(DHr,"canine"),DHr.forEach(t),t0o=r(sye," \u2014 "),pD=n(sye,"A",{href:!0});var jHr=s(pD);a0o=r(jHr,"CanineForTokenClassification"),jHr.forEach(t),n0o=r(sye," (Canine model)"),sye.forEach(t),s0o=i(q),hb=n(q,"LI",{});var lye=s(hb);Uae=n(lye,"STRONG",{});var NHr=s(Uae);l0o=r(NHr,"convbert"),NHr.forEach(t),i0o=r(lye," \u2014 "),_D=n(lye,"A",{href:!0});var qHr=s(_D);d0o=r(qHr,"ConvBertForTokenClassification"),qHr.forEach(t),c0o=r(lye," (ConvBERT model)"),lye.forEach(t),f0o=i(q),pb=n(q,"LI",{});var iye=s(pb);Jae=n(iye,"STRONG",{});var GHr=s(Jae);m0o=r(GHr,"data2vec-text"),GHr.forEach(t),g0o=r(iye," \u2014 "),uD=n(iye,"A",{href:!0});var OHr=s(uD);h0o=r(OHr,"Data2VecTextForTokenClassification"),OHr.forEach(t),p0o=r(iye," (Data2VecText model)"),iye.forEach(t),_0o=i(q),_b=n(q,"LI",{});var dye=s(_b);Yae=n(dye,"STRONG",{});var XHr=s(Yae);u0o=r(XHr,"deberta"),XHr.forEach(t),b0o=r(dye," \u2014 "),bD=n(dye,"A",{href:!0});var VHr=s(bD);v0o=r(VHr,"DebertaForTokenClassification"),VHr.forEach(t),T0o=r(dye," (DeBERTa model)"),dye.forEach(t),F0o=i(q),ub=n(q,"LI",{});var cye=s(ub);Kae=n(cye,"STRONG",{});var zHr=s(Kae);C0o=r(zHr,"deberta-v2"),zHr.forEach(t),M0o=r(cye," \u2014 "),vD=n(cye,"A",{href:!0});var WHr=s(vD);E0o=r(WHr,"DebertaV2ForTokenClassification"),WHr.forEach(t),y0o=r(cye," (DeBERTa-v2 model)"),cye.forEach(t),w0o=i(q),bb=n(q,"LI",{});var fye=s(bb);Zae=n(fye,"STRONG",{});var QHr=s(Zae);A0o=r(QHr,"distilbert"),QHr.forEach(t),L0o=r(fye," \u2014 "),TD=n(fye,"A",{href:!0});var HHr=s(TD);B0o=r(HHr,"DistilBertForTokenClassification"),HHr.forEach(t),x0o=r(fye," (DistilBERT model)"),fye.forEach(t),k0o=i(q),vb=n(q,"LI",{});var mye=s(vb);ene=n(mye,"STRONG",{});var UHr=s(ene);R0o=r(UHr,"electra"),UHr.forEach(t),S0o=r(mye," \u2014 "),FD=n(mye,"A",{href:!0});var JHr=s(FD);P0o=r(JHr,"ElectraForTokenClassification"),JHr.forEach(t),$0o=r(mye," (ELECTRA model)"),mye.forEach(t),I0o=i(q),Tb=n(q,"LI",{});var gye=s(Tb);one=n(gye,"STRONG",{});var YHr=s(one);D0o=r(YHr,"flaubert"),YHr.forEach(t),j0o=r(gye," \u2014 "),CD=n(gye,"A",{href:!0});var KHr=s(CD);N0o=r(KHr,"FlaubertForTokenClassification"),KHr.forEach(t),q0o=r(gye," (FlauBERT model)"),gye.forEach(t),G0o=i(q),Fb=n(q,"LI",{});var hye=s(Fb);rne=n(hye,"STRONG",{});var ZHr=s(rne);O0o=r(ZHr,"fnet"),ZHr.forEach(t),X0o=r(hye," \u2014 "),MD=n(hye,"A",{href:!0});var eUr=s(MD);V0o=r(eUr,"FNetForTokenClassification"),eUr.forEach(t),z0o=r(hye," (FNet model)"),hye.forEach(t),W0o=i(q),Cb=n(q,"LI",{});var pye=s(Cb);tne=n(pye,"STRONG",{});var oUr=s(tne);Q0o=r(oUr,"funnel"),oUr.forEach(t),H0o=r(pye," \u2014 "),ED=n(pye,"A",{href:!0});var rUr=s(ED);U0o=r(rUr,"FunnelForTokenClassification"),rUr.forEach(t),J0o=r(pye," (Funnel Transformer model)"),pye.forEach(t),Y0o=i(q),Mb=n(q,"LI",{});var _ye=s(Mb);ane=n(_ye,"STRONG",{});var tUr=s(ane);K0o=r(tUr,"gpt2"),tUr.forEach(t),Z0o=r(_ye," \u2014 "),yD=n(_ye,"A",{href:!0});var aUr=s(yD);eLo=r(aUr,"GPT2ForTokenClassification"),aUr.forEach(t),oLo=r(_ye," (OpenAI GPT-2 model)"),_ye.forEach(t),rLo=i(q),Eb=n(q,"LI",{});var uye=s(Eb);nne=n(uye,"STRONG",{});var nUr=s(nne);tLo=r(nUr,"ibert"),nUr.forEach(t),aLo=r(uye," \u2014 "),wD=n(uye,"A",{href:!0});var sUr=s(wD);nLo=r(sUr,"IBertForTokenClassification"),sUr.forEach(t),sLo=r(uye," (I-BERT model)"),uye.forEach(t),lLo=i(q),yb=n(q,"LI",{});var bye=s(yb);sne=n(bye,"STRONG",{});var lUr=s(sne);iLo=r(lUr,"layoutlm"),lUr.forEach(t),dLo=r(bye," \u2014 "),AD=n(bye,"A",{href:!0});var iUr=s(AD);cLo=r(iUr,"LayoutLMForTokenClassification"),iUr.forEach(t),fLo=r(bye," (LayoutLM model)"),bye.forEach(t),mLo=i(q),wb=n(q,"LI",{});var vye=s(wb);lne=n(vye,"STRONG",{});var dUr=s(lne);gLo=r(dUr,"layoutlmv2"),dUr.forEach(t),hLo=r(vye," \u2014 "),LD=n(vye,"A",{href:!0});var cUr=s(LD);pLo=r(cUr,"LayoutLMv2ForTokenClassification"),cUr.forEach(t),_Lo=r(vye," (LayoutLMv2 model)"),vye.forEach(t),uLo=i(q),Ab=n(q,"LI",{});var Tye=s(Ab);ine=n(Tye,"STRONG",{});var fUr=s(ine);bLo=r(fUr,"longformer"),fUr.forEach(t),vLo=r(Tye," \u2014 "),BD=n(Tye,"A",{href:!0});var mUr=s(BD);TLo=r(mUr,"LongformerForTokenClassification"),mUr.forEach(t),FLo=r(Tye," (Longformer model)"),Tye.forEach(t),CLo=i(q),Lb=n(q,"LI",{});var Fye=s(Lb);dne=n(Fye,"STRONG",{});var gUr=s(dne);MLo=r(gUr,"megatron-bert"),gUr.forEach(t),ELo=r(Fye," \u2014 "),xD=n(Fye,"A",{href:!0});var hUr=s(xD);yLo=r(hUr,"MegatronBertForTokenClassification"),hUr.forEach(t),wLo=r(Fye," (MegatronBert model)"),Fye.forEach(t),ALo=i(q),Bb=n(q,"LI",{});var Cye=s(Bb);cne=n(Cye,"STRONG",{});var pUr=s(cne);LLo=r(pUr,"mobilebert"),pUr.forEach(t),BLo=r(Cye," \u2014 "),kD=n(Cye,"A",{href:!0});var _Ur=s(kD);xLo=r(_Ur,"MobileBertForTokenClassification"),_Ur.forEach(t),kLo=r(Cye," (MobileBERT model)"),Cye.forEach(t),RLo=i(q),xb=n(q,"LI",{});var Mye=s(xb);fne=n(Mye,"STRONG",{});var uUr=s(fne);SLo=r(uUr,"mpnet"),uUr.forEach(t),PLo=r(Mye," \u2014 "),RD=n(Mye,"A",{href:!0});var bUr=s(RD);$Lo=r(bUr,"MPNetForTokenClassification"),bUr.forEach(t),ILo=r(Mye," (MPNet model)"),Mye.forEach(t),DLo=i(q),kb=n(q,"LI",{});var Eye=s(kb);mne=n(Eye,"STRONG",{});var vUr=s(mne);jLo=r(vUr,"nystromformer"),vUr.forEach(t),NLo=r(Eye," \u2014 "),SD=n(Eye,"A",{href:!0});var TUr=s(SD);qLo=r(TUr,"NystromformerForTokenClassification"),TUr.forEach(t),GLo=r(Eye," (Nystromformer model)"),Eye.forEach(t),OLo=i(q),Rb=n(q,"LI",{});var yye=s(Rb);gne=n(yye,"STRONG",{});var FUr=s(gne);XLo=r(FUr,"qdqbert"),FUr.forEach(t),VLo=r(yye," \u2014 "),PD=n(yye,"A",{href:!0});var CUr=s(PD);zLo=r(CUr,"QDQBertForTokenClassification"),CUr.forEach(t),WLo=r(yye," (QDQBert model)"),yye.forEach(t),QLo=i(q),Sb=n(q,"LI",{});var wye=s(Sb);hne=n(wye,"STRONG",{});var MUr=s(hne);HLo=r(MUr,"rembert"),MUr.forEach(t),ULo=r(wye," \u2014 "),$D=n(wye,"A",{href:!0});var EUr=s($D);JLo=r(EUr,"RemBertForTokenClassification"),EUr.forEach(t),YLo=r(wye," (RemBERT model)"),wye.forEach(t),KLo=i(q),Pb=n(q,"LI",{});var Aye=s(Pb);pne=n(Aye,"STRONG",{});var yUr=s(pne);ZLo=r(yUr,"roberta"),yUr.forEach(t),e8o=r(Aye," \u2014 "),ID=n(Aye,"A",{href:!0});var wUr=s(ID);o8o=r(wUr,"RobertaForTokenClassification"),wUr.forEach(t),r8o=r(Aye," (RoBERTa model)"),Aye.forEach(t),t8o=i(q),$b=n(q,"LI",{});var Lye=s($b);_ne=n(Lye,"STRONG",{});var AUr=s(_ne);a8o=r(AUr,"roformer"),AUr.forEach(t),n8o=r(Lye," \u2014 "),DD=n(Lye,"A",{href:!0});var LUr=s(DD);s8o=r(LUr,"RoFormerForTokenClassification"),LUr.forEach(t),l8o=r(Lye," (RoFormer model)"),Lye.forEach(t),i8o=i(q),Ib=n(q,"LI",{});var Bye=s(Ib);une=n(Bye,"STRONG",{});var BUr=s(une);d8o=r(BUr,"squeezebert"),BUr.forEach(t),c8o=r(Bye," \u2014 "),jD=n(Bye,"A",{href:!0});var xUr=s(jD);f8o=r(xUr,"SqueezeBertForTokenClassification"),xUr.forEach(t),m8o=r(Bye," (SqueezeBERT model)"),Bye.forEach(t),g8o=i(q),Db=n(q,"LI",{});var xye=s(Db);bne=n(xye,"STRONG",{});var kUr=s(bne);h8o=r(kUr,"xlm"),kUr.forEach(t),p8o=r(xye," \u2014 "),ND=n(xye,"A",{href:!0});var RUr=s(ND);_8o=r(RUr,"XLMForTokenClassification"),RUr.forEach(t),u8o=r(xye," (XLM model)"),xye.forEach(t),b8o=i(q),jb=n(q,"LI",{});var kye=s(jb);vne=n(kye,"STRONG",{});var SUr=s(vne);v8o=r(SUr,"xlm-roberta"),SUr.forEach(t),T8o=r(kye," \u2014 "),qD=n(kye,"A",{href:!0});var PUr=s(qD);F8o=r(PUr,"XLMRobertaForTokenClassification"),PUr.forEach(t),C8o=r(kye," (XLM-RoBERTa model)"),kye.forEach(t),M8o=i(q),Nb=n(q,"LI",{});var Rye=s(Nb);Tne=n(Rye,"STRONG",{});var $Ur=s(Tne);E8o=r($Ur,"xlm-roberta-xl"),$Ur.forEach(t),y8o=r(Rye," \u2014 "),GD=n(Rye,"A",{href:!0});var IUr=s(GD);w8o=r(IUr,"XLMRobertaXLForTokenClassification"),IUr.forEach(t),A8o=r(Rye," (XLM-RoBERTa-XL model)"),Rye.forEach(t),L8o=i(q),qb=n(q,"LI",{});var Sye=s(qb);Fne=n(Sye,"STRONG",{});var DUr=s(Fne);B8o=r(DUr,"xlnet"),DUr.forEach(t),x8o=r(Sye," \u2014 "),OD=n(Sye,"A",{href:!0});var jUr=s(OD);k8o=r(jUr,"XLNetForTokenClassification"),jUr.forEach(t),R8o=r(Sye," (XLNet model)"),Sye.forEach(t),S8o=i(q),Gb=n(q,"LI",{});var Pye=s(Gb);Cne=n(Pye,"STRONG",{});var NUr=s(Cne);P8o=r(NUr,"yoso"),NUr.forEach(t),$8o=r(Pye," \u2014 "),XD=n(Pye,"A",{href:!0});var qUr=s(XD);I8o=r(qUr,"YosoForTokenClassification"),qUr.forEach(t),D8o=r(Pye," (YOSO model)"),Pye.forEach(t),q.forEach(t),j8o=i(Xt),Ob=n(Xt,"P",{});var $ye=s(Ob);N8o=r($ye,"The model is set in evaluation mode by default using "),Mne=n($ye,"CODE",{});var GUr=s(Mne);q8o=r(GUr,"model.eval()"),GUr.forEach(t),G8o=r($ye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ene=n($ye,"CODE",{});var OUr=s(Ene);O8o=r(OUr,"model.train()"),OUr.forEach(t),$ye.forEach(t),X8o=i(Xt),yne=n(Xt,"P",{});var XUr=s(yne);V8o=r(XUr,"Examples:"),XUr.forEach(t),z8o=i(Xt),m(my.$$.fragment,Xt),Xt.forEach(t),al.forEach(t),fBe=i(c),_d=n(c,"H2",{class:!0});var bke=s(_d);Xb=n(bke,"A",{id:!0,class:!0,href:!0});var VUr=s(Xb);wne=n(VUr,"SPAN",{});var zUr=s(wne);m(gy.$$.fragment,zUr),zUr.forEach(t),VUr.forEach(t),W8o=i(bke),Ane=n(bke,"SPAN",{});var WUr=s(Ane);Q8o=r(WUr,"AutoModelForQuestionAnswering"),WUr.forEach(t),bke.forEach(t),mBe=i(c),rr=n(c,"DIV",{class:!0});var sl=s(rr);m(hy.$$.fragment,sl),H8o=i(sl),ud=n(sl,"P",{});var tz=s(ud);U8o=r(tz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Lne=n(tz,"CODE",{});var QUr=s(Lne);J8o=r(QUr,"from_pretrained()"),QUr.forEach(t),Y8o=r(tz,"class method or the "),Bne=n(tz,"CODE",{});var HUr=s(Bne);K8o=r(HUr,"from_config()"),HUr.forEach(t),Z8o=r(tz,`class
method.`),tz.forEach(t),e7o=i(sl),py=n(sl,"P",{});var vke=s(py);o7o=r(vke,"This class cannot be instantiated directly using "),xne=n(vke,"CODE",{});var UUr=s(xne);r7o=r(UUr,"__init__()"),UUr.forEach(t),t7o=r(vke," (throws an error)."),vke.forEach(t),a7o=i(sl),Ur=n(sl,"DIV",{class:!0});var ll=s(Ur);m(_y.$$.fragment,ll),n7o=i(ll),kne=n(ll,"P",{});var JUr=s(kne);s7o=r(JUr,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),JUr.forEach(t),l7o=i(ll),bd=n(ll,"P",{});var az=s(bd);i7o=r(az,`Note:
Loading a model from its configuration file does `),Rne=n(az,"STRONG",{});var YUr=s(Rne);d7o=r(YUr,"not"),YUr.forEach(t),c7o=r(az,` load the model weights. It only affects the
model\u2019s configuration. Use `),Sne=n(az,"CODE",{});var KUr=s(Sne);f7o=r(KUr,"from_pretrained()"),KUr.forEach(t),m7o=r(az,"to load the model weights."),az.forEach(t),g7o=i(ll),Pne=n(ll,"P",{});var ZUr=s(Pne);h7o=r(ZUr,"Examples:"),ZUr.forEach(t),p7o=i(ll),m(uy.$$.fragment,ll),ll.forEach(t),_7o=i(sl),Ge=n(sl,"DIV",{class:!0});var Vt=s(Ge);m(by.$$.fragment,Vt),u7o=i(Vt),$ne=n(Vt,"P",{});var eJr=s($ne);b7o=r(eJr,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),eJr.forEach(t),v7o=i(Vt),Ha=n(Vt,"P",{});var D4=s(Ha);T7o=r(D4,"The model class to instantiate is selected based on the "),Ine=n(D4,"CODE",{});var oJr=s(Ine);F7o=r(oJr,"model_type"),oJr.forEach(t),C7o=r(D4,` property of the config object (either
passed as an argument or loaded from `),Dne=n(D4,"CODE",{});var rJr=s(Dne);M7o=r(rJr,"pretrained_model_name_or_path"),rJr.forEach(t),E7o=r(D4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jne=n(D4,"CODE",{});var tJr=s(jne);y7o=r(tJr,"pretrained_model_name_or_path"),tJr.forEach(t),w7o=r(D4,":"),D4.forEach(t),A7o=i(Vt),R=n(Vt,"UL",{});var P=s(R);Vb=n(P,"LI",{});var Iye=s(Vb);Nne=n(Iye,"STRONG",{});var aJr=s(Nne);L7o=r(aJr,"albert"),aJr.forEach(t),B7o=r(Iye," \u2014 "),VD=n(Iye,"A",{href:!0});var nJr=s(VD);x7o=r(nJr,"AlbertForQuestionAnswering"),nJr.forEach(t),k7o=r(Iye," (ALBERT model)"),Iye.forEach(t),R7o=i(P),zb=n(P,"LI",{});var Dye=s(zb);qne=n(Dye,"STRONG",{});var sJr=s(qne);S7o=r(sJr,"bart"),sJr.forEach(t),P7o=r(Dye," \u2014 "),zD=n(Dye,"A",{href:!0});var lJr=s(zD);$7o=r(lJr,"BartForQuestionAnswering"),lJr.forEach(t),I7o=r(Dye," (BART model)"),Dye.forEach(t),D7o=i(P),Wb=n(P,"LI",{});var jye=s(Wb);Gne=n(jye,"STRONG",{});var iJr=s(Gne);j7o=r(iJr,"bert"),iJr.forEach(t),N7o=r(jye," \u2014 "),WD=n(jye,"A",{href:!0});var dJr=s(WD);q7o=r(dJr,"BertForQuestionAnswering"),dJr.forEach(t),G7o=r(jye," (BERT model)"),jye.forEach(t),O7o=i(P),Qb=n(P,"LI",{});var Nye=s(Qb);One=n(Nye,"STRONG",{});var cJr=s(One);X7o=r(cJr,"big_bird"),cJr.forEach(t),V7o=r(Nye," \u2014 "),QD=n(Nye,"A",{href:!0});var fJr=s(QD);z7o=r(fJr,"BigBirdForQuestionAnswering"),fJr.forEach(t),W7o=r(Nye," (BigBird model)"),Nye.forEach(t),Q7o=i(P),Hb=n(P,"LI",{});var qye=s(Hb);Xne=n(qye,"STRONG",{});var mJr=s(Xne);H7o=r(mJr,"bigbird_pegasus"),mJr.forEach(t),U7o=r(qye," \u2014 "),HD=n(qye,"A",{href:!0});var gJr=s(HD);J7o=r(gJr,"BigBirdPegasusForQuestionAnswering"),gJr.forEach(t),Y7o=r(qye," (BigBirdPegasus model)"),qye.forEach(t),K7o=i(P),Ub=n(P,"LI",{});var Gye=s(Ub);Vne=n(Gye,"STRONG",{});var hJr=s(Vne);Z7o=r(hJr,"camembert"),hJr.forEach(t),eBo=r(Gye," \u2014 "),UD=n(Gye,"A",{href:!0});var pJr=s(UD);oBo=r(pJr,"CamembertForQuestionAnswering"),pJr.forEach(t),rBo=r(Gye," (CamemBERT model)"),Gye.forEach(t),tBo=i(P),Jb=n(P,"LI",{});var Oye=s(Jb);zne=n(Oye,"STRONG",{});var _Jr=s(zne);aBo=r(_Jr,"canine"),_Jr.forEach(t),nBo=r(Oye," \u2014 "),JD=n(Oye,"A",{href:!0});var uJr=s(JD);sBo=r(uJr,"CanineForQuestionAnswering"),uJr.forEach(t),lBo=r(Oye," (Canine model)"),Oye.forEach(t),iBo=i(P),Yb=n(P,"LI",{});var Xye=s(Yb);Wne=n(Xye,"STRONG",{});var bJr=s(Wne);dBo=r(bJr,"convbert"),bJr.forEach(t),cBo=r(Xye," \u2014 "),YD=n(Xye,"A",{href:!0});var vJr=s(YD);fBo=r(vJr,"ConvBertForQuestionAnswering"),vJr.forEach(t),mBo=r(Xye," (ConvBERT model)"),Xye.forEach(t),gBo=i(P),Kb=n(P,"LI",{});var Vye=s(Kb);Qne=n(Vye,"STRONG",{});var TJr=s(Qne);hBo=r(TJr,"data2vec-text"),TJr.forEach(t),pBo=r(Vye," \u2014 "),KD=n(Vye,"A",{href:!0});var FJr=s(KD);_Bo=r(FJr,"Data2VecTextForQuestionAnswering"),FJr.forEach(t),uBo=r(Vye," (Data2VecText model)"),Vye.forEach(t),bBo=i(P),Zb=n(P,"LI",{});var zye=s(Zb);Hne=n(zye,"STRONG",{});var CJr=s(Hne);vBo=r(CJr,"deberta"),CJr.forEach(t),TBo=r(zye," \u2014 "),ZD=n(zye,"A",{href:!0});var MJr=s(ZD);FBo=r(MJr,"DebertaForQuestionAnswering"),MJr.forEach(t),CBo=r(zye," (DeBERTa model)"),zye.forEach(t),MBo=i(P),e3=n(P,"LI",{});var Wye=s(e3);Une=n(Wye,"STRONG",{});var EJr=s(Une);EBo=r(EJr,"deberta-v2"),EJr.forEach(t),yBo=r(Wye," \u2014 "),ej=n(Wye,"A",{href:!0});var yJr=s(ej);wBo=r(yJr,"DebertaV2ForQuestionAnswering"),yJr.forEach(t),ABo=r(Wye," (DeBERTa-v2 model)"),Wye.forEach(t),LBo=i(P),o3=n(P,"LI",{});var Qye=s(o3);Jne=n(Qye,"STRONG",{});var wJr=s(Jne);BBo=r(wJr,"distilbert"),wJr.forEach(t),xBo=r(Qye," \u2014 "),oj=n(Qye,"A",{href:!0});var AJr=s(oj);kBo=r(AJr,"DistilBertForQuestionAnswering"),AJr.forEach(t),RBo=r(Qye," (DistilBERT model)"),Qye.forEach(t),SBo=i(P),r3=n(P,"LI",{});var Hye=s(r3);Yne=n(Hye,"STRONG",{});var LJr=s(Yne);PBo=r(LJr,"electra"),LJr.forEach(t),$Bo=r(Hye," \u2014 "),rj=n(Hye,"A",{href:!0});var BJr=s(rj);IBo=r(BJr,"ElectraForQuestionAnswering"),BJr.forEach(t),DBo=r(Hye," (ELECTRA model)"),Hye.forEach(t),jBo=i(P),t3=n(P,"LI",{});var Uye=s(t3);Kne=n(Uye,"STRONG",{});var xJr=s(Kne);NBo=r(xJr,"flaubert"),xJr.forEach(t),qBo=r(Uye," \u2014 "),tj=n(Uye,"A",{href:!0});var kJr=s(tj);GBo=r(kJr,"FlaubertForQuestionAnsweringSimple"),kJr.forEach(t),OBo=r(Uye," (FlauBERT model)"),Uye.forEach(t),XBo=i(P),a3=n(P,"LI",{});var Jye=s(a3);Zne=n(Jye,"STRONG",{});var RJr=s(Zne);VBo=r(RJr,"fnet"),RJr.forEach(t),zBo=r(Jye," \u2014 "),aj=n(Jye,"A",{href:!0});var SJr=s(aj);WBo=r(SJr,"FNetForQuestionAnswering"),SJr.forEach(t),QBo=r(Jye," (FNet model)"),Jye.forEach(t),HBo=i(P),n3=n(P,"LI",{});var Yye=s(n3);ese=n(Yye,"STRONG",{});var PJr=s(ese);UBo=r(PJr,"funnel"),PJr.forEach(t),JBo=r(Yye," \u2014 "),nj=n(Yye,"A",{href:!0});var $Jr=s(nj);YBo=r($Jr,"FunnelForQuestionAnswering"),$Jr.forEach(t),KBo=r(Yye," (Funnel Transformer model)"),Yye.forEach(t),ZBo=i(P),s3=n(P,"LI",{});var Kye=s(s3);ose=n(Kye,"STRONG",{});var IJr=s(ose);exo=r(IJr,"gptj"),IJr.forEach(t),oxo=r(Kye," \u2014 "),sj=n(Kye,"A",{href:!0});var DJr=s(sj);rxo=r(DJr,"GPTJForQuestionAnswering"),DJr.forEach(t),txo=r(Kye," (GPT-J model)"),Kye.forEach(t),axo=i(P),l3=n(P,"LI",{});var Zye=s(l3);rse=n(Zye,"STRONG",{});var jJr=s(rse);nxo=r(jJr,"ibert"),jJr.forEach(t),sxo=r(Zye," \u2014 "),lj=n(Zye,"A",{href:!0});var NJr=s(lj);lxo=r(NJr,"IBertForQuestionAnswering"),NJr.forEach(t),ixo=r(Zye," (I-BERT model)"),Zye.forEach(t),dxo=i(P),i3=n(P,"LI",{});var ewe=s(i3);tse=n(ewe,"STRONG",{});var qJr=s(tse);cxo=r(qJr,"layoutlmv2"),qJr.forEach(t),fxo=r(ewe," \u2014 "),ij=n(ewe,"A",{href:!0});var GJr=s(ij);mxo=r(GJr,"LayoutLMv2ForQuestionAnswering"),GJr.forEach(t),gxo=r(ewe," (LayoutLMv2 model)"),ewe.forEach(t),hxo=i(P),d3=n(P,"LI",{});var owe=s(d3);ase=n(owe,"STRONG",{});var OJr=s(ase);pxo=r(OJr,"led"),OJr.forEach(t),_xo=r(owe," \u2014 "),dj=n(owe,"A",{href:!0});var XJr=s(dj);uxo=r(XJr,"LEDForQuestionAnswering"),XJr.forEach(t),bxo=r(owe," (LED model)"),owe.forEach(t),vxo=i(P),c3=n(P,"LI",{});var rwe=s(c3);nse=n(rwe,"STRONG",{});var VJr=s(nse);Txo=r(VJr,"longformer"),VJr.forEach(t),Fxo=r(rwe," \u2014 "),cj=n(rwe,"A",{href:!0});var zJr=s(cj);Cxo=r(zJr,"LongformerForQuestionAnswering"),zJr.forEach(t),Mxo=r(rwe," (Longformer model)"),rwe.forEach(t),Exo=i(P),f3=n(P,"LI",{});var twe=s(f3);sse=n(twe,"STRONG",{});var WJr=s(sse);yxo=r(WJr,"lxmert"),WJr.forEach(t),wxo=r(twe," \u2014 "),fj=n(twe,"A",{href:!0});var QJr=s(fj);Axo=r(QJr,"LxmertForQuestionAnswering"),QJr.forEach(t),Lxo=r(twe," (LXMERT model)"),twe.forEach(t),Bxo=i(P),m3=n(P,"LI",{});var awe=s(m3);lse=n(awe,"STRONG",{});var HJr=s(lse);xxo=r(HJr,"mbart"),HJr.forEach(t),kxo=r(awe," \u2014 "),mj=n(awe,"A",{href:!0});var UJr=s(mj);Rxo=r(UJr,"MBartForQuestionAnswering"),UJr.forEach(t),Sxo=r(awe," (mBART model)"),awe.forEach(t),Pxo=i(P),g3=n(P,"LI",{});var nwe=s(g3);ise=n(nwe,"STRONG",{});var JJr=s(ise);$xo=r(JJr,"megatron-bert"),JJr.forEach(t),Ixo=r(nwe," \u2014 "),gj=n(nwe,"A",{href:!0});var YJr=s(gj);Dxo=r(YJr,"MegatronBertForQuestionAnswering"),YJr.forEach(t),jxo=r(nwe," (MegatronBert model)"),nwe.forEach(t),Nxo=i(P),h3=n(P,"LI",{});var swe=s(h3);dse=n(swe,"STRONG",{});var KJr=s(dse);qxo=r(KJr,"mobilebert"),KJr.forEach(t),Gxo=r(swe," \u2014 "),hj=n(swe,"A",{href:!0});var ZJr=s(hj);Oxo=r(ZJr,"MobileBertForQuestionAnswering"),ZJr.forEach(t),Xxo=r(swe," (MobileBERT model)"),swe.forEach(t),Vxo=i(P),p3=n(P,"LI",{});var lwe=s(p3);cse=n(lwe,"STRONG",{});var eYr=s(cse);zxo=r(eYr,"mpnet"),eYr.forEach(t),Wxo=r(lwe," \u2014 "),pj=n(lwe,"A",{href:!0});var oYr=s(pj);Qxo=r(oYr,"MPNetForQuestionAnswering"),oYr.forEach(t),Hxo=r(lwe," (MPNet model)"),lwe.forEach(t),Uxo=i(P),_3=n(P,"LI",{});var iwe=s(_3);fse=n(iwe,"STRONG",{});var rYr=s(fse);Jxo=r(rYr,"nystromformer"),rYr.forEach(t),Yxo=r(iwe," \u2014 "),_j=n(iwe,"A",{href:!0});var tYr=s(_j);Kxo=r(tYr,"NystromformerForQuestionAnswering"),tYr.forEach(t),Zxo=r(iwe," (Nystromformer model)"),iwe.forEach(t),eko=i(P),u3=n(P,"LI",{});var dwe=s(u3);mse=n(dwe,"STRONG",{});var aYr=s(mse);oko=r(aYr,"qdqbert"),aYr.forEach(t),rko=r(dwe," \u2014 "),uj=n(dwe,"A",{href:!0});var nYr=s(uj);tko=r(nYr,"QDQBertForQuestionAnswering"),nYr.forEach(t),ako=r(dwe," (QDQBert model)"),dwe.forEach(t),nko=i(P),b3=n(P,"LI",{});var cwe=s(b3);gse=n(cwe,"STRONG",{});var sYr=s(gse);sko=r(sYr,"reformer"),sYr.forEach(t),lko=r(cwe," \u2014 "),bj=n(cwe,"A",{href:!0});var lYr=s(bj);iko=r(lYr,"ReformerForQuestionAnswering"),lYr.forEach(t),dko=r(cwe," (Reformer model)"),cwe.forEach(t),cko=i(P),v3=n(P,"LI",{});var fwe=s(v3);hse=n(fwe,"STRONG",{});var iYr=s(hse);fko=r(iYr,"rembert"),iYr.forEach(t),mko=r(fwe," \u2014 "),vj=n(fwe,"A",{href:!0});var dYr=s(vj);gko=r(dYr,"RemBertForQuestionAnswering"),dYr.forEach(t),hko=r(fwe," (RemBERT model)"),fwe.forEach(t),pko=i(P),T3=n(P,"LI",{});var mwe=s(T3);pse=n(mwe,"STRONG",{});var cYr=s(pse);_ko=r(cYr,"roberta"),cYr.forEach(t),uko=r(mwe," \u2014 "),Tj=n(mwe,"A",{href:!0});var fYr=s(Tj);bko=r(fYr,"RobertaForQuestionAnswering"),fYr.forEach(t),vko=r(mwe," (RoBERTa model)"),mwe.forEach(t),Tko=i(P),F3=n(P,"LI",{});var gwe=s(F3);_se=n(gwe,"STRONG",{});var mYr=s(_se);Fko=r(mYr,"roformer"),mYr.forEach(t),Cko=r(gwe," \u2014 "),Fj=n(gwe,"A",{href:!0});var gYr=s(Fj);Mko=r(gYr,"RoFormerForQuestionAnswering"),gYr.forEach(t),Eko=r(gwe," (RoFormer model)"),gwe.forEach(t),yko=i(P),C3=n(P,"LI",{});var hwe=s(C3);use=n(hwe,"STRONG",{});var hYr=s(use);wko=r(hYr,"splinter"),hYr.forEach(t),Ako=r(hwe," \u2014 "),Cj=n(hwe,"A",{href:!0});var pYr=s(Cj);Lko=r(pYr,"SplinterForQuestionAnswering"),pYr.forEach(t),Bko=r(hwe," (Splinter model)"),hwe.forEach(t),xko=i(P),M3=n(P,"LI",{});var pwe=s(M3);bse=n(pwe,"STRONG",{});var _Yr=s(bse);kko=r(_Yr,"squeezebert"),_Yr.forEach(t),Rko=r(pwe," \u2014 "),Mj=n(pwe,"A",{href:!0});var uYr=s(Mj);Sko=r(uYr,"SqueezeBertForQuestionAnswering"),uYr.forEach(t),Pko=r(pwe," (SqueezeBERT model)"),pwe.forEach(t),$ko=i(P),E3=n(P,"LI",{});var _we=s(E3);vse=n(_we,"STRONG",{});var bYr=s(vse);Iko=r(bYr,"xlm"),bYr.forEach(t),Dko=r(_we," \u2014 "),Ej=n(_we,"A",{href:!0});var vYr=s(Ej);jko=r(vYr,"XLMForQuestionAnsweringSimple"),vYr.forEach(t),Nko=r(_we," (XLM model)"),_we.forEach(t),qko=i(P),y3=n(P,"LI",{});var uwe=s(y3);Tse=n(uwe,"STRONG",{});var TYr=s(Tse);Gko=r(TYr,"xlm-roberta"),TYr.forEach(t),Oko=r(uwe," \u2014 "),yj=n(uwe,"A",{href:!0});var FYr=s(yj);Xko=r(FYr,"XLMRobertaForQuestionAnswering"),FYr.forEach(t),Vko=r(uwe," (XLM-RoBERTa model)"),uwe.forEach(t),zko=i(P),w3=n(P,"LI",{});var bwe=s(w3);Fse=n(bwe,"STRONG",{});var CYr=s(Fse);Wko=r(CYr,"xlm-roberta-xl"),CYr.forEach(t),Qko=r(bwe," \u2014 "),wj=n(bwe,"A",{href:!0});var MYr=s(wj);Hko=r(MYr,"XLMRobertaXLForQuestionAnswering"),MYr.forEach(t),Uko=r(bwe," (XLM-RoBERTa-XL model)"),bwe.forEach(t),Jko=i(P),A3=n(P,"LI",{});var vwe=s(A3);Cse=n(vwe,"STRONG",{});var EYr=s(Cse);Yko=r(EYr,"xlnet"),EYr.forEach(t),Kko=r(vwe," \u2014 "),Aj=n(vwe,"A",{href:!0});var yYr=s(Aj);Zko=r(yYr,"XLNetForQuestionAnsweringSimple"),yYr.forEach(t),eRo=r(vwe," (XLNet model)"),vwe.forEach(t),oRo=i(P),L3=n(P,"LI",{});var Twe=s(L3);Mse=n(Twe,"STRONG",{});var wYr=s(Mse);rRo=r(wYr,"yoso"),wYr.forEach(t),tRo=r(Twe," \u2014 "),Lj=n(Twe,"A",{href:!0});var AYr=s(Lj);aRo=r(AYr,"YosoForQuestionAnswering"),AYr.forEach(t),nRo=r(Twe," (YOSO model)"),Twe.forEach(t),P.forEach(t),sRo=i(Vt),B3=n(Vt,"P",{});var Fwe=s(B3);lRo=r(Fwe,"The model is set in evaluation mode by default using "),Ese=n(Fwe,"CODE",{});var LYr=s(Ese);iRo=r(LYr,"model.eval()"),LYr.forEach(t),dRo=r(Fwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yse=n(Fwe,"CODE",{});var BYr=s(yse);cRo=r(BYr,"model.train()"),BYr.forEach(t),Fwe.forEach(t),fRo=i(Vt),wse=n(Vt,"P",{});var xYr=s(wse);mRo=r(xYr,"Examples:"),xYr.forEach(t),gRo=i(Vt),m(vy.$$.fragment,Vt),Vt.forEach(t),sl.forEach(t),gBe=i(c),vd=n(c,"H2",{class:!0});var Tke=s(vd);x3=n(Tke,"A",{id:!0,class:!0,href:!0});var kYr=s(x3);Ase=n(kYr,"SPAN",{});var RYr=s(Ase);m(Ty.$$.fragment,RYr),RYr.forEach(t),kYr.forEach(t),hRo=i(Tke),Lse=n(Tke,"SPAN",{});var SYr=s(Lse);pRo=r(SYr,"AutoModelForTableQuestionAnswering"),SYr.forEach(t),Tke.forEach(t),hBe=i(c),tr=n(c,"DIV",{class:!0});var il=s(tr);m(Fy.$$.fragment,il),_Ro=i(il),Td=n(il,"P",{});var nz=s(Td);uRo=r(nz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Bse=n(nz,"CODE",{});var PYr=s(Bse);bRo=r(PYr,"from_pretrained()"),PYr.forEach(t),vRo=r(nz,"class method or the "),xse=n(nz,"CODE",{});var $Yr=s(xse);TRo=r($Yr,"from_config()"),$Yr.forEach(t),FRo=r(nz,`class
method.`),nz.forEach(t),CRo=i(il),Cy=n(il,"P",{});var Fke=s(Cy);MRo=r(Fke,"This class cannot be instantiated directly using "),kse=n(Fke,"CODE",{});var IYr=s(kse);ERo=r(IYr,"__init__()"),IYr.forEach(t),yRo=r(Fke," (throws an error)."),Fke.forEach(t),wRo=i(il),Jr=n(il,"DIV",{class:!0});var dl=s(Jr);m(My.$$.fragment,dl),ARo=i(dl),Rse=n(dl,"P",{});var DYr=s(Rse);LRo=r(DYr,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),DYr.forEach(t),BRo=i(dl),Fd=n(dl,"P",{});var sz=s(Fd);xRo=r(sz,`Note:
Loading a model from its configuration file does `),Sse=n(sz,"STRONG",{});var jYr=s(Sse);kRo=r(jYr,"not"),jYr.forEach(t),RRo=r(sz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Pse=n(sz,"CODE",{});var NYr=s(Pse);SRo=r(NYr,"from_pretrained()"),NYr.forEach(t),PRo=r(sz,"to load the model weights."),sz.forEach(t),$Ro=i(dl),$se=n(dl,"P",{});var qYr=s($se);IRo=r(qYr,"Examples:"),qYr.forEach(t),DRo=i(dl),m(Ey.$$.fragment,dl),dl.forEach(t),jRo=i(il),Oe=n(il,"DIV",{class:!0});var zt=s(Oe);m(yy.$$.fragment,zt),NRo=i(zt),Ise=n(zt,"P",{});var GYr=s(Ise);qRo=r(GYr,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),GYr.forEach(t),GRo=i(zt),Ua=n(zt,"P",{});var j4=s(Ua);ORo=r(j4,"The model class to instantiate is selected based on the "),Dse=n(j4,"CODE",{});var OYr=s(Dse);XRo=r(OYr,"model_type"),OYr.forEach(t),VRo=r(j4,` property of the config object (either
passed as an argument or loaded from `),jse=n(j4,"CODE",{});var XYr=s(jse);zRo=r(XYr,"pretrained_model_name_or_path"),XYr.forEach(t),WRo=r(j4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nse=n(j4,"CODE",{});var VYr=s(Nse);QRo=r(VYr,"pretrained_model_name_or_path"),VYr.forEach(t),HRo=r(j4,":"),j4.forEach(t),URo=i(zt),qse=n(zt,"UL",{});var zYr=s(qse);k3=n(zYr,"LI",{});var Cwe=s(k3);Gse=n(Cwe,"STRONG",{});var WYr=s(Gse);JRo=r(WYr,"tapas"),WYr.forEach(t),YRo=r(Cwe," \u2014 "),Bj=n(Cwe,"A",{href:!0});var QYr=s(Bj);KRo=r(QYr,"TapasForQuestionAnswering"),QYr.forEach(t),ZRo=r(Cwe," (TAPAS model)"),Cwe.forEach(t),zYr.forEach(t),eSo=i(zt),R3=n(zt,"P",{});var Mwe=s(R3);oSo=r(Mwe,"The model is set in evaluation mode by default using "),Ose=n(Mwe,"CODE",{});var HYr=s(Ose);rSo=r(HYr,"model.eval()"),HYr.forEach(t),tSo=r(Mwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xse=n(Mwe,"CODE",{});var UYr=s(Xse);aSo=r(UYr,"model.train()"),UYr.forEach(t),Mwe.forEach(t),nSo=i(zt),Vse=n(zt,"P",{});var JYr=s(Vse);sSo=r(JYr,"Examples:"),JYr.forEach(t),lSo=i(zt),m(wy.$$.fragment,zt),zt.forEach(t),il.forEach(t),pBe=i(c),Cd=n(c,"H2",{class:!0});var Cke=s(Cd);S3=n(Cke,"A",{id:!0,class:!0,href:!0});var YYr=s(S3);zse=n(YYr,"SPAN",{});var KYr=s(zse);m(Ay.$$.fragment,KYr),KYr.forEach(t),YYr.forEach(t),iSo=i(Cke),Wse=n(Cke,"SPAN",{});var ZYr=s(Wse);dSo=r(ZYr,"AutoModelForImageClassification"),ZYr.forEach(t),Cke.forEach(t),_Be=i(c),ar=n(c,"DIV",{class:!0});var cl=s(ar);m(Ly.$$.fragment,cl),cSo=i(cl),Md=n(cl,"P",{});var lz=s(Md);fSo=r(lz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Qse=n(lz,"CODE",{});var eKr=s(Qse);mSo=r(eKr,"from_pretrained()"),eKr.forEach(t),gSo=r(lz,"class method or the "),Hse=n(lz,"CODE",{});var oKr=s(Hse);hSo=r(oKr,"from_config()"),oKr.forEach(t),pSo=r(lz,`class
method.`),lz.forEach(t),_So=i(cl),By=n(cl,"P",{});var Mke=s(By);uSo=r(Mke,"This class cannot be instantiated directly using "),Use=n(Mke,"CODE",{});var rKr=s(Use);bSo=r(rKr,"__init__()"),rKr.forEach(t),vSo=r(Mke," (throws an error)."),Mke.forEach(t),TSo=i(cl),Yr=n(cl,"DIV",{class:!0});var fl=s(Yr);m(xy.$$.fragment,fl),FSo=i(fl),Jse=n(fl,"P",{});var tKr=s(Jse);CSo=r(tKr,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),tKr.forEach(t),MSo=i(fl),Ed=n(fl,"P",{});var iz=s(Ed);ESo=r(iz,`Note:
Loading a model from its configuration file does `),Yse=n(iz,"STRONG",{});var aKr=s(Yse);ySo=r(aKr,"not"),aKr.forEach(t),wSo=r(iz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Kse=n(iz,"CODE",{});var nKr=s(Kse);ASo=r(nKr,"from_pretrained()"),nKr.forEach(t),LSo=r(iz,"to load the model weights."),iz.forEach(t),BSo=i(fl),Zse=n(fl,"P",{});var sKr=s(Zse);xSo=r(sKr,"Examples:"),sKr.forEach(t),kSo=i(fl),m(ky.$$.fragment,fl),fl.forEach(t),RSo=i(cl),Xe=n(cl,"DIV",{class:!0});var Wt=s(Xe);m(Ry.$$.fragment,Wt),SSo=i(Wt),ele=n(Wt,"P",{});var lKr=s(ele);PSo=r(lKr,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),lKr.forEach(t),$So=i(Wt),Ja=n(Wt,"P",{});var N4=s(Ja);ISo=r(N4,"The model class to instantiate is selected based on the "),ole=n(N4,"CODE",{});var iKr=s(ole);DSo=r(iKr,"model_type"),iKr.forEach(t),jSo=r(N4,` property of the config object (either
passed as an argument or loaded from `),rle=n(N4,"CODE",{});var dKr=s(rle);NSo=r(dKr,"pretrained_model_name_or_path"),dKr.forEach(t),qSo=r(N4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tle=n(N4,"CODE",{});var cKr=s(tle);GSo=r(cKr,"pretrained_model_name_or_path"),cKr.forEach(t),OSo=r(N4,":"),N4.forEach(t),XSo=i(Wt),be=n(Wt,"UL",{});var eo=s(be);P3=n(eo,"LI",{});var Ewe=s(P3);ale=n(Ewe,"STRONG",{});var fKr=s(ale);VSo=r(fKr,"beit"),fKr.forEach(t),zSo=r(Ewe," \u2014 "),xj=n(Ewe,"A",{href:!0});var mKr=s(xj);WSo=r(mKr,"BeitForImageClassification"),mKr.forEach(t),QSo=r(Ewe," (BEiT model)"),Ewe.forEach(t),HSo=i(eo),$3=n(eo,"LI",{});var ywe=s($3);nle=n(ywe,"STRONG",{});var gKr=s(nle);USo=r(gKr,"convnext"),gKr.forEach(t),JSo=r(ywe," \u2014 "),kj=n(ywe,"A",{href:!0});var hKr=s(kj);YSo=r(hKr,"ConvNextForImageClassification"),hKr.forEach(t),KSo=r(ywe," (ConvNext model)"),ywe.forEach(t),ZSo=i(eo),$s=n(eo,"LI",{});var i8=s($s);sle=n(i8,"STRONG",{});var pKr=s(sle);ePo=r(pKr,"deit"),pKr.forEach(t),oPo=r(i8," \u2014 "),Rj=n(i8,"A",{href:!0});var _Kr=s(Rj);rPo=r(_Kr,"DeiTForImageClassification"),_Kr.forEach(t),tPo=r(i8," or "),Sj=n(i8,"A",{href:!0});var uKr=s(Sj);aPo=r(uKr,"DeiTForImageClassificationWithTeacher"),uKr.forEach(t),nPo=r(i8," (DeiT model)"),i8.forEach(t),sPo=i(eo),I3=n(eo,"LI",{});var wwe=s(I3);lle=n(wwe,"STRONG",{});var bKr=s(lle);lPo=r(bKr,"imagegpt"),bKr.forEach(t),iPo=r(wwe," \u2014 "),Pj=n(wwe,"A",{href:!0});var vKr=s(Pj);dPo=r(vKr,"ImageGPTForImageClassification"),vKr.forEach(t),cPo=r(wwe," (ImageGPT model)"),wwe.forEach(t),fPo=i(eo),la=n(eo,"LI",{});var Ef=s(la);ile=n(Ef,"STRONG",{});var TKr=s(ile);mPo=r(TKr,"perceiver"),TKr.forEach(t),gPo=r(Ef," \u2014 "),$j=n(Ef,"A",{href:!0});var FKr=s($j);hPo=r(FKr,"PerceiverForImageClassificationLearned"),FKr.forEach(t),pPo=r(Ef," or "),Ij=n(Ef,"A",{href:!0});var CKr=s(Ij);_Po=r(CKr,"PerceiverForImageClassificationFourier"),CKr.forEach(t),uPo=r(Ef," or "),Dj=n(Ef,"A",{href:!0});var MKr=s(Dj);bPo=r(MKr,"PerceiverForImageClassificationConvProcessing"),MKr.forEach(t),vPo=r(Ef," (Perceiver model)"),Ef.forEach(t),TPo=i(eo),D3=n(eo,"LI",{});var Awe=s(D3);dle=n(Awe,"STRONG",{});var EKr=s(dle);FPo=r(EKr,"poolformer"),EKr.forEach(t),CPo=r(Awe," \u2014 "),jj=n(Awe,"A",{href:!0});var yKr=s(jj);MPo=r(yKr,"PoolFormerForImageClassification"),yKr.forEach(t),EPo=r(Awe," (PoolFormer model)"),Awe.forEach(t),yPo=i(eo),j3=n(eo,"LI",{});var Lwe=s(j3);cle=n(Lwe,"STRONG",{});var wKr=s(cle);wPo=r(wKr,"segformer"),wKr.forEach(t),APo=r(Lwe," \u2014 "),Nj=n(Lwe,"A",{href:!0});var AKr=s(Nj);LPo=r(AKr,"SegformerForImageClassification"),AKr.forEach(t),BPo=r(Lwe," (SegFormer model)"),Lwe.forEach(t),xPo=i(eo),N3=n(eo,"LI",{});var Bwe=s(N3);fle=n(Bwe,"STRONG",{});var LKr=s(fle);kPo=r(LKr,"swin"),LKr.forEach(t),RPo=r(Bwe," \u2014 "),qj=n(Bwe,"A",{href:!0});var BKr=s(qj);SPo=r(BKr,"SwinForImageClassification"),BKr.forEach(t),PPo=r(Bwe," (Swin model)"),Bwe.forEach(t),$Po=i(eo),q3=n(eo,"LI",{});var xwe=s(q3);mle=n(xwe,"STRONG",{});var xKr=s(mle);IPo=r(xKr,"vit"),xKr.forEach(t),DPo=r(xwe," \u2014 "),Gj=n(xwe,"A",{href:!0});var kKr=s(Gj);jPo=r(kKr,"ViTForImageClassification"),kKr.forEach(t),NPo=r(xwe," (ViT model)"),xwe.forEach(t),eo.forEach(t),qPo=i(Wt),G3=n(Wt,"P",{});var kwe=s(G3);GPo=r(kwe,"The model is set in evaluation mode by default using "),gle=n(kwe,"CODE",{});var RKr=s(gle);OPo=r(RKr,"model.eval()"),RKr.forEach(t),XPo=r(kwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hle=n(kwe,"CODE",{});var SKr=s(hle);VPo=r(SKr,"model.train()"),SKr.forEach(t),kwe.forEach(t),zPo=i(Wt),ple=n(Wt,"P",{});var PKr=s(ple);WPo=r(PKr,"Examples:"),PKr.forEach(t),QPo=i(Wt),m(Sy.$$.fragment,Wt),Wt.forEach(t),cl.forEach(t),uBe=i(c),yd=n(c,"H2",{class:!0});var Eke=s(yd);O3=n(Eke,"A",{id:!0,class:!0,href:!0});var $Kr=s(O3);_le=n($Kr,"SPAN",{});var IKr=s(_le);m(Py.$$.fragment,IKr),IKr.forEach(t),$Kr.forEach(t),HPo=i(Eke),ule=n(Eke,"SPAN",{});var DKr=s(ule);UPo=r(DKr,"AutoModelForVision2Seq"),DKr.forEach(t),Eke.forEach(t),bBe=i(c),nr=n(c,"DIV",{class:!0});var ml=s(nr);m($y.$$.fragment,ml),JPo=i(ml),wd=n(ml,"P",{});var dz=s(wd);YPo=r(dz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),ble=n(dz,"CODE",{});var jKr=s(ble);KPo=r(jKr,"from_pretrained()"),jKr.forEach(t),ZPo=r(dz,"class method or the "),vle=n(dz,"CODE",{});var NKr=s(vle);e$o=r(NKr,"from_config()"),NKr.forEach(t),o$o=r(dz,`class
method.`),dz.forEach(t),r$o=i(ml),Iy=n(ml,"P",{});var yke=s(Iy);t$o=r(yke,"This class cannot be instantiated directly using "),Tle=n(yke,"CODE",{});var qKr=s(Tle);a$o=r(qKr,"__init__()"),qKr.forEach(t),n$o=r(yke," (throws an error)."),yke.forEach(t),s$o=i(ml),Kr=n(ml,"DIV",{class:!0});var gl=s(Kr);m(Dy.$$.fragment,gl),l$o=i(gl),Fle=n(gl,"P",{});var GKr=s(Fle);i$o=r(GKr,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),GKr.forEach(t),d$o=i(gl),Ad=n(gl,"P",{});var cz=s(Ad);c$o=r(cz,`Note:
Loading a model from its configuration file does `),Cle=n(cz,"STRONG",{});var OKr=s(Cle);f$o=r(OKr,"not"),OKr.forEach(t),m$o=r(cz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Mle=n(cz,"CODE",{});var XKr=s(Mle);g$o=r(XKr,"from_pretrained()"),XKr.forEach(t),h$o=r(cz,"to load the model weights."),cz.forEach(t),p$o=i(gl),Ele=n(gl,"P",{});var VKr=s(Ele);_$o=r(VKr,"Examples:"),VKr.forEach(t),u$o=i(gl),m(jy.$$.fragment,gl),gl.forEach(t),b$o=i(ml),Ve=n(ml,"DIV",{class:!0});var Qt=s(Ve);m(Ny.$$.fragment,Qt),v$o=i(Qt),yle=n(Qt,"P",{});var zKr=s(yle);T$o=r(zKr,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),zKr.forEach(t),F$o=i(Qt),Ya=n(Qt,"P",{});var q4=s(Ya);C$o=r(q4,"The model class to instantiate is selected based on the "),wle=n(q4,"CODE",{});var WKr=s(wle);M$o=r(WKr,"model_type"),WKr.forEach(t),E$o=r(q4,` property of the config object (either
passed as an argument or loaded from `),Ale=n(q4,"CODE",{});var QKr=s(Ale);y$o=r(QKr,"pretrained_model_name_or_path"),QKr.forEach(t),w$o=r(q4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lle=n(q4,"CODE",{});var HKr=s(Lle);A$o=r(HKr,"pretrained_model_name_or_path"),HKr.forEach(t),L$o=r(q4,":"),q4.forEach(t),B$o=i(Qt),Ble=n(Qt,"UL",{});var UKr=s(Ble);X3=n(UKr,"LI",{});var Rwe=s(X3);xle=n(Rwe,"STRONG",{});var JKr=s(xle);x$o=r(JKr,"vision-encoder-decoder"),JKr.forEach(t),k$o=r(Rwe," \u2014 "),Oj=n(Rwe,"A",{href:!0});var YKr=s(Oj);R$o=r(YKr,"VisionEncoderDecoderModel"),YKr.forEach(t),S$o=r(Rwe," (Vision Encoder decoder model)"),Rwe.forEach(t),UKr.forEach(t),P$o=i(Qt),V3=n(Qt,"P",{});var Swe=s(V3);$$o=r(Swe,"The model is set in evaluation mode by default using "),kle=n(Swe,"CODE",{});var KKr=s(kle);I$o=r(KKr,"model.eval()"),KKr.forEach(t),D$o=r(Swe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rle=n(Swe,"CODE",{});var ZKr=s(Rle);j$o=r(ZKr,"model.train()"),ZKr.forEach(t),Swe.forEach(t),N$o=i(Qt),Sle=n(Qt,"P",{});var eZr=s(Sle);q$o=r(eZr,"Examples:"),eZr.forEach(t),G$o=i(Qt),m(qy.$$.fragment,Qt),Qt.forEach(t),ml.forEach(t),vBe=i(c),Ld=n(c,"H2",{class:!0});var wke=s(Ld);z3=n(wke,"A",{id:!0,class:!0,href:!0});var oZr=s(z3);Ple=n(oZr,"SPAN",{});var rZr=s(Ple);m(Gy.$$.fragment,rZr),rZr.forEach(t),oZr.forEach(t),O$o=i(wke),$le=n(wke,"SPAN",{});var tZr=s($le);X$o=r(tZr,"AutoModelForAudioClassification"),tZr.forEach(t),wke.forEach(t),TBe=i(c),sr=n(c,"DIV",{class:!0});var hl=s(sr);m(Oy.$$.fragment,hl),V$o=i(hl),Bd=n(hl,"P",{});var fz=s(Bd);z$o=r(fz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),Ile=n(fz,"CODE",{});var aZr=s(Ile);W$o=r(aZr,"from_pretrained()"),aZr.forEach(t),Q$o=r(fz,"class method or the "),Dle=n(fz,"CODE",{});var nZr=s(Dle);H$o=r(nZr,"from_config()"),nZr.forEach(t),U$o=r(fz,`class
method.`),fz.forEach(t),J$o=i(hl),Xy=n(hl,"P",{});var Ake=s(Xy);Y$o=r(Ake,"This class cannot be instantiated directly using "),jle=n(Ake,"CODE",{});var sZr=s(jle);K$o=r(sZr,"__init__()"),sZr.forEach(t),Z$o=r(Ake," (throws an error)."),Ake.forEach(t),eIo=i(hl),Zr=n(hl,"DIV",{class:!0});var pl=s(Zr);m(Vy.$$.fragment,pl),oIo=i(pl),Nle=n(pl,"P",{});var lZr=s(Nle);rIo=r(lZr,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),lZr.forEach(t),tIo=i(pl),xd=n(pl,"P",{});var mz=s(xd);aIo=r(mz,`Note:
Loading a model from its configuration file does `),qle=n(mz,"STRONG",{});var iZr=s(qle);nIo=r(iZr,"not"),iZr.forEach(t),sIo=r(mz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Gle=n(mz,"CODE",{});var dZr=s(Gle);lIo=r(dZr,"from_pretrained()"),dZr.forEach(t),iIo=r(mz,"to load the model weights."),mz.forEach(t),dIo=i(pl),Ole=n(pl,"P",{});var cZr=s(Ole);cIo=r(cZr,"Examples:"),cZr.forEach(t),fIo=i(pl),m(zy.$$.fragment,pl),pl.forEach(t),mIo=i(hl),ze=n(hl,"DIV",{class:!0});var Ht=s(ze);m(Wy.$$.fragment,Ht),gIo=i(Ht),Xle=n(Ht,"P",{});var fZr=s(Xle);hIo=r(fZr,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),fZr.forEach(t),pIo=i(Ht),Ka=n(Ht,"P",{});var G4=s(Ka);_Io=r(G4,"The model class to instantiate is selected based on the "),Vle=n(G4,"CODE",{});var mZr=s(Vle);uIo=r(mZr,"model_type"),mZr.forEach(t),bIo=r(G4,` property of the config object (either
passed as an argument or loaded from `),zle=n(G4,"CODE",{});var gZr=s(zle);vIo=r(gZr,"pretrained_model_name_or_path"),gZr.forEach(t),TIo=r(G4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wle=n(G4,"CODE",{});var hZr=s(Wle);FIo=r(hZr,"pretrained_model_name_or_path"),hZr.forEach(t),CIo=r(G4,":"),G4.forEach(t),MIo=i(Ht),Ae=n(Ht,"UL",{});var No=s(Ae);W3=n(No,"LI",{});var Pwe=s(W3);Qle=n(Pwe,"STRONG",{});var pZr=s(Qle);EIo=r(pZr,"data2vec-audio"),pZr.forEach(t),yIo=r(Pwe," \u2014 "),Xj=n(Pwe,"A",{href:!0});var _Zr=s(Xj);wIo=r(_Zr,"Data2VecAudioForSequenceClassification"),_Zr.forEach(t),AIo=r(Pwe," (Data2VecAudio model)"),Pwe.forEach(t),LIo=i(No),Q3=n(No,"LI",{});var $we=s(Q3);Hle=n($we,"STRONG",{});var uZr=s(Hle);BIo=r(uZr,"hubert"),uZr.forEach(t),xIo=r($we," \u2014 "),Vj=n($we,"A",{href:!0});var bZr=s(Vj);kIo=r(bZr,"HubertForSequenceClassification"),bZr.forEach(t),RIo=r($we," (Hubert model)"),$we.forEach(t),SIo=i(No),H3=n(No,"LI",{});var Iwe=s(H3);Ule=n(Iwe,"STRONG",{});var vZr=s(Ule);PIo=r(vZr,"sew"),vZr.forEach(t),$Io=r(Iwe," \u2014 "),zj=n(Iwe,"A",{href:!0});var TZr=s(zj);IIo=r(TZr,"SEWForSequenceClassification"),TZr.forEach(t),DIo=r(Iwe," (SEW model)"),Iwe.forEach(t),jIo=i(No),U3=n(No,"LI",{});var Dwe=s(U3);Jle=n(Dwe,"STRONG",{});var FZr=s(Jle);NIo=r(FZr,"sew-d"),FZr.forEach(t),qIo=r(Dwe," \u2014 "),Wj=n(Dwe,"A",{href:!0});var CZr=s(Wj);GIo=r(CZr,"SEWDForSequenceClassification"),CZr.forEach(t),OIo=r(Dwe," (SEW-D model)"),Dwe.forEach(t),XIo=i(No),J3=n(No,"LI",{});var jwe=s(J3);Yle=n(jwe,"STRONG",{});var MZr=s(Yle);VIo=r(MZr,"unispeech"),MZr.forEach(t),zIo=r(jwe," \u2014 "),Qj=n(jwe,"A",{href:!0});var EZr=s(Qj);WIo=r(EZr,"UniSpeechForSequenceClassification"),EZr.forEach(t),QIo=r(jwe," (UniSpeech model)"),jwe.forEach(t),HIo=i(No),Y3=n(No,"LI",{});var Nwe=s(Y3);Kle=n(Nwe,"STRONG",{});var yZr=s(Kle);UIo=r(yZr,"unispeech-sat"),yZr.forEach(t),JIo=r(Nwe," \u2014 "),Hj=n(Nwe,"A",{href:!0});var wZr=s(Hj);YIo=r(wZr,"UniSpeechSatForSequenceClassification"),wZr.forEach(t),KIo=r(Nwe," (UniSpeechSat model)"),Nwe.forEach(t),ZIo=i(No),K3=n(No,"LI",{});var qwe=s(K3);Zle=n(qwe,"STRONG",{});var AZr=s(Zle);eDo=r(AZr,"wav2vec2"),AZr.forEach(t),oDo=r(qwe," \u2014 "),Uj=n(qwe,"A",{href:!0});var LZr=s(Uj);rDo=r(LZr,"Wav2Vec2ForSequenceClassification"),LZr.forEach(t),tDo=r(qwe," (Wav2Vec2 model)"),qwe.forEach(t),aDo=i(No),Z3=n(No,"LI",{});var Gwe=s(Z3);eie=n(Gwe,"STRONG",{});var BZr=s(eie);nDo=r(BZr,"wavlm"),BZr.forEach(t),sDo=r(Gwe," \u2014 "),Jj=n(Gwe,"A",{href:!0});var xZr=s(Jj);lDo=r(xZr,"WavLMForSequenceClassification"),xZr.forEach(t),iDo=r(Gwe," (WavLM model)"),Gwe.forEach(t),No.forEach(t),dDo=i(Ht),e5=n(Ht,"P",{});var Owe=s(e5);cDo=r(Owe,"The model is set in evaluation mode by default using "),oie=n(Owe,"CODE",{});var kZr=s(oie);fDo=r(kZr,"model.eval()"),kZr.forEach(t),mDo=r(Owe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rie=n(Owe,"CODE",{});var RZr=s(rie);gDo=r(RZr,"model.train()"),RZr.forEach(t),Owe.forEach(t),hDo=i(Ht),tie=n(Ht,"P",{});var SZr=s(tie);pDo=r(SZr,"Examples:"),SZr.forEach(t),_Do=i(Ht),m(Qy.$$.fragment,Ht),Ht.forEach(t),hl.forEach(t),FBe=i(c),kd=n(c,"H2",{class:!0});var Lke=s(kd);o5=n(Lke,"A",{id:!0,class:!0,href:!0});var PZr=s(o5);aie=n(PZr,"SPAN",{});var $Zr=s(aie);m(Hy.$$.fragment,$Zr),$Zr.forEach(t),PZr.forEach(t),uDo=i(Lke),nie=n(Lke,"SPAN",{});var IZr=s(nie);bDo=r(IZr,"AutoModelForAudioFrameClassification"),IZr.forEach(t),Lke.forEach(t),CBe=i(c),lr=n(c,"DIV",{class:!0});var _l=s(lr);m(Uy.$$.fragment,_l),vDo=i(_l),Rd=n(_l,"P",{});var gz=s(Rd);TDo=r(gz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),sie=n(gz,"CODE",{});var DZr=s(sie);FDo=r(DZr,"from_pretrained()"),DZr.forEach(t),CDo=r(gz,"class method or the "),lie=n(gz,"CODE",{});var jZr=s(lie);MDo=r(jZr,"from_config()"),jZr.forEach(t),EDo=r(gz,`class
method.`),gz.forEach(t),yDo=i(_l),Jy=n(_l,"P",{});var Bke=s(Jy);wDo=r(Bke,"This class cannot be instantiated directly using "),iie=n(Bke,"CODE",{});var NZr=s(iie);ADo=r(NZr,"__init__()"),NZr.forEach(t),LDo=r(Bke," (throws an error)."),Bke.forEach(t),BDo=i(_l),et=n(_l,"DIV",{class:!0});var ul=s(et);m(Yy.$$.fragment,ul),xDo=i(ul),die=n(ul,"P",{});var qZr=s(die);kDo=r(qZr,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),qZr.forEach(t),RDo=i(ul),Sd=n(ul,"P",{});var hz=s(Sd);SDo=r(hz,`Note:
Loading a model from its configuration file does `),cie=n(hz,"STRONG",{});var GZr=s(cie);PDo=r(GZr,"not"),GZr.forEach(t),$Do=r(hz,` load the model weights. It only affects the
model\u2019s configuration. Use `),fie=n(hz,"CODE",{});var OZr=s(fie);IDo=r(OZr,"from_pretrained()"),OZr.forEach(t),DDo=r(hz,"to load the model weights."),hz.forEach(t),jDo=i(ul),mie=n(ul,"P",{});var XZr=s(mie);NDo=r(XZr,"Examples:"),XZr.forEach(t),qDo=i(ul),m(Ky.$$.fragment,ul),ul.forEach(t),GDo=i(_l),We=n(_l,"DIV",{class:!0});var Ut=s(We);m(Zy.$$.fragment,Ut),ODo=i(Ut),gie=n(Ut,"P",{});var VZr=s(gie);XDo=r(VZr,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),VZr.forEach(t),VDo=i(Ut),Za=n(Ut,"P",{});var O4=s(Za);zDo=r(O4,"The model class to instantiate is selected based on the "),hie=n(O4,"CODE",{});var zZr=s(hie);WDo=r(zZr,"model_type"),zZr.forEach(t),QDo=r(O4,` property of the config object (either
passed as an argument or loaded from `),pie=n(O4,"CODE",{});var WZr=s(pie);HDo=r(WZr,"pretrained_model_name_or_path"),WZr.forEach(t),UDo=r(O4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_ie=n(O4,"CODE",{});var QZr=s(_ie);JDo=r(QZr,"pretrained_model_name_or_path"),QZr.forEach(t),YDo=r(O4,":"),O4.forEach(t),KDo=i(Ut),en=n(Ut,"UL",{});var X4=s(en);r5=n(X4,"LI",{});var Xwe=s(r5);uie=n(Xwe,"STRONG",{});var HZr=s(uie);ZDo=r(HZr,"data2vec-audio"),HZr.forEach(t),ejo=r(Xwe," \u2014 "),Yj=n(Xwe,"A",{href:!0});var UZr=s(Yj);ojo=r(UZr,"Data2VecAudioForAudioFrameClassification"),UZr.forEach(t),rjo=r(Xwe," (Data2VecAudio model)"),Xwe.forEach(t),tjo=i(X4),t5=n(X4,"LI",{});var Vwe=s(t5);bie=n(Vwe,"STRONG",{});var JZr=s(bie);ajo=r(JZr,"unispeech-sat"),JZr.forEach(t),njo=r(Vwe," \u2014 "),Kj=n(Vwe,"A",{href:!0});var YZr=s(Kj);sjo=r(YZr,"UniSpeechSatForAudioFrameClassification"),YZr.forEach(t),ljo=r(Vwe," (UniSpeechSat model)"),Vwe.forEach(t),ijo=i(X4),a5=n(X4,"LI",{});var zwe=s(a5);vie=n(zwe,"STRONG",{});var KZr=s(vie);djo=r(KZr,"wav2vec2"),KZr.forEach(t),cjo=r(zwe," \u2014 "),Zj=n(zwe,"A",{href:!0});var ZZr=s(Zj);fjo=r(ZZr,"Wav2Vec2ForAudioFrameClassification"),ZZr.forEach(t),mjo=r(zwe," (Wav2Vec2 model)"),zwe.forEach(t),gjo=i(X4),n5=n(X4,"LI",{});var Wwe=s(n5);Tie=n(Wwe,"STRONG",{});var eet=s(Tie);hjo=r(eet,"wavlm"),eet.forEach(t),pjo=r(Wwe," \u2014 "),eN=n(Wwe,"A",{href:!0});var oet=s(eN);_jo=r(oet,"WavLMForAudioFrameClassification"),oet.forEach(t),ujo=r(Wwe," (WavLM model)"),Wwe.forEach(t),X4.forEach(t),bjo=i(Ut),s5=n(Ut,"P",{});var Qwe=s(s5);vjo=r(Qwe,"The model is set in evaluation mode by default using "),Fie=n(Qwe,"CODE",{});var ret=s(Fie);Tjo=r(ret,"model.eval()"),ret.forEach(t),Fjo=r(Qwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cie=n(Qwe,"CODE",{});var tet=s(Cie);Cjo=r(tet,"model.train()"),tet.forEach(t),Qwe.forEach(t),Mjo=i(Ut),Mie=n(Ut,"P",{});var aet=s(Mie);Ejo=r(aet,"Examples:"),aet.forEach(t),yjo=i(Ut),m(ew.$$.fragment,Ut),Ut.forEach(t),_l.forEach(t),MBe=i(c),Pd=n(c,"H2",{class:!0});var xke=s(Pd);l5=n(xke,"A",{id:!0,class:!0,href:!0});var net=s(l5);Eie=n(net,"SPAN",{});var set=s(Eie);m(ow.$$.fragment,set),set.forEach(t),net.forEach(t),wjo=i(xke),yie=n(xke,"SPAN",{});var iet=s(yie);Ajo=r(iet,"AutoModelForCTC"),iet.forEach(t),xke.forEach(t),EBe=i(c),ir=n(c,"DIV",{class:!0});var bl=s(ir);m(rw.$$.fragment,bl),Ljo=i(bl),$d=n(bl,"P",{});var pz=s($d);Bjo=r(pz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),wie=n(pz,"CODE",{});var det=s(wie);xjo=r(det,"from_pretrained()"),det.forEach(t),kjo=r(pz,"class method or the "),Aie=n(pz,"CODE",{});var cet=s(Aie);Rjo=r(cet,"from_config()"),cet.forEach(t),Sjo=r(pz,`class
method.`),pz.forEach(t),Pjo=i(bl),tw=n(bl,"P",{});var kke=s(tw);$jo=r(kke,"This class cannot be instantiated directly using "),Lie=n(kke,"CODE",{});var fet=s(Lie);Ijo=r(fet,"__init__()"),fet.forEach(t),Djo=r(kke," (throws an error)."),kke.forEach(t),jjo=i(bl),ot=n(bl,"DIV",{class:!0});var vl=s(ot);m(aw.$$.fragment,vl),Njo=i(vl),Bie=n(vl,"P",{});var met=s(Bie);qjo=r(met,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),met.forEach(t),Gjo=i(vl),Id=n(vl,"P",{});var _z=s(Id);Ojo=r(_z,`Note:
Loading a model from its configuration file does `),xie=n(_z,"STRONG",{});var get=s(xie);Xjo=r(get,"not"),get.forEach(t),Vjo=r(_z,` load the model weights. It only affects the
model\u2019s configuration. Use `),kie=n(_z,"CODE",{});var het=s(kie);zjo=r(het,"from_pretrained()"),het.forEach(t),Wjo=r(_z,"to load the model weights."),_z.forEach(t),Qjo=i(vl),Rie=n(vl,"P",{});var pet=s(Rie);Hjo=r(pet,"Examples:"),pet.forEach(t),Ujo=i(vl),m(nw.$$.fragment,vl),vl.forEach(t),Jjo=i(bl),Qe=n(bl,"DIV",{class:!0});var Jt=s(Qe);m(sw.$$.fragment,Jt),Yjo=i(Jt),Sie=n(Jt,"P",{});var _et=s(Sie);Kjo=r(_et,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),_et.forEach(t),Zjo=i(Jt),on=n(Jt,"P",{});var V4=s(on);eNo=r(V4,"The model class to instantiate is selected based on the "),Pie=n(V4,"CODE",{});var uet=s(Pie);oNo=r(uet,"model_type"),uet.forEach(t),rNo=r(V4,` property of the config object (either
passed as an argument or loaded from `),$ie=n(V4,"CODE",{});var bet=s($ie);tNo=r(bet,"pretrained_model_name_or_path"),bet.forEach(t),aNo=r(V4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Iie=n(V4,"CODE",{});var vet=s(Iie);nNo=r(vet,"pretrained_model_name_or_path"),vet.forEach(t),sNo=r(V4,":"),V4.forEach(t),lNo=i(Jt),Le=n(Jt,"UL",{});var qo=s(Le);i5=n(qo,"LI",{});var Hwe=s(i5);Die=n(Hwe,"STRONG",{});var Tet=s(Die);iNo=r(Tet,"data2vec-audio"),Tet.forEach(t),dNo=r(Hwe," \u2014 "),oN=n(Hwe,"A",{href:!0});var Fet=s(oN);cNo=r(Fet,"Data2VecAudioForCTC"),Fet.forEach(t),fNo=r(Hwe," (Data2VecAudio model)"),Hwe.forEach(t),mNo=i(qo),d5=n(qo,"LI",{});var Uwe=s(d5);jie=n(Uwe,"STRONG",{});var Cet=s(jie);gNo=r(Cet,"hubert"),Cet.forEach(t),hNo=r(Uwe," \u2014 "),rN=n(Uwe,"A",{href:!0});var Met=s(rN);pNo=r(Met,"HubertForCTC"),Met.forEach(t),_No=r(Uwe," (Hubert model)"),Uwe.forEach(t),uNo=i(qo),c5=n(qo,"LI",{});var Jwe=s(c5);Nie=n(Jwe,"STRONG",{});var Eet=s(Nie);bNo=r(Eet,"sew"),Eet.forEach(t),vNo=r(Jwe," \u2014 "),tN=n(Jwe,"A",{href:!0});var yet=s(tN);TNo=r(yet,"SEWForCTC"),yet.forEach(t),FNo=r(Jwe," (SEW model)"),Jwe.forEach(t),CNo=i(qo),f5=n(qo,"LI",{});var Ywe=s(f5);qie=n(Ywe,"STRONG",{});var wet=s(qie);MNo=r(wet,"sew-d"),wet.forEach(t),ENo=r(Ywe," \u2014 "),aN=n(Ywe,"A",{href:!0});var Aet=s(aN);yNo=r(Aet,"SEWDForCTC"),Aet.forEach(t),wNo=r(Ywe," (SEW-D model)"),Ywe.forEach(t),ANo=i(qo),m5=n(qo,"LI",{});var Kwe=s(m5);Gie=n(Kwe,"STRONG",{});var Let=s(Gie);LNo=r(Let,"unispeech"),Let.forEach(t),BNo=r(Kwe," \u2014 "),nN=n(Kwe,"A",{href:!0});var Bet=s(nN);xNo=r(Bet,"UniSpeechForCTC"),Bet.forEach(t),kNo=r(Kwe," (UniSpeech model)"),Kwe.forEach(t),RNo=i(qo),g5=n(qo,"LI",{});var Zwe=s(g5);Oie=n(Zwe,"STRONG",{});var xet=s(Oie);SNo=r(xet,"unispeech-sat"),xet.forEach(t),PNo=r(Zwe," \u2014 "),sN=n(Zwe,"A",{href:!0});var ket=s(sN);$No=r(ket,"UniSpeechSatForCTC"),ket.forEach(t),INo=r(Zwe," (UniSpeechSat model)"),Zwe.forEach(t),DNo=i(qo),h5=n(qo,"LI",{});var e6e=s(h5);Xie=n(e6e,"STRONG",{});var Ret=s(Xie);jNo=r(Ret,"wav2vec2"),Ret.forEach(t),NNo=r(e6e," \u2014 "),lN=n(e6e,"A",{href:!0});var Set=s(lN);qNo=r(Set,"Wav2Vec2ForCTC"),Set.forEach(t),GNo=r(e6e," (Wav2Vec2 model)"),e6e.forEach(t),ONo=i(qo),p5=n(qo,"LI",{});var o6e=s(p5);Vie=n(o6e,"STRONG",{});var Pet=s(Vie);XNo=r(Pet,"wavlm"),Pet.forEach(t),VNo=r(o6e," \u2014 "),iN=n(o6e,"A",{href:!0});var $et=s(iN);zNo=r($et,"WavLMForCTC"),$et.forEach(t),WNo=r(o6e," (WavLM model)"),o6e.forEach(t),qo.forEach(t),QNo=i(Jt),_5=n(Jt,"P",{});var r6e=s(_5);HNo=r(r6e,"The model is set in evaluation mode by default using "),zie=n(r6e,"CODE",{});var Iet=s(zie);UNo=r(Iet,"model.eval()"),Iet.forEach(t),JNo=r(r6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wie=n(r6e,"CODE",{});var Det=s(Wie);YNo=r(Det,"model.train()"),Det.forEach(t),r6e.forEach(t),KNo=i(Jt),Qie=n(Jt,"P",{});var jet=s(Qie);ZNo=r(jet,"Examples:"),jet.forEach(t),eqo=i(Jt),m(lw.$$.fragment,Jt),Jt.forEach(t),bl.forEach(t),yBe=i(c),Dd=n(c,"H2",{class:!0});var Rke=s(Dd);u5=n(Rke,"A",{id:!0,class:!0,href:!0});var Net=s(u5);Hie=n(Net,"SPAN",{});var qet=s(Hie);m(iw.$$.fragment,qet),qet.forEach(t),Net.forEach(t),oqo=i(Rke),Uie=n(Rke,"SPAN",{});var Get=s(Uie);rqo=r(Get,"AutoModelForSpeechSeq2Seq"),Get.forEach(t),Rke.forEach(t),wBe=i(c),dr=n(c,"DIV",{class:!0});var Tl=s(dr);m(dw.$$.fragment,Tl),tqo=i(Tl),jd=n(Tl,"P",{});var uz=s(jd);aqo=r(uz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Jie=n(uz,"CODE",{});var Oet=s(Jie);nqo=r(Oet,"from_pretrained()"),Oet.forEach(t),sqo=r(uz,"class method or the "),Yie=n(uz,"CODE",{});var Xet=s(Yie);lqo=r(Xet,"from_config()"),Xet.forEach(t),iqo=r(uz,`class
method.`),uz.forEach(t),dqo=i(Tl),cw=n(Tl,"P",{});var Ske=s(cw);cqo=r(Ske,"This class cannot be instantiated directly using "),Kie=n(Ske,"CODE",{});var Vet=s(Kie);fqo=r(Vet,"__init__()"),Vet.forEach(t),mqo=r(Ske," (throws an error)."),Ske.forEach(t),gqo=i(Tl),rt=n(Tl,"DIV",{class:!0});var Fl=s(rt);m(fw.$$.fragment,Fl),hqo=i(Fl),Zie=n(Fl,"P",{});var zet=s(Zie);pqo=r(zet,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),zet.forEach(t),_qo=i(Fl),Nd=n(Fl,"P",{});var bz=s(Nd);uqo=r(bz,`Note:
Loading a model from its configuration file does `),ede=n(bz,"STRONG",{});var Wet=s(ede);bqo=r(Wet,"not"),Wet.forEach(t),vqo=r(bz,` load the model weights. It only affects the
model\u2019s configuration. Use `),ode=n(bz,"CODE",{});var Qet=s(ode);Tqo=r(Qet,"from_pretrained()"),Qet.forEach(t),Fqo=r(bz,"to load the model weights."),bz.forEach(t),Cqo=i(Fl),rde=n(Fl,"P",{});var Het=s(rde);Mqo=r(Het,"Examples:"),Het.forEach(t),Eqo=i(Fl),m(mw.$$.fragment,Fl),Fl.forEach(t),yqo=i(Tl),He=n(Tl,"DIV",{class:!0});var Yt=s(He);m(gw.$$.fragment,Yt),wqo=i(Yt),tde=n(Yt,"P",{});var Uet=s(tde);Aqo=r(Uet,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Uet.forEach(t),Lqo=i(Yt),rn=n(Yt,"P",{});var z4=s(rn);Bqo=r(z4,"The model class to instantiate is selected based on the "),ade=n(z4,"CODE",{});var Jet=s(ade);xqo=r(Jet,"model_type"),Jet.forEach(t),kqo=r(z4,` property of the config object (either
passed as an argument or loaded from `),nde=n(z4,"CODE",{});var Yet=s(nde);Rqo=r(Yet,"pretrained_model_name_or_path"),Yet.forEach(t),Sqo=r(z4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sde=n(z4,"CODE",{});var Ket=s(sde);Pqo=r(Ket,"pretrained_model_name_or_path"),Ket.forEach(t),$qo=r(z4,":"),z4.forEach(t),Iqo=i(Yt),hw=n(Yt,"UL",{});var Pke=s(hw);b5=n(Pke,"LI",{});var t6e=s(b5);lde=n(t6e,"STRONG",{});var Zet=s(lde);Dqo=r(Zet,"speech-encoder-decoder"),Zet.forEach(t),jqo=r(t6e," \u2014 "),dN=n(t6e,"A",{href:!0});var eot=s(dN);Nqo=r(eot,"SpeechEncoderDecoderModel"),eot.forEach(t),qqo=r(t6e," (Speech Encoder decoder model)"),t6e.forEach(t),Gqo=i(Pke),v5=n(Pke,"LI",{});var a6e=s(v5);ide=n(a6e,"STRONG",{});var oot=s(ide);Oqo=r(oot,"speech_to_text"),oot.forEach(t),Xqo=r(a6e," \u2014 "),cN=n(a6e,"A",{href:!0});var rot=s(cN);Vqo=r(rot,"Speech2TextForConditionalGeneration"),rot.forEach(t),zqo=r(a6e," (Speech2Text model)"),a6e.forEach(t),Pke.forEach(t),Wqo=i(Yt),T5=n(Yt,"P",{});var n6e=s(T5);Qqo=r(n6e,"The model is set in evaluation mode by default using "),dde=n(n6e,"CODE",{});var tot=s(dde);Hqo=r(tot,"model.eval()"),tot.forEach(t),Uqo=r(n6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cde=n(n6e,"CODE",{});var aot=s(cde);Jqo=r(aot,"model.train()"),aot.forEach(t),n6e.forEach(t),Yqo=i(Yt),fde=n(Yt,"P",{});var not=s(fde);Kqo=r(not,"Examples:"),not.forEach(t),Zqo=i(Yt),m(pw.$$.fragment,Yt),Yt.forEach(t),Tl.forEach(t),ABe=i(c),qd=n(c,"H2",{class:!0});var $ke=s(qd);F5=n($ke,"A",{id:!0,class:!0,href:!0});var sot=s(F5);mde=n(sot,"SPAN",{});var lot=s(mde);m(_w.$$.fragment,lot),lot.forEach(t),sot.forEach(t),eGo=i($ke),gde=n($ke,"SPAN",{});var iot=s(gde);oGo=r(iot,"AutoModelForAudioXVector"),iot.forEach(t),$ke.forEach(t),LBe=i(c),cr=n(c,"DIV",{class:!0});var Cl=s(cr);m(uw.$$.fragment,Cl),rGo=i(Cl),Gd=n(Cl,"P",{});var vz=s(Gd);tGo=r(vz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),hde=n(vz,"CODE",{});var dot=s(hde);aGo=r(dot,"from_pretrained()"),dot.forEach(t),nGo=r(vz,"class method or the "),pde=n(vz,"CODE",{});var cot=s(pde);sGo=r(cot,"from_config()"),cot.forEach(t),lGo=r(vz,`class
method.`),vz.forEach(t),iGo=i(Cl),bw=n(Cl,"P",{});var Ike=s(bw);dGo=r(Ike,"This class cannot be instantiated directly using "),_de=n(Ike,"CODE",{});var fot=s(_de);cGo=r(fot,"__init__()"),fot.forEach(t),fGo=r(Ike," (throws an error)."),Ike.forEach(t),mGo=i(Cl),tt=n(Cl,"DIV",{class:!0});var Ml=s(tt);m(vw.$$.fragment,Ml),gGo=i(Ml),ude=n(Ml,"P",{});var mot=s(ude);hGo=r(mot,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),mot.forEach(t),pGo=i(Ml),Od=n(Ml,"P",{});var Tz=s(Od);_Go=r(Tz,`Note:
Loading a model from its configuration file does `),bde=n(Tz,"STRONG",{});var got=s(bde);uGo=r(got,"not"),got.forEach(t),bGo=r(Tz,` load the model weights. It only affects the
model\u2019s configuration. Use `),vde=n(Tz,"CODE",{});var hot=s(vde);vGo=r(hot,"from_pretrained()"),hot.forEach(t),TGo=r(Tz,"to load the model weights."),Tz.forEach(t),FGo=i(Ml),Tde=n(Ml,"P",{});var pot=s(Tde);CGo=r(pot,"Examples:"),pot.forEach(t),MGo=i(Ml),m(Tw.$$.fragment,Ml),Ml.forEach(t),EGo=i(Cl),Ue=n(Cl,"DIV",{class:!0});var Kt=s(Ue);m(Fw.$$.fragment,Kt),yGo=i(Kt),Fde=n(Kt,"P",{});var _ot=s(Fde);wGo=r(_ot,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),_ot.forEach(t),AGo=i(Kt),tn=n(Kt,"P",{});var W4=s(tn);LGo=r(W4,"The model class to instantiate is selected based on the "),Cde=n(W4,"CODE",{});var uot=s(Cde);BGo=r(uot,"model_type"),uot.forEach(t),xGo=r(W4,` property of the config object (either
passed as an argument or loaded from `),Mde=n(W4,"CODE",{});var bot=s(Mde);kGo=r(bot,"pretrained_model_name_or_path"),bot.forEach(t),RGo=r(W4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ede=n(W4,"CODE",{});var vot=s(Ede);SGo=r(vot,"pretrained_model_name_or_path"),vot.forEach(t),PGo=r(W4,":"),W4.forEach(t),$Go=i(Kt),an=n(Kt,"UL",{});var Q4=s(an);C5=n(Q4,"LI",{});var s6e=s(C5);yde=n(s6e,"STRONG",{});var Tot=s(yde);IGo=r(Tot,"data2vec-audio"),Tot.forEach(t),DGo=r(s6e," \u2014 "),fN=n(s6e,"A",{href:!0});var Fot=s(fN);jGo=r(Fot,"Data2VecAudioForXVector"),Fot.forEach(t),NGo=r(s6e," (Data2VecAudio model)"),s6e.forEach(t),qGo=i(Q4),M5=n(Q4,"LI",{});var l6e=s(M5);wde=n(l6e,"STRONG",{});var Cot=s(wde);GGo=r(Cot,"unispeech-sat"),Cot.forEach(t),OGo=r(l6e," \u2014 "),mN=n(l6e,"A",{href:!0});var Mot=s(mN);XGo=r(Mot,"UniSpeechSatForXVector"),Mot.forEach(t),VGo=r(l6e," (UniSpeechSat model)"),l6e.forEach(t),zGo=i(Q4),E5=n(Q4,"LI",{});var i6e=s(E5);Ade=n(i6e,"STRONG",{});var Eot=s(Ade);WGo=r(Eot,"wav2vec2"),Eot.forEach(t),QGo=r(i6e," \u2014 "),gN=n(i6e,"A",{href:!0});var yot=s(gN);HGo=r(yot,"Wav2Vec2ForXVector"),yot.forEach(t),UGo=r(i6e," (Wav2Vec2 model)"),i6e.forEach(t),JGo=i(Q4),y5=n(Q4,"LI",{});var d6e=s(y5);Lde=n(d6e,"STRONG",{});var wot=s(Lde);YGo=r(wot,"wavlm"),wot.forEach(t),KGo=r(d6e," \u2014 "),hN=n(d6e,"A",{href:!0});var Aot=s(hN);ZGo=r(Aot,"WavLMForXVector"),Aot.forEach(t),eOo=r(d6e," (WavLM model)"),d6e.forEach(t),Q4.forEach(t),oOo=i(Kt),w5=n(Kt,"P",{});var c6e=s(w5);rOo=r(c6e,"The model is set in evaluation mode by default using "),Bde=n(c6e,"CODE",{});var Lot=s(Bde);tOo=r(Lot,"model.eval()"),Lot.forEach(t),aOo=r(c6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xde=n(c6e,"CODE",{});var Bot=s(xde);nOo=r(Bot,"model.train()"),Bot.forEach(t),c6e.forEach(t),sOo=i(Kt),kde=n(Kt,"P",{});var xot=s(kde);lOo=r(xot,"Examples:"),xot.forEach(t),iOo=i(Kt),m(Cw.$$.fragment,Kt),Kt.forEach(t),Cl.forEach(t),BBe=i(c),Xd=n(c,"H2",{class:!0});var Dke=s(Xd);A5=n(Dke,"A",{id:!0,class:!0,href:!0});var kot=s(A5);Rde=n(kot,"SPAN",{});var Rot=s(Rde);m(Mw.$$.fragment,Rot),Rot.forEach(t),kot.forEach(t),dOo=i(Dke),Sde=n(Dke,"SPAN",{});var Sot=s(Sde);cOo=r(Sot,"AutoModelForMaskedImageModeling"),Sot.forEach(t),Dke.forEach(t),xBe=i(c),fr=n(c,"DIV",{class:!0});var El=s(fr);m(Ew.$$.fragment,El),fOo=i(El),Vd=n(El,"P",{});var Fz=s(Vd);mOo=r(Fz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Pde=n(Fz,"CODE",{});var Pot=s(Pde);gOo=r(Pot,"from_pretrained()"),Pot.forEach(t),hOo=r(Fz,"class method or the "),$de=n(Fz,"CODE",{});var $ot=s($de);pOo=r($ot,"from_config()"),$ot.forEach(t),_Oo=r(Fz,`class
method.`),Fz.forEach(t),uOo=i(El),yw=n(El,"P",{});var jke=s(yw);bOo=r(jke,"This class cannot be instantiated directly using "),Ide=n(jke,"CODE",{});var Iot=s(Ide);vOo=r(Iot,"__init__()"),Iot.forEach(t),TOo=r(jke," (throws an error)."),jke.forEach(t),FOo=i(El),at=n(El,"DIV",{class:!0});var yl=s(at);m(ww.$$.fragment,yl),COo=i(yl),Dde=n(yl,"P",{});var Dot=s(Dde);MOo=r(Dot,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Dot.forEach(t),EOo=i(yl),zd=n(yl,"P",{});var Cz=s(zd);yOo=r(Cz,`Note:
Loading a model from its configuration file does `),jde=n(Cz,"STRONG",{});var jot=s(jde);wOo=r(jot,"not"),jot.forEach(t),AOo=r(Cz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Nde=n(Cz,"CODE",{});var Not=s(Nde);LOo=r(Not,"from_pretrained()"),Not.forEach(t),BOo=r(Cz,"to load the model weights."),Cz.forEach(t),xOo=i(yl),qde=n(yl,"P",{});var qot=s(qde);kOo=r(qot,"Examples:"),qot.forEach(t),ROo=i(yl),m(Aw.$$.fragment,yl),yl.forEach(t),SOo=i(El),Je=n(El,"DIV",{class:!0});var Zt=s(Je);m(Lw.$$.fragment,Zt),POo=i(Zt),Gde=n(Zt,"P",{});var Got=s(Gde);$Oo=r(Got,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Got.forEach(t),IOo=i(Zt),nn=n(Zt,"P",{});var H4=s(nn);DOo=r(H4,"The model class to instantiate is selected based on the "),Ode=n(H4,"CODE",{});var Oot=s(Ode);jOo=r(Oot,"model_type"),Oot.forEach(t),NOo=r(H4,` property of the config object (either
passed as an argument or loaded from `),Xde=n(H4,"CODE",{});var Xot=s(Xde);qOo=r(Xot,"pretrained_model_name_or_path"),Xot.forEach(t),GOo=r(H4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vde=n(H4,"CODE",{});var Vot=s(Vde);OOo=r(Vot,"pretrained_model_name_or_path"),Vot.forEach(t),XOo=r(H4,":"),H4.forEach(t),VOo=i(Zt),Wd=n(Zt,"UL",{});var Mz=s(Wd);L5=n(Mz,"LI",{});var f6e=s(L5);zde=n(f6e,"STRONG",{});var zot=s(zde);zOo=r(zot,"deit"),zot.forEach(t),WOo=r(f6e," \u2014 "),pN=n(f6e,"A",{href:!0});var Wot=s(pN);QOo=r(Wot,"DeiTForMaskedImageModeling"),Wot.forEach(t),HOo=r(f6e," (DeiT model)"),f6e.forEach(t),UOo=i(Mz),B5=n(Mz,"LI",{});var m6e=s(B5);Wde=n(m6e,"STRONG",{});var Qot=s(Wde);JOo=r(Qot,"swin"),Qot.forEach(t),YOo=r(m6e," \u2014 "),_N=n(m6e,"A",{href:!0});var Hot=s(_N);KOo=r(Hot,"SwinForMaskedImageModeling"),Hot.forEach(t),ZOo=r(m6e," (Swin model)"),m6e.forEach(t),eXo=i(Mz),x5=n(Mz,"LI",{});var g6e=s(x5);Qde=n(g6e,"STRONG",{});var Uot=s(Qde);oXo=r(Uot,"vit"),Uot.forEach(t),rXo=r(g6e," \u2014 "),uN=n(g6e,"A",{href:!0});var Jot=s(uN);tXo=r(Jot,"ViTForMaskedImageModeling"),Jot.forEach(t),aXo=r(g6e," (ViT model)"),g6e.forEach(t),Mz.forEach(t),nXo=i(Zt),k5=n(Zt,"P",{});var h6e=s(k5);sXo=r(h6e,"The model is set in evaluation mode by default using "),Hde=n(h6e,"CODE",{});var Yot=s(Hde);lXo=r(Yot,"model.eval()"),Yot.forEach(t),iXo=r(h6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ude=n(h6e,"CODE",{});var Kot=s(Ude);dXo=r(Kot,"model.train()"),Kot.forEach(t),h6e.forEach(t),cXo=i(Zt),Jde=n(Zt,"P",{});var Zot=s(Jde);fXo=r(Zot,"Examples:"),Zot.forEach(t),mXo=i(Zt),m(Bw.$$.fragment,Zt),Zt.forEach(t),El.forEach(t),kBe=i(c),Qd=n(c,"H2",{class:!0});var Nke=s(Qd);R5=n(Nke,"A",{id:!0,class:!0,href:!0});var ert=s(R5);Yde=n(ert,"SPAN",{});var ort=s(Yde);m(xw.$$.fragment,ort),ort.forEach(t),ert.forEach(t),gXo=i(Nke),Kde=n(Nke,"SPAN",{});var rrt=s(Kde);hXo=r(rrt,"AutoModelForObjectDetection"),rrt.forEach(t),Nke.forEach(t),RBe=i(c),mr=n(c,"DIV",{class:!0});var wl=s(mr);m(kw.$$.fragment,wl),pXo=i(wl),Hd=n(wl,"P",{});var Ez=s(Hd);_Xo=r(Ez,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Zde=n(Ez,"CODE",{});var trt=s(Zde);uXo=r(trt,"from_pretrained()"),trt.forEach(t),bXo=r(Ez,"class method or the "),ece=n(Ez,"CODE",{});var art=s(ece);vXo=r(art,"from_config()"),art.forEach(t),TXo=r(Ez,`class
method.`),Ez.forEach(t),FXo=i(wl),Rw=n(wl,"P",{});var qke=s(Rw);CXo=r(qke,"This class cannot be instantiated directly using "),oce=n(qke,"CODE",{});var nrt=s(oce);MXo=r(nrt,"__init__()"),nrt.forEach(t),EXo=r(qke," (throws an error)."),qke.forEach(t),yXo=i(wl),nt=n(wl,"DIV",{class:!0});var Al=s(nt);m(Sw.$$.fragment,Al),wXo=i(Al),rce=n(Al,"P",{});var srt=s(rce);AXo=r(srt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),srt.forEach(t),LXo=i(Al),Ud=n(Al,"P",{});var yz=s(Ud);BXo=r(yz,`Note:
Loading a model from its configuration file does `),tce=n(yz,"STRONG",{});var lrt=s(tce);xXo=r(lrt,"not"),lrt.forEach(t),kXo=r(yz,` load the model weights. It only affects the
model\u2019s configuration. Use `),ace=n(yz,"CODE",{});var irt=s(ace);RXo=r(irt,"from_pretrained()"),irt.forEach(t),SXo=r(yz,"to load the model weights."),yz.forEach(t),PXo=i(Al),nce=n(Al,"P",{});var drt=s(nce);$Xo=r(drt,"Examples:"),drt.forEach(t),IXo=i(Al),m(Pw.$$.fragment,Al),Al.forEach(t),DXo=i(wl),Ye=n(wl,"DIV",{class:!0});var ea=s(Ye);m($w.$$.fragment,ea),jXo=i(ea),sce=n(ea,"P",{});var crt=s(sce);NXo=r(crt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),crt.forEach(t),qXo=i(ea),sn=n(ea,"P",{});var U4=s(sn);GXo=r(U4,"The model class to instantiate is selected based on the "),lce=n(U4,"CODE",{});var frt=s(lce);OXo=r(frt,"model_type"),frt.forEach(t),XXo=r(U4,` property of the config object (either
passed as an argument or loaded from `),ice=n(U4,"CODE",{});var mrt=s(ice);VXo=r(mrt,"pretrained_model_name_or_path"),mrt.forEach(t),zXo=r(U4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dce=n(U4,"CODE",{});var grt=s(dce);WXo=r(grt,"pretrained_model_name_or_path"),grt.forEach(t),QXo=r(U4,":"),U4.forEach(t),HXo=i(ea),cce=n(ea,"UL",{});var hrt=s(cce);S5=n(hrt,"LI",{});var p6e=s(S5);fce=n(p6e,"STRONG",{});var prt=s(fce);UXo=r(prt,"detr"),prt.forEach(t),JXo=r(p6e," \u2014 "),bN=n(p6e,"A",{href:!0});var _rt=s(bN);YXo=r(_rt,"DetrForObjectDetection"),_rt.forEach(t),KXo=r(p6e," (DETR model)"),p6e.forEach(t),hrt.forEach(t),ZXo=i(ea),P5=n(ea,"P",{});var _6e=s(P5);eVo=r(_6e,"The model is set in evaluation mode by default using "),mce=n(_6e,"CODE",{});var urt=s(mce);oVo=r(urt,"model.eval()"),urt.forEach(t),rVo=r(_6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gce=n(_6e,"CODE",{});var brt=s(gce);tVo=r(brt,"model.train()"),brt.forEach(t),_6e.forEach(t),aVo=i(ea),hce=n(ea,"P",{});var vrt=s(hce);nVo=r(vrt,"Examples:"),vrt.forEach(t),sVo=i(ea),m(Iw.$$.fragment,ea),ea.forEach(t),wl.forEach(t),SBe=i(c),Jd=n(c,"H2",{class:!0});var Gke=s(Jd);$5=n(Gke,"A",{id:!0,class:!0,href:!0});var Trt=s($5);pce=n(Trt,"SPAN",{});var Frt=s(pce);m(Dw.$$.fragment,Frt),Frt.forEach(t),Trt.forEach(t),lVo=i(Gke),_ce=n(Gke,"SPAN",{});var Crt=s(_ce);iVo=r(Crt,"AutoModelForImageSegmentation"),Crt.forEach(t),Gke.forEach(t),PBe=i(c),gr=n(c,"DIV",{class:!0});var Ll=s(gr);m(jw.$$.fragment,Ll),dVo=i(Ll),Yd=n(Ll,"P",{});var wz=s(Yd);cVo=r(wz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),uce=n(wz,"CODE",{});var Mrt=s(uce);fVo=r(Mrt,"from_pretrained()"),Mrt.forEach(t),mVo=r(wz,"class method or the "),bce=n(wz,"CODE",{});var Ert=s(bce);gVo=r(Ert,"from_config()"),Ert.forEach(t),hVo=r(wz,`class
method.`),wz.forEach(t),pVo=i(Ll),Nw=n(Ll,"P",{});var Oke=s(Nw);_Vo=r(Oke,"This class cannot be instantiated directly using "),vce=n(Oke,"CODE",{});var yrt=s(vce);uVo=r(yrt,"__init__()"),yrt.forEach(t),bVo=r(Oke," (throws an error)."),Oke.forEach(t),vVo=i(Ll),st=n(Ll,"DIV",{class:!0});var Bl=s(st);m(qw.$$.fragment,Bl),TVo=i(Bl),Tce=n(Bl,"P",{});var wrt=s(Tce);FVo=r(wrt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),wrt.forEach(t),CVo=i(Bl),Kd=n(Bl,"P",{});var Az=s(Kd);MVo=r(Az,`Note:
Loading a model from its configuration file does `),Fce=n(Az,"STRONG",{});var Art=s(Fce);EVo=r(Art,"not"),Art.forEach(t),yVo=r(Az,` load the model weights. It only affects the
model\u2019s configuration. Use `),Cce=n(Az,"CODE",{});var Lrt=s(Cce);wVo=r(Lrt,"from_pretrained()"),Lrt.forEach(t),AVo=r(Az,"to load the model weights."),Az.forEach(t),LVo=i(Bl),Mce=n(Bl,"P",{});var Brt=s(Mce);BVo=r(Brt,"Examples:"),Brt.forEach(t),xVo=i(Bl),m(Gw.$$.fragment,Bl),Bl.forEach(t),kVo=i(Ll),Ke=n(Ll,"DIV",{class:!0});var oa=s(Ke);m(Ow.$$.fragment,oa),RVo=i(oa),Ece=n(oa,"P",{});var xrt=s(Ece);SVo=r(xrt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),xrt.forEach(t),PVo=i(oa),ln=n(oa,"P",{});var J4=s(ln);$Vo=r(J4,"The model class to instantiate is selected based on the "),yce=n(J4,"CODE",{});var krt=s(yce);IVo=r(krt,"model_type"),krt.forEach(t),DVo=r(J4,` property of the config object (either
passed as an argument or loaded from `),wce=n(J4,"CODE",{});var Rrt=s(wce);jVo=r(Rrt,"pretrained_model_name_or_path"),Rrt.forEach(t),NVo=r(J4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ace=n(J4,"CODE",{});var Srt=s(Ace);qVo=r(Srt,"pretrained_model_name_or_path"),Srt.forEach(t),GVo=r(J4,":"),J4.forEach(t),OVo=i(oa),Lce=n(oa,"UL",{});var Prt=s(Lce);I5=n(Prt,"LI",{});var u6e=s(I5);Bce=n(u6e,"STRONG",{});var $rt=s(Bce);XVo=r($rt,"detr"),$rt.forEach(t),VVo=r(u6e," \u2014 "),vN=n(u6e,"A",{href:!0});var Irt=s(vN);zVo=r(Irt,"DetrForSegmentation"),Irt.forEach(t),WVo=r(u6e," (DETR model)"),u6e.forEach(t),Prt.forEach(t),QVo=i(oa),D5=n(oa,"P",{});var b6e=s(D5);HVo=r(b6e,"The model is set in evaluation mode by default using "),xce=n(b6e,"CODE",{});var Drt=s(xce);UVo=r(Drt,"model.eval()"),Drt.forEach(t),JVo=r(b6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kce=n(b6e,"CODE",{});var jrt=s(kce);YVo=r(jrt,"model.train()"),jrt.forEach(t),b6e.forEach(t),KVo=i(oa),Rce=n(oa,"P",{});var Nrt=s(Rce);ZVo=r(Nrt,"Examples:"),Nrt.forEach(t),ezo=i(oa),m(Xw.$$.fragment,oa),oa.forEach(t),Ll.forEach(t),$Be=i(c),Zd=n(c,"H2",{class:!0});var Xke=s(Zd);j5=n(Xke,"A",{id:!0,class:!0,href:!0});var qrt=s(j5);Sce=n(qrt,"SPAN",{});var Grt=s(Sce);m(Vw.$$.fragment,Grt),Grt.forEach(t),qrt.forEach(t),ozo=i(Xke),Pce=n(Xke,"SPAN",{});var Ort=s(Pce);rzo=r(Ort,"AutoModelForSemanticSegmentation"),Ort.forEach(t),Xke.forEach(t),IBe=i(c),hr=n(c,"DIV",{class:!0});var xl=s(hr);m(zw.$$.fragment,xl),tzo=i(xl),ec=n(xl,"P",{});var Lz=s(ec);azo=r(Lz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),$ce=n(Lz,"CODE",{});var Xrt=s($ce);nzo=r(Xrt,"from_pretrained()"),Xrt.forEach(t),szo=r(Lz,"class method or the "),Ice=n(Lz,"CODE",{});var Vrt=s(Ice);lzo=r(Vrt,"from_config()"),Vrt.forEach(t),izo=r(Lz,`class
method.`),Lz.forEach(t),dzo=i(xl),Ww=n(xl,"P",{});var Vke=s(Ww);czo=r(Vke,"This class cannot be instantiated directly using "),Dce=n(Vke,"CODE",{});var zrt=s(Dce);fzo=r(zrt,"__init__()"),zrt.forEach(t),mzo=r(Vke," (throws an error)."),Vke.forEach(t),gzo=i(xl),lt=n(xl,"DIV",{class:!0});var kl=s(lt);m(Qw.$$.fragment,kl),hzo=i(kl),jce=n(kl,"P",{});var Wrt=s(jce);pzo=r(Wrt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Wrt.forEach(t),_zo=i(kl),oc=n(kl,"P",{});var Bz=s(oc);uzo=r(Bz,`Note:
Loading a model from its configuration file does `),Nce=n(Bz,"STRONG",{});var Qrt=s(Nce);bzo=r(Qrt,"not"),Qrt.forEach(t),vzo=r(Bz,` load the model weights. It only affects the
model\u2019s configuration. Use `),qce=n(Bz,"CODE",{});var Hrt=s(qce);Tzo=r(Hrt,"from_pretrained()"),Hrt.forEach(t),Fzo=r(Bz,"to load the model weights."),Bz.forEach(t),Czo=i(kl),Gce=n(kl,"P",{});var Urt=s(Gce);Mzo=r(Urt,"Examples:"),Urt.forEach(t),Ezo=i(kl),m(Hw.$$.fragment,kl),kl.forEach(t),yzo=i(xl),Ze=n(xl,"DIV",{class:!0});var ra=s(Ze);m(Uw.$$.fragment,ra),wzo=i(ra),Oce=n(ra,"P",{});var Jrt=s(Oce);Azo=r(Jrt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Jrt.forEach(t),Lzo=i(ra),dn=n(ra,"P",{});var Y4=s(dn);Bzo=r(Y4,"The model class to instantiate is selected based on the "),Xce=n(Y4,"CODE",{});var Yrt=s(Xce);xzo=r(Yrt,"model_type"),Yrt.forEach(t),kzo=r(Y4,` property of the config object (either
passed as an argument or loaded from `),Vce=n(Y4,"CODE",{});var Krt=s(Vce);Rzo=r(Krt,"pretrained_model_name_or_path"),Krt.forEach(t),Szo=r(Y4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zce=n(Y4,"CODE",{});var Zrt=s(zce);Pzo=r(Zrt,"pretrained_model_name_or_path"),Zrt.forEach(t),$zo=r(Y4,":"),Y4.forEach(t),Izo=i(ra),Jw=n(ra,"UL",{});var zke=s(Jw);N5=n(zke,"LI",{});var v6e=s(N5);Wce=n(v6e,"STRONG",{});var ett=s(Wce);Dzo=r(ett,"beit"),ett.forEach(t),jzo=r(v6e," \u2014 "),TN=n(v6e,"A",{href:!0});var ott=s(TN);Nzo=r(ott,"BeitForSemanticSegmentation"),ott.forEach(t),qzo=r(v6e," (BEiT model)"),v6e.forEach(t),Gzo=i(zke),q5=n(zke,"LI",{});var T6e=s(q5);Qce=n(T6e,"STRONG",{});var rtt=s(Qce);Ozo=r(rtt,"segformer"),rtt.forEach(t),Xzo=r(T6e," \u2014 "),FN=n(T6e,"A",{href:!0});var ttt=s(FN);Vzo=r(ttt,"SegformerForSemanticSegmentation"),ttt.forEach(t),zzo=r(T6e," (SegFormer model)"),T6e.forEach(t),zke.forEach(t),Wzo=i(ra),G5=n(ra,"P",{});var F6e=s(G5);Qzo=r(F6e,"The model is set in evaluation mode by default using "),Hce=n(F6e,"CODE",{});var att=s(Hce);Hzo=r(att,"model.eval()"),att.forEach(t),Uzo=r(F6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Uce=n(F6e,"CODE",{});var ntt=s(Uce);Jzo=r(ntt,"model.train()"),ntt.forEach(t),F6e.forEach(t),Yzo=i(ra),Jce=n(ra,"P",{});var stt=s(Jce);Kzo=r(stt,"Examples:"),stt.forEach(t),Zzo=i(ra),m(Yw.$$.fragment,ra),ra.forEach(t),xl.forEach(t),DBe=i(c),rc=n(c,"H2",{class:!0});var Wke=s(rc);O5=n(Wke,"A",{id:!0,class:!0,href:!0});var ltt=s(O5);Yce=n(ltt,"SPAN",{});var itt=s(Yce);m(Kw.$$.fragment,itt),itt.forEach(t),ltt.forEach(t),eWo=i(Wke),Kce=n(Wke,"SPAN",{});var dtt=s(Kce);oWo=r(dtt,"TFAutoModel"),dtt.forEach(t),Wke.forEach(t),jBe=i(c),pr=n(c,"DIV",{class:!0});var Rl=s(pr);m(Zw.$$.fragment,Rl),rWo=i(Rl),tc=n(Rl,"P",{});var xz=s(tc);tWo=r(xz,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Zce=n(xz,"CODE",{});var ctt=s(Zce);aWo=r(ctt,"from_pretrained()"),ctt.forEach(t),nWo=r(xz,"class method or the "),efe=n(xz,"CODE",{});var ftt=s(efe);sWo=r(ftt,"from_config()"),ftt.forEach(t),lWo=r(xz,`class
method.`),xz.forEach(t),iWo=i(Rl),e6=n(Rl,"P",{});var Qke=s(e6);dWo=r(Qke,"This class cannot be instantiated directly using "),ofe=n(Qke,"CODE",{});var mtt=s(ofe);cWo=r(mtt,"__init__()"),mtt.forEach(t),fWo=r(Qke," (throws an error)."),Qke.forEach(t),mWo=i(Rl),it=n(Rl,"DIV",{class:!0});var Sl=s(it);m(o6.$$.fragment,Sl),gWo=i(Sl),rfe=n(Sl,"P",{});var gtt=s(rfe);hWo=r(gtt,"Instantiates one of the base model classes of the library from a configuration."),gtt.forEach(t),pWo=i(Sl),ac=n(Sl,"P",{});var kz=s(ac);_Wo=r(kz,`Note:
Loading a model from its configuration file does `),tfe=n(kz,"STRONG",{});var htt=s(tfe);uWo=r(htt,"not"),htt.forEach(t),bWo=r(kz,` load the model weights. It only affects the
model\u2019s configuration. Use `),afe=n(kz,"CODE",{});var ptt=s(afe);vWo=r(ptt,"from_pretrained()"),ptt.forEach(t),TWo=r(kz,"to load the model weights."),kz.forEach(t),FWo=i(Sl),nfe=n(Sl,"P",{});var _tt=s(nfe);CWo=r(_tt,"Examples:"),_tt.forEach(t),MWo=i(Sl),m(r6.$$.fragment,Sl),Sl.forEach(t),EWo=i(Rl),go=n(Rl,"DIV",{class:!0});var ca=s(go);m(t6.$$.fragment,ca),yWo=i(ca),sfe=n(ca,"P",{});var utt=s(sfe);wWo=r(utt,"Instantiate one of the base model classes of the library from a pretrained model."),utt.forEach(t),AWo=i(ca),cn=n(ca,"P",{});var K4=s(cn);LWo=r(K4,"The model class to instantiate is selected based on the "),lfe=n(K4,"CODE",{});var btt=s(lfe);BWo=r(btt,"model_type"),btt.forEach(t),xWo=r(K4,` property of the config object (either
passed as an argument or loaded from `),ife=n(K4,"CODE",{});var vtt=s(ife);kWo=r(vtt,"pretrained_model_name_or_path"),vtt.forEach(t),RWo=r(K4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dfe=n(K4,"CODE",{});var Ttt=s(dfe);SWo=r(Ttt,"pretrained_model_name_or_path"),Ttt.forEach(t),PWo=r(K4,":"),K4.forEach(t),$Wo=i(ca),B=n(ca,"UL",{});var x=s(B);X5=n(x,"LI",{});var C6e=s(X5);cfe=n(C6e,"STRONG",{});var Ftt=s(cfe);IWo=r(Ftt,"albert"),Ftt.forEach(t),DWo=r(C6e," \u2014 "),CN=n(C6e,"A",{href:!0});var Ctt=s(CN);jWo=r(Ctt,"TFAlbertModel"),Ctt.forEach(t),NWo=r(C6e," (ALBERT model)"),C6e.forEach(t),qWo=i(x),V5=n(x,"LI",{});var M6e=s(V5);ffe=n(M6e,"STRONG",{});var Mtt=s(ffe);GWo=r(Mtt,"bart"),Mtt.forEach(t),OWo=r(M6e," \u2014 "),MN=n(M6e,"A",{href:!0});var Ett=s(MN);XWo=r(Ett,"TFBartModel"),Ett.forEach(t),VWo=r(M6e," (BART model)"),M6e.forEach(t),zWo=i(x),z5=n(x,"LI",{});var E6e=s(z5);mfe=n(E6e,"STRONG",{});var ytt=s(mfe);WWo=r(ytt,"bert"),ytt.forEach(t),QWo=r(E6e," \u2014 "),EN=n(E6e,"A",{href:!0});var wtt=s(EN);HWo=r(wtt,"TFBertModel"),wtt.forEach(t),UWo=r(E6e," (BERT model)"),E6e.forEach(t),JWo=i(x),W5=n(x,"LI",{});var y6e=s(W5);gfe=n(y6e,"STRONG",{});var Att=s(gfe);YWo=r(Att,"blenderbot"),Att.forEach(t),KWo=r(y6e," \u2014 "),yN=n(y6e,"A",{href:!0});var Ltt=s(yN);ZWo=r(Ltt,"TFBlenderbotModel"),Ltt.forEach(t),eQo=r(y6e," (Blenderbot model)"),y6e.forEach(t),oQo=i(x),Q5=n(x,"LI",{});var w6e=s(Q5);hfe=n(w6e,"STRONG",{});var Btt=s(hfe);rQo=r(Btt,"blenderbot-small"),Btt.forEach(t),tQo=r(w6e," \u2014 "),wN=n(w6e,"A",{href:!0});var xtt=s(wN);aQo=r(xtt,"TFBlenderbotSmallModel"),xtt.forEach(t),nQo=r(w6e," (BlenderbotSmall model)"),w6e.forEach(t),sQo=i(x),H5=n(x,"LI",{});var A6e=s(H5);pfe=n(A6e,"STRONG",{});var ktt=s(pfe);lQo=r(ktt,"camembert"),ktt.forEach(t),iQo=r(A6e," \u2014 "),AN=n(A6e,"A",{href:!0});var Rtt=s(AN);dQo=r(Rtt,"TFCamembertModel"),Rtt.forEach(t),cQo=r(A6e," (CamemBERT model)"),A6e.forEach(t),fQo=i(x),U5=n(x,"LI",{});var L6e=s(U5);_fe=n(L6e,"STRONG",{});var Stt=s(_fe);mQo=r(Stt,"clip"),Stt.forEach(t),gQo=r(L6e," \u2014 "),LN=n(L6e,"A",{href:!0});var Ptt=s(LN);hQo=r(Ptt,"TFCLIPModel"),Ptt.forEach(t),pQo=r(L6e," (CLIP model)"),L6e.forEach(t),_Qo=i(x),J5=n(x,"LI",{});var B6e=s(J5);ufe=n(B6e,"STRONG",{});var $tt=s(ufe);uQo=r($tt,"convbert"),$tt.forEach(t),bQo=r(B6e," \u2014 "),BN=n(B6e,"A",{href:!0});var Itt=s(BN);vQo=r(Itt,"TFConvBertModel"),Itt.forEach(t),TQo=r(B6e," (ConvBERT model)"),B6e.forEach(t),FQo=i(x),Y5=n(x,"LI",{});var x6e=s(Y5);bfe=n(x6e,"STRONG",{});var Dtt=s(bfe);CQo=r(Dtt,"convnext"),Dtt.forEach(t),MQo=r(x6e," \u2014 "),xN=n(x6e,"A",{href:!0});var jtt=s(xN);EQo=r(jtt,"TFConvNextModel"),jtt.forEach(t),yQo=r(x6e," (ConvNext model)"),x6e.forEach(t),wQo=i(x),K5=n(x,"LI",{});var k6e=s(K5);vfe=n(k6e,"STRONG",{});var Ntt=s(vfe);AQo=r(Ntt,"ctrl"),Ntt.forEach(t),LQo=r(k6e," \u2014 "),kN=n(k6e,"A",{href:!0});var qtt=s(kN);BQo=r(qtt,"TFCTRLModel"),qtt.forEach(t),xQo=r(k6e," (CTRL model)"),k6e.forEach(t),kQo=i(x),Z5=n(x,"LI",{});var R6e=s(Z5);Tfe=n(R6e,"STRONG",{});var Gtt=s(Tfe);RQo=r(Gtt,"deberta"),Gtt.forEach(t),SQo=r(R6e," \u2014 "),RN=n(R6e,"A",{href:!0});var Ott=s(RN);PQo=r(Ott,"TFDebertaModel"),Ott.forEach(t),$Qo=r(R6e," (DeBERTa model)"),R6e.forEach(t),IQo=i(x),ev=n(x,"LI",{});var S6e=s(ev);Ffe=n(S6e,"STRONG",{});var Xtt=s(Ffe);DQo=r(Xtt,"deberta-v2"),Xtt.forEach(t),jQo=r(S6e," \u2014 "),SN=n(S6e,"A",{href:!0});var Vtt=s(SN);NQo=r(Vtt,"TFDebertaV2Model"),Vtt.forEach(t),qQo=r(S6e," (DeBERTa-v2 model)"),S6e.forEach(t),GQo=i(x),ov=n(x,"LI",{});var P6e=s(ov);Cfe=n(P6e,"STRONG",{});var ztt=s(Cfe);OQo=r(ztt,"distilbert"),ztt.forEach(t),XQo=r(P6e," \u2014 "),PN=n(P6e,"A",{href:!0});var Wtt=s(PN);VQo=r(Wtt,"TFDistilBertModel"),Wtt.forEach(t),zQo=r(P6e," (DistilBERT model)"),P6e.forEach(t),WQo=i(x),rv=n(x,"LI",{});var $6e=s(rv);Mfe=n($6e,"STRONG",{});var Qtt=s(Mfe);QQo=r(Qtt,"dpr"),Qtt.forEach(t),HQo=r($6e," \u2014 "),$N=n($6e,"A",{href:!0});var Htt=s($N);UQo=r(Htt,"TFDPRQuestionEncoder"),Htt.forEach(t),JQo=r($6e," (DPR model)"),$6e.forEach(t),YQo=i(x),tv=n(x,"LI",{});var I6e=s(tv);Efe=n(I6e,"STRONG",{});var Utt=s(Efe);KQo=r(Utt,"electra"),Utt.forEach(t),ZQo=r(I6e," \u2014 "),IN=n(I6e,"A",{href:!0});var Jtt=s(IN);eHo=r(Jtt,"TFElectraModel"),Jtt.forEach(t),oHo=r(I6e," (ELECTRA model)"),I6e.forEach(t),rHo=i(x),av=n(x,"LI",{});var D6e=s(av);yfe=n(D6e,"STRONG",{});var Ytt=s(yfe);tHo=r(Ytt,"flaubert"),Ytt.forEach(t),aHo=r(D6e," \u2014 "),DN=n(D6e,"A",{href:!0});var Ktt=s(DN);nHo=r(Ktt,"TFFlaubertModel"),Ktt.forEach(t),sHo=r(D6e," (FlauBERT model)"),D6e.forEach(t),lHo=i(x),Is=n(x,"LI",{});var d8=s(Is);wfe=n(d8,"STRONG",{});var Ztt=s(wfe);iHo=r(Ztt,"funnel"),Ztt.forEach(t),dHo=r(d8," \u2014 "),jN=n(d8,"A",{href:!0});var eat=s(jN);cHo=r(eat,"TFFunnelModel"),eat.forEach(t),fHo=r(d8," or "),NN=n(d8,"A",{href:!0});var oat=s(NN);mHo=r(oat,"TFFunnelBaseModel"),oat.forEach(t),gHo=r(d8," (Funnel Transformer model)"),d8.forEach(t),hHo=i(x),nv=n(x,"LI",{});var j6e=s(nv);Afe=n(j6e,"STRONG",{});var rat=s(Afe);pHo=r(rat,"gpt2"),rat.forEach(t),_Ho=r(j6e," \u2014 "),qN=n(j6e,"A",{href:!0});var tat=s(qN);uHo=r(tat,"TFGPT2Model"),tat.forEach(t),bHo=r(j6e," (OpenAI GPT-2 model)"),j6e.forEach(t),vHo=i(x),sv=n(x,"LI",{});var N6e=s(sv);Lfe=n(N6e,"STRONG",{});var aat=s(Lfe);THo=r(aat,"hubert"),aat.forEach(t),FHo=r(N6e," \u2014 "),GN=n(N6e,"A",{href:!0});var nat=s(GN);CHo=r(nat,"TFHubertModel"),nat.forEach(t),MHo=r(N6e," (Hubert model)"),N6e.forEach(t),EHo=i(x),lv=n(x,"LI",{});var q6e=s(lv);Bfe=n(q6e,"STRONG",{});var sat=s(Bfe);yHo=r(sat,"layoutlm"),sat.forEach(t),wHo=r(q6e," \u2014 "),ON=n(q6e,"A",{href:!0});var lat=s(ON);AHo=r(lat,"TFLayoutLMModel"),lat.forEach(t),LHo=r(q6e," (LayoutLM model)"),q6e.forEach(t),BHo=i(x),iv=n(x,"LI",{});var G6e=s(iv);xfe=n(G6e,"STRONG",{});var iat=s(xfe);xHo=r(iat,"led"),iat.forEach(t),kHo=r(G6e," \u2014 "),XN=n(G6e,"A",{href:!0});var dat=s(XN);RHo=r(dat,"TFLEDModel"),dat.forEach(t),SHo=r(G6e," (LED model)"),G6e.forEach(t),PHo=i(x),dv=n(x,"LI",{});var O6e=s(dv);kfe=n(O6e,"STRONG",{});var cat=s(kfe);$Ho=r(cat,"longformer"),cat.forEach(t),IHo=r(O6e," \u2014 "),VN=n(O6e,"A",{href:!0});var fat=s(VN);DHo=r(fat,"TFLongformerModel"),fat.forEach(t),jHo=r(O6e," (Longformer model)"),O6e.forEach(t),NHo=i(x),cv=n(x,"LI",{});var X6e=s(cv);Rfe=n(X6e,"STRONG",{});var mat=s(Rfe);qHo=r(mat,"lxmert"),mat.forEach(t),GHo=r(X6e," \u2014 "),zN=n(X6e,"A",{href:!0});var gat=s(zN);OHo=r(gat,"TFLxmertModel"),gat.forEach(t),XHo=r(X6e," (LXMERT model)"),X6e.forEach(t),VHo=i(x),fv=n(x,"LI",{});var V6e=s(fv);Sfe=n(V6e,"STRONG",{});var hat=s(Sfe);zHo=r(hat,"marian"),hat.forEach(t),WHo=r(V6e," \u2014 "),WN=n(V6e,"A",{href:!0});var pat=s(WN);QHo=r(pat,"TFMarianModel"),pat.forEach(t),HHo=r(V6e," (Marian model)"),V6e.forEach(t),UHo=i(x),mv=n(x,"LI",{});var z6e=s(mv);Pfe=n(z6e,"STRONG",{});var _at=s(Pfe);JHo=r(_at,"mbart"),_at.forEach(t),YHo=r(z6e," \u2014 "),QN=n(z6e,"A",{href:!0});var uat=s(QN);KHo=r(uat,"TFMBartModel"),uat.forEach(t),ZHo=r(z6e," (mBART model)"),z6e.forEach(t),eUo=i(x),gv=n(x,"LI",{});var W6e=s(gv);$fe=n(W6e,"STRONG",{});var bat=s($fe);oUo=r(bat,"mobilebert"),bat.forEach(t),rUo=r(W6e," \u2014 "),HN=n(W6e,"A",{href:!0});var vat=s(HN);tUo=r(vat,"TFMobileBertModel"),vat.forEach(t),aUo=r(W6e," (MobileBERT model)"),W6e.forEach(t),nUo=i(x),hv=n(x,"LI",{});var Q6e=s(hv);Ife=n(Q6e,"STRONG",{});var Tat=s(Ife);sUo=r(Tat,"mpnet"),Tat.forEach(t),lUo=r(Q6e," \u2014 "),UN=n(Q6e,"A",{href:!0});var Fat=s(UN);iUo=r(Fat,"TFMPNetModel"),Fat.forEach(t),dUo=r(Q6e," (MPNet model)"),Q6e.forEach(t),cUo=i(x),pv=n(x,"LI",{});var H6e=s(pv);Dfe=n(H6e,"STRONG",{});var Cat=s(Dfe);fUo=r(Cat,"mt5"),Cat.forEach(t),mUo=r(H6e," \u2014 "),JN=n(H6e,"A",{href:!0});var Mat=s(JN);gUo=r(Mat,"TFMT5Model"),Mat.forEach(t),hUo=r(H6e," (mT5 model)"),H6e.forEach(t),pUo=i(x),_v=n(x,"LI",{});var U6e=s(_v);jfe=n(U6e,"STRONG",{});var Eat=s(jfe);_Uo=r(Eat,"openai-gpt"),Eat.forEach(t),uUo=r(U6e," \u2014 "),YN=n(U6e,"A",{href:!0});var yat=s(YN);bUo=r(yat,"TFOpenAIGPTModel"),yat.forEach(t),vUo=r(U6e," (OpenAI GPT model)"),U6e.forEach(t),TUo=i(x),uv=n(x,"LI",{});var J6e=s(uv);Nfe=n(J6e,"STRONG",{});var wat=s(Nfe);FUo=r(wat,"pegasus"),wat.forEach(t),CUo=r(J6e," \u2014 "),KN=n(J6e,"A",{href:!0});var Aat=s(KN);MUo=r(Aat,"TFPegasusModel"),Aat.forEach(t),EUo=r(J6e," (Pegasus model)"),J6e.forEach(t),yUo=i(x),bv=n(x,"LI",{});var Y6e=s(bv);qfe=n(Y6e,"STRONG",{});var Lat=s(qfe);wUo=r(Lat,"rembert"),Lat.forEach(t),AUo=r(Y6e," \u2014 "),ZN=n(Y6e,"A",{href:!0});var Bat=s(ZN);LUo=r(Bat,"TFRemBertModel"),Bat.forEach(t),BUo=r(Y6e," (RemBERT model)"),Y6e.forEach(t),xUo=i(x),vv=n(x,"LI",{});var K6e=s(vv);Gfe=n(K6e,"STRONG",{});var xat=s(Gfe);kUo=r(xat,"roberta"),xat.forEach(t),RUo=r(K6e," \u2014 "),eq=n(K6e,"A",{href:!0});var kat=s(eq);SUo=r(kat,"TFRobertaModel"),kat.forEach(t),PUo=r(K6e," (RoBERTa model)"),K6e.forEach(t),$Uo=i(x),Tv=n(x,"LI",{});var Z6e=s(Tv);Ofe=n(Z6e,"STRONG",{});var Rat=s(Ofe);IUo=r(Rat,"roformer"),Rat.forEach(t),DUo=r(Z6e," \u2014 "),oq=n(Z6e,"A",{href:!0});var Sat=s(oq);jUo=r(Sat,"TFRoFormerModel"),Sat.forEach(t),NUo=r(Z6e," (RoFormer model)"),Z6e.forEach(t),qUo=i(x),Fv=n(x,"LI",{});var eAe=s(Fv);Xfe=n(eAe,"STRONG",{});var Pat=s(Xfe);GUo=r(Pat,"speech_to_text"),Pat.forEach(t),OUo=r(eAe," \u2014 "),rq=n(eAe,"A",{href:!0});var $at=s(rq);XUo=r($at,"TFSpeech2TextModel"),$at.forEach(t),VUo=r(eAe," (Speech2Text model)"),eAe.forEach(t),zUo=i(x),Cv=n(x,"LI",{});var oAe=s(Cv);Vfe=n(oAe,"STRONG",{});var Iat=s(Vfe);WUo=r(Iat,"t5"),Iat.forEach(t),QUo=r(oAe," \u2014 "),tq=n(oAe,"A",{href:!0});var Dat=s(tq);HUo=r(Dat,"TFT5Model"),Dat.forEach(t),UUo=r(oAe," (T5 model)"),oAe.forEach(t),JUo=i(x),Mv=n(x,"LI",{});var rAe=s(Mv);zfe=n(rAe,"STRONG",{});var jat=s(zfe);YUo=r(jat,"tapas"),jat.forEach(t),KUo=r(rAe," \u2014 "),aq=n(rAe,"A",{href:!0});var Nat=s(aq);ZUo=r(Nat,"TFTapasModel"),Nat.forEach(t),eJo=r(rAe," (TAPAS model)"),rAe.forEach(t),oJo=i(x),Ev=n(x,"LI",{});var tAe=s(Ev);Wfe=n(tAe,"STRONG",{});var qat=s(Wfe);rJo=r(qat,"transfo-xl"),qat.forEach(t),tJo=r(tAe," \u2014 "),nq=n(tAe,"A",{href:!0});var Gat=s(nq);aJo=r(Gat,"TFTransfoXLModel"),Gat.forEach(t),nJo=r(tAe," (Transformer-XL model)"),tAe.forEach(t),sJo=i(x),yv=n(x,"LI",{});var aAe=s(yv);Qfe=n(aAe,"STRONG",{});var Oat=s(Qfe);lJo=r(Oat,"vit"),Oat.forEach(t),iJo=r(aAe," \u2014 "),sq=n(aAe,"A",{href:!0});var Xat=s(sq);dJo=r(Xat,"TFViTModel"),Xat.forEach(t),cJo=r(aAe," (ViT model)"),aAe.forEach(t),fJo=i(x),wv=n(x,"LI",{});var nAe=s(wv);Hfe=n(nAe,"STRONG",{});var Vat=s(Hfe);mJo=r(Vat,"wav2vec2"),Vat.forEach(t),gJo=r(nAe," \u2014 "),lq=n(nAe,"A",{href:!0});var zat=s(lq);hJo=r(zat,"TFWav2Vec2Model"),zat.forEach(t),pJo=r(nAe," (Wav2Vec2 model)"),nAe.forEach(t),_Jo=i(x),Av=n(x,"LI",{});var sAe=s(Av);Ufe=n(sAe,"STRONG",{});var Wat=s(Ufe);uJo=r(Wat,"xlm"),Wat.forEach(t),bJo=r(sAe," \u2014 "),iq=n(sAe,"A",{href:!0});var Qat=s(iq);vJo=r(Qat,"TFXLMModel"),Qat.forEach(t),TJo=r(sAe," (XLM model)"),sAe.forEach(t),FJo=i(x),Lv=n(x,"LI",{});var lAe=s(Lv);Jfe=n(lAe,"STRONG",{});var Hat=s(Jfe);CJo=r(Hat,"xlm-roberta"),Hat.forEach(t),MJo=r(lAe," \u2014 "),dq=n(lAe,"A",{href:!0});var Uat=s(dq);EJo=r(Uat,"TFXLMRobertaModel"),Uat.forEach(t),yJo=r(lAe," (XLM-RoBERTa model)"),lAe.forEach(t),wJo=i(x),Bv=n(x,"LI",{});var iAe=s(Bv);Yfe=n(iAe,"STRONG",{});var Jat=s(Yfe);AJo=r(Jat,"xlnet"),Jat.forEach(t),LJo=r(iAe," \u2014 "),cq=n(iAe,"A",{href:!0});var Yat=s(cq);BJo=r(Yat,"TFXLNetModel"),Yat.forEach(t),xJo=r(iAe," (XLNet model)"),iAe.forEach(t),x.forEach(t),kJo=i(ca),Kfe=n(ca,"P",{});var Kat=s(Kfe);RJo=r(Kat,"Examples:"),Kat.forEach(t),SJo=i(ca),m(a6.$$.fragment,ca),ca.forEach(t),Rl.forEach(t),NBe=i(c),nc=n(c,"H2",{class:!0});var Hke=s(nc);xv=n(Hke,"A",{id:!0,class:!0,href:!0});var Zat=s(xv);Zfe=n(Zat,"SPAN",{});var ent=s(Zfe);m(n6.$$.fragment,ent),ent.forEach(t),Zat.forEach(t),PJo=i(Hke),eme=n(Hke,"SPAN",{});var ont=s(eme);$Jo=r(ont,"TFAutoModelForPreTraining"),ont.forEach(t),Hke.forEach(t),qBe=i(c),_r=n(c,"DIV",{class:!0});var Pl=s(_r);m(s6.$$.fragment,Pl),IJo=i(Pl),sc=n(Pl,"P",{});var Rz=s(sc);DJo=r(Rz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),ome=n(Rz,"CODE",{});var rnt=s(ome);jJo=r(rnt,"from_pretrained()"),rnt.forEach(t),NJo=r(Rz,"class method or the "),rme=n(Rz,"CODE",{});var tnt=s(rme);qJo=r(tnt,"from_config()"),tnt.forEach(t),GJo=r(Rz,`class
method.`),Rz.forEach(t),OJo=i(Pl),l6=n(Pl,"P",{});var Uke=s(l6);XJo=r(Uke,"This class cannot be instantiated directly using "),tme=n(Uke,"CODE",{});var ant=s(tme);VJo=r(ant,"__init__()"),ant.forEach(t),zJo=r(Uke," (throws an error)."),Uke.forEach(t),WJo=i(Pl),dt=n(Pl,"DIV",{class:!0});var $l=s(dt);m(i6.$$.fragment,$l),QJo=i($l),ame=n($l,"P",{});var nnt=s(ame);HJo=r(nnt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),nnt.forEach(t),UJo=i($l),lc=n($l,"P",{});var Sz=s(lc);JJo=r(Sz,`Note:
Loading a model from its configuration file does `),nme=n(Sz,"STRONG",{});var snt=s(nme);YJo=r(snt,"not"),snt.forEach(t),KJo=r(Sz,` load the model weights. It only affects the
model\u2019s configuration. Use `),sme=n(Sz,"CODE",{});var lnt=s(sme);ZJo=r(lnt,"from_pretrained()"),lnt.forEach(t),eYo=r(Sz,"to load the model weights."),Sz.forEach(t),oYo=i($l),lme=n($l,"P",{});var int=s(lme);rYo=r(int,"Examples:"),int.forEach(t),tYo=i($l),m(d6.$$.fragment,$l),$l.forEach(t),aYo=i(Pl),ho=n(Pl,"DIV",{class:!0});var fa=s(ho);m(c6.$$.fragment,fa),nYo=i(fa),ime=n(fa,"P",{});var dnt=s(ime);sYo=r(dnt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),dnt.forEach(t),lYo=i(fa),fn=n(fa,"P",{});var Z4=s(fn);iYo=r(Z4,"The model class to instantiate is selected based on the "),dme=n(Z4,"CODE",{});var cnt=s(dme);dYo=r(cnt,"model_type"),cnt.forEach(t),cYo=r(Z4,` property of the config object (either
passed as an argument or loaded from `),cme=n(Z4,"CODE",{});var fnt=s(cme);fYo=r(fnt,"pretrained_model_name_or_path"),fnt.forEach(t),mYo=r(Z4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fme=n(Z4,"CODE",{});var mnt=s(fme);gYo=r(mnt,"pretrained_model_name_or_path"),mnt.forEach(t),hYo=r(Z4,":"),Z4.forEach(t),pYo=i(fa),H=n(fa,"UL",{});var U=s(H);kv=n(U,"LI",{});var dAe=s(kv);mme=n(dAe,"STRONG",{});var gnt=s(mme);_Yo=r(gnt,"albert"),gnt.forEach(t),uYo=r(dAe," \u2014 "),fq=n(dAe,"A",{href:!0});var hnt=s(fq);bYo=r(hnt,"TFAlbertForPreTraining"),hnt.forEach(t),vYo=r(dAe," (ALBERT model)"),dAe.forEach(t),TYo=i(U),Rv=n(U,"LI",{});var cAe=s(Rv);gme=n(cAe,"STRONG",{});var pnt=s(gme);FYo=r(pnt,"bart"),pnt.forEach(t),CYo=r(cAe," \u2014 "),mq=n(cAe,"A",{href:!0});var _nt=s(mq);MYo=r(_nt,"TFBartForConditionalGeneration"),_nt.forEach(t),EYo=r(cAe," (BART model)"),cAe.forEach(t),yYo=i(U),Sv=n(U,"LI",{});var fAe=s(Sv);hme=n(fAe,"STRONG",{});var unt=s(hme);wYo=r(unt,"bert"),unt.forEach(t),AYo=r(fAe," \u2014 "),gq=n(fAe,"A",{href:!0});var bnt=s(gq);LYo=r(bnt,"TFBertForPreTraining"),bnt.forEach(t),BYo=r(fAe," (BERT model)"),fAe.forEach(t),xYo=i(U),Pv=n(U,"LI",{});var mAe=s(Pv);pme=n(mAe,"STRONG",{});var vnt=s(pme);kYo=r(vnt,"camembert"),vnt.forEach(t),RYo=r(mAe," \u2014 "),hq=n(mAe,"A",{href:!0});var Tnt=s(hq);SYo=r(Tnt,"TFCamembertForMaskedLM"),Tnt.forEach(t),PYo=r(mAe," (CamemBERT model)"),mAe.forEach(t),$Yo=i(U),$v=n(U,"LI",{});var gAe=s($v);_me=n(gAe,"STRONG",{});var Fnt=s(_me);IYo=r(Fnt,"ctrl"),Fnt.forEach(t),DYo=r(gAe," \u2014 "),pq=n(gAe,"A",{href:!0});var Cnt=s(pq);jYo=r(Cnt,"TFCTRLLMHeadModel"),Cnt.forEach(t),NYo=r(gAe," (CTRL model)"),gAe.forEach(t),qYo=i(U),Iv=n(U,"LI",{});var hAe=s(Iv);ume=n(hAe,"STRONG",{});var Mnt=s(ume);GYo=r(Mnt,"distilbert"),Mnt.forEach(t),OYo=r(hAe," \u2014 "),_q=n(hAe,"A",{href:!0});var Ent=s(_q);XYo=r(Ent,"TFDistilBertForMaskedLM"),Ent.forEach(t),VYo=r(hAe," (DistilBERT model)"),hAe.forEach(t),zYo=i(U),Dv=n(U,"LI",{});var pAe=s(Dv);bme=n(pAe,"STRONG",{});var ynt=s(bme);WYo=r(ynt,"electra"),ynt.forEach(t),QYo=r(pAe," \u2014 "),uq=n(pAe,"A",{href:!0});var wnt=s(uq);HYo=r(wnt,"TFElectraForPreTraining"),wnt.forEach(t),UYo=r(pAe," (ELECTRA model)"),pAe.forEach(t),JYo=i(U),jv=n(U,"LI",{});var _Ae=s(jv);vme=n(_Ae,"STRONG",{});var Ant=s(vme);YYo=r(Ant,"flaubert"),Ant.forEach(t),KYo=r(_Ae," \u2014 "),bq=n(_Ae,"A",{href:!0});var Lnt=s(bq);ZYo=r(Lnt,"TFFlaubertWithLMHeadModel"),Lnt.forEach(t),eKo=r(_Ae," (FlauBERT model)"),_Ae.forEach(t),oKo=i(U),Nv=n(U,"LI",{});var uAe=s(Nv);Tme=n(uAe,"STRONG",{});var Bnt=s(Tme);rKo=r(Bnt,"funnel"),Bnt.forEach(t),tKo=r(uAe," \u2014 "),vq=n(uAe,"A",{href:!0});var xnt=s(vq);aKo=r(xnt,"TFFunnelForPreTraining"),xnt.forEach(t),nKo=r(uAe," (Funnel Transformer model)"),uAe.forEach(t),sKo=i(U),qv=n(U,"LI",{});var bAe=s(qv);Fme=n(bAe,"STRONG",{});var knt=s(Fme);lKo=r(knt,"gpt2"),knt.forEach(t),iKo=r(bAe," \u2014 "),Tq=n(bAe,"A",{href:!0});var Rnt=s(Tq);dKo=r(Rnt,"TFGPT2LMHeadModel"),Rnt.forEach(t),cKo=r(bAe," (OpenAI GPT-2 model)"),bAe.forEach(t),fKo=i(U),Gv=n(U,"LI",{});var vAe=s(Gv);Cme=n(vAe,"STRONG",{});var Snt=s(Cme);mKo=r(Snt,"layoutlm"),Snt.forEach(t),gKo=r(vAe," \u2014 "),Fq=n(vAe,"A",{href:!0});var Pnt=s(Fq);hKo=r(Pnt,"TFLayoutLMForMaskedLM"),Pnt.forEach(t),pKo=r(vAe," (LayoutLM model)"),vAe.forEach(t),_Ko=i(U),Ov=n(U,"LI",{});var TAe=s(Ov);Mme=n(TAe,"STRONG",{});var $nt=s(Mme);uKo=r($nt,"lxmert"),$nt.forEach(t),bKo=r(TAe," \u2014 "),Cq=n(TAe,"A",{href:!0});var Int=s(Cq);vKo=r(Int,"TFLxmertForPreTraining"),Int.forEach(t),TKo=r(TAe," (LXMERT model)"),TAe.forEach(t),FKo=i(U),Xv=n(U,"LI",{});var FAe=s(Xv);Eme=n(FAe,"STRONG",{});var Dnt=s(Eme);CKo=r(Dnt,"mobilebert"),Dnt.forEach(t),MKo=r(FAe," \u2014 "),Mq=n(FAe,"A",{href:!0});var jnt=s(Mq);EKo=r(jnt,"TFMobileBertForPreTraining"),jnt.forEach(t),yKo=r(FAe," (MobileBERT model)"),FAe.forEach(t),wKo=i(U),Vv=n(U,"LI",{});var CAe=s(Vv);yme=n(CAe,"STRONG",{});var Nnt=s(yme);AKo=r(Nnt,"mpnet"),Nnt.forEach(t),LKo=r(CAe," \u2014 "),Eq=n(CAe,"A",{href:!0});var qnt=s(Eq);BKo=r(qnt,"TFMPNetForMaskedLM"),qnt.forEach(t),xKo=r(CAe," (MPNet model)"),CAe.forEach(t),kKo=i(U),zv=n(U,"LI",{});var MAe=s(zv);wme=n(MAe,"STRONG",{});var Gnt=s(wme);RKo=r(Gnt,"openai-gpt"),Gnt.forEach(t),SKo=r(MAe," \u2014 "),yq=n(MAe,"A",{href:!0});var Ont=s(yq);PKo=r(Ont,"TFOpenAIGPTLMHeadModel"),Ont.forEach(t),$Ko=r(MAe," (OpenAI GPT model)"),MAe.forEach(t),IKo=i(U),Wv=n(U,"LI",{});var EAe=s(Wv);Ame=n(EAe,"STRONG",{});var Xnt=s(Ame);DKo=r(Xnt,"roberta"),Xnt.forEach(t),jKo=r(EAe," \u2014 "),wq=n(EAe,"A",{href:!0});var Vnt=s(wq);NKo=r(Vnt,"TFRobertaForMaskedLM"),Vnt.forEach(t),qKo=r(EAe," (RoBERTa model)"),EAe.forEach(t),GKo=i(U),Qv=n(U,"LI",{});var yAe=s(Qv);Lme=n(yAe,"STRONG",{});var znt=s(Lme);OKo=r(znt,"t5"),znt.forEach(t),XKo=r(yAe," \u2014 "),Aq=n(yAe,"A",{href:!0});var Wnt=s(Aq);VKo=r(Wnt,"TFT5ForConditionalGeneration"),Wnt.forEach(t),zKo=r(yAe," (T5 model)"),yAe.forEach(t),WKo=i(U),Hv=n(U,"LI",{});var wAe=s(Hv);Bme=n(wAe,"STRONG",{});var Qnt=s(Bme);QKo=r(Qnt,"tapas"),Qnt.forEach(t),HKo=r(wAe," \u2014 "),Lq=n(wAe,"A",{href:!0});var Hnt=s(Lq);UKo=r(Hnt,"TFTapasForMaskedLM"),Hnt.forEach(t),JKo=r(wAe," (TAPAS model)"),wAe.forEach(t),YKo=i(U),Uv=n(U,"LI",{});var AAe=s(Uv);xme=n(AAe,"STRONG",{});var Unt=s(xme);KKo=r(Unt,"transfo-xl"),Unt.forEach(t),ZKo=r(AAe," \u2014 "),Bq=n(AAe,"A",{href:!0});var Jnt=s(Bq);eZo=r(Jnt,"TFTransfoXLLMHeadModel"),Jnt.forEach(t),oZo=r(AAe," (Transformer-XL model)"),AAe.forEach(t),rZo=i(U),Jv=n(U,"LI",{});var LAe=s(Jv);kme=n(LAe,"STRONG",{});var Ynt=s(kme);tZo=r(Ynt,"xlm"),Ynt.forEach(t),aZo=r(LAe," \u2014 "),xq=n(LAe,"A",{href:!0});var Knt=s(xq);nZo=r(Knt,"TFXLMWithLMHeadModel"),Knt.forEach(t),sZo=r(LAe," (XLM model)"),LAe.forEach(t),lZo=i(U),Yv=n(U,"LI",{});var BAe=s(Yv);Rme=n(BAe,"STRONG",{});var Znt=s(Rme);iZo=r(Znt,"xlm-roberta"),Znt.forEach(t),dZo=r(BAe," \u2014 "),kq=n(BAe,"A",{href:!0});var est=s(kq);cZo=r(est,"TFXLMRobertaForMaskedLM"),est.forEach(t),fZo=r(BAe," (XLM-RoBERTa model)"),BAe.forEach(t),mZo=i(U),Kv=n(U,"LI",{});var xAe=s(Kv);Sme=n(xAe,"STRONG",{});var ost=s(Sme);gZo=r(ost,"xlnet"),ost.forEach(t),hZo=r(xAe," \u2014 "),Rq=n(xAe,"A",{href:!0});var rst=s(Rq);pZo=r(rst,"TFXLNetLMHeadModel"),rst.forEach(t),_Zo=r(xAe," (XLNet model)"),xAe.forEach(t),U.forEach(t),uZo=i(fa),Pme=n(fa,"P",{});var tst=s(Pme);bZo=r(tst,"Examples:"),tst.forEach(t),vZo=i(fa),m(f6.$$.fragment,fa),fa.forEach(t),Pl.forEach(t),GBe=i(c),ic=n(c,"H2",{class:!0});var Jke=s(ic);Zv=n(Jke,"A",{id:!0,class:!0,href:!0});var ast=s(Zv);$me=n(ast,"SPAN",{});var nst=s($me);m(m6.$$.fragment,nst),nst.forEach(t),ast.forEach(t),TZo=i(Jke),Ime=n(Jke,"SPAN",{});var sst=s(Ime);FZo=r(sst,"TFAutoModelForCausalLM"),sst.forEach(t),Jke.forEach(t),OBe=i(c),ur=n(c,"DIV",{class:!0});var Il=s(ur);m(g6.$$.fragment,Il),CZo=i(Il),dc=n(Il,"P",{});var Pz=s(dc);MZo=r(Pz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Dme=n(Pz,"CODE",{});var lst=s(Dme);EZo=r(lst,"from_pretrained()"),lst.forEach(t),yZo=r(Pz,"class method or the "),jme=n(Pz,"CODE",{});var ist=s(jme);wZo=r(ist,"from_config()"),ist.forEach(t),AZo=r(Pz,`class
method.`),Pz.forEach(t),LZo=i(Il),h6=n(Il,"P",{});var Yke=s(h6);BZo=r(Yke,"This class cannot be instantiated directly using "),Nme=n(Yke,"CODE",{});var dst=s(Nme);xZo=r(dst,"__init__()"),dst.forEach(t),kZo=r(Yke," (throws an error)."),Yke.forEach(t),RZo=i(Il),ct=n(Il,"DIV",{class:!0});var Dl=s(ct);m(p6.$$.fragment,Dl),SZo=i(Dl),qme=n(Dl,"P",{});var cst=s(qme);PZo=r(cst,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),cst.forEach(t),$Zo=i(Dl),cc=n(Dl,"P",{});var $z=s(cc);IZo=r($z,`Note:
Loading a model from its configuration file does `),Gme=n($z,"STRONG",{});var fst=s(Gme);DZo=r(fst,"not"),fst.forEach(t),jZo=r($z,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ome=n($z,"CODE",{});var mst=s(Ome);NZo=r(mst,"from_pretrained()"),mst.forEach(t),qZo=r($z,"to load the model weights."),$z.forEach(t),GZo=i(Dl),Xme=n(Dl,"P",{});var gst=s(Xme);OZo=r(gst,"Examples:"),gst.forEach(t),XZo=i(Dl),m(_6.$$.fragment,Dl),Dl.forEach(t),VZo=i(Il),po=n(Il,"DIV",{class:!0});var ma=s(po);m(u6.$$.fragment,ma),zZo=i(ma),Vme=n(ma,"P",{});var hst=s(Vme);WZo=r(hst,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),hst.forEach(t),QZo=i(ma),mn=n(ma,"P",{});var eM=s(mn);HZo=r(eM,"The model class to instantiate is selected based on the "),zme=n(eM,"CODE",{});var pst=s(zme);UZo=r(pst,"model_type"),pst.forEach(t),JZo=r(eM,` property of the config object (either
passed as an argument or loaded from `),Wme=n(eM,"CODE",{});var _st=s(Wme);YZo=r(_st,"pretrained_model_name_or_path"),_st.forEach(t),KZo=r(eM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qme=n(eM,"CODE",{});var ust=s(Qme);ZZo=r(ust,"pretrained_model_name_or_path"),ust.forEach(t),eer=r(eM,":"),eM.forEach(t),oer=i(ma),he=n(ma,"UL",{});var Me=s(he);eT=n(Me,"LI",{});var kAe=s(eT);Hme=n(kAe,"STRONG",{});var bst=s(Hme);rer=r(bst,"bert"),bst.forEach(t),ter=r(kAe," \u2014 "),Sq=n(kAe,"A",{href:!0});var vst=s(Sq);aer=r(vst,"TFBertLMHeadModel"),vst.forEach(t),ner=r(kAe," (BERT model)"),kAe.forEach(t),ser=i(Me),oT=n(Me,"LI",{});var RAe=s(oT);Ume=n(RAe,"STRONG",{});var Tst=s(Ume);ler=r(Tst,"ctrl"),Tst.forEach(t),ier=r(RAe," \u2014 "),Pq=n(RAe,"A",{href:!0});var Fst=s(Pq);der=r(Fst,"TFCTRLLMHeadModel"),Fst.forEach(t),cer=r(RAe," (CTRL model)"),RAe.forEach(t),fer=i(Me),rT=n(Me,"LI",{});var SAe=s(rT);Jme=n(SAe,"STRONG",{});var Cst=s(Jme);mer=r(Cst,"gpt2"),Cst.forEach(t),ger=r(SAe," \u2014 "),$q=n(SAe,"A",{href:!0});var Mst=s($q);her=r(Mst,"TFGPT2LMHeadModel"),Mst.forEach(t),per=r(SAe," (OpenAI GPT-2 model)"),SAe.forEach(t),_er=i(Me),tT=n(Me,"LI",{});var PAe=s(tT);Yme=n(PAe,"STRONG",{});var Est=s(Yme);uer=r(Est,"openai-gpt"),Est.forEach(t),ber=r(PAe," \u2014 "),Iq=n(PAe,"A",{href:!0});var yst=s(Iq);ver=r(yst,"TFOpenAIGPTLMHeadModel"),yst.forEach(t),Ter=r(PAe," (OpenAI GPT model)"),PAe.forEach(t),Fer=i(Me),aT=n(Me,"LI",{});var $Ae=s(aT);Kme=n($Ae,"STRONG",{});var wst=s(Kme);Cer=r(wst,"rembert"),wst.forEach(t),Mer=r($Ae," \u2014 "),Dq=n($Ae,"A",{href:!0});var Ast=s(Dq);Eer=r(Ast,"TFRemBertForCausalLM"),Ast.forEach(t),yer=r($Ae," (RemBERT model)"),$Ae.forEach(t),wer=i(Me),nT=n(Me,"LI",{});var IAe=s(nT);Zme=n(IAe,"STRONG",{});var Lst=s(Zme);Aer=r(Lst,"roberta"),Lst.forEach(t),Ler=r(IAe," \u2014 "),jq=n(IAe,"A",{href:!0});var Bst=s(jq);Ber=r(Bst,"TFRobertaForCausalLM"),Bst.forEach(t),xer=r(IAe," (RoBERTa model)"),IAe.forEach(t),ker=i(Me),sT=n(Me,"LI",{});var DAe=s(sT);ege=n(DAe,"STRONG",{});var xst=s(ege);Rer=r(xst,"roformer"),xst.forEach(t),Ser=r(DAe," \u2014 "),Nq=n(DAe,"A",{href:!0});var kst=s(Nq);Per=r(kst,"TFRoFormerForCausalLM"),kst.forEach(t),$er=r(DAe," (RoFormer model)"),DAe.forEach(t),Ier=i(Me),lT=n(Me,"LI",{});var jAe=s(lT);oge=n(jAe,"STRONG",{});var Rst=s(oge);Der=r(Rst,"transfo-xl"),Rst.forEach(t),jer=r(jAe," \u2014 "),qq=n(jAe,"A",{href:!0});var Sst=s(qq);Ner=r(Sst,"TFTransfoXLLMHeadModel"),Sst.forEach(t),qer=r(jAe," (Transformer-XL model)"),jAe.forEach(t),Ger=i(Me),iT=n(Me,"LI",{});var NAe=s(iT);rge=n(NAe,"STRONG",{});var Pst=s(rge);Oer=r(Pst,"xlm"),Pst.forEach(t),Xer=r(NAe," \u2014 "),Gq=n(NAe,"A",{href:!0});var $st=s(Gq);Ver=r($st,"TFXLMWithLMHeadModel"),$st.forEach(t),zer=r(NAe," (XLM model)"),NAe.forEach(t),Wer=i(Me),dT=n(Me,"LI",{});var qAe=s(dT);tge=n(qAe,"STRONG",{});var Ist=s(tge);Qer=r(Ist,"xlnet"),Ist.forEach(t),Her=r(qAe," \u2014 "),Oq=n(qAe,"A",{href:!0});var Dst=s(Oq);Uer=r(Dst,"TFXLNetLMHeadModel"),Dst.forEach(t),Jer=r(qAe," (XLNet model)"),qAe.forEach(t),Me.forEach(t),Yer=i(ma),age=n(ma,"P",{});var jst=s(age);Ker=r(jst,"Examples:"),jst.forEach(t),Zer=i(ma),m(b6.$$.fragment,ma),ma.forEach(t),Il.forEach(t),XBe=i(c),fc=n(c,"H2",{class:!0});var Kke=s(fc);cT=n(Kke,"A",{id:!0,class:!0,href:!0});var Nst=s(cT);nge=n(Nst,"SPAN",{});var qst=s(nge);m(v6.$$.fragment,qst),qst.forEach(t),Nst.forEach(t),eor=i(Kke),sge=n(Kke,"SPAN",{});var Gst=s(sge);oor=r(Gst,"TFAutoModelForImageClassification"),Gst.forEach(t),Kke.forEach(t),VBe=i(c),br=n(c,"DIV",{class:!0});var jl=s(br);m(T6.$$.fragment,jl),ror=i(jl),mc=n(jl,"P",{});var Iz=s(mc);tor=r(Iz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),lge=n(Iz,"CODE",{});var Ost=s(lge);aor=r(Ost,"from_pretrained()"),Ost.forEach(t),nor=r(Iz,"class method or the "),ige=n(Iz,"CODE",{});var Xst=s(ige);sor=r(Xst,"from_config()"),Xst.forEach(t),lor=r(Iz,`class
method.`),Iz.forEach(t),ior=i(jl),F6=n(jl,"P",{});var Zke=s(F6);dor=r(Zke,"This class cannot be instantiated directly using "),dge=n(Zke,"CODE",{});var Vst=s(dge);cor=r(Vst,"__init__()"),Vst.forEach(t),mor=r(Zke," (throws an error)."),Zke.forEach(t),gor=i(jl),ft=n(jl,"DIV",{class:!0});var Nl=s(ft);m(C6.$$.fragment,Nl),hor=i(Nl),cge=n(Nl,"P",{});var zst=s(cge);por=r(zst,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),zst.forEach(t),_or=i(Nl),gc=n(Nl,"P",{});var Dz=s(gc);uor=r(Dz,`Note:
Loading a model from its configuration file does `),fge=n(Dz,"STRONG",{});var Wst=s(fge);bor=r(Wst,"not"),Wst.forEach(t),vor=r(Dz,` load the model weights. It only affects the
model\u2019s configuration. Use `),mge=n(Dz,"CODE",{});var Qst=s(mge);Tor=r(Qst,"from_pretrained()"),Qst.forEach(t),For=r(Dz,"to load the model weights."),Dz.forEach(t),Cor=i(Nl),gge=n(Nl,"P",{});var Hst=s(gge);Mor=r(Hst,"Examples:"),Hst.forEach(t),Eor=i(Nl),m(M6.$$.fragment,Nl),Nl.forEach(t),yor=i(jl),_o=n(jl,"DIV",{class:!0});var ga=s(_o);m(E6.$$.fragment,ga),wor=i(ga),hge=n(ga,"P",{});var Ust=s(hge);Aor=r(Ust,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Ust.forEach(t),Lor=i(ga),gn=n(ga,"P",{});var oM=s(gn);Bor=r(oM,"The model class to instantiate is selected based on the "),pge=n(oM,"CODE",{});var Jst=s(pge);xor=r(Jst,"model_type"),Jst.forEach(t),kor=r(oM,` property of the config object (either
passed as an argument or loaded from `),_ge=n(oM,"CODE",{});var Yst=s(_ge);Ror=r(Yst,"pretrained_model_name_or_path"),Yst.forEach(t),Sor=r(oM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uge=n(oM,"CODE",{});var Kst=s(uge);Por=r(Kst,"pretrained_model_name_or_path"),Kst.forEach(t),$or=r(oM,":"),oM.forEach(t),Ior=i(ga),y6=n(ga,"UL",{});var eRe=s(y6);fT=n(eRe,"LI",{});var GAe=s(fT);bge=n(GAe,"STRONG",{});var Zst=s(bge);Dor=r(Zst,"convnext"),Zst.forEach(t),jor=r(GAe," \u2014 "),Xq=n(GAe,"A",{href:!0});var elt=s(Xq);Nor=r(elt,"TFConvNextForImageClassification"),elt.forEach(t),qor=r(GAe," (ConvNext model)"),GAe.forEach(t),Gor=i(eRe),mT=n(eRe,"LI",{});var OAe=s(mT);vge=n(OAe,"STRONG",{});var olt=s(vge);Oor=r(olt,"vit"),olt.forEach(t),Xor=r(OAe," \u2014 "),Vq=n(OAe,"A",{href:!0});var rlt=s(Vq);Vor=r(rlt,"TFViTForImageClassification"),rlt.forEach(t),zor=r(OAe," (ViT model)"),OAe.forEach(t),eRe.forEach(t),Wor=i(ga),Tge=n(ga,"P",{});var tlt=s(Tge);Qor=r(tlt,"Examples:"),tlt.forEach(t),Hor=i(ga),m(w6.$$.fragment,ga),ga.forEach(t),jl.forEach(t),zBe=i(c),hc=n(c,"H2",{class:!0});var oRe=s(hc);gT=n(oRe,"A",{id:!0,class:!0,href:!0});var alt=s(gT);Fge=n(alt,"SPAN",{});var nlt=s(Fge);m(A6.$$.fragment,nlt),nlt.forEach(t),alt.forEach(t),Uor=i(oRe),Cge=n(oRe,"SPAN",{});var slt=s(Cge);Jor=r(slt,"TFAutoModelForMaskedLM"),slt.forEach(t),oRe.forEach(t),WBe=i(c),vr=n(c,"DIV",{class:!0});var ql=s(vr);m(L6.$$.fragment,ql),Yor=i(ql),pc=n(ql,"P",{});var jz=s(pc);Kor=r(jz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Mge=n(jz,"CODE",{});var llt=s(Mge);Zor=r(llt,"from_pretrained()"),llt.forEach(t),err=r(jz,"class method or the "),Ege=n(jz,"CODE",{});var ilt=s(Ege);orr=r(ilt,"from_config()"),ilt.forEach(t),rrr=r(jz,`class
method.`),jz.forEach(t),trr=i(ql),B6=n(ql,"P",{});var rRe=s(B6);arr=r(rRe,"This class cannot be instantiated directly using "),yge=n(rRe,"CODE",{});var dlt=s(yge);nrr=r(dlt,"__init__()"),dlt.forEach(t),srr=r(rRe," (throws an error)."),rRe.forEach(t),lrr=i(ql),mt=n(ql,"DIV",{class:!0});var Gl=s(mt);m(x6.$$.fragment,Gl),irr=i(Gl),wge=n(Gl,"P",{});var clt=s(wge);drr=r(clt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),clt.forEach(t),crr=i(Gl),_c=n(Gl,"P",{});var Nz=s(_c);frr=r(Nz,`Note:
Loading a model from its configuration file does `),Age=n(Nz,"STRONG",{});var flt=s(Age);mrr=r(flt,"not"),flt.forEach(t),grr=r(Nz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Lge=n(Nz,"CODE",{});var mlt=s(Lge);hrr=r(mlt,"from_pretrained()"),mlt.forEach(t),prr=r(Nz,"to load the model weights."),Nz.forEach(t),_rr=i(Gl),Bge=n(Gl,"P",{});var glt=s(Bge);urr=r(glt,"Examples:"),glt.forEach(t),brr=i(Gl),m(k6.$$.fragment,Gl),Gl.forEach(t),vrr=i(ql),uo=n(ql,"DIV",{class:!0});var ha=s(uo);m(R6.$$.fragment,ha),Trr=i(ha),xge=n(ha,"P",{});var hlt=s(xge);Frr=r(hlt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),hlt.forEach(t),Crr=i(ha),hn=n(ha,"P",{});var rM=s(hn);Mrr=r(rM,"The model class to instantiate is selected based on the "),kge=n(rM,"CODE",{});var plt=s(kge);Err=r(plt,"model_type"),plt.forEach(t),yrr=r(rM,` property of the config object (either
passed as an argument or loaded from `),Rge=n(rM,"CODE",{});var _lt=s(Rge);wrr=r(_lt,"pretrained_model_name_or_path"),_lt.forEach(t),Arr=r(rM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sge=n(rM,"CODE",{});var ult=s(Sge);Lrr=r(ult,"pretrained_model_name_or_path"),ult.forEach(t),Brr=r(rM,":"),rM.forEach(t),xrr=i(ha),Y=n(ha,"UL",{});var ee=s(Y);hT=n(ee,"LI",{});var XAe=s(hT);Pge=n(XAe,"STRONG",{});var blt=s(Pge);krr=r(blt,"albert"),blt.forEach(t),Rrr=r(XAe," \u2014 "),zq=n(XAe,"A",{href:!0});var vlt=s(zq);Srr=r(vlt,"TFAlbertForMaskedLM"),vlt.forEach(t),Prr=r(XAe," (ALBERT model)"),XAe.forEach(t),$rr=i(ee),pT=n(ee,"LI",{});var VAe=s(pT);$ge=n(VAe,"STRONG",{});var Tlt=s($ge);Irr=r(Tlt,"bert"),Tlt.forEach(t),Drr=r(VAe," \u2014 "),Wq=n(VAe,"A",{href:!0});var Flt=s(Wq);jrr=r(Flt,"TFBertForMaskedLM"),Flt.forEach(t),Nrr=r(VAe," (BERT model)"),VAe.forEach(t),qrr=i(ee),_T=n(ee,"LI",{});var zAe=s(_T);Ige=n(zAe,"STRONG",{});var Clt=s(Ige);Grr=r(Clt,"camembert"),Clt.forEach(t),Orr=r(zAe," \u2014 "),Qq=n(zAe,"A",{href:!0});var Mlt=s(Qq);Xrr=r(Mlt,"TFCamembertForMaskedLM"),Mlt.forEach(t),Vrr=r(zAe," (CamemBERT model)"),zAe.forEach(t),zrr=i(ee),uT=n(ee,"LI",{});var WAe=s(uT);Dge=n(WAe,"STRONG",{});var Elt=s(Dge);Wrr=r(Elt,"convbert"),Elt.forEach(t),Qrr=r(WAe," \u2014 "),Hq=n(WAe,"A",{href:!0});var ylt=s(Hq);Hrr=r(ylt,"TFConvBertForMaskedLM"),ylt.forEach(t),Urr=r(WAe," (ConvBERT model)"),WAe.forEach(t),Jrr=i(ee),bT=n(ee,"LI",{});var QAe=s(bT);jge=n(QAe,"STRONG",{});var wlt=s(jge);Yrr=r(wlt,"deberta"),wlt.forEach(t),Krr=r(QAe," \u2014 "),Uq=n(QAe,"A",{href:!0});var Alt=s(Uq);Zrr=r(Alt,"TFDebertaForMaskedLM"),Alt.forEach(t),etr=r(QAe," (DeBERTa model)"),QAe.forEach(t),otr=i(ee),vT=n(ee,"LI",{});var HAe=s(vT);Nge=n(HAe,"STRONG",{});var Llt=s(Nge);rtr=r(Llt,"deberta-v2"),Llt.forEach(t),ttr=r(HAe," \u2014 "),Jq=n(HAe,"A",{href:!0});var Blt=s(Jq);atr=r(Blt,"TFDebertaV2ForMaskedLM"),Blt.forEach(t),ntr=r(HAe," (DeBERTa-v2 model)"),HAe.forEach(t),str=i(ee),TT=n(ee,"LI",{});var UAe=s(TT);qge=n(UAe,"STRONG",{});var xlt=s(qge);ltr=r(xlt,"distilbert"),xlt.forEach(t),itr=r(UAe," \u2014 "),Yq=n(UAe,"A",{href:!0});var klt=s(Yq);dtr=r(klt,"TFDistilBertForMaskedLM"),klt.forEach(t),ctr=r(UAe," (DistilBERT model)"),UAe.forEach(t),ftr=i(ee),FT=n(ee,"LI",{});var JAe=s(FT);Gge=n(JAe,"STRONG",{});var Rlt=s(Gge);mtr=r(Rlt,"electra"),Rlt.forEach(t),gtr=r(JAe," \u2014 "),Kq=n(JAe,"A",{href:!0});var Slt=s(Kq);htr=r(Slt,"TFElectraForMaskedLM"),Slt.forEach(t),ptr=r(JAe," (ELECTRA model)"),JAe.forEach(t),_tr=i(ee),CT=n(ee,"LI",{});var YAe=s(CT);Oge=n(YAe,"STRONG",{});var Plt=s(Oge);utr=r(Plt,"flaubert"),Plt.forEach(t),btr=r(YAe," \u2014 "),Zq=n(YAe,"A",{href:!0});var $lt=s(Zq);vtr=r($lt,"TFFlaubertWithLMHeadModel"),$lt.forEach(t),Ttr=r(YAe," (FlauBERT model)"),YAe.forEach(t),Ftr=i(ee),MT=n(ee,"LI",{});var KAe=s(MT);Xge=n(KAe,"STRONG",{});var Ilt=s(Xge);Ctr=r(Ilt,"funnel"),Ilt.forEach(t),Mtr=r(KAe," \u2014 "),eG=n(KAe,"A",{href:!0});var Dlt=s(eG);Etr=r(Dlt,"TFFunnelForMaskedLM"),Dlt.forEach(t),ytr=r(KAe," (Funnel Transformer model)"),KAe.forEach(t),wtr=i(ee),ET=n(ee,"LI",{});var ZAe=s(ET);Vge=n(ZAe,"STRONG",{});var jlt=s(Vge);Atr=r(jlt,"layoutlm"),jlt.forEach(t),Ltr=r(ZAe," \u2014 "),oG=n(ZAe,"A",{href:!0});var Nlt=s(oG);Btr=r(Nlt,"TFLayoutLMForMaskedLM"),Nlt.forEach(t),xtr=r(ZAe," (LayoutLM model)"),ZAe.forEach(t),ktr=i(ee),yT=n(ee,"LI",{});var e0e=s(yT);zge=n(e0e,"STRONG",{});var qlt=s(zge);Rtr=r(qlt,"longformer"),qlt.forEach(t),Str=r(e0e," \u2014 "),rG=n(e0e,"A",{href:!0});var Glt=s(rG);Ptr=r(Glt,"TFLongformerForMaskedLM"),Glt.forEach(t),$tr=r(e0e," (Longformer model)"),e0e.forEach(t),Itr=i(ee),wT=n(ee,"LI",{});var o0e=s(wT);Wge=n(o0e,"STRONG",{});var Olt=s(Wge);Dtr=r(Olt,"mobilebert"),Olt.forEach(t),jtr=r(o0e," \u2014 "),tG=n(o0e,"A",{href:!0});var Xlt=s(tG);Ntr=r(Xlt,"TFMobileBertForMaskedLM"),Xlt.forEach(t),qtr=r(o0e," (MobileBERT model)"),o0e.forEach(t),Gtr=i(ee),AT=n(ee,"LI",{});var r0e=s(AT);Qge=n(r0e,"STRONG",{});var Vlt=s(Qge);Otr=r(Vlt,"mpnet"),Vlt.forEach(t),Xtr=r(r0e," \u2014 "),aG=n(r0e,"A",{href:!0});var zlt=s(aG);Vtr=r(zlt,"TFMPNetForMaskedLM"),zlt.forEach(t),ztr=r(r0e," (MPNet model)"),r0e.forEach(t),Wtr=i(ee),LT=n(ee,"LI",{});var t0e=s(LT);Hge=n(t0e,"STRONG",{});var Wlt=s(Hge);Qtr=r(Wlt,"rembert"),Wlt.forEach(t),Htr=r(t0e," \u2014 "),nG=n(t0e,"A",{href:!0});var Qlt=s(nG);Utr=r(Qlt,"TFRemBertForMaskedLM"),Qlt.forEach(t),Jtr=r(t0e," (RemBERT model)"),t0e.forEach(t),Ytr=i(ee),BT=n(ee,"LI",{});var a0e=s(BT);Uge=n(a0e,"STRONG",{});var Hlt=s(Uge);Ktr=r(Hlt,"roberta"),Hlt.forEach(t),Ztr=r(a0e," \u2014 "),sG=n(a0e,"A",{href:!0});var Ult=s(sG);ear=r(Ult,"TFRobertaForMaskedLM"),Ult.forEach(t),oar=r(a0e," (RoBERTa model)"),a0e.forEach(t),rar=i(ee),xT=n(ee,"LI",{});var n0e=s(xT);Jge=n(n0e,"STRONG",{});var Jlt=s(Jge);tar=r(Jlt,"roformer"),Jlt.forEach(t),aar=r(n0e," \u2014 "),lG=n(n0e,"A",{href:!0});var Ylt=s(lG);nar=r(Ylt,"TFRoFormerForMaskedLM"),Ylt.forEach(t),sar=r(n0e," (RoFormer model)"),n0e.forEach(t),lar=i(ee),kT=n(ee,"LI",{});var s0e=s(kT);Yge=n(s0e,"STRONG",{});var Klt=s(Yge);iar=r(Klt,"tapas"),Klt.forEach(t),dar=r(s0e," \u2014 "),iG=n(s0e,"A",{href:!0});var Zlt=s(iG);car=r(Zlt,"TFTapasForMaskedLM"),Zlt.forEach(t),far=r(s0e," (TAPAS model)"),s0e.forEach(t),mar=i(ee),RT=n(ee,"LI",{});var l0e=s(RT);Kge=n(l0e,"STRONG",{});var eit=s(Kge);gar=r(eit,"xlm"),eit.forEach(t),har=r(l0e," \u2014 "),dG=n(l0e,"A",{href:!0});var oit=s(dG);par=r(oit,"TFXLMWithLMHeadModel"),oit.forEach(t),_ar=r(l0e," (XLM model)"),l0e.forEach(t),uar=i(ee),ST=n(ee,"LI",{});var i0e=s(ST);Zge=n(i0e,"STRONG",{});var rit=s(Zge);bar=r(rit,"xlm-roberta"),rit.forEach(t),Tar=r(i0e," \u2014 "),cG=n(i0e,"A",{href:!0});var tit=s(cG);Far=r(tit,"TFXLMRobertaForMaskedLM"),tit.forEach(t),Car=r(i0e," (XLM-RoBERTa model)"),i0e.forEach(t),ee.forEach(t),Mar=i(ha),ehe=n(ha,"P",{});var ait=s(ehe);Ear=r(ait,"Examples:"),ait.forEach(t),yar=i(ha),m(S6.$$.fragment,ha),ha.forEach(t),ql.forEach(t),QBe=i(c),uc=n(c,"H2",{class:!0});var tRe=s(uc);PT=n(tRe,"A",{id:!0,class:!0,href:!0});var nit=s(PT);ohe=n(nit,"SPAN",{});var sit=s(ohe);m(P6.$$.fragment,sit),sit.forEach(t),nit.forEach(t),war=i(tRe),rhe=n(tRe,"SPAN",{});var lit=s(rhe);Aar=r(lit,"TFAutoModelForSeq2SeqLM"),lit.forEach(t),tRe.forEach(t),HBe=i(c),Tr=n(c,"DIV",{class:!0});var Ol=s(Tr);m($6.$$.fragment,Ol),Lar=i(Ol),bc=n(Ol,"P",{});var qz=s(bc);Bar=r(qz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),the=n(qz,"CODE",{});var iit=s(the);xar=r(iit,"from_pretrained()"),iit.forEach(t),kar=r(qz,"class method or the "),ahe=n(qz,"CODE",{});var dit=s(ahe);Rar=r(dit,"from_config()"),dit.forEach(t),Sar=r(qz,`class
method.`),qz.forEach(t),Par=i(Ol),I6=n(Ol,"P",{});var aRe=s(I6);$ar=r(aRe,"This class cannot be instantiated directly using "),nhe=n(aRe,"CODE",{});var cit=s(nhe);Iar=r(cit,"__init__()"),cit.forEach(t),Dar=r(aRe," (throws an error)."),aRe.forEach(t),jar=i(Ol),gt=n(Ol,"DIV",{class:!0});var Xl=s(gt);m(D6.$$.fragment,Xl),Nar=i(Xl),she=n(Xl,"P",{});var fit=s(she);qar=r(fit,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),fit.forEach(t),Gar=i(Xl),vc=n(Xl,"P",{});var Gz=s(vc);Oar=r(Gz,`Note:
Loading a model from its configuration file does `),lhe=n(Gz,"STRONG",{});var mit=s(lhe);Xar=r(mit,"not"),mit.forEach(t),Var=r(Gz,` load the model weights. It only affects the
model\u2019s configuration. Use `),ihe=n(Gz,"CODE",{});var git=s(ihe);zar=r(git,"from_pretrained()"),git.forEach(t),War=r(Gz,"to load the model weights."),Gz.forEach(t),Qar=i(Xl),dhe=n(Xl,"P",{});var hit=s(dhe);Har=r(hit,"Examples:"),hit.forEach(t),Uar=i(Xl),m(j6.$$.fragment,Xl),Xl.forEach(t),Jar=i(Ol),bo=n(Ol,"DIV",{class:!0});var pa=s(bo);m(N6.$$.fragment,pa),Yar=i(pa),che=n(pa,"P",{});var pit=s(che);Kar=r(pit,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),pit.forEach(t),Zar=i(pa),pn=n(pa,"P",{});var tM=s(pn);enr=r(tM,"The model class to instantiate is selected based on the "),fhe=n(tM,"CODE",{});var _it=s(fhe);onr=r(_it,"model_type"),_it.forEach(t),rnr=r(tM,` property of the config object (either
passed as an argument or loaded from `),mhe=n(tM,"CODE",{});var uit=s(mhe);tnr=r(uit,"pretrained_model_name_or_path"),uit.forEach(t),anr=r(tM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ghe=n(tM,"CODE",{});var bit=s(ghe);nnr=r(bit,"pretrained_model_name_or_path"),bit.forEach(t),snr=r(tM,":"),tM.forEach(t),lnr=i(pa),pe=n(pa,"UL",{});var Ee=s(pe);$T=n(Ee,"LI",{});var d0e=s($T);hhe=n(d0e,"STRONG",{});var vit=s(hhe);inr=r(vit,"bart"),vit.forEach(t),dnr=r(d0e," \u2014 "),fG=n(d0e,"A",{href:!0});var Tit=s(fG);cnr=r(Tit,"TFBartForConditionalGeneration"),Tit.forEach(t),fnr=r(d0e," (BART model)"),d0e.forEach(t),mnr=i(Ee),IT=n(Ee,"LI",{});var c0e=s(IT);phe=n(c0e,"STRONG",{});var Fit=s(phe);gnr=r(Fit,"blenderbot"),Fit.forEach(t),hnr=r(c0e," \u2014 "),mG=n(c0e,"A",{href:!0});var Cit=s(mG);pnr=r(Cit,"TFBlenderbotForConditionalGeneration"),Cit.forEach(t),_nr=r(c0e," (Blenderbot model)"),c0e.forEach(t),unr=i(Ee),DT=n(Ee,"LI",{});var f0e=s(DT);_he=n(f0e,"STRONG",{});var Mit=s(_he);bnr=r(Mit,"blenderbot-small"),Mit.forEach(t),vnr=r(f0e," \u2014 "),gG=n(f0e,"A",{href:!0});var Eit=s(gG);Tnr=r(Eit,"TFBlenderbotSmallForConditionalGeneration"),Eit.forEach(t),Fnr=r(f0e," (BlenderbotSmall model)"),f0e.forEach(t),Cnr=i(Ee),jT=n(Ee,"LI",{});var m0e=s(jT);uhe=n(m0e,"STRONG",{});var yit=s(uhe);Mnr=r(yit,"encoder-decoder"),yit.forEach(t),Enr=r(m0e," \u2014 "),hG=n(m0e,"A",{href:!0});var wit=s(hG);ynr=r(wit,"TFEncoderDecoderModel"),wit.forEach(t),wnr=r(m0e," (Encoder decoder model)"),m0e.forEach(t),Anr=i(Ee),NT=n(Ee,"LI",{});var g0e=s(NT);bhe=n(g0e,"STRONG",{});var Ait=s(bhe);Lnr=r(Ait,"led"),Ait.forEach(t),Bnr=r(g0e," \u2014 "),pG=n(g0e,"A",{href:!0});var Lit=s(pG);xnr=r(Lit,"TFLEDForConditionalGeneration"),Lit.forEach(t),knr=r(g0e," (LED model)"),g0e.forEach(t),Rnr=i(Ee),qT=n(Ee,"LI",{});var h0e=s(qT);vhe=n(h0e,"STRONG",{});var Bit=s(vhe);Snr=r(Bit,"marian"),Bit.forEach(t),Pnr=r(h0e," \u2014 "),_G=n(h0e,"A",{href:!0});var xit=s(_G);$nr=r(xit,"TFMarianMTModel"),xit.forEach(t),Inr=r(h0e," (Marian model)"),h0e.forEach(t),Dnr=i(Ee),GT=n(Ee,"LI",{});var p0e=s(GT);The=n(p0e,"STRONG",{});var kit=s(The);jnr=r(kit,"mbart"),kit.forEach(t),Nnr=r(p0e," \u2014 "),uG=n(p0e,"A",{href:!0});var Rit=s(uG);qnr=r(Rit,"TFMBartForConditionalGeneration"),Rit.forEach(t),Gnr=r(p0e," (mBART model)"),p0e.forEach(t),Onr=i(Ee),OT=n(Ee,"LI",{});var _0e=s(OT);Fhe=n(_0e,"STRONG",{});var Sit=s(Fhe);Xnr=r(Sit,"mt5"),Sit.forEach(t),Vnr=r(_0e," \u2014 "),bG=n(_0e,"A",{href:!0});var Pit=s(bG);znr=r(Pit,"TFMT5ForConditionalGeneration"),Pit.forEach(t),Wnr=r(_0e," (mT5 model)"),_0e.forEach(t),Qnr=i(Ee),XT=n(Ee,"LI",{});var u0e=s(XT);Che=n(u0e,"STRONG",{});var $it=s(Che);Hnr=r($it,"pegasus"),$it.forEach(t),Unr=r(u0e," \u2014 "),vG=n(u0e,"A",{href:!0});var Iit=s(vG);Jnr=r(Iit,"TFPegasusForConditionalGeneration"),Iit.forEach(t),Ynr=r(u0e," (Pegasus model)"),u0e.forEach(t),Knr=i(Ee),VT=n(Ee,"LI",{});var b0e=s(VT);Mhe=n(b0e,"STRONG",{});var Dit=s(Mhe);Znr=r(Dit,"t5"),Dit.forEach(t),esr=r(b0e," \u2014 "),TG=n(b0e,"A",{href:!0});var jit=s(TG);osr=r(jit,"TFT5ForConditionalGeneration"),jit.forEach(t),rsr=r(b0e," (T5 model)"),b0e.forEach(t),Ee.forEach(t),tsr=i(pa),Ehe=n(pa,"P",{});var Nit=s(Ehe);asr=r(Nit,"Examples:"),Nit.forEach(t),nsr=i(pa),m(q6.$$.fragment,pa),pa.forEach(t),Ol.forEach(t),UBe=i(c),Tc=n(c,"H2",{class:!0});var nRe=s(Tc);zT=n(nRe,"A",{id:!0,class:!0,href:!0});var qit=s(zT);yhe=n(qit,"SPAN",{});var Git=s(yhe);m(G6.$$.fragment,Git),Git.forEach(t),qit.forEach(t),ssr=i(nRe),whe=n(nRe,"SPAN",{});var Oit=s(whe);lsr=r(Oit,"TFAutoModelForSequenceClassification"),Oit.forEach(t),nRe.forEach(t),JBe=i(c),Fr=n(c,"DIV",{class:!0});var Vl=s(Fr);m(O6.$$.fragment,Vl),isr=i(Vl),Fc=n(Vl,"P",{});var Oz=s(Fc);dsr=r(Oz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Ahe=n(Oz,"CODE",{});var Xit=s(Ahe);csr=r(Xit,"from_pretrained()"),Xit.forEach(t),fsr=r(Oz,"class method or the "),Lhe=n(Oz,"CODE",{});var Vit=s(Lhe);msr=r(Vit,"from_config()"),Vit.forEach(t),gsr=r(Oz,`class
method.`),Oz.forEach(t),hsr=i(Vl),X6=n(Vl,"P",{});var sRe=s(X6);psr=r(sRe,"This class cannot be instantiated directly using "),Bhe=n(sRe,"CODE",{});var zit=s(Bhe);_sr=r(zit,"__init__()"),zit.forEach(t),usr=r(sRe," (throws an error)."),sRe.forEach(t),bsr=i(Vl),ht=n(Vl,"DIV",{class:!0});var zl=s(ht);m(V6.$$.fragment,zl),vsr=i(zl),xhe=n(zl,"P",{});var Wit=s(xhe);Tsr=r(Wit,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Wit.forEach(t),Fsr=i(zl),Cc=n(zl,"P",{});var Xz=s(Cc);Csr=r(Xz,`Note:
Loading a model from its configuration file does `),khe=n(Xz,"STRONG",{});var Qit=s(khe);Msr=r(Qit,"not"),Qit.forEach(t),Esr=r(Xz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Rhe=n(Xz,"CODE",{});var Hit=s(Rhe);ysr=r(Hit,"from_pretrained()"),Hit.forEach(t),wsr=r(Xz,"to load the model weights."),Xz.forEach(t),Asr=i(zl),She=n(zl,"P",{});var Uit=s(She);Lsr=r(Uit,"Examples:"),Uit.forEach(t),Bsr=i(zl),m(z6.$$.fragment,zl),zl.forEach(t),xsr=i(Vl),vo=n(Vl,"DIV",{class:!0});var _a=s(vo);m(W6.$$.fragment,_a),ksr=i(_a),Phe=n(_a,"P",{});var Jit=s(Phe);Rsr=r(Jit,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Jit.forEach(t),Ssr=i(_a),_n=n(_a,"P",{});var aM=s(_n);Psr=r(aM,"The model class to instantiate is selected based on the "),$he=n(aM,"CODE",{});var Yit=s($he);$sr=r(Yit,"model_type"),Yit.forEach(t),Isr=r(aM,` property of the config object (either
passed as an argument or loaded from `),Ihe=n(aM,"CODE",{});var Kit=s(Ihe);Dsr=r(Kit,"pretrained_model_name_or_path"),Kit.forEach(t),jsr=r(aM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dhe=n(aM,"CODE",{});var Zit=s(Dhe);Nsr=r(Zit,"pretrained_model_name_or_path"),Zit.forEach(t),qsr=r(aM,":"),aM.forEach(t),Gsr=i(_a),X=n(_a,"UL",{});var W=s(X);WT=n(W,"LI",{});var v0e=s(WT);jhe=n(v0e,"STRONG",{});var edt=s(jhe);Osr=r(edt,"albert"),edt.forEach(t),Xsr=r(v0e," \u2014 "),FG=n(v0e,"A",{href:!0});var odt=s(FG);Vsr=r(odt,"TFAlbertForSequenceClassification"),odt.forEach(t),zsr=r(v0e," (ALBERT model)"),v0e.forEach(t),Wsr=i(W),QT=n(W,"LI",{});var T0e=s(QT);Nhe=n(T0e,"STRONG",{});var rdt=s(Nhe);Qsr=r(rdt,"bert"),rdt.forEach(t),Hsr=r(T0e," \u2014 "),CG=n(T0e,"A",{href:!0});var tdt=s(CG);Usr=r(tdt,"TFBertForSequenceClassification"),tdt.forEach(t),Jsr=r(T0e," (BERT model)"),T0e.forEach(t),Ysr=i(W),HT=n(W,"LI",{});var F0e=s(HT);qhe=n(F0e,"STRONG",{});var adt=s(qhe);Ksr=r(adt,"camembert"),adt.forEach(t),Zsr=r(F0e," \u2014 "),MG=n(F0e,"A",{href:!0});var ndt=s(MG);elr=r(ndt,"TFCamembertForSequenceClassification"),ndt.forEach(t),olr=r(F0e," (CamemBERT model)"),F0e.forEach(t),rlr=i(W),UT=n(W,"LI",{});var C0e=s(UT);Ghe=n(C0e,"STRONG",{});var sdt=s(Ghe);tlr=r(sdt,"convbert"),sdt.forEach(t),alr=r(C0e," \u2014 "),EG=n(C0e,"A",{href:!0});var ldt=s(EG);nlr=r(ldt,"TFConvBertForSequenceClassification"),ldt.forEach(t),slr=r(C0e," (ConvBERT model)"),C0e.forEach(t),llr=i(W),JT=n(W,"LI",{});var M0e=s(JT);Ohe=n(M0e,"STRONG",{});var idt=s(Ohe);ilr=r(idt,"ctrl"),idt.forEach(t),dlr=r(M0e," \u2014 "),yG=n(M0e,"A",{href:!0});var ddt=s(yG);clr=r(ddt,"TFCTRLForSequenceClassification"),ddt.forEach(t),flr=r(M0e," (CTRL model)"),M0e.forEach(t),mlr=i(W),YT=n(W,"LI",{});var E0e=s(YT);Xhe=n(E0e,"STRONG",{});var cdt=s(Xhe);glr=r(cdt,"deberta"),cdt.forEach(t),hlr=r(E0e," \u2014 "),wG=n(E0e,"A",{href:!0});var fdt=s(wG);plr=r(fdt,"TFDebertaForSequenceClassification"),fdt.forEach(t),_lr=r(E0e," (DeBERTa model)"),E0e.forEach(t),ulr=i(W),KT=n(W,"LI",{});var y0e=s(KT);Vhe=n(y0e,"STRONG",{});var mdt=s(Vhe);blr=r(mdt,"deberta-v2"),mdt.forEach(t),vlr=r(y0e," \u2014 "),AG=n(y0e,"A",{href:!0});var gdt=s(AG);Tlr=r(gdt,"TFDebertaV2ForSequenceClassification"),gdt.forEach(t),Flr=r(y0e," (DeBERTa-v2 model)"),y0e.forEach(t),Clr=i(W),ZT=n(W,"LI",{});var w0e=s(ZT);zhe=n(w0e,"STRONG",{});var hdt=s(zhe);Mlr=r(hdt,"distilbert"),hdt.forEach(t),Elr=r(w0e," \u2014 "),LG=n(w0e,"A",{href:!0});var pdt=s(LG);ylr=r(pdt,"TFDistilBertForSequenceClassification"),pdt.forEach(t),wlr=r(w0e," (DistilBERT model)"),w0e.forEach(t),Alr=i(W),eF=n(W,"LI",{});var A0e=s(eF);Whe=n(A0e,"STRONG",{});var _dt=s(Whe);Llr=r(_dt,"electra"),_dt.forEach(t),Blr=r(A0e," \u2014 "),BG=n(A0e,"A",{href:!0});var udt=s(BG);xlr=r(udt,"TFElectraForSequenceClassification"),udt.forEach(t),klr=r(A0e," (ELECTRA model)"),A0e.forEach(t),Rlr=i(W),oF=n(W,"LI",{});var L0e=s(oF);Qhe=n(L0e,"STRONG",{});var bdt=s(Qhe);Slr=r(bdt,"flaubert"),bdt.forEach(t),Plr=r(L0e," \u2014 "),xG=n(L0e,"A",{href:!0});var vdt=s(xG);$lr=r(vdt,"TFFlaubertForSequenceClassification"),vdt.forEach(t),Ilr=r(L0e," (FlauBERT model)"),L0e.forEach(t),Dlr=i(W),rF=n(W,"LI",{});var B0e=s(rF);Hhe=n(B0e,"STRONG",{});var Tdt=s(Hhe);jlr=r(Tdt,"funnel"),Tdt.forEach(t),Nlr=r(B0e," \u2014 "),kG=n(B0e,"A",{href:!0});var Fdt=s(kG);qlr=r(Fdt,"TFFunnelForSequenceClassification"),Fdt.forEach(t),Glr=r(B0e," (Funnel Transformer model)"),B0e.forEach(t),Olr=i(W),tF=n(W,"LI",{});var x0e=s(tF);Uhe=n(x0e,"STRONG",{});var Cdt=s(Uhe);Xlr=r(Cdt,"gpt2"),Cdt.forEach(t),Vlr=r(x0e," \u2014 "),RG=n(x0e,"A",{href:!0});var Mdt=s(RG);zlr=r(Mdt,"TFGPT2ForSequenceClassification"),Mdt.forEach(t),Wlr=r(x0e," (OpenAI GPT-2 model)"),x0e.forEach(t),Qlr=i(W),aF=n(W,"LI",{});var k0e=s(aF);Jhe=n(k0e,"STRONG",{});var Edt=s(Jhe);Hlr=r(Edt,"layoutlm"),Edt.forEach(t),Ulr=r(k0e," \u2014 "),SG=n(k0e,"A",{href:!0});var ydt=s(SG);Jlr=r(ydt,"TFLayoutLMForSequenceClassification"),ydt.forEach(t),Ylr=r(k0e," (LayoutLM model)"),k0e.forEach(t),Klr=i(W),nF=n(W,"LI",{});var R0e=s(nF);Yhe=n(R0e,"STRONG",{});var wdt=s(Yhe);Zlr=r(wdt,"longformer"),wdt.forEach(t),eir=r(R0e," \u2014 "),PG=n(R0e,"A",{href:!0});var Adt=s(PG);oir=r(Adt,"TFLongformerForSequenceClassification"),Adt.forEach(t),rir=r(R0e," (Longformer model)"),R0e.forEach(t),tir=i(W),sF=n(W,"LI",{});var S0e=s(sF);Khe=n(S0e,"STRONG",{});var Ldt=s(Khe);air=r(Ldt,"mobilebert"),Ldt.forEach(t),nir=r(S0e," \u2014 "),$G=n(S0e,"A",{href:!0});var Bdt=s($G);sir=r(Bdt,"TFMobileBertForSequenceClassification"),Bdt.forEach(t),lir=r(S0e," (MobileBERT model)"),S0e.forEach(t),iir=i(W),lF=n(W,"LI",{});var P0e=s(lF);Zhe=n(P0e,"STRONG",{});var xdt=s(Zhe);dir=r(xdt,"mpnet"),xdt.forEach(t),cir=r(P0e," \u2014 "),IG=n(P0e,"A",{href:!0});var kdt=s(IG);fir=r(kdt,"TFMPNetForSequenceClassification"),kdt.forEach(t),mir=r(P0e," (MPNet model)"),P0e.forEach(t),gir=i(W),iF=n(W,"LI",{});var $0e=s(iF);epe=n($0e,"STRONG",{});var Rdt=s(epe);hir=r(Rdt,"openai-gpt"),Rdt.forEach(t),pir=r($0e," \u2014 "),DG=n($0e,"A",{href:!0});var Sdt=s(DG);_ir=r(Sdt,"TFOpenAIGPTForSequenceClassification"),Sdt.forEach(t),uir=r($0e," (OpenAI GPT model)"),$0e.forEach(t),bir=i(W),dF=n(W,"LI",{});var I0e=s(dF);ope=n(I0e,"STRONG",{});var Pdt=s(ope);vir=r(Pdt,"rembert"),Pdt.forEach(t),Tir=r(I0e," \u2014 "),jG=n(I0e,"A",{href:!0});var $dt=s(jG);Fir=r($dt,"TFRemBertForSequenceClassification"),$dt.forEach(t),Cir=r(I0e," (RemBERT model)"),I0e.forEach(t),Mir=i(W),cF=n(W,"LI",{});var D0e=s(cF);rpe=n(D0e,"STRONG",{});var Idt=s(rpe);Eir=r(Idt,"roberta"),Idt.forEach(t),yir=r(D0e," \u2014 "),NG=n(D0e,"A",{href:!0});var Ddt=s(NG);wir=r(Ddt,"TFRobertaForSequenceClassification"),Ddt.forEach(t),Air=r(D0e," (RoBERTa model)"),D0e.forEach(t),Lir=i(W),fF=n(W,"LI",{});var j0e=s(fF);tpe=n(j0e,"STRONG",{});var jdt=s(tpe);Bir=r(jdt,"roformer"),jdt.forEach(t),xir=r(j0e," \u2014 "),qG=n(j0e,"A",{href:!0});var Ndt=s(qG);kir=r(Ndt,"TFRoFormerForSequenceClassification"),Ndt.forEach(t),Rir=r(j0e," (RoFormer model)"),j0e.forEach(t),Sir=i(W),mF=n(W,"LI",{});var N0e=s(mF);ape=n(N0e,"STRONG",{});var qdt=s(ape);Pir=r(qdt,"tapas"),qdt.forEach(t),$ir=r(N0e," \u2014 "),GG=n(N0e,"A",{href:!0});var Gdt=s(GG);Iir=r(Gdt,"TFTapasForSequenceClassification"),Gdt.forEach(t),Dir=r(N0e," (TAPAS model)"),N0e.forEach(t),jir=i(W),gF=n(W,"LI",{});var q0e=s(gF);npe=n(q0e,"STRONG",{});var Odt=s(npe);Nir=r(Odt,"transfo-xl"),Odt.forEach(t),qir=r(q0e," \u2014 "),OG=n(q0e,"A",{href:!0});var Xdt=s(OG);Gir=r(Xdt,"TFTransfoXLForSequenceClassification"),Xdt.forEach(t),Oir=r(q0e," (Transformer-XL model)"),q0e.forEach(t),Xir=i(W),hF=n(W,"LI",{});var G0e=s(hF);spe=n(G0e,"STRONG",{});var Vdt=s(spe);Vir=r(Vdt,"xlm"),Vdt.forEach(t),zir=r(G0e," \u2014 "),XG=n(G0e,"A",{href:!0});var zdt=s(XG);Wir=r(zdt,"TFXLMForSequenceClassification"),zdt.forEach(t),Qir=r(G0e," (XLM model)"),G0e.forEach(t),Hir=i(W),pF=n(W,"LI",{});var O0e=s(pF);lpe=n(O0e,"STRONG",{});var Wdt=s(lpe);Uir=r(Wdt,"xlm-roberta"),Wdt.forEach(t),Jir=r(O0e," \u2014 "),VG=n(O0e,"A",{href:!0});var Qdt=s(VG);Yir=r(Qdt,"TFXLMRobertaForSequenceClassification"),Qdt.forEach(t),Kir=r(O0e," (XLM-RoBERTa model)"),O0e.forEach(t),Zir=i(W),_F=n(W,"LI",{});var X0e=s(_F);ipe=n(X0e,"STRONG",{});var Hdt=s(ipe);edr=r(Hdt,"xlnet"),Hdt.forEach(t),odr=r(X0e," \u2014 "),zG=n(X0e,"A",{href:!0});var Udt=s(zG);rdr=r(Udt,"TFXLNetForSequenceClassification"),Udt.forEach(t),tdr=r(X0e," (XLNet model)"),X0e.forEach(t),W.forEach(t),adr=i(_a),dpe=n(_a,"P",{});var Jdt=s(dpe);ndr=r(Jdt,"Examples:"),Jdt.forEach(t),sdr=i(_a),m(Q6.$$.fragment,_a),_a.forEach(t),Vl.forEach(t),YBe=i(c),Mc=n(c,"H2",{class:!0});var lRe=s(Mc);uF=n(lRe,"A",{id:!0,class:!0,href:!0});var Ydt=s(uF);cpe=n(Ydt,"SPAN",{});var Kdt=s(cpe);m(H6.$$.fragment,Kdt),Kdt.forEach(t),Ydt.forEach(t),ldr=i(lRe),fpe=n(lRe,"SPAN",{});var Zdt=s(fpe);idr=r(Zdt,"TFAutoModelForMultipleChoice"),Zdt.forEach(t),lRe.forEach(t),KBe=i(c),Cr=n(c,"DIV",{class:!0});var Wl=s(Cr);m(U6.$$.fragment,Wl),ddr=i(Wl),Ec=n(Wl,"P",{});var Vz=s(Ec);cdr=r(Vz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),mpe=n(Vz,"CODE",{});var ect=s(mpe);fdr=r(ect,"from_pretrained()"),ect.forEach(t),mdr=r(Vz,"class method or the "),gpe=n(Vz,"CODE",{});var oct=s(gpe);gdr=r(oct,"from_config()"),oct.forEach(t),hdr=r(Vz,`class
method.`),Vz.forEach(t),pdr=i(Wl),J6=n(Wl,"P",{});var iRe=s(J6);_dr=r(iRe,"This class cannot be instantiated directly using "),hpe=n(iRe,"CODE",{});var rct=s(hpe);udr=r(rct,"__init__()"),rct.forEach(t),bdr=r(iRe," (throws an error)."),iRe.forEach(t),vdr=i(Wl),pt=n(Wl,"DIV",{class:!0});var Ql=s(pt);m(Y6.$$.fragment,Ql),Tdr=i(Ql),ppe=n(Ql,"P",{});var tct=s(ppe);Fdr=r(tct,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),tct.forEach(t),Cdr=i(Ql),yc=n(Ql,"P",{});var zz=s(yc);Mdr=r(zz,`Note:
Loading a model from its configuration file does `),_pe=n(zz,"STRONG",{});var act=s(_pe);Edr=r(act,"not"),act.forEach(t),ydr=r(zz,` load the model weights. It only affects the
model\u2019s configuration. Use `),upe=n(zz,"CODE",{});var nct=s(upe);wdr=r(nct,"from_pretrained()"),nct.forEach(t),Adr=r(zz,"to load the model weights."),zz.forEach(t),Ldr=i(Ql),bpe=n(Ql,"P",{});var sct=s(bpe);Bdr=r(sct,"Examples:"),sct.forEach(t),xdr=i(Ql),m(K6.$$.fragment,Ql),Ql.forEach(t),kdr=i(Wl),To=n(Wl,"DIV",{class:!0});var ua=s(To);m(Z6.$$.fragment,ua),Rdr=i(ua),vpe=n(ua,"P",{});var lct=s(vpe);Sdr=r(lct,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),lct.forEach(t),Pdr=i(ua),un=n(ua,"P",{});var nM=s(un);$dr=r(nM,"The model class to instantiate is selected based on the "),Tpe=n(nM,"CODE",{});var ict=s(Tpe);Idr=r(ict,"model_type"),ict.forEach(t),Ddr=r(nM,` property of the config object (either
passed as an argument or loaded from `),Fpe=n(nM,"CODE",{});var dct=s(Fpe);jdr=r(dct,"pretrained_model_name_or_path"),dct.forEach(t),Ndr=r(nM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cpe=n(nM,"CODE",{});var cct=s(Cpe);qdr=r(cct,"pretrained_model_name_or_path"),cct.forEach(t),Gdr=r(nM,":"),nM.forEach(t),Odr=i(ua),te=n(ua,"UL",{});var se=s(te);bF=n(se,"LI",{});var V0e=s(bF);Mpe=n(V0e,"STRONG",{});var fct=s(Mpe);Xdr=r(fct,"albert"),fct.forEach(t),Vdr=r(V0e," \u2014 "),WG=n(V0e,"A",{href:!0});var mct=s(WG);zdr=r(mct,"TFAlbertForMultipleChoice"),mct.forEach(t),Wdr=r(V0e," (ALBERT model)"),V0e.forEach(t),Qdr=i(se),vF=n(se,"LI",{});var z0e=s(vF);Epe=n(z0e,"STRONG",{});var gct=s(Epe);Hdr=r(gct,"bert"),gct.forEach(t),Udr=r(z0e," \u2014 "),QG=n(z0e,"A",{href:!0});var hct=s(QG);Jdr=r(hct,"TFBertForMultipleChoice"),hct.forEach(t),Ydr=r(z0e," (BERT model)"),z0e.forEach(t),Kdr=i(se),TF=n(se,"LI",{});var W0e=s(TF);ype=n(W0e,"STRONG",{});var pct=s(ype);Zdr=r(pct,"camembert"),pct.forEach(t),ecr=r(W0e," \u2014 "),HG=n(W0e,"A",{href:!0});var _ct=s(HG);ocr=r(_ct,"TFCamembertForMultipleChoice"),_ct.forEach(t),rcr=r(W0e," (CamemBERT model)"),W0e.forEach(t),tcr=i(se),FF=n(se,"LI",{});var Q0e=s(FF);wpe=n(Q0e,"STRONG",{});var uct=s(wpe);acr=r(uct,"convbert"),uct.forEach(t),ncr=r(Q0e," \u2014 "),UG=n(Q0e,"A",{href:!0});var bct=s(UG);scr=r(bct,"TFConvBertForMultipleChoice"),bct.forEach(t),lcr=r(Q0e," (ConvBERT model)"),Q0e.forEach(t),icr=i(se),CF=n(se,"LI",{});var H0e=s(CF);Ape=n(H0e,"STRONG",{});var vct=s(Ape);dcr=r(vct,"distilbert"),vct.forEach(t),ccr=r(H0e," \u2014 "),JG=n(H0e,"A",{href:!0});var Tct=s(JG);fcr=r(Tct,"TFDistilBertForMultipleChoice"),Tct.forEach(t),mcr=r(H0e," (DistilBERT model)"),H0e.forEach(t),gcr=i(se),MF=n(se,"LI",{});var U0e=s(MF);Lpe=n(U0e,"STRONG",{});var Fct=s(Lpe);hcr=r(Fct,"electra"),Fct.forEach(t),pcr=r(U0e," \u2014 "),YG=n(U0e,"A",{href:!0});var Cct=s(YG);_cr=r(Cct,"TFElectraForMultipleChoice"),Cct.forEach(t),ucr=r(U0e," (ELECTRA model)"),U0e.forEach(t),bcr=i(se),EF=n(se,"LI",{});var J0e=s(EF);Bpe=n(J0e,"STRONG",{});var Mct=s(Bpe);vcr=r(Mct,"flaubert"),Mct.forEach(t),Tcr=r(J0e," \u2014 "),KG=n(J0e,"A",{href:!0});var Ect=s(KG);Fcr=r(Ect,"TFFlaubertForMultipleChoice"),Ect.forEach(t),Ccr=r(J0e," (FlauBERT model)"),J0e.forEach(t),Mcr=i(se),yF=n(se,"LI",{});var Y0e=s(yF);xpe=n(Y0e,"STRONG",{});var yct=s(xpe);Ecr=r(yct,"funnel"),yct.forEach(t),ycr=r(Y0e," \u2014 "),ZG=n(Y0e,"A",{href:!0});var wct=s(ZG);wcr=r(wct,"TFFunnelForMultipleChoice"),wct.forEach(t),Acr=r(Y0e," (Funnel Transformer model)"),Y0e.forEach(t),Lcr=i(se),wF=n(se,"LI",{});var K0e=s(wF);kpe=n(K0e,"STRONG",{});var Act=s(kpe);Bcr=r(Act,"longformer"),Act.forEach(t),xcr=r(K0e," \u2014 "),eO=n(K0e,"A",{href:!0});var Lct=s(eO);kcr=r(Lct,"TFLongformerForMultipleChoice"),Lct.forEach(t),Rcr=r(K0e," (Longformer model)"),K0e.forEach(t),Scr=i(se),AF=n(se,"LI",{});var Z0e=s(AF);Rpe=n(Z0e,"STRONG",{});var Bct=s(Rpe);Pcr=r(Bct,"mobilebert"),Bct.forEach(t),$cr=r(Z0e," \u2014 "),oO=n(Z0e,"A",{href:!0});var xct=s(oO);Icr=r(xct,"TFMobileBertForMultipleChoice"),xct.forEach(t),Dcr=r(Z0e," (MobileBERT model)"),Z0e.forEach(t),jcr=i(se),LF=n(se,"LI",{});var eLe=s(LF);Spe=n(eLe,"STRONG",{});var kct=s(Spe);Ncr=r(kct,"mpnet"),kct.forEach(t),qcr=r(eLe," \u2014 "),rO=n(eLe,"A",{href:!0});var Rct=s(rO);Gcr=r(Rct,"TFMPNetForMultipleChoice"),Rct.forEach(t),Ocr=r(eLe," (MPNet model)"),eLe.forEach(t),Xcr=i(se),BF=n(se,"LI",{});var oLe=s(BF);Ppe=n(oLe,"STRONG",{});var Sct=s(Ppe);Vcr=r(Sct,"rembert"),Sct.forEach(t),zcr=r(oLe," \u2014 "),tO=n(oLe,"A",{href:!0});var Pct=s(tO);Wcr=r(Pct,"TFRemBertForMultipleChoice"),Pct.forEach(t),Qcr=r(oLe," (RemBERT model)"),oLe.forEach(t),Hcr=i(se),xF=n(se,"LI",{});var rLe=s(xF);$pe=n(rLe,"STRONG",{});var $ct=s($pe);Ucr=r($ct,"roberta"),$ct.forEach(t),Jcr=r(rLe," \u2014 "),aO=n(rLe,"A",{href:!0});var Ict=s(aO);Ycr=r(Ict,"TFRobertaForMultipleChoice"),Ict.forEach(t),Kcr=r(rLe," (RoBERTa model)"),rLe.forEach(t),Zcr=i(se),kF=n(se,"LI",{});var tLe=s(kF);Ipe=n(tLe,"STRONG",{});var Dct=s(Ipe);efr=r(Dct,"roformer"),Dct.forEach(t),ofr=r(tLe," \u2014 "),nO=n(tLe,"A",{href:!0});var jct=s(nO);rfr=r(jct,"TFRoFormerForMultipleChoice"),jct.forEach(t),tfr=r(tLe," (RoFormer model)"),tLe.forEach(t),afr=i(se),RF=n(se,"LI",{});var aLe=s(RF);Dpe=n(aLe,"STRONG",{});var Nct=s(Dpe);nfr=r(Nct,"xlm"),Nct.forEach(t),sfr=r(aLe," \u2014 "),sO=n(aLe,"A",{href:!0});var qct=s(sO);lfr=r(qct,"TFXLMForMultipleChoice"),qct.forEach(t),ifr=r(aLe," (XLM model)"),aLe.forEach(t),dfr=i(se),SF=n(se,"LI",{});var nLe=s(SF);jpe=n(nLe,"STRONG",{});var Gct=s(jpe);cfr=r(Gct,"xlm-roberta"),Gct.forEach(t),ffr=r(nLe," \u2014 "),lO=n(nLe,"A",{href:!0});var Oct=s(lO);mfr=r(Oct,"TFXLMRobertaForMultipleChoice"),Oct.forEach(t),gfr=r(nLe," (XLM-RoBERTa model)"),nLe.forEach(t),hfr=i(se),PF=n(se,"LI",{});var sLe=s(PF);Npe=n(sLe,"STRONG",{});var Xct=s(Npe);pfr=r(Xct,"xlnet"),Xct.forEach(t),_fr=r(sLe," \u2014 "),iO=n(sLe,"A",{href:!0});var Vct=s(iO);ufr=r(Vct,"TFXLNetForMultipleChoice"),Vct.forEach(t),bfr=r(sLe," (XLNet model)"),sLe.forEach(t),se.forEach(t),vfr=i(ua),qpe=n(ua,"P",{});var zct=s(qpe);Tfr=r(zct,"Examples:"),zct.forEach(t),Ffr=i(ua),m(eA.$$.fragment,ua),ua.forEach(t),Wl.forEach(t),ZBe=i(c),wc=n(c,"H2",{class:!0});var dRe=s(wc);$F=n(dRe,"A",{id:!0,class:!0,href:!0});var Wct=s($F);Gpe=n(Wct,"SPAN",{});var Qct=s(Gpe);m(oA.$$.fragment,Qct),Qct.forEach(t),Wct.forEach(t),Cfr=i(dRe),Ope=n(dRe,"SPAN",{});var Hct=s(Ope);Mfr=r(Hct,"TFAutoModelForTableQuestionAnswering"),Hct.forEach(t),dRe.forEach(t),exe=i(c),Mr=n(c,"DIV",{class:!0});var Hl=s(Mr);m(rA.$$.fragment,Hl),Efr=i(Hl),Ac=n(Hl,"P",{});var Wz=s(Ac);yfr=r(Wz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Xpe=n(Wz,"CODE",{});var Uct=s(Xpe);wfr=r(Uct,"from_pretrained()"),Uct.forEach(t),Afr=r(Wz,"class method or the "),Vpe=n(Wz,"CODE",{});var Jct=s(Vpe);Lfr=r(Jct,"from_config()"),Jct.forEach(t),Bfr=r(Wz,`class
method.`),Wz.forEach(t),xfr=i(Hl),tA=n(Hl,"P",{});var cRe=s(tA);kfr=r(cRe,"This class cannot be instantiated directly using "),zpe=n(cRe,"CODE",{});var Yct=s(zpe);Rfr=r(Yct,"__init__()"),Yct.forEach(t),Sfr=r(cRe," (throws an error)."),cRe.forEach(t),Pfr=i(Hl),_t=n(Hl,"DIV",{class:!0});var Ul=s(_t);m(aA.$$.fragment,Ul),$fr=i(Ul),Wpe=n(Ul,"P",{});var Kct=s(Wpe);Ifr=r(Kct,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Kct.forEach(t),Dfr=i(Ul),Lc=n(Ul,"P",{});var Qz=s(Lc);jfr=r(Qz,`Note:
Loading a model from its configuration file does `),Qpe=n(Qz,"STRONG",{});var Zct=s(Qpe);Nfr=r(Zct,"not"),Zct.forEach(t),qfr=r(Qz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Hpe=n(Qz,"CODE",{});var eft=s(Hpe);Gfr=r(eft,"from_pretrained()"),eft.forEach(t),Ofr=r(Qz,"to load the model weights."),Qz.forEach(t),Xfr=i(Ul),Upe=n(Ul,"P",{});var oft=s(Upe);Vfr=r(oft,"Examples:"),oft.forEach(t),zfr=i(Ul),m(nA.$$.fragment,Ul),Ul.forEach(t),Wfr=i(Hl),Fo=n(Hl,"DIV",{class:!0});var ba=s(Fo);m(sA.$$.fragment,ba),Qfr=i(ba),Jpe=n(ba,"P",{});var rft=s(Jpe);Hfr=r(rft,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),rft.forEach(t),Ufr=i(ba),bn=n(ba,"P",{});var sM=s(bn);Jfr=r(sM,"The model class to instantiate is selected based on the "),Ype=n(sM,"CODE",{});var tft=s(Ype);Yfr=r(tft,"model_type"),tft.forEach(t),Kfr=r(sM,` property of the config object (either
passed as an argument or loaded from `),Kpe=n(sM,"CODE",{});var aft=s(Kpe);Zfr=r(aft,"pretrained_model_name_or_path"),aft.forEach(t),emr=r(sM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zpe=n(sM,"CODE",{});var nft=s(Zpe);omr=r(nft,"pretrained_model_name_or_path"),nft.forEach(t),rmr=r(sM,":"),sM.forEach(t),tmr=i(ba),e_e=n(ba,"UL",{});var sft=s(e_e);IF=n(sft,"LI",{});var lLe=s(IF);o_e=n(lLe,"STRONG",{});var lft=s(o_e);amr=r(lft,"tapas"),lft.forEach(t),nmr=r(lLe," \u2014 "),dO=n(lLe,"A",{href:!0});var ift=s(dO);smr=r(ift,"TFTapasForQuestionAnswering"),ift.forEach(t),lmr=r(lLe," (TAPAS model)"),lLe.forEach(t),sft.forEach(t),imr=i(ba),r_e=n(ba,"P",{});var dft=s(r_e);dmr=r(dft,"Examples:"),dft.forEach(t),cmr=i(ba),m(lA.$$.fragment,ba),ba.forEach(t),Hl.forEach(t),oxe=i(c),Bc=n(c,"H2",{class:!0});var fRe=s(Bc);DF=n(fRe,"A",{id:!0,class:!0,href:!0});var cft=s(DF);t_e=n(cft,"SPAN",{});var fft=s(t_e);m(iA.$$.fragment,fft),fft.forEach(t),cft.forEach(t),fmr=i(fRe),a_e=n(fRe,"SPAN",{});var mft=s(a_e);mmr=r(mft,"TFAutoModelForTokenClassification"),mft.forEach(t),fRe.forEach(t),rxe=i(c),Er=n(c,"DIV",{class:!0});var Jl=s(Er);m(dA.$$.fragment,Jl),gmr=i(Jl),xc=n(Jl,"P",{});var Hz=s(xc);hmr=r(Hz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),n_e=n(Hz,"CODE",{});var gft=s(n_e);pmr=r(gft,"from_pretrained()"),gft.forEach(t),_mr=r(Hz,"class method or the "),s_e=n(Hz,"CODE",{});var hft=s(s_e);umr=r(hft,"from_config()"),hft.forEach(t),bmr=r(Hz,`class
method.`),Hz.forEach(t),vmr=i(Jl),cA=n(Jl,"P",{});var mRe=s(cA);Tmr=r(mRe,"This class cannot be instantiated directly using "),l_e=n(mRe,"CODE",{});var pft=s(l_e);Fmr=r(pft,"__init__()"),pft.forEach(t),Cmr=r(mRe," (throws an error)."),mRe.forEach(t),Mmr=i(Jl),ut=n(Jl,"DIV",{class:!0});var Yl=s(ut);m(fA.$$.fragment,Yl),Emr=i(Yl),i_e=n(Yl,"P",{});var _ft=s(i_e);ymr=r(_ft,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),_ft.forEach(t),wmr=i(Yl),kc=n(Yl,"P",{});var Uz=s(kc);Amr=r(Uz,`Note:
Loading a model from its configuration file does `),d_e=n(Uz,"STRONG",{});var uft=s(d_e);Lmr=r(uft,"not"),uft.forEach(t),Bmr=r(Uz,` load the model weights. It only affects the
model\u2019s configuration. Use `),c_e=n(Uz,"CODE",{});var bft=s(c_e);xmr=r(bft,"from_pretrained()"),bft.forEach(t),kmr=r(Uz,"to load the model weights."),Uz.forEach(t),Rmr=i(Yl),f_e=n(Yl,"P",{});var vft=s(f_e);Smr=r(vft,"Examples:"),vft.forEach(t),Pmr=i(Yl),m(mA.$$.fragment,Yl),Yl.forEach(t),$mr=i(Jl),Co=n(Jl,"DIV",{class:!0});var va=s(Co);m(gA.$$.fragment,va),Imr=i(va),m_e=n(va,"P",{});var Tft=s(m_e);Dmr=r(Tft,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Tft.forEach(t),jmr=i(va),vn=n(va,"P",{});var lM=s(vn);Nmr=r(lM,"The model class to instantiate is selected based on the "),g_e=n(lM,"CODE",{});var Fft=s(g_e);qmr=r(Fft,"model_type"),Fft.forEach(t),Gmr=r(lM,` property of the config object (either
passed as an argument or loaded from `),h_e=n(lM,"CODE",{});var Cft=s(h_e);Omr=r(Cft,"pretrained_model_name_or_path"),Cft.forEach(t),Xmr=r(lM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p_e=n(lM,"CODE",{});var Mft=s(p_e);Vmr=r(Mft,"pretrained_model_name_or_path"),Mft.forEach(t),zmr=r(lM,":"),lM.forEach(t),Wmr=i(va),K=n(va,"UL",{});var oe=s(K);jF=n(oe,"LI",{});var iLe=s(jF);__e=n(iLe,"STRONG",{});var Eft=s(__e);Qmr=r(Eft,"albert"),Eft.forEach(t),Hmr=r(iLe," \u2014 "),cO=n(iLe,"A",{href:!0});var yft=s(cO);Umr=r(yft,"TFAlbertForTokenClassification"),yft.forEach(t),Jmr=r(iLe," (ALBERT model)"),iLe.forEach(t),Ymr=i(oe),NF=n(oe,"LI",{});var dLe=s(NF);u_e=n(dLe,"STRONG",{});var wft=s(u_e);Kmr=r(wft,"bert"),wft.forEach(t),Zmr=r(dLe," \u2014 "),fO=n(dLe,"A",{href:!0});var Aft=s(fO);egr=r(Aft,"TFBertForTokenClassification"),Aft.forEach(t),ogr=r(dLe," (BERT model)"),dLe.forEach(t),rgr=i(oe),qF=n(oe,"LI",{});var cLe=s(qF);b_e=n(cLe,"STRONG",{});var Lft=s(b_e);tgr=r(Lft,"camembert"),Lft.forEach(t),agr=r(cLe," \u2014 "),mO=n(cLe,"A",{href:!0});var Bft=s(mO);ngr=r(Bft,"TFCamembertForTokenClassification"),Bft.forEach(t),sgr=r(cLe," (CamemBERT model)"),cLe.forEach(t),lgr=i(oe),GF=n(oe,"LI",{});var fLe=s(GF);v_e=n(fLe,"STRONG",{});var xft=s(v_e);igr=r(xft,"convbert"),xft.forEach(t),dgr=r(fLe," \u2014 "),gO=n(fLe,"A",{href:!0});var kft=s(gO);cgr=r(kft,"TFConvBertForTokenClassification"),kft.forEach(t),fgr=r(fLe," (ConvBERT model)"),fLe.forEach(t),mgr=i(oe),OF=n(oe,"LI",{});var mLe=s(OF);T_e=n(mLe,"STRONG",{});var Rft=s(T_e);ggr=r(Rft,"deberta"),Rft.forEach(t),hgr=r(mLe," \u2014 "),hO=n(mLe,"A",{href:!0});var Sft=s(hO);pgr=r(Sft,"TFDebertaForTokenClassification"),Sft.forEach(t),_gr=r(mLe," (DeBERTa model)"),mLe.forEach(t),ugr=i(oe),XF=n(oe,"LI",{});var gLe=s(XF);F_e=n(gLe,"STRONG",{});var Pft=s(F_e);bgr=r(Pft,"deberta-v2"),Pft.forEach(t),vgr=r(gLe," \u2014 "),pO=n(gLe,"A",{href:!0});var $ft=s(pO);Tgr=r($ft,"TFDebertaV2ForTokenClassification"),$ft.forEach(t),Fgr=r(gLe," (DeBERTa-v2 model)"),gLe.forEach(t),Cgr=i(oe),VF=n(oe,"LI",{});var hLe=s(VF);C_e=n(hLe,"STRONG",{});var Ift=s(C_e);Mgr=r(Ift,"distilbert"),Ift.forEach(t),Egr=r(hLe," \u2014 "),_O=n(hLe,"A",{href:!0});var Dft=s(_O);ygr=r(Dft,"TFDistilBertForTokenClassification"),Dft.forEach(t),wgr=r(hLe," (DistilBERT model)"),hLe.forEach(t),Agr=i(oe),zF=n(oe,"LI",{});var pLe=s(zF);M_e=n(pLe,"STRONG",{});var jft=s(M_e);Lgr=r(jft,"electra"),jft.forEach(t),Bgr=r(pLe," \u2014 "),uO=n(pLe,"A",{href:!0});var Nft=s(uO);xgr=r(Nft,"TFElectraForTokenClassification"),Nft.forEach(t),kgr=r(pLe," (ELECTRA model)"),pLe.forEach(t),Rgr=i(oe),WF=n(oe,"LI",{});var _Le=s(WF);E_e=n(_Le,"STRONG",{});var qft=s(E_e);Sgr=r(qft,"flaubert"),qft.forEach(t),Pgr=r(_Le," \u2014 "),bO=n(_Le,"A",{href:!0});var Gft=s(bO);$gr=r(Gft,"TFFlaubertForTokenClassification"),Gft.forEach(t),Igr=r(_Le," (FlauBERT model)"),_Le.forEach(t),Dgr=i(oe),QF=n(oe,"LI",{});var uLe=s(QF);y_e=n(uLe,"STRONG",{});var Oft=s(y_e);jgr=r(Oft,"funnel"),Oft.forEach(t),Ngr=r(uLe," \u2014 "),vO=n(uLe,"A",{href:!0});var Xft=s(vO);qgr=r(Xft,"TFFunnelForTokenClassification"),Xft.forEach(t),Ggr=r(uLe," (Funnel Transformer model)"),uLe.forEach(t),Ogr=i(oe),HF=n(oe,"LI",{});var bLe=s(HF);w_e=n(bLe,"STRONG",{});var Vft=s(w_e);Xgr=r(Vft,"layoutlm"),Vft.forEach(t),Vgr=r(bLe," \u2014 "),TO=n(bLe,"A",{href:!0});var zft=s(TO);zgr=r(zft,"TFLayoutLMForTokenClassification"),zft.forEach(t),Wgr=r(bLe," (LayoutLM model)"),bLe.forEach(t),Qgr=i(oe),UF=n(oe,"LI",{});var vLe=s(UF);A_e=n(vLe,"STRONG",{});var Wft=s(A_e);Hgr=r(Wft,"longformer"),Wft.forEach(t),Ugr=r(vLe," \u2014 "),FO=n(vLe,"A",{href:!0});var Qft=s(FO);Jgr=r(Qft,"TFLongformerForTokenClassification"),Qft.forEach(t),Ygr=r(vLe," (Longformer model)"),vLe.forEach(t),Kgr=i(oe),JF=n(oe,"LI",{});var TLe=s(JF);L_e=n(TLe,"STRONG",{});var Hft=s(L_e);Zgr=r(Hft,"mobilebert"),Hft.forEach(t),ehr=r(TLe," \u2014 "),CO=n(TLe,"A",{href:!0});var Uft=s(CO);ohr=r(Uft,"TFMobileBertForTokenClassification"),Uft.forEach(t),rhr=r(TLe," (MobileBERT model)"),TLe.forEach(t),thr=i(oe),YF=n(oe,"LI",{});var FLe=s(YF);B_e=n(FLe,"STRONG",{});var Jft=s(B_e);ahr=r(Jft,"mpnet"),Jft.forEach(t),nhr=r(FLe," \u2014 "),MO=n(FLe,"A",{href:!0});var Yft=s(MO);shr=r(Yft,"TFMPNetForTokenClassification"),Yft.forEach(t),lhr=r(FLe," (MPNet model)"),FLe.forEach(t),ihr=i(oe),KF=n(oe,"LI",{});var CLe=s(KF);x_e=n(CLe,"STRONG",{});var Kft=s(x_e);dhr=r(Kft,"rembert"),Kft.forEach(t),chr=r(CLe," \u2014 "),EO=n(CLe,"A",{href:!0});var Zft=s(EO);fhr=r(Zft,"TFRemBertForTokenClassification"),Zft.forEach(t),mhr=r(CLe," (RemBERT model)"),CLe.forEach(t),ghr=i(oe),ZF=n(oe,"LI",{});var MLe=s(ZF);k_e=n(MLe,"STRONG",{});var emt=s(k_e);hhr=r(emt,"roberta"),emt.forEach(t),phr=r(MLe," \u2014 "),yO=n(MLe,"A",{href:!0});var omt=s(yO);_hr=r(omt,"TFRobertaForTokenClassification"),omt.forEach(t),uhr=r(MLe," (RoBERTa model)"),MLe.forEach(t),bhr=i(oe),e9=n(oe,"LI",{});var ELe=s(e9);R_e=n(ELe,"STRONG",{});var rmt=s(R_e);vhr=r(rmt,"roformer"),rmt.forEach(t),Thr=r(ELe," \u2014 "),wO=n(ELe,"A",{href:!0});var tmt=s(wO);Fhr=r(tmt,"TFRoFormerForTokenClassification"),tmt.forEach(t),Chr=r(ELe," (RoFormer model)"),ELe.forEach(t),Mhr=i(oe),o9=n(oe,"LI",{});var yLe=s(o9);S_e=n(yLe,"STRONG",{});var amt=s(S_e);Ehr=r(amt,"xlm"),amt.forEach(t),yhr=r(yLe," \u2014 "),AO=n(yLe,"A",{href:!0});var nmt=s(AO);whr=r(nmt,"TFXLMForTokenClassification"),nmt.forEach(t),Ahr=r(yLe," (XLM model)"),yLe.forEach(t),Lhr=i(oe),r9=n(oe,"LI",{});var wLe=s(r9);P_e=n(wLe,"STRONG",{});var smt=s(P_e);Bhr=r(smt,"xlm-roberta"),smt.forEach(t),xhr=r(wLe," \u2014 "),LO=n(wLe,"A",{href:!0});var lmt=s(LO);khr=r(lmt,"TFXLMRobertaForTokenClassification"),lmt.forEach(t),Rhr=r(wLe," (XLM-RoBERTa model)"),wLe.forEach(t),Shr=i(oe),t9=n(oe,"LI",{});var ALe=s(t9);$_e=n(ALe,"STRONG",{});var imt=s($_e);Phr=r(imt,"xlnet"),imt.forEach(t),$hr=r(ALe," \u2014 "),BO=n(ALe,"A",{href:!0});var dmt=s(BO);Ihr=r(dmt,"TFXLNetForTokenClassification"),dmt.forEach(t),Dhr=r(ALe," (XLNet model)"),ALe.forEach(t),oe.forEach(t),jhr=i(va),I_e=n(va,"P",{});var cmt=s(I_e);Nhr=r(cmt,"Examples:"),cmt.forEach(t),qhr=i(va),m(hA.$$.fragment,va),va.forEach(t),Jl.forEach(t),txe=i(c),Rc=n(c,"H2",{class:!0});var gRe=s(Rc);a9=n(gRe,"A",{id:!0,class:!0,href:!0});var fmt=s(a9);D_e=n(fmt,"SPAN",{});var mmt=s(D_e);m(pA.$$.fragment,mmt),mmt.forEach(t),fmt.forEach(t),Ghr=i(gRe),j_e=n(gRe,"SPAN",{});var gmt=s(j_e);Ohr=r(gmt,"TFAutoModelForQuestionAnswering"),gmt.forEach(t),gRe.forEach(t),axe=i(c),yr=n(c,"DIV",{class:!0});var Kl=s(yr);m(_A.$$.fragment,Kl),Xhr=i(Kl),Sc=n(Kl,"P",{});var Jz=s(Sc);Vhr=r(Jz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),N_e=n(Jz,"CODE",{});var hmt=s(N_e);zhr=r(hmt,"from_pretrained()"),hmt.forEach(t),Whr=r(Jz,"class method or the "),q_e=n(Jz,"CODE",{});var pmt=s(q_e);Qhr=r(pmt,"from_config()"),pmt.forEach(t),Hhr=r(Jz,`class
method.`),Jz.forEach(t),Uhr=i(Kl),uA=n(Kl,"P",{});var hRe=s(uA);Jhr=r(hRe,"This class cannot be instantiated directly using "),G_e=n(hRe,"CODE",{});var _mt=s(G_e);Yhr=r(_mt,"__init__()"),_mt.forEach(t),Khr=r(hRe," (throws an error)."),hRe.forEach(t),Zhr=i(Kl),bt=n(Kl,"DIV",{class:!0});var Zl=s(bt);m(bA.$$.fragment,Zl),epr=i(Zl),O_e=n(Zl,"P",{});var umt=s(O_e);opr=r(umt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),umt.forEach(t),rpr=i(Zl),Pc=n(Zl,"P",{});var Yz=s(Pc);tpr=r(Yz,`Note:
Loading a model from its configuration file does `),X_e=n(Yz,"STRONG",{});var bmt=s(X_e);apr=r(bmt,"not"),bmt.forEach(t),npr=r(Yz,` load the model weights. It only affects the
model\u2019s configuration. Use `),V_e=n(Yz,"CODE",{});var vmt=s(V_e);spr=r(vmt,"from_pretrained()"),vmt.forEach(t),lpr=r(Yz,"to load the model weights."),Yz.forEach(t),ipr=i(Zl),z_e=n(Zl,"P",{});var Tmt=s(z_e);dpr=r(Tmt,"Examples:"),Tmt.forEach(t),cpr=i(Zl),m(vA.$$.fragment,Zl),Zl.forEach(t),fpr=i(Kl),Mo=n(Kl,"DIV",{class:!0});var Ta=s(Mo);m(TA.$$.fragment,Ta),mpr=i(Ta),W_e=n(Ta,"P",{});var Fmt=s(W_e);gpr=r(Fmt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Fmt.forEach(t),hpr=i(Ta),Tn=n(Ta,"P",{});var iM=s(Tn);ppr=r(iM,"The model class to instantiate is selected based on the "),Q_e=n(iM,"CODE",{});var Cmt=s(Q_e);_pr=r(Cmt,"model_type"),Cmt.forEach(t),upr=r(iM,` property of the config object (either
passed as an argument or loaded from `),H_e=n(iM,"CODE",{});var Mmt=s(H_e);bpr=r(Mmt,"pretrained_model_name_or_path"),Mmt.forEach(t),vpr=r(iM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U_e=n(iM,"CODE",{});var Emt=s(U_e);Tpr=r(Emt,"pretrained_model_name_or_path"),Emt.forEach(t),Fpr=r(iM,":"),iM.forEach(t),Cpr=i(Ta),Z=n(Ta,"UL",{});var re=s(Z);n9=n(re,"LI",{});var LLe=s(n9);J_e=n(LLe,"STRONG",{});var ymt=s(J_e);Mpr=r(ymt,"albert"),ymt.forEach(t),Epr=r(LLe," \u2014 "),xO=n(LLe,"A",{href:!0});var wmt=s(xO);ypr=r(wmt,"TFAlbertForQuestionAnswering"),wmt.forEach(t),wpr=r(LLe," (ALBERT model)"),LLe.forEach(t),Apr=i(re),s9=n(re,"LI",{});var BLe=s(s9);Y_e=n(BLe,"STRONG",{});var Amt=s(Y_e);Lpr=r(Amt,"bert"),Amt.forEach(t),Bpr=r(BLe," \u2014 "),kO=n(BLe,"A",{href:!0});var Lmt=s(kO);xpr=r(Lmt,"TFBertForQuestionAnswering"),Lmt.forEach(t),kpr=r(BLe," (BERT model)"),BLe.forEach(t),Rpr=i(re),l9=n(re,"LI",{});var xLe=s(l9);K_e=n(xLe,"STRONG",{});var Bmt=s(K_e);Spr=r(Bmt,"camembert"),Bmt.forEach(t),Ppr=r(xLe," \u2014 "),RO=n(xLe,"A",{href:!0});var xmt=s(RO);$pr=r(xmt,"TFCamembertForQuestionAnswering"),xmt.forEach(t),Ipr=r(xLe," (CamemBERT model)"),xLe.forEach(t),Dpr=i(re),i9=n(re,"LI",{});var kLe=s(i9);Z_e=n(kLe,"STRONG",{});var kmt=s(Z_e);jpr=r(kmt,"convbert"),kmt.forEach(t),Npr=r(kLe," \u2014 "),SO=n(kLe,"A",{href:!0});var Rmt=s(SO);qpr=r(Rmt,"TFConvBertForQuestionAnswering"),Rmt.forEach(t),Gpr=r(kLe," (ConvBERT model)"),kLe.forEach(t),Opr=i(re),d9=n(re,"LI",{});var RLe=s(d9);eue=n(RLe,"STRONG",{});var Smt=s(eue);Xpr=r(Smt,"deberta"),Smt.forEach(t),Vpr=r(RLe," \u2014 "),PO=n(RLe,"A",{href:!0});var Pmt=s(PO);zpr=r(Pmt,"TFDebertaForQuestionAnswering"),Pmt.forEach(t),Wpr=r(RLe," (DeBERTa model)"),RLe.forEach(t),Qpr=i(re),c9=n(re,"LI",{});var SLe=s(c9);oue=n(SLe,"STRONG",{});var $mt=s(oue);Hpr=r($mt,"deberta-v2"),$mt.forEach(t),Upr=r(SLe," \u2014 "),$O=n(SLe,"A",{href:!0});var Imt=s($O);Jpr=r(Imt,"TFDebertaV2ForQuestionAnswering"),Imt.forEach(t),Ypr=r(SLe," (DeBERTa-v2 model)"),SLe.forEach(t),Kpr=i(re),f9=n(re,"LI",{});var PLe=s(f9);rue=n(PLe,"STRONG",{});var Dmt=s(rue);Zpr=r(Dmt,"distilbert"),Dmt.forEach(t),e_r=r(PLe," \u2014 "),IO=n(PLe,"A",{href:!0});var jmt=s(IO);o_r=r(jmt,"TFDistilBertForQuestionAnswering"),jmt.forEach(t),r_r=r(PLe," (DistilBERT model)"),PLe.forEach(t),t_r=i(re),m9=n(re,"LI",{});var $Le=s(m9);tue=n($Le,"STRONG",{});var Nmt=s(tue);a_r=r(Nmt,"electra"),Nmt.forEach(t),n_r=r($Le," \u2014 "),DO=n($Le,"A",{href:!0});var qmt=s(DO);s_r=r(qmt,"TFElectraForQuestionAnswering"),qmt.forEach(t),l_r=r($Le," (ELECTRA model)"),$Le.forEach(t),i_r=i(re),g9=n(re,"LI",{});var ILe=s(g9);aue=n(ILe,"STRONG",{});var Gmt=s(aue);d_r=r(Gmt,"flaubert"),Gmt.forEach(t),c_r=r(ILe," \u2014 "),jO=n(ILe,"A",{href:!0});var Omt=s(jO);f_r=r(Omt,"TFFlaubertForQuestionAnsweringSimple"),Omt.forEach(t),m_r=r(ILe," (FlauBERT model)"),ILe.forEach(t),g_r=i(re),h9=n(re,"LI",{});var DLe=s(h9);nue=n(DLe,"STRONG",{});var Xmt=s(nue);h_r=r(Xmt,"funnel"),Xmt.forEach(t),p_r=r(DLe," \u2014 "),NO=n(DLe,"A",{href:!0});var Vmt=s(NO);__r=r(Vmt,"TFFunnelForQuestionAnswering"),Vmt.forEach(t),u_r=r(DLe," (Funnel Transformer model)"),DLe.forEach(t),b_r=i(re),p9=n(re,"LI",{});var jLe=s(p9);sue=n(jLe,"STRONG",{});var zmt=s(sue);v_r=r(zmt,"longformer"),zmt.forEach(t),T_r=r(jLe," \u2014 "),qO=n(jLe,"A",{href:!0});var Wmt=s(qO);F_r=r(Wmt,"TFLongformerForQuestionAnswering"),Wmt.forEach(t),C_r=r(jLe," (Longformer model)"),jLe.forEach(t),M_r=i(re),_9=n(re,"LI",{});var NLe=s(_9);lue=n(NLe,"STRONG",{});var Qmt=s(lue);E_r=r(Qmt,"mobilebert"),Qmt.forEach(t),y_r=r(NLe," \u2014 "),GO=n(NLe,"A",{href:!0});var Hmt=s(GO);w_r=r(Hmt,"TFMobileBertForQuestionAnswering"),Hmt.forEach(t),A_r=r(NLe," (MobileBERT model)"),NLe.forEach(t),L_r=i(re),u9=n(re,"LI",{});var qLe=s(u9);iue=n(qLe,"STRONG",{});var Umt=s(iue);B_r=r(Umt,"mpnet"),Umt.forEach(t),x_r=r(qLe," \u2014 "),OO=n(qLe,"A",{href:!0});var Jmt=s(OO);k_r=r(Jmt,"TFMPNetForQuestionAnswering"),Jmt.forEach(t),R_r=r(qLe," (MPNet model)"),qLe.forEach(t),S_r=i(re),b9=n(re,"LI",{});var GLe=s(b9);due=n(GLe,"STRONG",{});var Ymt=s(due);P_r=r(Ymt,"rembert"),Ymt.forEach(t),$_r=r(GLe," \u2014 "),XO=n(GLe,"A",{href:!0});var Kmt=s(XO);I_r=r(Kmt,"TFRemBertForQuestionAnswering"),Kmt.forEach(t),D_r=r(GLe," (RemBERT model)"),GLe.forEach(t),j_r=i(re),v9=n(re,"LI",{});var OLe=s(v9);cue=n(OLe,"STRONG",{});var Zmt=s(cue);N_r=r(Zmt,"roberta"),Zmt.forEach(t),q_r=r(OLe," \u2014 "),VO=n(OLe,"A",{href:!0});var egt=s(VO);G_r=r(egt,"TFRobertaForQuestionAnswering"),egt.forEach(t),O_r=r(OLe," (RoBERTa model)"),OLe.forEach(t),X_r=i(re),T9=n(re,"LI",{});var XLe=s(T9);fue=n(XLe,"STRONG",{});var ogt=s(fue);V_r=r(ogt,"roformer"),ogt.forEach(t),z_r=r(XLe," \u2014 "),zO=n(XLe,"A",{href:!0});var rgt=s(zO);W_r=r(rgt,"TFRoFormerForQuestionAnswering"),rgt.forEach(t),Q_r=r(XLe," (RoFormer model)"),XLe.forEach(t),H_r=i(re),F9=n(re,"LI",{});var VLe=s(F9);mue=n(VLe,"STRONG",{});var tgt=s(mue);U_r=r(tgt,"xlm"),tgt.forEach(t),J_r=r(VLe," \u2014 "),WO=n(VLe,"A",{href:!0});var agt=s(WO);Y_r=r(agt,"TFXLMForQuestionAnsweringSimple"),agt.forEach(t),K_r=r(VLe," (XLM model)"),VLe.forEach(t),Z_r=i(re),C9=n(re,"LI",{});var zLe=s(C9);gue=n(zLe,"STRONG",{});var ngt=s(gue);eur=r(ngt,"xlm-roberta"),ngt.forEach(t),our=r(zLe," \u2014 "),QO=n(zLe,"A",{href:!0});var sgt=s(QO);rur=r(sgt,"TFXLMRobertaForQuestionAnswering"),sgt.forEach(t),tur=r(zLe," (XLM-RoBERTa model)"),zLe.forEach(t),aur=i(re),M9=n(re,"LI",{});var WLe=s(M9);hue=n(WLe,"STRONG",{});var lgt=s(hue);nur=r(lgt,"xlnet"),lgt.forEach(t),sur=r(WLe," \u2014 "),HO=n(WLe,"A",{href:!0});var igt=s(HO);lur=r(igt,"TFXLNetForQuestionAnsweringSimple"),igt.forEach(t),iur=r(WLe," (XLNet model)"),WLe.forEach(t),re.forEach(t),dur=i(Ta),pue=n(Ta,"P",{});var dgt=s(pue);cur=r(dgt,"Examples:"),dgt.forEach(t),fur=i(Ta),m(FA.$$.fragment,Ta),Ta.forEach(t),Kl.forEach(t),nxe=i(c),$c=n(c,"H2",{class:!0});var pRe=s($c);E9=n(pRe,"A",{id:!0,class:!0,href:!0});var cgt=s(E9);_ue=n(cgt,"SPAN",{});var fgt=s(_ue);m(CA.$$.fragment,fgt),fgt.forEach(t),cgt.forEach(t),mur=i(pRe),uue=n(pRe,"SPAN",{});var mgt=s(uue);gur=r(mgt,"TFAutoModelForVision2Seq"),mgt.forEach(t),pRe.forEach(t),sxe=i(c),wr=n(c,"DIV",{class:!0});var ei=s(wr);m(MA.$$.fragment,ei),hur=i(ei),Ic=n(ei,"P",{});var Kz=s(Ic);pur=r(Kz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),bue=n(Kz,"CODE",{});var ggt=s(bue);_ur=r(ggt,"from_pretrained()"),ggt.forEach(t),uur=r(Kz,"class method or the "),vue=n(Kz,"CODE",{});var hgt=s(vue);bur=r(hgt,"from_config()"),hgt.forEach(t),vur=r(Kz,`class
method.`),Kz.forEach(t),Tur=i(ei),EA=n(ei,"P",{});var _Re=s(EA);Fur=r(_Re,"This class cannot be instantiated directly using "),Tue=n(_Re,"CODE",{});var pgt=s(Tue);Cur=r(pgt,"__init__()"),pgt.forEach(t),Mur=r(_Re," (throws an error)."),_Re.forEach(t),Eur=i(ei),vt=n(ei,"DIV",{class:!0});var oi=s(vt);m(yA.$$.fragment,oi),yur=i(oi),Fue=n(oi,"P",{});var _gt=s(Fue);wur=r(_gt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),_gt.forEach(t),Aur=i(oi),Dc=n(oi,"P",{});var Zz=s(Dc);Lur=r(Zz,`Note:
Loading a model from its configuration file does `),Cue=n(Zz,"STRONG",{});var ugt=s(Cue);Bur=r(ugt,"not"),ugt.forEach(t),xur=r(Zz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Mue=n(Zz,"CODE",{});var bgt=s(Mue);kur=r(bgt,"from_pretrained()"),bgt.forEach(t),Rur=r(Zz,"to load the model weights."),Zz.forEach(t),Sur=i(oi),Eue=n(oi,"P",{});var vgt=s(Eue);Pur=r(vgt,"Examples:"),vgt.forEach(t),$ur=i(oi),m(wA.$$.fragment,oi),oi.forEach(t),Iur=i(ei),Eo=n(ei,"DIV",{class:!0});var Fa=s(Eo);m(AA.$$.fragment,Fa),Dur=i(Fa),yue=n(Fa,"P",{});var Tgt=s(yue);jur=r(Tgt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Tgt.forEach(t),Nur=i(Fa),Fn=n(Fa,"P",{});var dM=s(Fn);qur=r(dM,"The model class to instantiate is selected based on the "),wue=n(dM,"CODE",{});var Fgt=s(wue);Gur=r(Fgt,"model_type"),Fgt.forEach(t),Our=r(dM,` property of the config object (either
passed as an argument or loaded from `),Aue=n(dM,"CODE",{});var Cgt=s(Aue);Xur=r(Cgt,"pretrained_model_name_or_path"),Cgt.forEach(t),Vur=r(dM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lue=n(dM,"CODE",{});var Mgt=s(Lue);zur=r(Mgt,"pretrained_model_name_or_path"),Mgt.forEach(t),Wur=r(dM,":"),dM.forEach(t),Qur=i(Fa),Bue=n(Fa,"UL",{});var Egt=s(Bue);y9=n(Egt,"LI",{});var QLe=s(y9);xue=n(QLe,"STRONG",{});var ygt=s(xue);Hur=r(ygt,"vision-encoder-decoder"),ygt.forEach(t),Uur=r(QLe," \u2014 "),UO=n(QLe,"A",{href:!0});var wgt=s(UO);Jur=r(wgt,"TFVisionEncoderDecoderModel"),wgt.forEach(t),Yur=r(QLe," (Vision Encoder decoder model)"),QLe.forEach(t),Egt.forEach(t),Kur=i(Fa),kue=n(Fa,"P",{});var Agt=s(kue);Zur=r(Agt,"Examples:"),Agt.forEach(t),e2r=i(Fa),m(LA.$$.fragment,Fa),Fa.forEach(t),ei.forEach(t),lxe=i(c),jc=n(c,"H2",{class:!0});var uRe=s(jc);w9=n(uRe,"A",{id:!0,class:!0,href:!0});var Lgt=s(w9);Rue=n(Lgt,"SPAN",{});var Bgt=s(Rue);m(BA.$$.fragment,Bgt),Bgt.forEach(t),Lgt.forEach(t),o2r=i(uRe),Sue=n(uRe,"SPAN",{});var xgt=s(Sue);r2r=r(xgt,"TFAutoModelForSpeechSeq2Seq"),xgt.forEach(t),uRe.forEach(t),ixe=i(c),Ar=n(c,"DIV",{class:!0});var ri=s(Ar);m(xA.$$.fragment,ri),t2r=i(ri),Nc=n(ri,"P",{});var eW=s(Nc);a2r=r(eW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Pue=n(eW,"CODE",{});var kgt=s(Pue);n2r=r(kgt,"from_pretrained()"),kgt.forEach(t),s2r=r(eW,"class method or the "),$ue=n(eW,"CODE",{});var Rgt=s($ue);l2r=r(Rgt,"from_config()"),Rgt.forEach(t),i2r=r(eW,`class
method.`),eW.forEach(t),d2r=i(ri),kA=n(ri,"P",{});var bRe=s(kA);c2r=r(bRe,"This class cannot be instantiated directly using "),Iue=n(bRe,"CODE",{});var Sgt=s(Iue);f2r=r(Sgt,"__init__()"),Sgt.forEach(t),m2r=r(bRe," (throws an error)."),bRe.forEach(t),g2r=i(ri),Tt=n(ri,"DIV",{class:!0});var ti=s(Tt);m(RA.$$.fragment,ti),h2r=i(ti),Due=n(ti,"P",{});var Pgt=s(Due);p2r=r(Pgt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Pgt.forEach(t),_2r=i(ti),qc=n(ti,"P",{});var oW=s(qc);u2r=r(oW,`Note:
Loading a model from its configuration file does `),jue=n(oW,"STRONG",{});var $gt=s(jue);b2r=r($gt,"not"),$gt.forEach(t),v2r=r(oW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Nue=n(oW,"CODE",{});var Igt=s(Nue);T2r=r(Igt,"from_pretrained()"),Igt.forEach(t),F2r=r(oW,"to load the model weights."),oW.forEach(t),C2r=i(ti),que=n(ti,"P",{});var Dgt=s(que);M2r=r(Dgt,"Examples:"),Dgt.forEach(t),E2r=i(ti),m(SA.$$.fragment,ti),ti.forEach(t),y2r=i(ri),yo=n(ri,"DIV",{class:!0});var Ca=s(yo);m(PA.$$.fragment,Ca),w2r=i(Ca),Gue=n(Ca,"P",{});var jgt=s(Gue);A2r=r(jgt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),jgt.forEach(t),L2r=i(Ca),Cn=n(Ca,"P",{});var cM=s(Cn);B2r=r(cM,"The model class to instantiate is selected based on the "),Oue=n(cM,"CODE",{});var Ngt=s(Oue);x2r=r(Ngt,"model_type"),Ngt.forEach(t),k2r=r(cM,` property of the config object (either
passed as an argument or loaded from `),Xue=n(cM,"CODE",{});var qgt=s(Xue);R2r=r(qgt,"pretrained_model_name_or_path"),qgt.forEach(t),S2r=r(cM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vue=n(cM,"CODE",{});var Ggt=s(Vue);P2r=r(Ggt,"pretrained_model_name_or_path"),Ggt.forEach(t),$2r=r(cM,":"),cM.forEach(t),I2r=i(Ca),zue=n(Ca,"UL",{});var Ogt=s(zue);A9=n(Ogt,"LI",{});var HLe=s(A9);Wue=n(HLe,"STRONG",{});var Xgt=s(Wue);D2r=r(Xgt,"speech_to_text"),Xgt.forEach(t),j2r=r(HLe," \u2014 "),JO=n(HLe,"A",{href:!0});var Vgt=s(JO);N2r=r(Vgt,"TFSpeech2TextForConditionalGeneration"),Vgt.forEach(t),q2r=r(HLe," (Speech2Text model)"),HLe.forEach(t),Ogt.forEach(t),G2r=i(Ca),Que=n(Ca,"P",{});var zgt=s(Que);O2r=r(zgt,"Examples:"),zgt.forEach(t),X2r=i(Ca),m($A.$$.fragment,Ca),Ca.forEach(t),ri.forEach(t),dxe=i(c),Gc=n(c,"H2",{class:!0});var vRe=s(Gc);L9=n(vRe,"A",{id:!0,class:!0,href:!0});var Wgt=s(L9);Hue=n(Wgt,"SPAN",{});var Qgt=s(Hue);m(IA.$$.fragment,Qgt),Qgt.forEach(t),Wgt.forEach(t),V2r=i(vRe),Uue=n(vRe,"SPAN",{});var Hgt=s(Uue);z2r=r(Hgt,"FlaxAutoModel"),Hgt.forEach(t),vRe.forEach(t),cxe=i(c),Lr=n(c,"DIV",{class:!0});var ai=s(Lr);m(DA.$$.fragment,ai),W2r=i(ai),Oc=n(ai,"P",{});var rW=s(Oc);Q2r=r(rW,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Jue=n(rW,"CODE",{});var Ugt=s(Jue);H2r=r(Ugt,"from_pretrained()"),Ugt.forEach(t),U2r=r(rW,"class method or the "),Yue=n(rW,"CODE",{});var Jgt=s(Yue);J2r=r(Jgt,"from_config()"),Jgt.forEach(t),Y2r=r(rW,`class
method.`),rW.forEach(t),K2r=i(ai),jA=n(ai,"P",{});var TRe=s(jA);Z2r=r(TRe,"This class cannot be instantiated directly using "),Kue=n(TRe,"CODE",{});var Ygt=s(Kue);e1r=r(Ygt,"__init__()"),Ygt.forEach(t),o1r=r(TRe," (throws an error)."),TRe.forEach(t),r1r=i(ai),Ft=n(ai,"DIV",{class:!0});var ni=s(Ft);m(NA.$$.fragment,ni),t1r=i(ni),Zue=n(ni,"P",{});var Kgt=s(Zue);a1r=r(Kgt,"Instantiates one of the base model classes of the library from a configuration."),Kgt.forEach(t),n1r=i(ni),Xc=n(ni,"P",{});var tW=s(Xc);s1r=r(tW,`Note:
Loading a model from its configuration file does `),e2e=n(tW,"STRONG",{});var Zgt=s(e2e);l1r=r(Zgt,"not"),Zgt.forEach(t),i1r=r(tW,` load the model weights. It only affects the
model\u2019s configuration. Use `),o2e=n(tW,"CODE",{});var eht=s(o2e);d1r=r(eht,"from_pretrained()"),eht.forEach(t),c1r=r(tW,"to load the model weights."),tW.forEach(t),f1r=i(ni),r2e=n(ni,"P",{});var oht=s(r2e);m1r=r(oht,"Examples:"),oht.forEach(t),g1r=i(ni),m(qA.$$.fragment,ni),ni.forEach(t),h1r=i(ai),wo=n(ai,"DIV",{class:!0});var Ma=s(wo);m(GA.$$.fragment,Ma),p1r=i(Ma),t2e=n(Ma,"P",{});var rht=s(t2e);_1r=r(rht,"Instantiate one of the base model classes of the library from a pretrained model."),rht.forEach(t),u1r=i(Ma),Mn=n(Ma,"P",{});var fM=s(Mn);b1r=r(fM,"The model class to instantiate is selected based on the "),a2e=n(fM,"CODE",{});var tht=s(a2e);v1r=r(tht,"model_type"),tht.forEach(t),T1r=r(fM,` property of the config object (either
passed as an argument or loaded from `),n2e=n(fM,"CODE",{});var aht=s(n2e);F1r=r(aht,"pretrained_model_name_or_path"),aht.forEach(t),C1r=r(fM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s2e=n(fM,"CODE",{});var nht=s(s2e);M1r=r(nht,"pretrained_model_name_or_path"),nht.forEach(t),E1r=r(fM,":"),fM.forEach(t),y1r=i(Ma),z=n(Ma,"UL",{});var Q=s(z);B9=n(Q,"LI",{});var ULe=s(B9);l2e=n(ULe,"STRONG",{});var sht=s(l2e);w1r=r(sht,"albert"),sht.forEach(t),A1r=r(ULe," \u2014 "),YO=n(ULe,"A",{href:!0});var lht=s(YO);L1r=r(lht,"FlaxAlbertModel"),lht.forEach(t),B1r=r(ULe," (ALBERT model)"),ULe.forEach(t),x1r=i(Q),x9=n(Q,"LI",{});var JLe=s(x9);i2e=n(JLe,"STRONG",{});var iht=s(i2e);k1r=r(iht,"bart"),iht.forEach(t),R1r=r(JLe," \u2014 "),KO=n(JLe,"A",{href:!0});var dht=s(KO);S1r=r(dht,"FlaxBartModel"),dht.forEach(t),P1r=r(JLe," (BART model)"),JLe.forEach(t),$1r=i(Q),k9=n(Q,"LI",{});var YLe=s(k9);d2e=n(YLe,"STRONG",{});var cht=s(d2e);I1r=r(cht,"beit"),cht.forEach(t),D1r=r(YLe," \u2014 "),ZO=n(YLe,"A",{href:!0});var fht=s(ZO);j1r=r(fht,"FlaxBeitModel"),fht.forEach(t),N1r=r(YLe," (BEiT model)"),YLe.forEach(t),q1r=i(Q),R9=n(Q,"LI",{});var KLe=s(R9);c2e=n(KLe,"STRONG",{});var mht=s(c2e);G1r=r(mht,"bert"),mht.forEach(t),O1r=r(KLe," \u2014 "),eX=n(KLe,"A",{href:!0});var ght=s(eX);X1r=r(ght,"FlaxBertModel"),ght.forEach(t),V1r=r(KLe," (BERT model)"),KLe.forEach(t),z1r=i(Q),S9=n(Q,"LI",{});var ZLe=s(S9);f2e=n(ZLe,"STRONG",{});var hht=s(f2e);W1r=r(hht,"big_bird"),hht.forEach(t),Q1r=r(ZLe," \u2014 "),oX=n(ZLe,"A",{href:!0});var pht=s(oX);H1r=r(pht,"FlaxBigBirdModel"),pht.forEach(t),U1r=r(ZLe," (BigBird model)"),ZLe.forEach(t),J1r=i(Q),P9=n(Q,"LI",{});var e8e=s(P9);m2e=n(e8e,"STRONG",{});var _ht=s(m2e);Y1r=r(_ht,"blenderbot"),_ht.forEach(t),K1r=r(e8e," \u2014 "),rX=n(e8e,"A",{href:!0});var uht=s(rX);Z1r=r(uht,"FlaxBlenderbotModel"),uht.forEach(t),ebr=r(e8e," (Blenderbot model)"),e8e.forEach(t),obr=i(Q),$9=n(Q,"LI",{});var o8e=s($9);g2e=n(o8e,"STRONG",{});var bht=s(g2e);rbr=r(bht,"blenderbot-small"),bht.forEach(t),tbr=r(o8e," \u2014 "),tX=n(o8e,"A",{href:!0});var vht=s(tX);abr=r(vht,"FlaxBlenderbotSmallModel"),vht.forEach(t),nbr=r(o8e," (BlenderbotSmall model)"),o8e.forEach(t),sbr=i(Q),I9=n(Q,"LI",{});var r8e=s(I9);h2e=n(r8e,"STRONG",{});var Tht=s(h2e);lbr=r(Tht,"clip"),Tht.forEach(t),ibr=r(r8e," \u2014 "),aX=n(r8e,"A",{href:!0});var Fht=s(aX);dbr=r(Fht,"FlaxCLIPModel"),Fht.forEach(t),cbr=r(r8e," (CLIP model)"),r8e.forEach(t),fbr=i(Q),D9=n(Q,"LI",{});var t8e=s(D9);p2e=n(t8e,"STRONG",{});var Cht=s(p2e);mbr=r(Cht,"distilbert"),Cht.forEach(t),gbr=r(t8e," \u2014 "),nX=n(t8e,"A",{href:!0});var Mht=s(nX);hbr=r(Mht,"FlaxDistilBertModel"),Mht.forEach(t),pbr=r(t8e," (DistilBERT model)"),t8e.forEach(t),_br=i(Q),j9=n(Q,"LI",{});var a8e=s(j9);_2e=n(a8e,"STRONG",{});var Eht=s(_2e);ubr=r(Eht,"electra"),Eht.forEach(t),bbr=r(a8e," \u2014 "),sX=n(a8e,"A",{href:!0});var yht=s(sX);vbr=r(yht,"FlaxElectraModel"),yht.forEach(t),Tbr=r(a8e," (ELECTRA model)"),a8e.forEach(t),Fbr=i(Q),N9=n(Q,"LI",{});var n8e=s(N9);u2e=n(n8e,"STRONG",{});var wht=s(u2e);Cbr=r(wht,"gpt2"),wht.forEach(t),Mbr=r(n8e," \u2014 "),lX=n(n8e,"A",{href:!0});var Aht=s(lX);Ebr=r(Aht,"FlaxGPT2Model"),Aht.forEach(t),ybr=r(n8e," (OpenAI GPT-2 model)"),n8e.forEach(t),wbr=i(Q),q9=n(Q,"LI",{});var s8e=s(q9);b2e=n(s8e,"STRONG",{});var Lht=s(b2e);Abr=r(Lht,"gpt_neo"),Lht.forEach(t),Lbr=r(s8e," \u2014 "),iX=n(s8e,"A",{href:!0});var Bht=s(iX);Bbr=r(Bht,"FlaxGPTNeoModel"),Bht.forEach(t),xbr=r(s8e," (GPT Neo model)"),s8e.forEach(t),kbr=i(Q),G9=n(Q,"LI",{});var l8e=s(G9);v2e=n(l8e,"STRONG",{});var xht=s(v2e);Rbr=r(xht,"gptj"),xht.forEach(t),Sbr=r(l8e," \u2014 "),dX=n(l8e,"A",{href:!0});var kht=s(dX);Pbr=r(kht,"FlaxGPTJModel"),kht.forEach(t),$br=r(l8e," (GPT-J model)"),l8e.forEach(t),Ibr=i(Q),O9=n(Q,"LI",{});var i8e=s(O9);T2e=n(i8e,"STRONG",{});var Rht=s(T2e);Dbr=r(Rht,"marian"),Rht.forEach(t),jbr=r(i8e," \u2014 "),cX=n(i8e,"A",{href:!0});var Sht=s(cX);Nbr=r(Sht,"FlaxMarianModel"),Sht.forEach(t),qbr=r(i8e," (Marian model)"),i8e.forEach(t),Gbr=i(Q),X9=n(Q,"LI",{});var d8e=s(X9);F2e=n(d8e,"STRONG",{});var Pht=s(F2e);Obr=r(Pht,"mbart"),Pht.forEach(t),Xbr=r(d8e," \u2014 "),fX=n(d8e,"A",{href:!0});var $ht=s(fX);Vbr=r($ht,"FlaxMBartModel"),$ht.forEach(t),zbr=r(d8e," (mBART model)"),d8e.forEach(t),Wbr=i(Q),V9=n(Q,"LI",{});var c8e=s(V9);C2e=n(c8e,"STRONG",{});var Iht=s(C2e);Qbr=r(Iht,"mt5"),Iht.forEach(t),Hbr=r(c8e," \u2014 "),mX=n(c8e,"A",{href:!0});var Dht=s(mX);Ubr=r(Dht,"FlaxMT5Model"),Dht.forEach(t),Jbr=r(c8e," (mT5 model)"),c8e.forEach(t),Ybr=i(Q),z9=n(Q,"LI",{});var f8e=s(z9);M2e=n(f8e,"STRONG",{});var jht=s(M2e);Kbr=r(jht,"pegasus"),jht.forEach(t),Zbr=r(f8e," \u2014 "),gX=n(f8e,"A",{href:!0});var Nht=s(gX);e3r=r(Nht,"FlaxPegasusModel"),Nht.forEach(t),o3r=r(f8e," (Pegasus model)"),f8e.forEach(t),r3r=i(Q),W9=n(Q,"LI",{});var m8e=s(W9);E2e=n(m8e,"STRONG",{});var qht=s(E2e);t3r=r(qht,"roberta"),qht.forEach(t),a3r=r(m8e," \u2014 "),hX=n(m8e,"A",{href:!0});var Ght=s(hX);n3r=r(Ght,"FlaxRobertaModel"),Ght.forEach(t),s3r=r(m8e," (RoBERTa model)"),m8e.forEach(t),l3r=i(Q),Q9=n(Q,"LI",{});var g8e=s(Q9);y2e=n(g8e,"STRONG",{});var Oht=s(y2e);i3r=r(Oht,"roformer"),Oht.forEach(t),d3r=r(g8e," \u2014 "),pX=n(g8e,"A",{href:!0});var Xht=s(pX);c3r=r(Xht,"FlaxRoFormerModel"),Xht.forEach(t),f3r=r(g8e," (RoFormer model)"),g8e.forEach(t),m3r=i(Q),H9=n(Q,"LI",{});var h8e=s(H9);w2e=n(h8e,"STRONG",{});var Vht=s(w2e);g3r=r(Vht,"t5"),Vht.forEach(t),h3r=r(h8e," \u2014 "),_X=n(h8e,"A",{href:!0});var zht=s(_X);p3r=r(zht,"FlaxT5Model"),zht.forEach(t),_3r=r(h8e," (T5 model)"),h8e.forEach(t),u3r=i(Q),U9=n(Q,"LI",{});var p8e=s(U9);A2e=n(p8e,"STRONG",{});var Wht=s(A2e);b3r=r(Wht,"vision-text-dual-encoder"),Wht.forEach(t),v3r=r(p8e," \u2014 "),uX=n(p8e,"A",{href:!0});var Qht=s(uX);T3r=r(Qht,"FlaxVisionTextDualEncoderModel"),Qht.forEach(t),F3r=r(p8e," (VisionTextDualEncoder model)"),p8e.forEach(t),C3r=i(Q),J9=n(Q,"LI",{});var _8e=s(J9);L2e=n(_8e,"STRONG",{});var Hht=s(L2e);M3r=r(Hht,"vit"),Hht.forEach(t),E3r=r(_8e," \u2014 "),bX=n(_8e,"A",{href:!0});var Uht=s(bX);y3r=r(Uht,"FlaxViTModel"),Uht.forEach(t),w3r=r(_8e," (ViT model)"),_8e.forEach(t),A3r=i(Q),Y9=n(Q,"LI",{});var u8e=s(Y9);B2e=n(u8e,"STRONG",{});var Jht=s(B2e);L3r=r(Jht,"wav2vec2"),Jht.forEach(t),B3r=r(u8e," \u2014 "),vX=n(u8e,"A",{href:!0});var Yht=s(vX);x3r=r(Yht,"FlaxWav2Vec2Model"),Yht.forEach(t),k3r=r(u8e," (Wav2Vec2 model)"),u8e.forEach(t),R3r=i(Q),K9=n(Q,"LI",{});var b8e=s(K9);x2e=n(b8e,"STRONG",{});var Kht=s(x2e);S3r=r(Kht,"xglm"),Kht.forEach(t),P3r=r(b8e," \u2014 "),TX=n(b8e,"A",{href:!0});var Zht=s(TX);$3r=r(Zht,"FlaxXGLMModel"),Zht.forEach(t),I3r=r(b8e," (XGLM model)"),b8e.forEach(t),Q.forEach(t),D3r=i(Ma),k2e=n(Ma,"P",{});var ept=s(k2e);j3r=r(ept,"Examples:"),ept.forEach(t),N3r=i(Ma),m(OA.$$.fragment,Ma),Ma.forEach(t),ai.forEach(t),fxe=i(c),Vc=n(c,"H2",{class:!0});var FRe=s(Vc);Z9=n(FRe,"A",{id:!0,class:!0,href:!0});var opt=s(Z9);R2e=n(opt,"SPAN",{});var rpt=s(R2e);m(XA.$$.fragment,rpt),rpt.forEach(t),opt.forEach(t),q3r=i(FRe),S2e=n(FRe,"SPAN",{});var tpt=s(S2e);G3r=r(tpt,"FlaxAutoModelForCausalLM"),tpt.forEach(t),FRe.forEach(t),mxe=i(c),Br=n(c,"DIV",{class:!0});var si=s(Br);m(VA.$$.fragment,si),O3r=i(si),zc=n(si,"P",{});var aW=s(zc);X3r=r(aW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),P2e=n(aW,"CODE",{});var apt=s(P2e);V3r=r(apt,"from_pretrained()"),apt.forEach(t),z3r=r(aW,"class method or the "),$2e=n(aW,"CODE",{});var npt=s($2e);W3r=r(npt,"from_config()"),npt.forEach(t),Q3r=r(aW,`class
method.`),aW.forEach(t),H3r=i(si),zA=n(si,"P",{});var CRe=s(zA);U3r=r(CRe,"This class cannot be instantiated directly using "),I2e=n(CRe,"CODE",{});var spt=s(I2e);J3r=r(spt,"__init__()"),spt.forEach(t),Y3r=r(CRe," (throws an error)."),CRe.forEach(t),K3r=i(si),Ct=n(si,"DIV",{class:!0});var li=s(Ct);m(WA.$$.fragment,li),Z3r=i(li),D2e=n(li,"P",{});var lpt=s(D2e);e5r=r(lpt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),lpt.forEach(t),o5r=i(li),Wc=n(li,"P",{});var nW=s(Wc);r5r=r(nW,`Note:
Loading a model from its configuration file does `),j2e=n(nW,"STRONG",{});var ipt=s(j2e);t5r=r(ipt,"not"),ipt.forEach(t),a5r=r(nW,` load the model weights. It only affects the
model\u2019s configuration. Use `),N2e=n(nW,"CODE",{});var dpt=s(N2e);n5r=r(dpt,"from_pretrained()"),dpt.forEach(t),s5r=r(nW,"to load the model weights."),nW.forEach(t),l5r=i(li),q2e=n(li,"P",{});var cpt=s(q2e);i5r=r(cpt,"Examples:"),cpt.forEach(t),d5r=i(li),m(QA.$$.fragment,li),li.forEach(t),c5r=i(si),Ao=n(si,"DIV",{class:!0});var Ea=s(Ao);m(HA.$$.fragment,Ea),f5r=i(Ea),G2e=n(Ea,"P",{});var fpt=s(G2e);m5r=r(fpt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),fpt.forEach(t),g5r=i(Ea),En=n(Ea,"P",{});var mM=s(En);h5r=r(mM,"The model class to instantiate is selected based on the "),O2e=n(mM,"CODE",{});var mpt=s(O2e);p5r=r(mpt,"model_type"),mpt.forEach(t),_5r=r(mM,` property of the config object (either
passed as an argument or loaded from `),X2e=n(mM,"CODE",{});var gpt=s(X2e);u5r=r(gpt,"pretrained_model_name_or_path"),gpt.forEach(t),b5r=r(mM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V2e=n(mM,"CODE",{});var hpt=s(V2e);v5r=r(hpt,"pretrained_model_name_or_path"),hpt.forEach(t),T5r=r(mM,":"),mM.forEach(t),F5r=i(Ea),yn=n(Ea,"UL",{});var gM=s(yn);eC=n(gM,"LI",{});var v8e=s(eC);z2e=n(v8e,"STRONG",{});var ppt=s(z2e);C5r=r(ppt,"gpt2"),ppt.forEach(t),M5r=r(v8e," \u2014 "),FX=n(v8e,"A",{href:!0});var _pt=s(FX);E5r=r(_pt,"FlaxGPT2LMHeadModel"),_pt.forEach(t),y5r=r(v8e," (OpenAI GPT-2 model)"),v8e.forEach(t),w5r=i(gM),oC=n(gM,"LI",{});var T8e=s(oC);W2e=n(T8e,"STRONG",{});var upt=s(W2e);A5r=r(upt,"gpt_neo"),upt.forEach(t),L5r=r(T8e," \u2014 "),CX=n(T8e,"A",{href:!0});var bpt=s(CX);B5r=r(bpt,"FlaxGPTNeoForCausalLM"),bpt.forEach(t),x5r=r(T8e," (GPT Neo model)"),T8e.forEach(t),k5r=i(gM),rC=n(gM,"LI",{});var F8e=s(rC);Q2e=n(F8e,"STRONG",{});var vpt=s(Q2e);R5r=r(vpt,"gptj"),vpt.forEach(t),S5r=r(F8e," \u2014 "),MX=n(F8e,"A",{href:!0});var Tpt=s(MX);P5r=r(Tpt,"FlaxGPTJForCausalLM"),Tpt.forEach(t),$5r=r(F8e," (GPT-J model)"),F8e.forEach(t),I5r=i(gM),tC=n(gM,"LI",{});var C8e=s(tC);H2e=n(C8e,"STRONG",{});var Fpt=s(H2e);D5r=r(Fpt,"xglm"),Fpt.forEach(t),j5r=r(C8e," \u2014 "),EX=n(C8e,"A",{href:!0});var Cpt=s(EX);N5r=r(Cpt,"FlaxXGLMForCausalLM"),Cpt.forEach(t),q5r=r(C8e," (XGLM model)"),C8e.forEach(t),gM.forEach(t),G5r=i(Ea),U2e=n(Ea,"P",{});var Mpt=s(U2e);O5r=r(Mpt,"Examples:"),Mpt.forEach(t),X5r=i(Ea),m(UA.$$.fragment,Ea),Ea.forEach(t),si.forEach(t),gxe=i(c),Qc=n(c,"H2",{class:!0});var MRe=s(Qc);aC=n(MRe,"A",{id:!0,class:!0,href:!0});var Ept=s(aC);J2e=n(Ept,"SPAN",{});var ypt=s(J2e);m(JA.$$.fragment,ypt),ypt.forEach(t),Ept.forEach(t),V5r=i(MRe),Y2e=n(MRe,"SPAN",{});var wpt=s(Y2e);z5r=r(wpt,"FlaxAutoModelForPreTraining"),wpt.forEach(t),MRe.forEach(t),hxe=i(c),xr=n(c,"DIV",{class:!0});var ii=s(xr);m(YA.$$.fragment,ii),W5r=i(ii),Hc=n(ii,"P",{});var sW=s(Hc);Q5r=r(sW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),K2e=n(sW,"CODE",{});var Apt=s(K2e);H5r=r(Apt,"from_pretrained()"),Apt.forEach(t),U5r=r(sW,"class method or the "),Z2e=n(sW,"CODE",{});var Lpt=s(Z2e);J5r=r(Lpt,"from_config()"),Lpt.forEach(t),Y5r=r(sW,`class
method.`),sW.forEach(t),K5r=i(ii),KA=n(ii,"P",{});var ERe=s(KA);Z5r=r(ERe,"This class cannot be instantiated directly using "),e1e=n(ERe,"CODE",{});var Bpt=s(e1e);evr=r(Bpt,"__init__()"),Bpt.forEach(t),ovr=r(ERe," (throws an error)."),ERe.forEach(t),rvr=i(ii),Mt=n(ii,"DIV",{class:!0});var di=s(Mt);m(ZA.$$.fragment,di),tvr=i(di),o1e=n(di,"P",{});var xpt=s(o1e);avr=r(xpt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),xpt.forEach(t),nvr=i(di),Uc=n(di,"P",{});var lW=s(Uc);svr=r(lW,`Note:
Loading a model from its configuration file does `),r1e=n(lW,"STRONG",{});var kpt=s(r1e);lvr=r(kpt,"not"),kpt.forEach(t),ivr=r(lW,` load the model weights. It only affects the
model\u2019s configuration. Use `),t1e=n(lW,"CODE",{});var Rpt=s(t1e);dvr=r(Rpt,"from_pretrained()"),Rpt.forEach(t),cvr=r(lW,"to load the model weights."),lW.forEach(t),fvr=i(di),a1e=n(di,"P",{});var Spt=s(a1e);mvr=r(Spt,"Examples:"),Spt.forEach(t),gvr=i(di),m(e0.$$.fragment,di),di.forEach(t),hvr=i(ii),Lo=n(ii,"DIV",{class:!0});var ya=s(Lo);m(o0.$$.fragment,ya),pvr=i(ya),n1e=n(ya,"P",{});var Ppt=s(n1e);_vr=r(Ppt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Ppt.forEach(t),uvr=i(ya),wn=n(ya,"P",{});var hM=s(wn);bvr=r(hM,"The model class to instantiate is selected based on the "),s1e=n(hM,"CODE",{});var $pt=s(s1e);vvr=r($pt,"model_type"),$pt.forEach(t),Tvr=r(hM,` property of the config object (either
passed as an argument or loaded from `),l1e=n(hM,"CODE",{});var Ipt=s(l1e);Fvr=r(Ipt,"pretrained_model_name_or_path"),Ipt.forEach(t),Cvr=r(hM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i1e=n(hM,"CODE",{});var Dpt=s(i1e);Mvr=r(Dpt,"pretrained_model_name_or_path"),Dpt.forEach(t),Evr=r(hM,":"),hM.forEach(t),yvr=i(ya),fe=n(ya,"UL",{});var _e=s(fe);nC=n(_e,"LI",{});var M8e=s(nC);d1e=n(M8e,"STRONG",{});var jpt=s(d1e);wvr=r(jpt,"albert"),jpt.forEach(t),Avr=r(M8e," \u2014 "),yX=n(M8e,"A",{href:!0});var Npt=s(yX);Lvr=r(Npt,"FlaxAlbertForPreTraining"),Npt.forEach(t),Bvr=r(M8e," (ALBERT model)"),M8e.forEach(t),xvr=i(_e),sC=n(_e,"LI",{});var E8e=s(sC);c1e=n(E8e,"STRONG",{});var qpt=s(c1e);kvr=r(qpt,"bart"),qpt.forEach(t),Rvr=r(E8e," \u2014 "),wX=n(E8e,"A",{href:!0});var Gpt=s(wX);Svr=r(Gpt,"FlaxBartForConditionalGeneration"),Gpt.forEach(t),Pvr=r(E8e," (BART model)"),E8e.forEach(t),$vr=i(_e),lC=n(_e,"LI",{});var y8e=s(lC);f1e=n(y8e,"STRONG",{});var Opt=s(f1e);Ivr=r(Opt,"bert"),Opt.forEach(t),Dvr=r(y8e," \u2014 "),AX=n(y8e,"A",{href:!0});var Xpt=s(AX);jvr=r(Xpt,"FlaxBertForPreTraining"),Xpt.forEach(t),Nvr=r(y8e," (BERT model)"),y8e.forEach(t),qvr=i(_e),iC=n(_e,"LI",{});var w8e=s(iC);m1e=n(w8e,"STRONG",{});var Vpt=s(m1e);Gvr=r(Vpt,"big_bird"),Vpt.forEach(t),Ovr=r(w8e," \u2014 "),LX=n(w8e,"A",{href:!0});var zpt=s(LX);Xvr=r(zpt,"FlaxBigBirdForPreTraining"),zpt.forEach(t),Vvr=r(w8e," (BigBird model)"),w8e.forEach(t),zvr=i(_e),dC=n(_e,"LI",{});var A8e=s(dC);g1e=n(A8e,"STRONG",{});var Wpt=s(g1e);Wvr=r(Wpt,"electra"),Wpt.forEach(t),Qvr=r(A8e," \u2014 "),BX=n(A8e,"A",{href:!0});var Qpt=s(BX);Hvr=r(Qpt,"FlaxElectraForPreTraining"),Qpt.forEach(t),Uvr=r(A8e," (ELECTRA model)"),A8e.forEach(t),Jvr=i(_e),cC=n(_e,"LI",{});var L8e=s(cC);h1e=n(L8e,"STRONG",{});var Hpt=s(h1e);Yvr=r(Hpt,"mbart"),Hpt.forEach(t),Kvr=r(L8e," \u2014 "),xX=n(L8e,"A",{href:!0});var Upt=s(xX);Zvr=r(Upt,"FlaxMBartForConditionalGeneration"),Upt.forEach(t),eTr=r(L8e," (mBART model)"),L8e.forEach(t),oTr=i(_e),fC=n(_e,"LI",{});var B8e=s(fC);p1e=n(B8e,"STRONG",{});var Jpt=s(p1e);rTr=r(Jpt,"mt5"),Jpt.forEach(t),tTr=r(B8e," \u2014 "),kX=n(B8e,"A",{href:!0});var Ypt=s(kX);aTr=r(Ypt,"FlaxMT5ForConditionalGeneration"),Ypt.forEach(t),nTr=r(B8e," (mT5 model)"),B8e.forEach(t),sTr=i(_e),mC=n(_e,"LI",{});var x8e=s(mC);_1e=n(x8e,"STRONG",{});var Kpt=s(_1e);lTr=r(Kpt,"roberta"),Kpt.forEach(t),iTr=r(x8e," \u2014 "),RX=n(x8e,"A",{href:!0});var Zpt=s(RX);dTr=r(Zpt,"FlaxRobertaForMaskedLM"),Zpt.forEach(t),cTr=r(x8e," (RoBERTa model)"),x8e.forEach(t),fTr=i(_e),gC=n(_e,"LI",{});var k8e=s(gC);u1e=n(k8e,"STRONG",{});var e_t=s(u1e);mTr=r(e_t,"roformer"),e_t.forEach(t),gTr=r(k8e," \u2014 "),SX=n(k8e,"A",{href:!0});var o_t=s(SX);hTr=r(o_t,"FlaxRoFormerForMaskedLM"),o_t.forEach(t),pTr=r(k8e," (RoFormer model)"),k8e.forEach(t),_Tr=i(_e),hC=n(_e,"LI",{});var R8e=s(hC);b1e=n(R8e,"STRONG",{});var r_t=s(b1e);uTr=r(r_t,"t5"),r_t.forEach(t),bTr=r(R8e," \u2014 "),PX=n(R8e,"A",{href:!0});var t_t=s(PX);vTr=r(t_t,"FlaxT5ForConditionalGeneration"),t_t.forEach(t),TTr=r(R8e," (T5 model)"),R8e.forEach(t),FTr=i(_e),pC=n(_e,"LI",{});var S8e=s(pC);v1e=n(S8e,"STRONG",{});var a_t=s(v1e);CTr=r(a_t,"wav2vec2"),a_t.forEach(t),MTr=r(S8e," \u2014 "),$X=n(S8e,"A",{href:!0});var n_t=s($X);ETr=r(n_t,"FlaxWav2Vec2ForPreTraining"),n_t.forEach(t),yTr=r(S8e," (Wav2Vec2 model)"),S8e.forEach(t),_e.forEach(t),wTr=i(ya),T1e=n(ya,"P",{});var s_t=s(T1e);ATr=r(s_t,"Examples:"),s_t.forEach(t),LTr=i(ya),m(r0.$$.fragment,ya),ya.forEach(t),ii.forEach(t),pxe=i(c),Jc=n(c,"H2",{class:!0});var yRe=s(Jc);_C=n(yRe,"A",{id:!0,class:!0,href:!0});var l_t=s(_C);F1e=n(l_t,"SPAN",{});var i_t=s(F1e);m(t0.$$.fragment,i_t),i_t.forEach(t),l_t.forEach(t),BTr=i(yRe),C1e=n(yRe,"SPAN",{});var d_t=s(C1e);xTr=r(d_t,"FlaxAutoModelForMaskedLM"),d_t.forEach(t),yRe.forEach(t),_xe=i(c),kr=n(c,"DIV",{class:!0});var ci=s(kr);m(a0.$$.fragment,ci),kTr=i(ci),Yc=n(ci,"P",{});var iW=s(Yc);RTr=r(iW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),M1e=n(iW,"CODE",{});var c_t=s(M1e);STr=r(c_t,"from_pretrained()"),c_t.forEach(t),PTr=r(iW,"class method or the "),E1e=n(iW,"CODE",{});var f_t=s(E1e);$Tr=r(f_t,"from_config()"),f_t.forEach(t),ITr=r(iW,`class
method.`),iW.forEach(t),DTr=i(ci),n0=n(ci,"P",{});var wRe=s(n0);jTr=r(wRe,"This class cannot be instantiated directly using "),y1e=n(wRe,"CODE",{});var m_t=s(y1e);NTr=r(m_t,"__init__()"),m_t.forEach(t),qTr=r(wRe," (throws an error)."),wRe.forEach(t),GTr=i(ci),Et=n(ci,"DIV",{class:!0});var fi=s(Et);m(s0.$$.fragment,fi),OTr=i(fi),w1e=n(fi,"P",{});var g_t=s(w1e);XTr=r(g_t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),g_t.forEach(t),VTr=i(fi),Kc=n(fi,"P",{});var dW=s(Kc);zTr=r(dW,`Note:
Loading a model from its configuration file does `),A1e=n(dW,"STRONG",{});var h_t=s(A1e);WTr=r(h_t,"not"),h_t.forEach(t),QTr=r(dW,` load the model weights. It only affects the
model\u2019s configuration. Use `),L1e=n(dW,"CODE",{});var p_t=s(L1e);HTr=r(p_t,"from_pretrained()"),p_t.forEach(t),UTr=r(dW,"to load the model weights."),dW.forEach(t),JTr=i(fi),B1e=n(fi,"P",{});var __t=s(B1e);YTr=r(__t,"Examples:"),__t.forEach(t),KTr=i(fi),m(l0.$$.fragment,fi),fi.forEach(t),ZTr=i(ci),Bo=n(ci,"DIV",{class:!0});var wa=s(Bo);m(i0.$$.fragment,wa),eFr=i(wa),x1e=n(wa,"P",{});var u_t=s(x1e);oFr=r(u_t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),u_t.forEach(t),rFr=i(wa),An=n(wa,"P",{});var pM=s(An);tFr=r(pM,"The model class to instantiate is selected based on the "),k1e=n(pM,"CODE",{});var b_t=s(k1e);aFr=r(b_t,"model_type"),b_t.forEach(t),nFr=r(pM,` property of the config object (either
passed as an argument or loaded from `),R1e=n(pM,"CODE",{});var v_t=s(R1e);sFr=r(v_t,"pretrained_model_name_or_path"),v_t.forEach(t),lFr=r(pM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S1e=n(pM,"CODE",{});var T_t=s(S1e);iFr=r(T_t,"pretrained_model_name_or_path"),T_t.forEach(t),dFr=r(pM,":"),pM.forEach(t),cFr=i(wa),ve=n(wa,"UL",{});var oo=s(ve);uC=n(oo,"LI",{});var P8e=s(uC);P1e=n(P8e,"STRONG",{});var F_t=s(P1e);fFr=r(F_t,"albert"),F_t.forEach(t),mFr=r(P8e," \u2014 "),IX=n(P8e,"A",{href:!0});var C_t=s(IX);gFr=r(C_t,"FlaxAlbertForMaskedLM"),C_t.forEach(t),hFr=r(P8e," (ALBERT model)"),P8e.forEach(t),pFr=i(oo),bC=n(oo,"LI",{});var $8e=s(bC);$1e=n($8e,"STRONG",{});var M_t=s($1e);_Fr=r(M_t,"bart"),M_t.forEach(t),uFr=r($8e," \u2014 "),DX=n($8e,"A",{href:!0});var E_t=s(DX);bFr=r(E_t,"FlaxBartForConditionalGeneration"),E_t.forEach(t),vFr=r($8e," (BART model)"),$8e.forEach(t),TFr=i(oo),vC=n(oo,"LI",{});var I8e=s(vC);I1e=n(I8e,"STRONG",{});var y_t=s(I1e);FFr=r(y_t,"bert"),y_t.forEach(t),CFr=r(I8e," \u2014 "),jX=n(I8e,"A",{href:!0});var w_t=s(jX);MFr=r(w_t,"FlaxBertForMaskedLM"),w_t.forEach(t),EFr=r(I8e," (BERT model)"),I8e.forEach(t),yFr=i(oo),TC=n(oo,"LI",{});var D8e=s(TC);D1e=n(D8e,"STRONG",{});var A_t=s(D1e);wFr=r(A_t,"big_bird"),A_t.forEach(t),AFr=r(D8e," \u2014 "),NX=n(D8e,"A",{href:!0});var L_t=s(NX);LFr=r(L_t,"FlaxBigBirdForMaskedLM"),L_t.forEach(t),BFr=r(D8e," (BigBird model)"),D8e.forEach(t),xFr=i(oo),FC=n(oo,"LI",{});var j8e=s(FC);j1e=n(j8e,"STRONG",{});var B_t=s(j1e);kFr=r(B_t,"distilbert"),B_t.forEach(t),RFr=r(j8e," \u2014 "),qX=n(j8e,"A",{href:!0});var x_t=s(qX);SFr=r(x_t,"FlaxDistilBertForMaskedLM"),x_t.forEach(t),PFr=r(j8e," (DistilBERT model)"),j8e.forEach(t),$Fr=i(oo),CC=n(oo,"LI",{});var N8e=s(CC);N1e=n(N8e,"STRONG",{});var k_t=s(N1e);IFr=r(k_t,"electra"),k_t.forEach(t),DFr=r(N8e," \u2014 "),GX=n(N8e,"A",{href:!0});var R_t=s(GX);jFr=r(R_t,"FlaxElectraForMaskedLM"),R_t.forEach(t),NFr=r(N8e," (ELECTRA model)"),N8e.forEach(t),qFr=i(oo),MC=n(oo,"LI",{});var q8e=s(MC);q1e=n(q8e,"STRONG",{});var S_t=s(q1e);GFr=r(S_t,"mbart"),S_t.forEach(t),OFr=r(q8e," \u2014 "),OX=n(q8e,"A",{href:!0});var P_t=s(OX);XFr=r(P_t,"FlaxMBartForConditionalGeneration"),P_t.forEach(t),VFr=r(q8e," (mBART model)"),q8e.forEach(t),zFr=i(oo),EC=n(oo,"LI",{});var G8e=s(EC);G1e=n(G8e,"STRONG",{});var $_t=s(G1e);WFr=r($_t,"roberta"),$_t.forEach(t),QFr=r(G8e," \u2014 "),XX=n(G8e,"A",{href:!0});var I_t=s(XX);HFr=r(I_t,"FlaxRobertaForMaskedLM"),I_t.forEach(t),UFr=r(G8e," (RoBERTa model)"),G8e.forEach(t),JFr=i(oo),yC=n(oo,"LI",{});var O8e=s(yC);O1e=n(O8e,"STRONG",{});var D_t=s(O1e);YFr=r(D_t,"roformer"),D_t.forEach(t),KFr=r(O8e," \u2014 "),VX=n(O8e,"A",{href:!0});var j_t=s(VX);ZFr=r(j_t,"FlaxRoFormerForMaskedLM"),j_t.forEach(t),e9r=r(O8e," (RoFormer model)"),O8e.forEach(t),oo.forEach(t),o9r=i(wa),X1e=n(wa,"P",{});var N_t=s(X1e);r9r=r(N_t,"Examples:"),N_t.forEach(t),t9r=i(wa),m(d0.$$.fragment,wa),wa.forEach(t),ci.forEach(t),uxe=i(c),Zc=n(c,"H2",{class:!0});var ARe=s(Zc);wC=n(ARe,"A",{id:!0,class:!0,href:!0});var q_t=s(wC);V1e=n(q_t,"SPAN",{});var G_t=s(V1e);m(c0.$$.fragment,G_t),G_t.forEach(t),q_t.forEach(t),a9r=i(ARe),z1e=n(ARe,"SPAN",{});var O_t=s(z1e);n9r=r(O_t,"FlaxAutoModelForSeq2SeqLM"),O_t.forEach(t),ARe.forEach(t),bxe=i(c),Rr=n(c,"DIV",{class:!0});var mi=s(Rr);m(f0.$$.fragment,mi),s9r=i(mi),ef=n(mi,"P",{});var cW=s(ef);l9r=r(cW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),W1e=n(cW,"CODE",{});var X_t=s(W1e);i9r=r(X_t,"from_pretrained()"),X_t.forEach(t),d9r=r(cW,"class method or the "),Q1e=n(cW,"CODE",{});var V_t=s(Q1e);c9r=r(V_t,"from_config()"),V_t.forEach(t),f9r=r(cW,`class
method.`),cW.forEach(t),m9r=i(mi),m0=n(mi,"P",{});var LRe=s(m0);g9r=r(LRe,"This class cannot be instantiated directly using "),H1e=n(LRe,"CODE",{});var z_t=s(H1e);h9r=r(z_t,"__init__()"),z_t.forEach(t),p9r=r(LRe," (throws an error)."),LRe.forEach(t),_9r=i(mi),yt=n(mi,"DIV",{class:!0});var gi=s(yt);m(g0.$$.fragment,gi),u9r=i(gi),U1e=n(gi,"P",{});var W_t=s(U1e);b9r=r(W_t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),W_t.forEach(t),v9r=i(gi),of=n(gi,"P",{});var fW=s(of);T9r=r(fW,`Note:
Loading a model from its configuration file does `),J1e=n(fW,"STRONG",{});var Q_t=s(J1e);F9r=r(Q_t,"not"),Q_t.forEach(t),C9r=r(fW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Y1e=n(fW,"CODE",{});var H_t=s(Y1e);M9r=r(H_t,"from_pretrained()"),H_t.forEach(t),E9r=r(fW,"to load the model weights."),fW.forEach(t),y9r=i(gi),K1e=n(gi,"P",{});var U_t=s(K1e);w9r=r(U_t,"Examples:"),U_t.forEach(t),A9r=i(gi),m(h0.$$.fragment,gi),gi.forEach(t),L9r=i(mi),xo=n(mi,"DIV",{class:!0});var Aa=s(xo);m(p0.$$.fragment,Aa),B9r=i(Aa),Z1e=n(Aa,"P",{});var J_t=s(Z1e);x9r=r(J_t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),J_t.forEach(t),k9r=i(Aa),Ln=n(Aa,"P",{});var _M=s(Ln);R9r=r(_M,"The model class to instantiate is selected based on the "),ebe=n(_M,"CODE",{});var Y_t=s(ebe);S9r=r(Y_t,"model_type"),Y_t.forEach(t),P9r=r(_M,` property of the config object (either
passed as an argument or loaded from `),obe=n(_M,"CODE",{});var K_t=s(obe);$9r=r(K_t,"pretrained_model_name_or_path"),K_t.forEach(t),I9r=r(_M,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rbe=n(_M,"CODE",{});var Z_t=s(rbe);D9r=r(Z_t,"pretrained_model_name_or_path"),Z_t.forEach(t),j9r=r(_M,":"),_M.forEach(t),N9r=i(Aa),Te=n(Aa,"UL",{});var ro=s(Te);AC=n(ro,"LI",{});var X8e=s(AC);tbe=n(X8e,"STRONG",{});var eut=s(tbe);q9r=r(eut,"bart"),eut.forEach(t),G9r=r(X8e," \u2014 "),zX=n(X8e,"A",{href:!0});var out=s(zX);O9r=r(out,"FlaxBartForConditionalGeneration"),out.forEach(t),X9r=r(X8e," (BART model)"),X8e.forEach(t),V9r=i(ro),LC=n(ro,"LI",{});var V8e=s(LC);abe=n(V8e,"STRONG",{});var rut=s(abe);z9r=r(rut,"blenderbot"),rut.forEach(t),W9r=r(V8e," \u2014 "),WX=n(V8e,"A",{href:!0});var tut=s(WX);Q9r=r(tut,"FlaxBlenderbotForConditionalGeneration"),tut.forEach(t),H9r=r(V8e," (Blenderbot model)"),V8e.forEach(t),U9r=i(ro),BC=n(ro,"LI",{});var z8e=s(BC);nbe=n(z8e,"STRONG",{});var aut=s(nbe);J9r=r(aut,"blenderbot-small"),aut.forEach(t),Y9r=r(z8e," \u2014 "),QX=n(z8e,"A",{href:!0});var nut=s(QX);K9r=r(nut,"FlaxBlenderbotSmallForConditionalGeneration"),nut.forEach(t),Z9r=r(z8e," (BlenderbotSmall model)"),z8e.forEach(t),eCr=i(ro),xC=n(ro,"LI",{});var W8e=s(xC);sbe=n(W8e,"STRONG",{});var sut=s(sbe);oCr=r(sut,"encoder-decoder"),sut.forEach(t),rCr=r(W8e," \u2014 "),HX=n(W8e,"A",{href:!0});var lut=s(HX);tCr=r(lut,"FlaxEncoderDecoderModel"),lut.forEach(t),aCr=r(W8e," (Encoder decoder model)"),W8e.forEach(t),nCr=i(ro),kC=n(ro,"LI",{});var Q8e=s(kC);lbe=n(Q8e,"STRONG",{});var iut=s(lbe);sCr=r(iut,"marian"),iut.forEach(t),lCr=r(Q8e," \u2014 "),UX=n(Q8e,"A",{href:!0});var dut=s(UX);iCr=r(dut,"FlaxMarianMTModel"),dut.forEach(t),dCr=r(Q8e," (Marian model)"),Q8e.forEach(t),cCr=i(ro),RC=n(ro,"LI",{});var H8e=s(RC);ibe=n(H8e,"STRONG",{});var cut=s(ibe);fCr=r(cut,"mbart"),cut.forEach(t),mCr=r(H8e," \u2014 "),JX=n(H8e,"A",{href:!0});var fut=s(JX);gCr=r(fut,"FlaxMBartForConditionalGeneration"),fut.forEach(t),hCr=r(H8e," (mBART model)"),H8e.forEach(t),pCr=i(ro),SC=n(ro,"LI",{});var U8e=s(SC);dbe=n(U8e,"STRONG",{});var mut=s(dbe);_Cr=r(mut,"mt5"),mut.forEach(t),uCr=r(U8e," \u2014 "),YX=n(U8e,"A",{href:!0});var gut=s(YX);bCr=r(gut,"FlaxMT5ForConditionalGeneration"),gut.forEach(t),vCr=r(U8e," (mT5 model)"),U8e.forEach(t),TCr=i(ro),PC=n(ro,"LI",{});var J8e=s(PC);cbe=n(J8e,"STRONG",{});var hut=s(cbe);FCr=r(hut,"pegasus"),hut.forEach(t),CCr=r(J8e," \u2014 "),KX=n(J8e,"A",{href:!0});var put=s(KX);MCr=r(put,"FlaxPegasusForConditionalGeneration"),put.forEach(t),ECr=r(J8e," (Pegasus model)"),J8e.forEach(t),yCr=i(ro),$C=n(ro,"LI",{});var Y8e=s($C);fbe=n(Y8e,"STRONG",{});var _ut=s(fbe);wCr=r(_ut,"t5"),_ut.forEach(t),ACr=r(Y8e," \u2014 "),ZX=n(Y8e,"A",{href:!0});var uut=s(ZX);LCr=r(uut,"FlaxT5ForConditionalGeneration"),uut.forEach(t),BCr=r(Y8e," (T5 model)"),Y8e.forEach(t),ro.forEach(t),xCr=i(Aa),mbe=n(Aa,"P",{});var but=s(mbe);kCr=r(but,"Examples:"),but.forEach(t),RCr=i(Aa),m(_0.$$.fragment,Aa),Aa.forEach(t),mi.forEach(t),vxe=i(c),rf=n(c,"H2",{class:!0});var BRe=s(rf);IC=n(BRe,"A",{id:!0,class:!0,href:!0});var vut=s(IC);gbe=n(vut,"SPAN",{});var Tut=s(gbe);m(u0.$$.fragment,Tut),Tut.forEach(t),vut.forEach(t),SCr=i(BRe),hbe=n(BRe,"SPAN",{});var Fut=s(hbe);PCr=r(Fut,"FlaxAutoModelForSequenceClassification"),Fut.forEach(t),BRe.forEach(t),Txe=i(c),Sr=n(c,"DIV",{class:!0});var hi=s(Sr);m(b0.$$.fragment,hi),$Cr=i(hi),tf=n(hi,"P",{});var mW=s(tf);ICr=r(mW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),pbe=n(mW,"CODE",{});var Cut=s(pbe);DCr=r(Cut,"from_pretrained()"),Cut.forEach(t),jCr=r(mW,"class method or the "),_be=n(mW,"CODE",{});var Mut=s(_be);NCr=r(Mut,"from_config()"),Mut.forEach(t),qCr=r(mW,`class
method.`),mW.forEach(t),GCr=i(hi),v0=n(hi,"P",{});var xRe=s(v0);OCr=r(xRe,"This class cannot be instantiated directly using "),ube=n(xRe,"CODE",{});var Eut=s(ube);XCr=r(Eut,"__init__()"),Eut.forEach(t),VCr=r(xRe," (throws an error)."),xRe.forEach(t),zCr=i(hi),wt=n(hi,"DIV",{class:!0});var pi=s(wt);m(T0.$$.fragment,pi),WCr=i(pi),bbe=n(pi,"P",{});var yut=s(bbe);QCr=r(yut,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),yut.forEach(t),HCr=i(pi),af=n(pi,"P",{});var gW=s(af);UCr=r(gW,`Note:
Loading a model from its configuration file does `),vbe=n(gW,"STRONG",{});var wut=s(vbe);JCr=r(wut,"not"),wut.forEach(t),YCr=r(gW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Tbe=n(gW,"CODE",{});var Aut=s(Tbe);KCr=r(Aut,"from_pretrained()"),Aut.forEach(t),ZCr=r(gW,"to load the model weights."),gW.forEach(t),e4r=i(pi),Fbe=n(pi,"P",{});var Lut=s(Fbe);o4r=r(Lut,"Examples:"),Lut.forEach(t),r4r=i(pi),m(F0.$$.fragment,pi),pi.forEach(t),t4r=i(hi),ko=n(hi,"DIV",{class:!0});var La=s(ko);m(C0.$$.fragment,La),a4r=i(La),Cbe=n(La,"P",{});var But=s(Cbe);n4r=r(But,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),But.forEach(t),s4r=i(La),Bn=n(La,"P",{});var uM=s(Bn);l4r=r(uM,"The model class to instantiate is selected based on the "),Mbe=n(uM,"CODE",{});var xut=s(Mbe);i4r=r(xut,"model_type"),xut.forEach(t),d4r=r(uM,` property of the config object (either
passed as an argument or loaded from `),Ebe=n(uM,"CODE",{});var kut=s(Ebe);c4r=r(kut,"pretrained_model_name_or_path"),kut.forEach(t),f4r=r(uM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ybe=n(uM,"CODE",{});var Rut=s(ybe);m4r=r(Rut,"pretrained_model_name_or_path"),Rut.forEach(t),g4r=r(uM,":"),uM.forEach(t),h4r=i(La),Fe=n(La,"UL",{});var to=s(Fe);DC=n(to,"LI",{});var K8e=s(DC);wbe=n(K8e,"STRONG",{});var Sut=s(wbe);p4r=r(Sut,"albert"),Sut.forEach(t),_4r=r(K8e," \u2014 "),eV=n(K8e,"A",{href:!0});var Put=s(eV);u4r=r(Put,"FlaxAlbertForSequenceClassification"),Put.forEach(t),b4r=r(K8e," (ALBERT model)"),K8e.forEach(t),v4r=i(to),jC=n(to,"LI",{});var Z8e=s(jC);Abe=n(Z8e,"STRONG",{});var $ut=s(Abe);T4r=r($ut,"bart"),$ut.forEach(t),F4r=r(Z8e," \u2014 "),oV=n(Z8e,"A",{href:!0});var Iut=s(oV);C4r=r(Iut,"FlaxBartForSequenceClassification"),Iut.forEach(t),M4r=r(Z8e," (BART model)"),Z8e.forEach(t),E4r=i(to),NC=n(to,"LI",{});var e7e=s(NC);Lbe=n(e7e,"STRONG",{});var Dut=s(Lbe);y4r=r(Dut,"bert"),Dut.forEach(t),w4r=r(e7e," \u2014 "),rV=n(e7e,"A",{href:!0});var jut=s(rV);A4r=r(jut,"FlaxBertForSequenceClassification"),jut.forEach(t),L4r=r(e7e," (BERT model)"),e7e.forEach(t),B4r=i(to),qC=n(to,"LI",{});var o7e=s(qC);Bbe=n(o7e,"STRONG",{});var Nut=s(Bbe);x4r=r(Nut,"big_bird"),Nut.forEach(t),k4r=r(o7e," \u2014 "),tV=n(o7e,"A",{href:!0});var qut=s(tV);R4r=r(qut,"FlaxBigBirdForSequenceClassification"),qut.forEach(t),S4r=r(o7e," (BigBird model)"),o7e.forEach(t),P4r=i(to),GC=n(to,"LI",{});var r7e=s(GC);xbe=n(r7e,"STRONG",{});var Gut=s(xbe);$4r=r(Gut,"distilbert"),Gut.forEach(t),I4r=r(r7e," \u2014 "),aV=n(r7e,"A",{href:!0});var Out=s(aV);D4r=r(Out,"FlaxDistilBertForSequenceClassification"),Out.forEach(t),j4r=r(r7e," (DistilBERT model)"),r7e.forEach(t),N4r=i(to),OC=n(to,"LI",{});var t7e=s(OC);kbe=n(t7e,"STRONG",{});var Xut=s(kbe);q4r=r(Xut,"electra"),Xut.forEach(t),G4r=r(t7e," \u2014 "),nV=n(t7e,"A",{href:!0});var Vut=s(nV);O4r=r(Vut,"FlaxElectraForSequenceClassification"),Vut.forEach(t),X4r=r(t7e," (ELECTRA model)"),t7e.forEach(t),V4r=i(to),XC=n(to,"LI",{});var a7e=s(XC);Rbe=n(a7e,"STRONG",{});var zut=s(Rbe);z4r=r(zut,"mbart"),zut.forEach(t),W4r=r(a7e," \u2014 "),sV=n(a7e,"A",{href:!0});var Wut=s(sV);Q4r=r(Wut,"FlaxMBartForSequenceClassification"),Wut.forEach(t),H4r=r(a7e," (mBART model)"),a7e.forEach(t),U4r=i(to),VC=n(to,"LI",{});var n7e=s(VC);Sbe=n(n7e,"STRONG",{});var Qut=s(Sbe);J4r=r(Qut,"roberta"),Qut.forEach(t),Y4r=r(n7e," \u2014 "),lV=n(n7e,"A",{href:!0});var Hut=s(lV);K4r=r(Hut,"FlaxRobertaForSequenceClassification"),Hut.forEach(t),Z4r=r(n7e," (RoBERTa model)"),n7e.forEach(t),eMr=i(to),zC=n(to,"LI",{});var s7e=s(zC);Pbe=n(s7e,"STRONG",{});var Uut=s(Pbe);oMr=r(Uut,"roformer"),Uut.forEach(t),rMr=r(s7e," \u2014 "),iV=n(s7e,"A",{href:!0});var Jut=s(iV);tMr=r(Jut,"FlaxRoFormerForSequenceClassification"),Jut.forEach(t),aMr=r(s7e," (RoFormer model)"),s7e.forEach(t),to.forEach(t),nMr=i(La),$be=n(La,"P",{});var Yut=s($be);sMr=r(Yut,"Examples:"),Yut.forEach(t),lMr=i(La),m(M0.$$.fragment,La),La.forEach(t),hi.forEach(t),Fxe=i(c),nf=n(c,"H2",{class:!0});var kRe=s(nf);WC=n(kRe,"A",{id:!0,class:!0,href:!0});var Kut=s(WC);Ibe=n(Kut,"SPAN",{});var Zut=s(Ibe);m(E0.$$.fragment,Zut),Zut.forEach(t),Kut.forEach(t),iMr=i(kRe),Dbe=n(kRe,"SPAN",{});var e2t=s(Dbe);dMr=r(e2t,"FlaxAutoModelForQuestionAnswering"),e2t.forEach(t),kRe.forEach(t),Cxe=i(c),Pr=n(c,"DIV",{class:!0});var _i=s(Pr);m(y0.$$.fragment,_i),cMr=i(_i),sf=n(_i,"P",{});var hW=s(sf);fMr=r(hW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),jbe=n(hW,"CODE",{});var o2t=s(jbe);mMr=r(o2t,"from_pretrained()"),o2t.forEach(t),gMr=r(hW,"class method or the "),Nbe=n(hW,"CODE",{});var r2t=s(Nbe);hMr=r(r2t,"from_config()"),r2t.forEach(t),pMr=r(hW,`class
method.`),hW.forEach(t),_Mr=i(_i),w0=n(_i,"P",{});var RRe=s(w0);uMr=r(RRe,"This class cannot be instantiated directly using "),qbe=n(RRe,"CODE",{});var t2t=s(qbe);bMr=r(t2t,"__init__()"),t2t.forEach(t),vMr=r(RRe," (throws an error)."),RRe.forEach(t),TMr=i(_i),At=n(_i,"DIV",{class:!0});var ui=s(At);m(A0.$$.fragment,ui),FMr=i(ui),Gbe=n(ui,"P",{});var a2t=s(Gbe);CMr=r(a2t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),a2t.forEach(t),MMr=i(ui),lf=n(ui,"P",{});var pW=s(lf);EMr=r(pW,`Note:
Loading a model from its configuration file does `),Obe=n(pW,"STRONG",{});var n2t=s(Obe);yMr=r(n2t,"not"),n2t.forEach(t),wMr=r(pW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Xbe=n(pW,"CODE",{});var s2t=s(Xbe);AMr=r(s2t,"from_pretrained()"),s2t.forEach(t),LMr=r(pW,"to load the model weights."),pW.forEach(t),BMr=i(ui),Vbe=n(ui,"P",{});var l2t=s(Vbe);xMr=r(l2t,"Examples:"),l2t.forEach(t),kMr=i(ui),m(L0.$$.fragment,ui),ui.forEach(t),RMr=i(_i),Ro=n(_i,"DIV",{class:!0});var Ba=s(Ro);m(B0.$$.fragment,Ba),SMr=i(Ba),zbe=n(Ba,"P",{});var i2t=s(zbe);PMr=r(i2t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),i2t.forEach(t),$Mr=i(Ba),xn=n(Ba,"P",{});var bM=s(xn);IMr=r(bM,"The model class to instantiate is selected based on the "),Wbe=n(bM,"CODE",{});var d2t=s(Wbe);DMr=r(d2t,"model_type"),d2t.forEach(t),jMr=r(bM,` property of the config object (either
passed as an argument or loaded from `),Qbe=n(bM,"CODE",{});var c2t=s(Qbe);NMr=r(c2t,"pretrained_model_name_or_path"),c2t.forEach(t),qMr=r(bM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hbe=n(bM,"CODE",{});var f2t=s(Hbe);GMr=r(f2t,"pretrained_model_name_or_path"),f2t.forEach(t),OMr=r(bM,":"),bM.forEach(t),XMr=i(Ba),Ce=n(Ba,"UL",{});var ao=s(Ce);QC=n(ao,"LI",{});var l7e=s(QC);Ube=n(l7e,"STRONG",{});var m2t=s(Ube);VMr=r(m2t,"albert"),m2t.forEach(t),zMr=r(l7e," \u2014 "),dV=n(l7e,"A",{href:!0});var g2t=s(dV);WMr=r(g2t,"FlaxAlbertForQuestionAnswering"),g2t.forEach(t),QMr=r(l7e," (ALBERT model)"),l7e.forEach(t),HMr=i(ao),HC=n(ao,"LI",{});var i7e=s(HC);Jbe=n(i7e,"STRONG",{});var h2t=s(Jbe);UMr=r(h2t,"bart"),h2t.forEach(t),JMr=r(i7e," \u2014 "),cV=n(i7e,"A",{href:!0});var p2t=s(cV);YMr=r(p2t,"FlaxBartForQuestionAnswering"),p2t.forEach(t),KMr=r(i7e," (BART model)"),i7e.forEach(t),ZMr=i(ao),UC=n(ao,"LI",{});var d7e=s(UC);Ybe=n(d7e,"STRONG",{});var _2t=s(Ybe);eEr=r(_2t,"bert"),_2t.forEach(t),oEr=r(d7e," \u2014 "),fV=n(d7e,"A",{href:!0});var u2t=s(fV);rEr=r(u2t,"FlaxBertForQuestionAnswering"),u2t.forEach(t),tEr=r(d7e," (BERT model)"),d7e.forEach(t),aEr=i(ao),JC=n(ao,"LI",{});var c7e=s(JC);Kbe=n(c7e,"STRONG",{});var b2t=s(Kbe);nEr=r(b2t,"big_bird"),b2t.forEach(t),sEr=r(c7e," \u2014 "),mV=n(c7e,"A",{href:!0});var v2t=s(mV);lEr=r(v2t,"FlaxBigBirdForQuestionAnswering"),v2t.forEach(t),iEr=r(c7e," (BigBird model)"),c7e.forEach(t),dEr=i(ao),YC=n(ao,"LI",{});var f7e=s(YC);Zbe=n(f7e,"STRONG",{});var T2t=s(Zbe);cEr=r(T2t,"distilbert"),T2t.forEach(t),fEr=r(f7e," \u2014 "),gV=n(f7e,"A",{href:!0});var F2t=s(gV);mEr=r(F2t,"FlaxDistilBertForQuestionAnswering"),F2t.forEach(t),gEr=r(f7e," (DistilBERT model)"),f7e.forEach(t),hEr=i(ao),KC=n(ao,"LI",{});var m7e=s(KC);e3e=n(m7e,"STRONG",{});var C2t=s(e3e);pEr=r(C2t,"electra"),C2t.forEach(t),_Er=r(m7e," \u2014 "),hV=n(m7e,"A",{href:!0});var M2t=s(hV);uEr=r(M2t,"FlaxElectraForQuestionAnswering"),M2t.forEach(t),bEr=r(m7e," (ELECTRA model)"),m7e.forEach(t),vEr=i(ao),ZC=n(ao,"LI",{});var g7e=s(ZC);o3e=n(g7e,"STRONG",{});var E2t=s(o3e);TEr=r(E2t,"mbart"),E2t.forEach(t),FEr=r(g7e," \u2014 "),pV=n(g7e,"A",{href:!0});var y2t=s(pV);CEr=r(y2t,"FlaxMBartForQuestionAnswering"),y2t.forEach(t),MEr=r(g7e," (mBART model)"),g7e.forEach(t),EEr=i(ao),e4=n(ao,"LI",{});var h7e=s(e4);r3e=n(h7e,"STRONG",{});var w2t=s(r3e);yEr=r(w2t,"roberta"),w2t.forEach(t),wEr=r(h7e," \u2014 "),_V=n(h7e,"A",{href:!0});var A2t=s(_V);AEr=r(A2t,"FlaxRobertaForQuestionAnswering"),A2t.forEach(t),LEr=r(h7e," (RoBERTa model)"),h7e.forEach(t),BEr=i(ao),o4=n(ao,"LI",{});var p7e=s(o4);t3e=n(p7e,"STRONG",{});var L2t=s(t3e);xEr=r(L2t,"roformer"),L2t.forEach(t),kEr=r(p7e," \u2014 "),uV=n(p7e,"A",{href:!0});var B2t=s(uV);REr=r(B2t,"FlaxRoFormerForQuestionAnswering"),B2t.forEach(t),SEr=r(p7e," (RoFormer model)"),p7e.forEach(t),ao.forEach(t),PEr=i(Ba),a3e=n(Ba,"P",{});var x2t=s(a3e);$Er=r(x2t,"Examples:"),x2t.forEach(t),IEr=i(Ba),m(x0.$$.fragment,Ba),Ba.forEach(t),_i.forEach(t),Mxe=i(c),df=n(c,"H2",{class:!0});var SRe=s(df);r4=n(SRe,"A",{id:!0,class:!0,href:!0});var k2t=s(r4);n3e=n(k2t,"SPAN",{});var R2t=s(n3e);m(k0.$$.fragment,R2t),R2t.forEach(t),k2t.forEach(t),DEr=i(SRe),s3e=n(SRe,"SPAN",{});var S2t=s(s3e);jEr=r(S2t,"FlaxAutoModelForTokenClassification"),S2t.forEach(t),SRe.forEach(t),Exe=i(c),$r=n(c,"DIV",{class:!0});var bi=s($r);m(R0.$$.fragment,bi),NEr=i(bi),cf=n(bi,"P",{});var _W=s(cf);qEr=r(_W,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),l3e=n(_W,"CODE",{});var P2t=s(l3e);GEr=r(P2t,"from_pretrained()"),P2t.forEach(t),OEr=r(_W,"class method or the "),i3e=n(_W,"CODE",{});var $2t=s(i3e);XEr=r($2t,"from_config()"),$2t.forEach(t),VEr=r(_W,`class
method.`),_W.forEach(t),zEr=i(bi),S0=n(bi,"P",{});var PRe=s(S0);WEr=r(PRe,"This class cannot be instantiated directly using "),d3e=n(PRe,"CODE",{});var I2t=s(d3e);QEr=r(I2t,"__init__()"),I2t.forEach(t),HEr=r(PRe," (throws an error)."),PRe.forEach(t),UEr=i(bi),Lt=n(bi,"DIV",{class:!0});var vi=s(Lt);m(P0.$$.fragment,vi),JEr=i(vi),c3e=n(vi,"P",{});var D2t=s(c3e);YEr=r(D2t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),D2t.forEach(t),KEr=i(vi),ff=n(vi,"P",{});var uW=s(ff);ZEr=r(uW,`Note:
Loading a model from its configuration file does `),f3e=n(uW,"STRONG",{});var j2t=s(f3e);eyr=r(j2t,"not"),j2t.forEach(t),oyr=r(uW,` load the model weights. It only affects the
model\u2019s configuration. Use `),m3e=n(uW,"CODE",{});var N2t=s(m3e);ryr=r(N2t,"from_pretrained()"),N2t.forEach(t),tyr=r(uW,"to load the model weights."),uW.forEach(t),ayr=i(vi),g3e=n(vi,"P",{});var q2t=s(g3e);nyr=r(q2t,"Examples:"),q2t.forEach(t),syr=i(vi),m($0.$$.fragment,vi),vi.forEach(t),lyr=i(bi),So=n(bi,"DIV",{class:!0});var xa=s(So);m(I0.$$.fragment,xa),iyr=i(xa),h3e=n(xa,"P",{});var G2t=s(h3e);dyr=r(G2t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),G2t.forEach(t),cyr=i(xa),kn=n(xa,"P",{});var vM=s(kn);fyr=r(vM,"The model class to instantiate is selected based on the "),p3e=n(vM,"CODE",{});var O2t=s(p3e);myr=r(O2t,"model_type"),O2t.forEach(t),gyr=r(vM,` property of the config object (either
passed as an argument or loaded from `),_3e=n(vM,"CODE",{});var X2t=s(_3e);hyr=r(X2t,"pretrained_model_name_or_path"),X2t.forEach(t),pyr=r(vM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u3e=n(vM,"CODE",{});var V2t=s(u3e);_yr=r(V2t,"pretrained_model_name_or_path"),V2t.forEach(t),uyr=r(vM,":"),vM.forEach(t),byr=i(xa),so=n(xa,"UL",{});var ta=s(so);t4=n(ta,"LI",{});var _7e=s(t4);b3e=n(_7e,"STRONG",{});var z2t=s(b3e);vyr=r(z2t,"albert"),z2t.forEach(t),Tyr=r(_7e," \u2014 "),bV=n(_7e,"A",{href:!0});var W2t=s(bV);Fyr=r(W2t,"FlaxAlbertForTokenClassification"),W2t.forEach(t),Cyr=r(_7e," (ALBERT model)"),_7e.forEach(t),Myr=i(ta),a4=n(ta,"LI",{});var u7e=s(a4);v3e=n(u7e,"STRONG",{});var Q2t=s(v3e);Eyr=r(Q2t,"bert"),Q2t.forEach(t),yyr=r(u7e," \u2014 "),vV=n(u7e,"A",{href:!0});var H2t=s(vV);wyr=r(H2t,"FlaxBertForTokenClassification"),H2t.forEach(t),Ayr=r(u7e," (BERT model)"),u7e.forEach(t),Lyr=i(ta),n4=n(ta,"LI",{});var b7e=s(n4);T3e=n(b7e,"STRONG",{});var U2t=s(T3e);Byr=r(U2t,"big_bird"),U2t.forEach(t),xyr=r(b7e," \u2014 "),TV=n(b7e,"A",{href:!0});var J2t=s(TV);kyr=r(J2t,"FlaxBigBirdForTokenClassification"),J2t.forEach(t),Ryr=r(b7e," (BigBird model)"),b7e.forEach(t),Syr=i(ta),s4=n(ta,"LI",{});var v7e=s(s4);F3e=n(v7e,"STRONG",{});var Y2t=s(F3e);Pyr=r(Y2t,"distilbert"),Y2t.forEach(t),$yr=r(v7e," \u2014 "),FV=n(v7e,"A",{href:!0});var K2t=s(FV);Iyr=r(K2t,"FlaxDistilBertForTokenClassification"),K2t.forEach(t),Dyr=r(v7e," (DistilBERT model)"),v7e.forEach(t),jyr=i(ta),l4=n(ta,"LI",{});var T7e=s(l4);C3e=n(T7e,"STRONG",{});var Z2t=s(C3e);Nyr=r(Z2t,"electra"),Z2t.forEach(t),qyr=r(T7e," \u2014 "),CV=n(T7e,"A",{href:!0});var e1t=s(CV);Gyr=r(e1t,"FlaxElectraForTokenClassification"),e1t.forEach(t),Oyr=r(T7e," (ELECTRA model)"),T7e.forEach(t),Xyr=i(ta),i4=n(ta,"LI",{});var F7e=s(i4);M3e=n(F7e,"STRONG",{});var o1t=s(M3e);Vyr=r(o1t,"roberta"),o1t.forEach(t),zyr=r(F7e," \u2014 "),MV=n(F7e,"A",{href:!0});var r1t=s(MV);Wyr=r(r1t,"FlaxRobertaForTokenClassification"),r1t.forEach(t),Qyr=r(F7e," (RoBERTa model)"),F7e.forEach(t),Hyr=i(ta),d4=n(ta,"LI",{});var C7e=s(d4);E3e=n(C7e,"STRONG",{});var t1t=s(E3e);Uyr=r(t1t,"roformer"),t1t.forEach(t),Jyr=r(C7e," \u2014 "),EV=n(C7e,"A",{href:!0});var a1t=s(EV);Yyr=r(a1t,"FlaxRoFormerForTokenClassification"),a1t.forEach(t),Kyr=r(C7e," (RoFormer model)"),C7e.forEach(t),ta.forEach(t),Zyr=i(xa),y3e=n(xa,"P",{});var n1t=s(y3e);ewr=r(n1t,"Examples:"),n1t.forEach(t),owr=i(xa),m(D0.$$.fragment,xa),xa.forEach(t),bi.forEach(t),yxe=i(c),mf=n(c,"H2",{class:!0});var $Re=s(mf);c4=n($Re,"A",{id:!0,class:!0,href:!0});var s1t=s(c4);w3e=n(s1t,"SPAN",{});var l1t=s(w3e);m(j0.$$.fragment,l1t),l1t.forEach(t),s1t.forEach(t),rwr=i($Re),A3e=n($Re,"SPAN",{});var i1t=s(A3e);twr=r(i1t,"FlaxAutoModelForMultipleChoice"),i1t.forEach(t),$Re.forEach(t),wxe=i(c),Ir=n(c,"DIV",{class:!0});var Ti=s(Ir);m(N0.$$.fragment,Ti),awr=i(Ti),gf=n(Ti,"P",{});var bW=s(gf);nwr=r(bW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),L3e=n(bW,"CODE",{});var d1t=s(L3e);swr=r(d1t,"from_pretrained()"),d1t.forEach(t),lwr=r(bW,"class method or the "),B3e=n(bW,"CODE",{});var c1t=s(B3e);iwr=r(c1t,"from_config()"),c1t.forEach(t),dwr=r(bW,`class
method.`),bW.forEach(t),cwr=i(Ti),q0=n(Ti,"P",{});var IRe=s(q0);fwr=r(IRe,"This class cannot be instantiated directly using "),x3e=n(IRe,"CODE",{});var f1t=s(x3e);mwr=r(f1t,"__init__()"),f1t.forEach(t),gwr=r(IRe," (throws an error)."),IRe.forEach(t),hwr=i(Ti),Bt=n(Ti,"DIV",{class:!0});var Fi=s(Bt);m(G0.$$.fragment,Fi),pwr=i(Fi),k3e=n(Fi,"P",{});var m1t=s(k3e);_wr=r(m1t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),m1t.forEach(t),uwr=i(Fi),hf=n(Fi,"P",{});var vW=s(hf);bwr=r(vW,`Note:
Loading a model from its configuration file does `),R3e=n(vW,"STRONG",{});var g1t=s(R3e);vwr=r(g1t,"not"),g1t.forEach(t),Twr=r(vW,` load the model weights. It only affects the
model\u2019s configuration. Use `),S3e=n(vW,"CODE",{});var h1t=s(S3e);Fwr=r(h1t,"from_pretrained()"),h1t.forEach(t),Cwr=r(vW,"to load the model weights."),vW.forEach(t),Mwr=i(Fi),P3e=n(Fi,"P",{});var p1t=s(P3e);Ewr=r(p1t,"Examples:"),p1t.forEach(t),ywr=i(Fi),m(O0.$$.fragment,Fi),Fi.forEach(t),wwr=i(Ti),Po=n(Ti,"DIV",{class:!0});var ka=s(Po);m(X0.$$.fragment,ka),Awr=i(ka),$3e=n(ka,"P",{});var _1t=s($3e);Lwr=r(_1t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),_1t.forEach(t),Bwr=i(ka),Rn=n(ka,"P",{});var TM=s(Rn);xwr=r(TM,"The model class to instantiate is selected based on the "),I3e=n(TM,"CODE",{});var u1t=s(I3e);kwr=r(u1t,"model_type"),u1t.forEach(t),Rwr=r(TM,` property of the config object (either
passed as an argument or loaded from `),D3e=n(TM,"CODE",{});var b1t=s(D3e);Swr=r(b1t,"pretrained_model_name_or_path"),b1t.forEach(t),Pwr=r(TM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j3e=n(TM,"CODE",{});var v1t=s(j3e);$wr=r(v1t,"pretrained_model_name_or_path"),v1t.forEach(t),Iwr=r(TM,":"),TM.forEach(t),Dwr=i(ka),lo=n(ka,"UL",{});var aa=s(lo);f4=n(aa,"LI",{});var M7e=s(f4);N3e=n(M7e,"STRONG",{});var T1t=s(N3e);jwr=r(T1t,"albert"),T1t.forEach(t),Nwr=r(M7e," \u2014 "),yV=n(M7e,"A",{href:!0});var F1t=s(yV);qwr=r(F1t,"FlaxAlbertForMultipleChoice"),F1t.forEach(t),Gwr=r(M7e," (ALBERT model)"),M7e.forEach(t),Owr=i(aa),m4=n(aa,"LI",{});var E7e=s(m4);q3e=n(E7e,"STRONG",{});var C1t=s(q3e);Xwr=r(C1t,"bert"),C1t.forEach(t),Vwr=r(E7e," \u2014 "),wV=n(E7e,"A",{href:!0});var M1t=s(wV);zwr=r(M1t,"FlaxBertForMultipleChoice"),M1t.forEach(t),Wwr=r(E7e," (BERT model)"),E7e.forEach(t),Qwr=i(aa),g4=n(aa,"LI",{});var y7e=s(g4);G3e=n(y7e,"STRONG",{});var E1t=s(G3e);Hwr=r(E1t,"big_bird"),E1t.forEach(t),Uwr=r(y7e," \u2014 "),AV=n(y7e,"A",{href:!0});var y1t=s(AV);Jwr=r(y1t,"FlaxBigBirdForMultipleChoice"),y1t.forEach(t),Ywr=r(y7e," (BigBird model)"),y7e.forEach(t),Kwr=i(aa),h4=n(aa,"LI",{});var w7e=s(h4);O3e=n(w7e,"STRONG",{});var w1t=s(O3e);Zwr=r(w1t,"distilbert"),w1t.forEach(t),e6r=r(w7e," \u2014 "),LV=n(w7e,"A",{href:!0});var A1t=s(LV);o6r=r(A1t,"FlaxDistilBertForMultipleChoice"),A1t.forEach(t),r6r=r(w7e," (DistilBERT model)"),w7e.forEach(t),t6r=i(aa),p4=n(aa,"LI",{});var A7e=s(p4);X3e=n(A7e,"STRONG",{});var L1t=s(X3e);a6r=r(L1t,"electra"),L1t.forEach(t),n6r=r(A7e," \u2014 "),BV=n(A7e,"A",{href:!0});var B1t=s(BV);s6r=r(B1t,"FlaxElectraForMultipleChoice"),B1t.forEach(t),l6r=r(A7e," (ELECTRA model)"),A7e.forEach(t),i6r=i(aa),_4=n(aa,"LI",{});var L7e=s(_4);V3e=n(L7e,"STRONG",{});var x1t=s(V3e);d6r=r(x1t,"roberta"),x1t.forEach(t),c6r=r(L7e," \u2014 "),xV=n(L7e,"A",{href:!0});var k1t=s(xV);f6r=r(k1t,"FlaxRobertaForMultipleChoice"),k1t.forEach(t),m6r=r(L7e," (RoBERTa model)"),L7e.forEach(t),g6r=i(aa),u4=n(aa,"LI",{});var B7e=s(u4);z3e=n(B7e,"STRONG",{});var R1t=s(z3e);h6r=r(R1t,"roformer"),R1t.forEach(t),p6r=r(B7e," \u2014 "),kV=n(B7e,"A",{href:!0});var S1t=s(kV);_6r=r(S1t,"FlaxRoFormerForMultipleChoice"),S1t.forEach(t),u6r=r(B7e," (RoFormer model)"),B7e.forEach(t),aa.forEach(t),b6r=i(ka),W3e=n(ka,"P",{});var P1t=s(W3e);v6r=r(P1t,"Examples:"),P1t.forEach(t),T6r=i(ka),m(V0.$$.fragment,ka),ka.forEach(t),Ti.forEach(t),Axe=i(c),pf=n(c,"H2",{class:!0});var DRe=s(pf);b4=n(DRe,"A",{id:!0,class:!0,href:!0});var $1t=s(b4);Q3e=n($1t,"SPAN",{});var I1t=s(Q3e);m(z0.$$.fragment,I1t),I1t.forEach(t),$1t.forEach(t),F6r=i(DRe),H3e=n(DRe,"SPAN",{});var D1t=s(H3e);C6r=r(D1t,"FlaxAutoModelForNextSentencePrediction"),D1t.forEach(t),DRe.forEach(t),Lxe=i(c),Dr=n(c,"DIV",{class:!0});var Ci=s(Dr);m(W0.$$.fragment,Ci),M6r=i(Ci),_f=n(Ci,"P",{});var TW=s(_f);E6r=r(TW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),U3e=n(TW,"CODE",{});var j1t=s(U3e);y6r=r(j1t,"from_pretrained()"),j1t.forEach(t),w6r=r(TW,"class method or the "),J3e=n(TW,"CODE",{});var N1t=s(J3e);A6r=r(N1t,"from_config()"),N1t.forEach(t),L6r=r(TW,`class
method.`),TW.forEach(t),B6r=i(Ci),Q0=n(Ci,"P",{});var jRe=s(Q0);x6r=r(jRe,"This class cannot be instantiated directly using "),Y3e=n(jRe,"CODE",{});var q1t=s(Y3e);k6r=r(q1t,"__init__()"),q1t.forEach(t),R6r=r(jRe," (throws an error)."),jRe.forEach(t),S6r=i(Ci),xt=n(Ci,"DIV",{class:!0});var Mi=s(xt);m(H0.$$.fragment,Mi),P6r=i(Mi),K3e=n(Mi,"P",{});var G1t=s(K3e);$6r=r(G1t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),G1t.forEach(t),I6r=i(Mi),uf=n(Mi,"P",{});var FW=s(uf);D6r=r(FW,`Note:
Loading a model from its configuration file does `),Z3e=n(FW,"STRONG",{});var O1t=s(Z3e);j6r=r(O1t,"not"),O1t.forEach(t),N6r=r(FW,` load the model weights. It only affects the
model\u2019s configuration. Use `),e5e=n(FW,"CODE",{});var X1t=s(e5e);q6r=r(X1t,"from_pretrained()"),X1t.forEach(t),G6r=r(FW,"to load the model weights."),FW.forEach(t),O6r=i(Mi),o5e=n(Mi,"P",{});var V1t=s(o5e);X6r=r(V1t,"Examples:"),V1t.forEach(t),V6r=i(Mi),m(U0.$$.fragment,Mi),Mi.forEach(t),z6r=i(Ci),$o=n(Ci,"DIV",{class:!0});var Ra=s($o);m(J0.$$.fragment,Ra),W6r=i(Ra),r5e=n(Ra,"P",{});var z1t=s(r5e);Q6r=r(z1t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),z1t.forEach(t),H6r=i(Ra),Sn=n(Ra,"P",{});var FM=s(Sn);U6r=r(FM,"The model class to instantiate is selected based on the "),t5e=n(FM,"CODE",{});var W1t=s(t5e);J6r=r(W1t,"model_type"),W1t.forEach(t),Y6r=r(FM,` property of the config object (either
passed as an argument or loaded from `),a5e=n(FM,"CODE",{});var Q1t=s(a5e);K6r=r(Q1t,"pretrained_model_name_or_path"),Q1t.forEach(t),Z6r=r(FM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n5e=n(FM,"CODE",{});var H1t=s(n5e);eAr=r(H1t,"pretrained_model_name_or_path"),H1t.forEach(t),oAr=r(FM,":"),FM.forEach(t),rAr=i(Ra),s5e=n(Ra,"UL",{});var U1t=s(s5e);v4=n(U1t,"LI",{});var x7e=s(v4);l5e=n(x7e,"STRONG",{});var J1t=s(l5e);tAr=r(J1t,"bert"),J1t.forEach(t),aAr=r(x7e," \u2014 "),RV=n(x7e,"A",{href:!0});var Y1t=s(RV);nAr=r(Y1t,"FlaxBertForNextSentencePrediction"),Y1t.forEach(t),sAr=r(x7e," (BERT model)"),x7e.forEach(t),U1t.forEach(t),lAr=i(Ra),i5e=n(Ra,"P",{});var K1t=s(i5e);iAr=r(K1t,"Examples:"),K1t.forEach(t),dAr=i(Ra),m(Y0.$$.fragment,Ra),Ra.forEach(t),Ci.forEach(t),Bxe=i(c),bf=n(c,"H2",{class:!0});var NRe=s(bf);T4=n(NRe,"A",{id:!0,class:!0,href:!0});var Z1t=s(T4);d5e=n(Z1t,"SPAN",{});var ebt=s(d5e);m(K0.$$.fragment,ebt),ebt.forEach(t),Z1t.forEach(t),cAr=i(NRe),c5e=n(NRe,"SPAN",{});var obt=s(c5e);fAr=r(obt,"FlaxAutoModelForImageClassification"),obt.forEach(t),NRe.forEach(t),xxe=i(c),jr=n(c,"DIV",{class:!0});var Ei=s(jr);m(Z0.$$.fragment,Ei),mAr=i(Ei),vf=n(Ei,"P",{});var CW=s(vf);gAr=r(CW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),f5e=n(CW,"CODE",{});var rbt=s(f5e);hAr=r(rbt,"from_pretrained()"),rbt.forEach(t),pAr=r(CW,"class method or the "),m5e=n(CW,"CODE",{});var tbt=s(m5e);_Ar=r(tbt,"from_config()"),tbt.forEach(t),uAr=r(CW,`class
method.`),CW.forEach(t),bAr=i(Ei),eL=n(Ei,"P",{});var qRe=s(eL);vAr=r(qRe,"This class cannot be instantiated directly using "),g5e=n(qRe,"CODE",{});var abt=s(g5e);TAr=r(abt,"__init__()"),abt.forEach(t),FAr=r(qRe," (throws an error)."),qRe.forEach(t),CAr=i(Ei),kt=n(Ei,"DIV",{class:!0});var yi=s(kt);m(oL.$$.fragment,yi),MAr=i(yi),h5e=n(yi,"P",{});var nbt=s(h5e);EAr=r(nbt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),nbt.forEach(t),yAr=i(yi),Tf=n(yi,"P",{});var MW=s(Tf);wAr=r(MW,`Note:
Loading a model from its configuration file does `),p5e=n(MW,"STRONG",{});var sbt=s(p5e);AAr=r(sbt,"not"),sbt.forEach(t),LAr=r(MW,` load the model weights. It only affects the
model\u2019s configuration. Use `),_5e=n(MW,"CODE",{});var lbt=s(_5e);BAr=r(lbt,"from_pretrained()"),lbt.forEach(t),xAr=r(MW,"to load the model weights."),MW.forEach(t),kAr=i(yi),u5e=n(yi,"P",{});var ibt=s(u5e);RAr=r(ibt,"Examples:"),ibt.forEach(t),SAr=i(yi),m(rL.$$.fragment,yi),yi.forEach(t),PAr=i(Ei),Io=n(Ei,"DIV",{class:!0});var Sa=s(Io);m(tL.$$.fragment,Sa),$Ar=i(Sa),b5e=n(Sa,"P",{});var dbt=s(b5e);IAr=r(dbt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),dbt.forEach(t),DAr=i(Sa),Pn=n(Sa,"P",{});var CM=s(Pn);jAr=r(CM,"The model class to instantiate is selected based on the "),v5e=n(CM,"CODE",{});var cbt=s(v5e);NAr=r(cbt,"model_type"),cbt.forEach(t),qAr=r(CM,` property of the config object (either
passed as an argument or loaded from `),T5e=n(CM,"CODE",{});var fbt=s(T5e);GAr=r(fbt,"pretrained_model_name_or_path"),fbt.forEach(t),OAr=r(CM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F5e=n(CM,"CODE",{});var mbt=s(F5e);XAr=r(mbt,"pretrained_model_name_or_path"),mbt.forEach(t),VAr=r(CM,":"),CM.forEach(t),zAr=i(Sa),aL=n(Sa,"UL",{});var GRe=s(aL);F4=n(GRe,"LI",{});var k7e=s(F4);C5e=n(k7e,"STRONG",{});var gbt=s(C5e);WAr=r(gbt,"beit"),gbt.forEach(t),QAr=r(k7e," \u2014 "),SV=n(k7e,"A",{href:!0});var hbt=s(SV);HAr=r(hbt,"FlaxBeitForImageClassification"),hbt.forEach(t),UAr=r(k7e," (BEiT model)"),k7e.forEach(t),JAr=i(GRe),C4=n(GRe,"LI",{});var R7e=s(C4);M5e=n(R7e,"STRONG",{});var pbt=s(M5e);YAr=r(pbt,"vit"),pbt.forEach(t),KAr=r(R7e," \u2014 "),PV=n(R7e,"A",{href:!0});var _bt=s(PV);ZAr=r(_bt,"FlaxViTForImageClassification"),_bt.forEach(t),e0r=r(R7e," (ViT model)"),R7e.forEach(t),GRe.forEach(t),o0r=i(Sa),E5e=n(Sa,"P",{});var ubt=s(E5e);r0r=r(ubt,"Examples:"),ubt.forEach(t),t0r=i(Sa),m(nL.$$.fragment,Sa),Sa.forEach(t),Ei.forEach(t),kxe=i(c),Ff=n(c,"H2",{class:!0});var ORe=s(Ff);M4=n(ORe,"A",{id:!0,class:!0,href:!0});var bbt=s(M4);y5e=n(bbt,"SPAN",{});var vbt=s(y5e);m(sL.$$.fragment,vbt),vbt.forEach(t),bbt.forEach(t),a0r=i(ORe),w5e=n(ORe,"SPAN",{});var Tbt=s(w5e);n0r=r(Tbt,"FlaxAutoModelForVision2Seq"),Tbt.forEach(t),ORe.forEach(t),Rxe=i(c),Nr=n(c,"DIV",{class:!0});var wi=s(Nr);m(lL.$$.fragment,wi),s0r=i(wi),Cf=n(wi,"P",{});var EW=s(Cf);l0r=r(EW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),A5e=n(EW,"CODE",{});var Fbt=s(A5e);i0r=r(Fbt,"from_pretrained()"),Fbt.forEach(t),d0r=r(EW,"class method or the "),L5e=n(EW,"CODE",{});var Cbt=s(L5e);c0r=r(Cbt,"from_config()"),Cbt.forEach(t),f0r=r(EW,`class
method.`),EW.forEach(t),m0r=i(wi),iL=n(wi,"P",{});var XRe=s(iL);g0r=r(XRe,"This class cannot be instantiated directly using "),B5e=n(XRe,"CODE",{});var Mbt=s(B5e);h0r=r(Mbt,"__init__()"),Mbt.forEach(t),p0r=r(XRe," (throws an error)."),XRe.forEach(t),_0r=i(wi),Rt=n(wi,"DIV",{class:!0});var Ai=s(Rt);m(dL.$$.fragment,Ai),u0r=i(Ai),x5e=n(Ai,"P",{});var Ebt=s(x5e);b0r=r(Ebt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Ebt.forEach(t),v0r=i(Ai),Mf=n(Ai,"P",{});var yW=s(Mf);T0r=r(yW,`Note:
Loading a model from its configuration file does `),k5e=n(yW,"STRONG",{});var ybt=s(k5e);F0r=r(ybt,"not"),ybt.forEach(t),C0r=r(yW,` load the model weights. It only affects the
model\u2019s configuration. Use `),R5e=n(yW,"CODE",{});var wbt=s(R5e);M0r=r(wbt,"from_pretrained()"),wbt.forEach(t),E0r=r(yW,"to load the model weights."),yW.forEach(t),y0r=i(Ai),S5e=n(Ai,"P",{});var Abt=s(S5e);w0r=r(Abt,"Examples:"),Abt.forEach(t),A0r=i(Ai),m(cL.$$.fragment,Ai),Ai.forEach(t),L0r=i(wi),Do=n(wi,"DIV",{class:!0});var Pa=s(Do);m(fL.$$.fragment,Pa),B0r=i(Pa),P5e=n(Pa,"P",{});var Lbt=s(P5e);x0r=r(Lbt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Lbt.forEach(t),k0r=i(Pa),$n=n(Pa,"P",{});var MM=s($n);R0r=r(MM,"The model class to instantiate is selected based on the "),$5e=n(MM,"CODE",{});var Bbt=s($5e);S0r=r(Bbt,"model_type"),Bbt.forEach(t),P0r=r(MM,` property of the config object (either
passed as an argument or loaded from `),I5e=n(MM,"CODE",{});var xbt=s(I5e);$0r=r(xbt,"pretrained_model_name_or_path"),xbt.forEach(t),I0r=r(MM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D5e=n(MM,"CODE",{});var kbt=s(D5e);D0r=r(kbt,"pretrained_model_name_or_path"),kbt.forEach(t),j0r=r(MM,":"),MM.forEach(t),N0r=i(Pa),j5e=n(Pa,"UL",{});var Rbt=s(j5e);E4=n(Rbt,"LI",{});var S7e=s(E4);N5e=n(S7e,"STRONG",{});var Sbt=s(N5e);q0r=r(Sbt,"vision-encoder-decoder"),Sbt.forEach(t),G0r=r(S7e," \u2014 "),$V=n(S7e,"A",{href:!0});var Pbt=s($V);O0r=r(Pbt,"FlaxVisionEncoderDecoderModel"),Pbt.forEach(t),X0r=r(S7e," (Vision Encoder decoder model)"),S7e.forEach(t),Rbt.forEach(t),V0r=i(Pa),q5e=n(Pa,"P",{});var $bt=s(q5e);z0r=r($bt,"Examples:"),$bt.forEach(t),W0r=i(Pa),m(mL.$$.fragment,Pa),Pa.forEach(t),wi.forEach(t),this.h()},h(){d(J,"name","hf:doc:metadata"),d(J,"content",JSON.stringify(Vbt)),d(me,"id","auto-classes"),d(me,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(me,"href","#auto-classes"),d(de,"class","relative group"),d(In,"href","/docs/transformers/pr_15923/en/model_doc/auto#transformers.AutoConfig"),d(jn,"href","/docs/transformers/pr_15923/en/model_doc/auto#transformers.AutoModel"),d(Nn,"href","/docs/transformers/pr_15923/en/model_doc/auto#transformers.AutoTokenizer"),d($i,"href","/docs/transformers/pr_15923/en/model_doc/bert#transformers.BertModel"),d(Bf,"id","extending-the-auto-classes"),d(Bf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Bf,"href","#extending-the-auto-classes"),d(Ii,"class","relative group"),d(kf,"id","transformers.AutoConfig"),d(kf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(kf,"href","#transformers.AutoConfig"),d(Di,"class","relative group"),d(_8,"href","/docs/transformers/pr_15923/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),d(u8,"href","/docs/transformers/pr_15923/en/model_doc/albert#transformers.AlbertConfig"),d(b8,"href","/docs/transformers/pr_15923/en/model_doc/bart#transformers.BartConfig"),d(v8,"href","/docs/transformers/pr_15923/en/model_doc/beit#transformers.BeitConfig"),d(T8,"href","/docs/transformers/pr_15923/en/model_doc/bert#transformers.BertConfig"),d(F8,"href","/docs/transformers/pr_15923/en/model_doc/bert-generation#transformers.BertGenerationConfig"),d(C8,"href","/docs/transformers/pr_15923/en/model_doc/big_bird#transformers.BigBirdConfig"),d(M8,"href","/docs/transformers/pr_15923/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),d(E8,"href","/docs/transformers/pr_15923/en/model_doc/blenderbot#transformers.BlenderbotConfig"),d(y8,"href","/docs/transformers/pr_15923/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),d(w8,"href","/docs/transformers/pr_15923/en/model_doc/camembert#transformers.CamembertConfig"),d(A8,"href","/docs/transformers/pr_15923/en/model_doc/canine#transformers.CanineConfig"),d(L8,"href","/docs/transformers/pr_15923/en/model_doc/clip#transformers.CLIPConfig"),d(B8,"href","/docs/transformers/pr_15923/en/model_doc/convbert#transformers.ConvBertConfig"),d(x8,"href","/docs/transformers/pr_15923/en/model_doc/convnext#transformers.ConvNextConfig"),d(k8,"href","/docs/transformers/pr_15923/en/model_doc/ctrl#transformers.CTRLConfig"),d(R8,"href","/docs/transformers/pr_15923/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),d(S8,"href","/docs/transformers/pr_15923/en/model_doc/data2vec#transformers.Data2VecTextConfig"),d(P8,"href","/docs/transformers/pr_15923/en/model_doc/deberta#transformers.DebertaConfig"),d($8,"href","/docs/transformers/pr_15923/en/model_doc/deberta-v2#transformers.DebertaV2Config"),d(I8,"href","/docs/transformers/pr_15923/en/model_doc/deit#transformers.DeiTConfig"),d(D8,"href","/docs/transformers/pr_15923/en/model_doc/detr#transformers.DetrConfig"),d(j8,"href","/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.DistilBertConfig"),d(N8,"href","/docs/transformers/pr_15923/en/model_doc/dpr#transformers.DPRConfig"),d(q8,"href","/docs/transformers/pr_15923/en/model_doc/electra#transformers.ElectraConfig"),d(G8,"href","/docs/transformers/pr_15923/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),d(O8,"href","/docs/transformers/pr_15923/en/model_doc/flaubert#transformers.FlaubertConfig"),d(X8,"href","/docs/transformers/pr_15923/en/model_doc/fnet#transformers.FNetConfig"),d(V8,"href","/docs/transformers/pr_15923/en/model_doc/fsmt#transformers.FSMTConfig"),d(z8,"href","/docs/transformers/pr_15923/en/model_doc/funnel#transformers.FunnelConfig"),d(W8,"href","/docs/transformers/pr_15923/en/model_doc/gpt2#transformers.GPT2Config"),d(Q8,"href","/docs/transformers/pr_15923/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),d(H8,"href","/docs/transformers/pr_15923/en/model_doc/gptj#transformers.GPTJConfig"),d(U8,"href","/docs/transformers/pr_15923/en/model_doc/hubert#transformers.HubertConfig"),d(J8,"href","/docs/transformers/pr_15923/en/model_doc/ibert#transformers.IBertConfig"),d(Y8,"href","/docs/transformers/pr_15923/en/model_doc/imagegpt#transformers.ImageGPTConfig"),d(K8,"href","/docs/transformers/pr_15923/en/model_doc/layoutlm#transformers.LayoutLMConfig"),d(Z8,"href","/docs/transformers/pr_15923/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),d(e7,"href","/docs/transformers/pr_15923/en/model_doc/led#transformers.LEDConfig"),d(o7,"href","/docs/transformers/pr_15923/en/model_doc/longformer#transformers.LongformerConfig"),d(r7,"href","/docs/transformers/pr_15923/en/model_doc/luke#transformers.LukeConfig"),d(t7,"href","/docs/transformers/pr_15923/en/model_doc/lxmert#transformers.LxmertConfig"),d(a7,"href","/docs/transformers/pr_15923/en/model_doc/m2m_100#transformers.M2M100Config"),d(n7,"href","/docs/transformers/pr_15923/en/model_doc/marian#transformers.MarianConfig"),d(s7,"href","/docs/transformers/pr_15923/en/model_doc/maskformer#transformers.MaskFormerConfig"),d(l7,"href","/docs/transformers/pr_15923/en/model_doc/mbart#transformers.MBartConfig"),d(i7,"href","/docs/transformers/pr_15923/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),d(d7,"href","/docs/transformers/pr_15923/en/model_doc/mobilebert#transformers.MobileBertConfig"),d(c7,"href","/docs/transformers/pr_15923/en/model_doc/mpnet#transformers.MPNetConfig"),d(f7,"href","/docs/transformers/pr_15923/en/model_doc/mt5#transformers.MT5Config"),d(m7,"href","/docs/transformers/pr_15923/en/model_doc/nystromformer#transformers.NystromformerConfig"),d(g7,"href","/docs/transformers/pr_15923/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),d(h7,"href","/docs/transformers/pr_15923/en/model_doc/pegasus#transformers.PegasusConfig"),d(p7,"href","/docs/transformers/pr_15923/en/model_doc/perceiver#transformers.PerceiverConfig"),d(_7,"href","/docs/transformers/pr_15923/en/model_doc/plbart#transformers.PLBartConfig"),d(u7,"href","/docs/transformers/pr_15923/en/model_doc/poolformer#transformers.PoolFormerConfig"),d(b7,"href","/docs/transformers/pr_15923/en/model_doc/prophetnet#transformers.ProphetNetConfig"),d(v7,"href","/docs/transformers/pr_15923/en/model_doc/qdqbert#transformers.QDQBertConfig"),d(T7,"href","/docs/transformers/pr_15923/en/model_doc/rag#transformers.RagConfig"),d(F7,"href","/docs/transformers/pr_15923/en/model_doc/realm#transformers.RealmConfig"),d(C7,"href","/docs/transformers/pr_15923/en/model_doc/reformer#transformers.ReformerConfig"),d(M7,"href","/docs/transformers/pr_15923/en/model_doc/rembert#transformers.RemBertConfig"),d(E7,"href","/docs/transformers/pr_15923/en/model_doc/retribert#transformers.RetriBertConfig"),d(y7,"href","/docs/transformers/pr_15923/en/model_doc/roberta#transformers.RobertaConfig"),d(w7,"href","/docs/transformers/pr_15923/en/model_doc/roformer#transformers.RoFormerConfig"),d(A7,"href","/docs/transformers/pr_15923/en/model_doc/segformer#transformers.SegformerConfig"),d(L7,"href","/docs/transformers/pr_15923/en/model_doc/sew#transformers.SEWConfig"),d(B7,"href","/docs/transformers/pr_15923/en/model_doc/sew-d#transformers.SEWDConfig"),d(x7,"href","/docs/transformers/pr_15923/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),d(k7,"href","/docs/transformers/pr_15923/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),d(R7,"href","/docs/transformers/pr_15923/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),d(S7,"href","/docs/transformers/pr_15923/en/model_doc/splinter#transformers.SplinterConfig"),d(P7,"href","/docs/transformers/pr_15923/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),d($7,"href","/docs/transformers/pr_15923/en/model_doc/swin#transformers.SwinConfig"),d(I7,"href","/docs/transformers/pr_15923/en/model_doc/t5#transformers.T5Config"),d(D7,"href","/docs/transformers/pr_15923/en/model_doc/tapas#transformers.TapasConfig"),d(j7,"href","/docs/transformers/pr_15923/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),d(N7,"href","/docs/transformers/pr_15923/en/model_doc/trocr#transformers.TrOCRConfig"),d(q7,"href","/docs/transformers/pr_15923/en/model_doc/unispeech#transformers.UniSpeechConfig"),d(G7,"href","/docs/transformers/pr_15923/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),d(O7,"href","/docs/transformers/pr_15923/en/model_doc/vilt#transformers.ViltConfig"),d(X7,"href","/docs/transformers/pr_15923/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),d(V7,"href","/docs/transformers/pr_15923/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),d(z7,"href","/docs/transformers/pr_15923/en/model_doc/visual_bert#transformers.VisualBertConfig"),d(W7,"href","/docs/transformers/pr_15923/en/model_doc/vit#transformers.ViTConfig"),d(Q7,"href","/docs/transformers/pr_15923/en/model_doc/vit_mae#transformers.ViTMAEConfig"),d(H7,"href","/docs/transformers/pr_15923/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),d(U7,"href","/docs/transformers/pr_15923/en/model_doc/wavlm#transformers.WavLMConfig"),d(J7,"href","/docs/transformers/pr_15923/en/model_doc/xglm#transformers.XGLMConfig"),d(Y7,"href","/docs/transformers/pr_15923/en/model_doc/xlm#transformers.XLMConfig"),d(K7,"href","/docs/transformers/pr_15923/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),d(Z7,"href","/docs/transformers/pr_15923/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),d(eB,"href","/docs/transformers/pr_15923/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),d(oB,"href","/docs/transformers/pr_15923/en/model_doc/xlnet#transformers.XLNetConfig"),d(rB,"href","/docs/transformers/pr_15923/en/model_doc/yoso#transformers.YosoConfig"),d(fo,"class","docstring"),d(bg,"class","docstring"),d(Xo,"class","docstring"),d(vg,"id","transformers.AutoTokenizer"),d(vg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(vg,"href","#transformers.AutoTokenizer"),d(Ni,"class","relative group"),d(tB,"href","/docs/transformers/pr_15923/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),d(aB,"href","/docs/transformers/pr_15923/en/model_doc/albert#transformers.AlbertTokenizer"),d(nB,"href","/docs/transformers/pr_15923/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(sB,"href","/docs/transformers/pr_15923/en/model_doc/bart#transformers.BartTokenizer"),d(lB,"href","/docs/transformers/pr_15923/en/model_doc/bart#transformers.BartTokenizerFast"),d(iB,"href","/docs/transformers/pr_15923/en/model_doc/barthez#transformers.BarthezTokenizer"),d(dB,"href","/docs/transformers/pr_15923/en/model_doc/barthez#transformers.BarthezTokenizerFast"),d(cB,"href","/docs/transformers/pr_15923/en/model_doc/bartpho#transformers.BartphoTokenizer"),d(fB,"href","/docs/transformers/pr_15923/en/model_doc/bert#transformers.BertTokenizer"),d(mB,"href","/docs/transformers/pr_15923/en/model_doc/bert#transformers.BertTokenizerFast"),d(gB,"href","/docs/transformers/pr_15923/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),d(hB,"href","/docs/transformers/pr_15923/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),d(pB,"href","/docs/transformers/pr_15923/en/model_doc/bertweet#transformers.BertweetTokenizer"),d(_B,"href","/docs/transformers/pr_15923/en/model_doc/big_bird#transformers.BigBirdTokenizer"),d(uB,"href","/docs/transformers/pr_15923/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),d(bB,"href","/docs/transformers/pr_15923/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(vB,"href","/docs/transformers/pr_15923/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(TB,"href","/docs/transformers/pr_15923/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),d(FB,"href","/docs/transformers/pr_15923/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),d(CB,"href","/docs/transformers/pr_15923/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),d(MB,"href","/docs/transformers/pr_15923/en/model_doc/byt5#transformers.ByT5Tokenizer"),d(EB,"href","/docs/transformers/pr_15923/en/model_doc/camembert#transformers.CamembertTokenizer"),d(yB,"href","/docs/transformers/pr_15923/en/model_doc/camembert#transformers.CamembertTokenizerFast"),d(wB,"href","/docs/transformers/pr_15923/en/model_doc/canine#transformers.CanineTokenizer"),d(AB,"href","/docs/transformers/pr_15923/en/model_doc/clip#transformers.CLIPTokenizer"),d(LB,"href","/docs/transformers/pr_15923/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(BB,"href","/docs/transformers/pr_15923/en/model_doc/convbert#transformers.ConvBertTokenizer"),d(xB,"href","/docs/transformers/pr_15923/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),d(kB,"href","/docs/transformers/pr_15923/en/model_doc/cpm#transformers.CpmTokenizer"),d(RB,"href","/docs/transformers/pr_15923/en/model_doc/ctrl#transformers.CTRLTokenizer"),d(SB,"href","/docs/transformers/pr_15923/en/model_doc/deberta#transformers.DebertaTokenizer"),d(PB,"href","/docs/transformers/pr_15923/en/model_doc/deberta#transformers.DebertaTokenizerFast"),d($B,"href","/docs/transformers/pr_15923/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),d(IB,"href","/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.DistilBertTokenizer"),d(DB,"href","/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),d(jB,"href","/docs/transformers/pr_15923/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),d(NB,"href","/docs/transformers/pr_15923/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),d(qB,"href","/docs/transformers/pr_15923/en/model_doc/electra#transformers.ElectraTokenizer"),d(GB,"href","/docs/transformers/pr_15923/en/model_doc/electra#transformers.ElectraTokenizerFast"),d(OB,"href","/docs/transformers/pr_15923/en/model_doc/flaubert#transformers.FlaubertTokenizer"),d(XB,"href","/docs/transformers/pr_15923/en/model_doc/fnet#transformers.FNetTokenizer"),d(VB,"href","/docs/transformers/pr_15923/en/model_doc/fnet#transformers.FNetTokenizerFast"),d(zB,"href","/docs/transformers/pr_15923/en/model_doc/fsmt#transformers.FSMTTokenizer"),d(WB,"href","/docs/transformers/pr_15923/en/model_doc/funnel#transformers.FunnelTokenizer"),d(QB,"href","/docs/transformers/pr_15923/en/model_doc/funnel#transformers.FunnelTokenizerFast"),d(HB,"href","/docs/transformers/pr_15923/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(UB,"href","/docs/transformers/pr_15923/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(JB,"href","/docs/transformers/pr_15923/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(YB,"href","/docs/transformers/pr_15923/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(KB,"href","/docs/transformers/pr_15923/en/model_doc/herbert#transformers.HerbertTokenizer"),d(ZB,"href","/docs/transformers/pr_15923/en/model_doc/herbert#transformers.HerbertTokenizerFast"),d(ex,"href","/docs/transformers/pr_15923/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(ox,"href","/docs/transformers/pr_15923/en/model_doc/roberta#transformers.RobertaTokenizer"),d(rx,"href","/docs/transformers/pr_15923/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(tx,"href","/docs/transformers/pr_15923/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),d(ax,"href","/docs/transformers/pr_15923/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),d(nx,"href","/docs/transformers/pr_15923/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),d(sx,"href","/docs/transformers/pr_15923/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),d(lx,"href","/docs/transformers/pr_15923/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),d(ix,"href","/docs/transformers/pr_15923/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),d(dx,"href","/docs/transformers/pr_15923/en/model_doc/led#transformers.LEDTokenizer"),d(cx,"href","/docs/transformers/pr_15923/en/model_doc/led#transformers.LEDTokenizerFast"),d(fx,"href","/docs/transformers/pr_15923/en/model_doc/longformer#transformers.LongformerTokenizer"),d(mx,"href","/docs/transformers/pr_15923/en/model_doc/longformer#transformers.LongformerTokenizerFast"),d(gx,"href","/docs/transformers/pr_15923/en/model_doc/luke#transformers.LukeTokenizer"),d(hx,"href","/docs/transformers/pr_15923/en/model_doc/lxmert#transformers.LxmertTokenizer"),d(px,"href","/docs/transformers/pr_15923/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),d(_x,"href","/docs/transformers/pr_15923/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),d(ux,"href","/docs/transformers/pr_15923/en/model_doc/marian#transformers.MarianTokenizer"),d(bx,"href","/docs/transformers/pr_15923/en/model_doc/mbart#transformers.MBartTokenizer"),d(vx,"href","/docs/transformers/pr_15923/en/model_doc/mbart#transformers.MBartTokenizerFast"),d(Tx,"href","/docs/transformers/pr_15923/en/model_doc/mbart#transformers.MBart50Tokenizer"),d(Fx,"href","/docs/transformers/pr_15923/en/model_doc/mbart#transformers.MBart50TokenizerFast"),d(Cx,"href","/docs/transformers/pr_15923/en/model_doc/mluke#transformers.MLukeTokenizer"),d(Mx,"href","/docs/transformers/pr_15923/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),d(Ex,"href","/docs/transformers/pr_15923/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),d(yx,"href","/docs/transformers/pr_15923/en/model_doc/mpnet#transformers.MPNetTokenizer"),d(wx,"href","/docs/transformers/pr_15923/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),d(Ax,"href","/docs/transformers/pr_15923/en/model_doc/mt5#transformers.T5Tokenizer"),d(Lx,"href","/docs/transformers/pr_15923/en/model_doc/mt5#transformers.T5TokenizerFast"),d(Bx,"href","/docs/transformers/pr_15923/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),d(xx,"href","/docs/transformers/pr_15923/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),d(kx,"href","/docs/transformers/pr_15923/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(Rx,"href","/docs/transformers/pr_15923/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(Sx,"href","/docs/transformers/pr_15923/en/model_doc/perceiver#transformers.PerceiverTokenizer"),d(Px,"href","/docs/transformers/pr_15923/en/model_doc/phobert#transformers.PhobertTokenizer"),d($x,"href","/docs/transformers/pr_15923/en/model_doc/plbart#transformers.PLBartTokenizer"),d(Ix,"href","/docs/transformers/pr_15923/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),d(Dx,"href","/docs/transformers/pr_15923/en/model_doc/bert#transformers.BertTokenizer"),d(jx,"href","/docs/transformers/pr_15923/en/model_doc/bert#transformers.BertTokenizerFast"),d(Nx,"href","/docs/transformers/pr_15923/en/model_doc/rag#transformers.RagTokenizer"),d(qx,"href","/docs/transformers/pr_15923/en/model_doc/realm#transformers.RealmTokenizer"),d(Gx,"href","/docs/transformers/pr_15923/en/model_doc/realm#transformers.RealmTokenizerFast"),d(Ox,"href","/docs/transformers/pr_15923/en/model_doc/reformer#transformers.ReformerTokenizer"),d(Xx,"href","/docs/transformers/pr_15923/en/model_doc/reformer#transformers.ReformerTokenizerFast"),d(Vx,"href","/docs/transformers/pr_15923/en/model_doc/rembert#transformers.RemBertTokenizer"),d(zx,"href","/docs/transformers/pr_15923/en/model_doc/rembert#transformers.RemBertTokenizerFast"),d(Wx,"href","/docs/transformers/pr_15923/en/model_doc/retribert#transformers.RetriBertTokenizer"),d(Qx,"href","/docs/transformers/pr_15923/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),d(Hx,"href","/docs/transformers/pr_15923/en/model_doc/roberta#transformers.RobertaTokenizer"),d(Ux,"href","/docs/transformers/pr_15923/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(Jx,"href","/docs/transformers/pr_15923/en/model_doc/roformer#transformers.RoFormerTokenizer"),d(Yx,"href","/docs/transformers/pr_15923/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),d(Kx,"href","/docs/transformers/pr_15923/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),d(Zx,"href","/docs/transformers/pr_15923/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),d(ek,"href","/docs/transformers/pr_15923/en/model_doc/splinter#transformers.SplinterTokenizer"),d(ok,"href","/docs/transformers/pr_15923/en/model_doc/splinter#transformers.SplinterTokenizerFast"),d(rk,"href","/docs/transformers/pr_15923/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),d(tk,"href","/docs/transformers/pr_15923/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),d(ak,"href","/docs/transformers/pr_15923/en/model_doc/mt5#transformers.T5Tokenizer"),d(nk,"href","/docs/transformers/pr_15923/en/model_doc/mt5#transformers.T5TokenizerFast"),d(sk,"href","/docs/transformers/pr_15923/en/model_doc/tapas#transformers.TapasTokenizer"),d(lk,"href","/docs/transformers/pr_15923/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),d(ik,"href","/docs/transformers/pr_15923/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(dk,"href","/docs/transformers/pr_15923/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),d(ck,"href","/docs/transformers/pr_15923/en/model_doc/xglm#transformers.XGLMTokenizer"),d(fk,"href","/docs/transformers/pr_15923/en/model_doc/xglm#transformers.XGLMTokenizerFast"),d(mk,"href","/docs/transformers/pr_15923/en/model_doc/xlm#transformers.XLMTokenizer"),d(gk,"href","/docs/transformers/pr_15923/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),d(hk,"href","/docs/transformers/pr_15923/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),d(pk,"href","/docs/transformers/pr_15923/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),d(_k,"href","/docs/transformers/pr_15923/en/model_doc/xlnet#transformers.XLNetTokenizer"),d(uk,"href","/docs/transformers/pr_15923/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),d(mo,"class","docstring"),d(Ug,"class","docstring"),d(Vo,"class","docstring"),d(Jg,"id","transformers.AutoFeatureExtractor"),d(Jg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Jg,"href","#transformers.AutoFeatureExtractor"),d(qi,"class","relative group"),d(bk,"href","/docs/transformers/pr_15923/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),d(vk,"href","/docs/transformers/pr_15923/en/model_doc/beit#transformers.BeitFeatureExtractor"),d(Tk,"href","/docs/transformers/pr_15923/en/model_doc/clip#transformers.CLIPFeatureExtractor"),d(Fk,"href","/docs/transformers/pr_15923/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(Ck,"href","/docs/transformers/pr_15923/en/model_doc/deit#transformers.DeiTFeatureExtractor"),d(Mk,"href","/docs/transformers/pr_15923/en/model_doc/detr#transformers.DetrFeatureExtractor"),d(Ek,"href","/docs/transformers/pr_15923/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(yk,"href","/docs/transformers/pr_15923/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),d(wk,"href","/docs/transformers/pr_15923/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),d(Ak,"href","/docs/transformers/pr_15923/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),d(Lk,"href","/docs/transformers/pr_15923/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),d(Bk,"href","/docs/transformers/pr_15923/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),d(xk,"href","/docs/transformers/pr_15923/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),d(kk,"href","/docs/transformers/pr_15923/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(Rk,"href","/docs/transformers/pr_15923/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(Sk,"href","/docs/transformers/pr_15923/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(Pk,"href","/docs/transformers/pr_15923/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(xe,"class","docstring"),d(hh,"class","docstring"),d(zo,"class","docstring"),d(ph,"id","transformers.AutoProcessor"),d(ph,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ph,"href","#transformers.AutoProcessor"),d(Gi,"class","relative group"),d($k,"href","/docs/transformers/pr_15923/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),d(Ik,"href","/docs/transformers/pr_15923/en/model_doc/clip#transformers.CLIPProcessor"),d(Dk,"href","/docs/transformers/pr_15923/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),d(jk,"href","/docs/transformers/pr_15923/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),d(Nk,"href","/docs/transformers/pr_15923/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),d(qk,"href","/docs/transformers/pr_15923/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),d(Gk,"href","/docs/transformers/pr_15923/en/model_doc/trocr#transformers.TrOCRProcessor"),d(Ok,"href","/docs/transformers/pr_15923/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),d(Xk,"href","/docs/transformers/pr_15923/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(ke,"class","docstring"),d(yh,"class","docstring"),d(Wo,"class","docstring"),d(wh,"id","transformers.AutoModel"),d(wh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(wh,"href","#transformers.AutoModel"),d(Xi,"class","relative group"),d(qr,"class","docstring"),d(Vk,"href","/docs/transformers/pr_15923/en/model_doc/albert#transformers.AlbertModel"),d(zk,"href","/docs/transformers/pr_15923/en/model_doc/bart#transformers.BartModel"),d(Wk,"href","/docs/transformers/pr_15923/en/model_doc/beit#transformers.BeitModel"),d(Qk,"href","/docs/transformers/pr_15923/en/model_doc/bert#transformers.BertModel"),d(Hk,"href","/docs/transformers/pr_15923/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),d(Uk,"href","/docs/transformers/pr_15923/en/model_doc/big_bird#transformers.BigBirdModel"),d(Jk,"href","/docs/transformers/pr_15923/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),d(Yk,"href","/docs/transformers/pr_15923/en/model_doc/blenderbot#transformers.BlenderbotModel"),d(Kk,"href","/docs/transformers/pr_15923/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),d(Zk,"href","/docs/transformers/pr_15923/en/model_doc/camembert#transformers.CamembertModel"),d(eR,"href","/docs/transformers/pr_15923/en/model_doc/canine#transformers.CanineModel"),d(oR,"href","/docs/transformers/pr_15923/en/model_doc/clip#transformers.CLIPModel"),d(rR,"href","/docs/transformers/pr_15923/en/model_doc/convbert#transformers.ConvBertModel"),d(tR,"href","/docs/transformers/pr_15923/en/model_doc/convnext#transformers.ConvNextModel"),d(aR,"href","/docs/transformers/pr_15923/en/model_doc/ctrl#transformers.CTRLModel"),d(nR,"href","/docs/transformers/pr_15923/en/model_doc/data2vec#transformers.Data2VecAudioModel"),d(sR,"href","/docs/transformers/pr_15923/en/model_doc/data2vec#transformers.Data2VecTextModel"),d(lR,"href","/docs/transformers/pr_15923/en/model_doc/deberta#transformers.DebertaModel"),d(iR,"href","/docs/transformers/pr_15923/en/model_doc/deberta-v2#transformers.DebertaV2Model"),d(dR,"href","/docs/transformers/pr_15923/en/model_doc/deit#transformers.DeiTModel"),d(cR,"href","/docs/transformers/pr_15923/en/model_doc/detr#transformers.DetrModel"),d(fR,"href","/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.DistilBertModel"),d(mR,"href","/docs/transformers/pr_15923/en/model_doc/dpr#transformers.DPRQuestionEncoder"),d(gR,"href","/docs/transformers/pr_15923/en/model_doc/electra#transformers.ElectraModel"),d(hR,"href","/docs/transformers/pr_15923/en/model_doc/flaubert#transformers.FlaubertModel"),d(pR,"href","/docs/transformers/pr_15923/en/model_doc/fnet#transformers.FNetModel"),d(_R,"href","/docs/transformers/pr_15923/en/model_doc/fsmt#transformers.FSMTModel"),d(uR,"href","/docs/transformers/pr_15923/en/model_doc/funnel#transformers.FunnelModel"),d(bR,"href","/docs/transformers/pr_15923/en/model_doc/funnel#transformers.FunnelBaseModel"),d(vR,"href","/docs/transformers/pr_15923/en/model_doc/gpt2#transformers.GPT2Model"),d(TR,"href","/docs/transformers/pr_15923/en/model_doc/gpt_neo#transformers.GPTNeoModel"),d(FR,"href","/docs/transformers/pr_15923/en/model_doc/gptj#transformers.GPTJModel"),d(CR,"href","/docs/transformers/pr_15923/en/model_doc/hubert#transformers.HubertModel"),d(MR,"href","/docs/transformers/pr_15923/en/model_doc/ibert#transformers.IBertModel"),d(ER,"href","/docs/transformers/pr_15923/en/model_doc/imagegpt#transformers.ImageGPTModel"),d(yR,"href","/docs/transformers/pr_15923/en/model_doc/layoutlm#transformers.LayoutLMModel"),d(wR,"href","/docs/transformers/pr_15923/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),d(AR,"href","/docs/transformers/pr_15923/en/model_doc/led#transformers.LEDModel"),d(LR,"href","/docs/transformers/pr_15923/en/model_doc/longformer#transformers.LongformerModel"),d(BR,"href","/docs/transformers/pr_15923/en/model_doc/luke#transformers.LukeModel"),d(xR,"href","/docs/transformers/pr_15923/en/model_doc/lxmert#transformers.LxmertModel"),d(kR,"href","/docs/transformers/pr_15923/en/model_doc/m2m_100#transformers.M2M100Model"),d(RR,"href","/docs/transformers/pr_15923/en/model_doc/marian#transformers.MarianModel"),d(SR,"href","/docs/transformers/pr_15923/en/model_doc/maskformer#transformers.MaskFormerModel"),d(PR,"href","/docs/transformers/pr_15923/en/model_doc/mbart#transformers.MBartModel"),d($R,"href","/docs/transformers/pr_15923/en/model_doc/megatron-bert#transformers.MegatronBertModel"),d(IR,"href","/docs/transformers/pr_15923/en/model_doc/mobilebert#transformers.MobileBertModel"),d(DR,"href","/docs/transformers/pr_15923/en/model_doc/mpnet#transformers.MPNetModel"),d(jR,"href","/docs/transformers/pr_15923/en/model_doc/mt5#transformers.MT5Model"),d(NR,"href","/docs/transformers/pr_15923/en/model_doc/nystromformer#transformers.NystromformerModel"),d(qR,"href","/docs/transformers/pr_15923/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),d(GR,"href","/docs/transformers/pr_15923/en/model_doc/pegasus#transformers.PegasusModel"),d(OR,"href","/docs/transformers/pr_15923/en/model_doc/perceiver#transformers.PerceiverModel"),d(XR,"href","/docs/transformers/pr_15923/en/model_doc/plbart#transformers.PLBartModel"),d(VR,"href","/docs/transformers/pr_15923/en/model_doc/poolformer#transformers.PoolFormerModel"),d(zR,"href","/docs/transformers/pr_15923/en/model_doc/prophetnet#transformers.ProphetNetModel"),d(WR,"href","/docs/transformers/pr_15923/en/model_doc/qdqbert#transformers.QDQBertModel"),d(QR,"href","/docs/transformers/pr_15923/en/model_doc/reformer#transformers.ReformerModel"),d(HR,"href","/docs/transformers/pr_15923/en/model_doc/rembert#transformers.RemBertModel"),d(UR,"href","/docs/transformers/pr_15923/en/model_doc/retribert#transformers.RetriBertModel"),d(JR,"href","/docs/transformers/pr_15923/en/model_doc/roberta#transformers.RobertaModel"),d(YR,"href","/docs/transformers/pr_15923/en/model_doc/roformer#transformers.RoFormerModel"),d(KR,"href","/docs/transformers/pr_15923/en/model_doc/segformer#transformers.SegformerModel"),d(ZR,"href","/docs/transformers/pr_15923/en/model_doc/sew#transformers.SEWModel"),d(eS,"href","/docs/transformers/pr_15923/en/model_doc/sew-d#transformers.SEWDModel"),d(oS,"href","/docs/transformers/pr_15923/en/model_doc/speech_to_text#transformers.Speech2TextModel"),d(rS,"href","/docs/transformers/pr_15923/en/model_doc/splinter#transformers.SplinterModel"),d(tS,"href","/docs/transformers/pr_15923/en/model_doc/squeezebert#transformers.SqueezeBertModel"),d(aS,"href","/docs/transformers/pr_15923/en/model_doc/swin#transformers.SwinModel"),d(nS,"href","/docs/transformers/pr_15923/en/model_doc/t5#transformers.T5Model"),d(sS,"href","/docs/transformers/pr_15923/en/model_doc/tapas#transformers.TapasModel"),d(lS,"href","/docs/transformers/pr_15923/en/model_doc/transfo-xl#transformers.TransfoXLModel"),d(iS,"href","/docs/transformers/pr_15923/en/model_doc/unispeech#transformers.UniSpeechModel"),d(dS,"href","/docs/transformers/pr_15923/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),d(cS,"href","/docs/transformers/pr_15923/en/model_doc/vilt#transformers.ViltModel"),d(fS,"href","/docs/transformers/pr_15923/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),d(mS,"href","/docs/transformers/pr_15923/en/model_doc/visual_bert#transformers.VisualBertModel"),d(gS,"href","/docs/transformers/pr_15923/en/model_doc/vit#transformers.ViTModel"),d(hS,"href","/docs/transformers/pr_15923/en/model_doc/vit_mae#transformers.ViTMAEModel"),d(pS,"href","/docs/transformers/pr_15923/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),d(_S,"href","/docs/transformers/pr_15923/en/model_doc/wavlm#transformers.WavLMModel"),d(uS,"href","/docs/transformers/pr_15923/en/model_doc/xglm#transformers.XGLMModel"),d(bS,"href","/docs/transformers/pr_15923/en/model_doc/xlm#transformers.XLMModel"),d(vS,"href","/docs/transformers/pr_15923/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),d(TS,"href","/docs/transformers/pr_15923/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),d(FS,"href","/docs/transformers/pr_15923/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),d(CS,"href","/docs/transformers/pr_15923/en/model_doc/xlnet#transformers.XLNetModel"),d(MS,"href","/docs/transformers/pr_15923/en/model_doc/yoso#transformers.YosoModel"),d(Re,"class","docstring"),d(Qo,"class","docstring"),d(s_,"id","transformers.AutoModelForPreTraining"),d(s_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(s_,"href","#transformers.AutoModelForPreTraining"),d(Wi,"class","relative group"),d(Gr,"class","docstring"),d(ES,"href","/docs/transformers/pr_15923/en/model_doc/albert#transformers.AlbertForPreTraining"),d(yS,"href","/docs/transformers/pr_15923/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(wS,"href","/docs/transformers/pr_15923/en/model_doc/bert#transformers.BertForPreTraining"),d(AS,"href","/docs/transformers/pr_15923/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),d(LS,"href","/docs/transformers/pr_15923/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(BS,"href","/docs/transformers/pr_15923/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(xS,"href","/docs/transformers/pr_15923/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(kS,"href","/docs/transformers/pr_15923/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(RS,"href","/docs/transformers/pr_15923/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(SS,"href","/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(PS,"href","/docs/transformers/pr_15923/en/model_doc/electra#transformers.ElectraForPreTraining"),d($S,"href","/docs/transformers/pr_15923/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(IS,"href","/docs/transformers/pr_15923/en/model_doc/fnet#transformers.FNetForPreTraining"),d(DS,"href","/docs/transformers/pr_15923/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(jS,"href","/docs/transformers/pr_15923/en/model_doc/funnel#transformers.FunnelForPreTraining"),d(NS,"href","/docs/transformers/pr_15923/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(qS,"href","/docs/transformers/pr_15923/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(GS,"href","/docs/transformers/pr_15923/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(OS,"href","/docs/transformers/pr_15923/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(XS,"href","/docs/transformers/pr_15923/en/model_doc/lxmert#transformers.LxmertForPreTraining"),d(VS,"href","/docs/transformers/pr_15923/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),d(zS,"href","/docs/transformers/pr_15923/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),d(WS,"href","/docs/transformers/pr_15923/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(QS,"href","/docs/transformers/pr_15923/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(HS,"href","/docs/transformers/pr_15923/en/model_doc/retribert#transformers.RetriBertModel"),d(US,"href","/docs/transformers/pr_15923/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(JS,"href","/docs/transformers/pr_15923/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(YS,"href","/docs/transformers/pr_15923/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(KS,"href","/docs/transformers/pr_15923/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(ZS,"href","/docs/transformers/pr_15923/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(eP,"href","/docs/transformers/pr_15923/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),d(oP,"href","/docs/transformers/pr_15923/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),d(rP,"href","/docs/transformers/pr_15923/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),d(tP,"href","/docs/transformers/pr_15923/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),d(aP,"href","/docs/transformers/pr_15923/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),d(nP,"href","/docs/transformers/pr_15923/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(sP,"href","/docs/transformers/pr_15923/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(lP,"href","/docs/transformers/pr_15923/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(iP,"href","/docs/transformers/pr_15923/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(Se,"class","docstring"),d(Ho,"class","docstring"),d(Q_,"id","transformers.AutoModelForCausalLM"),d(Q_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Q_,"href","#transformers.AutoModelForCausalLM"),d(Ui,"class","relative group"),d(Or,"class","docstring"),d(dP,"href","/docs/transformers/pr_15923/en/model_doc/bart#transformers.BartForCausalLM"),d(cP,"href","/docs/transformers/pr_15923/en/model_doc/bert#transformers.BertLMHeadModel"),d(fP,"href","/docs/transformers/pr_15923/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),d(mP,"href","/docs/transformers/pr_15923/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),d(gP,"href","/docs/transformers/pr_15923/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),d(hP,"href","/docs/transformers/pr_15923/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),d(pP,"href","/docs/transformers/pr_15923/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),d(_P,"href","/docs/transformers/pr_15923/en/model_doc/camembert#transformers.CamembertForCausalLM"),d(uP,"href","/docs/transformers/pr_15923/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(bP,"href","/docs/transformers/pr_15923/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),d(vP,"href","/docs/transformers/pr_15923/en/model_doc/electra#transformers.ElectraForCausalLM"),d(TP,"href","/docs/transformers/pr_15923/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(FP,"href","/docs/transformers/pr_15923/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),d(CP,"href","/docs/transformers/pr_15923/en/model_doc/gptj#transformers.GPTJForCausalLM"),d(MP,"href","/docs/transformers/pr_15923/en/model_doc/marian#transformers.MarianForCausalLM"),d(EP,"href","/docs/transformers/pr_15923/en/model_doc/mbart#transformers.MBartForCausalLM"),d(yP,"href","/docs/transformers/pr_15923/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),d(wP,"href","/docs/transformers/pr_15923/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(AP,"href","/docs/transformers/pr_15923/en/model_doc/pegasus#transformers.PegasusForCausalLM"),d(LP,"href","/docs/transformers/pr_15923/en/model_doc/plbart#transformers.PLBartForCausalLM"),d(BP,"href","/docs/transformers/pr_15923/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),d(xP,"href","/docs/transformers/pr_15923/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),d(kP,"href","/docs/transformers/pr_15923/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),d(RP,"href","/docs/transformers/pr_15923/en/model_doc/rembert#transformers.RemBertForCausalLM"),d(SP,"href","/docs/transformers/pr_15923/en/model_doc/roberta#transformers.RobertaForCausalLM"),d(PP,"href","/docs/transformers/pr_15923/en/model_doc/roformer#transformers.RoFormerForCausalLM"),d($P,"href","/docs/transformers/pr_15923/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),d(IP,"href","/docs/transformers/pr_15923/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(DP,"href","/docs/transformers/pr_15923/en/model_doc/trocr#transformers.TrOCRForCausalLM"),d(jP,"href","/docs/transformers/pr_15923/en/model_doc/xglm#transformers.XGLMForCausalLM"),d(NP,"href","/docs/transformers/pr_15923/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(qP,"href","/docs/transformers/pr_15923/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),d(GP,"href","/docs/transformers/pr_15923/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),d(OP,"href","/docs/transformers/pr_15923/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),d(XP,"href","/docs/transformers/pr_15923/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(Pe,"class","docstring"),d(Uo,"class","docstring"),d(xu,"id","transformers.AutoModelForMaskedLM"),d(xu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(xu,"href","#transformers.AutoModelForMaskedLM"),d(Ki,"class","relative group"),d(Xr,"class","docstring"),d(VP,"href","/docs/transformers/pr_15923/en/model_doc/albert#transformers.AlbertForMaskedLM"),d(zP,"href","/docs/transformers/pr_15923/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(WP,"href","/docs/transformers/pr_15923/en/model_doc/bert#transformers.BertForMaskedLM"),d(QP,"href","/docs/transformers/pr_15923/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),d(HP,"href","/docs/transformers/pr_15923/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(UP,"href","/docs/transformers/pr_15923/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),d(JP,"href","/docs/transformers/pr_15923/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(YP,"href","/docs/transformers/pr_15923/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(KP,"href","/docs/transformers/pr_15923/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(ZP,"href","/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(e$,"href","/docs/transformers/pr_15923/en/model_doc/electra#transformers.ElectraForMaskedLM"),d(o$,"href","/docs/transformers/pr_15923/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(r$,"href","/docs/transformers/pr_15923/en/model_doc/fnet#transformers.FNetForMaskedLM"),d(t$,"href","/docs/transformers/pr_15923/en/model_doc/funnel#transformers.FunnelForMaskedLM"),d(a$,"href","/docs/transformers/pr_15923/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(n$,"href","/docs/transformers/pr_15923/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(s$,"href","/docs/transformers/pr_15923/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(l$,"href","/docs/transformers/pr_15923/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(i$,"href","/docs/transformers/pr_15923/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),d(d$,"href","/docs/transformers/pr_15923/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),d(c$,"href","/docs/transformers/pr_15923/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(f$,"href","/docs/transformers/pr_15923/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),d(m$,"href","/docs/transformers/pr_15923/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),d(g$,"href","/docs/transformers/pr_15923/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),d(h$,"href","/docs/transformers/pr_15923/en/model_doc/reformer#transformers.ReformerForMaskedLM"),d(p$,"href","/docs/transformers/pr_15923/en/model_doc/rembert#transformers.RemBertForMaskedLM"),d(_$,"href","/docs/transformers/pr_15923/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(u$,"href","/docs/transformers/pr_15923/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),d(b$,"href","/docs/transformers/pr_15923/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(v$,"href","/docs/transformers/pr_15923/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(T$,"href","/docs/transformers/pr_15923/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(F$,"href","/docs/transformers/pr_15923/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(C$,"href","/docs/transformers/pr_15923/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(M$,"href","/docs/transformers/pr_15923/en/model_doc/yoso#transformers.YosoForMaskedLM"),d($e,"class","docstring"),d(Jo,"class","docstring"),d(g2,"id","transformers.AutoModelForSeq2SeqLM"),d(g2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(g2,"href","#transformers.AutoModelForSeq2SeqLM"),d(od,"class","relative group"),d(Vr,"class","docstring"),d(E$,"href","/docs/transformers/pr_15923/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(y$,"href","/docs/transformers/pr_15923/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),d(w$,"href","/docs/transformers/pr_15923/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),d(A$,"href","/docs/transformers/pr_15923/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),d(L$,"href","/docs/transformers/pr_15923/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),d(B$,"href","/docs/transformers/pr_15923/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(x$,"href","/docs/transformers/pr_15923/en/model_doc/led#transformers.LEDForConditionalGeneration"),d(k$,"href","/docs/transformers/pr_15923/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),d(R$,"href","/docs/transformers/pr_15923/en/model_doc/marian#transformers.MarianMTModel"),d(S$,"href","/docs/transformers/pr_15923/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(P$,"href","/docs/transformers/pr_15923/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),d($$,"href","/docs/transformers/pr_15923/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),d(I$,"href","/docs/transformers/pr_15923/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),d(D$,"href","/docs/transformers/pr_15923/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),d(j$,"href","/docs/transformers/pr_15923/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(N$,"href","/docs/transformers/pr_15923/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),d(Ie,"class","docstring"),d(Yo,"class","docstring"),d(k2,"id","transformers.AutoModelForSequenceClassification"),d(k2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(k2,"href","#transformers.AutoModelForSequenceClassification"),d(ad,"class","relative group"),d(zr,"class","docstring"),d(q$,"href","/docs/transformers/pr_15923/en/model_doc/albert#transformers.AlbertForSequenceClassification"),d(G$,"href","/docs/transformers/pr_15923/en/model_doc/bart#transformers.BartForSequenceClassification"),d(O$,"href","/docs/transformers/pr_15923/en/model_doc/bert#transformers.BertForSequenceClassification"),d(X$,"href","/docs/transformers/pr_15923/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),d(V$,"href","/docs/transformers/pr_15923/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),d(z$,"href","/docs/transformers/pr_15923/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),d(W$,"href","/docs/transformers/pr_15923/en/model_doc/canine#transformers.CanineForSequenceClassification"),d(Q$,"href","/docs/transformers/pr_15923/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),d(H$,"href","/docs/transformers/pr_15923/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),d(U$,"href","/docs/transformers/pr_15923/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),d(J$,"href","/docs/transformers/pr_15923/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),d(Y$,"href","/docs/transformers/pr_15923/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),d(K$,"href","/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),d(Z$,"href","/docs/transformers/pr_15923/en/model_doc/electra#transformers.ElectraForSequenceClassification"),d(eI,"href","/docs/transformers/pr_15923/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),d(oI,"href","/docs/transformers/pr_15923/en/model_doc/fnet#transformers.FNetForSequenceClassification"),d(rI,"href","/docs/transformers/pr_15923/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),d(tI,"href","/docs/transformers/pr_15923/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),d(aI,"href","/docs/transformers/pr_15923/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),d(nI,"href","/docs/transformers/pr_15923/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),d(sI,"href","/docs/transformers/pr_15923/en/model_doc/ibert#transformers.IBertForSequenceClassification"),d(lI,"href","/docs/transformers/pr_15923/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),d(iI,"href","/docs/transformers/pr_15923/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),d(dI,"href","/docs/transformers/pr_15923/en/model_doc/led#transformers.LEDForSequenceClassification"),d(cI,"href","/docs/transformers/pr_15923/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),d(fI,"href","/docs/transformers/pr_15923/en/model_doc/mbart#transformers.MBartForSequenceClassification"),d(mI,"href","/docs/transformers/pr_15923/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),d(gI,"href","/docs/transformers/pr_15923/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),d(hI,"href","/docs/transformers/pr_15923/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),d(pI,"href","/docs/transformers/pr_15923/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),d(_I,"href","/docs/transformers/pr_15923/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),d(uI,"href","/docs/transformers/pr_15923/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),d(bI,"href","/docs/transformers/pr_15923/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),d(vI,"href","/docs/transformers/pr_15923/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),d(TI,"href","/docs/transformers/pr_15923/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),d(FI,"href","/docs/transformers/pr_15923/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),d(CI,"href","/docs/transformers/pr_15923/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),d(MI,"href","/docs/transformers/pr_15923/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),d(EI,"href","/docs/transformers/pr_15923/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),d(yI,"href","/docs/transformers/pr_15923/en/model_doc/tapas#transformers.TapasForSequenceClassification"),d(wI,"href","/docs/transformers/pr_15923/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),d(AI,"href","/docs/transformers/pr_15923/en/model_doc/xlm#transformers.XLMForSequenceClassification"),d(LI,"href","/docs/transformers/pr_15923/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),d(BI,"href","/docs/transformers/pr_15923/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),d(xI,"href","/docs/transformers/pr_15923/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),d(kI,"href","/docs/transformers/pr_15923/en/model_doc/yoso#transformers.YosoForSequenceClassification"),d(De,"class","docstring"),d(Ko,"class","docstring"),d(y1,"id","transformers.AutoModelForMultipleChoice"),d(y1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(y1,"href","#transformers.AutoModelForMultipleChoice"),d(ld,"class","relative group"),d(Wr,"class","docstring"),d(RI,"href","/docs/transformers/pr_15923/en/model_doc/albert#transformers.AlbertForMultipleChoice"),d(SI,"href","/docs/transformers/pr_15923/en/model_doc/bert#transformers.BertForMultipleChoice"),d(PI,"href","/docs/transformers/pr_15923/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),d($I,"href","/docs/transformers/pr_15923/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),d(II,"href","/docs/transformers/pr_15923/en/model_doc/canine#transformers.CanineForMultipleChoice"),d(DI,"href","/docs/transformers/pr_15923/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),d(jI,"href","/docs/transformers/pr_15923/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),d(NI,"href","/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),d(qI,"href","/docs/transformers/pr_15923/en/model_doc/electra#transformers.ElectraForMultipleChoice"),d(GI,"href","/docs/transformers/pr_15923/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),d(OI,"href","/docs/transformers/pr_15923/en/model_doc/fnet#transformers.FNetForMultipleChoice"),d(XI,"href","/docs/transformers/pr_15923/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),d(VI,"href","/docs/transformers/pr_15923/en/model_doc/ibert#transformers.IBertForMultipleChoice"),d(zI,"href","/docs/transformers/pr_15923/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),d(WI,"href","/docs/transformers/pr_15923/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),d(QI,"href","/docs/transformers/pr_15923/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),d(HI,"href","/docs/transformers/pr_15923/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),d(UI,"href","/docs/transformers/pr_15923/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),d(JI,"href","/docs/transformers/pr_15923/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),d(YI,"href","/docs/transformers/pr_15923/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),d(KI,"href","/docs/transformers/pr_15923/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),d(ZI,"href","/docs/transformers/pr_15923/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),d(eD,"href","/docs/transformers/pr_15923/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),d(oD,"href","/docs/transformers/pr_15923/en/model_doc/xlm#transformers.XLMForMultipleChoice"),d(rD,"href","/docs/transformers/pr_15923/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),d(tD,"href","/docs/transformers/pr_15923/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),d(aD,"href","/docs/transformers/pr_15923/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),d(nD,"href","/docs/transformers/pr_15923/en/model_doc/yoso#transformers.YosoForMultipleChoice"),d(je,"class","docstring"),d(Zo,"class","docstring"),d(ob,"id","transformers.AutoModelForNextSentencePrediction"),d(ob,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ob,"href","#transformers.AutoModelForNextSentencePrediction"),d(cd,"class","relative group"),d(Qr,"class","docstring"),d(sD,"href","/docs/transformers/pr_15923/en/model_doc/bert#transformers.BertForNextSentencePrediction"),d(lD,"href","/docs/transformers/pr_15923/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),d(iD,"href","/docs/transformers/pr_15923/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),d(dD,"href","/docs/transformers/pr_15923/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),d(cD,"href","/docs/transformers/pr_15923/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),d(Ne,"class","docstring"),d(er,"class","docstring"),d(ib,"id","transformers.AutoModelForTokenClassification"),d(ib,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ib,"href","#transformers.AutoModelForTokenClassification"),d(gd,"class","relative group"),d(Hr,"class","docstring"),d(fD,"href","/docs/transformers/pr_15923/en/model_doc/albert#transformers.AlbertForTokenClassification"),d(mD,"href","/docs/transformers/pr_15923/en/model_doc/bert#transformers.BertForTokenClassification"),d(gD,"href","/docs/transformers/pr_15923/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),d(hD,"href","/docs/transformers/pr_15923/en/model_doc/camembert#transformers.CamembertForTokenClassification"),d(pD,"href","/docs/transformers/pr_15923/en/model_doc/canine#transformers.CanineForTokenClassification"),d(_D,"href","/docs/transformers/pr_15923/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),d(uD,"href","/docs/transformers/pr_15923/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),d(bD,"href","/docs/transformers/pr_15923/en/model_doc/deberta#transformers.DebertaForTokenClassification"),d(vD,"href","/docs/transformers/pr_15923/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),d(TD,"href","/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),d(FD,"href","/docs/transformers/pr_15923/en/model_doc/electra#transformers.ElectraForTokenClassification"),d(CD,"href","/docs/transformers/pr_15923/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),d(MD,"href","/docs/transformers/pr_15923/en/model_doc/fnet#transformers.FNetForTokenClassification"),d(ED,"href","/docs/transformers/pr_15923/en/model_doc/funnel#transformers.FunnelForTokenClassification"),d(yD,"href","/docs/transformers/pr_15923/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),d(wD,"href","/docs/transformers/pr_15923/en/model_doc/ibert#transformers.IBertForTokenClassification"),d(AD,"href","/docs/transformers/pr_15923/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),d(LD,"href","/docs/transformers/pr_15923/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),d(BD,"href","/docs/transformers/pr_15923/en/model_doc/longformer#transformers.LongformerForTokenClassification"),d(xD,"href","/docs/transformers/pr_15923/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),d(kD,"href","/docs/transformers/pr_15923/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),d(RD,"href","/docs/transformers/pr_15923/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),d(SD,"href","/docs/transformers/pr_15923/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),d(PD,"href","/docs/transformers/pr_15923/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),d($D,"href","/docs/transformers/pr_15923/en/model_doc/rembert#transformers.RemBertForTokenClassification"),d(ID,"href","/docs/transformers/pr_15923/en/model_doc/roberta#transformers.RobertaForTokenClassification"),d(DD,"href","/docs/transformers/pr_15923/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),d(jD,"href","/docs/transformers/pr_15923/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),d(ND,"href","/docs/transformers/pr_15923/en/model_doc/xlm#transformers.XLMForTokenClassification"),d(qD,"href","/docs/transformers/pr_15923/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),d(GD,"href","/docs/transformers/pr_15923/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),d(OD,"href","/docs/transformers/pr_15923/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),d(XD,"href","/docs/transformers/pr_15923/en/model_doc/yoso#transformers.YosoForTokenClassification"),d(qe,"class","docstring"),d(or,"class","docstring"),d(Xb,"id","transformers.AutoModelForQuestionAnswering"),d(Xb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Xb,"href","#transformers.AutoModelForQuestionAnswering"),d(_d,"class","relative group"),d(Ur,"class","docstring"),d(VD,"href","/docs/transformers/pr_15923/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),d(zD,"href","/docs/transformers/pr_15923/en/model_doc/bart#transformers.BartForQuestionAnswering"),d(WD,"href","/docs/transformers/pr_15923/en/model_doc/bert#transformers.BertForQuestionAnswering"),d(QD,"href","/docs/transformers/pr_15923/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),d(HD,"href","/docs/transformers/pr_15923/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),d(UD,"href","/docs/transformers/pr_15923/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),d(JD,"href","/docs/transformers/pr_15923/en/model_doc/canine#transformers.CanineForQuestionAnswering"),d(YD,"href","/docs/transformers/pr_15923/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),d(KD,"href","/docs/transformers/pr_15923/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),d(ZD,"href","/docs/transformers/pr_15923/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),d(ej,"href","/docs/transformers/pr_15923/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),d(oj,"href","/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),d(rj,"href","/docs/transformers/pr_15923/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),d(tj,"href","/docs/transformers/pr_15923/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),d(aj,"href","/docs/transformers/pr_15923/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),d(nj,"href","/docs/transformers/pr_15923/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),d(sj,"href","/docs/transformers/pr_15923/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),d(lj,"href","/docs/transformers/pr_15923/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),d(ij,"href","/docs/transformers/pr_15923/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),d(dj,"href","/docs/transformers/pr_15923/en/model_doc/led#transformers.LEDForQuestionAnswering"),d(cj,"href","/docs/transformers/pr_15923/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),d(fj,"href","/docs/transformers/pr_15923/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),d(mj,"href","/docs/transformers/pr_15923/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),d(gj,"href","/docs/transformers/pr_15923/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),d(hj,"href","/docs/transformers/pr_15923/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),d(pj,"href","/docs/transformers/pr_15923/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),d(_j,"href","/docs/transformers/pr_15923/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),d(uj,"href","/docs/transformers/pr_15923/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),d(bj,"href","/docs/transformers/pr_15923/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),d(vj,"href","/docs/transformers/pr_15923/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),d(Tj,"href","/docs/transformers/pr_15923/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),d(Fj,"href","/docs/transformers/pr_15923/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),d(Cj,"href","/docs/transformers/pr_15923/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),d(Mj,"href","/docs/transformers/pr_15923/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),d(Ej,"href","/docs/transformers/pr_15923/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),d(yj,"href","/docs/transformers/pr_15923/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),d(wj,"href","/docs/transformers/pr_15923/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),d(Aj,"href","/docs/transformers/pr_15923/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),d(Lj,"href","/docs/transformers/pr_15923/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),d(Ge,"class","docstring"),d(rr,"class","docstring"),d(x3,"id","transformers.AutoModelForTableQuestionAnswering"),d(x3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(x3,"href","#transformers.AutoModelForTableQuestionAnswering"),d(vd,"class","relative group"),d(Jr,"class","docstring"),d(Bj,"href","/docs/transformers/pr_15923/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),d(Oe,"class","docstring"),d(tr,"class","docstring"),d(S3,"id","transformers.AutoModelForImageClassification"),d(S3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(S3,"href","#transformers.AutoModelForImageClassification"),d(Cd,"class","relative group"),d(Yr,"class","docstring"),d(xj,"href","/docs/transformers/pr_15923/en/model_doc/beit#transformers.BeitForImageClassification"),d(kj,"href","/docs/transformers/pr_15923/en/model_doc/convnext#transformers.ConvNextForImageClassification"),d(Rj,"href","/docs/transformers/pr_15923/en/model_doc/deit#transformers.DeiTForImageClassification"),d(Sj,"href","/docs/transformers/pr_15923/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),d(Pj,"href","/docs/transformers/pr_15923/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),d($j,"href","/docs/transformers/pr_15923/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),d(Ij,"href","/docs/transformers/pr_15923/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),d(Dj,"href","/docs/transformers/pr_15923/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),d(jj,"href","/docs/transformers/pr_15923/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),d(Nj,"href","/docs/transformers/pr_15923/en/model_doc/segformer#transformers.SegformerForImageClassification"),d(qj,"href","/docs/transformers/pr_15923/en/model_doc/swin#transformers.SwinForImageClassification"),d(Gj,"href","/docs/transformers/pr_15923/en/model_doc/vit#transformers.ViTForImageClassification"),d(Xe,"class","docstring"),d(ar,"class","docstring"),d(O3,"id","transformers.AutoModelForVision2Seq"),d(O3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(O3,"href","#transformers.AutoModelForVision2Seq"),d(yd,"class","relative group"),d(Kr,"class","docstring"),d(Oj,"href","/docs/transformers/pr_15923/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),d(Ve,"class","docstring"),d(nr,"class","docstring"),d(z3,"id","transformers.AutoModelForAudioClassification"),d(z3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(z3,"href","#transformers.AutoModelForAudioClassification"),d(Ld,"class","relative group"),d(Zr,"class","docstring"),d(Xj,"href","/docs/transformers/pr_15923/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),d(Vj,"href","/docs/transformers/pr_15923/en/model_doc/hubert#transformers.HubertForSequenceClassification"),d(zj,"href","/docs/transformers/pr_15923/en/model_doc/sew#transformers.SEWForSequenceClassification"),d(Wj,"href","/docs/transformers/pr_15923/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),d(Qj,"href","/docs/transformers/pr_15923/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),d(Hj,"href","/docs/transformers/pr_15923/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),d(Uj,"href","/docs/transformers/pr_15923/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),d(Jj,"href","/docs/transformers/pr_15923/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),d(ze,"class","docstring"),d(sr,"class","docstring"),d(o5,"id","transformers.AutoModelForAudioFrameClassification"),d(o5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(o5,"href","#transformers.AutoModelForAudioFrameClassification"),d(kd,"class","relative group"),d(et,"class","docstring"),d(Yj,"href","/docs/transformers/pr_15923/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),d(Kj,"href","/docs/transformers/pr_15923/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),d(Zj,"href","/docs/transformers/pr_15923/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),d(eN,"href","/docs/transformers/pr_15923/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),d(We,"class","docstring"),d(lr,"class","docstring"),d(l5,"id","transformers.AutoModelForCTC"),d(l5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(l5,"href","#transformers.AutoModelForCTC"),d(Pd,"class","relative group"),d(ot,"class","docstring"),d(oN,"href","/docs/transformers/pr_15923/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),d(rN,"href","/docs/transformers/pr_15923/en/model_doc/hubert#transformers.HubertForCTC"),d(tN,"href","/docs/transformers/pr_15923/en/model_doc/sew#transformers.SEWForCTC"),d(aN,"href","/docs/transformers/pr_15923/en/model_doc/sew-d#transformers.SEWDForCTC"),d(nN,"href","/docs/transformers/pr_15923/en/model_doc/unispeech#transformers.UniSpeechForCTC"),d(sN,"href","/docs/transformers/pr_15923/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),d(lN,"href","/docs/transformers/pr_15923/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),d(iN,"href","/docs/transformers/pr_15923/en/model_doc/wavlm#transformers.WavLMForCTC"),d(Qe,"class","docstring"),d(ir,"class","docstring"),d(u5,"id","transformers.AutoModelForSpeechSeq2Seq"),d(u5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(u5,"href","#transformers.AutoModelForSpeechSeq2Seq"),d(Dd,"class","relative group"),d(rt,"class","docstring"),d(dN,"href","/docs/transformers/pr_15923/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),d(cN,"href","/docs/transformers/pr_15923/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),d(He,"class","docstring"),d(dr,"class","docstring"),d(F5,"id","transformers.AutoModelForAudioXVector"),d(F5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(F5,"href","#transformers.AutoModelForAudioXVector"),d(qd,"class","relative group"),d(tt,"class","docstring"),d(fN,"href","/docs/transformers/pr_15923/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),d(mN,"href","/docs/transformers/pr_15923/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),d(gN,"href","/docs/transformers/pr_15923/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),d(hN,"href","/docs/transformers/pr_15923/en/model_doc/wavlm#transformers.WavLMForXVector"),d(Ue,"class","docstring"),d(cr,"class","docstring"),d(A5,"id","transformers.AutoModelForMaskedImageModeling"),d(A5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(A5,"href","#transformers.AutoModelForMaskedImageModeling"),d(Xd,"class","relative group"),d(at,"class","docstring"),d(pN,"href","/docs/transformers/pr_15923/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),d(_N,"href","/docs/transformers/pr_15923/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),d(uN,"href","/docs/transformers/pr_15923/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),d(Je,"class","docstring"),d(fr,"class","docstring"),d(R5,"id","transformers.AutoModelForObjectDetection"),d(R5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(R5,"href","#transformers.AutoModelForObjectDetection"),d(Qd,"class","relative group"),d(nt,"class","docstring"),d(bN,"href","/docs/transformers/pr_15923/en/model_doc/detr#transformers.DetrForObjectDetection"),d(Ye,"class","docstring"),d(mr,"class","docstring"),d($5,"id","transformers.AutoModelForImageSegmentation"),d($5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d($5,"href","#transformers.AutoModelForImageSegmentation"),d(Jd,"class","relative group"),d(st,"class","docstring"),d(vN,"href","/docs/transformers/pr_15923/en/model_doc/detr#transformers.DetrForSegmentation"),d(Ke,"class","docstring"),d(gr,"class","docstring"),d(j5,"id","transformers.AutoModelForSemanticSegmentation"),d(j5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(j5,"href","#transformers.AutoModelForSemanticSegmentation"),d(Zd,"class","relative group"),d(lt,"class","docstring"),d(TN,"href","/docs/transformers/pr_15923/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),d(FN,"href","/docs/transformers/pr_15923/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),d(Ze,"class","docstring"),d(hr,"class","docstring"),d(O5,"id","transformers.TFAutoModel"),d(O5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(O5,"href","#transformers.TFAutoModel"),d(rc,"class","relative group"),d(it,"class","docstring"),d(CN,"href","/docs/transformers/pr_15923/en/model_doc/albert#transformers.TFAlbertModel"),d(MN,"href","/docs/transformers/pr_15923/en/model_doc/bart#transformers.TFBartModel"),d(EN,"href","/docs/transformers/pr_15923/en/model_doc/bert#transformers.TFBertModel"),d(yN,"href","/docs/transformers/pr_15923/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),d(wN,"href","/docs/transformers/pr_15923/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),d(AN,"href","/docs/transformers/pr_15923/en/model_doc/camembert#transformers.TFCamembertModel"),d(LN,"href","/docs/transformers/pr_15923/en/model_doc/clip#transformers.TFCLIPModel"),d(BN,"href","/docs/transformers/pr_15923/en/model_doc/convbert#transformers.TFConvBertModel"),d(xN,"href","/docs/transformers/pr_15923/en/model_doc/convnext#transformers.TFConvNextModel"),d(kN,"href","/docs/transformers/pr_15923/en/model_doc/ctrl#transformers.TFCTRLModel"),d(RN,"href","/docs/transformers/pr_15923/en/model_doc/deberta#transformers.TFDebertaModel"),d(SN,"href","/docs/transformers/pr_15923/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),d(PN,"href","/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.TFDistilBertModel"),d($N,"href","/docs/transformers/pr_15923/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),d(IN,"href","/docs/transformers/pr_15923/en/model_doc/electra#transformers.TFElectraModel"),d(DN,"href","/docs/transformers/pr_15923/en/model_doc/flaubert#transformers.TFFlaubertModel"),d(jN,"href","/docs/transformers/pr_15923/en/model_doc/funnel#transformers.TFFunnelModel"),d(NN,"href","/docs/transformers/pr_15923/en/model_doc/funnel#transformers.TFFunnelBaseModel"),d(qN,"href","/docs/transformers/pr_15923/en/model_doc/gpt2#transformers.TFGPT2Model"),d(GN,"href","/docs/transformers/pr_15923/en/model_doc/hubert#transformers.TFHubertModel"),d(ON,"href","/docs/transformers/pr_15923/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),d(XN,"href","/docs/transformers/pr_15923/en/model_doc/led#transformers.TFLEDModel"),d(VN,"href","/docs/transformers/pr_15923/en/model_doc/longformer#transformers.TFLongformerModel"),d(zN,"href","/docs/transformers/pr_15923/en/model_doc/lxmert#transformers.TFLxmertModel"),d(WN,"href","/docs/transformers/pr_15923/en/model_doc/marian#transformers.TFMarianModel"),d(QN,"href","/docs/transformers/pr_15923/en/model_doc/mbart#transformers.TFMBartModel"),d(HN,"href","/docs/transformers/pr_15923/en/model_doc/mobilebert#transformers.TFMobileBertModel"),d(UN,"href","/docs/transformers/pr_15923/en/model_doc/mpnet#transformers.TFMPNetModel"),d(JN,"href","/docs/transformers/pr_15923/en/model_doc/mt5#transformers.TFMT5Model"),d(YN,"href","/docs/transformers/pr_15923/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),d(KN,"href","/docs/transformers/pr_15923/en/model_doc/pegasus#transformers.TFPegasusModel"),d(ZN,"href","/docs/transformers/pr_15923/en/model_doc/rembert#transformers.TFRemBertModel"),d(eq,"href","/docs/transformers/pr_15923/en/model_doc/roberta#transformers.TFRobertaModel"),d(oq,"href","/docs/transformers/pr_15923/en/model_doc/roformer#transformers.TFRoFormerModel"),d(rq,"href","/docs/transformers/pr_15923/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),d(tq,"href","/docs/transformers/pr_15923/en/model_doc/t5#transformers.TFT5Model"),d(aq,"href","/docs/transformers/pr_15923/en/model_doc/tapas#transformers.TFTapasModel"),d(nq,"href","/docs/transformers/pr_15923/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),d(sq,"href","/docs/transformers/pr_15923/en/model_doc/vit#transformers.TFViTModel"),d(lq,"href","/docs/transformers/pr_15923/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),d(iq,"href","/docs/transformers/pr_15923/en/model_doc/xlm#transformers.TFXLMModel"),d(dq,"href","/docs/transformers/pr_15923/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),d(cq,"href","/docs/transformers/pr_15923/en/model_doc/xlnet#transformers.TFXLNetModel"),d(go,"class","docstring"),d(pr,"class","docstring"),d(xv,"id","transformers.TFAutoModelForPreTraining"),d(xv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(xv,"href","#transformers.TFAutoModelForPreTraining"),d(nc,"class","relative group"),d(dt,"class","docstring"),d(fq,"href","/docs/transformers/pr_15923/en/model_doc/albert#transformers.TFAlbertForPreTraining"),d(mq,"href","/docs/transformers/pr_15923/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(gq,"href","/docs/transformers/pr_15923/en/model_doc/bert#transformers.TFBertForPreTraining"),d(hq,"href","/docs/transformers/pr_15923/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(pq,"href","/docs/transformers/pr_15923/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(_q,"href","/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(uq,"href","/docs/transformers/pr_15923/en/model_doc/electra#transformers.TFElectraForPreTraining"),d(bq,"href","/docs/transformers/pr_15923/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(vq,"href","/docs/transformers/pr_15923/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),d(Tq,"href","/docs/transformers/pr_15923/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(Fq,"href","/docs/transformers/pr_15923/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(Cq,"href","/docs/transformers/pr_15923/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),d(Mq,"href","/docs/transformers/pr_15923/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),d(Eq,"href","/docs/transformers/pr_15923/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(yq,"href","/docs/transformers/pr_15923/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(wq,"href","/docs/transformers/pr_15923/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(Aq,"href","/docs/transformers/pr_15923/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(Lq,"href","/docs/transformers/pr_15923/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(Bq,"href","/docs/transformers/pr_15923/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(xq,"href","/docs/transformers/pr_15923/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(kq,"href","/docs/transformers/pr_15923/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(Rq,"href","/docs/transformers/pr_15923/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(ho,"class","docstring"),d(_r,"class","docstring"),d(Zv,"id","transformers.TFAutoModelForCausalLM"),d(Zv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Zv,"href","#transformers.TFAutoModelForCausalLM"),d(ic,"class","relative group"),d(ct,"class","docstring"),d(Sq,"href","/docs/transformers/pr_15923/en/model_doc/bert#transformers.TFBertLMHeadModel"),d(Pq,"href","/docs/transformers/pr_15923/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d($q,"href","/docs/transformers/pr_15923/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(Iq,"href","/docs/transformers/pr_15923/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(Dq,"href","/docs/transformers/pr_15923/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),d(jq,"href","/docs/transformers/pr_15923/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),d(Nq,"href","/docs/transformers/pr_15923/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),d(qq,"href","/docs/transformers/pr_15923/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(Gq,"href","/docs/transformers/pr_15923/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(Oq,"href","/docs/transformers/pr_15923/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(po,"class","docstring"),d(ur,"class","docstring"),d(cT,"id","transformers.TFAutoModelForImageClassification"),d(cT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(cT,"href","#transformers.TFAutoModelForImageClassification"),d(fc,"class","relative group"),d(ft,"class","docstring"),d(Xq,"href","/docs/transformers/pr_15923/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),d(Vq,"href","/docs/transformers/pr_15923/en/model_doc/vit#transformers.TFViTForImageClassification"),d(_o,"class","docstring"),d(br,"class","docstring"),d(gT,"id","transformers.TFAutoModelForMaskedLM"),d(gT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(gT,"href","#transformers.TFAutoModelForMaskedLM"),d(hc,"class","relative group"),d(mt,"class","docstring"),d(zq,"href","/docs/transformers/pr_15923/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),d(Wq,"href","/docs/transformers/pr_15923/en/model_doc/bert#transformers.TFBertForMaskedLM"),d(Qq,"href","/docs/transformers/pr_15923/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(Hq,"href","/docs/transformers/pr_15923/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),d(Uq,"href","/docs/transformers/pr_15923/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),d(Jq,"href","/docs/transformers/pr_15923/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),d(Yq,"href","/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(Kq,"href","/docs/transformers/pr_15923/en/model_doc/electra#transformers.TFElectraForMaskedLM"),d(Zq,"href","/docs/transformers/pr_15923/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(eG,"href","/docs/transformers/pr_15923/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),d(oG,"href","/docs/transformers/pr_15923/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(rG,"href","/docs/transformers/pr_15923/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),d(tG,"href","/docs/transformers/pr_15923/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),d(aG,"href","/docs/transformers/pr_15923/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(nG,"href","/docs/transformers/pr_15923/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),d(sG,"href","/docs/transformers/pr_15923/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(lG,"href","/docs/transformers/pr_15923/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),d(iG,"href","/docs/transformers/pr_15923/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(dG,"href","/docs/transformers/pr_15923/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(cG,"href","/docs/transformers/pr_15923/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(uo,"class","docstring"),d(vr,"class","docstring"),d(PT,"id","transformers.TFAutoModelForSeq2SeqLM"),d(PT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(PT,"href","#transformers.TFAutoModelForSeq2SeqLM"),d(uc,"class","relative group"),d(gt,"class","docstring"),d(fG,"href","/docs/transformers/pr_15923/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(mG,"href","/docs/transformers/pr_15923/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),d(gG,"href","/docs/transformers/pr_15923/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),d(hG,"href","/docs/transformers/pr_15923/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),d(pG,"href","/docs/transformers/pr_15923/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),d(_G,"href","/docs/transformers/pr_15923/en/model_doc/marian#transformers.TFMarianMTModel"),d(uG,"href","/docs/transformers/pr_15923/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),d(bG,"href","/docs/transformers/pr_15923/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),d(vG,"href","/docs/transformers/pr_15923/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),d(TG,"href","/docs/transformers/pr_15923/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(bo,"class","docstring"),d(Tr,"class","docstring"),d(zT,"id","transformers.TFAutoModelForSequenceClassification"),d(zT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(zT,"href","#transformers.TFAutoModelForSequenceClassification"),d(Tc,"class","relative group"),d(ht,"class","docstring"),d(FG,"href","/docs/transformers/pr_15923/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),d(CG,"href","/docs/transformers/pr_15923/en/model_doc/bert#transformers.TFBertForSequenceClassification"),d(MG,"href","/docs/transformers/pr_15923/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),d(EG,"href","/docs/transformers/pr_15923/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),d(yG,"href","/docs/transformers/pr_15923/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),d(wG,"href","/docs/transformers/pr_15923/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),d(AG,"href","/docs/transformers/pr_15923/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),d(LG,"href","/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),d(BG,"href","/docs/transformers/pr_15923/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),d(xG,"href","/docs/transformers/pr_15923/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),d(kG,"href","/docs/transformers/pr_15923/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),d(RG,"href","/docs/transformers/pr_15923/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),d(SG,"href","/docs/transformers/pr_15923/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),d(PG,"href","/docs/transformers/pr_15923/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),d($G,"href","/docs/transformers/pr_15923/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),d(IG,"href","/docs/transformers/pr_15923/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),d(DG,"href","/docs/transformers/pr_15923/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),d(jG,"href","/docs/transformers/pr_15923/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),d(NG,"href","/docs/transformers/pr_15923/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),d(qG,"href","/docs/transformers/pr_15923/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),d(GG,"href","/docs/transformers/pr_15923/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),d(OG,"href","/docs/transformers/pr_15923/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),d(XG,"href","/docs/transformers/pr_15923/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),d(VG,"href","/docs/transformers/pr_15923/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),d(zG,"href","/docs/transformers/pr_15923/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),d(vo,"class","docstring"),d(Fr,"class","docstring"),d(uF,"id","transformers.TFAutoModelForMultipleChoice"),d(uF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(uF,"href","#transformers.TFAutoModelForMultipleChoice"),d(Mc,"class","relative group"),d(pt,"class","docstring"),d(WG,"href","/docs/transformers/pr_15923/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),d(QG,"href","/docs/transformers/pr_15923/en/model_doc/bert#transformers.TFBertForMultipleChoice"),d(HG,"href","/docs/transformers/pr_15923/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),d(UG,"href","/docs/transformers/pr_15923/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),d(JG,"href","/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),d(YG,"href","/docs/transformers/pr_15923/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),d(KG,"href","/docs/transformers/pr_15923/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),d(ZG,"href","/docs/transformers/pr_15923/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),d(eO,"href","/docs/transformers/pr_15923/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),d(oO,"href","/docs/transformers/pr_15923/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),d(rO,"href","/docs/transformers/pr_15923/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),d(tO,"href","/docs/transformers/pr_15923/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),d(aO,"href","/docs/transformers/pr_15923/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),d(nO,"href","/docs/transformers/pr_15923/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),d(sO,"href","/docs/transformers/pr_15923/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),d(lO,"href","/docs/transformers/pr_15923/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),d(iO,"href","/docs/transformers/pr_15923/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),d(To,"class","docstring"),d(Cr,"class","docstring"),d($F,"id","transformers.TFAutoModelForTableQuestionAnswering"),d($F,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d($F,"href","#transformers.TFAutoModelForTableQuestionAnswering"),d(wc,"class","relative group"),d(_t,"class","docstring"),d(dO,"href","/docs/transformers/pr_15923/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),d(Fo,"class","docstring"),d(Mr,"class","docstring"),d(DF,"id","transformers.TFAutoModelForTokenClassification"),d(DF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(DF,"href","#transformers.TFAutoModelForTokenClassification"),d(Bc,"class","relative group"),d(ut,"class","docstring"),d(cO,"href","/docs/transformers/pr_15923/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),d(fO,"href","/docs/transformers/pr_15923/en/model_doc/bert#transformers.TFBertForTokenClassification"),d(mO,"href","/docs/transformers/pr_15923/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),d(gO,"href","/docs/transformers/pr_15923/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),d(hO,"href","/docs/transformers/pr_15923/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),d(pO,"href","/docs/transformers/pr_15923/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),d(_O,"href","/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),d(uO,"href","/docs/transformers/pr_15923/en/model_doc/electra#transformers.TFElectraForTokenClassification"),d(bO,"href","/docs/transformers/pr_15923/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),d(vO,"href","/docs/transformers/pr_15923/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),d(TO,"href","/docs/transformers/pr_15923/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),d(FO,"href","/docs/transformers/pr_15923/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),d(CO,"href","/docs/transformers/pr_15923/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),d(MO,"href","/docs/transformers/pr_15923/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),d(EO,"href","/docs/transformers/pr_15923/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),d(yO,"href","/docs/transformers/pr_15923/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),d(wO,"href","/docs/transformers/pr_15923/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),d(AO,"href","/docs/transformers/pr_15923/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),d(LO,"href","/docs/transformers/pr_15923/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),d(BO,"href","/docs/transformers/pr_15923/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),d(Co,"class","docstring"),d(Er,"class","docstring"),d(a9,"id","transformers.TFAutoModelForQuestionAnswering"),d(a9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(a9,"href","#transformers.TFAutoModelForQuestionAnswering"),d(Rc,"class","relative group"),d(bt,"class","docstring"),d(xO,"href","/docs/transformers/pr_15923/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),d(kO,"href","/docs/transformers/pr_15923/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),d(RO,"href","/docs/transformers/pr_15923/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),d(SO,"href","/docs/transformers/pr_15923/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),d(PO,"href","/docs/transformers/pr_15923/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),d($O,"href","/docs/transformers/pr_15923/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),d(IO,"href","/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),d(DO,"href","/docs/transformers/pr_15923/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),d(jO,"href","/docs/transformers/pr_15923/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),d(NO,"href","/docs/transformers/pr_15923/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),d(qO,"href","/docs/transformers/pr_15923/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),d(GO,"href","/docs/transformers/pr_15923/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),d(OO,"href","/docs/transformers/pr_15923/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),d(XO,"href","/docs/transformers/pr_15923/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),d(VO,"href","/docs/transformers/pr_15923/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),d(zO,"href","/docs/transformers/pr_15923/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),d(WO,"href","/docs/transformers/pr_15923/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),d(QO,"href","/docs/transformers/pr_15923/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),d(HO,"href","/docs/transformers/pr_15923/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),d(Mo,"class","docstring"),d(yr,"class","docstring"),d(E9,"id","transformers.TFAutoModelForVision2Seq"),d(E9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(E9,"href","#transformers.TFAutoModelForVision2Seq"),d($c,"class","relative group"),d(vt,"class","docstring"),d(UO,"href","/docs/transformers/pr_15923/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),d(Eo,"class","docstring"),d(wr,"class","docstring"),d(w9,"id","transformers.TFAutoModelForSpeechSeq2Seq"),d(w9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(w9,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),d(jc,"class","relative group"),d(Tt,"class","docstring"),d(JO,"href","/docs/transformers/pr_15923/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),d(yo,"class","docstring"),d(Ar,"class","docstring"),d(L9,"id","transformers.FlaxAutoModel"),d(L9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(L9,"href","#transformers.FlaxAutoModel"),d(Gc,"class","relative group"),d(Ft,"class","docstring"),d(YO,"href","/docs/transformers/pr_15923/en/model_doc/albert#transformers.FlaxAlbertModel"),d(KO,"href","/docs/transformers/pr_15923/en/model_doc/bart#transformers.FlaxBartModel"),d(ZO,"href","/docs/transformers/pr_15923/en/model_doc/beit#transformers.FlaxBeitModel"),d(eX,"href","/docs/transformers/pr_15923/en/model_doc/bert#transformers.FlaxBertModel"),d(oX,"href","/docs/transformers/pr_15923/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),d(rX,"href","/docs/transformers/pr_15923/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),d(tX,"href","/docs/transformers/pr_15923/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),d(aX,"href","/docs/transformers/pr_15923/en/model_doc/clip#transformers.FlaxCLIPModel"),d(nX,"href","/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),d(sX,"href","/docs/transformers/pr_15923/en/model_doc/electra#transformers.FlaxElectraModel"),d(lX,"href","/docs/transformers/pr_15923/en/model_doc/gpt2#transformers.FlaxGPT2Model"),d(iX,"href","/docs/transformers/pr_15923/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),d(dX,"href","/docs/transformers/pr_15923/en/model_doc/gptj#transformers.FlaxGPTJModel"),d(cX,"href","/docs/transformers/pr_15923/en/model_doc/marian#transformers.FlaxMarianModel"),d(fX,"href","/docs/transformers/pr_15923/en/model_doc/mbart#transformers.FlaxMBartModel"),d(mX,"href","/docs/transformers/pr_15923/en/model_doc/mt5#transformers.FlaxMT5Model"),d(gX,"href","/docs/transformers/pr_15923/en/model_doc/pegasus#transformers.FlaxPegasusModel"),d(hX,"href","/docs/transformers/pr_15923/en/model_doc/roberta#transformers.FlaxRobertaModel"),d(pX,"href","/docs/transformers/pr_15923/en/model_doc/roformer#transformers.FlaxRoFormerModel"),d(_X,"href","/docs/transformers/pr_15923/en/model_doc/t5#transformers.FlaxT5Model"),d(uX,"href","/docs/transformers/pr_15923/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),d(bX,"href","/docs/transformers/pr_15923/en/model_doc/vit#transformers.FlaxViTModel"),d(vX,"href","/docs/transformers/pr_15923/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),d(TX,"href","/docs/transformers/pr_15923/en/model_doc/xglm#transformers.FlaxXGLMModel"),d(wo,"class","docstring"),d(Lr,"class","docstring"),d(Z9,"id","transformers.FlaxAutoModelForCausalLM"),d(Z9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Z9,"href","#transformers.FlaxAutoModelForCausalLM"),d(Vc,"class","relative group"),d(Ct,"class","docstring"),d(FX,"href","/docs/transformers/pr_15923/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),d(CX,"href","/docs/transformers/pr_15923/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),d(MX,"href","/docs/transformers/pr_15923/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),d(EX,"href","/docs/transformers/pr_15923/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),d(Ao,"class","docstring"),d(Br,"class","docstring"),d(aC,"id","transformers.FlaxAutoModelForPreTraining"),d(aC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(aC,"href","#transformers.FlaxAutoModelForPreTraining"),d(Qc,"class","relative group"),d(Mt,"class","docstring"),d(yX,"href","/docs/transformers/pr_15923/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),d(wX,"href","/docs/transformers/pr_15923/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(AX,"href","/docs/transformers/pr_15923/en/model_doc/bert#transformers.FlaxBertForPreTraining"),d(LX,"href","/docs/transformers/pr_15923/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),d(BX,"href","/docs/transformers/pr_15923/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),d(xX,"href","/docs/transformers/pr_15923/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(kX,"href","/docs/transformers/pr_15923/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(RX,"href","/docs/transformers/pr_15923/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(SX,"href","/docs/transformers/pr_15923/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(PX,"href","/docs/transformers/pr_15923/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d($X,"href","/docs/transformers/pr_15923/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),d(Lo,"class","docstring"),d(xr,"class","docstring"),d(_C,"id","transformers.FlaxAutoModelForMaskedLM"),d(_C,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(_C,"href","#transformers.FlaxAutoModelForMaskedLM"),d(Jc,"class","relative group"),d(Et,"class","docstring"),d(IX,"href","/docs/transformers/pr_15923/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),d(DX,"href","/docs/transformers/pr_15923/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(jX,"href","/docs/transformers/pr_15923/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),d(NX,"href","/docs/transformers/pr_15923/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),d(qX,"href","/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),d(GX,"href","/docs/transformers/pr_15923/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),d(OX,"href","/docs/transformers/pr_15923/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(XX,"href","/docs/transformers/pr_15923/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(VX,"href","/docs/transformers/pr_15923/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(Bo,"class","docstring"),d(kr,"class","docstring"),d(wC,"id","transformers.FlaxAutoModelForSeq2SeqLM"),d(wC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(wC,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),d(Zc,"class","relative group"),d(yt,"class","docstring"),d(zX,"href","/docs/transformers/pr_15923/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(WX,"href","/docs/transformers/pr_15923/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),d(QX,"href","/docs/transformers/pr_15923/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),d(HX,"href","/docs/transformers/pr_15923/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),d(UX,"href","/docs/transformers/pr_15923/en/model_doc/marian#transformers.FlaxMarianMTModel"),d(JX,"href","/docs/transformers/pr_15923/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(YX,"href","/docs/transformers/pr_15923/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(KX,"href","/docs/transformers/pr_15923/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),d(ZX,"href","/docs/transformers/pr_15923/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(xo,"class","docstring"),d(Rr,"class","docstring"),d(IC,"id","transformers.FlaxAutoModelForSequenceClassification"),d(IC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(IC,"href","#transformers.FlaxAutoModelForSequenceClassification"),d(rf,"class","relative group"),d(wt,"class","docstring"),d(eV,"href","/docs/transformers/pr_15923/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),d(oV,"href","/docs/transformers/pr_15923/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),d(rV,"href","/docs/transformers/pr_15923/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),d(tV,"href","/docs/transformers/pr_15923/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),d(aV,"href","/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),d(nV,"href","/docs/transformers/pr_15923/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),d(sV,"href","/docs/transformers/pr_15923/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),d(lV,"href","/docs/transformers/pr_15923/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),d(iV,"href","/docs/transformers/pr_15923/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),d(ko,"class","docstring"),d(Sr,"class","docstring"),d(WC,"id","transformers.FlaxAutoModelForQuestionAnswering"),d(WC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(WC,"href","#transformers.FlaxAutoModelForQuestionAnswering"),d(nf,"class","relative group"),d(At,"class","docstring"),d(dV,"href","/docs/transformers/pr_15923/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),d(cV,"href","/docs/transformers/pr_15923/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),d(fV,"href","/docs/transformers/pr_15923/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),d(mV,"href","/docs/transformers/pr_15923/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),d(gV,"href","/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),d(hV,"href","/docs/transformers/pr_15923/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),d(pV,"href","/docs/transformers/pr_15923/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),d(_V,"href","/docs/transformers/pr_15923/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),d(uV,"href","/docs/transformers/pr_15923/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),d(Ro,"class","docstring"),d(Pr,"class","docstring"),d(r4,"id","transformers.FlaxAutoModelForTokenClassification"),d(r4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(r4,"href","#transformers.FlaxAutoModelForTokenClassification"),d(df,"class","relative group"),d(Lt,"class","docstring"),d(bV,"href","/docs/transformers/pr_15923/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),d(vV,"href","/docs/transformers/pr_15923/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),d(TV,"href","/docs/transformers/pr_15923/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),d(FV,"href","/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),d(CV,"href","/docs/transformers/pr_15923/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),d(MV,"href","/docs/transformers/pr_15923/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),d(EV,"href","/docs/transformers/pr_15923/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),d(So,"class","docstring"),d($r,"class","docstring"),d(c4,"id","transformers.FlaxAutoModelForMultipleChoice"),d(c4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(c4,"href","#transformers.FlaxAutoModelForMultipleChoice"),d(mf,"class","relative group"),d(Bt,"class","docstring"),d(yV,"href","/docs/transformers/pr_15923/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),d(wV,"href","/docs/transformers/pr_15923/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),d(AV,"href","/docs/transformers/pr_15923/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),d(LV,"href","/docs/transformers/pr_15923/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),d(BV,"href","/docs/transformers/pr_15923/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),d(xV,"href","/docs/transformers/pr_15923/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),d(kV,"href","/docs/transformers/pr_15923/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),d(Po,"class","docstring"),d(Ir,"class","docstring"),d(b4,"id","transformers.FlaxAutoModelForNextSentencePrediction"),d(b4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(b4,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),d(pf,"class","relative group"),d(xt,"class","docstring"),d(RV,"href","/docs/transformers/pr_15923/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),d($o,"class","docstring"),d(Dr,"class","docstring"),d(T4,"id","transformers.FlaxAutoModelForImageClassification"),d(T4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(T4,"href","#transformers.FlaxAutoModelForImageClassification"),d(bf,"class","relative group"),d(kt,"class","docstring"),d(SV,"href","/docs/transformers/pr_15923/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),d(PV,"href","/docs/transformers/pr_15923/en/model_doc/vit#transformers.FlaxViTForImageClassification"),d(Io,"class","docstring"),d(jr,"class","docstring"),d(M4,"id","transformers.FlaxAutoModelForVision2Seq"),d(M4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(M4,"href","#transformers.FlaxAutoModelForVision2Seq"),d(Ff,"class","relative group"),d(Rt,"class","docstring"),d($V,"href","/docs/transformers/pr_15923/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),d(Do,"class","docstring"),d(Nr,"class","docstring")},m(c,u){e(document.head,J),b(c,Be,u),b(c,de,u),e(de,me),e(me,no),g(ce,no,null),e(de,ue),e(de,Go),e(Go,Bi),b(c,yf,u),b(c,sa,u),e(sa,xi),e(sa,ki),e(ki,EM),e(sa,wf),b(c,ye,u),b(c,io,u),e(io,Ri),e(io,In),e(In,yM),e(io,Dn),e(io,jn),e(jn,wM),e(io,Si),e(io,Nn),e(Nn,AM),e(io,Pi),b(c,Af,u),g($a,c,u),b(c,co,u),b(c,ge,u),e(ge,c8),e(ge,$i),e($i,f8),e(ge,m8),b(c,Oo,u),b(c,Ia,u),e(Ia,g8),e(Ia,Lf),e(Lf,h8),e(Ia,VRe),b(c,P7e,u),b(c,Ii,u),e(Ii,Bf),e(Bf,wW),g(LM,wW,null),e(Ii,zRe),e(Ii,AW),e(AW,WRe),b(c,$7e,u),b(c,qn,u),e(qn,QRe),e(qn,LW),e(LW,HRe),e(qn,URe),e(qn,BW),e(BW,JRe),e(qn,YRe),b(c,I7e,u),g(BM,c,u),b(c,D7e,u),b(c,p8,u),e(p8,KRe),b(c,j7e,u),g(xf,c,u),b(c,N7e,u),b(c,Di,u),e(Di,kf),e(kf,xW),g(xM,xW,null),e(Di,ZRe),e(Di,kW),e(kW,eSe),b(c,q7e,u),b(c,Xo,u),g(kM,Xo,null),e(Xo,oSe),e(Xo,RM),e(RM,rSe),e(RM,_8),e(_8,tSe),e(RM,aSe),e(Xo,nSe),e(Xo,SM),e(SM,sSe),e(SM,RW),e(RW,lSe),e(SM,iSe),e(Xo,dSe),e(Xo,fo),g(PM,fo,null),e(fo,cSe),e(fo,SW),e(SW,fSe),e(fo,mSe),e(fo,ji),e(ji,gSe),e(ji,PW),e(PW,hSe),e(ji,pSe),e(ji,$W),e($W,_Se),e(ji,uSe),e(fo,bSe),e(fo,v),e(v,Rf),e(Rf,IW),e(IW,vSe),e(Rf,TSe),e(Rf,u8),e(u8,FSe),e(Rf,CSe),e(v,MSe),e(v,Sf),e(Sf,DW),e(DW,ESe),e(Sf,ySe),e(Sf,b8),e(b8,wSe),e(Sf,ASe),e(v,LSe),e(v,Pf),e(Pf,jW),e(jW,BSe),e(Pf,xSe),e(Pf,v8),e(v8,kSe),e(Pf,RSe),e(v,SSe),e(v,$f),e($f,NW),e(NW,PSe),e($f,$Se),e($f,T8),e(T8,ISe),e($f,DSe),e(v,jSe),e(v,If),e(If,qW),e(qW,NSe),e(If,qSe),e(If,F8),e(F8,GSe),e(If,OSe),e(v,XSe),e(v,Df),e(Df,GW),e(GW,VSe),e(Df,zSe),e(Df,C8),e(C8,WSe),e(Df,QSe),e(v,HSe),e(v,jf),e(jf,OW),e(OW,USe),e(jf,JSe),e(jf,M8),e(M8,YSe),e(jf,KSe),e(v,ZSe),e(v,Nf),e(Nf,XW),e(XW,ePe),e(Nf,oPe),e(Nf,E8),e(E8,rPe),e(Nf,tPe),e(v,aPe),e(v,qf),e(qf,VW),e(VW,nPe),e(qf,sPe),e(qf,y8),e(y8,lPe),e(qf,iPe),e(v,dPe),e(v,Gf),e(Gf,zW),e(zW,cPe),e(Gf,fPe),e(Gf,w8),e(w8,mPe),e(Gf,gPe),e(v,hPe),e(v,Of),e(Of,WW),e(WW,pPe),e(Of,_Pe),e(Of,A8),e(A8,uPe),e(Of,bPe),e(v,vPe),e(v,Xf),e(Xf,QW),e(QW,TPe),e(Xf,FPe),e(Xf,L8),e(L8,CPe),e(Xf,MPe),e(v,EPe),e(v,Vf),e(Vf,HW),e(HW,yPe),e(Vf,wPe),e(Vf,B8),e(B8,APe),e(Vf,LPe),e(v,BPe),e(v,zf),e(zf,UW),e(UW,xPe),e(zf,kPe),e(zf,x8),e(x8,RPe),e(zf,SPe),e(v,PPe),e(v,Wf),e(Wf,JW),e(JW,$Pe),e(Wf,IPe),e(Wf,k8),e(k8,DPe),e(Wf,jPe),e(v,NPe),e(v,Qf),e(Qf,YW),e(YW,qPe),e(Qf,GPe),e(Qf,R8),e(R8,OPe),e(Qf,XPe),e(v,VPe),e(v,Hf),e(Hf,KW),e(KW,zPe),e(Hf,WPe),e(Hf,S8),e(S8,QPe),e(Hf,HPe),e(v,UPe),e(v,Uf),e(Uf,ZW),e(ZW,JPe),e(Uf,YPe),e(Uf,P8),e(P8,KPe),e(Uf,ZPe),e(v,e$e),e(v,Jf),e(Jf,eQ),e(eQ,o$e),e(Jf,r$e),e(Jf,$8),e($8,t$e),e(Jf,a$e),e(v,n$e),e(v,Yf),e(Yf,oQ),e(oQ,s$e),e(Yf,l$e),e(Yf,I8),e(I8,i$e),e(Yf,d$e),e(v,c$e),e(v,Kf),e(Kf,rQ),e(rQ,f$e),e(Kf,m$e),e(Kf,D8),e(D8,g$e),e(Kf,h$e),e(v,p$e),e(v,Zf),e(Zf,tQ),e(tQ,_$e),e(Zf,u$e),e(Zf,j8),e(j8,b$e),e(Zf,v$e),e(v,T$e),e(v,em),e(em,aQ),e(aQ,F$e),e(em,C$e),e(em,N8),e(N8,M$e),e(em,E$e),e(v,y$e),e(v,om),e(om,nQ),e(nQ,w$e),e(om,A$e),e(om,q8),e(q8,L$e),e(om,B$e),e(v,x$e),e(v,rm),e(rm,sQ),e(sQ,k$e),e(rm,R$e),e(rm,G8),e(G8,S$e),e(rm,P$e),e(v,$$e),e(v,tm),e(tm,lQ),e(lQ,I$e),e(tm,D$e),e(tm,O8),e(O8,j$e),e(tm,N$e),e(v,q$e),e(v,am),e(am,iQ),e(iQ,G$e),e(am,O$e),e(am,X8),e(X8,X$e),e(am,V$e),e(v,z$e),e(v,nm),e(nm,dQ),e(dQ,W$e),e(nm,Q$e),e(nm,V8),e(V8,H$e),e(nm,U$e),e(v,J$e),e(v,sm),e(sm,cQ),e(cQ,Y$e),e(sm,K$e),e(sm,z8),e(z8,Z$e),e(sm,eIe),e(v,oIe),e(v,lm),e(lm,fQ),e(fQ,rIe),e(lm,tIe),e(lm,W8),e(W8,aIe),e(lm,nIe),e(v,sIe),e(v,im),e(im,mQ),e(mQ,lIe),e(im,iIe),e(im,Q8),e(Q8,dIe),e(im,cIe),e(v,fIe),e(v,dm),e(dm,gQ),e(gQ,mIe),e(dm,gIe),e(dm,H8),e(H8,hIe),e(dm,pIe),e(v,_Ie),e(v,cm),e(cm,hQ),e(hQ,uIe),e(cm,bIe),e(cm,U8),e(U8,vIe),e(cm,TIe),e(v,FIe),e(v,fm),e(fm,pQ),e(pQ,CIe),e(fm,MIe),e(fm,J8),e(J8,EIe),e(fm,yIe),e(v,wIe),e(v,mm),e(mm,_Q),e(_Q,AIe),e(mm,LIe),e(mm,Y8),e(Y8,BIe),e(mm,xIe),e(v,kIe),e(v,gm),e(gm,uQ),e(uQ,RIe),e(gm,SIe),e(gm,K8),e(K8,PIe),e(gm,$Ie),e(v,IIe),e(v,hm),e(hm,bQ),e(bQ,DIe),e(hm,jIe),e(hm,Z8),e(Z8,NIe),e(hm,qIe),e(v,GIe),e(v,pm),e(pm,vQ),e(vQ,OIe),e(pm,XIe),e(pm,e7),e(e7,VIe),e(pm,zIe),e(v,WIe),e(v,_m),e(_m,TQ),e(TQ,QIe),e(_m,HIe),e(_m,o7),e(o7,UIe),e(_m,JIe),e(v,YIe),e(v,um),e(um,FQ),e(FQ,KIe),e(um,ZIe),e(um,r7),e(r7,eDe),e(um,oDe),e(v,rDe),e(v,bm),e(bm,CQ),e(CQ,tDe),e(bm,aDe),e(bm,t7),e(t7,nDe),e(bm,sDe),e(v,lDe),e(v,vm),e(vm,MQ),e(MQ,iDe),e(vm,dDe),e(vm,a7),e(a7,cDe),e(vm,fDe),e(v,mDe),e(v,Tm),e(Tm,EQ),e(EQ,gDe),e(Tm,hDe),e(Tm,n7),e(n7,pDe),e(Tm,_De),e(v,uDe),e(v,Fm),e(Fm,yQ),e(yQ,bDe),e(Fm,vDe),e(Fm,s7),e(s7,TDe),e(Fm,FDe),e(v,CDe),e(v,Cm),e(Cm,wQ),e(wQ,MDe),e(Cm,EDe),e(Cm,l7),e(l7,yDe),e(Cm,wDe),e(v,ADe),e(v,Mm),e(Mm,AQ),e(AQ,LDe),e(Mm,BDe),e(Mm,i7),e(i7,xDe),e(Mm,kDe),e(v,RDe),e(v,Em),e(Em,LQ),e(LQ,SDe),e(Em,PDe),e(Em,d7),e(d7,$De),e(Em,IDe),e(v,DDe),e(v,ym),e(ym,BQ),e(BQ,jDe),e(ym,NDe),e(ym,c7),e(c7,qDe),e(ym,GDe),e(v,ODe),e(v,wm),e(wm,xQ),e(xQ,XDe),e(wm,VDe),e(wm,f7),e(f7,zDe),e(wm,WDe),e(v,QDe),e(v,Am),e(Am,kQ),e(kQ,HDe),e(Am,UDe),e(Am,m7),e(m7,JDe),e(Am,YDe),e(v,KDe),e(v,Lm),e(Lm,RQ),e(RQ,ZDe),e(Lm,eje),e(Lm,g7),e(g7,oje),e(Lm,rje),e(v,tje),e(v,Bm),e(Bm,SQ),e(SQ,aje),e(Bm,nje),e(Bm,h7),e(h7,sje),e(Bm,lje),e(v,ije),e(v,xm),e(xm,PQ),e(PQ,dje),e(xm,cje),e(xm,p7),e(p7,fje),e(xm,mje),e(v,gje),e(v,km),e(km,$Q),e($Q,hje),e(km,pje),e(km,_7),e(_7,_je),e(km,uje),e(v,bje),e(v,Rm),e(Rm,IQ),e(IQ,vje),e(Rm,Tje),e(Rm,u7),e(u7,Fje),e(Rm,Cje),e(v,Mje),e(v,Sm),e(Sm,DQ),e(DQ,Eje),e(Sm,yje),e(Sm,b7),e(b7,wje),e(Sm,Aje),e(v,Lje),e(v,Pm),e(Pm,jQ),e(jQ,Bje),e(Pm,xje),e(Pm,v7),e(v7,kje),e(Pm,Rje),e(v,Sje),e(v,$m),e($m,NQ),e(NQ,Pje),e($m,$je),e($m,T7),e(T7,Ije),e($m,Dje),e(v,jje),e(v,Im),e(Im,qQ),e(qQ,Nje),e(Im,qje),e(Im,F7),e(F7,Gje),e(Im,Oje),e(v,Xje),e(v,Dm),e(Dm,GQ),e(GQ,Vje),e(Dm,zje),e(Dm,C7),e(C7,Wje),e(Dm,Qje),e(v,Hje),e(v,jm),e(jm,OQ),e(OQ,Uje),e(jm,Jje),e(jm,M7),e(M7,Yje),e(jm,Kje),e(v,Zje),e(v,Nm),e(Nm,XQ),e(XQ,eNe),e(Nm,oNe),e(Nm,E7),e(E7,rNe),e(Nm,tNe),e(v,aNe),e(v,qm),e(qm,VQ),e(VQ,nNe),e(qm,sNe),e(qm,y7),e(y7,lNe),e(qm,iNe),e(v,dNe),e(v,Gm),e(Gm,zQ),e(zQ,cNe),e(Gm,fNe),e(Gm,w7),e(w7,mNe),e(Gm,gNe),e(v,hNe),e(v,Om),e(Om,WQ),e(WQ,pNe),e(Om,_Ne),e(Om,A7),e(A7,uNe),e(Om,bNe),e(v,vNe),e(v,Xm),e(Xm,QQ),e(QQ,TNe),e(Xm,FNe),e(Xm,L7),e(L7,CNe),e(Xm,MNe),e(v,ENe),e(v,Vm),e(Vm,HQ),e(HQ,yNe),e(Vm,wNe),e(Vm,B7),e(B7,ANe),e(Vm,LNe),e(v,BNe),e(v,zm),e(zm,UQ),e(UQ,xNe),e(zm,kNe),e(zm,x7),e(x7,RNe),e(zm,SNe),e(v,PNe),e(v,Wm),e(Wm,JQ),e(JQ,$Ne),e(Wm,INe),e(Wm,k7),e(k7,DNe),e(Wm,jNe),e(v,NNe),e(v,Qm),e(Qm,YQ),e(YQ,qNe),e(Qm,GNe),e(Qm,R7),e(R7,ONe),e(Qm,XNe),e(v,VNe),e(v,Hm),e(Hm,KQ),e(KQ,zNe),e(Hm,WNe),e(Hm,S7),e(S7,QNe),e(Hm,HNe),e(v,UNe),e(v,Um),e(Um,ZQ),e(ZQ,JNe),e(Um,YNe),e(Um,P7),e(P7,KNe),e(Um,ZNe),e(v,eqe),e(v,Jm),e(Jm,eH),e(eH,oqe),e(Jm,rqe),e(Jm,$7),e($7,tqe),e(Jm,aqe),e(v,nqe),e(v,Ym),e(Ym,oH),e(oH,sqe),e(Ym,lqe),e(Ym,I7),e(I7,iqe),e(Ym,dqe),e(v,cqe),e(v,Km),e(Km,rH),e(rH,fqe),e(Km,mqe),e(Km,D7),e(D7,gqe),e(Km,hqe),e(v,pqe),e(v,Zm),e(Zm,tH),e(tH,_qe),e(Zm,uqe),e(Zm,j7),e(j7,bqe),e(Zm,vqe),e(v,Tqe),e(v,eg),e(eg,aH),e(aH,Fqe),e(eg,Cqe),e(eg,N7),e(N7,Mqe),e(eg,Eqe),e(v,yqe),e(v,og),e(og,nH),e(nH,wqe),e(og,Aqe),e(og,q7),e(q7,Lqe),e(og,Bqe),e(v,xqe),e(v,rg),e(rg,sH),e(sH,kqe),e(rg,Rqe),e(rg,G7),e(G7,Sqe),e(rg,Pqe),e(v,$qe),e(v,tg),e(tg,lH),e(lH,Iqe),e(tg,Dqe),e(tg,O7),e(O7,jqe),e(tg,Nqe),e(v,qqe),e(v,ag),e(ag,iH),e(iH,Gqe),e(ag,Oqe),e(ag,X7),e(X7,Xqe),e(ag,Vqe),e(v,zqe),e(v,ng),e(ng,dH),e(dH,Wqe),e(ng,Qqe),e(ng,V7),e(V7,Hqe),e(ng,Uqe),e(v,Jqe),e(v,sg),e(sg,cH),e(cH,Yqe),e(sg,Kqe),e(sg,z7),e(z7,Zqe),e(sg,eGe),e(v,oGe),e(v,lg),e(lg,fH),e(fH,rGe),e(lg,tGe),e(lg,W7),e(W7,aGe),e(lg,nGe),e(v,sGe),e(v,ig),e(ig,mH),e(mH,lGe),e(ig,iGe),e(ig,Q7),e(Q7,dGe),e(ig,cGe),e(v,fGe),e(v,dg),e(dg,gH),e(gH,mGe),e(dg,gGe),e(dg,H7),e(H7,hGe),e(dg,pGe),e(v,_Ge),e(v,cg),e(cg,hH),e(hH,uGe),e(cg,bGe),e(cg,U7),e(U7,vGe),e(cg,TGe),e(v,FGe),e(v,fg),e(fg,pH),e(pH,CGe),e(fg,MGe),e(fg,J7),e(J7,EGe),e(fg,yGe),e(v,wGe),e(v,mg),e(mg,_H),e(_H,AGe),e(mg,LGe),e(mg,Y7),e(Y7,BGe),e(mg,xGe),e(v,kGe),e(v,gg),e(gg,uH),e(uH,RGe),e(gg,SGe),e(gg,K7),e(K7,PGe),e(gg,$Ge),e(v,IGe),e(v,hg),e(hg,bH),e(bH,DGe),e(hg,jGe),e(hg,Z7),e(Z7,NGe),e(hg,qGe),e(v,GGe),e(v,pg),e(pg,vH),e(vH,OGe),e(pg,XGe),e(pg,eB),e(eB,VGe),e(pg,zGe),e(v,WGe),e(v,_g),e(_g,TH),e(TH,QGe),e(_g,HGe),e(_g,oB),e(oB,UGe),e(_g,JGe),e(v,YGe),e(v,ug),e(ug,FH),e(FH,KGe),e(ug,ZGe),e(ug,rB),e(rB,eOe),e(ug,oOe),e(fo,rOe),e(fo,CH),e(CH,tOe),e(fo,aOe),g($M,fo,null),e(Xo,nOe),e(Xo,bg),g(IM,bg,null),e(bg,sOe),e(bg,MH),e(MH,lOe),b(c,G7e,u),b(c,Ni,u),e(Ni,vg),e(vg,EH),g(DM,EH,null),e(Ni,iOe),e(Ni,yH),e(yH,dOe),b(c,O7e,u),b(c,Vo,u),g(jM,Vo,null),e(Vo,cOe),e(Vo,NM),e(NM,fOe),e(NM,tB),e(tB,mOe),e(NM,gOe),e(Vo,hOe),e(Vo,qM),e(qM,pOe),e(qM,wH),e(wH,_Oe),e(qM,uOe),e(Vo,bOe),e(Vo,mo),g(GM,mo,null),e(mo,vOe),e(mo,AH),e(AH,TOe),e(mo,FOe),e(mo,Da),e(Da,COe),e(Da,LH),e(LH,MOe),e(Da,EOe),e(Da,BH),e(BH,yOe),e(Da,wOe),e(Da,xH),e(xH,AOe),e(Da,LOe),e(mo,BOe),e(mo,M),e(M,Gn),e(Gn,kH),e(kH,xOe),e(Gn,kOe),e(Gn,aB),e(aB,ROe),e(Gn,SOe),e(Gn,nB),e(nB,POe),e(Gn,$Oe),e(M,IOe),e(M,On),e(On,RH),e(RH,DOe),e(On,jOe),e(On,sB),e(sB,NOe),e(On,qOe),e(On,lB),e(lB,GOe),e(On,OOe),e(M,XOe),e(M,Xn),e(Xn,SH),e(SH,VOe),e(Xn,zOe),e(Xn,iB),e(iB,WOe),e(Xn,QOe),e(Xn,dB),e(dB,HOe),e(Xn,UOe),e(M,JOe),e(M,Tg),e(Tg,PH),e(PH,YOe),e(Tg,KOe),e(Tg,cB),e(cB,ZOe),e(Tg,eXe),e(M,oXe),e(M,Vn),e(Vn,$H),e($H,rXe),e(Vn,tXe),e(Vn,fB),e(fB,aXe),e(Vn,nXe),e(Vn,mB),e(mB,sXe),e(Vn,lXe),e(M,iXe),e(M,Fg),e(Fg,IH),e(IH,dXe),e(Fg,cXe),e(Fg,gB),e(gB,fXe),e(Fg,mXe),e(M,gXe),e(M,Cg),e(Cg,DH),e(DH,hXe),e(Cg,pXe),e(Cg,hB),e(hB,_Xe),e(Cg,uXe),e(M,bXe),e(M,Mg),e(Mg,jH),e(jH,vXe),e(Mg,TXe),e(Mg,pB),e(pB,FXe),e(Mg,CXe),e(M,MXe),e(M,zn),e(zn,NH),e(NH,EXe),e(zn,yXe),e(zn,_B),e(_B,wXe),e(zn,AXe),e(zn,uB),e(uB,LXe),e(zn,BXe),e(M,xXe),e(M,Wn),e(Wn,qH),e(qH,kXe),e(Wn,RXe),e(Wn,bB),e(bB,SXe),e(Wn,PXe),e(Wn,vB),e(vB,$Xe),e(Wn,IXe),e(M,DXe),e(M,Qn),e(Qn,GH),e(GH,jXe),e(Qn,NXe),e(Qn,TB),e(TB,qXe),e(Qn,GXe),e(Qn,FB),e(FB,OXe),e(Qn,XXe),e(M,VXe),e(M,Eg),e(Eg,OH),e(OH,zXe),e(Eg,WXe),e(Eg,CB),e(CB,QXe),e(Eg,HXe),e(M,UXe),e(M,yg),e(yg,XH),e(XH,JXe),e(yg,YXe),e(yg,MB),e(MB,KXe),e(yg,ZXe),e(M,eVe),e(M,Hn),e(Hn,VH),e(VH,oVe),e(Hn,rVe),e(Hn,EB),e(EB,tVe),e(Hn,aVe),e(Hn,yB),e(yB,nVe),e(Hn,sVe),e(M,lVe),e(M,wg),e(wg,zH),e(zH,iVe),e(wg,dVe),e(wg,wB),e(wB,cVe),e(wg,fVe),e(M,mVe),e(M,Un),e(Un,WH),e(WH,gVe),e(Un,hVe),e(Un,AB),e(AB,pVe),e(Un,_Ve),e(Un,LB),e(LB,uVe),e(Un,bVe),e(M,vVe),e(M,Jn),e(Jn,QH),e(QH,TVe),e(Jn,FVe),e(Jn,BB),e(BB,CVe),e(Jn,MVe),e(Jn,xB),e(xB,EVe),e(Jn,yVe),e(M,wVe),e(M,Yn),e(Yn,HH),e(HH,AVe),e(Yn,LVe),e(Yn,kB),e(kB,BVe),e(Yn,xVe),e(Yn,UH),e(UH,kVe),e(Yn,RVe),e(M,SVe),e(M,Ag),e(Ag,JH),e(JH,PVe),e(Ag,$Ve),e(Ag,RB),e(RB,IVe),e(Ag,DVe),e(M,jVe),e(M,Kn),e(Kn,YH),e(YH,NVe),e(Kn,qVe),e(Kn,SB),e(SB,GVe),e(Kn,OVe),e(Kn,PB),e(PB,XVe),e(Kn,VVe),e(M,zVe),e(M,Lg),e(Lg,KH),e(KH,WVe),e(Lg,QVe),e(Lg,$B),e($B,HVe),e(Lg,UVe),e(M,JVe),e(M,Zn),e(Zn,ZH),e(ZH,YVe),e(Zn,KVe),e(Zn,IB),e(IB,ZVe),e(Zn,eze),e(Zn,DB),e(DB,oze),e(Zn,rze),e(M,tze),e(M,es),e(es,eU),e(eU,aze),e(es,nze),e(es,jB),e(jB,sze),e(es,lze),e(es,NB),e(NB,ize),e(es,dze),e(M,cze),e(M,os),e(os,oU),e(oU,fze),e(os,mze),e(os,qB),e(qB,gze),e(os,hze),e(os,GB),e(GB,pze),e(os,_ze),e(M,uze),e(M,Bg),e(Bg,rU),e(rU,bze),e(Bg,vze),e(Bg,OB),e(OB,Tze),e(Bg,Fze),e(M,Cze),e(M,rs),e(rs,tU),e(tU,Mze),e(rs,Eze),e(rs,XB),e(XB,yze),e(rs,wze),e(rs,VB),e(VB,Aze),e(rs,Lze),e(M,Bze),e(M,xg),e(xg,aU),e(aU,xze),e(xg,kze),e(xg,zB),e(zB,Rze),e(xg,Sze),e(M,Pze),e(M,ts),e(ts,nU),e(nU,$ze),e(ts,Ize),e(ts,WB),e(WB,Dze),e(ts,jze),e(ts,QB),e(QB,Nze),e(ts,qze),e(M,Gze),e(M,as),e(as,sU),e(sU,Oze),e(as,Xze),e(as,HB),e(HB,Vze),e(as,zze),e(as,UB),e(UB,Wze),e(as,Qze),e(M,Hze),e(M,ns),e(ns,lU),e(lU,Uze),e(ns,Jze),e(ns,JB),e(JB,Yze),e(ns,Kze),e(ns,YB),e(YB,Zze),e(ns,eWe),e(M,oWe),e(M,ss),e(ss,iU),e(iU,rWe),e(ss,tWe),e(ss,KB),e(KB,aWe),e(ss,nWe),e(ss,ZB),e(ZB,sWe),e(ss,lWe),e(M,iWe),e(M,kg),e(kg,dU),e(dU,dWe),e(kg,cWe),e(kg,ex),e(ex,fWe),e(kg,mWe),e(M,gWe),e(M,ls),e(ls,cU),e(cU,hWe),e(ls,pWe),e(ls,ox),e(ox,_We),e(ls,uWe),e(ls,rx),e(rx,bWe),e(ls,vWe),e(M,TWe),e(M,is),e(is,fU),e(fU,FWe),e(is,CWe),e(is,tx),e(tx,MWe),e(is,EWe),e(is,ax),e(ax,yWe),e(is,wWe),e(M,AWe),e(M,ds),e(ds,mU),e(mU,LWe),e(ds,BWe),e(ds,nx),e(nx,xWe),e(ds,kWe),e(ds,sx),e(sx,RWe),e(ds,SWe),e(M,PWe),e(M,cs),e(cs,gU),e(gU,$We),e(cs,IWe),e(cs,lx),e(lx,DWe),e(cs,jWe),e(cs,ix),e(ix,NWe),e(cs,qWe),e(M,GWe),e(M,fs),e(fs,hU),e(hU,OWe),e(fs,XWe),e(fs,dx),e(dx,VWe),e(fs,zWe),e(fs,cx),e(cx,WWe),e(fs,QWe),e(M,HWe),e(M,ms),e(ms,pU),e(pU,UWe),e(ms,JWe),e(ms,fx),e(fx,YWe),e(ms,KWe),e(ms,mx),e(mx,ZWe),e(ms,eQe),e(M,oQe),e(M,Rg),e(Rg,_U),e(_U,rQe),e(Rg,tQe),e(Rg,gx),e(gx,aQe),e(Rg,nQe),e(M,sQe),e(M,gs),e(gs,uU),e(uU,lQe),e(gs,iQe),e(gs,hx),e(hx,dQe),e(gs,cQe),e(gs,px),e(px,fQe),e(gs,mQe),e(M,gQe),e(M,Sg),e(Sg,bU),e(bU,hQe),e(Sg,pQe),e(Sg,_x),e(_x,_Qe),e(Sg,uQe),e(M,bQe),e(M,Pg),e(Pg,vU),e(vU,vQe),e(Pg,TQe),e(Pg,ux),e(ux,FQe),e(Pg,CQe),e(M,MQe),e(M,hs),e(hs,TU),e(TU,EQe),e(hs,yQe),e(hs,bx),e(bx,wQe),e(hs,AQe),e(hs,vx),e(vx,LQe),e(hs,BQe),e(M,xQe),e(M,ps),e(ps,FU),e(FU,kQe),e(ps,RQe),e(ps,Tx),e(Tx,SQe),e(ps,PQe),e(ps,Fx),e(Fx,$Qe),e(ps,IQe),e(M,DQe),e(M,$g),e($g,CU),e(CU,jQe),e($g,NQe),e($g,Cx),e(Cx,qQe),e($g,GQe),e(M,OQe),e(M,_s),e(_s,MU),e(MU,XQe),e(_s,VQe),e(_s,Mx),e(Mx,zQe),e(_s,WQe),e(_s,Ex),e(Ex,QQe),e(_s,HQe),e(M,UQe),e(M,us),e(us,EU),e(EU,JQe),e(us,YQe),e(us,yx),e(yx,KQe),e(us,ZQe),e(us,wx),e(wx,eHe),e(us,oHe),e(M,rHe),e(M,bs),e(bs,yU),e(yU,tHe),e(bs,aHe),e(bs,Ax),e(Ax,nHe),e(bs,sHe),e(bs,Lx),e(Lx,lHe),e(bs,iHe),e(M,dHe),e(M,vs),e(vs,wU),e(wU,cHe),e(vs,fHe),e(vs,Bx),e(Bx,mHe),e(vs,gHe),e(vs,xx),e(xx,hHe),e(vs,pHe),e(M,_He),e(M,Ts),e(Ts,AU),e(AU,uHe),e(Ts,bHe),e(Ts,kx),e(kx,vHe),e(Ts,THe),e(Ts,Rx),e(Rx,FHe),e(Ts,CHe),e(M,MHe),e(M,Ig),e(Ig,LU),e(LU,EHe),e(Ig,yHe),e(Ig,Sx),e(Sx,wHe),e(Ig,AHe),e(M,LHe),e(M,Dg),e(Dg,BU),e(BU,BHe),e(Dg,xHe),e(Dg,Px),e(Px,kHe),e(Dg,RHe),e(M,SHe),e(M,jg),e(jg,xU),e(xU,PHe),e(jg,$He),e(jg,$x),e($x,IHe),e(jg,DHe),e(M,jHe),e(M,Ng),e(Ng,kU),e(kU,NHe),e(Ng,qHe),e(Ng,Ix),e(Ix,GHe),e(Ng,OHe),e(M,XHe),e(M,Fs),e(Fs,RU),e(RU,VHe),e(Fs,zHe),e(Fs,Dx),e(Dx,WHe),e(Fs,QHe),e(Fs,jx),e(jx,HHe),e(Fs,UHe),e(M,JHe),e(M,qg),e(qg,SU),e(SU,YHe),e(qg,KHe),e(qg,Nx),e(Nx,ZHe),e(qg,eUe),e(M,oUe),e(M,Cs),e(Cs,PU),e(PU,rUe),e(Cs,tUe),e(Cs,qx),e(qx,aUe),e(Cs,nUe),e(Cs,Gx),e(Gx,sUe),e(Cs,lUe),e(M,iUe),e(M,Ms),e(Ms,$U),e($U,dUe),e(Ms,cUe),e(Ms,Ox),e(Ox,fUe),e(Ms,mUe),e(Ms,Xx),e(Xx,gUe),e(Ms,hUe),e(M,pUe),e(M,Es),e(Es,IU),e(IU,_Ue),e(Es,uUe),e(Es,Vx),e(Vx,bUe),e(Es,vUe),e(Es,zx),e(zx,TUe),e(Es,FUe),e(M,CUe),e(M,ys),e(ys,DU),e(DU,MUe),e(ys,EUe),e(ys,Wx),e(Wx,yUe),e(ys,wUe),e(ys,Qx),e(Qx,AUe),e(ys,LUe),e(M,BUe),e(M,ws),e(ws,jU),e(jU,xUe),e(ws,kUe),e(ws,Hx),e(Hx,RUe),e(ws,SUe),e(ws,Ux),e(Ux,PUe),e(ws,$Ue),e(M,IUe),e(M,As),e(As,NU),e(NU,DUe),e(As,jUe),e(As,Jx),e(Jx,NUe),e(As,qUe),e(As,Yx),e(Yx,GUe),e(As,OUe),e(M,XUe),e(M,Gg),e(Gg,qU),e(qU,VUe),e(Gg,zUe),e(Gg,Kx),e(Kx,WUe),e(Gg,QUe),e(M,HUe),e(M,Og),e(Og,GU),e(GU,UUe),e(Og,JUe),e(Og,Zx),e(Zx,YUe),e(Og,KUe),e(M,ZUe),e(M,Ls),e(Ls,OU),e(OU,eJe),e(Ls,oJe),e(Ls,ek),e(ek,rJe),e(Ls,tJe),e(Ls,ok),e(ok,aJe),e(Ls,nJe),e(M,sJe),e(M,Bs),e(Bs,XU),e(XU,lJe),e(Bs,iJe),e(Bs,rk),e(rk,dJe),e(Bs,cJe),e(Bs,tk),e(tk,fJe),e(Bs,mJe),e(M,gJe),e(M,xs),e(xs,VU),e(VU,hJe),e(xs,pJe),e(xs,ak),e(ak,_Je),e(xs,uJe),e(xs,nk),e(nk,bJe),e(xs,vJe),e(M,TJe),e(M,Xg),e(Xg,zU),e(zU,FJe),e(Xg,CJe),e(Xg,sk),e(sk,MJe),e(Xg,EJe),e(M,yJe),e(M,Vg),e(Vg,WU),e(WU,wJe),e(Vg,AJe),e(Vg,lk),e(lk,LJe),e(Vg,BJe),e(M,xJe),e(M,zg),e(zg,QU),e(QU,kJe),e(zg,RJe),e(zg,ik),e(ik,SJe),e(zg,PJe),e(M,$Je),e(M,Wg),e(Wg,HU),e(HU,IJe),e(Wg,DJe),e(Wg,dk),e(dk,jJe),e(Wg,NJe),e(M,qJe),e(M,ks),e(ks,UU),e(UU,GJe),e(ks,OJe),e(ks,ck),e(ck,XJe),e(ks,VJe),e(ks,fk),e(fk,zJe),e(ks,WJe),e(M,QJe),e(M,Qg),e(Qg,JU),e(JU,HJe),e(Qg,UJe),e(Qg,mk),e(mk,JJe),e(Qg,YJe),e(M,KJe),e(M,Hg),e(Hg,YU),e(YU,ZJe),e(Hg,eYe),e(Hg,gk),e(gk,oYe),e(Hg,rYe),e(M,tYe),e(M,Rs),e(Rs,KU),e(KU,aYe),e(Rs,nYe),e(Rs,hk),e(hk,sYe),e(Rs,lYe),e(Rs,pk),e(pk,iYe),e(Rs,dYe),e(M,cYe),e(M,Ss),e(Ss,ZU),e(ZU,fYe),e(Ss,mYe),e(Ss,_k),e(_k,gYe),e(Ss,hYe),e(Ss,uk),e(uk,pYe),e(Ss,_Ye),e(mo,uYe),e(mo,eJ),e(eJ,bYe),e(mo,vYe),g(OM,mo,null),e(Vo,TYe),e(Vo,Ug),g(XM,Ug,null),e(Ug,FYe),e(Ug,oJ),e(oJ,CYe),b(c,X7e,u),b(c,qi,u),e(qi,Jg),e(Jg,rJ),g(VM,rJ,null),e(qi,MYe),e(qi,tJ),e(tJ,EYe),b(c,V7e,u),b(c,zo,u),g(zM,zo,null),e(zo,yYe),e(zo,WM),e(WM,wYe),e(WM,bk),e(bk,AYe),e(WM,LYe),e(zo,BYe),e(zo,QM),e(QM,xYe),e(QM,aJ),e(aJ,kYe),e(QM,RYe),e(zo,SYe),e(zo,xe),g(HM,xe,null),e(xe,PYe),e(xe,nJ),e(nJ,$Ye),e(xe,IYe),e(xe,ja),e(ja,DYe),e(ja,sJ),e(sJ,jYe),e(ja,NYe),e(ja,lJ),e(lJ,qYe),e(ja,GYe),e(ja,iJ),e(iJ,OYe),e(ja,XYe),e(xe,VYe),e(xe,ae),e(ae,Yg),e(Yg,dJ),e(dJ,zYe),e(Yg,WYe),e(Yg,vk),e(vk,QYe),e(Yg,HYe),e(ae,UYe),e(ae,Kg),e(Kg,cJ),e(cJ,JYe),e(Kg,YYe),e(Kg,Tk),e(Tk,KYe),e(Kg,ZYe),e(ae,eKe),e(ae,Zg),e(Zg,fJ),e(fJ,oKe),e(Zg,rKe),e(Zg,Fk),e(Fk,tKe),e(Zg,aKe),e(ae,nKe),e(ae,eh),e(eh,mJ),e(mJ,sKe),e(eh,lKe),e(eh,Ck),e(Ck,iKe),e(eh,dKe),e(ae,cKe),e(ae,oh),e(oh,gJ),e(gJ,fKe),e(oh,mKe),e(oh,Mk),e(Mk,gKe),e(oh,hKe),e(ae,pKe),e(ae,rh),e(rh,hJ),e(hJ,_Ke),e(rh,uKe),e(rh,Ek),e(Ek,bKe),e(rh,vKe),e(ae,TKe),e(ae,th),e(th,pJ),e(pJ,FKe),e(th,CKe),e(th,yk),e(yk,MKe),e(th,EKe),e(ae,yKe),e(ae,ah),e(ah,_J),e(_J,wKe),e(ah,AKe),e(ah,wk),e(wk,LKe),e(ah,BKe),e(ae,xKe),e(ae,nh),e(nh,uJ),e(uJ,kKe),e(nh,RKe),e(nh,Ak),e(Ak,SKe),e(nh,PKe),e(ae,$Ke),e(ae,sh),e(sh,bJ),e(bJ,IKe),e(sh,DKe),e(sh,Lk),e(Lk,jKe),e(sh,NKe),e(ae,qKe),e(ae,lh),e(lh,vJ),e(vJ,GKe),e(lh,OKe),e(lh,Bk),e(Bk,XKe),e(lh,VKe),e(ae,zKe),e(ae,ih),e(ih,TJ),e(TJ,WKe),e(ih,QKe),e(ih,xk),e(xk,HKe),e(ih,UKe),e(ae,JKe),e(ae,dh),e(dh,FJ),e(FJ,YKe),e(dh,KKe),e(dh,kk),e(kk,ZKe),e(dh,eZe),e(ae,oZe),e(ae,ch),e(ch,CJ),e(CJ,rZe),e(ch,tZe),e(ch,Rk),e(Rk,aZe),e(ch,nZe),e(ae,sZe),e(ae,fh),e(fh,MJ),e(MJ,lZe),e(fh,iZe),e(fh,Sk),e(Sk,dZe),e(fh,cZe),e(ae,fZe),e(ae,mh),e(mh,EJ),e(EJ,mZe),e(mh,gZe),e(mh,Pk),e(Pk,hZe),e(mh,pZe),e(xe,_Ze),g(gh,xe,null),e(xe,uZe),e(xe,yJ),e(yJ,bZe),e(xe,vZe),g(UM,xe,null),e(zo,TZe),e(zo,hh),g(JM,hh,null),e(hh,FZe),e(hh,wJ),e(wJ,CZe),b(c,z7e,u),b(c,Gi,u),e(Gi,ph),e(ph,AJ),g(YM,AJ,null),e(Gi,MZe),e(Gi,LJ),e(LJ,EZe),b(c,W7e,u),b(c,Wo,u),g(KM,Wo,null),e(Wo,yZe),e(Wo,ZM),e(ZM,wZe),e(ZM,$k),e($k,AZe),e(ZM,LZe),e(Wo,BZe),e(Wo,eE),e(eE,xZe),e(eE,BJ),e(BJ,kZe),e(eE,RZe),e(Wo,SZe),e(Wo,ke),g(oE,ke,null),e(ke,PZe),e(ke,xJ),e(xJ,$Ze),e(ke,IZe),e(ke,Oi),e(Oi,DZe),e(Oi,kJ),e(kJ,jZe),e(Oi,NZe),e(Oi,RJ),e(RJ,qZe),e(Oi,GZe),e(ke,OZe),e(ke,we),e(we,_h),e(_h,SJ),e(SJ,XZe),e(_h,VZe),e(_h,Ik),e(Ik,zZe),e(_h,WZe),e(we,QZe),e(we,uh),e(uh,PJ),e(PJ,HZe),e(uh,UZe),e(uh,Dk),e(Dk,JZe),e(uh,YZe),e(we,KZe),e(we,bh),e(bh,$J),e($J,ZZe),e(bh,eeo),e(bh,jk),e(jk,oeo),e(bh,reo),e(we,teo),e(we,vh),e(vh,IJ),e(IJ,aeo),e(vh,neo),e(vh,Nk),e(Nk,seo),e(vh,leo),e(we,ieo),e(we,Th),e(Th,DJ),e(DJ,deo),e(Th,ceo),e(Th,qk),e(qk,feo),e(Th,meo),e(we,geo),e(we,Fh),e(Fh,jJ),e(jJ,heo),e(Fh,peo),e(Fh,Gk),e(Gk,_eo),e(Fh,ueo),e(we,beo),e(we,Ch),e(Ch,NJ),e(NJ,veo),e(Ch,Teo),e(Ch,Ok),e(Ok,Feo),e(Ch,Ceo),e(we,Meo),e(we,Mh),e(Mh,qJ),e(qJ,Eeo),e(Mh,yeo),e(Mh,Xk),e(Xk,weo),e(Mh,Aeo),e(ke,Leo),g(Eh,ke,null),e(ke,Beo),e(ke,GJ),e(GJ,xeo),e(ke,keo),g(rE,ke,null),e(Wo,Reo),e(Wo,yh),g(tE,yh,null),e(yh,Seo),e(yh,OJ),e(OJ,Peo),b(c,Q7e,u),b(c,Xi,u),e(Xi,wh),e(wh,XJ),g(aE,XJ,null),e(Xi,$eo),e(Xi,VJ),e(VJ,Ieo),b(c,H7e,u),b(c,Qo,u),g(nE,Qo,null),e(Qo,Deo),e(Qo,Vi),e(Vi,jeo),e(Vi,zJ),e(zJ,Neo),e(Vi,qeo),e(Vi,WJ),e(WJ,Geo),e(Vi,Oeo),e(Qo,Xeo),e(Qo,sE),e(sE,Veo),e(sE,QJ),e(QJ,zeo),e(sE,Weo),e(Qo,Qeo),e(Qo,qr),g(lE,qr,null),e(qr,Heo),e(qr,HJ),e(HJ,Ueo),e(qr,Jeo),e(qr,zi),e(zi,Yeo),e(zi,UJ),e(UJ,Keo),e(zi,Zeo),e(zi,JJ),e(JJ,eoo),e(zi,ooo),e(qr,roo),e(qr,YJ),e(YJ,too),e(qr,aoo),g(iE,qr,null),e(Qo,noo),e(Qo,Re),g(dE,Re,null),e(Re,soo),e(Re,KJ),e(KJ,loo),e(Re,ioo),e(Re,Na),e(Na,doo),e(Na,ZJ),e(ZJ,coo),e(Na,foo),e(Na,eY),e(eY,moo),e(Na,goo),e(Na,oY),e(oY,hoo),e(Na,poo),e(Re,_oo),e(Re,F),e(F,Ah),e(Ah,rY),e(rY,uoo),e(Ah,boo),e(Ah,Vk),e(Vk,voo),e(Ah,Too),e(F,Foo),e(F,Lh),e(Lh,tY),e(tY,Coo),e(Lh,Moo),e(Lh,zk),e(zk,Eoo),e(Lh,yoo),e(F,woo),e(F,Bh),e(Bh,aY),e(aY,Aoo),e(Bh,Loo),e(Bh,Wk),e(Wk,Boo),e(Bh,xoo),e(F,koo),e(F,xh),e(xh,nY),e(nY,Roo),e(xh,Soo),e(xh,Qk),e(Qk,Poo),e(xh,$oo),e(F,Ioo),e(F,kh),e(kh,sY),e(sY,Doo),e(kh,joo),e(kh,Hk),e(Hk,Noo),e(kh,qoo),e(F,Goo),e(F,Rh),e(Rh,lY),e(lY,Ooo),e(Rh,Xoo),e(Rh,Uk),e(Uk,Voo),e(Rh,zoo),e(F,Woo),e(F,Sh),e(Sh,iY),e(iY,Qoo),e(Sh,Hoo),e(Sh,Jk),e(Jk,Uoo),e(Sh,Joo),e(F,Yoo),e(F,Ph),e(Ph,dY),e(dY,Koo),e(Ph,Zoo),e(Ph,Yk),e(Yk,ero),e(Ph,oro),e(F,rro),e(F,$h),e($h,cY),e(cY,tro),e($h,aro),e($h,Kk),e(Kk,nro),e($h,sro),e(F,lro),e(F,Ih),e(Ih,fY),e(fY,iro),e(Ih,dro),e(Ih,Zk),e(Zk,cro),e(Ih,fro),e(F,mro),e(F,Dh),e(Dh,mY),e(mY,gro),e(Dh,hro),e(Dh,eR),e(eR,pro),e(Dh,_ro),e(F,uro),e(F,jh),e(jh,gY),e(gY,bro),e(jh,vro),e(jh,oR),e(oR,Tro),e(jh,Fro),e(F,Cro),e(F,Nh),e(Nh,hY),e(hY,Mro),e(Nh,Ero),e(Nh,rR),e(rR,yro),e(Nh,wro),e(F,Aro),e(F,qh),e(qh,pY),e(pY,Lro),e(qh,Bro),e(qh,tR),e(tR,xro),e(qh,kro),e(F,Rro),e(F,Gh),e(Gh,_Y),e(_Y,Sro),e(Gh,Pro),e(Gh,aR),e(aR,$ro),e(Gh,Iro),e(F,Dro),e(F,Oh),e(Oh,uY),e(uY,jro),e(Oh,Nro),e(Oh,nR),e(nR,qro),e(Oh,Gro),e(F,Oro),e(F,Xh),e(Xh,bY),e(bY,Xro),e(Xh,Vro),e(Xh,sR),e(sR,zro),e(Xh,Wro),e(F,Qro),e(F,Vh),e(Vh,vY),e(vY,Hro),e(Vh,Uro),e(Vh,lR),e(lR,Jro),e(Vh,Yro),e(F,Kro),e(F,zh),e(zh,TY),e(TY,Zro),e(zh,eto),e(zh,iR),e(iR,oto),e(zh,rto),e(F,tto),e(F,Wh),e(Wh,FY),e(FY,ato),e(Wh,nto),e(Wh,dR),e(dR,sto),e(Wh,lto),e(F,ito),e(F,Qh),e(Qh,CY),e(CY,dto),e(Qh,cto),e(Qh,cR),e(cR,fto),e(Qh,mto),e(F,gto),e(F,Hh),e(Hh,MY),e(MY,hto),e(Hh,pto),e(Hh,fR),e(fR,_to),e(Hh,uto),e(F,bto),e(F,Uh),e(Uh,EY),e(EY,vto),e(Uh,Tto),e(Uh,mR),e(mR,Fto),e(Uh,Cto),e(F,Mto),e(F,Jh),e(Jh,yY),e(yY,Eto),e(Jh,yto),e(Jh,gR),e(gR,wto),e(Jh,Ato),e(F,Lto),e(F,Yh),e(Yh,wY),e(wY,Bto),e(Yh,xto),e(Yh,hR),e(hR,kto),e(Yh,Rto),e(F,Sto),e(F,Kh),e(Kh,AY),e(AY,Pto),e(Kh,$to),e(Kh,pR),e(pR,Ito),e(Kh,Dto),e(F,jto),e(F,Zh),e(Zh,LY),e(LY,Nto),e(Zh,qto),e(Zh,_R),e(_R,Gto),e(Zh,Oto),e(F,Xto),e(F,Ps),e(Ps,BY),e(BY,Vto),e(Ps,zto),e(Ps,uR),e(uR,Wto),e(Ps,Qto),e(Ps,bR),e(bR,Hto),e(Ps,Uto),e(F,Jto),e(F,ep),e(ep,xY),e(xY,Yto),e(ep,Kto),e(ep,vR),e(vR,Zto),e(ep,eao),e(F,oao),e(F,op),e(op,kY),e(kY,rao),e(op,tao),e(op,TR),e(TR,aao),e(op,nao),e(F,sao),e(F,rp),e(rp,RY),e(RY,lao),e(rp,iao),e(rp,FR),e(FR,dao),e(rp,cao),e(F,fao),e(F,tp),e(tp,SY),e(SY,mao),e(tp,gao),e(tp,CR),e(CR,hao),e(tp,pao),e(F,_ao),e(F,ap),e(ap,PY),e(PY,uao),e(ap,bao),e(ap,MR),e(MR,vao),e(ap,Tao),e(F,Fao),e(F,np),e(np,$Y),e($Y,Cao),e(np,Mao),e(np,ER),e(ER,Eao),e(np,yao),e(F,wao),e(F,sp),e(sp,IY),e(IY,Aao),e(sp,Lao),e(sp,yR),e(yR,Bao),e(sp,xao),e(F,kao),e(F,lp),e(lp,DY),e(DY,Rao),e(lp,Sao),e(lp,wR),e(wR,Pao),e(lp,$ao),e(F,Iao),e(F,ip),e(ip,jY),e(jY,Dao),e(ip,jao),e(ip,AR),e(AR,Nao),e(ip,qao),e(F,Gao),e(F,dp),e(dp,NY),e(NY,Oao),e(dp,Xao),e(dp,LR),e(LR,Vao),e(dp,zao),e(F,Wao),e(F,cp),e(cp,qY),e(qY,Qao),e(cp,Hao),e(cp,BR),e(BR,Uao),e(cp,Jao),e(F,Yao),e(F,fp),e(fp,GY),e(GY,Kao),e(fp,Zao),e(fp,xR),e(xR,eno),e(fp,ono),e(F,rno),e(F,mp),e(mp,OY),e(OY,tno),e(mp,ano),e(mp,kR),e(kR,nno),e(mp,sno),e(F,lno),e(F,gp),e(gp,XY),e(XY,ino),e(gp,dno),e(gp,RR),e(RR,cno),e(gp,fno),e(F,mno),e(F,hp),e(hp,VY),e(VY,gno),e(hp,hno),e(hp,SR),e(SR,pno),e(hp,_no),e(F,uno),e(F,pp),e(pp,zY),e(zY,bno),e(pp,vno),e(pp,PR),e(PR,Tno),e(pp,Fno),e(F,Cno),e(F,_p),e(_p,WY),e(WY,Mno),e(_p,Eno),e(_p,$R),e($R,yno),e(_p,wno),e(F,Ano),e(F,up),e(up,QY),e(QY,Lno),e(up,Bno),e(up,IR),e(IR,xno),e(up,kno),e(F,Rno),e(F,bp),e(bp,HY),e(HY,Sno),e(bp,Pno),e(bp,DR),e(DR,$no),e(bp,Ino),e(F,Dno),e(F,vp),e(vp,UY),e(UY,jno),e(vp,Nno),e(vp,jR),e(jR,qno),e(vp,Gno),e(F,Ono),e(F,Tp),e(Tp,JY),e(JY,Xno),e(Tp,Vno),e(Tp,NR),e(NR,zno),e(Tp,Wno),e(F,Qno),e(F,Fp),e(Fp,YY),e(YY,Hno),e(Fp,Uno),e(Fp,qR),e(qR,Jno),e(Fp,Yno),e(F,Kno),e(F,Cp),e(Cp,KY),e(KY,Zno),e(Cp,eso),e(Cp,GR),e(GR,oso),e(Cp,rso),e(F,tso),e(F,Mp),e(Mp,ZY),e(ZY,aso),e(Mp,nso),e(Mp,OR),e(OR,sso),e(Mp,lso),e(F,iso),e(F,Ep),e(Ep,eK),e(eK,dso),e(Ep,cso),e(Ep,XR),e(XR,fso),e(Ep,mso),e(F,gso),e(F,yp),e(yp,oK),e(oK,hso),e(yp,pso),e(yp,VR),e(VR,_so),e(yp,uso),e(F,bso),e(F,wp),e(wp,rK),e(rK,vso),e(wp,Tso),e(wp,zR),e(zR,Fso),e(wp,Cso),e(F,Mso),e(F,Ap),e(Ap,tK),e(tK,Eso),e(Ap,yso),e(Ap,WR),e(WR,wso),e(Ap,Aso),e(F,Lso),e(F,Lp),e(Lp,aK),e(aK,Bso),e(Lp,xso),e(Lp,QR),e(QR,kso),e(Lp,Rso),e(F,Sso),e(F,Bp),e(Bp,nK),e(nK,Pso),e(Bp,$so),e(Bp,HR),e(HR,Iso),e(Bp,Dso),e(F,jso),e(F,xp),e(xp,sK),e(sK,Nso),e(xp,qso),e(xp,UR),e(UR,Gso),e(xp,Oso),e(F,Xso),e(F,kp),e(kp,lK),e(lK,Vso),e(kp,zso),e(kp,JR),e(JR,Wso),e(kp,Qso),e(F,Hso),e(F,Rp),e(Rp,iK),e(iK,Uso),e(Rp,Jso),e(Rp,YR),e(YR,Yso),e(Rp,Kso),e(F,Zso),e(F,Sp),e(Sp,dK),e(dK,elo),e(Sp,olo),e(Sp,KR),e(KR,rlo),e(Sp,tlo),e(F,alo),e(F,Pp),e(Pp,cK),e(cK,nlo),e(Pp,slo),e(Pp,ZR),e(ZR,llo),e(Pp,ilo),e(F,dlo),e(F,$p),e($p,fK),e(fK,clo),e($p,flo),e($p,eS),e(eS,mlo),e($p,glo),e(F,hlo),e(F,Ip),e(Ip,mK),e(mK,plo),e(Ip,_lo),e(Ip,oS),e(oS,ulo),e(Ip,blo),e(F,vlo),e(F,Dp),e(Dp,gK),e(gK,Tlo),e(Dp,Flo),e(Dp,rS),e(rS,Clo),e(Dp,Mlo),e(F,Elo),e(F,jp),e(jp,hK),e(hK,ylo),e(jp,wlo),e(jp,tS),e(tS,Alo),e(jp,Llo),e(F,Blo),e(F,Np),e(Np,pK),e(pK,xlo),e(Np,klo),e(Np,aS),e(aS,Rlo),e(Np,Slo),e(F,Plo),e(F,qp),e(qp,_K),e(_K,$lo),e(qp,Ilo),e(qp,nS),e(nS,Dlo),e(qp,jlo),e(F,Nlo),e(F,Gp),e(Gp,uK),e(uK,qlo),e(Gp,Glo),e(Gp,sS),e(sS,Olo),e(Gp,Xlo),e(F,Vlo),e(F,Op),e(Op,bK),e(bK,zlo),e(Op,Wlo),e(Op,lS),e(lS,Qlo),e(Op,Hlo),e(F,Ulo),e(F,Xp),e(Xp,vK),e(vK,Jlo),e(Xp,Ylo),e(Xp,iS),e(iS,Klo),e(Xp,Zlo),e(F,eio),e(F,Vp),e(Vp,TK),e(TK,oio),e(Vp,rio),e(Vp,dS),e(dS,tio),e(Vp,aio),e(F,nio),e(F,zp),e(zp,FK),e(FK,sio),e(zp,lio),e(zp,cS),e(cS,iio),e(zp,dio),e(F,cio),e(F,Wp),e(Wp,CK),e(CK,fio),e(Wp,mio),e(Wp,fS),e(fS,gio),e(Wp,hio),e(F,pio),e(F,Qp),e(Qp,MK),e(MK,_io),e(Qp,uio),e(Qp,mS),e(mS,bio),e(Qp,vio),e(F,Tio),e(F,Hp),e(Hp,EK),e(EK,Fio),e(Hp,Cio),e(Hp,gS),e(gS,Mio),e(Hp,Eio),e(F,yio),e(F,Up),e(Up,yK),e(yK,wio),e(Up,Aio),e(Up,hS),e(hS,Lio),e(Up,Bio),e(F,xio),e(F,Jp),e(Jp,wK),e(wK,kio),e(Jp,Rio),e(Jp,pS),e(pS,Sio),e(Jp,Pio),e(F,$io),e(F,Yp),e(Yp,AK),e(AK,Iio),e(Yp,Dio),e(Yp,_S),e(_S,jio),e(Yp,Nio),e(F,qio),e(F,Kp),e(Kp,LK),e(LK,Gio),e(Kp,Oio),e(Kp,uS),e(uS,Xio),e(Kp,Vio),e(F,zio),e(F,Zp),e(Zp,BK),e(BK,Wio),e(Zp,Qio),e(Zp,bS),e(bS,Hio),e(Zp,Uio),e(F,Jio),e(F,e_),e(e_,xK),e(xK,Yio),e(e_,Kio),e(e_,vS),e(vS,Zio),e(e_,edo),e(F,odo),e(F,o_),e(o_,kK),e(kK,rdo),e(o_,tdo),e(o_,TS),e(TS,ado),e(o_,ndo),e(F,sdo),e(F,r_),e(r_,RK),e(RK,ldo),e(r_,ido),e(r_,FS),e(FS,ddo),e(r_,cdo),e(F,fdo),e(F,t_),e(t_,SK),e(SK,mdo),e(t_,gdo),e(t_,CS),e(CS,hdo),e(t_,pdo),e(F,_do),e(F,a_),e(a_,PK),e(PK,udo),e(a_,bdo),e(a_,MS),e(MS,vdo),e(a_,Tdo),e(Re,Fdo),e(Re,n_),e(n_,Cdo),e(n_,$K),e($K,Mdo),e(n_,Edo),e(n_,IK),e(IK,ydo),e(Re,wdo),e(Re,DK),e(DK,Ado),e(Re,Ldo),g(cE,Re,null),b(c,U7e,u),b(c,Wi,u),e(Wi,s_),e(s_,jK),g(fE,jK,null),e(Wi,Bdo),e(Wi,NK),e(NK,xdo),b(c,J7e,u),b(c,Ho,u),g(mE,Ho,null),e(Ho,kdo),e(Ho,Qi),e(Qi,Rdo),e(Qi,qK),e(qK,Sdo),e(Qi,Pdo),e(Qi,GK),e(GK,$do),e(Qi,Ido),e(Ho,Ddo),e(Ho,gE),e(gE,jdo),e(gE,OK),e(OK,Ndo),e(gE,qdo),e(Ho,Gdo),e(Ho,Gr),g(hE,Gr,null),e(Gr,Odo),e(Gr,XK),e(XK,Xdo),e(Gr,Vdo),e(Gr,Hi),e(Hi,zdo),e(Hi,VK),e(VK,Wdo),e(Hi,Qdo),e(Hi,zK),e(zK,Hdo),e(Hi,Udo),e(Gr,Jdo),e(Gr,WK),e(WK,Ydo),e(Gr,Kdo),g(pE,Gr,null),e(Ho,Zdo),e(Ho,Se),g(_E,Se,null),e(Se,eco),e(Se,QK),e(QK,oco),e(Se,rco),e(Se,qa),e(qa,tco),e(qa,HK),e(HK,aco),e(qa,nco),e(qa,UK),e(UK,sco),e(qa,lco),e(qa,JK),e(JK,ico),e(qa,dco),e(Se,cco),e(Se,k),e(k,l_),e(l_,YK),e(YK,fco),e(l_,mco),e(l_,ES),e(ES,gco),e(l_,hco),e(k,pco),e(k,i_),e(i_,KK),e(KK,_co),e(i_,uco),e(i_,yS),e(yS,bco),e(i_,vco),e(k,Tco),e(k,d_),e(d_,ZK),e(ZK,Fco),e(d_,Cco),e(d_,wS),e(wS,Mco),e(d_,Eco),e(k,yco),e(k,c_),e(c_,eZ),e(eZ,wco),e(c_,Aco),e(c_,AS),e(AS,Lco),e(c_,Bco),e(k,xco),e(k,f_),e(f_,oZ),e(oZ,kco),e(f_,Rco),e(f_,LS),e(LS,Sco),e(f_,Pco),e(k,$co),e(k,m_),e(m_,rZ),e(rZ,Ico),e(m_,Dco),e(m_,BS),e(BS,jco),e(m_,Nco),e(k,qco),e(k,g_),e(g_,tZ),e(tZ,Gco),e(g_,Oco),e(g_,xS),e(xS,Xco),e(g_,Vco),e(k,zco),e(k,h_),e(h_,aZ),e(aZ,Wco),e(h_,Qco),e(h_,kS),e(kS,Hco),e(h_,Uco),e(k,Jco),e(k,p_),e(p_,nZ),e(nZ,Yco),e(p_,Kco),e(p_,RS),e(RS,Zco),e(p_,efo),e(k,ofo),e(k,__),e(__,sZ),e(sZ,rfo),e(__,tfo),e(__,SS),e(SS,afo),e(__,nfo),e(k,sfo),e(k,u_),e(u_,lZ),e(lZ,lfo),e(u_,ifo),e(u_,PS),e(PS,dfo),e(u_,cfo),e(k,ffo),e(k,b_),e(b_,iZ),e(iZ,mfo),e(b_,gfo),e(b_,$S),e($S,hfo),e(b_,pfo),e(k,_fo),e(k,v_),e(v_,dZ),e(dZ,ufo),e(v_,bfo),e(v_,IS),e(IS,vfo),e(v_,Tfo),e(k,Ffo),e(k,T_),e(T_,cZ),e(cZ,Cfo),e(T_,Mfo),e(T_,DS),e(DS,Efo),e(T_,yfo),e(k,wfo),e(k,F_),e(F_,fZ),e(fZ,Afo),e(F_,Lfo),e(F_,jS),e(jS,Bfo),e(F_,xfo),e(k,kfo),e(k,C_),e(C_,mZ),e(mZ,Rfo),e(C_,Sfo),e(C_,NS),e(NS,Pfo),e(C_,$fo),e(k,Ifo),e(k,M_),e(M_,gZ),e(gZ,Dfo),e(M_,jfo),e(M_,qS),e(qS,Nfo),e(M_,qfo),e(k,Gfo),e(k,E_),e(E_,hZ),e(hZ,Ofo),e(E_,Xfo),e(E_,GS),e(GS,Vfo),e(E_,zfo),e(k,Wfo),e(k,y_),e(y_,pZ),e(pZ,Qfo),e(y_,Hfo),e(y_,OS),e(OS,Ufo),e(y_,Jfo),e(k,Yfo),e(k,w_),e(w_,_Z),e(_Z,Kfo),e(w_,Zfo),e(w_,XS),e(XS,emo),e(w_,omo),e(k,rmo),e(k,A_),e(A_,uZ),e(uZ,tmo),e(A_,amo),e(A_,VS),e(VS,nmo),e(A_,smo),e(k,lmo),e(k,L_),e(L_,bZ),e(bZ,imo),e(L_,dmo),e(L_,zS),e(zS,cmo),e(L_,fmo),e(k,mmo),e(k,B_),e(B_,vZ),e(vZ,gmo),e(B_,hmo),e(B_,WS),e(WS,pmo),e(B_,_mo),e(k,umo),e(k,x_),e(x_,TZ),e(TZ,bmo),e(x_,vmo),e(x_,QS),e(QS,Tmo),e(x_,Fmo),e(k,Cmo),e(k,k_),e(k_,FZ),e(FZ,Mmo),e(k_,Emo),e(k_,HS),e(HS,ymo),e(k_,wmo),e(k,Amo),e(k,R_),e(R_,CZ),e(CZ,Lmo),e(R_,Bmo),e(R_,US),e(US,xmo),e(R_,kmo),e(k,Rmo),e(k,S_),e(S_,MZ),e(MZ,Smo),e(S_,Pmo),e(S_,JS),e(JS,$mo),e(S_,Imo),e(k,Dmo),e(k,P_),e(P_,EZ),e(EZ,jmo),e(P_,Nmo),e(P_,YS),e(YS,qmo),e(P_,Gmo),e(k,Omo),e(k,$_),e($_,yZ),e(yZ,Xmo),e($_,Vmo),e($_,KS),e(KS,zmo),e($_,Wmo),e(k,Qmo),e(k,I_),e(I_,wZ),e(wZ,Hmo),e(I_,Umo),e(I_,ZS),e(ZS,Jmo),e(I_,Ymo),e(k,Kmo),e(k,D_),e(D_,AZ),e(AZ,Zmo),e(D_,ego),e(D_,eP),e(eP,ogo),e(D_,rgo),e(k,tgo),e(k,j_),e(j_,LZ),e(LZ,ago),e(j_,ngo),e(j_,oP),e(oP,sgo),e(j_,lgo),e(k,igo),e(k,N_),e(N_,BZ),e(BZ,dgo),e(N_,cgo),e(N_,rP),e(rP,fgo),e(N_,mgo),e(k,ggo),e(k,q_),e(q_,xZ),e(xZ,hgo),e(q_,pgo),e(q_,tP),e(tP,_go),e(q_,ugo),e(k,bgo),e(k,G_),e(G_,kZ),e(kZ,vgo),e(G_,Tgo),e(G_,aP),e(aP,Fgo),e(G_,Cgo),e(k,Mgo),e(k,O_),e(O_,RZ),e(RZ,Ego),e(O_,ygo),e(O_,nP),e(nP,wgo),e(O_,Ago),e(k,Lgo),e(k,X_),e(X_,SZ),e(SZ,Bgo),e(X_,xgo),e(X_,sP),e(sP,kgo),e(X_,Rgo),e(k,Sgo),e(k,V_),e(V_,PZ),e(PZ,Pgo),e(V_,$go),e(V_,lP),e(lP,Igo),e(V_,Dgo),e(k,jgo),e(k,z_),e(z_,$Z),e($Z,Ngo),e(z_,qgo),e(z_,iP),e(iP,Ggo),e(z_,Ogo),e(Se,Xgo),e(Se,W_),e(W_,Vgo),e(W_,IZ),e(IZ,zgo),e(W_,Wgo),e(W_,DZ),e(DZ,Qgo),e(Se,Hgo),e(Se,jZ),e(jZ,Ugo),e(Se,Jgo),g(uE,Se,null),b(c,Y7e,u),b(c,Ui,u),e(Ui,Q_),e(Q_,NZ),g(bE,NZ,null),e(Ui,Ygo),e(Ui,qZ),e(qZ,Kgo),b(c,K7e,u),b(c,Uo,u),g(vE,Uo,null),e(Uo,Zgo),e(Uo,Ji),e(Ji,eho),e(Ji,GZ),e(GZ,oho),e(Ji,rho),e(Ji,OZ),e(OZ,tho),e(Ji,aho),e(Uo,nho),e(Uo,TE),e(TE,sho),e(TE,XZ),e(XZ,lho),e(TE,iho),e(Uo,dho),e(Uo,Or),g(FE,Or,null),e(Or,cho),e(Or,VZ),e(VZ,fho),e(Or,mho),e(Or,Yi),e(Yi,gho),e(Yi,zZ),e(zZ,hho),e(Yi,pho),e(Yi,WZ),e(WZ,_ho),e(Yi,uho),e(Or,bho),e(Or,QZ),e(QZ,vho),e(Or,Tho),g(CE,Or,null),e(Uo,Fho),e(Uo,Pe),g(ME,Pe,null),e(Pe,Cho),e(Pe,HZ),e(HZ,Mho),e(Pe,Eho),e(Pe,Ga),e(Ga,yho),e(Ga,UZ),e(UZ,who),e(Ga,Aho),e(Ga,JZ),e(JZ,Lho),e(Ga,Bho),e(Ga,YZ),e(YZ,xho),e(Ga,kho),e(Pe,Rho),e(Pe,$),e($,H_),e(H_,KZ),e(KZ,Sho),e(H_,Pho),e(H_,dP),e(dP,$ho),e(H_,Iho),e($,Dho),e($,U_),e(U_,ZZ),e(ZZ,jho),e(U_,Nho),e(U_,cP),e(cP,qho),e(U_,Gho),e($,Oho),e($,J_),e(J_,eee),e(eee,Xho),e(J_,Vho),e(J_,fP),e(fP,zho),e(J_,Who),e($,Qho),e($,Y_),e(Y_,oee),e(oee,Hho),e(Y_,Uho),e(Y_,mP),e(mP,Jho),e(Y_,Yho),e($,Kho),e($,K_),e(K_,ree),e(ree,Zho),e(K_,epo),e(K_,gP),e(gP,opo),e(K_,rpo),e($,tpo),e($,Z_),e(Z_,tee),e(tee,apo),e(Z_,npo),e(Z_,hP),e(hP,spo),e(Z_,lpo),e($,ipo),e($,eu),e(eu,aee),e(aee,dpo),e(eu,cpo),e(eu,pP),e(pP,fpo),e(eu,mpo),e($,gpo),e($,ou),e(ou,nee),e(nee,hpo),e(ou,ppo),e(ou,_P),e(_P,_po),e(ou,upo),e($,bpo),e($,ru),e(ru,see),e(see,vpo),e(ru,Tpo),e(ru,uP),e(uP,Fpo),e(ru,Cpo),e($,Mpo),e($,tu),e(tu,lee),e(lee,Epo),e(tu,ypo),e(tu,bP),e(bP,wpo),e(tu,Apo),e($,Lpo),e($,au),e(au,iee),e(iee,Bpo),e(au,xpo),e(au,vP),e(vP,kpo),e(au,Rpo),e($,Spo),e($,nu),e(nu,dee),e(dee,Ppo),e(nu,$po),e(nu,TP),e(TP,Ipo),e(nu,Dpo),e($,jpo),e($,su),e(su,cee),e(cee,Npo),e(su,qpo),e(su,FP),e(FP,Gpo),e(su,Opo),e($,Xpo),e($,lu),e(lu,fee),e(fee,Vpo),e(lu,zpo),e(lu,CP),e(CP,Wpo),e(lu,Qpo),e($,Hpo),e($,iu),e(iu,mee),e(mee,Upo),e(iu,Jpo),e(iu,MP),e(MP,Ypo),e(iu,Kpo),e($,Zpo),e($,du),e(du,gee),e(gee,e_o),e(du,o_o),e(du,EP),e(EP,r_o),e(du,t_o),e($,a_o),e($,cu),e(cu,hee),e(hee,n_o),e(cu,s_o),e(cu,yP),e(yP,l_o),e(cu,i_o),e($,d_o),e($,fu),e(fu,pee),e(pee,c_o),e(fu,f_o),e(fu,wP),e(wP,m_o),e(fu,g_o),e($,h_o),e($,mu),e(mu,_ee),e(_ee,p_o),e(mu,__o),e(mu,AP),e(AP,u_o),e(mu,b_o),e($,v_o),e($,gu),e(gu,uee),e(uee,T_o),e(gu,F_o),e(gu,LP),e(LP,C_o),e(gu,M_o),e($,E_o),e($,hu),e(hu,bee),e(bee,y_o),e(hu,w_o),e(hu,BP),e(BP,A_o),e(hu,L_o),e($,B_o),e($,pu),e(pu,vee),e(vee,x_o),e(pu,k_o),e(pu,xP),e(xP,R_o),e(pu,S_o),e($,P_o),e($,_u),e(_u,Tee),e(Tee,$_o),e(_u,I_o),e(_u,kP),e(kP,D_o),e(_u,j_o),e($,N_o),e($,uu),e(uu,Fee),e(Fee,q_o),e(uu,G_o),e(uu,RP),e(RP,O_o),e(uu,X_o),e($,V_o),e($,bu),e(bu,Cee),e(Cee,z_o),e(bu,W_o),e(bu,SP),e(SP,Q_o),e(bu,H_o),e($,U_o),e($,vu),e(vu,Mee),e(Mee,J_o),e(vu,Y_o),e(vu,PP),e(PP,K_o),e(vu,Z_o),e($,euo),e($,Tu),e(Tu,Eee),e(Eee,ouo),e(Tu,ruo),e(Tu,$P),e($P,tuo),e(Tu,auo),e($,nuo),e($,Fu),e(Fu,yee),e(yee,suo),e(Fu,luo),e(Fu,IP),e(IP,iuo),e(Fu,duo),e($,cuo),e($,Cu),e(Cu,wee),e(wee,fuo),e(Cu,muo),e(Cu,DP),e(DP,guo),e(Cu,huo),e($,puo),e($,Mu),e(Mu,Aee),e(Aee,_uo),e(Mu,uuo),e(Mu,jP),e(jP,buo),e(Mu,vuo),e($,Tuo),e($,Eu),e(Eu,Lee),e(Lee,Fuo),e(Eu,Cuo),e(Eu,NP),e(NP,Muo),e(Eu,Euo),e($,yuo),e($,yu),e(yu,Bee),e(Bee,wuo),e(yu,Auo),e(yu,qP),e(qP,Luo),e(yu,Buo),e($,xuo),e($,wu),e(wu,xee),e(xee,kuo),e(wu,Ruo),e(wu,GP),e(GP,Suo),e(wu,Puo),e($,$uo),e($,Au),e(Au,kee),e(kee,Iuo),e(Au,Duo),e(Au,OP),e(OP,juo),e(Au,Nuo),e($,quo),e($,Lu),e(Lu,Ree),e(Ree,Guo),e(Lu,Ouo),e(Lu,XP),e(XP,Xuo),e(Lu,Vuo),e(Pe,zuo),e(Pe,Bu),e(Bu,Wuo),e(Bu,See),e(See,Quo),e(Bu,Huo),e(Bu,Pee),e(Pee,Uuo),e(Pe,Juo),e(Pe,$ee),e($ee,Yuo),e(Pe,Kuo),g(EE,Pe,null),b(c,Z7e,u),b(c,Ki,u),e(Ki,xu),e(xu,Iee),g(yE,Iee,null),e(Ki,Zuo),e(Ki,Dee),e(Dee,e2o),b(c,eBe,u),b(c,Jo,u),g(wE,Jo,null),e(Jo,o2o),e(Jo,Zi),e(Zi,r2o),e(Zi,jee),e(jee,t2o),e(Zi,a2o),e(Zi,Nee),e(Nee,n2o),e(Zi,s2o),e(Jo,l2o),e(Jo,AE),e(AE,i2o),e(AE,qee),e(qee,d2o),e(AE,c2o),e(Jo,f2o),e(Jo,Xr),g(LE,Xr,null),e(Xr,m2o),e(Xr,Gee),e(Gee,g2o),e(Xr,h2o),e(Xr,ed),e(ed,p2o),e(ed,Oee),e(Oee,_2o),e(ed,u2o),e(ed,Xee),e(Xee,b2o),e(ed,v2o),e(Xr,T2o),e(Xr,Vee),e(Vee,F2o),e(Xr,C2o),g(BE,Xr,null),e(Jo,M2o),e(Jo,$e),g(xE,$e,null),e($e,E2o),e($e,zee),e(zee,y2o),e($e,w2o),e($e,Oa),e(Oa,A2o),e(Oa,Wee),e(Wee,L2o),e(Oa,B2o),e(Oa,Qee),e(Qee,x2o),e(Oa,k2o),e(Oa,Hee),e(Hee,R2o),e(Oa,S2o),e($e,P2o),e($e,I),e(I,ku),e(ku,Uee),e(Uee,$2o),e(ku,I2o),e(ku,VP),e(VP,D2o),e(ku,j2o),e(I,N2o),e(I,Ru),e(Ru,Jee),e(Jee,q2o),e(Ru,G2o),e(Ru,zP),e(zP,O2o),e(Ru,X2o),e(I,V2o),e(I,Su),e(Su,Yee),e(Yee,z2o),e(Su,W2o),e(Su,WP),e(WP,Q2o),e(Su,H2o),e(I,U2o),e(I,Pu),e(Pu,Kee),e(Kee,J2o),e(Pu,Y2o),e(Pu,QP),e(QP,K2o),e(Pu,Z2o),e(I,e1o),e(I,$u),e($u,Zee),e(Zee,o1o),e($u,r1o),e($u,HP),e(HP,t1o),e($u,a1o),e(I,n1o),e(I,Iu),e(Iu,eoe),e(eoe,s1o),e(Iu,l1o),e(Iu,UP),e(UP,i1o),e(Iu,d1o),e(I,c1o),e(I,Du),e(Du,ooe),e(ooe,f1o),e(Du,m1o),e(Du,JP),e(JP,g1o),e(Du,h1o),e(I,p1o),e(I,ju),e(ju,roe),e(roe,_1o),e(ju,u1o),e(ju,YP),e(YP,b1o),e(ju,v1o),e(I,T1o),e(I,Nu),e(Nu,toe),e(toe,F1o),e(Nu,C1o),e(Nu,KP),e(KP,M1o),e(Nu,E1o),e(I,y1o),e(I,qu),e(qu,aoe),e(aoe,w1o),e(qu,A1o),e(qu,ZP),e(ZP,L1o),e(qu,B1o),e(I,x1o),e(I,Gu),e(Gu,noe),e(noe,k1o),e(Gu,R1o),e(Gu,e$),e(e$,S1o),e(Gu,P1o),e(I,$1o),e(I,Ou),e(Ou,soe),e(soe,I1o),e(Ou,D1o),e(Ou,o$),e(o$,j1o),e(Ou,N1o),e(I,q1o),e(I,Xu),e(Xu,loe),e(loe,G1o),e(Xu,O1o),e(Xu,r$),e(r$,X1o),e(Xu,V1o),e(I,z1o),e(I,Vu),e(Vu,ioe),e(ioe,W1o),e(Vu,Q1o),e(Vu,t$),e(t$,H1o),e(Vu,U1o),e(I,J1o),e(I,zu),e(zu,doe),e(doe,Y1o),e(zu,K1o),e(zu,a$),e(a$,Z1o),e(zu,ebo),e(I,obo),e(I,Wu),e(Wu,coe),e(coe,rbo),e(Wu,tbo),e(Wu,n$),e(n$,abo),e(Wu,nbo),e(I,sbo),e(I,Qu),e(Qu,foe),e(foe,lbo),e(Qu,ibo),e(Qu,s$),e(s$,dbo),e(Qu,cbo),e(I,fbo),e(I,Hu),e(Hu,moe),e(moe,mbo),e(Hu,gbo),e(Hu,l$),e(l$,hbo),e(Hu,pbo),e(I,_bo),e(I,Uu),e(Uu,goe),e(goe,ubo),e(Uu,bbo),e(Uu,i$),e(i$,vbo),e(Uu,Tbo),e(I,Fbo),e(I,Ju),e(Ju,hoe),e(hoe,Cbo),e(Ju,Mbo),e(Ju,d$),e(d$,Ebo),e(Ju,ybo),e(I,wbo),e(I,Yu),e(Yu,poe),e(poe,Abo),e(Yu,Lbo),e(Yu,c$),e(c$,Bbo),e(Yu,xbo),e(I,kbo),e(I,Ku),e(Ku,_oe),e(_oe,Rbo),e(Ku,Sbo),e(Ku,f$),e(f$,Pbo),e(Ku,$bo),e(I,Ibo),e(I,Zu),e(Zu,uoe),e(uoe,Dbo),e(Zu,jbo),e(Zu,m$),e(m$,Nbo),e(Zu,qbo),e(I,Gbo),e(I,e2),e(e2,boe),e(boe,Obo),e(e2,Xbo),e(e2,g$),e(g$,Vbo),e(e2,zbo),e(I,Wbo),e(I,o2),e(o2,voe),e(voe,Qbo),e(o2,Hbo),e(o2,h$),e(h$,Ubo),e(o2,Jbo),e(I,Ybo),e(I,r2),e(r2,Toe),e(Toe,Kbo),e(r2,Zbo),e(r2,p$),e(p$,e3o),e(r2,o3o),e(I,r3o),e(I,t2),e(t2,Foe),e(Foe,t3o),e(t2,a3o),e(t2,_$),e(_$,n3o),e(t2,s3o),e(I,l3o),e(I,a2),e(a2,Coe),e(Coe,i3o),e(a2,d3o),e(a2,u$),e(u$,c3o),e(a2,f3o),e(I,m3o),e(I,n2),e(n2,Moe),e(Moe,g3o),e(n2,h3o),e(n2,b$),e(b$,p3o),e(n2,_3o),e(I,u3o),e(I,s2),e(s2,Eoe),e(Eoe,b3o),e(s2,v3o),e(s2,v$),e(v$,T3o),e(s2,F3o),e(I,C3o),e(I,l2),e(l2,yoe),e(yoe,M3o),e(l2,E3o),e(l2,woe),e(woe,y3o),e(l2,w3o),e(I,A3o),e(I,i2),e(i2,Aoe),e(Aoe,L3o),e(i2,B3o),e(i2,T$),e(T$,x3o),e(i2,k3o),e(I,R3o),e(I,d2),e(d2,Loe),e(Loe,S3o),e(d2,P3o),e(d2,F$),e(F$,$3o),e(d2,I3o),e(I,D3o),e(I,c2),e(c2,Boe),e(Boe,j3o),e(c2,N3o),e(c2,C$),e(C$,q3o),e(c2,G3o),e(I,O3o),e(I,f2),e(f2,xoe),e(xoe,X3o),e(f2,V3o),e(f2,M$),e(M$,z3o),e(f2,W3o),e($e,Q3o),e($e,m2),e(m2,H3o),e(m2,koe),e(koe,U3o),e(m2,J3o),e(m2,Roe),e(Roe,Y3o),e($e,K3o),e($e,Soe),e(Soe,Z3o),e($e,e5o),g(kE,$e,null),b(c,oBe,u),b(c,od,u),e(od,g2),e(g2,Poe),g(RE,Poe,null),e(od,o5o),e(od,$oe),e($oe,r5o),b(c,rBe,u),b(c,Yo,u),g(SE,Yo,null),e(Yo,t5o),e(Yo,rd),e(rd,a5o),e(rd,Ioe),e(Ioe,n5o),e(rd,s5o),e(rd,Doe),e(Doe,l5o),e(rd,i5o),e(Yo,d5o),e(Yo,PE),e(PE,c5o),e(PE,joe),e(joe,f5o),e(PE,m5o),e(Yo,g5o),e(Yo,Vr),g($E,Vr,null),e(Vr,h5o),e(Vr,Noe),e(Noe,p5o),e(Vr,_5o),e(Vr,td),e(td,u5o),e(td,qoe),e(qoe,b5o),e(td,v5o),e(td,Goe),e(Goe,T5o),e(td,F5o),e(Vr,C5o),e(Vr,Ooe),e(Ooe,M5o),e(Vr,E5o),g(IE,Vr,null),e(Yo,y5o),e(Yo,Ie),g(DE,Ie,null),e(Ie,w5o),e(Ie,Xoe),e(Xoe,A5o),e(Ie,L5o),e(Ie,Xa),e(Xa,B5o),e(Xa,Voe),e(Voe,x5o),e(Xa,k5o),e(Xa,zoe),e(zoe,R5o),e(Xa,S5o),e(Xa,Woe),e(Woe,P5o),e(Xa,$5o),e(Ie,I5o),e(Ie,ne),e(ne,h2),e(h2,Qoe),e(Qoe,D5o),e(h2,j5o),e(h2,E$),e(E$,N5o),e(h2,q5o),e(ne,G5o),e(ne,p2),e(p2,Hoe),e(Hoe,O5o),e(p2,X5o),e(p2,y$),e(y$,V5o),e(p2,z5o),e(ne,W5o),e(ne,_2),e(_2,Uoe),e(Uoe,Q5o),e(_2,H5o),e(_2,w$),e(w$,U5o),e(_2,J5o),e(ne,Y5o),e(ne,u2),e(u2,Joe),e(Joe,K5o),e(u2,Z5o),e(u2,A$),e(A$,evo),e(u2,ovo),e(ne,rvo),e(ne,b2),e(b2,Yoe),e(Yoe,tvo),e(b2,avo),e(b2,L$),e(L$,nvo),e(b2,svo),e(ne,lvo),e(ne,v2),e(v2,Koe),e(Koe,ivo),e(v2,dvo),e(v2,B$),e(B$,cvo),e(v2,fvo),e(ne,mvo),e(ne,T2),e(T2,Zoe),e(Zoe,gvo),e(T2,hvo),e(T2,x$),e(x$,pvo),e(T2,_vo),e(ne,uvo),e(ne,F2),e(F2,ere),e(ere,bvo),e(F2,vvo),e(F2,k$),e(k$,Tvo),e(F2,Fvo),e(ne,Cvo),e(ne,C2),e(C2,ore),e(ore,Mvo),e(C2,Evo),e(C2,R$),e(R$,yvo),e(C2,wvo),e(ne,Avo),e(ne,M2),e(M2,rre),e(rre,Lvo),e(M2,Bvo),e(M2,S$),e(S$,xvo),e(M2,kvo),e(ne,Rvo),e(ne,E2),e(E2,tre),e(tre,Svo),e(E2,Pvo),e(E2,P$),e(P$,$vo),e(E2,Ivo),e(ne,Dvo),e(ne,y2),e(y2,are),e(are,jvo),e(y2,Nvo),e(y2,$$),e($$,qvo),e(y2,Gvo),e(ne,Ovo),e(ne,w2),e(w2,nre),e(nre,Xvo),e(w2,Vvo),e(w2,I$),e(I$,zvo),e(w2,Wvo),e(ne,Qvo),e(ne,A2),e(A2,sre),e(sre,Hvo),e(A2,Uvo),e(A2,D$),e(D$,Jvo),e(A2,Yvo),e(ne,Kvo),e(ne,L2),e(L2,lre),e(lre,Zvo),e(L2,eTo),e(L2,j$),e(j$,oTo),e(L2,rTo),e(ne,tTo),e(ne,B2),e(B2,ire),e(ire,aTo),e(B2,nTo),e(B2,N$),e(N$,sTo),e(B2,lTo),e(Ie,iTo),e(Ie,x2),e(x2,dTo),e(x2,dre),e(dre,cTo),e(x2,fTo),e(x2,cre),e(cre,mTo),e(Ie,gTo),e(Ie,fre),e(fre,hTo),e(Ie,pTo),g(jE,Ie,null),b(c,tBe,u),b(c,ad,u),e(ad,k2),e(k2,mre),g(NE,mre,null),e(ad,_To),e(ad,gre),e(gre,uTo),b(c,aBe,u),b(c,Ko,u),g(qE,Ko,null),e(Ko,bTo),e(Ko,nd),e(nd,vTo),e(nd,hre),e(hre,TTo),e(nd,FTo),e(nd,pre),e(pre,CTo),e(nd,MTo),e(Ko,ETo),e(Ko,GE),e(GE,yTo),e(GE,_re),e(_re,wTo),e(GE,ATo),e(Ko,LTo),e(Ko,zr),g(OE,zr,null),e(zr,BTo),e(zr,ure),e(ure,xTo),e(zr,kTo),e(zr,sd),e(sd,RTo),e(sd,bre),e(bre,STo),e(sd,PTo),e(sd,vre),e(vre,$To),e(sd,ITo),e(zr,DTo),e(zr,Tre),e(Tre,jTo),e(zr,NTo),g(XE,zr,null),e(Ko,qTo),e(Ko,De),g(VE,De,null),e(De,GTo),e(De,Fre),e(Fre,OTo),e(De,XTo),e(De,Va),e(Va,VTo),e(Va,Cre),e(Cre,zTo),e(Va,WTo),e(Va,Mre),e(Mre,QTo),e(Va,HTo),e(Va,Ere),e(Ere,UTo),e(Va,JTo),e(De,YTo),e(De,A),e(A,R2),e(R2,yre),e(yre,KTo),e(R2,ZTo),e(R2,q$),e(q$,eFo),e(R2,oFo),e(A,rFo),e(A,S2),e(S2,wre),e(wre,tFo),e(S2,aFo),e(S2,G$),e(G$,nFo),e(S2,sFo),e(A,lFo),e(A,P2),e(P2,Are),e(Are,iFo),e(P2,dFo),e(P2,O$),e(O$,cFo),e(P2,fFo),e(A,mFo),e(A,$2),e($2,Lre),e(Lre,gFo),e($2,hFo),e($2,X$),e(X$,pFo),e($2,_Fo),e(A,uFo),e(A,I2),e(I2,Bre),e(Bre,bFo),e(I2,vFo),e(I2,V$),e(V$,TFo),e(I2,FFo),e(A,CFo),e(A,D2),e(D2,xre),e(xre,MFo),e(D2,EFo),e(D2,z$),e(z$,yFo),e(D2,wFo),e(A,AFo),e(A,j2),e(j2,kre),e(kre,LFo),e(j2,BFo),e(j2,W$),e(W$,xFo),e(j2,kFo),e(A,RFo),e(A,N2),e(N2,Rre),e(Rre,SFo),e(N2,PFo),e(N2,Q$),e(Q$,$Fo),e(N2,IFo),e(A,DFo),e(A,q2),e(q2,Sre),e(Sre,jFo),e(q2,NFo),e(q2,H$),e(H$,qFo),e(q2,GFo),e(A,OFo),e(A,G2),e(G2,Pre),e(Pre,XFo),e(G2,VFo),e(G2,U$),e(U$,zFo),e(G2,WFo),e(A,QFo),e(A,O2),e(O2,$re),e($re,HFo),e(O2,UFo),e(O2,J$),e(J$,JFo),e(O2,YFo),e(A,KFo),e(A,X2),e(X2,Ire),e(Ire,ZFo),e(X2,e9o),e(X2,Y$),e(Y$,o9o),e(X2,r9o),e(A,t9o),e(A,V2),e(V2,Dre),e(Dre,a9o),e(V2,n9o),e(V2,K$),e(K$,s9o),e(V2,l9o),e(A,i9o),e(A,z2),e(z2,jre),e(jre,d9o),e(z2,c9o),e(z2,Z$),e(Z$,f9o),e(z2,m9o),e(A,g9o),e(A,W2),e(W2,Nre),e(Nre,h9o),e(W2,p9o),e(W2,eI),e(eI,_9o),e(W2,u9o),e(A,b9o),e(A,Q2),e(Q2,qre),e(qre,v9o),e(Q2,T9o),e(Q2,oI),e(oI,F9o),e(Q2,C9o),e(A,M9o),e(A,H2),e(H2,Gre),e(Gre,E9o),e(H2,y9o),e(H2,rI),e(rI,w9o),e(H2,A9o),e(A,L9o),e(A,U2),e(U2,Ore),e(Ore,B9o),e(U2,x9o),e(U2,tI),e(tI,k9o),e(U2,R9o),e(A,S9o),e(A,J2),e(J2,Xre),e(Xre,P9o),e(J2,$9o),e(J2,aI),e(aI,I9o),e(J2,D9o),e(A,j9o),e(A,Y2),e(Y2,Vre),e(Vre,N9o),e(Y2,q9o),e(Y2,nI),e(nI,G9o),e(Y2,O9o),e(A,X9o),e(A,K2),e(K2,zre),e(zre,V9o),e(K2,z9o),e(K2,sI),e(sI,W9o),e(K2,Q9o),e(A,H9o),e(A,Z2),e(Z2,Wre),e(Wre,U9o),e(Z2,J9o),e(Z2,lI),e(lI,Y9o),e(Z2,K9o),e(A,Z9o),e(A,e1),e(e1,Qre),e(Qre,eCo),e(e1,oCo),e(e1,iI),e(iI,rCo),e(e1,tCo),e(A,aCo),e(A,o1),e(o1,Hre),e(Hre,nCo),e(o1,sCo),e(o1,dI),e(dI,lCo),e(o1,iCo),e(A,dCo),e(A,r1),e(r1,Ure),e(Ure,cCo),e(r1,fCo),e(r1,cI),e(cI,mCo),e(r1,gCo),e(A,hCo),e(A,t1),e(t1,Jre),e(Jre,pCo),e(t1,_Co),e(t1,fI),e(fI,uCo),e(t1,bCo),e(A,vCo),e(A,a1),e(a1,Yre),e(Yre,TCo),e(a1,FCo),e(a1,mI),e(mI,CCo),e(a1,MCo),e(A,ECo),e(A,n1),e(n1,Kre),e(Kre,yCo),e(n1,wCo),e(n1,gI),e(gI,ACo),e(n1,LCo),e(A,BCo),e(A,s1),e(s1,Zre),e(Zre,xCo),e(s1,kCo),e(s1,hI),e(hI,RCo),e(s1,SCo),e(A,PCo),e(A,l1),e(l1,ete),e(ete,$Co),e(l1,ICo),e(l1,pI),e(pI,DCo),e(l1,jCo),e(A,NCo),e(A,i1),e(i1,ote),e(ote,qCo),e(i1,GCo),e(i1,_I),e(_I,OCo),e(i1,XCo),e(A,VCo),e(A,d1),e(d1,rte),e(rte,zCo),e(d1,WCo),e(d1,uI),e(uI,QCo),e(d1,HCo),e(A,UCo),e(A,c1),e(c1,tte),e(tte,JCo),e(c1,YCo),e(c1,bI),e(bI,KCo),e(c1,ZCo),e(A,e4o),e(A,f1),e(f1,ate),e(ate,o4o),e(f1,r4o),e(f1,vI),e(vI,t4o),e(f1,a4o),e(A,n4o),e(A,m1),e(m1,nte),e(nte,s4o),e(m1,l4o),e(m1,TI),e(TI,i4o),e(m1,d4o),e(A,c4o),e(A,g1),e(g1,ste),e(ste,f4o),e(g1,m4o),e(g1,FI),e(FI,g4o),e(g1,h4o),e(A,p4o),e(A,h1),e(h1,lte),e(lte,_4o),e(h1,u4o),e(h1,CI),e(CI,b4o),e(h1,v4o),e(A,T4o),e(A,p1),e(p1,ite),e(ite,F4o),e(p1,C4o),e(p1,MI),e(MI,M4o),e(p1,E4o),e(A,y4o),e(A,_1),e(_1,dte),e(dte,w4o),e(_1,A4o),e(_1,EI),e(EI,L4o),e(_1,B4o),e(A,x4o),e(A,u1),e(u1,cte),e(cte,k4o),e(u1,R4o),e(u1,yI),e(yI,S4o),e(u1,P4o),e(A,$4o),e(A,b1),e(b1,fte),e(fte,I4o),e(b1,D4o),e(b1,wI),e(wI,j4o),e(b1,N4o),e(A,q4o),e(A,v1),e(v1,mte),e(mte,G4o),e(v1,O4o),e(v1,AI),e(AI,X4o),e(v1,V4o),e(A,z4o),e(A,T1),e(T1,gte),e(gte,W4o),e(T1,Q4o),e(T1,LI),e(LI,H4o),e(T1,U4o),e(A,J4o),e(A,F1),e(F1,hte),e(hte,Y4o),e(F1,K4o),e(F1,BI),e(BI,Z4o),e(F1,eMo),e(A,oMo),e(A,C1),e(C1,pte),e(pte,rMo),e(C1,tMo),e(C1,xI),e(xI,aMo),e(C1,nMo),e(A,sMo),e(A,M1),e(M1,_te),e(_te,lMo),e(M1,iMo),e(M1,kI),e(kI,dMo),e(M1,cMo),e(De,fMo),e(De,E1),e(E1,mMo),e(E1,ute),e(ute,gMo),e(E1,hMo),e(E1,bte),e(bte,pMo),e(De,_Mo),e(De,vte),e(vte,uMo),e(De,bMo),g(zE,De,null),b(c,nBe,u),b(c,ld,u),e(ld,y1),e(y1,Tte),g(WE,Tte,null),e(ld,vMo),e(ld,Fte),e(Fte,TMo),b(c,sBe,u),b(c,Zo,u),g(QE,Zo,null),e(Zo,FMo),e(Zo,id),e(id,CMo),e(id,Cte),e(Cte,MMo),e(id,EMo),e(id,Mte),e(Mte,yMo),e(id,wMo),e(Zo,AMo),e(Zo,HE),e(HE,LMo),e(HE,Ete),e(Ete,BMo),e(HE,xMo),e(Zo,kMo),e(Zo,Wr),g(UE,Wr,null),e(Wr,RMo),e(Wr,yte),e(yte,SMo),e(Wr,PMo),e(Wr,dd),e(dd,$Mo),e(dd,wte),e(wte,IMo),e(dd,DMo),e(dd,Ate),e(Ate,jMo),e(dd,NMo),e(Wr,qMo),e(Wr,Lte),e(Lte,GMo),e(Wr,OMo),g(JE,Wr,null),e(Zo,XMo),e(Zo,je),g(YE,je,null),e(je,VMo),e(je,Bte),e(Bte,zMo),e(je,WMo),e(je,za),e(za,QMo),e(za,xte),e(xte,HMo),e(za,UMo),e(za,kte),e(kte,JMo),e(za,YMo),e(za,Rte),e(Rte,KMo),e(za,ZMo),e(je,eEo),e(je,G),e(G,w1),e(w1,Ste),e(Ste,oEo),e(w1,rEo),e(w1,RI),e(RI,tEo),e(w1,aEo),e(G,nEo),e(G,A1),e(A1,Pte),e(Pte,sEo),e(A1,lEo),e(A1,SI),e(SI,iEo),e(A1,dEo),e(G,cEo),e(G,L1),e(L1,$te),e($te,fEo),e(L1,mEo),e(L1,PI),e(PI,gEo),e(L1,hEo),e(G,pEo),e(G,B1),e(B1,Ite),e(Ite,_Eo),e(B1,uEo),e(B1,$I),e($I,bEo),e(B1,vEo),e(G,TEo),e(G,x1),e(x1,Dte),e(Dte,FEo),e(x1,CEo),e(x1,II),e(II,MEo),e(x1,EEo),e(G,yEo),e(G,k1),e(k1,jte),e(jte,wEo),e(k1,AEo),e(k1,DI),e(DI,LEo),e(k1,BEo),e(G,xEo),e(G,R1),e(R1,Nte),e(Nte,kEo),e(R1,REo),e(R1,jI),e(jI,SEo),e(R1,PEo),e(G,$Eo),e(G,S1),e(S1,qte),e(qte,IEo),e(S1,DEo),e(S1,NI),e(NI,jEo),e(S1,NEo),e(G,qEo),e(G,P1),e(P1,Gte),e(Gte,GEo),e(P1,OEo),e(P1,qI),e(qI,XEo),e(P1,VEo),e(G,zEo),e(G,$1),e($1,Ote),e(Ote,WEo),e($1,QEo),e($1,GI),e(GI,HEo),e($1,UEo),e(G,JEo),e(G,I1),e(I1,Xte),e(Xte,YEo),e(I1,KEo),e(I1,OI),e(OI,ZEo),e(I1,eyo),e(G,oyo),e(G,D1),e(D1,Vte),e(Vte,ryo),e(D1,tyo),e(D1,XI),e(XI,ayo),e(D1,nyo),e(G,syo),e(G,j1),e(j1,zte),e(zte,lyo),e(j1,iyo),e(j1,VI),e(VI,dyo),e(j1,cyo),e(G,fyo),e(G,N1),e(N1,Wte),e(Wte,myo),e(N1,gyo),e(N1,zI),e(zI,hyo),e(N1,pyo),e(G,_yo),e(G,q1),e(q1,Qte),e(Qte,uyo),e(q1,byo),e(q1,WI),e(WI,vyo),e(q1,Tyo),e(G,Fyo),e(G,G1),e(G1,Hte),e(Hte,Cyo),e(G1,Myo),e(G1,QI),e(QI,Eyo),e(G1,yyo),e(G,wyo),e(G,O1),e(O1,Ute),e(Ute,Ayo),e(O1,Lyo),e(O1,HI),e(HI,Byo),e(O1,xyo),e(G,kyo),e(G,X1),e(X1,Jte),e(Jte,Ryo),e(X1,Syo),e(X1,UI),e(UI,Pyo),e(X1,$yo),e(G,Iyo),e(G,V1),e(V1,Yte),e(Yte,Dyo),e(V1,jyo),e(V1,JI),e(JI,Nyo),e(V1,qyo),e(G,Gyo),e(G,z1),e(z1,Kte),e(Kte,Oyo),e(z1,Xyo),e(z1,YI),e(YI,Vyo),e(z1,zyo),e(G,Wyo),e(G,W1),e(W1,Zte),e(Zte,Qyo),e(W1,Hyo),e(W1,KI),e(KI,Uyo),e(W1,Jyo),e(G,Yyo),e(G,Q1),e(Q1,eae),e(eae,Kyo),e(Q1,Zyo),e(Q1,ZI),e(ZI,ewo),e(Q1,owo),e(G,rwo),e(G,H1),e(H1,oae),e(oae,two),e(H1,awo),e(H1,eD),e(eD,nwo),e(H1,swo),e(G,lwo),e(G,U1),e(U1,rae),e(rae,iwo),e(U1,dwo),e(U1,oD),e(oD,cwo),e(U1,fwo),e(G,mwo),e(G,J1),e(J1,tae),e(tae,gwo),e(J1,hwo),e(J1,rD),e(rD,pwo),e(J1,_wo),e(G,uwo),e(G,Y1),e(Y1,aae),e(aae,bwo),e(Y1,vwo),e(Y1,tD),e(tD,Two),e(Y1,Fwo),e(G,Cwo),e(G,K1),e(K1,nae),e(nae,Mwo),e(K1,Ewo),e(K1,aD),e(aD,ywo),e(K1,wwo),e(G,Awo),e(G,Z1),e(Z1,sae),e(sae,Lwo),e(Z1,Bwo),e(Z1,nD),e(nD,xwo),e(Z1,kwo),e(je,Rwo),e(je,eb),e(eb,Swo),e(eb,lae),e(lae,Pwo),e(eb,$wo),e(eb,iae),e(iae,Iwo),e(je,Dwo),e(je,dae),e(dae,jwo),e(je,Nwo),g(KE,je,null),b(c,lBe,u),b(c,cd,u),e(cd,ob),e(ob,cae),g(ZE,cae,null),e(cd,qwo),e(cd,fae),e(fae,Gwo),b(c,iBe,u),b(c,er,u),g(ey,er,null),e(er,Owo),e(er,fd),e(fd,Xwo),e(fd,mae),e(mae,Vwo),e(fd,zwo),e(fd,gae),e(gae,Wwo),e(fd,Qwo),e(er,Hwo),e(er,oy),e(oy,Uwo),e(oy,hae),e(hae,Jwo),e(oy,Ywo),e(er,Kwo),e(er,Qr),g(ry,Qr,null),e(Qr,Zwo),e(Qr,pae),e(pae,e6o),e(Qr,o6o),e(Qr,md),e(md,r6o),e(md,_ae),e(_ae,t6o),e(md,a6o),e(md,uae),e(uae,n6o),e(md,s6o),e(Qr,l6o),e(Qr,bae),e(bae,i6o),e(Qr,d6o),g(ty,Qr,null),e(er,c6o),e(er,Ne),g(ay,Ne,null),e(Ne,f6o),e(Ne,vae),e(vae,m6o),e(Ne,g6o),e(Ne,Wa),e(Wa,h6o),e(Wa,Tae),e(Tae,p6o),e(Wa,_6o),e(Wa,Fae),e(Fae,u6o),e(Wa,b6o),e(Wa,Cae),e(Cae,v6o),e(Wa,T6o),e(Ne,F6o),e(Ne,na),e(na,rb),e(rb,Mae),e(Mae,C6o),e(rb,M6o),e(rb,sD),e(sD,E6o),e(rb,y6o),e(na,w6o),e(na,tb),e(tb,Eae),e(Eae,A6o),e(tb,L6o),e(tb,lD),e(lD,B6o),e(tb,x6o),e(na,k6o),e(na,ab),e(ab,yae),e(yae,R6o),e(ab,S6o),e(ab,iD),e(iD,P6o),e(ab,$6o),e(na,I6o),e(na,nb),e(nb,wae),e(wae,D6o),e(nb,j6o),e(nb,dD),e(dD,N6o),e(nb,q6o),e(na,G6o),e(na,sb),e(sb,Aae),e(Aae,O6o),e(sb,X6o),e(sb,cD),e(cD,V6o),e(sb,z6o),e(Ne,W6o),e(Ne,lb),e(lb,Q6o),e(lb,Lae),e(Lae,H6o),e(lb,U6o),e(lb,Bae),e(Bae,J6o),e(Ne,Y6o),e(Ne,xae),e(xae,K6o),e(Ne,Z6o),g(ny,Ne,null),b(c,dBe,u),b(c,gd,u),e(gd,ib),e(ib,kae),g(sy,kae,null),e(gd,eAo),e(gd,Rae),e(Rae,oAo),b(c,cBe,u),b(c,or,u),g(ly,or,null),e(or,rAo),e(or,hd),e(hd,tAo),e(hd,Sae),e(Sae,aAo),e(hd,nAo),e(hd,Pae),e(Pae,sAo),e(hd,lAo),e(or,iAo),e(or,iy),e(iy,dAo),e(iy,$ae),e($ae,cAo),e(iy,fAo),e(or,mAo),e(or,Hr),g(dy,Hr,null),e(Hr,gAo),e(Hr,Iae),e(Iae,hAo),e(Hr,pAo),e(Hr,pd),e(pd,_Ao),e(pd,Dae),e(Dae,uAo),e(pd,bAo),e(pd,jae),e(jae,vAo),e(pd,TAo),e(Hr,FAo),e(Hr,Nae),e(Nae,CAo),e(Hr,MAo),g(cy,Hr,null),e(or,EAo),e(or,qe),g(fy,qe,null),e(qe,yAo),e(qe,qae),e(qae,wAo),e(qe,AAo),e(qe,Qa),e(Qa,LAo),e(Qa,Gae),e(Gae,BAo),e(Qa,xAo),e(Qa,Oae),e(Oae,kAo),e(Qa,RAo),e(Qa,Xae),e(Xae,SAo),e(Qa,PAo),e(qe,$Ao),e(qe,N),e(N,db),e(db,Vae),e(Vae,IAo),e(db,DAo),e(db,fD),e(fD,jAo),e(db,NAo),e(N,qAo),e(N,cb),e(cb,zae),e(zae,GAo),e(cb,OAo),e(cb,mD),e(mD,XAo),e(cb,VAo),e(N,zAo),e(N,fb),e(fb,Wae),e(Wae,WAo),e(fb,QAo),e(fb,gD),e(gD,HAo),e(fb,UAo),e(N,JAo),e(N,mb),e(mb,Qae),e(Qae,YAo),e(mb,KAo),e(mb,hD),e(hD,ZAo),e(mb,e0o),e(N,o0o),e(N,gb),e(gb,Hae),e(Hae,r0o),e(gb,t0o),e(gb,pD),e(pD,a0o),e(gb,n0o),e(N,s0o),e(N,hb),e(hb,Uae),e(Uae,l0o),e(hb,i0o),e(hb,_D),e(_D,d0o),e(hb,c0o),e(N,f0o),e(N,pb),e(pb,Jae),e(Jae,m0o),e(pb,g0o),e(pb,uD),e(uD,h0o),e(pb,p0o),e(N,_0o),e(N,_b),e(_b,Yae),e(Yae,u0o),e(_b,b0o),e(_b,bD),e(bD,v0o),e(_b,T0o),e(N,F0o),e(N,ub),e(ub,Kae),e(Kae,C0o),e(ub,M0o),e(ub,vD),e(vD,E0o),e(ub,y0o),e(N,w0o),e(N,bb),e(bb,Zae),e(Zae,A0o),e(bb,L0o),e(bb,TD),e(TD,B0o),e(bb,x0o),e(N,k0o),e(N,vb),e(vb,ene),e(ene,R0o),e(vb,S0o),e(vb,FD),e(FD,P0o),e(vb,$0o),e(N,I0o),e(N,Tb),e(Tb,one),e(one,D0o),e(Tb,j0o),e(Tb,CD),e(CD,N0o),e(Tb,q0o),e(N,G0o),e(N,Fb),e(Fb,rne),e(rne,O0o),e(Fb,X0o),e(Fb,MD),e(MD,V0o),e(Fb,z0o),e(N,W0o),e(N,Cb),e(Cb,tne),e(tne,Q0o),e(Cb,H0o),e(Cb,ED),e(ED,U0o),e(Cb,J0o),e(N,Y0o),e(N,Mb),e(Mb,ane),e(ane,K0o),e(Mb,Z0o),e(Mb,yD),e(yD,eLo),e(Mb,oLo),e(N,rLo),e(N,Eb),e(Eb,nne),e(nne,tLo),e(Eb,aLo),e(Eb,wD),e(wD,nLo),e(Eb,sLo),e(N,lLo),e(N,yb),e(yb,sne),e(sne,iLo),e(yb,dLo),e(yb,AD),e(AD,cLo),e(yb,fLo),e(N,mLo),e(N,wb),e(wb,lne),e(lne,gLo),e(wb,hLo),e(wb,LD),e(LD,pLo),e(wb,_Lo),e(N,uLo),e(N,Ab),e(Ab,ine),e(ine,bLo),e(Ab,vLo),e(Ab,BD),e(BD,TLo),e(Ab,FLo),e(N,CLo),e(N,Lb),e(Lb,dne),e(dne,MLo),e(Lb,ELo),e(Lb,xD),e(xD,yLo),e(Lb,wLo),e(N,ALo),e(N,Bb),e(Bb,cne),e(cne,LLo),e(Bb,BLo),e(Bb,kD),e(kD,xLo),e(Bb,kLo),e(N,RLo),e(N,xb),e(xb,fne),e(fne,SLo),e(xb,PLo),e(xb,RD),e(RD,$Lo),e(xb,ILo),e(N,DLo),e(N,kb),e(kb,mne),e(mne,jLo),e(kb,NLo),e(kb,SD),e(SD,qLo),e(kb,GLo),e(N,OLo),e(N,Rb),e(Rb,gne),e(gne,XLo),e(Rb,VLo),e(Rb,PD),e(PD,zLo),e(Rb,WLo),e(N,QLo),e(N,Sb),e(Sb,hne),e(hne,HLo),e(Sb,ULo),e(Sb,$D),e($D,JLo),e(Sb,YLo),e(N,KLo),e(N,Pb),e(Pb,pne),e(pne,ZLo),e(Pb,e8o),e(Pb,ID),e(ID,o8o),e(Pb,r8o),e(N,t8o),e(N,$b),e($b,_ne),e(_ne,a8o),e($b,n8o),e($b,DD),e(DD,s8o),e($b,l8o),e(N,i8o),e(N,Ib),e(Ib,une),e(une,d8o),e(Ib,c8o),e(Ib,jD),e(jD,f8o),e(Ib,m8o),e(N,g8o),e(N,Db),e(Db,bne),e(bne,h8o),e(Db,p8o),e(Db,ND),e(ND,_8o),e(Db,u8o),e(N,b8o),e(N,jb),e(jb,vne),e(vne,v8o),e(jb,T8o),e(jb,qD),e(qD,F8o),e(jb,C8o),e(N,M8o),e(N,Nb),e(Nb,Tne),e(Tne,E8o),e(Nb,y8o),e(Nb,GD),e(GD,w8o),e(Nb,A8o),e(N,L8o),e(N,qb),e(qb,Fne),e(Fne,B8o),e(qb,x8o),e(qb,OD),e(OD,k8o),e(qb,R8o),e(N,S8o),e(N,Gb),e(Gb,Cne),e(Cne,P8o),e(Gb,$8o),e(Gb,XD),e(XD,I8o),e(Gb,D8o),e(qe,j8o),e(qe,Ob),e(Ob,N8o),e(Ob,Mne),e(Mne,q8o),e(Ob,G8o),e(Ob,Ene),e(Ene,O8o),e(qe,X8o),e(qe,yne),e(yne,V8o),e(qe,z8o),g(my,qe,null),b(c,fBe,u),b(c,_d,u),e(_d,Xb),e(Xb,wne),g(gy,wne,null),e(_d,W8o),e(_d,Ane),e(Ane,Q8o),b(c,mBe,u),b(c,rr,u),g(hy,rr,null),e(rr,H8o),e(rr,ud),e(ud,U8o),e(ud,Lne),e(Lne,J8o),e(ud,Y8o),e(ud,Bne),e(Bne,K8o),e(ud,Z8o),e(rr,e7o),e(rr,py),e(py,o7o),e(py,xne),e(xne,r7o),e(py,t7o),e(rr,a7o),e(rr,Ur),g(_y,Ur,null),e(Ur,n7o),e(Ur,kne),e(kne,s7o),e(Ur,l7o),e(Ur,bd),e(bd,i7o),e(bd,Rne),e(Rne,d7o),e(bd,c7o),e(bd,Sne),e(Sne,f7o),e(bd,m7o),e(Ur,g7o),e(Ur,Pne),e(Pne,h7o),e(Ur,p7o),g(uy,Ur,null),e(rr,_7o),e(rr,Ge),g(by,Ge,null),e(Ge,u7o),e(Ge,$ne),e($ne,b7o),e(Ge,v7o),e(Ge,Ha),e(Ha,T7o),e(Ha,Ine),e(Ine,F7o),e(Ha,C7o),e(Ha,Dne),e(Dne,M7o),e(Ha,E7o),e(Ha,jne),e(jne,y7o),e(Ha,w7o),e(Ge,A7o),e(Ge,R),e(R,Vb),e(Vb,Nne),e(Nne,L7o),e(Vb,B7o),e(Vb,VD),e(VD,x7o),e(Vb,k7o),e(R,R7o),e(R,zb),e(zb,qne),e(qne,S7o),e(zb,P7o),e(zb,zD),e(zD,$7o),e(zb,I7o),e(R,D7o),e(R,Wb),e(Wb,Gne),e(Gne,j7o),e(Wb,N7o),e(Wb,WD),e(WD,q7o),e(Wb,G7o),e(R,O7o),e(R,Qb),e(Qb,One),e(One,X7o),e(Qb,V7o),e(Qb,QD),e(QD,z7o),e(Qb,W7o),e(R,Q7o),e(R,Hb),e(Hb,Xne),e(Xne,H7o),e(Hb,U7o),e(Hb,HD),e(HD,J7o),e(Hb,Y7o),e(R,K7o),e(R,Ub),e(Ub,Vne),e(Vne,Z7o),e(Ub,eBo),e(Ub,UD),e(UD,oBo),e(Ub,rBo),e(R,tBo),e(R,Jb),e(Jb,zne),e(zne,aBo),e(Jb,nBo),e(Jb,JD),e(JD,sBo),e(Jb,lBo),e(R,iBo),e(R,Yb),e(Yb,Wne),e(Wne,dBo),e(Yb,cBo),e(Yb,YD),e(YD,fBo),e(Yb,mBo),e(R,gBo),e(R,Kb),e(Kb,Qne),e(Qne,hBo),e(Kb,pBo),e(Kb,KD),e(KD,_Bo),e(Kb,uBo),e(R,bBo),e(R,Zb),e(Zb,Hne),e(Hne,vBo),e(Zb,TBo),e(Zb,ZD),e(ZD,FBo),e(Zb,CBo),e(R,MBo),e(R,e3),e(e3,Une),e(Une,EBo),e(e3,yBo),e(e3,ej),e(ej,wBo),e(e3,ABo),e(R,LBo),e(R,o3),e(o3,Jne),e(Jne,BBo),e(o3,xBo),e(o3,oj),e(oj,kBo),e(o3,RBo),e(R,SBo),e(R,r3),e(r3,Yne),e(Yne,PBo),e(r3,$Bo),e(r3,rj),e(rj,IBo),e(r3,DBo),e(R,jBo),e(R,t3),e(t3,Kne),e(Kne,NBo),e(t3,qBo),e(t3,tj),e(tj,GBo),e(t3,OBo),e(R,XBo),e(R,a3),e(a3,Zne),e(Zne,VBo),e(a3,zBo),e(a3,aj),e(aj,WBo),e(a3,QBo),e(R,HBo),e(R,n3),e(n3,ese),e(ese,UBo),e(n3,JBo),e(n3,nj),e(nj,YBo),e(n3,KBo),e(R,ZBo),e(R,s3),e(s3,ose),e(ose,exo),e(s3,oxo),e(s3,sj),e(sj,rxo),e(s3,txo),e(R,axo),e(R,l3),e(l3,rse),e(rse,nxo),e(l3,sxo),e(l3,lj),e(lj,lxo),e(l3,ixo),e(R,dxo),e(R,i3),e(i3,tse),e(tse,cxo),e(i3,fxo),e(i3,ij),e(ij,mxo),e(i3,gxo),e(R,hxo),e(R,d3),e(d3,ase),e(ase,pxo),e(d3,_xo),e(d3,dj),e(dj,uxo),e(d3,bxo),e(R,vxo),e(R,c3),e(c3,nse),e(nse,Txo),e(c3,Fxo),e(c3,cj),e(cj,Cxo),e(c3,Mxo),e(R,Exo),e(R,f3),e(f3,sse),e(sse,yxo),e(f3,wxo),e(f3,fj),e(fj,Axo),e(f3,Lxo),e(R,Bxo),e(R,m3),e(m3,lse),e(lse,xxo),e(m3,kxo),e(m3,mj),e(mj,Rxo),e(m3,Sxo),e(R,Pxo),e(R,g3),e(g3,ise),e(ise,$xo),e(g3,Ixo),e(g3,gj),e(gj,Dxo),e(g3,jxo),e(R,Nxo),e(R,h3),e(h3,dse),e(dse,qxo),e(h3,Gxo),e(h3,hj),e(hj,Oxo),e(h3,Xxo),e(R,Vxo),e(R,p3),e(p3,cse),e(cse,zxo),e(p3,Wxo),e(p3,pj),e(pj,Qxo),e(p3,Hxo),e(R,Uxo),e(R,_3),e(_3,fse),e(fse,Jxo),e(_3,Yxo),e(_3,_j),e(_j,Kxo),e(_3,Zxo),e(R,eko),e(R,u3),e(u3,mse),e(mse,oko),e(u3,rko),e(u3,uj),e(uj,tko),e(u3,ako),e(R,nko),e(R,b3),e(b3,gse),e(gse,sko),e(b3,lko),e(b3,bj),e(bj,iko),e(b3,dko),e(R,cko),e(R,v3),e(v3,hse),e(hse,fko),e(v3,mko),e(v3,vj),e(vj,gko),e(v3,hko),e(R,pko),e(R,T3),e(T3,pse),e(pse,_ko),e(T3,uko),e(T3,Tj),e(Tj,bko),e(T3,vko),e(R,Tko),e(R,F3),e(F3,_se),e(_se,Fko),e(F3,Cko),e(F3,Fj),e(Fj,Mko),e(F3,Eko),e(R,yko),e(R,C3),e(C3,use),e(use,wko),e(C3,Ako),e(C3,Cj),e(Cj,Lko),e(C3,Bko),e(R,xko),e(R,M3),e(M3,bse),e(bse,kko),e(M3,Rko),e(M3,Mj),e(Mj,Sko),e(M3,Pko),e(R,$ko),e(R,E3),e(E3,vse),e(vse,Iko),e(E3,Dko),e(E3,Ej),e(Ej,jko),e(E3,Nko),e(R,qko),e(R,y3),e(y3,Tse),e(Tse,Gko),e(y3,Oko),e(y3,yj),e(yj,Xko),e(y3,Vko),e(R,zko),e(R,w3),e(w3,Fse),e(Fse,Wko),e(w3,Qko),e(w3,wj),e(wj,Hko),e(w3,Uko),e(R,Jko),e(R,A3),e(A3,Cse),e(Cse,Yko),e(A3,Kko),e(A3,Aj),e(Aj,Zko),e(A3,eRo),e(R,oRo),e(R,L3),e(L3,Mse),e(Mse,rRo),e(L3,tRo),e(L3,Lj),e(Lj,aRo),e(L3,nRo),e(Ge,sRo),e(Ge,B3),e(B3,lRo),e(B3,Ese),e(Ese,iRo),e(B3,dRo),e(B3,yse),e(yse,cRo),e(Ge,fRo),e(Ge,wse),e(wse,mRo),e(Ge,gRo),g(vy,Ge,null),b(c,gBe,u),b(c,vd,u),e(vd,x3),e(x3,Ase),g(Ty,Ase,null),e(vd,hRo),e(vd,Lse),e(Lse,pRo),b(c,hBe,u),b(c,tr,u),g(Fy,tr,null),e(tr,_Ro),e(tr,Td),e(Td,uRo),e(Td,Bse),e(Bse,bRo),e(Td,vRo),e(Td,xse),e(xse,TRo),e(Td,FRo),e(tr,CRo),e(tr,Cy),e(Cy,MRo),e(Cy,kse),e(kse,ERo),e(Cy,yRo),e(tr,wRo),e(tr,Jr),g(My,Jr,null),e(Jr,ARo),e(Jr,Rse),e(Rse,LRo),e(Jr,BRo),e(Jr,Fd),e(Fd,xRo),e(Fd,Sse),e(Sse,kRo),e(Fd,RRo),e(Fd,Pse),e(Pse,SRo),e(Fd,PRo),e(Jr,$Ro),e(Jr,$se),e($se,IRo),e(Jr,DRo),g(Ey,Jr,null),e(tr,jRo),e(tr,Oe),g(yy,Oe,null),e(Oe,NRo),e(Oe,Ise),e(Ise,qRo),e(Oe,GRo),e(Oe,Ua),e(Ua,ORo),e(Ua,Dse),e(Dse,XRo),e(Ua,VRo),e(Ua,jse),e(jse,zRo),e(Ua,WRo),e(Ua,Nse),e(Nse,QRo),e(Ua,HRo),e(Oe,URo),e(Oe,qse),e(qse,k3),e(k3,Gse),e(Gse,JRo),e(k3,YRo),e(k3,Bj),e(Bj,KRo),e(k3,ZRo),e(Oe,eSo),e(Oe,R3),e(R3,oSo),e(R3,Ose),e(Ose,rSo),e(R3,tSo),e(R3,Xse),e(Xse,aSo),e(Oe,nSo),e(Oe,Vse),e(Vse,sSo),e(Oe,lSo),g(wy,Oe,null),b(c,pBe,u),b(c,Cd,u),e(Cd,S3),e(S3,zse),g(Ay,zse,null),e(Cd,iSo),e(Cd,Wse),e(Wse,dSo),b(c,_Be,u),b(c,ar,u),g(Ly,ar,null),e(ar,cSo),e(ar,Md),e(Md,fSo),e(Md,Qse),e(Qse,mSo),e(Md,gSo),e(Md,Hse),e(Hse,hSo),e(Md,pSo),e(ar,_So),e(ar,By),e(By,uSo),e(By,Use),e(Use,bSo),e(By,vSo),e(ar,TSo),e(ar,Yr),g(xy,Yr,null),e(Yr,FSo),e(Yr,Jse),e(Jse,CSo),e(Yr,MSo),e(Yr,Ed),e(Ed,ESo),e(Ed,Yse),e(Yse,ySo),e(Ed,wSo),e(Ed,Kse),e(Kse,ASo),e(Ed,LSo),e(Yr,BSo),e(Yr,Zse),e(Zse,xSo),e(Yr,kSo),g(ky,Yr,null),e(ar,RSo),e(ar,Xe),g(Ry,Xe,null),e(Xe,SSo),e(Xe,ele),e(ele,PSo),e(Xe,$So),e(Xe,Ja),e(Ja,ISo),e(Ja,ole),e(ole,DSo),e(Ja,jSo),e(Ja,rle),e(rle,NSo),e(Ja,qSo),e(Ja,tle),e(tle,GSo),e(Ja,OSo),e(Xe,XSo),e(Xe,be),e(be,P3),e(P3,ale),e(ale,VSo),e(P3,zSo),e(P3,xj),e(xj,WSo),e(P3,QSo),e(be,HSo),e(be,$3),e($3,nle),e(nle,USo),e($3,JSo),e($3,kj),e(kj,YSo),e($3,KSo),e(be,ZSo),e(be,$s),e($s,sle),e(sle,ePo),e($s,oPo),e($s,Rj),e(Rj,rPo),e($s,tPo),e($s,Sj),e(Sj,aPo),e($s,nPo),e(be,sPo),e(be,I3),e(I3,lle),e(lle,lPo),e(I3,iPo),e(I3,Pj),e(Pj,dPo),e(I3,cPo),e(be,fPo),e(be,la),e(la,ile),e(ile,mPo),e(la,gPo),e(la,$j),e($j,hPo),e(la,pPo),e(la,Ij),e(Ij,_Po),e(la,uPo),e(la,Dj),e(Dj,bPo),e(la,vPo),e(be,TPo),e(be,D3),e(D3,dle),e(dle,FPo),e(D3,CPo),e(D3,jj),e(jj,MPo),e(D3,EPo),e(be,yPo),e(be,j3),e(j3,cle),e(cle,wPo),e(j3,APo),e(j3,Nj),e(Nj,LPo),e(j3,BPo),e(be,xPo),e(be,N3),e(N3,fle),e(fle,kPo),e(N3,RPo),e(N3,qj),e(qj,SPo),e(N3,PPo),e(be,$Po),e(be,q3),e(q3,mle),e(mle,IPo),e(q3,DPo),e(q3,Gj),e(Gj,jPo),e(q3,NPo),e(Xe,qPo),e(Xe,G3),e(G3,GPo),e(G3,gle),e(gle,OPo),e(G3,XPo),e(G3,hle),e(hle,VPo),e(Xe,zPo),e(Xe,ple),e(ple,WPo),e(Xe,QPo),g(Sy,Xe,null),b(c,uBe,u),b(c,yd,u),e(yd,O3),e(O3,_le),g(Py,_le,null),e(yd,HPo),e(yd,ule),e(ule,UPo),b(c,bBe,u),b(c,nr,u),g($y,nr,null),e(nr,JPo),e(nr,wd),e(wd,YPo),e(wd,ble),e(ble,KPo),e(wd,ZPo),e(wd,vle),e(vle,e$o),e(wd,o$o),e(nr,r$o),e(nr,Iy),e(Iy,t$o),e(Iy,Tle),e(Tle,a$o),e(Iy,n$o),e(nr,s$o),e(nr,Kr),g(Dy,Kr,null),e(Kr,l$o),e(Kr,Fle),e(Fle,i$o),e(Kr,d$o),e(Kr,Ad),e(Ad,c$o),e(Ad,Cle),e(Cle,f$o),e(Ad,m$o),e(Ad,Mle),e(Mle,g$o),e(Ad,h$o),e(Kr,p$o),e(Kr,Ele),e(Ele,_$o),e(Kr,u$o),g(jy,Kr,null),e(nr,b$o),e(nr,Ve),g(Ny,Ve,null),e(Ve,v$o),e(Ve,yle),e(yle,T$o),e(Ve,F$o),e(Ve,Ya),e(Ya,C$o),e(Ya,wle),e(wle,M$o),e(Ya,E$o),e(Ya,Ale),e(Ale,y$o),e(Ya,w$o),e(Ya,Lle),e(Lle,A$o),e(Ya,L$o),e(Ve,B$o),e(Ve,Ble),e(Ble,X3),e(X3,xle),e(xle,x$o),e(X3,k$o),e(X3,Oj),e(Oj,R$o),e(X3,S$o),e(Ve,P$o),e(Ve,V3),e(V3,$$o),e(V3,kle),e(kle,I$o),e(V3,D$o),e(V3,Rle),e(Rle,j$o),e(Ve,N$o),e(Ve,Sle),e(Sle,q$o),e(Ve,G$o),g(qy,Ve,null),b(c,vBe,u),b(c,Ld,u),e(Ld,z3),e(z3,Ple),g(Gy,Ple,null),e(Ld,O$o),e(Ld,$le),e($le,X$o),b(c,TBe,u),b(c,sr,u),g(Oy,sr,null),e(sr,V$o),e(sr,Bd),e(Bd,z$o),e(Bd,Ile),e(Ile,W$o),e(Bd,Q$o),e(Bd,Dle),e(Dle,H$o),e(Bd,U$o),e(sr,J$o),e(sr,Xy),e(Xy,Y$o),e(Xy,jle),e(jle,K$o),e(Xy,Z$o),e(sr,eIo),e(sr,Zr),g(Vy,Zr,null),e(Zr,oIo),e(Zr,Nle),e(Nle,rIo),e(Zr,tIo),e(Zr,xd),e(xd,aIo),e(xd,qle),e(qle,nIo),e(xd,sIo),e(xd,Gle),e(Gle,lIo),e(xd,iIo),e(Zr,dIo),e(Zr,Ole),e(Ole,cIo),e(Zr,fIo),g(zy,Zr,null),e(sr,mIo),e(sr,ze),g(Wy,ze,null),e(ze,gIo),e(ze,Xle),e(Xle,hIo),e(ze,pIo),e(ze,Ka),e(Ka,_Io),e(Ka,Vle),e(Vle,uIo),e(Ka,bIo),e(Ka,zle),e(zle,vIo),e(Ka,TIo),e(Ka,Wle),e(Wle,FIo),e(Ka,CIo),e(ze,MIo),e(ze,Ae),e(Ae,W3),e(W3,Qle),e(Qle,EIo),e(W3,yIo),e(W3,Xj),e(Xj,wIo),e(W3,AIo),e(Ae,LIo),e(Ae,Q3),e(Q3,Hle),e(Hle,BIo),e(Q3,xIo),e(Q3,Vj),e(Vj,kIo),e(Q3,RIo),e(Ae,SIo),e(Ae,H3),e(H3,Ule),e(Ule,PIo),e(H3,$Io),e(H3,zj),e(zj,IIo),e(H3,DIo),e(Ae,jIo),e(Ae,U3),e(U3,Jle),e(Jle,NIo),e(U3,qIo),e(U3,Wj),e(Wj,GIo),e(U3,OIo),e(Ae,XIo),e(Ae,J3),e(J3,Yle),e(Yle,VIo),e(J3,zIo),e(J3,Qj),e(Qj,WIo),e(J3,QIo),e(Ae,HIo),e(Ae,Y3),e(Y3,Kle),e(Kle,UIo),e(Y3,JIo),e(Y3,Hj),e(Hj,YIo),e(Y3,KIo),e(Ae,ZIo),e(Ae,K3),e(K3,Zle),e(Zle,eDo),e(K3,oDo),e(K3,Uj),e(Uj,rDo),e(K3,tDo),e(Ae,aDo),e(Ae,Z3),e(Z3,eie),e(eie,nDo),e(Z3,sDo),e(Z3,Jj),e(Jj,lDo),e(Z3,iDo),e(ze,dDo),e(ze,e5),e(e5,cDo),e(e5,oie),e(oie,fDo),e(e5,mDo),e(e5,rie),e(rie,gDo),e(ze,hDo),e(ze,tie),e(tie,pDo),e(ze,_Do),g(Qy,ze,null),b(c,FBe,u),b(c,kd,u),e(kd,o5),e(o5,aie),g(Hy,aie,null),e(kd,uDo),e(kd,nie),e(nie,bDo),b(c,CBe,u),b(c,lr,u),g(Uy,lr,null),e(lr,vDo),e(lr,Rd),e(Rd,TDo),e(Rd,sie),e(sie,FDo),e(Rd,CDo),e(Rd,lie),e(lie,MDo),e(Rd,EDo),e(lr,yDo),e(lr,Jy),e(Jy,wDo),e(Jy,iie),e(iie,ADo),e(Jy,LDo),e(lr,BDo),e(lr,et),g(Yy,et,null),e(et,xDo),e(et,die),e(die,kDo),e(et,RDo),e(et,Sd),e(Sd,SDo),e(Sd,cie),e(cie,PDo),e(Sd,$Do),e(Sd,fie),e(fie,IDo),e(Sd,DDo),e(et,jDo),e(et,mie),e(mie,NDo),e(et,qDo),g(Ky,et,null),e(lr,GDo),e(lr,We),g(Zy,We,null),e(We,ODo),e(We,gie),e(gie,XDo),e(We,VDo),e(We,Za),e(Za,zDo),e(Za,hie),e(hie,WDo),e(Za,QDo),e(Za,pie),e(pie,HDo),e(Za,UDo),e(Za,_ie),e(_ie,JDo),e(Za,YDo),e(We,KDo),e(We,en),e(en,r5),e(r5,uie),e(uie,ZDo),e(r5,ejo),e(r5,Yj),e(Yj,ojo),e(r5,rjo),e(en,tjo),e(en,t5),e(t5,bie),e(bie,ajo),e(t5,njo),e(t5,Kj),e(Kj,sjo),e(t5,ljo),e(en,ijo),e(en,a5),e(a5,vie),e(vie,djo),e(a5,cjo),e(a5,Zj),e(Zj,fjo),e(a5,mjo),e(en,gjo),e(en,n5),e(n5,Tie),e(Tie,hjo),e(n5,pjo),e(n5,eN),e(eN,_jo),e(n5,ujo),e(We,bjo),e(We,s5),e(s5,vjo),e(s5,Fie),e(Fie,Tjo),e(s5,Fjo),e(s5,Cie),e(Cie,Cjo),e(We,Mjo),e(We,Mie),e(Mie,Ejo),e(We,yjo),g(ew,We,null),b(c,MBe,u),b(c,Pd,u),e(Pd,l5),e(l5,Eie),g(ow,Eie,null),e(Pd,wjo),e(Pd,yie),e(yie,Ajo),b(c,EBe,u),b(c,ir,u),g(rw,ir,null),e(ir,Ljo),e(ir,$d),e($d,Bjo),e($d,wie),e(wie,xjo),e($d,kjo),e($d,Aie),e(Aie,Rjo),e($d,Sjo),e(ir,Pjo),e(ir,tw),e(tw,$jo),e(tw,Lie),e(Lie,Ijo),e(tw,Djo),e(ir,jjo),e(ir,ot),g(aw,ot,null),e(ot,Njo),e(ot,Bie),e(Bie,qjo),e(ot,Gjo),e(ot,Id),e(Id,Ojo),e(Id,xie),e(xie,Xjo),e(Id,Vjo),e(Id,kie),e(kie,zjo),e(Id,Wjo),e(ot,Qjo),e(ot,Rie),e(Rie,Hjo),e(ot,Ujo),g(nw,ot,null),e(ir,Jjo),e(ir,Qe),g(sw,Qe,null),e(Qe,Yjo),e(Qe,Sie),e(Sie,Kjo),e(Qe,Zjo),e(Qe,on),e(on,eNo),e(on,Pie),e(Pie,oNo),e(on,rNo),e(on,$ie),e($ie,tNo),e(on,aNo),e(on,Iie),e(Iie,nNo),e(on,sNo),e(Qe,lNo),e(Qe,Le),e(Le,i5),e(i5,Die),e(Die,iNo),e(i5,dNo),e(i5,oN),e(oN,cNo),e(i5,fNo),e(Le,mNo),e(Le,d5),e(d5,jie),e(jie,gNo),e(d5,hNo),e(d5,rN),e(rN,pNo),e(d5,_No),e(Le,uNo),e(Le,c5),e(c5,Nie),e(Nie,bNo),e(c5,vNo),e(c5,tN),e(tN,TNo),e(c5,FNo),e(Le,CNo),e(Le,f5),e(f5,qie),e(qie,MNo),e(f5,ENo),e(f5,aN),e(aN,yNo),e(f5,wNo),e(Le,ANo),e(Le,m5),e(m5,Gie),e(Gie,LNo),e(m5,BNo),e(m5,nN),e(nN,xNo),e(m5,kNo),e(Le,RNo),e(Le,g5),e(g5,Oie),e(Oie,SNo),e(g5,PNo),e(g5,sN),e(sN,$No),e(g5,INo),e(Le,DNo),e(Le,h5),e(h5,Xie),e(Xie,jNo),e(h5,NNo),e(h5,lN),e(lN,qNo),e(h5,GNo),e(Le,ONo),e(Le,p5),e(p5,Vie),e(Vie,XNo),e(p5,VNo),e(p5,iN),e(iN,zNo),e(p5,WNo),e(Qe,QNo),e(Qe,_5),e(_5,HNo),e(_5,zie),e(zie,UNo),e(_5,JNo),e(_5,Wie),e(Wie,YNo),e(Qe,KNo),e(Qe,Qie),e(Qie,ZNo),e(Qe,eqo),g(lw,Qe,null),b(c,yBe,u),b(c,Dd,u),e(Dd,u5),e(u5,Hie),g(iw,Hie,null),e(Dd,oqo),e(Dd,Uie),e(Uie,rqo),b(c,wBe,u),b(c,dr,u),g(dw,dr,null),e(dr,tqo),e(dr,jd),e(jd,aqo),e(jd,Jie),e(Jie,nqo),e(jd,sqo),e(jd,Yie),e(Yie,lqo),e(jd,iqo),e(dr,dqo),e(dr,cw),e(cw,cqo),e(cw,Kie),e(Kie,fqo),e(cw,mqo),e(dr,gqo),e(dr,rt),g(fw,rt,null),e(rt,hqo),e(rt,Zie),e(Zie,pqo),e(rt,_qo),e(rt,Nd),e(Nd,uqo),e(Nd,ede),e(ede,bqo),e(Nd,vqo),e(Nd,ode),e(ode,Tqo),e(Nd,Fqo),e(rt,Cqo),e(rt,rde),e(rde,Mqo),e(rt,Eqo),g(mw,rt,null),e(dr,yqo),e(dr,He),g(gw,He,null),e(He,wqo),e(He,tde),e(tde,Aqo),e(He,Lqo),e(He,rn),e(rn,Bqo),e(rn,ade),e(ade,xqo),e(rn,kqo),e(rn,nde),e(nde,Rqo),e(rn,Sqo),e(rn,sde),e(sde,Pqo),e(rn,$qo),e(He,Iqo),e(He,hw),e(hw,b5),e(b5,lde),e(lde,Dqo),e(b5,jqo),e(b5,dN),e(dN,Nqo),e(b5,qqo),e(hw,Gqo),e(hw,v5),e(v5,ide),e(ide,Oqo),e(v5,Xqo),e(v5,cN),e(cN,Vqo),e(v5,zqo),e(He,Wqo),e(He,T5),e(T5,Qqo),e(T5,dde),e(dde,Hqo),e(T5,Uqo),e(T5,cde),e(cde,Jqo),e(He,Yqo),e(He,fde),e(fde,Kqo),e(He,Zqo),g(pw,He,null),b(c,ABe,u),b(c,qd,u),e(qd,F5),e(F5,mde),g(_w,mde,null),e(qd,eGo),e(qd,gde),e(gde,oGo),b(c,LBe,u),b(c,cr,u),g(uw,cr,null),e(cr,rGo),e(cr,Gd),e(Gd,tGo),e(Gd,hde),e(hde,aGo),e(Gd,nGo),e(Gd,pde),e(pde,sGo),e(Gd,lGo),e(cr,iGo),e(cr,bw),e(bw,dGo),e(bw,_de),e(_de,cGo),e(bw,fGo),e(cr,mGo),e(cr,tt),g(vw,tt,null),e(tt,gGo),e(tt,ude),e(ude,hGo),e(tt,pGo),e(tt,Od),e(Od,_Go),e(Od,bde),e(bde,uGo),e(Od,bGo),e(Od,vde),e(vde,vGo),e(Od,TGo),e(tt,FGo),e(tt,Tde),e(Tde,CGo),e(tt,MGo),g(Tw,tt,null),e(cr,EGo),e(cr,Ue),g(Fw,Ue,null),e(Ue,yGo),e(Ue,Fde),e(Fde,wGo),e(Ue,AGo),e(Ue,tn),e(tn,LGo),e(tn,Cde),e(Cde,BGo),e(tn,xGo),e(tn,Mde),e(Mde,kGo),e(tn,RGo),e(tn,Ede),e(Ede,SGo),e(tn,PGo),e(Ue,$Go),e(Ue,an),e(an,C5),e(C5,yde),e(yde,IGo),e(C5,DGo),e(C5,fN),e(fN,jGo),e(C5,NGo),e(an,qGo),e(an,M5),e(M5,wde),e(wde,GGo),e(M5,OGo),e(M5,mN),e(mN,XGo),e(M5,VGo),e(an,zGo),e(an,E5),e(E5,Ade),e(Ade,WGo),e(E5,QGo),e(E5,gN),e(gN,HGo),e(E5,UGo),e(an,JGo),e(an,y5),e(y5,Lde),e(Lde,YGo),e(y5,KGo),e(y5,hN),e(hN,ZGo),e(y5,eOo),e(Ue,oOo),e(Ue,w5),e(w5,rOo),e(w5,Bde),e(Bde,tOo),e(w5,aOo),e(w5,xde),e(xde,nOo),e(Ue,sOo),e(Ue,kde),e(kde,lOo),e(Ue,iOo),g(Cw,Ue,null),b(c,BBe,u),b(c,Xd,u),e(Xd,A5),e(A5,Rde),g(Mw,Rde,null),e(Xd,dOo),e(Xd,Sde),e(Sde,cOo),b(c,xBe,u),b(c,fr,u),g(Ew,fr,null),e(fr,fOo),e(fr,Vd),e(Vd,mOo),e(Vd,Pde),e(Pde,gOo),e(Vd,hOo),e(Vd,$de),e($de,pOo),e(Vd,_Oo),e(fr,uOo),e(fr,yw),e(yw,bOo),e(yw,Ide),e(Ide,vOo),e(yw,TOo),e(fr,FOo),e(fr,at),g(ww,at,null),e(at,COo),e(at,Dde),e(Dde,MOo),e(at,EOo),e(at,zd),e(zd,yOo),e(zd,jde),e(jde,wOo),e(zd,AOo),e(zd,Nde),e(Nde,LOo),e(zd,BOo),e(at,xOo),e(at,qde),e(qde,kOo),e(at,ROo),g(Aw,at,null),e(fr,SOo),e(fr,Je),g(Lw,Je,null),e(Je,POo),e(Je,Gde),e(Gde,$Oo),e(Je,IOo),e(Je,nn),e(nn,DOo),e(nn,Ode),e(Ode,jOo),e(nn,NOo),e(nn,Xde),e(Xde,qOo),e(nn,GOo),e(nn,Vde),e(Vde,OOo),e(nn,XOo),e(Je,VOo),e(Je,Wd),e(Wd,L5),e(L5,zde),e(zde,zOo),e(L5,WOo),e(L5,pN),e(pN,QOo),e(L5,HOo),e(Wd,UOo),e(Wd,B5),e(B5,Wde),e(Wde,JOo),e(B5,YOo),e(B5,_N),e(_N,KOo),e(B5,ZOo),e(Wd,eXo),e(Wd,x5),e(x5,Qde),e(Qde,oXo),e(x5,rXo),e(x5,uN),e(uN,tXo),e(x5,aXo),e(Je,nXo),e(Je,k5),e(k5,sXo),e(k5,Hde),e(Hde,lXo),e(k5,iXo),e(k5,Ude),e(Ude,dXo),e(Je,cXo),e(Je,Jde),e(Jde,fXo),e(Je,mXo),g(Bw,Je,null),b(c,kBe,u),b(c,Qd,u),e(Qd,R5),e(R5,Yde),g(xw,Yde,null),e(Qd,gXo),e(Qd,Kde),e(Kde,hXo),b(c,RBe,u),b(c,mr,u),g(kw,mr,null),e(mr,pXo),e(mr,Hd),e(Hd,_Xo),e(Hd,Zde),e(Zde,uXo),e(Hd,bXo),e(Hd,ece),e(ece,vXo),e(Hd,TXo),e(mr,FXo),e(mr,Rw),e(Rw,CXo),e(Rw,oce),e(oce,MXo),e(Rw,EXo),e(mr,yXo),e(mr,nt),g(Sw,nt,null),e(nt,wXo),e(nt,rce),e(rce,AXo),e(nt,LXo),e(nt,Ud),e(Ud,BXo),e(Ud,tce),e(tce,xXo),e(Ud,kXo),e(Ud,ace),e(ace,RXo),e(Ud,SXo),e(nt,PXo),e(nt,nce),e(nce,$Xo),e(nt,IXo),g(Pw,nt,null),e(mr,DXo),e(mr,Ye),g($w,Ye,null),e(Ye,jXo),e(Ye,sce),e(sce,NXo),e(Ye,qXo),e(Ye,sn),e(sn,GXo),e(sn,lce),e(lce,OXo),e(sn,XXo),e(sn,ice),e(ice,VXo),e(sn,zXo),e(sn,dce),e(dce,WXo),e(sn,QXo),e(Ye,HXo),e(Ye,cce),e(cce,S5),e(S5,fce),e(fce,UXo),e(S5,JXo),e(S5,bN),e(bN,YXo),e(S5,KXo),e(Ye,ZXo),e(Ye,P5),e(P5,eVo),e(P5,mce),e(mce,oVo),e(P5,rVo),e(P5,gce),e(gce,tVo),e(Ye,aVo),e(Ye,hce),e(hce,nVo),e(Ye,sVo),g(Iw,Ye,null),b(c,SBe,u),b(c,Jd,u),e(Jd,$5),e($5,pce),g(Dw,pce,null),e(Jd,lVo),e(Jd,_ce),e(_ce,iVo),b(c,PBe,u),b(c,gr,u),g(jw,gr,null),e(gr,dVo),e(gr,Yd),e(Yd,cVo),e(Yd,uce),e(uce,fVo),e(Yd,mVo),e(Yd,bce),e(bce,gVo),e(Yd,hVo),e(gr,pVo),e(gr,Nw),e(Nw,_Vo),e(Nw,vce),e(vce,uVo),e(Nw,bVo),e(gr,vVo),e(gr,st),g(qw,st,null),e(st,TVo),e(st,Tce),e(Tce,FVo),e(st,CVo),e(st,Kd),e(Kd,MVo),e(Kd,Fce),e(Fce,EVo),e(Kd,yVo),e(Kd,Cce),e(Cce,wVo),e(Kd,AVo),e(st,LVo),e(st,Mce),e(Mce,BVo),e(st,xVo),g(Gw,st,null),e(gr,kVo),e(gr,Ke),g(Ow,Ke,null),e(Ke,RVo),e(Ke,Ece),e(Ece,SVo),e(Ke,PVo),e(Ke,ln),e(ln,$Vo),e(ln,yce),e(yce,IVo),e(ln,DVo),e(ln,wce),e(wce,jVo),e(ln,NVo),e(ln,Ace),e(Ace,qVo),e(ln,GVo),e(Ke,OVo),e(Ke,Lce),e(Lce,I5),e(I5,Bce),e(Bce,XVo),e(I5,VVo),e(I5,vN),e(vN,zVo),e(I5,WVo),e(Ke,QVo),e(Ke,D5),e(D5,HVo),e(D5,xce),e(xce,UVo),e(D5,JVo),e(D5,kce),e(kce,YVo),e(Ke,KVo),e(Ke,Rce),e(Rce,ZVo),e(Ke,ezo),g(Xw,Ke,null),b(c,$Be,u),b(c,Zd,u),e(Zd,j5),e(j5,Sce),g(Vw,Sce,null),e(Zd,ozo),e(Zd,Pce),e(Pce,rzo),b(c,IBe,u),b(c,hr,u),g(zw,hr,null),e(hr,tzo),e(hr,ec),e(ec,azo),e(ec,$ce),e($ce,nzo),e(ec,szo),e(ec,Ice),e(Ice,lzo),e(ec,izo),e(hr,dzo),e(hr,Ww),e(Ww,czo),e(Ww,Dce),e(Dce,fzo),e(Ww,mzo),e(hr,gzo),e(hr,lt),g(Qw,lt,null),e(lt,hzo),e(lt,jce),e(jce,pzo),e(lt,_zo),e(lt,oc),e(oc,uzo),e(oc,Nce),e(Nce,bzo),e(oc,vzo),e(oc,qce),e(qce,Tzo),e(oc,Fzo),e(lt,Czo),e(lt,Gce),e(Gce,Mzo),e(lt,Ezo),g(Hw,lt,null),e(hr,yzo),e(hr,Ze),g(Uw,Ze,null),e(Ze,wzo),e(Ze,Oce),e(Oce,Azo),e(Ze,Lzo),e(Ze,dn),e(dn,Bzo),e(dn,Xce),e(Xce,xzo),e(dn,kzo),e(dn,Vce),e(Vce,Rzo),e(dn,Szo),e(dn,zce),e(zce,Pzo),e(dn,$zo),e(Ze,Izo),e(Ze,Jw),e(Jw,N5),e(N5,Wce),e(Wce,Dzo),e(N5,jzo),e(N5,TN),e(TN,Nzo),e(N5,qzo),e(Jw,Gzo),e(Jw,q5),e(q5,Qce),e(Qce,Ozo),e(q5,Xzo),e(q5,FN),e(FN,Vzo),e(q5,zzo),e(Ze,Wzo),e(Ze,G5),e(G5,Qzo),e(G5,Hce),e(Hce,Hzo),e(G5,Uzo),e(G5,Uce),e(Uce,Jzo),e(Ze,Yzo),e(Ze,Jce),e(Jce,Kzo),e(Ze,Zzo),g(Yw,Ze,null),b(c,DBe,u),b(c,rc,u),e(rc,O5),e(O5,Yce),g(Kw,Yce,null),e(rc,eWo),e(rc,Kce),e(Kce,oWo),b(c,jBe,u),b(c,pr,u),g(Zw,pr,null),e(pr,rWo),e(pr,tc),e(tc,tWo),e(tc,Zce),e(Zce,aWo),e(tc,nWo),e(tc,efe),e(efe,sWo),e(tc,lWo),e(pr,iWo),e(pr,e6),e(e6,dWo),e(e6,ofe),e(ofe,cWo),e(e6,fWo),e(pr,mWo),e(pr,it),g(o6,it,null),e(it,gWo),e(it,rfe),e(rfe,hWo),e(it,pWo),e(it,ac),e(ac,_Wo),e(ac,tfe),e(tfe,uWo),e(ac,bWo),e(ac,afe),e(afe,vWo),e(ac,TWo),e(it,FWo),e(it,nfe),e(nfe,CWo),e(it,MWo),g(r6,it,null),e(pr,EWo),e(pr,go),g(t6,go,null),e(go,yWo),e(go,sfe),e(sfe,wWo),e(go,AWo),e(go,cn),e(cn,LWo),e(cn,lfe),e(lfe,BWo),e(cn,xWo),e(cn,ife),e(ife,kWo),e(cn,RWo),e(cn,dfe),e(dfe,SWo),e(cn,PWo),e(go,$Wo),e(go,B),e(B,X5),e(X5,cfe),e(cfe,IWo),e(X5,DWo),e(X5,CN),e(CN,jWo),e(X5,NWo),e(B,qWo),e(B,V5),e(V5,ffe),e(ffe,GWo),e(V5,OWo),e(V5,MN),e(MN,XWo),e(V5,VWo),e(B,zWo),e(B,z5),e(z5,mfe),e(mfe,WWo),e(z5,QWo),e(z5,EN),e(EN,HWo),e(z5,UWo),e(B,JWo),e(B,W5),e(W5,gfe),e(gfe,YWo),e(W5,KWo),e(W5,yN),e(yN,ZWo),e(W5,eQo),e(B,oQo),e(B,Q5),e(Q5,hfe),e(hfe,rQo),e(Q5,tQo),e(Q5,wN),e(wN,aQo),e(Q5,nQo),e(B,sQo),e(B,H5),e(H5,pfe),e(pfe,lQo),e(H5,iQo),e(H5,AN),e(AN,dQo),e(H5,cQo),e(B,fQo),e(B,U5),e(U5,_fe),e(_fe,mQo),e(U5,gQo),e(U5,LN),e(LN,hQo),e(U5,pQo),e(B,_Qo),e(B,J5),e(J5,ufe),e(ufe,uQo),e(J5,bQo),e(J5,BN),e(BN,vQo),e(J5,TQo),e(B,FQo),e(B,Y5),e(Y5,bfe),e(bfe,CQo),e(Y5,MQo),e(Y5,xN),e(xN,EQo),e(Y5,yQo),e(B,wQo),e(B,K5),e(K5,vfe),e(vfe,AQo),e(K5,LQo),e(K5,kN),e(kN,BQo),e(K5,xQo),e(B,kQo),e(B,Z5),e(Z5,Tfe),e(Tfe,RQo),e(Z5,SQo),e(Z5,RN),e(RN,PQo),e(Z5,$Qo),e(B,IQo),e(B,ev),e(ev,Ffe),e(Ffe,DQo),e(ev,jQo),e(ev,SN),e(SN,NQo),e(ev,qQo),e(B,GQo),e(B,ov),e(ov,Cfe),e(Cfe,OQo),e(ov,XQo),e(ov,PN),e(PN,VQo),e(ov,zQo),e(B,WQo),e(B,rv),e(rv,Mfe),e(Mfe,QQo),e(rv,HQo),e(rv,$N),e($N,UQo),e(rv,JQo),e(B,YQo),e(B,tv),e(tv,Efe),e(Efe,KQo),e(tv,ZQo),e(tv,IN),e(IN,eHo),e(tv,oHo),e(B,rHo),e(B,av),e(av,yfe),e(yfe,tHo),e(av,aHo),e(av,DN),e(DN,nHo),e(av,sHo),e(B,lHo),e(B,Is),e(Is,wfe),e(wfe,iHo),e(Is,dHo),e(Is,jN),e(jN,cHo),e(Is,fHo),e(Is,NN),e(NN,mHo),e(Is,gHo),e(B,hHo),e(B,nv),e(nv,Afe),e(Afe,pHo),e(nv,_Ho),e(nv,qN),e(qN,uHo),e(nv,bHo),e(B,vHo),e(B,sv),e(sv,Lfe),e(Lfe,THo),e(sv,FHo),e(sv,GN),e(GN,CHo),e(sv,MHo),e(B,EHo),e(B,lv),e(lv,Bfe),e(Bfe,yHo),e(lv,wHo),e(lv,ON),e(ON,AHo),e(lv,LHo),e(B,BHo),e(B,iv),e(iv,xfe),e(xfe,xHo),e(iv,kHo),e(iv,XN),e(XN,RHo),e(iv,SHo),e(B,PHo),e(B,dv),e(dv,kfe),e(kfe,$Ho),e(dv,IHo),e(dv,VN),e(VN,DHo),e(dv,jHo),e(B,NHo),e(B,cv),e(cv,Rfe),e(Rfe,qHo),e(cv,GHo),e(cv,zN),e(zN,OHo),e(cv,XHo),e(B,VHo),e(B,fv),e(fv,Sfe),e(Sfe,zHo),e(fv,WHo),e(fv,WN),e(WN,QHo),e(fv,HHo),e(B,UHo),e(B,mv),e(mv,Pfe),e(Pfe,JHo),e(mv,YHo),e(mv,QN),e(QN,KHo),e(mv,ZHo),e(B,eUo),e(B,gv),e(gv,$fe),e($fe,oUo),e(gv,rUo),e(gv,HN),e(HN,tUo),e(gv,aUo),e(B,nUo),e(B,hv),e(hv,Ife),e(Ife,sUo),e(hv,lUo),e(hv,UN),e(UN,iUo),e(hv,dUo),e(B,cUo),e(B,pv),e(pv,Dfe),e(Dfe,fUo),e(pv,mUo),e(pv,JN),e(JN,gUo),e(pv,hUo),e(B,pUo),e(B,_v),e(_v,jfe),e(jfe,_Uo),e(_v,uUo),e(_v,YN),e(YN,bUo),e(_v,vUo),e(B,TUo),e(B,uv),e(uv,Nfe),e(Nfe,FUo),e(uv,CUo),e(uv,KN),e(KN,MUo),e(uv,EUo),e(B,yUo),e(B,bv),e(bv,qfe),e(qfe,wUo),e(bv,AUo),e(bv,ZN),e(ZN,LUo),e(bv,BUo),e(B,xUo),e(B,vv),e(vv,Gfe),e(Gfe,kUo),e(vv,RUo),e(vv,eq),e(eq,SUo),e(vv,PUo),e(B,$Uo),e(B,Tv),e(Tv,Ofe),e(Ofe,IUo),e(Tv,DUo),e(Tv,oq),e(oq,jUo),e(Tv,NUo),e(B,qUo),e(B,Fv),e(Fv,Xfe),e(Xfe,GUo),e(Fv,OUo),e(Fv,rq),e(rq,XUo),e(Fv,VUo),e(B,zUo),e(B,Cv),e(Cv,Vfe),e(Vfe,WUo),e(Cv,QUo),e(Cv,tq),e(tq,HUo),e(Cv,UUo),e(B,JUo),e(B,Mv),e(Mv,zfe),e(zfe,YUo),e(Mv,KUo),e(Mv,aq),e(aq,ZUo),e(Mv,eJo),e(B,oJo),e(B,Ev),e(Ev,Wfe),e(Wfe,rJo),e(Ev,tJo),e(Ev,nq),e(nq,aJo),e(Ev,nJo),e(B,sJo),e(B,yv),e(yv,Qfe),e(Qfe,lJo),e(yv,iJo),e(yv,sq),e(sq,dJo),e(yv,cJo),e(B,fJo),e(B,wv),e(wv,Hfe),e(Hfe,mJo),e(wv,gJo),e(wv,lq),e(lq,hJo),e(wv,pJo),e(B,_Jo),e(B,Av),e(Av,Ufe),e(Ufe,uJo),e(Av,bJo),e(Av,iq),e(iq,vJo),e(Av,TJo),e(B,FJo),e(B,Lv),e(Lv,Jfe),e(Jfe,CJo),e(Lv,MJo),e(Lv,dq),e(dq,EJo),e(Lv,yJo),e(B,wJo),e(B,Bv),e(Bv,Yfe),e(Yfe,AJo),e(Bv,LJo),e(Bv,cq),e(cq,BJo),e(Bv,xJo),e(go,kJo),e(go,Kfe),e(Kfe,RJo),e(go,SJo),g(a6,go,null),b(c,NBe,u),b(c,nc,u),e(nc,xv),e(xv,Zfe),g(n6,Zfe,null),e(nc,PJo),e(nc,eme),e(eme,$Jo),b(c,qBe,u),b(c,_r,u),g(s6,_r,null),e(_r,IJo),e(_r,sc),e(sc,DJo),e(sc,ome),e(ome,jJo),e(sc,NJo),e(sc,rme),e(rme,qJo),e(sc,GJo),e(_r,OJo),e(_r,l6),e(l6,XJo),e(l6,tme),e(tme,VJo),e(l6,zJo),e(_r,WJo),e(_r,dt),g(i6,dt,null),e(dt,QJo),e(dt,ame),e(ame,HJo),e(dt,UJo),e(dt,lc),e(lc,JJo),e(lc,nme),e(nme,YJo),e(lc,KJo),e(lc,sme),e(sme,ZJo),e(lc,eYo),e(dt,oYo),e(dt,lme),e(lme,rYo),e(dt,tYo),g(d6,dt,null),e(_r,aYo),e(_r,ho),g(c6,ho,null),e(ho,nYo),e(ho,ime),e(ime,sYo),e(ho,lYo),e(ho,fn),e(fn,iYo),e(fn,dme),e(dme,dYo),e(fn,cYo),e(fn,cme),e(cme,fYo),e(fn,mYo),e(fn,fme),e(fme,gYo),e(fn,hYo),e(ho,pYo),e(ho,H),e(H,kv),e(kv,mme),e(mme,_Yo),e(kv,uYo),e(kv,fq),e(fq,bYo),e(kv,vYo),e(H,TYo),e(H,Rv),e(Rv,gme),e(gme,FYo),e(Rv,CYo),e(Rv,mq),e(mq,MYo),e(Rv,EYo),e(H,yYo),e(H,Sv),e(Sv,hme),e(hme,wYo),e(Sv,AYo),e(Sv,gq),e(gq,LYo),e(Sv,BYo),e(H,xYo),e(H,Pv),e(Pv,pme),e(pme,kYo),e(Pv,RYo),e(Pv,hq),e(hq,SYo),e(Pv,PYo),e(H,$Yo),e(H,$v),e($v,_me),e(_me,IYo),e($v,DYo),e($v,pq),e(pq,jYo),e($v,NYo),e(H,qYo),e(H,Iv),e(Iv,ume),e(ume,GYo),e(Iv,OYo),e(Iv,_q),e(_q,XYo),e(Iv,VYo),e(H,zYo),e(H,Dv),e(Dv,bme),e(bme,WYo),e(Dv,QYo),e(Dv,uq),e(uq,HYo),e(Dv,UYo),e(H,JYo),e(H,jv),e(jv,vme),e(vme,YYo),e(jv,KYo),e(jv,bq),e(bq,ZYo),e(jv,eKo),e(H,oKo),e(H,Nv),e(Nv,Tme),e(Tme,rKo),e(Nv,tKo),e(Nv,vq),e(vq,aKo),e(Nv,nKo),e(H,sKo),e(H,qv),e(qv,Fme),e(Fme,lKo),e(qv,iKo),e(qv,Tq),e(Tq,dKo),e(qv,cKo),e(H,fKo),e(H,Gv),e(Gv,Cme),e(Cme,mKo),e(Gv,gKo),e(Gv,Fq),e(Fq,hKo),e(Gv,pKo),e(H,_Ko),e(H,Ov),e(Ov,Mme),e(Mme,uKo),e(Ov,bKo),e(Ov,Cq),e(Cq,vKo),e(Ov,TKo),e(H,FKo),e(H,Xv),e(Xv,Eme),e(Eme,CKo),e(Xv,MKo),e(Xv,Mq),e(Mq,EKo),e(Xv,yKo),e(H,wKo),e(H,Vv),e(Vv,yme),e(yme,AKo),e(Vv,LKo),e(Vv,Eq),e(Eq,BKo),e(Vv,xKo),e(H,kKo),e(H,zv),e(zv,wme),e(wme,RKo),e(zv,SKo),e(zv,yq),e(yq,PKo),e(zv,$Ko),e(H,IKo),e(H,Wv),e(Wv,Ame),e(Ame,DKo),e(Wv,jKo),e(Wv,wq),e(wq,NKo),e(Wv,qKo),e(H,GKo),e(H,Qv),e(Qv,Lme),e(Lme,OKo),e(Qv,XKo),e(Qv,Aq),e(Aq,VKo),e(Qv,zKo),e(H,WKo),e(H,Hv),e(Hv,Bme),e(Bme,QKo),e(Hv,HKo),e(Hv,Lq),e(Lq,UKo),e(Hv,JKo),e(H,YKo),e(H,Uv),e(Uv,xme),e(xme,KKo),e(Uv,ZKo),e(Uv,Bq),e(Bq,eZo),e(Uv,oZo),e(H,rZo),e(H,Jv),e(Jv,kme),e(kme,tZo),e(Jv,aZo),e(Jv,xq),e(xq,nZo),e(Jv,sZo),e(H,lZo),e(H,Yv),e(Yv,Rme),e(Rme,iZo),e(Yv,dZo),e(Yv,kq),e(kq,cZo),e(Yv,fZo),e(H,mZo),e(H,Kv),e(Kv,Sme),e(Sme,gZo),e(Kv,hZo),e(Kv,Rq),e(Rq,pZo),e(Kv,_Zo),e(ho,uZo),e(ho,Pme),e(Pme,bZo),e(ho,vZo),g(f6,ho,null),b(c,GBe,u),b(c,ic,u),e(ic,Zv),e(Zv,$me),g(m6,$me,null),e(ic,TZo),e(ic,Ime),e(Ime,FZo),b(c,OBe,u),b(c,ur,u),g(g6,ur,null),e(ur,CZo),e(ur,dc),e(dc,MZo),e(dc,Dme),e(Dme,EZo),e(dc,yZo),e(dc,jme),e(jme,wZo),e(dc,AZo),e(ur,LZo),e(ur,h6),e(h6,BZo),e(h6,Nme),e(Nme,xZo),e(h6,kZo),e(ur,RZo),e(ur,ct),g(p6,ct,null),e(ct,SZo),e(ct,qme),e(qme,PZo),e(ct,$Zo),e(ct,cc),e(cc,IZo),e(cc,Gme),e(Gme,DZo),e(cc,jZo),e(cc,Ome),e(Ome,NZo),e(cc,qZo),e(ct,GZo),e(ct,Xme),e(Xme,OZo),e(ct,XZo),g(_6,ct,null),e(ur,VZo),e(ur,po),g(u6,po,null),e(po,zZo),e(po,Vme),e(Vme,WZo),e(po,QZo),e(po,mn),e(mn,HZo),e(mn,zme),e(zme,UZo),e(mn,JZo),e(mn,Wme),e(Wme,YZo),e(mn,KZo),e(mn,Qme),e(Qme,ZZo),e(mn,eer),e(po,oer),e(po,he),e(he,eT),e(eT,Hme),e(Hme,rer),e(eT,ter),e(eT,Sq),e(Sq,aer),e(eT,ner),e(he,ser),e(he,oT),e(oT,Ume),e(Ume,ler),e(oT,ier),e(oT,Pq),e(Pq,der),e(oT,cer),e(he,fer),e(he,rT),e(rT,Jme),e(Jme,mer),e(rT,ger),e(rT,$q),e($q,her),e(rT,per),e(he,_er),e(he,tT),e(tT,Yme),e(Yme,uer),e(tT,ber),e(tT,Iq),e(Iq,ver),e(tT,Ter),e(he,Fer),e(he,aT),e(aT,Kme),e(Kme,Cer),e(aT,Mer),e(aT,Dq),e(Dq,Eer),e(aT,yer),e(he,wer),e(he,nT),e(nT,Zme),e(Zme,Aer),e(nT,Ler),e(nT,jq),e(jq,Ber),e(nT,xer),e(he,ker),e(he,sT),e(sT,ege),e(ege,Rer),e(sT,Ser),e(sT,Nq),e(Nq,Per),e(sT,$er),e(he,Ier),e(he,lT),e(lT,oge),e(oge,Der),e(lT,jer),e(lT,qq),e(qq,Ner),e(lT,qer),e(he,Ger),e(he,iT),e(iT,rge),e(rge,Oer),e(iT,Xer),e(iT,Gq),e(Gq,Ver),e(iT,zer),e(he,Wer),e(he,dT),e(dT,tge),e(tge,Qer),e(dT,Her),e(dT,Oq),e(Oq,Uer),e(dT,Jer),e(po,Yer),e(po,age),e(age,Ker),e(po,Zer),g(b6,po,null),b(c,XBe,u),b(c,fc,u),e(fc,cT),e(cT,nge),g(v6,nge,null),e(fc,eor),e(fc,sge),e(sge,oor),b(c,VBe,u),b(c,br,u),g(T6,br,null),e(br,ror),e(br,mc),e(mc,tor),e(mc,lge),e(lge,aor),e(mc,nor),e(mc,ige),e(ige,sor),e(mc,lor),e(br,ior),e(br,F6),e(F6,dor),e(F6,dge),e(dge,cor),e(F6,mor),e(br,gor),e(br,ft),g(C6,ft,null),e(ft,hor),e(ft,cge),e(cge,por),e(ft,_or),e(ft,gc),e(gc,uor),e(gc,fge),e(fge,bor),e(gc,vor),e(gc,mge),e(mge,Tor),e(gc,For),e(ft,Cor),e(ft,gge),e(gge,Mor),e(ft,Eor),g(M6,ft,null),e(br,yor),e(br,_o),g(E6,_o,null),e(_o,wor),e(_o,hge),e(hge,Aor),e(_o,Lor),e(_o,gn),e(gn,Bor),e(gn,pge),e(pge,xor),e(gn,kor),e(gn,_ge),e(_ge,Ror),e(gn,Sor),e(gn,uge),e(uge,Por),e(gn,$or),e(_o,Ior),e(_o,y6),e(y6,fT),e(fT,bge),e(bge,Dor),e(fT,jor),e(fT,Xq),e(Xq,Nor),e(fT,qor),e(y6,Gor),e(y6,mT),e(mT,vge),e(vge,Oor),e(mT,Xor),e(mT,Vq),e(Vq,Vor),e(mT,zor),e(_o,Wor),e(_o,Tge),e(Tge,Qor),e(_o,Hor),g(w6,_o,null),b(c,zBe,u),b(c,hc,u),e(hc,gT),e(gT,Fge),g(A6,Fge,null),e(hc,Uor),e(hc,Cge),e(Cge,Jor),b(c,WBe,u),b(c,vr,u),g(L6,vr,null),e(vr,Yor),e(vr,pc),e(pc,Kor),e(pc,Mge),e(Mge,Zor),e(pc,err),e(pc,Ege),e(Ege,orr),e(pc,rrr),e(vr,trr),e(vr,B6),e(B6,arr),e(B6,yge),e(yge,nrr),e(B6,srr),e(vr,lrr),e(vr,mt),g(x6,mt,null),e(mt,irr),e(mt,wge),e(wge,drr),e(mt,crr),e(mt,_c),e(_c,frr),e(_c,Age),e(Age,mrr),e(_c,grr),e(_c,Lge),e(Lge,hrr),e(_c,prr),e(mt,_rr),e(mt,Bge),e(Bge,urr),e(mt,brr),g(k6,mt,null),e(vr,vrr),e(vr,uo),g(R6,uo,null),e(uo,Trr),e(uo,xge),e(xge,Frr),e(uo,Crr),e(uo,hn),e(hn,Mrr),e(hn,kge),e(kge,Err),e(hn,yrr),e(hn,Rge),e(Rge,wrr),e(hn,Arr),e(hn,Sge),e(Sge,Lrr),e(hn,Brr),e(uo,xrr),e(uo,Y),e(Y,hT),e(hT,Pge),e(Pge,krr),e(hT,Rrr),e(hT,zq),e(zq,Srr),e(hT,Prr),e(Y,$rr),e(Y,pT),e(pT,$ge),e($ge,Irr),e(pT,Drr),e(pT,Wq),e(Wq,jrr),e(pT,Nrr),e(Y,qrr),e(Y,_T),e(_T,Ige),e(Ige,Grr),e(_T,Orr),e(_T,Qq),e(Qq,Xrr),e(_T,Vrr),e(Y,zrr),e(Y,uT),e(uT,Dge),e(Dge,Wrr),e(uT,Qrr),e(uT,Hq),e(Hq,Hrr),e(uT,Urr),e(Y,Jrr),e(Y,bT),e(bT,jge),e(jge,Yrr),e(bT,Krr),e(bT,Uq),e(Uq,Zrr),e(bT,etr),e(Y,otr),e(Y,vT),e(vT,Nge),e(Nge,rtr),e(vT,ttr),e(vT,Jq),e(Jq,atr),e(vT,ntr),e(Y,str),e(Y,TT),e(TT,qge),e(qge,ltr),e(TT,itr),e(TT,Yq),e(Yq,dtr),e(TT,ctr),e(Y,ftr),e(Y,FT),e(FT,Gge),e(Gge,mtr),e(FT,gtr),e(FT,Kq),e(Kq,htr),e(FT,ptr),e(Y,_tr),e(Y,CT),e(CT,Oge),e(Oge,utr),e(CT,btr),e(CT,Zq),e(Zq,vtr),e(CT,Ttr),e(Y,Ftr),e(Y,MT),e(MT,Xge),e(Xge,Ctr),e(MT,Mtr),e(MT,eG),e(eG,Etr),e(MT,ytr),e(Y,wtr),e(Y,ET),e(ET,Vge),e(Vge,Atr),e(ET,Ltr),e(ET,oG),e(oG,Btr),e(ET,xtr),e(Y,ktr),e(Y,yT),e(yT,zge),e(zge,Rtr),e(yT,Str),e(yT,rG),e(rG,Ptr),e(yT,$tr),e(Y,Itr),e(Y,wT),e(wT,Wge),e(Wge,Dtr),e(wT,jtr),e(wT,tG),e(tG,Ntr),e(wT,qtr),e(Y,Gtr),e(Y,AT),e(AT,Qge),e(Qge,Otr),e(AT,Xtr),e(AT,aG),e(aG,Vtr),e(AT,ztr),e(Y,Wtr),e(Y,LT),e(LT,Hge),e(Hge,Qtr),e(LT,Htr),e(LT,nG),e(nG,Utr),e(LT,Jtr),e(Y,Ytr),e(Y,BT),e(BT,Uge),e(Uge,Ktr),e(BT,Ztr),e(BT,sG),e(sG,ear),e(BT,oar),e(Y,rar),e(Y,xT),e(xT,Jge),e(Jge,tar),e(xT,aar),e(xT,lG),e(lG,nar),e(xT,sar),e(Y,lar),e(Y,kT),e(kT,Yge),e(Yge,iar),e(kT,dar),e(kT,iG),e(iG,car),e(kT,far),e(Y,mar),e(Y,RT),e(RT,Kge),e(Kge,gar),e(RT,har),e(RT,dG),e(dG,par),e(RT,_ar),e(Y,uar),e(Y,ST),e(ST,Zge),e(Zge,bar),e(ST,Tar),e(ST,cG),e(cG,Far),e(ST,Car),e(uo,Mar),e(uo,ehe),e(ehe,Ear),e(uo,yar),g(S6,uo,null),b(c,QBe,u),b(c,uc,u),e(uc,PT),e(PT,ohe),g(P6,ohe,null),e(uc,war),e(uc,rhe),e(rhe,Aar),b(c,HBe,u),b(c,Tr,u),g($6,Tr,null),e(Tr,Lar),e(Tr,bc),e(bc,Bar),e(bc,the),e(the,xar),e(bc,kar),e(bc,ahe),e(ahe,Rar),e(bc,Sar),e(Tr,Par),e(Tr,I6),e(I6,$ar),e(I6,nhe),e(nhe,Iar),e(I6,Dar),e(Tr,jar),e(Tr,gt),g(D6,gt,null),e(gt,Nar),e(gt,she),e(she,qar),e(gt,Gar),e(gt,vc),e(vc,Oar),e(vc,lhe),e(lhe,Xar),e(vc,Var),e(vc,ihe),e(ihe,zar),e(vc,War),e(gt,Qar),e(gt,dhe),e(dhe,Har),e(gt,Uar),g(j6,gt,null),e(Tr,Jar),e(Tr,bo),g(N6,bo,null),e(bo,Yar),e(bo,che),e(che,Kar),e(bo,Zar),e(bo,pn),e(pn,enr),e(pn,fhe),e(fhe,onr),e(pn,rnr),e(pn,mhe),e(mhe,tnr),e(pn,anr),e(pn,ghe),e(ghe,nnr),e(pn,snr),e(bo,lnr),e(bo,pe),e(pe,$T),e($T,hhe),e(hhe,inr),e($T,dnr),e($T,fG),e(fG,cnr),e($T,fnr),e(pe,mnr),e(pe,IT),e(IT,phe),e(phe,gnr),e(IT,hnr),e(IT,mG),e(mG,pnr),e(IT,_nr),e(pe,unr),e(pe,DT),e(DT,_he),e(_he,bnr),e(DT,vnr),e(DT,gG),e(gG,Tnr),e(DT,Fnr),e(pe,Cnr),e(pe,jT),e(jT,uhe),e(uhe,Mnr),e(jT,Enr),e(jT,hG),e(hG,ynr),e(jT,wnr),e(pe,Anr),e(pe,NT),e(NT,bhe),e(bhe,Lnr),e(NT,Bnr),e(NT,pG),e(pG,xnr),e(NT,knr),e(pe,Rnr),e(pe,qT),e(qT,vhe),e(vhe,Snr),e(qT,Pnr),e(qT,_G),e(_G,$nr),e(qT,Inr),e(pe,Dnr),e(pe,GT),e(GT,The),e(The,jnr),e(GT,Nnr),e(GT,uG),e(uG,qnr),e(GT,Gnr),e(pe,Onr),e(pe,OT),e(OT,Fhe),e(Fhe,Xnr),e(OT,Vnr),e(OT,bG),e(bG,znr),e(OT,Wnr),e(pe,Qnr),e(pe,XT),e(XT,Che),e(Che,Hnr),e(XT,Unr),e(XT,vG),e(vG,Jnr),e(XT,Ynr),e(pe,Knr),e(pe,VT),e(VT,Mhe),e(Mhe,Znr),e(VT,esr),e(VT,TG),e(TG,osr),e(VT,rsr),e(bo,tsr),e(bo,Ehe),e(Ehe,asr),e(bo,nsr),g(q6,bo,null),b(c,UBe,u),b(c,Tc,u),e(Tc,zT),e(zT,yhe),g(G6,yhe,null),e(Tc,ssr),e(Tc,whe),e(whe,lsr),b(c,JBe,u),b(c,Fr,u),g(O6,Fr,null),e(Fr,isr),e(Fr,Fc),e(Fc,dsr),e(Fc,Ahe),e(Ahe,csr),e(Fc,fsr),e(Fc,Lhe),e(Lhe,msr),e(Fc,gsr),e(Fr,hsr),e(Fr,X6),e(X6,psr),e(X6,Bhe),e(Bhe,_sr),e(X6,usr),e(Fr,bsr),e(Fr,ht),g(V6,ht,null),e(ht,vsr),e(ht,xhe),e(xhe,Tsr),e(ht,Fsr),e(ht,Cc),e(Cc,Csr),e(Cc,khe),e(khe,Msr),e(Cc,Esr),e(Cc,Rhe),e(Rhe,ysr),e(Cc,wsr),e(ht,Asr),e(ht,She),e(She,Lsr),e(ht,Bsr),g(z6,ht,null),e(Fr,xsr),e(Fr,vo),g(W6,vo,null),e(vo,ksr),e(vo,Phe),e(Phe,Rsr),e(vo,Ssr),e(vo,_n),e(_n,Psr),e(_n,$he),e($he,$sr),e(_n,Isr),e(_n,Ihe),e(Ihe,Dsr),e(_n,jsr),e(_n,Dhe),e(Dhe,Nsr),e(_n,qsr),e(vo,Gsr),e(vo,X),e(X,WT),e(WT,jhe),e(jhe,Osr),e(WT,Xsr),e(WT,FG),e(FG,Vsr),e(WT,zsr),e(X,Wsr),e(X,QT),e(QT,Nhe),e(Nhe,Qsr),e(QT,Hsr),e(QT,CG),e(CG,Usr),e(QT,Jsr),e(X,Ysr),e(X,HT),e(HT,qhe),e(qhe,Ksr),e(HT,Zsr),e(HT,MG),e(MG,elr),e(HT,olr),e(X,rlr),e(X,UT),e(UT,Ghe),e(Ghe,tlr),e(UT,alr),e(UT,EG),e(EG,nlr),e(UT,slr),e(X,llr),e(X,JT),e(JT,Ohe),e(Ohe,ilr),e(JT,dlr),e(JT,yG),e(yG,clr),e(JT,flr),e(X,mlr),e(X,YT),e(YT,Xhe),e(Xhe,glr),e(YT,hlr),e(YT,wG),e(wG,plr),e(YT,_lr),e(X,ulr),e(X,KT),e(KT,Vhe),e(Vhe,blr),e(KT,vlr),e(KT,AG),e(AG,Tlr),e(KT,Flr),e(X,Clr),e(X,ZT),e(ZT,zhe),e(zhe,Mlr),e(ZT,Elr),e(ZT,LG),e(LG,ylr),e(ZT,wlr),e(X,Alr),e(X,eF),e(eF,Whe),e(Whe,Llr),e(eF,Blr),e(eF,BG),e(BG,xlr),e(eF,klr),e(X,Rlr),e(X,oF),e(oF,Qhe),e(Qhe,Slr),e(oF,Plr),e(oF,xG),e(xG,$lr),e(oF,Ilr),e(X,Dlr),e(X,rF),e(rF,Hhe),e(Hhe,jlr),e(rF,Nlr),e(rF,kG),e(kG,qlr),e(rF,Glr),e(X,Olr),e(X,tF),e(tF,Uhe),e(Uhe,Xlr),e(tF,Vlr),e(tF,RG),e(RG,zlr),e(tF,Wlr),e(X,Qlr),e(X,aF),e(aF,Jhe),e(Jhe,Hlr),e(aF,Ulr),e(aF,SG),e(SG,Jlr),e(aF,Ylr),e(X,Klr),e(X,nF),e(nF,Yhe),e(Yhe,Zlr),e(nF,eir),e(nF,PG),e(PG,oir),e(nF,rir),e(X,tir),e(X,sF),e(sF,Khe),e(Khe,air),e(sF,nir),e(sF,$G),e($G,sir),e(sF,lir),e(X,iir),e(X,lF),e(lF,Zhe),e(Zhe,dir),e(lF,cir),e(lF,IG),e(IG,fir),e(lF,mir),e(X,gir),e(X,iF),e(iF,epe),e(epe,hir),e(iF,pir),e(iF,DG),e(DG,_ir),e(iF,uir),e(X,bir),e(X,dF),e(dF,ope),e(ope,vir),e(dF,Tir),e(dF,jG),e(jG,Fir),e(dF,Cir),e(X,Mir),e(X,cF),e(cF,rpe),e(rpe,Eir),e(cF,yir),e(cF,NG),e(NG,wir),e(cF,Air),e(X,Lir),e(X,fF),e(fF,tpe),e(tpe,Bir),e(fF,xir),e(fF,qG),e(qG,kir),e(fF,Rir),e(X,Sir),e(X,mF),e(mF,ape),e(ape,Pir),e(mF,$ir),e(mF,GG),e(GG,Iir),e(mF,Dir),e(X,jir),e(X,gF),e(gF,npe),e(npe,Nir),e(gF,qir),e(gF,OG),e(OG,Gir),e(gF,Oir),e(X,Xir),e(X,hF),e(hF,spe),e(spe,Vir),e(hF,zir),e(hF,XG),e(XG,Wir),e(hF,Qir),e(X,Hir),e(X,pF),e(pF,lpe),e(lpe,Uir),e(pF,Jir),e(pF,VG),e(VG,Yir),e(pF,Kir),e(X,Zir),e(X,_F),e(_F,ipe),e(ipe,edr),e(_F,odr),e(_F,zG),e(zG,rdr),e(_F,tdr),e(vo,adr),e(vo,dpe),e(dpe,ndr),e(vo,sdr),g(Q6,vo,null),b(c,YBe,u),b(c,Mc,u),e(Mc,uF),e(uF,cpe),g(H6,cpe,null),e(Mc,ldr),e(Mc,fpe),e(fpe,idr),b(c,KBe,u),b(c,Cr,u),g(U6,Cr,null),e(Cr,ddr),e(Cr,Ec),e(Ec,cdr),e(Ec,mpe),e(mpe,fdr),e(Ec,mdr),e(Ec,gpe),e(gpe,gdr),e(Ec,hdr),e(Cr,pdr),e(Cr,J6),e(J6,_dr),e(J6,hpe),e(hpe,udr),e(J6,bdr),e(Cr,vdr),e(Cr,pt),g(Y6,pt,null),e(pt,Tdr),e(pt,ppe),e(ppe,Fdr),e(pt,Cdr),e(pt,yc),e(yc,Mdr),e(yc,_pe),e(_pe,Edr),e(yc,ydr),e(yc,upe),e(upe,wdr),e(yc,Adr),e(pt,Ldr),e(pt,bpe),e(bpe,Bdr),e(pt,xdr),g(K6,pt,null),e(Cr,kdr),e(Cr,To),g(Z6,To,null),e(To,Rdr),e(To,vpe),e(vpe,Sdr),e(To,Pdr),e(To,un),e(un,$dr),e(un,Tpe),e(Tpe,Idr),e(un,Ddr),e(un,Fpe),e(Fpe,jdr),e(un,Ndr),e(un,Cpe),e(Cpe,qdr),e(un,Gdr),e(To,Odr),e(To,te),e(te,bF),e(bF,Mpe),e(Mpe,Xdr),e(bF,Vdr),e(bF,WG),e(WG,zdr),e(bF,Wdr),e(te,Qdr),e(te,vF),e(vF,Epe),e(Epe,Hdr),e(vF,Udr),e(vF,QG),e(QG,Jdr),e(vF,Ydr),e(te,Kdr),e(te,TF),e(TF,ype),e(ype,Zdr),e(TF,ecr),e(TF,HG),e(HG,ocr),e(TF,rcr),e(te,tcr),e(te,FF),e(FF,wpe),e(wpe,acr),e(FF,ncr),e(FF,UG),e(UG,scr),e(FF,lcr),e(te,icr),e(te,CF),e(CF,Ape),e(Ape,dcr),e(CF,ccr),e(CF,JG),e(JG,fcr),e(CF,mcr),e(te,gcr),e(te,MF),e(MF,Lpe),e(Lpe,hcr),e(MF,pcr),e(MF,YG),e(YG,_cr),e(MF,ucr),e(te,bcr),e(te,EF),e(EF,Bpe),e(Bpe,vcr),e(EF,Tcr),e(EF,KG),e(KG,Fcr),e(EF,Ccr),e(te,Mcr),e(te,yF),e(yF,xpe),e(xpe,Ecr),e(yF,ycr),e(yF,ZG),e(ZG,wcr),e(yF,Acr),e(te,Lcr),e(te,wF),e(wF,kpe),e(kpe,Bcr),e(wF,xcr),e(wF,eO),e(eO,kcr),e(wF,Rcr),e(te,Scr),e(te,AF),e(AF,Rpe),e(Rpe,Pcr),e(AF,$cr),e(AF,oO),e(oO,Icr),e(AF,Dcr),e(te,jcr),e(te,LF),e(LF,Spe),e(Spe,Ncr),e(LF,qcr),e(LF,rO),e(rO,Gcr),e(LF,Ocr),e(te,Xcr),e(te,BF),e(BF,Ppe),e(Ppe,Vcr),e(BF,zcr),e(BF,tO),e(tO,Wcr),e(BF,Qcr),e(te,Hcr),e(te,xF),e(xF,$pe),e($pe,Ucr),e(xF,Jcr),e(xF,aO),e(aO,Ycr),e(xF,Kcr),e(te,Zcr),e(te,kF),e(kF,Ipe),e(Ipe,efr),e(kF,ofr),e(kF,nO),e(nO,rfr),e(kF,tfr),e(te,afr),e(te,RF),e(RF,Dpe),e(Dpe,nfr),e(RF,sfr),e(RF,sO),e(sO,lfr),e(RF,ifr),e(te,dfr),e(te,SF),e(SF,jpe),e(jpe,cfr),e(SF,ffr),e(SF,lO),e(lO,mfr),e(SF,gfr),e(te,hfr),e(te,PF),e(PF,Npe),e(Npe,pfr),e(PF,_fr),e(PF,iO),e(iO,ufr),e(PF,bfr),e(To,vfr),e(To,qpe),e(qpe,Tfr),e(To,Ffr),g(eA,To,null),b(c,ZBe,u),b(c,wc,u),e(wc,$F),e($F,Gpe),g(oA,Gpe,null),e(wc,Cfr),e(wc,Ope),e(Ope,Mfr),b(c,exe,u),b(c,Mr,u),g(rA,Mr,null),e(Mr,Efr),e(Mr,Ac),e(Ac,yfr),e(Ac,Xpe),e(Xpe,wfr),e(Ac,Afr),e(Ac,Vpe),e(Vpe,Lfr),e(Ac,Bfr),e(Mr,xfr),e(Mr,tA),e(tA,kfr),e(tA,zpe),e(zpe,Rfr),e(tA,Sfr),e(Mr,Pfr),e(Mr,_t),g(aA,_t,null),e(_t,$fr),e(_t,Wpe),e(Wpe,Ifr),e(_t,Dfr),e(_t,Lc),e(Lc,jfr),e(Lc,Qpe),e(Qpe,Nfr),e(Lc,qfr),e(Lc,Hpe),e(Hpe,Gfr),e(Lc,Ofr),e(_t,Xfr),e(_t,Upe),e(Upe,Vfr),e(_t,zfr),g(nA,_t,null),e(Mr,Wfr),e(Mr,Fo),g(sA,Fo,null),e(Fo,Qfr),e(Fo,Jpe),e(Jpe,Hfr),e(Fo,Ufr),e(Fo,bn),e(bn,Jfr),e(bn,Ype),e(Ype,Yfr),e(bn,Kfr),e(bn,Kpe),e(Kpe,Zfr),e(bn,emr),e(bn,Zpe),e(Zpe,omr),e(bn,rmr),e(Fo,tmr),e(Fo,e_e),e(e_e,IF),e(IF,o_e),e(o_e,amr),e(IF,nmr),e(IF,dO),e(dO,smr),e(IF,lmr),e(Fo,imr),e(Fo,r_e),e(r_e,dmr),e(Fo,cmr),g(lA,Fo,null),b(c,oxe,u),b(c,Bc,u),e(Bc,DF),e(DF,t_e),g(iA,t_e,null),e(Bc,fmr),e(Bc,a_e),e(a_e,mmr),b(c,rxe,u),b(c,Er,u),g(dA,Er,null),e(Er,gmr),e(Er,xc),e(xc,hmr),e(xc,n_e),e(n_e,pmr),e(xc,_mr),e(xc,s_e),e(s_e,umr),e(xc,bmr),e(Er,vmr),e(Er,cA),e(cA,Tmr),e(cA,l_e),e(l_e,Fmr),e(cA,Cmr),e(Er,Mmr),e(Er,ut),g(fA,ut,null),e(ut,Emr),e(ut,i_e),e(i_e,ymr),e(ut,wmr),e(ut,kc),e(kc,Amr),e(kc,d_e),e(d_e,Lmr),e(kc,Bmr),e(kc,c_e),e(c_e,xmr),e(kc,kmr),e(ut,Rmr),e(ut,f_e),e(f_e,Smr),e(ut,Pmr),g(mA,ut,null),e(Er,$mr),e(Er,Co),g(gA,Co,null),e(Co,Imr),e(Co,m_e),e(m_e,Dmr),e(Co,jmr),e(Co,vn),e(vn,Nmr),e(vn,g_e),e(g_e,qmr),e(vn,Gmr),e(vn,h_e),e(h_e,Omr),e(vn,Xmr),e(vn,p_e),e(p_e,Vmr),e(vn,zmr),e(Co,Wmr),e(Co,K),e(K,jF),e(jF,__e),e(__e,Qmr),e(jF,Hmr),e(jF,cO),e(cO,Umr),e(jF,Jmr),e(K,Ymr),e(K,NF),e(NF,u_e),e(u_e,Kmr),e(NF,Zmr),e(NF,fO),e(fO,egr),e(NF,ogr),e(K,rgr),e(K,qF),e(qF,b_e),e(b_e,tgr),e(qF,agr),e(qF,mO),e(mO,ngr),e(qF,sgr),e(K,lgr),e(K,GF),e(GF,v_e),e(v_e,igr),e(GF,dgr),e(GF,gO),e(gO,cgr),e(GF,fgr),e(K,mgr),e(K,OF),e(OF,T_e),e(T_e,ggr),e(OF,hgr),e(OF,hO),e(hO,pgr),e(OF,_gr),e(K,ugr),e(K,XF),e(XF,F_e),e(F_e,bgr),e(XF,vgr),e(XF,pO),e(pO,Tgr),e(XF,Fgr),e(K,Cgr),e(K,VF),e(VF,C_e),e(C_e,Mgr),e(VF,Egr),e(VF,_O),e(_O,ygr),e(VF,wgr),e(K,Agr),e(K,zF),e(zF,M_e),e(M_e,Lgr),e(zF,Bgr),e(zF,uO),e(uO,xgr),e(zF,kgr),e(K,Rgr),e(K,WF),e(WF,E_e),e(E_e,Sgr),e(WF,Pgr),e(WF,bO),e(bO,$gr),e(WF,Igr),e(K,Dgr),e(K,QF),e(QF,y_e),e(y_e,jgr),e(QF,Ngr),e(QF,vO),e(vO,qgr),e(QF,Ggr),e(K,Ogr),e(K,HF),e(HF,w_e),e(w_e,Xgr),e(HF,Vgr),e(HF,TO),e(TO,zgr),e(HF,Wgr),e(K,Qgr),e(K,UF),e(UF,A_e),e(A_e,Hgr),e(UF,Ugr),e(UF,FO),e(FO,Jgr),e(UF,Ygr),e(K,Kgr),e(K,JF),e(JF,L_e),e(L_e,Zgr),e(JF,ehr),e(JF,CO),e(CO,ohr),e(JF,rhr),e(K,thr),e(K,YF),e(YF,B_e),e(B_e,ahr),e(YF,nhr),e(YF,MO),e(MO,shr),e(YF,lhr),e(K,ihr),e(K,KF),e(KF,x_e),e(x_e,dhr),e(KF,chr),e(KF,EO),e(EO,fhr),e(KF,mhr),e(K,ghr),e(K,ZF),e(ZF,k_e),e(k_e,hhr),e(ZF,phr),e(ZF,yO),e(yO,_hr),e(ZF,uhr),e(K,bhr),e(K,e9),e(e9,R_e),e(R_e,vhr),e(e9,Thr),e(e9,wO),e(wO,Fhr),e(e9,Chr),e(K,Mhr),e(K,o9),e(o9,S_e),e(S_e,Ehr),e(o9,yhr),e(o9,AO),e(AO,whr),e(o9,Ahr),e(K,Lhr),e(K,r9),e(r9,P_e),e(P_e,Bhr),e(r9,xhr),e(r9,LO),e(LO,khr),e(r9,Rhr),e(K,Shr),e(K,t9),e(t9,$_e),e($_e,Phr),e(t9,$hr),e(t9,BO),e(BO,Ihr),e(t9,Dhr),e(Co,jhr),e(Co,I_e),e(I_e,Nhr),e(Co,qhr),g(hA,Co,null),b(c,txe,u),b(c,Rc,u),e(Rc,a9),e(a9,D_e),g(pA,D_e,null),e(Rc,Ghr),e(Rc,j_e),e(j_e,Ohr),b(c,axe,u),b(c,yr,u),g(_A,yr,null),e(yr,Xhr),e(yr,Sc),e(Sc,Vhr),e(Sc,N_e),e(N_e,zhr),e(Sc,Whr),e(Sc,q_e),e(q_e,Qhr),e(Sc,Hhr),e(yr,Uhr),e(yr,uA),e(uA,Jhr),e(uA,G_e),e(G_e,Yhr),e(uA,Khr),e(yr,Zhr),e(yr,bt),g(bA,bt,null),e(bt,epr),e(bt,O_e),e(O_e,opr),e(bt,rpr),e(bt,Pc),e(Pc,tpr),e(Pc,X_e),e(X_e,apr),e(Pc,npr),e(Pc,V_e),e(V_e,spr),e(Pc,lpr),e(bt,ipr),e(bt,z_e),e(z_e,dpr),e(bt,cpr),g(vA,bt,null),e(yr,fpr),e(yr,Mo),g(TA,Mo,null),e(Mo,mpr),e(Mo,W_e),e(W_e,gpr),e(Mo,hpr),e(Mo,Tn),e(Tn,ppr),e(Tn,Q_e),e(Q_e,_pr),e(Tn,upr),e(Tn,H_e),e(H_e,bpr),e(Tn,vpr),e(Tn,U_e),e(U_e,Tpr),e(Tn,Fpr),e(Mo,Cpr),e(Mo,Z),e(Z,n9),e(n9,J_e),e(J_e,Mpr),e(n9,Epr),e(n9,xO),e(xO,ypr),e(n9,wpr),e(Z,Apr),e(Z,s9),e(s9,Y_e),e(Y_e,Lpr),e(s9,Bpr),e(s9,kO),e(kO,xpr),e(s9,kpr),e(Z,Rpr),e(Z,l9),e(l9,K_e),e(K_e,Spr),e(l9,Ppr),e(l9,RO),e(RO,$pr),e(l9,Ipr),e(Z,Dpr),e(Z,i9),e(i9,Z_e),e(Z_e,jpr),e(i9,Npr),e(i9,SO),e(SO,qpr),e(i9,Gpr),e(Z,Opr),e(Z,d9),e(d9,eue),e(eue,Xpr),e(d9,Vpr),e(d9,PO),e(PO,zpr),e(d9,Wpr),e(Z,Qpr),e(Z,c9),e(c9,oue),e(oue,Hpr),e(c9,Upr),e(c9,$O),e($O,Jpr),e(c9,Ypr),e(Z,Kpr),e(Z,f9),e(f9,rue),e(rue,Zpr),e(f9,e_r),e(f9,IO),e(IO,o_r),e(f9,r_r),e(Z,t_r),e(Z,m9),e(m9,tue),e(tue,a_r),e(m9,n_r),e(m9,DO),e(DO,s_r),e(m9,l_r),e(Z,i_r),e(Z,g9),e(g9,aue),e(aue,d_r),e(g9,c_r),e(g9,jO),e(jO,f_r),e(g9,m_r),e(Z,g_r),e(Z,h9),e(h9,nue),e(nue,h_r),e(h9,p_r),e(h9,NO),e(NO,__r),e(h9,u_r),e(Z,b_r),e(Z,p9),e(p9,sue),e(sue,v_r),e(p9,T_r),e(p9,qO),e(qO,F_r),e(p9,C_r),e(Z,M_r),e(Z,_9),e(_9,lue),e(lue,E_r),e(_9,y_r),e(_9,GO),e(GO,w_r),e(_9,A_r),e(Z,L_r),e(Z,u9),e(u9,iue),e(iue,B_r),e(u9,x_r),e(u9,OO),e(OO,k_r),e(u9,R_r),e(Z,S_r),e(Z,b9),e(b9,due),e(due,P_r),e(b9,$_r),e(b9,XO),e(XO,I_r),e(b9,D_r),e(Z,j_r),e(Z,v9),e(v9,cue),e(cue,N_r),e(v9,q_r),e(v9,VO),e(VO,G_r),e(v9,O_r),e(Z,X_r),e(Z,T9),e(T9,fue),e(fue,V_r),e(T9,z_r),e(T9,zO),e(zO,W_r),e(T9,Q_r),e(Z,H_r),e(Z,F9),e(F9,mue),e(mue,U_r),e(F9,J_r),e(F9,WO),e(WO,Y_r),e(F9,K_r),e(Z,Z_r),e(Z,C9),e(C9,gue),e(gue,eur),e(C9,our),e(C9,QO),e(QO,rur),e(C9,tur),e(Z,aur),e(Z,M9),e(M9,hue),e(hue,nur),e(M9,sur),e(M9,HO),e(HO,lur),e(M9,iur),e(Mo,dur),e(Mo,pue),e(pue,cur),e(Mo,fur),g(FA,Mo,null),b(c,nxe,u),b(c,$c,u),e($c,E9),e(E9,_ue),g(CA,_ue,null),e($c,mur),e($c,uue),e(uue,gur),b(c,sxe,u),b(c,wr,u),g(MA,wr,null),e(wr,hur),e(wr,Ic),e(Ic,pur),e(Ic,bue),e(bue,_ur),e(Ic,uur),e(Ic,vue),e(vue,bur),e(Ic,vur),e(wr,Tur),e(wr,EA),e(EA,Fur),e(EA,Tue),e(Tue,Cur),e(EA,Mur),e(wr,Eur),e(wr,vt),g(yA,vt,null),e(vt,yur),e(vt,Fue),e(Fue,wur),e(vt,Aur),e(vt,Dc),e(Dc,Lur),e(Dc,Cue),e(Cue,Bur),e(Dc,xur),e(Dc,Mue),e(Mue,kur),e(Dc,Rur),e(vt,Sur),e(vt,Eue),e(Eue,Pur),e(vt,$ur),g(wA,vt,null),e(wr,Iur),e(wr,Eo),g(AA,Eo,null),e(Eo,Dur),e(Eo,yue),e(yue,jur),e(Eo,Nur),e(Eo,Fn),e(Fn,qur),e(Fn,wue),e(wue,Gur),e(Fn,Our),e(Fn,Aue),e(Aue,Xur),e(Fn,Vur),e(Fn,Lue),e(Lue,zur),e(Fn,Wur),e(Eo,Qur),e(Eo,Bue),e(Bue,y9),e(y9,xue),e(xue,Hur),e(y9,Uur),e(y9,UO),e(UO,Jur),e(y9,Yur),e(Eo,Kur),e(Eo,kue),e(kue,Zur),e(Eo,e2r),g(LA,Eo,null),b(c,lxe,u),b(c,jc,u),e(jc,w9),e(w9,Rue),g(BA,Rue,null),e(jc,o2r),e(jc,Sue),e(Sue,r2r),b(c,ixe,u),b(c,Ar,u),g(xA,Ar,null),e(Ar,t2r),e(Ar,Nc),e(Nc,a2r),e(Nc,Pue),e(Pue,n2r),e(Nc,s2r),e(Nc,$ue),e($ue,l2r),e(Nc,i2r),e(Ar,d2r),e(Ar,kA),e(kA,c2r),e(kA,Iue),e(Iue,f2r),e(kA,m2r),e(Ar,g2r),e(Ar,Tt),g(RA,Tt,null),e(Tt,h2r),e(Tt,Due),e(Due,p2r),e(Tt,_2r),e(Tt,qc),e(qc,u2r),e(qc,jue),e(jue,b2r),e(qc,v2r),e(qc,Nue),e(Nue,T2r),e(qc,F2r),e(Tt,C2r),e(Tt,que),e(que,M2r),e(Tt,E2r),g(SA,Tt,null),e(Ar,y2r),e(Ar,yo),g(PA,yo,null),e(yo,w2r),e(yo,Gue),e(Gue,A2r),e(yo,L2r),e(yo,Cn),e(Cn,B2r),e(Cn,Oue),e(Oue,x2r),e(Cn,k2r),e(Cn,Xue),e(Xue,R2r),e(Cn,S2r),e(Cn,Vue),e(Vue,P2r),e(Cn,$2r),e(yo,I2r),e(yo,zue),e(zue,A9),e(A9,Wue),e(Wue,D2r),e(A9,j2r),e(A9,JO),e(JO,N2r),e(A9,q2r),e(yo,G2r),e(yo,Que),e(Que,O2r),e(yo,X2r),g($A,yo,null),b(c,dxe,u),b(c,Gc,u),e(Gc,L9),e(L9,Hue),g(IA,Hue,null),e(Gc,V2r),e(Gc,Uue),e(Uue,z2r),b(c,cxe,u),b(c,Lr,u),g(DA,Lr,null),e(Lr,W2r),e(Lr,Oc),e(Oc,Q2r),e(Oc,Jue),e(Jue,H2r),e(Oc,U2r),e(Oc,Yue),e(Yue,J2r),e(Oc,Y2r),e(Lr,K2r),e(Lr,jA),e(jA,Z2r),e(jA,Kue),e(Kue,e1r),e(jA,o1r),e(Lr,r1r),e(Lr,Ft),g(NA,Ft,null),e(Ft,t1r),e(Ft,Zue),e(Zue,a1r),e(Ft,n1r),e(Ft,Xc),e(Xc,s1r),e(Xc,e2e),e(e2e,l1r),e(Xc,i1r),e(Xc,o2e),e(o2e,d1r),e(Xc,c1r),e(Ft,f1r),e(Ft,r2e),e(r2e,m1r),e(Ft,g1r),g(qA,Ft,null),e(Lr,h1r),e(Lr,wo),g(GA,wo,null),e(wo,p1r),e(wo,t2e),e(t2e,_1r),e(wo,u1r),e(wo,Mn),e(Mn,b1r),e(Mn,a2e),e(a2e,v1r),e(Mn,T1r),e(Mn,n2e),e(n2e,F1r),e(Mn,C1r),e(Mn,s2e),e(s2e,M1r),e(Mn,E1r),e(wo,y1r),e(wo,z),e(z,B9),e(B9,l2e),e(l2e,w1r),e(B9,A1r),e(B9,YO),e(YO,L1r),e(B9,B1r),e(z,x1r),e(z,x9),e(x9,i2e),e(i2e,k1r),e(x9,R1r),e(x9,KO),e(KO,S1r),e(x9,P1r),e(z,$1r),e(z,k9),e(k9,d2e),e(d2e,I1r),e(k9,D1r),e(k9,ZO),e(ZO,j1r),e(k9,N1r),e(z,q1r),e(z,R9),e(R9,c2e),e(c2e,G1r),e(R9,O1r),e(R9,eX),e(eX,X1r),e(R9,V1r),e(z,z1r),e(z,S9),e(S9,f2e),e(f2e,W1r),e(S9,Q1r),e(S9,oX),e(oX,H1r),e(S9,U1r),e(z,J1r),e(z,P9),e(P9,m2e),e(m2e,Y1r),e(P9,K1r),e(P9,rX),e(rX,Z1r),e(P9,ebr),e(z,obr),e(z,$9),e($9,g2e),e(g2e,rbr),e($9,tbr),e($9,tX),e(tX,abr),e($9,nbr),e(z,sbr),e(z,I9),e(I9,h2e),e(h2e,lbr),e(I9,ibr),e(I9,aX),e(aX,dbr),e(I9,cbr),e(z,fbr),e(z,D9),e(D9,p2e),e(p2e,mbr),e(D9,gbr),e(D9,nX),e(nX,hbr),e(D9,pbr),e(z,_br),e(z,j9),e(j9,_2e),e(_2e,ubr),e(j9,bbr),e(j9,sX),e(sX,vbr),e(j9,Tbr),e(z,Fbr),e(z,N9),e(N9,u2e),e(u2e,Cbr),e(N9,Mbr),e(N9,lX),e(lX,Ebr),e(N9,ybr),e(z,wbr),e(z,q9),e(q9,b2e),e(b2e,Abr),e(q9,Lbr),e(q9,iX),e(iX,Bbr),e(q9,xbr),e(z,kbr),e(z,G9),e(G9,v2e),e(v2e,Rbr),e(G9,Sbr),e(G9,dX),e(dX,Pbr),e(G9,$br),e(z,Ibr),e(z,O9),e(O9,T2e),e(T2e,Dbr),e(O9,jbr),e(O9,cX),e(cX,Nbr),e(O9,qbr),e(z,Gbr),e(z,X9),e(X9,F2e),e(F2e,Obr),e(X9,Xbr),e(X9,fX),e(fX,Vbr),e(X9,zbr),e(z,Wbr),e(z,V9),e(V9,C2e),e(C2e,Qbr),e(V9,Hbr),e(V9,mX),e(mX,Ubr),e(V9,Jbr),e(z,Ybr),e(z,z9),e(z9,M2e),e(M2e,Kbr),e(z9,Zbr),e(z9,gX),e(gX,e3r),e(z9,o3r),e(z,r3r),e(z,W9),e(W9,E2e),e(E2e,t3r),e(W9,a3r),e(W9,hX),e(hX,n3r),e(W9,s3r),e(z,l3r),e(z,Q9),e(Q9,y2e),e(y2e,i3r),e(Q9,d3r),e(Q9,pX),e(pX,c3r),e(Q9,f3r),e(z,m3r),e(z,H9),e(H9,w2e),e(w2e,g3r),e(H9,h3r),e(H9,_X),e(_X,p3r),e(H9,_3r),e(z,u3r),e(z,U9),e(U9,A2e),e(A2e,b3r),e(U9,v3r),e(U9,uX),e(uX,T3r),e(U9,F3r),e(z,C3r),e(z,J9),e(J9,L2e),e(L2e,M3r),e(J9,E3r),e(J9,bX),e(bX,y3r),e(J9,w3r),e(z,A3r),e(z,Y9),e(Y9,B2e),e(B2e,L3r),e(Y9,B3r),e(Y9,vX),e(vX,x3r),e(Y9,k3r),e(z,R3r),e(z,K9),e(K9,x2e),e(x2e,S3r),e(K9,P3r),e(K9,TX),e(TX,$3r),e(K9,I3r),e(wo,D3r),e(wo,k2e),e(k2e,j3r),e(wo,N3r),g(OA,wo,null),b(c,fxe,u),b(c,Vc,u),e(Vc,Z9),e(Z9,R2e),g(XA,R2e,null),e(Vc,q3r),e(Vc,S2e),e(S2e,G3r),b(c,mxe,u),b(c,Br,u),g(VA,Br,null),e(Br,O3r),e(Br,zc),e(zc,X3r),e(zc,P2e),e(P2e,V3r),e(zc,z3r),e(zc,$2e),e($2e,W3r),e(zc,Q3r),e(Br,H3r),e(Br,zA),e(zA,U3r),e(zA,I2e),e(I2e,J3r),e(zA,Y3r),e(Br,K3r),e(Br,Ct),g(WA,Ct,null),e(Ct,Z3r),e(Ct,D2e),e(D2e,e5r),e(Ct,o5r),e(Ct,Wc),e(Wc,r5r),e(Wc,j2e),e(j2e,t5r),e(Wc,a5r),e(Wc,N2e),e(N2e,n5r),e(Wc,s5r),e(Ct,l5r),e(Ct,q2e),e(q2e,i5r),e(Ct,d5r),g(QA,Ct,null),e(Br,c5r),e(Br,Ao),g(HA,Ao,null),e(Ao,f5r),e(Ao,G2e),e(G2e,m5r),e(Ao,g5r),e(Ao,En),e(En,h5r),e(En,O2e),e(O2e,p5r),e(En,_5r),e(En,X2e),e(X2e,u5r),e(En,b5r),e(En,V2e),e(V2e,v5r),e(En,T5r),e(Ao,F5r),e(Ao,yn),e(yn,eC),e(eC,z2e),e(z2e,C5r),e(eC,M5r),e(eC,FX),e(FX,E5r),e(eC,y5r),e(yn,w5r),e(yn,oC),e(oC,W2e),e(W2e,A5r),e(oC,L5r),e(oC,CX),e(CX,B5r),e(oC,x5r),e(yn,k5r),e(yn,rC),e(rC,Q2e),e(Q2e,R5r),e(rC,S5r),e(rC,MX),e(MX,P5r),e(rC,$5r),e(yn,I5r),e(yn,tC),e(tC,H2e),e(H2e,D5r),e(tC,j5r),e(tC,EX),e(EX,N5r),e(tC,q5r),e(Ao,G5r),e(Ao,U2e),e(U2e,O5r),e(Ao,X5r),g(UA,Ao,null),b(c,gxe,u),b(c,Qc,u),e(Qc,aC),e(aC,J2e),g(JA,J2e,null),e(Qc,V5r),e(Qc,Y2e),e(Y2e,z5r),b(c,hxe,u),b(c,xr,u),g(YA,xr,null),e(xr,W5r),e(xr,Hc),e(Hc,Q5r),e(Hc,K2e),e(K2e,H5r),e(Hc,U5r),e(Hc,Z2e),e(Z2e,J5r),e(Hc,Y5r),e(xr,K5r),e(xr,KA),e(KA,Z5r),e(KA,e1e),e(e1e,evr),e(KA,ovr),e(xr,rvr),e(xr,Mt),g(ZA,Mt,null),e(Mt,tvr),e(Mt,o1e),e(o1e,avr),e(Mt,nvr),e(Mt,Uc),e(Uc,svr),e(Uc,r1e),e(r1e,lvr),e(Uc,ivr),e(Uc,t1e),e(t1e,dvr),e(Uc,cvr),e(Mt,fvr),e(Mt,a1e),e(a1e,mvr),e(Mt,gvr),g(e0,Mt,null),e(xr,hvr),e(xr,Lo),g(o0,Lo,null),e(Lo,pvr),e(Lo,n1e),e(n1e,_vr),e(Lo,uvr),e(Lo,wn),e(wn,bvr),e(wn,s1e),e(s1e,vvr),e(wn,Tvr),e(wn,l1e),e(l1e,Fvr),e(wn,Cvr),e(wn,i1e),e(i1e,Mvr),e(wn,Evr),e(Lo,yvr),e(Lo,fe),e(fe,nC),e(nC,d1e),e(d1e,wvr),e(nC,Avr),e(nC,yX),e(yX,Lvr),e(nC,Bvr),e(fe,xvr),e(fe,sC),e(sC,c1e),e(c1e,kvr),e(sC,Rvr),e(sC,wX),e(wX,Svr),e(sC,Pvr),e(fe,$vr),e(fe,lC),e(lC,f1e),e(f1e,Ivr),e(lC,Dvr),e(lC,AX),e(AX,jvr),e(lC,Nvr),e(fe,qvr),e(fe,iC),e(iC,m1e),e(m1e,Gvr),e(iC,Ovr),e(iC,LX),e(LX,Xvr),e(iC,Vvr),e(fe,zvr),e(fe,dC),e(dC,g1e),e(g1e,Wvr),e(dC,Qvr),e(dC,BX),e(BX,Hvr),e(dC,Uvr),e(fe,Jvr),e(fe,cC),e(cC,h1e),e(h1e,Yvr),e(cC,Kvr),e(cC,xX),e(xX,Zvr),e(cC,eTr),e(fe,oTr),e(fe,fC),e(fC,p1e),e(p1e,rTr),e(fC,tTr),e(fC,kX),e(kX,aTr),e(fC,nTr),e(fe,sTr),e(fe,mC),e(mC,_1e),e(_1e,lTr),e(mC,iTr),e(mC,RX),e(RX,dTr),e(mC,cTr),e(fe,fTr),e(fe,gC),e(gC,u1e),e(u1e,mTr),e(gC,gTr),e(gC,SX),e(SX,hTr),e(gC,pTr),e(fe,_Tr),e(fe,hC),e(hC,b1e),e(b1e,uTr),e(hC,bTr),e(hC,PX),e(PX,vTr),e(hC,TTr),e(fe,FTr),e(fe,pC),e(pC,v1e),e(v1e,CTr),e(pC,MTr),e(pC,$X),e($X,ETr),e(pC,yTr),e(Lo,wTr),e(Lo,T1e),e(T1e,ATr),e(Lo,LTr),g(r0,Lo,null),b(c,pxe,u),b(c,Jc,u),e(Jc,_C),e(_C,F1e),g(t0,F1e,null),e(Jc,BTr),e(Jc,C1e),e(C1e,xTr),b(c,_xe,u),b(c,kr,u),g(a0,kr,null),e(kr,kTr),e(kr,Yc),e(Yc,RTr),e(Yc,M1e),e(M1e,STr),e(Yc,PTr),e(Yc,E1e),e(E1e,$Tr),e(Yc,ITr),e(kr,DTr),e(kr,n0),e(n0,jTr),e(n0,y1e),e(y1e,NTr),e(n0,qTr),e(kr,GTr),e(kr,Et),g(s0,Et,null),e(Et,OTr),e(Et,w1e),e(w1e,XTr),e(Et,VTr),e(Et,Kc),e(Kc,zTr),e(Kc,A1e),e(A1e,WTr),e(Kc,QTr),e(Kc,L1e),e(L1e,HTr),e(Kc,UTr),e(Et,JTr),e(Et,B1e),e(B1e,YTr),e(Et,KTr),g(l0,Et,null),e(kr,ZTr),e(kr,Bo),g(i0,Bo,null),e(Bo,eFr),e(Bo,x1e),e(x1e,oFr),e(Bo,rFr),e(Bo,An),e(An,tFr),e(An,k1e),e(k1e,aFr),e(An,nFr),e(An,R1e),e(R1e,sFr),e(An,lFr),e(An,S1e),e(S1e,iFr),e(An,dFr),e(Bo,cFr),e(Bo,ve),e(ve,uC),e(uC,P1e),e(P1e,fFr),e(uC,mFr),e(uC,IX),e(IX,gFr),e(uC,hFr),e(ve,pFr),e(ve,bC),e(bC,$1e),e($1e,_Fr),e(bC,uFr),e(bC,DX),e(DX,bFr),e(bC,vFr),e(ve,TFr),e(ve,vC),e(vC,I1e),e(I1e,FFr),e(vC,CFr),e(vC,jX),e(jX,MFr),e(vC,EFr),e(ve,yFr),e(ve,TC),e(TC,D1e),e(D1e,wFr),e(TC,AFr),e(TC,NX),e(NX,LFr),e(TC,BFr),e(ve,xFr),e(ve,FC),e(FC,j1e),e(j1e,kFr),e(FC,RFr),e(FC,qX),e(qX,SFr),e(FC,PFr),e(ve,$Fr),e(ve,CC),e(CC,N1e),e(N1e,IFr),e(CC,DFr),e(CC,GX),e(GX,jFr),e(CC,NFr),e(ve,qFr),e(ve,MC),e(MC,q1e),e(q1e,GFr),e(MC,OFr),e(MC,OX),e(OX,XFr),e(MC,VFr),e(ve,zFr),e(ve,EC),e(EC,G1e),e(G1e,WFr),e(EC,QFr),e(EC,XX),e(XX,HFr),e(EC,UFr),e(ve,JFr),e(ve,yC),e(yC,O1e),e(O1e,YFr),e(yC,KFr),e(yC,VX),e(VX,ZFr),e(yC,e9r),e(Bo,o9r),e(Bo,X1e),e(X1e,r9r),e(Bo,t9r),g(d0,Bo,null),b(c,uxe,u),b(c,Zc,u),e(Zc,wC),e(wC,V1e),g(c0,V1e,null),e(Zc,a9r),e(Zc,z1e),e(z1e,n9r),b(c,bxe,u),b(c,Rr,u),g(f0,Rr,null),e(Rr,s9r),e(Rr,ef),e(ef,l9r),e(ef,W1e),e(W1e,i9r),e(ef,d9r),e(ef,Q1e),e(Q1e,c9r),e(ef,f9r),e(Rr,m9r),e(Rr,m0),e(m0,g9r),e(m0,H1e),e(H1e,h9r),e(m0,p9r),e(Rr,_9r),e(Rr,yt),g(g0,yt,null),e(yt,u9r),e(yt,U1e),e(U1e,b9r),e(yt,v9r),e(yt,of),e(of,T9r),e(of,J1e),e(J1e,F9r),e(of,C9r),e(of,Y1e),e(Y1e,M9r),e(of,E9r),e(yt,y9r),e(yt,K1e),e(K1e,w9r),e(yt,A9r),g(h0,yt,null),e(Rr,L9r),e(Rr,xo),g(p0,xo,null),e(xo,B9r),e(xo,Z1e),e(Z1e,x9r),e(xo,k9r),e(xo,Ln),e(Ln,R9r),e(Ln,ebe),e(ebe,S9r),e(Ln,P9r),e(Ln,obe),e(obe,$9r),e(Ln,I9r),e(Ln,rbe),e(rbe,D9r),e(Ln,j9r),e(xo,N9r),e(xo,Te),e(Te,AC),e(AC,tbe),e(tbe,q9r),e(AC,G9r),e(AC,zX),e(zX,O9r),e(AC,X9r),e(Te,V9r),e(Te,LC),e(LC,abe),e(abe,z9r),e(LC,W9r),e(LC,WX),e(WX,Q9r),e(LC,H9r),e(Te,U9r),e(Te,BC),e(BC,nbe),e(nbe,J9r),e(BC,Y9r),e(BC,QX),e(QX,K9r),e(BC,Z9r),e(Te,eCr),e(Te,xC),e(xC,sbe),e(sbe,oCr),e(xC,rCr),e(xC,HX),e(HX,tCr),e(xC,aCr),e(Te,nCr),e(Te,kC),e(kC,lbe),e(lbe,sCr),e(kC,lCr),e(kC,UX),e(UX,iCr),e(kC,dCr),e(Te,cCr),e(Te,RC),e(RC,ibe),e(ibe,fCr),e(RC,mCr),e(RC,JX),e(JX,gCr),e(RC,hCr),e(Te,pCr),e(Te,SC),e(SC,dbe),e(dbe,_Cr),e(SC,uCr),e(SC,YX),e(YX,bCr),e(SC,vCr),e(Te,TCr),e(Te,PC),e(PC,cbe),e(cbe,FCr),e(PC,CCr),e(PC,KX),e(KX,MCr),e(PC,ECr),e(Te,yCr),e(Te,$C),e($C,fbe),e(fbe,wCr),e($C,ACr),e($C,ZX),e(ZX,LCr),e($C,BCr),e(xo,xCr),e(xo,mbe),e(mbe,kCr),e(xo,RCr),g(_0,xo,null),b(c,vxe,u),b(c,rf,u),e(rf,IC),e(IC,gbe),g(u0,gbe,null),e(rf,SCr),e(rf,hbe),e(hbe,PCr),b(c,Txe,u),b(c,Sr,u),g(b0,Sr,null),e(Sr,$Cr),e(Sr,tf),e(tf,ICr),e(tf,pbe),e(pbe,DCr),e(tf,jCr),e(tf,_be),e(_be,NCr),e(tf,qCr),e(Sr,GCr),e(Sr,v0),e(v0,OCr),e(v0,ube),e(ube,XCr),e(v0,VCr),e(Sr,zCr),e(Sr,wt),g(T0,wt,null),e(wt,WCr),e(wt,bbe),e(bbe,QCr),e(wt,HCr),e(wt,af),e(af,UCr),e(af,vbe),e(vbe,JCr),e(af,YCr),e(af,Tbe),e(Tbe,KCr),e(af,ZCr),e(wt,e4r),e(wt,Fbe),e(Fbe,o4r),e(wt,r4r),g(F0,wt,null),e(Sr,t4r),e(Sr,ko),g(C0,ko,null),e(ko,a4r),e(ko,Cbe),e(Cbe,n4r),e(ko,s4r),e(ko,Bn),e(Bn,l4r),e(Bn,Mbe),e(Mbe,i4r),e(Bn,d4r),e(Bn,Ebe),e(Ebe,c4r),e(Bn,f4r),e(Bn,ybe),e(ybe,m4r),e(Bn,g4r),e(ko,h4r),e(ko,Fe),e(Fe,DC),e(DC,wbe),e(wbe,p4r),e(DC,_4r),e(DC,eV),e(eV,u4r),e(DC,b4r),e(Fe,v4r),e(Fe,jC),e(jC,Abe),e(Abe,T4r),e(jC,F4r),e(jC,oV),e(oV,C4r),e(jC,M4r),e(Fe,E4r),e(Fe,NC),e(NC,Lbe),e(Lbe,y4r),e(NC,w4r),e(NC,rV),e(rV,A4r),e(NC,L4r),e(Fe,B4r),e(Fe,qC),e(qC,Bbe),e(Bbe,x4r),e(qC,k4r),e(qC,tV),e(tV,R4r),e(qC,S4r),e(Fe,P4r),e(Fe,GC),e(GC,xbe),e(xbe,$4r),e(GC,I4r),e(GC,aV),e(aV,D4r),e(GC,j4r),e(Fe,N4r),e(Fe,OC),e(OC,kbe),e(kbe,q4r),e(OC,G4r),e(OC,nV),e(nV,O4r),e(OC,X4r),e(Fe,V4r),e(Fe,XC),e(XC,Rbe),e(Rbe,z4r),e(XC,W4r),e(XC,sV),e(sV,Q4r),e(XC,H4r),e(Fe,U4r),e(Fe,VC),e(VC,Sbe),e(Sbe,J4r),e(VC,Y4r),e(VC,lV),e(lV,K4r),e(VC,Z4r),e(Fe,eMr),e(Fe,zC),e(zC,Pbe),e(Pbe,oMr),e(zC,rMr),e(zC,iV),e(iV,tMr),e(zC,aMr),e(ko,nMr),e(ko,$be),e($be,sMr),e(ko,lMr),g(M0,ko,null),b(c,Fxe,u),b(c,nf,u),e(nf,WC),e(WC,Ibe),g(E0,Ibe,null),e(nf,iMr),e(nf,Dbe),e(Dbe,dMr),b(c,Cxe,u),b(c,Pr,u),g(y0,Pr,null),e(Pr,cMr),e(Pr,sf),e(sf,fMr),e(sf,jbe),e(jbe,mMr),e(sf,gMr),e(sf,Nbe),e(Nbe,hMr),e(sf,pMr),e(Pr,_Mr),e(Pr,w0),e(w0,uMr),e(w0,qbe),e(qbe,bMr),e(w0,vMr),e(Pr,TMr),e(Pr,At),g(A0,At,null),e(At,FMr),e(At,Gbe),e(Gbe,CMr),e(At,MMr),e(At,lf),e(lf,EMr),e(lf,Obe),e(Obe,yMr),e(lf,wMr),e(lf,Xbe),e(Xbe,AMr),e(lf,LMr),e(At,BMr),e(At,Vbe),e(Vbe,xMr),e(At,kMr),g(L0,At,null),e(Pr,RMr),e(Pr,Ro),g(B0,Ro,null),e(Ro,SMr),e(Ro,zbe),e(zbe,PMr),e(Ro,$Mr),e(Ro,xn),e(xn,IMr),e(xn,Wbe),e(Wbe,DMr),e(xn,jMr),e(xn,Qbe),e(Qbe,NMr),e(xn,qMr),e(xn,Hbe),e(Hbe,GMr),e(xn,OMr),e(Ro,XMr),e(Ro,Ce),e(Ce,QC),e(QC,Ube),e(Ube,VMr),e(QC,zMr),e(QC,dV),e(dV,WMr),e(QC,QMr),e(Ce,HMr),e(Ce,HC),e(HC,Jbe),e(Jbe,UMr),e(HC,JMr),e(HC,cV),e(cV,YMr),e(HC,KMr),e(Ce,ZMr),e(Ce,UC),e(UC,Ybe),e(Ybe,eEr),e(UC,oEr),e(UC,fV),e(fV,rEr),e(UC,tEr),e(Ce,aEr),e(Ce,JC),e(JC,Kbe),e(Kbe,nEr),e(JC,sEr),e(JC,mV),e(mV,lEr),e(JC,iEr),e(Ce,dEr),e(Ce,YC),e(YC,Zbe),e(Zbe,cEr),e(YC,fEr),e(YC,gV),e(gV,mEr),e(YC,gEr),e(Ce,hEr),e(Ce,KC),e(KC,e3e),e(e3e,pEr),e(KC,_Er),e(KC,hV),e(hV,uEr),e(KC,bEr),e(Ce,vEr),e(Ce,ZC),e(ZC,o3e),e(o3e,TEr),e(ZC,FEr),e(ZC,pV),e(pV,CEr),e(ZC,MEr),e(Ce,EEr),e(Ce,e4),e(e4,r3e),e(r3e,yEr),e(e4,wEr),e(e4,_V),e(_V,AEr),e(e4,LEr),e(Ce,BEr),e(Ce,o4),e(o4,t3e),e(t3e,xEr),e(o4,kEr),e(o4,uV),e(uV,REr),e(o4,SEr),e(Ro,PEr),e(Ro,a3e),e(a3e,$Er),e(Ro,IEr),g(x0,Ro,null),b(c,Mxe,u),b(c,df,u),e(df,r4),e(r4,n3e),g(k0,n3e,null),e(df,DEr),e(df,s3e),e(s3e,jEr),b(c,Exe,u),b(c,$r,u),g(R0,$r,null),e($r,NEr),e($r,cf),e(cf,qEr),e(cf,l3e),e(l3e,GEr),e(cf,OEr),e(cf,i3e),e(i3e,XEr),e(cf,VEr),e($r,zEr),e($r,S0),e(S0,WEr),e(S0,d3e),e(d3e,QEr),e(S0,HEr),e($r,UEr),e($r,Lt),g(P0,Lt,null),e(Lt,JEr),e(Lt,c3e),e(c3e,YEr),e(Lt,KEr),e(Lt,ff),e(ff,ZEr),e(ff,f3e),e(f3e,eyr),e(ff,oyr),e(ff,m3e),e(m3e,ryr),e(ff,tyr),e(Lt,ayr),e(Lt,g3e),e(g3e,nyr),e(Lt,syr),g($0,Lt,null),e($r,lyr),e($r,So),g(I0,So,null),e(So,iyr),e(So,h3e),e(h3e,dyr),e(So,cyr),e(So,kn),e(kn,fyr),e(kn,p3e),e(p3e,myr),e(kn,gyr),e(kn,_3e),e(_3e,hyr),e(kn,pyr),e(kn,u3e),e(u3e,_yr),e(kn,uyr),e(So,byr),e(So,so),e(so,t4),e(t4,b3e),e(b3e,vyr),e(t4,Tyr),e(t4,bV),e(bV,Fyr),e(t4,Cyr),e(so,Myr),e(so,a4),e(a4,v3e),e(v3e,Eyr),e(a4,yyr),e(a4,vV),e(vV,wyr),e(a4,Ayr),e(so,Lyr),e(so,n4),e(n4,T3e),e(T3e,Byr),e(n4,xyr),e(n4,TV),e(TV,kyr),e(n4,Ryr),e(so,Syr),e(so,s4),e(s4,F3e),e(F3e,Pyr),e(s4,$yr),e(s4,FV),e(FV,Iyr),e(s4,Dyr),e(so,jyr),e(so,l4),e(l4,C3e),e(C3e,Nyr),e(l4,qyr),e(l4,CV),e(CV,Gyr),e(l4,Oyr),e(so,Xyr),e(so,i4),e(i4,M3e),e(M3e,Vyr),e(i4,zyr),e(i4,MV),e(MV,Wyr),e(i4,Qyr),e(so,Hyr),e(so,d4),e(d4,E3e),e(E3e,Uyr),e(d4,Jyr),e(d4,EV),e(EV,Yyr),e(d4,Kyr),e(So,Zyr),e(So,y3e),e(y3e,ewr),e(So,owr),g(D0,So,null),b(c,yxe,u),b(c,mf,u),e(mf,c4),e(c4,w3e),g(j0,w3e,null),e(mf,rwr),e(mf,A3e),e(A3e,twr),b(c,wxe,u),b(c,Ir,u),g(N0,Ir,null),e(Ir,awr),e(Ir,gf),e(gf,nwr),e(gf,L3e),e(L3e,swr),e(gf,lwr),e(gf,B3e),e(B3e,iwr),e(gf,dwr),e(Ir,cwr),e(Ir,q0),e(q0,fwr),e(q0,x3e),e(x3e,mwr),e(q0,gwr),e(Ir,hwr),e(Ir,Bt),g(G0,Bt,null),e(Bt,pwr),e(Bt,k3e),e(k3e,_wr),e(Bt,uwr),e(Bt,hf),e(hf,bwr),e(hf,R3e),e(R3e,vwr),e(hf,Twr),e(hf,S3e),e(S3e,Fwr),e(hf,Cwr),e(Bt,Mwr),e(Bt,P3e),e(P3e,Ewr),e(Bt,ywr),g(O0,Bt,null),e(Ir,wwr),e(Ir,Po),g(X0,Po,null),e(Po,Awr),e(Po,$3e),e($3e,Lwr),e(Po,Bwr),e(Po,Rn),e(Rn,xwr),e(Rn,I3e),e(I3e,kwr),e(Rn,Rwr),e(Rn,D3e),e(D3e,Swr),e(Rn,Pwr),e(Rn,j3e),e(j3e,$wr),e(Rn,Iwr),e(Po,Dwr),e(Po,lo),e(lo,f4),e(f4,N3e),e(N3e,jwr),e(f4,Nwr),e(f4,yV),e(yV,qwr),e(f4,Gwr),e(lo,Owr),e(lo,m4),e(m4,q3e),e(q3e,Xwr),e(m4,Vwr),e(m4,wV),e(wV,zwr),e(m4,Wwr),e(lo,Qwr),e(lo,g4),e(g4,G3e),e(G3e,Hwr),e(g4,Uwr),e(g4,AV),e(AV,Jwr),e(g4,Ywr),e(lo,Kwr),e(lo,h4),e(h4,O3e),e(O3e,Zwr),e(h4,e6r),e(h4,LV),e(LV,o6r),e(h4,r6r),e(lo,t6r),e(lo,p4),e(p4,X3e),e(X3e,a6r),e(p4,n6r),e(p4,BV),e(BV,s6r),e(p4,l6r),e(lo,i6r),e(lo,_4),e(_4,V3e),e(V3e,d6r),e(_4,c6r),e(_4,xV),e(xV,f6r),e(_4,m6r),e(lo,g6r),e(lo,u4),e(u4,z3e),e(z3e,h6r),e(u4,p6r),e(u4,kV),e(kV,_6r),e(u4,u6r),e(Po,b6r),e(Po,W3e),e(W3e,v6r),e(Po,T6r),g(V0,Po,null),b(c,Axe,u),b(c,pf,u),e(pf,b4),e(b4,Q3e),g(z0,Q3e,null),e(pf,F6r),e(pf,H3e),e(H3e,C6r),b(c,Lxe,u),b(c,Dr,u),g(W0,Dr,null),e(Dr,M6r),e(Dr,_f),e(_f,E6r),e(_f,U3e),e(U3e,y6r),e(_f,w6r),e(_f,J3e),e(J3e,A6r),e(_f,L6r),e(Dr,B6r),e(Dr,Q0),e(Q0,x6r),e(Q0,Y3e),e(Y3e,k6r),e(Q0,R6r),e(Dr,S6r),e(Dr,xt),g(H0,xt,null),e(xt,P6r),e(xt,K3e),e(K3e,$6r),e(xt,I6r),e(xt,uf),e(uf,D6r),e(uf,Z3e),e(Z3e,j6r),e(uf,N6r),e(uf,e5e),e(e5e,q6r),e(uf,G6r),e(xt,O6r),e(xt,o5e),e(o5e,X6r),e(xt,V6r),g(U0,xt,null),e(Dr,z6r),e(Dr,$o),g(J0,$o,null),e($o,W6r),e($o,r5e),e(r5e,Q6r),e($o,H6r),e($o,Sn),e(Sn,U6r),e(Sn,t5e),e(t5e,J6r),e(Sn,Y6r),e(Sn,a5e),e(a5e,K6r),e(Sn,Z6r),e(Sn,n5e),e(n5e,eAr),e(Sn,oAr),e($o,rAr),e($o,s5e),e(s5e,v4),e(v4,l5e),e(l5e,tAr),e(v4,aAr),e(v4,RV),e(RV,nAr),e(v4,sAr),e($o,lAr),e($o,i5e),e(i5e,iAr),e($o,dAr),g(Y0,$o,null),b(c,Bxe,u),b(c,bf,u),e(bf,T4),e(T4,d5e),g(K0,d5e,null),e(bf,cAr),e(bf,c5e),e(c5e,fAr),b(c,xxe,u),b(c,jr,u),g(Z0,jr,null),e(jr,mAr),e(jr,vf),e(vf,gAr),e(vf,f5e),e(f5e,hAr),e(vf,pAr),e(vf,m5e),e(m5e,_Ar),e(vf,uAr),e(jr,bAr),e(jr,eL),e(eL,vAr),e(eL,g5e),e(g5e,TAr),e(eL,FAr),e(jr,CAr),e(jr,kt),g(oL,kt,null),e(kt,MAr),e(kt,h5e),e(h5e,EAr),e(kt,yAr),e(kt,Tf),e(Tf,wAr),e(Tf,p5e),e(p5e,AAr),e(Tf,LAr),e(Tf,_5e),e(_5e,BAr),e(Tf,xAr),e(kt,kAr),e(kt,u5e),e(u5e,RAr),e(kt,SAr),g(rL,kt,null),e(jr,PAr),e(jr,Io),g(tL,Io,null),e(Io,$Ar),e(Io,b5e),e(b5e,IAr),e(Io,DAr),e(Io,Pn),e(Pn,jAr),e(Pn,v5e),e(v5e,NAr),e(Pn,qAr),e(Pn,T5e),e(T5e,GAr),e(Pn,OAr),e(Pn,F5e),e(F5e,XAr),e(Pn,VAr),e(Io,zAr),e(Io,aL),e(aL,F4),e(F4,C5e),e(C5e,WAr),e(F4,QAr),e(F4,SV),e(SV,HAr),e(F4,UAr),e(aL,JAr),e(aL,C4),e(C4,M5e),e(M5e,YAr),e(C4,KAr),e(C4,PV),e(PV,ZAr),e(C4,e0r),e(Io,o0r),e(Io,E5e),e(E5e,r0r),e(Io,t0r),g(nL,Io,null),b(c,kxe,u),b(c,Ff,u),e(Ff,M4),e(M4,y5e),g(sL,y5e,null),e(Ff,a0r),e(Ff,w5e),e(w5e,n0r),b(c,Rxe,u),b(c,Nr,u),g(lL,Nr,null),e(Nr,s0r),e(Nr,Cf),e(Cf,l0r),e(Cf,A5e),e(A5e,i0r),e(Cf,d0r),e(Cf,L5e),e(L5e,c0r),e(Cf,f0r),e(Nr,m0r),e(Nr,iL),e(iL,g0r),e(iL,B5e),e(B5e,h0r),e(iL,p0r),e(Nr,_0r),e(Nr,Rt),g(dL,Rt,null),e(Rt,u0r),e(Rt,x5e),e(x5e,b0r),e(Rt,v0r),e(Rt,Mf),e(Mf,T0r),e(Mf,k5e),e(k5e,F0r),e(Mf,C0r),e(Mf,R5e),e(R5e,M0r),e(Mf,E0r),e(Rt,y0r),e(Rt,S5e),e(S5e,w0r),e(Rt,A0r),g(cL,Rt,null),e(Nr,L0r),e(Nr,Do),g(fL,Do,null),e(Do,B0r),e(Do,P5e),e(P5e,x0r),e(Do,k0r),e(Do,$n),e($n,R0r),e($n,$5e),e($5e,S0r),e($n,P0r),e($n,I5e),e(I5e,$0r),e($n,I0r),e($n,D5e),e(D5e,D0r),e($n,j0r),e(Do,N0r),e(Do,j5e),e(j5e,E4),e(E4,N5e),e(N5e,q0r),e(E4,G0r),e(E4,$V),e($V,O0r),e(E4,X0r),e(Do,V0r),e(Do,q5e),e(q5e,z0r),e(Do,W0r),g(mL,Do,null),Sxe=!0},p(c,[u]){const gL={};u&2&&(gL.$$scope={dirty:u,ctx:c}),xf.$set(gL);const G5e={};u&2&&(G5e.$$scope={dirty:u,ctx:c}),gh.$set(G5e);const O5e={};u&2&&(O5e.$$scope={dirty:u,ctx:c}),Eh.$set(O5e)},i(c){Sxe||(h(ce.$$.fragment,c),h($a.$$.fragment,c),h(LM.$$.fragment,c),h(BM.$$.fragment,c),h(xf.$$.fragment,c),h(xM.$$.fragment,c),h(kM.$$.fragment,c),h(PM.$$.fragment,c),h($M.$$.fragment,c),h(IM.$$.fragment,c),h(DM.$$.fragment,c),h(jM.$$.fragment,c),h(GM.$$.fragment,c),h(OM.$$.fragment,c),h(XM.$$.fragment,c),h(VM.$$.fragment,c),h(zM.$$.fragment,c),h(HM.$$.fragment,c),h(gh.$$.fragment,c),h(UM.$$.fragment,c),h(JM.$$.fragment,c),h(YM.$$.fragment,c),h(KM.$$.fragment,c),h(oE.$$.fragment,c),h(Eh.$$.fragment,c),h(rE.$$.fragment,c),h(tE.$$.fragment,c),h(aE.$$.fragment,c),h(nE.$$.fragment,c),h(lE.$$.fragment,c),h(iE.$$.fragment,c),h(dE.$$.fragment,c),h(cE.$$.fragment,c),h(fE.$$.fragment,c),h(mE.$$.fragment,c),h(hE.$$.fragment,c),h(pE.$$.fragment,c),h(_E.$$.fragment,c),h(uE.$$.fragment,c),h(bE.$$.fragment,c),h(vE.$$.fragment,c),h(FE.$$.fragment,c),h(CE.$$.fragment,c),h(ME.$$.fragment,c),h(EE.$$.fragment,c),h(yE.$$.fragment,c),h(wE.$$.fragment,c),h(LE.$$.fragment,c),h(BE.$$.fragment,c),h(xE.$$.fragment,c),h(kE.$$.fragment,c),h(RE.$$.fragment,c),h(SE.$$.fragment,c),h($E.$$.fragment,c),h(IE.$$.fragment,c),h(DE.$$.fragment,c),h(jE.$$.fragment,c),h(NE.$$.fragment,c),h(qE.$$.fragment,c),h(OE.$$.fragment,c),h(XE.$$.fragment,c),h(VE.$$.fragment,c),h(zE.$$.fragment,c),h(WE.$$.fragment,c),h(QE.$$.fragment,c),h(UE.$$.fragment,c),h(JE.$$.fragment,c),h(YE.$$.fragment,c),h(KE.$$.fragment,c),h(ZE.$$.fragment,c),h(ey.$$.fragment,c),h(ry.$$.fragment,c),h(ty.$$.fragment,c),h(ay.$$.fragment,c),h(ny.$$.fragment,c),h(sy.$$.fragment,c),h(ly.$$.fragment,c),h(dy.$$.fragment,c),h(cy.$$.fragment,c),h(fy.$$.fragment,c),h(my.$$.fragment,c),h(gy.$$.fragment,c),h(hy.$$.fragment,c),h(_y.$$.fragment,c),h(uy.$$.fragment,c),h(by.$$.fragment,c),h(vy.$$.fragment,c),h(Ty.$$.fragment,c),h(Fy.$$.fragment,c),h(My.$$.fragment,c),h(Ey.$$.fragment,c),h(yy.$$.fragment,c),h(wy.$$.fragment,c),h(Ay.$$.fragment,c),h(Ly.$$.fragment,c),h(xy.$$.fragment,c),h(ky.$$.fragment,c),h(Ry.$$.fragment,c),h(Sy.$$.fragment,c),h(Py.$$.fragment,c),h($y.$$.fragment,c),h(Dy.$$.fragment,c),h(jy.$$.fragment,c),h(Ny.$$.fragment,c),h(qy.$$.fragment,c),h(Gy.$$.fragment,c),h(Oy.$$.fragment,c),h(Vy.$$.fragment,c),h(zy.$$.fragment,c),h(Wy.$$.fragment,c),h(Qy.$$.fragment,c),h(Hy.$$.fragment,c),h(Uy.$$.fragment,c),h(Yy.$$.fragment,c),h(Ky.$$.fragment,c),h(Zy.$$.fragment,c),h(ew.$$.fragment,c),h(ow.$$.fragment,c),h(rw.$$.fragment,c),h(aw.$$.fragment,c),h(nw.$$.fragment,c),h(sw.$$.fragment,c),h(lw.$$.fragment,c),h(iw.$$.fragment,c),h(dw.$$.fragment,c),h(fw.$$.fragment,c),h(mw.$$.fragment,c),h(gw.$$.fragment,c),h(pw.$$.fragment,c),h(_w.$$.fragment,c),h(uw.$$.fragment,c),h(vw.$$.fragment,c),h(Tw.$$.fragment,c),h(Fw.$$.fragment,c),h(Cw.$$.fragment,c),h(Mw.$$.fragment,c),h(Ew.$$.fragment,c),h(ww.$$.fragment,c),h(Aw.$$.fragment,c),h(Lw.$$.fragment,c),h(Bw.$$.fragment,c),h(xw.$$.fragment,c),h(kw.$$.fragment,c),h(Sw.$$.fragment,c),h(Pw.$$.fragment,c),h($w.$$.fragment,c),h(Iw.$$.fragment,c),h(Dw.$$.fragment,c),h(jw.$$.fragment,c),h(qw.$$.fragment,c),h(Gw.$$.fragment,c),h(Ow.$$.fragment,c),h(Xw.$$.fragment,c),h(Vw.$$.fragment,c),h(zw.$$.fragment,c),h(Qw.$$.fragment,c),h(Hw.$$.fragment,c),h(Uw.$$.fragment,c),h(Yw.$$.fragment,c),h(Kw.$$.fragment,c),h(Zw.$$.fragment,c),h(o6.$$.fragment,c),h(r6.$$.fragment,c),h(t6.$$.fragment,c),h(a6.$$.fragment,c),h(n6.$$.fragment,c),h(s6.$$.fragment,c),h(i6.$$.fragment,c),h(d6.$$.fragment,c),h(c6.$$.fragment,c),h(f6.$$.fragment,c),h(m6.$$.fragment,c),h(g6.$$.fragment,c),h(p6.$$.fragment,c),h(_6.$$.fragment,c),h(u6.$$.fragment,c),h(b6.$$.fragment,c),h(v6.$$.fragment,c),h(T6.$$.fragment,c),h(C6.$$.fragment,c),h(M6.$$.fragment,c),h(E6.$$.fragment,c),h(w6.$$.fragment,c),h(A6.$$.fragment,c),h(L6.$$.fragment,c),h(x6.$$.fragment,c),h(k6.$$.fragment,c),h(R6.$$.fragment,c),h(S6.$$.fragment,c),h(P6.$$.fragment,c),h($6.$$.fragment,c),h(D6.$$.fragment,c),h(j6.$$.fragment,c),h(N6.$$.fragment,c),h(q6.$$.fragment,c),h(G6.$$.fragment,c),h(O6.$$.fragment,c),h(V6.$$.fragment,c),h(z6.$$.fragment,c),h(W6.$$.fragment,c),h(Q6.$$.fragment,c),h(H6.$$.fragment,c),h(U6.$$.fragment,c),h(Y6.$$.fragment,c),h(K6.$$.fragment,c),h(Z6.$$.fragment,c),h(eA.$$.fragment,c),h(oA.$$.fragment,c),h(rA.$$.fragment,c),h(aA.$$.fragment,c),h(nA.$$.fragment,c),h(sA.$$.fragment,c),h(lA.$$.fragment,c),h(iA.$$.fragment,c),h(dA.$$.fragment,c),h(fA.$$.fragment,c),h(mA.$$.fragment,c),h(gA.$$.fragment,c),h(hA.$$.fragment,c),h(pA.$$.fragment,c),h(_A.$$.fragment,c),h(bA.$$.fragment,c),h(vA.$$.fragment,c),h(TA.$$.fragment,c),h(FA.$$.fragment,c),h(CA.$$.fragment,c),h(MA.$$.fragment,c),h(yA.$$.fragment,c),h(wA.$$.fragment,c),h(AA.$$.fragment,c),h(LA.$$.fragment,c),h(BA.$$.fragment,c),h(xA.$$.fragment,c),h(RA.$$.fragment,c),h(SA.$$.fragment,c),h(PA.$$.fragment,c),h($A.$$.fragment,c),h(IA.$$.fragment,c),h(DA.$$.fragment,c),h(NA.$$.fragment,c),h(qA.$$.fragment,c),h(GA.$$.fragment,c),h(OA.$$.fragment,c),h(XA.$$.fragment,c),h(VA.$$.fragment,c),h(WA.$$.fragment,c),h(QA.$$.fragment,c),h(HA.$$.fragment,c),h(UA.$$.fragment,c),h(JA.$$.fragment,c),h(YA.$$.fragment,c),h(ZA.$$.fragment,c),h(e0.$$.fragment,c),h(o0.$$.fragment,c),h(r0.$$.fragment,c),h(t0.$$.fragment,c),h(a0.$$.fragment,c),h(s0.$$.fragment,c),h(l0.$$.fragment,c),h(i0.$$.fragment,c),h(d0.$$.fragment,c),h(c0.$$.fragment,c),h(f0.$$.fragment,c),h(g0.$$.fragment,c),h(h0.$$.fragment,c),h(p0.$$.fragment,c),h(_0.$$.fragment,c),h(u0.$$.fragment,c),h(b0.$$.fragment,c),h(T0.$$.fragment,c),h(F0.$$.fragment,c),h(C0.$$.fragment,c),h(M0.$$.fragment,c),h(E0.$$.fragment,c),h(y0.$$.fragment,c),h(A0.$$.fragment,c),h(L0.$$.fragment,c),h(B0.$$.fragment,c),h(x0.$$.fragment,c),h(k0.$$.fragment,c),h(R0.$$.fragment,c),h(P0.$$.fragment,c),h($0.$$.fragment,c),h(I0.$$.fragment,c),h(D0.$$.fragment,c),h(j0.$$.fragment,c),h(N0.$$.fragment,c),h(G0.$$.fragment,c),h(O0.$$.fragment,c),h(X0.$$.fragment,c),h(V0.$$.fragment,c),h(z0.$$.fragment,c),h(W0.$$.fragment,c),h(H0.$$.fragment,c),h(U0.$$.fragment,c),h(J0.$$.fragment,c),h(Y0.$$.fragment,c),h(K0.$$.fragment,c),h(Z0.$$.fragment,c),h(oL.$$.fragment,c),h(rL.$$.fragment,c),h(tL.$$.fragment,c),h(nL.$$.fragment,c),h(sL.$$.fragment,c),h(lL.$$.fragment,c),h(dL.$$.fragment,c),h(cL.$$.fragment,c),h(fL.$$.fragment,c),h(mL.$$.fragment,c),Sxe=!0)},o(c){p(ce.$$.fragment,c),p($a.$$.fragment,c),p(LM.$$.fragment,c),p(BM.$$.fragment,c),p(xf.$$.fragment,c),p(xM.$$.fragment,c),p(kM.$$.fragment,c),p(PM.$$.fragment,c),p($M.$$.fragment,c),p(IM.$$.fragment,c),p(DM.$$.fragment,c),p(jM.$$.fragment,c),p(GM.$$.fragment,c),p(OM.$$.fragment,c),p(XM.$$.fragment,c),p(VM.$$.fragment,c),p(zM.$$.fragment,c),p(HM.$$.fragment,c),p(gh.$$.fragment,c),p(UM.$$.fragment,c),p(JM.$$.fragment,c),p(YM.$$.fragment,c),p(KM.$$.fragment,c),p(oE.$$.fragment,c),p(Eh.$$.fragment,c),p(rE.$$.fragment,c),p(tE.$$.fragment,c),p(aE.$$.fragment,c),p(nE.$$.fragment,c),p(lE.$$.fragment,c),p(iE.$$.fragment,c),p(dE.$$.fragment,c),p(cE.$$.fragment,c),p(fE.$$.fragment,c),p(mE.$$.fragment,c),p(hE.$$.fragment,c),p(pE.$$.fragment,c),p(_E.$$.fragment,c),p(uE.$$.fragment,c),p(bE.$$.fragment,c),p(vE.$$.fragment,c),p(FE.$$.fragment,c),p(CE.$$.fragment,c),p(ME.$$.fragment,c),p(EE.$$.fragment,c),p(yE.$$.fragment,c),p(wE.$$.fragment,c),p(LE.$$.fragment,c),p(BE.$$.fragment,c),p(xE.$$.fragment,c),p(kE.$$.fragment,c),p(RE.$$.fragment,c),p(SE.$$.fragment,c),p($E.$$.fragment,c),p(IE.$$.fragment,c),p(DE.$$.fragment,c),p(jE.$$.fragment,c),p(NE.$$.fragment,c),p(qE.$$.fragment,c),p(OE.$$.fragment,c),p(XE.$$.fragment,c),p(VE.$$.fragment,c),p(zE.$$.fragment,c),p(WE.$$.fragment,c),p(QE.$$.fragment,c),p(UE.$$.fragment,c),p(JE.$$.fragment,c),p(YE.$$.fragment,c),p(KE.$$.fragment,c),p(ZE.$$.fragment,c),p(ey.$$.fragment,c),p(ry.$$.fragment,c),p(ty.$$.fragment,c),p(ay.$$.fragment,c),p(ny.$$.fragment,c),p(sy.$$.fragment,c),p(ly.$$.fragment,c),p(dy.$$.fragment,c),p(cy.$$.fragment,c),p(fy.$$.fragment,c),p(my.$$.fragment,c),p(gy.$$.fragment,c),p(hy.$$.fragment,c),p(_y.$$.fragment,c),p(uy.$$.fragment,c),p(by.$$.fragment,c),p(vy.$$.fragment,c),p(Ty.$$.fragment,c),p(Fy.$$.fragment,c),p(My.$$.fragment,c),p(Ey.$$.fragment,c),p(yy.$$.fragment,c),p(wy.$$.fragment,c),p(Ay.$$.fragment,c),p(Ly.$$.fragment,c),p(xy.$$.fragment,c),p(ky.$$.fragment,c),p(Ry.$$.fragment,c),p(Sy.$$.fragment,c),p(Py.$$.fragment,c),p($y.$$.fragment,c),p(Dy.$$.fragment,c),p(jy.$$.fragment,c),p(Ny.$$.fragment,c),p(qy.$$.fragment,c),p(Gy.$$.fragment,c),p(Oy.$$.fragment,c),p(Vy.$$.fragment,c),p(zy.$$.fragment,c),p(Wy.$$.fragment,c),p(Qy.$$.fragment,c),p(Hy.$$.fragment,c),p(Uy.$$.fragment,c),p(Yy.$$.fragment,c),p(Ky.$$.fragment,c),p(Zy.$$.fragment,c),p(ew.$$.fragment,c),p(ow.$$.fragment,c),p(rw.$$.fragment,c),p(aw.$$.fragment,c),p(nw.$$.fragment,c),p(sw.$$.fragment,c),p(lw.$$.fragment,c),p(iw.$$.fragment,c),p(dw.$$.fragment,c),p(fw.$$.fragment,c),p(mw.$$.fragment,c),p(gw.$$.fragment,c),p(pw.$$.fragment,c),p(_w.$$.fragment,c),p(uw.$$.fragment,c),p(vw.$$.fragment,c),p(Tw.$$.fragment,c),p(Fw.$$.fragment,c),p(Cw.$$.fragment,c),p(Mw.$$.fragment,c),p(Ew.$$.fragment,c),p(ww.$$.fragment,c),p(Aw.$$.fragment,c),p(Lw.$$.fragment,c),p(Bw.$$.fragment,c),p(xw.$$.fragment,c),p(kw.$$.fragment,c),p(Sw.$$.fragment,c),p(Pw.$$.fragment,c),p($w.$$.fragment,c),p(Iw.$$.fragment,c),p(Dw.$$.fragment,c),p(jw.$$.fragment,c),p(qw.$$.fragment,c),p(Gw.$$.fragment,c),p(Ow.$$.fragment,c),p(Xw.$$.fragment,c),p(Vw.$$.fragment,c),p(zw.$$.fragment,c),p(Qw.$$.fragment,c),p(Hw.$$.fragment,c),p(Uw.$$.fragment,c),p(Yw.$$.fragment,c),p(Kw.$$.fragment,c),p(Zw.$$.fragment,c),p(o6.$$.fragment,c),p(r6.$$.fragment,c),p(t6.$$.fragment,c),p(a6.$$.fragment,c),p(n6.$$.fragment,c),p(s6.$$.fragment,c),p(i6.$$.fragment,c),p(d6.$$.fragment,c),p(c6.$$.fragment,c),p(f6.$$.fragment,c),p(m6.$$.fragment,c),p(g6.$$.fragment,c),p(p6.$$.fragment,c),p(_6.$$.fragment,c),p(u6.$$.fragment,c),p(b6.$$.fragment,c),p(v6.$$.fragment,c),p(T6.$$.fragment,c),p(C6.$$.fragment,c),p(M6.$$.fragment,c),p(E6.$$.fragment,c),p(w6.$$.fragment,c),p(A6.$$.fragment,c),p(L6.$$.fragment,c),p(x6.$$.fragment,c),p(k6.$$.fragment,c),p(R6.$$.fragment,c),p(S6.$$.fragment,c),p(P6.$$.fragment,c),p($6.$$.fragment,c),p(D6.$$.fragment,c),p(j6.$$.fragment,c),p(N6.$$.fragment,c),p(q6.$$.fragment,c),p(G6.$$.fragment,c),p(O6.$$.fragment,c),p(V6.$$.fragment,c),p(z6.$$.fragment,c),p(W6.$$.fragment,c),p(Q6.$$.fragment,c),p(H6.$$.fragment,c),p(U6.$$.fragment,c),p(Y6.$$.fragment,c),p(K6.$$.fragment,c),p(Z6.$$.fragment,c),p(eA.$$.fragment,c),p(oA.$$.fragment,c),p(rA.$$.fragment,c),p(aA.$$.fragment,c),p(nA.$$.fragment,c),p(sA.$$.fragment,c),p(lA.$$.fragment,c),p(iA.$$.fragment,c),p(dA.$$.fragment,c),p(fA.$$.fragment,c),p(mA.$$.fragment,c),p(gA.$$.fragment,c),p(hA.$$.fragment,c),p(pA.$$.fragment,c),p(_A.$$.fragment,c),p(bA.$$.fragment,c),p(vA.$$.fragment,c),p(TA.$$.fragment,c),p(FA.$$.fragment,c),p(CA.$$.fragment,c),p(MA.$$.fragment,c),p(yA.$$.fragment,c),p(wA.$$.fragment,c),p(AA.$$.fragment,c),p(LA.$$.fragment,c),p(BA.$$.fragment,c),p(xA.$$.fragment,c),p(RA.$$.fragment,c),p(SA.$$.fragment,c),p(PA.$$.fragment,c),p($A.$$.fragment,c),p(IA.$$.fragment,c),p(DA.$$.fragment,c),p(NA.$$.fragment,c),p(qA.$$.fragment,c),p(GA.$$.fragment,c),p(OA.$$.fragment,c),p(XA.$$.fragment,c),p(VA.$$.fragment,c),p(WA.$$.fragment,c),p(QA.$$.fragment,c),p(HA.$$.fragment,c),p(UA.$$.fragment,c),p(JA.$$.fragment,c),p(YA.$$.fragment,c),p(ZA.$$.fragment,c),p(e0.$$.fragment,c),p(o0.$$.fragment,c),p(r0.$$.fragment,c),p(t0.$$.fragment,c),p(a0.$$.fragment,c),p(s0.$$.fragment,c),p(l0.$$.fragment,c),p(i0.$$.fragment,c),p(d0.$$.fragment,c),p(c0.$$.fragment,c),p(f0.$$.fragment,c),p(g0.$$.fragment,c),p(h0.$$.fragment,c),p(p0.$$.fragment,c),p(_0.$$.fragment,c),p(u0.$$.fragment,c),p(b0.$$.fragment,c),p(T0.$$.fragment,c),p(F0.$$.fragment,c),p(C0.$$.fragment,c),p(M0.$$.fragment,c),p(E0.$$.fragment,c),p(y0.$$.fragment,c),p(A0.$$.fragment,c),p(L0.$$.fragment,c),p(B0.$$.fragment,c),p(x0.$$.fragment,c),p(k0.$$.fragment,c),p(R0.$$.fragment,c),p(P0.$$.fragment,c),p($0.$$.fragment,c),p(I0.$$.fragment,c),p(D0.$$.fragment,c),p(j0.$$.fragment,c),p(N0.$$.fragment,c),p(G0.$$.fragment,c),p(O0.$$.fragment,c),p(X0.$$.fragment,c),p(V0.$$.fragment,c),p(z0.$$.fragment,c),p(W0.$$.fragment,c),p(H0.$$.fragment,c),p(U0.$$.fragment,c),p(J0.$$.fragment,c),p(Y0.$$.fragment,c),p(K0.$$.fragment,c),p(Z0.$$.fragment,c),p(oL.$$.fragment,c),p(rL.$$.fragment,c),p(tL.$$.fragment,c),p(nL.$$.fragment,c),p(sL.$$.fragment,c),p(lL.$$.fragment,c),p(dL.$$.fragment,c),p(cL.$$.fragment,c),p(fL.$$.fragment,c),p(mL.$$.fragment,c),Sxe=!1},d(c){t(J),c&&t(Be),c&&t(de),_(ce),c&&t(yf),c&&t(sa),c&&t(ye),c&&t(io),c&&t(Af),_($a,c),c&&t(co),c&&t(ge),c&&t(Oo),c&&t(Ia),c&&t(P7e),c&&t(Ii),_(LM),c&&t($7e),c&&t(qn),c&&t(I7e),_(BM,c),c&&t(D7e),c&&t(p8),c&&t(j7e),_(xf,c),c&&t(N7e),c&&t(Di),_(xM),c&&t(q7e),c&&t(Xo),_(kM),_(PM),_($M),_(IM),c&&t(G7e),c&&t(Ni),_(DM),c&&t(O7e),c&&t(Vo),_(jM),_(GM),_(OM),_(XM),c&&t(X7e),c&&t(qi),_(VM),c&&t(V7e),c&&t(zo),_(zM),_(HM),_(gh),_(UM),_(JM),c&&t(z7e),c&&t(Gi),_(YM),c&&t(W7e),c&&t(Wo),_(KM),_(oE),_(Eh),_(rE),_(tE),c&&t(Q7e),c&&t(Xi),_(aE),c&&t(H7e),c&&t(Qo),_(nE),_(lE),_(iE),_(dE),_(cE),c&&t(U7e),c&&t(Wi),_(fE),c&&t(J7e),c&&t(Ho),_(mE),_(hE),_(pE),_(_E),_(uE),c&&t(Y7e),c&&t(Ui),_(bE),c&&t(K7e),c&&t(Uo),_(vE),_(FE),_(CE),_(ME),_(EE),c&&t(Z7e),c&&t(Ki),_(yE),c&&t(eBe),c&&t(Jo),_(wE),_(LE),_(BE),_(xE),_(kE),c&&t(oBe),c&&t(od),_(RE),c&&t(rBe),c&&t(Yo),_(SE),_($E),_(IE),_(DE),_(jE),c&&t(tBe),c&&t(ad),_(NE),c&&t(aBe),c&&t(Ko),_(qE),_(OE),_(XE),_(VE),_(zE),c&&t(nBe),c&&t(ld),_(WE),c&&t(sBe),c&&t(Zo),_(QE),_(UE),_(JE),_(YE),_(KE),c&&t(lBe),c&&t(cd),_(ZE),c&&t(iBe),c&&t(er),_(ey),_(ry),_(ty),_(ay),_(ny),c&&t(dBe),c&&t(gd),_(sy),c&&t(cBe),c&&t(or),_(ly),_(dy),_(cy),_(fy),_(my),c&&t(fBe),c&&t(_d),_(gy),c&&t(mBe),c&&t(rr),_(hy),_(_y),_(uy),_(by),_(vy),c&&t(gBe),c&&t(vd),_(Ty),c&&t(hBe),c&&t(tr),_(Fy),_(My),_(Ey),_(yy),_(wy),c&&t(pBe),c&&t(Cd),_(Ay),c&&t(_Be),c&&t(ar),_(Ly),_(xy),_(ky),_(Ry),_(Sy),c&&t(uBe),c&&t(yd),_(Py),c&&t(bBe),c&&t(nr),_($y),_(Dy),_(jy),_(Ny),_(qy),c&&t(vBe),c&&t(Ld),_(Gy),c&&t(TBe),c&&t(sr),_(Oy),_(Vy),_(zy),_(Wy),_(Qy),c&&t(FBe),c&&t(kd),_(Hy),c&&t(CBe),c&&t(lr),_(Uy),_(Yy),_(Ky),_(Zy),_(ew),c&&t(MBe),c&&t(Pd),_(ow),c&&t(EBe),c&&t(ir),_(rw),_(aw),_(nw),_(sw),_(lw),c&&t(yBe),c&&t(Dd),_(iw),c&&t(wBe),c&&t(dr),_(dw),_(fw),_(mw),_(gw),_(pw),c&&t(ABe),c&&t(qd),_(_w),c&&t(LBe),c&&t(cr),_(uw),_(vw),_(Tw),_(Fw),_(Cw),c&&t(BBe),c&&t(Xd),_(Mw),c&&t(xBe),c&&t(fr),_(Ew),_(ww),_(Aw),_(Lw),_(Bw),c&&t(kBe),c&&t(Qd),_(xw),c&&t(RBe),c&&t(mr),_(kw),_(Sw),_(Pw),_($w),_(Iw),c&&t(SBe),c&&t(Jd),_(Dw),c&&t(PBe),c&&t(gr),_(jw),_(qw),_(Gw),_(Ow),_(Xw),c&&t($Be),c&&t(Zd),_(Vw),c&&t(IBe),c&&t(hr),_(zw),_(Qw),_(Hw),_(Uw),_(Yw),c&&t(DBe),c&&t(rc),_(Kw),c&&t(jBe),c&&t(pr),_(Zw),_(o6),_(r6),_(t6),_(a6),c&&t(NBe),c&&t(nc),_(n6),c&&t(qBe),c&&t(_r),_(s6),_(i6),_(d6),_(c6),_(f6),c&&t(GBe),c&&t(ic),_(m6),c&&t(OBe),c&&t(ur),_(g6),_(p6),_(_6),_(u6),_(b6),c&&t(XBe),c&&t(fc),_(v6),c&&t(VBe),c&&t(br),_(T6),_(C6),_(M6),_(E6),_(w6),c&&t(zBe),c&&t(hc),_(A6),c&&t(WBe),c&&t(vr),_(L6),_(x6),_(k6),_(R6),_(S6),c&&t(QBe),c&&t(uc),_(P6),c&&t(HBe),c&&t(Tr),_($6),_(D6),_(j6),_(N6),_(q6),c&&t(UBe),c&&t(Tc),_(G6),c&&t(JBe),c&&t(Fr),_(O6),_(V6),_(z6),_(W6),_(Q6),c&&t(YBe),c&&t(Mc),_(H6),c&&t(KBe),c&&t(Cr),_(U6),_(Y6),_(K6),_(Z6),_(eA),c&&t(ZBe),c&&t(wc),_(oA),c&&t(exe),c&&t(Mr),_(rA),_(aA),_(nA),_(sA),_(lA),c&&t(oxe),c&&t(Bc),_(iA),c&&t(rxe),c&&t(Er),_(dA),_(fA),_(mA),_(gA),_(hA),c&&t(txe),c&&t(Rc),_(pA),c&&t(axe),c&&t(yr),_(_A),_(bA),_(vA),_(TA),_(FA),c&&t(nxe),c&&t($c),_(CA),c&&t(sxe),c&&t(wr),_(MA),_(yA),_(wA),_(AA),_(LA),c&&t(lxe),c&&t(jc),_(BA),c&&t(ixe),c&&t(Ar),_(xA),_(RA),_(SA),_(PA),_($A),c&&t(dxe),c&&t(Gc),_(IA),c&&t(cxe),c&&t(Lr),_(DA),_(NA),_(qA),_(GA),_(OA),c&&t(fxe),c&&t(Vc),_(XA),c&&t(mxe),c&&t(Br),_(VA),_(WA),_(QA),_(HA),_(UA),c&&t(gxe),c&&t(Qc),_(JA),c&&t(hxe),c&&t(xr),_(YA),_(ZA),_(e0),_(o0),_(r0),c&&t(pxe),c&&t(Jc),_(t0),c&&t(_xe),c&&t(kr),_(a0),_(s0),_(l0),_(i0),_(d0),c&&t(uxe),c&&t(Zc),_(c0),c&&t(bxe),c&&t(Rr),_(f0),_(g0),_(h0),_(p0),_(_0),c&&t(vxe),c&&t(rf),_(u0),c&&t(Txe),c&&t(Sr),_(b0),_(T0),_(F0),_(C0),_(M0),c&&t(Fxe),c&&t(nf),_(E0),c&&t(Cxe),c&&t(Pr),_(y0),_(A0),_(L0),_(B0),_(x0),c&&t(Mxe),c&&t(df),_(k0),c&&t(Exe),c&&t($r),_(R0),_(P0),_($0),_(I0),_(D0),c&&t(yxe),c&&t(mf),_(j0),c&&t(wxe),c&&t(Ir),_(N0),_(G0),_(O0),_(X0),_(V0),c&&t(Axe),c&&t(pf),_(z0),c&&t(Lxe),c&&t(Dr),_(W0),_(H0),_(U0),_(J0),_(Y0),c&&t(Bxe),c&&t(bf),_(K0),c&&t(xxe),c&&t(jr),_(Z0),_(oL),_(rL),_(tL),_(nL),c&&t(kxe),c&&t(Ff),_(sL),c&&t(Rxe),c&&t(Nr),_(lL),_(dL),_(cL),_(fL),_(mL)}}}const Vbt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function zbt(Li,J,Be){let{fw:de}=J;return Li.$$set=me=>{"fw"in me&&Be(0,de=me.fw)},[de]}class Kbt extends Ibt{constructor(J){super();Dbt(this,J,zbt,Xbt,jbt,{fw:0})}}export{Kbt as default,Vbt as metadata};
