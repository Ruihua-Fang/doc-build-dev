import{S as nCt,i as sCt,s as lCt,e as a,k as l,w as F,t as o,M as iCt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,F as e,g as b,y as M,q as E,o as C,B as w,v as dCt,L as I}from"../../chunks/vendor-6b77c823.js";import{T as uPr}from"../../chunks/Tip-39098574.js";import{D as R}from"../../chunks/Docstring-1088f2fb.js";import{C as B}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as ee}from"../../chunks/IconCopyLink-7a11ce68.js";import{E as P}from"../../chunks/ExampleCodeBlock-5212b321.js";function cCt(L){let g,v,p,m,u,d,h,Mo,oi,rf,Kr,ri,ti,FA,tf,qe,Xe,ai,Mn,TA,En,Cn,MA,ni,wn,EA,si,af,va;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),u=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),oi=a("code"),rf=o("model_type"),Kr=o(" attribute is set to the same key you use when registering the config (here "),ri=a("code"),ti=o('"new-model"'),FA=o(")."),tf=l(),qe=a("p"),Xe=o("Likewise, if your "),ai=a("code"),Mn=o("NewModel"),TA=o(" is a subclass of "),En=a("a"),Cn=o("PreTrainedModel"),MA=o(`, make sure its
`),ni=a("code"),wn=o("config_class"),EA=o(` attribute is set to the same class you use when registering the model (here
`),si=a("code"),af=o("NewModelConfig"),va=o(")."),this.h()},l(ze){g=n(ze,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var P9=s(p);m=r(P9,"NewModelConfig"),P9.forEach(t),u=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var li=s(d);h=r(li,"PretrainedConfig"),li.forEach(t),Mo=r(Ae,`, make sure its
`),oi=n(Ae,"CODE",{});var I9=s(oi);rf=r(I9,"model_type"),I9.forEach(t),Kr=r(Ae," attribute is set to the same key you use when registering the config (here "),ri=n(Ae,"CODE",{});var q9=s(ri);ti=r(q9,'"new-model"'),q9.forEach(t),FA=r(Ae,")."),Ae.forEach(t),tf=i(ze),qe=n(ze,"P",{});var Eo=s(qe);Xe=r(Eo,"Likewise, if your "),ai=n(Eo,"CODE",{});var Fa=s(ai);Mn=r(Fa,"NewModel"),Fa.forEach(t),TA=r(Eo," is a subclass of "),En=n(Eo,"A",{href:!0});var N9=s(En);Cn=r(N9,"PreTrainedModel"),N9.forEach(t),MA=r(Eo,`, make sure its
`),ni=n(Eo,"CODE",{});var nf=s(ni);wn=r(nf,"config_class"),nf.forEach(t),EA=r(Eo,` attribute is set to the same class you use when registering the model (here
`),si=n(Eo,"CODE",{});var j9=s(si);af=r(j9,"NewModelConfig"),j9.forEach(t),va=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(En,"href","/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel")},m(ze,Ae){b(ze,g,Ae),e(g,v),e(g,p),e(p,m),e(g,u),e(g,d),e(d,h),e(g,Mo),e(g,oi),e(oi,rf),e(g,Kr),e(g,ri),e(ri,ti),e(g,FA),b(ze,tf,Ae),b(ze,qe,Ae),e(qe,Xe),e(qe,ai),e(ai,Mn),e(qe,TA),e(qe,En),e(En,Cn),e(qe,MA),e(qe,ni),e(ni,wn),e(qe,EA),e(qe,si),e(si,af),e(qe,va)},d(ze){ze&&t(g),ze&&t(tf),ze&&t(qe)}}}function fCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gCt(L){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function hCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pCt(L){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function uCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Ct(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ECt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ACt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Ct(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ICt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function e3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function o3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function r3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function t3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function a3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function n3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function s3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function l3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function i3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function d3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function c3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function f3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function m3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function g3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function h3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function p3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function u3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function b3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function v3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function F3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function T3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function M3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function E3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function C3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function w3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function A3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function y3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function L3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function x3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function k3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function S3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function R3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function B3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function P3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function I3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function q3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function N3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function j3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function D3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function G3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function O3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function V3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function X3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function z3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Q3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function W3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function H3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function U3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function J3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Y3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function K3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Z3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ewt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function owt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function twt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function awt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nwt(L){let g,v,p,m,u,d,h,Mo,oi,rf,Kr,ri,ti,FA,tf,qe,Xe,ai,Mn,TA,En,Cn,MA,ni,wn,EA,si,af,va,ze,Ae,P9,li,I9,q9,Eo,Fa,N9,nf,j9,FNe,hBe,ii,sf,nZ,CA,TNe,sZ,MNe,pBe,An,ENe,lZ,CNe,wNe,iZ,ANe,yNe,uBe,wA,_Be,D9,LNe,bBe,lf,vBe,di,df,dZ,AA,xNe,cZ,$Ne,FBe,Co,yA,kNe,LA,SNe,G9,RNe,BNe,PNe,xA,INe,fZ,qNe,NNe,jNe,Mr,$A,DNe,mZ,GNe,ONe,ci,VNe,gZ,XNe,zNe,hZ,QNe,WNe,HNe,A,cf,pZ,UNe,JNe,O9,YNe,KNe,ZNe,ff,uZ,eje,oje,V9,rje,tje,aje,mf,_Z,nje,sje,X9,lje,ije,dje,gf,bZ,cje,fje,z9,mje,gje,hje,hf,vZ,pje,uje,Q9,_je,bje,vje,pf,FZ,Fje,Tje,W9,Mje,Eje,Cje,uf,TZ,wje,Aje,H9,yje,Lje,xje,_f,MZ,$je,kje,U9,Sje,Rje,Bje,bf,EZ,Pje,Ije,J9,qje,Nje,jje,vf,CZ,Dje,Gje,Y9,Oje,Vje,Xje,Ff,wZ,zje,Qje,K9,Wje,Hje,Uje,Tf,AZ,Jje,Yje,Z9,Kje,Zje,eDe,Mf,yZ,oDe,rDe,e$,tDe,aDe,nDe,Ef,LZ,sDe,lDe,o$,iDe,dDe,cDe,Cf,xZ,fDe,mDe,r$,gDe,hDe,pDe,wf,$Z,uDe,_De,t$,bDe,vDe,FDe,Af,kZ,TDe,MDe,a$,EDe,CDe,wDe,yf,SZ,ADe,yDe,n$,LDe,xDe,$De,Lf,RZ,kDe,SDe,s$,RDe,BDe,PDe,xf,BZ,IDe,qDe,l$,NDe,jDe,DDe,$f,PZ,GDe,ODe,i$,VDe,XDe,zDe,kf,IZ,QDe,WDe,d$,HDe,UDe,JDe,Sf,qZ,YDe,KDe,c$,ZDe,eGe,oGe,Rf,NZ,rGe,tGe,f$,aGe,nGe,sGe,Bf,jZ,lGe,iGe,m$,dGe,cGe,fGe,Pf,DZ,mGe,gGe,g$,hGe,pGe,uGe,If,GZ,_Ge,bGe,h$,vGe,FGe,TGe,qf,OZ,MGe,EGe,p$,CGe,wGe,AGe,Nf,VZ,yGe,LGe,u$,xGe,$Ge,kGe,jf,XZ,SGe,RGe,_$,BGe,PGe,IGe,Df,zZ,qGe,NGe,b$,jGe,DGe,GGe,Gf,QZ,OGe,VGe,v$,XGe,zGe,QGe,Of,WZ,WGe,HGe,F$,UGe,JGe,YGe,Vf,HZ,KGe,ZGe,T$,eOe,oOe,rOe,Xf,UZ,tOe,aOe,M$,nOe,sOe,lOe,zf,JZ,iOe,dOe,E$,cOe,fOe,mOe,Qf,YZ,gOe,hOe,C$,pOe,uOe,_Oe,Wf,KZ,bOe,vOe,w$,FOe,TOe,MOe,Hf,ZZ,EOe,COe,A$,wOe,AOe,yOe,Uf,eee,LOe,xOe,y$,$Oe,kOe,SOe,Jf,oee,ROe,BOe,L$,POe,IOe,qOe,Yf,ree,NOe,jOe,x$,DOe,GOe,OOe,Kf,tee,VOe,XOe,$$,zOe,QOe,WOe,Zf,aee,HOe,UOe,k$,JOe,YOe,KOe,em,nee,ZOe,eVe,S$,oVe,rVe,tVe,om,see,aVe,nVe,R$,sVe,lVe,iVe,rm,lee,dVe,cVe,B$,fVe,mVe,gVe,tm,iee,hVe,pVe,P$,uVe,_Ve,bVe,am,dee,vVe,FVe,I$,TVe,MVe,EVe,nm,cee,CVe,wVe,q$,AVe,yVe,LVe,sm,fee,xVe,$Ve,N$,kVe,SVe,RVe,lm,mee,BVe,PVe,j$,IVe,qVe,NVe,im,gee,jVe,DVe,D$,GVe,OVe,VVe,dm,hee,XVe,zVe,G$,QVe,WVe,HVe,cm,pee,UVe,JVe,O$,YVe,KVe,ZVe,fm,uee,eXe,oXe,V$,rXe,tXe,aXe,mm,_ee,nXe,sXe,X$,lXe,iXe,dXe,gm,bee,cXe,fXe,z$,mXe,gXe,hXe,hm,vee,pXe,uXe,Q$,_Xe,bXe,vXe,pm,Fee,FXe,TXe,W$,MXe,EXe,CXe,um,Tee,wXe,AXe,H$,yXe,LXe,xXe,_m,Mee,$Xe,kXe,U$,SXe,RXe,BXe,bm,Eee,PXe,IXe,J$,qXe,NXe,jXe,vm,Cee,DXe,GXe,Y$,OXe,VXe,XXe,Fm,wee,zXe,QXe,K$,WXe,HXe,UXe,Tm,Aee,JXe,YXe,Z$,KXe,ZXe,eze,Mm,yee,oze,rze,ek,tze,aze,nze,Em,Lee,sze,lze,ok,ize,dze,cze,Cm,xee,fze,mze,rk,gze,hze,pze,wm,$ee,uze,_ze,tk,bze,vze,Fze,Am,kee,Tze,Mze,ak,Eze,Cze,wze,ym,See,Aze,yze,nk,Lze,xze,$ze,Lm,Ree,kze,Sze,sk,Rze,Bze,Pze,xm,Bee,Ize,qze,lk,Nze,jze,Dze,$m,Pee,Gze,Oze,ik,Vze,Xze,zze,km,Iee,Qze,Wze,dk,Hze,Uze,Jze,Sm,qee,Yze,Kze,ck,Zze,eQe,oQe,Rm,Nee,rQe,tQe,fk,aQe,nQe,sQe,Bm,jee,lQe,iQe,mk,dQe,cQe,fQe,Pm,Dee,mQe,gQe,gk,hQe,pQe,uQe,Im,Gee,_Qe,bQe,hk,vQe,FQe,TQe,qm,Oee,MQe,EQe,pk,CQe,wQe,AQe,Nm,Vee,yQe,LQe,uk,xQe,$Qe,kQe,jm,Xee,SQe,RQe,_k,BQe,PQe,IQe,Dm,zee,qQe,NQe,bk,jQe,DQe,GQe,Gm,Qee,OQe,VQe,vk,XQe,zQe,QQe,Om,Wee,WQe,HQe,Fk,UQe,JQe,YQe,Vm,Hee,KQe,ZQe,Tk,eWe,oWe,rWe,Xm,Uee,tWe,aWe,Mk,nWe,sWe,lWe,zm,Jee,iWe,dWe,Ek,cWe,fWe,mWe,Qm,Yee,gWe,hWe,Ck,pWe,uWe,_We,Wm,Kee,bWe,vWe,wk,FWe,TWe,MWe,Hm,Zee,EWe,CWe,Ak,wWe,AWe,yWe,Um,eoe,LWe,xWe,yk,$We,kWe,SWe,Jm,ooe,RWe,BWe,Lk,PWe,IWe,qWe,Ym,roe,NWe,jWe,xk,DWe,GWe,OWe,Km,toe,VWe,XWe,$k,zWe,QWe,WWe,Zm,aoe,HWe,UWe,kk,JWe,YWe,KWe,eg,noe,ZWe,eHe,Sk,oHe,rHe,tHe,og,soe,aHe,nHe,Rk,sHe,lHe,iHe,rg,loe,dHe,cHe,Bk,fHe,mHe,gHe,tg,ioe,hHe,pHe,Pk,uHe,_He,bHe,ag,doe,vHe,FHe,Ik,THe,MHe,EHe,ng,CHe,sg,kA,wHe,coe,AHe,TBe,fi,lg,foe,SA,yHe,moe,LHe,MBe,wo,RA,xHe,BA,$He,qk,kHe,SHe,RHe,PA,BHe,goe,PHe,IHe,qHe,Er,IA,NHe,hoe,jHe,DHe,Ta,GHe,poe,OHe,VHe,uoe,XHe,zHe,_oe,QHe,WHe,HHe,k,yn,boe,UHe,JHe,Nk,YHe,KHe,jk,ZHe,eUe,oUe,Ln,voe,rUe,tUe,Dk,aUe,nUe,Gk,sUe,lUe,iUe,xn,Foe,dUe,cUe,Ok,fUe,mUe,Vk,gUe,hUe,pUe,ig,Toe,uUe,_Ue,Xk,bUe,vUe,FUe,$n,Moe,TUe,MUe,zk,EUe,CUe,Qk,wUe,AUe,yUe,dg,Eoe,LUe,xUe,Wk,$Ue,kUe,SUe,cg,Coe,RUe,BUe,Hk,PUe,IUe,qUe,fg,woe,NUe,jUe,Uk,DUe,GUe,OUe,kn,Aoe,VUe,XUe,Jk,zUe,QUe,Yk,WUe,HUe,UUe,Sn,yoe,JUe,YUe,Kk,KUe,ZUe,Zk,eJe,oJe,rJe,Rn,Loe,tJe,aJe,eS,nJe,sJe,oS,lJe,iJe,dJe,mg,xoe,cJe,fJe,rS,mJe,gJe,hJe,gg,$oe,pJe,uJe,tS,_Je,bJe,vJe,Bn,koe,FJe,TJe,aS,MJe,EJe,nS,CJe,wJe,AJe,hg,Soe,yJe,LJe,sS,xJe,$Je,kJe,Pn,Roe,SJe,RJe,lS,BJe,PJe,iS,IJe,qJe,NJe,In,Boe,jJe,DJe,dS,GJe,OJe,cS,VJe,XJe,zJe,qn,Poe,QJe,WJe,fS,HJe,UJe,mS,JJe,YJe,KJe,pg,Ioe,ZJe,eYe,gS,oYe,rYe,tYe,Nn,qoe,aYe,nYe,hS,sYe,lYe,pS,iYe,dYe,cYe,jn,Noe,fYe,mYe,uS,gYe,hYe,_S,pYe,uYe,_Ye,Dn,joe,bYe,vYe,bS,FYe,TYe,vS,MYe,EYe,CYe,Gn,Doe,wYe,AYe,FS,yYe,LYe,TS,xYe,$Ye,kYe,On,Goe,SYe,RYe,MS,BYe,PYe,ES,IYe,qYe,NYe,Vn,Ooe,jYe,DYe,CS,GYe,OYe,wS,VYe,XYe,zYe,ug,Voe,QYe,WYe,AS,HYe,UYe,JYe,Xn,Xoe,YYe,KYe,yS,ZYe,eKe,LS,oKe,rKe,tKe,_g,zoe,aKe,nKe,xS,sKe,lKe,iKe,zn,Qoe,dKe,cKe,$S,fKe,mKe,kS,gKe,hKe,pKe,Qn,Woe,uKe,_Ke,SS,bKe,vKe,RS,FKe,TKe,MKe,Wn,Hoe,EKe,CKe,BS,wKe,AKe,PS,yKe,LKe,xKe,Hn,Uoe,$Ke,kKe,IS,SKe,RKe,qS,BKe,PKe,IKe,Un,Joe,qKe,NKe,NS,jKe,DKe,jS,GKe,OKe,VKe,bg,Yoe,XKe,zKe,DS,QKe,WKe,HKe,Jn,Koe,UKe,JKe,GS,YKe,KKe,OS,ZKe,eZe,oZe,Yn,Zoe,rZe,tZe,VS,aZe,nZe,XS,sZe,lZe,iZe,Kn,ere,dZe,cZe,zS,fZe,mZe,QS,gZe,hZe,pZe,Zn,ore,uZe,_Ze,WS,bZe,vZe,HS,FZe,TZe,MZe,es,rre,EZe,CZe,US,wZe,AZe,JS,yZe,LZe,xZe,os,tre,$Ze,kZe,YS,SZe,RZe,KS,BZe,PZe,IZe,vg,are,qZe,NZe,ZS,jZe,DZe,GZe,rs,nre,OZe,VZe,eR,XZe,zZe,oR,QZe,WZe,HZe,Fg,sre,UZe,JZe,rR,YZe,KZe,ZZe,Tg,lre,eeo,oeo,tR,reo,teo,aeo,ts,ire,neo,seo,aR,leo,ieo,nR,deo,ceo,feo,as,dre,meo,geo,sR,heo,peo,lR,ueo,_eo,beo,ns,cre,veo,Feo,iR,Teo,Meo,dR,Eeo,Ceo,weo,Mg,fre,Aeo,yeo,cR,Leo,xeo,$eo,ss,mre,keo,Seo,fR,Reo,Beo,mR,Peo,Ieo,qeo,ls,gre,Neo,jeo,gR,Deo,Geo,hR,Oeo,Veo,Xeo,is,hre,zeo,Qeo,pR,Weo,Heo,uR,Ueo,Jeo,Yeo,ds,pre,Keo,Zeo,_R,eoo,ooo,bR,roo,too,aoo,cs,ure,noo,soo,vR,loo,ioo,FR,doo,coo,foo,fs,_re,moo,goo,TR,hoo,poo,MR,uoo,_oo,boo,Eg,bre,voo,Foo,ER,Too,Moo,Eoo,Cg,vre,Coo,woo,CR,Aoo,yoo,Loo,wg,Fre,xoo,$oo,wR,koo,Soo,Roo,Ag,Tre,Boo,Poo,AR,Ioo,qoo,Noo,ms,Mre,joo,Doo,yR,Goo,Ooo,LR,Voo,Xoo,zoo,yg,Ere,Qoo,Woo,xR,Hoo,Uoo,Joo,gs,Cre,Yoo,Koo,$R,Zoo,ero,kR,oro,rro,tro,hs,wre,aro,nro,SR,sro,lro,RR,iro,dro,cro,ps,Are,fro,mro,BR,gro,hro,PR,pro,uro,_ro,us,yre,bro,vro,IR,Fro,Tro,qR,Mro,Ero,Cro,_s,Lre,wro,Aro,NR,yro,Lro,jR,xro,$ro,kro,bs,xre,Sro,Rro,DR,Bro,Pro,GR,Iro,qro,Nro,Lg,$re,jro,Dro,OR,Gro,Oro,Vro,xg,kre,Xro,zro,VR,Qro,Wro,Hro,vs,Sre,Uro,Jro,XR,Yro,Kro,zR,Zro,eto,oto,Fs,Rre,rto,tto,QR,ato,nto,WR,sto,lto,ito,Ts,Bre,dto,cto,HR,fto,mto,UR,gto,hto,pto,$g,Pre,uto,_to,JR,bto,vto,Fto,kg,Ire,Tto,Mto,YR,Eto,Cto,wto,Sg,qre,Ato,yto,KR,Lto,xto,$to,Ms,Nre,kto,Sto,ZR,Rto,Bto,eB,Pto,Ito,qto,Rg,jre,Nto,jto,oB,Dto,Gto,Oto,Bg,Dre,Vto,Xto,rB,zto,Qto,Wto,Es,Gre,Hto,Uto,tB,Jto,Yto,aB,Kto,Zto,eao,Pg,Ore,oao,rao,nB,tao,aao,nao,Ig,Vre,sao,lao,sB,iao,dao,cao,Cs,Xre,fao,mao,lB,gao,hao,iB,pao,uao,_ao,ws,zre,bao,vao,dB,Fao,Tao,cB,Mao,Eao,Cao,As,Qre,wao,Aao,fB,yao,Lao,mB,xao,$ao,kao,ys,Wre,Sao,Rao,gB,Bao,Pao,hB,Iao,qao,Nao,qg,jao,Ng,qA,Dao,Hre,Gao,EBe,mi,jg,Ure,NA,Oao,Jre,Vao,CBe,Ao,jA,Xao,DA,zao,pB,Qao,Wao,Hao,GA,Uao,Yre,Jao,Yao,Kao,Qe,OA,Zao,Kre,eno,ono,Ma,rno,Zre,tno,ano,ete,nno,sno,ote,lno,ino,dno,te,Dg,rte,cno,fno,uB,mno,gno,hno,Gg,tte,pno,uno,_B,_no,bno,vno,Og,ate,Fno,Tno,bB,Mno,Eno,Cno,Vg,nte,wno,Ano,vB,yno,Lno,xno,Xg,ste,$no,kno,FB,Sno,Rno,Bno,zg,lte,Pno,Ino,TB,qno,Nno,jno,Qg,ite,Dno,Gno,MB,Ono,Vno,Xno,Wg,dte,zno,Qno,EB,Wno,Hno,Uno,Hg,cte,Jno,Yno,CB,Kno,Zno,eso,Ug,fte,oso,rso,wB,tso,aso,nso,Jg,mte,sso,lso,AB,iso,dso,cso,Yg,gte,fso,mso,yB,gso,hso,pso,Kg,hte,uso,_so,LB,bso,vso,Fso,Zg,pte,Tso,Mso,xB,Eso,Cso,wso,eh,ute,Aso,yso,$B,Lso,xso,$so,oh,_te,kso,Sso,kB,Rso,Bso,Pso,rh,bte,Iso,qso,SB,Nso,jso,Dso,th,vte,Gso,Oso,RB,Vso,Xso,zso,ah,Fte,Qso,Wso,BB,Hso,Uso,Jso,nh,Tte,Yso,Kso,PB,Zso,elo,olo,sh,Mte,rlo,tlo,IB,alo,nlo,slo,lh,Ete,llo,ilo,qB,dlo,clo,flo,ih,Cte,mlo,glo,NB,hlo,plo,ulo,dh,wte,_lo,blo,jB,vlo,Flo,Tlo,ch,Mlo,fh,Elo,mh,VA,Clo,Ate,wlo,wBe,gi,gh,yte,XA,Alo,Lte,ylo,ABe,yo,zA,Llo,QA,xlo,DB,$lo,klo,Slo,WA,Rlo,xte,Blo,Plo,Ilo,We,HA,qlo,$te,Nlo,jlo,hi,Dlo,kte,Glo,Olo,Ste,Vlo,Xlo,zlo,be,hh,Rte,Qlo,Wlo,GB,Hlo,Ulo,Jlo,ph,Bte,Ylo,Klo,OB,Zlo,eio,oio,uh,Pte,rio,tio,VB,aio,nio,sio,_h,Ite,lio,iio,XB,dio,cio,fio,bh,qte,mio,gio,zB,hio,pio,uio,vh,Nte,_io,bio,QB,vio,Fio,Tio,Fh,jte,Mio,Eio,WB,Cio,wio,Aio,Th,Dte,yio,Lio,HB,xio,$io,kio,Mh,Gte,Sio,Rio,UB,Bio,Pio,Iio,Eh,Ote,qio,Nio,JB,jio,Dio,Gio,Ch,Vte,Oio,Vio,YB,Xio,zio,Qio,wh,Xte,Wio,Hio,KB,Uio,Jio,Yio,Ah,zte,Kio,Zio,ZB,edo,odo,rdo,yh,Qte,tdo,ado,eP,ndo,sdo,ldo,Lh,ido,xh,ddo,$h,UA,cdo,Wte,fdo,yBe,pi,kh,Hte,JA,mdo,Ute,gdo,LBe,Lo,YA,hdo,ui,pdo,oP,udo,_do,rP,bdo,vdo,Fdo,KA,Tdo,Jte,Mdo,Edo,Cdo,Zr,ZA,wdo,Yte,Ado,ydo,_i,Ldo,Kte,xdo,$do,tP,kdo,Sdo,Rdo,Sh,Bdo,He,e0,Pdo,Zte,Ido,qdo,Ea,Ndo,eae,jdo,Ddo,oae,Gdo,Odo,rae,Vdo,Xdo,zdo,x,Rh,tae,Qdo,Wdo,aP,Hdo,Udo,Jdo,Bh,aae,Ydo,Kdo,nP,Zdo,eco,oco,Ph,nae,rco,tco,sP,aco,nco,sco,Ih,sae,lco,ico,lP,dco,cco,fco,qh,lae,mco,gco,iP,hco,pco,uco,Nh,iae,_co,bco,dP,vco,Fco,Tco,jh,dae,Mco,Eco,cP,Cco,wco,Aco,Dh,cae,yco,Lco,fP,xco,$co,kco,Gh,fae,Sco,Rco,mP,Bco,Pco,Ico,Oh,mae,qco,Nco,gP,jco,Dco,Gco,Vh,gae,Oco,Vco,hP,Xco,zco,Qco,Xh,hae,Wco,Hco,pP,Uco,Jco,Yco,zh,pae,Kco,Zco,uP,efo,ofo,rfo,Qh,uae,tfo,afo,_P,nfo,sfo,lfo,Wh,_ae,ifo,dfo,bP,cfo,ffo,mfo,Hh,bae,gfo,hfo,vP,pfo,ufo,_fo,Uh,vae,bfo,vfo,FP,Ffo,Tfo,Mfo,Jh,Fae,Efo,Cfo,TP,wfo,Afo,yfo,Yh,Tae,Lfo,xfo,MP,$fo,kfo,Sfo,Kh,Mae,Rfo,Bfo,EP,Pfo,Ifo,qfo,Zh,Eae,Nfo,jfo,CP,Dfo,Gfo,Ofo,ep,Cae,Vfo,Xfo,wP,zfo,Qfo,Wfo,op,wae,Hfo,Ufo,AP,Jfo,Yfo,Kfo,rp,Aae,Zfo,emo,yP,omo,rmo,tmo,tp,yae,amo,nmo,LP,smo,lmo,imo,ap,Lae,dmo,cmo,xP,fmo,mmo,gmo,np,xae,hmo,pmo,$P,umo,_mo,bmo,sp,$ae,vmo,Fmo,kP,Tmo,Mmo,Emo,lp,kae,Cmo,wmo,SP,Amo,ymo,Lmo,ip,Sae,xmo,$mo,RP,kmo,Smo,Rmo,Ls,Rae,Bmo,Pmo,BP,Imo,qmo,PP,Nmo,jmo,Dmo,dp,Bae,Gmo,Omo,IP,Vmo,Xmo,zmo,cp,Pae,Qmo,Wmo,qP,Hmo,Umo,Jmo,fp,Iae,Ymo,Kmo,NP,Zmo,ego,ogo,mp,qae,rgo,tgo,jP,ago,ngo,sgo,gp,Nae,lgo,igo,DP,dgo,cgo,fgo,hp,jae,mgo,ggo,GP,hgo,pgo,ugo,pp,Dae,_go,bgo,OP,vgo,Fgo,Tgo,up,Gae,Mgo,Ego,VP,Cgo,wgo,Ago,_p,Oae,ygo,Lgo,XP,xgo,$go,kgo,bp,Vae,Sgo,Rgo,zP,Bgo,Pgo,Igo,vp,Xae,qgo,Ngo,QP,jgo,Dgo,Ggo,Fp,zae,Ogo,Vgo,WP,Xgo,zgo,Qgo,Tp,Qae,Wgo,Hgo,HP,Ugo,Jgo,Ygo,Mp,Wae,Kgo,Zgo,UP,eho,oho,rho,Ep,Hae,tho,aho,JP,nho,sho,lho,Cp,Uae,iho,dho,YP,cho,fho,mho,wp,Jae,gho,hho,KP,pho,uho,_ho,Ap,Yae,bho,vho,ZP,Fho,Tho,Mho,yp,Kae,Eho,Cho,eI,who,Aho,yho,Lp,Zae,Lho,xho,oI,$ho,kho,Sho,xp,ene,Rho,Bho,rI,Pho,Iho,qho,$p,one,Nho,jho,tI,Dho,Gho,Oho,kp,rne,Vho,Xho,aI,zho,Qho,Who,Sp,tne,Hho,Uho,nI,Jho,Yho,Kho,Rp,ane,Zho,epo,sI,opo,rpo,tpo,Bp,nne,apo,npo,lI,spo,lpo,ipo,Pp,sne,dpo,cpo,iI,fpo,mpo,gpo,Ip,lne,hpo,ppo,dI,upo,_po,bpo,qp,ine,vpo,Fpo,cI,Tpo,Mpo,Epo,Np,dne,Cpo,wpo,fI,Apo,ypo,Lpo,jp,cne,xpo,$po,mI,kpo,Spo,Rpo,Dp,fne,Bpo,Ppo,gI,Ipo,qpo,Npo,Gp,mne,jpo,Dpo,hI,Gpo,Opo,Vpo,Op,gne,Xpo,zpo,pI,Qpo,Wpo,Hpo,Vp,hne,Upo,Jpo,uI,Ypo,Kpo,Zpo,Xp,pne,euo,ouo,_I,ruo,tuo,auo,zp,une,nuo,suo,bI,luo,iuo,duo,Qp,_ne,cuo,fuo,vI,muo,guo,huo,Wp,bne,puo,uuo,FI,_uo,buo,vuo,Hp,vne,Fuo,Tuo,TI,Muo,Euo,Cuo,Up,Fne,wuo,Auo,MI,yuo,Luo,xuo,Jp,Tne,$uo,kuo,EI,Suo,Ruo,Buo,Yp,Mne,Puo,Iuo,CI,quo,Nuo,juo,Kp,Ene,Duo,Guo,wI,Ouo,Vuo,Xuo,Zp,Cne,zuo,Quo,AI,Wuo,Huo,Uuo,eu,wne,Juo,Yuo,yI,Kuo,Zuo,e_o,ou,Ane,o_o,r_o,LI,t_o,a_o,n_o,ru,yne,s_o,l_o,xI,i_o,d_o,c_o,tu,Lne,f_o,m_o,$I,g_o,h_o,p_o,au,xne,u_o,__o,kI,b_o,v_o,F_o,nu,$ne,T_o,M_o,SI,E_o,C_o,w_o,su,kne,A_o,y_o,RI,L_o,x_o,$_o,lu,Sne,k_o,S_o,BI,R_o,B_o,P_o,iu,Rne,I_o,q_o,PI,N_o,j_o,D_o,du,Bne,G_o,O_o,II,V_o,X_o,z_o,cu,Pne,Q_o,W_o,qI,H_o,U_o,J_o,fu,Ine,Y_o,K_o,NI,Z_o,e2o,o2o,mu,qne,r2o,t2o,jI,a2o,n2o,s2o,gu,Nne,l2o,i2o,DI,d2o,c2o,f2o,hu,jne,m2o,g2o,GI,h2o,p2o,u2o,pu,Dne,_2o,b2o,OI,v2o,F2o,T2o,uu,Gne,M2o,E2o,VI,C2o,w2o,A2o,_u,One,y2o,L2o,XI,x2o,$2o,k2o,bu,Vne,S2o,R2o,zI,B2o,P2o,I2o,vu,q2o,Xne,N2o,j2o,zne,D2o,G2o,Fu,xBe,bi,Tu,Qne,o0,O2o,Wne,V2o,$Be,xo,r0,X2o,vi,z2o,QI,Q2o,W2o,WI,H2o,U2o,J2o,t0,Y2o,Hne,K2o,Z2o,e6o,et,a0,o6o,Une,r6o,t6o,Fi,a6o,Jne,n6o,s6o,HI,l6o,i6o,d6o,Mu,c6o,Ue,n0,f6o,Yne,m6o,g6o,Ca,h6o,Kne,p6o,u6o,Zne,_6o,b6o,ese,v6o,F6o,T6o,G,Eu,ose,M6o,E6o,UI,C6o,w6o,A6o,Cu,rse,y6o,L6o,JI,x6o,$6o,k6o,wu,tse,S6o,R6o,YI,B6o,P6o,I6o,Au,ase,q6o,N6o,KI,j6o,D6o,G6o,yu,nse,O6o,V6o,ZI,X6o,z6o,Q6o,Lu,sse,W6o,H6o,eq,U6o,J6o,Y6o,xu,lse,K6o,Z6o,oq,e1o,o1o,r1o,$u,ise,t1o,a1o,rq,n1o,s1o,l1o,ku,dse,i1o,d1o,tq,c1o,f1o,m1o,Su,cse,g1o,h1o,aq,p1o,u1o,_1o,Ru,fse,b1o,v1o,nq,F1o,T1o,M1o,Bu,mse,E1o,C1o,sq,w1o,A1o,y1o,Pu,gse,L1o,x1o,lq,$1o,k1o,S1o,Iu,hse,R1o,B1o,iq,P1o,I1o,q1o,qu,pse,N1o,j1o,dq,D1o,G1o,O1o,Nu,use,V1o,X1o,cq,z1o,Q1o,W1o,ju,_se,H1o,U1o,fq,J1o,Y1o,K1o,Du,bse,Z1o,ebo,mq,obo,rbo,tbo,Gu,vse,abo,nbo,gq,sbo,lbo,ibo,Ou,Fse,dbo,cbo,hq,fbo,mbo,gbo,Vu,Tse,hbo,pbo,pq,ubo,_bo,bbo,Xu,Mse,vbo,Fbo,uq,Tbo,Mbo,Ebo,zu,Ese,Cbo,wbo,_q,Abo,ybo,Lbo,Qu,Cse,xbo,$bo,bq,kbo,Sbo,Rbo,Wu,wse,Bbo,Pbo,vq,Ibo,qbo,Nbo,Hu,Ase,jbo,Dbo,Fq,Gbo,Obo,Vbo,Uu,yse,Xbo,zbo,Tq,Qbo,Wbo,Hbo,Ju,Lse,Ubo,Jbo,Mq,Ybo,Kbo,Zbo,Yu,xse,evo,ovo,Eq,rvo,tvo,avo,Ku,$se,nvo,svo,Cq,lvo,ivo,dvo,Zu,kse,cvo,fvo,wq,mvo,gvo,hvo,e_,Sse,pvo,uvo,Aq,_vo,bvo,vvo,o_,Rse,Fvo,Tvo,yq,Mvo,Evo,Cvo,r_,Bse,wvo,Avo,Lq,yvo,Lvo,xvo,t_,Pse,$vo,kvo,xq,Svo,Rvo,Bvo,a_,Ise,Pvo,Ivo,$q,qvo,Nvo,jvo,n_,qse,Dvo,Gvo,kq,Ovo,Vvo,Xvo,s_,Nse,zvo,Qvo,Sq,Wvo,Hvo,Uvo,l_,jse,Jvo,Yvo,Rq,Kvo,Zvo,eFo,i_,oFo,Dse,rFo,tFo,Gse,aFo,nFo,d_,kBe,Ti,c_,Ose,s0,sFo,Vse,lFo,SBe,$o,l0,iFo,Mi,dFo,Bq,cFo,fFo,Pq,mFo,gFo,hFo,i0,pFo,Xse,uFo,_Fo,bFo,ot,d0,vFo,zse,FFo,TFo,Ei,MFo,Qse,EFo,CFo,Iq,wFo,AFo,yFo,f_,LFo,Je,c0,xFo,Wse,$Fo,kFo,wa,SFo,Hse,RFo,BFo,Use,PFo,IFo,Jse,qFo,NFo,jFo,z,m_,Yse,DFo,GFo,qq,OFo,VFo,XFo,g_,Kse,zFo,QFo,Nq,WFo,HFo,UFo,h_,Zse,JFo,YFo,jq,KFo,ZFo,eTo,p_,ele,oTo,rTo,Dq,tTo,aTo,nTo,u_,ole,sTo,lTo,Gq,iTo,dTo,cTo,__,rle,fTo,mTo,Oq,gTo,hTo,pTo,b_,tle,uTo,_To,Vq,bTo,vTo,FTo,v_,ale,TTo,MTo,Xq,ETo,CTo,wTo,F_,nle,ATo,yTo,zq,LTo,xTo,$To,T_,sle,kTo,STo,Qq,RTo,BTo,PTo,M_,lle,ITo,qTo,Wq,NTo,jTo,DTo,E_,ile,GTo,OTo,Hq,VTo,XTo,zTo,C_,dle,QTo,WTo,Uq,HTo,UTo,JTo,w_,cle,YTo,KTo,Jq,ZTo,e8o,o8o,A_,fle,r8o,t8o,Yq,a8o,n8o,s8o,y_,mle,l8o,i8o,Kq,d8o,c8o,f8o,L_,gle,m8o,g8o,Zq,h8o,p8o,u8o,x_,hle,_8o,b8o,eN,v8o,F8o,T8o,$_,ple,M8o,E8o,oN,C8o,w8o,A8o,k_,ule,y8o,L8o,rN,x8o,$8o,k8o,S_,_le,S8o,R8o,tN,B8o,P8o,I8o,R_,ble,q8o,N8o,aN,j8o,D8o,G8o,B_,vle,O8o,V8o,nN,X8o,z8o,Q8o,P_,Fle,W8o,H8o,sN,U8o,J8o,Y8o,I_,Tle,K8o,Z8o,lN,eMo,oMo,rMo,q_,Mle,tMo,aMo,iN,nMo,sMo,lMo,N_,Ele,iMo,dMo,dN,cMo,fMo,mMo,j_,Cle,gMo,hMo,cN,pMo,uMo,_Mo,D_,wle,bMo,vMo,fN,FMo,TMo,MMo,G_,Ale,EMo,CMo,mN,wMo,AMo,yMo,O_,yle,LMo,xMo,gN,$Mo,kMo,SMo,V_,Lle,RMo,BMo,hN,PMo,IMo,qMo,X_,xle,NMo,jMo,pN,DMo,GMo,OMo,z_,$le,VMo,XMo,uN,zMo,QMo,WMo,Q_,kle,HMo,UMo,_N,JMo,YMo,KMo,W_,ZMo,Sle,e4o,o4o,Rle,r4o,t4o,H_,RBe,Ci,U_,Ble,f0,a4o,Ple,n4o,BBe,ko,m0,s4o,wi,l4o,bN,i4o,d4o,vN,c4o,f4o,m4o,g0,g4o,Ile,h4o,p4o,u4o,rt,h0,_4o,qle,b4o,v4o,Ai,F4o,Nle,T4o,M4o,FN,E4o,C4o,w4o,J_,A4o,Ye,p0,y4o,jle,L4o,x4o,Aa,$4o,Dle,k4o,S4o,Gle,R4o,B4o,Ole,P4o,I4o,q4o,Q,Y_,Vle,N4o,j4o,TN,D4o,G4o,O4o,K_,Xle,V4o,X4o,MN,z4o,Q4o,W4o,Z_,zle,H4o,U4o,EN,J4o,Y4o,K4o,e2,Qle,Z4o,eEo,CN,oEo,rEo,tEo,o2,Wle,aEo,nEo,wN,sEo,lEo,iEo,r2,Hle,dEo,cEo,AN,fEo,mEo,gEo,t2,Ule,hEo,pEo,yN,uEo,_Eo,bEo,a2,Jle,vEo,FEo,LN,TEo,MEo,EEo,n2,Yle,CEo,wEo,xN,AEo,yEo,LEo,s2,Kle,xEo,$Eo,$N,kEo,SEo,REo,l2,Zle,BEo,PEo,kN,IEo,qEo,NEo,i2,eie,jEo,DEo,SN,GEo,OEo,VEo,d2,oie,XEo,zEo,RN,QEo,WEo,HEo,c2,rie,UEo,JEo,BN,YEo,KEo,ZEo,f2,tie,e5o,o5o,PN,r5o,t5o,a5o,m2,aie,n5o,s5o,IN,l5o,i5o,d5o,g2,nie,c5o,f5o,qN,m5o,g5o,h5o,h2,sie,p5o,u5o,NN,_5o,b5o,v5o,p2,lie,F5o,T5o,jN,M5o,E5o,C5o,u2,iie,w5o,A5o,DN,y5o,L5o,x5o,_2,die,$5o,k5o,GN,S5o,R5o,B5o,b2,cie,P5o,I5o,ON,q5o,N5o,j5o,v2,fie,D5o,G5o,VN,O5o,V5o,X5o,F2,mie,z5o,Q5o,XN,W5o,H5o,U5o,T2,gie,J5o,Y5o,zN,K5o,Z5o,eCo,M2,hie,oCo,rCo,QN,tCo,aCo,nCo,E2,pie,sCo,lCo,WN,iCo,dCo,cCo,C2,uie,fCo,mCo,HN,gCo,hCo,pCo,w2,_ie,uCo,_Co,UN,bCo,vCo,FCo,A2,bie,TCo,MCo,JN,ECo,CCo,wCo,y2,vie,ACo,yCo,Fie,LCo,xCo,$Co,L2,Tie,kCo,SCo,YN,RCo,BCo,PCo,x2,Mie,ICo,qCo,KN,NCo,jCo,DCo,$2,Eie,GCo,OCo,ZN,VCo,XCo,zCo,k2,Cie,QCo,WCo,ej,HCo,UCo,JCo,S2,YCo,wie,KCo,ZCo,Aie,e3o,o3o,R2,PBe,yi,B2,yie,u0,r3o,Lie,t3o,IBe,So,_0,a3o,Li,n3o,oj,s3o,l3o,rj,i3o,d3o,c3o,b0,f3o,xie,m3o,g3o,h3o,tt,v0,p3o,$ie,u3o,_3o,xi,b3o,kie,v3o,F3o,tj,T3o,M3o,E3o,P2,C3o,Ke,F0,w3o,Sie,A3o,y3o,ya,L3o,Rie,x3o,$3o,Bie,k3o,S3o,Pie,R3o,B3o,P3o,he,I2,Iie,I3o,q3o,aj,N3o,j3o,D3o,q2,qie,G3o,O3o,nj,V3o,X3o,z3o,N2,Nie,Q3o,W3o,sj,H3o,U3o,J3o,j2,jie,Y3o,K3o,lj,Z3o,ewo,owo,D2,Die,rwo,two,ij,awo,nwo,swo,G2,Gie,lwo,iwo,dj,dwo,cwo,fwo,O2,Oie,mwo,gwo,cj,hwo,pwo,uwo,V2,Vie,_wo,bwo,fj,vwo,Fwo,Two,X2,Xie,Mwo,Ewo,mj,Cwo,wwo,Awo,z2,zie,ywo,Lwo,gj,xwo,$wo,kwo,Q2,Qie,Swo,Rwo,hj,Bwo,Pwo,Iwo,W2,Wie,qwo,Nwo,pj,jwo,Dwo,Gwo,H2,Hie,Owo,Vwo,uj,Xwo,zwo,Qwo,U2,Uie,Wwo,Hwo,_j,Uwo,Jwo,Ywo,J2,Jie,Kwo,Zwo,bj,eAo,oAo,rAo,Y2,Yie,tAo,aAo,vj,nAo,sAo,lAo,K2,Kie,iAo,dAo,Fj,cAo,fAo,mAo,Z2,gAo,Zie,hAo,pAo,ede,uAo,_Ao,e6,qBe,$i,o6,ode,T0,bAo,rde,vAo,NBe,Ro,M0,FAo,ki,TAo,Tj,MAo,EAo,Mj,CAo,wAo,AAo,E0,yAo,tde,LAo,xAo,$Ao,at,C0,kAo,ade,SAo,RAo,Si,BAo,nde,PAo,IAo,Ej,qAo,NAo,jAo,r6,DAo,Ze,w0,GAo,sde,OAo,VAo,La,XAo,lde,zAo,QAo,ide,WAo,HAo,dde,UAo,JAo,YAo,q,t6,cde,KAo,ZAo,Cj,e0o,o0o,r0o,a6,fde,t0o,a0o,wj,n0o,s0o,l0o,n6,mde,i0o,d0o,Aj,c0o,f0o,m0o,s6,gde,g0o,h0o,yj,p0o,u0o,_0o,l6,hde,b0o,v0o,Lj,F0o,T0o,M0o,i6,pde,E0o,C0o,xj,w0o,A0o,y0o,d6,ude,L0o,x0o,$j,$0o,k0o,S0o,c6,_de,R0o,B0o,kj,P0o,I0o,q0o,f6,bde,N0o,j0o,Sj,D0o,G0o,O0o,m6,vde,V0o,X0o,Rj,z0o,Q0o,W0o,g6,Fde,H0o,U0o,Bj,J0o,Y0o,K0o,h6,Tde,Z0o,eyo,Pj,oyo,ryo,tyo,p6,Mde,ayo,nyo,Ij,syo,lyo,iyo,u6,Ede,dyo,cyo,qj,fyo,myo,gyo,_6,Cde,hyo,pyo,Nj,uyo,_yo,byo,b6,wde,vyo,Fyo,jj,Tyo,Myo,Eyo,v6,Ade,Cyo,wyo,Dj,Ayo,yyo,Lyo,F6,yde,xyo,$yo,Gj,kyo,Syo,Ryo,T6,Lde,Byo,Pyo,Oj,Iyo,qyo,Nyo,M6,xde,jyo,Dyo,Vj,Gyo,Oyo,Vyo,E6,$de,Xyo,zyo,Xj,Qyo,Wyo,Hyo,C6,kde,Uyo,Jyo,zj,Yyo,Kyo,Zyo,w6,Sde,eLo,oLo,Qj,rLo,tLo,aLo,A6,Rde,nLo,sLo,Wj,lLo,iLo,dLo,y6,Bde,cLo,fLo,Hj,mLo,gLo,hLo,L6,Pde,pLo,uLo,Uj,_Lo,bLo,vLo,x6,Ide,FLo,TLo,Jj,MLo,ELo,CLo,$6,qde,wLo,ALo,Yj,yLo,LLo,xLo,k6,Nde,$Lo,kLo,Kj,SLo,RLo,BLo,S6,jde,PLo,ILo,Zj,qLo,NLo,jLo,R6,Dde,DLo,GLo,eD,OLo,VLo,XLo,B6,Gde,zLo,QLo,oD,WLo,HLo,ULo,P6,Ode,JLo,YLo,rD,KLo,ZLo,e7o,I6,Vde,o7o,r7o,tD,t7o,a7o,n7o,q6,Xde,s7o,l7o,aD,i7o,d7o,c7o,N6,zde,f7o,m7o,nD,g7o,h7o,p7o,j6,Qde,u7o,_7o,sD,b7o,v7o,F7o,D6,Wde,T7o,M7o,lD,E7o,C7o,w7o,G6,Hde,A7o,y7o,iD,L7o,x7o,$7o,O6,Ude,k7o,S7o,dD,R7o,B7o,P7o,V6,Jde,I7o,q7o,cD,N7o,j7o,D7o,X6,Yde,G7o,O7o,fD,V7o,X7o,z7o,z6,Kde,Q7o,W7o,mD,H7o,U7o,J7o,Q6,Zde,Y7o,K7o,gD,Z7o,exo,oxo,W6,ece,rxo,txo,hD,axo,nxo,sxo,H6,oce,lxo,ixo,pD,dxo,cxo,fxo,U6,rce,mxo,gxo,uD,hxo,pxo,uxo,J6,_xo,tce,bxo,vxo,ace,Fxo,Txo,Y6,jBe,Ri,K6,nce,A0,Mxo,sce,Exo,DBe,Bo,y0,Cxo,Bi,wxo,_D,Axo,yxo,bD,Lxo,xxo,$xo,L0,kxo,lce,Sxo,Rxo,Bxo,nt,x0,Pxo,ice,Ixo,qxo,Pi,Nxo,dce,jxo,Dxo,vD,Gxo,Oxo,Vxo,Z6,Xxo,eo,$0,zxo,cce,Qxo,Wxo,xa,Hxo,fce,Uxo,Jxo,mce,Yxo,Kxo,gce,Zxo,e9o,o9o,Y,e1,hce,r9o,t9o,FD,a9o,n9o,s9o,o1,pce,l9o,i9o,TD,d9o,c9o,f9o,r1,uce,m9o,g9o,MD,h9o,p9o,u9o,t1,_ce,_9o,b9o,ED,v9o,F9o,T9o,a1,bce,M9o,E9o,CD,C9o,w9o,A9o,n1,vce,y9o,L9o,wD,x9o,$9o,k9o,s1,Fce,S9o,R9o,AD,B9o,P9o,I9o,l1,Tce,q9o,N9o,yD,j9o,D9o,G9o,i1,Mce,O9o,V9o,LD,X9o,z9o,Q9o,d1,Ece,W9o,H9o,xD,U9o,J9o,Y9o,c1,Cce,K9o,Z9o,$D,e$o,o$o,r$o,f1,wce,t$o,a$o,kD,n$o,s$o,l$o,m1,Ace,i$o,d$o,SD,c$o,f$o,m$o,g1,yce,g$o,h$o,RD,p$o,u$o,_$o,h1,Lce,b$o,v$o,BD,F$o,T$o,M$o,p1,xce,E$o,C$o,PD,w$o,A$o,y$o,u1,$ce,L$o,x$o,ID,$$o,k$o,S$o,_1,kce,R$o,B$o,qD,P$o,I$o,q$o,b1,Sce,N$o,j$o,ND,D$o,G$o,O$o,v1,Rce,V$o,X$o,jD,z$o,Q$o,W$o,F1,Bce,H$o,U$o,DD,J$o,Y$o,K$o,T1,Pce,Z$o,eko,GD,oko,rko,tko,M1,Ice,ako,nko,OD,sko,lko,iko,E1,qce,dko,cko,VD,fko,mko,gko,C1,Nce,hko,pko,XD,uko,_ko,bko,w1,jce,vko,Fko,zD,Tko,Mko,Eko,A1,Dce,Cko,wko,QD,Ako,yko,Lko,y1,Gce,xko,$ko,WD,kko,Sko,Rko,L1,Bko,Oce,Pko,Iko,Vce,qko,Nko,x1,GBe,Ii,$1,Xce,k0,jko,zce,Dko,OBe,Po,S0,Gko,qi,Oko,HD,Vko,Xko,UD,zko,Qko,Wko,R0,Hko,Qce,Uko,Jko,Yko,st,B0,Kko,Wce,Zko,eSo,Ni,oSo,Hce,rSo,tSo,JD,aSo,nSo,sSo,k1,lSo,oo,P0,iSo,Uce,dSo,cSo,$a,fSo,Jce,mSo,gSo,Yce,hSo,pSo,Kce,uSo,_So,bSo,Ur,S1,Zce,vSo,FSo,YD,TSo,MSo,ESo,R1,efe,CSo,wSo,KD,ASo,ySo,LSo,B1,ofe,xSo,$So,ZD,kSo,SSo,RSo,P1,rfe,BSo,PSo,eG,ISo,qSo,NSo,I1,tfe,jSo,DSo,oG,GSo,OSo,VSo,q1,XSo,afe,zSo,QSo,nfe,WSo,HSo,N1,VBe,ji,j1,sfe,I0,USo,lfe,JSo,XBe,Io,q0,YSo,Di,KSo,rG,ZSo,eRo,tG,oRo,rRo,tRo,N0,aRo,ife,nRo,sRo,lRo,lt,j0,iRo,dfe,dRo,cRo,Gi,fRo,cfe,mRo,gRo,aG,hRo,pRo,uRo,D1,_Ro,ro,D0,bRo,ffe,vRo,FRo,ka,TRo,mfe,MRo,ERo,gfe,CRo,wRo,hfe,ARo,yRo,LRo,U,G1,pfe,xRo,$Ro,nG,kRo,SRo,RRo,O1,ufe,BRo,PRo,sG,IRo,qRo,NRo,V1,_fe,jRo,DRo,lG,GRo,ORo,VRo,X1,bfe,XRo,zRo,iG,QRo,WRo,HRo,z1,vfe,URo,JRo,dG,YRo,KRo,ZRo,Q1,Ffe,eBo,oBo,cG,rBo,tBo,aBo,W1,Tfe,nBo,sBo,fG,lBo,iBo,dBo,H1,Mfe,cBo,fBo,mG,mBo,gBo,hBo,U1,Efe,pBo,uBo,gG,_Bo,bBo,vBo,J1,Cfe,FBo,TBo,hG,MBo,EBo,CBo,Y1,wfe,wBo,ABo,pG,yBo,LBo,xBo,K1,Afe,$Bo,kBo,uG,SBo,RBo,BBo,Z1,yfe,PBo,IBo,_G,qBo,NBo,jBo,eb,Lfe,DBo,GBo,bG,OBo,VBo,XBo,ob,xfe,zBo,QBo,vG,WBo,HBo,UBo,rb,$fe,JBo,YBo,FG,KBo,ZBo,ePo,tb,kfe,oPo,rPo,TG,tPo,aPo,nPo,ab,Sfe,sPo,lPo,MG,iPo,dPo,cPo,nb,Rfe,fPo,mPo,EG,gPo,hPo,pPo,sb,Bfe,uPo,_Po,CG,bPo,vPo,FPo,lb,Pfe,TPo,MPo,wG,EPo,CPo,wPo,ib,Ife,APo,yPo,AG,LPo,xPo,$Po,db,qfe,kPo,SPo,yG,RPo,BPo,PPo,cb,Nfe,IPo,qPo,LG,NPo,jPo,DPo,fb,jfe,GPo,OPo,xG,VPo,XPo,zPo,mb,Dfe,QPo,WPo,$G,HPo,UPo,JPo,gb,Gfe,YPo,KPo,kG,ZPo,eIo,oIo,hb,Ofe,rIo,tIo,SG,aIo,nIo,sIo,pb,Vfe,lIo,iIo,RG,dIo,cIo,fIo,ub,Xfe,mIo,gIo,BG,hIo,pIo,uIo,_b,zfe,_Io,bIo,PG,vIo,FIo,TIo,bb,Qfe,MIo,EIo,IG,CIo,wIo,AIo,vb,Wfe,yIo,LIo,qG,xIo,$Io,kIo,Fb,SIo,Hfe,RIo,BIo,Ufe,PIo,IIo,Tb,zBe,Oi,Mb,Jfe,G0,qIo,Yfe,NIo,QBe,qo,O0,jIo,Vi,DIo,NG,GIo,OIo,jG,VIo,XIo,zIo,V0,QIo,Kfe,WIo,HIo,UIo,it,X0,JIo,Zfe,YIo,KIo,Xi,ZIo,eme,eqo,oqo,DG,rqo,tqo,aqo,Eb,nqo,to,z0,sqo,ome,lqo,iqo,Sa,dqo,rme,cqo,fqo,tme,mqo,gqo,ame,hqo,pqo,uqo,O,Cb,nme,_qo,bqo,GG,vqo,Fqo,Tqo,wb,sme,Mqo,Eqo,OG,Cqo,wqo,Aqo,Ab,lme,yqo,Lqo,VG,xqo,$qo,kqo,yb,ime,Sqo,Rqo,XG,Bqo,Pqo,Iqo,Lb,dme,qqo,Nqo,zG,jqo,Dqo,Gqo,xb,cme,Oqo,Vqo,QG,Xqo,zqo,Qqo,$b,fme,Wqo,Hqo,WG,Uqo,Jqo,Yqo,kb,mme,Kqo,Zqo,HG,eNo,oNo,rNo,Sb,gme,tNo,aNo,UG,nNo,sNo,lNo,Rb,hme,iNo,dNo,JG,cNo,fNo,mNo,Bb,pme,gNo,hNo,YG,pNo,uNo,_No,Pb,ume,bNo,vNo,KG,FNo,TNo,MNo,Ib,_me,ENo,CNo,ZG,wNo,ANo,yNo,qb,bme,LNo,xNo,eO,$No,kNo,SNo,Nb,vme,RNo,BNo,oO,PNo,INo,qNo,jb,Fme,NNo,jNo,rO,DNo,GNo,ONo,Db,Tme,VNo,XNo,tO,zNo,QNo,WNo,Gb,Mme,HNo,UNo,aO,JNo,YNo,KNo,Ob,Eme,ZNo,ejo,nO,ojo,rjo,tjo,Vb,Cme,ajo,njo,sO,sjo,ljo,ijo,Xb,wme,djo,cjo,lO,fjo,mjo,gjo,zb,Ame,hjo,pjo,iO,ujo,_jo,bjo,Qb,yme,vjo,Fjo,dO,Tjo,Mjo,Ejo,Wb,Lme,Cjo,wjo,cO,Ajo,yjo,Ljo,Hb,xme,xjo,$jo,fO,kjo,Sjo,Rjo,Ub,$me,Bjo,Pjo,mO,Ijo,qjo,Njo,Jb,kme,jjo,Djo,gO,Gjo,Ojo,Vjo,Yb,Sme,Xjo,zjo,hO,Qjo,Wjo,Hjo,Kb,Rme,Ujo,Jjo,pO,Yjo,Kjo,Zjo,Zb,Bme,eDo,oDo,uO,rDo,tDo,aDo,ev,Pme,nDo,sDo,_O,lDo,iDo,dDo,ov,Ime,cDo,fDo,bO,mDo,gDo,hDo,rv,qme,pDo,uDo,vO,_Do,bDo,vDo,tv,Nme,FDo,TDo,FO,MDo,EDo,CDo,av,jme,wDo,ADo,TO,yDo,LDo,xDo,nv,Dme,$Do,kDo,MO,SDo,RDo,BDo,sv,Gme,PDo,IDo,EO,qDo,NDo,jDo,lv,Ome,DDo,GDo,CO,ODo,VDo,XDo,iv,Vme,zDo,QDo,wO,WDo,HDo,UDo,dv,JDo,Xme,YDo,KDo,zme,ZDo,eGo,cv,WBe,zi,fv,Qme,Q0,oGo,Wme,rGo,HBe,No,W0,tGo,Qi,aGo,AO,nGo,sGo,yO,lGo,iGo,dGo,H0,cGo,Hme,fGo,mGo,gGo,dt,U0,hGo,Ume,pGo,uGo,Wi,_Go,Jme,bGo,vGo,LO,FGo,TGo,MGo,mv,EGo,ao,J0,CGo,Yme,wGo,AGo,Ra,yGo,Kme,LGo,xGo,Zme,$Go,kGo,ege,SGo,RGo,BGo,oge,gv,rge,PGo,IGo,xO,qGo,NGo,jGo,hv,DGo,tge,GGo,OGo,age,VGo,XGo,pv,UBe,Hi,uv,nge,Y0,zGo,sge,QGo,JBe,jo,K0,WGo,Ui,HGo,$O,UGo,JGo,kO,YGo,KGo,ZGo,Z0,eOo,lge,oOo,rOo,tOo,ct,ey,aOo,ige,nOo,sOo,Ji,lOo,dge,iOo,dOo,SO,cOo,fOo,mOo,_v,gOo,no,oy,hOo,cge,pOo,uOo,Ba,_Oo,fge,bOo,vOo,mge,FOo,TOo,gge,MOo,EOo,COo,ve,bv,hge,wOo,AOo,RO,yOo,LOo,xOo,vv,pge,$Oo,kOo,BO,SOo,ROo,BOo,Fv,uge,POo,IOo,PO,qOo,NOo,jOo,xs,_ge,DOo,GOo,IO,OOo,VOo,qO,XOo,zOo,QOo,Tv,bge,WOo,HOo,NO,UOo,JOo,YOo,ft,vge,KOo,ZOo,jO,eVo,oVo,DO,rVo,tVo,GO,aVo,nVo,sVo,Mv,Fge,lVo,iVo,OO,dVo,cVo,fVo,Ev,Tge,mVo,gVo,VO,hVo,pVo,uVo,Cv,Mge,_Vo,bVo,XO,vVo,FVo,TVo,wv,Ege,MVo,EVo,zO,CVo,wVo,AVo,Av,Cge,yVo,LVo,QO,xVo,$Vo,kVo,yv,wge,SVo,RVo,WO,BVo,PVo,IVo,Lv,Age,qVo,NVo,HO,jVo,DVo,GVo,xv,OVo,yge,VVo,XVo,Lge,zVo,QVo,$v,YBe,Yi,kv,xge,ry,WVo,$ge,HVo,KBe,Do,ty,UVo,Ki,JVo,UO,YVo,KVo,JO,ZVo,eXo,oXo,ay,rXo,kge,tXo,aXo,nXo,mt,ny,sXo,Sge,lXo,iXo,Zi,dXo,Rge,cXo,fXo,YO,mXo,gXo,hXo,Sv,pXo,so,sy,uXo,Bge,_Xo,bXo,Pa,vXo,Pge,FXo,TXo,Ige,MXo,EXo,qge,CXo,wXo,AXo,Nge,Rv,jge,yXo,LXo,KO,xXo,$Xo,kXo,Bv,SXo,Dge,RXo,BXo,Gge,PXo,IXo,Pv,ZBe,ed,Iv,Oge,ly,qXo,Vge,NXo,ePe,Go,iy,jXo,od,DXo,ZO,GXo,OXo,eV,VXo,XXo,zXo,dy,QXo,Xge,WXo,HXo,UXo,gt,cy,JXo,zge,YXo,KXo,rd,ZXo,Qge,ezo,ozo,oV,rzo,tzo,azo,qv,nzo,lo,fy,szo,Wge,lzo,izo,Ia,dzo,Hge,czo,fzo,Uge,mzo,gzo,Jge,hzo,pzo,uzo,Ne,Nv,Yge,_zo,bzo,rV,vzo,Fzo,Tzo,jv,Kge,Mzo,Ezo,tV,Czo,wzo,Azo,Dv,Zge,yzo,Lzo,aV,xzo,$zo,kzo,Gv,ehe,Szo,Rzo,nV,Bzo,Pzo,Izo,Ov,ohe,qzo,Nzo,sV,jzo,Dzo,Gzo,Vv,rhe,Ozo,Vzo,lV,Xzo,zzo,Qzo,Xv,the,Wzo,Hzo,iV,Uzo,Jzo,Yzo,zv,ahe,Kzo,Zzo,dV,eQo,oQo,rQo,Qv,tQo,nhe,aQo,nQo,she,sQo,lQo,Wv,oPe,td,Hv,lhe,my,iQo,ihe,dQo,rPe,Oo,gy,cQo,ad,fQo,cV,mQo,gQo,fV,hQo,pQo,uQo,hy,_Qo,dhe,bQo,vQo,FQo,ht,py,TQo,che,MQo,EQo,nd,CQo,fhe,wQo,AQo,mV,yQo,LQo,xQo,Uv,$Qo,io,uy,kQo,mhe,SQo,RQo,qa,BQo,ghe,PQo,IQo,hhe,qQo,NQo,phe,jQo,DQo,GQo,Na,Jv,uhe,OQo,VQo,gV,XQo,zQo,QQo,Yv,_he,WQo,HQo,hV,UQo,JQo,YQo,Kv,bhe,KQo,ZQo,pV,eWo,oWo,rWo,Zv,vhe,tWo,aWo,uV,nWo,sWo,lWo,eF,iWo,Fhe,dWo,cWo,The,fWo,mWo,oF,tPe,sd,rF,Mhe,_y,gWo,Ehe,hWo,aPe,Vo,by,pWo,ld,uWo,_V,_Wo,bWo,bV,vWo,FWo,TWo,vy,MWo,Che,EWo,CWo,wWo,pt,Fy,AWo,whe,yWo,LWo,id,xWo,Ahe,$Wo,kWo,vV,SWo,RWo,BWo,tF,PWo,co,Ty,IWo,yhe,qWo,NWo,ja,jWo,Lhe,DWo,GWo,xhe,OWo,VWo,$he,XWo,zWo,QWo,je,aF,khe,WWo,HWo,FV,UWo,JWo,YWo,nF,She,KWo,ZWo,TV,eHo,oHo,rHo,sF,Rhe,tHo,aHo,MV,nHo,sHo,lHo,lF,Bhe,iHo,dHo,EV,cHo,fHo,mHo,iF,Phe,gHo,hHo,CV,pHo,uHo,_Ho,dF,Ihe,bHo,vHo,wV,FHo,THo,MHo,cF,qhe,EHo,CHo,AV,wHo,AHo,yHo,fF,Nhe,LHo,xHo,yV,$Ho,kHo,SHo,mF,RHo,jhe,BHo,PHo,Dhe,IHo,qHo,gF,nPe,dd,hF,Ghe,My,NHo,Ohe,jHo,sPe,Xo,Ey,DHo,cd,GHo,LV,OHo,VHo,xV,XHo,zHo,QHo,Cy,WHo,Vhe,HHo,UHo,JHo,ut,wy,YHo,Xhe,KHo,ZHo,fd,eUo,zhe,oUo,rUo,$V,tUo,aUo,nUo,pF,sUo,fo,Ay,lUo,Qhe,iUo,dUo,Da,cUo,Whe,fUo,mUo,Hhe,gUo,hUo,Uhe,pUo,uUo,_Uo,yy,uF,Jhe,bUo,vUo,kV,FUo,TUo,MUo,_F,Yhe,EUo,CUo,SV,wUo,AUo,yUo,bF,LUo,Khe,xUo,$Uo,Zhe,kUo,SUo,vF,lPe,md,FF,epe,Ly,RUo,ope,BUo,iPe,zo,xy,PUo,gd,IUo,RV,qUo,NUo,BV,jUo,DUo,GUo,$y,OUo,rpe,VUo,XUo,zUo,_t,ky,QUo,tpe,WUo,HUo,hd,UUo,ape,JUo,YUo,PV,KUo,ZUo,eJo,TF,oJo,mo,Sy,rJo,npe,tJo,aJo,Ga,nJo,spe,sJo,lJo,lpe,iJo,dJo,ipe,cJo,fJo,mJo,Oa,MF,dpe,gJo,hJo,IV,pJo,uJo,_Jo,EF,cpe,bJo,vJo,qV,FJo,TJo,MJo,CF,fpe,EJo,CJo,NV,wJo,AJo,yJo,wF,mpe,LJo,xJo,jV,$Jo,kJo,SJo,AF,RJo,gpe,BJo,PJo,hpe,IJo,qJo,yF,dPe,pd,LF,ppe,Ry,NJo,upe,jJo,cPe,Qo,By,DJo,ud,GJo,DV,OJo,VJo,GV,XJo,zJo,QJo,Py,WJo,_pe,HJo,UJo,JJo,bt,Iy,YJo,bpe,KJo,ZJo,_d,eYo,vpe,oYo,rYo,OV,tYo,aYo,nYo,xF,sYo,go,qy,lYo,Fpe,iYo,dYo,Va,cYo,Tpe,fYo,mYo,Mpe,gYo,hYo,Epe,pYo,uYo,_Yo,bd,$F,Cpe,bYo,vYo,VV,FYo,TYo,MYo,kF,wpe,EYo,CYo,XV,wYo,AYo,yYo,SF,Ape,LYo,xYo,zV,$Yo,kYo,SYo,RF,RYo,ype,BYo,PYo,Lpe,IYo,qYo,BF,fPe,vd,PF,xpe,Ny,NYo,$pe,jYo,mPe,Wo,jy,DYo,Fd,GYo,QV,OYo,VYo,WV,XYo,zYo,QYo,Dy,WYo,kpe,HYo,UYo,JYo,vt,Gy,YYo,Spe,KYo,ZYo,Td,eKo,Rpe,oKo,rKo,HV,tKo,aKo,nKo,IF,sKo,ho,Oy,lKo,Bpe,iKo,dKo,Xa,cKo,Ppe,fKo,mKo,Ipe,gKo,hKo,qpe,pKo,uKo,_Ko,Vy,qF,Npe,bKo,vKo,UV,FKo,TKo,MKo,NF,jpe,EKo,CKo,JV,wKo,AKo,yKo,jF,LKo,Dpe,xKo,$Ko,Gpe,kKo,SKo,DF,gPe,Md,GF,Ope,Xy,RKo,Vpe,BKo,hPe,Ho,zy,PKo,Ed,IKo,YV,qKo,NKo,KV,jKo,DKo,GKo,Qy,OKo,Xpe,VKo,XKo,zKo,Ft,Wy,QKo,zpe,WKo,HKo,Cd,UKo,Qpe,JKo,YKo,ZV,KKo,ZKo,eZo,OF,oZo,po,Hy,rZo,Wpe,tZo,aZo,za,nZo,Hpe,sZo,lZo,Upe,iZo,dZo,Jpe,cZo,fZo,mZo,Ype,VF,Kpe,gZo,hZo,eX,pZo,uZo,_Zo,XF,bZo,Zpe,vZo,FZo,eue,TZo,MZo,zF,pPe,wd,QF,oue,Uy,EZo,rue,CZo,uPe,Uo,Jy,wZo,Ad,AZo,oX,yZo,LZo,rX,xZo,$Zo,kZo,Yy,SZo,tue,RZo,BZo,PZo,Tt,Ky,IZo,aue,qZo,NZo,yd,jZo,nue,DZo,GZo,tX,OZo,VZo,XZo,WF,zZo,uo,Zy,QZo,sue,WZo,HZo,Qa,UZo,lue,JZo,YZo,iue,KZo,ZZo,due,eer,oer,rer,Wa,HF,cue,ter,aer,aX,ner,ser,ler,UF,fue,ier,der,nX,cer,fer,mer,JF,mue,ger,her,sX,per,uer,_er,YF,gue,ber,ver,lX,Fer,Ter,Mer,KF,Eer,hue,Cer,wer,pue,Aer,yer,ZF,_Pe,Ld,eT,uue,eL,Ler,_ue,xer,bPe,Jo,oL,$er,xd,ker,iX,Ser,Rer,dX,Ber,Per,Ier,rL,qer,bue,Ner,jer,Der,Mt,tL,Ger,vue,Oer,Ver,$d,Xer,Fue,zer,Qer,cX,Wer,Her,Uer,oT,Jer,_o,aL,Yer,Tue,Ker,Zer,Ha,eor,Mue,oor,ror,Eue,tor,aor,Cue,nor,sor,lor,wue,rT,Aue,ior,dor,fX,cor,mor,gor,tT,hor,yue,por,uor,Lue,_or,bor,aT,vPe,kd,nT,xue,nL,vor,$ue,For,FPe,Yo,sL,Tor,Sd,Mor,mX,Eor,Cor,gX,wor,Aor,yor,lL,Lor,kue,xor,$or,kor,Et,iL,Sor,Sue,Ror,Bor,Rd,Por,Rue,Ior,qor,hX,Nor,jor,Dor,sT,Gor,Cr,dL,Oor,Bue,Vor,Xor,Ua,zor,Pue,Qor,Wor,Iue,Hor,Uor,que,Jor,Yor,Kor,j,lT,Nue,Zor,err,pX,orr,rrr,trr,iT,jue,arr,nrr,uX,srr,lrr,irr,dT,Due,drr,crr,_X,frr,mrr,grr,cT,Gue,hrr,prr,bX,urr,_rr,brr,fT,Oue,vrr,Frr,vX,Trr,Mrr,Err,mT,Vue,Crr,wrr,FX,Arr,yrr,Lrr,gT,Xue,xrr,$rr,TX,krr,Srr,Rrr,hT,zue,Brr,Prr,MX,Irr,qrr,Nrr,pT,Que,jrr,Drr,EX,Grr,Orr,Vrr,uT,Wue,Xrr,zrr,CX,Qrr,Wrr,Hrr,_T,Hue,Urr,Jrr,wX,Yrr,Krr,Zrr,bT,Uue,etr,otr,AX,rtr,ttr,atr,vT,Jue,ntr,str,yX,ltr,itr,dtr,FT,Yue,ctr,ftr,LX,mtr,gtr,htr,TT,Kue,ptr,utr,xX,_tr,btr,vtr,MT,Zue,Ftr,Ttr,$X,Mtr,Etr,Ctr,ET,e_e,wtr,Atr,kX,ytr,Ltr,xtr,$s,o_e,$tr,ktr,SX,Str,Rtr,RX,Btr,Ptr,Itr,CT,r_e,qtr,Ntr,BX,jtr,Dtr,Gtr,wT,t_e,Otr,Vtr,PX,Xtr,ztr,Qtr,AT,a_e,Wtr,Htr,IX,Utr,Jtr,Ytr,yT,n_e,Ktr,Ztr,qX,ear,oar,rar,LT,s_e,tar,aar,NX,nar,sar,lar,xT,l_e,iar,dar,jX,car,far,mar,$T,i_e,gar,har,DX,par,uar,_ar,kT,d_e,bar,Far,GX,Tar,Mar,Ear,ST,c_e,Car,war,OX,Aar,yar,Lar,RT,f_e,xar,$ar,VX,kar,Sar,Rar,BT,m_e,Bar,Par,XX,Iar,qar,Nar,PT,g_e,jar,Dar,zX,Gar,Oar,Var,IT,h_e,Xar,zar,QX,Qar,War,Har,qT,p_e,Uar,Jar,WX,Yar,Kar,Zar,NT,u_e,enr,onr,HX,rnr,tnr,anr,jT,__e,nnr,snr,UX,lnr,inr,dnr,DT,b_e,cnr,fnr,JX,mnr,gnr,hnr,GT,v_e,pnr,unr,YX,_nr,bnr,vnr,OT,F_e,Fnr,Tnr,KX,Mnr,Enr,Cnr,VT,T_e,wnr,Anr,ZX,ynr,Lnr,xnr,XT,M_e,$nr,knr,ez,Snr,Rnr,Bnr,zT,E_e,Pnr,Inr,oz,qnr,Nnr,jnr,QT,C_e,Dnr,Gnr,rz,Onr,Vnr,Xnr,WT,w_e,znr,Qnr,tz,Wnr,Hnr,Unr,HT,A_e,Jnr,Ynr,az,Knr,Znr,esr,UT,y_e,osr,rsr,nz,tsr,asr,nsr,JT,L_e,ssr,lsr,sz,isr,dsr,csr,YT,TPe,Bd,KT,x_e,cL,fsr,$_e,msr,MPe,Ko,fL,gsr,Pd,hsr,lz,psr,usr,iz,_sr,bsr,vsr,mL,Fsr,k_e,Tsr,Msr,Esr,Ct,gL,Csr,S_e,wsr,Asr,Id,ysr,R_e,Lsr,xsr,dz,$sr,ksr,Ssr,ZT,Rsr,wr,hL,Bsr,B_e,Psr,Isr,Ja,qsr,P_e,Nsr,jsr,I_e,Dsr,Gsr,q_e,Osr,Vsr,Xsr,ne,e8,N_e,zsr,Qsr,cz,Wsr,Hsr,Usr,o8,j_e,Jsr,Ysr,fz,Ksr,Zsr,elr,r8,D_e,olr,rlr,mz,tlr,alr,nlr,t8,G_e,slr,llr,gz,ilr,dlr,clr,a8,O_e,flr,mlr,hz,glr,hlr,plr,n8,V_e,ulr,_lr,pz,blr,vlr,Flr,s8,X_e,Tlr,Mlr,uz,Elr,Clr,wlr,l8,z_e,Alr,ylr,_z,Llr,xlr,$lr,i8,Q_e,klr,Slr,bz,Rlr,Blr,Plr,d8,W_e,Ilr,qlr,vz,Nlr,jlr,Dlr,c8,H_e,Glr,Olr,Fz,Vlr,Xlr,zlr,f8,U_e,Qlr,Wlr,Tz,Hlr,Ulr,Jlr,m8,J_e,Ylr,Klr,Mz,Zlr,eir,oir,g8,Y_e,rir,tir,Ez,air,nir,sir,h8,K_e,lir,iir,Cz,dir,cir,fir,p8,Z_e,mir,gir,wz,hir,pir,uir,u8,e2e,_ir,bir,Az,vir,Fir,Tir,_8,o2e,Mir,Eir,yz,Cir,wir,Air,b8,r2e,yir,Lir,Lz,xir,$ir,kir,v8,t2e,Sir,Rir,xz,Bir,Pir,Iir,F8,a2e,qir,Nir,$z,jir,Dir,Gir,T8,n2e,Oir,Vir,kz,Xir,zir,Qir,M8,s2e,Wir,Hir,Sz,Uir,Jir,Yir,E8,EPe,qd,C8,l2e,pL,Kir,i2e,Zir,CPe,Zo,uL,edr,Nd,odr,Rz,rdr,tdr,Bz,adr,ndr,sdr,_L,ldr,d2e,idr,ddr,cdr,wt,bL,fdr,c2e,mdr,gdr,jd,hdr,f2e,pdr,udr,Pz,_dr,bdr,vdr,w8,Fdr,Ar,vL,Tdr,m2e,Mdr,Edr,Ya,Cdr,g2e,wdr,Adr,h2e,ydr,Ldr,p2e,xdr,$dr,kdr,Te,A8,u2e,Sdr,Rdr,Iz,Bdr,Pdr,Idr,y8,_2e,qdr,Ndr,qz,jdr,Ddr,Gdr,L8,b2e,Odr,Vdr,Nz,Xdr,zdr,Qdr,x8,v2e,Wdr,Hdr,jz,Udr,Jdr,Ydr,$8,F2e,Kdr,Zdr,Dz,ecr,ocr,rcr,k8,T2e,tcr,acr,Gz,ncr,scr,lcr,S8,M2e,icr,dcr,Oz,ccr,fcr,mcr,R8,E2e,gcr,hcr,Vz,pcr,ucr,_cr,B8,C2e,bcr,vcr,Xz,Fcr,Tcr,Mcr,P8,w2e,Ecr,Ccr,zz,wcr,Acr,ycr,I8,A2e,Lcr,xcr,Qz,$cr,kcr,Scr,q8,y2e,Rcr,Bcr,Wz,Pcr,Icr,qcr,N8,wPe,Dd,j8,L2e,FL,Ncr,x2e,jcr,APe,er,TL,Dcr,Gd,Gcr,Hz,Ocr,Vcr,Uz,Xcr,zcr,Qcr,ML,Wcr,$2e,Hcr,Ucr,Jcr,At,EL,Ycr,k2e,Kcr,Zcr,Od,efr,S2e,ofr,rfr,Jz,tfr,afr,nfr,D8,sfr,yr,CL,lfr,R2e,ifr,dfr,Ka,cfr,B2e,ffr,mfr,P2e,gfr,hfr,I2e,pfr,ufr,_fr,Vd,G8,q2e,bfr,vfr,Yz,Ffr,Tfr,Mfr,O8,N2e,Efr,Cfr,Kz,wfr,Afr,yfr,V8,j2e,Lfr,xfr,Zz,$fr,kfr,Sfr,X8,yPe,Xd,z8,D2e,wL,Rfr,G2e,Bfr,LPe,or,AL,Pfr,zd,Ifr,eQ,qfr,Nfr,oQ,jfr,Dfr,Gfr,yL,Ofr,O2e,Vfr,Xfr,zfr,yt,LL,Qfr,V2e,Wfr,Hfr,Qd,Ufr,X2e,Jfr,Yfr,rQ,Kfr,Zfr,emr,Q8,omr,Lr,xL,rmr,z2e,tmr,amr,Za,nmr,Q2e,smr,lmr,W2e,imr,dmr,H2e,cmr,fmr,mmr,ie,W8,U2e,gmr,hmr,tQ,pmr,umr,_mr,H8,J2e,bmr,vmr,aQ,Fmr,Tmr,Mmr,U8,Y2e,Emr,Cmr,nQ,wmr,Amr,ymr,J8,K2e,Lmr,xmr,sQ,$mr,kmr,Smr,Y8,Z2e,Rmr,Bmr,lQ,Pmr,Imr,qmr,K8,e6e,Nmr,jmr,iQ,Dmr,Gmr,Omr,Z8,o6e,Vmr,Xmr,dQ,zmr,Qmr,Wmr,eM,r6e,Hmr,Umr,cQ,Jmr,Ymr,Kmr,oM,t6e,Zmr,egr,fQ,ogr,rgr,tgr,rM,a6e,agr,ngr,mQ,sgr,lgr,igr,tM,n6e,dgr,cgr,gQ,fgr,mgr,ggr,aM,s6e,hgr,pgr,hQ,ugr,_gr,bgr,nM,l6e,vgr,Fgr,pQ,Tgr,Mgr,Egr,sM,i6e,Cgr,wgr,uQ,Agr,ygr,Lgr,lM,d6e,xgr,$gr,_Q,kgr,Sgr,Rgr,iM,c6e,Bgr,Pgr,bQ,Igr,qgr,Ngr,dM,f6e,jgr,Dgr,vQ,Ggr,Ogr,Vgr,cM,m6e,Xgr,zgr,FQ,Qgr,Wgr,Hgr,fM,g6e,Ugr,Jgr,TQ,Ygr,Kgr,Zgr,mM,h6e,ehr,ohr,MQ,rhr,thr,ahr,gM,xPe,Wd,hM,p6e,$L,nhr,u6e,shr,$Pe,rr,kL,lhr,Hd,ihr,EQ,dhr,chr,CQ,fhr,mhr,ghr,SL,hhr,_6e,phr,uhr,_hr,Lt,RL,bhr,b6e,vhr,Fhr,Ud,Thr,v6e,Mhr,Ehr,wQ,Chr,whr,Ahr,pM,yhr,xr,BL,Lhr,F6e,xhr,$hr,en,khr,T6e,Shr,Rhr,M6e,Bhr,Phr,E6e,Ihr,qhr,Nhr,ye,uM,C6e,jhr,Dhr,AQ,Ghr,Ohr,Vhr,_M,w6e,Xhr,zhr,yQ,Qhr,Whr,Hhr,bM,A6e,Uhr,Jhr,LQ,Yhr,Khr,Zhr,vM,y6e,epr,opr,xQ,rpr,tpr,apr,FM,L6e,npr,spr,$Q,lpr,ipr,dpr,TM,x6e,cpr,fpr,kQ,mpr,gpr,hpr,MM,$6e,ppr,upr,SQ,_pr,bpr,vpr,EM,k6e,Fpr,Tpr,RQ,Mpr,Epr,Cpr,CM,S6e,wpr,Apr,BQ,ypr,Lpr,xpr,wM,R6e,$pr,kpr,PQ,Spr,Rpr,Bpr,AM,kPe,Jd,yM,B6e,PL,Ppr,P6e,Ipr,SPe,tr,IL,qpr,Yd,Npr,IQ,jpr,Dpr,qQ,Gpr,Opr,Vpr,qL,Xpr,I6e,zpr,Qpr,Wpr,xt,NL,Hpr,q6e,Upr,Jpr,Kd,Ypr,N6e,Kpr,Zpr,NQ,eur,our,rur,LM,tur,$r,jL,aur,j6e,nur,sur,on,lur,D6e,iur,dur,G6e,cur,fur,O6e,mur,gur,hur,Z,xM,V6e,pur,uur,jQ,_ur,bur,vur,$M,X6e,Fur,Tur,DQ,Mur,Eur,Cur,kM,z6e,wur,Aur,GQ,yur,Lur,xur,SM,Q6e,$ur,kur,OQ,Sur,Rur,Bur,RM,W6e,Pur,Iur,VQ,qur,Nur,jur,BM,H6e,Dur,Gur,XQ,Our,Vur,Xur,PM,U6e,zur,Qur,zQ,Wur,Hur,Uur,IM,J6e,Jur,Yur,QQ,Kur,Zur,e_r,qM,Y6e,o_r,r_r,WQ,t_r,a_r,n_r,NM,K6e,s_r,l_r,HQ,i_r,d_r,c_r,jM,Z6e,f_r,m_r,UQ,g_r,h_r,p_r,DM,e1e,u_r,__r,JQ,b_r,v_r,F_r,GM,o1e,T_r,M_r,YQ,E_r,C_r,w_r,OM,r1e,A_r,y_r,KQ,L_r,x_r,$_r,VM,t1e,k_r,S_r,ZQ,R_r,B_r,P_r,XM,a1e,I_r,q_r,eW,N_r,j_r,D_r,zM,n1e,G_r,O_r,oW,V_r,X_r,z_r,QM,s1e,Q_r,W_r,rW,H_r,U_r,J_r,WM,l1e,Y_r,K_r,tW,Z_r,e2r,o2r,HM,i1e,r2r,t2r,aW,a2r,n2r,s2r,UM,d1e,l2r,i2r,nW,d2r,c2r,f2r,JM,c1e,m2r,g2r,sW,h2r,p2r,u2r,YM,f1e,_2r,b2r,lW,v2r,F2r,T2r,KM,m1e,M2r,E2r,iW,C2r,w2r,A2r,ZM,g1e,y2r,L2r,dW,x2r,$2r,k2r,e4,h1e,S2r,R2r,cW,B2r,P2r,I2r,o4,RPe,Zd,r4,p1e,DL,q2r,u1e,N2r,BPe,ar,GL,j2r,ec,D2r,fW,G2r,O2r,mW,V2r,X2r,z2r,OL,Q2r,_1e,W2r,H2r,U2r,$t,VL,J2r,b1e,Y2r,K2r,oc,Z2r,v1e,e6r,o6r,gW,r6r,t6r,a6r,t4,n6r,kr,XL,s6r,F1e,l6r,i6r,rn,d6r,T1e,c6r,f6r,M1e,m6r,g6r,E1e,h6r,p6r,u6r,pe,a4,C1e,_6r,b6r,hW,v6r,F6r,T6r,n4,w1e,M6r,E6r,pW,C6r,w6r,A6r,s4,A1e,y6r,L6r,uW,x6r,$6r,k6r,l4,y1e,S6r,R6r,_W,B6r,P6r,I6r,i4,L1e,q6r,N6r,bW,j6r,D6r,G6r,d4,x1e,O6r,V6r,vW,X6r,z6r,Q6r,c4,$1e,W6r,H6r,FW,U6r,J6r,Y6r,f4,k1e,K6r,Z6r,TW,e1r,o1r,r1r,m4,S1e,t1r,a1r,MW,n1r,s1r,l1r,g4,R1e,i1r,d1r,EW,c1r,f1r,m1r,h4,B1e,g1r,h1r,CW,p1r,u1r,_1r,p4,P1e,b1r,v1r,wW,F1r,T1r,M1r,u4,I1e,E1r,C1r,AW,w1r,A1r,y1r,_4,q1e,L1r,x1r,yW,$1r,k1r,S1r,b4,N1e,R1r,B1r,LW,P1r,I1r,q1r,v4,j1e,N1r,j1r,xW,D1r,G1r,O1r,F4,D1e,V1r,X1r,$W,z1r,Q1r,W1r,T4,PPe,rc,M4,G1e,zL,H1r,O1e,U1r,IPe,nr,QL,J1r,tc,Y1r,kW,K1r,Z1r,SW,ebr,obr,rbr,WL,tbr,V1e,abr,nbr,sbr,kt,HL,lbr,X1e,ibr,dbr,ac,cbr,z1e,fbr,mbr,RW,gbr,hbr,pbr,E4,ubr,Sr,UL,_br,Q1e,bbr,vbr,tn,Fbr,W1e,Tbr,Mbr,H1e,Ebr,Cbr,U1e,wbr,Abr,ybr,J1e,C4,Y1e,Lbr,xbr,BW,$br,kbr,Sbr,w4,qPe,nc,A4,K1e,JL,Rbr,Z1e,Bbr,NPe,sr,YL,Pbr,sc,Ibr,PW,qbr,Nbr,IW,jbr,Dbr,Gbr,KL,Obr,ebe,Vbr,Xbr,zbr,St,ZL,Qbr,obe,Wbr,Hbr,lc,Ubr,rbe,Jbr,Ybr,qW,Kbr,Zbr,evr,y4,ovr,Rr,e7,rvr,tbe,tvr,avr,an,nvr,abe,svr,lvr,nbe,ivr,dvr,sbe,cvr,fvr,mvr,de,L4,lbe,gvr,hvr,NW,pvr,uvr,_vr,x4,ibe,bvr,vvr,jW,Fvr,Tvr,Mvr,$4,dbe,Evr,Cvr,DW,wvr,Avr,yvr,k4,cbe,Lvr,xvr,GW,$vr,kvr,Svr,S4,fbe,Rvr,Bvr,OW,Pvr,Ivr,qvr,R4,mbe,Nvr,jvr,VW,Dvr,Gvr,Ovr,B4,gbe,Vvr,Xvr,XW,zvr,Qvr,Wvr,P4,hbe,Hvr,Uvr,zW,Jvr,Yvr,Kvr,I4,pbe,Zvr,eFr,QW,oFr,rFr,tFr,q4,ube,aFr,nFr,WW,sFr,lFr,iFr,N4,_be,dFr,cFr,HW,fFr,mFr,gFr,j4,bbe,hFr,pFr,UW,uFr,_Fr,bFr,D4,vbe,vFr,FFr,JW,TFr,MFr,EFr,G4,Fbe,CFr,wFr,YW,AFr,yFr,LFr,O4,Tbe,xFr,$Fr,KW,kFr,SFr,RFr,V4,Mbe,BFr,PFr,ZW,IFr,qFr,NFr,X4,Ebe,jFr,DFr,eH,GFr,OFr,VFr,z4,Cbe,XFr,zFr,oH,QFr,WFr,HFr,Q4,wbe,UFr,JFr,rH,YFr,KFr,ZFr,W4,Abe,eTr,oTr,tH,rTr,tTr,aTr,H4,jPe,ic,U4,ybe,o7,nTr,Lbe,sTr,DPe,lr,r7,lTr,dc,iTr,aH,dTr,cTr,nH,fTr,mTr,gTr,t7,hTr,xbe,pTr,uTr,_Tr,Rt,a7,bTr,$be,vTr,FTr,cc,TTr,kbe,MTr,ETr,sH,CTr,wTr,ATr,J4,yTr,Br,n7,LTr,Sbe,xTr,$Tr,nn,kTr,Rbe,STr,RTr,Bbe,BTr,PTr,Pbe,ITr,qTr,NTr,ce,Y4,Ibe,jTr,DTr,lH,GTr,OTr,VTr,K4,qbe,XTr,zTr,iH,QTr,WTr,HTr,Z4,Nbe,UTr,JTr,dH,YTr,KTr,ZTr,eE,jbe,e8r,o8r,cH,r8r,t8r,a8r,oE,Dbe,n8r,s8r,fH,l8r,i8r,d8r,rE,Gbe,c8r,f8r,mH,m8r,g8r,h8r,tE,Obe,p8r,u8r,gH,_8r,b8r,v8r,aE,Vbe,F8r,T8r,hH,M8r,E8r,C8r,nE,Xbe,w8r,A8r,pH,y8r,L8r,x8r,sE,zbe,$8r,k8r,uH,S8r,R8r,B8r,lE,Qbe,P8r,I8r,_H,q8r,N8r,j8r,iE,Wbe,D8r,G8r,bH,O8r,V8r,X8r,dE,Hbe,z8r,Q8r,vH,W8r,H8r,U8r,cE,Ube,J8r,Y8r,FH,K8r,Z8r,eMr,fE,Jbe,oMr,rMr,TH,tMr,aMr,nMr,mE,Ybe,sMr,lMr,MH,iMr,dMr,cMr,gE,Kbe,fMr,mMr,EH,gMr,hMr,pMr,hE,Zbe,uMr,_Mr,CH,bMr,vMr,FMr,pE,eve,TMr,MMr,wH,EMr,CMr,wMr,uE,ove,AMr,yMr,AH,LMr,xMr,$Mr,_E,GPe,fc,bE,rve,s7,kMr,tve,SMr,OPe,ir,l7,RMr,mc,BMr,yH,PMr,IMr,LH,qMr,NMr,jMr,i7,DMr,ave,GMr,OMr,VMr,Bt,d7,XMr,nve,zMr,QMr,gc,WMr,sve,HMr,UMr,xH,JMr,YMr,KMr,vE,ZMr,Pr,c7,e4r,lve,o4r,r4r,sn,t4r,ive,a4r,n4r,dve,s4r,l4r,cve,i4r,d4r,c4r,fve,FE,mve,f4r,m4r,$H,g4r,h4r,p4r,TE,VPe,hc,ME,gve,f7,u4r,hve,_4r,XPe,dr,m7,b4r,pc,v4r,kH,F4r,T4r,SH,M4r,E4r,C4r,g7,w4r,pve,A4r,y4r,L4r,Pt,h7,x4r,uve,$4r,k4r,uc,S4r,_ve,R4r,B4r,RH,P4r,I4r,q4r,EE,N4r,Ir,p7,j4r,bve,D4r,G4r,ln,O4r,vve,V4r,X4r,Fve,z4r,Q4r,Tve,W4r,H4r,U4r,Mve,CE,Eve,J4r,Y4r,BH,K4r,Z4r,eEr,wE,zPe,_c,AE,Cve,u7,oEr,wve,rEr,QPe,cr,_7,tEr,bc,aEr,PH,nEr,sEr,IH,lEr,iEr,dEr,b7,cEr,Ave,fEr,mEr,gEr,It,v7,hEr,yve,pEr,uEr,vc,_Er,Lve,bEr,vEr,qH,FEr,TEr,MEr,yE,EEr,qr,F7,CEr,xve,wEr,AEr,dn,yEr,$ve,LEr,xEr,kve,$Er,kEr,Sve,SEr,REr,BEr,oe,LE,Rve,PEr,IEr,NH,qEr,NEr,jEr,xE,Bve,DEr,GEr,jH,OEr,VEr,XEr,$E,Pve,zEr,QEr,DH,WEr,HEr,UEr,kE,Ive,JEr,YEr,GH,KEr,ZEr,e5r,SE,qve,o5r,r5r,OH,t5r,a5r,n5r,RE,Nve,s5r,l5r,VH,i5r,d5r,c5r,BE,jve,f5r,m5r,XH,g5r,h5r,p5r,PE,Dve,u5r,_5r,zH,b5r,v5r,F5r,IE,Gve,T5r,M5r,QH,E5r,C5r,w5r,qE,Ove,A5r,y5r,WH,L5r,x5r,$5r,NE,Vve,k5r,S5r,HH,R5r,B5r,P5r,jE,Xve,I5r,q5r,UH,N5r,j5r,D5r,DE,zve,G5r,O5r,JH,V5r,X5r,z5r,GE,Qve,Q5r,W5r,YH,H5r,U5r,J5r,OE,Wve,Y5r,K5r,KH,Z5r,eCr,oCr,VE,Hve,rCr,tCr,ZH,aCr,nCr,sCr,XE,Uve,lCr,iCr,eU,dCr,cCr,fCr,zE,Jve,mCr,gCr,oU,hCr,pCr,uCr,QE,Yve,_Cr,bCr,rU,vCr,FCr,TCr,WE,Kve,MCr,ECr,tU,CCr,wCr,ACr,HE,Zve,yCr,LCr,aU,xCr,$Cr,kCr,UE,eFe,SCr,RCr,nU,BCr,PCr,ICr,JE,oFe,qCr,NCr,sU,jCr,DCr,GCr,YE,rFe,OCr,VCr,lU,XCr,zCr,QCr,KE,tFe,WCr,HCr,iU,UCr,JCr,YCr,ZE,WPe,Fc,e5,aFe,T7,KCr,nFe,ZCr,HPe,fr,M7,e3r,Tc,o3r,dU,r3r,t3r,cU,a3r,n3r,s3r,E7,l3r,sFe,i3r,d3r,c3r,qt,C7,f3r,lFe,m3r,g3r,Mc,h3r,iFe,p3r,u3r,fU,_3r,b3r,v3r,o5,F3r,Nr,w7,T3r,dFe,M3r,E3r,cn,C3r,cFe,w3r,A3r,fFe,y3r,L3r,mFe,x3r,$3r,k3r,ke,r5,gFe,S3r,R3r,mU,B3r,P3r,I3r,t5,hFe,q3r,N3r,gU,j3r,D3r,G3r,a5,pFe,O3r,V3r,hU,X3r,z3r,Q3r,n5,uFe,W3r,H3r,pU,U3r,J3r,Y3r,s5,_Fe,K3r,Z3r,uU,ewr,owr,rwr,l5,bFe,twr,awr,_U,nwr,swr,lwr,i5,vFe,iwr,dwr,bU,cwr,fwr,mwr,d5,FFe,gwr,hwr,vU,pwr,uwr,_wr,c5,TFe,bwr,vwr,FU,Fwr,Twr,Mwr,f5,UPe,Ec,m5,MFe,A7,Ewr,EFe,Cwr,JPe,mr,y7,wwr,Cc,Awr,TU,ywr,Lwr,MU,xwr,$wr,kwr,L7,Swr,CFe,Rwr,Bwr,Pwr,Nt,x7,Iwr,wFe,qwr,Nwr,wc,jwr,AFe,Dwr,Gwr,EU,Owr,Vwr,Xwr,g5,zwr,jr,$7,Qwr,yFe,Wwr,Hwr,fn,Uwr,LFe,Jwr,Ywr,xFe,Kwr,Zwr,$Fe,eAr,oAr,rAr,Me,h5,kFe,tAr,aAr,CU,nAr,sAr,lAr,p5,SFe,iAr,dAr,wU,cAr,fAr,mAr,u5,RFe,gAr,hAr,AU,pAr,uAr,_Ar,_5,BFe,bAr,vAr,yU,FAr,TAr,MAr,b5,PFe,EAr,CAr,LU,wAr,AAr,yAr,v5,IFe,LAr,xAr,xU,$Ar,kAr,SAr,F5,qFe,RAr,BAr,$U,PAr,IAr,qAr,T5,NFe,NAr,jAr,kU,DAr,GAr,OAr,M5,jFe,VAr,XAr,SU,zAr,QAr,WAr,E5,DFe,HAr,UAr,RU,JAr,YAr,KAr,C5,GFe,ZAr,e0r,BU,o0r,r0r,t0r,w5,OFe,a0r,n0r,PU,s0r,l0r,i0r,A5,YPe,Ac,y5,VFe,k7,d0r,XFe,c0r,KPe,gr,S7,f0r,yc,m0r,IU,g0r,h0r,qU,p0r,u0r,_0r,R7,b0r,zFe,v0r,F0r,T0r,jt,B7,M0r,QFe,E0r,C0r,Lc,w0r,WFe,A0r,y0r,NU,L0r,x0r,$0r,L5,k0r,Dr,P7,S0r,HFe,R0r,B0r,mn,P0r,UFe,I0r,q0r,JFe,N0r,j0r,YFe,D0r,G0r,O0r,Le,x5,KFe,V0r,X0r,jU,z0r,Q0r,W0r,$5,ZFe,H0r,U0r,DU,J0r,Y0r,K0r,k5,eTe,Z0r,eyr,GU,oyr,ryr,tyr,S5,oTe,ayr,nyr,OU,syr,lyr,iyr,R5,rTe,dyr,cyr,VU,fyr,myr,gyr,B5,tTe,hyr,pyr,XU,uyr,_yr,byr,P5,aTe,vyr,Fyr,zU,Tyr,Myr,Eyr,I5,nTe,Cyr,wyr,QU,Ayr,yyr,Lyr,q5,sTe,xyr,$yr,WU,kyr,Syr,Ryr,N5,lTe,Byr,Pyr,HU,Iyr,qyr,Nyr,j5,ZPe,xc,D5,iTe,I7,jyr,dTe,Dyr,eIe,hr,q7,Gyr,$c,Oyr,UU,Vyr,Xyr,JU,zyr,Qyr,Wyr,N7,Hyr,cTe,Uyr,Jyr,Yyr,Dt,j7,Kyr,fTe,Zyr,eLr,kc,oLr,mTe,rLr,tLr,YU,aLr,nLr,sLr,G5,lLr,Gr,D7,iLr,gTe,dLr,cLr,gn,fLr,hTe,mLr,gLr,pTe,hLr,pLr,uTe,uLr,_Lr,bLr,Se,O5,_Te,vLr,FLr,KU,TLr,MLr,ELr,V5,bTe,CLr,wLr,ZU,ALr,yLr,LLr,X5,vTe,xLr,$Lr,eJ,kLr,SLr,RLr,z5,FTe,BLr,PLr,oJ,ILr,qLr,NLr,Q5,TTe,jLr,DLr,rJ,GLr,OLr,VLr,W5,MTe,XLr,zLr,tJ,QLr,WLr,HLr,H5,ETe,ULr,JLr,aJ,YLr,KLr,ZLr,U5,CTe,e7r,o7r,nJ,r7r,t7r,a7r,J5,wTe,n7r,s7r,sJ,l7r,i7r,d7r,Y5,oIe,Sc,K5,ATe,G7,c7r,yTe,f7r,rIe,pr,O7,m7r,Rc,g7r,lJ,h7r,p7r,iJ,u7r,_7r,b7r,V7,v7r,LTe,F7r,T7r,M7r,Gt,X7,E7r,xTe,C7r,w7r,Bc,A7r,$Te,y7r,L7r,dJ,x7r,$7r,k7r,Z5,S7r,Or,z7,R7r,kTe,B7r,P7r,hn,I7r,STe,q7r,N7r,RTe,j7r,D7r,BTe,G7r,O7r,V7r,xe,eC,PTe,X7r,z7r,cJ,Q7r,W7r,H7r,oC,ITe,U7r,J7r,fJ,Y7r,K7r,Z7r,rC,qTe,exr,oxr,mJ,rxr,txr,axr,tC,NTe,nxr,sxr,gJ,lxr,ixr,dxr,aC,jTe,cxr,fxr,hJ,mxr,gxr,hxr,nC,DTe,pxr,uxr,pJ,_xr,bxr,vxr,sC,GTe,Fxr,Txr,uJ,Mxr,Exr,Cxr,lC,OTe,wxr,Axr,_J,yxr,Lxr,xxr,iC,VTe,$xr,kxr,bJ,Sxr,Rxr,Bxr,dC,XTe,Pxr,Ixr,vJ,qxr,Nxr,jxr,cC,tIe,Pc,fC,zTe,Q7,Dxr,QTe,Gxr,aIe,ur,W7,Oxr,Ic,Vxr,FJ,Xxr,zxr,TJ,Qxr,Wxr,Hxr,H7,Uxr,WTe,Jxr,Yxr,Kxr,Ot,U7,Zxr,HTe,e9r,o9r,qc,r9r,UTe,t9r,a9r,MJ,n9r,s9r,l9r,mC,i9r,Vr,J7,d9r,JTe,c9r,f9r,pn,m9r,YTe,g9r,h9r,KTe,p9r,u9r,ZTe,_9r,b9r,v9r,$e,gC,e8e,F9r,T9r,EJ,M9r,E9r,C9r,hC,o8e,w9r,A9r,CJ,y9r,L9r,x9r,pC,r8e,$9r,k9r,wJ,S9r,R9r,B9r,uC,t8e,P9r,I9r,AJ,q9r,N9r,j9r,_C,a8e,D9r,G9r,yJ,O9r,V9r,X9r,bC,n8e,z9r,Q9r,LJ,W9r,H9r,U9r,vC,s8e,J9r,Y9r,xJ,K9r,Z9r,e$r,FC,l8e,o$r,r$r,$J,t$r,a$r,n$r,TC,i8e,s$r,l$r,kJ,i$r,d$r,c$r,MC,d8e,f$r,m$r,SJ,g$r,h$r,p$r,EC,nIe,Nc,CC,c8e,Y7,u$r,f8e,_$r,sIe,_r,K7,b$r,jc,v$r,RJ,F$r,T$r,BJ,M$r,E$r,C$r,Z7,w$r,m8e,A$r,y$r,L$r,Vt,ex,x$r,g8e,$$r,k$r,Dc,S$r,h8e,R$r,B$r,PJ,P$r,I$r,q$r,wC,N$r,Xr,ox,j$r,p8e,D$r,G$r,un,O$r,u8e,V$r,X$r,_8e,z$r,Q$r,b8e,W$r,H$r,U$r,De,AC,v8e,J$r,Y$r,IJ,K$r,Z$r,ekr,yC,F8e,okr,rkr,qJ,tkr,akr,nkr,LC,T8e,skr,lkr,NJ,ikr,dkr,ckr,xC,M8e,fkr,mkr,jJ,gkr,hkr,pkr,$C,E8e,ukr,_kr,DJ,bkr,vkr,Fkr,kC,C8e,Tkr,Mkr,GJ,Ekr,Ckr,wkr,SC,w8e,Akr,ykr,OJ,Lkr,xkr,$kr,RC,A8e,kkr,Skr,VJ,Rkr,Bkr,Pkr,BC,lIe,Gc,PC,y8e,rx,Ikr,L8e,qkr,iIe,br,tx,Nkr,Oc,jkr,XJ,Dkr,Gkr,zJ,Okr,Vkr,Xkr,ax,zkr,x8e,Qkr,Wkr,Hkr,Xt,nx,Ukr,$8e,Jkr,Ykr,Vc,Kkr,k8e,Zkr,eSr,QJ,oSr,rSr,tSr,IC,aSr,zr,sx,nSr,S8e,sSr,lSr,_n,iSr,R8e,dSr,cSr,B8e,fSr,mSr,P8e,gSr,hSr,pSr,Ge,qC,I8e,uSr,_Sr,WJ,bSr,vSr,FSr,NC,q8e,TSr,MSr,HJ,ESr,CSr,wSr,jC,N8e,ASr,ySr,UJ,LSr,xSr,$Sr,DC,j8e,kSr,SSr,JJ,RSr,BSr,PSr,GC,D8e,ISr,qSr,YJ,NSr,jSr,DSr,OC,G8e,GSr,OSr,KJ,VSr,XSr,zSr,VC,O8e,QSr,WSr,ZJ,HSr,USr,JSr,XC,V8e,YSr,KSr,eY,ZSr,eRr,oRr,zC,dIe,Xc,QC,X8e,lx,rRr,z8e,tRr,cIe,vr,ix,aRr,zc,nRr,oY,sRr,lRr,rY,iRr,dRr,cRr,dx,fRr,Q8e,mRr,gRr,hRr,zt,cx,pRr,W8e,uRr,_Rr,Qc,bRr,H8e,vRr,FRr,tY,TRr,MRr,ERr,WC,CRr,Qr,fx,wRr,U8e,ARr,yRr,bn,LRr,J8e,xRr,$Rr,Y8e,kRr,SRr,K8e,RRr,BRr,PRr,Z8e,HC,eMe,IRr,qRr,aY,NRr,jRr,DRr,UC,fIe,Wc,JC,oMe,mx,GRr,rMe,ORr,mIe,Fr,gx,VRr,Hc,XRr,nY,zRr,QRr,sY,WRr,HRr,URr,hx,JRr,tMe,YRr,KRr,ZRr,Qt,px,eBr,aMe,oBr,rBr,Uc,tBr,nMe,aBr,nBr,lY,sBr,lBr,iBr,YC,dBr,Wr,ux,cBr,sMe,fBr,mBr,vn,gBr,lMe,hBr,pBr,iMe,uBr,_Br,dMe,bBr,vBr,FBr,_x,KC,cMe,TBr,MBr,iY,EBr,CBr,wBr,ZC,fMe,ABr,yBr,dY,LBr,xBr,$Br,e3,gIe,Jc,o3,mMe,bx,kBr,gMe,SBr,hIe,Tr,vx,RBr,Yc,BBr,cY,PBr,IBr,fY,qBr,NBr,jBr,Fx,DBr,hMe,GBr,OBr,VBr,Wt,Tx,XBr,pMe,zBr,QBr,Kc,WBr,uMe,HBr,UBr,mY,JBr,YBr,KBr,r3,ZBr,Hr,Mx,ePr,_Me,oPr,rPr,Fn,tPr,bMe,aPr,nPr,vMe,sPr,lPr,FMe,iPr,dPr,cPr,TMe,t3,MMe,fPr,mPr,gY,gPr,hPr,pPr,a3,pIe;return d=new ee({}),va=new B({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),CA=new ee({}),wA=new B({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),lf=new uPr({props:{warning:!0,$$slots:{default:[cCt]},$$scope:{ctx:L}}}),AA=new ee({}),yA=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/configuration_auto.py#L563"}}),$A=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/configuration_auto.py#L586"}}),ng=new P({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[fCt]},$$scope:{ctx:L}}}),kA=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/configuration_auto.py#L708"}}),SA=new ee({}),RA=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/tokenization_auto.py#L377"}}),IA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_16682/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/tokenization_auto.py#L391"}}),qg=new P({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[mCt]},$$scope:{ctx:L}}}),qA=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/tokenization_auto.py#L587"}}),NA=new ee({}),jA=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/feature_extraction_auto.py#L177"}}),OA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_16682/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/feature_extraction_auto.py#L191"}}),ch=new uPr({props:{$$slots:{default:[gCt]},$$scope:{ctx:L}}}),fh=new P({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[hCt]},$$scope:{ctx:L}}}),VA=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/feature_extraction_auto.py#L318"}}),XA=new ee({}),zA=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/processing_auto.py#L76"}}),HA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/processing_auto.py#L90"}}),Lh=new uPr({props:{$$slots:{default:[pCt]},$$scope:{ctx:L}}}),xh=new P({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[uCt]},$$scope:{ctx:L}}}),UA=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/processing_auto.py#L243"}}),JA=new ee({}),YA=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/modeling_auto.py#L716"}}),ZA=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16682/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_16682/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/auto_factory.py#L389"}}),Sh=new P({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[_Ct]},$$scope:{ctx:L}}}),e0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/auto_factory.py#L417"}}),Fu=new P({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[bCt]},$$scope:{ctx:L}}}),o0=new ee({}),r0=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/modeling_auto.py#L723"}}),a0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16682/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/auto_factory.py#L389"}}),Mu=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[vCt]},$$scope:{ctx:L}}}),n0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/auto_factory.py#L417"}}),d_=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[FCt]},$$scope:{ctx:L}}}),s0=new ee({}),l0=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/modeling_auto.py#L738"}}),d0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16682/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/auto_factory.py#L389"}}),f_=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[TCt]},$$scope:{ctx:L}}}),c0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/auto_factory.py#L417"}}),H_=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[MCt]},$$scope:{ctx:L}}}),f0=new ee({}),m0=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/modeling_auto.py#L745"}}),h0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16682/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/auto_factory.py#L389"}}),J_=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[ECt]},$$scope:{ctx:L}}}),p0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/auto_factory.py#L417"}}),R2=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[CCt]},$$scope:{ctx:L}}}),u0=new ee({}),_0=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/modeling_auto.py#L752"}}),v0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16682/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/auto_factory.py#L389"}}),P2=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[wCt]},$$scope:{ctx:L}}}),F0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/auto_factory.py#L417"}}),e6=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[ACt]},$$scope:{ctx:L}}}),T0=new ee({}),M0=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/modeling_auto.py#L761"}}),C0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16682/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/auto_factory.py#L389"}}),r6=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[yCt]},$$scope:{ctx:L}}}),w0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/auto_factory.py#L417"}}),Y6=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[LCt]},$$scope:{ctx:L}}}),A0=new ee({}),y0=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/modeling_auto.py#L795"}}),x0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16682/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/auto_factory.py#L389"}}),Z6=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[xCt]},$$scope:{ctx:L}}}),$0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/auto_factory.py#L417"}}),x1=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[$Ct]},$$scope:{ctx:L}}}),k0=new ee({}),S0=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/modeling_auto.py#L802"}}),B0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16682/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/auto_factory.py#L389"}}),k1=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[kCt]},$$scope:{ctx:L}}}),P0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/auto_factory.py#L417"}}),N1=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[SCt]},$$scope:{ctx:L}}}),I0=new ee({}),q0=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/modeling_auto.py#L788"}}),j0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16682/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/auto_factory.py#L389"}}),D1=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[RCt]},$$scope:{ctx:L}}}),D0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/auto_factory.py#L417"}}),Tb=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[BCt]},$$scope:{ctx:L}}}),G0=new ee({}),O0=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/modeling_auto.py#L770"}}),X0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16682/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/auto_factory.py#L389"}}),Eb=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[PCt]},$$scope:{ctx:L}}}),z0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/auto_factory.py#L417"}}),cv=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[ICt]},$$scope:{ctx:L}}}),Q0=new ee({}),W0=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/modeling_auto.py#L777"}}),U0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16682/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/auto_factory.py#L389"}}),mv=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[qCt]},$$scope:{ctx:L}}}),J0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/auto_factory.py#L417"}}),pv=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[NCt]},$$scope:{ctx:L}}}),Y0=new ee({}),K0=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/modeling_auto.py#L811"}}),ey=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16682/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_16682/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_16682/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_16682/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/auto_factory.py#L389"}}),_v=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[jCt]},$$scope:{ctx:L}}}),oy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/auto_factory.py#L417"}}),$v=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[DCt]},$$scope:{ctx:L}}}),ry=new ee({}),ty=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/modeling_auto.py#L850"}}),ny=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16682/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/auto_factory.py#L389"}}),Sv=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[GCt]},$$scope:{ctx:L}}}),sy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/auto_factory.py#L417"}}),Pv=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[OCt]},$$scope:{ctx:L}}}),ly=new ee({}),iy=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/modeling_auto.py#L857"}}),cy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16682/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/auto_factory.py#L389"}}),qv=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[VCt]},$$scope:{ctx:L}}}),fy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/auto_factory.py#L417"}}),Wv=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[XCt]},$$scope:{ctx:L}}}),my=new ee({}),gy=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/modeling_auto.py#L880"}}),py=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16682/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/auto_factory.py#L389"}}),Uv=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[zCt]},$$scope:{ctx:L}}}),uy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/auto_factory.py#L417"}}),oF=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[QCt]},$$scope:{ctx:L}}}),_y=new ee({}),by=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/modeling_auto.py#L864"}}),Fy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16682/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/auto_factory.py#L389"}}),tF=new P({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[WCt]},$$scope:{ctx:L}}}),Ty=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/auto_factory.py#L417"}}),gF=new P({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[HCt]},$$scope:{ctx:L}}}),My=new ee({}),Ey=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/modeling_auto.py#L871"}}),wy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16682/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/auto_factory.py#L389"}}),pF=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[UCt]},$$scope:{ctx:L}}}),Ay=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/auto_factory.py#L417"}}),vF=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[JCt]},$$scope:{ctx:L}}}),Ly=new ee({}),xy=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/modeling_auto.py#L889"}}),ky=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16682/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/auto_factory.py#L389"}}),TF=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[YCt]},$$scope:{ctx:L}}}),Sy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/auto_factory.py#L417"}}),yF=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[KCt]},$$scope:{ctx:L}}}),Ry=new ee({}),By=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/modeling_auto.py#L896"}}),Iy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16682/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/auto_factory.py#L389"}}),xF=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[ZCt]},$$scope:{ctx:L}}}),qy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/auto_factory.py#L417"}}),BF=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[e3t]},$$scope:{ctx:L}}}),Ny=new ee({}),jy=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/modeling_auto.py#L843"}}),Gy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16682/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/auto_factory.py#L389"}}),IF=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[o3t]},$$scope:{ctx:L}}}),Oy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/auto_factory.py#L417"}}),DF=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[r3t]},$$scope:{ctx:L}}}),Xy=new ee({}),zy=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/modeling_auto.py#L818"}}),Wy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16682/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/auto_factory.py#L389"}}),OF=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[t3t]},$$scope:{ctx:L}}}),Hy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/auto_factory.py#L417"}}),zF=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[a3t]},$$scope:{ctx:L}}}),Uy=new ee({}),Jy=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/modeling_auto.py#L825"}}),Ky=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16682/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/auto_factory.py#L389"}}),WF=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[n3t]},$$scope:{ctx:L}}}),Zy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/auto_factory.py#L417"}}),ZF=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[s3t]},$$scope:{ctx:L}}}),eL=new ee({}),oL=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/modeling_auto.py#L834"}}),tL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16682/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/auto_factory.py#L389"}}),oT=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[l3t]},$$scope:{ctx:L}}}),aL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/auto_factory.py#L417"}}),aT=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[i3t]},$$scope:{ctx:L}}}),nL=new ee({}),sL=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/modeling_tf_auto.py#L383"}}),iL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16682/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_16682/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/auto_factory.py#L389"}}),sT=new P({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[d3t]},$$scope:{ctx:L}}}),dL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/auto_factory.py#L417"}}),YT=new P({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[c3t]},$$scope:{ctx:L}}}),cL=new ee({}),fL=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/modeling_tf_auto.py#L390"}}),gL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16682/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/auto_factory.py#L389"}}),ZT=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[f3t]},$$scope:{ctx:L}}}),hL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/auto_factory.py#L417"}}),E8=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[m3t]},$$scope:{ctx:L}}}),pL=new ee({}),uL=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/modeling_tf_auto.py#L405"}}),bL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16682/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/auto_factory.py#L389"}}),w8=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[g3t]},$$scope:{ctx:L}}}),vL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/auto_factory.py#L417"}}),N8=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[h3t]},$$scope:{ctx:L}}}),FL=new ee({}),TL=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/modeling_tf_auto.py#L412"}}),EL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16682/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/auto_factory.py#L389"}}),D8=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[p3t]},$$scope:{ctx:L}}}),CL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/auto_factory.py#L417"}}),X8=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[u3t]},$$scope:{ctx:L}}}),wL=new ee({}),AL=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/modeling_tf_auto.py#L428"}}),LL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16682/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/auto_factory.py#L389"}}),Q8=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[_3t]},$$scope:{ctx:L}}}),xL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/auto_factory.py#L417"}}),gM=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[b3t]},$$scope:{ctx:L}}}),$L=new ee({}),kL=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/modeling_tf_auto.py#L435"}}),RL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16682/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/auto_factory.py#L389"}}),pM=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[v3t]},$$scope:{ctx:L}}}),BL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/auto_factory.py#L417"}}),AM=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[F3t]},$$scope:{ctx:L}}}),PL=new ee({}),IL=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/modeling_tf_auto.py#L444"}}),NL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16682/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/auto_factory.py#L389"}}),LM=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[T3t]},$$scope:{ctx:L}}}),jL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/auto_factory.py#L417"}}),o4=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[M3t]},$$scope:{ctx:L}}}),DL=new ee({}),GL=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/modeling_tf_auto.py#L480"}}),VL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16682/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/auto_factory.py#L389"}}),t4=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[E3t]},$$scope:{ctx:L}}}),XL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/auto_factory.py#L417"}}),T4=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[C3t]},$$scope:{ctx:L}}}),zL=new ee({}),QL=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/modeling_tf_auto.py#L460"}}),HL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16682/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/auto_factory.py#L389"}}),E4=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[w3t]},$$scope:{ctx:L}}}),UL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/auto_factory.py#L417"}}),w4=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[A3t]},$$scope:{ctx:L}}}),JL=new ee({}),YL=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/modeling_tf_auto.py#L471"}}),ZL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16682/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/auto_factory.py#L389"}}),y4=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[y3t]},$$scope:{ctx:L}}}),e7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/auto_factory.py#L417"}}),H4=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[L3t]},$$scope:{ctx:L}}}),o7=new ee({}),r7=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/modeling_tf_auto.py#L453"}}),a7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16682/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/auto_factory.py#L389"}}),J4=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[x3t]},$$scope:{ctx:L}}}),n7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/auto_factory.py#L417"}}),_E=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[$3t]},$$scope:{ctx:L}}}),s7=new ee({}),l7=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/modeling_tf_auto.py#L421"}}),d7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16682/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/auto_factory.py#L389"}}),vE=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[k3t]},$$scope:{ctx:L}}}),c7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/auto_factory.py#L417"}}),TE=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[S3t]},$$scope:{ctx:L}}}),f7=new ee({}),m7=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/modeling_tf_auto.py#L496"}}),h7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16682/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/auto_factory.py#L389"}}),EE=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[R3t]},$$scope:{ctx:L}}}),p7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/auto_factory.py#L417"}}),wE=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[B3t]},$$scope:{ctx:L}}}),u7=new ee({}),_7=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/modeling_flax_auto.py#L241"}}),v7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16682/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/auto_factory.py#L389"}}),yE=new P({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[P3t]},$$scope:{ctx:L}}}),F7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/auto_factory.py#L417"}}),ZE=new P({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[I3t]},$$scope:{ctx:L}}}),T7=new ee({}),M7=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/modeling_flax_auto.py#L255"}}),C7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16682/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/auto_factory.py#L389"}}),o5=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[q3t]},$$scope:{ctx:L}}}),w7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/auto_factory.py#L417"}}),f5=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[N3t]},$$scope:{ctx:L}}}),A7=new ee({}),y7=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/modeling_flax_auto.py#L248"}}),x7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16682/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/auto_factory.py#L389"}}),g5=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[j3t]},$$scope:{ctx:L}}}),$7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/auto_factory.py#L417"}}),A5=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[D3t]},$$scope:{ctx:L}}}),k7=new ee({}),S7=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/modeling_flax_auto.py#L262"}}),B7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16682/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/auto_factory.py#L389"}}),L5=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[G3t]},$$scope:{ctx:L}}}),P7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/auto_factory.py#L417"}}),j5=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[O3t]},$$scope:{ctx:L}}}),I7=new ee({}),q7=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/modeling_flax_auto.py#L269"}}),j7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16682/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/auto_factory.py#L389"}}),G5=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[V3t]},$$scope:{ctx:L}}}),D7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/auto_factory.py#L417"}}),Y5=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[X3t]},$$scope:{ctx:L}}}),G7=new ee({}),O7=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/modeling_flax_auto.py#L278"}}),X7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16682/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/auto_factory.py#L389"}}),Z5=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[z3t]},$$scope:{ctx:L}}}),z7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/auto_factory.py#L417"}}),cC=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Q3t]},$$scope:{ctx:L}}}),Q7=new ee({}),W7=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/modeling_flax_auto.py#L287"}}),U7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16682/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/auto_factory.py#L389"}}),mC=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[W3t]},$$scope:{ctx:L}}}),J7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/auto_factory.py#L417"}}),EC=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[H3t]},$$scope:{ctx:L}}}),Y7=new ee({}),K7=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/modeling_flax_auto.py#L294"}}),ex=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16682/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/auto_factory.py#L389"}}),wC=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[U3t]},$$scope:{ctx:L}}}),ox=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/auto_factory.py#L417"}}),BC=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[J3t]},$$scope:{ctx:L}}}),rx=new ee({}),tx=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/modeling_flax_auto.py#L303"}}),nx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16682/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/auto_factory.py#L389"}}),IC=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[Y3t]},$$scope:{ctx:L}}}),sx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/auto_factory.py#L417"}}),zC=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[K3t]},$$scope:{ctx:L}}}),lx=new ee({}),ix=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/modeling_flax_auto.py#L310"}}),cx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16682/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/auto_factory.py#L389"}}),WC=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Z3t]},$$scope:{ctx:L}}}),fx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/auto_factory.py#L417"}}),UC=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[ewt]},$$scope:{ctx:L}}}),mx=new ee({}),gx=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/modeling_flax_auto.py#L319"}}),px=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16682/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16682/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/auto_factory.py#L389"}}),YC=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[owt]},$$scope:{ctx:L}}}),ux=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/auto_factory.py#L417"}}),e3=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[rwt]},$$scope:{ctx:L}}}),bx=new ee({}),vx=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/modeling_flax_auto.py#L328"}}),Tx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16682/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16682/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/auto_factory.py#L389"}}),r3=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[twt]},$$scope:{ctx:L}}}),Mx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16682/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16682/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16682/src/transformers/models/auto/auto_factory.py#L417"}}),a3=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[awt]},$$scope:{ctx:L}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),u=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),oi=o("Auto Classes"),rf=l(),Kr=a("p"),ri=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ti=a("code"),FA=o("from_pretrained()"),tf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),qe=l(),Xe=a("p"),ai=o("Instantiating one of "),Mn=a("a"),TA=o("AutoConfig"),En=o(", "),Cn=a("a"),MA=o("AutoModel"),ni=o(`, and
`),wn=a("a"),EA=o("AutoTokenizer"),si=o(" will directly create a class of the relevant architecture. For instance"),af=l(),F(va.$$.fragment),ze=l(),Ae=a("p"),P9=o("will create a model that is an instance of "),li=a("a"),I9=o("BertModel"),q9=o("."),Eo=l(),Fa=a("p"),N9=o("There is one class of "),nf=a("code"),j9=o("AutoModel"),FNe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),hBe=l(),ii=a("h2"),sf=a("a"),nZ=a("span"),F(CA.$$.fragment),TNe=l(),sZ=a("span"),MNe=o("Extending the Auto Classes"),pBe=l(),An=a("p"),ENe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),lZ=a("code"),CNe=o("NewModel"),wNe=o(", make sure you have a "),iZ=a("code"),ANe=o("NewModelConfig"),yNe=o(` then you can add those to the auto
classes like this:`),uBe=l(),F(wA.$$.fragment),_Be=l(),D9=a("p"),LNe=o("You will then be able to use the auto classes like you would usually do!"),bBe=l(),F(lf.$$.fragment),vBe=l(),di=a("h2"),df=a("a"),dZ=a("span"),F(AA.$$.fragment),xNe=l(),cZ=a("span"),$Ne=o("AutoConfig"),FBe=l(),Co=a("div"),F(yA.$$.fragment),kNe=l(),LA=a("p"),SNe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),G9=a("a"),RNe=o("from_pretrained()"),BNe=o(" class method."),PNe=l(),xA=a("p"),INe=o("This class cannot be instantiated directly using "),fZ=a("code"),qNe=o("__init__()"),NNe=o(" (throws an error)."),jNe=l(),Mr=a("div"),F($A.$$.fragment),DNe=l(),mZ=a("p"),GNe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),ONe=l(),ci=a("p"),VNe=o("The configuration class to instantiate is selected based on the "),gZ=a("code"),XNe=o("model_type"),zNe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),hZ=a("code"),QNe=o("pretrained_model_name_or_path"),WNe=o(":"),HNe=l(),A=a("ul"),cf=a("li"),pZ=a("strong"),UNe=o("albert"),JNe=o(" \u2014 "),O9=a("a"),YNe=o("AlbertConfig"),KNe=o(" (ALBERT model)"),ZNe=l(),ff=a("li"),uZ=a("strong"),eje=o("bart"),oje=o(" \u2014 "),V9=a("a"),rje=o("BartConfig"),tje=o(" (BART model)"),aje=l(),mf=a("li"),_Z=a("strong"),nje=o("beit"),sje=o(" \u2014 "),X9=a("a"),lje=o("BeitConfig"),ije=o(" (BEiT model)"),dje=l(),gf=a("li"),bZ=a("strong"),cje=o("bert"),fje=o(" \u2014 "),z9=a("a"),mje=o("BertConfig"),gje=o(" (BERT model)"),hje=l(),hf=a("li"),vZ=a("strong"),pje=o("bert-generation"),uje=o(" \u2014 "),Q9=a("a"),_je=o("BertGenerationConfig"),bje=o(" (Bert Generation model)"),vje=l(),pf=a("li"),FZ=a("strong"),Fje=o("big_bird"),Tje=o(" \u2014 "),W9=a("a"),Mje=o("BigBirdConfig"),Eje=o(" (BigBird model)"),Cje=l(),uf=a("li"),TZ=a("strong"),wje=o("bigbird_pegasus"),Aje=o(" \u2014 "),H9=a("a"),yje=o("BigBirdPegasusConfig"),Lje=o(" (BigBirdPegasus model)"),xje=l(),_f=a("li"),MZ=a("strong"),$je=o("blenderbot"),kje=o(" \u2014 "),U9=a("a"),Sje=o("BlenderbotConfig"),Rje=o(" (Blenderbot model)"),Bje=l(),bf=a("li"),EZ=a("strong"),Pje=o("blenderbot-small"),Ije=o(" \u2014 "),J9=a("a"),qje=o("BlenderbotSmallConfig"),Nje=o(" (BlenderbotSmall model)"),jje=l(),vf=a("li"),CZ=a("strong"),Dje=o("camembert"),Gje=o(" \u2014 "),Y9=a("a"),Oje=o("CamembertConfig"),Vje=o(" (CamemBERT model)"),Xje=l(),Ff=a("li"),wZ=a("strong"),zje=o("canine"),Qje=o(" \u2014 "),K9=a("a"),Wje=o("CanineConfig"),Hje=o(" (Canine model)"),Uje=l(),Tf=a("li"),AZ=a("strong"),Jje=o("clip"),Yje=o(" \u2014 "),Z9=a("a"),Kje=o("CLIPConfig"),Zje=o(" (CLIP model)"),eDe=l(),Mf=a("li"),yZ=a("strong"),oDe=o("convbert"),rDe=o(" \u2014 "),e$=a("a"),tDe=o("ConvBertConfig"),aDe=o(" (ConvBERT model)"),nDe=l(),Ef=a("li"),LZ=a("strong"),sDe=o("convnext"),lDe=o(" \u2014 "),o$=a("a"),iDe=o("ConvNextConfig"),dDe=o(" (ConvNext model)"),cDe=l(),Cf=a("li"),xZ=a("strong"),fDe=o("ctrl"),mDe=o(" \u2014 "),r$=a("a"),gDe=o("CTRLConfig"),hDe=o(" (CTRL model)"),pDe=l(),wf=a("li"),$Z=a("strong"),uDe=o("data2vec-audio"),_De=o(" \u2014 "),t$=a("a"),bDe=o("Data2VecAudioConfig"),vDe=o(" (Data2VecAudio model)"),FDe=l(),Af=a("li"),kZ=a("strong"),TDe=o("data2vec-text"),MDe=o(" \u2014 "),a$=a("a"),EDe=o("Data2VecTextConfig"),CDe=o(" (Data2VecText model)"),wDe=l(),yf=a("li"),SZ=a("strong"),ADe=o("data2vec-vision"),yDe=o(" \u2014 "),n$=a("a"),LDe=o("Data2VecVisionConfig"),xDe=o(" (Data2VecVision model)"),$De=l(),Lf=a("li"),RZ=a("strong"),kDe=o("deberta"),SDe=o(" \u2014 "),s$=a("a"),RDe=o("DebertaConfig"),BDe=o(" (DeBERTa model)"),PDe=l(),xf=a("li"),BZ=a("strong"),IDe=o("deberta-v2"),qDe=o(" \u2014 "),l$=a("a"),NDe=o("DebertaV2Config"),jDe=o(" (DeBERTa-v2 model)"),DDe=l(),$f=a("li"),PZ=a("strong"),GDe=o("decision_transformer"),ODe=o(" \u2014 "),i$=a("a"),VDe=o("DecisionTransformerConfig"),XDe=o(" (Decision Transformer model)"),zDe=l(),kf=a("li"),IZ=a("strong"),QDe=o("deit"),WDe=o(" \u2014 "),d$=a("a"),HDe=o("DeiTConfig"),UDe=o(" (DeiT model)"),JDe=l(),Sf=a("li"),qZ=a("strong"),YDe=o("detr"),KDe=o(" \u2014 "),c$=a("a"),ZDe=o("DetrConfig"),eGe=o(" (DETR model)"),oGe=l(),Rf=a("li"),NZ=a("strong"),rGe=o("distilbert"),tGe=o(" \u2014 "),f$=a("a"),aGe=o("DistilBertConfig"),nGe=o(" (DistilBERT model)"),sGe=l(),Bf=a("li"),jZ=a("strong"),lGe=o("dpr"),iGe=o(" \u2014 "),m$=a("a"),dGe=o("DPRConfig"),cGe=o(" (DPR model)"),fGe=l(),Pf=a("li"),DZ=a("strong"),mGe=o("dpt"),gGe=o(" \u2014 "),g$=a("a"),hGe=o("DPTConfig"),pGe=o(" (DPT model)"),uGe=l(),If=a("li"),GZ=a("strong"),_Ge=o("electra"),bGe=o(" \u2014 "),h$=a("a"),vGe=o("ElectraConfig"),FGe=o(" (ELECTRA model)"),TGe=l(),qf=a("li"),OZ=a("strong"),MGe=o("encoder-decoder"),EGe=o(" \u2014 "),p$=a("a"),CGe=o("EncoderDecoderConfig"),wGe=o(" (Encoder decoder model)"),AGe=l(),Nf=a("li"),VZ=a("strong"),yGe=o("flaubert"),LGe=o(" \u2014 "),u$=a("a"),xGe=o("FlaubertConfig"),$Ge=o(" (FlauBERT model)"),kGe=l(),jf=a("li"),XZ=a("strong"),SGe=o("fnet"),RGe=o(" \u2014 "),_$=a("a"),BGe=o("FNetConfig"),PGe=o(" (FNet model)"),IGe=l(),Df=a("li"),zZ=a("strong"),qGe=o("fsmt"),NGe=o(" \u2014 "),b$=a("a"),jGe=o("FSMTConfig"),DGe=o(" (FairSeq Machine-Translation model)"),GGe=l(),Gf=a("li"),QZ=a("strong"),OGe=o("funnel"),VGe=o(" \u2014 "),v$=a("a"),XGe=o("FunnelConfig"),zGe=o(" (Funnel Transformer model)"),QGe=l(),Of=a("li"),WZ=a("strong"),WGe=o("glpn"),HGe=o(" \u2014 "),F$=a("a"),UGe=o("GLPNConfig"),JGe=o(" (GLPN model)"),YGe=l(),Vf=a("li"),HZ=a("strong"),KGe=o("gpt2"),ZGe=o(" \u2014 "),T$=a("a"),eOe=o("GPT2Config"),oOe=o(" (OpenAI GPT-2 model)"),rOe=l(),Xf=a("li"),UZ=a("strong"),tOe=o("gpt_neo"),aOe=o(" \u2014 "),M$=a("a"),nOe=o("GPTNeoConfig"),sOe=o(" (GPT Neo model)"),lOe=l(),zf=a("li"),JZ=a("strong"),iOe=o("gptj"),dOe=o(" \u2014 "),E$=a("a"),cOe=o("GPTJConfig"),fOe=o(" (GPT-J model)"),mOe=l(),Qf=a("li"),YZ=a("strong"),gOe=o("hubert"),hOe=o(" \u2014 "),C$=a("a"),pOe=o("HubertConfig"),uOe=o(" (Hubert model)"),_Oe=l(),Wf=a("li"),KZ=a("strong"),bOe=o("ibert"),vOe=o(" \u2014 "),w$=a("a"),FOe=o("IBertConfig"),TOe=o(" (I-BERT model)"),MOe=l(),Hf=a("li"),ZZ=a("strong"),EOe=o("imagegpt"),COe=o(" \u2014 "),A$=a("a"),wOe=o("ImageGPTConfig"),AOe=o(" (ImageGPT model)"),yOe=l(),Uf=a("li"),eee=a("strong"),LOe=o("layoutlm"),xOe=o(" \u2014 "),y$=a("a"),$Oe=o("LayoutLMConfig"),kOe=o(" (LayoutLM model)"),SOe=l(),Jf=a("li"),oee=a("strong"),ROe=o("layoutlmv2"),BOe=o(" \u2014 "),L$=a("a"),POe=o("LayoutLMv2Config"),IOe=o(" (LayoutLMv2 model)"),qOe=l(),Yf=a("li"),ree=a("strong"),NOe=o("led"),jOe=o(" \u2014 "),x$=a("a"),DOe=o("LEDConfig"),GOe=o(" (LED model)"),OOe=l(),Kf=a("li"),tee=a("strong"),VOe=o("longformer"),XOe=o(" \u2014 "),$$=a("a"),zOe=o("LongformerConfig"),QOe=o(" (Longformer model)"),WOe=l(),Zf=a("li"),aee=a("strong"),HOe=o("luke"),UOe=o(" \u2014 "),k$=a("a"),JOe=o("LukeConfig"),YOe=o(" (LUKE model)"),KOe=l(),em=a("li"),nee=a("strong"),ZOe=o("lxmert"),eVe=o(" \u2014 "),S$=a("a"),oVe=o("LxmertConfig"),rVe=o(" (LXMERT model)"),tVe=l(),om=a("li"),see=a("strong"),aVe=o("m2m_100"),nVe=o(" \u2014 "),R$=a("a"),sVe=o("M2M100Config"),lVe=o(" (M2M100 model)"),iVe=l(),rm=a("li"),lee=a("strong"),dVe=o("marian"),cVe=o(" \u2014 "),B$=a("a"),fVe=o("MarianConfig"),mVe=o(" (Marian model)"),gVe=l(),tm=a("li"),iee=a("strong"),hVe=o("maskformer"),pVe=o(" \u2014 "),P$=a("a"),uVe=o("MaskFormerConfig"),_Ve=o(" (MaskFormer model)"),bVe=l(),am=a("li"),dee=a("strong"),vVe=o("mbart"),FVe=o(" \u2014 "),I$=a("a"),TVe=o("MBartConfig"),MVe=o(" (mBART model)"),EVe=l(),nm=a("li"),cee=a("strong"),CVe=o("megatron-bert"),wVe=o(" \u2014 "),q$=a("a"),AVe=o("MegatronBertConfig"),yVe=o(" (MegatronBert model)"),LVe=l(),sm=a("li"),fee=a("strong"),xVe=o("mobilebert"),$Ve=o(" \u2014 "),N$=a("a"),kVe=o("MobileBertConfig"),SVe=o(" (MobileBERT model)"),RVe=l(),lm=a("li"),mee=a("strong"),BVe=o("mpnet"),PVe=o(" \u2014 "),j$=a("a"),IVe=o("MPNetConfig"),qVe=o(" (MPNet model)"),NVe=l(),im=a("li"),gee=a("strong"),jVe=o("mt5"),DVe=o(" \u2014 "),D$=a("a"),GVe=o("MT5Config"),OVe=o(" (mT5 model)"),VVe=l(),dm=a("li"),hee=a("strong"),XVe=o("nystromformer"),zVe=o(" \u2014 "),G$=a("a"),QVe=o("NystromformerConfig"),WVe=o(" (Nystromformer model)"),HVe=l(),cm=a("li"),pee=a("strong"),UVe=o("openai-gpt"),JVe=o(" \u2014 "),O$=a("a"),YVe=o("OpenAIGPTConfig"),KVe=o(" (OpenAI GPT model)"),ZVe=l(),fm=a("li"),uee=a("strong"),eXe=o("pegasus"),oXe=o(" \u2014 "),V$=a("a"),rXe=o("PegasusConfig"),tXe=o(" (Pegasus model)"),aXe=l(),mm=a("li"),_ee=a("strong"),nXe=o("perceiver"),sXe=o(" \u2014 "),X$=a("a"),lXe=o("PerceiverConfig"),iXe=o(" (Perceiver model)"),dXe=l(),gm=a("li"),bee=a("strong"),cXe=o("plbart"),fXe=o(" \u2014 "),z$=a("a"),mXe=o("PLBartConfig"),gXe=o(" (PLBart model)"),hXe=l(),hm=a("li"),vee=a("strong"),pXe=o("poolformer"),uXe=o(" \u2014 "),Q$=a("a"),_Xe=o("PoolFormerConfig"),bXe=o(" (PoolFormer model)"),vXe=l(),pm=a("li"),Fee=a("strong"),FXe=o("prophetnet"),TXe=o(" \u2014 "),W$=a("a"),MXe=o("ProphetNetConfig"),EXe=o(" (ProphetNet model)"),CXe=l(),um=a("li"),Tee=a("strong"),wXe=o("qdqbert"),AXe=o(" \u2014 "),H$=a("a"),yXe=o("QDQBertConfig"),LXe=o(" (QDQBert model)"),xXe=l(),_m=a("li"),Mee=a("strong"),$Xe=o("rag"),kXe=o(" \u2014 "),U$=a("a"),SXe=o("RagConfig"),RXe=o(" (RAG model)"),BXe=l(),bm=a("li"),Eee=a("strong"),PXe=o("realm"),IXe=o(" \u2014 "),J$=a("a"),qXe=o("RealmConfig"),NXe=o(" (Realm model)"),jXe=l(),vm=a("li"),Cee=a("strong"),DXe=o("reformer"),GXe=o(" \u2014 "),Y$=a("a"),OXe=o("ReformerConfig"),VXe=o(" (Reformer model)"),XXe=l(),Fm=a("li"),wee=a("strong"),zXe=o("regnet"),QXe=o(" \u2014 "),K$=a("a"),WXe=o("RegNetConfig"),HXe=o(" (RegNet model)"),UXe=l(),Tm=a("li"),Aee=a("strong"),JXe=o("rembert"),YXe=o(" \u2014 "),Z$=a("a"),KXe=o("RemBertConfig"),ZXe=o(" (RemBERT model)"),eze=l(),Mm=a("li"),yee=a("strong"),oze=o("resnet"),rze=o(" \u2014 "),ek=a("a"),tze=o("ResNetConfig"),aze=o(" (ResNet model)"),nze=l(),Em=a("li"),Lee=a("strong"),sze=o("retribert"),lze=o(" \u2014 "),ok=a("a"),ize=o("RetriBertConfig"),dze=o(" (RetriBERT model)"),cze=l(),Cm=a("li"),xee=a("strong"),fze=o("roberta"),mze=o(" \u2014 "),rk=a("a"),gze=o("RobertaConfig"),hze=o(" (RoBERTa model)"),pze=l(),wm=a("li"),$ee=a("strong"),uze=o("roformer"),_ze=o(" \u2014 "),tk=a("a"),bze=o("RoFormerConfig"),vze=o(" (RoFormer model)"),Fze=l(),Am=a("li"),kee=a("strong"),Tze=o("segformer"),Mze=o(" \u2014 "),ak=a("a"),Eze=o("SegformerConfig"),Cze=o(" (SegFormer model)"),wze=l(),ym=a("li"),See=a("strong"),Aze=o("sew"),yze=o(" \u2014 "),nk=a("a"),Lze=o("SEWConfig"),xze=o(" (SEW model)"),$ze=l(),Lm=a("li"),Ree=a("strong"),kze=o("sew-d"),Sze=o(" \u2014 "),sk=a("a"),Rze=o("SEWDConfig"),Bze=o(" (SEW-D model)"),Pze=l(),xm=a("li"),Bee=a("strong"),Ize=o("speech-encoder-decoder"),qze=o(" \u2014 "),lk=a("a"),Nze=o("SpeechEncoderDecoderConfig"),jze=o(" (Speech Encoder decoder model)"),Dze=l(),$m=a("li"),Pee=a("strong"),Gze=o("speech_to_text"),Oze=o(" \u2014 "),ik=a("a"),Vze=o("Speech2TextConfig"),Xze=o(" (Speech2Text model)"),zze=l(),km=a("li"),Iee=a("strong"),Qze=o("speech_to_text_2"),Wze=o(" \u2014 "),dk=a("a"),Hze=o("Speech2Text2Config"),Uze=o(" (Speech2Text2 model)"),Jze=l(),Sm=a("li"),qee=a("strong"),Yze=o("splinter"),Kze=o(" \u2014 "),ck=a("a"),Zze=o("SplinterConfig"),eQe=o(" (Splinter model)"),oQe=l(),Rm=a("li"),Nee=a("strong"),rQe=o("squeezebert"),tQe=o(" \u2014 "),fk=a("a"),aQe=o("SqueezeBertConfig"),nQe=o(" (SqueezeBERT model)"),sQe=l(),Bm=a("li"),jee=a("strong"),lQe=o("swin"),iQe=o(" \u2014 "),mk=a("a"),dQe=o("SwinConfig"),cQe=o(" (Swin model)"),fQe=l(),Pm=a("li"),Dee=a("strong"),mQe=o("t5"),gQe=o(" \u2014 "),gk=a("a"),hQe=o("T5Config"),pQe=o(" (T5 model)"),uQe=l(),Im=a("li"),Gee=a("strong"),_Qe=o("tapas"),bQe=o(" \u2014 "),hk=a("a"),vQe=o("TapasConfig"),FQe=o(" (TAPAS model)"),TQe=l(),qm=a("li"),Oee=a("strong"),MQe=o("tapex"),EQe=o(" \u2014 "),pk=a("a"),CQe=o("BartConfig"),wQe=o(" (TAPEX model)"),AQe=l(),Nm=a("li"),Vee=a("strong"),yQe=o("transfo-xl"),LQe=o(" \u2014 "),uk=a("a"),xQe=o("TransfoXLConfig"),$Qe=o(" (Transformer-XL model)"),kQe=l(),jm=a("li"),Xee=a("strong"),SQe=o("trocr"),RQe=o(" \u2014 "),_k=a("a"),BQe=o("TrOCRConfig"),PQe=o(" (TrOCR model)"),IQe=l(),Dm=a("li"),zee=a("strong"),qQe=o("unispeech"),NQe=o(" \u2014 "),bk=a("a"),jQe=o("UniSpeechConfig"),DQe=o(" (UniSpeech model)"),GQe=l(),Gm=a("li"),Qee=a("strong"),OQe=o("unispeech-sat"),VQe=o(" \u2014 "),vk=a("a"),XQe=o("UniSpeechSatConfig"),zQe=o(" (UniSpeechSat model)"),QQe=l(),Om=a("li"),Wee=a("strong"),WQe=o("van"),HQe=o(" \u2014 "),Fk=a("a"),UQe=o("VanConfig"),JQe=o(" (VAN model)"),YQe=l(),Vm=a("li"),Hee=a("strong"),KQe=o("vilt"),ZQe=o(" \u2014 "),Tk=a("a"),eWe=o("ViltConfig"),oWe=o(" (ViLT model)"),rWe=l(),Xm=a("li"),Uee=a("strong"),tWe=o("vision-encoder-decoder"),aWe=o(" \u2014 "),Mk=a("a"),nWe=o("VisionEncoderDecoderConfig"),sWe=o(" (Vision Encoder decoder model)"),lWe=l(),zm=a("li"),Jee=a("strong"),iWe=o("vision-text-dual-encoder"),dWe=o(" \u2014 "),Ek=a("a"),cWe=o("VisionTextDualEncoderConfig"),fWe=o(" (VisionTextDualEncoder model)"),mWe=l(),Qm=a("li"),Yee=a("strong"),gWe=o("visual_bert"),hWe=o(" \u2014 "),Ck=a("a"),pWe=o("VisualBertConfig"),uWe=o(" (VisualBert model)"),_We=l(),Wm=a("li"),Kee=a("strong"),bWe=o("vit"),vWe=o(" \u2014 "),wk=a("a"),FWe=o("ViTConfig"),TWe=o(" (ViT model)"),MWe=l(),Hm=a("li"),Zee=a("strong"),EWe=o("vit_mae"),CWe=o(" \u2014 "),Ak=a("a"),wWe=o("ViTMAEConfig"),AWe=o(" (ViTMAE model)"),yWe=l(),Um=a("li"),eoe=a("strong"),LWe=o("wav2vec2"),xWe=o(" \u2014 "),yk=a("a"),$We=o("Wav2Vec2Config"),kWe=o(" (Wav2Vec2 model)"),SWe=l(),Jm=a("li"),ooe=a("strong"),RWe=o("wavlm"),BWe=o(" \u2014 "),Lk=a("a"),PWe=o("WavLMConfig"),IWe=o(" (WavLM model)"),qWe=l(),Ym=a("li"),roe=a("strong"),NWe=o("xglm"),jWe=o(" \u2014 "),xk=a("a"),DWe=o("XGLMConfig"),GWe=o(" (XGLM model)"),OWe=l(),Km=a("li"),toe=a("strong"),VWe=o("xlm"),XWe=o(" \u2014 "),$k=a("a"),zWe=o("XLMConfig"),QWe=o(" (XLM model)"),WWe=l(),Zm=a("li"),aoe=a("strong"),HWe=o("xlm-prophetnet"),UWe=o(" \u2014 "),kk=a("a"),JWe=o("XLMProphetNetConfig"),YWe=o(" (XLMProphetNet model)"),KWe=l(),eg=a("li"),noe=a("strong"),ZWe=o("xlm-roberta"),eHe=o(" \u2014 "),Sk=a("a"),oHe=o("XLMRobertaConfig"),rHe=o(" (XLM-RoBERTa model)"),tHe=l(),og=a("li"),soe=a("strong"),aHe=o("xlm-roberta-xl"),nHe=o(" \u2014 "),Rk=a("a"),sHe=o("XLMRobertaXLConfig"),lHe=o(" (XLM-RoBERTa-XL model)"),iHe=l(),rg=a("li"),loe=a("strong"),dHe=o("xlnet"),cHe=o(" \u2014 "),Bk=a("a"),fHe=o("XLNetConfig"),mHe=o(" (XLNet model)"),gHe=l(),tg=a("li"),ioe=a("strong"),hHe=o("yolos"),pHe=o(" \u2014 "),Pk=a("a"),uHe=o("YolosConfig"),_He=o(" (YOLOS model)"),bHe=l(),ag=a("li"),doe=a("strong"),vHe=o("yoso"),FHe=o(" \u2014 "),Ik=a("a"),THe=o("YosoConfig"),MHe=o(" (YOSO model)"),EHe=l(),F(ng.$$.fragment),CHe=l(),sg=a("div"),F(kA.$$.fragment),wHe=l(),coe=a("p"),AHe=o("Register a new configuration for this class."),TBe=l(),fi=a("h2"),lg=a("a"),foe=a("span"),F(SA.$$.fragment),yHe=l(),moe=a("span"),LHe=o("AutoTokenizer"),MBe=l(),wo=a("div"),F(RA.$$.fragment),xHe=l(),BA=a("p"),$He=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),qk=a("a"),kHe=o("AutoTokenizer.from_pretrained()"),SHe=o(" class method."),RHe=l(),PA=a("p"),BHe=o("This class cannot be instantiated directly using "),goe=a("code"),PHe=o("__init__()"),IHe=o(" (throws an error)."),qHe=l(),Er=a("div"),F(IA.$$.fragment),NHe=l(),hoe=a("p"),jHe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),DHe=l(),Ta=a("p"),GHe=o("The tokenizer class to instantiate is selected based on the "),poe=a("code"),OHe=o("model_type"),VHe=o(` property of the config object (either
passed as an argument or loaded from `),uoe=a("code"),XHe=o("pretrained_model_name_or_path"),zHe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_oe=a("code"),QHe=o("pretrained_model_name_or_path"),WHe=o(":"),HHe=l(),k=a("ul"),yn=a("li"),boe=a("strong"),UHe=o("albert"),JHe=o(" \u2014 "),Nk=a("a"),YHe=o("AlbertTokenizer"),KHe=o(" or "),jk=a("a"),ZHe=o("AlbertTokenizerFast"),eUe=o(" (ALBERT model)"),oUe=l(),Ln=a("li"),voe=a("strong"),rUe=o("bart"),tUe=o(" \u2014 "),Dk=a("a"),aUe=o("BartTokenizer"),nUe=o(" or "),Gk=a("a"),sUe=o("BartTokenizerFast"),lUe=o(" (BART model)"),iUe=l(),xn=a("li"),Foe=a("strong"),dUe=o("barthez"),cUe=o(" \u2014 "),Ok=a("a"),fUe=o("BarthezTokenizer"),mUe=o(" or "),Vk=a("a"),gUe=o("BarthezTokenizerFast"),hUe=o(" (BARThez model)"),pUe=l(),ig=a("li"),Toe=a("strong"),uUe=o("bartpho"),_Ue=o(" \u2014 "),Xk=a("a"),bUe=o("BartphoTokenizer"),vUe=o(" (BARTpho model)"),FUe=l(),$n=a("li"),Moe=a("strong"),TUe=o("bert"),MUe=o(" \u2014 "),zk=a("a"),EUe=o("BertTokenizer"),CUe=o(" or "),Qk=a("a"),wUe=o("BertTokenizerFast"),AUe=o(" (BERT model)"),yUe=l(),dg=a("li"),Eoe=a("strong"),LUe=o("bert-generation"),xUe=o(" \u2014 "),Wk=a("a"),$Ue=o("BertGenerationTokenizer"),kUe=o(" (Bert Generation model)"),SUe=l(),cg=a("li"),Coe=a("strong"),RUe=o("bert-japanese"),BUe=o(" \u2014 "),Hk=a("a"),PUe=o("BertJapaneseTokenizer"),IUe=o(" (BertJapanese model)"),qUe=l(),fg=a("li"),woe=a("strong"),NUe=o("bertweet"),jUe=o(" \u2014 "),Uk=a("a"),DUe=o("BertweetTokenizer"),GUe=o(" (Bertweet model)"),OUe=l(),kn=a("li"),Aoe=a("strong"),VUe=o("big_bird"),XUe=o(" \u2014 "),Jk=a("a"),zUe=o("BigBirdTokenizer"),QUe=o(" or "),Yk=a("a"),WUe=o("BigBirdTokenizerFast"),HUe=o(" (BigBird model)"),UUe=l(),Sn=a("li"),yoe=a("strong"),JUe=o("bigbird_pegasus"),YUe=o(" \u2014 "),Kk=a("a"),KUe=o("PegasusTokenizer"),ZUe=o(" or "),Zk=a("a"),eJe=o("PegasusTokenizerFast"),oJe=o(" (BigBirdPegasus model)"),rJe=l(),Rn=a("li"),Loe=a("strong"),tJe=o("blenderbot"),aJe=o(" \u2014 "),eS=a("a"),nJe=o("BlenderbotTokenizer"),sJe=o(" or "),oS=a("a"),lJe=o("BlenderbotTokenizerFast"),iJe=o(" (Blenderbot model)"),dJe=l(),mg=a("li"),xoe=a("strong"),cJe=o("blenderbot-small"),fJe=o(" \u2014 "),rS=a("a"),mJe=o("BlenderbotSmallTokenizer"),gJe=o(" (BlenderbotSmall model)"),hJe=l(),gg=a("li"),$oe=a("strong"),pJe=o("byt5"),uJe=o(" \u2014 "),tS=a("a"),_Je=o("ByT5Tokenizer"),bJe=o(" (ByT5 model)"),vJe=l(),Bn=a("li"),koe=a("strong"),FJe=o("camembert"),TJe=o(" \u2014 "),aS=a("a"),MJe=o("CamembertTokenizer"),EJe=o(" or "),nS=a("a"),CJe=o("CamembertTokenizerFast"),wJe=o(" (CamemBERT model)"),AJe=l(),hg=a("li"),Soe=a("strong"),yJe=o("canine"),LJe=o(" \u2014 "),sS=a("a"),xJe=o("CanineTokenizer"),$Je=o(" (Canine model)"),kJe=l(),Pn=a("li"),Roe=a("strong"),SJe=o("clip"),RJe=o(" \u2014 "),lS=a("a"),BJe=o("CLIPTokenizer"),PJe=o(" or "),iS=a("a"),IJe=o("CLIPTokenizerFast"),qJe=o(" (CLIP model)"),NJe=l(),In=a("li"),Boe=a("strong"),jJe=o("convbert"),DJe=o(" \u2014 "),dS=a("a"),GJe=o("ConvBertTokenizer"),OJe=o(" or "),cS=a("a"),VJe=o("ConvBertTokenizerFast"),XJe=o(" (ConvBERT model)"),zJe=l(),qn=a("li"),Poe=a("strong"),QJe=o("cpm"),WJe=o(" \u2014 "),fS=a("a"),HJe=o("CpmTokenizer"),UJe=o(" or "),mS=a("a"),JJe=o("CpmTokenizerFast"),YJe=o(" (CPM model)"),KJe=l(),pg=a("li"),Ioe=a("strong"),ZJe=o("ctrl"),eYe=o(" \u2014 "),gS=a("a"),oYe=o("CTRLTokenizer"),rYe=o(" (CTRL model)"),tYe=l(),Nn=a("li"),qoe=a("strong"),aYe=o("data2vec-text"),nYe=o(" \u2014 "),hS=a("a"),sYe=o("RobertaTokenizer"),lYe=o(" or "),pS=a("a"),iYe=o("RobertaTokenizerFast"),dYe=o(" (Data2VecText model)"),cYe=l(),jn=a("li"),Noe=a("strong"),fYe=o("deberta"),mYe=o(" \u2014 "),uS=a("a"),gYe=o("DebertaTokenizer"),hYe=o(" or "),_S=a("a"),pYe=o("DebertaTokenizerFast"),uYe=o(" (DeBERTa model)"),_Ye=l(),Dn=a("li"),joe=a("strong"),bYe=o("deberta-v2"),vYe=o(" \u2014 "),bS=a("a"),FYe=o("DebertaV2Tokenizer"),TYe=o(" or "),vS=a("a"),MYe=o("DebertaV2TokenizerFast"),EYe=o(" (DeBERTa-v2 model)"),CYe=l(),Gn=a("li"),Doe=a("strong"),wYe=o("distilbert"),AYe=o(" \u2014 "),FS=a("a"),yYe=o("DistilBertTokenizer"),LYe=o(" or "),TS=a("a"),xYe=o("DistilBertTokenizerFast"),$Ye=o(" (DistilBERT model)"),kYe=l(),On=a("li"),Goe=a("strong"),SYe=o("dpr"),RYe=o(" \u2014 "),MS=a("a"),BYe=o("DPRQuestionEncoderTokenizer"),PYe=o(" or "),ES=a("a"),IYe=o("DPRQuestionEncoderTokenizerFast"),qYe=o(" (DPR model)"),NYe=l(),Vn=a("li"),Ooe=a("strong"),jYe=o("electra"),DYe=o(" \u2014 "),CS=a("a"),GYe=o("ElectraTokenizer"),OYe=o(" or "),wS=a("a"),VYe=o("ElectraTokenizerFast"),XYe=o(" (ELECTRA model)"),zYe=l(),ug=a("li"),Voe=a("strong"),QYe=o("flaubert"),WYe=o(" \u2014 "),AS=a("a"),HYe=o("FlaubertTokenizer"),UYe=o(" (FlauBERT model)"),JYe=l(),Xn=a("li"),Xoe=a("strong"),YYe=o("fnet"),KYe=o(" \u2014 "),yS=a("a"),ZYe=o("FNetTokenizer"),eKe=o(" or "),LS=a("a"),oKe=o("FNetTokenizerFast"),rKe=o(" (FNet model)"),tKe=l(),_g=a("li"),zoe=a("strong"),aKe=o("fsmt"),nKe=o(" \u2014 "),xS=a("a"),sKe=o("FSMTTokenizer"),lKe=o(" (FairSeq Machine-Translation model)"),iKe=l(),zn=a("li"),Qoe=a("strong"),dKe=o("funnel"),cKe=o(" \u2014 "),$S=a("a"),fKe=o("FunnelTokenizer"),mKe=o(" or "),kS=a("a"),gKe=o("FunnelTokenizerFast"),hKe=o(" (Funnel Transformer model)"),pKe=l(),Qn=a("li"),Woe=a("strong"),uKe=o("gpt2"),_Ke=o(" \u2014 "),SS=a("a"),bKe=o("GPT2Tokenizer"),vKe=o(" or "),RS=a("a"),FKe=o("GPT2TokenizerFast"),TKe=o(" (OpenAI GPT-2 model)"),MKe=l(),Wn=a("li"),Hoe=a("strong"),EKe=o("gpt_neo"),CKe=o(" \u2014 "),BS=a("a"),wKe=o("GPT2Tokenizer"),AKe=o(" or "),PS=a("a"),yKe=o("GPT2TokenizerFast"),LKe=o(" (GPT Neo model)"),xKe=l(),Hn=a("li"),Uoe=a("strong"),$Ke=o("gptj"),kKe=o(" \u2014 "),IS=a("a"),SKe=o("GPT2Tokenizer"),RKe=o(" or "),qS=a("a"),BKe=o("GPT2TokenizerFast"),PKe=o(" (GPT-J model)"),IKe=l(),Un=a("li"),Joe=a("strong"),qKe=o("herbert"),NKe=o(" \u2014 "),NS=a("a"),jKe=o("HerbertTokenizer"),DKe=o(" or "),jS=a("a"),GKe=o("HerbertTokenizerFast"),OKe=o(" (HerBERT model)"),VKe=l(),bg=a("li"),Yoe=a("strong"),XKe=o("hubert"),zKe=o(" \u2014 "),DS=a("a"),QKe=o("Wav2Vec2CTCTokenizer"),WKe=o(" (Hubert model)"),HKe=l(),Jn=a("li"),Koe=a("strong"),UKe=o("ibert"),JKe=o(" \u2014 "),GS=a("a"),YKe=o("RobertaTokenizer"),KKe=o(" or "),OS=a("a"),ZKe=o("RobertaTokenizerFast"),eZe=o(" (I-BERT model)"),oZe=l(),Yn=a("li"),Zoe=a("strong"),rZe=o("layoutlm"),tZe=o(" \u2014 "),VS=a("a"),aZe=o("LayoutLMTokenizer"),nZe=o(" or "),XS=a("a"),sZe=o("LayoutLMTokenizerFast"),lZe=o(" (LayoutLM model)"),iZe=l(),Kn=a("li"),ere=a("strong"),dZe=o("layoutlmv2"),cZe=o(" \u2014 "),zS=a("a"),fZe=o("LayoutLMv2Tokenizer"),mZe=o(" or "),QS=a("a"),gZe=o("LayoutLMv2TokenizerFast"),hZe=o(" (LayoutLMv2 model)"),pZe=l(),Zn=a("li"),ore=a("strong"),uZe=o("layoutxlm"),_Ze=o(" \u2014 "),WS=a("a"),bZe=o("LayoutXLMTokenizer"),vZe=o(" or "),HS=a("a"),FZe=o("LayoutXLMTokenizerFast"),TZe=o(" (LayoutXLM model)"),MZe=l(),es=a("li"),rre=a("strong"),EZe=o("led"),CZe=o(" \u2014 "),US=a("a"),wZe=o("LEDTokenizer"),AZe=o(" or "),JS=a("a"),yZe=o("LEDTokenizerFast"),LZe=o(" (LED model)"),xZe=l(),os=a("li"),tre=a("strong"),$Ze=o("longformer"),kZe=o(" \u2014 "),YS=a("a"),SZe=o("LongformerTokenizer"),RZe=o(" or "),KS=a("a"),BZe=o("LongformerTokenizerFast"),PZe=o(" (Longformer model)"),IZe=l(),vg=a("li"),are=a("strong"),qZe=o("luke"),NZe=o(" \u2014 "),ZS=a("a"),jZe=o("LukeTokenizer"),DZe=o(" (LUKE model)"),GZe=l(),rs=a("li"),nre=a("strong"),OZe=o("lxmert"),VZe=o(" \u2014 "),eR=a("a"),XZe=o("LxmertTokenizer"),zZe=o(" or "),oR=a("a"),QZe=o("LxmertTokenizerFast"),WZe=o(" (LXMERT model)"),HZe=l(),Fg=a("li"),sre=a("strong"),UZe=o("m2m_100"),JZe=o(" \u2014 "),rR=a("a"),YZe=o("M2M100Tokenizer"),KZe=o(" (M2M100 model)"),ZZe=l(),Tg=a("li"),lre=a("strong"),eeo=o("marian"),oeo=o(" \u2014 "),tR=a("a"),reo=o("MarianTokenizer"),teo=o(" (Marian model)"),aeo=l(),ts=a("li"),ire=a("strong"),neo=o("mbart"),seo=o(" \u2014 "),aR=a("a"),leo=o("MBartTokenizer"),ieo=o(" or "),nR=a("a"),deo=o("MBartTokenizerFast"),ceo=o(" (mBART model)"),feo=l(),as=a("li"),dre=a("strong"),meo=o("mbart50"),geo=o(" \u2014 "),sR=a("a"),heo=o("MBart50Tokenizer"),peo=o(" or "),lR=a("a"),ueo=o("MBart50TokenizerFast"),_eo=o(" (mBART-50 model)"),beo=l(),ns=a("li"),cre=a("strong"),veo=o("megatron-bert"),Feo=o(" \u2014 "),iR=a("a"),Teo=o("BertTokenizer"),Meo=o(" or "),dR=a("a"),Eeo=o("BertTokenizerFast"),Ceo=o(" (MegatronBert model)"),weo=l(),Mg=a("li"),fre=a("strong"),Aeo=o("mluke"),yeo=o(" \u2014 "),cR=a("a"),Leo=o("MLukeTokenizer"),xeo=o(" (mLUKE model)"),$eo=l(),ss=a("li"),mre=a("strong"),keo=o("mobilebert"),Seo=o(" \u2014 "),fR=a("a"),Reo=o("MobileBertTokenizer"),Beo=o(" or "),mR=a("a"),Peo=o("MobileBertTokenizerFast"),Ieo=o(" (MobileBERT model)"),qeo=l(),ls=a("li"),gre=a("strong"),Neo=o("mpnet"),jeo=o(" \u2014 "),gR=a("a"),Deo=o("MPNetTokenizer"),Geo=o(" or "),hR=a("a"),Oeo=o("MPNetTokenizerFast"),Veo=o(" (MPNet model)"),Xeo=l(),is=a("li"),hre=a("strong"),zeo=o("mt5"),Qeo=o(" \u2014 "),pR=a("a"),Weo=o("MT5Tokenizer"),Heo=o(" or "),uR=a("a"),Ueo=o("MT5TokenizerFast"),Jeo=o(" (mT5 model)"),Yeo=l(),ds=a("li"),pre=a("strong"),Keo=o("nystromformer"),Zeo=o(" \u2014 "),_R=a("a"),eoo=o("AlbertTokenizer"),ooo=o(" or "),bR=a("a"),roo=o("AlbertTokenizerFast"),too=o(" (Nystromformer model)"),aoo=l(),cs=a("li"),ure=a("strong"),noo=o("openai-gpt"),soo=o(" \u2014 "),vR=a("a"),loo=o("OpenAIGPTTokenizer"),ioo=o(" or "),FR=a("a"),doo=o("OpenAIGPTTokenizerFast"),coo=o(" (OpenAI GPT model)"),foo=l(),fs=a("li"),_re=a("strong"),moo=o("pegasus"),goo=o(" \u2014 "),TR=a("a"),hoo=o("PegasusTokenizer"),poo=o(" or "),MR=a("a"),uoo=o("PegasusTokenizerFast"),_oo=o(" (Pegasus model)"),boo=l(),Eg=a("li"),bre=a("strong"),voo=o("perceiver"),Foo=o(" \u2014 "),ER=a("a"),Too=o("PerceiverTokenizer"),Moo=o(" (Perceiver model)"),Eoo=l(),Cg=a("li"),vre=a("strong"),Coo=o("phobert"),woo=o(" \u2014 "),CR=a("a"),Aoo=o("PhobertTokenizer"),yoo=o(" (PhoBERT model)"),Loo=l(),wg=a("li"),Fre=a("strong"),xoo=o("plbart"),$oo=o(" \u2014 "),wR=a("a"),koo=o("PLBartTokenizer"),Soo=o(" (PLBart model)"),Roo=l(),Ag=a("li"),Tre=a("strong"),Boo=o("prophetnet"),Poo=o(" \u2014 "),AR=a("a"),Ioo=o("ProphetNetTokenizer"),qoo=o(" (ProphetNet model)"),Noo=l(),ms=a("li"),Mre=a("strong"),joo=o("qdqbert"),Doo=o(" \u2014 "),yR=a("a"),Goo=o("BertTokenizer"),Ooo=o(" or "),LR=a("a"),Voo=o("BertTokenizerFast"),Xoo=o(" (QDQBert model)"),zoo=l(),yg=a("li"),Ere=a("strong"),Qoo=o("rag"),Woo=o(" \u2014 "),xR=a("a"),Hoo=o("RagTokenizer"),Uoo=o(" (RAG model)"),Joo=l(),gs=a("li"),Cre=a("strong"),Yoo=o("realm"),Koo=o(" \u2014 "),$R=a("a"),Zoo=o("RealmTokenizer"),ero=o(" or "),kR=a("a"),oro=o("RealmTokenizerFast"),rro=o(" (Realm model)"),tro=l(),hs=a("li"),wre=a("strong"),aro=o("reformer"),nro=o(" \u2014 "),SR=a("a"),sro=o("ReformerTokenizer"),lro=o(" or "),RR=a("a"),iro=o("ReformerTokenizerFast"),dro=o(" (Reformer model)"),cro=l(),ps=a("li"),Are=a("strong"),fro=o("rembert"),mro=o(" \u2014 "),BR=a("a"),gro=o("RemBertTokenizer"),hro=o(" or "),PR=a("a"),pro=o("RemBertTokenizerFast"),uro=o(" (RemBERT model)"),_ro=l(),us=a("li"),yre=a("strong"),bro=o("retribert"),vro=o(" \u2014 "),IR=a("a"),Fro=o("RetriBertTokenizer"),Tro=o(" or "),qR=a("a"),Mro=o("RetriBertTokenizerFast"),Ero=o(" (RetriBERT model)"),Cro=l(),_s=a("li"),Lre=a("strong"),wro=o("roberta"),Aro=o(" \u2014 "),NR=a("a"),yro=o("RobertaTokenizer"),Lro=o(" or "),jR=a("a"),xro=o("RobertaTokenizerFast"),$ro=o(" (RoBERTa model)"),kro=l(),bs=a("li"),xre=a("strong"),Sro=o("roformer"),Rro=o(" \u2014 "),DR=a("a"),Bro=o("RoFormerTokenizer"),Pro=o(" or "),GR=a("a"),Iro=o("RoFormerTokenizerFast"),qro=o(" (RoFormer model)"),Nro=l(),Lg=a("li"),$re=a("strong"),jro=o("speech_to_text"),Dro=o(" \u2014 "),OR=a("a"),Gro=o("Speech2TextTokenizer"),Oro=o(" (Speech2Text model)"),Vro=l(),xg=a("li"),kre=a("strong"),Xro=o("speech_to_text_2"),zro=o(" \u2014 "),VR=a("a"),Qro=o("Speech2Text2Tokenizer"),Wro=o(" (Speech2Text2 model)"),Hro=l(),vs=a("li"),Sre=a("strong"),Uro=o("splinter"),Jro=o(" \u2014 "),XR=a("a"),Yro=o("SplinterTokenizer"),Kro=o(" or "),zR=a("a"),Zro=o("SplinterTokenizerFast"),eto=o(" (Splinter model)"),oto=l(),Fs=a("li"),Rre=a("strong"),rto=o("squeezebert"),tto=o(" \u2014 "),QR=a("a"),ato=o("SqueezeBertTokenizer"),nto=o(" or "),WR=a("a"),sto=o("SqueezeBertTokenizerFast"),lto=o(" (SqueezeBERT model)"),ito=l(),Ts=a("li"),Bre=a("strong"),dto=o("t5"),cto=o(" \u2014 "),HR=a("a"),fto=o("T5Tokenizer"),mto=o(" or "),UR=a("a"),gto=o("T5TokenizerFast"),hto=o(" (T5 model)"),pto=l(),$g=a("li"),Pre=a("strong"),uto=o("tapas"),_to=o(" \u2014 "),JR=a("a"),bto=o("TapasTokenizer"),vto=o(" (TAPAS model)"),Fto=l(),kg=a("li"),Ire=a("strong"),Tto=o("tapex"),Mto=o(" \u2014 "),YR=a("a"),Eto=o("TapexTokenizer"),Cto=o(" (TAPEX model)"),wto=l(),Sg=a("li"),qre=a("strong"),Ato=o("transfo-xl"),yto=o(" \u2014 "),KR=a("a"),Lto=o("TransfoXLTokenizer"),xto=o(" (Transformer-XL model)"),$to=l(),Ms=a("li"),Nre=a("strong"),kto=o("visual_bert"),Sto=o(" \u2014 "),ZR=a("a"),Rto=o("BertTokenizer"),Bto=o(" or "),eB=a("a"),Pto=o("BertTokenizerFast"),Ito=o(" (VisualBert model)"),qto=l(),Rg=a("li"),jre=a("strong"),Nto=o("wav2vec2"),jto=o(" \u2014 "),oB=a("a"),Dto=o("Wav2Vec2CTCTokenizer"),Gto=o(" (Wav2Vec2 model)"),Oto=l(),Bg=a("li"),Dre=a("strong"),Vto=o("wav2vec2_phoneme"),Xto=o(" \u2014 "),rB=a("a"),zto=o("Wav2Vec2PhonemeCTCTokenizer"),Qto=o(" (Wav2Vec2Phoneme model)"),Wto=l(),Es=a("li"),Gre=a("strong"),Hto=o("xglm"),Uto=o(" \u2014 "),tB=a("a"),Jto=o("XGLMTokenizer"),Yto=o(" or "),aB=a("a"),Kto=o("XGLMTokenizerFast"),Zto=o(" (XGLM model)"),eao=l(),Pg=a("li"),Ore=a("strong"),oao=o("xlm"),rao=o(" \u2014 "),nB=a("a"),tao=o("XLMTokenizer"),aao=o(" (XLM model)"),nao=l(),Ig=a("li"),Vre=a("strong"),sao=o("xlm-prophetnet"),lao=o(" \u2014 "),sB=a("a"),iao=o("XLMProphetNetTokenizer"),dao=o(" (XLMProphetNet model)"),cao=l(),Cs=a("li"),Xre=a("strong"),fao=o("xlm-roberta"),mao=o(" \u2014 "),lB=a("a"),gao=o("XLMRobertaTokenizer"),hao=o(" or "),iB=a("a"),pao=o("XLMRobertaTokenizerFast"),uao=o(" (XLM-RoBERTa model)"),_ao=l(),ws=a("li"),zre=a("strong"),bao=o("xlm-roberta-xl"),vao=o(" \u2014 "),dB=a("a"),Fao=o("RobertaTokenizer"),Tao=o(" or "),cB=a("a"),Mao=o("RobertaTokenizerFast"),Eao=o(" (XLM-RoBERTa-XL model)"),Cao=l(),As=a("li"),Qre=a("strong"),wao=o("xlnet"),Aao=o(" \u2014 "),fB=a("a"),yao=o("XLNetTokenizer"),Lao=o(" or "),mB=a("a"),xao=o("XLNetTokenizerFast"),$ao=o(" (XLNet model)"),kao=l(),ys=a("li"),Wre=a("strong"),Sao=o("yoso"),Rao=o(" \u2014 "),gB=a("a"),Bao=o("AlbertTokenizer"),Pao=o(" or "),hB=a("a"),Iao=o("AlbertTokenizerFast"),qao=o(" (YOSO model)"),Nao=l(),F(qg.$$.fragment),jao=l(),Ng=a("div"),F(qA.$$.fragment),Dao=l(),Hre=a("p"),Gao=o("Register a new tokenizer in this mapping."),EBe=l(),mi=a("h2"),jg=a("a"),Ure=a("span"),F(NA.$$.fragment),Oao=l(),Jre=a("span"),Vao=o("AutoFeatureExtractor"),CBe=l(),Ao=a("div"),F(jA.$$.fragment),Xao=l(),DA=a("p"),zao=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),pB=a("a"),Qao=o("AutoFeatureExtractor.from_pretrained()"),Wao=o(" class method."),Hao=l(),GA=a("p"),Uao=o("This class cannot be instantiated directly using "),Yre=a("code"),Jao=o("__init__()"),Yao=o(" (throws an error)."),Kao=l(),Qe=a("div"),F(OA.$$.fragment),Zao=l(),Kre=a("p"),eno=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),ono=l(),Ma=a("p"),rno=o("The feature extractor class to instantiate is selected based on the "),Zre=a("code"),tno=o("model_type"),ano=o(` property of the config object
(either passed as an argument or loaded from `),ete=a("code"),nno=o("pretrained_model_name_or_path"),sno=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),ote=a("code"),lno=o("pretrained_model_name_or_path"),ino=o(":"),dno=l(),te=a("ul"),Dg=a("li"),rte=a("strong"),cno=o("beit"),fno=o(" \u2014 "),uB=a("a"),mno=o("BeitFeatureExtractor"),gno=o(" (BEiT model)"),hno=l(),Gg=a("li"),tte=a("strong"),pno=o("clip"),uno=o(" \u2014 "),_B=a("a"),_no=o("CLIPFeatureExtractor"),bno=o(" (CLIP model)"),vno=l(),Og=a("li"),ate=a("strong"),Fno=o("convnext"),Tno=o(" \u2014 "),bB=a("a"),Mno=o("ConvNextFeatureExtractor"),Eno=o(" (ConvNext model)"),Cno=l(),Vg=a("li"),nte=a("strong"),wno=o("data2vec-audio"),Ano=o(" \u2014 "),vB=a("a"),yno=o("Wav2Vec2FeatureExtractor"),Lno=o(" (Data2VecAudio model)"),xno=l(),Xg=a("li"),ste=a("strong"),$no=o("data2vec-vision"),kno=o(" \u2014 "),FB=a("a"),Sno=o("BeitFeatureExtractor"),Rno=o(" (Data2VecVision model)"),Bno=l(),zg=a("li"),lte=a("strong"),Pno=o("deit"),Ino=o(" \u2014 "),TB=a("a"),qno=o("DeiTFeatureExtractor"),Nno=o(" (DeiT model)"),jno=l(),Qg=a("li"),ite=a("strong"),Dno=o("detr"),Gno=o(" \u2014 "),MB=a("a"),Ono=o("DetrFeatureExtractor"),Vno=o(" (DETR model)"),Xno=l(),Wg=a("li"),dte=a("strong"),zno=o("dpt"),Qno=o(" \u2014 "),EB=a("a"),Wno=o("DPTFeatureExtractor"),Hno=o(" (DPT model)"),Uno=l(),Hg=a("li"),cte=a("strong"),Jno=o("glpn"),Yno=o(" \u2014 "),CB=a("a"),Kno=o("GLPNFeatureExtractor"),Zno=o(" (GLPN model)"),eso=l(),Ug=a("li"),fte=a("strong"),oso=o("hubert"),rso=o(" \u2014 "),wB=a("a"),tso=o("Wav2Vec2FeatureExtractor"),aso=o(" (Hubert model)"),nso=l(),Jg=a("li"),mte=a("strong"),sso=o("layoutlmv2"),lso=o(" \u2014 "),AB=a("a"),iso=o("LayoutLMv2FeatureExtractor"),dso=o(" (LayoutLMv2 model)"),cso=l(),Yg=a("li"),gte=a("strong"),fso=o("maskformer"),mso=o(" \u2014 "),yB=a("a"),gso=o("MaskFormerFeatureExtractor"),hso=o(" (MaskFormer model)"),pso=l(),Kg=a("li"),hte=a("strong"),uso=o("perceiver"),_so=o(" \u2014 "),LB=a("a"),bso=o("PerceiverFeatureExtractor"),vso=o(" (Perceiver model)"),Fso=l(),Zg=a("li"),pte=a("strong"),Tso=o("poolformer"),Mso=o(" \u2014 "),xB=a("a"),Eso=o("PoolFormerFeatureExtractor"),Cso=o(" (PoolFormer model)"),wso=l(),eh=a("li"),ute=a("strong"),Aso=o("regnet"),yso=o(" \u2014 "),$B=a("a"),Lso=o("ConvNextFeatureExtractor"),xso=o(" (RegNet model)"),$so=l(),oh=a("li"),_te=a("strong"),kso=o("resnet"),Sso=o(" \u2014 "),kB=a("a"),Rso=o("ConvNextFeatureExtractor"),Bso=o(" (ResNet model)"),Pso=l(),rh=a("li"),bte=a("strong"),Iso=o("segformer"),qso=o(" \u2014 "),SB=a("a"),Nso=o("SegformerFeatureExtractor"),jso=o(" (SegFormer model)"),Dso=l(),th=a("li"),vte=a("strong"),Gso=o("speech_to_text"),Oso=o(" \u2014 "),RB=a("a"),Vso=o("Speech2TextFeatureExtractor"),Xso=o(" (Speech2Text model)"),zso=l(),ah=a("li"),Fte=a("strong"),Qso=o("swin"),Wso=o(" \u2014 "),BB=a("a"),Hso=o("ViTFeatureExtractor"),Uso=o(" (Swin model)"),Jso=l(),nh=a("li"),Tte=a("strong"),Yso=o("van"),Kso=o(" \u2014 "),PB=a("a"),Zso=o("ConvNextFeatureExtractor"),elo=o(" (VAN model)"),olo=l(),sh=a("li"),Mte=a("strong"),rlo=o("vit"),tlo=o(" \u2014 "),IB=a("a"),alo=o("ViTFeatureExtractor"),nlo=o(" (ViT model)"),slo=l(),lh=a("li"),Ete=a("strong"),llo=o("vit_mae"),ilo=o(" \u2014 "),qB=a("a"),dlo=o("ViTFeatureExtractor"),clo=o(" (ViTMAE model)"),flo=l(),ih=a("li"),Cte=a("strong"),mlo=o("wav2vec2"),glo=o(" \u2014 "),NB=a("a"),hlo=o("Wav2Vec2FeatureExtractor"),plo=o(" (Wav2Vec2 model)"),ulo=l(),dh=a("li"),wte=a("strong"),_lo=o("yolos"),blo=o(" \u2014 "),jB=a("a"),vlo=o("YolosFeatureExtractor"),Flo=o(" (YOLOS model)"),Tlo=l(),F(ch.$$.fragment),Mlo=l(),F(fh.$$.fragment),Elo=l(),mh=a("div"),F(VA.$$.fragment),Clo=l(),Ate=a("p"),wlo=o("Register a new feature extractor for this class."),wBe=l(),gi=a("h2"),gh=a("a"),yte=a("span"),F(XA.$$.fragment),Alo=l(),Lte=a("span"),ylo=o("AutoProcessor"),ABe=l(),yo=a("div"),F(zA.$$.fragment),Llo=l(),QA=a("p"),xlo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),DB=a("a"),$lo=o("AutoProcessor.from_pretrained()"),klo=o(" class method."),Slo=l(),WA=a("p"),Rlo=o("This class cannot be instantiated directly using "),xte=a("code"),Blo=o("__init__()"),Plo=o(" (throws an error)."),Ilo=l(),We=a("div"),F(HA.$$.fragment),qlo=l(),$te=a("p"),Nlo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),jlo=l(),hi=a("p"),Dlo=o("The processor class to instantiate is selected based on the "),kte=a("code"),Glo=o("model_type"),Olo=o(` property of the config object (either
passed as an argument or loaded from `),Ste=a("code"),Vlo=o("pretrained_model_name_or_path"),Xlo=o(" if possible):"),zlo=l(),be=a("ul"),hh=a("li"),Rte=a("strong"),Qlo=o("clip"),Wlo=o(" \u2014 "),GB=a("a"),Hlo=o("CLIPProcessor"),Ulo=o(" (CLIP model)"),Jlo=l(),ph=a("li"),Bte=a("strong"),Ylo=o("layoutlmv2"),Klo=o(" \u2014 "),OB=a("a"),Zlo=o("LayoutLMv2Processor"),eio=o(" (LayoutLMv2 model)"),oio=l(),uh=a("li"),Pte=a("strong"),rio=o("layoutxlm"),tio=o(" \u2014 "),VB=a("a"),aio=o("LayoutXLMProcessor"),nio=o(" (LayoutXLM model)"),sio=l(),_h=a("li"),Ite=a("strong"),lio=o("sew"),iio=o(" \u2014 "),XB=a("a"),dio=o("Wav2Vec2Processor"),cio=o(" (SEW model)"),fio=l(),bh=a("li"),qte=a("strong"),mio=o("sew-d"),gio=o(" \u2014 "),zB=a("a"),hio=o("Wav2Vec2Processor"),pio=o(" (SEW-D model)"),uio=l(),vh=a("li"),Nte=a("strong"),_io=o("speech_to_text"),bio=o(" \u2014 "),QB=a("a"),vio=o("Speech2TextProcessor"),Fio=o(" (Speech2Text model)"),Tio=l(),Fh=a("li"),jte=a("strong"),Mio=o("speech_to_text_2"),Eio=o(" \u2014 "),WB=a("a"),Cio=o("Speech2Text2Processor"),wio=o(" (Speech2Text2 model)"),Aio=l(),Th=a("li"),Dte=a("strong"),yio=o("trocr"),Lio=o(" \u2014 "),HB=a("a"),xio=o("TrOCRProcessor"),$io=o(" (TrOCR model)"),kio=l(),Mh=a("li"),Gte=a("strong"),Sio=o("unispeech"),Rio=o(" \u2014 "),UB=a("a"),Bio=o("Wav2Vec2Processor"),Pio=o(" (UniSpeech model)"),Iio=l(),Eh=a("li"),Ote=a("strong"),qio=o("unispeech-sat"),Nio=o(" \u2014 "),JB=a("a"),jio=o("Wav2Vec2Processor"),Dio=o(" (UniSpeechSat model)"),Gio=l(),Ch=a("li"),Vte=a("strong"),Oio=o("vilt"),Vio=o(" \u2014 "),YB=a("a"),Xio=o("ViltProcessor"),zio=o(" (ViLT model)"),Qio=l(),wh=a("li"),Xte=a("strong"),Wio=o("vision-text-dual-encoder"),Hio=o(" \u2014 "),KB=a("a"),Uio=o("VisionTextDualEncoderProcessor"),Jio=o(" (VisionTextDualEncoder model)"),Yio=l(),Ah=a("li"),zte=a("strong"),Kio=o("wav2vec2"),Zio=o(" \u2014 "),ZB=a("a"),edo=o("Wav2Vec2Processor"),odo=o(" (Wav2Vec2 model)"),rdo=l(),yh=a("li"),Qte=a("strong"),tdo=o("wavlm"),ado=o(" \u2014 "),eP=a("a"),ndo=o("Wav2Vec2Processor"),sdo=o(" (WavLM model)"),ldo=l(),F(Lh.$$.fragment),ido=l(),F(xh.$$.fragment),ddo=l(),$h=a("div"),F(UA.$$.fragment),cdo=l(),Wte=a("p"),fdo=o("Register a new processor for this class."),yBe=l(),pi=a("h2"),kh=a("a"),Hte=a("span"),F(JA.$$.fragment),mdo=l(),Ute=a("span"),gdo=o("AutoModel"),LBe=l(),Lo=a("div"),F(YA.$$.fragment),hdo=l(),ui=a("p"),pdo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),oP=a("a"),udo=o("from_pretrained()"),_do=o(" class method or the "),rP=a("a"),bdo=o("from_config()"),vdo=o(` class
method.`),Fdo=l(),KA=a("p"),Tdo=o("This class cannot be instantiated directly using "),Jte=a("code"),Mdo=o("__init__()"),Edo=o(" (throws an error)."),Cdo=l(),Zr=a("div"),F(ZA.$$.fragment),wdo=l(),Yte=a("p"),Ado=o("Instantiates one of the base model classes of the library from a configuration."),ydo=l(),_i=a("p"),Ldo=o(`Note:
Loading a model from its configuration file does `),Kte=a("strong"),xdo=o("not"),$do=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tP=a("a"),kdo=o("from_pretrained()"),Sdo=o(" to load the model weights."),Rdo=l(),F(Sh.$$.fragment),Bdo=l(),He=a("div"),F(e0.$$.fragment),Pdo=l(),Zte=a("p"),Ido=o("Instantiate one of the base model classes of the library from a pretrained model."),qdo=l(),Ea=a("p"),Ndo=o("The model class to instantiate is selected based on the "),eae=a("code"),jdo=o("model_type"),Ddo=o(` property of the config object (either
passed as an argument or loaded from `),oae=a("code"),Gdo=o("pretrained_model_name_or_path"),Odo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rae=a("code"),Vdo=o("pretrained_model_name_or_path"),Xdo=o(":"),zdo=l(),x=a("ul"),Rh=a("li"),tae=a("strong"),Qdo=o("albert"),Wdo=o(" \u2014 "),aP=a("a"),Hdo=o("AlbertModel"),Udo=o(" (ALBERT model)"),Jdo=l(),Bh=a("li"),aae=a("strong"),Ydo=o("bart"),Kdo=o(" \u2014 "),nP=a("a"),Zdo=o("BartModel"),eco=o(" (BART model)"),oco=l(),Ph=a("li"),nae=a("strong"),rco=o("beit"),tco=o(" \u2014 "),sP=a("a"),aco=o("BeitModel"),nco=o(" (BEiT model)"),sco=l(),Ih=a("li"),sae=a("strong"),lco=o("bert"),ico=o(" \u2014 "),lP=a("a"),dco=o("BertModel"),cco=o(" (BERT model)"),fco=l(),qh=a("li"),lae=a("strong"),mco=o("bert-generation"),gco=o(" \u2014 "),iP=a("a"),hco=o("BertGenerationEncoder"),pco=o(" (Bert Generation model)"),uco=l(),Nh=a("li"),iae=a("strong"),_co=o("big_bird"),bco=o(" \u2014 "),dP=a("a"),vco=o("BigBirdModel"),Fco=o(" (BigBird model)"),Tco=l(),jh=a("li"),dae=a("strong"),Mco=o("bigbird_pegasus"),Eco=o(" \u2014 "),cP=a("a"),Cco=o("BigBirdPegasusModel"),wco=o(" (BigBirdPegasus model)"),Aco=l(),Dh=a("li"),cae=a("strong"),yco=o("blenderbot"),Lco=o(" \u2014 "),fP=a("a"),xco=o("BlenderbotModel"),$co=o(" (Blenderbot model)"),kco=l(),Gh=a("li"),fae=a("strong"),Sco=o("blenderbot-small"),Rco=o(" \u2014 "),mP=a("a"),Bco=o("BlenderbotSmallModel"),Pco=o(" (BlenderbotSmall model)"),Ico=l(),Oh=a("li"),mae=a("strong"),qco=o("camembert"),Nco=o(" \u2014 "),gP=a("a"),jco=o("CamembertModel"),Dco=o(" (CamemBERT model)"),Gco=l(),Vh=a("li"),gae=a("strong"),Oco=o("canine"),Vco=o(" \u2014 "),hP=a("a"),Xco=o("CanineModel"),zco=o(" (Canine model)"),Qco=l(),Xh=a("li"),hae=a("strong"),Wco=o("clip"),Hco=o(" \u2014 "),pP=a("a"),Uco=o("CLIPModel"),Jco=o(" (CLIP model)"),Yco=l(),zh=a("li"),pae=a("strong"),Kco=o("convbert"),Zco=o(" \u2014 "),uP=a("a"),efo=o("ConvBertModel"),ofo=o(" (ConvBERT model)"),rfo=l(),Qh=a("li"),uae=a("strong"),tfo=o("convnext"),afo=o(" \u2014 "),_P=a("a"),nfo=o("ConvNextModel"),sfo=o(" (ConvNext model)"),lfo=l(),Wh=a("li"),_ae=a("strong"),ifo=o("ctrl"),dfo=o(" \u2014 "),bP=a("a"),cfo=o("CTRLModel"),ffo=o(" (CTRL model)"),mfo=l(),Hh=a("li"),bae=a("strong"),gfo=o("data2vec-audio"),hfo=o(" \u2014 "),vP=a("a"),pfo=o("Data2VecAudioModel"),ufo=o(" (Data2VecAudio model)"),_fo=l(),Uh=a("li"),vae=a("strong"),bfo=o("data2vec-text"),vfo=o(" \u2014 "),FP=a("a"),Ffo=o("Data2VecTextModel"),Tfo=o(" (Data2VecText model)"),Mfo=l(),Jh=a("li"),Fae=a("strong"),Efo=o("data2vec-vision"),Cfo=o(" \u2014 "),TP=a("a"),wfo=o("Data2VecVisionModel"),Afo=o(" (Data2VecVision model)"),yfo=l(),Yh=a("li"),Tae=a("strong"),Lfo=o("deberta"),xfo=o(" \u2014 "),MP=a("a"),$fo=o("DebertaModel"),kfo=o(" (DeBERTa model)"),Sfo=l(),Kh=a("li"),Mae=a("strong"),Rfo=o("deberta-v2"),Bfo=o(" \u2014 "),EP=a("a"),Pfo=o("DebertaV2Model"),Ifo=o(" (DeBERTa-v2 model)"),qfo=l(),Zh=a("li"),Eae=a("strong"),Nfo=o("decision_transformer"),jfo=o(" \u2014 "),CP=a("a"),Dfo=o("DecisionTransformerModel"),Gfo=o(" (Decision Transformer model)"),Ofo=l(),ep=a("li"),Cae=a("strong"),Vfo=o("deit"),Xfo=o(" \u2014 "),wP=a("a"),zfo=o("DeiTModel"),Qfo=o(" (DeiT model)"),Wfo=l(),op=a("li"),wae=a("strong"),Hfo=o("detr"),Ufo=o(" \u2014 "),AP=a("a"),Jfo=o("DetrModel"),Yfo=o(" (DETR model)"),Kfo=l(),rp=a("li"),Aae=a("strong"),Zfo=o("distilbert"),emo=o(" \u2014 "),yP=a("a"),omo=o("DistilBertModel"),rmo=o(" (DistilBERT model)"),tmo=l(),tp=a("li"),yae=a("strong"),amo=o("dpr"),nmo=o(" \u2014 "),LP=a("a"),smo=o("DPRQuestionEncoder"),lmo=o(" (DPR model)"),imo=l(),ap=a("li"),Lae=a("strong"),dmo=o("dpt"),cmo=o(" \u2014 "),xP=a("a"),fmo=o("DPTModel"),mmo=o(" (DPT model)"),gmo=l(),np=a("li"),xae=a("strong"),hmo=o("electra"),pmo=o(" \u2014 "),$P=a("a"),umo=o("ElectraModel"),_mo=o(" (ELECTRA model)"),bmo=l(),sp=a("li"),$ae=a("strong"),vmo=o("flaubert"),Fmo=o(" \u2014 "),kP=a("a"),Tmo=o("FlaubertModel"),Mmo=o(" (FlauBERT model)"),Emo=l(),lp=a("li"),kae=a("strong"),Cmo=o("fnet"),wmo=o(" \u2014 "),SP=a("a"),Amo=o("FNetModel"),ymo=o(" (FNet model)"),Lmo=l(),ip=a("li"),Sae=a("strong"),xmo=o("fsmt"),$mo=o(" \u2014 "),RP=a("a"),kmo=o("FSMTModel"),Smo=o(" (FairSeq Machine-Translation model)"),Rmo=l(),Ls=a("li"),Rae=a("strong"),Bmo=o("funnel"),Pmo=o(" \u2014 "),BP=a("a"),Imo=o("FunnelModel"),qmo=o(" or "),PP=a("a"),Nmo=o("FunnelBaseModel"),jmo=o(" (Funnel Transformer model)"),Dmo=l(),dp=a("li"),Bae=a("strong"),Gmo=o("glpn"),Omo=o(" \u2014 "),IP=a("a"),Vmo=o("GLPNModel"),Xmo=o(" (GLPN model)"),zmo=l(),cp=a("li"),Pae=a("strong"),Qmo=o("gpt2"),Wmo=o(" \u2014 "),qP=a("a"),Hmo=o("GPT2Model"),Umo=o(" (OpenAI GPT-2 model)"),Jmo=l(),fp=a("li"),Iae=a("strong"),Ymo=o("gpt_neo"),Kmo=o(" \u2014 "),NP=a("a"),Zmo=o("GPTNeoModel"),ego=o(" (GPT Neo model)"),ogo=l(),mp=a("li"),qae=a("strong"),rgo=o("gptj"),tgo=o(" \u2014 "),jP=a("a"),ago=o("GPTJModel"),ngo=o(" (GPT-J model)"),sgo=l(),gp=a("li"),Nae=a("strong"),lgo=o("hubert"),igo=o(" \u2014 "),DP=a("a"),dgo=o("HubertModel"),cgo=o(" (Hubert model)"),fgo=l(),hp=a("li"),jae=a("strong"),mgo=o("ibert"),ggo=o(" \u2014 "),GP=a("a"),hgo=o("IBertModel"),pgo=o(" (I-BERT model)"),ugo=l(),pp=a("li"),Dae=a("strong"),_go=o("imagegpt"),bgo=o(" \u2014 "),OP=a("a"),vgo=o("ImageGPTModel"),Fgo=o(" (ImageGPT model)"),Tgo=l(),up=a("li"),Gae=a("strong"),Mgo=o("layoutlm"),Ego=o(" \u2014 "),VP=a("a"),Cgo=o("LayoutLMModel"),wgo=o(" (LayoutLM model)"),Ago=l(),_p=a("li"),Oae=a("strong"),ygo=o("layoutlmv2"),Lgo=o(" \u2014 "),XP=a("a"),xgo=o("LayoutLMv2Model"),$go=o(" (LayoutLMv2 model)"),kgo=l(),bp=a("li"),Vae=a("strong"),Sgo=o("led"),Rgo=o(" \u2014 "),zP=a("a"),Bgo=o("LEDModel"),Pgo=o(" (LED model)"),Igo=l(),vp=a("li"),Xae=a("strong"),qgo=o("longformer"),Ngo=o(" \u2014 "),QP=a("a"),jgo=o("LongformerModel"),Dgo=o(" (Longformer model)"),Ggo=l(),Fp=a("li"),zae=a("strong"),Ogo=o("luke"),Vgo=o(" \u2014 "),WP=a("a"),Xgo=o("LukeModel"),zgo=o(" (LUKE model)"),Qgo=l(),Tp=a("li"),Qae=a("strong"),Wgo=o("lxmert"),Hgo=o(" \u2014 "),HP=a("a"),Ugo=o("LxmertModel"),Jgo=o(" (LXMERT model)"),Ygo=l(),Mp=a("li"),Wae=a("strong"),Kgo=o("m2m_100"),Zgo=o(" \u2014 "),UP=a("a"),eho=o("M2M100Model"),oho=o(" (M2M100 model)"),rho=l(),Ep=a("li"),Hae=a("strong"),tho=o("marian"),aho=o(" \u2014 "),JP=a("a"),nho=o("MarianModel"),sho=o(" (Marian model)"),lho=l(),Cp=a("li"),Uae=a("strong"),iho=o("maskformer"),dho=o(" \u2014 "),YP=a("a"),cho=o("MaskFormerModel"),fho=o(" (MaskFormer model)"),mho=l(),wp=a("li"),Jae=a("strong"),gho=o("mbart"),hho=o(" \u2014 "),KP=a("a"),pho=o("MBartModel"),uho=o(" (mBART model)"),_ho=l(),Ap=a("li"),Yae=a("strong"),bho=o("megatron-bert"),vho=o(" \u2014 "),ZP=a("a"),Fho=o("MegatronBertModel"),Tho=o(" (MegatronBert model)"),Mho=l(),yp=a("li"),Kae=a("strong"),Eho=o("mobilebert"),Cho=o(" \u2014 "),eI=a("a"),who=o("MobileBertModel"),Aho=o(" (MobileBERT model)"),yho=l(),Lp=a("li"),Zae=a("strong"),Lho=o("mpnet"),xho=o(" \u2014 "),oI=a("a"),$ho=o("MPNetModel"),kho=o(" (MPNet model)"),Sho=l(),xp=a("li"),ene=a("strong"),Rho=o("mt5"),Bho=o(" \u2014 "),rI=a("a"),Pho=o("MT5Model"),Iho=o(" (mT5 model)"),qho=l(),$p=a("li"),one=a("strong"),Nho=o("nystromformer"),jho=o(" \u2014 "),tI=a("a"),Dho=o("NystromformerModel"),Gho=o(" (Nystromformer model)"),Oho=l(),kp=a("li"),rne=a("strong"),Vho=o("openai-gpt"),Xho=o(" \u2014 "),aI=a("a"),zho=o("OpenAIGPTModel"),Qho=o(" (OpenAI GPT model)"),Who=l(),Sp=a("li"),tne=a("strong"),Hho=o("pegasus"),Uho=o(" \u2014 "),nI=a("a"),Jho=o("PegasusModel"),Yho=o(" (Pegasus model)"),Kho=l(),Rp=a("li"),ane=a("strong"),Zho=o("perceiver"),epo=o(" \u2014 "),sI=a("a"),opo=o("PerceiverModel"),rpo=o(" (Perceiver model)"),tpo=l(),Bp=a("li"),nne=a("strong"),apo=o("plbart"),npo=o(" \u2014 "),lI=a("a"),spo=o("PLBartModel"),lpo=o(" (PLBart model)"),ipo=l(),Pp=a("li"),sne=a("strong"),dpo=o("poolformer"),cpo=o(" \u2014 "),iI=a("a"),fpo=o("PoolFormerModel"),mpo=o(" (PoolFormer model)"),gpo=l(),Ip=a("li"),lne=a("strong"),hpo=o("prophetnet"),ppo=o(" \u2014 "),dI=a("a"),upo=o("ProphetNetModel"),_po=o(" (ProphetNet model)"),bpo=l(),qp=a("li"),ine=a("strong"),vpo=o("qdqbert"),Fpo=o(" \u2014 "),cI=a("a"),Tpo=o("QDQBertModel"),Mpo=o(" (QDQBert model)"),Epo=l(),Np=a("li"),dne=a("strong"),Cpo=o("reformer"),wpo=o(" \u2014 "),fI=a("a"),Apo=o("ReformerModel"),ypo=o(" (Reformer model)"),Lpo=l(),jp=a("li"),cne=a("strong"),xpo=o("regnet"),$po=o(" \u2014 "),mI=a("a"),kpo=o("RegNetModel"),Spo=o(" (RegNet model)"),Rpo=l(),Dp=a("li"),fne=a("strong"),Bpo=o("rembert"),Ppo=o(" \u2014 "),gI=a("a"),Ipo=o("RemBertModel"),qpo=o(" (RemBERT model)"),Npo=l(),Gp=a("li"),mne=a("strong"),jpo=o("resnet"),Dpo=o(" \u2014 "),hI=a("a"),Gpo=o("ResNetModel"),Opo=o(" (ResNet model)"),Vpo=l(),Op=a("li"),gne=a("strong"),Xpo=o("retribert"),zpo=o(" \u2014 "),pI=a("a"),Qpo=o("RetriBertModel"),Wpo=o(" (RetriBERT model)"),Hpo=l(),Vp=a("li"),hne=a("strong"),Upo=o("roberta"),Jpo=o(" \u2014 "),uI=a("a"),Ypo=o("RobertaModel"),Kpo=o(" (RoBERTa model)"),Zpo=l(),Xp=a("li"),pne=a("strong"),euo=o("roformer"),ouo=o(" \u2014 "),_I=a("a"),ruo=o("RoFormerModel"),tuo=o(" (RoFormer model)"),auo=l(),zp=a("li"),une=a("strong"),nuo=o("segformer"),suo=o(" \u2014 "),bI=a("a"),luo=o("SegformerModel"),iuo=o(" (SegFormer model)"),duo=l(),Qp=a("li"),_ne=a("strong"),cuo=o("sew"),fuo=o(" \u2014 "),vI=a("a"),muo=o("SEWModel"),guo=o(" (SEW model)"),huo=l(),Wp=a("li"),bne=a("strong"),puo=o("sew-d"),uuo=o(" \u2014 "),FI=a("a"),_uo=o("SEWDModel"),buo=o(" (SEW-D model)"),vuo=l(),Hp=a("li"),vne=a("strong"),Fuo=o("speech_to_text"),Tuo=o(" \u2014 "),TI=a("a"),Muo=o("Speech2TextModel"),Euo=o(" (Speech2Text model)"),Cuo=l(),Up=a("li"),Fne=a("strong"),wuo=o("splinter"),Auo=o(" \u2014 "),MI=a("a"),yuo=o("SplinterModel"),Luo=o(" (Splinter model)"),xuo=l(),Jp=a("li"),Tne=a("strong"),$uo=o("squeezebert"),kuo=o(" \u2014 "),EI=a("a"),Suo=o("SqueezeBertModel"),Ruo=o(" (SqueezeBERT model)"),Buo=l(),Yp=a("li"),Mne=a("strong"),Puo=o("swin"),Iuo=o(" \u2014 "),CI=a("a"),quo=o("SwinModel"),Nuo=o(" (Swin model)"),juo=l(),Kp=a("li"),Ene=a("strong"),Duo=o("t5"),Guo=o(" \u2014 "),wI=a("a"),Ouo=o("T5Model"),Vuo=o(" (T5 model)"),Xuo=l(),Zp=a("li"),Cne=a("strong"),zuo=o("tapas"),Quo=o(" \u2014 "),AI=a("a"),Wuo=o("TapasModel"),Huo=o(" (TAPAS model)"),Uuo=l(),eu=a("li"),wne=a("strong"),Juo=o("transfo-xl"),Yuo=o(" \u2014 "),yI=a("a"),Kuo=o("TransfoXLModel"),Zuo=o(" (Transformer-XL model)"),e_o=l(),ou=a("li"),Ane=a("strong"),o_o=o("unispeech"),r_o=o(" \u2014 "),LI=a("a"),t_o=o("UniSpeechModel"),a_o=o(" (UniSpeech model)"),n_o=l(),ru=a("li"),yne=a("strong"),s_o=o("unispeech-sat"),l_o=o(" \u2014 "),xI=a("a"),i_o=o("UniSpeechSatModel"),d_o=o(" (UniSpeechSat model)"),c_o=l(),tu=a("li"),Lne=a("strong"),f_o=o("van"),m_o=o(" \u2014 "),$I=a("a"),g_o=o("VanModel"),h_o=o(" (VAN model)"),p_o=l(),au=a("li"),xne=a("strong"),u_o=o("vilt"),__o=o(" \u2014 "),kI=a("a"),b_o=o("ViltModel"),v_o=o(" (ViLT model)"),F_o=l(),nu=a("li"),$ne=a("strong"),T_o=o("vision-text-dual-encoder"),M_o=o(" \u2014 "),SI=a("a"),E_o=o("VisionTextDualEncoderModel"),C_o=o(" (VisionTextDualEncoder model)"),w_o=l(),su=a("li"),kne=a("strong"),A_o=o("visual_bert"),y_o=o(" \u2014 "),RI=a("a"),L_o=o("VisualBertModel"),x_o=o(" (VisualBert model)"),$_o=l(),lu=a("li"),Sne=a("strong"),k_o=o("vit"),S_o=o(" \u2014 "),BI=a("a"),R_o=o("ViTModel"),B_o=o(" (ViT model)"),P_o=l(),iu=a("li"),Rne=a("strong"),I_o=o("vit_mae"),q_o=o(" \u2014 "),PI=a("a"),N_o=o("ViTMAEModel"),j_o=o(" (ViTMAE model)"),D_o=l(),du=a("li"),Bne=a("strong"),G_o=o("wav2vec2"),O_o=o(" \u2014 "),II=a("a"),V_o=o("Wav2Vec2Model"),X_o=o(" (Wav2Vec2 model)"),z_o=l(),cu=a("li"),Pne=a("strong"),Q_o=o("wavlm"),W_o=o(" \u2014 "),qI=a("a"),H_o=o("WavLMModel"),U_o=o(" (WavLM model)"),J_o=l(),fu=a("li"),Ine=a("strong"),Y_o=o("xglm"),K_o=o(" \u2014 "),NI=a("a"),Z_o=o("XGLMModel"),e2o=o(" (XGLM model)"),o2o=l(),mu=a("li"),qne=a("strong"),r2o=o("xlm"),t2o=o(" \u2014 "),jI=a("a"),a2o=o("XLMModel"),n2o=o(" (XLM model)"),s2o=l(),gu=a("li"),Nne=a("strong"),l2o=o("xlm-prophetnet"),i2o=o(" \u2014 "),DI=a("a"),d2o=o("XLMProphetNetModel"),c2o=o(" (XLMProphetNet model)"),f2o=l(),hu=a("li"),jne=a("strong"),m2o=o("xlm-roberta"),g2o=o(" \u2014 "),GI=a("a"),h2o=o("XLMRobertaModel"),p2o=o(" (XLM-RoBERTa model)"),u2o=l(),pu=a("li"),Dne=a("strong"),_2o=o("xlm-roberta-xl"),b2o=o(" \u2014 "),OI=a("a"),v2o=o("XLMRobertaXLModel"),F2o=o(" (XLM-RoBERTa-XL model)"),T2o=l(),uu=a("li"),Gne=a("strong"),M2o=o("xlnet"),E2o=o(" \u2014 "),VI=a("a"),C2o=o("XLNetModel"),w2o=o(" (XLNet model)"),A2o=l(),_u=a("li"),One=a("strong"),y2o=o("yolos"),L2o=o(" \u2014 "),XI=a("a"),x2o=o("YolosModel"),$2o=o(" (YOLOS model)"),k2o=l(),bu=a("li"),Vne=a("strong"),S2o=o("yoso"),R2o=o(" \u2014 "),zI=a("a"),B2o=o("YosoModel"),P2o=o(" (YOSO model)"),I2o=l(),vu=a("p"),q2o=o("The model is set in evaluation mode by default using "),Xne=a("code"),N2o=o("model.eval()"),j2o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zne=a("code"),D2o=o("model.train()"),G2o=l(),F(Fu.$$.fragment),xBe=l(),bi=a("h2"),Tu=a("a"),Qne=a("span"),F(o0.$$.fragment),O2o=l(),Wne=a("span"),V2o=o("AutoModelForPreTraining"),$Be=l(),xo=a("div"),F(r0.$$.fragment),X2o=l(),vi=a("p"),z2o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),QI=a("a"),Q2o=o("from_pretrained()"),W2o=o(" class method or the "),WI=a("a"),H2o=o("from_config()"),U2o=o(` class
method.`),J2o=l(),t0=a("p"),Y2o=o("This class cannot be instantiated directly using "),Hne=a("code"),K2o=o("__init__()"),Z2o=o(" (throws an error)."),e6o=l(),et=a("div"),F(a0.$$.fragment),o6o=l(),Une=a("p"),r6o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),t6o=l(),Fi=a("p"),a6o=o(`Note:
Loading a model from its configuration file does `),Jne=a("strong"),n6o=o("not"),s6o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HI=a("a"),l6o=o("from_pretrained()"),i6o=o(" to load the model weights."),d6o=l(),F(Mu.$$.fragment),c6o=l(),Ue=a("div"),F(n0.$$.fragment),f6o=l(),Yne=a("p"),m6o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),g6o=l(),Ca=a("p"),h6o=o("The model class to instantiate is selected based on the "),Kne=a("code"),p6o=o("model_type"),u6o=o(` property of the config object (either
passed as an argument or loaded from `),Zne=a("code"),_6o=o("pretrained_model_name_or_path"),b6o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ese=a("code"),v6o=o("pretrained_model_name_or_path"),F6o=o(":"),T6o=l(),G=a("ul"),Eu=a("li"),ose=a("strong"),M6o=o("albert"),E6o=o(" \u2014 "),UI=a("a"),C6o=o("AlbertForPreTraining"),w6o=o(" (ALBERT model)"),A6o=l(),Cu=a("li"),rse=a("strong"),y6o=o("bart"),L6o=o(" \u2014 "),JI=a("a"),x6o=o("BartForConditionalGeneration"),$6o=o(" (BART model)"),k6o=l(),wu=a("li"),tse=a("strong"),S6o=o("bert"),R6o=o(" \u2014 "),YI=a("a"),B6o=o("BertForPreTraining"),P6o=o(" (BERT model)"),I6o=l(),Au=a("li"),ase=a("strong"),q6o=o("big_bird"),N6o=o(" \u2014 "),KI=a("a"),j6o=o("BigBirdForPreTraining"),D6o=o(" (BigBird model)"),G6o=l(),yu=a("li"),nse=a("strong"),O6o=o("camembert"),V6o=o(" \u2014 "),ZI=a("a"),X6o=o("CamembertForMaskedLM"),z6o=o(" (CamemBERT model)"),Q6o=l(),Lu=a("li"),sse=a("strong"),W6o=o("ctrl"),H6o=o(" \u2014 "),eq=a("a"),U6o=o("CTRLLMHeadModel"),J6o=o(" (CTRL model)"),Y6o=l(),xu=a("li"),lse=a("strong"),K6o=o("data2vec-text"),Z6o=o(" \u2014 "),oq=a("a"),e1o=o("Data2VecTextForMaskedLM"),o1o=o(" (Data2VecText model)"),r1o=l(),$u=a("li"),ise=a("strong"),t1o=o("deberta"),a1o=o(" \u2014 "),rq=a("a"),n1o=o("DebertaForMaskedLM"),s1o=o(" (DeBERTa model)"),l1o=l(),ku=a("li"),dse=a("strong"),i1o=o("deberta-v2"),d1o=o(" \u2014 "),tq=a("a"),c1o=o("DebertaV2ForMaskedLM"),f1o=o(" (DeBERTa-v2 model)"),m1o=l(),Su=a("li"),cse=a("strong"),g1o=o("distilbert"),h1o=o(" \u2014 "),aq=a("a"),p1o=o("DistilBertForMaskedLM"),u1o=o(" (DistilBERT model)"),_1o=l(),Ru=a("li"),fse=a("strong"),b1o=o("electra"),v1o=o(" \u2014 "),nq=a("a"),F1o=o("ElectraForPreTraining"),T1o=o(" (ELECTRA model)"),M1o=l(),Bu=a("li"),mse=a("strong"),E1o=o("flaubert"),C1o=o(" \u2014 "),sq=a("a"),w1o=o("FlaubertWithLMHeadModel"),A1o=o(" (FlauBERT model)"),y1o=l(),Pu=a("li"),gse=a("strong"),L1o=o("fnet"),x1o=o(" \u2014 "),lq=a("a"),$1o=o("FNetForPreTraining"),k1o=o(" (FNet model)"),S1o=l(),Iu=a("li"),hse=a("strong"),R1o=o("fsmt"),B1o=o(" \u2014 "),iq=a("a"),P1o=o("FSMTForConditionalGeneration"),I1o=o(" (FairSeq Machine-Translation model)"),q1o=l(),qu=a("li"),pse=a("strong"),N1o=o("funnel"),j1o=o(" \u2014 "),dq=a("a"),D1o=o("FunnelForPreTraining"),G1o=o(" (Funnel Transformer model)"),O1o=l(),Nu=a("li"),use=a("strong"),V1o=o("gpt2"),X1o=o(" \u2014 "),cq=a("a"),z1o=o("GPT2LMHeadModel"),Q1o=o(" (OpenAI GPT-2 model)"),W1o=l(),ju=a("li"),_se=a("strong"),H1o=o("ibert"),U1o=o(" \u2014 "),fq=a("a"),J1o=o("IBertForMaskedLM"),Y1o=o(" (I-BERT model)"),K1o=l(),Du=a("li"),bse=a("strong"),Z1o=o("layoutlm"),ebo=o(" \u2014 "),mq=a("a"),obo=o("LayoutLMForMaskedLM"),rbo=o(" (LayoutLM model)"),tbo=l(),Gu=a("li"),vse=a("strong"),abo=o("longformer"),nbo=o(" \u2014 "),gq=a("a"),sbo=o("LongformerForMaskedLM"),lbo=o(" (Longformer model)"),ibo=l(),Ou=a("li"),Fse=a("strong"),dbo=o("lxmert"),cbo=o(" \u2014 "),hq=a("a"),fbo=o("LxmertForPreTraining"),mbo=o(" (LXMERT model)"),gbo=l(),Vu=a("li"),Tse=a("strong"),hbo=o("megatron-bert"),pbo=o(" \u2014 "),pq=a("a"),ubo=o("MegatronBertForPreTraining"),_bo=o(" (MegatronBert model)"),bbo=l(),Xu=a("li"),Mse=a("strong"),vbo=o("mobilebert"),Fbo=o(" \u2014 "),uq=a("a"),Tbo=o("MobileBertForPreTraining"),Mbo=o(" (MobileBERT model)"),Ebo=l(),zu=a("li"),Ese=a("strong"),Cbo=o("mpnet"),wbo=o(" \u2014 "),_q=a("a"),Abo=o("MPNetForMaskedLM"),ybo=o(" (MPNet model)"),Lbo=l(),Qu=a("li"),Cse=a("strong"),xbo=o("openai-gpt"),$bo=o(" \u2014 "),bq=a("a"),kbo=o("OpenAIGPTLMHeadModel"),Sbo=o(" (OpenAI GPT model)"),Rbo=l(),Wu=a("li"),wse=a("strong"),Bbo=o("retribert"),Pbo=o(" \u2014 "),vq=a("a"),Ibo=o("RetriBertModel"),qbo=o(" (RetriBERT model)"),Nbo=l(),Hu=a("li"),Ase=a("strong"),jbo=o("roberta"),Dbo=o(" \u2014 "),Fq=a("a"),Gbo=o("RobertaForMaskedLM"),Obo=o(" (RoBERTa model)"),Vbo=l(),Uu=a("li"),yse=a("strong"),Xbo=o("squeezebert"),zbo=o(" \u2014 "),Tq=a("a"),Qbo=o("SqueezeBertForMaskedLM"),Wbo=o(" (SqueezeBERT model)"),Hbo=l(),Ju=a("li"),Lse=a("strong"),Ubo=o("t5"),Jbo=o(" \u2014 "),Mq=a("a"),Ybo=o("T5ForConditionalGeneration"),Kbo=o(" (T5 model)"),Zbo=l(),Yu=a("li"),xse=a("strong"),evo=o("tapas"),ovo=o(" \u2014 "),Eq=a("a"),rvo=o("TapasForMaskedLM"),tvo=o(" (TAPAS model)"),avo=l(),Ku=a("li"),$se=a("strong"),nvo=o("transfo-xl"),svo=o(" \u2014 "),Cq=a("a"),lvo=o("TransfoXLLMHeadModel"),ivo=o(" (Transformer-XL model)"),dvo=l(),Zu=a("li"),kse=a("strong"),cvo=o("unispeech"),fvo=o(" \u2014 "),wq=a("a"),mvo=o("UniSpeechForPreTraining"),gvo=o(" (UniSpeech model)"),hvo=l(),e_=a("li"),Sse=a("strong"),pvo=o("unispeech-sat"),uvo=o(" \u2014 "),Aq=a("a"),_vo=o("UniSpeechSatForPreTraining"),bvo=o(" (UniSpeechSat model)"),vvo=l(),o_=a("li"),Rse=a("strong"),Fvo=o("visual_bert"),Tvo=o(" \u2014 "),yq=a("a"),Mvo=o("VisualBertForPreTraining"),Evo=o(" (VisualBert model)"),Cvo=l(),r_=a("li"),Bse=a("strong"),wvo=o("vit_mae"),Avo=o(" \u2014 "),Lq=a("a"),yvo=o("ViTMAEForPreTraining"),Lvo=o(" (ViTMAE model)"),xvo=l(),t_=a("li"),Pse=a("strong"),$vo=o("wav2vec2"),kvo=o(" \u2014 "),xq=a("a"),Svo=o("Wav2Vec2ForPreTraining"),Rvo=o(" (Wav2Vec2 model)"),Bvo=l(),a_=a("li"),Ise=a("strong"),Pvo=o("xlm"),Ivo=o(" \u2014 "),$q=a("a"),qvo=o("XLMWithLMHeadModel"),Nvo=o(" (XLM model)"),jvo=l(),n_=a("li"),qse=a("strong"),Dvo=o("xlm-roberta"),Gvo=o(" \u2014 "),kq=a("a"),Ovo=o("XLMRobertaForMaskedLM"),Vvo=o(" (XLM-RoBERTa model)"),Xvo=l(),s_=a("li"),Nse=a("strong"),zvo=o("xlm-roberta-xl"),Qvo=o(" \u2014 "),Sq=a("a"),Wvo=o("XLMRobertaXLForMaskedLM"),Hvo=o(" (XLM-RoBERTa-XL model)"),Uvo=l(),l_=a("li"),jse=a("strong"),Jvo=o("xlnet"),Yvo=o(" \u2014 "),Rq=a("a"),Kvo=o("XLNetLMHeadModel"),Zvo=o(" (XLNet model)"),eFo=l(),i_=a("p"),oFo=o("The model is set in evaluation mode by default using "),Dse=a("code"),rFo=o("model.eval()"),tFo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gse=a("code"),aFo=o("model.train()"),nFo=l(),F(d_.$$.fragment),kBe=l(),Ti=a("h2"),c_=a("a"),Ose=a("span"),F(s0.$$.fragment),sFo=l(),Vse=a("span"),lFo=o("AutoModelForCausalLM"),SBe=l(),$o=a("div"),F(l0.$$.fragment),iFo=l(),Mi=a("p"),dFo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Bq=a("a"),cFo=o("from_pretrained()"),fFo=o(" class method or the "),Pq=a("a"),mFo=o("from_config()"),gFo=o(` class
method.`),hFo=l(),i0=a("p"),pFo=o("This class cannot be instantiated directly using "),Xse=a("code"),uFo=o("__init__()"),_Fo=o(" (throws an error)."),bFo=l(),ot=a("div"),F(d0.$$.fragment),vFo=l(),zse=a("p"),FFo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),TFo=l(),Ei=a("p"),MFo=o(`Note:
Loading a model from its configuration file does `),Qse=a("strong"),EFo=o("not"),CFo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Iq=a("a"),wFo=o("from_pretrained()"),AFo=o(" to load the model weights."),yFo=l(),F(f_.$$.fragment),LFo=l(),Je=a("div"),F(c0.$$.fragment),xFo=l(),Wse=a("p"),$Fo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),kFo=l(),wa=a("p"),SFo=o("The model class to instantiate is selected based on the "),Hse=a("code"),RFo=o("model_type"),BFo=o(` property of the config object (either
passed as an argument or loaded from `),Use=a("code"),PFo=o("pretrained_model_name_or_path"),IFo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jse=a("code"),qFo=o("pretrained_model_name_or_path"),NFo=o(":"),jFo=l(),z=a("ul"),m_=a("li"),Yse=a("strong"),DFo=o("bart"),GFo=o(" \u2014 "),qq=a("a"),OFo=o("BartForCausalLM"),VFo=o(" (BART model)"),XFo=l(),g_=a("li"),Kse=a("strong"),zFo=o("bert"),QFo=o(" \u2014 "),Nq=a("a"),WFo=o("BertLMHeadModel"),HFo=o(" (BERT model)"),UFo=l(),h_=a("li"),Zse=a("strong"),JFo=o("bert-generation"),YFo=o(" \u2014 "),jq=a("a"),KFo=o("BertGenerationDecoder"),ZFo=o(" (Bert Generation model)"),eTo=l(),p_=a("li"),ele=a("strong"),oTo=o("big_bird"),rTo=o(" \u2014 "),Dq=a("a"),tTo=o("BigBirdForCausalLM"),aTo=o(" (BigBird model)"),nTo=l(),u_=a("li"),ole=a("strong"),sTo=o("bigbird_pegasus"),lTo=o(" \u2014 "),Gq=a("a"),iTo=o("BigBirdPegasusForCausalLM"),dTo=o(" (BigBirdPegasus model)"),cTo=l(),__=a("li"),rle=a("strong"),fTo=o("blenderbot"),mTo=o(" \u2014 "),Oq=a("a"),gTo=o("BlenderbotForCausalLM"),hTo=o(" (Blenderbot model)"),pTo=l(),b_=a("li"),tle=a("strong"),uTo=o("blenderbot-small"),_To=o(" \u2014 "),Vq=a("a"),bTo=o("BlenderbotSmallForCausalLM"),vTo=o(" (BlenderbotSmall model)"),FTo=l(),v_=a("li"),ale=a("strong"),TTo=o("camembert"),MTo=o(" \u2014 "),Xq=a("a"),ETo=o("CamembertForCausalLM"),CTo=o(" (CamemBERT model)"),wTo=l(),F_=a("li"),nle=a("strong"),ATo=o("ctrl"),yTo=o(" \u2014 "),zq=a("a"),LTo=o("CTRLLMHeadModel"),xTo=o(" (CTRL model)"),$To=l(),T_=a("li"),sle=a("strong"),kTo=o("data2vec-text"),STo=o(" \u2014 "),Qq=a("a"),RTo=o("Data2VecTextForCausalLM"),BTo=o(" (Data2VecText model)"),PTo=l(),M_=a("li"),lle=a("strong"),ITo=o("electra"),qTo=o(" \u2014 "),Wq=a("a"),NTo=o("ElectraForCausalLM"),jTo=o(" (ELECTRA model)"),DTo=l(),E_=a("li"),ile=a("strong"),GTo=o("gpt2"),OTo=o(" \u2014 "),Hq=a("a"),VTo=o("GPT2LMHeadModel"),XTo=o(" (OpenAI GPT-2 model)"),zTo=l(),C_=a("li"),dle=a("strong"),QTo=o("gpt_neo"),WTo=o(" \u2014 "),Uq=a("a"),HTo=o("GPTNeoForCausalLM"),UTo=o(" (GPT Neo model)"),JTo=l(),w_=a("li"),cle=a("strong"),YTo=o("gptj"),KTo=o(" \u2014 "),Jq=a("a"),ZTo=o("GPTJForCausalLM"),e8o=o(" (GPT-J model)"),o8o=l(),A_=a("li"),fle=a("strong"),r8o=o("marian"),t8o=o(" \u2014 "),Yq=a("a"),a8o=o("MarianForCausalLM"),n8o=o(" (Marian model)"),s8o=l(),y_=a("li"),mle=a("strong"),l8o=o("mbart"),i8o=o(" \u2014 "),Kq=a("a"),d8o=o("MBartForCausalLM"),c8o=o(" (mBART model)"),f8o=l(),L_=a("li"),gle=a("strong"),m8o=o("megatron-bert"),g8o=o(" \u2014 "),Zq=a("a"),h8o=o("MegatronBertForCausalLM"),p8o=o(" (MegatronBert model)"),u8o=l(),x_=a("li"),hle=a("strong"),_8o=o("openai-gpt"),b8o=o(" \u2014 "),eN=a("a"),v8o=o("OpenAIGPTLMHeadModel"),F8o=o(" (OpenAI GPT model)"),T8o=l(),$_=a("li"),ple=a("strong"),M8o=o("pegasus"),E8o=o(" \u2014 "),oN=a("a"),C8o=o("PegasusForCausalLM"),w8o=o(" (Pegasus model)"),A8o=l(),k_=a("li"),ule=a("strong"),y8o=o("plbart"),L8o=o(" \u2014 "),rN=a("a"),x8o=o("PLBartForCausalLM"),$8o=o(" (PLBart model)"),k8o=l(),S_=a("li"),_le=a("strong"),S8o=o("prophetnet"),R8o=o(" \u2014 "),tN=a("a"),B8o=o("ProphetNetForCausalLM"),P8o=o(" (ProphetNet model)"),I8o=l(),R_=a("li"),ble=a("strong"),q8o=o("qdqbert"),N8o=o(" \u2014 "),aN=a("a"),j8o=o("QDQBertLMHeadModel"),D8o=o(" (QDQBert model)"),G8o=l(),B_=a("li"),vle=a("strong"),O8o=o("reformer"),V8o=o(" \u2014 "),nN=a("a"),X8o=o("ReformerModelWithLMHead"),z8o=o(" (Reformer model)"),Q8o=l(),P_=a("li"),Fle=a("strong"),W8o=o("rembert"),H8o=o(" \u2014 "),sN=a("a"),U8o=o("RemBertForCausalLM"),J8o=o(" (RemBERT model)"),Y8o=l(),I_=a("li"),Tle=a("strong"),K8o=o("roberta"),Z8o=o(" \u2014 "),lN=a("a"),eMo=o("RobertaForCausalLM"),oMo=o(" (RoBERTa model)"),rMo=l(),q_=a("li"),Mle=a("strong"),tMo=o("roformer"),aMo=o(" \u2014 "),iN=a("a"),nMo=o("RoFormerForCausalLM"),sMo=o(" (RoFormer model)"),lMo=l(),N_=a("li"),Ele=a("strong"),iMo=o("speech_to_text_2"),dMo=o(" \u2014 "),dN=a("a"),cMo=o("Speech2Text2ForCausalLM"),fMo=o(" (Speech2Text2 model)"),mMo=l(),j_=a("li"),Cle=a("strong"),gMo=o("transfo-xl"),hMo=o(" \u2014 "),cN=a("a"),pMo=o("TransfoXLLMHeadModel"),uMo=o(" (Transformer-XL model)"),_Mo=l(),D_=a("li"),wle=a("strong"),bMo=o("trocr"),vMo=o(" \u2014 "),fN=a("a"),FMo=o("TrOCRForCausalLM"),TMo=o(" (TrOCR model)"),MMo=l(),G_=a("li"),Ale=a("strong"),EMo=o("xglm"),CMo=o(" \u2014 "),mN=a("a"),wMo=o("XGLMForCausalLM"),AMo=o(" (XGLM model)"),yMo=l(),O_=a("li"),yle=a("strong"),LMo=o("xlm"),xMo=o(" \u2014 "),gN=a("a"),$Mo=o("XLMWithLMHeadModel"),kMo=o(" (XLM model)"),SMo=l(),V_=a("li"),Lle=a("strong"),RMo=o("xlm-prophetnet"),BMo=o(" \u2014 "),hN=a("a"),PMo=o("XLMProphetNetForCausalLM"),IMo=o(" (XLMProphetNet model)"),qMo=l(),X_=a("li"),xle=a("strong"),NMo=o("xlm-roberta"),jMo=o(" \u2014 "),pN=a("a"),DMo=o("XLMRobertaForCausalLM"),GMo=o(" (XLM-RoBERTa model)"),OMo=l(),z_=a("li"),$le=a("strong"),VMo=o("xlm-roberta-xl"),XMo=o(" \u2014 "),uN=a("a"),zMo=o("XLMRobertaXLForCausalLM"),QMo=o(" (XLM-RoBERTa-XL model)"),WMo=l(),Q_=a("li"),kle=a("strong"),HMo=o("xlnet"),UMo=o(" \u2014 "),_N=a("a"),JMo=o("XLNetLMHeadModel"),YMo=o(" (XLNet model)"),KMo=l(),W_=a("p"),ZMo=o("The model is set in evaluation mode by default using "),Sle=a("code"),e4o=o("model.eval()"),o4o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rle=a("code"),r4o=o("model.train()"),t4o=l(),F(H_.$$.fragment),RBe=l(),Ci=a("h2"),U_=a("a"),Ble=a("span"),F(f0.$$.fragment),a4o=l(),Ple=a("span"),n4o=o("AutoModelForMaskedLM"),BBe=l(),ko=a("div"),F(m0.$$.fragment),s4o=l(),wi=a("p"),l4o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),bN=a("a"),i4o=o("from_pretrained()"),d4o=o(" class method or the "),vN=a("a"),c4o=o("from_config()"),f4o=o(` class
method.`),m4o=l(),g0=a("p"),g4o=o("This class cannot be instantiated directly using "),Ile=a("code"),h4o=o("__init__()"),p4o=o(" (throws an error)."),u4o=l(),rt=a("div"),F(h0.$$.fragment),_4o=l(),qle=a("p"),b4o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),v4o=l(),Ai=a("p"),F4o=o(`Note:
Loading a model from its configuration file does `),Nle=a("strong"),T4o=o("not"),M4o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FN=a("a"),E4o=o("from_pretrained()"),C4o=o(" to load the model weights."),w4o=l(),F(J_.$$.fragment),A4o=l(),Ye=a("div"),F(p0.$$.fragment),y4o=l(),jle=a("p"),L4o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),x4o=l(),Aa=a("p"),$4o=o("The model class to instantiate is selected based on the "),Dle=a("code"),k4o=o("model_type"),S4o=o(` property of the config object (either
passed as an argument or loaded from `),Gle=a("code"),R4o=o("pretrained_model_name_or_path"),B4o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ole=a("code"),P4o=o("pretrained_model_name_or_path"),I4o=o(":"),q4o=l(),Q=a("ul"),Y_=a("li"),Vle=a("strong"),N4o=o("albert"),j4o=o(" \u2014 "),TN=a("a"),D4o=o("AlbertForMaskedLM"),G4o=o(" (ALBERT model)"),O4o=l(),K_=a("li"),Xle=a("strong"),V4o=o("bart"),X4o=o(" \u2014 "),MN=a("a"),z4o=o("BartForConditionalGeneration"),Q4o=o(" (BART model)"),W4o=l(),Z_=a("li"),zle=a("strong"),H4o=o("bert"),U4o=o(" \u2014 "),EN=a("a"),J4o=o("BertForMaskedLM"),Y4o=o(" (BERT model)"),K4o=l(),e2=a("li"),Qle=a("strong"),Z4o=o("big_bird"),eEo=o(" \u2014 "),CN=a("a"),oEo=o("BigBirdForMaskedLM"),rEo=o(" (BigBird model)"),tEo=l(),o2=a("li"),Wle=a("strong"),aEo=o("camembert"),nEo=o(" \u2014 "),wN=a("a"),sEo=o("CamembertForMaskedLM"),lEo=o(" (CamemBERT model)"),iEo=l(),r2=a("li"),Hle=a("strong"),dEo=o("convbert"),cEo=o(" \u2014 "),AN=a("a"),fEo=o("ConvBertForMaskedLM"),mEo=o(" (ConvBERT model)"),gEo=l(),t2=a("li"),Ule=a("strong"),hEo=o("data2vec-text"),pEo=o(" \u2014 "),yN=a("a"),uEo=o("Data2VecTextForMaskedLM"),_Eo=o(" (Data2VecText model)"),bEo=l(),a2=a("li"),Jle=a("strong"),vEo=o("deberta"),FEo=o(" \u2014 "),LN=a("a"),TEo=o("DebertaForMaskedLM"),MEo=o(" (DeBERTa model)"),EEo=l(),n2=a("li"),Yle=a("strong"),CEo=o("deberta-v2"),wEo=o(" \u2014 "),xN=a("a"),AEo=o("DebertaV2ForMaskedLM"),yEo=o(" (DeBERTa-v2 model)"),LEo=l(),s2=a("li"),Kle=a("strong"),xEo=o("distilbert"),$Eo=o(" \u2014 "),$N=a("a"),kEo=o("DistilBertForMaskedLM"),SEo=o(" (DistilBERT model)"),REo=l(),l2=a("li"),Zle=a("strong"),BEo=o("electra"),PEo=o(" \u2014 "),kN=a("a"),IEo=o("ElectraForMaskedLM"),qEo=o(" (ELECTRA model)"),NEo=l(),i2=a("li"),eie=a("strong"),jEo=o("flaubert"),DEo=o(" \u2014 "),SN=a("a"),GEo=o("FlaubertWithLMHeadModel"),OEo=o(" (FlauBERT model)"),VEo=l(),d2=a("li"),oie=a("strong"),XEo=o("fnet"),zEo=o(" \u2014 "),RN=a("a"),QEo=o("FNetForMaskedLM"),WEo=o(" (FNet model)"),HEo=l(),c2=a("li"),rie=a("strong"),UEo=o("funnel"),JEo=o(" \u2014 "),BN=a("a"),YEo=o("FunnelForMaskedLM"),KEo=o(" (Funnel Transformer model)"),ZEo=l(),f2=a("li"),tie=a("strong"),e5o=o("ibert"),o5o=o(" \u2014 "),PN=a("a"),r5o=o("IBertForMaskedLM"),t5o=o(" (I-BERT model)"),a5o=l(),m2=a("li"),aie=a("strong"),n5o=o("layoutlm"),s5o=o(" \u2014 "),IN=a("a"),l5o=o("LayoutLMForMaskedLM"),i5o=o(" (LayoutLM model)"),d5o=l(),g2=a("li"),nie=a("strong"),c5o=o("longformer"),f5o=o(" \u2014 "),qN=a("a"),m5o=o("LongformerForMaskedLM"),g5o=o(" (Longformer model)"),h5o=l(),h2=a("li"),sie=a("strong"),p5o=o("mbart"),u5o=o(" \u2014 "),NN=a("a"),_5o=o("MBartForConditionalGeneration"),b5o=o(" (mBART model)"),v5o=l(),p2=a("li"),lie=a("strong"),F5o=o("megatron-bert"),T5o=o(" \u2014 "),jN=a("a"),M5o=o("MegatronBertForMaskedLM"),E5o=o(" (MegatronBert model)"),C5o=l(),u2=a("li"),iie=a("strong"),w5o=o("mobilebert"),A5o=o(" \u2014 "),DN=a("a"),y5o=o("MobileBertForMaskedLM"),L5o=o(" (MobileBERT model)"),x5o=l(),_2=a("li"),die=a("strong"),$5o=o("mpnet"),k5o=o(" \u2014 "),GN=a("a"),S5o=o("MPNetForMaskedLM"),R5o=o(" (MPNet model)"),B5o=l(),b2=a("li"),cie=a("strong"),P5o=o("nystromformer"),I5o=o(" \u2014 "),ON=a("a"),q5o=o("NystromformerForMaskedLM"),N5o=o(" (Nystromformer model)"),j5o=l(),v2=a("li"),fie=a("strong"),D5o=o("perceiver"),G5o=o(" \u2014 "),VN=a("a"),O5o=o("PerceiverForMaskedLM"),V5o=o(" (Perceiver model)"),X5o=l(),F2=a("li"),mie=a("strong"),z5o=o("qdqbert"),Q5o=o(" \u2014 "),XN=a("a"),W5o=o("QDQBertForMaskedLM"),H5o=o(" (QDQBert model)"),U5o=l(),T2=a("li"),gie=a("strong"),J5o=o("reformer"),Y5o=o(" \u2014 "),zN=a("a"),K5o=o("ReformerForMaskedLM"),Z5o=o(" (Reformer model)"),eCo=l(),M2=a("li"),hie=a("strong"),oCo=o("rembert"),rCo=o(" \u2014 "),QN=a("a"),tCo=o("RemBertForMaskedLM"),aCo=o(" (RemBERT model)"),nCo=l(),E2=a("li"),pie=a("strong"),sCo=o("roberta"),lCo=o(" \u2014 "),WN=a("a"),iCo=o("RobertaForMaskedLM"),dCo=o(" (RoBERTa model)"),cCo=l(),C2=a("li"),uie=a("strong"),fCo=o("roformer"),mCo=o(" \u2014 "),HN=a("a"),gCo=o("RoFormerForMaskedLM"),hCo=o(" (RoFormer model)"),pCo=l(),w2=a("li"),_ie=a("strong"),uCo=o("squeezebert"),_Co=o(" \u2014 "),UN=a("a"),bCo=o("SqueezeBertForMaskedLM"),vCo=o(" (SqueezeBERT model)"),FCo=l(),A2=a("li"),bie=a("strong"),TCo=o("tapas"),MCo=o(" \u2014 "),JN=a("a"),ECo=o("TapasForMaskedLM"),CCo=o(" (TAPAS model)"),wCo=l(),y2=a("li"),vie=a("strong"),ACo=o("wav2vec2"),yCo=o(" \u2014 "),Fie=a("code"),LCo=o("Wav2Vec2ForMaskedLM"),xCo=o(" (Wav2Vec2 model)"),$Co=l(),L2=a("li"),Tie=a("strong"),kCo=o("xlm"),SCo=o(" \u2014 "),YN=a("a"),RCo=o("XLMWithLMHeadModel"),BCo=o(" (XLM model)"),PCo=l(),x2=a("li"),Mie=a("strong"),ICo=o("xlm-roberta"),qCo=o(" \u2014 "),KN=a("a"),NCo=o("XLMRobertaForMaskedLM"),jCo=o(" (XLM-RoBERTa model)"),DCo=l(),$2=a("li"),Eie=a("strong"),GCo=o("xlm-roberta-xl"),OCo=o(" \u2014 "),ZN=a("a"),VCo=o("XLMRobertaXLForMaskedLM"),XCo=o(" (XLM-RoBERTa-XL model)"),zCo=l(),k2=a("li"),Cie=a("strong"),QCo=o("yoso"),WCo=o(" \u2014 "),ej=a("a"),HCo=o("YosoForMaskedLM"),UCo=o(" (YOSO model)"),JCo=l(),S2=a("p"),YCo=o("The model is set in evaluation mode by default using "),wie=a("code"),KCo=o("model.eval()"),ZCo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Aie=a("code"),e3o=o("model.train()"),o3o=l(),F(R2.$$.fragment),PBe=l(),yi=a("h2"),B2=a("a"),yie=a("span"),F(u0.$$.fragment),r3o=l(),Lie=a("span"),t3o=o("AutoModelForSeq2SeqLM"),IBe=l(),So=a("div"),F(_0.$$.fragment),a3o=l(),Li=a("p"),n3o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),oj=a("a"),s3o=o("from_pretrained()"),l3o=o(" class method or the "),rj=a("a"),i3o=o("from_config()"),d3o=o(` class
method.`),c3o=l(),b0=a("p"),f3o=o("This class cannot be instantiated directly using "),xie=a("code"),m3o=o("__init__()"),g3o=o(" (throws an error)."),h3o=l(),tt=a("div"),F(v0.$$.fragment),p3o=l(),$ie=a("p"),u3o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),_3o=l(),xi=a("p"),b3o=o(`Note:
Loading a model from its configuration file does `),kie=a("strong"),v3o=o("not"),F3o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tj=a("a"),T3o=o("from_pretrained()"),M3o=o(" to load the model weights."),E3o=l(),F(P2.$$.fragment),C3o=l(),Ke=a("div"),F(F0.$$.fragment),w3o=l(),Sie=a("p"),A3o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),y3o=l(),ya=a("p"),L3o=o("The model class to instantiate is selected based on the "),Rie=a("code"),x3o=o("model_type"),$3o=o(` property of the config object (either
passed as an argument or loaded from `),Bie=a("code"),k3o=o("pretrained_model_name_or_path"),S3o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pie=a("code"),R3o=o("pretrained_model_name_or_path"),B3o=o(":"),P3o=l(),he=a("ul"),I2=a("li"),Iie=a("strong"),I3o=o("bart"),q3o=o(" \u2014 "),aj=a("a"),N3o=o("BartForConditionalGeneration"),j3o=o(" (BART model)"),D3o=l(),q2=a("li"),qie=a("strong"),G3o=o("bigbird_pegasus"),O3o=o(" \u2014 "),nj=a("a"),V3o=o("BigBirdPegasusForConditionalGeneration"),X3o=o(" (BigBirdPegasus model)"),z3o=l(),N2=a("li"),Nie=a("strong"),Q3o=o("blenderbot"),W3o=o(" \u2014 "),sj=a("a"),H3o=o("BlenderbotForConditionalGeneration"),U3o=o(" (Blenderbot model)"),J3o=l(),j2=a("li"),jie=a("strong"),Y3o=o("blenderbot-small"),K3o=o(" \u2014 "),lj=a("a"),Z3o=o("BlenderbotSmallForConditionalGeneration"),ewo=o(" (BlenderbotSmall model)"),owo=l(),D2=a("li"),Die=a("strong"),rwo=o("encoder-decoder"),two=o(" \u2014 "),ij=a("a"),awo=o("EncoderDecoderModel"),nwo=o(" (Encoder decoder model)"),swo=l(),G2=a("li"),Gie=a("strong"),lwo=o("fsmt"),iwo=o(" \u2014 "),dj=a("a"),dwo=o("FSMTForConditionalGeneration"),cwo=o(" (FairSeq Machine-Translation model)"),fwo=l(),O2=a("li"),Oie=a("strong"),mwo=o("led"),gwo=o(" \u2014 "),cj=a("a"),hwo=o("LEDForConditionalGeneration"),pwo=o(" (LED model)"),uwo=l(),V2=a("li"),Vie=a("strong"),_wo=o("m2m_100"),bwo=o(" \u2014 "),fj=a("a"),vwo=o("M2M100ForConditionalGeneration"),Fwo=o(" (M2M100 model)"),Two=l(),X2=a("li"),Xie=a("strong"),Mwo=o("marian"),Ewo=o(" \u2014 "),mj=a("a"),Cwo=o("MarianMTModel"),wwo=o(" (Marian model)"),Awo=l(),z2=a("li"),zie=a("strong"),ywo=o("mbart"),Lwo=o(" \u2014 "),gj=a("a"),xwo=o("MBartForConditionalGeneration"),$wo=o(" (mBART model)"),kwo=l(),Q2=a("li"),Qie=a("strong"),Swo=o("mt5"),Rwo=o(" \u2014 "),hj=a("a"),Bwo=o("MT5ForConditionalGeneration"),Pwo=o(" (mT5 model)"),Iwo=l(),W2=a("li"),Wie=a("strong"),qwo=o("pegasus"),Nwo=o(" \u2014 "),pj=a("a"),jwo=o("PegasusForConditionalGeneration"),Dwo=o(" (Pegasus model)"),Gwo=l(),H2=a("li"),Hie=a("strong"),Owo=o("plbart"),Vwo=o(" \u2014 "),uj=a("a"),Xwo=o("PLBartForConditionalGeneration"),zwo=o(" (PLBart model)"),Qwo=l(),U2=a("li"),Uie=a("strong"),Wwo=o("prophetnet"),Hwo=o(" \u2014 "),_j=a("a"),Uwo=o("ProphetNetForConditionalGeneration"),Jwo=o(" (ProphetNet model)"),Ywo=l(),J2=a("li"),Jie=a("strong"),Kwo=o("t5"),Zwo=o(" \u2014 "),bj=a("a"),eAo=o("T5ForConditionalGeneration"),oAo=o(" (T5 model)"),rAo=l(),Y2=a("li"),Yie=a("strong"),tAo=o("tapex"),aAo=o(" \u2014 "),vj=a("a"),nAo=o("BartForConditionalGeneration"),sAo=o(" (TAPEX model)"),lAo=l(),K2=a("li"),Kie=a("strong"),iAo=o("xlm-prophetnet"),dAo=o(" \u2014 "),Fj=a("a"),cAo=o("XLMProphetNetForConditionalGeneration"),fAo=o(" (XLMProphetNet model)"),mAo=l(),Z2=a("p"),gAo=o("The model is set in evaluation mode by default using "),Zie=a("code"),hAo=o("model.eval()"),pAo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ede=a("code"),uAo=o("model.train()"),_Ao=l(),F(e6.$$.fragment),qBe=l(),$i=a("h2"),o6=a("a"),ode=a("span"),F(T0.$$.fragment),bAo=l(),rde=a("span"),vAo=o("AutoModelForSequenceClassification"),NBe=l(),Ro=a("div"),F(M0.$$.fragment),FAo=l(),ki=a("p"),TAo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Tj=a("a"),MAo=o("from_pretrained()"),EAo=o(" class method or the "),Mj=a("a"),CAo=o("from_config()"),wAo=o(` class
method.`),AAo=l(),E0=a("p"),yAo=o("This class cannot be instantiated directly using "),tde=a("code"),LAo=o("__init__()"),xAo=o(" (throws an error)."),$Ao=l(),at=a("div"),F(C0.$$.fragment),kAo=l(),ade=a("p"),SAo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),RAo=l(),Si=a("p"),BAo=o(`Note:
Loading a model from its configuration file does `),nde=a("strong"),PAo=o("not"),IAo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ej=a("a"),qAo=o("from_pretrained()"),NAo=o(" to load the model weights."),jAo=l(),F(r6.$$.fragment),DAo=l(),Ze=a("div"),F(w0.$$.fragment),GAo=l(),sde=a("p"),OAo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),VAo=l(),La=a("p"),XAo=o("The model class to instantiate is selected based on the "),lde=a("code"),zAo=o("model_type"),QAo=o(` property of the config object (either
passed as an argument or loaded from `),ide=a("code"),WAo=o("pretrained_model_name_or_path"),HAo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dde=a("code"),UAo=o("pretrained_model_name_or_path"),JAo=o(":"),YAo=l(),q=a("ul"),t6=a("li"),cde=a("strong"),KAo=o("albert"),ZAo=o(" \u2014 "),Cj=a("a"),e0o=o("AlbertForSequenceClassification"),o0o=o(" (ALBERT model)"),r0o=l(),a6=a("li"),fde=a("strong"),t0o=o("bart"),a0o=o(" \u2014 "),wj=a("a"),n0o=o("BartForSequenceClassification"),s0o=o(" (BART model)"),l0o=l(),n6=a("li"),mde=a("strong"),i0o=o("bert"),d0o=o(" \u2014 "),Aj=a("a"),c0o=o("BertForSequenceClassification"),f0o=o(" (BERT model)"),m0o=l(),s6=a("li"),gde=a("strong"),g0o=o("big_bird"),h0o=o(" \u2014 "),yj=a("a"),p0o=o("BigBirdForSequenceClassification"),u0o=o(" (BigBird model)"),_0o=l(),l6=a("li"),hde=a("strong"),b0o=o("bigbird_pegasus"),v0o=o(" \u2014 "),Lj=a("a"),F0o=o("BigBirdPegasusForSequenceClassification"),T0o=o(" (BigBirdPegasus model)"),M0o=l(),i6=a("li"),pde=a("strong"),E0o=o("camembert"),C0o=o(" \u2014 "),xj=a("a"),w0o=o("CamembertForSequenceClassification"),A0o=o(" (CamemBERT model)"),y0o=l(),d6=a("li"),ude=a("strong"),L0o=o("canine"),x0o=o(" \u2014 "),$j=a("a"),$0o=o("CanineForSequenceClassification"),k0o=o(" (Canine model)"),S0o=l(),c6=a("li"),_de=a("strong"),R0o=o("convbert"),B0o=o(" \u2014 "),kj=a("a"),P0o=o("ConvBertForSequenceClassification"),I0o=o(" (ConvBERT model)"),q0o=l(),f6=a("li"),bde=a("strong"),N0o=o("ctrl"),j0o=o(" \u2014 "),Sj=a("a"),D0o=o("CTRLForSequenceClassification"),G0o=o(" (CTRL model)"),O0o=l(),m6=a("li"),vde=a("strong"),V0o=o("data2vec-text"),X0o=o(" \u2014 "),Rj=a("a"),z0o=o("Data2VecTextForSequenceClassification"),Q0o=o(" (Data2VecText model)"),W0o=l(),g6=a("li"),Fde=a("strong"),H0o=o("deberta"),U0o=o(" \u2014 "),Bj=a("a"),J0o=o("DebertaForSequenceClassification"),Y0o=o(" (DeBERTa model)"),K0o=l(),h6=a("li"),Tde=a("strong"),Z0o=o("deberta-v2"),eyo=o(" \u2014 "),Pj=a("a"),oyo=o("DebertaV2ForSequenceClassification"),ryo=o(" (DeBERTa-v2 model)"),tyo=l(),p6=a("li"),Mde=a("strong"),ayo=o("distilbert"),nyo=o(" \u2014 "),Ij=a("a"),syo=o("DistilBertForSequenceClassification"),lyo=o(" (DistilBERT model)"),iyo=l(),u6=a("li"),Ede=a("strong"),dyo=o("electra"),cyo=o(" \u2014 "),qj=a("a"),fyo=o("ElectraForSequenceClassification"),myo=o(" (ELECTRA model)"),gyo=l(),_6=a("li"),Cde=a("strong"),hyo=o("flaubert"),pyo=o(" \u2014 "),Nj=a("a"),uyo=o("FlaubertForSequenceClassification"),_yo=o(" (FlauBERT model)"),byo=l(),b6=a("li"),wde=a("strong"),vyo=o("fnet"),Fyo=o(" \u2014 "),jj=a("a"),Tyo=o("FNetForSequenceClassification"),Myo=o(" (FNet model)"),Eyo=l(),v6=a("li"),Ade=a("strong"),Cyo=o("funnel"),wyo=o(" \u2014 "),Dj=a("a"),Ayo=o("FunnelForSequenceClassification"),yyo=o(" (Funnel Transformer model)"),Lyo=l(),F6=a("li"),yde=a("strong"),xyo=o("gpt2"),$yo=o(" \u2014 "),Gj=a("a"),kyo=o("GPT2ForSequenceClassification"),Syo=o(" (OpenAI GPT-2 model)"),Ryo=l(),T6=a("li"),Lde=a("strong"),Byo=o("gpt_neo"),Pyo=o(" \u2014 "),Oj=a("a"),Iyo=o("GPTNeoForSequenceClassification"),qyo=o(" (GPT Neo model)"),Nyo=l(),M6=a("li"),xde=a("strong"),jyo=o("gptj"),Dyo=o(" \u2014 "),Vj=a("a"),Gyo=o("GPTJForSequenceClassification"),Oyo=o(" (GPT-J model)"),Vyo=l(),E6=a("li"),$de=a("strong"),Xyo=o("ibert"),zyo=o(" \u2014 "),Xj=a("a"),Qyo=o("IBertForSequenceClassification"),Wyo=o(" (I-BERT model)"),Hyo=l(),C6=a("li"),kde=a("strong"),Uyo=o("layoutlm"),Jyo=o(" \u2014 "),zj=a("a"),Yyo=o("LayoutLMForSequenceClassification"),Kyo=o(" (LayoutLM model)"),Zyo=l(),w6=a("li"),Sde=a("strong"),eLo=o("layoutlmv2"),oLo=o(" \u2014 "),Qj=a("a"),rLo=o("LayoutLMv2ForSequenceClassification"),tLo=o(" (LayoutLMv2 model)"),aLo=l(),A6=a("li"),Rde=a("strong"),nLo=o("led"),sLo=o(" \u2014 "),Wj=a("a"),lLo=o("LEDForSequenceClassification"),iLo=o(" (LED model)"),dLo=l(),y6=a("li"),Bde=a("strong"),cLo=o("longformer"),fLo=o(" \u2014 "),Hj=a("a"),mLo=o("LongformerForSequenceClassification"),gLo=o(" (Longformer model)"),hLo=l(),L6=a("li"),Pde=a("strong"),pLo=o("mbart"),uLo=o(" \u2014 "),Uj=a("a"),_Lo=o("MBartForSequenceClassification"),bLo=o(" (mBART model)"),vLo=l(),x6=a("li"),Ide=a("strong"),FLo=o("megatron-bert"),TLo=o(" \u2014 "),Jj=a("a"),MLo=o("MegatronBertForSequenceClassification"),ELo=o(" (MegatronBert model)"),CLo=l(),$6=a("li"),qde=a("strong"),wLo=o("mobilebert"),ALo=o(" \u2014 "),Yj=a("a"),yLo=o("MobileBertForSequenceClassification"),LLo=o(" (MobileBERT model)"),xLo=l(),k6=a("li"),Nde=a("strong"),$Lo=o("mpnet"),kLo=o(" \u2014 "),Kj=a("a"),SLo=o("MPNetForSequenceClassification"),RLo=o(" (MPNet model)"),BLo=l(),S6=a("li"),jde=a("strong"),PLo=o("nystromformer"),ILo=o(" \u2014 "),Zj=a("a"),qLo=o("NystromformerForSequenceClassification"),NLo=o(" (Nystromformer model)"),jLo=l(),R6=a("li"),Dde=a("strong"),DLo=o("openai-gpt"),GLo=o(" \u2014 "),eD=a("a"),OLo=o("OpenAIGPTForSequenceClassification"),VLo=o(" (OpenAI GPT model)"),XLo=l(),B6=a("li"),Gde=a("strong"),zLo=o("perceiver"),QLo=o(" \u2014 "),oD=a("a"),WLo=o("PerceiverForSequenceClassification"),HLo=o(" (Perceiver model)"),ULo=l(),P6=a("li"),Ode=a("strong"),JLo=o("plbart"),YLo=o(" \u2014 "),rD=a("a"),KLo=o("PLBartForSequenceClassification"),ZLo=o(" (PLBart model)"),e7o=l(),I6=a("li"),Vde=a("strong"),o7o=o("qdqbert"),r7o=o(" \u2014 "),tD=a("a"),t7o=o("QDQBertForSequenceClassification"),a7o=o(" (QDQBert model)"),n7o=l(),q6=a("li"),Xde=a("strong"),s7o=o("reformer"),l7o=o(" \u2014 "),aD=a("a"),i7o=o("ReformerForSequenceClassification"),d7o=o(" (Reformer model)"),c7o=l(),N6=a("li"),zde=a("strong"),f7o=o("rembert"),m7o=o(" \u2014 "),nD=a("a"),g7o=o("RemBertForSequenceClassification"),h7o=o(" (RemBERT model)"),p7o=l(),j6=a("li"),Qde=a("strong"),u7o=o("roberta"),_7o=o(" \u2014 "),sD=a("a"),b7o=o("RobertaForSequenceClassification"),v7o=o(" (RoBERTa model)"),F7o=l(),D6=a("li"),Wde=a("strong"),T7o=o("roformer"),M7o=o(" \u2014 "),lD=a("a"),E7o=o("RoFormerForSequenceClassification"),C7o=o(" (RoFormer model)"),w7o=l(),G6=a("li"),Hde=a("strong"),A7o=o("squeezebert"),y7o=o(" \u2014 "),iD=a("a"),L7o=o("SqueezeBertForSequenceClassification"),x7o=o(" (SqueezeBERT model)"),$7o=l(),O6=a("li"),Ude=a("strong"),k7o=o("tapas"),S7o=o(" \u2014 "),dD=a("a"),R7o=o("TapasForSequenceClassification"),B7o=o(" (TAPAS model)"),P7o=l(),V6=a("li"),Jde=a("strong"),I7o=o("tapex"),q7o=o(" \u2014 "),cD=a("a"),N7o=o("BartForSequenceClassification"),j7o=o(" (TAPEX model)"),D7o=l(),X6=a("li"),Yde=a("strong"),G7o=o("transfo-xl"),O7o=o(" \u2014 "),fD=a("a"),V7o=o("TransfoXLForSequenceClassification"),X7o=o(" (Transformer-XL model)"),z7o=l(),z6=a("li"),Kde=a("strong"),Q7o=o("xlm"),W7o=o(" \u2014 "),mD=a("a"),H7o=o("XLMForSequenceClassification"),U7o=o(" (XLM model)"),J7o=l(),Q6=a("li"),Zde=a("strong"),Y7o=o("xlm-roberta"),K7o=o(" \u2014 "),gD=a("a"),Z7o=o("XLMRobertaForSequenceClassification"),exo=o(" (XLM-RoBERTa model)"),oxo=l(),W6=a("li"),ece=a("strong"),rxo=o("xlm-roberta-xl"),txo=o(" \u2014 "),hD=a("a"),axo=o("XLMRobertaXLForSequenceClassification"),nxo=o(" (XLM-RoBERTa-XL model)"),sxo=l(),H6=a("li"),oce=a("strong"),lxo=o("xlnet"),ixo=o(" \u2014 "),pD=a("a"),dxo=o("XLNetForSequenceClassification"),cxo=o(" (XLNet model)"),fxo=l(),U6=a("li"),rce=a("strong"),mxo=o("yoso"),gxo=o(" \u2014 "),uD=a("a"),hxo=o("YosoForSequenceClassification"),pxo=o(" (YOSO model)"),uxo=l(),J6=a("p"),_xo=o("The model is set in evaluation mode by default using "),tce=a("code"),bxo=o("model.eval()"),vxo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ace=a("code"),Fxo=o("model.train()"),Txo=l(),F(Y6.$$.fragment),jBe=l(),Ri=a("h2"),K6=a("a"),nce=a("span"),F(A0.$$.fragment),Mxo=l(),sce=a("span"),Exo=o("AutoModelForMultipleChoice"),DBe=l(),Bo=a("div"),F(y0.$$.fragment),Cxo=l(),Bi=a("p"),wxo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),_D=a("a"),Axo=o("from_pretrained()"),yxo=o(" class method or the "),bD=a("a"),Lxo=o("from_config()"),xxo=o(` class
method.`),$xo=l(),L0=a("p"),kxo=o("This class cannot be instantiated directly using "),lce=a("code"),Sxo=o("__init__()"),Rxo=o(" (throws an error)."),Bxo=l(),nt=a("div"),F(x0.$$.fragment),Pxo=l(),ice=a("p"),Ixo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),qxo=l(),Pi=a("p"),Nxo=o(`Note:
Loading a model from its configuration file does `),dce=a("strong"),jxo=o("not"),Dxo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vD=a("a"),Gxo=o("from_pretrained()"),Oxo=o(" to load the model weights."),Vxo=l(),F(Z6.$$.fragment),Xxo=l(),eo=a("div"),F($0.$$.fragment),zxo=l(),cce=a("p"),Qxo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Wxo=l(),xa=a("p"),Hxo=o("The model class to instantiate is selected based on the "),fce=a("code"),Uxo=o("model_type"),Jxo=o(` property of the config object (either
passed as an argument or loaded from `),mce=a("code"),Yxo=o("pretrained_model_name_or_path"),Kxo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gce=a("code"),Zxo=o("pretrained_model_name_or_path"),e9o=o(":"),o9o=l(),Y=a("ul"),e1=a("li"),hce=a("strong"),r9o=o("albert"),t9o=o(" \u2014 "),FD=a("a"),a9o=o("AlbertForMultipleChoice"),n9o=o(" (ALBERT model)"),s9o=l(),o1=a("li"),pce=a("strong"),l9o=o("bert"),i9o=o(" \u2014 "),TD=a("a"),d9o=o("BertForMultipleChoice"),c9o=o(" (BERT model)"),f9o=l(),r1=a("li"),uce=a("strong"),m9o=o("big_bird"),g9o=o(" \u2014 "),MD=a("a"),h9o=o("BigBirdForMultipleChoice"),p9o=o(" (BigBird model)"),u9o=l(),t1=a("li"),_ce=a("strong"),_9o=o("camembert"),b9o=o(" \u2014 "),ED=a("a"),v9o=o("CamembertForMultipleChoice"),F9o=o(" (CamemBERT model)"),T9o=l(),a1=a("li"),bce=a("strong"),M9o=o("canine"),E9o=o(" \u2014 "),CD=a("a"),C9o=o("CanineForMultipleChoice"),w9o=o(" (Canine model)"),A9o=l(),n1=a("li"),vce=a("strong"),y9o=o("convbert"),L9o=o(" \u2014 "),wD=a("a"),x9o=o("ConvBertForMultipleChoice"),$9o=o(" (ConvBERT model)"),k9o=l(),s1=a("li"),Fce=a("strong"),S9o=o("data2vec-text"),R9o=o(" \u2014 "),AD=a("a"),B9o=o("Data2VecTextForMultipleChoice"),P9o=o(" (Data2VecText model)"),I9o=l(),l1=a("li"),Tce=a("strong"),q9o=o("distilbert"),N9o=o(" \u2014 "),yD=a("a"),j9o=o("DistilBertForMultipleChoice"),D9o=o(" (DistilBERT model)"),G9o=l(),i1=a("li"),Mce=a("strong"),O9o=o("electra"),V9o=o(" \u2014 "),LD=a("a"),X9o=o("ElectraForMultipleChoice"),z9o=o(" (ELECTRA model)"),Q9o=l(),d1=a("li"),Ece=a("strong"),W9o=o("flaubert"),H9o=o(" \u2014 "),xD=a("a"),U9o=o("FlaubertForMultipleChoice"),J9o=o(" (FlauBERT model)"),Y9o=l(),c1=a("li"),Cce=a("strong"),K9o=o("fnet"),Z9o=o(" \u2014 "),$D=a("a"),e$o=o("FNetForMultipleChoice"),o$o=o(" (FNet model)"),r$o=l(),f1=a("li"),wce=a("strong"),t$o=o("funnel"),a$o=o(" \u2014 "),kD=a("a"),n$o=o("FunnelForMultipleChoice"),s$o=o(" (Funnel Transformer model)"),l$o=l(),m1=a("li"),Ace=a("strong"),i$o=o("ibert"),d$o=o(" \u2014 "),SD=a("a"),c$o=o("IBertForMultipleChoice"),f$o=o(" (I-BERT model)"),m$o=l(),g1=a("li"),yce=a("strong"),g$o=o("longformer"),h$o=o(" \u2014 "),RD=a("a"),p$o=o("LongformerForMultipleChoice"),u$o=o(" (Longformer model)"),_$o=l(),h1=a("li"),Lce=a("strong"),b$o=o("megatron-bert"),v$o=o(" \u2014 "),BD=a("a"),F$o=o("MegatronBertForMultipleChoice"),T$o=o(" (MegatronBert model)"),M$o=l(),p1=a("li"),xce=a("strong"),E$o=o("mobilebert"),C$o=o(" \u2014 "),PD=a("a"),w$o=o("MobileBertForMultipleChoice"),A$o=o(" (MobileBERT model)"),y$o=l(),u1=a("li"),$ce=a("strong"),L$o=o("mpnet"),x$o=o(" \u2014 "),ID=a("a"),$$o=o("MPNetForMultipleChoice"),k$o=o(" (MPNet model)"),S$o=l(),_1=a("li"),kce=a("strong"),R$o=o("nystromformer"),B$o=o(" \u2014 "),qD=a("a"),P$o=o("NystromformerForMultipleChoice"),I$o=o(" (Nystromformer model)"),q$o=l(),b1=a("li"),Sce=a("strong"),N$o=o("qdqbert"),j$o=o(" \u2014 "),ND=a("a"),D$o=o("QDQBertForMultipleChoice"),G$o=o(" (QDQBert model)"),O$o=l(),v1=a("li"),Rce=a("strong"),V$o=o("rembert"),X$o=o(" \u2014 "),jD=a("a"),z$o=o("RemBertForMultipleChoice"),Q$o=o(" (RemBERT model)"),W$o=l(),F1=a("li"),Bce=a("strong"),H$o=o("roberta"),U$o=o(" \u2014 "),DD=a("a"),J$o=o("RobertaForMultipleChoice"),Y$o=o(" (RoBERTa model)"),K$o=l(),T1=a("li"),Pce=a("strong"),Z$o=o("roformer"),eko=o(" \u2014 "),GD=a("a"),oko=o("RoFormerForMultipleChoice"),rko=o(" (RoFormer model)"),tko=l(),M1=a("li"),Ice=a("strong"),ako=o("squeezebert"),nko=o(" \u2014 "),OD=a("a"),sko=o("SqueezeBertForMultipleChoice"),lko=o(" (SqueezeBERT model)"),iko=l(),E1=a("li"),qce=a("strong"),dko=o("xlm"),cko=o(" \u2014 "),VD=a("a"),fko=o("XLMForMultipleChoice"),mko=o(" (XLM model)"),gko=l(),C1=a("li"),Nce=a("strong"),hko=o("xlm-roberta"),pko=o(" \u2014 "),XD=a("a"),uko=o("XLMRobertaForMultipleChoice"),_ko=o(" (XLM-RoBERTa model)"),bko=l(),w1=a("li"),jce=a("strong"),vko=o("xlm-roberta-xl"),Fko=o(" \u2014 "),zD=a("a"),Tko=o("XLMRobertaXLForMultipleChoice"),Mko=o(" (XLM-RoBERTa-XL model)"),Eko=l(),A1=a("li"),Dce=a("strong"),Cko=o("xlnet"),wko=o(" \u2014 "),QD=a("a"),Ako=o("XLNetForMultipleChoice"),yko=o(" (XLNet model)"),Lko=l(),y1=a("li"),Gce=a("strong"),xko=o("yoso"),$ko=o(" \u2014 "),WD=a("a"),kko=o("YosoForMultipleChoice"),Sko=o(" (YOSO model)"),Rko=l(),L1=a("p"),Bko=o("The model is set in evaluation mode by default using "),Oce=a("code"),Pko=o("model.eval()"),Iko=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vce=a("code"),qko=o("model.train()"),Nko=l(),F(x1.$$.fragment),GBe=l(),Ii=a("h2"),$1=a("a"),Xce=a("span"),F(k0.$$.fragment),jko=l(),zce=a("span"),Dko=o("AutoModelForNextSentencePrediction"),OBe=l(),Po=a("div"),F(S0.$$.fragment),Gko=l(),qi=a("p"),Oko=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),HD=a("a"),Vko=o("from_pretrained()"),Xko=o(" class method or the "),UD=a("a"),zko=o("from_config()"),Qko=o(` class
method.`),Wko=l(),R0=a("p"),Hko=o("This class cannot be instantiated directly using "),Qce=a("code"),Uko=o("__init__()"),Jko=o(" (throws an error)."),Yko=l(),st=a("div"),F(B0.$$.fragment),Kko=l(),Wce=a("p"),Zko=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),eSo=l(),Ni=a("p"),oSo=o(`Note:
Loading a model from its configuration file does `),Hce=a("strong"),rSo=o("not"),tSo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JD=a("a"),aSo=o("from_pretrained()"),nSo=o(" to load the model weights."),sSo=l(),F(k1.$$.fragment),lSo=l(),oo=a("div"),F(P0.$$.fragment),iSo=l(),Uce=a("p"),dSo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),cSo=l(),$a=a("p"),fSo=o("The model class to instantiate is selected based on the "),Jce=a("code"),mSo=o("model_type"),gSo=o(` property of the config object (either
passed as an argument or loaded from `),Yce=a("code"),hSo=o("pretrained_model_name_or_path"),pSo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kce=a("code"),uSo=o("pretrained_model_name_or_path"),_So=o(":"),bSo=l(),Ur=a("ul"),S1=a("li"),Zce=a("strong"),vSo=o("bert"),FSo=o(" \u2014 "),YD=a("a"),TSo=o("BertForNextSentencePrediction"),MSo=o(" (BERT model)"),ESo=l(),R1=a("li"),efe=a("strong"),CSo=o("fnet"),wSo=o(" \u2014 "),KD=a("a"),ASo=o("FNetForNextSentencePrediction"),ySo=o(" (FNet model)"),LSo=l(),B1=a("li"),ofe=a("strong"),xSo=o("megatron-bert"),$So=o(" \u2014 "),ZD=a("a"),kSo=o("MegatronBertForNextSentencePrediction"),SSo=o(" (MegatronBert model)"),RSo=l(),P1=a("li"),rfe=a("strong"),BSo=o("mobilebert"),PSo=o(" \u2014 "),eG=a("a"),ISo=o("MobileBertForNextSentencePrediction"),qSo=o(" (MobileBERT model)"),NSo=l(),I1=a("li"),tfe=a("strong"),jSo=o("qdqbert"),DSo=o(" \u2014 "),oG=a("a"),GSo=o("QDQBertForNextSentencePrediction"),OSo=o(" (QDQBert model)"),VSo=l(),q1=a("p"),XSo=o("The model is set in evaluation mode by default using "),afe=a("code"),zSo=o("model.eval()"),QSo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nfe=a("code"),WSo=o("model.train()"),HSo=l(),F(N1.$$.fragment),VBe=l(),ji=a("h2"),j1=a("a"),sfe=a("span"),F(I0.$$.fragment),USo=l(),lfe=a("span"),JSo=o("AutoModelForTokenClassification"),XBe=l(),Io=a("div"),F(q0.$$.fragment),YSo=l(),Di=a("p"),KSo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),rG=a("a"),ZSo=o("from_pretrained()"),eRo=o(" class method or the "),tG=a("a"),oRo=o("from_config()"),rRo=o(` class
method.`),tRo=l(),N0=a("p"),aRo=o("This class cannot be instantiated directly using "),ife=a("code"),nRo=o("__init__()"),sRo=o(" (throws an error)."),lRo=l(),lt=a("div"),F(j0.$$.fragment),iRo=l(),dfe=a("p"),dRo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),cRo=l(),Gi=a("p"),fRo=o(`Note:
Loading a model from its configuration file does `),cfe=a("strong"),mRo=o("not"),gRo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aG=a("a"),hRo=o("from_pretrained()"),pRo=o(" to load the model weights."),uRo=l(),F(D1.$$.fragment),_Ro=l(),ro=a("div"),F(D0.$$.fragment),bRo=l(),ffe=a("p"),vRo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),FRo=l(),ka=a("p"),TRo=o("The model class to instantiate is selected based on the "),mfe=a("code"),MRo=o("model_type"),ERo=o(` property of the config object (either
passed as an argument or loaded from `),gfe=a("code"),CRo=o("pretrained_model_name_or_path"),wRo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hfe=a("code"),ARo=o("pretrained_model_name_or_path"),yRo=o(":"),LRo=l(),U=a("ul"),G1=a("li"),pfe=a("strong"),xRo=o("albert"),$Ro=o(" \u2014 "),nG=a("a"),kRo=o("AlbertForTokenClassification"),SRo=o(" (ALBERT model)"),RRo=l(),O1=a("li"),ufe=a("strong"),BRo=o("bert"),PRo=o(" \u2014 "),sG=a("a"),IRo=o("BertForTokenClassification"),qRo=o(" (BERT model)"),NRo=l(),V1=a("li"),_fe=a("strong"),jRo=o("big_bird"),DRo=o(" \u2014 "),lG=a("a"),GRo=o("BigBirdForTokenClassification"),ORo=o(" (BigBird model)"),VRo=l(),X1=a("li"),bfe=a("strong"),XRo=o("camembert"),zRo=o(" \u2014 "),iG=a("a"),QRo=o("CamembertForTokenClassification"),WRo=o(" (CamemBERT model)"),HRo=l(),z1=a("li"),vfe=a("strong"),URo=o("canine"),JRo=o(" \u2014 "),dG=a("a"),YRo=o("CanineForTokenClassification"),KRo=o(" (Canine model)"),ZRo=l(),Q1=a("li"),Ffe=a("strong"),eBo=o("convbert"),oBo=o(" \u2014 "),cG=a("a"),rBo=o("ConvBertForTokenClassification"),tBo=o(" (ConvBERT model)"),aBo=l(),W1=a("li"),Tfe=a("strong"),nBo=o("data2vec-text"),sBo=o(" \u2014 "),fG=a("a"),lBo=o("Data2VecTextForTokenClassification"),iBo=o(" (Data2VecText model)"),dBo=l(),H1=a("li"),Mfe=a("strong"),cBo=o("deberta"),fBo=o(" \u2014 "),mG=a("a"),mBo=o("DebertaForTokenClassification"),gBo=o(" (DeBERTa model)"),hBo=l(),U1=a("li"),Efe=a("strong"),pBo=o("deberta-v2"),uBo=o(" \u2014 "),gG=a("a"),_Bo=o("DebertaV2ForTokenClassification"),bBo=o(" (DeBERTa-v2 model)"),vBo=l(),J1=a("li"),Cfe=a("strong"),FBo=o("distilbert"),TBo=o(" \u2014 "),hG=a("a"),MBo=o("DistilBertForTokenClassification"),EBo=o(" (DistilBERT model)"),CBo=l(),Y1=a("li"),wfe=a("strong"),wBo=o("electra"),ABo=o(" \u2014 "),pG=a("a"),yBo=o("ElectraForTokenClassification"),LBo=o(" (ELECTRA model)"),xBo=l(),K1=a("li"),Afe=a("strong"),$Bo=o("flaubert"),kBo=o(" \u2014 "),uG=a("a"),SBo=o("FlaubertForTokenClassification"),RBo=o(" (FlauBERT model)"),BBo=l(),Z1=a("li"),yfe=a("strong"),PBo=o("fnet"),IBo=o(" \u2014 "),_G=a("a"),qBo=o("FNetForTokenClassification"),NBo=o(" (FNet model)"),jBo=l(),eb=a("li"),Lfe=a("strong"),DBo=o("funnel"),GBo=o(" \u2014 "),bG=a("a"),OBo=o("FunnelForTokenClassification"),VBo=o(" (Funnel Transformer model)"),XBo=l(),ob=a("li"),xfe=a("strong"),zBo=o("gpt2"),QBo=o(" \u2014 "),vG=a("a"),WBo=o("GPT2ForTokenClassification"),HBo=o(" (OpenAI GPT-2 model)"),UBo=l(),rb=a("li"),$fe=a("strong"),JBo=o("ibert"),YBo=o(" \u2014 "),FG=a("a"),KBo=o("IBertForTokenClassification"),ZBo=o(" (I-BERT model)"),ePo=l(),tb=a("li"),kfe=a("strong"),oPo=o("layoutlm"),rPo=o(" \u2014 "),TG=a("a"),tPo=o("LayoutLMForTokenClassification"),aPo=o(" (LayoutLM model)"),nPo=l(),ab=a("li"),Sfe=a("strong"),sPo=o("layoutlmv2"),lPo=o(" \u2014 "),MG=a("a"),iPo=o("LayoutLMv2ForTokenClassification"),dPo=o(" (LayoutLMv2 model)"),cPo=l(),nb=a("li"),Rfe=a("strong"),fPo=o("longformer"),mPo=o(" \u2014 "),EG=a("a"),gPo=o("LongformerForTokenClassification"),hPo=o(" (Longformer model)"),pPo=l(),sb=a("li"),Bfe=a("strong"),uPo=o("megatron-bert"),_Po=o(" \u2014 "),CG=a("a"),bPo=o("MegatronBertForTokenClassification"),vPo=o(" (MegatronBert model)"),FPo=l(),lb=a("li"),Pfe=a("strong"),TPo=o("mobilebert"),MPo=o(" \u2014 "),wG=a("a"),EPo=o("MobileBertForTokenClassification"),CPo=o(" (MobileBERT model)"),wPo=l(),ib=a("li"),Ife=a("strong"),APo=o("mpnet"),yPo=o(" \u2014 "),AG=a("a"),LPo=o("MPNetForTokenClassification"),xPo=o(" (MPNet model)"),$Po=l(),db=a("li"),qfe=a("strong"),kPo=o("nystromformer"),SPo=o(" \u2014 "),yG=a("a"),RPo=o("NystromformerForTokenClassification"),BPo=o(" (Nystromformer model)"),PPo=l(),cb=a("li"),Nfe=a("strong"),IPo=o("qdqbert"),qPo=o(" \u2014 "),LG=a("a"),NPo=o("QDQBertForTokenClassification"),jPo=o(" (QDQBert model)"),DPo=l(),fb=a("li"),jfe=a("strong"),GPo=o("rembert"),OPo=o(" \u2014 "),xG=a("a"),VPo=o("RemBertForTokenClassification"),XPo=o(" (RemBERT model)"),zPo=l(),mb=a("li"),Dfe=a("strong"),QPo=o("roberta"),WPo=o(" \u2014 "),$G=a("a"),HPo=o("RobertaForTokenClassification"),UPo=o(" (RoBERTa model)"),JPo=l(),gb=a("li"),Gfe=a("strong"),YPo=o("roformer"),KPo=o(" \u2014 "),kG=a("a"),ZPo=o("RoFormerForTokenClassification"),eIo=o(" (RoFormer model)"),oIo=l(),hb=a("li"),Ofe=a("strong"),rIo=o("squeezebert"),tIo=o(" \u2014 "),SG=a("a"),aIo=o("SqueezeBertForTokenClassification"),nIo=o(" (SqueezeBERT model)"),sIo=l(),pb=a("li"),Vfe=a("strong"),lIo=o("xlm"),iIo=o(" \u2014 "),RG=a("a"),dIo=o("XLMForTokenClassification"),cIo=o(" (XLM model)"),fIo=l(),ub=a("li"),Xfe=a("strong"),mIo=o("xlm-roberta"),gIo=o(" \u2014 "),BG=a("a"),hIo=o("XLMRobertaForTokenClassification"),pIo=o(" (XLM-RoBERTa model)"),uIo=l(),_b=a("li"),zfe=a("strong"),_Io=o("xlm-roberta-xl"),bIo=o(" \u2014 "),PG=a("a"),vIo=o("XLMRobertaXLForTokenClassification"),FIo=o(" (XLM-RoBERTa-XL model)"),TIo=l(),bb=a("li"),Qfe=a("strong"),MIo=o("xlnet"),EIo=o(" \u2014 "),IG=a("a"),CIo=o("XLNetForTokenClassification"),wIo=o(" (XLNet model)"),AIo=l(),vb=a("li"),Wfe=a("strong"),yIo=o("yoso"),LIo=o(" \u2014 "),qG=a("a"),xIo=o("YosoForTokenClassification"),$Io=o(" (YOSO model)"),kIo=l(),Fb=a("p"),SIo=o("The model is set in evaluation mode by default using "),Hfe=a("code"),RIo=o("model.eval()"),BIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ufe=a("code"),PIo=o("model.train()"),IIo=l(),F(Tb.$$.fragment),zBe=l(),Oi=a("h2"),Mb=a("a"),Jfe=a("span"),F(G0.$$.fragment),qIo=l(),Yfe=a("span"),NIo=o("AutoModelForQuestionAnswering"),QBe=l(),qo=a("div"),F(O0.$$.fragment),jIo=l(),Vi=a("p"),DIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),NG=a("a"),GIo=o("from_pretrained()"),OIo=o(" class method or the "),jG=a("a"),VIo=o("from_config()"),XIo=o(` class
method.`),zIo=l(),V0=a("p"),QIo=o("This class cannot be instantiated directly using "),Kfe=a("code"),WIo=o("__init__()"),HIo=o(" (throws an error)."),UIo=l(),it=a("div"),F(X0.$$.fragment),JIo=l(),Zfe=a("p"),YIo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),KIo=l(),Xi=a("p"),ZIo=o(`Note:
Loading a model from its configuration file does `),eme=a("strong"),eqo=o("not"),oqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DG=a("a"),rqo=o("from_pretrained()"),tqo=o(" to load the model weights."),aqo=l(),F(Eb.$$.fragment),nqo=l(),to=a("div"),F(z0.$$.fragment),sqo=l(),ome=a("p"),lqo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),iqo=l(),Sa=a("p"),dqo=o("The model class to instantiate is selected based on the "),rme=a("code"),cqo=o("model_type"),fqo=o(` property of the config object (either
passed as an argument or loaded from `),tme=a("code"),mqo=o("pretrained_model_name_or_path"),gqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ame=a("code"),hqo=o("pretrained_model_name_or_path"),pqo=o(":"),uqo=l(),O=a("ul"),Cb=a("li"),nme=a("strong"),_qo=o("albert"),bqo=o(" \u2014 "),GG=a("a"),vqo=o("AlbertForQuestionAnswering"),Fqo=o(" (ALBERT model)"),Tqo=l(),wb=a("li"),sme=a("strong"),Mqo=o("bart"),Eqo=o(" \u2014 "),OG=a("a"),Cqo=o("BartForQuestionAnswering"),wqo=o(" (BART model)"),Aqo=l(),Ab=a("li"),lme=a("strong"),yqo=o("bert"),Lqo=o(" \u2014 "),VG=a("a"),xqo=o("BertForQuestionAnswering"),$qo=o(" (BERT model)"),kqo=l(),yb=a("li"),ime=a("strong"),Sqo=o("big_bird"),Rqo=o(" \u2014 "),XG=a("a"),Bqo=o("BigBirdForQuestionAnswering"),Pqo=o(" (BigBird model)"),Iqo=l(),Lb=a("li"),dme=a("strong"),qqo=o("bigbird_pegasus"),Nqo=o(" \u2014 "),zG=a("a"),jqo=o("BigBirdPegasusForQuestionAnswering"),Dqo=o(" (BigBirdPegasus model)"),Gqo=l(),xb=a("li"),cme=a("strong"),Oqo=o("camembert"),Vqo=o(" \u2014 "),QG=a("a"),Xqo=o("CamembertForQuestionAnswering"),zqo=o(" (CamemBERT model)"),Qqo=l(),$b=a("li"),fme=a("strong"),Wqo=o("canine"),Hqo=o(" \u2014 "),WG=a("a"),Uqo=o("CanineForQuestionAnswering"),Jqo=o(" (Canine model)"),Yqo=l(),kb=a("li"),mme=a("strong"),Kqo=o("convbert"),Zqo=o(" \u2014 "),HG=a("a"),eNo=o("ConvBertForQuestionAnswering"),oNo=o(" (ConvBERT model)"),rNo=l(),Sb=a("li"),gme=a("strong"),tNo=o("data2vec-text"),aNo=o(" \u2014 "),UG=a("a"),nNo=o("Data2VecTextForQuestionAnswering"),sNo=o(" (Data2VecText model)"),lNo=l(),Rb=a("li"),hme=a("strong"),iNo=o("deberta"),dNo=o(" \u2014 "),JG=a("a"),cNo=o("DebertaForQuestionAnswering"),fNo=o(" (DeBERTa model)"),mNo=l(),Bb=a("li"),pme=a("strong"),gNo=o("deberta-v2"),hNo=o(" \u2014 "),YG=a("a"),pNo=o("DebertaV2ForQuestionAnswering"),uNo=o(" (DeBERTa-v2 model)"),_No=l(),Pb=a("li"),ume=a("strong"),bNo=o("distilbert"),vNo=o(" \u2014 "),KG=a("a"),FNo=o("DistilBertForQuestionAnswering"),TNo=o(" (DistilBERT model)"),MNo=l(),Ib=a("li"),_me=a("strong"),ENo=o("electra"),CNo=o(" \u2014 "),ZG=a("a"),wNo=o("ElectraForQuestionAnswering"),ANo=o(" (ELECTRA model)"),yNo=l(),qb=a("li"),bme=a("strong"),LNo=o("flaubert"),xNo=o(" \u2014 "),eO=a("a"),$No=o("FlaubertForQuestionAnsweringSimple"),kNo=o(" (FlauBERT model)"),SNo=l(),Nb=a("li"),vme=a("strong"),RNo=o("fnet"),BNo=o(" \u2014 "),oO=a("a"),PNo=o("FNetForQuestionAnswering"),INo=o(" (FNet model)"),qNo=l(),jb=a("li"),Fme=a("strong"),NNo=o("funnel"),jNo=o(" \u2014 "),rO=a("a"),DNo=o("FunnelForQuestionAnswering"),GNo=o(" (Funnel Transformer model)"),ONo=l(),Db=a("li"),Tme=a("strong"),VNo=o("gptj"),XNo=o(" \u2014 "),tO=a("a"),zNo=o("GPTJForQuestionAnswering"),QNo=o(" (GPT-J model)"),WNo=l(),Gb=a("li"),Mme=a("strong"),HNo=o("ibert"),UNo=o(" \u2014 "),aO=a("a"),JNo=o("IBertForQuestionAnswering"),YNo=o(" (I-BERT model)"),KNo=l(),Ob=a("li"),Eme=a("strong"),ZNo=o("layoutlmv2"),ejo=o(" \u2014 "),nO=a("a"),ojo=o("LayoutLMv2ForQuestionAnswering"),rjo=o(" (LayoutLMv2 model)"),tjo=l(),Vb=a("li"),Cme=a("strong"),ajo=o("led"),njo=o(" \u2014 "),sO=a("a"),sjo=o("LEDForQuestionAnswering"),ljo=o(" (LED model)"),ijo=l(),Xb=a("li"),wme=a("strong"),djo=o("longformer"),cjo=o(" \u2014 "),lO=a("a"),fjo=o("LongformerForQuestionAnswering"),mjo=o(" (Longformer model)"),gjo=l(),zb=a("li"),Ame=a("strong"),hjo=o("lxmert"),pjo=o(" \u2014 "),iO=a("a"),ujo=o("LxmertForQuestionAnswering"),_jo=o(" (LXMERT model)"),bjo=l(),Qb=a("li"),yme=a("strong"),vjo=o("mbart"),Fjo=o(" \u2014 "),dO=a("a"),Tjo=o("MBartForQuestionAnswering"),Mjo=o(" (mBART model)"),Ejo=l(),Wb=a("li"),Lme=a("strong"),Cjo=o("megatron-bert"),wjo=o(" \u2014 "),cO=a("a"),Ajo=o("MegatronBertForQuestionAnswering"),yjo=o(" (MegatronBert model)"),Ljo=l(),Hb=a("li"),xme=a("strong"),xjo=o("mobilebert"),$jo=o(" \u2014 "),fO=a("a"),kjo=o("MobileBertForQuestionAnswering"),Sjo=o(" (MobileBERT model)"),Rjo=l(),Ub=a("li"),$me=a("strong"),Bjo=o("mpnet"),Pjo=o(" \u2014 "),mO=a("a"),Ijo=o("MPNetForQuestionAnswering"),qjo=o(" (MPNet model)"),Njo=l(),Jb=a("li"),kme=a("strong"),jjo=o("nystromformer"),Djo=o(" \u2014 "),gO=a("a"),Gjo=o("NystromformerForQuestionAnswering"),Ojo=o(" (Nystromformer model)"),Vjo=l(),Yb=a("li"),Sme=a("strong"),Xjo=o("qdqbert"),zjo=o(" \u2014 "),hO=a("a"),Qjo=o("QDQBertForQuestionAnswering"),Wjo=o(" (QDQBert model)"),Hjo=l(),Kb=a("li"),Rme=a("strong"),Ujo=o("reformer"),Jjo=o(" \u2014 "),pO=a("a"),Yjo=o("ReformerForQuestionAnswering"),Kjo=o(" (Reformer model)"),Zjo=l(),Zb=a("li"),Bme=a("strong"),eDo=o("rembert"),oDo=o(" \u2014 "),uO=a("a"),rDo=o("RemBertForQuestionAnswering"),tDo=o(" (RemBERT model)"),aDo=l(),ev=a("li"),Pme=a("strong"),nDo=o("roberta"),sDo=o(" \u2014 "),_O=a("a"),lDo=o("RobertaForQuestionAnswering"),iDo=o(" (RoBERTa model)"),dDo=l(),ov=a("li"),Ime=a("strong"),cDo=o("roformer"),fDo=o(" \u2014 "),bO=a("a"),mDo=o("RoFormerForQuestionAnswering"),gDo=o(" (RoFormer model)"),hDo=l(),rv=a("li"),qme=a("strong"),pDo=o("splinter"),uDo=o(" \u2014 "),vO=a("a"),_Do=o("SplinterForQuestionAnswering"),bDo=o(" (Splinter model)"),vDo=l(),tv=a("li"),Nme=a("strong"),FDo=o("squeezebert"),TDo=o(" \u2014 "),FO=a("a"),MDo=o("SqueezeBertForQuestionAnswering"),EDo=o(" (SqueezeBERT model)"),CDo=l(),av=a("li"),jme=a("strong"),wDo=o("xlm"),ADo=o(" \u2014 "),TO=a("a"),yDo=o("XLMForQuestionAnsweringSimple"),LDo=o(" (XLM model)"),xDo=l(),nv=a("li"),Dme=a("strong"),$Do=o("xlm-roberta"),kDo=o(" \u2014 "),MO=a("a"),SDo=o("XLMRobertaForQuestionAnswering"),RDo=o(" (XLM-RoBERTa model)"),BDo=l(),sv=a("li"),Gme=a("strong"),PDo=o("xlm-roberta-xl"),IDo=o(" \u2014 "),EO=a("a"),qDo=o("XLMRobertaXLForQuestionAnswering"),NDo=o(" (XLM-RoBERTa-XL model)"),jDo=l(),lv=a("li"),Ome=a("strong"),DDo=o("xlnet"),GDo=o(" \u2014 "),CO=a("a"),ODo=o("XLNetForQuestionAnsweringSimple"),VDo=o(" (XLNet model)"),XDo=l(),iv=a("li"),Vme=a("strong"),zDo=o("yoso"),QDo=o(" \u2014 "),wO=a("a"),WDo=o("YosoForQuestionAnswering"),HDo=o(" (YOSO model)"),UDo=l(),dv=a("p"),JDo=o("The model is set in evaluation mode by default using "),Xme=a("code"),YDo=o("model.eval()"),KDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zme=a("code"),ZDo=o("model.train()"),eGo=l(),F(cv.$$.fragment),WBe=l(),zi=a("h2"),fv=a("a"),Qme=a("span"),F(Q0.$$.fragment),oGo=l(),Wme=a("span"),rGo=o("AutoModelForTableQuestionAnswering"),HBe=l(),No=a("div"),F(W0.$$.fragment),tGo=l(),Qi=a("p"),aGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),AO=a("a"),nGo=o("from_pretrained()"),sGo=o(" class method or the "),yO=a("a"),lGo=o("from_config()"),iGo=o(` class
method.`),dGo=l(),H0=a("p"),cGo=o("This class cannot be instantiated directly using "),Hme=a("code"),fGo=o("__init__()"),mGo=o(" (throws an error)."),gGo=l(),dt=a("div"),F(U0.$$.fragment),hGo=l(),Ume=a("p"),pGo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),uGo=l(),Wi=a("p"),_Go=o(`Note:
Loading a model from its configuration file does `),Jme=a("strong"),bGo=o("not"),vGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LO=a("a"),FGo=o("from_pretrained()"),TGo=o(" to load the model weights."),MGo=l(),F(mv.$$.fragment),EGo=l(),ao=a("div"),F(J0.$$.fragment),CGo=l(),Yme=a("p"),wGo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),AGo=l(),Ra=a("p"),yGo=o("The model class to instantiate is selected based on the "),Kme=a("code"),LGo=o("model_type"),xGo=o(` property of the config object (either
passed as an argument or loaded from `),Zme=a("code"),$Go=o("pretrained_model_name_or_path"),kGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ege=a("code"),SGo=o("pretrained_model_name_or_path"),RGo=o(":"),BGo=l(),oge=a("ul"),gv=a("li"),rge=a("strong"),PGo=o("tapas"),IGo=o(" \u2014 "),xO=a("a"),qGo=o("TapasForQuestionAnswering"),NGo=o(" (TAPAS model)"),jGo=l(),hv=a("p"),DGo=o("The model is set in evaluation mode by default using "),tge=a("code"),GGo=o("model.eval()"),OGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),age=a("code"),VGo=o("model.train()"),XGo=l(),F(pv.$$.fragment),UBe=l(),Hi=a("h2"),uv=a("a"),nge=a("span"),F(Y0.$$.fragment),zGo=l(),sge=a("span"),QGo=o("AutoModelForImageClassification"),JBe=l(),jo=a("div"),F(K0.$$.fragment),WGo=l(),Ui=a("p"),HGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),$O=a("a"),UGo=o("from_pretrained()"),JGo=o(" class method or the "),kO=a("a"),YGo=o("from_config()"),KGo=o(` class
method.`),ZGo=l(),Z0=a("p"),eOo=o("This class cannot be instantiated directly using "),lge=a("code"),oOo=o("__init__()"),rOo=o(" (throws an error)."),tOo=l(),ct=a("div"),F(ey.$$.fragment),aOo=l(),ige=a("p"),nOo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),sOo=l(),Ji=a("p"),lOo=o(`Note:
Loading a model from its configuration file does `),dge=a("strong"),iOo=o("not"),dOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SO=a("a"),cOo=o("from_pretrained()"),fOo=o(" to load the model weights."),mOo=l(),F(_v.$$.fragment),gOo=l(),no=a("div"),F(oy.$$.fragment),hOo=l(),cge=a("p"),pOo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),uOo=l(),Ba=a("p"),_Oo=o("The model class to instantiate is selected based on the "),fge=a("code"),bOo=o("model_type"),vOo=o(` property of the config object (either
passed as an argument or loaded from `),mge=a("code"),FOo=o("pretrained_model_name_or_path"),TOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gge=a("code"),MOo=o("pretrained_model_name_or_path"),EOo=o(":"),COo=l(),ve=a("ul"),bv=a("li"),hge=a("strong"),wOo=o("beit"),AOo=o(" \u2014 "),RO=a("a"),yOo=o("BeitForImageClassification"),LOo=o(" (BEiT model)"),xOo=l(),vv=a("li"),pge=a("strong"),$Oo=o("convnext"),kOo=o(" \u2014 "),BO=a("a"),SOo=o("ConvNextForImageClassification"),ROo=o(" (ConvNext model)"),BOo=l(),Fv=a("li"),uge=a("strong"),POo=o("data2vec-vision"),IOo=o(" \u2014 "),PO=a("a"),qOo=o("Data2VecVisionForImageClassification"),NOo=o(" (Data2VecVision model)"),jOo=l(),xs=a("li"),_ge=a("strong"),DOo=o("deit"),GOo=o(" \u2014 "),IO=a("a"),OOo=o("DeiTForImageClassification"),VOo=o(" or "),qO=a("a"),XOo=o("DeiTForImageClassificationWithTeacher"),zOo=o(" (DeiT model)"),QOo=l(),Tv=a("li"),bge=a("strong"),WOo=o("imagegpt"),HOo=o(" \u2014 "),NO=a("a"),UOo=o("ImageGPTForImageClassification"),JOo=o(" (ImageGPT model)"),YOo=l(),ft=a("li"),vge=a("strong"),KOo=o("perceiver"),ZOo=o(" \u2014 "),jO=a("a"),eVo=o("PerceiverForImageClassificationLearned"),oVo=o(" or "),DO=a("a"),rVo=o("PerceiverForImageClassificationFourier"),tVo=o(" or "),GO=a("a"),aVo=o("PerceiverForImageClassificationConvProcessing"),nVo=o(" (Perceiver model)"),sVo=l(),Mv=a("li"),Fge=a("strong"),lVo=o("poolformer"),iVo=o(" \u2014 "),OO=a("a"),dVo=o("PoolFormerForImageClassification"),cVo=o(" (PoolFormer model)"),fVo=l(),Ev=a("li"),Tge=a("strong"),mVo=o("regnet"),gVo=o(" \u2014 "),VO=a("a"),hVo=o("RegNetForImageClassification"),pVo=o(" (RegNet model)"),uVo=l(),Cv=a("li"),Mge=a("strong"),_Vo=o("resnet"),bVo=o(" \u2014 "),XO=a("a"),vVo=o("ResNetForImageClassification"),FVo=o(" (ResNet model)"),TVo=l(),wv=a("li"),Ege=a("strong"),MVo=o("segformer"),EVo=o(" \u2014 "),zO=a("a"),CVo=o("SegformerForImageClassification"),wVo=o(" (SegFormer model)"),AVo=l(),Av=a("li"),Cge=a("strong"),yVo=o("swin"),LVo=o(" \u2014 "),QO=a("a"),xVo=o("SwinForImageClassification"),$Vo=o(" (Swin model)"),kVo=l(),yv=a("li"),wge=a("strong"),SVo=o("van"),RVo=o(" \u2014 "),WO=a("a"),BVo=o("VanForImageClassification"),PVo=o(" (VAN model)"),IVo=l(),Lv=a("li"),Age=a("strong"),qVo=o("vit"),NVo=o(" \u2014 "),HO=a("a"),jVo=o("ViTForImageClassification"),DVo=o(" (ViT model)"),GVo=l(),xv=a("p"),OVo=o("The model is set in evaluation mode by default using "),yge=a("code"),VVo=o("model.eval()"),XVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lge=a("code"),zVo=o("model.train()"),QVo=l(),F($v.$$.fragment),YBe=l(),Yi=a("h2"),kv=a("a"),xge=a("span"),F(ry.$$.fragment),WVo=l(),$ge=a("span"),HVo=o("AutoModelForVision2Seq"),KBe=l(),Do=a("div"),F(ty.$$.fragment),UVo=l(),Ki=a("p"),JVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),UO=a("a"),YVo=o("from_pretrained()"),KVo=o(" class method or the "),JO=a("a"),ZVo=o("from_config()"),eXo=o(` class
method.`),oXo=l(),ay=a("p"),rXo=o("This class cannot be instantiated directly using "),kge=a("code"),tXo=o("__init__()"),aXo=o(" (throws an error)."),nXo=l(),mt=a("div"),F(ny.$$.fragment),sXo=l(),Sge=a("p"),lXo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),iXo=l(),Zi=a("p"),dXo=o(`Note:
Loading a model from its configuration file does `),Rge=a("strong"),cXo=o("not"),fXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YO=a("a"),mXo=o("from_pretrained()"),gXo=o(" to load the model weights."),hXo=l(),F(Sv.$$.fragment),pXo=l(),so=a("div"),F(sy.$$.fragment),uXo=l(),Bge=a("p"),_Xo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),bXo=l(),Pa=a("p"),vXo=o("The model class to instantiate is selected based on the "),Pge=a("code"),FXo=o("model_type"),TXo=o(` property of the config object (either
passed as an argument or loaded from `),Ige=a("code"),MXo=o("pretrained_model_name_or_path"),EXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qge=a("code"),CXo=o("pretrained_model_name_or_path"),wXo=o(":"),AXo=l(),Nge=a("ul"),Rv=a("li"),jge=a("strong"),yXo=o("vision-encoder-decoder"),LXo=o(" \u2014 "),KO=a("a"),xXo=o("VisionEncoderDecoderModel"),$Xo=o(" (Vision Encoder decoder model)"),kXo=l(),Bv=a("p"),SXo=o("The model is set in evaluation mode by default using "),Dge=a("code"),RXo=o("model.eval()"),BXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gge=a("code"),PXo=o("model.train()"),IXo=l(),F(Pv.$$.fragment),ZBe=l(),ed=a("h2"),Iv=a("a"),Oge=a("span"),F(ly.$$.fragment),qXo=l(),Vge=a("span"),NXo=o("AutoModelForAudioClassification"),ePe=l(),Go=a("div"),F(iy.$$.fragment),jXo=l(),od=a("p"),DXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),ZO=a("a"),GXo=o("from_pretrained()"),OXo=o(" class method or the "),eV=a("a"),VXo=o("from_config()"),XXo=o(` class
method.`),zXo=l(),dy=a("p"),QXo=o("This class cannot be instantiated directly using "),Xge=a("code"),WXo=o("__init__()"),HXo=o(" (throws an error)."),UXo=l(),gt=a("div"),F(cy.$$.fragment),JXo=l(),zge=a("p"),YXo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),KXo=l(),rd=a("p"),ZXo=o(`Note:
Loading a model from its configuration file does `),Qge=a("strong"),ezo=o("not"),ozo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oV=a("a"),rzo=o("from_pretrained()"),tzo=o(" to load the model weights."),azo=l(),F(qv.$$.fragment),nzo=l(),lo=a("div"),F(fy.$$.fragment),szo=l(),Wge=a("p"),lzo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),izo=l(),Ia=a("p"),dzo=o("The model class to instantiate is selected based on the "),Hge=a("code"),czo=o("model_type"),fzo=o(` property of the config object (either
passed as an argument or loaded from `),Uge=a("code"),mzo=o("pretrained_model_name_or_path"),gzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jge=a("code"),hzo=o("pretrained_model_name_or_path"),pzo=o(":"),uzo=l(),Ne=a("ul"),Nv=a("li"),Yge=a("strong"),_zo=o("data2vec-audio"),bzo=o(" \u2014 "),rV=a("a"),vzo=o("Data2VecAudioForSequenceClassification"),Fzo=o(" (Data2VecAudio model)"),Tzo=l(),jv=a("li"),Kge=a("strong"),Mzo=o("hubert"),Ezo=o(" \u2014 "),tV=a("a"),Czo=o("HubertForSequenceClassification"),wzo=o(" (Hubert model)"),Azo=l(),Dv=a("li"),Zge=a("strong"),yzo=o("sew"),Lzo=o(" \u2014 "),aV=a("a"),xzo=o("SEWForSequenceClassification"),$zo=o(" (SEW model)"),kzo=l(),Gv=a("li"),ehe=a("strong"),Szo=o("sew-d"),Rzo=o(" \u2014 "),nV=a("a"),Bzo=o("SEWDForSequenceClassification"),Pzo=o(" (SEW-D model)"),Izo=l(),Ov=a("li"),ohe=a("strong"),qzo=o("unispeech"),Nzo=o(" \u2014 "),sV=a("a"),jzo=o("UniSpeechForSequenceClassification"),Dzo=o(" (UniSpeech model)"),Gzo=l(),Vv=a("li"),rhe=a("strong"),Ozo=o("unispeech-sat"),Vzo=o(" \u2014 "),lV=a("a"),Xzo=o("UniSpeechSatForSequenceClassification"),zzo=o(" (UniSpeechSat model)"),Qzo=l(),Xv=a("li"),the=a("strong"),Wzo=o("wav2vec2"),Hzo=o(" \u2014 "),iV=a("a"),Uzo=o("Wav2Vec2ForSequenceClassification"),Jzo=o(" (Wav2Vec2 model)"),Yzo=l(),zv=a("li"),ahe=a("strong"),Kzo=o("wavlm"),Zzo=o(" \u2014 "),dV=a("a"),eQo=o("WavLMForSequenceClassification"),oQo=o(" (WavLM model)"),rQo=l(),Qv=a("p"),tQo=o("The model is set in evaluation mode by default using "),nhe=a("code"),aQo=o("model.eval()"),nQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),she=a("code"),sQo=o("model.train()"),lQo=l(),F(Wv.$$.fragment),oPe=l(),td=a("h2"),Hv=a("a"),lhe=a("span"),F(my.$$.fragment),iQo=l(),ihe=a("span"),dQo=o("AutoModelForAudioFrameClassification"),rPe=l(),Oo=a("div"),F(gy.$$.fragment),cQo=l(),ad=a("p"),fQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),cV=a("a"),mQo=o("from_pretrained()"),gQo=o(" class method or the "),fV=a("a"),hQo=o("from_config()"),pQo=o(` class
method.`),uQo=l(),hy=a("p"),_Qo=o("This class cannot be instantiated directly using "),dhe=a("code"),bQo=o("__init__()"),vQo=o(" (throws an error)."),FQo=l(),ht=a("div"),F(py.$$.fragment),TQo=l(),che=a("p"),MQo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),EQo=l(),nd=a("p"),CQo=o(`Note:
Loading a model from its configuration file does `),fhe=a("strong"),wQo=o("not"),AQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mV=a("a"),yQo=o("from_pretrained()"),LQo=o(" to load the model weights."),xQo=l(),F(Uv.$$.fragment),$Qo=l(),io=a("div"),F(uy.$$.fragment),kQo=l(),mhe=a("p"),SQo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),RQo=l(),qa=a("p"),BQo=o("The model class to instantiate is selected based on the "),ghe=a("code"),PQo=o("model_type"),IQo=o(` property of the config object (either
passed as an argument or loaded from `),hhe=a("code"),qQo=o("pretrained_model_name_or_path"),NQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),phe=a("code"),jQo=o("pretrained_model_name_or_path"),DQo=o(":"),GQo=l(),Na=a("ul"),Jv=a("li"),uhe=a("strong"),OQo=o("data2vec-audio"),VQo=o(" \u2014 "),gV=a("a"),XQo=o("Data2VecAudioForAudioFrameClassification"),zQo=o(" (Data2VecAudio model)"),QQo=l(),Yv=a("li"),_he=a("strong"),WQo=o("unispeech-sat"),HQo=o(" \u2014 "),hV=a("a"),UQo=o("UniSpeechSatForAudioFrameClassification"),JQo=o(" (UniSpeechSat model)"),YQo=l(),Kv=a("li"),bhe=a("strong"),KQo=o("wav2vec2"),ZQo=o(" \u2014 "),pV=a("a"),eWo=o("Wav2Vec2ForAudioFrameClassification"),oWo=o(" (Wav2Vec2 model)"),rWo=l(),Zv=a("li"),vhe=a("strong"),tWo=o("wavlm"),aWo=o(" \u2014 "),uV=a("a"),nWo=o("WavLMForAudioFrameClassification"),sWo=o(" (WavLM model)"),lWo=l(),eF=a("p"),iWo=o("The model is set in evaluation mode by default using "),Fhe=a("code"),dWo=o("model.eval()"),cWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),The=a("code"),fWo=o("model.train()"),mWo=l(),F(oF.$$.fragment),tPe=l(),sd=a("h2"),rF=a("a"),Mhe=a("span"),F(_y.$$.fragment),gWo=l(),Ehe=a("span"),hWo=o("AutoModelForCTC"),aPe=l(),Vo=a("div"),F(by.$$.fragment),pWo=l(),ld=a("p"),uWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),_V=a("a"),_Wo=o("from_pretrained()"),bWo=o(" class method or the "),bV=a("a"),vWo=o("from_config()"),FWo=o(` class
method.`),TWo=l(),vy=a("p"),MWo=o("This class cannot be instantiated directly using "),Che=a("code"),EWo=o("__init__()"),CWo=o(" (throws an error)."),wWo=l(),pt=a("div"),F(Fy.$$.fragment),AWo=l(),whe=a("p"),yWo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),LWo=l(),id=a("p"),xWo=o(`Note:
Loading a model from its configuration file does `),Ahe=a("strong"),$Wo=o("not"),kWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vV=a("a"),SWo=o("from_pretrained()"),RWo=o(" to load the model weights."),BWo=l(),F(tF.$$.fragment),PWo=l(),co=a("div"),F(Ty.$$.fragment),IWo=l(),yhe=a("p"),qWo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),NWo=l(),ja=a("p"),jWo=o("The model class to instantiate is selected based on the "),Lhe=a("code"),DWo=o("model_type"),GWo=o(` property of the config object (either
passed as an argument or loaded from `),xhe=a("code"),OWo=o("pretrained_model_name_or_path"),VWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$he=a("code"),XWo=o("pretrained_model_name_or_path"),zWo=o(":"),QWo=l(),je=a("ul"),aF=a("li"),khe=a("strong"),WWo=o("data2vec-audio"),HWo=o(" \u2014 "),FV=a("a"),UWo=o("Data2VecAudioForCTC"),JWo=o(" (Data2VecAudio model)"),YWo=l(),nF=a("li"),She=a("strong"),KWo=o("hubert"),ZWo=o(" \u2014 "),TV=a("a"),eHo=o("HubertForCTC"),oHo=o(" (Hubert model)"),rHo=l(),sF=a("li"),Rhe=a("strong"),tHo=o("sew"),aHo=o(" \u2014 "),MV=a("a"),nHo=o("SEWForCTC"),sHo=o(" (SEW model)"),lHo=l(),lF=a("li"),Bhe=a("strong"),iHo=o("sew-d"),dHo=o(" \u2014 "),EV=a("a"),cHo=o("SEWDForCTC"),fHo=o(" (SEW-D model)"),mHo=l(),iF=a("li"),Phe=a("strong"),gHo=o("unispeech"),hHo=o(" \u2014 "),CV=a("a"),pHo=o("UniSpeechForCTC"),uHo=o(" (UniSpeech model)"),_Ho=l(),dF=a("li"),Ihe=a("strong"),bHo=o("unispeech-sat"),vHo=o(" \u2014 "),wV=a("a"),FHo=o("UniSpeechSatForCTC"),THo=o(" (UniSpeechSat model)"),MHo=l(),cF=a("li"),qhe=a("strong"),EHo=o("wav2vec2"),CHo=o(" \u2014 "),AV=a("a"),wHo=o("Wav2Vec2ForCTC"),AHo=o(" (Wav2Vec2 model)"),yHo=l(),fF=a("li"),Nhe=a("strong"),LHo=o("wavlm"),xHo=o(" \u2014 "),yV=a("a"),$Ho=o("WavLMForCTC"),kHo=o(" (WavLM model)"),SHo=l(),mF=a("p"),RHo=o("The model is set in evaluation mode by default using "),jhe=a("code"),BHo=o("model.eval()"),PHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dhe=a("code"),IHo=o("model.train()"),qHo=l(),F(gF.$$.fragment),nPe=l(),dd=a("h2"),hF=a("a"),Ghe=a("span"),F(My.$$.fragment),NHo=l(),Ohe=a("span"),jHo=o("AutoModelForSpeechSeq2Seq"),sPe=l(),Xo=a("div"),F(Ey.$$.fragment),DHo=l(),cd=a("p"),GHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),LV=a("a"),OHo=o("from_pretrained()"),VHo=o(" class method or the "),xV=a("a"),XHo=o("from_config()"),zHo=o(` class
method.`),QHo=l(),Cy=a("p"),WHo=o("This class cannot be instantiated directly using "),Vhe=a("code"),HHo=o("__init__()"),UHo=o(" (throws an error)."),JHo=l(),ut=a("div"),F(wy.$$.fragment),YHo=l(),Xhe=a("p"),KHo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),ZHo=l(),fd=a("p"),eUo=o(`Note:
Loading a model from its configuration file does `),zhe=a("strong"),oUo=o("not"),rUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$V=a("a"),tUo=o("from_pretrained()"),aUo=o(" to load the model weights."),nUo=l(),F(pF.$$.fragment),sUo=l(),fo=a("div"),F(Ay.$$.fragment),lUo=l(),Qhe=a("p"),iUo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),dUo=l(),Da=a("p"),cUo=o("The model class to instantiate is selected based on the "),Whe=a("code"),fUo=o("model_type"),mUo=o(` property of the config object (either
passed as an argument or loaded from `),Hhe=a("code"),gUo=o("pretrained_model_name_or_path"),hUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uhe=a("code"),pUo=o("pretrained_model_name_or_path"),uUo=o(":"),_Uo=l(),yy=a("ul"),uF=a("li"),Jhe=a("strong"),bUo=o("speech-encoder-decoder"),vUo=o(" \u2014 "),kV=a("a"),FUo=o("SpeechEncoderDecoderModel"),TUo=o(" (Speech Encoder decoder model)"),MUo=l(),_F=a("li"),Yhe=a("strong"),EUo=o("speech_to_text"),CUo=o(" \u2014 "),SV=a("a"),wUo=o("Speech2TextForConditionalGeneration"),AUo=o(" (Speech2Text model)"),yUo=l(),bF=a("p"),LUo=o("The model is set in evaluation mode by default using "),Khe=a("code"),xUo=o("model.eval()"),$Uo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zhe=a("code"),kUo=o("model.train()"),SUo=l(),F(vF.$$.fragment),lPe=l(),md=a("h2"),FF=a("a"),epe=a("span"),F(Ly.$$.fragment),RUo=l(),ope=a("span"),BUo=o("AutoModelForAudioXVector"),iPe=l(),zo=a("div"),F(xy.$$.fragment),PUo=l(),gd=a("p"),IUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),RV=a("a"),qUo=o("from_pretrained()"),NUo=o(" class method or the "),BV=a("a"),jUo=o("from_config()"),DUo=o(` class
method.`),GUo=l(),$y=a("p"),OUo=o("This class cannot be instantiated directly using "),rpe=a("code"),VUo=o("__init__()"),XUo=o(" (throws an error)."),zUo=l(),_t=a("div"),F(ky.$$.fragment),QUo=l(),tpe=a("p"),WUo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),HUo=l(),hd=a("p"),UUo=o(`Note:
Loading a model from its configuration file does `),ape=a("strong"),JUo=o("not"),YUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PV=a("a"),KUo=o("from_pretrained()"),ZUo=o(" to load the model weights."),eJo=l(),F(TF.$$.fragment),oJo=l(),mo=a("div"),F(Sy.$$.fragment),rJo=l(),npe=a("p"),tJo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),aJo=l(),Ga=a("p"),nJo=o("The model class to instantiate is selected based on the "),spe=a("code"),sJo=o("model_type"),lJo=o(` property of the config object (either
passed as an argument or loaded from `),lpe=a("code"),iJo=o("pretrained_model_name_or_path"),dJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ipe=a("code"),cJo=o("pretrained_model_name_or_path"),fJo=o(":"),mJo=l(),Oa=a("ul"),MF=a("li"),dpe=a("strong"),gJo=o("data2vec-audio"),hJo=o(" \u2014 "),IV=a("a"),pJo=o("Data2VecAudioForXVector"),uJo=o(" (Data2VecAudio model)"),_Jo=l(),EF=a("li"),cpe=a("strong"),bJo=o("unispeech-sat"),vJo=o(" \u2014 "),qV=a("a"),FJo=o("UniSpeechSatForXVector"),TJo=o(" (UniSpeechSat model)"),MJo=l(),CF=a("li"),fpe=a("strong"),EJo=o("wav2vec2"),CJo=o(" \u2014 "),NV=a("a"),wJo=o("Wav2Vec2ForXVector"),AJo=o(" (Wav2Vec2 model)"),yJo=l(),wF=a("li"),mpe=a("strong"),LJo=o("wavlm"),xJo=o(" \u2014 "),jV=a("a"),$Jo=o("WavLMForXVector"),kJo=o(" (WavLM model)"),SJo=l(),AF=a("p"),RJo=o("The model is set in evaluation mode by default using "),gpe=a("code"),BJo=o("model.eval()"),PJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hpe=a("code"),IJo=o("model.train()"),qJo=l(),F(yF.$$.fragment),dPe=l(),pd=a("h2"),LF=a("a"),ppe=a("span"),F(Ry.$$.fragment),NJo=l(),upe=a("span"),jJo=o("AutoModelForMaskedImageModeling"),cPe=l(),Qo=a("div"),F(By.$$.fragment),DJo=l(),ud=a("p"),GJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),DV=a("a"),OJo=o("from_pretrained()"),VJo=o(" class method or the "),GV=a("a"),XJo=o("from_config()"),zJo=o(` class
method.`),QJo=l(),Py=a("p"),WJo=o("This class cannot be instantiated directly using "),_pe=a("code"),HJo=o("__init__()"),UJo=o(" (throws an error)."),JJo=l(),bt=a("div"),F(Iy.$$.fragment),YJo=l(),bpe=a("p"),KJo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),ZJo=l(),_d=a("p"),eYo=o(`Note:
Loading a model from its configuration file does `),vpe=a("strong"),oYo=o("not"),rYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OV=a("a"),tYo=o("from_pretrained()"),aYo=o(" to load the model weights."),nYo=l(),F(xF.$$.fragment),sYo=l(),go=a("div"),F(qy.$$.fragment),lYo=l(),Fpe=a("p"),iYo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),dYo=l(),Va=a("p"),cYo=o("The model class to instantiate is selected based on the "),Tpe=a("code"),fYo=o("model_type"),mYo=o(` property of the config object (either
passed as an argument or loaded from `),Mpe=a("code"),gYo=o("pretrained_model_name_or_path"),hYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Epe=a("code"),pYo=o("pretrained_model_name_or_path"),uYo=o(":"),_Yo=l(),bd=a("ul"),$F=a("li"),Cpe=a("strong"),bYo=o("deit"),vYo=o(" \u2014 "),VV=a("a"),FYo=o("DeiTForMaskedImageModeling"),TYo=o(" (DeiT model)"),MYo=l(),kF=a("li"),wpe=a("strong"),EYo=o("swin"),CYo=o(" \u2014 "),XV=a("a"),wYo=o("SwinForMaskedImageModeling"),AYo=o(" (Swin model)"),yYo=l(),SF=a("li"),Ape=a("strong"),LYo=o("vit"),xYo=o(" \u2014 "),zV=a("a"),$Yo=o("ViTForMaskedImageModeling"),kYo=o(" (ViT model)"),SYo=l(),RF=a("p"),RYo=o("The model is set in evaluation mode by default using "),ype=a("code"),BYo=o("model.eval()"),PYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lpe=a("code"),IYo=o("model.train()"),qYo=l(),F(BF.$$.fragment),fPe=l(),vd=a("h2"),PF=a("a"),xpe=a("span"),F(Ny.$$.fragment),NYo=l(),$pe=a("span"),jYo=o("AutoModelForObjectDetection"),mPe=l(),Wo=a("div"),F(jy.$$.fragment),DYo=l(),Fd=a("p"),GYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),QV=a("a"),OYo=o("from_pretrained()"),VYo=o(" class method or the "),WV=a("a"),XYo=o("from_config()"),zYo=o(` class
method.`),QYo=l(),Dy=a("p"),WYo=o("This class cannot be instantiated directly using "),kpe=a("code"),HYo=o("__init__()"),UYo=o(" (throws an error)."),JYo=l(),vt=a("div"),F(Gy.$$.fragment),YYo=l(),Spe=a("p"),KYo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),ZYo=l(),Td=a("p"),eKo=o(`Note:
Loading a model from its configuration file does `),Rpe=a("strong"),oKo=o("not"),rKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HV=a("a"),tKo=o("from_pretrained()"),aKo=o(" to load the model weights."),nKo=l(),F(IF.$$.fragment),sKo=l(),ho=a("div"),F(Oy.$$.fragment),lKo=l(),Bpe=a("p"),iKo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),dKo=l(),Xa=a("p"),cKo=o("The model class to instantiate is selected based on the "),Ppe=a("code"),fKo=o("model_type"),mKo=o(` property of the config object (either
passed as an argument or loaded from `),Ipe=a("code"),gKo=o("pretrained_model_name_or_path"),hKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qpe=a("code"),pKo=o("pretrained_model_name_or_path"),uKo=o(":"),_Ko=l(),Vy=a("ul"),qF=a("li"),Npe=a("strong"),bKo=o("detr"),vKo=o(" \u2014 "),UV=a("a"),FKo=o("DetrForObjectDetection"),TKo=o(" (DETR model)"),MKo=l(),NF=a("li"),jpe=a("strong"),EKo=o("yolos"),CKo=o(" \u2014 "),JV=a("a"),wKo=o("YolosForObjectDetection"),AKo=o(" (YOLOS model)"),yKo=l(),jF=a("p"),LKo=o("The model is set in evaluation mode by default using "),Dpe=a("code"),xKo=o("model.eval()"),$Ko=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gpe=a("code"),kKo=o("model.train()"),SKo=l(),F(DF.$$.fragment),gPe=l(),Md=a("h2"),GF=a("a"),Ope=a("span"),F(Xy.$$.fragment),RKo=l(),Vpe=a("span"),BKo=o("AutoModelForImageSegmentation"),hPe=l(),Ho=a("div"),F(zy.$$.fragment),PKo=l(),Ed=a("p"),IKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),YV=a("a"),qKo=o("from_pretrained()"),NKo=o(" class method or the "),KV=a("a"),jKo=o("from_config()"),DKo=o(` class
method.`),GKo=l(),Qy=a("p"),OKo=o("This class cannot be instantiated directly using "),Xpe=a("code"),VKo=o("__init__()"),XKo=o(" (throws an error)."),zKo=l(),Ft=a("div"),F(Wy.$$.fragment),QKo=l(),zpe=a("p"),WKo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),HKo=l(),Cd=a("p"),UKo=o(`Note:
Loading a model from its configuration file does `),Qpe=a("strong"),JKo=o("not"),YKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZV=a("a"),KKo=o("from_pretrained()"),ZKo=o(" to load the model weights."),eZo=l(),F(OF.$$.fragment),oZo=l(),po=a("div"),F(Hy.$$.fragment),rZo=l(),Wpe=a("p"),tZo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),aZo=l(),za=a("p"),nZo=o("The model class to instantiate is selected based on the "),Hpe=a("code"),sZo=o("model_type"),lZo=o(` property of the config object (either
passed as an argument or loaded from `),Upe=a("code"),iZo=o("pretrained_model_name_or_path"),dZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jpe=a("code"),cZo=o("pretrained_model_name_or_path"),fZo=o(":"),mZo=l(),Ype=a("ul"),VF=a("li"),Kpe=a("strong"),gZo=o("detr"),hZo=o(" \u2014 "),eX=a("a"),pZo=o("DetrForSegmentation"),uZo=o(" (DETR model)"),_Zo=l(),XF=a("p"),bZo=o("The model is set in evaluation mode by default using "),Zpe=a("code"),vZo=o("model.eval()"),FZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eue=a("code"),TZo=o("model.train()"),MZo=l(),F(zF.$$.fragment),pPe=l(),wd=a("h2"),QF=a("a"),oue=a("span"),F(Uy.$$.fragment),EZo=l(),rue=a("span"),CZo=o("AutoModelForSemanticSegmentation"),uPe=l(),Uo=a("div"),F(Jy.$$.fragment),wZo=l(),Ad=a("p"),AZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),oX=a("a"),yZo=o("from_pretrained()"),LZo=o(" class method or the "),rX=a("a"),xZo=o("from_config()"),$Zo=o(` class
method.`),kZo=l(),Yy=a("p"),SZo=o("This class cannot be instantiated directly using "),tue=a("code"),RZo=o("__init__()"),BZo=o(" (throws an error)."),PZo=l(),Tt=a("div"),F(Ky.$$.fragment),IZo=l(),aue=a("p"),qZo=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),NZo=l(),yd=a("p"),jZo=o(`Note:
Loading a model from its configuration file does `),nue=a("strong"),DZo=o("not"),GZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tX=a("a"),OZo=o("from_pretrained()"),VZo=o(" to load the model weights."),XZo=l(),F(WF.$$.fragment),zZo=l(),uo=a("div"),F(Zy.$$.fragment),QZo=l(),sue=a("p"),WZo=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),HZo=l(),Qa=a("p"),UZo=o("The model class to instantiate is selected based on the "),lue=a("code"),JZo=o("model_type"),YZo=o(` property of the config object (either
passed as an argument or loaded from `),iue=a("code"),KZo=o("pretrained_model_name_or_path"),ZZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),due=a("code"),eer=o("pretrained_model_name_or_path"),oer=o(":"),rer=l(),Wa=a("ul"),HF=a("li"),cue=a("strong"),ter=o("beit"),aer=o(" \u2014 "),aX=a("a"),ner=o("BeitForSemanticSegmentation"),ser=o(" (BEiT model)"),ler=l(),UF=a("li"),fue=a("strong"),ier=o("data2vec-vision"),der=o(" \u2014 "),nX=a("a"),cer=o("Data2VecVisionForSemanticSegmentation"),fer=o(" (Data2VecVision model)"),mer=l(),JF=a("li"),mue=a("strong"),ger=o("dpt"),her=o(" \u2014 "),sX=a("a"),per=o("DPTForSemanticSegmentation"),uer=o(" (DPT model)"),_er=l(),YF=a("li"),gue=a("strong"),ber=o("segformer"),ver=o(" \u2014 "),lX=a("a"),Fer=o("SegformerForSemanticSegmentation"),Ter=o(" (SegFormer model)"),Mer=l(),KF=a("p"),Eer=o("The model is set in evaluation mode by default using "),hue=a("code"),Cer=o("model.eval()"),wer=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pue=a("code"),Aer=o("model.train()"),yer=l(),F(ZF.$$.fragment),_Pe=l(),Ld=a("h2"),eT=a("a"),uue=a("span"),F(eL.$$.fragment),Ler=l(),_ue=a("span"),xer=o("AutoModelForInstanceSegmentation"),bPe=l(),Jo=a("div"),F(oL.$$.fragment),$er=l(),xd=a("p"),ker=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),iX=a("a"),Ser=o("from_pretrained()"),Rer=o(" class method or the "),dX=a("a"),Ber=o("from_config()"),Per=o(` class
method.`),Ier=l(),rL=a("p"),qer=o("This class cannot be instantiated directly using "),bue=a("code"),Ner=o("__init__()"),jer=o(" (throws an error)."),Der=l(),Mt=a("div"),F(tL.$$.fragment),Ger=l(),vue=a("p"),Oer=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Ver=l(),$d=a("p"),Xer=o(`Note:
Loading a model from its configuration file does `),Fue=a("strong"),zer=o("not"),Qer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cX=a("a"),Wer=o("from_pretrained()"),Her=o(" to load the model weights."),Uer=l(),F(oT.$$.fragment),Jer=l(),_o=a("div"),F(aL.$$.fragment),Yer=l(),Tue=a("p"),Ker=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Zer=l(),Ha=a("p"),eor=o("The model class to instantiate is selected based on the "),Mue=a("code"),oor=o("model_type"),ror=o(` property of the config object (either
passed as an argument or loaded from `),Eue=a("code"),tor=o("pretrained_model_name_or_path"),aor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cue=a("code"),nor=o("pretrained_model_name_or_path"),sor=o(":"),lor=l(),wue=a("ul"),rT=a("li"),Aue=a("strong"),ior=o("maskformer"),dor=o(" \u2014 "),fX=a("a"),cor=o("MaskFormerForInstanceSegmentation"),mor=o(" (MaskFormer model)"),gor=l(),tT=a("p"),hor=o("The model is set in evaluation mode by default using "),yue=a("code"),por=o("model.eval()"),uor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lue=a("code"),_or=o("model.train()"),bor=l(),F(aT.$$.fragment),vPe=l(),kd=a("h2"),nT=a("a"),xue=a("span"),F(nL.$$.fragment),vor=l(),$ue=a("span"),For=o("TFAutoModel"),FPe=l(),Yo=a("div"),F(sL.$$.fragment),Tor=l(),Sd=a("p"),Mor=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),mX=a("a"),Eor=o("from_pretrained()"),Cor=o(" class method or the "),gX=a("a"),wor=o("from_config()"),Aor=o(` class
method.`),yor=l(),lL=a("p"),Lor=o("This class cannot be instantiated directly using "),kue=a("code"),xor=o("__init__()"),$or=o(" (throws an error)."),kor=l(),Et=a("div"),F(iL.$$.fragment),Sor=l(),Sue=a("p"),Ror=o("Instantiates one of the base model classes of the library from a configuration."),Bor=l(),Rd=a("p"),Por=o(`Note:
Loading a model from its configuration file does `),Rue=a("strong"),Ior=o("not"),qor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hX=a("a"),Nor=o("from_pretrained()"),jor=o(" to load the model weights."),Dor=l(),F(sT.$$.fragment),Gor=l(),Cr=a("div"),F(dL.$$.fragment),Oor=l(),Bue=a("p"),Vor=o("Instantiate one of the base model classes of the library from a pretrained model."),Xor=l(),Ua=a("p"),zor=o("The model class to instantiate is selected based on the "),Pue=a("code"),Qor=o("model_type"),Wor=o(` property of the config object (either
passed as an argument or loaded from `),Iue=a("code"),Hor=o("pretrained_model_name_or_path"),Uor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),que=a("code"),Jor=o("pretrained_model_name_or_path"),Yor=o(":"),Kor=l(),j=a("ul"),lT=a("li"),Nue=a("strong"),Zor=o("albert"),err=o(" \u2014 "),pX=a("a"),orr=o("TFAlbertModel"),rrr=o(" (ALBERT model)"),trr=l(),iT=a("li"),jue=a("strong"),arr=o("bart"),nrr=o(" \u2014 "),uX=a("a"),srr=o("TFBartModel"),lrr=o(" (BART model)"),irr=l(),dT=a("li"),Due=a("strong"),drr=o("bert"),crr=o(" \u2014 "),_X=a("a"),frr=o("TFBertModel"),mrr=o(" (BERT model)"),grr=l(),cT=a("li"),Gue=a("strong"),hrr=o("blenderbot"),prr=o(" \u2014 "),bX=a("a"),urr=o("TFBlenderbotModel"),_rr=o(" (Blenderbot model)"),brr=l(),fT=a("li"),Oue=a("strong"),vrr=o("blenderbot-small"),Frr=o(" \u2014 "),vX=a("a"),Trr=o("TFBlenderbotSmallModel"),Mrr=o(" (BlenderbotSmall model)"),Err=l(),mT=a("li"),Vue=a("strong"),Crr=o("camembert"),wrr=o(" \u2014 "),FX=a("a"),Arr=o("TFCamembertModel"),yrr=o(" (CamemBERT model)"),Lrr=l(),gT=a("li"),Xue=a("strong"),xrr=o("clip"),$rr=o(" \u2014 "),TX=a("a"),krr=o("TFCLIPModel"),Srr=o(" (CLIP model)"),Rrr=l(),hT=a("li"),zue=a("strong"),Brr=o("convbert"),Prr=o(" \u2014 "),MX=a("a"),Irr=o("TFConvBertModel"),qrr=o(" (ConvBERT model)"),Nrr=l(),pT=a("li"),Que=a("strong"),jrr=o("convnext"),Drr=o(" \u2014 "),EX=a("a"),Grr=o("TFConvNextModel"),Orr=o(" (ConvNext model)"),Vrr=l(),uT=a("li"),Wue=a("strong"),Xrr=o("ctrl"),zrr=o(" \u2014 "),CX=a("a"),Qrr=o("TFCTRLModel"),Wrr=o(" (CTRL model)"),Hrr=l(),_T=a("li"),Hue=a("strong"),Urr=o("data2vec-vision"),Jrr=o(" \u2014 "),wX=a("a"),Yrr=o("TFData2VecVisionModel"),Krr=o(" (Data2VecVision model)"),Zrr=l(),bT=a("li"),Uue=a("strong"),etr=o("deberta"),otr=o(" \u2014 "),AX=a("a"),rtr=o("TFDebertaModel"),ttr=o(" (DeBERTa model)"),atr=l(),vT=a("li"),Jue=a("strong"),ntr=o("deberta-v2"),str=o(" \u2014 "),yX=a("a"),ltr=o("TFDebertaV2Model"),itr=o(" (DeBERTa-v2 model)"),dtr=l(),FT=a("li"),Yue=a("strong"),ctr=o("distilbert"),ftr=o(" \u2014 "),LX=a("a"),mtr=o("TFDistilBertModel"),gtr=o(" (DistilBERT model)"),htr=l(),TT=a("li"),Kue=a("strong"),ptr=o("dpr"),utr=o(" \u2014 "),xX=a("a"),_tr=o("TFDPRQuestionEncoder"),btr=o(" (DPR model)"),vtr=l(),MT=a("li"),Zue=a("strong"),Ftr=o("electra"),Ttr=o(" \u2014 "),$X=a("a"),Mtr=o("TFElectraModel"),Etr=o(" (ELECTRA model)"),Ctr=l(),ET=a("li"),e_e=a("strong"),wtr=o("flaubert"),Atr=o(" \u2014 "),kX=a("a"),ytr=o("TFFlaubertModel"),Ltr=o(" (FlauBERT model)"),xtr=l(),$s=a("li"),o_e=a("strong"),$tr=o("funnel"),ktr=o(" \u2014 "),SX=a("a"),Str=o("TFFunnelModel"),Rtr=o(" or "),RX=a("a"),Btr=o("TFFunnelBaseModel"),Ptr=o(" (Funnel Transformer model)"),Itr=l(),CT=a("li"),r_e=a("strong"),qtr=o("gpt2"),Ntr=o(" \u2014 "),BX=a("a"),jtr=o("TFGPT2Model"),Dtr=o(" (OpenAI GPT-2 model)"),Gtr=l(),wT=a("li"),t_e=a("strong"),Otr=o("gptj"),Vtr=o(" \u2014 "),PX=a("a"),Xtr=o("TFGPTJModel"),ztr=o(" (GPT-J model)"),Qtr=l(),AT=a("li"),a_e=a("strong"),Wtr=o("hubert"),Htr=o(" \u2014 "),IX=a("a"),Utr=o("TFHubertModel"),Jtr=o(" (Hubert model)"),Ytr=l(),yT=a("li"),n_e=a("strong"),Ktr=o("layoutlm"),Ztr=o(" \u2014 "),qX=a("a"),ear=o("TFLayoutLMModel"),oar=o(" (LayoutLM model)"),rar=l(),LT=a("li"),s_e=a("strong"),tar=o("led"),aar=o(" \u2014 "),NX=a("a"),nar=o("TFLEDModel"),sar=o(" (LED model)"),lar=l(),xT=a("li"),l_e=a("strong"),iar=o("longformer"),dar=o(" \u2014 "),jX=a("a"),car=o("TFLongformerModel"),far=o(" (Longformer model)"),mar=l(),$T=a("li"),i_e=a("strong"),gar=o("lxmert"),har=o(" \u2014 "),DX=a("a"),par=o("TFLxmertModel"),uar=o(" (LXMERT model)"),_ar=l(),kT=a("li"),d_e=a("strong"),bar=o("marian"),Far=o(" \u2014 "),GX=a("a"),Tar=o("TFMarianModel"),Mar=o(" (Marian model)"),Ear=l(),ST=a("li"),c_e=a("strong"),Car=o("mbart"),war=o(" \u2014 "),OX=a("a"),Aar=o("TFMBartModel"),yar=o(" (mBART model)"),Lar=l(),RT=a("li"),f_e=a("strong"),xar=o("mobilebert"),$ar=o(" \u2014 "),VX=a("a"),kar=o("TFMobileBertModel"),Sar=o(" (MobileBERT model)"),Rar=l(),BT=a("li"),m_e=a("strong"),Bar=o("mpnet"),Par=o(" \u2014 "),XX=a("a"),Iar=o("TFMPNetModel"),qar=o(" (MPNet model)"),Nar=l(),PT=a("li"),g_e=a("strong"),jar=o("mt5"),Dar=o(" \u2014 "),zX=a("a"),Gar=o("TFMT5Model"),Oar=o(" (mT5 model)"),Var=l(),IT=a("li"),h_e=a("strong"),Xar=o("openai-gpt"),zar=o(" \u2014 "),QX=a("a"),Qar=o("TFOpenAIGPTModel"),War=o(" (OpenAI GPT model)"),Har=l(),qT=a("li"),p_e=a("strong"),Uar=o("pegasus"),Jar=o(" \u2014 "),WX=a("a"),Yar=o("TFPegasusModel"),Kar=o(" (Pegasus model)"),Zar=l(),NT=a("li"),u_e=a("strong"),enr=o("rembert"),onr=o(" \u2014 "),HX=a("a"),rnr=o("TFRemBertModel"),tnr=o(" (RemBERT model)"),anr=l(),jT=a("li"),__e=a("strong"),nnr=o("roberta"),snr=o(" \u2014 "),UX=a("a"),lnr=o("TFRobertaModel"),inr=o(" (RoBERTa model)"),dnr=l(),DT=a("li"),b_e=a("strong"),cnr=o("roformer"),fnr=o(" \u2014 "),JX=a("a"),mnr=o("TFRoFormerModel"),gnr=o(" (RoFormer model)"),hnr=l(),GT=a("li"),v_e=a("strong"),pnr=o("speech_to_text"),unr=o(" \u2014 "),YX=a("a"),_nr=o("TFSpeech2TextModel"),bnr=o(" (Speech2Text model)"),vnr=l(),OT=a("li"),F_e=a("strong"),Fnr=o("t5"),Tnr=o(" \u2014 "),KX=a("a"),Mnr=o("TFT5Model"),Enr=o(" (T5 model)"),Cnr=l(),VT=a("li"),T_e=a("strong"),wnr=o("tapas"),Anr=o(" \u2014 "),ZX=a("a"),ynr=o("TFTapasModel"),Lnr=o(" (TAPAS model)"),xnr=l(),XT=a("li"),M_e=a("strong"),$nr=o("transfo-xl"),knr=o(" \u2014 "),ez=a("a"),Snr=o("TFTransfoXLModel"),Rnr=o(" (Transformer-XL model)"),Bnr=l(),zT=a("li"),E_e=a("strong"),Pnr=o("vit"),Inr=o(" \u2014 "),oz=a("a"),qnr=o("TFViTModel"),Nnr=o(" (ViT model)"),jnr=l(),QT=a("li"),C_e=a("strong"),Dnr=o("vit_mae"),Gnr=o(" \u2014 "),rz=a("a"),Onr=o("TFViTMAEModel"),Vnr=o(" (ViTMAE model)"),Xnr=l(),WT=a("li"),w_e=a("strong"),znr=o("wav2vec2"),Qnr=o(" \u2014 "),tz=a("a"),Wnr=o("TFWav2Vec2Model"),Hnr=o(" (Wav2Vec2 model)"),Unr=l(),HT=a("li"),A_e=a("strong"),Jnr=o("xlm"),Ynr=o(" \u2014 "),az=a("a"),Knr=o("TFXLMModel"),Znr=o(" (XLM model)"),esr=l(),UT=a("li"),y_e=a("strong"),osr=o("xlm-roberta"),rsr=o(" \u2014 "),nz=a("a"),tsr=o("TFXLMRobertaModel"),asr=o(" (XLM-RoBERTa model)"),nsr=l(),JT=a("li"),L_e=a("strong"),ssr=o("xlnet"),lsr=o(" \u2014 "),sz=a("a"),isr=o("TFXLNetModel"),dsr=o(" (XLNet model)"),csr=l(),F(YT.$$.fragment),TPe=l(),Bd=a("h2"),KT=a("a"),x_e=a("span"),F(cL.$$.fragment),fsr=l(),$_e=a("span"),msr=o("TFAutoModelForPreTraining"),MPe=l(),Ko=a("div"),F(fL.$$.fragment),gsr=l(),Pd=a("p"),hsr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),lz=a("a"),psr=o("from_pretrained()"),usr=o(" class method or the "),iz=a("a"),_sr=o("from_config()"),bsr=o(` class
method.`),vsr=l(),mL=a("p"),Fsr=o("This class cannot be instantiated directly using "),k_e=a("code"),Tsr=o("__init__()"),Msr=o(" (throws an error)."),Esr=l(),Ct=a("div"),F(gL.$$.fragment),Csr=l(),S_e=a("p"),wsr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Asr=l(),Id=a("p"),ysr=o(`Note:
Loading a model from its configuration file does `),R_e=a("strong"),Lsr=o("not"),xsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dz=a("a"),$sr=o("from_pretrained()"),ksr=o(" to load the model weights."),Ssr=l(),F(ZT.$$.fragment),Rsr=l(),wr=a("div"),F(hL.$$.fragment),Bsr=l(),B_e=a("p"),Psr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Isr=l(),Ja=a("p"),qsr=o("The model class to instantiate is selected based on the "),P_e=a("code"),Nsr=o("model_type"),jsr=o(` property of the config object (either
passed as an argument or loaded from `),I_e=a("code"),Dsr=o("pretrained_model_name_or_path"),Gsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q_e=a("code"),Osr=o("pretrained_model_name_or_path"),Vsr=o(":"),Xsr=l(),ne=a("ul"),e8=a("li"),N_e=a("strong"),zsr=o("albert"),Qsr=o(" \u2014 "),cz=a("a"),Wsr=o("TFAlbertForPreTraining"),Hsr=o(" (ALBERT model)"),Usr=l(),o8=a("li"),j_e=a("strong"),Jsr=o("bart"),Ysr=o(" \u2014 "),fz=a("a"),Ksr=o("TFBartForConditionalGeneration"),Zsr=o(" (BART model)"),elr=l(),r8=a("li"),D_e=a("strong"),olr=o("bert"),rlr=o(" \u2014 "),mz=a("a"),tlr=o("TFBertForPreTraining"),alr=o(" (BERT model)"),nlr=l(),t8=a("li"),G_e=a("strong"),slr=o("camembert"),llr=o(" \u2014 "),gz=a("a"),ilr=o("TFCamembertForMaskedLM"),dlr=o(" (CamemBERT model)"),clr=l(),a8=a("li"),O_e=a("strong"),flr=o("ctrl"),mlr=o(" \u2014 "),hz=a("a"),glr=o("TFCTRLLMHeadModel"),hlr=o(" (CTRL model)"),plr=l(),n8=a("li"),V_e=a("strong"),ulr=o("distilbert"),_lr=o(" \u2014 "),pz=a("a"),blr=o("TFDistilBertForMaskedLM"),vlr=o(" (DistilBERT model)"),Flr=l(),s8=a("li"),X_e=a("strong"),Tlr=o("electra"),Mlr=o(" \u2014 "),uz=a("a"),Elr=o("TFElectraForPreTraining"),Clr=o(" (ELECTRA model)"),wlr=l(),l8=a("li"),z_e=a("strong"),Alr=o("flaubert"),ylr=o(" \u2014 "),_z=a("a"),Llr=o("TFFlaubertWithLMHeadModel"),xlr=o(" (FlauBERT model)"),$lr=l(),i8=a("li"),Q_e=a("strong"),klr=o("funnel"),Slr=o(" \u2014 "),bz=a("a"),Rlr=o("TFFunnelForPreTraining"),Blr=o(" (Funnel Transformer model)"),Plr=l(),d8=a("li"),W_e=a("strong"),Ilr=o("gpt2"),qlr=o(" \u2014 "),vz=a("a"),Nlr=o("TFGPT2LMHeadModel"),jlr=o(" (OpenAI GPT-2 model)"),Dlr=l(),c8=a("li"),H_e=a("strong"),Glr=o("layoutlm"),Olr=o(" \u2014 "),Fz=a("a"),Vlr=o("TFLayoutLMForMaskedLM"),Xlr=o(" (LayoutLM model)"),zlr=l(),f8=a("li"),U_e=a("strong"),Qlr=o("lxmert"),Wlr=o(" \u2014 "),Tz=a("a"),Hlr=o("TFLxmertForPreTraining"),Ulr=o(" (LXMERT model)"),Jlr=l(),m8=a("li"),J_e=a("strong"),Ylr=o("mobilebert"),Klr=o(" \u2014 "),Mz=a("a"),Zlr=o("TFMobileBertForPreTraining"),eir=o(" (MobileBERT model)"),oir=l(),g8=a("li"),Y_e=a("strong"),rir=o("mpnet"),tir=o(" \u2014 "),Ez=a("a"),air=o("TFMPNetForMaskedLM"),nir=o(" (MPNet model)"),sir=l(),h8=a("li"),K_e=a("strong"),lir=o("openai-gpt"),iir=o(" \u2014 "),Cz=a("a"),dir=o("TFOpenAIGPTLMHeadModel"),cir=o(" (OpenAI GPT model)"),fir=l(),p8=a("li"),Z_e=a("strong"),mir=o("roberta"),gir=o(" \u2014 "),wz=a("a"),hir=o("TFRobertaForMaskedLM"),pir=o(" (RoBERTa model)"),uir=l(),u8=a("li"),e2e=a("strong"),_ir=o("t5"),bir=o(" \u2014 "),Az=a("a"),vir=o("TFT5ForConditionalGeneration"),Fir=o(" (T5 model)"),Tir=l(),_8=a("li"),o2e=a("strong"),Mir=o("tapas"),Eir=o(" \u2014 "),yz=a("a"),Cir=o("TFTapasForMaskedLM"),wir=o(" (TAPAS model)"),Air=l(),b8=a("li"),r2e=a("strong"),yir=o("transfo-xl"),Lir=o(" \u2014 "),Lz=a("a"),xir=o("TFTransfoXLLMHeadModel"),$ir=o(" (Transformer-XL model)"),kir=l(),v8=a("li"),t2e=a("strong"),Sir=o("vit_mae"),Rir=o(" \u2014 "),xz=a("a"),Bir=o("TFViTMAEForPreTraining"),Pir=o(" (ViTMAE model)"),Iir=l(),F8=a("li"),a2e=a("strong"),qir=o("xlm"),Nir=o(" \u2014 "),$z=a("a"),jir=o("TFXLMWithLMHeadModel"),Dir=o(" (XLM model)"),Gir=l(),T8=a("li"),n2e=a("strong"),Oir=o("xlm-roberta"),Vir=o(" \u2014 "),kz=a("a"),Xir=o("TFXLMRobertaForMaskedLM"),zir=o(" (XLM-RoBERTa model)"),Qir=l(),M8=a("li"),s2e=a("strong"),Wir=o("xlnet"),Hir=o(" \u2014 "),Sz=a("a"),Uir=o("TFXLNetLMHeadModel"),Jir=o(" (XLNet model)"),Yir=l(),F(E8.$$.fragment),EPe=l(),qd=a("h2"),C8=a("a"),l2e=a("span"),F(pL.$$.fragment),Kir=l(),i2e=a("span"),Zir=o("TFAutoModelForCausalLM"),CPe=l(),Zo=a("div"),F(uL.$$.fragment),edr=l(),Nd=a("p"),odr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Rz=a("a"),rdr=o("from_pretrained()"),tdr=o(" class method or the "),Bz=a("a"),adr=o("from_config()"),ndr=o(` class
method.`),sdr=l(),_L=a("p"),ldr=o("This class cannot be instantiated directly using "),d2e=a("code"),idr=o("__init__()"),ddr=o(" (throws an error)."),cdr=l(),wt=a("div"),F(bL.$$.fragment),fdr=l(),c2e=a("p"),mdr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),gdr=l(),jd=a("p"),hdr=o(`Note:
Loading a model from its configuration file does `),f2e=a("strong"),pdr=o("not"),udr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Pz=a("a"),_dr=o("from_pretrained()"),bdr=o(" to load the model weights."),vdr=l(),F(w8.$$.fragment),Fdr=l(),Ar=a("div"),F(vL.$$.fragment),Tdr=l(),m2e=a("p"),Mdr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Edr=l(),Ya=a("p"),Cdr=o("The model class to instantiate is selected based on the "),g2e=a("code"),wdr=o("model_type"),Adr=o(` property of the config object (either
passed as an argument or loaded from `),h2e=a("code"),ydr=o("pretrained_model_name_or_path"),Ldr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p2e=a("code"),xdr=o("pretrained_model_name_or_path"),$dr=o(":"),kdr=l(),Te=a("ul"),A8=a("li"),u2e=a("strong"),Sdr=o("bert"),Rdr=o(" \u2014 "),Iz=a("a"),Bdr=o("TFBertLMHeadModel"),Pdr=o(" (BERT model)"),Idr=l(),y8=a("li"),_2e=a("strong"),qdr=o("camembert"),Ndr=o(" \u2014 "),qz=a("a"),jdr=o("TFCamembertForCausalLM"),Ddr=o(" (CamemBERT model)"),Gdr=l(),L8=a("li"),b2e=a("strong"),Odr=o("ctrl"),Vdr=o(" \u2014 "),Nz=a("a"),Xdr=o("TFCTRLLMHeadModel"),zdr=o(" (CTRL model)"),Qdr=l(),x8=a("li"),v2e=a("strong"),Wdr=o("gpt2"),Hdr=o(" \u2014 "),jz=a("a"),Udr=o("TFGPT2LMHeadModel"),Jdr=o(" (OpenAI GPT-2 model)"),Ydr=l(),$8=a("li"),F2e=a("strong"),Kdr=o("gptj"),Zdr=o(" \u2014 "),Dz=a("a"),ecr=o("TFGPTJForCausalLM"),ocr=o(" (GPT-J model)"),rcr=l(),k8=a("li"),T2e=a("strong"),tcr=o("openai-gpt"),acr=o(" \u2014 "),Gz=a("a"),ncr=o("TFOpenAIGPTLMHeadModel"),scr=o(" (OpenAI GPT model)"),lcr=l(),S8=a("li"),M2e=a("strong"),icr=o("rembert"),dcr=o(" \u2014 "),Oz=a("a"),ccr=o("TFRemBertForCausalLM"),fcr=o(" (RemBERT model)"),mcr=l(),R8=a("li"),E2e=a("strong"),gcr=o("roberta"),hcr=o(" \u2014 "),Vz=a("a"),pcr=o("TFRobertaForCausalLM"),ucr=o(" (RoBERTa model)"),_cr=l(),B8=a("li"),C2e=a("strong"),bcr=o("roformer"),vcr=o(" \u2014 "),Xz=a("a"),Fcr=o("TFRoFormerForCausalLM"),Tcr=o(" (RoFormer model)"),Mcr=l(),P8=a("li"),w2e=a("strong"),Ecr=o("transfo-xl"),Ccr=o(" \u2014 "),zz=a("a"),wcr=o("TFTransfoXLLMHeadModel"),Acr=o(" (Transformer-XL model)"),ycr=l(),I8=a("li"),A2e=a("strong"),Lcr=o("xlm"),xcr=o(" \u2014 "),Qz=a("a"),$cr=o("TFXLMWithLMHeadModel"),kcr=o(" (XLM model)"),Scr=l(),q8=a("li"),y2e=a("strong"),Rcr=o("xlnet"),Bcr=o(" \u2014 "),Wz=a("a"),Pcr=o("TFXLNetLMHeadModel"),Icr=o(" (XLNet model)"),qcr=l(),F(N8.$$.fragment),wPe=l(),Dd=a("h2"),j8=a("a"),L2e=a("span"),F(FL.$$.fragment),Ncr=l(),x2e=a("span"),jcr=o("TFAutoModelForImageClassification"),APe=l(),er=a("div"),F(TL.$$.fragment),Dcr=l(),Gd=a("p"),Gcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Hz=a("a"),Ocr=o("from_pretrained()"),Vcr=o(" class method or the "),Uz=a("a"),Xcr=o("from_config()"),zcr=o(` class
method.`),Qcr=l(),ML=a("p"),Wcr=o("This class cannot be instantiated directly using "),$2e=a("code"),Hcr=o("__init__()"),Ucr=o(" (throws an error)."),Jcr=l(),At=a("div"),F(EL.$$.fragment),Ycr=l(),k2e=a("p"),Kcr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Zcr=l(),Od=a("p"),efr=o(`Note:
Loading a model from its configuration file does `),S2e=a("strong"),ofr=o("not"),rfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Jz=a("a"),tfr=o("from_pretrained()"),afr=o(" to load the model weights."),nfr=l(),F(D8.$$.fragment),sfr=l(),yr=a("div"),F(CL.$$.fragment),lfr=l(),R2e=a("p"),ifr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),dfr=l(),Ka=a("p"),cfr=o("The model class to instantiate is selected based on the "),B2e=a("code"),ffr=o("model_type"),mfr=o(` property of the config object (either
passed as an argument or loaded from `),P2e=a("code"),gfr=o("pretrained_model_name_or_path"),hfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I2e=a("code"),pfr=o("pretrained_model_name_or_path"),ufr=o(":"),_fr=l(),Vd=a("ul"),G8=a("li"),q2e=a("strong"),bfr=o("convnext"),vfr=o(" \u2014 "),Yz=a("a"),Ffr=o("TFConvNextForImageClassification"),Tfr=o(" (ConvNext model)"),Mfr=l(),O8=a("li"),N2e=a("strong"),Efr=o("data2vec-vision"),Cfr=o(" \u2014 "),Kz=a("a"),wfr=o("TFData2VecVisionForImageClassification"),Afr=o(" (Data2VecVision model)"),yfr=l(),V8=a("li"),j2e=a("strong"),Lfr=o("vit"),xfr=o(" \u2014 "),Zz=a("a"),$fr=o("TFViTForImageClassification"),kfr=o(" (ViT model)"),Sfr=l(),F(X8.$$.fragment),yPe=l(),Xd=a("h2"),z8=a("a"),D2e=a("span"),F(wL.$$.fragment),Rfr=l(),G2e=a("span"),Bfr=o("TFAutoModelForMaskedLM"),LPe=l(),or=a("div"),F(AL.$$.fragment),Pfr=l(),zd=a("p"),Ifr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),eQ=a("a"),qfr=o("from_pretrained()"),Nfr=o(" class method or the "),oQ=a("a"),jfr=o("from_config()"),Dfr=o(` class
method.`),Gfr=l(),yL=a("p"),Ofr=o("This class cannot be instantiated directly using "),O2e=a("code"),Vfr=o("__init__()"),Xfr=o(" (throws an error)."),zfr=l(),yt=a("div"),F(LL.$$.fragment),Qfr=l(),V2e=a("p"),Wfr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Hfr=l(),Qd=a("p"),Ufr=o(`Note:
Loading a model from its configuration file does `),X2e=a("strong"),Jfr=o("not"),Yfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rQ=a("a"),Kfr=o("from_pretrained()"),Zfr=o(" to load the model weights."),emr=l(),F(Q8.$$.fragment),omr=l(),Lr=a("div"),F(xL.$$.fragment),rmr=l(),z2e=a("p"),tmr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),amr=l(),Za=a("p"),nmr=o("The model class to instantiate is selected based on the "),Q2e=a("code"),smr=o("model_type"),lmr=o(` property of the config object (either
passed as an argument or loaded from `),W2e=a("code"),imr=o("pretrained_model_name_or_path"),dmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H2e=a("code"),cmr=o("pretrained_model_name_or_path"),fmr=o(":"),mmr=l(),ie=a("ul"),W8=a("li"),U2e=a("strong"),gmr=o("albert"),hmr=o(" \u2014 "),tQ=a("a"),pmr=o("TFAlbertForMaskedLM"),umr=o(" (ALBERT model)"),_mr=l(),H8=a("li"),J2e=a("strong"),bmr=o("bert"),vmr=o(" \u2014 "),aQ=a("a"),Fmr=o("TFBertForMaskedLM"),Tmr=o(" (BERT model)"),Mmr=l(),U8=a("li"),Y2e=a("strong"),Emr=o("camembert"),Cmr=o(" \u2014 "),nQ=a("a"),wmr=o("TFCamembertForMaskedLM"),Amr=o(" (CamemBERT model)"),ymr=l(),J8=a("li"),K2e=a("strong"),Lmr=o("convbert"),xmr=o(" \u2014 "),sQ=a("a"),$mr=o("TFConvBertForMaskedLM"),kmr=o(" (ConvBERT model)"),Smr=l(),Y8=a("li"),Z2e=a("strong"),Rmr=o("deberta"),Bmr=o(" \u2014 "),lQ=a("a"),Pmr=o("TFDebertaForMaskedLM"),Imr=o(" (DeBERTa model)"),qmr=l(),K8=a("li"),e6e=a("strong"),Nmr=o("deberta-v2"),jmr=o(" \u2014 "),iQ=a("a"),Dmr=o("TFDebertaV2ForMaskedLM"),Gmr=o(" (DeBERTa-v2 model)"),Omr=l(),Z8=a("li"),o6e=a("strong"),Vmr=o("distilbert"),Xmr=o(" \u2014 "),dQ=a("a"),zmr=o("TFDistilBertForMaskedLM"),Qmr=o(" (DistilBERT model)"),Wmr=l(),eM=a("li"),r6e=a("strong"),Hmr=o("electra"),Umr=o(" \u2014 "),cQ=a("a"),Jmr=o("TFElectraForMaskedLM"),Ymr=o(" (ELECTRA model)"),Kmr=l(),oM=a("li"),t6e=a("strong"),Zmr=o("flaubert"),egr=o(" \u2014 "),fQ=a("a"),ogr=o("TFFlaubertWithLMHeadModel"),rgr=o(" (FlauBERT model)"),tgr=l(),rM=a("li"),a6e=a("strong"),agr=o("funnel"),ngr=o(" \u2014 "),mQ=a("a"),sgr=o("TFFunnelForMaskedLM"),lgr=o(" (Funnel Transformer model)"),igr=l(),tM=a("li"),n6e=a("strong"),dgr=o("layoutlm"),cgr=o(" \u2014 "),gQ=a("a"),fgr=o("TFLayoutLMForMaskedLM"),mgr=o(" (LayoutLM model)"),ggr=l(),aM=a("li"),s6e=a("strong"),hgr=o("longformer"),pgr=o(" \u2014 "),hQ=a("a"),ugr=o("TFLongformerForMaskedLM"),_gr=o(" (Longformer model)"),bgr=l(),nM=a("li"),l6e=a("strong"),vgr=o("mobilebert"),Fgr=o(" \u2014 "),pQ=a("a"),Tgr=o("TFMobileBertForMaskedLM"),Mgr=o(" (MobileBERT model)"),Egr=l(),sM=a("li"),i6e=a("strong"),Cgr=o("mpnet"),wgr=o(" \u2014 "),uQ=a("a"),Agr=o("TFMPNetForMaskedLM"),ygr=o(" (MPNet model)"),Lgr=l(),lM=a("li"),d6e=a("strong"),xgr=o("rembert"),$gr=o(" \u2014 "),_Q=a("a"),kgr=o("TFRemBertForMaskedLM"),Sgr=o(" (RemBERT model)"),Rgr=l(),iM=a("li"),c6e=a("strong"),Bgr=o("roberta"),Pgr=o(" \u2014 "),bQ=a("a"),Igr=o("TFRobertaForMaskedLM"),qgr=o(" (RoBERTa model)"),Ngr=l(),dM=a("li"),f6e=a("strong"),jgr=o("roformer"),Dgr=o(" \u2014 "),vQ=a("a"),Ggr=o("TFRoFormerForMaskedLM"),Ogr=o(" (RoFormer model)"),Vgr=l(),cM=a("li"),m6e=a("strong"),Xgr=o("tapas"),zgr=o(" \u2014 "),FQ=a("a"),Qgr=o("TFTapasForMaskedLM"),Wgr=o(" (TAPAS model)"),Hgr=l(),fM=a("li"),g6e=a("strong"),Ugr=o("xlm"),Jgr=o(" \u2014 "),TQ=a("a"),Ygr=o("TFXLMWithLMHeadModel"),Kgr=o(" (XLM model)"),Zgr=l(),mM=a("li"),h6e=a("strong"),ehr=o("xlm-roberta"),ohr=o(" \u2014 "),MQ=a("a"),rhr=o("TFXLMRobertaForMaskedLM"),thr=o(" (XLM-RoBERTa model)"),ahr=l(),F(gM.$$.fragment),xPe=l(),Wd=a("h2"),hM=a("a"),p6e=a("span"),F($L.$$.fragment),nhr=l(),u6e=a("span"),shr=o("TFAutoModelForSeq2SeqLM"),$Pe=l(),rr=a("div"),F(kL.$$.fragment),lhr=l(),Hd=a("p"),ihr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),EQ=a("a"),dhr=o("from_pretrained()"),chr=o(" class method or the "),CQ=a("a"),fhr=o("from_config()"),mhr=o(` class
method.`),ghr=l(),SL=a("p"),hhr=o("This class cannot be instantiated directly using "),_6e=a("code"),phr=o("__init__()"),uhr=o(" (throws an error)."),_hr=l(),Lt=a("div"),F(RL.$$.fragment),bhr=l(),b6e=a("p"),vhr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Fhr=l(),Ud=a("p"),Thr=o(`Note:
Loading a model from its configuration file does `),v6e=a("strong"),Mhr=o("not"),Ehr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wQ=a("a"),Chr=o("from_pretrained()"),whr=o(" to load the model weights."),Ahr=l(),F(pM.$$.fragment),yhr=l(),xr=a("div"),F(BL.$$.fragment),Lhr=l(),F6e=a("p"),xhr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),$hr=l(),en=a("p"),khr=o("The model class to instantiate is selected based on the "),T6e=a("code"),Shr=o("model_type"),Rhr=o(` property of the config object (either
passed as an argument or loaded from `),M6e=a("code"),Bhr=o("pretrained_model_name_or_path"),Phr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E6e=a("code"),Ihr=o("pretrained_model_name_or_path"),qhr=o(":"),Nhr=l(),ye=a("ul"),uM=a("li"),C6e=a("strong"),jhr=o("bart"),Dhr=o(" \u2014 "),AQ=a("a"),Ghr=o("TFBartForConditionalGeneration"),Ohr=o(" (BART model)"),Vhr=l(),_M=a("li"),w6e=a("strong"),Xhr=o("blenderbot"),zhr=o(" \u2014 "),yQ=a("a"),Qhr=o("TFBlenderbotForConditionalGeneration"),Whr=o(" (Blenderbot model)"),Hhr=l(),bM=a("li"),A6e=a("strong"),Uhr=o("blenderbot-small"),Jhr=o(" \u2014 "),LQ=a("a"),Yhr=o("TFBlenderbotSmallForConditionalGeneration"),Khr=o(" (BlenderbotSmall model)"),Zhr=l(),vM=a("li"),y6e=a("strong"),epr=o("encoder-decoder"),opr=o(" \u2014 "),xQ=a("a"),rpr=o("TFEncoderDecoderModel"),tpr=o(" (Encoder decoder model)"),apr=l(),FM=a("li"),L6e=a("strong"),npr=o("led"),spr=o(" \u2014 "),$Q=a("a"),lpr=o("TFLEDForConditionalGeneration"),ipr=o(" (LED model)"),dpr=l(),TM=a("li"),x6e=a("strong"),cpr=o("marian"),fpr=o(" \u2014 "),kQ=a("a"),mpr=o("TFMarianMTModel"),gpr=o(" (Marian model)"),hpr=l(),MM=a("li"),$6e=a("strong"),ppr=o("mbart"),upr=o(" \u2014 "),SQ=a("a"),_pr=o("TFMBartForConditionalGeneration"),bpr=o(" (mBART model)"),vpr=l(),EM=a("li"),k6e=a("strong"),Fpr=o("mt5"),Tpr=o(" \u2014 "),RQ=a("a"),Mpr=o("TFMT5ForConditionalGeneration"),Epr=o(" (mT5 model)"),Cpr=l(),CM=a("li"),S6e=a("strong"),wpr=o("pegasus"),Apr=o(" \u2014 "),BQ=a("a"),ypr=o("TFPegasusForConditionalGeneration"),Lpr=o(" (Pegasus model)"),xpr=l(),wM=a("li"),R6e=a("strong"),$pr=o("t5"),kpr=o(" \u2014 "),PQ=a("a"),Spr=o("TFT5ForConditionalGeneration"),Rpr=o(" (T5 model)"),Bpr=l(),F(AM.$$.fragment),kPe=l(),Jd=a("h2"),yM=a("a"),B6e=a("span"),F(PL.$$.fragment),Ppr=l(),P6e=a("span"),Ipr=o("TFAutoModelForSequenceClassification"),SPe=l(),tr=a("div"),F(IL.$$.fragment),qpr=l(),Yd=a("p"),Npr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),IQ=a("a"),jpr=o("from_pretrained()"),Dpr=o(" class method or the "),qQ=a("a"),Gpr=o("from_config()"),Opr=o(` class
method.`),Vpr=l(),qL=a("p"),Xpr=o("This class cannot be instantiated directly using "),I6e=a("code"),zpr=o("__init__()"),Qpr=o(" (throws an error)."),Wpr=l(),xt=a("div"),F(NL.$$.fragment),Hpr=l(),q6e=a("p"),Upr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Jpr=l(),Kd=a("p"),Ypr=o(`Note:
Loading a model from its configuration file does `),N6e=a("strong"),Kpr=o("not"),Zpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NQ=a("a"),eur=o("from_pretrained()"),our=o(" to load the model weights."),rur=l(),F(LM.$$.fragment),tur=l(),$r=a("div"),F(jL.$$.fragment),aur=l(),j6e=a("p"),nur=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),sur=l(),on=a("p"),lur=o("The model class to instantiate is selected based on the "),D6e=a("code"),iur=o("model_type"),dur=o(` property of the config object (either
passed as an argument or loaded from `),G6e=a("code"),cur=o("pretrained_model_name_or_path"),fur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O6e=a("code"),mur=o("pretrained_model_name_or_path"),gur=o(":"),hur=l(),Z=a("ul"),xM=a("li"),V6e=a("strong"),pur=o("albert"),uur=o(" \u2014 "),jQ=a("a"),_ur=o("TFAlbertForSequenceClassification"),bur=o(" (ALBERT model)"),vur=l(),$M=a("li"),X6e=a("strong"),Fur=o("bert"),Tur=o(" \u2014 "),DQ=a("a"),Mur=o("TFBertForSequenceClassification"),Eur=o(" (BERT model)"),Cur=l(),kM=a("li"),z6e=a("strong"),wur=o("camembert"),Aur=o(" \u2014 "),GQ=a("a"),yur=o("TFCamembertForSequenceClassification"),Lur=o(" (CamemBERT model)"),xur=l(),SM=a("li"),Q6e=a("strong"),$ur=o("convbert"),kur=o(" \u2014 "),OQ=a("a"),Sur=o("TFConvBertForSequenceClassification"),Rur=o(" (ConvBERT model)"),Bur=l(),RM=a("li"),W6e=a("strong"),Pur=o("ctrl"),Iur=o(" \u2014 "),VQ=a("a"),qur=o("TFCTRLForSequenceClassification"),Nur=o(" (CTRL model)"),jur=l(),BM=a("li"),H6e=a("strong"),Dur=o("deberta"),Gur=o(" \u2014 "),XQ=a("a"),Our=o("TFDebertaForSequenceClassification"),Vur=o(" (DeBERTa model)"),Xur=l(),PM=a("li"),U6e=a("strong"),zur=o("deberta-v2"),Qur=o(" \u2014 "),zQ=a("a"),Wur=o("TFDebertaV2ForSequenceClassification"),Hur=o(" (DeBERTa-v2 model)"),Uur=l(),IM=a("li"),J6e=a("strong"),Jur=o("distilbert"),Yur=o(" \u2014 "),QQ=a("a"),Kur=o("TFDistilBertForSequenceClassification"),Zur=o(" (DistilBERT model)"),e_r=l(),qM=a("li"),Y6e=a("strong"),o_r=o("electra"),r_r=o(" \u2014 "),WQ=a("a"),t_r=o("TFElectraForSequenceClassification"),a_r=o(" (ELECTRA model)"),n_r=l(),NM=a("li"),K6e=a("strong"),s_r=o("flaubert"),l_r=o(" \u2014 "),HQ=a("a"),i_r=o("TFFlaubertForSequenceClassification"),d_r=o(" (FlauBERT model)"),c_r=l(),jM=a("li"),Z6e=a("strong"),f_r=o("funnel"),m_r=o(" \u2014 "),UQ=a("a"),g_r=o("TFFunnelForSequenceClassification"),h_r=o(" (Funnel Transformer model)"),p_r=l(),DM=a("li"),e1e=a("strong"),u_r=o("gpt2"),__r=o(" \u2014 "),JQ=a("a"),b_r=o("TFGPT2ForSequenceClassification"),v_r=o(" (OpenAI GPT-2 model)"),F_r=l(),GM=a("li"),o1e=a("strong"),T_r=o("gptj"),M_r=o(" \u2014 "),YQ=a("a"),E_r=o("TFGPTJForSequenceClassification"),C_r=o(" (GPT-J model)"),w_r=l(),OM=a("li"),r1e=a("strong"),A_r=o("layoutlm"),y_r=o(" \u2014 "),KQ=a("a"),L_r=o("TFLayoutLMForSequenceClassification"),x_r=o(" (LayoutLM model)"),$_r=l(),VM=a("li"),t1e=a("strong"),k_r=o("longformer"),S_r=o(" \u2014 "),ZQ=a("a"),R_r=o("TFLongformerForSequenceClassification"),B_r=o(" (Longformer model)"),P_r=l(),XM=a("li"),a1e=a("strong"),I_r=o("mobilebert"),q_r=o(" \u2014 "),eW=a("a"),N_r=o("TFMobileBertForSequenceClassification"),j_r=o(" (MobileBERT model)"),D_r=l(),zM=a("li"),n1e=a("strong"),G_r=o("mpnet"),O_r=o(" \u2014 "),oW=a("a"),V_r=o("TFMPNetForSequenceClassification"),X_r=o(" (MPNet model)"),z_r=l(),QM=a("li"),s1e=a("strong"),Q_r=o("openai-gpt"),W_r=o(" \u2014 "),rW=a("a"),H_r=o("TFOpenAIGPTForSequenceClassification"),U_r=o(" (OpenAI GPT model)"),J_r=l(),WM=a("li"),l1e=a("strong"),Y_r=o("rembert"),K_r=o(" \u2014 "),tW=a("a"),Z_r=o("TFRemBertForSequenceClassification"),e2r=o(" (RemBERT model)"),o2r=l(),HM=a("li"),i1e=a("strong"),r2r=o("roberta"),t2r=o(" \u2014 "),aW=a("a"),a2r=o("TFRobertaForSequenceClassification"),n2r=o(" (RoBERTa model)"),s2r=l(),UM=a("li"),d1e=a("strong"),l2r=o("roformer"),i2r=o(" \u2014 "),nW=a("a"),d2r=o("TFRoFormerForSequenceClassification"),c2r=o(" (RoFormer model)"),f2r=l(),JM=a("li"),c1e=a("strong"),m2r=o("tapas"),g2r=o(" \u2014 "),sW=a("a"),h2r=o("TFTapasForSequenceClassification"),p2r=o(" (TAPAS model)"),u2r=l(),YM=a("li"),f1e=a("strong"),_2r=o("transfo-xl"),b2r=o(" \u2014 "),lW=a("a"),v2r=o("TFTransfoXLForSequenceClassification"),F2r=o(" (Transformer-XL model)"),T2r=l(),KM=a("li"),m1e=a("strong"),M2r=o("xlm"),E2r=o(" \u2014 "),iW=a("a"),C2r=o("TFXLMForSequenceClassification"),w2r=o(" (XLM model)"),A2r=l(),ZM=a("li"),g1e=a("strong"),y2r=o("xlm-roberta"),L2r=o(" \u2014 "),dW=a("a"),x2r=o("TFXLMRobertaForSequenceClassification"),$2r=o(" (XLM-RoBERTa model)"),k2r=l(),e4=a("li"),h1e=a("strong"),S2r=o("xlnet"),R2r=o(" \u2014 "),cW=a("a"),B2r=o("TFXLNetForSequenceClassification"),P2r=o(" (XLNet model)"),I2r=l(),F(o4.$$.fragment),RPe=l(),Zd=a("h2"),r4=a("a"),p1e=a("span"),F(DL.$$.fragment),q2r=l(),u1e=a("span"),N2r=o("TFAutoModelForMultipleChoice"),BPe=l(),ar=a("div"),F(GL.$$.fragment),j2r=l(),ec=a("p"),D2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),fW=a("a"),G2r=o("from_pretrained()"),O2r=o(" class method or the "),mW=a("a"),V2r=o("from_config()"),X2r=o(` class
method.`),z2r=l(),OL=a("p"),Q2r=o("This class cannot be instantiated directly using "),_1e=a("code"),W2r=o("__init__()"),H2r=o(" (throws an error)."),U2r=l(),$t=a("div"),F(VL.$$.fragment),J2r=l(),b1e=a("p"),Y2r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),K2r=l(),oc=a("p"),Z2r=o(`Note:
Loading a model from its configuration file does `),v1e=a("strong"),e6r=o("not"),o6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gW=a("a"),r6r=o("from_pretrained()"),t6r=o(" to load the model weights."),a6r=l(),F(t4.$$.fragment),n6r=l(),kr=a("div"),F(XL.$$.fragment),s6r=l(),F1e=a("p"),l6r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),i6r=l(),rn=a("p"),d6r=o("The model class to instantiate is selected based on the "),T1e=a("code"),c6r=o("model_type"),f6r=o(` property of the config object (either
passed as an argument or loaded from `),M1e=a("code"),m6r=o("pretrained_model_name_or_path"),g6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E1e=a("code"),h6r=o("pretrained_model_name_or_path"),p6r=o(":"),u6r=l(),pe=a("ul"),a4=a("li"),C1e=a("strong"),_6r=o("albert"),b6r=o(" \u2014 "),hW=a("a"),v6r=o("TFAlbertForMultipleChoice"),F6r=o(" (ALBERT model)"),T6r=l(),n4=a("li"),w1e=a("strong"),M6r=o("bert"),E6r=o(" \u2014 "),pW=a("a"),C6r=o("TFBertForMultipleChoice"),w6r=o(" (BERT model)"),A6r=l(),s4=a("li"),A1e=a("strong"),y6r=o("camembert"),L6r=o(" \u2014 "),uW=a("a"),x6r=o("TFCamembertForMultipleChoice"),$6r=o(" (CamemBERT model)"),k6r=l(),l4=a("li"),y1e=a("strong"),S6r=o("convbert"),R6r=o(" \u2014 "),_W=a("a"),B6r=o("TFConvBertForMultipleChoice"),P6r=o(" (ConvBERT model)"),I6r=l(),i4=a("li"),L1e=a("strong"),q6r=o("distilbert"),N6r=o(" \u2014 "),bW=a("a"),j6r=o("TFDistilBertForMultipleChoice"),D6r=o(" (DistilBERT model)"),G6r=l(),d4=a("li"),x1e=a("strong"),O6r=o("electra"),V6r=o(" \u2014 "),vW=a("a"),X6r=o("TFElectraForMultipleChoice"),z6r=o(" (ELECTRA model)"),Q6r=l(),c4=a("li"),$1e=a("strong"),W6r=o("flaubert"),H6r=o(" \u2014 "),FW=a("a"),U6r=o("TFFlaubertForMultipleChoice"),J6r=o(" (FlauBERT model)"),Y6r=l(),f4=a("li"),k1e=a("strong"),K6r=o("funnel"),Z6r=o(" \u2014 "),TW=a("a"),e1r=o("TFFunnelForMultipleChoice"),o1r=o(" (Funnel Transformer model)"),r1r=l(),m4=a("li"),S1e=a("strong"),t1r=o("longformer"),a1r=o(" \u2014 "),MW=a("a"),n1r=o("TFLongformerForMultipleChoice"),s1r=o(" (Longformer model)"),l1r=l(),g4=a("li"),R1e=a("strong"),i1r=o("mobilebert"),d1r=o(" \u2014 "),EW=a("a"),c1r=o("TFMobileBertForMultipleChoice"),f1r=o(" (MobileBERT model)"),m1r=l(),h4=a("li"),B1e=a("strong"),g1r=o("mpnet"),h1r=o(" \u2014 "),CW=a("a"),p1r=o("TFMPNetForMultipleChoice"),u1r=o(" (MPNet model)"),_1r=l(),p4=a("li"),P1e=a("strong"),b1r=o("rembert"),v1r=o(" \u2014 "),wW=a("a"),F1r=o("TFRemBertForMultipleChoice"),T1r=o(" (RemBERT model)"),M1r=l(),u4=a("li"),I1e=a("strong"),E1r=o("roberta"),C1r=o(" \u2014 "),AW=a("a"),w1r=o("TFRobertaForMultipleChoice"),A1r=o(" (RoBERTa model)"),y1r=l(),_4=a("li"),q1e=a("strong"),L1r=o("roformer"),x1r=o(" \u2014 "),yW=a("a"),$1r=o("TFRoFormerForMultipleChoice"),k1r=o(" (RoFormer model)"),S1r=l(),b4=a("li"),N1e=a("strong"),R1r=o("xlm"),B1r=o(" \u2014 "),LW=a("a"),P1r=o("TFXLMForMultipleChoice"),I1r=o(" (XLM model)"),q1r=l(),v4=a("li"),j1e=a("strong"),N1r=o("xlm-roberta"),j1r=o(" \u2014 "),xW=a("a"),D1r=o("TFXLMRobertaForMultipleChoice"),G1r=o(" (XLM-RoBERTa model)"),O1r=l(),F4=a("li"),D1e=a("strong"),V1r=o("xlnet"),X1r=o(" \u2014 "),$W=a("a"),z1r=o("TFXLNetForMultipleChoice"),Q1r=o(" (XLNet model)"),W1r=l(),F(T4.$$.fragment),PPe=l(),rc=a("h2"),M4=a("a"),G1e=a("span"),F(zL.$$.fragment),H1r=l(),O1e=a("span"),U1r=o("TFAutoModelForTableQuestionAnswering"),IPe=l(),nr=a("div"),F(QL.$$.fragment),J1r=l(),tc=a("p"),Y1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),kW=a("a"),K1r=o("from_pretrained()"),Z1r=o(" class method or the "),SW=a("a"),ebr=o("from_config()"),obr=o(` class
method.`),rbr=l(),WL=a("p"),tbr=o("This class cannot be instantiated directly using "),V1e=a("code"),abr=o("__init__()"),nbr=o(" (throws an error)."),sbr=l(),kt=a("div"),F(HL.$$.fragment),lbr=l(),X1e=a("p"),ibr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),dbr=l(),ac=a("p"),cbr=o(`Note:
Loading a model from its configuration file does `),z1e=a("strong"),fbr=o("not"),mbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RW=a("a"),gbr=o("from_pretrained()"),hbr=o(" to load the model weights."),pbr=l(),F(E4.$$.fragment),ubr=l(),Sr=a("div"),F(UL.$$.fragment),_br=l(),Q1e=a("p"),bbr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),vbr=l(),tn=a("p"),Fbr=o("The model class to instantiate is selected based on the "),W1e=a("code"),Tbr=o("model_type"),Mbr=o(` property of the config object (either
passed as an argument or loaded from `),H1e=a("code"),Ebr=o("pretrained_model_name_or_path"),Cbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U1e=a("code"),wbr=o("pretrained_model_name_or_path"),Abr=o(":"),ybr=l(),J1e=a("ul"),C4=a("li"),Y1e=a("strong"),Lbr=o("tapas"),xbr=o(" \u2014 "),BW=a("a"),$br=o("TFTapasForQuestionAnswering"),kbr=o(" (TAPAS model)"),Sbr=l(),F(w4.$$.fragment),qPe=l(),nc=a("h2"),A4=a("a"),K1e=a("span"),F(JL.$$.fragment),Rbr=l(),Z1e=a("span"),Bbr=o("TFAutoModelForTokenClassification"),NPe=l(),sr=a("div"),F(YL.$$.fragment),Pbr=l(),sc=a("p"),Ibr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),PW=a("a"),qbr=o("from_pretrained()"),Nbr=o(" class method or the "),IW=a("a"),jbr=o("from_config()"),Dbr=o(` class
method.`),Gbr=l(),KL=a("p"),Obr=o("This class cannot be instantiated directly using "),ebe=a("code"),Vbr=o("__init__()"),Xbr=o(" (throws an error)."),zbr=l(),St=a("div"),F(ZL.$$.fragment),Qbr=l(),obe=a("p"),Wbr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Hbr=l(),lc=a("p"),Ubr=o(`Note:
Loading a model from its configuration file does `),rbe=a("strong"),Jbr=o("not"),Ybr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qW=a("a"),Kbr=o("from_pretrained()"),Zbr=o(" to load the model weights."),evr=l(),F(y4.$$.fragment),ovr=l(),Rr=a("div"),F(e7.$$.fragment),rvr=l(),tbe=a("p"),tvr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),avr=l(),an=a("p"),nvr=o("The model class to instantiate is selected based on the "),abe=a("code"),svr=o("model_type"),lvr=o(` property of the config object (either
passed as an argument or loaded from `),nbe=a("code"),ivr=o("pretrained_model_name_or_path"),dvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sbe=a("code"),cvr=o("pretrained_model_name_or_path"),fvr=o(":"),mvr=l(),de=a("ul"),L4=a("li"),lbe=a("strong"),gvr=o("albert"),hvr=o(" \u2014 "),NW=a("a"),pvr=o("TFAlbertForTokenClassification"),uvr=o(" (ALBERT model)"),_vr=l(),x4=a("li"),ibe=a("strong"),bvr=o("bert"),vvr=o(" \u2014 "),jW=a("a"),Fvr=o("TFBertForTokenClassification"),Tvr=o(" (BERT model)"),Mvr=l(),$4=a("li"),dbe=a("strong"),Evr=o("camembert"),Cvr=o(" \u2014 "),DW=a("a"),wvr=o("TFCamembertForTokenClassification"),Avr=o(" (CamemBERT model)"),yvr=l(),k4=a("li"),cbe=a("strong"),Lvr=o("convbert"),xvr=o(" \u2014 "),GW=a("a"),$vr=o("TFConvBertForTokenClassification"),kvr=o(" (ConvBERT model)"),Svr=l(),S4=a("li"),fbe=a("strong"),Rvr=o("deberta"),Bvr=o(" \u2014 "),OW=a("a"),Pvr=o("TFDebertaForTokenClassification"),Ivr=o(" (DeBERTa model)"),qvr=l(),R4=a("li"),mbe=a("strong"),Nvr=o("deberta-v2"),jvr=o(" \u2014 "),VW=a("a"),Dvr=o("TFDebertaV2ForTokenClassification"),Gvr=o(" (DeBERTa-v2 model)"),Ovr=l(),B4=a("li"),gbe=a("strong"),Vvr=o("distilbert"),Xvr=o(" \u2014 "),XW=a("a"),zvr=o("TFDistilBertForTokenClassification"),Qvr=o(" (DistilBERT model)"),Wvr=l(),P4=a("li"),hbe=a("strong"),Hvr=o("electra"),Uvr=o(" \u2014 "),zW=a("a"),Jvr=o("TFElectraForTokenClassification"),Yvr=o(" (ELECTRA model)"),Kvr=l(),I4=a("li"),pbe=a("strong"),Zvr=o("flaubert"),eFr=o(" \u2014 "),QW=a("a"),oFr=o("TFFlaubertForTokenClassification"),rFr=o(" (FlauBERT model)"),tFr=l(),q4=a("li"),ube=a("strong"),aFr=o("funnel"),nFr=o(" \u2014 "),WW=a("a"),sFr=o("TFFunnelForTokenClassification"),lFr=o(" (Funnel Transformer model)"),iFr=l(),N4=a("li"),_be=a("strong"),dFr=o("layoutlm"),cFr=o(" \u2014 "),HW=a("a"),fFr=o("TFLayoutLMForTokenClassification"),mFr=o(" (LayoutLM model)"),gFr=l(),j4=a("li"),bbe=a("strong"),hFr=o("longformer"),pFr=o(" \u2014 "),UW=a("a"),uFr=o("TFLongformerForTokenClassification"),_Fr=o(" (Longformer model)"),bFr=l(),D4=a("li"),vbe=a("strong"),vFr=o("mobilebert"),FFr=o(" \u2014 "),JW=a("a"),TFr=o("TFMobileBertForTokenClassification"),MFr=o(" (MobileBERT model)"),EFr=l(),G4=a("li"),Fbe=a("strong"),CFr=o("mpnet"),wFr=o(" \u2014 "),YW=a("a"),AFr=o("TFMPNetForTokenClassification"),yFr=o(" (MPNet model)"),LFr=l(),O4=a("li"),Tbe=a("strong"),xFr=o("rembert"),$Fr=o(" \u2014 "),KW=a("a"),kFr=o("TFRemBertForTokenClassification"),SFr=o(" (RemBERT model)"),RFr=l(),V4=a("li"),Mbe=a("strong"),BFr=o("roberta"),PFr=o(" \u2014 "),ZW=a("a"),IFr=o("TFRobertaForTokenClassification"),qFr=o(" (RoBERTa model)"),NFr=l(),X4=a("li"),Ebe=a("strong"),jFr=o("roformer"),DFr=o(" \u2014 "),eH=a("a"),GFr=o("TFRoFormerForTokenClassification"),OFr=o(" (RoFormer model)"),VFr=l(),z4=a("li"),Cbe=a("strong"),XFr=o("xlm"),zFr=o(" \u2014 "),oH=a("a"),QFr=o("TFXLMForTokenClassification"),WFr=o(" (XLM model)"),HFr=l(),Q4=a("li"),wbe=a("strong"),UFr=o("xlm-roberta"),JFr=o(" \u2014 "),rH=a("a"),YFr=o("TFXLMRobertaForTokenClassification"),KFr=o(" (XLM-RoBERTa model)"),ZFr=l(),W4=a("li"),Abe=a("strong"),eTr=o("xlnet"),oTr=o(" \u2014 "),tH=a("a"),rTr=o("TFXLNetForTokenClassification"),tTr=o(" (XLNet model)"),aTr=l(),F(H4.$$.fragment),jPe=l(),ic=a("h2"),U4=a("a"),ybe=a("span"),F(o7.$$.fragment),nTr=l(),Lbe=a("span"),sTr=o("TFAutoModelForQuestionAnswering"),DPe=l(),lr=a("div"),F(r7.$$.fragment),lTr=l(),dc=a("p"),iTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),aH=a("a"),dTr=o("from_pretrained()"),cTr=o(" class method or the "),nH=a("a"),fTr=o("from_config()"),mTr=o(` class
method.`),gTr=l(),t7=a("p"),hTr=o("This class cannot be instantiated directly using "),xbe=a("code"),pTr=o("__init__()"),uTr=o(" (throws an error)."),_Tr=l(),Rt=a("div"),F(a7.$$.fragment),bTr=l(),$be=a("p"),vTr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),FTr=l(),cc=a("p"),TTr=o(`Note:
Loading a model from its configuration file does `),kbe=a("strong"),MTr=o("not"),ETr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sH=a("a"),CTr=o("from_pretrained()"),wTr=o(" to load the model weights."),ATr=l(),F(J4.$$.fragment),yTr=l(),Br=a("div"),F(n7.$$.fragment),LTr=l(),Sbe=a("p"),xTr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),$Tr=l(),nn=a("p"),kTr=o("The model class to instantiate is selected based on the "),Rbe=a("code"),STr=o("model_type"),RTr=o(` property of the config object (either
passed as an argument or loaded from `),Bbe=a("code"),BTr=o("pretrained_model_name_or_path"),PTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pbe=a("code"),ITr=o("pretrained_model_name_or_path"),qTr=o(":"),NTr=l(),ce=a("ul"),Y4=a("li"),Ibe=a("strong"),jTr=o("albert"),DTr=o(" \u2014 "),lH=a("a"),GTr=o("TFAlbertForQuestionAnswering"),OTr=o(" (ALBERT model)"),VTr=l(),K4=a("li"),qbe=a("strong"),XTr=o("bert"),zTr=o(" \u2014 "),iH=a("a"),QTr=o("TFBertForQuestionAnswering"),WTr=o(" (BERT model)"),HTr=l(),Z4=a("li"),Nbe=a("strong"),UTr=o("camembert"),JTr=o(" \u2014 "),dH=a("a"),YTr=o("TFCamembertForQuestionAnswering"),KTr=o(" (CamemBERT model)"),ZTr=l(),eE=a("li"),jbe=a("strong"),e8r=o("convbert"),o8r=o(" \u2014 "),cH=a("a"),r8r=o("TFConvBertForQuestionAnswering"),t8r=o(" (ConvBERT model)"),a8r=l(),oE=a("li"),Dbe=a("strong"),n8r=o("deberta"),s8r=o(" \u2014 "),fH=a("a"),l8r=o("TFDebertaForQuestionAnswering"),i8r=o(" (DeBERTa model)"),d8r=l(),rE=a("li"),Gbe=a("strong"),c8r=o("deberta-v2"),f8r=o(" \u2014 "),mH=a("a"),m8r=o("TFDebertaV2ForQuestionAnswering"),g8r=o(" (DeBERTa-v2 model)"),h8r=l(),tE=a("li"),Obe=a("strong"),p8r=o("distilbert"),u8r=o(" \u2014 "),gH=a("a"),_8r=o("TFDistilBertForQuestionAnswering"),b8r=o(" (DistilBERT model)"),v8r=l(),aE=a("li"),Vbe=a("strong"),F8r=o("electra"),T8r=o(" \u2014 "),hH=a("a"),M8r=o("TFElectraForQuestionAnswering"),E8r=o(" (ELECTRA model)"),C8r=l(),nE=a("li"),Xbe=a("strong"),w8r=o("flaubert"),A8r=o(" \u2014 "),pH=a("a"),y8r=o("TFFlaubertForQuestionAnsweringSimple"),L8r=o(" (FlauBERT model)"),x8r=l(),sE=a("li"),zbe=a("strong"),$8r=o("funnel"),k8r=o(" \u2014 "),uH=a("a"),S8r=o("TFFunnelForQuestionAnswering"),R8r=o(" (Funnel Transformer model)"),B8r=l(),lE=a("li"),Qbe=a("strong"),P8r=o("gptj"),I8r=o(" \u2014 "),_H=a("a"),q8r=o("TFGPTJForQuestionAnswering"),N8r=o(" (GPT-J model)"),j8r=l(),iE=a("li"),Wbe=a("strong"),D8r=o("longformer"),G8r=o(" \u2014 "),bH=a("a"),O8r=o("TFLongformerForQuestionAnswering"),V8r=o(" (Longformer model)"),X8r=l(),dE=a("li"),Hbe=a("strong"),z8r=o("mobilebert"),Q8r=o(" \u2014 "),vH=a("a"),W8r=o("TFMobileBertForQuestionAnswering"),H8r=o(" (MobileBERT model)"),U8r=l(),cE=a("li"),Ube=a("strong"),J8r=o("mpnet"),Y8r=o(" \u2014 "),FH=a("a"),K8r=o("TFMPNetForQuestionAnswering"),Z8r=o(" (MPNet model)"),eMr=l(),fE=a("li"),Jbe=a("strong"),oMr=o("rembert"),rMr=o(" \u2014 "),TH=a("a"),tMr=o("TFRemBertForQuestionAnswering"),aMr=o(" (RemBERT model)"),nMr=l(),mE=a("li"),Ybe=a("strong"),sMr=o("roberta"),lMr=o(" \u2014 "),MH=a("a"),iMr=o("TFRobertaForQuestionAnswering"),dMr=o(" (RoBERTa model)"),cMr=l(),gE=a("li"),Kbe=a("strong"),fMr=o("roformer"),mMr=o(" \u2014 "),EH=a("a"),gMr=o("TFRoFormerForQuestionAnswering"),hMr=o(" (RoFormer model)"),pMr=l(),hE=a("li"),Zbe=a("strong"),uMr=o("xlm"),_Mr=o(" \u2014 "),CH=a("a"),bMr=o("TFXLMForQuestionAnsweringSimple"),vMr=o(" (XLM model)"),FMr=l(),pE=a("li"),eve=a("strong"),TMr=o("xlm-roberta"),MMr=o(" \u2014 "),wH=a("a"),EMr=o("TFXLMRobertaForQuestionAnswering"),CMr=o(" (XLM-RoBERTa model)"),wMr=l(),uE=a("li"),ove=a("strong"),AMr=o("xlnet"),yMr=o(" \u2014 "),AH=a("a"),LMr=o("TFXLNetForQuestionAnsweringSimple"),xMr=o(" (XLNet model)"),$Mr=l(),F(_E.$$.fragment),GPe=l(),fc=a("h2"),bE=a("a"),rve=a("span"),F(s7.$$.fragment),kMr=l(),tve=a("span"),SMr=o("TFAutoModelForVision2Seq"),OPe=l(),ir=a("div"),F(l7.$$.fragment),RMr=l(),mc=a("p"),BMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),yH=a("a"),PMr=o("from_pretrained()"),IMr=o(" class method or the "),LH=a("a"),qMr=o("from_config()"),NMr=o(` class
method.`),jMr=l(),i7=a("p"),DMr=o("This class cannot be instantiated directly using "),ave=a("code"),GMr=o("__init__()"),OMr=o(" (throws an error)."),VMr=l(),Bt=a("div"),F(d7.$$.fragment),XMr=l(),nve=a("p"),zMr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),QMr=l(),gc=a("p"),WMr=o(`Note:
Loading a model from its configuration file does `),sve=a("strong"),HMr=o("not"),UMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xH=a("a"),JMr=o("from_pretrained()"),YMr=o(" to load the model weights."),KMr=l(),F(vE.$$.fragment),ZMr=l(),Pr=a("div"),F(c7.$$.fragment),e4r=l(),lve=a("p"),o4r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),r4r=l(),sn=a("p"),t4r=o("The model class to instantiate is selected based on the "),ive=a("code"),a4r=o("model_type"),n4r=o(` property of the config object (either
passed as an argument or loaded from `),dve=a("code"),s4r=o("pretrained_model_name_or_path"),l4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cve=a("code"),i4r=o("pretrained_model_name_or_path"),d4r=o(":"),c4r=l(),fve=a("ul"),FE=a("li"),mve=a("strong"),f4r=o("vision-encoder-decoder"),m4r=o(" \u2014 "),$H=a("a"),g4r=o("TFVisionEncoderDecoderModel"),h4r=o(" (Vision Encoder decoder model)"),p4r=l(),F(TE.$$.fragment),VPe=l(),hc=a("h2"),ME=a("a"),gve=a("span"),F(f7.$$.fragment),u4r=l(),hve=a("span"),_4r=o("TFAutoModelForSpeechSeq2Seq"),XPe=l(),dr=a("div"),F(m7.$$.fragment),b4r=l(),pc=a("p"),v4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),kH=a("a"),F4r=o("from_pretrained()"),T4r=o(" class method or the "),SH=a("a"),M4r=o("from_config()"),E4r=o(` class
method.`),C4r=l(),g7=a("p"),w4r=o("This class cannot be instantiated directly using "),pve=a("code"),A4r=o("__init__()"),y4r=o(" (throws an error)."),L4r=l(),Pt=a("div"),F(h7.$$.fragment),x4r=l(),uve=a("p"),$4r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),k4r=l(),uc=a("p"),S4r=o(`Note:
Loading a model from its configuration file does `),_ve=a("strong"),R4r=o("not"),B4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RH=a("a"),P4r=o("from_pretrained()"),I4r=o(" to load the model weights."),q4r=l(),F(EE.$$.fragment),N4r=l(),Ir=a("div"),F(p7.$$.fragment),j4r=l(),bve=a("p"),D4r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),G4r=l(),ln=a("p"),O4r=o("The model class to instantiate is selected based on the "),vve=a("code"),V4r=o("model_type"),X4r=o(` property of the config object (either
passed as an argument or loaded from `),Fve=a("code"),z4r=o("pretrained_model_name_or_path"),Q4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tve=a("code"),W4r=o("pretrained_model_name_or_path"),H4r=o(":"),U4r=l(),Mve=a("ul"),CE=a("li"),Eve=a("strong"),J4r=o("speech_to_text"),Y4r=o(" \u2014 "),BH=a("a"),K4r=o("TFSpeech2TextForConditionalGeneration"),Z4r=o(" (Speech2Text model)"),eEr=l(),F(wE.$$.fragment),zPe=l(),_c=a("h2"),AE=a("a"),Cve=a("span"),F(u7.$$.fragment),oEr=l(),wve=a("span"),rEr=o("FlaxAutoModel"),QPe=l(),cr=a("div"),F(_7.$$.fragment),tEr=l(),bc=a("p"),aEr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),PH=a("a"),nEr=o("from_pretrained()"),sEr=o(" class method or the "),IH=a("a"),lEr=o("from_config()"),iEr=o(` class
method.`),dEr=l(),b7=a("p"),cEr=o("This class cannot be instantiated directly using "),Ave=a("code"),fEr=o("__init__()"),mEr=o(" (throws an error)."),gEr=l(),It=a("div"),F(v7.$$.fragment),hEr=l(),yve=a("p"),pEr=o("Instantiates one of the base model classes of the library from a configuration."),uEr=l(),vc=a("p"),_Er=o(`Note:
Loading a model from its configuration file does `),Lve=a("strong"),bEr=o("not"),vEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qH=a("a"),FEr=o("from_pretrained()"),TEr=o(" to load the model weights."),MEr=l(),F(yE.$$.fragment),EEr=l(),qr=a("div"),F(F7.$$.fragment),CEr=l(),xve=a("p"),wEr=o("Instantiate one of the base model classes of the library from a pretrained model."),AEr=l(),dn=a("p"),yEr=o("The model class to instantiate is selected based on the "),$ve=a("code"),LEr=o("model_type"),xEr=o(` property of the config object (either
passed as an argument or loaded from `),kve=a("code"),$Er=o("pretrained_model_name_or_path"),kEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sve=a("code"),SEr=o("pretrained_model_name_or_path"),REr=o(":"),BEr=l(),oe=a("ul"),LE=a("li"),Rve=a("strong"),PEr=o("albert"),IEr=o(" \u2014 "),NH=a("a"),qEr=o("FlaxAlbertModel"),NEr=o(" (ALBERT model)"),jEr=l(),xE=a("li"),Bve=a("strong"),DEr=o("bart"),GEr=o(" \u2014 "),jH=a("a"),OEr=o("FlaxBartModel"),VEr=o(" (BART model)"),XEr=l(),$E=a("li"),Pve=a("strong"),zEr=o("beit"),QEr=o(" \u2014 "),DH=a("a"),WEr=o("FlaxBeitModel"),HEr=o(" (BEiT model)"),UEr=l(),kE=a("li"),Ive=a("strong"),JEr=o("bert"),YEr=o(" \u2014 "),GH=a("a"),KEr=o("FlaxBertModel"),ZEr=o(" (BERT model)"),e5r=l(),SE=a("li"),qve=a("strong"),o5r=o("big_bird"),r5r=o(" \u2014 "),OH=a("a"),t5r=o("FlaxBigBirdModel"),a5r=o(" (BigBird model)"),n5r=l(),RE=a("li"),Nve=a("strong"),s5r=o("blenderbot"),l5r=o(" \u2014 "),VH=a("a"),i5r=o("FlaxBlenderbotModel"),d5r=o(" (Blenderbot model)"),c5r=l(),BE=a("li"),jve=a("strong"),f5r=o("blenderbot-small"),m5r=o(" \u2014 "),XH=a("a"),g5r=o("FlaxBlenderbotSmallModel"),h5r=o(" (BlenderbotSmall model)"),p5r=l(),PE=a("li"),Dve=a("strong"),u5r=o("clip"),_5r=o(" \u2014 "),zH=a("a"),b5r=o("FlaxCLIPModel"),v5r=o(" (CLIP model)"),F5r=l(),IE=a("li"),Gve=a("strong"),T5r=o("distilbert"),M5r=o(" \u2014 "),QH=a("a"),E5r=o("FlaxDistilBertModel"),C5r=o(" (DistilBERT model)"),w5r=l(),qE=a("li"),Ove=a("strong"),A5r=o("electra"),y5r=o(" \u2014 "),WH=a("a"),L5r=o("FlaxElectraModel"),x5r=o(" (ELECTRA model)"),$5r=l(),NE=a("li"),Vve=a("strong"),k5r=o("gpt2"),S5r=o(" \u2014 "),HH=a("a"),R5r=o("FlaxGPT2Model"),B5r=o(" (OpenAI GPT-2 model)"),P5r=l(),jE=a("li"),Xve=a("strong"),I5r=o("gpt_neo"),q5r=o(" \u2014 "),UH=a("a"),N5r=o("FlaxGPTNeoModel"),j5r=o(" (GPT Neo model)"),D5r=l(),DE=a("li"),zve=a("strong"),G5r=o("gptj"),O5r=o(" \u2014 "),JH=a("a"),V5r=o("FlaxGPTJModel"),X5r=o(" (GPT-J model)"),z5r=l(),GE=a("li"),Qve=a("strong"),Q5r=o("marian"),W5r=o(" \u2014 "),YH=a("a"),H5r=o("FlaxMarianModel"),U5r=o(" (Marian model)"),J5r=l(),OE=a("li"),Wve=a("strong"),Y5r=o("mbart"),K5r=o(" \u2014 "),KH=a("a"),Z5r=o("FlaxMBartModel"),eCr=o(" (mBART model)"),oCr=l(),VE=a("li"),Hve=a("strong"),rCr=o("mt5"),tCr=o(" \u2014 "),ZH=a("a"),aCr=o("FlaxMT5Model"),nCr=o(" (mT5 model)"),sCr=l(),XE=a("li"),Uve=a("strong"),lCr=o("pegasus"),iCr=o(" \u2014 "),eU=a("a"),dCr=o("FlaxPegasusModel"),cCr=o(" (Pegasus model)"),fCr=l(),zE=a("li"),Jve=a("strong"),mCr=o("roberta"),gCr=o(" \u2014 "),oU=a("a"),hCr=o("FlaxRobertaModel"),pCr=o(" (RoBERTa model)"),uCr=l(),QE=a("li"),Yve=a("strong"),_Cr=o("roformer"),bCr=o(" \u2014 "),rU=a("a"),vCr=o("FlaxRoFormerModel"),FCr=o(" (RoFormer model)"),TCr=l(),WE=a("li"),Kve=a("strong"),MCr=o("t5"),ECr=o(" \u2014 "),tU=a("a"),CCr=o("FlaxT5Model"),wCr=o(" (T5 model)"),ACr=l(),HE=a("li"),Zve=a("strong"),yCr=o("vision-text-dual-encoder"),LCr=o(" \u2014 "),aU=a("a"),xCr=o("FlaxVisionTextDualEncoderModel"),$Cr=o(" (VisionTextDualEncoder model)"),kCr=l(),UE=a("li"),eFe=a("strong"),SCr=o("vit"),RCr=o(" \u2014 "),nU=a("a"),BCr=o("FlaxViTModel"),PCr=o(" (ViT model)"),ICr=l(),JE=a("li"),oFe=a("strong"),qCr=o("wav2vec2"),NCr=o(" \u2014 "),sU=a("a"),jCr=o("FlaxWav2Vec2Model"),DCr=o(" (Wav2Vec2 model)"),GCr=l(),YE=a("li"),rFe=a("strong"),OCr=o("xglm"),VCr=o(" \u2014 "),lU=a("a"),XCr=o("FlaxXGLMModel"),zCr=o(" (XGLM model)"),QCr=l(),KE=a("li"),tFe=a("strong"),WCr=o("xlm-roberta"),HCr=o(" \u2014 "),iU=a("a"),UCr=o("FlaxXLMRobertaModel"),JCr=o(" (XLM-RoBERTa model)"),YCr=l(),F(ZE.$$.fragment),WPe=l(),Fc=a("h2"),e5=a("a"),aFe=a("span"),F(T7.$$.fragment),KCr=l(),nFe=a("span"),ZCr=o("FlaxAutoModelForCausalLM"),HPe=l(),fr=a("div"),F(M7.$$.fragment),e3r=l(),Tc=a("p"),o3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),dU=a("a"),r3r=o("from_pretrained()"),t3r=o(" class method or the "),cU=a("a"),a3r=o("from_config()"),n3r=o(` class
method.`),s3r=l(),E7=a("p"),l3r=o("This class cannot be instantiated directly using "),sFe=a("code"),i3r=o("__init__()"),d3r=o(" (throws an error)."),c3r=l(),qt=a("div"),F(C7.$$.fragment),f3r=l(),lFe=a("p"),m3r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),g3r=l(),Mc=a("p"),h3r=o(`Note:
Loading a model from its configuration file does `),iFe=a("strong"),p3r=o("not"),u3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fU=a("a"),_3r=o("from_pretrained()"),b3r=o(" to load the model weights."),v3r=l(),F(o5.$$.fragment),F3r=l(),Nr=a("div"),F(w7.$$.fragment),T3r=l(),dFe=a("p"),M3r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),E3r=l(),cn=a("p"),C3r=o("The model class to instantiate is selected based on the "),cFe=a("code"),w3r=o("model_type"),A3r=o(` property of the config object (either
passed as an argument or loaded from `),fFe=a("code"),y3r=o("pretrained_model_name_or_path"),L3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mFe=a("code"),x3r=o("pretrained_model_name_or_path"),$3r=o(":"),k3r=l(),ke=a("ul"),r5=a("li"),gFe=a("strong"),S3r=o("bart"),R3r=o(" \u2014 "),mU=a("a"),B3r=o("FlaxBartForCausalLM"),P3r=o(" (BART model)"),I3r=l(),t5=a("li"),hFe=a("strong"),q3r=o("bert"),N3r=o(" \u2014 "),gU=a("a"),j3r=o("FlaxBertForCausalLM"),D3r=o(" (BERT model)"),G3r=l(),a5=a("li"),pFe=a("strong"),O3r=o("big_bird"),V3r=o(" \u2014 "),hU=a("a"),X3r=o("FlaxBigBirdForCausalLM"),z3r=o(" (BigBird model)"),Q3r=l(),n5=a("li"),uFe=a("strong"),W3r=o("electra"),H3r=o(" \u2014 "),pU=a("a"),U3r=o("FlaxElectraForCausalLM"),J3r=o(" (ELECTRA model)"),Y3r=l(),s5=a("li"),_Fe=a("strong"),K3r=o("gpt2"),Z3r=o(" \u2014 "),uU=a("a"),ewr=o("FlaxGPT2LMHeadModel"),owr=o(" (OpenAI GPT-2 model)"),rwr=l(),l5=a("li"),bFe=a("strong"),twr=o("gpt_neo"),awr=o(" \u2014 "),_U=a("a"),nwr=o("FlaxGPTNeoForCausalLM"),swr=o(" (GPT Neo model)"),lwr=l(),i5=a("li"),vFe=a("strong"),iwr=o("gptj"),dwr=o(" \u2014 "),bU=a("a"),cwr=o("FlaxGPTJForCausalLM"),fwr=o(" (GPT-J model)"),mwr=l(),d5=a("li"),FFe=a("strong"),gwr=o("roberta"),hwr=o(" \u2014 "),vU=a("a"),pwr=o("FlaxRobertaForCausalLM"),uwr=o(" (RoBERTa model)"),_wr=l(),c5=a("li"),TFe=a("strong"),bwr=o("xglm"),vwr=o(" \u2014 "),FU=a("a"),Fwr=o("FlaxXGLMForCausalLM"),Twr=o(" (XGLM model)"),Mwr=l(),F(f5.$$.fragment),UPe=l(),Ec=a("h2"),m5=a("a"),MFe=a("span"),F(A7.$$.fragment),Ewr=l(),EFe=a("span"),Cwr=o("FlaxAutoModelForPreTraining"),JPe=l(),mr=a("div"),F(y7.$$.fragment),wwr=l(),Cc=a("p"),Awr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),TU=a("a"),ywr=o("from_pretrained()"),Lwr=o(" class method or the "),MU=a("a"),xwr=o("from_config()"),$wr=o(` class
method.`),kwr=l(),L7=a("p"),Swr=o("This class cannot be instantiated directly using "),CFe=a("code"),Rwr=o("__init__()"),Bwr=o(" (throws an error)."),Pwr=l(),Nt=a("div"),F(x7.$$.fragment),Iwr=l(),wFe=a("p"),qwr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Nwr=l(),wc=a("p"),jwr=o(`Note:
Loading a model from its configuration file does `),AFe=a("strong"),Dwr=o("not"),Gwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EU=a("a"),Owr=o("from_pretrained()"),Vwr=o(" to load the model weights."),Xwr=l(),F(g5.$$.fragment),zwr=l(),jr=a("div"),F($7.$$.fragment),Qwr=l(),yFe=a("p"),Wwr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Hwr=l(),fn=a("p"),Uwr=o("The model class to instantiate is selected based on the "),LFe=a("code"),Jwr=o("model_type"),Ywr=o(` property of the config object (either
passed as an argument or loaded from `),xFe=a("code"),Kwr=o("pretrained_model_name_or_path"),Zwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$Fe=a("code"),eAr=o("pretrained_model_name_or_path"),oAr=o(":"),rAr=l(),Me=a("ul"),h5=a("li"),kFe=a("strong"),tAr=o("albert"),aAr=o(" \u2014 "),CU=a("a"),nAr=o("FlaxAlbertForPreTraining"),sAr=o(" (ALBERT model)"),lAr=l(),p5=a("li"),SFe=a("strong"),iAr=o("bart"),dAr=o(" \u2014 "),wU=a("a"),cAr=o("FlaxBartForConditionalGeneration"),fAr=o(" (BART model)"),mAr=l(),u5=a("li"),RFe=a("strong"),gAr=o("bert"),hAr=o(" \u2014 "),AU=a("a"),pAr=o("FlaxBertForPreTraining"),uAr=o(" (BERT model)"),_Ar=l(),_5=a("li"),BFe=a("strong"),bAr=o("big_bird"),vAr=o(" \u2014 "),yU=a("a"),FAr=o("FlaxBigBirdForPreTraining"),TAr=o(" (BigBird model)"),MAr=l(),b5=a("li"),PFe=a("strong"),EAr=o("electra"),CAr=o(" \u2014 "),LU=a("a"),wAr=o("FlaxElectraForPreTraining"),AAr=o(" (ELECTRA model)"),yAr=l(),v5=a("li"),IFe=a("strong"),LAr=o("mbart"),xAr=o(" \u2014 "),xU=a("a"),$Ar=o("FlaxMBartForConditionalGeneration"),kAr=o(" (mBART model)"),SAr=l(),F5=a("li"),qFe=a("strong"),RAr=o("mt5"),BAr=o(" \u2014 "),$U=a("a"),PAr=o("FlaxMT5ForConditionalGeneration"),IAr=o(" (mT5 model)"),qAr=l(),T5=a("li"),NFe=a("strong"),NAr=o("roberta"),jAr=o(" \u2014 "),kU=a("a"),DAr=o("FlaxRobertaForMaskedLM"),GAr=o(" (RoBERTa model)"),OAr=l(),M5=a("li"),jFe=a("strong"),VAr=o("roformer"),XAr=o(" \u2014 "),SU=a("a"),zAr=o("FlaxRoFormerForMaskedLM"),QAr=o(" (RoFormer model)"),WAr=l(),E5=a("li"),DFe=a("strong"),HAr=o("t5"),UAr=o(" \u2014 "),RU=a("a"),JAr=o("FlaxT5ForConditionalGeneration"),YAr=o(" (T5 model)"),KAr=l(),C5=a("li"),GFe=a("strong"),ZAr=o("wav2vec2"),e0r=o(" \u2014 "),BU=a("a"),o0r=o("FlaxWav2Vec2ForPreTraining"),r0r=o(" (Wav2Vec2 model)"),t0r=l(),w5=a("li"),OFe=a("strong"),a0r=o("xlm-roberta"),n0r=o(" \u2014 "),PU=a("a"),s0r=o("FlaxXLMRobertaForMaskedLM"),l0r=o(" (XLM-RoBERTa model)"),i0r=l(),F(A5.$$.fragment),YPe=l(),Ac=a("h2"),y5=a("a"),VFe=a("span"),F(k7.$$.fragment),d0r=l(),XFe=a("span"),c0r=o("FlaxAutoModelForMaskedLM"),KPe=l(),gr=a("div"),F(S7.$$.fragment),f0r=l(),yc=a("p"),m0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),IU=a("a"),g0r=o("from_pretrained()"),h0r=o(" class method or the "),qU=a("a"),p0r=o("from_config()"),u0r=o(` class
method.`),_0r=l(),R7=a("p"),b0r=o("This class cannot be instantiated directly using "),zFe=a("code"),v0r=o("__init__()"),F0r=o(" (throws an error)."),T0r=l(),jt=a("div"),F(B7.$$.fragment),M0r=l(),QFe=a("p"),E0r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),C0r=l(),Lc=a("p"),w0r=o(`Note:
Loading a model from its configuration file does `),WFe=a("strong"),A0r=o("not"),y0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NU=a("a"),L0r=o("from_pretrained()"),x0r=o(" to load the model weights."),$0r=l(),F(L5.$$.fragment),k0r=l(),Dr=a("div"),F(P7.$$.fragment),S0r=l(),HFe=a("p"),R0r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),B0r=l(),mn=a("p"),P0r=o("The model class to instantiate is selected based on the "),UFe=a("code"),I0r=o("model_type"),q0r=o(` property of the config object (either
passed as an argument or loaded from `),JFe=a("code"),N0r=o("pretrained_model_name_or_path"),j0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YFe=a("code"),D0r=o("pretrained_model_name_or_path"),G0r=o(":"),O0r=l(),Le=a("ul"),x5=a("li"),KFe=a("strong"),V0r=o("albert"),X0r=o(" \u2014 "),jU=a("a"),z0r=o("FlaxAlbertForMaskedLM"),Q0r=o(" (ALBERT model)"),W0r=l(),$5=a("li"),ZFe=a("strong"),H0r=o("bart"),U0r=o(" \u2014 "),DU=a("a"),J0r=o("FlaxBartForConditionalGeneration"),Y0r=o(" (BART model)"),K0r=l(),k5=a("li"),eTe=a("strong"),Z0r=o("bert"),eyr=o(" \u2014 "),GU=a("a"),oyr=o("FlaxBertForMaskedLM"),ryr=o(" (BERT model)"),tyr=l(),S5=a("li"),oTe=a("strong"),ayr=o("big_bird"),nyr=o(" \u2014 "),OU=a("a"),syr=o("FlaxBigBirdForMaskedLM"),lyr=o(" (BigBird model)"),iyr=l(),R5=a("li"),rTe=a("strong"),dyr=o("distilbert"),cyr=o(" \u2014 "),VU=a("a"),fyr=o("FlaxDistilBertForMaskedLM"),myr=o(" (DistilBERT model)"),gyr=l(),B5=a("li"),tTe=a("strong"),hyr=o("electra"),pyr=o(" \u2014 "),XU=a("a"),uyr=o("FlaxElectraForMaskedLM"),_yr=o(" (ELECTRA model)"),byr=l(),P5=a("li"),aTe=a("strong"),vyr=o("mbart"),Fyr=o(" \u2014 "),zU=a("a"),Tyr=o("FlaxMBartForConditionalGeneration"),Myr=o(" (mBART model)"),Eyr=l(),I5=a("li"),nTe=a("strong"),Cyr=o("roberta"),wyr=o(" \u2014 "),QU=a("a"),Ayr=o("FlaxRobertaForMaskedLM"),yyr=o(" (RoBERTa model)"),Lyr=l(),q5=a("li"),sTe=a("strong"),xyr=o("roformer"),$yr=o(" \u2014 "),WU=a("a"),kyr=o("FlaxRoFormerForMaskedLM"),Syr=o(" (RoFormer model)"),Ryr=l(),N5=a("li"),lTe=a("strong"),Byr=o("xlm-roberta"),Pyr=o(" \u2014 "),HU=a("a"),Iyr=o("FlaxXLMRobertaForMaskedLM"),qyr=o(" (XLM-RoBERTa model)"),Nyr=l(),F(j5.$$.fragment),ZPe=l(),xc=a("h2"),D5=a("a"),iTe=a("span"),F(I7.$$.fragment),jyr=l(),dTe=a("span"),Dyr=o("FlaxAutoModelForSeq2SeqLM"),eIe=l(),hr=a("div"),F(q7.$$.fragment),Gyr=l(),$c=a("p"),Oyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),UU=a("a"),Vyr=o("from_pretrained()"),Xyr=o(" class method or the "),JU=a("a"),zyr=o("from_config()"),Qyr=o(` class
method.`),Wyr=l(),N7=a("p"),Hyr=o("This class cannot be instantiated directly using "),cTe=a("code"),Uyr=o("__init__()"),Jyr=o(" (throws an error)."),Yyr=l(),Dt=a("div"),F(j7.$$.fragment),Kyr=l(),fTe=a("p"),Zyr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),eLr=l(),kc=a("p"),oLr=o(`Note:
Loading a model from its configuration file does `),mTe=a("strong"),rLr=o("not"),tLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YU=a("a"),aLr=o("from_pretrained()"),nLr=o(" to load the model weights."),sLr=l(),F(G5.$$.fragment),lLr=l(),Gr=a("div"),F(D7.$$.fragment),iLr=l(),gTe=a("p"),dLr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),cLr=l(),gn=a("p"),fLr=o("The model class to instantiate is selected based on the "),hTe=a("code"),mLr=o("model_type"),gLr=o(` property of the config object (either
passed as an argument or loaded from `),pTe=a("code"),hLr=o("pretrained_model_name_or_path"),pLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uTe=a("code"),uLr=o("pretrained_model_name_or_path"),_Lr=o(":"),bLr=l(),Se=a("ul"),O5=a("li"),_Te=a("strong"),vLr=o("bart"),FLr=o(" \u2014 "),KU=a("a"),TLr=o("FlaxBartForConditionalGeneration"),MLr=o(" (BART model)"),ELr=l(),V5=a("li"),bTe=a("strong"),CLr=o("blenderbot"),wLr=o(" \u2014 "),ZU=a("a"),ALr=o("FlaxBlenderbotForConditionalGeneration"),yLr=o(" (Blenderbot model)"),LLr=l(),X5=a("li"),vTe=a("strong"),xLr=o("blenderbot-small"),$Lr=o(" \u2014 "),eJ=a("a"),kLr=o("FlaxBlenderbotSmallForConditionalGeneration"),SLr=o(" (BlenderbotSmall model)"),RLr=l(),z5=a("li"),FTe=a("strong"),BLr=o("encoder-decoder"),PLr=o(" \u2014 "),oJ=a("a"),ILr=o("FlaxEncoderDecoderModel"),qLr=o(" (Encoder decoder model)"),NLr=l(),Q5=a("li"),TTe=a("strong"),jLr=o("marian"),DLr=o(" \u2014 "),rJ=a("a"),GLr=o("FlaxMarianMTModel"),OLr=o(" (Marian model)"),VLr=l(),W5=a("li"),MTe=a("strong"),XLr=o("mbart"),zLr=o(" \u2014 "),tJ=a("a"),QLr=o("FlaxMBartForConditionalGeneration"),WLr=o(" (mBART model)"),HLr=l(),H5=a("li"),ETe=a("strong"),ULr=o("mt5"),JLr=o(" \u2014 "),aJ=a("a"),YLr=o("FlaxMT5ForConditionalGeneration"),KLr=o(" (mT5 model)"),ZLr=l(),U5=a("li"),CTe=a("strong"),e7r=o("pegasus"),o7r=o(" \u2014 "),nJ=a("a"),r7r=o("FlaxPegasusForConditionalGeneration"),t7r=o(" (Pegasus model)"),a7r=l(),J5=a("li"),wTe=a("strong"),n7r=o("t5"),s7r=o(" \u2014 "),sJ=a("a"),l7r=o("FlaxT5ForConditionalGeneration"),i7r=o(" (T5 model)"),d7r=l(),F(Y5.$$.fragment),oIe=l(),Sc=a("h2"),K5=a("a"),ATe=a("span"),F(G7.$$.fragment),c7r=l(),yTe=a("span"),f7r=o("FlaxAutoModelForSequenceClassification"),rIe=l(),pr=a("div"),F(O7.$$.fragment),m7r=l(),Rc=a("p"),g7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),lJ=a("a"),h7r=o("from_pretrained()"),p7r=o(" class method or the "),iJ=a("a"),u7r=o("from_config()"),_7r=o(` class
method.`),b7r=l(),V7=a("p"),v7r=o("This class cannot be instantiated directly using "),LTe=a("code"),F7r=o("__init__()"),T7r=o(" (throws an error)."),M7r=l(),Gt=a("div"),F(X7.$$.fragment),E7r=l(),xTe=a("p"),C7r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),w7r=l(),Bc=a("p"),A7r=o(`Note:
Loading a model from its configuration file does `),$Te=a("strong"),y7r=o("not"),L7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dJ=a("a"),x7r=o("from_pretrained()"),$7r=o(" to load the model weights."),k7r=l(),F(Z5.$$.fragment),S7r=l(),Or=a("div"),F(z7.$$.fragment),R7r=l(),kTe=a("p"),B7r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),P7r=l(),hn=a("p"),I7r=o("The model class to instantiate is selected based on the "),STe=a("code"),q7r=o("model_type"),N7r=o(` property of the config object (either
passed as an argument or loaded from `),RTe=a("code"),j7r=o("pretrained_model_name_or_path"),D7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BTe=a("code"),G7r=o("pretrained_model_name_or_path"),O7r=o(":"),V7r=l(),xe=a("ul"),eC=a("li"),PTe=a("strong"),X7r=o("albert"),z7r=o(" \u2014 "),cJ=a("a"),Q7r=o("FlaxAlbertForSequenceClassification"),W7r=o(" (ALBERT model)"),H7r=l(),oC=a("li"),ITe=a("strong"),U7r=o("bart"),J7r=o(" \u2014 "),fJ=a("a"),Y7r=o("FlaxBartForSequenceClassification"),K7r=o(" (BART model)"),Z7r=l(),rC=a("li"),qTe=a("strong"),exr=o("bert"),oxr=o(" \u2014 "),mJ=a("a"),rxr=o("FlaxBertForSequenceClassification"),txr=o(" (BERT model)"),axr=l(),tC=a("li"),NTe=a("strong"),nxr=o("big_bird"),sxr=o(" \u2014 "),gJ=a("a"),lxr=o("FlaxBigBirdForSequenceClassification"),ixr=o(" (BigBird model)"),dxr=l(),aC=a("li"),jTe=a("strong"),cxr=o("distilbert"),fxr=o(" \u2014 "),hJ=a("a"),mxr=o("FlaxDistilBertForSequenceClassification"),gxr=o(" (DistilBERT model)"),hxr=l(),nC=a("li"),DTe=a("strong"),pxr=o("electra"),uxr=o(" \u2014 "),pJ=a("a"),_xr=o("FlaxElectraForSequenceClassification"),bxr=o(" (ELECTRA model)"),vxr=l(),sC=a("li"),GTe=a("strong"),Fxr=o("mbart"),Txr=o(" \u2014 "),uJ=a("a"),Mxr=o("FlaxMBartForSequenceClassification"),Exr=o(" (mBART model)"),Cxr=l(),lC=a("li"),OTe=a("strong"),wxr=o("roberta"),Axr=o(" \u2014 "),_J=a("a"),yxr=o("FlaxRobertaForSequenceClassification"),Lxr=o(" (RoBERTa model)"),xxr=l(),iC=a("li"),VTe=a("strong"),$xr=o("roformer"),kxr=o(" \u2014 "),bJ=a("a"),Sxr=o("FlaxRoFormerForSequenceClassification"),Rxr=o(" (RoFormer model)"),Bxr=l(),dC=a("li"),XTe=a("strong"),Pxr=o("xlm-roberta"),Ixr=o(" \u2014 "),vJ=a("a"),qxr=o("FlaxXLMRobertaForSequenceClassification"),Nxr=o(" (XLM-RoBERTa model)"),jxr=l(),F(cC.$$.fragment),tIe=l(),Pc=a("h2"),fC=a("a"),zTe=a("span"),F(Q7.$$.fragment),Dxr=l(),QTe=a("span"),Gxr=o("FlaxAutoModelForQuestionAnswering"),aIe=l(),ur=a("div"),F(W7.$$.fragment),Oxr=l(),Ic=a("p"),Vxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),FJ=a("a"),Xxr=o("from_pretrained()"),zxr=o(" class method or the "),TJ=a("a"),Qxr=o("from_config()"),Wxr=o(` class
method.`),Hxr=l(),H7=a("p"),Uxr=o("This class cannot be instantiated directly using "),WTe=a("code"),Jxr=o("__init__()"),Yxr=o(" (throws an error)."),Kxr=l(),Ot=a("div"),F(U7.$$.fragment),Zxr=l(),HTe=a("p"),e9r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),o9r=l(),qc=a("p"),r9r=o(`Note:
Loading a model from its configuration file does `),UTe=a("strong"),t9r=o("not"),a9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MJ=a("a"),n9r=o("from_pretrained()"),s9r=o(" to load the model weights."),l9r=l(),F(mC.$$.fragment),i9r=l(),Vr=a("div"),F(J7.$$.fragment),d9r=l(),JTe=a("p"),c9r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),f9r=l(),pn=a("p"),m9r=o("The model class to instantiate is selected based on the "),YTe=a("code"),g9r=o("model_type"),h9r=o(` property of the config object (either
passed as an argument or loaded from `),KTe=a("code"),p9r=o("pretrained_model_name_or_path"),u9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZTe=a("code"),_9r=o("pretrained_model_name_or_path"),b9r=o(":"),v9r=l(),$e=a("ul"),gC=a("li"),e8e=a("strong"),F9r=o("albert"),T9r=o(" \u2014 "),EJ=a("a"),M9r=o("FlaxAlbertForQuestionAnswering"),E9r=o(" (ALBERT model)"),C9r=l(),hC=a("li"),o8e=a("strong"),w9r=o("bart"),A9r=o(" \u2014 "),CJ=a("a"),y9r=o("FlaxBartForQuestionAnswering"),L9r=o(" (BART model)"),x9r=l(),pC=a("li"),r8e=a("strong"),$9r=o("bert"),k9r=o(" \u2014 "),wJ=a("a"),S9r=o("FlaxBertForQuestionAnswering"),R9r=o(" (BERT model)"),B9r=l(),uC=a("li"),t8e=a("strong"),P9r=o("big_bird"),I9r=o(" \u2014 "),AJ=a("a"),q9r=o("FlaxBigBirdForQuestionAnswering"),N9r=o(" (BigBird model)"),j9r=l(),_C=a("li"),a8e=a("strong"),D9r=o("distilbert"),G9r=o(" \u2014 "),yJ=a("a"),O9r=o("FlaxDistilBertForQuestionAnswering"),V9r=o(" (DistilBERT model)"),X9r=l(),bC=a("li"),n8e=a("strong"),z9r=o("electra"),Q9r=o(" \u2014 "),LJ=a("a"),W9r=o("FlaxElectraForQuestionAnswering"),H9r=o(" (ELECTRA model)"),U9r=l(),vC=a("li"),s8e=a("strong"),J9r=o("mbart"),Y9r=o(" \u2014 "),xJ=a("a"),K9r=o("FlaxMBartForQuestionAnswering"),Z9r=o(" (mBART model)"),e$r=l(),FC=a("li"),l8e=a("strong"),o$r=o("roberta"),r$r=o(" \u2014 "),$J=a("a"),t$r=o("FlaxRobertaForQuestionAnswering"),a$r=o(" (RoBERTa model)"),n$r=l(),TC=a("li"),i8e=a("strong"),s$r=o("roformer"),l$r=o(" \u2014 "),kJ=a("a"),i$r=o("FlaxRoFormerForQuestionAnswering"),d$r=o(" (RoFormer model)"),c$r=l(),MC=a("li"),d8e=a("strong"),f$r=o("xlm-roberta"),m$r=o(" \u2014 "),SJ=a("a"),g$r=o("FlaxXLMRobertaForQuestionAnswering"),h$r=o(" (XLM-RoBERTa model)"),p$r=l(),F(EC.$$.fragment),nIe=l(),Nc=a("h2"),CC=a("a"),c8e=a("span"),F(Y7.$$.fragment),u$r=l(),f8e=a("span"),_$r=o("FlaxAutoModelForTokenClassification"),sIe=l(),_r=a("div"),F(K7.$$.fragment),b$r=l(),jc=a("p"),v$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),RJ=a("a"),F$r=o("from_pretrained()"),T$r=o(" class method or the "),BJ=a("a"),M$r=o("from_config()"),E$r=o(` class
method.`),C$r=l(),Z7=a("p"),w$r=o("This class cannot be instantiated directly using "),m8e=a("code"),A$r=o("__init__()"),y$r=o(" (throws an error)."),L$r=l(),Vt=a("div"),F(ex.$$.fragment),x$r=l(),g8e=a("p"),$$r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),k$r=l(),Dc=a("p"),S$r=o(`Note:
Loading a model from its configuration file does `),h8e=a("strong"),R$r=o("not"),B$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PJ=a("a"),P$r=o("from_pretrained()"),I$r=o(" to load the model weights."),q$r=l(),F(wC.$$.fragment),N$r=l(),Xr=a("div"),F(ox.$$.fragment),j$r=l(),p8e=a("p"),D$r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),G$r=l(),un=a("p"),O$r=o("The model class to instantiate is selected based on the "),u8e=a("code"),V$r=o("model_type"),X$r=o(` property of the config object (either
passed as an argument or loaded from `),_8e=a("code"),z$r=o("pretrained_model_name_or_path"),Q$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b8e=a("code"),W$r=o("pretrained_model_name_or_path"),H$r=o(":"),U$r=l(),De=a("ul"),AC=a("li"),v8e=a("strong"),J$r=o("albert"),Y$r=o(" \u2014 "),IJ=a("a"),K$r=o("FlaxAlbertForTokenClassification"),Z$r=o(" (ALBERT model)"),ekr=l(),yC=a("li"),F8e=a("strong"),okr=o("bert"),rkr=o(" \u2014 "),qJ=a("a"),tkr=o("FlaxBertForTokenClassification"),akr=o(" (BERT model)"),nkr=l(),LC=a("li"),T8e=a("strong"),skr=o("big_bird"),lkr=o(" \u2014 "),NJ=a("a"),ikr=o("FlaxBigBirdForTokenClassification"),dkr=o(" (BigBird model)"),ckr=l(),xC=a("li"),M8e=a("strong"),fkr=o("distilbert"),mkr=o(" \u2014 "),jJ=a("a"),gkr=o("FlaxDistilBertForTokenClassification"),hkr=o(" (DistilBERT model)"),pkr=l(),$C=a("li"),E8e=a("strong"),ukr=o("electra"),_kr=o(" \u2014 "),DJ=a("a"),bkr=o("FlaxElectraForTokenClassification"),vkr=o(" (ELECTRA model)"),Fkr=l(),kC=a("li"),C8e=a("strong"),Tkr=o("roberta"),Mkr=o(" \u2014 "),GJ=a("a"),Ekr=o("FlaxRobertaForTokenClassification"),Ckr=o(" (RoBERTa model)"),wkr=l(),SC=a("li"),w8e=a("strong"),Akr=o("roformer"),ykr=o(" \u2014 "),OJ=a("a"),Lkr=o("FlaxRoFormerForTokenClassification"),xkr=o(" (RoFormer model)"),$kr=l(),RC=a("li"),A8e=a("strong"),kkr=o("xlm-roberta"),Skr=o(" \u2014 "),VJ=a("a"),Rkr=o("FlaxXLMRobertaForTokenClassification"),Bkr=o(" (XLM-RoBERTa model)"),Pkr=l(),F(BC.$$.fragment),lIe=l(),Gc=a("h2"),PC=a("a"),y8e=a("span"),F(rx.$$.fragment),Ikr=l(),L8e=a("span"),qkr=o("FlaxAutoModelForMultipleChoice"),iIe=l(),br=a("div"),F(tx.$$.fragment),Nkr=l(),Oc=a("p"),jkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),XJ=a("a"),Dkr=o("from_pretrained()"),Gkr=o(" class method or the "),zJ=a("a"),Okr=o("from_config()"),Vkr=o(` class
method.`),Xkr=l(),ax=a("p"),zkr=o("This class cannot be instantiated directly using "),x8e=a("code"),Qkr=o("__init__()"),Wkr=o(" (throws an error)."),Hkr=l(),Xt=a("div"),F(nx.$$.fragment),Ukr=l(),$8e=a("p"),Jkr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Ykr=l(),Vc=a("p"),Kkr=o(`Note:
Loading a model from its configuration file does `),k8e=a("strong"),Zkr=o("not"),eSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QJ=a("a"),oSr=o("from_pretrained()"),rSr=o(" to load the model weights."),tSr=l(),F(IC.$$.fragment),aSr=l(),zr=a("div"),F(sx.$$.fragment),nSr=l(),S8e=a("p"),sSr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),lSr=l(),_n=a("p"),iSr=o("The model class to instantiate is selected based on the "),R8e=a("code"),dSr=o("model_type"),cSr=o(` property of the config object (either
passed as an argument or loaded from `),B8e=a("code"),fSr=o("pretrained_model_name_or_path"),mSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P8e=a("code"),gSr=o("pretrained_model_name_or_path"),hSr=o(":"),pSr=l(),Ge=a("ul"),qC=a("li"),I8e=a("strong"),uSr=o("albert"),_Sr=o(" \u2014 "),WJ=a("a"),bSr=o("FlaxAlbertForMultipleChoice"),vSr=o(" (ALBERT model)"),FSr=l(),NC=a("li"),q8e=a("strong"),TSr=o("bert"),MSr=o(" \u2014 "),HJ=a("a"),ESr=o("FlaxBertForMultipleChoice"),CSr=o(" (BERT model)"),wSr=l(),jC=a("li"),N8e=a("strong"),ASr=o("big_bird"),ySr=o(" \u2014 "),UJ=a("a"),LSr=o("FlaxBigBirdForMultipleChoice"),xSr=o(" (BigBird model)"),$Sr=l(),DC=a("li"),j8e=a("strong"),kSr=o("distilbert"),SSr=o(" \u2014 "),JJ=a("a"),RSr=o("FlaxDistilBertForMultipleChoice"),BSr=o(" (DistilBERT model)"),PSr=l(),GC=a("li"),D8e=a("strong"),ISr=o("electra"),qSr=o(" \u2014 "),YJ=a("a"),NSr=o("FlaxElectraForMultipleChoice"),jSr=o(" (ELECTRA model)"),DSr=l(),OC=a("li"),G8e=a("strong"),GSr=o("roberta"),OSr=o(" \u2014 "),KJ=a("a"),VSr=o("FlaxRobertaForMultipleChoice"),XSr=o(" (RoBERTa model)"),zSr=l(),VC=a("li"),O8e=a("strong"),QSr=o("roformer"),WSr=o(" \u2014 "),ZJ=a("a"),HSr=o("FlaxRoFormerForMultipleChoice"),USr=o(" (RoFormer model)"),JSr=l(),XC=a("li"),V8e=a("strong"),YSr=o("xlm-roberta"),KSr=o(" \u2014 "),eY=a("a"),ZSr=o("FlaxXLMRobertaForMultipleChoice"),eRr=o(" (XLM-RoBERTa model)"),oRr=l(),F(zC.$$.fragment),dIe=l(),Xc=a("h2"),QC=a("a"),X8e=a("span"),F(lx.$$.fragment),rRr=l(),z8e=a("span"),tRr=o("FlaxAutoModelForNextSentencePrediction"),cIe=l(),vr=a("div"),F(ix.$$.fragment),aRr=l(),zc=a("p"),nRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),oY=a("a"),sRr=o("from_pretrained()"),lRr=o(" class method or the "),rY=a("a"),iRr=o("from_config()"),dRr=o(` class
method.`),cRr=l(),dx=a("p"),fRr=o("This class cannot be instantiated directly using "),Q8e=a("code"),mRr=o("__init__()"),gRr=o(" (throws an error)."),hRr=l(),zt=a("div"),F(cx.$$.fragment),pRr=l(),W8e=a("p"),uRr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),_Rr=l(),Qc=a("p"),bRr=o(`Note:
Loading a model from its configuration file does `),H8e=a("strong"),vRr=o("not"),FRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tY=a("a"),TRr=o("from_pretrained()"),MRr=o(" to load the model weights."),ERr=l(),F(WC.$$.fragment),CRr=l(),Qr=a("div"),F(fx.$$.fragment),wRr=l(),U8e=a("p"),ARr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),yRr=l(),bn=a("p"),LRr=o("The model class to instantiate is selected based on the "),J8e=a("code"),xRr=o("model_type"),$Rr=o(` property of the config object (either
passed as an argument or loaded from `),Y8e=a("code"),kRr=o("pretrained_model_name_or_path"),SRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K8e=a("code"),RRr=o("pretrained_model_name_or_path"),BRr=o(":"),PRr=l(),Z8e=a("ul"),HC=a("li"),eMe=a("strong"),IRr=o("bert"),qRr=o(" \u2014 "),aY=a("a"),NRr=o("FlaxBertForNextSentencePrediction"),jRr=o(" (BERT model)"),DRr=l(),F(UC.$$.fragment),fIe=l(),Wc=a("h2"),JC=a("a"),oMe=a("span"),F(mx.$$.fragment),GRr=l(),rMe=a("span"),ORr=o("FlaxAutoModelForImageClassification"),mIe=l(),Fr=a("div"),F(gx.$$.fragment),VRr=l(),Hc=a("p"),XRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),nY=a("a"),zRr=o("from_pretrained()"),QRr=o(" class method or the "),sY=a("a"),WRr=o("from_config()"),HRr=o(` class
method.`),URr=l(),hx=a("p"),JRr=o("This class cannot be instantiated directly using "),tMe=a("code"),YRr=o("__init__()"),KRr=o(" (throws an error)."),ZRr=l(),Qt=a("div"),F(px.$$.fragment),eBr=l(),aMe=a("p"),oBr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),rBr=l(),Uc=a("p"),tBr=o(`Note:
Loading a model from its configuration file does `),nMe=a("strong"),aBr=o("not"),nBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lY=a("a"),sBr=o("from_pretrained()"),lBr=o(" to load the model weights."),iBr=l(),F(YC.$$.fragment),dBr=l(),Wr=a("div"),F(ux.$$.fragment),cBr=l(),sMe=a("p"),fBr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),mBr=l(),vn=a("p"),gBr=o("The model class to instantiate is selected based on the "),lMe=a("code"),hBr=o("model_type"),pBr=o(` property of the config object (either
passed as an argument or loaded from `),iMe=a("code"),uBr=o("pretrained_model_name_or_path"),_Br=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dMe=a("code"),bBr=o("pretrained_model_name_or_path"),vBr=o(":"),FBr=l(),_x=a("ul"),KC=a("li"),cMe=a("strong"),TBr=o("beit"),MBr=o(" \u2014 "),iY=a("a"),EBr=o("FlaxBeitForImageClassification"),CBr=o(" (BEiT model)"),wBr=l(),ZC=a("li"),fMe=a("strong"),ABr=o("vit"),yBr=o(" \u2014 "),dY=a("a"),LBr=o("FlaxViTForImageClassification"),xBr=o(" (ViT model)"),$Br=l(),F(e3.$$.fragment),gIe=l(),Jc=a("h2"),o3=a("a"),mMe=a("span"),F(bx.$$.fragment),kBr=l(),gMe=a("span"),SBr=o("FlaxAutoModelForVision2Seq"),hIe=l(),Tr=a("div"),F(vx.$$.fragment),RBr=l(),Yc=a("p"),BBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),cY=a("a"),PBr=o("from_pretrained()"),IBr=o(" class method or the "),fY=a("a"),qBr=o("from_config()"),NBr=o(` class
method.`),jBr=l(),Fx=a("p"),DBr=o("This class cannot be instantiated directly using "),hMe=a("code"),GBr=o("__init__()"),OBr=o(" (throws an error)."),VBr=l(),Wt=a("div"),F(Tx.$$.fragment),XBr=l(),pMe=a("p"),zBr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),QBr=l(),Kc=a("p"),WBr=o(`Note:
Loading a model from its configuration file does `),uMe=a("strong"),HBr=o("not"),UBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mY=a("a"),JBr=o("from_pretrained()"),YBr=o(" to load the model weights."),KBr=l(),F(r3.$$.fragment),ZBr=l(),Hr=a("div"),F(Mx.$$.fragment),ePr=l(),_Me=a("p"),oPr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),rPr=l(),Fn=a("p"),tPr=o("The model class to instantiate is selected based on the "),bMe=a("code"),aPr=o("model_type"),nPr=o(` property of the config object (either
passed as an argument or loaded from `),vMe=a("code"),sPr=o("pretrained_model_name_or_path"),lPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FMe=a("code"),iPr=o("pretrained_model_name_or_path"),dPr=o(":"),cPr=l(),TMe=a("ul"),t3=a("li"),MMe=a("strong"),fPr=o("vision-encoder-decoder"),mPr=o(" \u2014 "),gY=a("a"),gPr=o("FlaxVisionEncoderDecoderModel"),hPr=o(" (Vision Encoder decoder model)"),pPr=l(),F(a3.$$.fragment),this.h()},l(f){const _=iCt('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var Ex=s(p);m=n(Ex,"A",{id:!0,class:!0,href:!0});var EMe=s(m);u=n(EMe,"SPAN",{});var CMe=s(u);T(d.$$.fragment,CMe),CMe.forEach(t),EMe.forEach(t),h=i(Ex),Mo=n(Ex,"SPAN",{});var wMe=s(Mo);oi=r(wMe,"Auto Classes"),wMe.forEach(t),Ex.forEach(t),rf=i(f),Kr=n(f,"P",{});var Cx=s(Kr);ri=r(Cx,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ti=n(Cx,"CODE",{});var AMe=s(ti);FA=r(AMe,"from_pretrained()"),AMe.forEach(t),tf=r(Cx,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Cx.forEach(t),qe=i(f),Xe=n(f,"P",{});var Tn=s(Xe);ai=r(Tn,"Instantiating one of "),Mn=n(Tn,"A",{href:!0});var yMe=s(Mn);TA=r(yMe,"AutoConfig"),yMe.forEach(t),En=r(Tn,", "),Cn=n(Tn,"A",{href:!0});var LMe=s(Cn);MA=r(LMe,"AutoModel"),LMe.forEach(t),ni=r(Tn,`, and
`),wn=n(Tn,"A",{href:!0});var xMe=s(wn);EA=r(xMe,"AutoTokenizer"),xMe.forEach(t),si=r(Tn," will directly create a class of the relevant architecture. For instance"),Tn.forEach(t),af=i(f),T(va.$$.fragment,f),ze=i(f),Ae=n(f,"P",{});var wx=s(Ae);P9=r(wx,"will create a model that is an instance of "),li=n(wx,"A",{href:!0});var $Me=s(li);I9=r($Me,"BertModel"),$Me.forEach(t),q9=r(wx,"."),wx.forEach(t),Eo=i(f),Fa=n(f,"P",{});var Ax=s(Fa);N9=r(Ax,"There is one class of "),nf=n(Ax,"CODE",{});var kMe=s(nf);j9=r(kMe,"AutoModel"),kMe.forEach(t),FNe=r(Ax," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Ax.forEach(t),hBe=i(f),ii=n(f,"H2",{class:!0});var yx=s(ii);sf=n(yx,"A",{id:!0,class:!0,href:!0});var SMe=s(sf);nZ=n(SMe,"SPAN",{});var RMe=s(nZ);T(CA.$$.fragment,RMe),RMe.forEach(t),SMe.forEach(t),TNe=i(yx),sZ=n(yx,"SPAN",{});var BMe=s(sZ);MNe=r(BMe,"Extending the Auto Classes"),BMe.forEach(t),yx.forEach(t),pBe=i(f),An=n(f,"P",{});var Zc=s(An);ENe=r(Zc,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),lZ=n(Zc,"CODE",{});var PMe=s(lZ);CNe=r(PMe,"NewModel"),PMe.forEach(t),wNe=r(Zc,", make sure you have a "),iZ=n(Zc,"CODE",{});var IMe=s(iZ);ANe=r(IMe,"NewModelConfig"),IMe.forEach(t),yNe=r(Zc,` then you can add those to the auto
classes like this:`),Zc.forEach(t),uBe=i(f),T(wA.$$.fragment,f),_Be=i(f),D9=n(f,"P",{});var qMe=s(D9);LNe=r(qMe,"You will then be able to use the auto classes like you would usually do!"),qMe.forEach(t),bBe=i(f),T(lf.$$.fragment,f),vBe=i(f),di=n(f,"H2",{class:!0});var Lx=s(di);df=n(Lx,"A",{id:!0,class:!0,href:!0});var NMe=s(df);dZ=n(NMe,"SPAN",{});var jMe=s(dZ);T(AA.$$.fragment,jMe),jMe.forEach(t),NMe.forEach(t),xNe=i(Lx),cZ=n(Lx,"SPAN",{});var DMe=s(cZ);$Ne=r(DMe,"AutoConfig"),DMe.forEach(t),Lx.forEach(t),FBe=i(f),Co=n(f,"DIV",{class:!0});var Jr=s(Co);T(yA.$$.fragment,Jr),kNe=i(Jr),LA=n(Jr,"P",{});var xx=s(LA);SNe=r(xx,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),G9=n(xx,"A",{href:!0});var GMe=s(G9);RNe=r(GMe,"from_pretrained()"),GMe.forEach(t),BNe=r(xx," class method."),xx.forEach(t),PNe=i(Jr),xA=n(Jr,"P",{});var $x=s(xA);INe=r($x,"This class cannot be instantiated directly using "),fZ=n($x,"CODE",{});var OMe=s(fZ);qNe=r(OMe,"__init__()"),OMe.forEach(t),NNe=r($x," (throws an error)."),$x.forEach(t),jNe=i(Jr),Mr=n(Jr,"DIV",{class:!0});var Yr=s(Mr);T($A.$$.fragment,Yr),DNe=i(Yr),mZ=n(Yr,"P",{});var VMe=s(mZ);GNe=r(VMe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),VMe.forEach(t),ONe=i(Yr),ci=n(Yr,"P",{});var ef=s(ci);VNe=r(ef,"The configuration class to instantiate is selected based on the "),gZ=n(ef,"CODE",{});var XMe=s(gZ);XNe=r(XMe,"model_type"),XMe.forEach(t),zNe=r(ef,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),hZ=n(ef,"CODE",{});var zMe=s(hZ);QNe=r(zMe,"pretrained_model_name_or_path"),zMe.forEach(t),WNe=r(ef,":"),ef.forEach(t),HNe=i(Yr),A=n(Yr,"UL",{});var y=s(A);cf=n(y,"LI",{});var n3=s(cf);pZ=n(n3,"STRONG",{});var QMe=s(pZ);UNe=r(QMe,"albert"),QMe.forEach(t),JNe=r(n3," \u2014 "),O9=n(n3,"A",{href:!0});var WMe=s(O9);YNe=r(WMe,"AlbertConfig"),WMe.forEach(t),KNe=r(n3," (ALBERT model)"),n3.forEach(t),ZNe=i(y),ff=n(y,"LI",{});var s3=s(ff);uZ=n(s3,"STRONG",{});var HMe=s(uZ);eje=r(HMe,"bart"),HMe.forEach(t),oje=r(s3," \u2014 "),V9=n(s3,"A",{href:!0});var UMe=s(V9);rje=r(UMe,"BartConfig"),UMe.forEach(t),tje=r(s3," (BART model)"),s3.forEach(t),aje=i(y),mf=n(y,"LI",{});var l3=s(mf);_Z=n(l3,"STRONG",{});var JMe=s(_Z);nje=r(JMe,"beit"),JMe.forEach(t),sje=r(l3," \u2014 "),X9=n(l3,"A",{href:!0});var YMe=s(X9);lje=r(YMe,"BeitConfig"),YMe.forEach(t),ije=r(l3," (BEiT model)"),l3.forEach(t),dje=i(y),gf=n(y,"LI",{});var i3=s(gf);bZ=n(i3,"STRONG",{});var KMe=s(bZ);cje=r(KMe,"bert"),KMe.forEach(t),fje=r(i3," \u2014 "),z9=n(i3,"A",{href:!0});var ZMe=s(z9);mje=r(ZMe,"BertConfig"),ZMe.forEach(t),gje=r(i3," (BERT model)"),i3.forEach(t),hje=i(y),hf=n(y,"LI",{});var d3=s(hf);vZ=n(d3,"STRONG",{});var e4e=s(vZ);pje=r(e4e,"bert-generation"),e4e.forEach(t),uje=r(d3," \u2014 "),Q9=n(d3,"A",{href:!0});var o4e=s(Q9);_je=r(o4e,"BertGenerationConfig"),o4e.forEach(t),bje=r(d3," (Bert Generation model)"),d3.forEach(t),vje=i(y),pf=n(y,"LI",{});var c3=s(pf);FZ=n(c3,"STRONG",{});var r4e=s(FZ);Fje=r(r4e,"big_bird"),r4e.forEach(t),Tje=r(c3," \u2014 "),W9=n(c3,"A",{href:!0});var t4e=s(W9);Mje=r(t4e,"BigBirdConfig"),t4e.forEach(t),Eje=r(c3," (BigBird model)"),c3.forEach(t),Cje=i(y),uf=n(y,"LI",{});var f3=s(uf);TZ=n(f3,"STRONG",{});var a4e=s(TZ);wje=r(a4e,"bigbird_pegasus"),a4e.forEach(t),Aje=r(f3," \u2014 "),H9=n(f3,"A",{href:!0});var n4e=s(H9);yje=r(n4e,"BigBirdPegasusConfig"),n4e.forEach(t),Lje=r(f3," (BigBirdPegasus model)"),f3.forEach(t),xje=i(y),_f=n(y,"LI",{});var m3=s(_f);MZ=n(m3,"STRONG",{});var s4e=s(MZ);$je=r(s4e,"blenderbot"),s4e.forEach(t),kje=r(m3," \u2014 "),U9=n(m3,"A",{href:!0});var l4e=s(U9);Sje=r(l4e,"BlenderbotConfig"),l4e.forEach(t),Rje=r(m3," (Blenderbot model)"),m3.forEach(t),Bje=i(y),bf=n(y,"LI",{});var g3=s(bf);EZ=n(g3,"STRONG",{});var i4e=s(EZ);Pje=r(i4e,"blenderbot-small"),i4e.forEach(t),Ije=r(g3," \u2014 "),J9=n(g3,"A",{href:!0});var d4e=s(J9);qje=r(d4e,"BlenderbotSmallConfig"),d4e.forEach(t),Nje=r(g3," (BlenderbotSmall model)"),g3.forEach(t),jje=i(y),vf=n(y,"LI",{});var h3=s(vf);CZ=n(h3,"STRONG",{});var c4e=s(CZ);Dje=r(c4e,"camembert"),c4e.forEach(t),Gje=r(h3," \u2014 "),Y9=n(h3,"A",{href:!0});var f4e=s(Y9);Oje=r(f4e,"CamembertConfig"),f4e.forEach(t),Vje=r(h3," (CamemBERT model)"),h3.forEach(t),Xje=i(y),Ff=n(y,"LI",{});var p3=s(Ff);wZ=n(p3,"STRONG",{});var m4e=s(wZ);zje=r(m4e,"canine"),m4e.forEach(t),Qje=r(p3," \u2014 "),K9=n(p3,"A",{href:!0});var g4e=s(K9);Wje=r(g4e,"CanineConfig"),g4e.forEach(t),Hje=r(p3," (Canine model)"),p3.forEach(t),Uje=i(y),Tf=n(y,"LI",{});var u3=s(Tf);AZ=n(u3,"STRONG",{});var h4e=s(AZ);Jje=r(h4e,"clip"),h4e.forEach(t),Yje=r(u3," \u2014 "),Z9=n(u3,"A",{href:!0});var p4e=s(Z9);Kje=r(p4e,"CLIPConfig"),p4e.forEach(t),Zje=r(u3," (CLIP model)"),u3.forEach(t),eDe=i(y),Mf=n(y,"LI",{});var _3=s(Mf);yZ=n(_3,"STRONG",{});var u4e=s(yZ);oDe=r(u4e,"convbert"),u4e.forEach(t),rDe=r(_3," \u2014 "),e$=n(_3,"A",{href:!0});var _4e=s(e$);tDe=r(_4e,"ConvBertConfig"),_4e.forEach(t),aDe=r(_3," (ConvBERT model)"),_3.forEach(t),nDe=i(y),Ef=n(y,"LI",{});var b3=s(Ef);LZ=n(b3,"STRONG",{});var b4e=s(LZ);sDe=r(b4e,"convnext"),b4e.forEach(t),lDe=r(b3," \u2014 "),o$=n(b3,"A",{href:!0});var v4e=s(o$);iDe=r(v4e,"ConvNextConfig"),v4e.forEach(t),dDe=r(b3," (ConvNext model)"),b3.forEach(t),cDe=i(y),Cf=n(y,"LI",{});var v3=s(Cf);xZ=n(v3,"STRONG",{});var F4e=s(xZ);fDe=r(F4e,"ctrl"),F4e.forEach(t),mDe=r(v3," \u2014 "),r$=n(v3,"A",{href:!0});var T4e=s(r$);gDe=r(T4e,"CTRLConfig"),T4e.forEach(t),hDe=r(v3," (CTRL model)"),v3.forEach(t),pDe=i(y),wf=n(y,"LI",{});var F3=s(wf);$Z=n(F3,"STRONG",{});var M4e=s($Z);uDe=r(M4e,"data2vec-audio"),M4e.forEach(t),_De=r(F3," \u2014 "),t$=n(F3,"A",{href:!0});var E4e=s(t$);bDe=r(E4e,"Data2VecAudioConfig"),E4e.forEach(t),vDe=r(F3," (Data2VecAudio model)"),F3.forEach(t),FDe=i(y),Af=n(y,"LI",{});var T3=s(Af);kZ=n(T3,"STRONG",{});var C4e=s(kZ);TDe=r(C4e,"data2vec-text"),C4e.forEach(t),MDe=r(T3," \u2014 "),a$=n(T3,"A",{href:!0});var w4e=s(a$);EDe=r(w4e,"Data2VecTextConfig"),w4e.forEach(t),CDe=r(T3," (Data2VecText model)"),T3.forEach(t),wDe=i(y),yf=n(y,"LI",{});var M3=s(yf);SZ=n(M3,"STRONG",{});var A4e=s(SZ);ADe=r(A4e,"data2vec-vision"),A4e.forEach(t),yDe=r(M3," \u2014 "),n$=n(M3,"A",{href:!0});var y4e=s(n$);LDe=r(y4e,"Data2VecVisionConfig"),y4e.forEach(t),xDe=r(M3," (Data2VecVision model)"),M3.forEach(t),$De=i(y),Lf=n(y,"LI",{});var E3=s(Lf);RZ=n(E3,"STRONG",{});var L4e=s(RZ);kDe=r(L4e,"deberta"),L4e.forEach(t),SDe=r(E3," \u2014 "),s$=n(E3,"A",{href:!0});var x4e=s(s$);RDe=r(x4e,"DebertaConfig"),x4e.forEach(t),BDe=r(E3," (DeBERTa model)"),E3.forEach(t),PDe=i(y),xf=n(y,"LI",{});var C3=s(xf);BZ=n(C3,"STRONG",{});var $4e=s(BZ);IDe=r($4e,"deberta-v2"),$4e.forEach(t),qDe=r(C3," \u2014 "),l$=n(C3,"A",{href:!0});var k4e=s(l$);NDe=r(k4e,"DebertaV2Config"),k4e.forEach(t),jDe=r(C3," (DeBERTa-v2 model)"),C3.forEach(t),DDe=i(y),$f=n(y,"LI",{});var w3=s($f);PZ=n(w3,"STRONG",{});var S4e=s(PZ);GDe=r(S4e,"decision_transformer"),S4e.forEach(t),ODe=r(w3," \u2014 "),i$=n(w3,"A",{href:!0});var R4e=s(i$);VDe=r(R4e,"DecisionTransformerConfig"),R4e.forEach(t),XDe=r(w3," (Decision Transformer model)"),w3.forEach(t),zDe=i(y),kf=n(y,"LI",{});var A3=s(kf);IZ=n(A3,"STRONG",{});var B4e=s(IZ);QDe=r(B4e,"deit"),B4e.forEach(t),WDe=r(A3," \u2014 "),d$=n(A3,"A",{href:!0});var P4e=s(d$);HDe=r(P4e,"DeiTConfig"),P4e.forEach(t),UDe=r(A3," (DeiT model)"),A3.forEach(t),JDe=i(y),Sf=n(y,"LI",{});var I4e=s(Sf);qZ=n(I4e,"STRONG",{});var _Pr=s(qZ);YDe=r(_Pr,"detr"),_Pr.forEach(t),KDe=r(I4e," \u2014 "),c$=n(I4e,"A",{href:!0});var bPr=s(c$);ZDe=r(bPr,"DetrConfig"),bPr.forEach(t),eGe=r(I4e," (DETR model)"),I4e.forEach(t),oGe=i(y),Rf=n(y,"LI",{});var q4e=s(Rf);NZ=n(q4e,"STRONG",{});var vPr=s(NZ);rGe=r(vPr,"distilbert"),vPr.forEach(t),tGe=r(q4e," \u2014 "),f$=n(q4e,"A",{href:!0});var FPr=s(f$);aGe=r(FPr,"DistilBertConfig"),FPr.forEach(t),nGe=r(q4e," (DistilBERT model)"),q4e.forEach(t),sGe=i(y),Bf=n(y,"LI",{});var N4e=s(Bf);jZ=n(N4e,"STRONG",{});var TPr=s(jZ);lGe=r(TPr,"dpr"),TPr.forEach(t),iGe=r(N4e," \u2014 "),m$=n(N4e,"A",{href:!0});var MPr=s(m$);dGe=r(MPr,"DPRConfig"),MPr.forEach(t),cGe=r(N4e," (DPR model)"),N4e.forEach(t),fGe=i(y),Pf=n(y,"LI",{});var j4e=s(Pf);DZ=n(j4e,"STRONG",{});var EPr=s(DZ);mGe=r(EPr,"dpt"),EPr.forEach(t),gGe=r(j4e," \u2014 "),g$=n(j4e,"A",{href:!0});var CPr=s(g$);hGe=r(CPr,"DPTConfig"),CPr.forEach(t),pGe=r(j4e," (DPT model)"),j4e.forEach(t),uGe=i(y),If=n(y,"LI",{});var D4e=s(If);GZ=n(D4e,"STRONG",{});var wPr=s(GZ);_Ge=r(wPr,"electra"),wPr.forEach(t),bGe=r(D4e," \u2014 "),h$=n(D4e,"A",{href:!0});var APr=s(h$);vGe=r(APr,"ElectraConfig"),APr.forEach(t),FGe=r(D4e," (ELECTRA model)"),D4e.forEach(t),TGe=i(y),qf=n(y,"LI",{});var G4e=s(qf);OZ=n(G4e,"STRONG",{});var yPr=s(OZ);MGe=r(yPr,"encoder-decoder"),yPr.forEach(t),EGe=r(G4e," \u2014 "),p$=n(G4e,"A",{href:!0});var LPr=s(p$);CGe=r(LPr,"EncoderDecoderConfig"),LPr.forEach(t),wGe=r(G4e," (Encoder decoder model)"),G4e.forEach(t),AGe=i(y),Nf=n(y,"LI",{});var O4e=s(Nf);VZ=n(O4e,"STRONG",{});var xPr=s(VZ);yGe=r(xPr,"flaubert"),xPr.forEach(t),LGe=r(O4e," \u2014 "),u$=n(O4e,"A",{href:!0});var $Pr=s(u$);xGe=r($Pr,"FlaubertConfig"),$Pr.forEach(t),$Ge=r(O4e," (FlauBERT model)"),O4e.forEach(t),kGe=i(y),jf=n(y,"LI",{});var V4e=s(jf);XZ=n(V4e,"STRONG",{});var kPr=s(XZ);SGe=r(kPr,"fnet"),kPr.forEach(t),RGe=r(V4e," \u2014 "),_$=n(V4e,"A",{href:!0});var SPr=s(_$);BGe=r(SPr,"FNetConfig"),SPr.forEach(t),PGe=r(V4e," (FNet model)"),V4e.forEach(t),IGe=i(y),Df=n(y,"LI",{});var X4e=s(Df);zZ=n(X4e,"STRONG",{});var RPr=s(zZ);qGe=r(RPr,"fsmt"),RPr.forEach(t),NGe=r(X4e," \u2014 "),b$=n(X4e,"A",{href:!0});var BPr=s(b$);jGe=r(BPr,"FSMTConfig"),BPr.forEach(t),DGe=r(X4e," (FairSeq Machine-Translation model)"),X4e.forEach(t),GGe=i(y),Gf=n(y,"LI",{});var z4e=s(Gf);QZ=n(z4e,"STRONG",{});var PPr=s(QZ);OGe=r(PPr,"funnel"),PPr.forEach(t),VGe=r(z4e," \u2014 "),v$=n(z4e,"A",{href:!0});var IPr=s(v$);XGe=r(IPr,"FunnelConfig"),IPr.forEach(t),zGe=r(z4e," (Funnel Transformer model)"),z4e.forEach(t),QGe=i(y),Of=n(y,"LI",{});var Q4e=s(Of);WZ=n(Q4e,"STRONG",{});var qPr=s(WZ);WGe=r(qPr,"glpn"),qPr.forEach(t),HGe=r(Q4e," \u2014 "),F$=n(Q4e,"A",{href:!0});var NPr=s(F$);UGe=r(NPr,"GLPNConfig"),NPr.forEach(t),JGe=r(Q4e," (GLPN model)"),Q4e.forEach(t),YGe=i(y),Vf=n(y,"LI",{});var W4e=s(Vf);HZ=n(W4e,"STRONG",{});var jPr=s(HZ);KGe=r(jPr,"gpt2"),jPr.forEach(t),ZGe=r(W4e," \u2014 "),T$=n(W4e,"A",{href:!0});var DPr=s(T$);eOe=r(DPr,"GPT2Config"),DPr.forEach(t),oOe=r(W4e," (OpenAI GPT-2 model)"),W4e.forEach(t),rOe=i(y),Xf=n(y,"LI",{});var H4e=s(Xf);UZ=n(H4e,"STRONG",{});var GPr=s(UZ);tOe=r(GPr,"gpt_neo"),GPr.forEach(t),aOe=r(H4e," \u2014 "),M$=n(H4e,"A",{href:!0});var OPr=s(M$);nOe=r(OPr,"GPTNeoConfig"),OPr.forEach(t),sOe=r(H4e," (GPT Neo model)"),H4e.forEach(t),lOe=i(y),zf=n(y,"LI",{});var U4e=s(zf);JZ=n(U4e,"STRONG",{});var VPr=s(JZ);iOe=r(VPr,"gptj"),VPr.forEach(t),dOe=r(U4e," \u2014 "),E$=n(U4e,"A",{href:!0});var XPr=s(E$);cOe=r(XPr,"GPTJConfig"),XPr.forEach(t),fOe=r(U4e," (GPT-J model)"),U4e.forEach(t),mOe=i(y),Qf=n(y,"LI",{});var J4e=s(Qf);YZ=n(J4e,"STRONG",{});var zPr=s(YZ);gOe=r(zPr,"hubert"),zPr.forEach(t),hOe=r(J4e," \u2014 "),C$=n(J4e,"A",{href:!0});var QPr=s(C$);pOe=r(QPr,"HubertConfig"),QPr.forEach(t),uOe=r(J4e," (Hubert model)"),J4e.forEach(t),_Oe=i(y),Wf=n(y,"LI",{});var Y4e=s(Wf);KZ=n(Y4e,"STRONG",{});var WPr=s(KZ);bOe=r(WPr,"ibert"),WPr.forEach(t),vOe=r(Y4e," \u2014 "),w$=n(Y4e,"A",{href:!0});var HPr=s(w$);FOe=r(HPr,"IBertConfig"),HPr.forEach(t),TOe=r(Y4e," (I-BERT model)"),Y4e.forEach(t),MOe=i(y),Hf=n(y,"LI",{});var K4e=s(Hf);ZZ=n(K4e,"STRONG",{});var UPr=s(ZZ);EOe=r(UPr,"imagegpt"),UPr.forEach(t),COe=r(K4e," \u2014 "),A$=n(K4e,"A",{href:!0});var JPr=s(A$);wOe=r(JPr,"ImageGPTConfig"),JPr.forEach(t),AOe=r(K4e," (ImageGPT model)"),K4e.forEach(t),yOe=i(y),Uf=n(y,"LI",{});var Z4e=s(Uf);eee=n(Z4e,"STRONG",{});var YPr=s(eee);LOe=r(YPr,"layoutlm"),YPr.forEach(t),xOe=r(Z4e," \u2014 "),y$=n(Z4e,"A",{href:!0});var KPr=s(y$);$Oe=r(KPr,"LayoutLMConfig"),KPr.forEach(t),kOe=r(Z4e," (LayoutLM model)"),Z4e.forEach(t),SOe=i(y),Jf=n(y,"LI",{});var eEe=s(Jf);oee=n(eEe,"STRONG",{});var ZPr=s(oee);ROe=r(ZPr,"layoutlmv2"),ZPr.forEach(t),BOe=r(eEe," \u2014 "),L$=n(eEe,"A",{href:!0});var eIr=s(L$);POe=r(eIr,"LayoutLMv2Config"),eIr.forEach(t),IOe=r(eEe," (LayoutLMv2 model)"),eEe.forEach(t),qOe=i(y),Yf=n(y,"LI",{});var oEe=s(Yf);ree=n(oEe,"STRONG",{});var oIr=s(ree);NOe=r(oIr,"led"),oIr.forEach(t),jOe=r(oEe," \u2014 "),x$=n(oEe,"A",{href:!0});var rIr=s(x$);DOe=r(rIr,"LEDConfig"),rIr.forEach(t),GOe=r(oEe," (LED model)"),oEe.forEach(t),OOe=i(y),Kf=n(y,"LI",{});var rEe=s(Kf);tee=n(rEe,"STRONG",{});var tIr=s(tee);VOe=r(tIr,"longformer"),tIr.forEach(t),XOe=r(rEe," \u2014 "),$$=n(rEe,"A",{href:!0});var aIr=s($$);zOe=r(aIr,"LongformerConfig"),aIr.forEach(t),QOe=r(rEe," (Longformer model)"),rEe.forEach(t),WOe=i(y),Zf=n(y,"LI",{});var tEe=s(Zf);aee=n(tEe,"STRONG",{});var nIr=s(aee);HOe=r(nIr,"luke"),nIr.forEach(t),UOe=r(tEe," \u2014 "),k$=n(tEe,"A",{href:!0});var sIr=s(k$);JOe=r(sIr,"LukeConfig"),sIr.forEach(t),YOe=r(tEe," (LUKE model)"),tEe.forEach(t),KOe=i(y),em=n(y,"LI",{});var aEe=s(em);nee=n(aEe,"STRONG",{});var lIr=s(nee);ZOe=r(lIr,"lxmert"),lIr.forEach(t),eVe=r(aEe," \u2014 "),S$=n(aEe,"A",{href:!0});var iIr=s(S$);oVe=r(iIr,"LxmertConfig"),iIr.forEach(t),rVe=r(aEe," (LXMERT model)"),aEe.forEach(t),tVe=i(y),om=n(y,"LI",{});var nEe=s(om);see=n(nEe,"STRONG",{});var dIr=s(see);aVe=r(dIr,"m2m_100"),dIr.forEach(t),nVe=r(nEe," \u2014 "),R$=n(nEe,"A",{href:!0});var cIr=s(R$);sVe=r(cIr,"M2M100Config"),cIr.forEach(t),lVe=r(nEe," (M2M100 model)"),nEe.forEach(t),iVe=i(y),rm=n(y,"LI",{});var sEe=s(rm);lee=n(sEe,"STRONG",{});var fIr=s(lee);dVe=r(fIr,"marian"),fIr.forEach(t),cVe=r(sEe," \u2014 "),B$=n(sEe,"A",{href:!0});var mIr=s(B$);fVe=r(mIr,"MarianConfig"),mIr.forEach(t),mVe=r(sEe," (Marian model)"),sEe.forEach(t),gVe=i(y),tm=n(y,"LI",{});var lEe=s(tm);iee=n(lEe,"STRONG",{});var gIr=s(iee);hVe=r(gIr,"maskformer"),gIr.forEach(t),pVe=r(lEe," \u2014 "),P$=n(lEe,"A",{href:!0});var hIr=s(P$);uVe=r(hIr,"MaskFormerConfig"),hIr.forEach(t),_Ve=r(lEe," (MaskFormer model)"),lEe.forEach(t),bVe=i(y),am=n(y,"LI",{});var iEe=s(am);dee=n(iEe,"STRONG",{});var pIr=s(dee);vVe=r(pIr,"mbart"),pIr.forEach(t),FVe=r(iEe," \u2014 "),I$=n(iEe,"A",{href:!0});var uIr=s(I$);TVe=r(uIr,"MBartConfig"),uIr.forEach(t),MVe=r(iEe," (mBART model)"),iEe.forEach(t),EVe=i(y),nm=n(y,"LI",{});var dEe=s(nm);cee=n(dEe,"STRONG",{});var _Ir=s(cee);CVe=r(_Ir,"megatron-bert"),_Ir.forEach(t),wVe=r(dEe," \u2014 "),q$=n(dEe,"A",{href:!0});var bIr=s(q$);AVe=r(bIr,"MegatronBertConfig"),bIr.forEach(t),yVe=r(dEe," (MegatronBert model)"),dEe.forEach(t),LVe=i(y),sm=n(y,"LI",{});var cEe=s(sm);fee=n(cEe,"STRONG",{});var vIr=s(fee);xVe=r(vIr,"mobilebert"),vIr.forEach(t),$Ve=r(cEe," \u2014 "),N$=n(cEe,"A",{href:!0});var FIr=s(N$);kVe=r(FIr,"MobileBertConfig"),FIr.forEach(t),SVe=r(cEe," (MobileBERT model)"),cEe.forEach(t),RVe=i(y),lm=n(y,"LI",{});var fEe=s(lm);mee=n(fEe,"STRONG",{});var TIr=s(mee);BVe=r(TIr,"mpnet"),TIr.forEach(t),PVe=r(fEe," \u2014 "),j$=n(fEe,"A",{href:!0});var MIr=s(j$);IVe=r(MIr,"MPNetConfig"),MIr.forEach(t),qVe=r(fEe," (MPNet model)"),fEe.forEach(t),NVe=i(y),im=n(y,"LI",{});var mEe=s(im);gee=n(mEe,"STRONG",{});var EIr=s(gee);jVe=r(EIr,"mt5"),EIr.forEach(t),DVe=r(mEe," \u2014 "),D$=n(mEe,"A",{href:!0});var CIr=s(D$);GVe=r(CIr,"MT5Config"),CIr.forEach(t),OVe=r(mEe," (mT5 model)"),mEe.forEach(t),VVe=i(y),dm=n(y,"LI",{});var gEe=s(dm);hee=n(gEe,"STRONG",{});var wIr=s(hee);XVe=r(wIr,"nystromformer"),wIr.forEach(t),zVe=r(gEe," \u2014 "),G$=n(gEe,"A",{href:!0});var AIr=s(G$);QVe=r(AIr,"NystromformerConfig"),AIr.forEach(t),WVe=r(gEe," (Nystromformer model)"),gEe.forEach(t),HVe=i(y),cm=n(y,"LI",{});var hEe=s(cm);pee=n(hEe,"STRONG",{});var yIr=s(pee);UVe=r(yIr,"openai-gpt"),yIr.forEach(t),JVe=r(hEe," \u2014 "),O$=n(hEe,"A",{href:!0});var LIr=s(O$);YVe=r(LIr,"OpenAIGPTConfig"),LIr.forEach(t),KVe=r(hEe," (OpenAI GPT model)"),hEe.forEach(t),ZVe=i(y),fm=n(y,"LI",{});var pEe=s(fm);uee=n(pEe,"STRONG",{});var xIr=s(uee);eXe=r(xIr,"pegasus"),xIr.forEach(t),oXe=r(pEe," \u2014 "),V$=n(pEe,"A",{href:!0});var $Ir=s(V$);rXe=r($Ir,"PegasusConfig"),$Ir.forEach(t),tXe=r(pEe," (Pegasus model)"),pEe.forEach(t),aXe=i(y),mm=n(y,"LI",{});var uEe=s(mm);_ee=n(uEe,"STRONG",{});var kIr=s(_ee);nXe=r(kIr,"perceiver"),kIr.forEach(t),sXe=r(uEe," \u2014 "),X$=n(uEe,"A",{href:!0});var SIr=s(X$);lXe=r(SIr,"PerceiverConfig"),SIr.forEach(t),iXe=r(uEe," (Perceiver model)"),uEe.forEach(t),dXe=i(y),gm=n(y,"LI",{});var _Ee=s(gm);bee=n(_Ee,"STRONG",{});var RIr=s(bee);cXe=r(RIr,"plbart"),RIr.forEach(t),fXe=r(_Ee," \u2014 "),z$=n(_Ee,"A",{href:!0});var BIr=s(z$);mXe=r(BIr,"PLBartConfig"),BIr.forEach(t),gXe=r(_Ee," (PLBart model)"),_Ee.forEach(t),hXe=i(y),hm=n(y,"LI",{});var bEe=s(hm);vee=n(bEe,"STRONG",{});var PIr=s(vee);pXe=r(PIr,"poolformer"),PIr.forEach(t),uXe=r(bEe," \u2014 "),Q$=n(bEe,"A",{href:!0});var IIr=s(Q$);_Xe=r(IIr,"PoolFormerConfig"),IIr.forEach(t),bXe=r(bEe," (PoolFormer model)"),bEe.forEach(t),vXe=i(y),pm=n(y,"LI",{});var vEe=s(pm);Fee=n(vEe,"STRONG",{});var qIr=s(Fee);FXe=r(qIr,"prophetnet"),qIr.forEach(t),TXe=r(vEe," \u2014 "),W$=n(vEe,"A",{href:!0});var NIr=s(W$);MXe=r(NIr,"ProphetNetConfig"),NIr.forEach(t),EXe=r(vEe," (ProphetNet model)"),vEe.forEach(t),CXe=i(y),um=n(y,"LI",{});var FEe=s(um);Tee=n(FEe,"STRONG",{});var jIr=s(Tee);wXe=r(jIr,"qdqbert"),jIr.forEach(t),AXe=r(FEe," \u2014 "),H$=n(FEe,"A",{href:!0});var DIr=s(H$);yXe=r(DIr,"QDQBertConfig"),DIr.forEach(t),LXe=r(FEe," (QDQBert model)"),FEe.forEach(t),xXe=i(y),_m=n(y,"LI",{});var TEe=s(_m);Mee=n(TEe,"STRONG",{});var GIr=s(Mee);$Xe=r(GIr,"rag"),GIr.forEach(t),kXe=r(TEe," \u2014 "),U$=n(TEe,"A",{href:!0});var OIr=s(U$);SXe=r(OIr,"RagConfig"),OIr.forEach(t),RXe=r(TEe," (RAG model)"),TEe.forEach(t),BXe=i(y),bm=n(y,"LI",{});var MEe=s(bm);Eee=n(MEe,"STRONG",{});var VIr=s(Eee);PXe=r(VIr,"realm"),VIr.forEach(t),IXe=r(MEe," \u2014 "),J$=n(MEe,"A",{href:!0});var XIr=s(J$);qXe=r(XIr,"RealmConfig"),XIr.forEach(t),NXe=r(MEe," (Realm model)"),MEe.forEach(t),jXe=i(y),vm=n(y,"LI",{});var EEe=s(vm);Cee=n(EEe,"STRONG",{});var zIr=s(Cee);DXe=r(zIr,"reformer"),zIr.forEach(t),GXe=r(EEe," \u2014 "),Y$=n(EEe,"A",{href:!0});var QIr=s(Y$);OXe=r(QIr,"ReformerConfig"),QIr.forEach(t),VXe=r(EEe," (Reformer model)"),EEe.forEach(t),XXe=i(y),Fm=n(y,"LI",{});var CEe=s(Fm);wee=n(CEe,"STRONG",{});var WIr=s(wee);zXe=r(WIr,"regnet"),WIr.forEach(t),QXe=r(CEe," \u2014 "),K$=n(CEe,"A",{href:!0});var HIr=s(K$);WXe=r(HIr,"RegNetConfig"),HIr.forEach(t),HXe=r(CEe," (RegNet model)"),CEe.forEach(t),UXe=i(y),Tm=n(y,"LI",{});var wEe=s(Tm);Aee=n(wEe,"STRONG",{});var UIr=s(Aee);JXe=r(UIr,"rembert"),UIr.forEach(t),YXe=r(wEe," \u2014 "),Z$=n(wEe,"A",{href:!0});var JIr=s(Z$);KXe=r(JIr,"RemBertConfig"),JIr.forEach(t),ZXe=r(wEe," (RemBERT model)"),wEe.forEach(t),eze=i(y),Mm=n(y,"LI",{});var AEe=s(Mm);yee=n(AEe,"STRONG",{});var YIr=s(yee);oze=r(YIr,"resnet"),YIr.forEach(t),rze=r(AEe," \u2014 "),ek=n(AEe,"A",{href:!0});var KIr=s(ek);tze=r(KIr,"ResNetConfig"),KIr.forEach(t),aze=r(AEe," (ResNet model)"),AEe.forEach(t),nze=i(y),Em=n(y,"LI",{});var yEe=s(Em);Lee=n(yEe,"STRONG",{});var ZIr=s(Lee);sze=r(ZIr,"retribert"),ZIr.forEach(t),lze=r(yEe," \u2014 "),ok=n(yEe,"A",{href:!0});var eqr=s(ok);ize=r(eqr,"RetriBertConfig"),eqr.forEach(t),dze=r(yEe," (RetriBERT model)"),yEe.forEach(t),cze=i(y),Cm=n(y,"LI",{});var LEe=s(Cm);xee=n(LEe,"STRONG",{});var oqr=s(xee);fze=r(oqr,"roberta"),oqr.forEach(t),mze=r(LEe," \u2014 "),rk=n(LEe,"A",{href:!0});var rqr=s(rk);gze=r(rqr,"RobertaConfig"),rqr.forEach(t),hze=r(LEe," (RoBERTa model)"),LEe.forEach(t),pze=i(y),wm=n(y,"LI",{});var xEe=s(wm);$ee=n(xEe,"STRONG",{});var tqr=s($ee);uze=r(tqr,"roformer"),tqr.forEach(t),_ze=r(xEe," \u2014 "),tk=n(xEe,"A",{href:!0});var aqr=s(tk);bze=r(aqr,"RoFormerConfig"),aqr.forEach(t),vze=r(xEe," (RoFormer model)"),xEe.forEach(t),Fze=i(y),Am=n(y,"LI",{});var $Ee=s(Am);kee=n($Ee,"STRONG",{});var nqr=s(kee);Tze=r(nqr,"segformer"),nqr.forEach(t),Mze=r($Ee," \u2014 "),ak=n($Ee,"A",{href:!0});var sqr=s(ak);Eze=r(sqr,"SegformerConfig"),sqr.forEach(t),Cze=r($Ee," (SegFormer model)"),$Ee.forEach(t),wze=i(y),ym=n(y,"LI",{});var kEe=s(ym);See=n(kEe,"STRONG",{});var lqr=s(See);Aze=r(lqr,"sew"),lqr.forEach(t),yze=r(kEe," \u2014 "),nk=n(kEe,"A",{href:!0});var iqr=s(nk);Lze=r(iqr,"SEWConfig"),iqr.forEach(t),xze=r(kEe," (SEW model)"),kEe.forEach(t),$ze=i(y),Lm=n(y,"LI",{});var SEe=s(Lm);Ree=n(SEe,"STRONG",{});var dqr=s(Ree);kze=r(dqr,"sew-d"),dqr.forEach(t),Sze=r(SEe," \u2014 "),sk=n(SEe,"A",{href:!0});var cqr=s(sk);Rze=r(cqr,"SEWDConfig"),cqr.forEach(t),Bze=r(SEe," (SEW-D model)"),SEe.forEach(t),Pze=i(y),xm=n(y,"LI",{});var REe=s(xm);Bee=n(REe,"STRONG",{});var fqr=s(Bee);Ize=r(fqr,"speech-encoder-decoder"),fqr.forEach(t),qze=r(REe," \u2014 "),lk=n(REe,"A",{href:!0});var mqr=s(lk);Nze=r(mqr,"SpeechEncoderDecoderConfig"),mqr.forEach(t),jze=r(REe," (Speech Encoder decoder model)"),REe.forEach(t),Dze=i(y),$m=n(y,"LI",{});var BEe=s($m);Pee=n(BEe,"STRONG",{});var gqr=s(Pee);Gze=r(gqr,"speech_to_text"),gqr.forEach(t),Oze=r(BEe," \u2014 "),ik=n(BEe,"A",{href:!0});var hqr=s(ik);Vze=r(hqr,"Speech2TextConfig"),hqr.forEach(t),Xze=r(BEe," (Speech2Text model)"),BEe.forEach(t),zze=i(y),km=n(y,"LI",{});var PEe=s(km);Iee=n(PEe,"STRONG",{});var pqr=s(Iee);Qze=r(pqr,"speech_to_text_2"),pqr.forEach(t),Wze=r(PEe," \u2014 "),dk=n(PEe,"A",{href:!0});var uqr=s(dk);Hze=r(uqr,"Speech2Text2Config"),uqr.forEach(t),Uze=r(PEe," (Speech2Text2 model)"),PEe.forEach(t),Jze=i(y),Sm=n(y,"LI",{});var IEe=s(Sm);qee=n(IEe,"STRONG",{});var _qr=s(qee);Yze=r(_qr,"splinter"),_qr.forEach(t),Kze=r(IEe," \u2014 "),ck=n(IEe,"A",{href:!0});var bqr=s(ck);Zze=r(bqr,"SplinterConfig"),bqr.forEach(t),eQe=r(IEe," (Splinter model)"),IEe.forEach(t),oQe=i(y),Rm=n(y,"LI",{});var qEe=s(Rm);Nee=n(qEe,"STRONG",{});var vqr=s(Nee);rQe=r(vqr,"squeezebert"),vqr.forEach(t),tQe=r(qEe," \u2014 "),fk=n(qEe,"A",{href:!0});var Fqr=s(fk);aQe=r(Fqr,"SqueezeBertConfig"),Fqr.forEach(t),nQe=r(qEe," (SqueezeBERT model)"),qEe.forEach(t),sQe=i(y),Bm=n(y,"LI",{});var NEe=s(Bm);jee=n(NEe,"STRONG",{});var Tqr=s(jee);lQe=r(Tqr,"swin"),Tqr.forEach(t),iQe=r(NEe," \u2014 "),mk=n(NEe,"A",{href:!0});var Mqr=s(mk);dQe=r(Mqr,"SwinConfig"),Mqr.forEach(t),cQe=r(NEe," (Swin model)"),NEe.forEach(t),fQe=i(y),Pm=n(y,"LI",{});var jEe=s(Pm);Dee=n(jEe,"STRONG",{});var Eqr=s(Dee);mQe=r(Eqr,"t5"),Eqr.forEach(t),gQe=r(jEe," \u2014 "),gk=n(jEe,"A",{href:!0});var Cqr=s(gk);hQe=r(Cqr,"T5Config"),Cqr.forEach(t),pQe=r(jEe," (T5 model)"),jEe.forEach(t),uQe=i(y),Im=n(y,"LI",{});var DEe=s(Im);Gee=n(DEe,"STRONG",{});var wqr=s(Gee);_Qe=r(wqr,"tapas"),wqr.forEach(t),bQe=r(DEe," \u2014 "),hk=n(DEe,"A",{href:!0});var Aqr=s(hk);vQe=r(Aqr,"TapasConfig"),Aqr.forEach(t),FQe=r(DEe," (TAPAS model)"),DEe.forEach(t),TQe=i(y),qm=n(y,"LI",{});var GEe=s(qm);Oee=n(GEe,"STRONG",{});var yqr=s(Oee);MQe=r(yqr,"tapex"),yqr.forEach(t),EQe=r(GEe," \u2014 "),pk=n(GEe,"A",{href:!0});var Lqr=s(pk);CQe=r(Lqr,"BartConfig"),Lqr.forEach(t),wQe=r(GEe," (TAPEX model)"),GEe.forEach(t),AQe=i(y),Nm=n(y,"LI",{});var OEe=s(Nm);Vee=n(OEe,"STRONG",{});var xqr=s(Vee);yQe=r(xqr,"transfo-xl"),xqr.forEach(t),LQe=r(OEe," \u2014 "),uk=n(OEe,"A",{href:!0});var $qr=s(uk);xQe=r($qr,"TransfoXLConfig"),$qr.forEach(t),$Qe=r(OEe," (Transformer-XL model)"),OEe.forEach(t),kQe=i(y),jm=n(y,"LI",{});var VEe=s(jm);Xee=n(VEe,"STRONG",{});var kqr=s(Xee);SQe=r(kqr,"trocr"),kqr.forEach(t),RQe=r(VEe," \u2014 "),_k=n(VEe,"A",{href:!0});var Sqr=s(_k);BQe=r(Sqr,"TrOCRConfig"),Sqr.forEach(t),PQe=r(VEe," (TrOCR model)"),VEe.forEach(t),IQe=i(y),Dm=n(y,"LI",{});var XEe=s(Dm);zee=n(XEe,"STRONG",{});var Rqr=s(zee);qQe=r(Rqr,"unispeech"),Rqr.forEach(t),NQe=r(XEe," \u2014 "),bk=n(XEe,"A",{href:!0});var Bqr=s(bk);jQe=r(Bqr,"UniSpeechConfig"),Bqr.forEach(t),DQe=r(XEe," (UniSpeech model)"),XEe.forEach(t),GQe=i(y),Gm=n(y,"LI",{});var zEe=s(Gm);Qee=n(zEe,"STRONG",{});var Pqr=s(Qee);OQe=r(Pqr,"unispeech-sat"),Pqr.forEach(t),VQe=r(zEe," \u2014 "),vk=n(zEe,"A",{href:!0});var Iqr=s(vk);XQe=r(Iqr,"UniSpeechSatConfig"),Iqr.forEach(t),zQe=r(zEe," (UniSpeechSat model)"),zEe.forEach(t),QQe=i(y),Om=n(y,"LI",{});var QEe=s(Om);Wee=n(QEe,"STRONG",{});var qqr=s(Wee);WQe=r(qqr,"van"),qqr.forEach(t),HQe=r(QEe," \u2014 "),Fk=n(QEe,"A",{href:!0});var Nqr=s(Fk);UQe=r(Nqr,"VanConfig"),Nqr.forEach(t),JQe=r(QEe," (VAN model)"),QEe.forEach(t),YQe=i(y),Vm=n(y,"LI",{});var WEe=s(Vm);Hee=n(WEe,"STRONG",{});var jqr=s(Hee);KQe=r(jqr,"vilt"),jqr.forEach(t),ZQe=r(WEe," \u2014 "),Tk=n(WEe,"A",{href:!0});var Dqr=s(Tk);eWe=r(Dqr,"ViltConfig"),Dqr.forEach(t),oWe=r(WEe," (ViLT model)"),WEe.forEach(t),rWe=i(y),Xm=n(y,"LI",{});var HEe=s(Xm);Uee=n(HEe,"STRONG",{});var Gqr=s(Uee);tWe=r(Gqr,"vision-encoder-decoder"),Gqr.forEach(t),aWe=r(HEe," \u2014 "),Mk=n(HEe,"A",{href:!0});var Oqr=s(Mk);nWe=r(Oqr,"VisionEncoderDecoderConfig"),Oqr.forEach(t),sWe=r(HEe," (Vision Encoder decoder model)"),HEe.forEach(t),lWe=i(y),zm=n(y,"LI",{});var UEe=s(zm);Jee=n(UEe,"STRONG",{});var Vqr=s(Jee);iWe=r(Vqr,"vision-text-dual-encoder"),Vqr.forEach(t),dWe=r(UEe," \u2014 "),Ek=n(UEe,"A",{href:!0});var Xqr=s(Ek);cWe=r(Xqr,"VisionTextDualEncoderConfig"),Xqr.forEach(t),fWe=r(UEe," (VisionTextDualEncoder model)"),UEe.forEach(t),mWe=i(y),Qm=n(y,"LI",{});var JEe=s(Qm);Yee=n(JEe,"STRONG",{});var zqr=s(Yee);gWe=r(zqr,"visual_bert"),zqr.forEach(t),hWe=r(JEe," \u2014 "),Ck=n(JEe,"A",{href:!0});var Qqr=s(Ck);pWe=r(Qqr,"VisualBertConfig"),Qqr.forEach(t),uWe=r(JEe," (VisualBert model)"),JEe.forEach(t),_We=i(y),Wm=n(y,"LI",{});var YEe=s(Wm);Kee=n(YEe,"STRONG",{});var Wqr=s(Kee);bWe=r(Wqr,"vit"),Wqr.forEach(t),vWe=r(YEe," \u2014 "),wk=n(YEe,"A",{href:!0});var Hqr=s(wk);FWe=r(Hqr,"ViTConfig"),Hqr.forEach(t),TWe=r(YEe," (ViT model)"),YEe.forEach(t),MWe=i(y),Hm=n(y,"LI",{});var KEe=s(Hm);Zee=n(KEe,"STRONG",{});var Uqr=s(Zee);EWe=r(Uqr,"vit_mae"),Uqr.forEach(t),CWe=r(KEe," \u2014 "),Ak=n(KEe,"A",{href:!0});var Jqr=s(Ak);wWe=r(Jqr,"ViTMAEConfig"),Jqr.forEach(t),AWe=r(KEe," (ViTMAE model)"),KEe.forEach(t),yWe=i(y),Um=n(y,"LI",{});var ZEe=s(Um);eoe=n(ZEe,"STRONG",{});var Yqr=s(eoe);LWe=r(Yqr,"wav2vec2"),Yqr.forEach(t),xWe=r(ZEe," \u2014 "),yk=n(ZEe,"A",{href:!0});var Kqr=s(yk);$We=r(Kqr,"Wav2Vec2Config"),Kqr.forEach(t),kWe=r(ZEe," (Wav2Vec2 model)"),ZEe.forEach(t),SWe=i(y),Jm=n(y,"LI",{});var e5e=s(Jm);ooe=n(e5e,"STRONG",{});var Zqr=s(ooe);RWe=r(Zqr,"wavlm"),Zqr.forEach(t),BWe=r(e5e," \u2014 "),Lk=n(e5e,"A",{href:!0});var eNr=s(Lk);PWe=r(eNr,"WavLMConfig"),eNr.forEach(t),IWe=r(e5e," (WavLM model)"),e5e.forEach(t),qWe=i(y),Ym=n(y,"LI",{});var o5e=s(Ym);roe=n(o5e,"STRONG",{});var oNr=s(roe);NWe=r(oNr,"xglm"),oNr.forEach(t),jWe=r(o5e," \u2014 "),xk=n(o5e,"A",{href:!0});var rNr=s(xk);DWe=r(rNr,"XGLMConfig"),rNr.forEach(t),GWe=r(o5e," (XGLM model)"),o5e.forEach(t),OWe=i(y),Km=n(y,"LI",{});var r5e=s(Km);toe=n(r5e,"STRONG",{});var tNr=s(toe);VWe=r(tNr,"xlm"),tNr.forEach(t),XWe=r(r5e," \u2014 "),$k=n(r5e,"A",{href:!0});var aNr=s($k);zWe=r(aNr,"XLMConfig"),aNr.forEach(t),QWe=r(r5e," (XLM model)"),r5e.forEach(t),WWe=i(y),Zm=n(y,"LI",{});var t5e=s(Zm);aoe=n(t5e,"STRONG",{});var nNr=s(aoe);HWe=r(nNr,"xlm-prophetnet"),nNr.forEach(t),UWe=r(t5e," \u2014 "),kk=n(t5e,"A",{href:!0});var sNr=s(kk);JWe=r(sNr,"XLMProphetNetConfig"),sNr.forEach(t),YWe=r(t5e," (XLMProphetNet model)"),t5e.forEach(t),KWe=i(y),eg=n(y,"LI",{});var a5e=s(eg);noe=n(a5e,"STRONG",{});var lNr=s(noe);ZWe=r(lNr,"xlm-roberta"),lNr.forEach(t),eHe=r(a5e," \u2014 "),Sk=n(a5e,"A",{href:!0});var iNr=s(Sk);oHe=r(iNr,"XLMRobertaConfig"),iNr.forEach(t),rHe=r(a5e," (XLM-RoBERTa model)"),a5e.forEach(t),tHe=i(y),og=n(y,"LI",{});var n5e=s(og);soe=n(n5e,"STRONG",{});var dNr=s(soe);aHe=r(dNr,"xlm-roberta-xl"),dNr.forEach(t),nHe=r(n5e," \u2014 "),Rk=n(n5e,"A",{href:!0});var cNr=s(Rk);sHe=r(cNr,"XLMRobertaXLConfig"),cNr.forEach(t),lHe=r(n5e," (XLM-RoBERTa-XL model)"),n5e.forEach(t),iHe=i(y),rg=n(y,"LI",{});var s5e=s(rg);loe=n(s5e,"STRONG",{});var fNr=s(loe);dHe=r(fNr,"xlnet"),fNr.forEach(t),cHe=r(s5e," \u2014 "),Bk=n(s5e,"A",{href:!0});var mNr=s(Bk);fHe=r(mNr,"XLNetConfig"),mNr.forEach(t),mHe=r(s5e," (XLNet model)"),s5e.forEach(t),gHe=i(y),tg=n(y,"LI",{});var l5e=s(tg);ioe=n(l5e,"STRONG",{});var gNr=s(ioe);hHe=r(gNr,"yolos"),gNr.forEach(t),pHe=r(l5e," \u2014 "),Pk=n(l5e,"A",{href:!0});var hNr=s(Pk);uHe=r(hNr,"YolosConfig"),hNr.forEach(t),_He=r(l5e," (YOLOS model)"),l5e.forEach(t),bHe=i(y),ag=n(y,"LI",{});var i5e=s(ag);doe=n(i5e,"STRONG",{});var pNr=s(doe);vHe=r(pNr,"yoso"),pNr.forEach(t),FHe=r(i5e," \u2014 "),Ik=n(i5e,"A",{href:!0});var uNr=s(Ik);THe=r(uNr,"YosoConfig"),uNr.forEach(t),MHe=r(i5e," (YOSO model)"),i5e.forEach(t),y.forEach(t),EHe=i(Yr),T(ng.$$.fragment,Yr),Yr.forEach(t),CHe=i(Jr),sg=n(Jr,"DIV",{class:!0});var uIe=s(sg);T(kA.$$.fragment,uIe),wHe=i(uIe),coe=n(uIe,"P",{});var _Nr=s(coe);AHe=r(_Nr,"Register a new configuration for this class."),_Nr.forEach(t),uIe.forEach(t),Jr.forEach(t),TBe=i(f),fi=n(f,"H2",{class:!0});var _Ie=s(fi);lg=n(_Ie,"A",{id:!0,class:!0,href:!0});var bNr=s(lg);foe=n(bNr,"SPAN",{});var vNr=s(foe);T(SA.$$.fragment,vNr),vNr.forEach(t),bNr.forEach(t),yHe=i(_Ie),moe=n(_Ie,"SPAN",{});var FNr=s(moe);LHe=r(FNr,"AutoTokenizer"),FNr.forEach(t),_Ie.forEach(t),MBe=i(f),wo=n(f,"DIV",{class:!0});var ks=s(wo);T(RA.$$.fragment,ks),xHe=i(ks),BA=n(ks,"P",{});var bIe=s(BA);$He=r(bIe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),qk=n(bIe,"A",{href:!0});var TNr=s(qk);kHe=r(TNr,"AutoTokenizer.from_pretrained()"),TNr.forEach(t),SHe=r(bIe," class method."),bIe.forEach(t),RHe=i(ks),PA=n(ks,"P",{});var vIe=s(PA);BHe=r(vIe,"This class cannot be instantiated directly using "),goe=n(vIe,"CODE",{});var MNr=s(goe);PHe=r(MNr,"__init__()"),MNr.forEach(t),IHe=r(vIe," (throws an error)."),vIe.forEach(t),qHe=i(ks),Er=n(ks,"DIV",{class:!0});var Ss=s(Er);T(IA.$$.fragment,Ss),NHe=i(Ss),hoe=n(Ss,"P",{});var ENr=s(hoe);jHe=r(ENr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),ENr.forEach(t),DHe=i(Ss),Ta=n(Ss,"P",{});var y3=s(Ta);GHe=r(y3,"The tokenizer class to instantiate is selected based on the "),poe=n(y3,"CODE",{});var CNr=s(poe);OHe=r(CNr,"model_type"),CNr.forEach(t),VHe=r(y3,` property of the config object (either
passed as an argument or loaded from `),uoe=n(y3,"CODE",{});var wNr=s(uoe);XHe=r(wNr,"pretrained_model_name_or_path"),wNr.forEach(t),zHe=r(y3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_oe=n(y3,"CODE",{});var ANr=s(_oe);QHe=r(ANr,"pretrained_model_name_or_path"),ANr.forEach(t),WHe=r(y3,":"),y3.forEach(t),HHe=i(Ss),k=n(Ss,"UL",{});var S=s(k);yn=n(S,"LI",{});var kx=s(yn);boe=n(kx,"STRONG",{});var yNr=s(boe);UHe=r(yNr,"albert"),yNr.forEach(t),JHe=r(kx," \u2014 "),Nk=n(kx,"A",{href:!0});var LNr=s(Nk);YHe=r(LNr,"AlbertTokenizer"),LNr.forEach(t),KHe=r(kx," or "),jk=n(kx,"A",{href:!0});var xNr=s(jk);ZHe=r(xNr,"AlbertTokenizerFast"),xNr.forEach(t),eUe=r(kx," (ALBERT model)"),kx.forEach(t),oUe=i(S),Ln=n(S,"LI",{});var Sx=s(Ln);voe=n(Sx,"STRONG",{});var $Nr=s(voe);rUe=r($Nr,"bart"),$Nr.forEach(t),tUe=r(Sx," \u2014 "),Dk=n(Sx,"A",{href:!0});var kNr=s(Dk);aUe=r(kNr,"BartTokenizer"),kNr.forEach(t),nUe=r(Sx," or "),Gk=n(Sx,"A",{href:!0});var SNr=s(Gk);sUe=r(SNr,"BartTokenizerFast"),SNr.forEach(t),lUe=r(Sx," (BART model)"),Sx.forEach(t),iUe=i(S),xn=n(S,"LI",{});var Rx=s(xn);Foe=n(Rx,"STRONG",{});var RNr=s(Foe);dUe=r(RNr,"barthez"),RNr.forEach(t),cUe=r(Rx," \u2014 "),Ok=n(Rx,"A",{href:!0});var BNr=s(Ok);fUe=r(BNr,"BarthezTokenizer"),BNr.forEach(t),mUe=r(Rx," or "),Vk=n(Rx,"A",{href:!0});var PNr=s(Vk);gUe=r(PNr,"BarthezTokenizerFast"),PNr.forEach(t),hUe=r(Rx," (BARThez model)"),Rx.forEach(t),pUe=i(S),ig=n(S,"LI",{});var d5e=s(ig);Toe=n(d5e,"STRONG",{});var INr=s(Toe);uUe=r(INr,"bartpho"),INr.forEach(t),_Ue=r(d5e," \u2014 "),Xk=n(d5e,"A",{href:!0});var qNr=s(Xk);bUe=r(qNr,"BartphoTokenizer"),qNr.forEach(t),vUe=r(d5e," (BARTpho model)"),d5e.forEach(t),FUe=i(S),$n=n(S,"LI",{});var Bx=s($n);Moe=n(Bx,"STRONG",{});var NNr=s(Moe);TUe=r(NNr,"bert"),NNr.forEach(t),MUe=r(Bx," \u2014 "),zk=n(Bx,"A",{href:!0});var jNr=s(zk);EUe=r(jNr,"BertTokenizer"),jNr.forEach(t),CUe=r(Bx," or "),Qk=n(Bx,"A",{href:!0});var DNr=s(Qk);wUe=r(DNr,"BertTokenizerFast"),DNr.forEach(t),AUe=r(Bx," (BERT model)"),Bx.forEach(t),yUe=i(S),dg=n(S,"LI",{});var c5e=s(dg);Eoe=n(c5e,"STRONG",{});var GNr=s(Eoe);LUe=r(GNr,"bert-generation"),GNr.forEach(t),xUe=r(c5e," \u2014 "),Wk=n(c5e,"A",{href:!0});var ONr=s(Wk);$Ue=r(ONr,"BertGenerationTokenizer"),ONr.forEach(t),kUe=r(c5e," (Bert Generation model)"),c5e.forEach(t),SUe=i(S),cg=n(S,"LI",{});var f5e=s(cg);Coe=n(f5e,"STRONG",{});var VNr=s(Coe);RUe=r(VNr,"bert-japanese"),VNr.forEach(t),BUe=r(f5e," \u2014 "),Hk=n(f5e,"A",{href:!0});var XNr=s(Hk);PUe=r(XNr,"BertJapaneseTokenizer"),XNr.forEach(t),IUe=r(f5e," (BertJapanese model)"),f5e.forEach(t),qUe=i(S),fg=n(S,"LI",{});var m5e=s(fg);woe=n(m5e,"STRONG",{});var zNr=s(woe);NUe=r(zNr,"bertweet"),zNr.forEach(t),jUe=r(m5e," \u2014 "),Uk=n(m5e,"A",{href:!0});var QNr=s(Uk);DUe=r(QNr,"BertweetTokenizer"),QNr.forEach(t),GUe=r(m5e," (Bertweet model)"),m5e.forEach(t),OUe=i(S),kn=n(S,"LI",{});var Px=s(kn);Aoe=n(Px,"STRONG",{});var WNr=s(Aoe);VUe=r(WNr,"big_bird"),WNr.forEach(t),XUe=r(Px," \u2014 "),Jk=n(Px,"A",{href:!0});var HNr=s(Jk);zUe=r(HNr,"BigBirdTokenizer"),HNr.forEach(t),QUe=r(Px," or "),Yk=n(Px,"A",{href:!0});var UNr=s(Yk);WUe=r(UNr,"BigBirdTokenizerFast"),UNr.forEach(t),HUe=r(Px," (BigBird model)"),Px.forEach(t),UUe=i(S),Sn=n(S,"LI",{});var Ix=s(Sn);yoe=n(Ix,"STRONG",{});var JNr=s(yoe);JUe=r(JNr,"bigbird_pegasus"),JNr.forEach(t),YUe=r(Ix," \u2014 "),Kk=n(Ix,"A",{href:!0});var YNr=s(Kk);KUe=r(YNr,"PegasusTokenizer"),YNr.forEach(t),ZUe=r(Ix," or "),Zk=n(Ix,"A",{href:!0});var KNr=s(Zk);eJe=r(KNr,"PegasusTokenizerFast"),KNr.forEach(t),oJe=r(Ix," (BigBirdPegasus model)"),Ix.forEach(t),rJe=i(S),Rn=n(S,"LI",{});var qx=s(Rn);Loe=n(qx,"STRONG",{});var ZNr=s(Loe);tJe=r(ZNr,"blenderbot"),ZNr.forEach(t),aJe=r(qx," \u2014 "),eS=n(qx,"A",{href:!0});var ejr=s(eS);nJe=r(ejr,"BlenderbotTokenizer"),ejr.forEach(t),sJe=r(qx," or "),oS=n(qx,"A",{href:!0});var ojr=s(oS);lJe=r(ojr,"BlenderbotTokenizerFast"),ojr.forEach(t),iJe=r(qx," (Blenderbot model)"),qx.forEach(t),dJe=i(S),mg=n(S,"LI",{});var g5e=s(mg);xoe=n(g5e,"STRONG",{});var rjr=s(xoe);cJe=r(rjr,"blenderbot-small"),rjr.forEach(t),fJe=r(g5e," \u2014 "),rS=n(g5e,"A",{href:!0});var tjr=s(rS);mJe=r(tjr,"BlenderbotSmallTokenizer"),tjr.forEach(t),gJe=r(g5e," (BlenderbotSmall model)"),g5e.forEach(t),hJe=i(S),gg=n(S,"LI",{});var h5e=s(gg);$oe=n(h5e,"STRONG",{});var ajr=s($oe);pJe=r(ajr,"byt5"),ajr.forEach(t),uJe=r(h5e," \u2014 "),tS=n(h5e,"A",{href:!0});var njr=s(tS);_Je=r(njr,"ByT5Tokenizer"),njr.forEach(t),bJe=r(h5e," (ByT5 model)"),h5e.forEach(t),vJe=i(S),Bn=n(S,"LI",{});var Nx=s(Bn);koe=n(Nx,"STRONG",{});var sjr=s(koe);FJe=r(sjr,"camembert"),sjr.forEach(t),TJe=r(Nx," \u2014 "),aS=n(Nx,"A",{href:!0});var ljr=s(aS);MJe=r(ljr,"CamembertTokenizer"),ljr.forEach(t),EJe=r(Nx," or "),nS=n(Nx,"A",{href:!0});var ijr=s(nS);CJe=r(ijr,"CamembertTokenizerFast"),ijr.forEach(t),wJe=r(Nx," (CamemBERT model)"),Nx.forEach(t),AJe=i(S),hg=n(S,"LI",{});var p5e=s(hg);Soe=n(p5e,"STRONG",{});var djr=s(Soe);yJe=r(djr,"canine"),djr.forEach(t),LJe=r(p5e," \u2014 "),sS=n(p5e,"A",{href:!0});var cjr=s(sS);xJe=r(cjr,"CanineTokenizer"),cjr.forEach(t),$Je=r(p5e," (Canine model)"),p5e.forEach(t),kJe=i(S),Pn=n(S,"LI",{});var jx=s(Pn);Roe=n(jx,"STRONG",{});var fjr=s(Roe);SJe=r(fjr,"clip"),fjr.forEach(t),RJe=r(jx," \u2014 "),lS=n(jx,"A",{href:!0});var mjr=s(lS);BJe=r(mjr,"CLIPTokenizer"),mjr.forEach(t),PJe=r(jx," or "),iS=n(jx,"A",{href:!0});var gjr=s(iS);IJe=r(gjr,"CLIPTokenizerFast"),gjr.forEach(t),qJe=r(jx," (CLIP model)"),jx.forEach(t),NJe=i(S),In=n(S,"LI",{});var Dx=s(In);Boe=n(Dx,"STRONG",{});var hjr=s(Boe);jJe=r(hjr,"convbert"),hjr.forEach(t),DJe=r(Dx," \u2014 "),dS=n(Dx,"A",{href:!0});var pjr=s(dS);GJe=r(pjr,"ConvBertTokenizer"),pjr.forEach(t),OJe=r(Dx," or "),cS=n(Dx,"A",{href:!0});var ujr=s(cS);VJe=r(ujr,"ConvBertTokenizerFast"),ujr.forEach(t),XJe=r(Dx," (ConvBERT model)"),Dx.forEach(t),zJe=i(S),qn=n(S,"LI",{});var Gx=s(qn);Poe=n(Gx,"STRONG",{});var _jr=s(Poe);QJe=r(_jr,"cpm"),_jr.forEach(t),WJe=r(Gx," \u2014 "),fS=n(Gx,"A",{href:!0});var bjr=s(fS);HJe=r(bjr,"CpmTokenizer"),bjr.forEach(t),UJe=r(Gx," or "),mS=n(Gx,"A",{href:!0});var vjr=s(mS);JJe=r(vjr,"CpmTokenizerFast"),vjr.forEach(t),YJe=r(Gx," (CPM model)"),Gx.forEach(t),KJe=i(S),pg=n(S,"LI",{});var u5e=s(pg);Ioe=n(u5e,"STRONG",{});var Fjr=s(Ioe);ZJe=r(Fjr,"ctrl"),Fjr.forEach(t),eYe=r(u5e," \u2014 "),gS=n(u5e,"A",{href:!0});var Tjr=s(gS);oYe=r(Tjr,"CTRLTokenizer"),Tjr.forEach(t),rYe=r(u5e," (CTRL model)"),u5e.forEach(t),tYe=i(S),Nn=n(S,"LI",{});var Ox=s(Nn);qoe=n(Ox,"STRONG",{});var Mjr=s(qoe);aYe=r(Mjr,"data2vec-text"),Mjr.forEach(t),nYe=r(Ox," \u2014 "),hS=n(Ox,"A",{href:!0});var Ejr=s(hS);sYe=r(Ejr,"RobertaTokenizer"),Ejr.forEach(t),lYe=r(Ox," or "),pS=n(Ox,"A",{href:!0});var Cjr=s(pS);iYe=r(Cjr,"RobertaTokenizerFast"),Cjr.forEach(t),dYe=r(Ox," (Data2VecText model)"),Ox.forEach(t),cYe=i(S),jn=n(S,"LI",{});var Vx=s(jn);Noe=n(Vx,"STRONG",{});var wjr=s(Noe);fYe=r(wjr,"deberta"),wjr.forEach(t),mYe=r(Vx," \u2014 "),uS=n(Vx,"A",{href:!0});var Ajr=s(uS);gYe=r(Ajr,"DebertaTokenizer"),Ajr.forEach(t),hYe=r(Vx," or "),_S=n(Vx,"A",{href:!0});var yjr=s(_S);pYe=r(yjr,"DebertaTokenizerFast"),yjr.forEach(t),uYe=r(Vx," (DeBERTa model)"),Vx.forEach(t),_Ye=i(S),Dn=n(S,"LI",{});var Xx=s(Dn);joe=n(Xx,"STRONG",{});var Ljr=s(joe);bYe=r(Ljr,"deberta-v2"),Ljr.forEach(t),vYe=r(Xx," \u2014 "),bS=n(Xx,"A",{href:!0});var xjr=s(bS);FYe=r(xjr,"DebertaV2Tokenizer"),xjr.forEach(t),TYe=r(Xx," or "),vS=n(Xx,"A",{href:!0});var $jr=s(vS);MYe=r($jr,"DebertaV2TokenizerFast"),$jr.forEach(t),EYe=r(Xx," (DeBERTa-v2 model)"),Xx.forEach(t),CYe=i(S),Gn=n(S,"LI",{});var zx=s(Gn);Doe=n(zx,"STRONG",{});var kjr=s(Doe);wYe=r(kjr,"distilbert"),kjr.forEach(t),AYe=r(zx," \u2014 "),FS=n(zx,"A",{href:!0});var Sjr=s(FS);yYe=r(Sjr,"DistilBertTokenizer"),Sjr.forEach(t),LYe=r(zx," or "),TS=n(zx,"A",{href:!0});var Rjr=s(TS);xYe=r(Rjr,"DistilBertTokenizerFast"),Rjr.forEach(t),$Ye=r(zx," (DistilBERT model)"),zx.forEach(t),kYe=i(S),On=n(S,"LI",{});var Qx=s(On);Goe=n(Qx,"STRONG",{});var Bjr=s(Goe);SYe=r(Bjr,"dpr"),Bjr.forEach(t),RYe=r(Qx," \u2014 "),MS=n(Qx,"A",{href:!0});var Pjr=s(MS);BYe=r(Pjr,"DPRQuestionEncoderTokenizer"),Pjr.forEach(t),PYe=r(Qx," or "),ES=n(Qx,"A",{href:!0});var Ijr=s(ES);IYe=r(Ijr,"DPRQuestionEncoderTokenizerFast"),Ijr.forEach(t),qYe=r(Qx," (DPR model)"),Qx.forEach(t),NYe=i(S),Vn=n(S,"LI",{});var Wx=s(Vn);Ooe=n(Wx,"STRONG",{});var qjr=s(Ooe);jYe=r(qjr,"electra"),qjr.forEach(t),DYe=r(Wx," \u2014 "),CS=n(Wx,"A",{href:!0});var Njr=s(CS);GYe=r(Njr,"ElectraTokenizer"),Njr.forEach(t),OYe=r(Wx," or "),wS=n(Wx,"A",{href:!0});var jjr=s(wS);VYe=r(jjr,"ElectraTokenizerFast"),jjr.forEach(t),XYe=r(Wx," (ELECTRA model)"),Wx.forEach(t),zYe=i(S),ug=n(S,"LI",{});var _5e=s(ug);Voe=n(_5e,"STRONG",{});var Djr=s(Voe);QYe=r(Djr,"flaubert"),Djr.forEach(t),WYe=r(_5e," \u2014 "),AS=n(_5e,"A",{href:!0});var Gjr=s(AS);HYe=r(Gjr,"FlaubertTokenizer"),Gjr.forEach(t),UYe=r(_5e," (FlauBERT model)"),_5e.forEach(t),JYe=i(S),Xn=n(S,"LI",{});var Hx=s(Xn);Xoe=n(Hx,"STRONG",{});var Ojr=s(Xoe);YYe=r(Ojr,"fnet"),Ojr.forEach(t),KYe=r(Hx," \u2014 "),yS=n(Hx,"A",{href:!0});var Vjr=s(yS);ZYe=r(Vjr,"FNetTokenizer"),Vjr.forEach(t),eKe=r(Hx," or "),LS=n(Hx,"A",{href:!0});var Xjr=s(LS);oKe=r(Xjr,"FNetTokenizerFast"),Xjr.forEach(t),rKe=r(Hx," (FNet model)"),Hx.forEach(t),tKe=i(S),_g=n(S,"LI",{});var b5e=s(_g);zoe=n(b5e,"STRONG",{});var zjr=s(zoe);aKe=r(zjr,"fsmt"),zjr.forEach(t),nKe=r(b5e," \u2014 "),xS=n(b5e,"A",{href:!0});var Qjr=s(xS);sKe=r(Qjr,"FSMTTokenizer"),Qjr.forEach(t),lKe=r(b5e," (FairSeq Machine-Translation model)"),b5e.forEach(t),iKe=i(S),zn=n(S,"LI",{});var Ux=s(zn);Qoe=n(Ux,"STRONG",{});var Wjr=s(Qoe);dKe=r(Wjr,"funnel"),Wjr.forEach(t),cKe=r(Ux," \u2014 "),$S=n(Ux,"A",{href:!0});var Hjr=s($S);fKe=r(Hjr,"FunnelTokenizer"),Hjr.forEach(t),mKe=r(Ux," or "),kS=n(Ux,"A",{href:!0});var Ujr=s(kS);gKe=r(Ujr,"FunnelTokenizerFast"),Ujr.forEach(t),hKe=r(Ux," (Funnel Transformer model)"),Ux.forEach(t),pKe=i(S),Qn=n(S,"LI",{});var Jx=s(Qn);Woe=n(Jx,"STRONG",{});var Jjr=s(Woe);uKe=r(Jjr,"gpt2"),Jjr.forEach(t),_Ke=r(Jx," \u2014 "),SS=n(Jx,"A",{href:!0});var Yjr=s(SS);bKe=r(Yjr,"GPT2Tokenizer"),Yjr.forEach(t),vKe=r(Jx," or "),RS=n(Jx,"A",{href:!0});var Kjr=s(RS);FKe=r(Kjr,"GPT2TokenizerFast"),Kjr.forEach(t),TKe=r(Jx," (OpenAI GPT-2 model)"),Jx.forEach(t),MKe=i(S),Wn=n(S,"LI",{});var Yx=s(Wn);Hoe=n(Yx,"STRONG",{});var Zjr=s(Hoe);EKe=r(Zjr,"gpt_neo"),Zjr.forEach(t),CKe=r(Yx," \u2014 "),BS=n(Yx,"A",{href:!0});var eDr=s(BS);wKe=r(eDr,"GPT2Tokenizer"),eDr.forEach(t),AKe=r(Yx," or "),PS=n(Yx,"A",{href:!0});var oDr=s(PS);yKe=r(oDr,"GPT2TokenizerFast"),oDr.forEach(t),LKe=r(Yx," (GPT Neo model)"),Yx.forEach(t),xKe=i(S),Hn=n(S,"LI",{});var Kx=s(Hn);Uoe=n(Kx,"STRONG",{});var rDr=s(Uoe);$Ke=r(rDr,"gptj"),rDr.forEach(t),kKe=r(Kx," \u2014 "),IS=n(Kx,"A",{href:!0});var tDr=s(IS);SKe=r(tDr,"GPT2Tokenizer"),tDr.forEach(t),RKe=r(Kx," or "),qS=n(Kx,"A",{href:!0});var aDr=s(qS);BKe=r(aDr,"GPT2TokenizerFast"),aDr.forEach(t),PKe=r(Kx," (GPT-J model)"),Kx.forEach(t),IKe=i(S),Un=n(S,"LI",{});var Zx=s(Un);Joe=n(Zx,"STRONG",{});var nDr=s(Joe);qKe=r(nDr,"herbert"),nDr.forEach(t),NKe=r(Zx," \u2014 "),NS=n(Zx,"A",{href:!0});var sDr=s(NS);jKe=r(sDr,"HerbertTokenizer"),sDr.forEach(t),DKe=r(Zx," or "),jS=n(Zx,"A",{href:!0});var lDr=s(jS);GKe=r(lDr,"HerbertTokenizerFast"),lDr.forEach(t),OKe=r(Zx," (HerBERT model)"),Zx.forEach(t),VKe=i(S),bg=n(S,"LI",{});var v5e=s(bg);Yoe=n(v5e,"STRONG",{});var iDr=s(Yoe);XKe=r(iDr,"hubert"),iDr.forEach(t),zKe=r(v5e," \u2014 "),DS=n(v5e,"A",{href:!0});var dDr=s(DS);QKe=r(dDr,"Wav2Vec2CTCTokenizer"),dDr.forEach(t),WKe=r(v5e," (Hubert model)"),v5e.forEach(t),HKe=i(S),Jn=n(S,"LI",{});var e9=s(Jn);Koe=n(e9,"STRONG",{});var cDr=s(Koe);UKe=r(cDr,"ibert"),cDr.forEach(t),JKe=r(e9," \u2014 "),GS=n(e9,"A",{href:!0});var fDr=s(GS);YKe=r(fDr,"RobertaTokenizer"),fDr.forEach(t),KKe=r(e9," or "),OS=n(e9,"A",{href:!0});var mDr=s(OS);ZKe=r(mDr,"RobertaTokenizerFast"),mDr.forEach(t),eZe=r(e9," (I-BERT model)"),e9.forEach(t),oZe=i(S),Yn=n(S,"LI",{});var o9=s(Yn);Zoe=n(o9,"STRONG",{});var gDr=s(Zoe);rZe=r(gDr,"layoutlm"),gDr.forEach(t),tZe=r(o9," \u2014 "),VS=n(o9,"A",{href:!0});var hDr=s(VS);aZe=r(hDr,"LayoutLMTokenizer"),hDr.forEach(t),nZe=r(o9," or "),XS=n(o9,"A",{href:!0});var pDr=s(XS);sZe=r(pDr,"LayoutLMTokenizerFast"),pDr.forEach(t),lZe=r(o9," (LayoutLM model)"),o9.forEach(t),iZe=i(S),Kn=n(S,"LI",{});var r9=s(Kn);ere=n(r9,"STRONG",{});var uDr=s(ere);dZe=r(uDr,"layoutlmv2"),uDr.forEach(t),cZe=r(r9," \u2014 "),zS=n(r9,"A",{href:!0});var _Dr=s(zS);fZe=r(_Dr,"LayoutLMv2Tokenizer"),_Dr.forEach(t),mZe=r(r9," or "),QS=n(r9,"A",{href:!0});var bDr=s(QS);gZe=r(bDr,"LayoutLMv2TokenizerFast"),bDr.forEach(t),hZe=r(r9," (LayoutLMv2 model)"),r9.forEach(t),pZe=i(S),Zn=n(S,"LI",{});var t9=s(Zn);ore=n(t9,"STRONG",{});var vDr=s(ore);uZe=r(vDr,"layoutxlm"),vDr.forEach(t),_Ze=r(t9," \u2014 "),WS=n(t9,"A",{href:!0});var FDr=s(WS);bZe=r(FDr,"LayoutXLMTokenizer"),FDr.forEach(t),vZe=r(t9," or "),HS=n(t9,"A",{href:!0});var TDr=s(HS);FZe=r(TDr,"LayoutXLMTokenizerFast"),TDr.forEach(t),TZe=r(t9," (LayoutXLM model)"),t9.forEach(t),MZe=i(S),es=n(S,"LI",{});var a9=s(es);rre=n(a9,"STRONG",{});var MDr=s(rre);EZe=r(MDr,"led"),MDr.forEach(t),CZe=r(a9," \u2014 "),US=n(a9,"A",{href:!0});var EDr=s(US);wZe=r(EDr,"LEDTokenizer"),EDr.forEach(t),AZe=r(a9," or "),JS=n(a9,"A",{href:!0});var CDr=s(JS);yZe=r(CDr,"LEDTokenizerFast"),CDr.forEach(t),LZe=r(a9," (LED model)"),a9.forEach(t),xZe=i(S),os=n(S,"LI",{});var n9=s(os);tre=n(n9,"STRONG",{});var wDr=s(tre);$Ze=r(wDr,"longformer"),wDr.forEach(t),kZe=r(n9," \u2014 "),YS=n(n9,"A",{href:!0});var ADr=s(YS);SZe=r(ADr,"LongformerTokenizer"),ADr.forEach(t),RZe=r(n9," or "),KS=n(n9,"A",{href:!0});var yDr=s(KS);BZe=r(yDr,"LongformerTokenizerFast"),yDr.forEach(t),PZe=r(n9," (Longformer model)"),n9.forEach(t),IZe=i(S),vg=n(S,"LI",{});var F5e=s(vg);are=n(F5e,"STRONG",{});var LDr=s(are);qZe=r(LDr,"luke"),LDr.forEach(t),NZe=r(F5e," \u2014 "),ZS=n(F5e,"A",{href:!0});var xDr=s(ZS);jZe=r(xDr,"LukeTokenizer"),xDr.forEach(t),DZe=r(F5e," (LUKE model)"),F5e.forEach(t),GZe=i(S),rs=n(S,"LI",{});var s9=s(rs);nre=n(s9,"STRONG",{});var $Dr=s(nre);OZe=r($Dr,"lxmert"),$Dr.forEach(t),VZe=r(s9," \u2014 "),eR=n(s9,"A",{href:!0});var kDr=s(eR);XZe=r(kDr,"LxmertTokenizer"),kDr.forEach(t),zZe=r(s9," or "),oR=n(s9,"A",{href:!0});var SDr=s(oR);QZe=r(SDr,"LxmertTokenizerFast"),SDr.forEach(t),WZe=r(s9," (LXMERT model)"),s9.forEach(t),HZe=i(S),Fg=n(S,"LI",{});var T5e=s(Fg);sre=n(T5e,"STRONG",{});var RDr=s(sre);UZe=r(RDr,"m2m_100"),RDr.forEach(t),JZe=r(T5e," \u2014 "),rR=n(T5e,"A",{href:!0});var BDr=s(rR);YZe=r(BDr,"M2M100Tokenizer"),BDr.forEach(t),KZe=r(T5e," (M2M100 model)"),T5e.forEach(t),ZZe=i(S),Tg=n(S,"LI",{});var M5e=s(Tg);lre=n(M5e,"STRONG",{});var PDr=s(lre);eeo=r(PDr,"marian"),PDr.forEach(t),oeo=r(M5e," \u2014 "),tR=n(M5e,"A",{href:!0});var IDr=s(tR);reo=r(IDr,"MarianTokenizer"),IDr.forEach(t),teo=r(M5e," (Marian model)"),M5e.forEach(t),aeo=i(S),ts=n(S,"LI",{});var l9=s(ts);ire=n(l9,"STRONG",{});var qDr=s(ire);neo=r(qDr,"mbart"),qDr.forEach(t),seo=r(l9," \u2014 "),aR=n(l9,"A",{href:!0});var NDr=s(aR);leo=r(NDr,"MBartTokenizer"),NDr.forEach(t),ieo=r(l9," or "),nR=n(l9,"A",{href:!0});var jDr=s(nR);deo=r(jDr,"MBartTokenizerFast"),jDr.forEach(t),ceo=r(l9," (mBART model)"),l9.forEach(t),feo=i(S),as=n(S,"LI",{});var i9=s(as);dre=n(i9,"STRONG",{});var DDr=s(dre);meo=r(DDr,"mbart50"),DDr.forEach(t),geo=r(i9," \u2014 "),sR=n(i9,"A",{href:!0});var GDr=s(sR);heo=r(GDr,"MBart50Tokenizer"),GDr.forEach(t),peo=r(i9," or "),lR=n(i9,"A",{href:!0});var ODr=s(lR);ueo=r(ODr,"MBart50TokenizerFast"),ODr.forEach(t),_eo=r(i9," (mBART-50 model)"),i9.forEach(t),beo=i(S),ns=n(S,"LI",{});var d9=s(ns);cre=n(d9,"STRONG",{});var VDr=s(cre);veo=r(VDr,"megatron-bert"),VDr.forEach(t),Feo=r(d9," \u2014 "),iR=n(d9,"A",{href:!0});var XDr=s(iR);Teo=r(XDr,"BertTokenizer"),XDr.forEach(t),Meo=r(d9," or "),dR=n(d9,"A",{href:!0});var zDr=s(dR);Eeo=r(zDr,"BertTokenizerFast"),zDr.forEach(t),Ceo=r(d9," (MegatronBert model)"),d9.forEach(t),weo=i(S),Mg=n(S,"LI",{});var E5e=s(Mg);fre=n(E5e,"STRONG",{});var QDr=s(fre);Aeo=r(QDr,"mluke"),QDr.forEach(t),yeo=r(E5e," \u2014 "),cR=n(E5e,"A",{href:!0});var WDr=s(cR);Leo=r(WDr,"MLukeTokenizer"),WDr.forEach(t),xeo=r(E5e," (mLUKE model)"),E5e.forEach(t),$eo=i(S),ss=n(S,"LI",{});var c9=s(ss);mre=n(c9,"STRONG",{});var HDr=s(mre);keo=r(HDr,"mobilebert"),HDr.forEach(t),Seo=r(c9," \u2014 "),fR=n(c9,"A",{href:!0});var UDr=s(fR);Reo=r(UDr,"MobileBertTokenizer"),UDr.forEach(t),Beo=r(c9," or "),mR=n(c9,"A",{href:!0});var JDr=s(mR);Peo=r(JDr,"MobileBertTokenizerFast"),JDr.forEach(t),Ieo=r(c9," (MobileBERT model)"),c9.forEach(t),qeo=i(S),ls=n(S,"LI",{});var f9=s(ls);gre=n(f9,"STRONG",{});var YDr=s(gre);Neo=r(YDr,"mpnet"),YDr.forEach(t),jeo=r(f9," \u2014 "),gR=n(f9,"A",{href:!0});var KDr=s(gR);Deo=r(KDr,"MPNetTokenizer"),KDr.forEach(t),Geo=r(f9," or "),hR=n(f9,"A",{href:!0});var ZDr=s(hR);Oeo=r(ZDr,"MPNetTokenizerFast"),ZDr.forEach(t),Veo=r(f9," (MPNet model)"),f9.forEach(t),Xeo=i(S),is=n(S,"LI",{});var m9=s(is);hre=n(m9,"STRONG",{});var eGr=s(hre);zeo=r(eGr,"mt5"),eGr.forEach(t),Qeo=r(m9," \u2014 "),pR=n(m9,"A",{href:!0});var oGr=s(pR);Weo=r(oGr,"MT5Tokenizer"),oGr.forEach(t),Heo=r(m9," or "),uR=n(m9,"A",{href:!0});var rGr=s(uR);Ueo=r(rGr,"MT5TokenizerFast"),rGr.forEach(t),Jeo=r(m9," (mT5 model)"),m9.forEach(t),Yeo=i(S),ds=n(S,"LI",{});var g9=s(ds);pre=n(g9,"STRONG",{});var tGr=s(pre);Keo=r(tGr,"nystromformer"),tGr.forEach(t),Zeo=r(g9," \u2014 "),_R=n(g9,"A",{href:!0});var aGr=s(_R);eoo=r(aGr,"AlbertTokenizer"),aGr.forEach(t),ooo=r(g9," or "),bR=n(g9,"A",{href:!0});var nGr=s(bR);roo=r(nGr,"AlbertTokenizerFast"),nGr.forEach(t),too=r(g9," (Nystromformer model)"),g9.forEach(t),aoo=i(S),cs=n(S,"LI",{});var h9=s(cs);ure=n(h9,"STRONG",{});var sGr=s(ure);noo=r(sGr,"openai-gpt"),sGr.forEach(t),soo=r(h9," \u2014 "),vR=n(h9,"A",{href:!0});var lGr=s(vR);loo=r(lGr,"OpenAIGPTTokenizer"),lGr.forEach(t),ioo=r(h9," or "),FR=n(h9,"A",{href:!0});var iGr=s(FR);doo=r(iGr,"OpenAIGPTTokenizerFast"),iGr.forEach(t),coo=r(h9," (OpenAI GPT model)"),h9.forEach(t),foo=i(S),fs=n(S,"LI",{});var p9=s(fs);_re=n(p9,"STRONG",{});var dGr=s(_re);moo=r(dGr,"pegasus"),dGr.forEach(t),goo=r(p9," \u2014 "),TR=n(p9,"A",{href:!0});var cGr=s(TR);hoo=r(cGr,"PegasusTokenizer"),cGr.forEach(t),poo=r(p9," or "),MR=n(p9,"A",{href:!0});var fGr=s(MR);uoo=r(fGr,"PegasusTokenizerFast"),fGr.forEach(t),_oo=r(p9," (Pegasus model)"),p9.forEach(t),boo=i(S),Eg=n(S,"LI",{});var C5e=s(Eg);bre=n(C5e,"STRONG",{});var mGr=s(bre);voo=r(mGr,"perceiver"),mGr.forEach(t),Foo=r(C5e," \u2014 "),ER=n(C5e,"A",{href:!0});var gGr=s(ER);Too=r(gGr,"PerceiverTokenizer"),gGr.forEach(t),Moo=r(C5e," (Perceiver model)"),C5e.forEach(t),Eoo=i(S),Cg=n(S,"LI",{});var w5e=s(Cg);vre=n(w5e,"STRONG",{});var hGr=s(vre);Coo=r(hGr,"phobert"),hGr.forEach(t),woo=r(w5e," \u2014 "),CR=n(w5e,"A",{href:!0});var pGr=s(CR);Aoo=r(pGr,"PhobertTokenizer"),pGr.forEach(t),yoo=r(w5e," (PhoBERT model)"),w5e.forEach(t),Loo=i(S),wg=n(S,"LI",{});var A5e=s(wg);Fre=n(A5e,"STRONG",{});var uGr=s(Fre);xoo=r(uGr,"plbart"),uGr.forEach(t),$oo=r(A5e," \u2014 "),wR=n(A5e,"A",{href:!0});var _Gr=s(wR);koo=r(_Gr,"PLBartTokenizer"),_Gr.forEach(t),Soo=r(A5e," (PLBart model)"),A5e.forEach(t),Roo=i(S),Ag=n(S,"LI",{});var y5e=s(Ag);Tre=n(y5e,"STRONG",{});var bGr=s(Tre);Boo=r(bGr,"prophetnet"),bGr.forEach(t),Poo=r(y5e," \u2014 "),AR=n(y5e,"A",{href:!0});var vGr=s(AR);Ioo=r(vGr,"ProphetNetTokenizer"),vGr.forEach(t),qoo=r(y5e," (ProphetNet model)"),y5e.forEach(t),Noo=i(S),ms=n(S,"LI",{});var u9=s(ms);Mre=n(u9,"STRONG",{});var FGr=s(Mre);joo=r(FGr,"qdqbert"),FGr.forEach(t),Doo=r(u9," \u2014 "),yR=n(u9,"A",{href:!0});var TGr=s(yR);Goo=r(TGr,"BertTokenizer"),TGr.forEach(t),Ooo=r(u9," or "),LR=n(u9,"A",{href:!0});var MGr=s(LR);Voo=r(MGr,"BertTokenizerFast"),MGr.forEach(t),Xoo=r(u9," (QDQBert model)"),u9.forEach(t),zoo=i(S),yg=n(S,"LI",{});var L5e=s(yg);Ere=n(L5e,"STRONG",{});var EGr=s(Ere);Qoo=r(EGr,"rag"),EGr.forEach(t),Woo=r(L5e," \u2014 "),xR=n(L5e,"A",{href:!0});var CGr=s(xR);Hoo=r(CGr,"RagTokenizer"),CGr.forEach(t),Uoo=r(L5e," (RAG model)"),L5e.forEach(t),Joo=i(S),gs=n(S,"LI",{});var _9=s(gs);Cre=n(_9,"STRONG",{});var wGr=s(Cre);Yoo=r(wGr,"realm"),wGr.forEach(t),Koo=r(_9," \u2014 "),$R=n(_9,"A",{href:!0});var AGr=s($R);Zoo=r(AGr,"RealmTokenizer"),AGr.forEach(t),ero=r(_9," or "),kR=n(_9,"A",{href:!0});var yGr=s(kR);oro=r(yGr,"RealmTokenizerFast"),yGr.forEach(t),rro=r(_9," (Realm model)"),_9.forEach(t),tro=i(S),hs=n(S,"LI",{});var b9=s(hs);wre=n(b9,"STRONG",{});var LGr=s(wre);aro=r(LGr,"reformer"),LGr.forEach(t),nro=r(b9," \u2014 "),SR=n(b9,"A",{href:!0});var xGr=s(SR);sro=r(xGr,"ReformerTokenizer"),xGr.forEach(t),lro=r(b9," or "),RR=n(b9,"A",{href:!0});var $Gr=s(RR);iro=r($Gr,"ReformerTokenizerFast"),$Gr.forEach(t),dro=r(b9," (Reformer model)"),b9.forEach(t),cro=i(S),ps=n(S,"LI",{});var v9=s(ps);Are=n(v9,"STRONG",{});var kGr=s(Are);fro=r(kGr,"rembert"),kGr.forEach(t),mro=r(v9," \u2014 "),BR=n(v9,"A",{href:!0});var SGr=s(BR);gro=r(SGr,"RemBertTokenizer"),SGr.forEach(t),hro=r(v9," or "),PR=n(v9,"A",{href:!0});var RGr=s(PR);pro=r(RGr,"RemBertTokenizerFast"),RGr.forEach(t),uro=r(v9," (RemBERT model)"),v9.forEach(t),_ro=i(S),us=n(S,"LI",{});var F9=s(us);yre=n(F9,"STRONG",{});var BGr=s(yre);bro=r(BGr,"retribert"),BGr.forEach(t),vro=r(F9," \u2014 "),IR=n(F9,"A",{href:!0});var PGr=s(IR);Fro=r(PGr,"RetriBertTokenizer"),PGr.forEach(t),Tro=r(F9," or "),qR=n(F9,"A",{href:!0});var IGr=s(qR);Mro=r(IGr,"RetriBertTokenizerFast"),IGr.forEach(t),Ero=r(F9," (RetriBERT model)"),F9.forEach(t),Cro=i(S),_s=n(S,"LI",{});var T9=s(_s);Lre=n(T9,"STRONG",{});var qGr=s(Lre);wro=r(qGr,"roberta"),qGr.forEach(t),Aro=r(T9," \u2014 "),NR=n(T9,"A",{href:!0});var NGr=s(NR);yro=r(NGr,"RobertaTokenizer"),NGr.forEach(t),Lro=r(T9," or "),jR=n(T9,"A",{href:!0});var jGr=s(jR);xro=r(jGr,"RobertaTokenizerFast"),jGr.forEach(t),$ro=r(T9," (RoBERTa model)"),T9.forEach(t),kro=i(S),bs=n(S,"LI",{});var M9=s(bs);xre=n(M9,"STRONG",{});var DGr=s(xre);Sro=r(DGr,"roformer"),DGr.forEach(t),Rro=r(M9," \u2014 "),DR=n(M9,"A",{href:!0});var GGr=s(DR);Bro=r(GGr,"RoFormerTokenizer"),GGr.forEach(t),Pro=r(M9," or "),GR=n(M9,"A",{href:!0});var OGr=s(GR);Iro=r(OGr,"RoFormerTokenizerFast"),OGr.forEach(t),qro=r(M9," (RoFormer model)"),M9.forEach(t),Nro=i(S),Lg=n(S,"LI",{});var x5e=s(Lg);$re=n(x5e,"STRONG",{});var VGr=s($re);jro=r(VGr,"speech_to_text"),VGr.forEach(t),Dro=r(x5e," \u2014 "),OR=n(x5e,"A",{href:!0});var XGr=s(OR);Gro=r(XGr,"Speech2TextTokenizer"),XGr.forEach(t),Oro=r(x5e," (Speech2Text model)"),x5e.forEach(t),Vro=i(S),xg=n(S,"LI",{});var $5e=s(xg);kre=n($5e,"STRONG",{});var zGr=s(kre);Xro=r(zGr,"speech_to_text_2"),zGr.forEach(t),zro=r($5e," \u2014 "),VR=n($5e,"A",{href:!0});var QGr=s(VR);Qro=r(QGr,"Speech2Text2Tokenizer"),QGr.forEach(t),Wro=r($5e," (Speech2Text2 model)"),$5e.forEach(t),Hro=i(S),vs=n(S,"LI",{});var E9=s(vs);Sre=n(E9,"STRONG",{});var WGr=s(Sre);Uro=r(WGr,"splinter"),WGr.forEach(t),Jro=r(E9," \u2014 "),XR=n(E9,"A",{href:!0});var HGr=s(XR);Yro=r(HGr,"SplinterTokenizer"),HGr.forEach(t),Kro=r(E9," or "),zR=n(E9,"A",{href:!0});var UGr=s(zR);Zro=r(UGr,"SplinterTokenizerFast"),UGr.forEach(t),eto=r(E9," (Splinter model)"),E9.forEach(t),oto=i(S),Fs=n(S,"LI",{});var C9=s(Fs);Rre=n(C9,"STRONG",{});var JGr=s(Rre);rto=r(JGr,"squeezebert"),JGr.forEach(t),tto=r(C9," \u2014 "),QR=n(C9,"A",{href:!0});var YGr=s(QR);ato=r(YGr,"SqueezeBertTokenizer"),YGr.forEach(t),nto=r(C9," or "),WR=n(C9,"A",{href:!0});var KGr=s(WR);sto=r(KGr,"SqueezeBertTokenizerFast"),KGr.forEach(t),lto=r(C9," (SqueezeBERT model)"),C9.forEach(t),ito=i(S),Ts=n(S,"LI",{});var w9=s(Ts);Bre=n(w9,"STRONG",{});var ZGr=s(Bre);dto=r(ZGr,"t5"),ZGr.forEach(t),cto=r(w9," \u2014 "),HR=n(w9,"A",{href:!0});var eOr=s(HR);fto=r(eOr,"T5Tokenizer"),eOr.forEach(t),mto=r(w9," or "),UR=n(w9,"A",{href:!0});var oOr=s(UR);gto=r(oOr,"T5TokenizerFast"),oOr.forEach(t),hto=r(w9," (T5 model)"),w9.forEach(t),pto=i(S),$g=n(S,"LI",{});var k5e=s($g);Pre=n(k5e,"STRONG",{});var rOr=s(Pre);uto=r(rOr,"tapas"),rOr.forEach(t),_to=r(k5e," \u2014 "),JR=n(k5e,"A",{href:!0});var tOr=s(JR);bto=r(tOr,"TapasTokenizer"),tOr.forEach(t),vto=r(k5e," (TAPAS model)"),k5e.forEach(t),Fto=i(S),kg=n(S,"LI",{});var S5e=s(kg);Ire=n(S5e,"STRONG",{});var aOr=s(Ire);Tto=r(aOr,"tapex"),aOr.forEach(t),Mto=r(S5e," \u2014 "),YR=n(S5e,"A",{href:!0});var nOr=s(YR);Eto=r(nOr,"TapexTokenizer"),nOr.forEach(t),Cto=r(S5e," (TAPEX model)"),S5e.forEach(t),wto=i(S),Sg=n(S,"LI",{});var R5e=s(Sg);qre=n(R5e,"STRONG",{});var sOr=s(qre);Ato=r(sOr,"transfo-xl"),sOr.forEach(t),yto=r(R5e," \u2014 "),KR=n(R5e,"A",{href:!0});var lOr=s(KR);Lto=r(lOr,"TransfoXLTokenizer"),lOr.forEach(t),xto=r(R5e," (Transformer-XL model)"),R5e.forEach(t),$to=i(S),Ms=n(S,"LI",{});var A9=s(Ms);Nre=n(A9,"STRONG",{});var iOr=s(Nre);kto=r(iOr,"visual_bert"),iOr.forEach(t),Sto=r(A9," \u2014 "),ZR=n(A9,"A",{href:!0});var dOr=s(ZR);Rto=r(dOr,"BertTokenizer"),dOr.forEach(t),Bto=r(A9," or "),eB=n(A9,"A",{href:!0});var cOr=s(eB);Pto=r(cOr,"BertTokenizerFast"),cOr.forEach(t),Ito=r(A9," (VisualBert model)"),A9.forEach(t),qto=i(S),Rg=n(S,"LI",{});var B5e=s(Rg);jre=n(B5e,"STRONG",{});var fOr=s(jre);Nto=r(fOr,"wav2vec2"),fOr.forEach(t),jto=r(B5e," \u2014 "),oB=n(B5e,"A",{href:!0});var mOr=s(oB);Dto=r(mOr,"Wav2Vec2CTCTokenizer"),mOr.forEach(t),Gto=r(B5e," (Wav2Vec2 model)"),B5e.forEach(t),Oto=i(S),Bg=n(S,"LI",{});var P5e=s(Bg);Dre=n(P5e,"STRONG",{});var gOr=s(Dre);Vto=r(gOr,"wav2vec2_phoneme"),gOr.forEach(t),Xto=r(P5e," \u2014 "),rB=n(P5e,"A",{href:!0});var hOr=s(rB);zto=r(hOr,"Wav2Vec2PhonemeCTCTokenizer"),hOr.forEach(t),Qto=r(P5e," (Wav2Vec2Phoneme model)"),P5e.forEach(t),Wto=i(S),Es=n(S,"LI",{});var y9=s(Es);Gre=n(y9,"STRONG",{});var pOr=s(Gre);Hto=r(pOr,"xglm"),pOr.forEach(t),Uto=r(y9," \u2014 "),tB=n(y9,"A",{href:!0});var uOr=s(tB);Jto=r(uOr,"XGLMTokenizer"),uOr.forEach(t),Yto=r(y9," or "),aB=n(y9,"A",{href:!0});var _Or=s(aB);Kto=r(_Or,"XGLMTokenizerFast"),_Or.forEach(t),Zto=r(y9," (XGLM model)"),y9.forEach(t),eao=i(S),Pg=n(S,"LI",{});var I5e=s(Pg);Ore=n(I5e,"STRONG",{});var bOr=s(Ore);oao=r(bOr,"xlm"),bOr.forEach(t),rao=r(I5e," \u2014 "),nB=n(I5e,"A",{href:!0});var vOr=s(nB);tao=r(vOr,"XLMTokenizer"),vOr.forEach(t),aao=r(I5e," (XLM model)"),I5e.forEach(t),nao=i(S),Ig=n(S,"LI",{});var q5e=s(Ig);Vre=n(q5e,"STRONG",{});var FOr=s(Vre);sao=r(FOr,"xlm-prophetnet"),FOr.forEach(t),lao=r(q5e," \u2014 "),sB=n(q5e,"A",{href:!0});var TOr=s(sB);iao=r(TOr,"XLMProphetNetTokenizer"),TOr.forEach(t),dao=r(q5e," (XLMProphetNet model)"),q5e.forEach(t),cao=i(S),Cs=n(S,"LI",{});var L9=s(Cs);Xre=n(L9,"STRONG",{});var MOr=s(Xre);fao=r(MOr,"xlm-roberta"),MOr.forEach(t),mao=r(L9," \u2014 "),lB=n(L9,"A",{href:!0});var EOr=s(lB);gao=r(EOr,"XLMRobertaTokenizer"),EOr.forEach(t),hao=r(L9," or "),iB=n(L9,"A",{href:!0});var COr=s(iB);pao=r(COr,"XLMRobertaTokenizerFast"),COr.forEach(t),uao=r(L9," (XLM-RoBERTa model)"),L9.forEach(t),_ao=i(S),ws=n(S,"LI",{});var x9=s(ws);zre=n(x9,"STRONG",{});var wOr=s(zre);bao=r(wOr,"xlm-roberta-xl"),wOr.forEach(t),vao=r(x9," \u2014 "),dB=n(x9,"A",{href:!0});var AOr=s(dB);Fao=r(AOr,"RobertaTokenizer"),AOr.forEach(t),Tao=r(x9," or "),cB=n(x9,"A",{href:!0});var yOr=s(cB);Mao=r(yOr,"RobertaTokenizerFast"),yOr.forEach(t),Eao=r(x9," (XLM-RoBERTa-XL model)"),x9.forEach(t),Cao=i(S),As=n(S,"LI",{});var $9=s(As);Qre=n($9,"STRONG",{});var LOr=s(Qre);wao=r(LOr,"xlnet"),LOr.forEach(t),Aao=r($9," \u2014 "),fB=n($9,"A",{href:!0});var xOr=s(fB);yao=r(xOr,"XLNetTokenizer"),xOr.forEach(t),Lao=r($9," or "),mB=n($9,"A",{href:!0});var $Or=s(mB);xao=r($Or,"XLNetTokenizerFast"),$Or.forEach(t),$ao=r($9," (XLNet model)"),$9.forEach(t),kao=i(S),ys=n(S,"LI",{});var k9=s(ys);Wre=n(k9,"STRONG",{});var kOr=s(Wre);Sao=r(kOr,"yoso"),kOr.forEach(t),Rao=r(k9," \u2014 "),gB=n(k9,"A",{href:!0});var SOr=s(gB);Bao=r(SOr,"AlbertTokenizer"),SOr.forEach(t),Pao=r(k9," or "),hB=n(k9,"A",{href:!0});var ROr=s(hB);Iao=r(ROr,"AlbertTokenizerFast"),ROr.forEach(t),qao=r(k9," (YOSO model)"),k9.forEach(t),S.forEach(t),Nao=i(Ss),T(qg.$$.fragment,Ss),Ss.forEach(t),jao=i(ks),Ng=n(ks,"DIV",{class:!0});var FIe=s(Ng);T(qA.$$.fragment,FIe),Dao=i(FIe),Hre=n(FIe,"P",{});var BOr=s(Hre);Gao=r(BOr,"Register a new tokenizer in this mapping."),BOr.forEach(t),FIe.forEach(t),ks.forEach(t),EBe=i(f),mi=n(f,"H2",{class:!0});var TIe=s(mi);jg=n(TIe,"A",{id:!0,class:!0,href:!0});var POr=s(jg);Ure=n(POr,"SPAN",{});var IOr=s(Ure);T(NA.$$.fragment,IOr),IOr.forEach(t),POr.forEach(t),Oao=i(TIe),Jre=n(TIe,"SPAN",{});var qOr=s(Jre);Vao=r(qOr,"AutoFeatureExtractor"),qOr.forEach(t),TIe.forEach(t),CBe=i(f),Ao=n(f,"DIV",{class:!0});var Rs=s(Ao);T(jA.$$.fragment,Rs),Xao=i(Rs),DA=n(Rs,"P",{});var MIe=s(DA);zao=r(MIe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),pB=n(MIe,"A",{href:!0});var NOr=s(pB);Qao=r(NOr,"AutoFeatureExtractor.from_pretrained()"),NOr.forEach(t),Wao=r(MIe," class method."),MIe.forEach(t),Hao=i(Rs),GA=n(Rs,"P",{});var EIe=s(GA);Uao=r(EIe,"This class cannot be instantiated directly using "),Yre=n(EIe,"CODE",{});var jOr=s(Yre);Jao=r(jOr,"__init__()"),jOr.forEach(t),Yao=r(EIe," (throws an error)."),EIe.forEach(t),Kao=i(Rs),Qe=n(Rs,"DIV",{class:!0});var Ht=s(Qe);T(OA.$$.fragment,Ht),Zao=i(Ht),Kre=n(Ht,"P",{});var DOr=s(Kre);eno=r(DOr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),DOr.forEach(t),ono=i(Ht),Ma=n(Ht,"P",{});var L3=s(Ma);rno=r(L3,"The feature extractor class to instantiate is selected based on the "),Zre=n(L3,"CODE",{});var GOr=s(Zre);tno=r(GOr,"model_type"),GOr.forEach(t),ano=r(L3,` property of the config object
(either passed as an argument or loaded from `),ete=n(L3,"CODE",{});var OOr=s(ete);nno=r(OOr,"pretrained_model_name_or_path"),OOr.forEach(t),sno=r(L3,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),ote=n(L3,"CODE",{});var VOr=s(ote);lno=r(VOr,"pretrained_model_name_or_path"),VOr.forEach(t),ino=r(L3,":"),L3.forEach(t),dno=i(Ht),te=n(Ht,"UL",{});var se=s(te);Dg=n(se,"LI",{});var N5e=s(Dg);rte=n(N5e,"STRONG",{});var XOr=s(rte);cno=r(XOr,"beit"),XOr.forEach(t),fno=r(N5e," \u2014 "),uB=n(N5e,"A",{href:!0});var zOr=s(uB);mno=r(zOr,"BeitFeatureExtractor"),zOr.forEach(t),gno=r(N5e," (BEiT model)"),N5e.forEach(t),hno=i(se),Gg=n(se,"LI",{});var j5e=s(Gg);tte=n(j5e,"STRONG",{});var QOr=s(tte);pno=r(QOr,"clip"),QOr.forEach(t),uno=r(j5e," \u2014 "),_B=n(j5e,"A",{href:!0});var WOr=s(_B);_no=r(WOr,"CLIPFeatureExtractor"),WOr.forEach(t),bno=r(j5e," (CLIP model)"),j5e.forEach(t),vno=i(se),Og=n(se,"LI",{});var D5e=s(Og);ate=n(D5e,"STRONG",{});var HOr=s(ate);Fno=r(HOr,"convnext"),HOr.forEach(t),Tno=r(D5e," \u2014 "),bB=n(D5e,"A",{href:!0});var UOr=s(bB);Mno=r(UOr,"ConvNextFeatureExtractor"),UOr.forEach(t),Eno=r(D5e," (ConvNext model)"),D5e.forEach(t),Cno=i(se),Vg=n(se,"LI",{});var G5e=s(Vg);nte=n(G5e,"STRONG",{});var JOr=s(nte);wno=r(JOr,"data2vec-audio"),JOr.forEach(t),Ano=r(G5e," \u2014 "),vB=n(G5e,"A",{href:!0});var YOr=s(vB);yno=r(YOr,"Wav2Vec2FeatureExtractor"),YOr.forEach(t),Lno=r(G5e," (Data2VecAudio model)"),G5e.forEach(t),xno=i(se),Xg=n(se,"LI",{});var O5e=s(Xg);ste=n(O5e,"STRONG",{});var KOr=s(ste);$no=r(KOr,"data2vec-vision"),KOr.forEach(t),kno=r(O5e," \u2014 "),FB=n(O5e,"A",{href:!0});var ZOr=s(FB);Sno=r(ZOr,"BeitFeatureExtractor"),ZOr.forEach(t),Rno=r(O5e," (Data2VecVision model)"),O5e.forEach(t),Bno=i(se),zg=n(se,"LI",{});var V5e=s(zg);lte=n(V5e,"STRONG",{});var eVr=s(lte);Pno=r(eVr,"deit"),eVr.forEach(t),Ino=r(V5e," \u2014 "),TB=n(V5e,"A",{href:!0});var oVr=s(TB);qno=r(oVr,"DeiTFeatureExtractor"),oVr.forEach(t),Nno=r(V5e," (DeiT model)"),V5e.forEach(t),jno=i(se),Qg=n(se,"LI",{});var X5e=s(Qg);ite=n(X5e,"STRONG",{});var rVr=s(ite);Dno=r(rVr,"detr"),rVr.forEach(t),Gno=r(X5e," \u2014 "),MB=n(X5e,"A",{href:!0});var tVr=s(MB);Ono=r(tVr,"DetrFeatureExtractor"),tVr.forEach(t),Vno=r(X5e," (DETR model)"),X5e.forEach(t),Xno=i(se),Wg=n(se,"LI",{});var z5e=s(Wg);dte=n(z5e,"STRONG",{});var aVr=s(dte);zno=r(aVr,"dpt"),aVr.forEach(t),Qno=r(z5e," \u2014 "),EB=n(z5e,"A",{href:!0});var nVr=s(EB);Wno=r(nVr,"DPTFeatureExtractor"),nVr.forEach(t),Hno=r(z5e," (DPT model)"),z5e.forEach(t),Uno=i(se),Hg=n(se,"LI",{});var Q5e=s(Hg);cte=n(Q5e,"STRONG",{});var sVr=s(cte);Jno=r(sVr,"glpn"),sVr.forEach(t),Yno=r(Q5e," \u2014 "),CB=n(Q5e,"A",{href:!0});var lVr=s(CB);Kno=r(lVr,"GLPNFeatureExtractor"),lVr.forEach(t),Zno=r(Q5e," (GLPN model)"),Q5e.forEach(t),eso=i(se),Ug=n(se,"LI",{});var W5e=s(Ug);fte=n(W5e,"STRONG",{});var iVr=s(fte);oso=r(iVr,"hubert"),iVr.forEach(t),rso=r(W5e," \u2014 "),wB=n(W5e,"A",{href:!0});var dVr=s(wB);tso=r(dVr,"Wav2Vec2FeatureExtractor"),dVr.forEach(t),aso=r(W5e," (Hubert model)"),W5e.forEach(t),nso=i(se),Jg=n(se,"LI",{});var H5e=s(Jg);mte=n(H5e,"STRONG",{});var cVr=s(mte);sso=r(cVr,"layoutlmv2"),cVr.forEach(t),lso=r(H5e," \u2014 "),AB=n(H5e,"A",{href:!0});var fVr=s(AB);iso=r(fVr,"LayoutLMv2FeatureExtractor"),fVr.forEach(t),dso=r(H5e," (LayoutLMv2 model)"),H5e.forEach(t),cso=i(se),Yg=n(se,"LI",{});var U5e=s(Yg);gte=n(U5e,"STRONG",{});var mVr=s(gte);fso=r(mVr,"maskformer"),mVr.forEach(t),mso=r(U5e," \u2014 "),yB=n(U5e,"A",{href:!0});var gVr=s(yB);gso=r(gVr,"MaskFormerFeatureExtractor"),gVr.forEach(t),hso=r(U5e," (MaskFormer model)"),U5e.forEach(t),pso=i(se),Kg=n(se,"LI",{});var J5e=s(Kg);hte=n(J5e,"STRONG",{});var hVr=s(hte);uso=r(hVr,"perceiver"),hVr.forEach(t),_so=r(J5e," \u2014 "),LB=n(J5e,"A",{href:!0});var pVr=s(LB);bso=r(pVr,"PerceiverFeatureExtractor"),pVr.forEach(t),vso=r(J5e," (Perceiver model)"),J5e.forEach(t),Fso=i(se),Zg=n(se,"LI",{});var Y5e=s(Zg);pte=n(Y5e,"STRONG",{});var uVr=s(pte);Tso=r(uVr,"poolformer"),uVr.forEach(t),Mso=r(Y5e," \u2014 "),xB=n(Y5e,"A",{href:!0});var _Vr=s(xB);Eso=r(_Vr,"PoolFormerFeatureExtractor"),_Vr.forEach(t),Cso=r(Y5e," (PoolFormer model)"),Y5e.forEach(t),wso=i(se),eh=n(se,"LI",{});var K5e=s(eh);ute=n(K5e,"STRONG",{});var bVr=s(ute);Aso=r(bVr,"regnet"),bVr.forEach(t),yso=r(K5e," \u2014 "),$B=n(K5e,"A",{href:!0});var vVr=s($B);Lso=r(vVr,"ConvNextFeatureExtractor"),vVr.forEach(t),xso=r(K5e," (RegNet model)"),K5e.forEach(t),$so=i(se),oh=n(se,"LI",{});var Z5e=s(oh);_te=n(Z5e,"STRONG",{});var FVr=s(_te);kso=r(FVr,"resnet"),FVr.forEach(t),Sso=r(Z5e," \u2014 "),kB=n(Z5e,"A",{href:!0});var TVr=s(kB);Rso=r(TVr,"ConvNextFeatureExtractor"),TVr.forEach(t),Bso=r(Z5e," (ResNet model)"),Z5e.forEach(t),Pso=i(se),rh=n(se,"LI",{});var eCe=s(rh);bte=n(eCe,"STRONG",{});var MVr=s(bte);Iso=r(MVr,"segformer"),MVr.forEach(t),qso=r(eCe," \u2014 "),SB=n(eCe,"A",{href:!0});var EVr=s(SB);Nso=r(EVr,"SegformerFeatureExtractor"),EVr.forEach(t),jso=r(eCe," (SegFormer model)"),eCe.forEach(t),Dso=i(se),th=n(se,"LI",{});var oCe=s(th);vte=n(oCe,"STRONG",{});var CVr=s(vte);Gso=r(CVr,"speech_to_text"),CVr.forEach(t),Oso=r(oCe," \u2014 "),RB=n(oCe,"A",{href:!0});var wVr=s(RB);Vso=r(wVr,"Speech2TextFeatureExtractor"),wVr.forEach(t),Xso=r(oCe," (Speech2Text model)"),oCe.forEach(t),zso=i(se),ah=n(se,"LI",{});var rCe=s(ah);Fte=n(rCe,"STRONG",{});var AVr=s(Fte);Qso=r(AVr,"swin"),AVr.forEach(t),Wso=r(rCe," \u2014 "),BB=n(rCe,"A",{href:!0});var yVr=s(BB);Hso=r(yVr,"ViTFeatureExtractor"),yVr.forEach(t),Uso=r(rCe," (Swin model)"),rCe.forEach(t),Jso=i(se),nh=n(se,"LI",{});var tCe=s(nh);Tte=n(tCe,"STRONG",{});var LVr=s(Tte);Yso=r(LVr,"van"),LVr.forEach(t),Kso=r(tCe," \u2014 "),PB=n(tCe,"A",{href:!0});var xVr=s(PB);Zso=r(xVr,"ConvNextFeatureExtractor"),xVr.forEach(t),elo=r(tCe," (VAN model)"),tCe.forEach(t),olo=i(se),sh=n(se,"LI",{});var aCe=s(sh);Mte=n(aCe,"STRONG",{});var $Vr=s(Mte);rlo=r($Vr,"vit"),$Vr.forEach(t),tlo=r(aCe," \u2014 "),IB=n(aCe,"A",{href:!0});var kVr=s(IB);alo=r(kVr,"ViTFeatureExtractor"),kVr.forEach(t),nlo=r(aCe," (ViT model)"),aCe.forEach(t),slo=i(se),lh=n(se,"LI",{});var nCe=s(lh);Ete=n(nCe,"STRONG",{});var SVr=s(Ete);llo=r(SVr,"vit_mae"),SVr.forEach(t),ilo=r(nCe," \u2014 "),qB=n(nCe,"A",{href:!0});var RVr=s(qB);dlo=r(RVr,"ViTFeatureExtractor"),RVr.forEach(t),clo=r(nCe," (ViTMAE model)"),nCe.forEach(t),flo=i(se),ih=n(se,"LI",{});var sCe=s(ih);Cte=n(sCe,"STRONG",{});var BVr=s(Cte);mlo=r(BVr,"wav2vec2"),BVr.forEach(t),glo=r(sCe," \u2014 "),NB=n(sCe,"A",{href:!0});var PVr=s(NB);hlo=r(PVr,"Wav2Vec2FeatureExtractor"),PVr.forEach(t),plo=r(sCe," (Wav2Vec2 model)"),sCe.forEach(t),ulo=i(se),dh=n(se,"LI",{});var lCe=s(dh);wte=n(lCe,"STRONG",{});var IVr=s(wte);_lo=r(IVr,"yolos"),IVr.forEach(t),blo=r(lCe," \u2014 "),jB=n(lCe,"A",{href:!0});var qVr=s(jB);vlo=r(qVr,"YolosFeatureExtractor"),qVr.forEach(t),Flo=r(lCe," (YOLOS model)"),lCe.forEach(t),se.forEach(t),Tlo=i(Ht),T(ch.$$.fragment,Ht),Mlo=i(Ht),T(fh.$$.fragment,Ht),Ht.forEach(t),Elo=i(Rs),mh=n(Rs,"DIV",{class:!0});var CIe=s(mh);T(VA.$$.fragment,CIe),Clo=i(CIe),Ate=n(CIe,"P",{});var NVr=s(Ate);wlo=r(NVr,"Register a new feature extractor for this class."),NVr.forEach(t),CIe.forEach(t),Rs.forEach(t),wBe=i(f),gi=n(f,"H2",{class:!0});var wIe=s(gi);gh=n(wIe,"A",{id:!0,class:!0,href:!0});var jVr=s(gh);yte=n(jVr,"SPAN",{});var DVr=s(yte);T(XA.$$.fragment,DVr),DVr.forEach(t),jVr.forEach(t),Alo=i(wIe),Lte=n(wIe,"SPAN",{});var GVr=s(Lte);ylo=r(GVr,"AutoProcessor"),GVr.forEach(t),wIe.forEach(t),ABe=i(f),yo=n(f,"DIV",{class:!0});var Bs=s(yo);T(zA.$$.fragment,Bs),Llo=i(Bs),QA=n(Bs,"P",{});var AIe=s(QA);xlo=r(AIe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),DB=n(AIe,"A",{href:!0});var OVr=s(DB);$lo=r(OVr,"AutoProcessor.from_pretrained()"),OVr.forEach(t),klo=r(AIe," class method."),AIe.forEach(t),Slo=i(Bs),WA=n(Bs,"P",{});var yIe=s(WA);Rlo=r(yIe,"This class cannot be instantiated directly using "),xte=n(yIe,"CODE",{});var VVr=s(xte);Blo=r(VVr,"__init__()"),VVr.forEach(t),Plo=r(yIe," (throws an error)."),yIe.forEach(t),Ilo=i(Bs),We=n(Bs,"DIV",{class:!0});var Ut=s(We);T(HA.$$.fragment,Ut),qlo=i(Ut),$te=n(Ut,"P",{});var XVr=s($te);Nlo=r(XVr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),XVr.forEach(t),jlo=i(Ut),hi=n(Ut,"P",{});var hY=s(hi);Dlo=r(hY,"The processor class to instantiate is selected based on the "),kte=n(hY,"CODE",{});var zVr=s(kte);Glo=r(zVr,"model_type"),zVr.forEach(t),Olo=r(hY,` property of the config object (either
passed as an argument or loaded from `),Ste=n(hY,"CODE",{});var QVr=s(Ste);Vlo=r(QVr,"pretrained_model_name_or_path"),QVr.forEach(t),Xlo=r(hY," if possible):"),hY.forEach(t),zlo=i(Ut),be=n(Ut,"UL",{});var Fe=s(be);hh=n(Fe,"LI",{});var iCe=s(hh);Rte=n(iCe,"STRONG",{});var WVr=s(Rte);Qlo=r(WVr,"clip"),WVr.forEach(t),Wlo=r(iCe," \u2014 "),GB=n(iCe,"A",{href:!0});var HVr=s(GB);Hlo=r(HVr,"CLIPProcessor"),HVr.forEach(t),Ulo=r(iCe," (CLIP model)"),iCe.forEach(t),Jlo=i(Fe),ph=n(Fe,"LI",{});var dCe=s(ph);Bte=n(dCe,"STRONG",{});var UVr=s(Bte);Ylo=r(UVr,"layoutlmv2"),UVr.forEach(t),Klo=r(dCe," \u2014 "),OB=n(dCe,"A",{href:!0});var JVr=s(OB);Zlo=r(JVr,"LayoutLMv2Processor"),JVr.forEach(t),eio=r(dCe," (LayoutLMv2 model)"),dCe.forEach(t),oio=i(Fe),uh=n(Fe,"LI",{});var cCe=s(uh);Pte=n(cCe,"STRONG",{});var YVr=s(Pte);rio=r(YVr,"layoutxlm"),YVr.forEach(t),tio=r(cCe," \u2014 "),VB=n(cCe,"A",{href:!0});var KVr=s(VB);aio=r(KVr,"LayoutXLMProcessor"),KVr.forEach(t),nio=r(cCe," (LayoutXLM model)"),cCe.forEach(t),sio=i(Fe),_h=n(Fe,"LI",{});var fCe=s(_h);Ite=n(fCe,"STRONG",{});var ZVr=s(Ite);lio=r(ZVr,"sew"),ZVr.forEach(t),iio=r(fCe," \u2014 "),XB=n(fCe,"A",{href:!0});var eXr=s(XB);dio=r(eXr,"Wav2Vec2Processor"),eXr.forEach(t),cio=r(fCe," (SEW model)"),fCe.forEach(t),fio=i(Fe),bh=n(Fe,"LI",{});var mCe=s(bh);qte=n(mCe,"STRONG",{});var oXr=s(qte);mio=r(oXr,"sew-d"),oXr.forEach(t),gio=r(mCe," \u2014 "),zB=n(mCe,"A",{href:!0});var rXr=s(zB);hio=r(rXr,"Wav2Vec2Processor"),rXr.forEach(t),pio=r(mCe," (SEW-D model)"),mCe.forEach(t),uio=i(Fe),vh=n(Fe,"LI",{});var gCe=s(vh);Nte=n(gCe,"STRONG",{});var tXr=s(Nte);_io=r(tXr,"speech_to_text"),tXr.forEach(t),bio=r(gCe," \u2014 "),QB=n(gCe,"A",{href:!0});var aXr=s(QB);vio=r(aXr,"Speech2TextProcessor"),aXr.forEach(t),Fio=r(gCe," (Speech2Text model)"),gCe.forEach(t),Tio=i(Fe),Fh=n(Fe,"LI",{});var hCe=s(Fh);jte=n(hCe,"STRONG",{});var nXr=s(jte);Mio=r(nXr,"speech_to_text_2"),nXr.forEach(t),Eio=r(hCe," \u2014 "),WB=n(hCe,"A",{href:!0});var sXr=s(WB);Cio=r(sXr,"Speech2Text2Processor"),sXr.forEach(t),wio=r(hCe," (Speech2Text2 model)"),hCe.forEach(t),Aio=i(Fe),Th=n(Fe,"LI",{});var pCe=s(Th);Dte=n(pCe,"STRONG",{});var lXr=s(Dte);yio=r(lXr,"trocr"),lXr.forEach(t),Lio=r(pCe," \u2014 "),HB=n(pCe,"A",{href:!0});var iXr=s(HB);xio=r(iXr,"TrOCRProcessor"),iXr.forEach(t),$io=r(pCe," (TrOCR model)"),pCe.forEach(t),kio=i(Fe),Mh=n(Fe,"LI",{});var uCe=s(Mh);Gte=n(uCe,"STRONG",{});var dXr=s(Gte);Sio=r(dXr,"unispeech"),dXr.forEach(t),Rio=r(uCe," \u2014 "),UB=n(uCe,"A",{href:!0});var cXr=s(UB);Bio=r(cXr,"Wav2Vec2Processor"),cXr.forEach(t),Pio=r(uCe," (UniSpeech model)"),uCe.forEach(t),Iio=i(Fe),Eh=n(Fe,"LI",{});var _Ce=s(Eh);Ote=n(_Ce,"STRONG",{});var fXr=s(Ote);qio=r(fXr,"unispeech-sat"),fXr.forEach(t),Nio=r(_Ce," \u2014 "),JB=n(_Ce,"A",{href:!0});var mXr=s(JB);jio=r(mXr,"Wav2Vec2Processor"),mXr.forEach(t),Dio=r(_Ce," (UniSpeechSat model)"),_Ce.forEach(t),Gio=i(Fe),Ch=n(Fe,"LI",{});var bCe=s(Ch);Vte=n(bCe,"STRONG",{});var gXr=s(Vte);Oio=r(gXr,"vilt"),gXr.forEach(t),Vio=r(bCe," \u2014 "),YB=n(bCe,"A",{href:!0});var hXr=s(YB);Xio=r(hXr,"ViltProcessor"),hXr.forEach(t),zio=r(bCe," (ViLT model)"),bCe.forEach(t),Qio=i(Fe),wh=n(Fe,"LI",{});var vCe=s(wh);Xte=n(vCe,"STRONG",{});var pXr=s(Xte);Wio=r(pXr,"vision-text-dual-encoder"),pXr.forEach(t),Hio=r(vCe," \u2014 "),KB=n(vCe,"A",{href:!0});var uXr=s(KB);Uio=r(uXr,"VisionTextDualEncoderProcessor"),uXr.forEach(t),Jio=r(vCe," (VisionTextDualEncoder model)"),vCe.forEach(t),Yio=i(Fe),Ah=n(Fe,"LI",{});var FCe=s(Ah);zte=n(FCe,"STRONG",{});var _Xr=s(zte);Kio=r(_Xr,"wav2vec2"),_Xr.forEach(t),Zio=r(FCe," \u2014 "),ZB=n(FCe,"A",{href:!0});var bXr=s(ZB);edo=r(bXr,"Wav2Vec2Processor"),bXr.forEach(t),odo=r(FCe," (Wav2Vec2 model)"),FCe.forEach(t),rdo=i(Fe),yh=n(Fe,"LI",{});var TCe=s(yh);Qte=n(TCe,"STRONG",{});var vXr=s(Qte);tdo=r(vXr,"wavlm"),vXr.forEach(t),ado=r(TCe," \u2014 "),eP=n(TCe,"A",{href:!0});var FXr=s(eP);ndo=r(FXr,"Wav2Vec2Processor"),FXr.forEach(t),sdo=r(TCe," (WavLM model)"),TCe.forEach(t),Fe.forEach(t),ldo=i(Ut),T(Lh.$$.fragment,Ut),ido=i(Ut),T(xh.$$.fragment,Ut),Ut.forEach(t),ddo=i(Bs),$h=n(Bs,"DIV",{class:!0});var LIe=s($h);T(UA.$$.fragment,LIe),cdo=i(LIe),Wte=n(LIe,"P",{});var TXr=s(Wte);fdo=r(TXr,"Register a new processor for this class."),TXr.forEach(t),LIe.forEach(t),Bs.forEach(t),yBe=i(f),pi=n(f,"H2",{class:!0});var xIe=s(pi);kh=n(xIe,"A",{id:!0,class:!0,href:!0});var MXr=s(kh);Hte=n(MXr,"SPAN",{});var EXr=s(Hte);T(JA.$$.fragment,EXr),EXr.forEach(t),MXr.forEach(t),mdo=i(xIe),Ute=n(xIe,"SPAN",{});var CXr=s(Ute);gdo=r(CXr,"AutoModel"),CXr.forEach(t),xIe.forEach(t),LBe=i(f),Lo=n(f,"DIV",{class:!0});var Ps=s(Lo);T(YA.$$.fragment,Ps),hdo=i(Ps),ui=n(Ps,"P",{});var pY=s(ui);pdo=r(pY,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),oP=n(pY,"A",{href:!0});var wXr=s(oP);udo=r(wXr,"from_pretrained()"),wXr.forEach(t),_do=r(pY," class method or the "),rP=n(pY,"A",{href:!0});var AXr=s(rP);bdo=r(AXr,"from_config()"),AXr.forEach(t),vdo=r(pY,` class
method.`),pY.forEach(t),Fdo=i(Ps),KA=n(Ps,"P",{});var $Ie=s(KA);Tdo=r($Ie,"This class cannot be instantiated directly using "),Jte=n($Ie,"CODE",{});var yXr=s(Jte);Mdo=r(yXr,"__init__()"),yXr.forEach(t),Edo=r($Ie," (throws an error)."),$Ie.forEach(t),Cdo=i(Ps),Zr=n(Ps,"DIV",{class:!0});var x3=s(Zr);T(ZA.$$.fragment,x3),wdo=i(x3),Yte=n(x3,"P",{});var LXr=s(Yte);Ado=r(LXr,"Instantiates one of the base model classes of the library from a configuration."),LXr.forEach(t),ydo=i(x3),_i=n(x3,"P",{});var uY=s(_i);Ldo=r(uY,`Note:
Loading a model from its configuration file does `),Kte=n(uY,"STRONG",{});var xXr=s(Kte);xdo=r(xXr,"not"),xXr.forEach(t),$do=r(uY,` load the model weights. It only affects the
model\u2019s configuration. Use `),tP=n(uY,"A",{href:!0});var $Xr=s(tP);kdo=r($Xr,"from_pretrained()"),$Xr.forEach(t),Sdo=r(uY," to load the model weights."),uY.forEach(t),Rdo=i(x3),T(Sh.$$.fragment,x3),x3.forEach(t),Bdo=i(Ps),He=n(Ps,"DIV",{class:!0});var Jt=s(He);T(e0.$$.fragment,Jt),Pdo=i(Jt),Zte=n(Jt,"P",{});var kXr=s(Zte);Ido=r(kXr,"Instantiate one of the base model classes of the library from a pretrained model."),kXr.forEach(t),qdo=i(Jt),Ea=n(Jt,"P",{});var $3=s(Ea);Ndo=r($3,"The model class to instantiate is selected based on the "),eae=n($3,"CODE",{});var SXr=s(eae);jdo=r(SXr,"model_type"),SXr.forEach(t),Ddo=r($3,` property of the config object (either
passed as an argument or loaded from `),oae=n($3,"CODE",{});var RXr=s(oae);Gdo=r(RXr,"pretrained_model_name_or_path"),RXr.forEach(t),Odo=r($3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rae=n($3,"CODE",{});var BXr=s(rae);Vdo=r(BXr,"pretrained_model_name_or_path"),BXr.forEach(t),Xdo=r($3,":"),$3.forEach(t),zdo=i(Jt),x=n(Jt,"UL",{});var $=s(x);Rh=n($,"LI",{});var MCe=s(Rh);tae=n(MCe,"STRONG",{});var PXr=s(tae);Qdo=r(PXr,"albert"),PXr.forEach(t),Wdo=r(MCe," \u2014 "),aP=n(MCe,"A",{href:!0});var IXr=s(aP);Hdo=r(IXr,"AlbertModel"),IXr.forEach(t),Udo=r(MCe," (ALBERT model)"),MCe.forEach(t),Jdo=i($),Bh=n($,"LI",{});var ECe=s(Bh);aae=n(ECe,"STRONG",{});var qXr=s(aae);Ydo=r(qXr,"bart"),qXr.forEach(t),Kdo=r(ECe," \u2014 "),nP=n(ECe,"A",{href:!0});var NXr=s(nP);Zdo=r(NXr,"BartModel"),NXr.forEach(t),eco=r(ECe," (BART model)"),ECe.forEach(t),oco=i($),Ph=n($,"LI",{});var CCe=s(Ph);nae=n(CCe,"STRONG",{});var jXr=s(nae);rco=r(jXr,"beit"),jXr.forEach(t),tco=r(CCe," \u2014 "),sP=n(CCe,"A",{href:!0});var DXr=s(sP);aco=r(DXr,"BeitModel"),DXr.forEach(t),nco=r(CCe," (BEiT model)"),CCe.forEach(t),sco=i($),Ih=n($,"LI",{});var wCe=s(Ih);sae=n(wCe,"STRONG",{});var GXr=s(sae);lco=r(GXr,"bert"),GXr.forEach(t),ico=r(wCe," \u2014 "),lP=n(wCe,"A",{href:!0});var OXr=s(lP);dco=r(OXr,"BertModel"),OXr.forEach(t),cco=r(wCe," (BERT model)"),wCe.forEach(t),fco=i($),qh=n($,"LI",{});var ACe=s(qh);lae=n(ACe,"STRONG",{});var VXr=s(lae);mco=r(VXr,"bert-generation"),VXr.forEach(t),gco=r(ACe," \u2014 "),iP=n(ACe,"A",{href:!0});var XXr=s(iP);hco=r(XXr,"BertGenerationEncoder"),XXr.forEach(t),pco=r(ACe," (Bert Generation model)"),ACe.forEach(t),uco=i($),Nh=n($,"LI",{});var yCe=s(Nh);iae=n(yCe,"STRONG",{});var zXr=s(iae);_co=r(zXr,"big_bird"),zXr.forEach(t),bco=r(yCe," \u2014 "),dP=n(yCe,"A",{href:!0});var QXr=s(dP);vco=r(QXr,"BigBirdModel"),QXr.forEach(t),Fco=r(yCe," (BigBird model)"),yCe.forEach(t),Tco=i($),jh=n($,"LI",{});var LCe=s(jh);dae=n(LCe,"STRONG",{});var WXr=s(dae);Mco=r(WXr,"bigbird_pegasus"),WXr.forEach(t),Eco=r(LCe," \u2014 "),cP=n(LCe,"A",{href:!0});var HXr=s(cP);Cco=r(HXr,"BigBirdPegasusModel"),HXr.forEach(t),wco=r(LCe," (BigBirdPegasus model)"),LCe.forEach(t),Aco=i($),Dh=n($,"LI",{});var xCe=s(Dh);cae=n(xCe,"STRONG",{});var UXr=s(cae);yco=r(UXr,"blenderbot"),UXr.forEach(t),Lco=r(xCe," \u2014 "),fP=n(xCe,"A",{href:!0});var JXr=s(fP);xco=r(JXr,"BlenderbotModel"),JXr.forEach(t),$co=r(xCe," (Blenderbot model)"),xCe.forEach(t),kco=i($),Gh=n($,"LI",{});var $Ce=s(Gh);fae=n($Ce,"STRONG",{});var YXr=s(fae);Sco=r(YXr,"blenderbot-small"),YXr.forEach(t),Rco=r($Ce," \u2014 "),mP=n($Ce,"A",{href:!0});var KXr=s(mP);Bco=r(KXr,"BlenderbotSmallModel"),KXr.forEach(t),Pco=r($Ce," (BlenderbotSmall model)"),$Ce.forEach(t),Ico=i($),Oh=n($,"LI",{});var kCe=s(Oh);mae=n(kCe,"STRONG",{});var ZXr=s(mae);qco=r(ZXr,"camembert"),ZXr.forEach(t),Nco=r(kCe," \u2014 "),gP=n(kCe,"A",{href:!0});var ezr=s(gP);jco=r(ezr,"CamembertModel"),ezr.forEach(t),Dco=r(kCe," (CamemBERT model)"),kCe.forEach(t),Gco=i($),Vh=n($,"LI",{});var SCe=s(Vh);gae=n(SCe,"STRONG",{});var ozr=s(gae);Oco=r(ozr,"canine"),ozr.forEach(t),Vco=r(SCe," \u2014 "),hP=n(SCe,"A",{href:!0});var rzr=s(hP);Xco=r(rzr,"CanineModel"),rzr.forEach(t),zco=r(SCe," (Canine model)"),SCe.forEach(t),Qco=i($),Xh=n($,"LI",{});var RCe=s(Xh);hae=n(RCe,"STRONG",{});var tzr=s(hae);Wco=r(tzr,"clip"),tzr.forEach(t),Hco=r(RCe," \u2014 "),pP=n(RCe,"A",{href:!0});var azr=s(pP);Uco=r(azr,"CLIPModel"),azr.forEach(t),Jco=r(RCe," (CLIP model)"),RCe.forEach(t),Yco=i($),zh=n($,"LI",{});var BCe=s(zh);pae=n(BCe,"STRONG",{});var nzr=s(pae);Kco=r(nzr,"convbert"),nzr.forEach(t),Zco=r(BCe," \u2014 "),uP=n(BCe,"A",{href:!0});var szr=s(uP);efo=r(szr,"ConvBertModel"),szr.forEach(t),ofo=r(BCe," (ConvBERT model)"),BCe.forEach(t),rfo=i($),Qh=n($,"LI",{});var PCe=s(Qh);uae=n(PCe,"STRONG",{});var lzr=s(uae);tfo=r(lzr,"convnext"),lzr.forEach(t),afo=r(PCe," \u2014 "),_P=n(PCe,"A",{href:!0});var izr=s(_P);nfo=r(izr,"ConvNextModel"),izr.forEach(t),sfo=r(PCe," (ConvNext model)"),PCe.forEach(t),lfo=i($),Wh=n($,"LI",{});var ICe=s(Wh);_ae=n(ICe,"STRONG",{});var dzr=s(_ae);ifo=r(dzr,"ctrl"),dzr.forEach(t),dfo=r(ICe," \u2014 "),bP=n(ICe,"A",{href:!0});var czr=s(bP);cfo=r(czr,"CTRLModel"),czr.forEach(t),ffo=r(ICe," (CTRL model)"),ICe.forEach(t),mfo=i($),Hh=n($,"LI",{});var qCe=s(Hh);bae=n(qCe,"STRONG",{});var fzr=s(bae);gfo=r(fzr,"data2vec-audio"),fzr.forEach(t),hfo=r(qCe," \u2014 "),vP=n(qCe,"A",{href:!0});var mzr=s(vP);pfo=r(mzr,"Data2VecAudioModel"),mzr.forEach(t),ufo=r(qCe," (Data2VecAudio model)"),qCe.forEach(t),_fo=i($),Uh=n($,"LI",{});var NCe=s(Uh);vae=n(NCe,"STRONG",{});var gzr=s(vae);bfo=r(gzr,"data2vec-text"),gzr.forEach(t),vfo=r(NCe," \u2014 "),FP=n(NCe,"A",{href:!0});var hzr=s(FP);Ffo=r(hzr,"Data2VecTextModel"),hzr.forEach(t),Tfo=r(NCe," (Data2VecText model)"),NCe.forEach(t),Mfo=i($),Jh=n($,"LI",{});var jCe=s(Jh);Fae=n(jCe,"STRONG",{});var pzr=s(Fae);Efo=r(pzr,"data2vec-vision"),pzr.forEach(t),Cfo=r(jCe," \u2014 "),TP=n(jCe,"A",{href:!0});var uzr=s(TP);wfo=r(uzr,"Data2VecVisionModel"),uzr.forEach(t),Afo=r(jCe," (Data2VecVision model)"),jCe.forEach(t),yfo=i($),Yh=n($,"LI",{});var DCe=s(Yh);Tae=n(DCe,"STRONG",{});var _zr=s(Tae);Lfo=r(_zr,"deberta"),_zr.forEach(t),xfo=r(DCe," \u2014 "),MP=n(DCe,"A",{href:!0});var bzr=s(MP);$fo=r(bzr,"DebertaModel"),bzr.forEach(t),kfo=r(DCe," (DeBERTa model)"),DCe.forEach(t),Sfo=i($),Kh=n($,"LI",{});var GCe=s(Kh);Mae=n(GCe,"STRONG",{});var vzr=s(Mae);Rfo=r(vzr,"deberta-v2"),vzr.forEach(t),Bfo=r(GCe," \u2014 "),EP=n(GCe,"A",{href:!0});var Fzr=s(EP);Pfo=r(Fzr,"DebertaV2Model"),Fzr.forEach(t),Ifo=r(GCe," (DeBERTa-v2 model)"),GCe.forEach(t),qfo=i($),Zh=n($,"LI",{});var OCe=s(Zh);Eae=n(OCe,"STRONG",{});var Tzr=s(Eae);Nfo=r(Tzr,"decision_transformer"),Tzr.forEach(t),jfo=r(OCe," \u2014 "),CP=n(OCe,"A",{href:!0});var Mzr=s(CP);Dfo=r(Mzr,"DecisionTransformerModel"),Mzr.forEach(t),Gfo=r(OCe," (Decision Transformer model)"),OCe.forEach(t),Ofo=i($),ep=n($,"LI",{});var VCe=s(ep);Cae=n(VCe,"STRONG",{});var Ezr=s(Cae);Vfo=r(Ezr,"deit"),Ezr.forEach(t),Xfo=r(VCe," \u2014 "),wP=n(VCe,"A",{href:!0});var Czr=s(wP);zfo=r(Czr,"DeiTModel"),Czr.forEach(t),Qfo=r(VCe," (DeiT model)"),VCe.forEach(t),Wfo=i($),op=n($,"LI",{});var XCe=s(op);wae=n(XCe,"STRONG",{});var wzr=s(wae);Hfo=r(wzr,"detr"),wzr.forEach(t),Ufo=r(XCe," \u2014 "),AP=n(XCe,"A",{href:!0});var Azr=s(AP);Jfo=r(Azr,"DetrModel"),Azr.forEach(t),Yfo=r(XCe," (DETR model)"),XCe.forEach(t),Kfo=i($),rp=n($,"LI",{});var zCe=s(rp);Aae=n(zCe,"STRONG",{});var yzr=s(Aae);Zfo=r(yzr,"distilbert"),yzr.forEach(t),emo=r(zCe," \u2014 "),yP=n(zCe,"A",{href:!0});var Lzr=s(yP);omo=r(Lzr,"DistilBertModel"),Lzr.forEach(t),rmo=r(zCe," (DistilBERT model)"),zCe.forEach(t),tmo=i($),tp=n($,"LI",{});var QCe=s(tp);yae=n(QCe,"STRONG",{});var xzr=s(yae);amo=r(xzr,"dpr"),xzr.forEach(t),nmo=r(QCe," \u2014 "),LP=n(QCe,"A",{href:!0});var $zr=s(LP);smo=r($zr,"DPRQuestionEncoder"),$zr.forEach(t),lmo=r(QCe," (DPR model)"),QCe.forEach(t),imo=i($),ap=n($,"LI",{});var WCe=s(ap);Lae=n(WCe,"STRONG",{});var kzr=s(Lae);dmo=r(kzr,"dpt"),kzr.forEach(t),cmo=r(WCe," \u2014 "),xP=n(WCe,"A",{href:!0});var Szr=s(xP);fmo=r(Szr,"DPTModel"),Szr.forEach(t),mmo=r(WCe," (DPT model)"),WCe.forEach(t),gmo=i($),np=n($,"LI",{});var HCe=s(np);xae=n(HCe,"STRONG",{});var Rzr=s(xae);hmo=r(Rzr,"electra"),Rzr.forEach(t),pmo=r(HCe," \u2014 "),$P=n(HCe,"A",{href:!0});var Bzr=s($P);umo=r(Bzr,"ElectraModel"),Bzr.forEach(t),_mo=r(HCe," (ELECTRA model)"),HCe.forEach(t),bmo=i($),sp=n($,"LI",{});var UCe=s(sp);$ae=n(UCe,"STRONG",{});var Pzr=s($ae);vmo=r(Pzr,"flaubert"),Pzr.forEach(t),Fmo=r(UCe," \u2014 "),kP=n(UCe,"A",{href:!0});var Izr=s(kP);Tmo=r(Izr,"FlaubertModel"),Izr.forEach(t),Mmo=r(UCe," (FlauBERT model)"),UCe.forEach(t),Emo=i($),lp=n($,"LI",{});var JCe=s(lp);kae=n(JCe,"STRONG",{});var qzr=s(kae);Cmo=r(qzr,"fnet"),qzr.forEach(t),wmo=r(JCe," \u2014 "),SP=n(JCe,"A",{href:!0});var Nzr=s(SP);Amo=r(Nzr,"FNetModel"),Nzr.forEach(t),ymo=r(JCe," (FNet model)"),JCe.forEach(t),Lmo=i($),ip=n($,"LI",{});var YCe=s(ip);Sae=n(YCe,"STRONG",{});var jzr=s(Sae);xmo=r(jzr,"fsmt"),jzr.forEach(t),$mo=r(YCe," \u2014 "),RP=n(YCe,"A",{href:!0});var Dzr=s(RP);kmo=r(Dzr,"FSMTModel"),Dzr.forEach(t),Smo=r(YCe," (FairSeq Machine-Translation model)"),YCe.forEach(t),Rmo=i($),Ls=n($,"LI",{});var S9=s(Ls);Rae=n(S9,"STRONG",{});var Gzr=s(Rae);Bmo=r(Gzr,"funnel"),Gzr.forEach(t),Pmo=r(S9," \u2014 "),BP=n(S9,"A",{href:!0});var Ozr=s(BP);Imo=r(Ozr,"FunnelModel"),Ozr.forEach(t),qmo=r(S9," or "),PP=n(S9,"A",{href:!0});var Vzr=s(PP);Nmo=r(Vzr,"FunnelBaseModel"),Vzr.forEach(t),jmo=r(S9," (Funnel Transformer model)"),S9.forEach(t),Dmo=i($),dp=n($,"LI",{});var KCe=s(dp);Bae=n(KCe,"STRONG",{});var Xzr=s(Bae);Gmo=r(Xzr,"glpn"),Xzr.forEach(t),Omo=r(KCe," \u2014 "),IP=n(KCe,"A",{href:!0});var zzr=s(IP);Vmo=r(zzr,"GLPNModel"),zzr.forEach(t),Xmo=r(KCe," (GLPN model)"),KCe.forEach(t),zmo=i($),cp=n($,"LI",{});var ZCe=s(cp);Pae=n(ZCe,"STRONG",{});var Qzr=s(Pae);Qmo=r(Qzr,"gpt2"),Qzr.forEach(t),Wmo=r(ZCe," \u2014 "),qP=n(ZCe,"A",{href:!0});var Wzr=s(qP);Hmo=r(Wzr,"GPT2Model"),Wzr.forEach(t),Umo=r(ZCe," (OpenAI GPT-2 model)"),ZCe.forEach(t),Jmo=i($),fp=n($,"LI",{});var e3e=s(fp);Iae=n(e3e,"STRONG",{});var Hzr=s(Iae);Ymo=r(Hzr,"gpt_neo"),Hzr.forEach(t),Kmo=r(e3e," \u2014 "),NP=n(e3e,"A",{href:!0});var Uzr=s(NP);Zmo=r(Uzr,"GPTNeoModel"),Uzr.forEach(t),ego=r(e3e," (GPT Neo model)"),e3e.forEach(t),ogo=i($),mp=n($,"LI",{});var o3e=s(mp);qae=n(o3e,"STRONG",{});var Jzr=s(qae);rgo=r(Jzr,"gptj"),Jzr.forEach(t),tgo=r(o3e," \u2014 "),jP=n(o3e,"A",{href:!0});var Yzr=s(jP);ago=r(Yzr,"GPTJModel"),Yzr.forEach(t),ngo=r(o3e," (GPT-J model)"),o3e.forEach(t),sgo=i($),gp=n($,"LI",{});var r3e=s(gp);Nae=n(r3e,"STRONG",{});var Kzr=s(Nae);lgo=r(Kzr,"hubert"),Kzr.forEach(t),igo=r(r3e," \u2014 "),DP=n(r3e,"A",{href:!0});var Zzr=s(DP);dgo=r(Zzr,"HubertModel"),Zzr.forEach(t),cgo=r(r3e," (Hubert model)"),r3e.forEach(t),fgo=i($),hp=n($,"LI",{});var t3e=s(hp);jae=n(t3e,"STRONG",{});var eQr=s(jae);mgo=r(eQr,"ibert"),eQr.forEach(t),ggo=r(t3e," \u2014 "),GP=n(t3e,"A",{href:!0});var oQr=s(GP);hgo=r(oQr,"IBertModel"),oQr.forEach(t),pgo=r(t3e," (I-BERT model)"),t3e.forEach(t),ugo=i($),pp=n($,"LI",{});var a3e=s(pp);Dae=n(a3e,"STRONG",{});var rQr=s(Dae);_go=r(rQr,"imagegpt"),rQr.forEach(t),bgo=r(a3e," \u2014 "),OP=n(a3e,"A",{href:!0});var tQr=s(OP);vgo=r(tQr,"ImageGPTModel"),tQr.forEach(t),Fgo=r(a3e," (ImageGPT model)"),a3e.forEach(t),Tgo=i($),up=n($,"LI",{});var n3e=s(up);Gae=n(n3e,"STRONG",{});var aQr=s(Gae);Mgo=r(aQr,"layoutlm"),aQr.forEach(t),Ego=r(n3e," \u2014 "),VP=n(n3e,"A",{href:!0});var nQr=s(VP);Cgo=r(nQr,"LayoutLMModel"),nQr.forEach(t),wgo=r(n3e," (LayoutLM model)"),n3e.forEach(t),Ago=i($),_p=n($,"LI",{});var s3e=s(_p);Oae=n(s3e,"STRONG",{});var sQr=s(Oae);ygo=r(sQr,"layoutlmv2"),sQr.forEach(t),Lgo=r(s3e," \u2014 "),XP=n(s3e,"A",{href:!0});var lQr=s(XP);xgo=r(lQr,"LayoutLMv2Model"),lQr.forEach(t),$go=r(s3e," (LayoutLMv2 model)"),s3e.forEach(t),kgo=i($),bp=n($,"LI",{});var l3e=s(bp);Vae=n(l3e,"STRONG",{});var iQr=s(Vae);Sgo=r(iQr,"led"),iQr.forEach(t),Rgo=r(l3e," \u2014 "),zP=n(l3e,"A",{href:!0});var dQr=s(zP);Bgo=r(dQr,"LEDModel"),dQr.forEach(t),Pgo=r(l3e," (LED model)"),l3e.forEach(t),Igo=i($),vp=n($,"LI",{});var i3e=s(vp);Xae=n(i3e,"STRONG",{});var cQr=s(Xae);qgo=r(cQr,"longformer"),cQr.forEach(t),Ngo=r(i3e," \u2014 "),QP=n(i3e,"A",{href:!0});var fQr=s(QP);jgo=r(fQr,"LongformerModel"),fQr.forEach(t),Dgo=r(i3e," (Longformer model)"),i3e.forEach(t),Ggo=i($),Fp=n($,"LI",{});var d3e=s(Fp);zae=n(d3e,"STRONG",{});var mQr=s(zae);Ogo=r(mQr,"luke"),mQr.forEach(t),Vgo=r(d3e," \u2014 "),WP=n(d3e,"A",{href:!0});var gQr=s(WP);Xgo=r(gQr,"LukeModel"),gQr.forEach(t),zgo=r(d3e," (LUKE model)"),d3e.forEach(t),Qgo=i($),Tp=n($,"LI",{});var c3e=s(Tp);Qae=n(c3e,"STRONG",{});var hQr=s(Qae);Wgo=r(hQr,"lxmert"),hQr.forEach(t),Hgo=r(c3e," \u2014 "),HP=n(c3e,"A",{href:!0});var pQr=s(HP);Ugo=r(pQr,"LxmertModel"),pQr.forEach(t),Jgo=r(c3e," (LXMERT model)"),c3e.forEach(t),Ygo=i($),Mp=n($,"LI",{});var f3e=s(Mp);Wae=n(f3e,"STRONG",{});var uQr=s(Wae);Kgo=r(uQr,"m2m_100"),uQr.forEach(t),Zgo=r(f3e," \u2014 "),UP=n(f3e,"A",{href:!0});var _Qr=s(UP);eho=r(_Qr,"M2M100Model"),_Qr.forEach(t),oho=r(f3e," (M2M100 model)"),f3e.forEach(t),rho=i($),Ep=n($,"LI",{});var m3e=s(Ep);Hae=n(m3e,"STRONG",{});var bQr=s(Hae);tho=r(bQr,"marian"),bQr.forEach(t),aho=r(m3e," \u2014 "),JP=n(m3e,"A",{href:!0});var vQr=s(JP);nho=r(vQr,"MarianModel"),vQr.forEach(t),sho=r(m3e," (Marian model)"),m3e.forEach(t),lho=i($),Cp=n($,"LI",{});var g3e=s(Cp);Uae=n(g3e,"STRONG",{});var FQr=s(Uae);iho=r(FQr,"maskformer"),FQr.forEach(t),dho=r(g3e," \u2014 "),YP=n(g3e,"A",{href:!0});var TQr=s(YP);cho=r(TQr,"MaskFormerModel"),TQr.forEach(t),fho=r(g3e," (MaskFormer model)"),g3e.forEach(t),mho=i($),wp=n($,"LI",{});var h3e=s(wp);Jae=n(h3e,"STRONG",{});var MQr=s(Jae);gho=r(MQr,"mbart"),MQr.forEach(t),hho=r(h3e," \u2014 "),KP=n(h3e,"A",{href:!0});var EQr=s(KP);pho=r(EQr,"MBartModel"),EQr.forEach(t),uho=r(h3e," (mBART model)"),h3e.forEach(t),_ho=i($),Ap=n($,"LI",{});var p3e=s(Ap);Yae=n(p3e,"STRONG",{});var CQr=s(Yae);bho=r(CQr,"megatron-bert"),CQr.forEach(t),vho=r(p3e," \u2014 "),ZP=n(p3e,"A",{href:!0});var wQr=s(ZP);Fho=r(wQr,"MegatronBertModel"),wQr.forEach(t),Tho=r(p3e," (MegatronBert model)"),p3e.forEach(t),Mho=i($),yp=n($,"LI",{});var u3e=s(yp);Kae=n(u3e,"STRONG",{});var AQr=s(Kae);Eho=r(AQr,"mobilebert"),AQr.forEach(t),Cho=r(u3e," \u2014 "),eI=n(u3e,"A",{href:!0});var yQr=s(eI);who=r(yQr,"MobileBertModel"),yQr.forEach(t),Aho=r(u3e," (MobileBERT model)"),u3e.forEach(t),yho=i($),Lp=n($,"LI",{});var _3e=s(Lp);Zae=n(_3e,"STRONG",{});var LQr=s(Zae);Lho=r(LQr,"mpnet"),LQr.forEach(t),xho=r(_3e," \u2014 "),oI=n(_3e,"A",{href:!0});var xQr=s(oI);$ho=r(xQr,"MPNetModel"),xQr.forEach(t),kho=r(_3e," (MPNet model)"),_3e.forEach(t),Sho=i($),xp=n($,"LI",{});var b3e=s(xp);ene=n(b3e,"STRONG",{});var $Qr=s(ene);Rho=r($Qr,"mt5"),$Qr.forEach(t),Bho=r(b3e," \u2014 "),rI=n(b3e,"A",{href:!0});var kQr=s(rI);Pho=r(kQr,"MT5Model"),kQr.forEach(t),Iho=r(b3e," (mT5 model)"),b3e.forEach(t),qho=i($),$p=n($,"LI",{});var v3e=s($p);one=n(v3e,"STRONG",{});var SQr=s(one);Nho=r(SQr,"nystromformer"),SQr.forEach(t),jho=r(v3e," \u2014 "),tI=n(v3e,"A",{href:!0});var RQr=s(tI);Dho=r(RQr,"NystromformerModel"),RQr.forEach(t),Gho=r(v3e," (Nystromformer model)"),v3e.forEach(t),Oho=i($),kp=n($,"LI",{});var F3e=s(kp);rne=n(F3e,"STRONG",{});var BQr=s(rne);Vho=r(BQr,"openai-gpt"),BQr.forEach(t),Xho=r(F3e," \u2014 "),aI=n(F3e,"A",{href:!0});var PQr=s(aI);zho=r(PQr,"OpenAIGPTModel"),PQr.forEach(t),Qho=r(F3e," (OpenAI GPT model)"),F3e.forEach(t),Who=i($),Sp=n($,"LI",{});var T3e=s(Sp);tne=n(T3e,"STRONG",{});var IQr=s(tne);Hho=r(IQr,"pegasus"),IQr.forEach(t),Uho=r(T3e," \u2014 "),nI=n(T3e,"A",{href:!0});var qQr=s(nI);Jho=r(qQr,"PegasusModel"),qQr.forEach(t),Yho=r(T3e," (Pegasus model)"),T3e.forEach(t),Kho=i($),Rp=n($,"LI",{});var M3e=s(Rp);ane=n(M3e,"STRONG",{});var NQr=s(ane);Zho=r(NQr,"perceiver"),NQr.forEach(t),epo=r(M3e," \u2014 "),sI=n(M3e,"A",{href:!0});var jQr=s(sI);opo=r(jQr,"PerceiverModel"),jQr.forEach(t),rpo=r(M3e," (Perceiver model)"),M3e.forEach(t),tpo=i($),Bp=n($,"LI",{});var E3e=s(Bp);nne=n(E3e,"STRONG",{});var DQr=s(nne);apo=r(DQr,"plbart"),DQr.forEach(t),npo=r(E3e," \u2014 "),lI=n(E3e,"A",{href:!0});var GQr=s(lI);spo=r(GQr,"PLBartModel"),GQr.forEach(t),lpo=r(E3e," (PLBart model)"),E3e.forEach(t),ipo=i($),Pp=n($,"LI",{});var C3e=s(Pp);sne=n(C3e,"STRONG",{});var OQr=s(sne);dpo=r(OQr,"poolformer"),OQr.forEach(t),cpo=r(C3e," \u2014 "),iI=n(C3e,"A",{href:!0});var VQr=s(iI);fpo=r(VQr,"PoolFormerModel"),VQr.forEach(t),mpo=r(C3e," (PoolFormer model)"),C3e.forEach(t),gpo=i($),Ip=n($,"LI",{});var w3e=s(Ip);lne=n(w3e,"STRONG",{});var XQr=s(lne);hpo=r(XQr,"prophetnet"),XQr.forEach(t),ppo=r(w3e," \u2014 "),dI=n(w3e,"A",{href:!0});var zQr=s(dI);upo=r(zQr,"ProphetNetModel"),zQr.forEach(t),_po=r(w3e," (ProphetNet model)"),w3e.forEach(t),bpo=i($),qp=n($,"LI",{});var A3e=s(qp);ine=n(A3e,"STRONG",{});var QQr=s(ine);vpo=r(QQr,"qdqbert"),QQr.forEach(t),Fpo=r(A3e," \u2014 "),cI=n(A3e,"A",{href:!0});var WQr=s(cI);Tpo=r(WQr,"QDQBertModel"),WQr.forEach(t),Mpo=r(A3e," (QDQBert model)"),A3e.forEach(t),Epo=i($),Np=n($,"LI",{});var y3e=s(Np);dne=n(y3e,"STRONG",{});var HQr=s(dne);Cpo=r(HQr,"reformer"),HQr.forEach(t),wpo=r(y3e," \u2014 "),fI=n(y3e,"A",{href:!0});var UQr=s(fI);Apo=r(UQr,"ReformerModel"),UQr.forEach(t),ypo=r(y3e," (Reformer model)"),y3e.forEach(t),Lpo=i($),jp=n($,"LI",{});var L3e=s(jp);cne=n(L3e,"STRONG",{});var JQr=s(cne);xpo=r(JQr,"regnet"),JQr.forEach(t),$po=r(L3e," \u2014 "),mI=n(L3e,"A",{href:!0});var YQr=s(mI);kpo=r(YQr,"RegNetModel"),YQr.forEach(t),Spo=r(L3e," (RegNet model)"),L3e.forEach(t),Rpo=i($),Dp=n($,"LI",{});var x3e=s(Dp);fne=n(x3e,"STRONG",{});var KQr=s(fne);Bpo=r(KQr,"rembert"),KQr.forEach(t),Ppo=r(x3e," \u2014 "),gI=n(x3e,"A",{href:!0});var ZQr=s(gI);Ipo=r(ZQr,"RemBertModel"),ZQr.forEach(t),qpo=r(x3e," (RemBERT model)"),x3e.forEach(t),Npo=i($),Gp=n($,"LI",{});var $3e=s(Gp);mne=n($3e,"STRONG",{});var eWr=s(mne);jpo=r(eWr,"resnet"),eWr.forEach(t),Dpo=r($3e," \u2014 "),hI=n($3e,"A",{href:!0});var oWr=s(hI);Gpo=r(oWr,"ResNetModel"),oWr.forEach(t),Opo=r($3e," (ResNet model)"),$3e.forEach(t),Vpo=i($),Op=n($,"LI",{});var k3e=s(Op);gne=n(k3e,"STRONG",{});var rWr=s(gne);Xpo=r(rWr,"retribert"),rWr.forEach(t),zpo=r(k3e," \u2014 "),pI=n(k3e,"A",{href:!0});var tWr=s(pI);Qpo=r(tWr,"RetriBertModel"),tWr.forEach(t),Wpo=r(k3e," (RetriBERT model)"),k3e.forEach(t),Hpo=i($),Vp=n($,"LI",{});var S3e=s(Vp);hne=n(S3e,"STRONG",{});var aWr=s(hne);Upo=r(aWr,"roberta"),aWr.forEach(t),Jpo=r(S3e," \u2014 "),uI=n(S3e,"A",{href:!0});var nWr=s(uI);Ypo=r(nWr,"RobertaModel"),nWr.forEach(t),Kpo=r(S3e," (RoBERTa model)"),S3e.forEach(t),Zpo=i($),Xp=n($,"LI",{});var R3e=s(Xp);pne=n(R3e,"STRONG",{});var sWr=s(pne);euo=r(sWr,"roformer"),sWr.forEach(t),ouo=r(R3e," \u2014 "),_I=n(R3e,"A",{href:!0});var lWr=s(_I);ruo=r(lWr,"RoFormerModel"),lWr.forEach(t),tuo=r(R3e," (RoFormer model)"),R3e.forEach(t),auo=i($),zp=n($,"LI",{});var B3e=s(zp);une=n(B3e,"STRONG",{});var iWr=s(une);nuo=r(iWr,"segformer"),iWr.forEach(t),suo=r(B3e," \u2014 "),bI=n(B3e,"A",{href:!0});var dWr=s(bI);luo=r(dWr,"SegformerModel"),dWr.forEach(t),iuo=r(B3e," (SegFormer model)"),B3e.forEach(t),duo=i($),Qp=n($,"LI",{});var P3e=s(Qp);_ne=n(P3e,"STRONG",{});var cWr=s(_ne);cuo=r(cWr,"sew"),cWr.forEach(t),fuo=r(P3e," \u2014 "),vI=n(P3e,"A",{href:!0});var fWr=s(vI);muo=r(fWr,"SEWModel"),fWr.forEach(t),guo=r(P3e," (SEW model)"),P3e.forEach(t),huo=i($),Wp=n($,"LI",{});var I3e=s(Wp);bne=n(I3e,"STRONG",{});var mWr=s(bne);puo=r(mWr,"sew-d"),mWr.forEach(t),uuo=r(I3e," \u2014 "),FI=n(I3e,"A",{href:!0});var gWr=s(FI);_uo=r(gWr,"SEWDModel"),gWr.forEach(t),buo=r(I3e," (SEW-D model)"),I3e.forEach(t),vuo=i($),Hp=n($,"LI",{});var q3e=s(Hp);vne=n(q3e,"STRONG",{});var hWr=s(vne);Fuo=r(hWr,"speech_to_text"),hWr.forEach(t),Tuo=r(q3e," \u2014 "),TI=n(q3e,"A",{href:!0});var pWr=s(TI);Muo=r(pWr,"Speech2TextModel"),pWr.forEach(t),Euo=r(q3e," (Speech2Text model)"),q3e.forEach(t),Cuo=i($),Up=n($,"LI",{});var N3e=s(Up);Fne=n(N3e,"STRONG",{});var uWr=s(Fne);wuo=r(uWr,"splinter"),uWr.forEach(t),Auo=r(N3e," \u2014 "),MI=n(N3e,"A",{href:!0});var _Wr=s(MI);yuo=r(_Wr,"SplinterModel"),_Wr.forEach(t),Luo=r(N3e," (Splinter model)"),N3e.forEach(t),xuo=i($),Jp=n($,"LI",{});var j3e=s(Jp);Tne=n(j3e,"STRONG",{});var bWr=s(Tne);$uo=r(bWr,"squeezebert"),bWr.forEach(t),kuo=r(j3e," \u2014 "),EI=n(j3e,"A",{href:!0});var vWr=s(EI);Suo=r(vWr,"SqueezeBertModel"),vWr.forEach(t),Ruo=r(j3e," (SqueezeBERT model)"),j3e.forEach(t),Buo=i($),Yp=n($,"LI",{});var D3e=s(Yp);Mne=n(D3e,"STRONG",{});var FWr=s(Mne);Puo=r(FWr,"swin"),FWr.forEach(t),Iuo=r(D3e," \u2014 "),CI=n(D3e,"A",{href:!0});var TWr=s(CI);quo=r(TWr,"SwinModel"),TWr.forEach(t),Nuo=r(D3e," (Swin model)"),D3e.forEach(t),juo=i($),Kp=n($,"LI",{});var G3e=s(Kp);Ene=n(G3e,"STRONG",{});var MWr=s(Ene);Duo=r(MWr,"t5"),MWr.forEach(t),Guo=r(G3e," \u2014 "),wI=n(G3e,"A",{href:!0});var EWr=s(wI);Ouo=r(EWr,"T5Model"),EWr.forEach(t),Vuo=r(G3e," (T5 model)"),G3e.forEach(t),Xuo=i($),Zp=n($,"LI",{});var O3e=s(Zp);Cne=n(O3e,"STRONG",{});var CWr=s(Cne);zuo=r(CWr,"tapas"),CWr.forEach(t),Quo=r(O3e," \u2014 "),AI=n(O3e,"A",{href:!0});var wWr=s(AI);Wuo=r(wWr,"TapasModel"),wWr.forEach(t),Huo=r(O3e," (TAPAS model)"),O3e.forEach(t),Uuo=i($),eu=n($,"LI",{});var V3e=s(eu);wne=n(V3e,"STRONG",{});var AWr=s(wne);Juo=r(AWr,"transfo-xl"),AWr.forEach(t),Yuo=r(V3e," \u2014 "),yI=n(V3e,"A",{href:!0});var yWr=s(yI);Kuo=r(yWr,"TransfoXLModel"),yWr.forEach(t),Zuo=r(V3e," (Transformer-XL model)"),V3e.forEach(t),e_o=i($),ou=n($,"LI",{});var X3e=s(ou);Ane=n(X3e,"STRONG",{});var LWr=s(Ane);o_o=r(LWr,"unispeech"),LWr.forEach(t),r_o=r(X3e," \u2014 "),LI=n(X3e,"A",{href:!0});var xWr=s(LI);t_o=r(xWr,"UniSpeechModel"),xWr.forEach(t),a_o=r(X3e," (UniSpeech model)"),X3e.forEach(t),n_o=i($),ru=n($,"LI",{});var z3e=s(ru);yne=n(z3e,"STRONG",{});var $Wr=s(yne);s_o=r($Wr,"unispeech-sat"),$Wr.forEach(t),l_o=r(z3e," \u2014 "),xI=n(z3e,"A",{href:!0});var kWr=s(xI);i_o=r(kWr,"UniSpeechSatModel"),kWr.forEach(t),d_o=r(z3e," (UniSpeechSat model)"),z3e.forEach(t),c_o=i($),tu=n($,"LI",{});var Q3e=s(tu);Lne=n(Q3e,"STRONG",{});var SWr=s(Lne);f_o=r(SWr,"van"),SWr.forEach(t),m_o=r(Q3e," \u2014 "),$I=n(Q3e,"A",{href:!0});var RWr=s($I);g_o=r(RWr,"VanModel"),RWr.forEach(t),h_o=r(Q3e," (VAN model)"),Q3e.forEach(t),p_o=i($),au=n($,"LI",{});var W3e=s(au);xne=n(W3e,"STRONG",{});var BWr=s(xne);u_o=r(BWr,"vilt"),BWr.forEach(t),__o=r(W3e," \u2014 "),kI=n(W3e,"A",{href:!0});var PWr=s(kI);b_o=r(PWr,"ViltModel"),PWr.forEach(t),v_o=r(W3e," (ViLT model)"),W3e.forEach(t),F_o=i($),nu=n($,"LI",{});var H3e=s(nu);$ne=n(H3e,"STRONG",{});var IWr=s($ne);T_o=r(IWr,"vision-text-dual-encoder"),IWr.forEach(t),M_o=r(H3e," \u2014 "),SI=n(H3e,"A",{href:!0});var qWr=s(SI);E_o=r(qWr,"VisionTextDualEncoderModel"),qWr.forEach(t),C_o=r(H3e," (VisionTextDualEncoder model)"),H3e.forEach(t),w_o=i($),su=n($,"LI",{});var U3e=s(su);kne=n(U3e,"STRONG",{});var NWr=s(kne);A_o=r(NWr,"visual_bert"),NWr.forEach(t),y_o=r(U3e," \u2014 "),RI=n(U3e,"A",{href:!0});var jWr=s(RI);L_o=r(jWr,"VisualBertModel"),jWr.forEach(t),x_o=r(U3e," (VisualBert model)"),U3e.forEach(t),$_o=i($),lu=n($,"LI",{});var J3e=s(lu);Sne=n(J3e,"STRONG",{});var DWr=s(Sne);k_o=r(DWr,"vit"),DWr.forEach(t),S_o=r(J3e," \u2014 "),BI=n(J3e,"A",{href:!0});var GWr=s(BI);R_o=r(GWr,"ViTModel"),GWr.forEach(t),B_o=r(J3e," (ViT model)"),J3e.forEach(t),P_o=i($),iu=n($,"LI",{});var Y3e=s(iu);Rne=n(Y3e,"STRONG",{});var OWr=s(Rne);I_o=r(OWr,"vit_mae"),OWr.forEach(t),q_o=r(Y3e," \u2014 "),PI=n(Y3e,"A",{href:!0});var VWr=s(PI);N_o=r(VWr,"ViTMAEModel"),VWr.forEach(t),j_o=r(Y3e," (ViTMAE model)"),Y3e.forEach(t),D_o=i($),du=n($,"LI",{});var K3e=s(du);Bne=n(K3e,"STRONG",{});var XWr=s(Bne);G_o=r(XWr,"wav2vec2"),XWr.forEach(t),O_o=r(K3e," \u2014 "),II=n(K3e,"A",{href:!0});var zWr=s(II);V_o=r(zWr,"Wav2Vec2Model"),zWr.forEach(t),X_o=r(K3e," (Wav2Vec2 model)"),K3e.forEach(t),z_o=i($),cu=n($,"LI",{});var Z3e=s(cu);Pne=n(Z3e,"STRONG",{});var QWr=s(Pne);Q_o=r(QWr,"wavlm"),QWr.forEach(t),W_o=r(Z3e," \u2014 "),qI=n(Z3e,"A",{href:!0});var WWr=s(qI);H_o=r(WWr,"WavLMModel"),WWr.forEach(t),U_o=r(Z3e," (WavLM model)"),Z3e.forEach(t),J_o=i($),fu=n($,"LI",{});var ewe=s(fu);Ine=n(ewe,"STRONG",{});var HWr=s(Ine);Y_o=r(HWr,"xglm"),HWr.forEach(t),K_o=r(ewe," \u2014 "),NI=n(ewe,"A",{href:!0});var UWr=s(NI);Z_o=r(UWr,"XGLMModel"),UWr.forEach(t),e2o=r(ewe," (XGLM model)"),ewe.forEach(t),o2o=i($),mu=n($,"LI",{});var owe=s(mu);qne=n(owe,"STRONG",{});var JWr=s(qne);r2o=r(JWr,"xlm"),JWr.forEach(t),t2o=r(owe," \u2014 "),jI=n(owe,"A",{href:!0});var YWr=s(jI);a2o=r(YWr,"XLMModel"),YWr.forEach(t),n2o=r(owe," (XLM model)"),owe.forEach(t),s2o=i($),gu=n($,"LI",{});var rwe=s(gu);Nne=n(rwe,"STRONG",{});var KWr=s(Nne);l2o=r(KWr,"xlm-prophetnet"),KWr.forEach(t),i2o=r(rwe," \u2014 "),DI=n(rwe,"A",{href:!0});var ZWr=s(DI);d2o=r(ZWr,"XLMProphetNetModel"),ZWr.forEach(t),c2o=r(rwe," (XLMProphetNet model)"),rwe.forEach(t),f2o=i($),hu=n($,"LI",{});var twe=s(hu);jne=n(twe,"STRONG",{});var eHr=s(jne);m2o=r(eHr,"xlm-roberta"),eHr.forEach(t),g2o=r(twe," \u2014 "),GI=n(twe,"A",{href:!0});var oHr=s(GI);h2o=r(oHr,"XLMRobertaModel"),oHr.forEach(t),p2o=r(twe," (XLM-RoBERTa model)"),twe.forEach(t),u2o=i($),pu=n($,"LI",{});var awe=s(pu);Dne=n(awe,"STRONG",{});var rHr=s(Dne);_2o=r(rHr,"xlm-roberta-xl"),rHr.forEach(t),b2o=r(awe," \u2014 "),OI=n(awe,"A",{href:!0});var tHr=s(OI);v2o=r(tHr,"XLMRobertaXLModel"),tHr.forEach(t),F2o=r(awe," (XLM-RoBERTa-XL model)"),awe.forEach(t),T2o=i($),uu=n($,"LI",{});var nwe=s(uu);Gne=n(nwe,"STRONG",{});var aHr=s(Gne);M2o=r(aHr,"xlnet"),aHr.forEach(t),E2o=r(nwe," \u2014 "),VI=n(nwe,"A",{href:!0});var nHr=s(VI);C2o=r(nHr,"XLNetModel"),nHr.forEach(t),w2o=r(nwe," (XLNet model)"),nwe.forEach(t),A2o=i($),_u=n($,"LI",{});var swe=s(_u);One=n(swe,"STRONG",{});var sHr=s(One);y2o=r(sHr,"yolos"),sHr.forEach(t),L2o=r(swe," \u2014 "),XI=n(swe,"A",{href:!0});var lHr=s(XI);x2o=r(lHr,"YolosModel"),lHr.forEach(t),$2o=r(swe," (YOLOS model)"),swe.forEach(t),k2o=i($),bu=n($,"LI",{});var lwe=s(bu);Vne=n(lwe,"STRONG",{});var iHr=s(Vne);S2o=r(iHr,"yoso"),iHr.forEach(t),R2o=r(lwe," \u2014 "),zI=n(lwe,"A",{href:!0});var dHr=s(zI);B2o=r(dHr,"YosoModel"),dHr.forEach(t),P2o=r(lwe," (YOSO model)"),lwe.forEach(t),$.forEach(t),I2o=i(Jt),vu=n(Jt,"P",{});var iwe=s(vu);q2o=r(iwe,"The model is set in evaluation mode by default using "),Xne=n(iwe,"CODE",{});var cHr=s(Xne);N2o=r(cHr,"model.eval()"),cHr.forEach(t),j2o=r(iwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zne=n(iwe,"CODE",{});var fHr=s(zne);D2o=r(fHr,"model.train()"),fHr.forEach(t),iwe.forEach(t),G2o=i(Jt),T(Fu.$$.fragment,Jt),Jt.forEach(t),Ps.forEach(t),xBe=i(f),bi=n(f,"H2",{class:!0});var kIe=s(bi);Tu=n(kIe,"A",{id:!0,class:!0,href:!0});var mHr=s(Tu);Qne=n(mHr,"SPAN",{});var gHr=s(Qne);T(o0.$$.fragment,gHr),gHr.forEach(t),mHr.forEach(t),O2o=i(kIe),Wne=n(kIe,"SPAN",{});var hHr=s(Wne);V2o=r(hHr,"AutoModelForPreTraining"),hHr.forEach(t),kIe.forEach(t),$Be=i(f),xo=n(f,"DIV",{class:!0});var Is=s(xo);T(r0.$$.fragment,Is),X2o=i(Is),vi=n(Is,"P",{});var _Y=s(vi);z2o=r(_Y,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),QI=n(_Y,"A",{href:!0});var pHr=s(QI);Q2o=r(pHr,"from_pretrained()"),pHr.forEach(t),W2o=r(_Y," class method or the "),WI=n(_Y,"A",{href:!0});var uHr=s(WI);H2o=r(uHr,"from_config()"),uHr.forEach(t),U2o=r(_Y,` class
method.`),_Y.forEach(t),J2o=i(Is),t0=n(Is,"P",{});var SIe=s(t0);Y2o=r(SIe,"This class cannot be instantiated directly using "),Hne=n(SIe,"CODE",{});var _Hr=s(Hne);K2o=r(_Hr,"__init__()"),_Hr.forEach(t),Z2o=r(SIe," (throws an error)."),SIe.forEach(t),e6o=i(Is),et=n(Is,"DIV",{class:!0});var k3=s(et);T(a0.$$.fragment,k3),o6o=i(k3),Une=n(k3,"P",{});var bHr=s(Une);r6o=r(bHr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),bHr.forEach(t),t6o=i(k3),Fi=n(k3,"P",{});var bY=s(Fi);a6o=r(bY,`Note:
Loading a model from its configuration file does `),Jne=n(bY,"STRONG",{});var vHr=s(Jne);n6o=r(vHr,"not"),vHr.forEach(t),s6o=r(bY,` load the model weights. It only affects the
model\u2019s configuration. Use `),HI=n(bY,"A",{href:!0});var FHr=s(HI);l6o=r(FHr,"from_pretrained()"),FHr.forEach(t),i6o=r(bY," to load the model weights."),bY.forEach(t),d6o=i(k3),T(Mu.$$.fragment,k3),k3.forEach(t),c6o=i(Is),Ue=n(Is,"DIV",{class:!0});var Yt=s(Ue);T(n0.$$.fragment,Yt),f6o=i(Yt),Yne=n(Yt,"P",{});var THr=s(Yne);m6o=r(THr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),THr.forEach(t),g6o=i(Yt),Ca=n(Yt,"P",{});var S3=s(Ca);h6o=r(S3,"The model class to instantiate is selected based on the "),Kne=n(S3,"CODE",{});var MHr=s(Kne);p6o=r(MHr,"model_type"),MHr.forEach(t),u6o=r(S3,` property of the config object (either
passed as an argument or loaded from `),Zne=n(S3,"CODE",{});var EHr=s(Zne);_6o=r(EHr,"pretrained_model_name_or_path"),EHr.forEach(t),b6o=r(S3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ese=n(S3,"CODE",{});var CHr=s(ese);v6o=r(CHr,"pretrained_model_name_or_path"),CHr.forEach(t),F6o=r(S3,":"),S3.forEach(t),T6o=i(Yt),G=n(Yt,"UL",{});var V=s(G);Eu=n(V,"LI",{});var dwe=s(Eu);ose=n(dwe,"STRONG",{});var wHr=s(ose);M6o=r(wHr,"albert"),wHr.forEach(t),E6o=r(dwe," \u2014 "),UI=n(dwe,"A",{href:!0});var AHr=s(UI);C6o=r(AHr,"AlbertForPreTraining"),AHr.forEach(t),w6o=r(dwe," (ALBERT model)"),dwe.forEach(t),A6o=i(V),Cu=n(V,"LI",{});var cwe=s(Cu);rse=n(cwe,"STRONG",{});var yHr=s(rse);y6o=r(yHr,"bart"),yHr.forEach(t),L6o=r(cwe," \u2014 "),JI=n(cwe,"A",{href:!0});var LHr=s(JI);x6o=r(LHr,"BartForConditionalGeneration"),LHr.forEach(t),$6o=r(cwe," (BART model)"),cwe.forEach(t),k6o=i(V),wu=n(V,"LI",{});var fwe=s(wu);tse=n(fwe,"STRONG",{});var xHr=s(tse);S6o=r(xHr,"bert"),xHr.forEach(t),R6o=r(fwe," \u2014 "),YI=n(fwe,"A",{href:!0});var $Hr=s(YI);B6o=r($Hr,"BertForPreTraining"),$Hr.forEach(t),P6o=r(fwe," (BERT model)"),fwe.forEach(t),I6o=i(V),Au=n(V,"LI",{});var mwe=s(Au);ase=n(mwe,"STRONG",{});var kHr=s(ase);q6o=r(kHr,"big_bird"),kHr.forEach(t),N6o=r(mwe," \u2014 "),KI=n(mwe,"A",{href:!0});var SHr=s(KI);j6o=r(SHr,"BigBirdForPreTraining"),SHr.forEach(t),D6o=r(mwe," (BigBird model)"),mwe.forEach(t),G6o=i(V),yu=n(V,"LI",{});var gwe=s(yu);nse=n(gwe,"STRONG",{});var RHr=s(nse);O6o=r(RHr,"camembert"),RHr.forEach(t),V6o=r(gwe," \u2014 "),ZI=n(gwe,"A",{href:!0});var BHr=s(ZI);X6o=r(BHr,"CamembertForMaskedLM"),BHr.forEach(t),z6o=r(gwe," (CamemBERT model)"),gwe.forEach(t),Q6o=i(V),Lu=n(V,"LI",{});var hwe=s(Lu);sse=n(hwe,"STRONG",{});var PHr=s(sse);W6o=r(PHr,"ctrl"),PHr.forEach(t),H6o=r(hwe," \u2014 "),eq=n(hwe,"A",{href:!0});var IHr=s(eq);U6o=r(IHr,"CTRLLMHeadModel"),IHr.forEach(t),J6o=r(hwe," (CTRL model)"),hwe.forEach(t),Y6o=i(V),xu=n(V,"LI",{});var pwe=s(xu);lse=n(pwe,"STRONG",{});var qHr=s(lse);K6o=r(qHr,"data2vec-text"),qHr.forEach(t),Z6o=r(pwe," \u2014 "),oq=n(pwe,"A",{href:!0});var NHr=s(oq);e1o=r(NHr,"Data2VecTextForMaskedLM"),NHr.forEach(t),o1o=r(pwe," (Data2VecText model)"),pwe.forEach(t),r1o=i(V),$u=n(V,"LI",{});var uwe=s($u);ise=n(uwe,"STRONG",{});var jHr=s(ise);t1o=r(jHr,"deberta"),jHr.forEach(t),a1o=r(uwe," \u2014 "),rq=n(uwe,"A",{href:!0});var DHr=s(rq);n1o=r(DHr,"DebertaForMaskedLM"),DHr.forEach(t),s1o=r(uwe," (DeBERTa model)"),uwe.forEach(t),l1o=i(V),ku=n(V,"LI",{});var _we=s(ku);dse=n(_we,"STRONG",{});var GHr=s(dse);i1o=r(GHr,"deberta-v2"),GHr.forEach(t),d1o=r(_we," \u2014 "),tq=n(_we,"A",{href:!0});var OHr=s(tq);c1o=r(OHr,"DebertaV2ForMaskedLM"),OHr.forEach(t),f1o=r(_we," (DeBERTa-v2 model)"),_we.forEach(t),m1o=i(V),Su=n(V,"LI",{});var bwe=s(Su);cse=n(bwe,"STRONG",{});var VHr=s(cse);g1o=r(VHr,"distilbert"),VHr.forEach(t),h1o=r(bwe," \u2014 "),aq=n(bwe,"A",{href:!0});var XHr=s(aq);p1o=r(XHr,"DistilBertForMaskedLM"),XHr.forEach(t),u1o=r(bwe," (DistilBERT model)"),bwe.forEach(t),_1o=i(V),Ru=n(V,"LI",{});var vwe=s(Ru);fse=n(vwe,"STRONG",{});var zHr=s(fse);b1o=r(zHr,"electra"),zHr.forEach(t),v1o=r(vwe," \u2014 "),nq=n(vwe,"A",{href:!0});var QHr=s(nq);F1o=r(QHr,"ElectraForPreTraining"),QHr.forEach(t),T1o=r(vwe," (ELECTRA model)"),vwe.forEach(t),M1o=i(V),Bu=n(V,"LI",{});var Fwe=s(Bu);mse=n(Fwe,"STRONG",{});var WHr=s(mse);E1o=r(WHr,"flaubert"),WHr.forEach(t),C1o=r(Fwe," \u2014 "),sq=n(Fwe,"A",{href:!0});var HHr=s(sq);w1o=r(HHr,"FlaubertWithLMHeadModel"),HHr.forEach(t),A1o=r(Fwe," (FlauBERT model)"),Fwe.forEach(t),y1o=i(V),Pu=n(V,"LI",{});var Twe=s(Pu);gse=n(Twe,"STRONG",{});var UHr=s(gse);L1o=r(UHr,"fnet"),UHr.forEach(t),x1o=r(Twe," \u2014 "),lq=n(Twe,"A",{href:!0});var JHr=s(lq);$1o=r(JHr,"FNetForPreTraining"),JHr.forEach(t),k1o=r(Twe," (FNet model)"),Twe.forEach(t),S1o=i(V),Iu=n(V,"LI",{});var Mwe=s(Iu);hse=n(Mwe,"STRONG",{});var YHr=s(hse);R1o=r(YHr,"fsmt"),YHr.forEach(t),B1o=r(Mwe," \u2014 "),iq=n(Mwe,"A",{href:!0});var KHr=s(iq);P1o=r(KHr,"FSMTForConditionalGeneration"),KHr.forEach(t),I1o=r(Mwe," (FairSeq Machine-Translation model)"),Mwe.forEach(t),q1o=i(V),qu=n(V,"LI",{});var Ewe=s(qu);pse=n(Ewe,"STRONG",{});var ZHr=s(pse);N1o=r(ZHr,"funnel"),ZHr.forEach(t),j1o=r(Ewe," \u2014 "),dq=n(Ewe,"A",{href:!0});var eUr=s(dq);D1o=r(eUr,"FunnelForPreTraining"),eUr.forEach(t),G1o=r(Ewe," (Funnel Transformer model)"),Ewe.forEach(t),O1o=i(V),Nu=n(V,"LI",{});var Cwe=s(Nu);use=n(Cwe,"STRONG",{});var oUr=s(use);V1o=r(oUr,"gpt2"),oUr.forEach(t),X1o=r(Cwe," \u2014 "),cq=n(Cwe,"A",{href:!0});var rUr=s(cq);z1o=r(rUr,"GPT2LMHeadModel"),rUr.forEach(t),Q1o=r(Cwe," (OpenAI GPT-2 model)"),Cwe.forEach(t),W1o=i(V),ju=n(V,"LI",{});var wwe=s(ju);_se=n(wwe,"STRONG",{});var tUr=s(_se);H1o=r(tUr,"ibert"),tUr.forEach(t),U1o=r(wwe," \u2014 "),fq=n(wwe,"A",{href:!0});var aUr=s(fq);J1o=r(aUr,"IBertForMaskedLM"),aUr.forEach(t),Y1o=r(wwe," (I-BERT model)"),wwe.forEach(t),K1o=i(V),Du=n(V,"LI",{});var Awe=s(Du);bse=n(Awe,"STRONG",{});var nUr=s(bse);Z1o=r(nUr,"layoutlm"),nUr.forEach(t),ebo=r(Awe," \u2014 "),mq=n(Awe,"A",{href:!0});var sUr=s(mq);obo=r(sUr,"LayoutLMForMaskedLM"),sUr.forEach(t),rbo=r(Awe," (LayoutLM model)"),Awe.forEach(t),tbo=i(V),Gu=n(V,"LI",{});var ywe=s(Gu);vse=n(ywe,"STRONG",{});var lUr=s(vse);abo=r(lUr,"longformer"),lUr.forEach(t),nbo=r(ywe," \u2014 "),gq=n(ywe,"A",{href:!0});var iUr=s(gq);sbo=r(iUr,"LongformerForMaskedLM"),iUr.forEach(t),lbo=r(ywe," (Longformer model)"),ywe.forEach(t),ibo=i(V),Ou=n(V,"LI",{});var Lwe=s(Ou);Fse=n(Lwe,"STRONG",{});var dUr=s(Fse);dbo=r(dUr,"lxmert"),dUr.forEach(t),cbo=r(Lwe," \u2014 "),hq=n(Lwe,"A",{href:!0});var cUr=s(hq);fbo=r(cUr,"LxmertForPreTraining"),cUr.forEach(t),mbo=r(Lwe," (LXMERT model)"),Lwe.forEach(t),gbo=i(V),Vu=n(V,"LI",{});var xwe=s(Vu);Tse=n(xwe,"STRONG",{});var fUr=s(Tse);hbo=r(fUr,"megatron-bert"),fUr.forEach(t),pbo=r(xwe," \u2014 "),pq=n(xwe,"A",{href:!0});var mUr=s(pq);ubo=r(mUr,"MegatronBertForPreTraining"),mUr.forEach(t),_bo=r(xwe," (MegatronBert model)"),xwe.forEach(t),bbo=i(V),Xu=n(V,"LI",{});var $we=s(Xu);Mse=n($we,"STRONG",{});var gUr=s(Mse);vbo=r(gUr,"mobilebert"),gUr.forEach(t),Fbo=r($we," \u2014 "),uq=n($we,"A",{href:!0});var hUr=s(uq);Tbo=r(hUr,"MobileBertForPreTraining"),hUr.forEach(t),Mbo=r($we," (MobileBERT model)"),$we.forEach(t),Ebo=i(V),zu=n(V,"LI",{});var kwe=s(zu);Ese=n(kwe,"STRONG",{});var pUr=s(Ese);Cbo=r(pUr,"mpnet"),pUr.forEach(t),wbo=r(kwe," \u2014 "),_q=n(kwe,"A",{href:!0});var uUr=s(_q);Abo=r(uUr,"MPNetForMaskedLM"),uUr.forEach(t),ybo=r(kwe," (MPNet model)"),kwe.forEach(t),Lbo=i(V),Qu=n(V,"LI",{});var Swe=s(Qu);Cse=n(Swe,"STRONG",{});var _Ur=s(Cse);xbo=r(_Ur,"openai-gpt"),_Ur.forEach(t),$bo=r(Swe," \u2014 "),bq=n(Swe,"A",{href:!0});var bUr=s(bq);kbo=r(bUr,"OpenAIGPTLMHeadModel"),bUr.forEach(t),Sbo=r(Swe," (OpenAI GPT model)"),Swe.forEach(t),Rbo=i(V),Wu=n(V,"LI",{});var Rwe=s(Wu);wse=n(Rwe,"STRONG",{});var vUr=s(wse);Bbo=r(vUr,"retribert"),vUr.forEach(t),Pbo=r(Rwe," \u2014 "),vq=n(Rwe,"A",{href:!0});var FUr=s(vq);Ibo=r(FUr,"RetriBertModel"),FUr.forEach(t),qbo=r(Rwe," (RetriBERT model)"),Rwe.forEach(t),Nbo=i(V),Hu=n(V,"LI",{});var Bwe=s(Hu);Ase=n(Bwe,"STRONG",{});var TUr=s(Ase);jbo=r(TUr,"roberta"),TUr.forEach(t),Dbo=r(Bwe," \u2014 "),Fq=n(Bwe,"A",{href:!0});var MUr=s(Fq);Gbo=r(MUr,"RobertaForMaskedLM"),MUr.forEach(t),Obo=r(Bwe," (RoBERTa model)"),Bwe.forEach(t),Vbo=i(V),Uu=n(V,"LI",{});var Pwe=s(Uu);yse=n(Pwe,"STRONG",{});var EUr=s(yse);Xbo=r(EUr,"squeezebert"),EUr.forEach(t),zbo=r(Pwe," \u2014 "),Tq=n(Pwe,"A",{href:!0});var CUr=s(Tq);Qbo=r(CUr,"SqueezeBertForMaskedLM"),CUr.forEach(t),Wbo=r(Pwe," (SqueezeBERT model)"),Pwe.forEach(t),Hbo=i(V),Ju=n(V,"LI",{});var Iwe=s(Ju);Lse=n(Iwe,"STRONG",{});var wUr=s(Lse);Ubo=r(wUr,"t5"),wUr.forEach(t),Jbo=r(Iwe," \u2014 "),Mq=n(Iwe,"A",{href:!0});var AUr=s(Mq);Ybo=r(AUr,"T5ForConditionalGeneration"),AUr.forEach(t),Kbo=r(Iwe," (T5 model)"),Iwe.forEach(t),Zbo=i(V),Yu=n(V,"LI",{});var qwe=s(Yu);xse=n(qwe,"STRONG",{});var yUr=s(xse);evo=r(yUr,"tapas"),yUr.forEach(t),ovo=r(qwe," \u2014 "),Eq=n(qwe,"A",{href:!0});var LUr=s(Eq);rvo=r(LUr,"TapasForMaskedLM"),LUr.forEach(t),tvo=r(qwe," (TAPAS model)"),qwe.forEach(t),avo=i(V),Ku=n(V,"LI",{});var Nwe=s(Ku);$se=n(Nwe,"STRONG",{});var xUr=s($se);nvo=r(xUr,"transfo-xl"),xUr.forEach(t),svo=r(Nwe," \u2014 "),Cq=n(Nwe,"A",{href:!0});var $Ur=s(Cq);lvo=r($Ur,"TransfoXLLMHeadModel"),$Ur.forEach(t),ivo=r(Nwe," (Transformer-XL model)"),Nwe.forEach(t),dvo=i(V),Zu=n(V,"LI",{});var jwe=s(Zu);kse=n(jwe,"STRONG",{});var kUr=s(kse);cvo=r(kUr,"unispeech"),kUr.forEach(t),fvo=r(jwe," \u2014 "),wq=n(jwe,"A",{href:!0});var SUr=s(wq);mvo=r(SUr,"UniSpeechForPreTraining"),SUr.forEach(t),gvo=r(jwe," (UniSpeech model)"),jwe.forEach(t),hvo=i(V),e_=n(V,"LI",{});var Dwe=s(e_);Sse=n(Dwe,"STRONG",{});var RUr=s(Sse);pvo=r(RUr,"unispeech-sat"),RUr.forEach(t),uvo=r(Dwe," \u2014 "),Aq=n(Dwe,"A",{href:!0});var BUr=s(Aq);_vo=r(BUr,"UniSpeechSatForPreTraining"),BUr.forEach(t),bvo=r(Dwe," (UniSpeechSat model)"),Dwe.forEach(t),vvo=i(V),o_=n(V,"LI",{});var Gwe=s(o_);Rse=n(Gwe,"STRONG",{});var PUr=s(Rse);Fvo=r(PUr,"visual_bert"),PUr.forEach(t),Tvo=r(Gwe," \u2014 "),yq=n(Gwe,"A",{href:!0});var IUr=s(yq);Mvo=r(IUr,"VisualBertForPreTraining"),IUr.forEach(t),Evo=r(Gwe," (VisualBert model)"),Gwe.forEach(t),Cvo=i(V),r_=n(V,"LI",{});var Owe=s(r_);Bse=n(Owe,"STRONG",{});var qUr=s(Bse);wvo=r(qUr,"vit_mae"),qUr.forEach(t),Avo=r(Owe," \u2014 "),Lq=n(Owe,"A",{href:!0});var NUr=s(Lq);yvo=r(NUr,"ViTMAEForPreTraining"),NUr.forEach(t),Lvo=r(Owe," (ViTMAE model)"),Owe.forEach(t),xvo=i(V),t_=n(V,"LI",{});var Vwe=s(t_);Pse=n(Vwe,"STRONG",{});var jUr=s(Pse);$vo=r(jUr,"wav2vec2"),jUr.forEach(t),kvo=r(Vwe," \u2014 "),xq=n(Vwe,"A",{href:!0});var DUr=s(xq);Svo=r(DUr,"Wav2Vec2ForPreTraining"),DUr.forEach(t),Rvo=r(Vwe," (Wav2Vec2 model)"),Vwe.forEach(t),Bvo=i(V),a_=n(V,"LI",{});var Xwe=s(a_);Ise=n(Xwe,"STRONG",{});var GUr=s(Ise);Pvo=r(GUr,"xlm"),GUr.forEach(t),Ivo=r(Xwe," \u2014 "),$q=n(Xwe,"A",{href:!0});var OUr=s($q);qvo=r(OUr,"XLMWithLMHeadModel"),OUr.forEach(t),Nvo=r(Xwe," (XLM model)"),Xwe.forEach(t),jvo=i(V),n_=n(V,"LI",{});var zwe=s(n_);qse=n(zwe,"STRONG",{});var VUr=s(qse);Dvo=r(VUr,"xlm-roberta"),VUr.forEach(t),Gvo=r(zwe," \u2014 "),kq=n(zwe,"A",{href:!0});var XUr=s(kq);Ovo=r(XUr,"XLMRobertaForMaskedLM"),XUr.forEach(t),Vvo=r(zwe," (XLM-RoBERTa model)"),zwe.forEach(t),Xvo=i(V),s_=n(V,"LI",{});var Qwe=s(s_);Nse=n(Qwe,"STRONG",{});var zUr=s(Nse);zvo=r(zUr,"xlm-roberta-xl"),zUr.forEach(t),Qvo=r(Qwe," \u2014 "),Sq=n(Qwe,"A",{href:!0});var QUr=s(Sq);Wvo=r(QUr,"XLMRobertaXLForMaskedLM"),QUr.forEach(t),Hvo=r(Qwe," (XLM-RoBERTa-XL model)"),Qwe.forEach(t),Uvo=i(V),l_=n(V,"LI",{});var Wwe=s(l_);jse=n(Wwe,"STRONG",{});var WUr=s(jse);Jvo=r(WUr,"xlnet"),WUr.forEach(t),Yvo=r(Wwe," \u2014 "),Rq=n(Wwe,"A",{href:!0});var HUr=s(Rq);Kvo=r(HUr,"XLNetLMHeadModel"),HUr.forEach(t),Zvo=r(Wwe," (XLNet model)"),Wwe.forEach(t),V.forEach(t),eFo=i(Yt),i_=n(Yt,"P",{});var Hwe=s(i_);oFo=r(Hwe,"The model is set in evaluation mode by default using "),Dse=n(Hwe,"CODE",{});var UUr=s(Dse);rFo=r(UUr,"model.eval()"),UUr.forEach(t),tFo=r(Hwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gse=n(Hwe,"CODE",{});var JUr=s(Gse);aFo=r(JUr,"model.train()"),JUr.forEach(t),Hwe.forEach(t),nFo=i(Yt),T(d_.$$.fragment,Yt),Yt.forEach(t),Is.forEach(t),kBe=i(f),Ti=n(f,"H2",{class:!0});var RIe=s(Ti);c_=n(RIe,"A",{id:!0,class:!0,href:!0});var YUr=s(c_);Ose=n(YUr,"SPAN",{});var KUr=s(Ose);T(s0.$$.fragment,KUr),KUr.forEach(t),YUr.forEach(t),sFo=i(RIe),Vse=n(RIe,"SPAN",{});var ZUr=s(Vse);lFo=r(ZUr,"AutoModelForCausalLM"),ZUr.forEach(t),RIe.forEach(t),SBe=i(f),$o=n(f,"DIV",{class:!0});var qs=s($o);T(l0.$$.fragment,qs),iFo=i(qs),Mi=n(qs,"P",{});var vY=s(Mi);dFo=r(vY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Bq=n(vY,"A",{href:!0});var eJr=s(Bq);cFo=r(eJr,"from_pretrained()"),eJr.forEach(t),fFo=r(vY," class method or the "),Pq=n(vY,"A",{href:!0});var oJr=s(Pq);mFo=r(oJr,"from_config()"),oJr.forEach(t),gFo=r(vY,` class
method.`),vY.forEach(t),hFo=i(qs),i0=n(qs,"P",{});var BIe=s(i0);pFo=r(BIe,"This class cannot be instantiated directly using "),Xse=n(BIe,"CODE",{});var rJr=s(Xse);uFo=r(rJr,"__init__()"),rJr.forEach(t),_Fo=r(BIe," (throws an error)."),BIe.forEach(t),bFo=i(qs),ot=n(qs,"DIV",{class:!0});var R3=s(ot);T(d0.$$.fragment,R3),vFo=i(R3),zse=n(R3,"P",{});var tJr=s(zse);FFo=r(tJr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),tJr.forEach(t),TFo=i(R3),Ei=n(R3,"P",{});var FY=s(Ei);MFo=r(FY,`Note:
Loading a model from its configuration file does `),Qse=n(FY,"STRONG",{});var aJr=s(Qse);EFo=r(aJr,"not"),aJr.forEach(t),CFo=r(FY,` load the model weights. It only affects the
model\u2019s configuration. Use `),Iq=n(FY,"A",{href:!0});var nJr=s(Iq);wFo=r(nJr,"from_pretrained()"),nJr.forEach(t),AFo=r(FY," to load the model weights."),FY.forEach(t),yFo=i(R3),T(f_.$$.fragment,R3),R3.forEach(t),LFo=i(qs),Je=n(qs,"DIV",{class:!0});var Kt=s(Je);T(c0.$$.fragment,Kt),xFo=i(Kt),Wse=n(Kt,"P",{});var sJr=s(Wse);$Fo=r(sJr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),sJr.forEach(t),kFo=i(Kt),wa=n(Kt,"P",{});var B3=s(wa);SFo=r(B3,"The model class to instantiate is selected based on the "),Hse=n(B3,"CODE",{});var lJr=s(Hse);RFo=r(lJr,"model_type"),lJr.forEach(t),BFo=r(B3,` property of the config object (either
passed as an argument or loaded from `),Use=n(B3,"CODE",{});var iJr=s(Use);PFo=r(iJr,"pretrained_model_name_or_path"),iJr.forEach(t),IFo=r(B3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jse=n(B3,"CODE",{});var dJr=s(Jse);qFo=r(dJr,"pretrained_model_name_or_path"),dJr.forEach(t),NFo=r(B3,":"),B3.forEach(t),jFo=i(Kt),z=n(Kt,"UL",{});var W=s(z);m_=n(W,"LI",{});var Uwe=s(m_);Yse=n(Uwe,"STRONG",{});var cJr=s(Yse);DFo=r(cJr,"bart"),cJr.forEach(t),GFo=r(Uwe," \u2014 "),qq=n(Uwe,"A",{href:!0});var fJr=s(qq);OFo=r(fJr,"BartForCausalLM"),fJr.forEach(t),VFo=r(Uwe," (BART model)"),Uwe.forEach(t),XFo=i(W),g_=n(W,"LI",{});var Jwe=s(g_);Kse=n(Jwe,"STRONG",{});var mJr=s(Kse);zFo=r(mJr,"bert"),mJr.forEach(t),QFo=r(Jwe," \u2014 "),Nq=n(Jwe,"A",{href:!0});var gJr=s(Nq);WFo=r(gJr,"BertLMHeadModel"),gJr.forEach(t),HFo=r(Jwe," (BERT model)"),Jwe.forEach(t),UFo=i(W),h_=n(W,"LI",{});var Ywe=s(h_);Zse=n(Ywe,"STRONG",{});var hJr=s(Zse);JFo=r(hJr,"bert-generation"),hJr.forEach(t),YFo=r(Ywe," \u2014 "),jq=n(Ywe,"A",{href:!0});var pJr=s(jq);KFo=r(pJr,"BertGenerationDecoder"),pJr.forEach(t),ZFo=r(Ywe," (Bert Generation model)"),Ywe.forEach(t),eTo=i(W),p_=n(W,"LI",{});var Kwe=s(p_);ele=n(Kwe,"STRONG",{});var uJr=s(ele);oTo=r(uJr,"big_bird"),uJr.forEach(t),rTo=r(Kwe," \u2014 "),Dq=n(Kwe,"A",{href:!0});var _Jr=s(Dq);tTo=r(_Jr,"BigBirdForCausalLM"),_Jr.forEach(t),aTo=r(Kwe," (BigBird model)"),Kwe.forEach(t),nTo=i(W),u_=n(W,"LI",{});var Zwe=s(u_);ole=n(Zwe,"STRONG",{});var bJr=s(ole);sTo=r(bJr,"bigbird_pegasus"),bJr.forEach(t),lTo=r(Zwe," \u2014 "),Gq=n(Zwe,"A",{href:!0});var vJr=s(Gq);iTo=r(vJr,"BigBirdPegasusForCausalLM"),vJr.forEach(t),dTo=r(Zwe," (BigBirdPegasus model)"),Zwe.forEach(t),cTo=i(W),__=n(W,"LI",{});var eAe=s(__);rle=n(eAe,"STRONG",{});var FJr=s(rle);fTo=r(FJr,"blenderbot"),FJr.forEach(t),mTo=r(eAe," \u2014 "),Oq=n(eAe,"A",{href:!0});var TJr=s(Oq);gTo=r(TJr,"BlenderbotForCausalLM"),TJr.forEach(t),hTo=r(eAe," (Blenderbot model)"),eAe.forEach(t),pTo=i(W),b_=n(W,"LI",{});var oAe=s(b_);tle=n(oAe,"STRONG",{});var MJr=s(tle);uTo=r(MJr,"blenderbot-small"),MJr.forEach(t),_To=r(oAe," \u2014 "),Vq=n(oAe,"A",{href:!0});var EJr=s(Vq);bTo=r(EJr,"BlenderbotSmallForCausalLM"),EJr.forEach(t),vTo=r(oAe," (BlenderbotSmall model)"),oAe.forEach(t),FTo=i(W),v_=n(W,"LI",{});var rAe=s(v_);ale=n(rAe,"STRONG",{});var CJr=s(ale);TTo=r(CJr,"camembert"),CJr.forEach(t),MTo=r(rAe," \u2014 "),Xq=n(rAe,"A",{href:!0});var wJr=s(Xq);ETo=r(wJr,"CamembertForCausalLM"),wJr.forEach(t),CTo=r(rAe," (CamemBERT model)"),rAe.forEach(t),wTo=i(W),F_=n(W,"LI",{});var tAe=s(F_);nle=n(tAe,"STRONG",{});var AJr=s(nle);ATo=r(AJr,"ctrl"),AJr.forEach(t),yTo=r(tAe," \u2014 "),zq=n(tAe,"A",{href:!0});var yJr=s(zq);LTo=r(yJr,"CTRLLMHeadModel"),yJr.forEach(t),xTo=r(tAe," (CTRL model)"),tAe.forEach(t),$To=i(W),T_=n(W,"LI",{});var aAe=s(T_);sle=n(aAe,"STRONG",{});var LJr=s(sle);kTo=r(LJr,"data2vec-text"),LJr.forEach(t),STo=r(aAe," \u2014 "),Qq=n(aAe,"A",{href:!0});var xJr=s(Qq);RTo=r(xJr,"Data2VecTextForCausalLM"),xJr.forEach(t),BTo=r(aAe," (Data2VecText model)"),aAe.forEach(t),PTo=i(W),M_=n(W,"LI",{});var nAe=s(M_);lle=n(nAe,"STRONG",{});var $Jr=s(lle);ITo=r($Jr,"electra"),$Jr.forEach(t),qTo=r(nAe," \u2014 "),Wq=n(nAe,"A",{href:!0});var kJr=s(Wq);NTo=r(kJr,"ElectraForCausalLM"),kJr.forEach(t),jTo=r(nAe," (ELECTRA model)"),nAe.forEach(t),DTo=i(W),E_=n(W,"LI",{});var sAe=s(E_);ile=n(sAe,"STRONG",{});var SJr=s(ile);GTo=r(SJr,"gpt2"),SJr.forEach(t),OTo=r(sAe," \u2014 "),Hq=n(sAe,"A",{href:!0});var RJr=s(Hq);VTo=r(RJr,"GPT2LMHeadModel"),RJr.forEach(t),XTo=r(sAe," (OpenAI GPT-2 model)"),sAe.forEach(t),zTo=i(W),C_=n(W,"LI",{});var lAe=s(C_);dle=n(lAe,"STRONG",{});var BJr=s(dle);QTo=r(BJr,"gpt_neo"),BJr.forEach(t),WTo=r(lAe," \u2014 "),Uq=n(lAe,"A",{href:!0});var PJr=s(Uq);HTo=r(PJr,"GPTNeoForCausalLM"),PJr.forEach(t),UTo=r(lAe," (GPT Neo model)"),lAe.forEach(t),JTo=i(W),w_=n(W,"LI",{});var iAe=s(w_);cle=n(iAe,"STRONG",{});var IJr=s(cle);YTo=r(IJr,"gptj"),IJr.forEach(t),KTo=r(iAe," \u2014 "),Jq=n(iAe,"A",{href:!0});var qJr=s(Jq);ZTo=r(qJr,"GPTJForCausalLM"),qJr.forEach(t),e8o=r(iAe," (GPT-J model)"),iAe.forEach(t),o8o=i(W),A_=n(W,"LI",{});var dAe=s(A_);fle=n(dAe,"STRONG",{});var NJr=s(fle);r8o=r(NJr,"marian"),NJr.forEach(t),t8o=r(dAe," \u2014 "),Yq=n(dAe,"A",{href:!0});var jJr=s(Yq);a8o=r(jJr,"MarianForCausalLM"),jJr.forEach(t),n8o=r(dAe," (Marian model)"),dAe.forEach(t),s8o=i(W),y_=n(W,"LI",{});var cAe=s(y_);mle=n(cAe,"STRONG",{});var DJr=s(mle);l8o=r(DJr,"mbart"),DJr.forEach(t),i8o=r(cAe," \u2014 "),Kq=n(cAe,"A",{href:!0});var GJr=s(Kq);d8o=r(GJr,"MBartForCausalLM"),GJr.forEach(t),c8o=r(cAe," (mBART model)"),cAe.forEach(t),f8o=i(W),L_=n(W,"LI",{});var fAe=s(L_);gle=n(fAe,"STRONG",{});var OJr=s(gle);m8o=r(OJr,"megatron-bert"),OJr.forEach(t),g8o=r(fAe," \u2014 "),Zq=n(fAe,"A",{href:!0});var VJr=s(Zq);h8o=r(VJr,"MegatronBertForCausalLM"),VJr.forEach(t),p8o=r(fAe," (MegatronBert model)"),fAe.forEach(t),u8o=i(W),x_=n(W,"LI",{});var mAe=s(x_);hle=n(mAe,"STRONG",{});var XJr=s(hle);_8o=r(XJr,"openai-gpt"),XJr.forEach(t),b8o=r(mAe," \u2014 "),eN=n(mAe,"A",{href:!0});var zJr=s(eN);v8o=r(zJr,"OpenAIGPTLMHeadModel"),zJr.forEach(t),F8o=r(mAe," (OpenAI GPT model)"),mAe.forEach(t),T8o=i(W),$_=n(W,"LI",{});var gAe=s($_);ple=n(gAe,"STRONG",{});var QJr=s(ple);M8o=r(QJr,"pegasus"),QJr.forEach(t),E8o=r(gAe," \u2014 "),oN=n(gAe,"A",{href:!0});var WJr=s(oN);C8o=r(WJr,"PegasusForCausalLM"),WJr.forEach(t),w8o=r(gAe," (Pegasus model)"),gAe.forEach(t),A8o=i(W),k_=n(W,"LI",{});var hAe=s(k_);ule=n(hAe,"STRONG",{});var HJr=s(ule);y8o=r(HJr,"plbart"),HJr.forEach(t),L8o=r(hAe," \u2014 "),rN=n(hAe,"A",{href:!0});var UJr=s(rN);x8o=r(UJr,"PLBartForCausalLM"),UJr.forEach(t),$8o=r(hAe," (PLBart model)"),hAe.forEach(t),k8o=i(W),S_=n(W,"LI",{});var pAe=s(S_);_le=n(pAe,"STRONG",{});var JJr=s(_le);S8o=r(JJr,"prophetnet"),JJr.forEach(t),R8o=r(pAe," \u2014 "),tN=n(pAe,"A",{href:!0});var YJr=s(tN);B8o=r(YJr,"ProphetNetForCausalLM"),YJr.forEach(t),P8o=r(pAe," (ProphetNet model)"),pAe.forEach(t),I8o=i(W),R_=n(W,"LI",{});var uAe=s(R_);ble=n(uAe,"STRONG",{});var KJr=s(ble);q8o=r(KJr,"qdqbert"),KJr.forEach(t),N8o=r(uAe," \u2014 "),aN=n(uAe,"A",{href:!0});var ZJr=s(aN);j8o=r(ZJr,"QDQBertLMHeadModel"),ZJr.forEach(t),D8o=r(uAe," (QDQBert model)"),uAe.forEach(t),G8o=i(W),B_=n(W,"LI",{});var _Ae=s(B_);vle=n(_Ae,"STRONG",{});var eYr=s(vle);O8o=r(eYr,"reformer"),eYr.forEach(t),V8o=r(_Ae," \u2014 "),nN=n(_Ae,"A",{href:!0});var oYr=s(nN);X8o=r(oYr,"ReformerModelWithLMHead"),oYr.forEach(t),z8o=r(_Ae," (Reformer model)"),_Ae.forEach(t),Q8o=i(W),P_=n(W,"LI",{});var bAe=s(P_);Fle=n(bAe,"STRONG",{});var rYr=s(Fle);W8o=r(rYr,"rembert"),rYr.forEach(t),H8o=r(bAe," \u2014 "),sN=n(bAe,"A",{href:!0});var tYr=s(sN);U8o=r(tYr,"RemBertForCausalLM"),tYr.forEach(t),J8o=r(bAe," (RemBERT model)"),bAe.forEach(t),Y8o=i(W),I_=n(W,"LI",{});var vAe=s(I_);Tle=n(vAe,"STRONG",{});var aYr=s(Tle);K8o=r(aYr,"roberta"),aYr.forEach(t),Z8o=r(vAe," \u2014 "),lN=n(vAe,"A",{href:!0});var nYr=s(lN);eMo=r(nYr,"RobertaForCausalLM"),nYr.forEach(t),oMo=r(vAe," (RoBERTa model)"),vAe.forEach(t),rMo=i(W),q_=n(W,"LI",{});var FAe=s(q_);Mle=n(FAe,"STRONG",{});var sYr=s(Mle);tMo=r(sYr,"roformer"),sYr.forEach(t),aMo=r(FAe," \u2014 "),iN=n(FAe,"A",{href:!0});var lYr=s(iN);nMo=r(lYr,"RoFormerForCausalLM"),lYr.forEach(t),sMo=r(FAe," (RoFormer model)"),FAe.forEach(t),lMo=i(W),N_=n(W,"LI",{});var TAe=s(N_);Ele=n(TAe,"STRONG",{});var iYr=s(Ele);iMo=r(iYr,"speech_to_text_2"),iYr.forEach(t),dMo=r(TAe," \u2014 "),dN=n(TAe,"A",{href:!0});var dYr=s(dN);cMo=r(dYr,"Speech2Text2ForCausalLM"),dYr.forEach(t),fMo=r(TAe," (Speech2Text2 model)"),TAe.forEach(t),mMo=i(W),j_=n(W,"LI",{});var MAe=s(j_);Cle=n(MAe,"STRONG",{});var cYr=s(Cle);gMo=r(cYr,"transfo-xl"),cYr.forEach(t),hMo=r(MAe," \u2014 "),cN=n(MAe,"A",{href:!0});var fYr=s(cN);pMo=r(fYr,"TransfoXLLMHeadModel"),fYr.forEach(t),uMo=r(MAe," (Transformer-XL model)"),MAe.forEach(t),_Mo=i(W),D_=n(W,"LI",{});var EAe=s(D_);wle=n(EAe,"STRONG",{});var mYr=s(wle);bMo=r(mYr,"trocr"),mYr.forEach(t),vMo=r(EAe," \u2014 "),fN=n(EAe,"A",{href:!0});var gYr=s(fN);FMo=r(gYr,"TrOCRForCausalLM"),gYr.forEach(t),TMo=r(EAe," (TrOCR model)"),EAe.forEach(t),MMo=i(W),G_=n(W,"LI",{});var CAe=s(G_);Ale=n(CAe,"STRONG",{});var hYr=s(Ale);EMo=r(hYr,"xglm"),hYr.forEach(t),CMo=r(CAe," \u2014 "),mN=n(CAe,"A",{href:!0});var pYr=s(mN);wMo=r(pYr,"XGLMForCausalLM"),pYr.forEach(t),AMo=r(CAe," (XGLM model)"),CAe.forEach(t),yMo=i(W),O_=n(W,"LI",{});var wAe=s(O_);yle=n(wAe,"STRONG",{});var uYr=s(yle);LMo=r(uYr,"xlm"),uYr.forEach(t),xMo=r(wAe," \u2014 "),gN=n(wAe,"A",{href:!0});var _Yr=s(gN);$Mo=r(_Yr,"XLMWithLMHeadModel"),_Yr.forEach(t),kMo=r(wAe," (XLM model)"),wAe.forEach(t),SMo=i(W),V_=n(W,"LI",{});var AAe=s(V_);Lle=n(AAe,"STRONG",{});var bYr=s(Lle);RMo=r(bYr,"xlm-prophetnet"),bYr.forEach(t),BMo=r(AAe," \u2014 "),hN=n(AAe,"A",{href:!0});var vYr=s(hN);PMo=r(vYr,"XLMProphetNetForCausalLM"),vYr.forEach(t),IMo=r(AAe," (XLMProphetNet model)"),AAe.forEach(t),qMo=i(W),X_=n(W,"LI",{});var yAe=s(X_);xle=n(yAe,"STRONG",{});var FYr=s(xle);NMo=r(FYr,"xlm-roberta"),FYr.forEach(t),jMo=r(yAe," \u2014 "),pN=n(yAe,"A",{href:!0});var TYr=s(pN);DMo=r(TYr,"XLMRobertaForCausalLM"),TYr.forEach(t),GMo=r(yAe," (XLM-RoBERTa model)"),yAe.forEach(t),OMo=i(W),z_=n(W,"LI",{});var LAe=s(z_);$le=n(LAe,"STRONG",{});var MYr=s($le);VMo=r(MYr,"xlm-roberta-xl"),MYr.forEach(t),XMo=r(LAe," \u2014 "),uN=n(LAe,"A",{href:!0});var EYr=s(uN);zMo=r(EYr,"XLMRobertaXLForCausalLM"),EYr.forEach(t),QMo=r(LAe," (XLM-RoBERTa-XL model)"),LAe.forEach(t),WMo=i(W),Q_=n(W,"LI",{});var xAe=s(Q_);kle=n(xAe,"STRONG",{});var CYr=s(kle);HMo=r(CYr,"xlnet"),CYr.forEach(t),UMo=r(xAe," \u2014 "),_N=n(xAe,"A",{href:!0});var wYr=s(_N);JMo=r(wYr,"XLNetLMHeadModel"),wYr.forEach(t),YMo=r(xAe," (XLNet model)"),xAe.forEach(t),W.forEach(t),KMo=i(Kt),W_=n(Kt,"P",{});var $Ae=s(W_);ZMo=r($Ae,"The model is set in evaluation mode by default using "),Sle=n($Ae,"CODE",{});var AYr=s(Sle);e4o=r(AYr,"model.eval()"),AYr.forEach(t),o4o=r($Ae,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rle=n($Ae,"CODE",{});var yYr=s(Rle);r4o=r(yYr,"model.train()"),yYr.forEach(t),$Ae.forEach(t),t4o=i(Kt),T(H_.$$.fragment,Kt),Kt.forEach(t),qs.forEach(t),RBe=i(f),Ci=n(f,"H2",{class:!0});var PIe=s(Ci);U_=n(PIe,"A",{id:!0,class:!0,href:!0});var LYr=s(U_);Ble=n(LYr,"SPAN",{});var xYr=s(Ble);T(f0.$$.fragment,xYr),xYr.forEach(t),LYr.forEach(t),a4o=i(PIe),Ple=n(PIe,"SPAN",{});var $Yr=s(Ple);n4o=r($Yr,"AutoModelForMaskedLM"),$Yr.forEach(t),PIe.forEach(t),BBe=i(f),ko=n(f,"DIV",{class:!0});var Ns=s(ko);T(m0.$$.fragment,Ns),s4o=i(Ns),wi=n(Ns,"P",{});var TY=s(wi);l4o=r(TY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),bN=n(TY,"A",{href:!0});var kYr=s(bN);i4o=r(kYr,"from_pretrained()"),kYr.forEach(t),d4o=r(TY," class method or the "),vN=n(TY,"A",{href:!0});var SYr=s(vN);c4o=r(SYr,"from_config()"),SYr.forEach(t),f4o=r(TY,` class
method.`),TY.forEach(t),m4o=i(Ns),g0=n(Ns,"P",{});var IIe=s(g0);g4o=r(IIe,"This class cannot be instantiated directly using "),Ile=n(IIe,"CODE",{});var RYr=s(Ile);h4o=r(RYr,"__init__()"),RYr.forEach(t),p4o=r(IIe," (throws an error)."),IIe.forEach(t),u4o=i(Ns),rt=n(Ns,"DIV",{class:!0});var P3=s(rt);T(h0.$$.fragment,P3),_4o=i(P3),qle=n(P3,"P",{});var BYr=s(qle);b4o=r(BYr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),BYr.forEach(t),v4o=i(P3),Ai=n(P3,"P",{});var MY=s(Ai);F4o=r(MY,`Note:
Loading a model from its configuration file does `),Nle=n(MY,"STRONG",{});var PYr=s(Nle);T4o=r(PYr,"not"),PYr.forEach(t),M4o=r(MY,` load the model weights. It only affects the
model\u2019s configuration. Use `),FN=n(MY,"A",{href:!0});var IYr=s(FN);E4o=r(IYr,"from_pretrained()"),IYr.forEach(t),C4o=r(MY," to load the model weights."),MY.forEach(t),w4o=i(P3),T(J_.$$.fragment,P3),P3.forEach(t),A4o=i(Ns),Ye=n(Ns,"DIV",{class:!0});var Zt=s(Ye);T(p0.$$.fragment,Zt),y4o=i(Zt),jle=n(Zt,"P",{});var qYr=s(jle);L4o=r(qYr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),qYr.forEach(t),x4o=i(Zt),Aa=n(Zt,"P",{});var I3=s(Aa);$4o=r(I3,"The model class to instantiate is selected based on the "),Dle=n(I3,"CODE",{});var NYr=s(Dle);k4o=r(NYr,"model_type"),NYr.forEach(t),S4o=r(I3,` property of the config object (either
passed as an argument or loaded from `),Gle=n(I3,"CODE",{});var jYr=s(Gle);R4o=r(jYr,"pretrained_model_name_or_path"),jYr.forEach(t),B4o=r(I3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ole=n(I3,"CODE",{});var DYr=s(Ole);P4o=r(DYr,"pretrained_model_name_or_path"),DYr.forEach(t),I4o=r(I3,":"),I3.forEach(t),q4o=i(Zt),Q=n(Zt,"UL",{});var H=s(Q);Y_=n(H,"LI",{});var kAe=s(Y_);Vle=n(kAe,"STRONG",{});var GYr=s(Vle);N4o=r(GYr,"albert"),GYr.forEach(t),j4o=r(kAe," \u2014 "),TN=n(kAe,"A",{href:!0});var OYr=s(TN);D4o=r(OYr,"AlbertForMaskedLM"),OYr.forEach(t),G4o=r(kAe," (ALBERT model)"),kAe.forEach(t),O4o=i(H),K_=n(H,"LI",{});var SAe=s(K_);Xle=n(SAe,"STRONG",{});var VYr=s(Xle);V4o=r(VYr,"bart"),VYr.forEach(t),X4o=r(SAe," \u2014 "),MN=n(SAe,"A",{href:!0});var XYr=s(MN);z4o=r(XYr,"BartForConditionalGeneration"),XYr.forEach(t),Q4o=r(SAe," (BART model)"),SAe.forEach(t),W4o=i(H),Z_=n(H,"LI",{});var RAe=s(Z_);zle=n(RAe,"STRONG",{});var zYr=s(zle);H4o=r(zYr,"bert"),zYr.forEach(t),U4o=r(RAe," \u2014 "),EN=n(RAe,"A",{href:!0});var QYr=s(EN);J4o=r(QYr,"BertForMaskedLM"),QYr.forEach(t),Y4o=r(RAe," (BERT model)"),RAe.forEach(t),K4o=i(H),e2=n(H,"LI",{});var BAe=s(e2);Qle=n(BAe,"STRONG",{});var WYr=s(Qle);Z4o=r(WYr,"big_bird"),WYr.forEach(t),eEo=r(BAe," \u2014 "),CN=n(BAe,"A",{href:!0});var HYr=s(CN);oEo=r(HYr,"BigBirdForMaskedLM"),HYr.forEach(t),rEo=r(BAe," (BigBird model)"),BAe.forEach(t),tEo=i(H),o2=n(H,"LI",{});var PAe=s(o2);Wle=n(PAe,"STRONG",{});var UYr=s(Wle);aEo=r(UYr,"camembert"),UYr.forEach(t),nEo=r(PAe," \u2014 "),wN=n(PAe,"A",{href:!0});var JYr=s(wN);sEo=r(JYr,"CamembertForMaskedLM"),JYr.forEach(t),lEo=r(PAe," (CamemBERT model)"),PAe.forEach(t),iEo=i(H),r2=n(H,"LI",{});var IAe=s(r2);Hle=n(IAe,"STRONG",{});var YYr=s(Hle);dEo=r(YYr,"convbert"),YYr.forEach(t),cEo=r(IAe," \u2014 "),AN=n(IAe,"A",{href:!0});var KYr=s(AN);fEo=r(KYr,"ConvBertForMaskedLM"),KYr.forEach(t),mEo=r(IAe," (ConvBERT model)"),IAe.forEach(t),gEo=i(H),t2=n(H,"LI",{});var qAe=s(t2);Ule=n(qAe,"STRONG",{});var ZYr=s(Ule);hEo=r(ZYr,"data2vec-text"),ZYr.forEach(t),pEo=r(qAe," \u2014 "),yN=n(qAe,"A",{href:!0});var eKr=s(yN);uEo=r(eKr,"Data2VecTextForMaskedLM"),eKr.forEach(t),_Eo=r(qAe," (Data2VecText model)"),qAe.forEach(t),bEo=i(H),a2=n(H,"LI",{});var NAe=s(a2);Jle=n(NAe,"STRONG",{});var oKr=s(Jle);vEo=r(oKr,"deberta"),oKr.forEach(t),FEo=r(NAe," \u2014 "),LN=n(NAe,"A",{href:!0});var rKr=s(LN);TEo=r(rKr,"DebertaForMaskedLM"),rKr.forEach(t),MEo=r(NAe," (DeBERTa model)"),NAe.forEach(t),EEo=i(H),n2=n(H,"LI",{});var jAe=s(n2);Yle=n(jAe,"STRONG",{});var tKr=s(Yle);CEo=r(tKr,"deberta-v2"),tKr.forEach(t),wEo=r(jAe," \u2014 "),xN=n(jAe,"A",{href:!0});var aKr=s(xN);AEo=r(aKr,"DebertaV2ForMaskedLM"),aKr.forEach(t),yEo=r(jAe," (DeBERTa-v2 model)"),jAe.forEach(t),LEo=i(H),s2=n(H,"LI",{});var DAe=s(s2);Kle=n(DAe,"STRONG",{});var nKr=s(Kle);xEo=r(nKr,"distilbert"),nKr.forEach(t),$Eo=r(DAe," \u2014 "),$N=n(DAe,"A",{href:!0});var sKr=s($N);kEo=r(sKr,"DistilBertForMaskedLM"),sKr.forEach(t),SEo=r(DAe," (DistilBERT model)"),DAe.forEach(t),REo=i(H),l2=n(H,"LI",{});var GAe=s(l2);Zle=n(GAe,"STRONG",{});var lKr=s(Zle);BEo=r(lKr,"electra"),lKr.forEach(t),PEo=r(GAe," \u2014 "),kN=n(GAe,"A",{href:!0});var iKr=s(kN);IEo=r(iKr,"ElectraForMaskedLM"),iKr.forEach(t),qEo=r(GAe," (ELECTRA model)"),GAe.forEach(t),NEo=i(H),i2=n(H,"LI",{});var OAe=s(i2);eie=n(OAe,"STRONG",{});var dKr=s(eie);jEo=r(dKr,"flaubert"),dKr.forEach(t),DEo=r(OAe," \u2014 "),SN=n(OAe,"A",{href:!0});var cKr=s(SN);GEo=r(cKr,"FlaubertWithLMHeadModel"),cKr.forEach(t),OEo=r(OAe," (FlauBERT model)"),OAe.forEach(t),VEo=i(H),d2=n(H,"LI",{});var VAe=s(d2);oie=n(VAe,"STRONG",{});var fKr=s(oie);XEo=r(fKr,"fnet"),fKr.forEach(t),zEo=r(VAe," \u2014 "),RN=n(VAe,"A",{href:!0});var mKr=s(RN);QEo=r(mKr,"FNetForMaskedLM"),mKr.forEach(t),WEo=r(VAe," (FNet model)"),VAe.forEach(t),HEo=i(H),c2=n(H,"LI",{});var XAe=s(c2);rie=n(XAe,"STRONG",{});var gKr=s(rie);UEo=r(gKr,"funnel"),gKr.forEach(t),JEo=r(XAe," \u2014 "),BN=n(XAe,"A",{href:!0});var hKr=s(BN);YEo=r(hKr,"FunnelForMaskedLM"),hKr.forEach(t),KEo=r(XAe," (Funnel Transformer model)"),XAe.forEach(t),ZEo=i(H),f2=n(H,"LI",{});var zAe=s(f2);tie=n(zAe,"STRONG",{});var pKr=s(tie);e5o=r(pKr,"ibert"),pKr.forEach(t),o5o=r(zAe," \u2014 "),PN=n(zAe,"A",{href:!0});var uKr=s(PN);r5o=r(uKr,"IBertForMaskedLM"),uKr.forEach(t),t5o=r(zAe," (I-BERT model)"),zAe.forEach(t),a5o=i(H),m2=n(H,"LI",{});var QAe=s(m2);aie=n(QAe,"STRONG",{});var _Kr=s(aie);n5o=r(_Kr,"layoutlm"),_Kr.forEach(t),s5o=r(QAe," \u2014 "),IN=n(QAe,"A",{href:!0});var bKr=s(IN);l5o=r(bKr,"LayoutLMForMaskedLM"),bKr.forEach(t),i5o=r(QAe," (LayoutLM model)"),QAe.forEach(t),d5o=i(H),g2=n(H,"LI",{});var WAe=s(g2);nie=n(WAe,"STRONG",{});var vKr=s(nie);c5o=r(vKr,"longformer"),vKr.forEach(t),f5o=r(WAe," \u2014 "),qN=n(WAe,"A",{href:!0});var FKr=s(qN);m5o=r(FKr,"LongformerForMaskedLM"),FKr.forEach(t),g5o=r(WAe," (Longformer model)"),WAe.forEach(t),h5o=i(H),h2=n(H,"LI",{});var HAe=s(h2);sie=n(HAe,"STRONG",{});var TKr=s(sie);p5o=r(TKr,"mbart"),TKr.forEach(t),u5o=r(HAe," \u2014 "),NN=n(HAe,"A",{href:!0});var MKr=s(NN);_5o=r(MKr,"MBartForConditionalGeneration"),MKr.forEach(t),b5o=r(HAe," (mBART model)"),HAe.forEach(t),v5o=i(H),p2=n(H,"LI",{});var UAe=s(p2);lie=n(UAe,"STRONG",{});var EKr=s(lie);F5o=r(EKr,"megatron-bert"),EKr.forEach(t),T5o=r(UAe," \u2014 "),jN=n(UAe,"A",{href:!0});var CKr=s(jN);M5o=r(CKr,"MegatronBertForMaskedLM"),CKr.forEach(t),E5o=r(UAe," (MegatronBert model)"),UAe.forEach(t),C5o=i(H),u2=n(H,"LI",{});var JAe=s(u2);iie=n(JAe,"STRONG",{});var wKr=s(iie);w5o=r(wKr,"mobilebert"),wKr.forEach(t),A5o=r(JAe," \u2014 "),DN=n(JAe,"A",{href:!0});var AKr=s(DN);y5o=r(AKr,"MobileBertForMaskedLM"),AKr.forEach(t),L5o=r(JAe," (MobileBERT model)"),JAe.forEach(t),x5o=i(H),_2=n(H,"LI",{});var YAe=s(_2);die=n(YAe,"STRONG",{});var yKr=s(die);$5o=r(yKr,"mpnet"),yKr.forEach(t),k5o=r(YAe," \u2014 "),GN=n(YAe,"A",{href:!0});var LKr=s(GN);S5o=r(LKr,"MPNetForMaskedLM"),LKr.forEach(t),R5o=r(YAe," (MPNet model)"),YAe.forEach(t),B5o=i(H),b2=n(H,"LI",{});var KAe=s(b2);cie=n(KAe,"STRONG",{});var xKr=s(cie);P5o=r(xKr,"nystromformer"),xKr.forEach(t),I5o=r(KAe," \u2014 "),ON=n(KAe,"A",{href:!0});var $Kr=s(ON);q5o=r($Kr,"NystromformerForMaskedLM"),$Kr.forEach(t),N5o=r(KAe," (Nystromformer model)"),KAe.forEach(t),j5o=i(H),v2=n(H,"LI",{});var ZAe=s(v2);fie=n(ZAe,"STRONG",{});var kKr=s(fie);D5o=r(kKr,"perceiver"),kKr.forEach(t),G5o=r(ZAe," \u2014 "),VN=n(ZAe,"A",{href:!0});var SKr=s(VN);O5o=r(SKr,"PerceiverForMaskedLM"),SKr.forEach(t),V5o=r(ZAe," (Perceiver model)"),ZAe.forEach(t),X5o=i(H),F2=n(H,"LI",{});var e0e=s(F2);mie=n(e0e,"STRONG",{});var RKr=s(mie);z5o=r(RKr,"qdqbert"),RKr.forEach(t),Q5o=r(e0e," \u2014 "),XN=n(e0e,"A",{href:!0});var BKr=s(XN);W5o=r(BKr,"QDQBertForMaskedLM"),BKr.forEach(t),H5o=r(e0e," (QDQBert model)"),e0e.forEach(t),U5o=i(H),T2=n(H,"LI",{});var o0e=s(T2);gie=n(o0e,"STRONG",{});var PKr=s(gie);J5o=r(PKr,"reformer"),PKr.forEach(t),Y5o=r(o0e," \u2014 "),zN=n(o0e,"A",{href:!0});var IKr=s(zN);K5o=r(IKr,"ReformerForMaskedLM"),IKr.forEach(t),Z5o=r(o0e," (Reformer model)"),o0e.forEach(t),eCo=i(H),M2=n(H,"LI",{});var r0e=s(M2);hie=n(r0e,"STRONG",{});var qKr=s(hie);oCo=r(qKr,"rembert"),qKr.forEach(t),rCo=r(r0e," \u2014 "),QN=n(r0e,"A",{href:!0});var NKr=s(QN);tCo=r(NKr,"RemBertForMaskedLM"),NKr.forEach(t),aCo=r(r0e," (RemBERT model)"),r0e.forEach(t),nCo=i(H),E2=n(H,"LI",{});var t0e=s(E2);pie=n(t0e,"STRONG",{});var jKr=s(pie);sCo=r(jKr,"roberta"),jKr.forEach(t),lCo=r(t0e," \u2014 "),WN=n(t0e,"A",{href:!0});var DKr=s(WN);iCo=r(DKr,"RobertaForMaskedLM"),DKr.forEach(t),dCo=r(t0e," (RoBERTa model)"),t0e.forEach(t),cCo=i(H),C2=n(H,"LI",{});var a0e=s(C2);uie=n(a0e,"STRONG",{});var GKr=s(uie);fCo=r(GKr,"roformer"),GKr.forEach(t),mCo=r(a0e," \u2014 "),HN=n(a0e,"A",{href:!0});var OKr=s(HN);gCo=r(OKr,"RoFormerForMaskedLM"),OKr.forEach(t),hCo=r(a0e," (RoFormer model)"),a0e.forEach(t),pCo=i(H),w2=n(H,"LI",{});var n0e=s(w2);_ie=n(n0e,"STRONG",{});var VKr=s(_ie);uCo=r(VKr,"squeezebert"),VKr.forEach(t),_Co=r(n0e," \u2014 "),UN=n(n0e,"A",{href:!0});var XKr=s(UN);bCo=r(XKr,"SqueezeBertForMaskedLM"),XKr.forEach(t),vCo=r(n0e," (SqueezeBERT model)"),n0e.forEach(t),FCo=i(H),A2=n(H,"LI",{});var s0e=s(A2);bie=n(s0e,"STRONG",{});var zKr=s(bie);TCo=r(zKr,"tapas"),zKr.forEach(t),MCo=r(s0e," \u2014 "),JN=n(s0e,"A",{href:!0});var QKr=s(JN);ECo=r(QKr,"TapasForMaskedLM"),QKr.forEach(t),CCo=r(s0e," (TAPAS model)"),s0e.forEach(t),wCo=i(H),y2=n(H,"LI",{});var l0e=s(y2);vie=n(l0e,"STRONG",{});var WKr=s(vie);ACo=r(WKr,"wav2vec2"),WKr.forEach(t),yCo=r(l0e," \u2014 "),Fie=n(l0e,"CODE",{});var HKr=s(Fie);LCo=r(HKr,"Wav2Vec2ForMaskedLM"),HKr.forEach(t),xCo=r(l0e," (Wav2Vec2 model)"),l0e.forEach(t),$Co=i(H),L2=n(H,"LI",{});var i0e=s(L2);Tie=n(i0e,"STRONG",{});var UKr=s(Tie);kCo=r(UKr,"xlm"),UKr.forEach(t),SCo=r(i0e," \u2014 "),YN=n(i0e,"A",{href:!0});var JKr=s(YN);RCo=r(JKr,"XLMWithLMHeadModel"),JKr.forEach(t),BCo=r(i0e," (XLM model)"),i0e.forEach(t),PCo=i(H),x2=n(H,"LI",{});var d0e=s(x2);Mie=n(d0e,"STRONG",{});var YKr=s(Mie);ICo=r(YKr,"xlm-roberta"),YKr.forEach(t),qCo=r(d0e," \u2014 "),KN=n(d0e,"A",{href:!0});var KKr=s(KN);NCo=r(KKr,"XLMRobertaForMaskedLM"),KKr.forEach(t),jCo=r(d0e," (XLM-RoBERTa model)"),d0e.forEach(t),DCo=i(H),$2=n(H,"LI",{});var c0e=s($2);Eie=n(c0e,"STRONG",{});var ZKr=s(Eie);GCo=r(ZKr,"xlm-roberta-xl"),ZKr.forEach(t),OCo=r(c0e," \u2014 "),ZN=n(c0e,"A",{href:!0});var eZr=s(ZN);VCo=r(eZr,"XLMRobertaXLForMaskedLM"),eZr.forEach(t),XCo=r(c0e," (XLM-RoBERTa-XL model)"),c0e.forEach(t),zCo=i(H),k2=n(H,"LI",{});var f0e=s(k2);Cie=n(f0e,"STRONG",{});var oZr=s(Cie);QCo=r(oZr,"yoso"),oZr.forEach(t),WCo=r(f0e," \u2014 "),ej=n(f0e,"A",{href:!0});var rZr=s(ej);HCo=r(rZr,"YosoForMaskedLM"),rZr.forEach(t),UCo=r(f0e," (YOSO model)"),f0e.forEach(t),H.forEach(t),JCo=i(Zt),S2=n(Zt,"P",{});var m0e=s(S2);YCo=r(m0e,"The model is set in evaluation mode by default using "),wie=n(m0e,"CODE",{});var tZr=s(wie);KCo=r(tZr,"model.eval()"),tZr.forEach(t),ZCo=r(m0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Aie=n(m0e,"CODE",{});var aZr=s(Aie);e3o=r(aZr,"model.train()"),aZr.forEach(t),m0e.forEach(t),o3o=i(Zt),T(R2.$$.fragment,Zt),Zt.forEach(t),Ns.forEach(t),PBe=i(f),yi=n(f,"H2",{class:!0});var qIe=s(yi);B2=n(qIe,"A",{id:!0,class:!0,href:!0});var nZr=s(B2);yie=n(nZr,"SPAN",{});var sZr=s(yie);T(u0.$$.fragment,sZr),sZr.forEach(t),nZr.forEach(t),r3o=i(qIe),Lie=n(qIe,"SPAN",{});var lZr=s(Lie);t3o=r(lZr,"AutoModelForSeq2SeqLM"),lZr.forEach(t),qIe.forEach(t),IBe=i(f),So=n(f,"DIV",{class:!0});var js=s(So);T(_0.$$.fragment,js),a3o=i(js),Li=n(js,"P",{});var EY=s(Li);n3o=r(EY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),oj=n(EY,"A",{href:!0});var iZr=s(oj);s3o=r(iZr,"from_pretrained()"),iZr.forEach(t),l3o=r(EY," class method or the "),rj=n(EY,"A",{href:!0});var dZr=s(rj);i3o=r(dZr,"from_config()"),dZr.forEach(t),d3o=r(EY,` class
method.`),EY.forEach(t),c3o=i(js),b0=n(js,"P",{});var NIe=s(b0);f3o=r(NIe,"This class cannot be instantiated directly using "),xie=n(NIe,"CODE",{});var cZr=s(xie);m3o=r(cZr,"__init__()"),cZr.forEach(t),g3o=r(NIe," (throws an error)."),NIe.forEach(t),h3o=i(js),tt=n(js,"DIV",{class:!0});var q3=s(tt);T(v0.$$.fragment,q3),p3o=i(q3),$ie=n(q3,"P",{});var fZr=s($ie);u3o=r(fZr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),fZr.forEach(t),_3o=i(q3),xi=n(q3,"P",{});var CY=s(xi);b3o=r(CY,`Note:
Loading a model from its configuration file does `),kie=n(CY,"STRONG",{});var mZr=s(kie);v3o=r(mZr,"not"),mZr.forEach(t),F3o=r(CY,` load the model weights. It only affects the
model\u2019s configuration. Use `),tj=n(CY,"A",{href:!0});var gZr=s(tj);T3o=r(gZr,"from_pretrained()"),gZr.forEach(t),M3o=r(CY," to load the model weights."),CY.forEach(t),E3o=i(q3),T(P2.$$.fragment,q3),q3.forEach(t),C3o=i(js),Ke=n(js,"DIV",{class:!0});var ea=s(Ke);T(F0.$$.fragment,ea),w3o=i(ea),Sie=n(ea,"P",{});var hZr=s(Sie);A3o=r(hZr,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),hZr.forEach(t),y3o=i(ea),ya=n(ea,"P",{});var N3=s(ya);L3o=r(N3,"The model class to instantiate is selected based on the "),Rie=n(N3,"CODE",{});var pZr=s(Rie);x3o=r(pZr,"model_type"),pZr.forEach(t),$3o=r(N3,` property of the config object (either
passed as an argument or loaded from `),Bie=n(N3,"CODE",{});var uZr=s(Bie);k3o=r(uZr,"pretrained_model_name_or_path"),uZr.forEach(t),S3o=r(N3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pie=n(N3,"CODE",{});var _Zr=s(Pie);R3o=r(_Zr,"pretrained_model_name_or_path"),_Zr.forEach(t),B3o=r(N3,":"),N3.forEach(t),P3o=i(ea),he=n(ea,"UL",{});var ue=s(he);I2=n(ue,"LI",{});var g0e=s(I2);Iie=n(g0e,"STRONG",{});var bZr=s(Iie);I3o=r(bZr,"bart"),bZr.forEach(t),q3o=r(g0e," \u2014 "),aj=n(g0e,"A",{href:!0});var vZr=s(aj);N3o=r(vZr,"BartForConditionalGeneration"),vZr.forEach(t),j3o=r(g0e," (BART model)"),g0e.forEach(t),D3o=i(ue),q2=n(ue,"LI",{});var h0e=s(q2);qie=n(h0e,"STRONG",{});var FZr=s(qie);G3o=r(FZr,"bigbird_pegasus"),FZr.forEach(t),O3o=r(h0e," \u2014 "),nj=n(h0e,"A",{href:!0});var TZr=s(nj);V3o=r(TZr,"BigBirdPegasusForConditionalGeneration"),TZr.forEach(t),X3o=r(h0e," (BigBirdPegasus model)"),h0e.forEach(t),z3o=i(ue),N2=n(ue,"LI",{});var p0e=s(N2);Nie=n(p0e,"STRONG",{});var MZr=s(Nie);Q3o=r(MZr,"blenderbot"),MZr.forEach(t),W3o=r(p0e," \u2014 "),sj=n(p0e,"A",{href:!0});var EZr=s(sj);H3o=r(EZr,"BlenderbotForConditionalGeneration"),EZr.forEach(t),U3o=r(p0e," (Blenderbot model)"),p0e.forEach(t),J3o=i(ue),j2=n(ue,"LI",{});var u0e=s(j2);jie=n(u0e,"STRONG",{});var CZr=s(jie);Y3o=r(CZr,"blenderbot-small"),CZr.forEach(t),K3o=r(u0e," \u2014 "),lj=n(u0e,"A",{href:!0});var wZr=s(lj);Z3o=r(wZr,"BlenderbotSmallForConditionalGeneration"),wZr.forEach(t),ewo=r(u0e," (BlenderbotSmall model)"),u0e.forEach(t),owo=i(ue),D2=n(ue,"LI",{});var _0e=s(D2);Die=n(_0e,"STRONG",{});var AZr=s(Die);rwo=r(AZr,"encoder-decoder"),AZr.forEach(t),two=r(_0e," \u2014 "),ij=n(_0e,"A",{href:!0});var yZr=s(ij);awo=r(yZr,"EncoderDecoderModel"),yZr.forEach(t),nwo=r(_0e," (Encoder decoder model)"),_0e.forEach(t),swo=i(ue),G2=n(ue,"LI",{});var b0e=s(G2);Gie=n(b0e,"STRONG",{});var LZr=s(Gie);lwo=r(LZr,"fsmt"),LZr.forEach(t),iwo=r(b0e," \u2014 "),dj=n(b0e,"A",{href:!0});var xZr=s(dj);dwo=r(xZr,"FSMTForConditionalGeneration"),xZr.forEach(t),cwo=r(b0e," (FairSeq Machine-Translation model)"),b0e.forEach(t),fwo=i(ue),O2=n(ue,"LI",{});var v0e=s(O2);Oie=n(v0e,"STRONG",{});var $Zr=s(Oie);mwo=r($Zr,"led"),$Zr.forEach(t),gwo=r(v0e," \u2014 "),cj=n(v0e,"A",{href:!0});var kZr=s(cj);hwo=r(kZr,"LEDForConditionalGeneration"),kZr.forEach(t),pwo=r(v0e," (LED model)"),v0e.forEach(t),uwo=i(ue),V2=n(ue,"LI",{});var F0e=s(V2);Vie=n(F0e,"STRONG",{});var SZr=s(Vie);_wo=r(SZr,"m2m_100"),SZr.forEach(t),bwo=r(F0e," \u2014 "),fj=n(F0e,"A",{href:!0});var RZr=s(fj);vwo=r(RZr,"M2M100ForConditionalGeneration"),RZr.forEach(t),Fwo=r(F0e," (M2M100 model)"),F0e.forEach(t),Two=i(ue),X2=n(ue,"LI",{});var T0e=s(X2);Xie=n(T0e,"STRONG",{});var BZr=s(Xie);Mwo=r(BZr,"marian"),BZr.forEach(t),Ewo=r(T0e," \u2014 "),mj=n(T0e,"A",{href:!0});var PZr=s(mj);Cwo=r(PZr,"MarianMTModel"),PZr.forEach(t),wwo=r(T0e," (Marian model)"),T0e.forEach(t),Awo=i(ue),z2=n(ue,"LI",{});var M0e=s(z2);zie=n(M0e,"STRONG",{});var IZr=s(zie);ywo=r(IZr,"mbart"),IZr.forEach(t),Lwo=r(M0e," \u2014 "),gj=n(M0e,"A",{href:!0});var qZr=s(gj);xwo=r(qZr,"MBartForConditionalGeneration"),qZr.forEach(t),$wo=r(M0e," (mBART model)"),M0e.forEach(t),kwo=i(ue),Q2=n(ue,"LI",{});var E0e=s(Q2);Qie=n(E0e,"STRONG",{});var NZr=s(Qie);Swo=r(NZr,"mt5"),NZr.forEach(t),Rwo=r(E0e," \u2014 "),hj=n(E0e,"A",{href:!0});var jZr=s(hj);Bwo=r(jZr,"MT5ForConditionalGeneration"),jZr.forEach(t),Pwo=r(E0e," (mT5 model)"),E0e.forEach(t),Iwo=i(ue),W2=n(ue,"LI",{});var C0e=s(W2);Wie=n(C0e,"STRONG",{});var DZr=s(Wie);qwo=r(DZr,"pegasus"),DZr.forEach(t),Nwo=r(C0e," \u2014 "),pj=n(C0e,"A",{href:!0});var GZr=s(pj);jwo=r(GZr,"PegasusForConditionalGeneration"),GZr.forEach(t),Dwo=r(C0e," (Pegasus model)"),C0e.forEach(t),Gwo=i(ue),H2=n(ue,"LI",{});var w0e=s(H2);Hie=n(w0e,"STRONG",{});var OZr=s(Hie);Owo=r(OZr,"plbart"),OZr.forEach(t),Vwo=r(w0e," \u2014 "),uj=n(w0e,"A",{href:!0});var VZr=s(uj);Xwo=r(VZr,"PLBartForConditionalGeneration"),VZr.forEach(t),zwo=r(w0e," (PLBart model)"),w0e.forEach(t),Qwo=i(ue),U2=n(ue,"LI",{});var A0e=s(U2);Uie=n(A0e,"STRONG",{});var XZr=s(Uie);Wwo=r(XZr,"prophetnet"),XZr.forEach(t),Hwo=r(A0e," \u2014 "),_j=n(A0e,"A",{href:!0});var zZr=s(_j);Uwo=r(zZr,"ProphetNetForConditionalGeneration"),zZr.forEach(t),Jwo=r(A0e," (ProphetNet model)"),A0e.forEach(t),Ywo=i(ue),J2=n(ue,"LI",{});var y0e=s(J2);Jie=n(y0e,"STRONG",{});var QZr=s(Jie);Kwo=r(QZr,"t5"),QZr.forEach(t),Zwo=r(y0e," \u2014 "),bj=n(y0e,"A",{href:!0});var WZr=s(bj);eAo=r(WZr,"T5ForConditionalGeneration"),WZr.forEach(t),oAo=r(y0e," (T5 model)"),y0e.forEach(t),rAo=i(ue),Y2=n(ue,"LI",{});var L0e=s(Y2);Yie=n(L0e,"STRONG",{});var HZr=s(Yie);tAo=r(HZr,"tapex"),HZr.forEach(t),aAo=r(L0e," \u2014 "),vj=n(L0e,"A",{href:!0});var UZr=s(vj);nAo=r(UZr,"BartForConditionalGeneration"),UZr.forEach(t),sAo=r(L0e," (TAPEX model)"),L0e.forEach(t),lAo=i(ue),K2=n(ue,"LI",{});var x0e=s(K2);Kie=n(x0e,"STRONG",{});var JZr=s(Kie);iAo=r(JZr,"xlm-prophetnet"),JZr.forEach(t),dAo=r(x0e," \u2014 "),Fj=n(x0e,"A",{href:!0});var YZr=s(Fj);cAo=r(YZr,"XLMProphetNetForConditionalGeneration"),YZr.forEach(t),fAo=r(x0e," (XLMProphetNet model)"),x0e.forEach(t),ue.forEach(t),mAo=i(ea),Z2=n(ea,"P",{});var $0e=s(Z2);gAo=r($0e,"The model is set in evaluation mode by default using "),Zie=n($0e,"CODE",{});var KZr=s(Zie);hAo=r(KZr,"model.eval()"),KZr.forEach(t),pAo=r($0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ede=n($0e,"CODE",{});var ZZr=s(ede);uAo=r(ZZr,"model.train()"),ZZr.forEach(t),$0e.forEach(t),_Ao=i(ea),T(e6.$$.fragment,ea),ea.forEach(t),js.forEach(t),qBe=i(f),$i=n(f,"H2",{class:!0});var jIe=s($i);o6=n(jIe,"A",{id:!0,class:!0,href:!0});var eet=s(o6);ode=n(eet,"SPAN",{});var oet=s(ode);T(T0.$$.fragment,oet),oet.forEach(t),eet.forEach(t),bAo=i(jIe),rde=n(jIe,"SPAN",{});var ret=s(rde);vAo=r(ret,"AutoModelForSequenceClassification"),ret.forEach(t),jIe.forEach(t),NBe=i(f),Ro=n(f,"DIV",{class:!0});var Ds=s(Ro);T(M0.$$.fragment,Ds),FAo=i(Ds),ki=n(Ds,"P",{});var wY=s(ki);TAo=r(wY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Tj=n(wY,"A",{href:!0});var tet=s(Tj);MAo=r(tet,"from_pretrained()"),tet.forEach(t),EAo=r(wY," class method or the "),Mj=n(wY,"A",{href:!0});var aet=s(Mj);CAo=r(aet,"from_config()"),aet.forEach(t),wAo=r(wY,` class
method.`),wY.forEach(t),AAo=i(Ds),E0=n(Ds,"P",{});var DIe=s(E0);yAo=r(DIe,"This class cannot be instantiated directly using "),tde=n(DIe,"CODE",{});var net=s(tde);LAo=r(net,"__init__()"),net.forEach(t),xAo=r(DIe," (throws an error)."),DIe.forEach(t),$Ao=i(Ds),at=n(Ds,"DIV",{class:!0});var j3=s(at);T(C0.$$.fragment,j3),kAo=i(j3),ade=n(j3,"P",{});var set=s(ade);SAo=r(set,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),set.forEach(t),RAo=i(j3),Si=n(j3,"P",{});var AY=s(Si);BAo=r(AY,`Note:
Loading a model from its configuration file does `),nde=n(AY,"STRONG",{});var iet=s(nde);PAo=r(iet,"not"),iet.forEach(t),IAo=r(AY,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ej=n(AY,"A",{href:!0});var det=s(Ej);qAo=r(det,"from_pretrained()"),det.forEach(t),NAo=r(AY," to load the model weights."),AY.forEach(t),jAo=i(j3),T(r6.$$.fragment,j3),j3.forEach(t),DAo=i(Ds),Ze=n(Ds,"DIV",{class:!0});var oa=s(Ze);T(w0.$$.fragment,oa),GAo=i(oa),sde=n(oa,"P",{});var cet=s(sde);OAo=r(cet,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),cet.forEach(t),VAo=i(oa),La=n(oa,"P",{});var D3=s(La);XAo=r(D3,"The model class to instantiate is selected based on the "),lde=n(D3,"CODE",{});var fet=s(lde);zAo=r(fet,"model_type"),fet.forEach(t),QAo=r(D3,` property of the config object (either
passed as an argument or loaded from `),ide=n(D3,"CODE",{});var met=s(ide);WAo=r(met,"pretrained_model_name_or_path"),met.forEach(t),HAo=r(D3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dde=n(D3,"CODE",{});var get=s(dde);UAo=r(get,"pretrained_model_name_or_path"),get.forEach(t),JAo=r(D3,":"),D3.forEach(t),YAo=i(oa),q=n(oa,"UL",{});var N=s(q);t6=n(N,"LI",{});var k0e=s(t6);cde=n(k0e,"STRONG",{});var het=s(cde);KAo=r(het,"albert"),het.forEach(t),ZAo=r(k0e," \u2014 "),Cj=n(k0e,"A",{href:!0});var pet=s(Cj);e0o=r(pet,"AlbertForSequenceClassification"),pet.forEach(t),o0o=r(k0e," (ALBERT model)"),k0e.forEach(t),r0o=i(N),a6=n(N,"LI",{});var S0e=s(a6);fde=n(S0e,"STRONG",{});var uet=s(fde);t0o=r(uet,"bart"),uet.forEach(t),a0o=r(S0e," \u2014 "),wj=n(S0e,"A",{href:!0});var _et=s(wj);n0o=r(_et,"BartForSequenceClassification"),_et.forEach(t),s0o=r(S0e," (BART model)"),S0e.forEach(t),l0o=i(N),n6=n(N,"LI",{});var R0e=s(n6);mde=n(R0e,"STRONG",{});var bet=s(mde);i0o=r(bet,"bert"),bet.forEach(t),d0o=r(R0e," \u2014 "),Aj=n(R0e,"A",{href:!0});var vet=s(Aj);c0o=r(vet,"BertForSequenceClassification"),vet.forEach(t),f0o=r(R0e," (BERT model)"),R0e.forEach(t),m0o=i(N),s6=n(N,"LI",{});var B0e=s(s6);gde=n(B0e,"STRONG",{});var Fet=s(gde);g0o=r(Fet,"big_bird"),Fet.forEach(t),h0o=r(B0e," \u2014 "),yj=n(B0e,"A",{href:!0});var Tet=s(yj);p0o=r(Tet,"BigBirdForSequenceClassification"),Tet.forEach(t),u0o=r(B0e," (BigBird model)"),B0e.forEach(t),_0o=i(N),l6=n(N,"LI",{});var P0e=s(l6);hde=n(P0e,"STRONG",{});var Met=s(hde);b0o=r(Met,"bigbird_pegasus"),Met.forEach(t),v0o=r(P0e," \u2014 "),Lj=n(P0e,"A",{href:!0});var Eet=s(Lj);F0o=r(Eet,"BigBirdPegasusForSequenceClassification"),Eet.forEach(t),T0o=r(P0e," (BigBirdPegasus model)"),P0e.forEach(t),M0o=i(N),i6=n(N,"LI",{});var I0e=s(i6);pde=n(I0e,"STRONG",{});var Cet=s(pde);E0o=r(Cet,"camembert"),Cet.forEach(t),C0o=r(I0e," \u2014 "),xj=n(I0e,"A",{href:!0});var wet=s(xj);w0o=r(wet,"CamembertForSequenceClassification"),wet.forEach(t),A0o=r(I0e," (CamemBERT model)"),I0e.forEach(t),y0o=i(N),d6=n(N,"LI",{});var q0e=s(d6);ude=n(q0e,"STRONG",{});var Aet=s(ude);L0o=r(Aet,"canine"),Aet.forEach(t),x0o=r(q0e," \u2014 "),$j=n(q0e,"A",{href:!0});var yet=s($j);$0o=r(yet,"CanineForSequenceClassification"),yet.forEach(t),k0o=r(q0e," (Canine model)"),q0e.forEach(t),S0o=i(N),c6=n(N,"LI",{});var N0e=s(c6);_de=n(N0e,"STRONG",{});var Let=s(_de);R0o=r(Let,"convbert"),Let.forEach(t),B0o=r(N0e," \u2014 "),kj=n(N0e,"A",{href:!0});var xet=s(kj);P0o=r(xet,"ConvBertForSequenceClassification"),xet.forEach(t),I0o=r(N0e," (ConvBERT model)"),N0e.forEach(t),q0o=i(N),f6=n(N,"LI",{});var j0e=s(f6);bde=n(j0e,"STRONG",{});var $et=s(bde);N0o=r($et,"ctrl"),$et.forEach(t),j0o=r(j0e," \u2014 "),Sj=n(j0e,"A",{href:!0});var ket=s(Sj);D0o=r(ket,"CTRLForSequenceClassification"),ket.forEach(t),G0o=r(j0e," (CTRL model)"),j0e.forEach(t),O0o=i(N),m6=n(N,"LI",{});var D0e=s(m6);vde=n(D0e,"STRONG",{});var Set=s(vde);V0o=r(Set,"data2vec-text"),Set.forEach(t),X0o=r(D0e," \u2014 "),Rj=n(D0e,"A",{href:!0});var Ret=s(Rj);z0o=r(Ret,"Data2VecTextForSequenceClassification"),Ret.forEach(t),Q0o=r(D0e," (Data2VecText model)"),D0e.forEach(t),W0o=i(N),g6=n(N,"LI",{});var G0e=s(g6);Fde=n(G0e,"STRONG",{});var Bet=s(Fde);H0o=r(Bet,"deberta"),Bet.forEach(t),U0o=r(G0e," \u2014 "),Bj=n(G0e,"A",{href:!0});var Pet=s(Bj);J0o=r(Pet,"DebertaForSequenceClassification"),Pet.forEach(t),Y0o=r(G0e," (DeBERTa model)"),G0e.forEach(t),K0o=i(N),h6=n(N,"LI",{});var O0e=s(h6);Tde=n(O0e,"STRONG",{});var Iet=s(Tde);Z0o=r(Iet,"deberta-v2"),Iet.forEach(t),eyo=r(O0e," \u2014 "),Pj=n(O0e,"A",{href:!0});var qet=s(Pj);oyo=r(qet,"DebertaV2ForSequenceClassification"),qet.forEach(t),ryo=r(O0e," (DeBERTa-v2 model)"),O0e.forEach(t),tyo=i(N),p6=n(N,"LI",{});var V0e=s(p6);Mde=n(V0e,"STRONG",{});var Net=s(Mde);ayo=r(Net,"distilbert"),Net.forEach(t),nyo=r(V0e," \u2014 "),Ij=n(V0e,"A",{href:!0});var jet=s(Ij);syo=r(jet,"DistilBertForSequenceClassification"),jet.forEach(t),lyo=r(V0e," (DistilBERT model)"),V0e.forEach(t),iyo=i(N),u6=n(N,"LI",{});var X0e=s(u6);Ede=n(X0e,"STRONG",{});var Det=s(Ede);dyo=r(Det,"electra"),Det.forEach(t),cyo=r(X0e," \u2014 "),qj=n(X0e,"A",{href:!0});var Get=s(qj);fyo=r(Get,"ElectraForSequenceClassification"),Get.forEach(t),myo=r(X0e," (ELECTRA model)"),X0e.forEach(t),gyo=i(N),_6=n(N,"LI",{});var z0e=s(_6);Cde=n(z0e,"STRONG",{});var Oet=s(Cde);hyo=r(Oet,"flaubert"),Oet.forEach(t),pyo=r(z0e," \u2014 "),Nj=n(z0e,"A",{href:!0});var Vet=s(Nj);uyo=r(Vet,"FlaubertForSequenceClassification"),Vet.forEach(t),_yo=r(z0e," (FlauBERT model)"),z0e.forEach(t),byo=i(N),b6=n(N,"LI",{});var Q0e=s(b6);wde=n(Q0e,"STRONG",{});var Xet=s(wde);vyo=r(Xet,"fnet"),Xet.forEach(t),Fyo=r(Q0e," \u2014 "),jj=n(Q0e,"A",{href:!0});var zet=s(jj);Tyo=r(zet,"FNetForSequenceClassification"),zet.forEach(t),Myo=r(Q0e," (FNet model)"),Q0e.forEach(t),Eyo=i(N),v6=n(N,"LI",{});var W0e=s(v6);Ade=n(W0e,"STRONG",{});var Qet=s(Ade);Cyo=r(Qet,"funnel"),Qet.forEach(t),wyo=r(W0e," \u2014 "),Dj=n(W0e,"A",{href:!0});var Wet=s(Dj);Ayo=r(Wet,"FunnelForSequenceClassification"),Wet.forEach(t),yyo=r(W0e," (Funnel Transformer model)"),W0e.forEach(t),Lyo=i(N),F6=n(N,"LI",{});var H0e=s(F6);yde=n(H0e,"STRONG",{});var Het=s(yde);xyo=r(Het,"gpt2"),Het.forEach(t),$yo=r(H0e," \u2014 "),Gj=n(H0e,"A",{href:!0});var Uet=s(Gj);kyo=r(Uet,"GPT2ForSequenceClassification"),Uet.forEach(t),Syo=r(H0e," (OpenAI GPT-2 model)"),H0e.forEach(t),Ryo=i(N),T6=n(N,"LI",{});var U0e=s(T6);Lde=n(U0e,"STRONG",{});var Jet=s(Lde);Byo=r(Jet,"gpt_neo"),Jet.forEach(t),Pyo=r(U0e," \u2014 "),Oj=n(U0e,"A",{href:!0});var Yet=s(Oj);Iyo=r(Yet,"GPTNeoForSequenceClassification"),Yet.forEach(t),qyo=r(U0e," (GPT Neo model)"),U0e.forEach(t),Nyo=i(N),M6=n(N,"LI",{});var J0e=s(M6);xde=n(J0e,"STRONG",{});var Ket=s(xde);jyo=r(Ket,"gptj"),Ket.forEach(t),Dyo=r(J0e," \u2014 "),Vj=n(J0e,"A",{href:!0});var Zet=s(Vj);Gyo=r(Zet,"GPTJForSequenceClassification"),Zet.forEach(t),Oyo=r(J0e," (GPT-J model)"),J0e.forEach(t),Vyo=i(N),E6=n(N,"LI",{});var Y0e=s(E6);$de=n(Y0e,"STRONG",{});var eot=s($de);Xyo=r(eot,"ibert"),eot.forEach(t),zyo=r(Y0e," \u2014 "),Xj=n(Y0e,"A",{href:!0});var oot=s(Xj);Qyo=r(oot,"IBertForSequenceClassification"),oot.forEach(t),Wyo=r(Y0e," (I-BERT model)"),Y0e.forEach(t),Hyo=i(N),C6=n(N,"LI",{});var K0e=s(C6);kde=n(K0e,"STRONG",{});var rot=s(kde);Uyo=r(rot,"layoutlm"),rot.forEach(t),Jyo=r(K0e," \u2014 "),zj=n(K0e,"A",{href:!0});var tot=s(zj);Yyo=r(tot,"LayoutLMForSequenceClassification"),tot.forEach(t),Kyo=r(K0e," (LayoutLM model)"),K0e.forEach(t),Zyo=i(N),w6=n(N,"LI",{});var Z0e=s(w6);Sde=n(Z0e,"STRONG",{});var aot=s(Sde);eLo=r(aot,"layoutlmv2"),aot.forEach(t),oLo=r(Z0e," \u2014 "),Qj=n(Z0e,"A",{href:!0});var not=s(Qj);rLo=r(not,"LayoutLMv2ForSequenceClassification"),not.forEach(t),tLo=r(Z0e," (LayoutLMv2 model)"),Z0e.forEach(t),aLo=i(N),A6=n(N,"LI",{});var eye=s(A6);Rde=n(eye,"STRONG",{});var sot=s(Rde);nLo=r(sot,"led"),sot.forEach(t),sLo=r(eye," \u2014 "),Wj=n(eye,"A",{href:!0});var lot=s(Wj);lLo=r(lot,"LEDForSequenceClassification"),lot.forEach(t),iLo=r(eye," (LED model)"),eye.forEach(t),dLo=i(N),y6=n(N,"LI",{});var oye=s(y6);Bde=n(oye,"STRONG",{});var iot=s(Bde);cLo=r(iot,"longformer"),iot.forEach(t),fLo=r(oye," \u2014 "),Hj=n(oye,"A",{href:!0});var dot=s(Hj);mLo=r(dot,"LongformerForSequenceClassification"),dot.forEach(t),gLo=r(oye," (Longformer model)"),oye.forEach(t),hLo=i(N),L6=n(N,"LI",{});var rye=s(L6);Pde=n(rye,"STRONG",{});var cot=s(Pde);pLo=r(cot,"mbart"),cot.forEach(t),uLo=r(rye," \u2014 "),Uj=n(rye,"A",{href:!0});var fot=s(Uj);_Lo=r(fot,"MBartForSequenceClassification"),fot.forEach(t),bLo=r(rye," (mBART model)"),rye.forEach(t),vLo=i(N),x6=n(N,"LI",{});var tye=s(x6);Ide=n(tye,"STRONG",{});var mot=s(Ide);FLo=r(mot,"megatron-bert"),mot.forEach(t),TLo=r(tye," \u2014 "),Jj=n(tye,"A",{href:!0});var got=s(Jj);MLo=r(got,"MegatronBertForSequenceClassification"),got.forEach(t),ELo=r(tye," (MegatronBert model)"),tye.forEach(t),CLo=i(N),$6=n(N,"LI",{});var aye=s($6);qde=n(aye,"STRONG",{});var hot=s(qde);wLo=r(hot,"mobilebert"),hot.forEach(t),ALo=r(aye," \u2014 "),Yj=n(aye,"A",{href:!0});var pot=s(Yj);yLo=r(pot,"MobileBertForSequenceClassification"),pot.forEach(t),LLo=r(aye," (MobileBERT model)"),aye.forEach(t),xLo=i(N),k6=n(N,"LI",{});var nye=s(k6);Nde=n(nye,"STRONG",{});var uot=s(Nde);$Lo=r(uot,"mpnet"),uot.forEach(t),kLo=r(nye," \u2014 "),Kj=n(nye,"A",{href:!0});var _ot=s(Kj);SLo=r(_ot,"MPNetForSequenceClassification"),_ot.forEach(t),RLo=r(nye," (MPNet model)"),nye.forEach(t),BLo=i(N),S6=n(N,"LI",{});var sye=s(S6);jde=n(sye,"STRONG",{});var bot=s(jde);PLo=r(bot,"nystromformer"),bot.forEach(t),ILo=r(sye," \u2014 "),Zj=n(sye,"A",{href:!0});var vot=s(Zj);qLo=r(vot,"NystromformerForSequenceClassification"),vot.forEach(t),NLo=r(sye," (Nystromformer model)"),sye.forEach(t),jLo=i(N),R6=n(N,"LI",{});var lye=s(R6);Dde=n(lye,"STRONG",{});var Fot=s(Dde);DLo=r(Fot,"openai-gpt"),Fot.forEach(t),GLo=r(lye," \u2014 "),eD=n(lye,"A",{href:!0});var Tot=s(eD);OLo=r(Tot,"OpenAIGPTForSequenceClassification"),Tot.forEach(t),VLo=r(lye," (OpenAI GPT model)"),lye.forEach(t),XLo=i(N),B6=n(N,"LI",{});var iye=s(B6);Gde=n(iye,"STRONG",{});var Mot=s(Gde);zLo=r(Mot,"perceiver"),Mot.forEach(t),QLo=r(iye," \u2014 "),oD=n(iye,"A",{href:!0});var Eot=s(oD);WLo=r(Eot,"PerceiverForSequenceClassification"),Eot.forEach(t),HLo=r(iye," (Perceiver model)"),iye.forEach(t),ULo=i(N),P6=n(N,"LI",{});var dye=s(P6);Ode=n(dye,"STRONG",{});var Cot=s(Ode);JLo=r(Cot,"plbart"),Cot.forEach(t),YLo=r(dye," \u2014 "),rD=n(dye,"A",{href:!0});var wot=s(rD);KLo=r(wot,"PLBartForSequenceClassification"),wot.forEach(t),ZLo=r(dye," (PLBart model)"),dye.forEach(t),e7o=i(N),I6=n(N,"LI",{});var cye=s(I6);Vde=n(cye,"STRONG",{});var Aot=s(Vde);o7o=r(Aot,"qdqbert"),Aot.forEach(t),r7o=r(cye," \u2014 "),tD=n(cye,"A",{href:!0});var yot=s(tD);t7o=r(yot,"QDQBertForSequenceClassification"),yot.forEach(t),a7o=r(cye," (QDQBert model)"),cye.forEach(t),n7o=i(N),q6=n(N,"LI",{});var fye=s(q6);Xde=n(fye,"STRONG",{});var Lot=s(Xde);s7o=r(Lot,"reformer"),Lot.forEach(t),l7o=r(fye," \u2014 "),aD=n(fye,"A",{href:!0});var xot=s(aD);i7o=r(xot,"ReformerForSequenceClassification"),xot.forEach(t),d7o=r(fye," (Reformer model)"),fye.forEach(t),c7o=i(N),N6=n(N,"LI",{});var mye=s(N6);zde=n(mye,"STRONG",{});var $ot=s(zde);f7o=r($ot,"rembert"),$ot.forEach(t),m7o=r(mye," \u2014 "),nD=n(mye,"A",{href:!0});var kot=s(nD);g7o=r(kot,"RemBertForSequenceClassification"),kot.forEach(t),h7o=r(mye," (RemBERT model)"),mye.forEach(t),p7o=i(N),j6=n(N,"LI",{});var gye=s(j6);Qde=n(gye,"STRONG",{});var Sot=s(Qde);u7o=r(Sot,"roberta"),Sot.forEach(t),_7o=r(gye," \u2014 "),sD=n(gye,"A",{href:!0});var Rot=s(sD);b7o=r(Rot,"RobertaForSequenceClassification"),Rot.forEach(t),v7o=r(gye," (RoBERTa model)"),gye.forEach(t),F7o=i(N),D6=n(N,"LI",{});var hye=s(D6);Wde=n(hye,"STRONG",{});var Bot=s(Wde);T7o=r(Bot,"roformer"),Bot.forEach(t),M7o=r(hye," \u2014 "),lD=n(hye,"A",{href:!0});var Pot=s(lD);E7o=r(Pot,"RoFormerForSequenceClassification"),Pot.forEach(t),C7o=r(hye," (RoFormer model)"),hye.forEach(t),w7o=i(N),G6=n(N,"LI",{});var pye=s(G6);Hde=n(pye,"STRONG",{});var Iot=s(Hde);A7o=r(Iot,"squeezebert"),Iot.forEach(t),y7o=r(pye," \u2014 "),iD=n(pye,"A",{href:!0});var qot=s(iD);L7o=r(qot,"SqueezeBertForSequenceClassification"),qot.forEach(t),x7o=r(pye," (SqueezeBERT model)"),pye.forEach(t),$7o=i(N),O6=n(N,"LI",{});var uye=s(O6);Ude=n(uye,"STRONG",{});var Not=s(Ude);k7o=r(Not,"tapas"),Not.forEach(t),S7o=r(uye," \u2014 "),dD=n(uye,"A",{href:!0});var jot=s(dD);R7o=r(jot,"TapasForSequenceClassification"),jot.forEach(t),B7o=r(uye," (TAPAS model)"),uye.forEach(t),P7o=i(N),V6=n(N,"LI",{});var _ye=s(V6);Jde=n(_ye,"STRONG",{});var Dot=s(Jde);I7o=r(Dot,"tapex"),Dot.forEach(t),q7o=r(_ye," \u2014 "),cD=n(_ye,"A",{href:!0});var Got=s(cD);N7o=r(Got,"BartForSequenceClassification"),Got.forEach(t),j7o=r(_ye," (TAPEX model)"),_ye.forEach(t),D7o=i(N),X6=n(N,"LI",{});var bye=s(X6);Yde=n(bye,"STRONG",{});var Oot=s(Yde);G7o=r(Oot,"transfo-xl"),Oot.forEach(t),O7o=r(bye," \u2014 "),fD=n(bye,"A",{href:!0});var Vot=s(fD);V7o=r(Vot,"TransfoXLForSequenceClassification"),Vot.forEach(t),X7o=r(bye," (Transformer-XL model)"),bye.forEach(t),z7o=i(N),z6=n(N,"LI",{});var vye=s(z6);Kde=n(vye,"STRONG",{});var Xot=s(Kde);Q7o=r(Xot,"xlm"),Xot.forEach(t),W7o=r(vye," \u2014 "),mD=n(vye,"A",{href:!0});var zot=s(mD);H7o=r(zot,"XLMForSequenceClassification"),zot.forEach(t),U7o=r(vye," (XLM model)"),vye.forEach(t),J7o=i(N),Q6=n(N,"LI",{});var Fye=s(Q6);Zde=n(Fye,"STRONG",{});var Qot=s(Zde);Y7o=r(Qot,"xlm-roberta"),Qot.forEach(t),K7o=r(Fye," \u2014 "),gD=n(Fye,"A",{href:!0});var Wot=s(gD);Z7o=r(Wot,"XLMRobertaForSequenceClassification"),Wot.forEach(t),exo=r(Fye," (XLM-RoBERTa model)"),Fye.forEach(t),oxo=i(N),W6=n(N,"LI",{});var Tye=s(W6);ece=n(Tye,"STRONG",{});var Hot=s(ece);rxo=r(Hot,"xlm-roberta-xl"),Hot.forEach(t),txo=r(Tye," \u2014 "),hD=n(Tye,"A",{href:!0});var Uot=s(hD);axo=r(Uot,"XLMRobertaXLForSequenceClassification"),Uot.forEach(t),nxo=r(Tye," (XLM-RoBERTa-XL model)"),Tye.forEach(t),sxo=i(N),H6=n(N,"LI",{});var Mye=s(H6);oce=n(Mye,"STRONG",{});var Jot=s(oce);lxo=r(Jot,"xlnet"),Jot.forEach(t),ixo=r(Mye," \u2014 "),pD=n(Mye,"A",{href:!0});var Yot=s(pD);dxo=r(Yot,"XLNetForSequenceClassification"),Yot.forEach(t),cxo=r(Mye," (XLNet model)"),Mye.forEach(t),fxo=i(N),U6=n(N,"LI",{});var Eye=s(U6);rce=n(Eye,"STRONG",{});var Kot=s(rce);mxo=r(Kot,"yoso"),Kot.forEach(t),gxo=r(Eye," \u2014 "),uD=n(Eye,"A",{href:!0});var Zot=s(uD);hxo=r(Zot,"YosoForSequenceClassification"),Zot.forEach(t),pxo=r(Eye," (YOSO model)"),Eye.forEach(t),N.forEach(t),uxo=i(oa),J6=n(oa,"P",{});var Cye=s(J6);_xo=r(Cye,"The model is set in evaluation mode by default using "),tce=n(Cye,"CODE",{});var ert=s(tce);bxo=r(ert,"model.eval()"),ert.forEach(t),vxo=r(Cye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ace=n(Cye,"CODE",{});var ort=s(ace);Fxo=r(ort,"model.train()"),ort.forEach(t),Cye.forEach(t),Txo=i(oa),T(Y6.$$.fragment,oa),oa.forEach(t),Ds.forEach(t),jBe=i(f),Ri=n(f,"H2",{class:!0});var GIe=s(Ri);K6=n(GIe,"A",{id:!0,class:!0,href:!0});var rrt=s(K6);nce=n(rrt,"SPAN",{});var trt=s(nce);T(A0.$$.fragment,trt),trt.forEach(t),rrt.forEach(t),Mxo=i(GIe),sce=n(GIe,"SPAN",{});var art=s(sce);Exo=r(art,"AutoModelForMultipleChoice"),art.forEach(t),GIe.forEach(t),DBe=i(f),Bo=n(f,"DIV",{class:!0});var Gs=s(Bo);T(y0.$$.fragment,Gs),Cxo=i(Gs),Bi=n(Gs,"P",{});var yY=s(Bi);wxo=r(yY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),_D=n(yY,"A",{href:!0});var nrt=s(_D);Axo=r(nrt,"from_pretrained()"),nrt.forEach(t),yxo=r(yY," class method or the "),bD=n(yY,"A",{href:!0});var srt=s(bD);Lxo=r(srt,"from_config()"),srt.forEach(t),xxo=r(yY,` class
method.`),yY.forEach(t),$xo=i(Gs),L0=n(Gs,"P",{});var OIe=s(L0);kxo=r(OIe,"This class cannot be instantiated directly using "),lce=n(OIe,"CODE",{});var lrt=s(lce);Sxo=r(lrt,"__init__()"),lrt.forEach(t),Rxo=r(OIe," (throws an error)."),OIe.forEach(t),Bxo=i(Gs),nt=n(Gs,"DIV",{class:!0});var G3=s(nt);T(x0.$$.fragment,G3),Pxo=i(G3),ice=n(G3,"P",{});var irt=s(ice);Ixo=r(irt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),irt.forEach(t),qxo=i(G3),Pi=n(G3,"P",{});var LY=s(Pi);Nxo=r(LY,`Note:
Loading a model from its configuration file does `),dce=n(LY,"STRONG",{});var drt=s(dce);jxo=r(drt,"not"),drt.forEach(t),Dxo=r(LY,` load the model weights. It only affects the
model\u2019s configuration. Use `),vD=n(LY,"A",{href:!0});var crt=s(vD);Gxo=r(crt,"from_pretrained()"),crt.forEach(t),Oxo=r(LY," to load the model weights."),LY.forEach(t),Vxo=i(G3),T(Z6.$$.fragment,G3),G3.forEach(t),Xxo=i(Gs),eo=n(Gs,"DIV",{class:!0});var ra=s(eo);T($0.$$.fragment,ra),zxo=i(ra),cce=n(ra,"P",{});var frt=s(cce);Qxo=r(frt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),frt.forEach(t),Wxo=i(ra),xa=n(ra,"P",{});var O3=s(xa);Hxo=r(O3,"The model class to instantiate is selected based on the "),fce=n(O3,"CODE",{});var mrt=s(fce);Uxo=r(mrt,"model_type"),mrt.forEach(t),Jxo=r(O3,` property of the config object (either
passed as an argument or loaded from `),mce=n(O3,"CODE",{});var grt=s(mce);Yxo=r(grt,"pretrained_model_name_or_path"),grt.forEach(t),Kxo=r(O3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gce=n(O3,"CODE",{});var hrt=s(gce);Zxo=r(hrt,"pretrained_model_name_or_path"),hrt.forEach(t),e9o=r(O3,":"),O3.forEach(t),o9o=i(ra),Y=n(ra,"UL",{});var K=s(Y);e1=n(K,"LI",{});var wye=s(e1);hce=n(wye,"STRONG",{});var prt=s(hce);r9o=r(prt,"albert"),prt.forEach(t),t9o=r(wye," \u2014 "),FD=n(wye,"A",{href:!0});var urt=s(FD);a9o=r(urt,"AlbertForMultipleChoice"),urt.forEach(t),n9o=r(wye," (ALBERT model)"),wye.forEach(t),s9o=i(K),o1=n(K,"LI",{});var Aye=s(o1);pce=n(Aye,"STRONG",{});var _rt=s(pce);l9o=r(_rt,"bert"),_rt.forEach(t),i9o=r(Aye," \u2014 "),TD=n(Aye,"A",{href:!0});var brt=s(TD);d9o=r(brt,"BertForMultipleChoice"),brt.forEach(t),c9o=r(Aye," (BERT model)"),Aye.forEach(t),f9o=i(K),r1=n(K,"LI",{});var yye=s(r1);uce=n(yye,"STRONG",{});var vrt=s(uce);m9o=r(vrt,"big_bird"),vrt.forEach(t),g9o=r(yye," \u2014 "),MD=n(yye,"A",{href:!0});var Frt=s(MD);h9o=r(Frt,"BigBirdForMultipleChoice"),Frt.forEach(t),p9o=r(yye," (BigBird model)"),yye.forEach(t),u9o=i(K),t1=n(K,"LI",{});var Lye=s(t1);_ce=n(Lye,"STRONG",{});var Trt=s(_ce);_9o=r(Trt,"camembert"),Trt.forEach(t),b9o=r(Lye," \u2014 "),ED=n(Lye,"A",{href:!0});var Mrt=s(ED);v9o=r(Mrt,"CamembertForMultipleChoice"),Mrt.forEach(t),F9o=r(Lye," (CamemBERT model)"),Lye.forEach(t),T9o=i(K),a1=n(K,"LI",{});var xye=s(a1);bce=n(xye,"STRONG",{});var Ert=s(bce);M9o=r(Ert,"canine"),Ert.forEach(t),E9o=r(xye," \u2014 "),CD=n(xye,"A",{href:!0});var Crt=s(CD);C9o=r(Crt,"CanineForMultipleChoice"),Crt.forEach(t),w9o=r(xye," (Canine model)"),xye.forEach(t),A9o=i(K),n1=n(K,"LI",{});var $ye=s(n1);vce=n($ye,"STRONG",{});var wrt=s(vce);y9o=r(wrt,"convbert"),wrt.forEach(t),L9o=r($ye," \u2014 "),wD=n($ye,"A",{href:!0});var Art=s(wD);x9o=r(Art,"ConvBertForMultipleChoice"),Art.forEach(t),$9o=r($ye," (ConvBERT model)"),$ye.forEach(t),k9o=i(K),s1=n(K,"LI",{});var kye=s(s1);Fce=n(kye,"STRONG",{});var yrt=s(Fce);S9o=r(yrt,"data2vec-text"),yrt.forEach(t),R9o=r(kye," \u2014 "),AD=n(kye,"A",{href:!0});var Lrt=s(AD);B9o=r(Lrt,"Data2VecTextForMultipleChoice"),Lrt.forEach(t),P9o=r(kye," (Data2VecText model)"),kye.forEach(t),I9o=i(K),l1=n(K,"LI",{});var Sye=s(l1);Tce=n(Sye,"STRONG",{});var xrt=s(Tce);q9o=r(xrt,"distilbert"),xrt.forEach(t),N9o=r(Sye," \u2014 "),yD=n(Sye,"A",{href:!0});var $rt=s(yD);j9o=r($rt,"DistilBertForMultipleChoice"),$rt.forEach(t),D9o=r(Sye," (DistilBERT model)"),Sye.forEach(t),G9o=i(K),i1=n(K,"LI",{});var Rye=s(i1);Mce=n(Rye,"STRONG",{});var krt=s(Mce);O9o=r(krt,"electra"),krt.forEach(t),V9o=r(Rye," \u2014 "),LD=n(Rye,"A",{href:!0});var Srt=s(LD);X9o=r(Srt,"ElectraForMultipleChoice"),Srt.forEach(t),z9o=r(Rye," (ELECTRA model)"),Rye.forEach(t),Q9o=i(K),d1=n(K,"LI",{});var Bye=s(d1);Ece=n(Bye,"STRONG",{});var Rrt=s(Ece);W9o=r(Rrt,"flaubert"),Rrt.forEach(t),H9o=r(Bye," \u2014 "),xD=n(Bye,"A",{href:!0});var Brt=s(xD);U9o=r(Brt,"FlaubertForMultipleChoice"),Brt.forEach(t),J9o=r(Bye," (FlauBERT model)"),Bye.forEach(t),Y9o=i(K),c1=n(K,"LI",{});var Pye=s(c1);Cce=n(Pye,"STRONG",{});var Prt=s(Cce);K9o=r(Prt,"fnet"),Prt.forEach(t),Z9o=r(Pye," \u2014 "),$D=n(Pye,"A",{href:!0});var Irt=s($D);e$o=r(Irt,"FNetForMultipleChoice"),Irt.forEach(t),o$o=r(Pye," (FNet model)"),Pye.forEach(t),r$o=i(K),f1=n(K,"LI",{});var Iye=s(f1);wce=n(Iye,"STRONG",{});var qrt=s(wce);t$o=r(qrt,"funnel"),qrt.forEach(t),a$o=r(Iye," \u2014 "),kD=n(Iye,"A",{href:!0});var Nrt=s(kD);n$o=r(Nrt,"FunnelForMultipleChoice"),Nrt.forEach(t),s$o=r(Iye," (Funnel Transformer model)"),Iye.forEach(t),l$o=i(K),m1=n(K,"LI",{});var qye=s(m1);Ace=n(qye,"STRONG",{});var jrt=s(Ace);i$o=r(jrt,"ibert"),jrt.forEach(t),d$o=r(qye," \u2014 "),SD=n(qye,"A",{href:!0});var Drt=s(SD);c$o=r(Drt,"IBertForMultipleChoice"),Drt.forEach(t),f$o=r(qye," (I-BERT model)"),qye.forEach(t),m$o=i(K),g1=n(K,"LI",{});var Nye=s(g1);yce=n(Nye,"STRONG",{});var Grt=s(yce);g$o=r(Grt,"longformer"),Grt.forEach(t),h$o=r(Nye," \u2014 "),RD=n(Nye,"A",{href:!0});var Ort=s(RD);p$o=r(Ort,"LongformerForMultipleChoice"),Ort.forEach(t),u$o=r(Nye," (Longformer model)"),Nye.forEach(t),_$o=i(K),h1=n(K,"LI",{});var jye=s(h1);Lce=n(jye,"STRONG",{});var Vrt=s(Lce);b$o=r(Vrt,"megatron-bert"),Vrt.forEach(t),v$o=r(jye," \u2014 "),BD=n(jye,"A",{href:!0});var Xrt=s(BD);F$o=r(Xrt,"MegatronBertForMultipleChoice"),Xrt.forEach(t),T$o=r(jye," (MegatronBert model)"),jye.forEach(t),M$o=i(K),p1=n(K,"LI",{});var Dye=s(p1);xce=n(Dye,"STRONG",{});var zrt=s(xce);E$o=r(zrt,"mobilebert"),zrt.forEach(t),C$o=r(Dye," \u2014 "),PD=n(Dye,"A",{href:!0});var Qrt=s(PD);w$o=r(Qrt,"MobileBertForMultipleChoice"),Qrt.forEach(t),A$o=r(Dye," (MobileBERT model)"),Dye.forEach(t),y$o=i(K),u1=n(K,"LI",{});var Gye=s(u1);$ce=n(Gye,"STRONG",{});var Wrt=s($ce);L$o=r(Wrt,"mpnet"),Wrt.forEach(t),x$o=r(Gye," \u2014 "),ID=n(Gye,"A",{href:!0});var Hrt=s(ID);$$o=r(Hrt,"MPNetForMultipleChoice"),Hrt.forEach(t),k$o=r(Gye," (MPNet model)"),Gye.forEach(t),S$o=i(K),_1=n(K,"LI",{});var Oye=s(_1);kce=n(Oye,"STRONG",{});var Urt=s(kce);R$o=r(Urt,"nystromformer"),Urt.forEach(t),B$o=r(Oye," \u2014 "),qD=n(Oye,"A",{href:!0});var Jrt=s(qD);P$o=r(Jrt,"NystromformerForMultipleChoice"),Jrt.forEach(t),I$o=r(Oye," (Nystromformer model)"),Oye.forEach(t),q$o=i(K),b1=n(K,"LI",{});var Vye=s(b1);Sce=n(Vye,"STRONG",{});var Yrt=s(Sce);N$o=r(Yrt,"qdqbert"),Yrt.forEach(t),j$o=r(Vye," \u2014 "),ND=n(Vye,"A",{href:!0});var Krt=s(ND);D$o=r(Krt,"QDQBertForMultipleChoice"),Krt.forEach(t),G$o=r(Vye," (QDQBert model)"),Vye.forEach(t),O$o=i(K),v1=n(K,"LI",{});var Xye=s(v1);Rce=n(Xye,"STRONG",{});var Zrt=s(Rce);V$o=r(Zrt,"rembert"),Zrt.forEach(t),X$o=r(Xye," \u2014 "),jD=n(Xye,"A",{href:!0});var ett=s(jD);z$o=r(ett,"RemBertForMultipleChoice"),ett.forEach(t),Q$o=r(Xye," (RemBERT model)"),Xye.forEach(t),W$o=i(K),F1=n(K,"LI",{});var zye=s(F1);Bce=n(zye,"STRONG",{});var ott=s(Bce);H$o=r(ott,"roberta"),ott.forEach(t),U$o=r(zye," \u2014 "),DD=n(zye,"A",{href:!0});var rtt=s(DD);J$o=r(rtt,"RobertaForMultipleChoice"),rtt.forEach(t),Y$o=r(zye," (RoBERTa model)"),zye.forEach(t),K$o=i(K),T1=n(K,"LI",{});var Qye=s(T1);Pce=n(Qye,"STRONG",{});var ttt=s(Pce);Z$o=r(ttt,"roformer"),ttt.forEach(t),eko=r(Qye," \u2014 "),GD=n(Qye,"A",{href:!0});var att=s(GD);oko=r(att,"RoFormerForMultipleChoice"),att.forEach(t),rko=r(Qye," (RoFormer model)"),Qye.forEach(t),tko=i(K),M1=n(K,"LI",{});var Wye=s(M1);Ice=n(Wye,"STRONG",{});var ntt=s(Ice);ako=r(ntt,"squeezebert"),ntt.forEach(t),nko=r(Wye," \u2014 "),OD=n(Wye,"A",{href:!0});var stt=s(OD);sko=r(stt,"SqueezeBertForMultipleChoice"),stt.forEach(t),lko=r(Wye," (SqueezeBERT model)"),Wye.forEach(t),iko=i(K),E1=n(K,"LI",{});var Hye=s(E1);qce=n(Hye,"STRONG",{});var ltt=s(qce);dko=r(ltt,"xlm"),ltt.forEach(t),cko=r(Hye," \u2014 "),VD=n(Hye,"A",{href:!0});var itt=s(VD);fko=r(itt,"XLMForMultipleChoice"),itt.forEach(t),mko=r(Hye," (XLM model)"),Hye.forEach(t),gko=i(K),C1=n(K,"LI",{});var Uye=s(C1);Nce=n(Uye,"STRONG",{});var dtt=s(Nce);hko=r(dtt,"xlm-roberta"),dtt.forEach(t),pko=r(Uye," \u2014 "),XD=n(Uye,"A",{href:!0});var ctt=s(XD);uko=r(ctt,"XLMRobertaForMultipleChoice"),ctt.forEach(t),_ko=r(Uye," (XLM-RoBERTa model)"),Uye.forEach(t),bko=i(K),w1=n(K,"LI",{});var Jye=s(w1);jce=n(Jye,"STRONG",{});var ftt=s(jce);vko=r(ftt,"xlm-roberta-xl"),ftt.forEach(t),Fko=r(Jye," \u2014 "),zD=n(Jye,"A",{href:!0});var mtt=s(zD);Tko=r(mtt,"XLMRobertaXLForMultipleChoice"),mtt.forEach(t),Mko=r(Jye," (XLM-RoBERTa-XL model)"),Jye.forEach(t),Eko=i(K),A1=n(K,"LI",{});var Yye=s(A1);Dce=n(Yye,"STRONG",{});var gtt=s(Dce);Cko=r(gtt,"xlnet"),gtt.forEach(t),wko=r(Yye," \u2014 "),QD=n(Yye,"A",{href:!0});var htt=s(QD);Ako=r(htt,"XLNetForMultipleChoice"),htt.forEach(t),yko=r(Yye," (XLNet model)"),Yye.forEach(t),Lko=i(K),y1=n(K,"LI",{});var Kye=s(y1);Gce=n(Kye,"STRONG",{});var ptt=s(Gce);xko=r(ptt,"yoso"),ptt.forEach(t),$ko=r(Kye," \u2014 "),WD=n(Kye,"A",{href:!0});var utt=s(WD);kko=r(utt,"YosoForMultipleChoice"),utt.forEach(t),Sko=r(Kye," (YOSO model)"),Kye.forEach(t),K.forEach(t),Rko=i(ra),L1=n(ra,"P",{});var Zye=s(L1);Bko=r(Zye,"The model is set in evaluation mode by default using "),Oce=n(Zye,"CODE",{});var _tt=s(Oce);Pko=r(_tt,"model.eval()"),_tt.forEach(t),Iko=r(Zye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vce=n(Zye,"CODE",{});var btt=s(Vce);qko=r(btt,"model.train()"),btt.forEach(t),Zye.forEach(t),Nko=i(ra),T(x1.$$.fragment,ra),ra.forEach(t),Gs.forEach(t),GBe=i(f),Ii=n(f,"H2",{class:!0});var VIe=s(Ii);$1=n(VIe,"A",{id:!0,class:!0,href:!0});var vtt=s($1);Xce=n(vtt,"SPAN",{});var Ftt=s(Xce);T(k0.$$.fragment,Ftt),Ftt.forEach(t),vtt.forEach(t),jko=i(VIe),zce=n(VIe,"SPAN",{});var Ttt=s(zce);Dko=r(Ttt,"AutoModelForNextSentencePrediction"),Ttt.forEach(t),VIe.forEach(t),OBe=i(f),Po=n(f,"DIV",{class:!0});var Os=s(Po);T(S0.$$.fragment,Os),Gko=i(Os),qi=n(Os,"P",{});var xY=s(qi);Oko=r(xY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),HD=n(xY,"A",{href:!0});var Mtt=s(HD);Vko=r(Mtt,"from_pretrained()"),Mtt.forEach(t),Xko=r(xY," class method or the "),UD=n(xY,"A",{href:!0});var Ett=s(UD);zko=r(Ett,"from_config()"),Ett.forEach(t),Qko=r(xY,` class
method.`),xY.forEach(t),Wko=i(Os),R0=n(Os,"P",{});var XIe=s(R0);Hko=r(XIe,"This class cannot be instantiated directly using "),Qce=n(XIe,"CODE",{});var Ctt=s(Qce);Uko=r(Ctt,"__init__()"),Ctt.forEach(t),Jko=r(XIe," (throws an error)."),XIe.forEach(t),Yko=i(Os),st=n(Os,"DIV",{class:!0});var V3=s(st);T(B0.$$.fragment,V3),Kko=i(V3),Wce=n(V3,"P",{});var wtt=s(Wce);Zko=r(wtt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),wtt.forEach(t),eSo=i(V3),Ni=n(V3,"P",{});var $Y=s(Ni);oSo=r($Y,`Note:
Loading a model from its configuration file does `),Hce=n($Y,"STRONG",{});var Att=s(Hce);rSo=r(Att,"not"),Att.forEach(t),tSo=r($Y,` load the model weights. It only affects the
model\u2019s configuration. Use `),JD=n($Y,"A",{href:!0});var ytt=s(JD);aSo=r(ytt,"from_pretrained()"),ytt.forEach(t),nSo=r($Y," to load the model weights."),$Y.forEach(t),sSo=i(V3),T(k1.$$.fragment,V3),V3.forEach(t),lSo=i(Os),oo=n(Os,"DIV",{class:!0});var ta=s(oo);T(P0.$$.fragment,ta),iSo=i(ta),Uce=n(ta,"P",{});var Ltt=s(Uce);dSo=r(Ltt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Ltt.forEach(t),cSo=i(ta),$a=n(ta,"P",{});var X3=s($a);fSo=r(X3,"The model class to instantiate is selected based on the "),Jce=n(X3,"CODE",{});var xtt=s(Jce);mSo=r(xtt,"model_type"),xtt.forEach(t),gSo=r(X3,` property of the config object (either
passed as an argument or loaded from `),Yce=n(X3,"CODE",{});var $tt=s(Yce);hSo=r($tt,"pretrained_model_name_or_path"),$tt.forEach(t),pSo=r(X3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kce=n(X3,"CODE",{});var ktt=s(Kce);uSo=r(ktt,"pretrained_model_name_or_path"),ktt.forEach(t),_So=r(X3,":"),X3.forEach(t),bSo=i(ta),Ur=n(ta,"UL",{});var Vs=s(Ur);S1=n(Vs,"LI",{});var eLe=s(S1);Zce=n(eLe,"STRONG",{});var Stt=s(Zce);vSo=r(Stt,"bert"),Stt.forEach(t),FSo=r(eLe," \u2014 "),YD=n(eLe,"A",{href:!0});var Rtt=s(YD);TSo=r(Rtt,"BertForNextSentencePrediction"),Rtt.forEach(t),MSo=r(eLe," (BERT model)"),eLe.forEach(t),ESo=i(Vs),R1=n(Vs,"LI",{});var oLe=s(R1);efe=n(oLe,"STRONG",{});var Btt=s(efe);CSo=r(Btt,"fnet"),Btt.forEach(t),wSo=r(oLe," \u2014 "),KD=n(oLe,"A",{href:!0});var Ptt=s(KD);ASo=r(Ptt,"FNetForNextSentencePrediction"),Ptt.forEach(t),ySo=r(oLe," (FNet model)"),oLe.forEach(t),LSo=i(Vs),B1=n(Vs,"LI",{});var rLe=s(B1);ofe=n(rLe,"STRONG",{});var Itt=s(ofe);xSo=r(Itt,"megatron-bert"),Itt.forEach(t),$So=r(rLe," \u2014 "),ZD=n(rLe,"A",{href:!0});var qtt=s(ZD);kSo=r(qtt,"MegatronBertForNextSentencePrediction"),qtt.forEach(t),SSo=r(rLe," (MegatronBert model)"),rLe.forEach(t),RSo=i(Vs),P1=n(Vs,"LI",{});var tLe=s(P1);rfe=n(tLe,"STRONG",{});var Ntt=s(rfe);BSo=r(Ntt,"mobilebert"),Ntt.forEach(t),PSo=r(tLe," \u2014 "),eG=n(tLe,"A",{href:!0});var jtt=s(eG);ISo=r(jtt,"MobileBertForNextSentencePrediction"),jtt.forEach(t),qSo=r(tLe," (MobileBERT model)"),tLe.forEach(t),NSo=i(Vs),I1=n(Vs,"LI",{});var aLe=s(I1);tfe=n(aLe,"STRONG",{});var Dtt=s(tfe);jSo=r(Dtt,"qdqbert"),Dtt.forEach(t),DSo=r(aLe," \u2014 "),oG=n(aLe,"A",{href:!0});var Gtt=s(oG);GSo=r(Gtt,"QDQBertForNextSentencePrediction"),Gtt.forEach(t),OSo=r(aLe," (QDQBert model)"),aLe.forEach(t),Vs.forEach(t),VSo=i(ta),q1=n(ta,"P",{});var nLe=s(q1);XSo=r(nLe,"The model is set in evaluation mode by default using "),afe=n(nLe,"CODE",{});var Ott=s(afe);zSo=r(Ott,"model.eval()"),Ott.forEach(t),QSo=r(nLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nfe=n(nLe,"CODE",{});var Vtt=s(nfe);WSo=r(Vtt,"model.train()"),Vtt.forEach(t),nLe.forEach(t),HSo=i(ta),T(N1.$$.fragment,ta),ta.forEach(t),Os.forEach(t),VBe=i(f),ji=n(f,"H2",{class:!0});var zIe=s(ji);j1=n(zIe,"A",{id:!0,class:!0,href:!0});var Xtt=s(j1);sfe=n(Xtt,"SPAN",{});var ztt=s(sfe);T(I0.$$.fragment,ztt),ztt.forEach(t),Xtt.forEach(t),USo=i(zIe),lfe=n(zIe,"SPAN",{});var Qtt=s(lfe);JSo=r(Qtt,"AutoModelForTokenClassification"),Qtt.forEach(t),zIe.forEach(t),XBe=i(f),Io=n(f,"DIV",{class:!0});var Xs=s(Io);T(q0.$$.fragment,Xs),YSo=i(Xs),Di=n(Xs,"P",{});var kY=s(Di);KSo=r(kY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),rG=n(kY,"A",{href:!0});var Wtt=s(rG);ZSo=r(Wtt,"from_pretrained()"),Wtt.forEach(t),eRo=r(kY," class method or the "),tG=n(kY,"A",{href:!0});var Htt=s(tG);oRo=r(Htt,"from_config()"),Htt.forEach(t),rRo=r(kY,` class
method.`),kY.forEach(t),tRo=i(Xs),N0=n(Xs,"P",{});var QIe=s(N0);aRo=r(QIe,"This class cannot be instantiated directly using "),ife=n(QIe,"CODE",{});var Utt=s(ife);nRo=r(Utt,"__init__()"),Utt.forEach(t),sRo=r(QIe," (throws an error)."),QIe.forEach(t),lRo=i(Xs),lt=n(Xs,"DIV",{class:!0});var z3=s(lt);T(j0.$$.fragment,z3),iRo=i(z3),dfe=n(z3,"P",{});var Jtt=s(dfe);dRo=r(Jtt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Jtt.forEach(t),cRo=i(z3),Gi=n(z3,"P",{});var SY=s(Gi);fRo=r(SY,`Note:
Loading a model from its configuration file does `),cfe=n(SY,"STRONG",{});var Ytt=s(cfe);mRo=r(Ytt,"not"),Ytt.forEach(t),gRo=r(SY,` load the model weights. It only affects the
model\u2019s configuration. Use `),aG=n(SY,"A",{href:!0});var Ktt=s(aG);hRo=r(Ktt,"from_pretrained()"),Ktt.forEach(t),pRo=r(SY," to load the model weights."),SY.forEach(t),uRo=i(z3),T(D1.$$.fragment,z3),z3.forEach(t),_Ro=i(Xs),ro=n(Xs,"DIV",{class:!0});var aa=s(ro);T(D0.$$.fragment,aa),bRo=i(aa),ffe=n(aa,"P",{});var Ztt=s(ffe);vRo=r(Ztt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Ztt.forEach(t),FRo=i(aa),ka=n(aa,"P",{});var Q3=s(ka);TRo=r(Q3,"The model class to instantiate is selected based on the "),mfe=n(Q3,"CODE",{});var eat=s(mfe);MRo=r(eat,"model_type"),eat.forEach(t),ERo=r(Q3,` property of the config object (either
passed as an argument or loaded from `),gfe=n(Q3,"CODE",{});var oat=s(gfe);CRo=r(oat,"pretrained_model_name_or_path"),oat.forEach(t),wRo=r(Q3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hfe=n(Q3,"CODE",{});var rat=s(hfe);ARo=r(rat,"pretrained_model_name_or_path"),rat.forEach(t),yRo=r(Q3,":"),Q3.forEach(t),LRo=i(aa),U=n(aa,"UL",{});var J=s(U);G1=n(J,"LI",{});var sLe=s(G1);pfe=n(sLe,"STRONG",{});var tat=s(pfe);xRo=r(tat,"albert"),tat.forEach(t),$Ro=r(sLe," \u2014 "),nG=n(sLe,"A",{href:!0});var aat=s(nG);kRo=r(aat,"AlbertForTokenClassification"),aat.forEach(t),SRo=r(sLe," (ALBERT model)"),sLe.forEach(t),RRo=i(J),O1=n(J,"LI",{});var lLe=s(O1);ufe=n(lLe,"STRONG",{});var nat=s(ufe);BRo=r(nat,"bert"),nat.forEach(t),PRo=r(lLe," \u2014 "),sG=n(lLe,"A",{href:!0});var sat=s(sG);IRo=r(sat,"BertForTokenClassification"),sat.forEach(t),qRo=r(lLe," (BERT model)"),lLe.forEach(t),NRo=i(J),V1=n(J,"LI",{});var iLe=s(V1);_fe=n(iLe,"STRONG",{});var lat=s(_fe);jRo=r(lat,"big_bird"),lat.forEach(t),DRo=r(iLe," \u2014 "),lG=n(iLe,"A",{href:!0});var iat=s(lG);GRo=r(iat,"BigBirdForTokenClassification"),iat.forEach(t),ORo=r(iLe," (BigBird model)"),iLe.forEach(t),VRo=i(J),X1=n(J,"LI",{});var dLe=s(X1);bfe=n(dLe,"STRONG",{});var dat=s(bfe);XRo=r(dat,"camembert"),dat.forEach(t),zRo=r(dLe," \u2014 "),iG=n(dLe,"A",{href:!0});var cat=s(iG);QRo=r(cat,"CamembertForTokenClassification"),cat.forEach(t),WRo=r(dLe," (CamemBERT model)"),dLe.forEach(t),HRo=i(J),z1=n(J,"LI",{});var cLe=s(z1);vfe=n(cLe,"STRONG",{});var fat=s(vfe);URo=r(fat,"canine"),fat.forEach(t),JRo=r(cLe," \u2014 "),dG=n(cLe,"A",{href:!0});var mat=s(dG);YRo=r(mat,"CanineForTokenClassification"),mat.forEach(t),KRo=r(cLe," (Canine model)"),cLe.forEach(t),ZRo=i(J),Q1=n(J,"LI",{});var fLe=s(Q1);Ffe=n(fLe,"STRONG",{});var gat=s(Ffe);eBo=r(gat,"convbert"),gat.forEach(t),oBo=r(fLe," \u2014 "),cG=n(fLe,"A",{href:!0});var hat=s(cG);rBo=r(hat,"ConvBertForTokenClassification"),hat.forEach(t),tBo=r(fLe," (ConvBERT model)"),fLe.forEach(t),aBo=i(J),W1=n(J,"LI",{});var mLe=s(W1);Tfe=n(mLe,"STRONG",{});var pat=s(Tfe);nBo=r(pat,"data2vec-text"),pat.forEach(t),sBo=r(mLe," \u2014 "),fG=n(mLe,"A",{href:!0});var uat=s(fG);lBo=r(uat,"Data2VecTextForTokenClassification"),uat.forEach(t),iBo=r(mLe," (Data2VecText model)"),mLe.forEach(t),dBo=i(J),H1=n(J,"LI",{});var gLe=s(H1);Mfe=n(gLe,"STRONG",{});var _at=s(Mfe);cBo=r(_at,"deberta"),_at.forEach(t),fBo=r(gLe," \u2014 "),mG=n(gLe,"A",{href:!0});var bat=s(mG);mBo=r(bat,"DebertaForTokenClassification"),bat.forEach(t),gBo=r(gLe," (DeBERTa model)"),gLe.forEach(t),hBo=i(J),U1=n(J,"LI",{});var hLe=s(U1);Efe=n(hLe,"STRONG",{});var vat=s(Efe);pBo=r(vat,"deberta-v2"),vat.forEach(t),uBo=r(hLe," \u2014 "),gG=n(hLe,"A",{href:!0});var Fat=s(gG);_Bo=r(Fat,"DebertaV2ForTokenClassification"),Fat.forEach(t),bBo=r(hLe," (DeBERTa-v2 model)"),hLe.forEach(t),vBo=i(J),J1=n(J,"LI",{});var pLe=s(J1);Cfe=n(pLe,"STRONG",{});var Tat=s(Cfe);FBo=r(Tat,"distilbert"),Tat.forEach(t),TBo=r(pLe," \u2014 "),hG=n(pLe,"A",{href:!0});var Mat=s(hG);MBo=r(Mat,"DistilBertForTokenClassification"),Mat.forEach(t),EBo=r(pLe," (DistilBERT model)"),pLe.forEach(t),CBo=i(J),Y1=n(J,"LI",{});var uLe=s(Y1);wfe=n(uLe,"STRONG",{});var Eat=s(wfe);wBo=r(Eat,"electra"),Eat.forEach(t),ABo=r(uLe," \u2014 "),pG=n(uLe,"A",{href:!0});var Cat=s(pG);yBo=r(Cat,"ElectraForTokenClassification"),Cat.forEach(t),LBo=r(uLe," (ELECTRA model)"),uLe.forEach(t),xBo=i(J),K1=n(J,"LI",{});var _Le=s(K1);Afe=n(_Le,"STRONG",{});var wat=s(Afe);$Bo=r(wat,"flaubert"),wat.forEach(t),kBo=r(_Le," \u2014 "),uG=n(_Le,"A",{href:!0});var Aat=s(uG);SBo=r(Aat,"FlaubertForTokenClassification"),Aat.forEach(t),RBo=r(_Le," (FlauBERT model)"),_Le.forEach(t),BBo=i(J),Z1=n(J,"LI",{});var bLe=s(Z1);yfe=n(bLe,"STRONG",{});var yat=s(yfe);PBo=r(yat,"fnet"),yat.forEach(t),IBo=r(bLe," \u2014 "),_G=n(bLe,"A",{href:!0});var Lat=s(_G);qBo=r(Lat,"FNetForTokenClassification"),Lat.forEach(t),NBo=r(bLe," (FNet model)"),bLe.forEach(t),jBo=i(J),eb=n(J,"LI",{});var vLe=s(eb);Lfe=n(vLe,"STRONG",{});var xat=s(Lfe);DBo=r(xat,"funnel"),xat.forEach(t),GBo=r(vLe," \u2014 "),bG=n(vLe,"A",{href:!0});var $at=s(bG);OBo=r($at,"FunnelForTokenClassification"),$at.forEach(t),VBo=r(vLe," (Funnel Transformer model)"),vLe.forEach(t),XBo=i(J),ob=n(J,"LI",{});var FLe=s(ob);xfe=n(FLe,"STRONG",{});var kat=s(xfe);zBo=r(kat,"gpt2"),kat.forEach(t),QBo=r(FLe," \u2014 "),vG=n(FLe,"A",{href:!0});var Sat=s(vG);WBo=r(Sat,"GPT2ForTokenClassification"),Sat.forEach(t),HBo=r(FLe," (OpenAI GPT-2 model)"),FLe.forEach(t),UBo=i(J),rb=n(J,"LI",{});var TLe=s(rb);$fe=n(TLe,"STRONG",{});var Rat=s($fe);JBo=r(Rat,"ibert"),Rat.forEach(t),YBo=r(TLe," \u2014 "),FG=n(TLe,"A",{href:!0});var Bat=s(FG);KBo=r(Bat,"IBertForTokenClassification"),Bat.forEach(t),ZBo=r(TLe," (I-BERT model)"),TLe.forEach(t),ePo=i(J),tb=n(J,"LI",{});var MLe=s(tb);kfe=n(MLe,"STRONG",{});var Pat=s(kfe);oPo=r(Pat,"layoutlm"),Pat.forEach(t),rPo=r(MLe," \u2014 "),TG=n(MLe,"A",{href:!0});var Iat=s(TG);tPo=r(Iat,"LayoutLMForTokenClassification"),Iat.forEach(t),aPo=r(MLe," (LayoutLM model)"),MLe.forEach(t),nPo=i(J),ab=n(J,"LI",{});var ELe=s(ab);Sfe=n(ELe,"STRONG",{});var qat=s(Sfe);sPo=r(qat,"layoutlmv2"),qat.forEach(t),lPo=r(ELe," \u2014 "),MG=n(ELe,"A",{href:!0});var Nat=s(MG);iPo=r(Nat,"LayoutLMv2ForTokenClassification"),Nat.forEach(t),dPo=r(ELe," (LayoutLMv2 model)"),ELe.forEach(t),cPo=i(J),nb=n(J,"LI",{});var CLe=s(nb);Rfe=n(CLe,"STRONG",{});var jat=s(Rfe);fPo=r(jat,"longformer"),jat.forEach(t),mPo=r(CLe," \u2014 "),EG=n(CLe,"A",{href:!0});var Dat=s(EG);gPo=r(Dat,"LongformerForTokenClassification"),Dat.forEach(t),hPo=r(CLe," (Longformer model)"),CLe.forEach(t),pPo=i(J),sb=n(J,"LI",{});var wLe=s(sb);Bfe=n(wLe,"STRONG",{});var Gat=s(Bfe);uPo=r(Gat,"megatron-bert"),Gat.forEach(t),_Po=r(wLe," \u2014 "),CG=n(wLe,"A",{href:!0});var Oat=s(CG);bPo=r(Oat,"MegatronBertForTokenClassification"),Oat.forEach(t),vPo=r(wLe," (MegatronBert model)"),wLe.forEach(t),FPo=i(J),lb=n(J,"LI",{});var ALe=s(lb);Pfe=n(ALe,"STRONG",{});var Vat=s(Pfe);TPo=r(Vat,"mobilebert"),Vat.forEach(t),MPo=r(ALe," \u2014 "),wG=n(ALe,"A",{href:!0});var Xat=s(wG);EPo=r(Xat,"MobileBertForTokenClassification"),Xat.forEach(t),CPo=r(ALe," (MobileBERT model)"),ALe.forEach(t),wPo=i(J),ib=n(J,"LI",{});var yLe=s(ib);Ife=n(yLe,"STRONG",{});var zat=s(Ife);APo=r(zat,"mpnet"),zat.forEach(t),yPo=r(yLe," \u2014 "),AG=n(yLe,"A",{href:!0});var Qat=s(AG);LPo=r(Qat,"MPNetForTokenClassification"),Qat.forEach(t),xPo=r(yLe," (MPNet model)"),yLe.forEach(t),$Po=i(J),db=n(J,"LI",{});var LLe=s(db);qfe=n(LLe,"STRONG",{});var Wat=s(qfe);kPo=r(Wat,"nystromformer"),Wat.forEach(t),SPo=r(LLe," \u2014 "),yG=n(LLe,"A",{href:!0});var Hat=s(yG);RPo=r(Hat,"NystromformerForTokenClassification"),Hat.forEach(t),BPo=r(LLe," (Nystromformer model)"),LLe.forEach(t),PPo=i(J),cb=n(J,"LI",{});var xLe=s(cb);Nfe=n(xLe,"STRONG",{});var Uat=s(Nfe);IPo=r(Uat,"qdqbert"),Uat.forEach(t),qPo=r(xLe," \u2014 "),LG=n(xLe,"A",{href:!0});var Jat=s(LG);NPo=r(Jat,"QDQBertForTokenClassification"),Jat.forEach(t),jPo=r(xLe," (QDQBert model)"),xLe.forEach(t),DPo=i(J),fb=n(J,"LI",{});var $Le=s(fb);jfe=n($Le,"STRONG",{});var Yat=s(jfe);GPo=r(Yat,"rembert"),Yat.forEach(t),OPo=r($Le," \u2014 "),xG=n($Le,"A",{href:!0});var Kat=s(xG);VPo=r(Kat,"RemBertForTokenClassification"),Kat.forEach(t),XPo=r($Le," (RemBERT model)"),$Le.forEach(t),zPo=i(J),mb=n(J,"LI",{});var kLe=s(mb);Dfe=n(kLe,"STRONG",{});var Zat=s(Dfe);QPo=r(Zat,"roberta"),Zat.forEach(t),WPo=r(kLe," \u2014 "),$G=n(kLe,"A",{href:!0});var ent=s($G);HPo=r(ent,"RobertaForTokenClassification"),ent.forEach(t),UPo=r(kLe," (RoBERTa model)"),kLe.forEach(t),JPo=i(J),gb=n(J,"LI",{});var SLe=s(gb);Gfe=n(SLe,"STRONG",{});var ont=s(Gfe);YPo=r(ont,"roformer"),ont.forEach(t),KPo=r(SLe," \u2014 "),kG=n(SLe,"A",{href:!0});var rnt=s(kG);ZPo=r(rnt,"RoFormerForTokenClassification"),rnt.forEach(t),eIo=r(SLe," (RoFormer model)"),SLe.forEach(t),oIo=i(J),hb=n(J,"LI",{});var RLe=s(hb);Ofe=n(RLe,"STRONG",{});var tnt=s(Ofe);rIo=r(tnt,"squeezebert"),tnt.forEach(t),tIo=r(RLe," \u2014 "),SG=n(RLe,"A",{href:!0});var ant=s(SG);aIo=r(ant,"SqueezeBertForTokenClassification"),ant.forEach(t),nIo=r(RLe," (SqueezeBERT model)"),RLe.forEach(t),sIo=i(J),pb=n(J,"LI",{});var BLe=s(pb);Vfe=n(BLe,"STRONG",{});var nnt=s(Vfe);lIo=r(nnt,"xlm"),nnt.forEach(t),iIo=r(BLe," \u2014 "),RG=n(BLe,"A",{href:!0});var snt=s(RG);dIo=r(snt,"XLMForTokenClassification"),snt.forEach(t),cIo=r(BLe," (XLM model)"),BLe.forEach(t),fIo=i(J),ub=n(J,"LI",{});var PLe=s(ub);Xfe=n(PLe,"STRONG",{});var lnt=s(Xfe);mIo=r(lnt,"xlm-roberta"),lnt.forEach(t),gIo=r(PLe," \u2014 "),BG=n(PLe,"A",{href:!0});var int=s(BG);hIo=r(int,"XLMRobertaForTokenClassification"),int.forEach(t),pIo=r(PLe," (XLM-RoBERTa model)"),PLe.forEach(t),uIo=i(J),_b=n(J,"LI",{});var ILe=s(_b);zfe=n(ILe,"STRONG",{});var dnt=s(zfe);_Io=r(dnt,"xlm-roberta-xl"),dnt.forEach(t),bIo=r(ILe," \u2014 "),PG=n(ILe,"A",{href:!0});var cnt=s(PG);vIo=r(cnt,"XLMRobertaXLForTokenClassification"),cnt.forEach(t),FIo=r(ILe," (XLM-RoBERTa-XL model)"),ILe.forEach(t),TIo=i(J),bb=n(J,"LI",{});var qLe=s(bb);Qfe=n(qLe,"STRONG",{});var fnt=s(Qfe);MIo=r(fnt,"xlnet"),fnt.forEach(t),EIo=r(qLe," \u2014 "),IG=n(qLe,"A",{href:!0});var mnt=s(IG);CIo=r(mnt,"XLNetForTokenClassification"),mnt.forEach(t),wIo=r(qLe," (XLNet model)"),qLe.forEach(t),AIo=i(J),vb=n(J,"LI",{});var NLe=s(vb);Wfe=n(NLe,"STRONG",{});var gnt=s(Wfe);yIo=r(gnt,"yoso"),gnt.forEach(t),LIo=r(NLe," \u2014 "),qG=n(NLe,"A",{href:!0});var hnt=s(qG);xIo=r(hnt,"YosoForTokenClassification"),hnt.forEach(t),$Io=r(NLe," (YOSO model)"),NLe.forEach(t),J.forEach(t),kIo=i(aa),Fb=n(aa,"P",{});var jLe=s(Fb);SIo=r(jLe,"The model is set in evaluation mode by default using "),Hfe=n(jLe,"CODE",{});var pnt=s(Hfe);RIo=r(pnt,"model.eval()"),pnt.forEach(t),BIo=r(jLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ufe=n(jLe,"CODE",{});var unt=s(Ufe);PIo=r(unt,"model.train()"),unt.forEach(t),jLe.forEach(t),IIo=i(aa),T(Tb.$$.fragment,aa),aa.forEach(t),Xs.forEach(t),zBe=i(f),Oi=n(f,"H2",{class:!0});var WIe=s(Oi);Mb=n(WIe,"A",{id:!0,class:!0,href:!0});var _nt=s(Mb);Jfe=n(_nt,"SPAN",{});var bnt=s(Jfe);T(G0.$$.fragment,bnt),bnt.forEach(t),_nt.forEach(t),qIo=i(WIe),Yfe=n(WIe,"SPAN",{});var vnt=s(Yfe);NIo=r(vnt,"AutoModelForQuestionAnswering"),vnt.forEach(t),WIe.forEach(t),QBe=i(f),qo=n(f,"DIV",{class:!0});var zs=s(qo);T(O0.$$.fragment,zs),jIo=i(zs),Vi=n(zs,"P",{});var RY=s(Vi);DIo=r(RY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),NG=n(RY,"A",{href:!0});var Fnt=s(NG);GIo=r(Fnt,"from_pretrained()"),Fnt.forEach(t),OIo=r(RY," class method or the "),jG=n(RY,"A",{href:!0});var Tnt=s(jG);VIo=r(Tnt,"from_config()"),Tnt.forEach(t),XIo=r(RY,` class
method.`),RY.forEach(t),zIo=i(zs),V0=n(zs,"P",{});var HIe=s(V0);QIo=r(HIe,"This class cannot be instantiated directly using "),Kfe=n(HIe,"CODE",{});var Mnt=s(Kfe);WIo=r(Mnt,"__init__()"),Mnt.forEach(t),HIo=r(HIe," (throws an error)."),HIe.forEach(t),UIo=i(zs),it=n(zs,"DIV",{class:!0});var W3=s(it);T(X0.$$.fragment,W3),JIo=i(W3),Zfe=n(W3,"P",{});var Ent=s(Zfe);YIo=r(Ent,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Ent.forEach(t),KIo=i(W3),Xi=n(W3,"P",{});var BY=s(Xi);ZIo=r(BY,`Note:
Loading a model from its configuration file does `),eme=n(BY,"STRONG",{});var Cnt=s(eme);eqo=r(Cnt,"not"),Cnt.forEach(t),oqo=r(BY,` load the model weights. It only affects the
model\u2019s configuration. Use `),DG=n(BY,"A",{href:!0});var wnt=s(DG);rqo=r(wnt,"from_pretrained()"),wnt.forEach(t),tqo=r(BY," to load the model weights."),BY.forEach(t),aqo=i(W3),T(Eb.$$.fragment,W3),W3.forEach(t),nqo=i(zs),to=n(zs,"DIV",{class:!0});var na=s(to);T(z0.$$.fragment,na),sqo=i(na),ome=n(na,"P",{});var Ant=s(ome);lqo=r(Ant,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Ant.forEach(t),iqo=i(na),Sa=n(na,"P",{});var H3=s(Sa);dqo=r(H3,"The model class to instantiate is selected based on the "),rme=n(H3,"CODE",{});var ynt=s(rme);cqo=r(ynt,"model_type"),ynt.forEach(t),fqo=r(H3,` property of the config object (either
passed as an argument or loaded from `),tme=n(H3,"CODE",{});var Lnt=s(tme);mqo=r(Lnt,"pretrained_model_name_or_path"),Lnt.forEach(t),gqo=r(H3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ame=n(H3,"CODE",{});var xnt=s(ame);hqo=r(xnt,"pretrained_model_name_or_path"),xnt.forEach(t),pqo=r(H3,":"),H3.forEach(t),uqo=i(na),O=n(na,"UL",{});var X=s(O);Cb=n(X,"LI",{});var DLe=s(Cb);nme=n(DLe,"STRONG",{});var $nt=s(nme);_qo=r($nt,"albert"),$nt.forEach(t),bqo=r(DLe," \u2014 "),GG=n(DLe,"A",{href:!0});var knt=s(GG);vqo=r(knt,"AlbertForQuestionAnswering"),knt.forEach(t),Fqo=r(DLe," (ALBERT model)"),DLe.forEach(t),Tqo=i(X),wb=n(X,"LI",{});var GLe=s(wb);sme=n(GLe,"STRONG",{});var Snt=s(sme);Mqo=r(Snt,"bart"),Snt.forEach(t),Eqo=r(GLe," \u2014 "),OG=n(GLe,"A",{href:!0});var Rnt=s(OG);Cqo=r(Rnt,"BartForQuestionAnswering"),Rnt.forEach(t),wqo=r(GLe," (BART model)"),GLe.forEach(t),Aqo=i(X),Ab=n(X,"LI",{});var OLe=s(Ab);lme=n(OLe,"STRONG",{});var Bnt=s(lme);yqo=r(Bnt,"bert"),Bnt.forEach(t),Lqo=r(OLe," \u2014 "),VG=n(OLe,"A",{href:!0});var Pnt=s(VG);xqo=r(Pnt,"BertForQuestionAnswering"),Pnt.forEach(t),$qo=r(OLe," (BERT model)"),OLe.forEach(t),kqo=i(X),yb=n(X,"LI",{});var VLe=s(yb);ime=n(VLe,"STRONG",{});var Int=s(ime);Sqo=r(Int,"big_bird"),Int.forEach(t),Rqo=r(VLe," \u2014 "),XG=n(VLe,"A",{href:!0});var qnt=s(XG);Bqo=r(qnt,"BigBirdForQuestionAnswering"),qnt.forEach(t),Pqo=r(VLe," (BigBird model)"),VLe.forEach(t),Iqo=i(X),Lb=n(X,"LI",{});var XLe=s(Lb);dme=n(XLe,"STRONG",{});var Nnt=s(dme);qqo=r(Nnt,"bigbird_pegasus"),Nnt.forEach(t),Nqo=r(XLe," \u2014 "),zG=n(XLe,"A",{href:!0});var jnt=s(zG);jqo=r(jnt,"BigBirdPegasusForQuestionAnswering"),jnt.forEach(t),Dqo=r(XLe," (BigBirdPegasus model)"),XLe.forEach(t),Gqo=i(X),xb=n(X,"LI",{});var zLe=s(xb);cme=n(zLe,"STRONG",{});var Dnt=s(cme);Oqo=r(Dnt,"camembert"),Dnt.forEach(t),Vqo=r(zLe," \u2014 "),QG=n(zLe,"A",{href:!0});var Gnt=s(QG);Xqo=r(Gnt,"CamembertForQuestionAnswering"),Gnt.forEach(t),zqo=r(zLe," (CamemBERT model)"),zLe.forEach(t),Qqo=i(X),$b=n(X,"LI",{});var QLe=s($b);fme=n(QLe,"STRONG",{});var Ont=s(fme);Wqo=r(Ont,"canine"),Ont.forEach(t),Hqo=r(QLe," \u2014 "),WG=n(QLe,"A",{href:!0});var Vnt=s(WG);Uqo=r(Vnt,"CanineForQuestionAnswering"),Vnt.forEach(t),Jqo=r(QLe," (Canine model)"),QLe.forEach(t),Yqo=i(X),kb=n(X,"LI",{});var WLe=s(kb);mme=n(WLe,"STRONG",{});var Xnt=s(mme);Kqo=r(Xnt,"convbert"),Xnt.forEach(t),Zqo=r(WLe," \u2014 "),HG=n(WLe,"A",{href:!0});var znt=s(HG);eNo=r(znt,"ConvBertForQuestionAnswering"),znt.forEach(t),oNo=r(WLe," (ConvBERT model)"),WLe.forEach(t),rNo=i(X),Sb=n(X,"LI",{});var HLe=s(Sb);gme=n(HLe,"STRONG",{});var Qnt=s(gme);tNo=r(Qnt,"data2vec-text"),Qnt.forEach(t),aNo=r(HLe," \u2014 "),UG=n(HLe,"A",{href:!0});var Wnt=s(UG);nNo=r(Wnt,"Data2VecTextForQuestionAnswering"),Wnt.forEach(t),sNo=r(HLe," (Data2VecText model)"),HLe.forEach(t),lNo=i(X),Rb=n(X,"LI",{});var ULe=s(Rb);hme=n(ULe,"STRONG",{});var Hnt=s(hme);iNo=r(Hnt,"deberta"),Hnt.forEach(t),dNo=r(ULe," \u2014 "),JG=n(ULe,"A",{href:!0});var Unt=s(JG);cNo=r(Unt,"DebertaForQuestionAnswering"),Unt.forEach(t),fNo=r(ULe," (DeBERTa model)"),ULe.forEach(t),mNo=i(X),Bb=n(X,"LI",{});var JLe=s(Bb);pme=n(JLe,"STRONG",{});var Jnt=s(pme);gNo=r(Jnt,"deberta-v2"),Jnt.forEach(t),hNo=r(JLe," \u2014 "),YG=n(JLe,"A",{href:!0});var Ynt=s(YG);pNo=r(Ynt,"DebertaV2ForQuestionAnswering"),Ynt.forEach(t),uNo=r(JLe," (DeBERTa-v2 model)"),JLe.forEach(t),_No=i(X),Pb=n(X,"LI",{});var YLe=s(Pb);ume=n(YLe,"STRONG",{});var Knt=s(ume);bNo=r(Knt,"distilbert"),Knt.forEach(t),vNo=r(YLe," \u2014 "),KG=n(YLe,"A",{href:!0});var Znt=s(KG);FNo=r(Znt,"DistilBertForQuestionAnswering"),Znt.forEach(t),TNo=r(YLe," (DistilBERT model)"),YLe.forEach(t),MNo=i(X),Ib=n(X,"LI",{});var KLe=s(Ib);_me=n(KLe,"STRONG",{});var est=s(_me);ENo=r(est,"electra"),est.forEach(t),CNo=r(KLe," \u2014 "),ZG=n(KLe,"A",{href:!0});var ost=s(ZG);wNo=r(ost,"ElectraForQuestionAnswering"),ost.forEach(t),ANo=r(KLe," (ELECTRA model)"),KLe.forEach(t),yNo=i(X),qb=n(X,"LI",{});var ZLe=s(qb);bme=n(ZLe,"STRONG",{});var rst=s(bme);LNo=r(rst,"flaubert"),rst.forEach(t),xNo=r(ZLe," \u2014 "),eO=n(ZLe,"A",{href:!0});var tst=s(eO);$No=r(tst,"FlaubertForQuestionAnsweringSimple"),tst.forEach(t),kNo=r(ZLe," (FlauBERT model)"),ZLe.forEach(t),SNo=i(X),Nb=n(X,"LI",{});var e7e=s(Nb);vme=n(e7e,"STRONG",{});var ast=s(vme);RNo=r(ast,"fnet"),ast.forEach(t),BNo=r(e7e," \u2014 "),oO=n(e7e,"A",{href:!0});var nst=s(oO);PNo=r(nst,"FNetForQuestionAnswering"),nst.forEach(t),INo=r(e7e," (FNet model)"),e7e.forEach(t),qNo=i(X),jb=n(X,"LI",{});var o7e=s(jb);Fme=n(o7e,"STRONG",{});var sst=s(Fme);NNo=r(sst,"funnel"),sst.forEach(t),jNo=r(o7e," \u2014 "),rO=n(o7e,"A",{href:!0});var lst=s(rO);DNo=r(lst,"FunnelForQuestionAnswering"),lst.forEach(t),GNo=r(o7e," (Funnel Transformer model)"),o7e.forEach(t),ONo=i(X),Db=n(X,"LI",{});var r7e=s(Db);Tme=n(r7e,"STRONG",{});var ist=s(Tme);VNo=r(ist,"gptj"),ist.forEach(t),XNo=r(r7e," \u2014 "),tO=n(r7e,"A",{href:!0});var dst=s(tO);zNo=r(dst,"GPTJForQuestionAnswering"),dst.forEach(t),QNo=r(r7e," (GPT-J model)"),r7e.forEach(t),WNo=i(X),Gb=n(X,"LI",{});var t7e=s(Gb);Mme=n(t7e,"STRONG",{});var cst=s(Mme);HNo=r(cst,"ibert"),cst.forEach(t),UNo=r(t7e," \u2014 "),aO=n(t7e,"A",{href:!0});var fst=s(aO);JNo=r(fst,"IBertForQuestionAnswering"),fst.forEach(t),YNo=r(t7e," (I-BERT model)"),t7e.forEach(t),KNo=i(X),Ob=n(X,"LI",{});var a7e=s(Ob);Eme=n(a7e,"STRONG",{});var mst=s(Eme);ZNo=r(mst,"layoutlmv2"),mst.forEach(t),ejo=r(a7e," \u2014 "),nO=n(a7e,"A",{href:!0});var gst=s(nO);ojo=r(gst,"LayoutLMv2ForQuestionAnswering"),gst.forEach(t),rjo=r(a7e," (LayoutLMv2 model)"),a7e.forEach(t),tjo=i(X),Vb=n(X,"LI",{});var n7e=s(Vb);Cme=n(n7e,"STRONG",{});var hst=s(Cme);ajo=r(hst,"led"),hst.forEach(t),njo=r(n7e," \u2014 "),sO=n(n7e,"A",{href:!0});var pst=s(sO);sjo=r(pst,"LEDForQuestionAnswering"),pst.forEach(t),ljo=r(n7e," (LED model)"),n7e.forEach(t),ijo=i(X),Xb=n(X,"LI",{});var s7e=s(Xb);wme=n(s7e,"STRONG",{});var ust=s(wme);djo=r(ust,"longformer"),ust.forEach(t),cjo=r(s7e," \u2014 "),lO=n(s7e,"A",{href:!0});var _st=s(lO);fjo=r(_st,"LongformerForQuestionAnswering"),_st.forEach(t),mjo=r(s7e," (Longformer model)"),s7e.forEach(t),gjo=i(X),zb=n(X,"LI",{});var l7e=s(zb);Ame=n(l7e,"STRONG",{});var bst=s(Ame);hjo=r(bst,"lxmert"),bst.forEach(t),pjo=r(l7e," \u2014 "),iO=n(l7e,"A",{href:!0});var vst=s(iO);ujo=r(vst,"LxmertForQuestionAnswering"),vst.forEach(t),_jo=r(l7e," (LXMERT model)"),l7e.forEach(t),bjo=i(X),Qb=n(X,"LI",{});var i7e=s(Qb);yme=n(i7e,"STRONG",{});var Fst=s(yme);vjo=r(Fst,"mbart"),Fst.forEach(t),Fjo=r(i7e," \u2014 "),dO=n(i7e,"A",{href:!0});var Tst=s(dO);Tjo=r(Tst,"MBartForQuestionAnswering"),Tst.forEach(t),Mjo=r(i7e," (mBART model)"),i7e.forEach(t),Ejo=i(X),Wb=n(X,"LI",{});var d7e=s(Wb);Lme=n(d7e,"STRONG",{});var Mst=s(Lme);Cjo=r(Mst,"megatron-bert"),Mst.forEach(t),wjo=r(d7e," \u2014 "),cO=n(d7e,"A",{href:!0});var Est=s(cO);Ajo=r(Est,"MegatronBertForQuestionAnswering"),Est.forEach(t),yjo=r(d7e," (MegatronBert model)"),d7e.forEach(t),Ljo=i(X),Hb=n(X,"LI",{});var c7e=s(Hb);xme=n(c7e,"STRONG",{});var Cst=s(xme);xjo=r(Cst,"mobilebert"),Cst.forEach(t),$jo=r(c7e," \u2014 "),fO=n(c7e,"A",{href:!0});var wst=s(fO);kjo=r(wst,"MobileBertForQuestionAnswering"),wst.forEach(t),Sjo=r(c7e," (MobileBERT model)"),c7e.forEach(t),Rjo=i(X),Ub=n(X,"LI",{});var f7e=s(Ub);$me=n(f7e,"STRONG",{});var Ast=s($me);Bjo=r(Ast,"mpnet"),Ast.forEach(t),Pjo=r(f7e," \u2014 "),mO=n(f7e,"A",{href:!0});var yst=s(mO);Ijo=r(yst,"MPNetForQuestionAnswering"),yst.forEach(t),qjo=r(f7e," (MPNet model)"),f7e.forEach(t),Njo=i(X),Jb=n(X,"LI",{});var m7e=s(Jb);kme=n(m7e,"STRONG",{});var Lst=s(kme);jjo=r(Lst,"nystromformer"),Lst.forEach(t),Djo=r(m7e," \u2014 "),gO=n(m7e,"A",{href:!0});var xst=s(gO);Gjo=r(xst,"NystromformerForQuestionAnswering"),xst.forEach(t),Ojo=r(m7e," (Nystromformer model)"),m7e.forEach(t),Vjo=i(X),Yb=n(X,"LI",{});var g7e=s(Yb);Sme=n(g7e,"STRONG",{});var $st=s(Sme);Xjo=r($st,"qdqbert"),$st.forEach(t),zjo=r(g7e," \u2014 "),hO=n(g7e,"A",{href:!0});var kst=s(hO);Qjo=r(kst,"QDQBertForQuestionAnswering"),kst.forEach(t),Wjo=r(g7e," (QDQBert model)"),g7e.forEach(t),Hjo=i(X),Kb=n(X,"LI",{});var h7e=s(Kb);Rme=n(h7e,"STRONG",{});var Sst=s(Rme);Ujo=r(Sst,"reformer"),Sst.forEach(t),Jjo=r(h7e," \u2014 "),pO=n(h7e,"A",{href:!0});var Rst=s(pO);Yjo=r(Rst,"ReformerForQuestionAnswering"),Rst.forEach(t),Kjo=r(h7e," (Reformer model)"),h7e.forEach(t),Zjo=i(X),Zb=n(X,"LI",{});var p7e=s(Zb);Bme=n(p7e,"STRONG",{});var Bst=s(Bme);eDo=r(Bst,"rembert"),Bst.forEach(t),oDo=r(p7e," \u2014 "),uO=n(p7e,"A",{href:!0});var Pst=s(uO);rDo=r(Pst,"RemBertForQuestionAnswering"),Pst.forEach(t),tDo=r(p7e," (RemBERT model)"),p7e.forEach(t),aDo=i(X),ev=n(X,"LI",{});var u7e=s(ev);Pme=n(u7e,"STRONG",{});var Ist=s(Pme);nDo=r(Ist,"roberta"),Ist.forEach(t),sDo=r(u7e," \u2014 "),_O=n(u7e,"A",{href:!0});var qst=s(_O);lDo=r(qst,"RobertaForQuestionAnswering"),qst.forEach(t),iDo=r(u7e," (RoBERTa model)"),u7e.forEach(t),dDo=i(X),ov=n(X,"LI",{});var _7e=s(ov);Ime=n(_7e,"STRONG",{});var Nst=s(Ime);cDo=r(Nst,"roformer"),Nst.forEach(t),fDo=r(_7e," \u2014 "),bO=n(_7e,"A",{href:!0});var jst=s(bO);mDo=r(jst,"RoFormerForQuestionAnswering"),jst.forEach(t),gDo=r(_7e," (RoFormer model)"),_7e.forEach(t),hDo=i(X),rv=n(X,"LI",{});var b7e=s(rv);qme=n(b7e,"STRONG",{});var Dst=s(qme);pDo=r(Dst,"splinter"),Dst.forEach(t),uDo=r(b7e," \u2014 "),vO=n(b7e,"A",{href:!0});var Gst=s(vO);_Do=r(Gst,"SplinterForQuestionAnswering"),Gst.forEach(t),bDo=r(b7e," (Splinter model)"),b7e.forEach(t),vDo=i(X),tv=n(X,"LI",{});var v7e=s(tv);Nme=n(v7e,"STRONG",{});var Ost=s(Nme);FDo=r(Ost,"squeezebert"),Ost.forEach(t),TDo=r(v7e," \u2014 "),FO=n(v7e,"A",{href:!0});var Vst=s(FO);MDo=r(Vst,"SqueezeBertForQuestionAnswering"),Vst.forEach(t),EDo=r(v7e," (SqueezeBERT model)"),v7e.forEach(t),CDo=i(X),av=n(X,"LI",{});var F7e=s(av);jme=n(F7e,"STRONG",{});var Xst=s(jme);wDo=r(Xst,"xlm"),Xst.forEach(t),ADo=r(F7e," \u2014 "),TO=n(F7e,"A",{href:!0});var zst=s(TO);yDo=r(zst,"XLMForQuestionAnsweringSimple"),zst.forEach(t),LDo=r(F7e," (XLM model)"),F7e.forEach(t),xDo=i(X),nv=n(X,"LI",{});var T7e=s(nv);Dme=n(T7e,"STRONG",{});var Qst=s(Dme);$Do=r(Qst,"xlm-roberta"),Qst.forEach(t),kDo=r(T7e," \u2014 "),MO=n(T7e,"A",{href:!0});var Wst=s(MO);SDo=r(Wst,"XLMRobertaForQuestionAnswering"),Wst.forEach(t),RDo=r(T7e," (XLM-RoBERTa model)"),T7e.forEach(t),BDo=i(X),sv=n(X,"LI",{});var M7e=s(sv);Gme=n(M7e,"STRONG",{});var Hst=s(Gme);PDo=r(Hst,"xlm-roberta-xl"),Hst.forEach(t),IDo=r(M7e," \u2014 "),EO=n(M7e,"A",{href:!0});var Ust=s(EO);qDo=r(Ust,"XLMRobertaXLForQuestionAnswering"),Ust.forEach(t),NDo=r(M7e," (XLM-RoBERTa-XL model)"),M7e.forEach(t),jDo=i(X),lv=n(X,"LI",{});var E7e=s(lv);Ome=n(E7e,"STRONG",{});var Jst=s(Ome);DDo=r(Jst,"xlnet"),Jst.forEach(t),GDo=r(E7e," \u2014 "),CO=n(E7e,"A",{href:!0});var Yst=s(CO);ODo=r(Yst,"XLNetForQuestionAnsweringSimple"),Yst.forEach(t),VDo=r(E7e," (XLNet model)"),E7e.forEach(t),XDo=i(X),iv=n(X,"LI",{});var C7e=s(iv);Vme=n(C7e,"STRONG",{});var Kst=s(Vme);zDo=r(Kst,"yoso"),Kst.forEach(t),QDo=r(C7e," \u2014 "),wO=n(C7e,"A",{href:!0});var Zst=s(wO);WDo=r(Zst,"YosoForQuestionAnswering"),Zst.forEach(t),HDo=r(C7e," (YOSO model)"),C7e.forEach(t),X.forEach(t),UDo=i(na),dv=n(na,"P",{});var w7e=s(dv);JDo=r(w7e,"The model is set in evaluation mode by default using "),Xme=n(w7e,"CODE",{});var elt=s(Xme);YDo=r(elt,"model.eval()"),elt.forEach(t),KDo=r(w7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zme=n(w7e,"CODE",{});var olt=s(zme);ZDo=r(olt,"model.train()"),olt.forEach(t),w7e.forEach(t),eGo=i(na),T(cv.$$.fragment,na),na.forEach(t),zs.forEach(t),WBe=i(f),zi=n(f,"H2",{class:!0});var UIe=s(zi);fv=n(UIe,"A",{id:!0,class:!0,href:!0});var rlt=s(fv);Qme=n(rlt,"SPAN",{});var tlt=s(Qme);T(Q0.$$.fragment,tlt),tlt.forEach(t),rlt.forEach(t),oGo=i(UIe),Wme=n(UIe,"SPAN",{});var alt=s(Wme);rGo=r(alt,"AutoModelForTableQuestionAnswering"),alt.forEach(t),UIe.forEach(t),HBe=i(f),No=n(f,"DIV",{class:!0});var Qs=s(No);T(W0.$$.fragment,Qs),tGo=i(Qs),Qi=n(Qs,"P",{});var PY=s(Qi);aGo=r(PY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),AO=n(PY,"A",{href:!0});var nlt=s(AO);nGo=r(nlt,"from_pretrained()"),nlt.forEach(t),sGo=r(PY," class method or the "),yO=n(PY,"A",{href:!0});var slt=s(yO);lGo=r(slt,"from_config()"),slt.forEach(t),iGo=r(PY,` class
method.`),PY.forEach(t),dGo=i(Qs),H0=n(Qs,"P",{});var JIe=s(H0);cGo=r(JIe,"This class cannot be instantiated directly using "),Hme=n(JIe,"CODE",{});var llt=s(Hme);fGo=r(llt,"__init__()"),llt.forEach(t),mGo=r(JIe," (throws an error)."),JIe.forEach(t),gGo=i(Qs),dt=n(Qs,"DIV",{class:!0});var U3=s(dt);T(U0.$$.fragment,U3),hGo=i(U3),Ume=n(U3,"P",{});var ilt=s(Ume);pGo=r(ilt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),ilt.forEach(t),uGo=i(U3),Wi=n(U3,"P",{});var IY=s(Wi);_Go=r(IY,`Note:
Loading a model from its configuration file does `),Jme=n(IY,"STRONG",{});var dlt=s(Jme);bGo=r(dlt,"not"),dlt.forEach(t),vGo=r(IY,` load the model weights. It only affects the
model\u2019s configuration. Use `),LO=n(IY,"A",{href:!0});var clt=s(LO);FGo=r(clt,"from_pretrained()"),clt.forEach(t),TGo=r(IY," to load the model weights."),IY.forEach(t),MGo=i(U3),T(mv.$$.fragment,U3),U3.forEach(t),EGo=i(Qs),ao=n(Qs,"DIV",{class:!0});var sa=s(ao);T(J0.$$.fragment,sa),CGo=i(sa),Yme=n(sa,"P",{});var flt=s(Yme);wGo=r(flt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),flt.forEach(t),AGo=i(sa),Ra=n(sa,"P",{});var J3=s(Ra);yGo=r(J3,"The model class to instantiate is selected based on the "),Kme=n(J3,"CODE",{});var mlt=s(Kme);LGo=r(mlt,"model_type"),mlt.forEach(t),xGo=r(J3,` property of the config object (either
passed as an argument or loaded from `),Zme=n(J3,"CODE",{});var glt=s(Zme);$Go=r(glt,"pretrained_model_name_or_path"),glt.forEach(t),kGo=r(J3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ege=n(J3,"CODE",{});var hlt=s(ege);SGo=r(hlt,"pretrained_model_name_or_path"),hlt.forEach(t),RGo=r(J3,":"),J3.forEach(t),BGo=i(sa),oge=n(sa,"UL",{});var plt=s(oge);gv=n(plt,"LI",{});var A7e=s(gv);rge=n(A7e,"STRONG",{});var ult=s(rge);PGo=r(ult,"tapas"),ult.forEach(t),IGo=r(A7e," \u2014 "),xO=n(A7e,"A",{href:!0});var _lt=s(xO);qGo=r(_lt,"TapasForQuestionAnswering"),_lt.forEach(t),NGo=r(A7e," (TAPAS model)"),A7e.forEach(t),plt.forEach(t),jGo=i(sa),hv=n(sa,"P",{});var y7e=s(hv);DGo=r(y7e,"The model is set in evaluation mode by default using "),tge=n(y7e,"CODE",{});var blt=s(tge);GGo=r(blt,"model.eval()"),blt.forEach(t),OGo=r(y7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),age=n(y7e,"CODE",{});var vlt=s(age);VGo=r(vlt,"model.train()"),vlt.forEach(t),y7e.forEach(t),XGo=i(sa),T(pv.$$.fragment,sa),sa.forEach(t),Qs.forEach(t),UBe=i(f),Hi=n(f,"H2",{class:!0});var YIe=s(Hi);uv=n(YIe,"A",{id:!0,class:!0,href:!0});var Flt=s(uv);nge=n(Flt,"SPAN",{});var Tlt=s(nge);T(Y0.$$.fragment,Tlt),Tlt.forEach(t),Flt.forEach(t),zGo=i(YIe),sge=n(YIe,"SPAN",{});var Mlt=s(sge);QGo=r(Mlt,"AutoModelForImageClassification"),Mlt.forEach(t),YIe.forEach(t),JBe=i(f),jo=n(f,"DIV",{class:!0});var Ws=s(jo);T(K0.$$.fragment,Ws),WGo=i(Ws),Ui=n(Ws,"P",{});var qY=s(Ui);HGo=r(qY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),$O=n(qY,"A",{href:!0});var Elt=s($O);UGo=r(Elt,"from_pretrained()"),Elt.forEach(t),JGo=r(qY," class method or the "),kO=n(qY,"A",{href:!0});var Clt=s(kO);YGo=r(Clt,"from_config()"),Clt.forEach(t),KGo=r(qY,` class
method.`),qY.forEach(t),ZGo=i(Ws),Z0=n(Ws,"P",{});var KIe=s(Z0);eOo=r(KIe,"This class cannot be instantiated directly using "),lge=n(KIe,"CODE",{});var wlt=s(lge);oOo=r(wlt,"__init__()"),wlt.forEach(t),rOo=r(KIe," (throws an error)."),KIe.forEach(t),tOo=i(Ws),ct=n(Ws,"DIV",{class:!0});var Y3=s(ct);T(ey.$$.fragment,Y3),aOo=i(Y3),ige=n(Y3,"P",{});var Alt=s(ige);nOo=r(Alt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Alt.forEach(t),sOo=i(Y3),Ji=n(Y3,"P",{});var NY=s(Ji);lOo=r(NY,`Note:
Loading a model from its configuration file does `),dge=n(NY,"STRONG",{});var ylt=s(dge);iOo=r(ylt,"not"),ylt.forEach(t),dOo=r(NY,` load the model weights. It only affects the
model\u2019s configuration. Use `),SO=n(NY,"A",{href:!0});var Llt=s(SO);cOo=r(Llt,"from_pretrained()"),Llt.forEach(t),fOo=r(NY," to load the model weights."),NY.forEach(t),mOo=i(Y3),T(_v.$$.fragment,Y3),Y3.forEach(t),gOo=i(Ws),no=n(Ws,"DIV",{class:!0});var la=s(no);T(oy.$$.fragment,la),hOo=i(la),cge=n(la,"P",{});var xlt=s(cge);pOo=r(xlt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),xlt.forEach(t),uOo=i(la),Ba=n(la,"P",{});var K3=s(Ba);_Oo=r(K3,"The model class to instantiate is selected based on the "),fge=n(K3,"CODE",{});var $lt=s(fge);bOo=r($lt,"model_type"),$lt.forEach(t),vOo=r(K3,` property of the config object (either
passed as an argument or loaded from `),mge=n(K3,"CODE",{});var klt=s(mge);FOo=r(klt,"pretrained_model_name_or_path"),klt.forEach(t),TOo=r(K3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gge=n(K3,"CODE",{});var Slt=s(gge);MOo=r(Slt,"pretrained_model_name_or_path"),Slt.forEach(t),EOo=r(K3,":"),K3.forEach(t),COo=i(la),ve=n(la,"UL",{});var Ee=s(ve);bv=n(Ee,"LI",{});var L7e=s(bv);hge=n(L7e,"STRONG",{});var Rlt=s(hge);wOo=r(Rlt,"beit"),Rlt.forEach(t),AOo=r(L7e," \u2014 "),RO=n(L7e,"A",{href:!0});var Blt=s(RO);yOo=r(Blt,"BeitForImageClassification"),Blt.forEach(t),LOo=r(L7e," (BEiT model)"),L7e.forEach(t),xOo=i(Ee),vv=n(Ee,"LI",{});var x7e=s(vv);pge=n(x7e,"STRONG",{});var Plt=s(pge);$Oo=r(Plt,"convnext"),Plt.forEach(t),kOo=r(x7e," \u2014 "),BO=n(x7e,"A",{href:!0});var Ilt=s(BO);SOo=r(Ilt,"ConvNextForImageClassification"),Ilt.forEach(t),ROo=r(x7e," (ConvNext model)"),x7e.forEach(t),BOo=i(Ee),Fv=n(Ee,"LI",{});var $7e=s(Fv);uge=n($7e,"STRONG",{});var qlt=s(uge);POo=r(qlt,"data2vec-vision"),qlt.forEach(t),IOo=r($7e," \u2014 "),PO=n($7e,"A",{href:!0});var Nlt=s(PO);qOo=r(Nlt,"Data2VecVisionForImageClassification"),Nlt.forEach(t),NOo=r($7e," (Data2VecVision model)"),$7e.forEach(t),jOo=i(Ee),xs=n(Ee,"LI",{});var R9=s(xs);_ge=n(R9,"STRONG",{});var jlt=s(_ge);DOo=r(jlt,"deit"),jlt.forEach(t),GOo=r(R9," \u2014 "),IO=n(R9,"A",{href:!0});var Dlt=s(IO);OOo=r(Dlt,"DeiTForImageClassification"),Dlt.forEach(t),VOo=r(R9," or "),qO=n(R9,"A",{href:!0});var Glt=s(qO);XOo=r(Glt,"DeiTForImageClassificationWithTeacher"),Glt.forEach(t),zOo=r(R9," (DeiT model)"),R9.forEach(t),QOo=i(Ee),Tv=n(Ee,"LI",{});var k7e=s(Tv);bge=n(k7e,"STRONG",{});var Olt=s(bge);WOo=r(Olt,"imagegpt"),Olt.forEach(t),HOo=r(k7e," \u2014 "),NO=n(k7e,"A",{href:!0});var Vlt=s(NO);UOo=r(Vlt,"ImageGPTForImageClassification"),Vlt.forEach(t),JOo=r(k7e," (ImageGPT model)"),k7e.forEach(t),YOo=i(Ee),ft=n(Ee,"LI",{});var of=s(ft);vge=n(of,"STRONG",{});var Xlt=s(vge);KOo=r(Xlt,"perceiver"),Xlt.forEach(t),ZOo=r(of," \u2014 "),jO=n(of,"A",{href:!0});var zlt=s(jO);eVo=r(zlt,"PerceiverForImageClassificationLearned"),zlt.forEach(t),oVo=r(of," or "),DO=n(of,"A",{href:!0});var Qlt=s(DO);rVo=r(Qlt,"PerceiverForImageClassificationFourier"),Qlt.forEach(t),tVo=r(of," or "),GO=n(of,"A",{href:!0});var Wlt=s(GO);aVo=r(Wlt,"PerceiverForImageClassificationConvProcessing"),Wlt.forEach(t),nVo=r(of," (Perceiver model)"),of.forEach(t),sVo=i(Ee),Mv=n(Ee,"LI",{});var S7e=s(Mv);Fge=n(S7e,"STRONG",{});var Hlt=s(Fge);lVo=r(Hlt,"poolformer"),Hlt.forEach(t),iVo=r(S7e," \u2014 "),OO=n(S7e,"A",{href:!0});var Ult=s(OO);dVo=r(Ult,"PoolFormerForImageClassification"),Ult.forEach(t),cVo=r(S7e," (PoolFormer model)"),S7e.forEach(t),fVo=i(Ee),Ev=n(Ee,"LI",{});var R7e=s(Ev);Tge=n(R7e,"STRONG",{});var Jlt=s(Tge);mVo=r(Jlt,"regnet"),Jlt.forEach(t),gVo=r(R7e," \u2014 "),VO=n(R7e,"A",{href:!0});var Ylt=s(VO);hVo=r(Ylt,"RegNetForImageClassification"),Ylt.forEach(t),pVo=r(R7e," (RegNet model)"),R7e.forEach(t),uVo=i(Ee),Cv=n(Ee,"LI",{});var B7e=s(Cv);Mge=n(B7e,"STRONG",{});var Klt=s(Mge);_Vo=r(Klt,"resnet"),Klt.forEach(t),bVo=r(B7e," \u2014 "),XO=n(B7e,"A",{href:!0});var Zlt=s(XO);vVo=r(Zlt,"ResNetForImageClassification"),Zlt.forEach(t),FVo=r(B7e," (ResNet model)"),B7e.forEach(t),TVo=i(Ee),wv=n(Ee,"LI",{});var P7e=s(wv);Ege=n(P7e,"STRONG",{});var eit=s(Ege);MVo=r(eit,"segformer"),eit.forEach(t),EVo=r(P7e," \u2014 "),zO=n(P7e,"A",{href:!0});var oit=s(zO);CVo=r(oit,"SegformerForImageClassification"),oit.forEach(t),wVo=r(P7e," (SegFormer model)"),P7e.forEach(t),AVo=i(Ee),Av=n(Ee,"LI",{});var I7e=s(Av);Cge=n(I7e,"STRONG",{});var rit=s(Cge);yVo=r(rit,"swin"),rit.forEach(t),LVo=r(I7e," \u2014 "),QO=n(I7e,"A",{href:!0});var tit=s(QO);xVo=r(tit,"SwinForImageClassification"),tit.forEach(t),$Vo=r(I7e," (Swin model)"),I7e.forEach(t),kVo=i(Ee),yv=n(Ee,"LI",{});var q7e=s(yv);wge=n(q7e,"STRONG",{});var ait=s(wge);SVo=r(ait,"van"),ait.forEach(t),RVo=r(q7e," \u2014 "),WO=n(q7e,"A",{href:!0});var nit=s(WO);BVo=r(nit,"VanForImageClassification"),nit.forEach(t),PVo=r(q7e," (VAN model)"),q7e.forEach(t),IVo=i(Ee),Lv=n(Ee,"LI",{});var N7e=s(Lv);Age=n(N7e,"STRONG",{});var sit=s(Age);qVo=r(sit,"vit"),sit.forEach(t),NVo=r(N7e," \u2014 "),HO=n(N7e,"A",{href:!0});var lit=s(HO);jVo=r(lit,"ViTForImageClassification"),lit.forEach(t),DVo=r(N7e," (ViT model)"),N7e.forEach(t),Ee.forEach(t),GVo=i(la),xv=n(la,"P",{});var j7e=s(xv);OVo=r(j7e,"The model is set in evaluation mode by default using "),yge=n(j7e,"CODE",{});var iit=s(yge);VVo=r(iit,"model.eval()"),iit.forEach(t),XVo=r(j7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lge=n(j7e,"CODE",{});var dit=s(Lge);zVo=r(dit,"model.train()"),dit.forEach(t),j7e.forEach(t),QVo=i(la),T($v.$$.fragment,la),la.forEach(t),Ws.forEach(t),YBe=i(f),Yi=n(f,"H2",{class:!0});var ZIe=s(Yi);kv=n(ZIe,"A",{id:!0,class:!0,href:!0});var cit=s(kv);xge=n(cit,"SPAN",{});var fit=s(xge);T(ry.$$.fragment,fit),fit.forEach(t),cit.forEach(t),WVo=i(ZIe),$ge=n(ZIe,"SPAN",{});var mit=s($ge);HVo=r(mit,"AutoModelForVision2Seq"),mit.forEach(t),ZIe.forEach(t),KBe=i(f),Do=n(f,"DIV",{class:!0});var Hs=s(Do);T(ty.$$.fragment,Hs),UVo=i(Hs),Ki=n(Hs,"P",{});var jY=s(Ki);JVo=r(jY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),UO=n(jY,"A",{href:!0});var git=s(UO);YVo=r(git,"from_pretrained()"),git.forEach(t),KVo=r(jY," class method or the "),JO=n(jY,"A",{href:!0});var hit=s(JO);ZVo=r(hit,"from_config()"),hit.forEach(t),eXo=r(jY,` class
method.`),jY.forEach(t),oXo=i(Hs),ay=n(Hs,"P",{});var eqe=s(ay);rXo=r(eqe,"This class cannot be instantiated directly using "),kge=n(eqe,"CODE",{});var pit=s(kge);tXo=r(pit,"__init__()"),pit.forEach(t),aXo=r(eqe," (throws an error)."),eqe.forEach(t),nXo=i(Hs),mt=n(Hs,"DIV",{class:!0});var Z3=s(mt);T(ny.$$.fragment,Z3),sXo=i(Z3),Sge=n(Z3,"P",{});var uit=s(Sge);lXo=r(uit,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),uit.forEach(t),iXo=i(Z3),Zi=n(Z3,"P",{});var DY=s(Zi);dXo=r(DY,`Note:
Loading a model from its configuration file does `),Rge=n(DY,"STRONG",{});var _it=s(Rge);cXo=r(_it,"not"),_it.forEach(t),fXo=r(DY,` load the model weights. It only affects the
model\u2019s configuration. Use `),YO=n(DY,"A",{href:!0});var bit=s(YO);mXo=r(bit,"from_pretrained()"),bit.forEach(t),gXo=r(DY," to load the model weights."),DY.forEach(t),hXo=i(Z3),T(Sv.$$.fragment,Z3),Z3.forEach(t),pXo=i(Hs),so=n(Hs,"DIV",{class:!0});var ia=s(so);T(sy.$$.fragment,ia),uXo=i(ia),Bge=n(ia,"P",{});var vit=s(Bge);_Xo=r(vit,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),vit.forEach(t),bXo=i(ia),Pa=n(ia,"P",{});var ew=s(Pa);vXo=r(ew,"The model class to instantiate is selected based on the "),Pge=n(ew,"CODE",{});var Fit=s(Pge);FXo=r(Fit,"model_type"),Fit.forEach(t),TXo=r(ew,` property of the config object (either
passed as an argument or loaded from `),Ige=n(ew,"CODE",{});var Tit=s(Ige);MXo=r(Tit,"pretrained_model_name_or_path"),Tit.forEach(t),EXo=r(ew,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qge=n(ew,"CODE",{});var Mit=s(qge);CXo=r(Mit,"pretrained_model_name_or_path"),Mit.forEach(t),wXo=r(ew,":"),ew.forEach(t),AXo=i(ia),Nge=n(ia,"UL",{});var Eit=s(Nge);Rv=n(Eit,"LI",{});var D7e=s(Rv);jge=n(D7e,"STRONG",{});var Cit=s(jge);yXo=r(Cit,"vision-encoder-decoder"),Cit.forEach(t),LXo=r(D7e," \u2014 "),KO=n(D7e,"A",{href:!0});var wit=s(KO);xXo=r(wit,"VisionEncoderDecoderModel"),wit.forEach(t),$Xo=r(D7e," (Vision Encoder decoder model)"),D7e.forEach(t),Eit.forEach(t),kXo=i(ia),Bv=n(ia,"P",{});var G7e=s(Bv);SXo=r(G7e,"The model is set in evaluation mode by default using "),Dge=n(G7e,"CODE",{});var Ait=s(Dge);RXo=r(Ait,"model.eval()"),Ait.forEach(t),BXo=r(G7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gge=n(G7e,"CODE",{});var yit=s(Gge);PXo=r(yit,"model.train()"),yit.forEach(t),G7e.forEach(t),IXo=i(ia),T(Pv.$$.fragment,ia),ia.forEach(t),Hs.forEach(t),ZBe=i(f),ed=n(f,"H2",{class:!0});var oqe=s(ed);Iv=n(oqe,"A",{id:!0,class:!0,href:!0});var Lit=s(Iv);Oge=n(Lit,"SPAN",{});var xit=s(Oge);T(ly.$$.fragment,xit),xit.forEach(t),Lit.forEach(t),qXo=i(oqe),Vge=n(oqe,"SPAN",{});var $it=s(Vge);NXo=r($it,"AutoModelForAudioClassification"),$it.forEach(t),oqe.forEach(t),ePe=i(f),Go=n(f,"DIV",{class:!0});var Us=s(Go);T(iy.$$.fragment,Us),jXo=i(Us),od=n(Us,"P",{});var GY=s(od);DXo=r(GY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),ZO=n(GY,"A",{href:!0});var kit=s(ZO);GXo=r(kit,"from_pretrained()"),kit.forEach(t),OXo=r(GY," class method or the "),eV=n(GY,"A",{href:!0});var Sit=s(eV);VXo=r(Sit,"from_config()"),Sit.forEach(t),XXo=r(GY,` class
method.`),GY.forEach(t),zXo=i(Us),dy=n(Us,"P",{});var rqe=s(dy);QXo=r(rqe,"This class cannot be instantiated directly using "),Xge=n(rqe,"CODE",{});var Rit=s(Xge);WXo=r(Rit,"__init__()"),Rit.forEach(t),HXo=r(rqe," (throws an error)."),rqe.forEach(t),UXo=i(Us),gt=n(Us,"DIV",{class:!0});var ow=s(gt);T(cy.$$.fragment,ow),JXo=i(ow),zge=n(ow,"P",{});var Bit=s(zge);YXo=r(Bit,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Bit.forEach(t),KXo=i(ow),rd=n(ow,"P",{});var OY=s(rd);ZXo=r(OY,`Note:
Loading a model from its configuration file does `),Qge=n(OY,"STRONG",{});var Pit=s(Qge);ezo=r(Pit,"not"),Pit.forEach(t),ozo=r(OY,` load the model weights. It only affects the
model\u2019s configuration. Use `),oV=n(OY,"A",{href:!0});var Iit=s(oV);rzo=r(Iit,"from_pretrained()"),Iit.forEach(t),tzo=r(OY," to load the model weights."),OY.forEach(t),azo=i(ow),T(qv.$$.fragment,ow),ow.forEach(t),nzo=i(Us),lo=n(Us,"DIV",{class:!0});var da=s(lo);T(fy.$$.fragment,da),szo=i(da),Wge=n(da,"P",{});var qit=s(Wge);lzo=r(qit,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),qit.forEach(t),izo=i(da),Ia=n(da,"P",{});var rw=s(Ia);dzo=r(rw,"The model class to instantiate is selected based on the "),Hge=n(rw,"CODE",{});var Nit=s(Hge);czo=r(Nit,"model_type"),Nit.forEach(t),fzo=r(rw,` property of the config object (either
passed as an argument or loaded from `),Uge=n(rw,"CODE",{});var jit=s(Uge);mzo=r(jit,"pretrained_model_name_or_path"),jit.forEach(t),gzo=r(rw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jge=n(rw,"CODE",{});var Dit=s(Jge);hzo=r(Dit,"pretrained_model_name_or_path"),Dit.forEach(t),pzo=r(rw,":"),rw.forEach(t),uzo=i(da),Ne=n(da,"UL",{});var bo=s(Ne);Nv=n(bo,"LI",{});var O7e=s(Nv);Yge=n(O7e,"STRONG",{});var Git=s(Yge);_zo=r(Git,"data2vec-audio"),Git.forEach(t),bzo=r(O7e," \u2014 "),rV=n(O7e,"A",{href:!0});var Oit=s(rV);vzo=r(Oit,"Data2VecAudioForSequenceClassification"),Oit.forEach(t),Fzo=r(O7e," (Data2VecAudio model)"),O7e.forEach(t),Tzo=i(bo),jv=n(bo,"LI",{});var V7e=s(jv);Kge=n(V7e,"STRONG",{});var Vit=s(Kge);Mzo=r(Vit,"hubert"),Vit.forEach(t),Ezo=r(V7e," \u2014 "),tV=n(V7e,"A",{href:!0});var Xit=s(tV);Czo=r(Xit,"HubertForSequenceClassification"),Xit.forEach(t),wzo=r(V7e," (Hubert model)"),V7e.forEach(t),Azo=i(bo),Dv=n(bo,"LI",{});var X7e=s(Dv);Zge=n(X7e,"STRONG",{});var zit=s(Zge);yzo=r(zit,"sew"),zit.forEach(t),Lzo=r(X7e," \u2014 "),aV=n(X7e,"A",{href:!0});var Qit=s(aV);xzo=r(Qit,"SEWForSequenceClassification"),Qit.forEach(t),$zo=r(X7e," (SEW model)"),X7e.forEach(t),kzo=i(bo),Gv=n(bo,"LI",{});var z7e=s(Gv);ehe=n(z7e,"STRONG",{});var Wit=s(ehe);Szo=r(Wit,"sew-d"),Wit.forEach(t),Rzo=r(z7e," \u2014 "),nV=n(z7e,"A",{href:!0});var Hit=s(nV);Bzo=r(Hit,"SEWDForSequenceClassification"),Hit.forEach(t),Pzo=r(z7e," (SEW-D model)"),z7e.forEach(t),Izo=i(bo),Ov=n(bo,"LI",{});var Q7e=s(Ov);ohe=n(Q7e,"STRONG",{});var Uit=s(ohe);qzo=r(Uit,"unispeech"),Uit.forEach(t),Nzo=r(Q7e," \u2014 "),sV=n(Q7e,"A",{href:!0});var Jit=s(sV);jzo=r(Jit,"UniSpeechForSequenceClassification"),Jit.forEach(t),Dzo=r(Q7e," (UniSpeech model)"),Q7e.forEach(t),Gzo=i(bo),Vv=n(bo,"LI",{});var W7e=s(Vv);rhe=n(W7e,"STRONG",{});var Yit=s(rhe);Ozo=r(Yit,"unispeech-sat"),Yit.forEach(t),Vzo=r(W7e," \u2014 "),lV=n(W7e,"A",{href:!0});var Kit=s(lV);Xzo=r(Kit,"UniSpeechSatForSequenceClassification"),Kit.forEach(t),zzo=r(W7e," (UniSpeechSat model)"),W7e.forEach(t),Qzo=i(bo),Xv=n(bo,"LI",{});var H7e=s(Xv);the=n(H7e,"STRONG",{});var Zit=s(the);Wzo=r(Zit,"wav2vec2"),Zit.forEach(t),Hzo=r(H7e," \u2014 "),iV=n(H7e,"A",{href:!0});var edt=s(iV);Uzo=r(edt,"Wav2Vec2ForSequenceClassification"),edt.forEach(t),Jzo=r(H7e," (Wav2Vec2 model)"),H7e.forEach(t),Yzo=i(bo),zv=n(bo,"LI",{});var U7e=s(zv);ahe=n(U7e,"STRONG",{});var odt=s(ahe);Kzo=r(odt,"wavlm"),odt.forEach(t),Zzo=r(U7e," \u2014 "),dV=n(U7e,"A",{href:!0});var rdt=s(dV);eQo=r(rdt,"WavLMForSequenceClassification"),rdt.forEach(t),oQo=r(U7e," (WavLM model)"),U7e.forEach(t),bo.forEach(t),rQo=i(da),Qv=n(da,"P",{});var J7e=s(Qv);tQo=r(J7e,"The model is set in evaluation mode by default using "),nhe=n(J7e,"CODE",{});var tdt=s(nhe);aQo=r(tdt,"model.eval()"),tdt.forEach(t),nQo=r(J7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),she=n(J7e,"CODE",{});var adt=s(she);sQo=r(adt,"model.train()"),adt.forEach(t),J7e.forEach(t),lQo=i(da),T(Wv.$$.fragment,da),da.forEach(t),Us.forEach(t),oPe=i(f),td=n(f,"H2",{class:!0});var tqe=s(td);Hv=n(tqe,"A",{id:!0,class:!0,href:!0});var ndt=s(Hv);lhe=n(ndt,"SPAN",{});var sdt=s(lhe);T(my.$$.fragment,sdt),sdt.forEach(t),ndt.forEach(t),iQo=i(tqe),ihe=n(tqe,"SPAN",{});var ldt=s(ihe);dQo=r(ldt,"AutoModelForAudioFrameClassification"),ldt.forEach(t),tqe.forEach(t),rPe=i(f),Oo=n(f,"DIV",{class:!0});var Js=s(Oo);T(gy.$$.fragment,Js),cQo=i(Js),ad=n(Js,"P",{});var VY=s(ad);fQo=r(VY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),cV=n(VY,"A",{href:!0});var idt=s(cV);mQo=r(idt,"from_pretrained()"),idt.forEach(t),gQo=r(VY," class method or the "),fV=n(VY,"A",{href:!0});var ddt=s(fV);hQo=r(ddt,"from_config()"),ddt.forEach(t),pQo=r(VY,` class
method.`),VY.forEach(t),uQo=i(Js),hy=n(Js,"P",{});var aqe=s(hy);_Qo=r(aqe,"This class cannot be instantiated directly using "),dhe=n(aqe,"CODE",{});var cdt=s(dhe);bQo=r(cdt,"__init__()"),cdt.forEach(t),vQo=r(aqe," (throws an error)."),aqe.forEach(t),FQo=i(Js),ht=n(Js,"DIV",{class:!0});var tw=s(ht);T(py.$$.fragment,tw),TQo=i(tw),che=n(tw,"P",{});var fdt=s(che);MQo=r(fdt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),fdt.forEach(t),EQo=i(tw),nd=n(tw,"P",{});var XY=s(nd);CQo=r(XY,`Note:
Loading a model from its configuration file does `),fhe=n(XY,"STRONG",{});var mdt=s(fhe);wQo=r(mdt,"not"),mdt.forEach(t),AQo=r(XY,` load the model weights. It only affects the
model\u2019s configuration. Use `),mV=n(XY,"A",{href:!0});var gdt=s(mV);yQo=r(gdt,"from_pretrained()"),gdt.forEach(t),LQo=r(XY," to load the model weights."),XY.forEach(t),xQo=i(tw),T(Uv.$$.fragment,tw),tw.forEach(t),$Qo=i(Js),io=n(Js,"DIV",{class:!0});var ca=s(io);T(uy.$$.fragment,ca),kQo=i(ca),mhe=n(ca,"P",{});var hdt=s(mhe);SQo=r(hdt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),hdt.forEach(t),RQo=i(ca),qa=n(ca,"P",{});var aw=s(qa);BQo=r(aw,"The model class to instantiate is selected based on the "),ghe=n(aw,"CODE",{});var pdt=s(ghe);PQo=r(pdt,"model_type"),pdt.forEach(t),IQo=r(aw,` property of the config object (either
passed as an argument or loaded from `),hhe=n(aw,"CODE",{});var udt=s(hhe);qQo=r(udt,"pretrained_model_name_or_path"),udt.forEach(t),NQo=r(aw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),phe=n(aw,"CODE",{});var _dt=s(phe);jQo=r(_dt,"pretrained_model_name_or_path"),_dt.forEach(t),DQo=r(aw,":"),aw.forEach(t),GQo=i(ca),Na=n(ca,"UL",{});var nw=s(Na);Jv=n(nw,"LI",{});var Y7e=s(Jv);uhe=n(Y7e,"STRONG",{});var bdt=s(uhe);OQo=r(bdt,"data2vec-audio"),bdt.forEach(t),VQo=r(Y7e," \u2014 "),gV=n(Y7e,"A",{href:!0});var vdt=s(gV);XQo=r(vdt,"Data2VecAudioForAudioFrameClassification"),vdt.forEach(t),zQo=r(Y7e," (Data2VecAudio model)"),Y7e.forEach(t),QQo=i(nw),Yv=n(nw,"LI",{});var K7e=s(Yv);_he=n(K7e,"STRONG",{});var Fdt=s(_he);WQo=r(Fdt,"unispeech-sat"),Fdt.forEach(t),HQo=r(K7e," \u2014 "),hV=n(K7e,"A",{href:!0});var Tdt=s(hV);UQo=r(Tdt,"UniSpeechSatForAudioFrameClassification"),Tdt.forEach(t),JQo=r(K7e," (UniSpeechSat model)"),K7e.forEach(t),YQo=i(nw),Kv=n(nw,"LI",{});var Z7e=s(Kv);bhe=n(Z7e,"STRONG",{});var Mdt=s(bhe);KQo=r(Mdt,"wav2vec2"),Mdt.forEach(t),ZQo=r(Z7e," \u2014 "),pV=n(Z7e,"A",{href:!0});var Edt=s(pV);eWo=r(Edt,"Wav2Vec2ForAudioFrameClassification"),Edt.forEach(t),oWo=r(Z7e," (Wav2Vec2 model)"),Z7e.forEach(t),rWo=i(nw),Zv=n(nw,"LI",{});var exe=s(Zv);vhe=n(exe,"STRONG",{});var Cdt=s(vhe);tWo=r(Cdt,"wavlm"),Cdt.forEach(t),aWo=r(exe," \u2014 "),uV=n(exe,"A",{href:!0});var wdt=s(uV);nWo=r(wdt,"WavLMForAudioFrameClassification"),wdt.forEach(t),sWo=r(exe," (WavLM model)"),exe.forEach(t),nw.forEach(t),lWo=i(ca),eF=n(ca,"P",{});var oxe=s(eF);iWo=r(oxe,"The model is set in evaluation mode by default using "),Fhe=n(oxe,"CODE",{});var Adt=s(Fhe);dWo=r(Adt,"model.eval()"),Adt.forEach(t),cWo=r(oxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),The=n(oxe,"CODE",{});var ydt=s(The);fWo=r(ydt,"model.train()"),ydt.forEach(t),oxe.forEach(t),mWo=i(ca),T(oF.$$.fragment,ca),ca.forEach(t),Js.forEach(t),tPe=i(f),sd=n(f,"H2",{class:!0});var nqe=s(sd);rF=n(nqe,"A",{id:!0,class:!0,href:!0});var Ldt=s(rF);Mhe=n(Ldt,"SPAN",{});var xdt=s(Mhe);T(_y.$$.fragment,xdt),xdt.forEach(t),Ldt.forEach(t),gWo=i(nqe),Ehe=n(nqe,"SPAN",{});var $dt=s(Ehe);hWo=r($dt,"AutoModelForCTC"),$dt.forEach(t),nqe.forEach(t),aPe=i(f),Vo=n(f,"DIV",{class:!0});var Ys=s(Vo);T(by.$$.fragment,Ys),pWo=i(Ys),ld=n(Ys,"P",{});var zY=s(ld);uWo=r(zY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),_V=n(zY,"A",{href:!0});var kdt=s(_V);_Wo=r(kdt,"from_pretrained()"),kdt.forEach(t),bWo=r(zY," class method or the "),bV=n(zY,"A",{href:!0});var Sdt=s(bV);vWo=r(Sdt,"from_config()"),Sdt.forEach(t),FWo=r(zY,` class
method.`),zY.forEach(t),TWo=i(Ys),vy=n(Ys,"P",{});var sqe=s(vy);MWo=r(sqe,"This class cannot be instantiated directly using "),Che=n(sqe,"CODE",{});var Rdt=s(Che);EWo=r(Rdt,"__init__()"),Rdt.forEach(t),CWo=r(sqe," (throws an error)."),sqe.forEach(t),wWo=i(Ys),pt=n(Ys,"DIV",{class:!0});var sw=s(pt);T(Fy.$$.fragment,sw),AWo=i(sw),whe=n(sw,"P",{});var Bdt=s(whe);yWo=r(Bdt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Bdt.forEach(t),LWo=i(sw),id=n(sw,"P",{});var QY=s(id);xWo=r(QY,`Note:
Loading a model from its configuration file does `),Ahe=n(QY,"STRONG",{});var Pdt=s(Ahe);$Wo=r(Pdt,"not"),Pdt.forEach(t),kWo=r(QY,` load the model weights. It only affects the
model\u2019s configuration. Use `),vV=n(QY,"A",{href:!0});var Idt=s(vV);SWo=r(Idt,"from_pretrained()"),Idt.forEach(t),RWo=r(QY," to load the model weights."),QY.forEach(t),BWo=i(sw),T(tF.$$.fragment,sw),sw.forEach(t),PWo=i(Ys),co=n(Ys,"DIV",{class:!0});var fa=s(co);T(Ty.$$.fragment,fa),IWo=i(fa),yhe=n(fa,"P",{});var qdt=s(yhe);qWo=r(qdt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),qdt.forEach(t),NWo=i(fa),ja=n(fa,"P",{});var lw=s(ja);jWo=r(lw,"The model class to instantiate is selected based on the "),Lhe=n(lw,"CODE",{});var Ndt=s(Lhe);DWo=r(Ndt,"model_type"),Ndt.forEach(t),GWo=r(lw,` property of the config object (either
passed as an argument or loaded from `),xhe=n(lw,"CODE",{});var jdt=s(xhe);OWo=r(jdt,"pretrained_model_name_or_path"),jdt.forEach(t),VWo=r(lw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$he=n(lw,"CODE",{});var Ddt=s($he);XWo=r(Ddt,"pretrained_model_name_or_path"),Ddt.forEach(t),zWo=r(lw,":"),lw.forEach(t),QWo=i(fa),je=n(fa,"UL",{});var vo=s(je);aF=n(vo,"LI",{});var rxe=s(aF);khe=n(rxe,"STRONG",{});var Gdt=s(khe);WWo=r(Gdt,"data2vec-audio"),Gdt.forEach(t),HWo=r(rxe," \u2014 "),FV=n(rxe,"A",{href:!0});var Odt=s(FV);UWo=r(Odt,"Data2VecAudioForCTC"),Odt.forEach(t),JWo=r(rxe," (Data2VecAudio model)"),rxe.forEach(t),YWo=i(vo),nF=n(vo,"LI",{});var txe=s(nF);She=n(txe,"STRONG",{});var Vdt=s(She);KWo=r(Vdt,"hubert"),Vdt.forEach(t),ZWo=r(txe," \u2014 "),TV=n(txe,"A",{href:!0});var Xdt=s(TV);eHo=r(Xdt,"HubertForCTC"),Xdt.forEach(t),oHo=r(txe," (Hubert model)"),txe.forEach(t),rHo=i(vo),sF=n(vo,"LI",{});var axe=s(sF);Rhe=n(axe,"STRONG",{});var zdt=s(Rhe);tHo=r(zdt,"sew"),zdt.forEach(t),aHo=r(axe," \u2014 "),MV=n(axe,"A",{href:!0});var Qdt=s(MV);nHo=r(Qdt,"SEWForCTC"),Qdt.forEach(t),sHo=r(axe," (SEW model)"),axe.forEach(t),lHo=i(vo),lF=n(vo,"LI",{});var nxe=s(lF);Bhe=n(nxe,"STRONG",{});var Wdt=s(Bhe);iHo=r(Wdt,"sew-d"),Wdt.forEach(t),dHo=r(nxe," \u2014 "),EV=n(nxe,"A",{href:!0});var Hdt=s(EV);cHo=r(Hdt,"SEWDForCTC"),Hdt.forEach(t),fHo=r(nxe," (SEW-D model)"),nxe.forEach(t),mHo=i(vo),iF=n(vo,"LI",{});var sxe=s(iF);Phe=n(sxe,"STRONG",{});var Udt=s(Phe);gHo=r(Udt,"unispeech"),Udt.forEach(t),hHo=r(sxe," \u2014 "),CV=n(sxe,"A",{href:!0});var Jdt=s(CV);pHo=r(Jdt,"UniSpeechForCTC"),Jdt.forEach(t),uHo=r(sxe," (UniSpeech model)"),sxe.forEach(t),_Ho=i(vo),dF=n(vo,"LI",{});var lxe=s(dF);Ihe=n(lxe,"STRONG",{});var Ydt=s(Ihe);bHo=r(Ydt,"unispeech-sat"),Ydt.forEach(t),vHo=r(lxe," \u2014 "),wV=n(lxe,"A",{href:!0});var Kdt=s(wV);FHo=r(Kdt,"UniSpeechSatForCTC"),Kdt.forEach(t),THo=r(lxe," (UniSpeechSat model)"),lxe.forEach(t),MHo=i(vo),cF=n(vo,"LI",{});var ixe=s(cF);qhe=n(ixe,"STRONG",{});var Zdt=s(qhe);EHo=r(Zdt,"wav2vec2"),Zdt.forEach(t),CHo=r(ixe," \u2014 "),AV=n(ixe,"A",{href:!0});var ect=s(AV);wHo=r(ect,"Wav2Vec2ForCTC"),ect.forEach(t),AHo=r(ixe," (Wav2Vec2 model)"),ixe.forEach(t),yHo=i(vo),fF=n(vo,"LI",{});var dxe=s(fF);Nhe=n(dxe,"STRONG",{});var oct=s(Nhe);LHo=r(oct,"wavlm"),oct.forEach(t),xHo=r(dxe," \u2014 "),yV=n(dxe,"A",{href:!0});var rct=s(yV);$Ho=r(rct,"WavLMForCTC"),rct.forEach(t),kHo=r(dxe," (WavLM model)"),dxe.forEach(t),vo.forEach(t),SHo=i(fa),mF=n(fa,"P",{});var cxe=s(mF);RHo=r(cxe,"The model is set in evaluation mode by default using "),jhe=n(cxe,"CODE",{});var tct=s(jhe);BHo=r(tct,"model.eval()"),tct.forEach(t),PHo=r(cxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dhe=n(cxe,"CODE",{});var act=s(Dhe);IHo=r(act,"model.train()"),act.forEach(t),cxe.forEach(t),qHo=i(fa),T(gF.$$.fragment,fa),fa.forEach(t),Ys.forEach(t),nPe=i(f),dd=n(f,"H2",{class:!0});var lqe=s(dd);hF=n(lqe,"A",{id:!0,class:!0,href:!0});var nct=s(hF);Ghe=n(nct,"SPAN",{});var sct=s(Ghe);T(My.$$.fragment,sct),sct.forEach(t),nct.forEach(t),NHo=i(lqe),Ohe=n(lqe,"SPAN",{});var lct=s(Ohe);jHo=r(lct,"AutoModelForSpeechSeq2Seq"),lct.forEach(t),lqe.forEach(t),sPe=i(f),Xo=n(f,"DIV",{class:!0});var Ks=s(Xo);T(Ey.$$.fragment,Ks),DHo=i(Ks),cd=n(Ks,"P",{});var WY=s(cd);GHo=r(WY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),LV=n(WY,"A",{href:!0});var ict=s(LV);OHo=r(ict,"from_pretrained()"),ict.forEach(t),VHo=r(WY," class method or the "),xV=n(WY,"A",{href:!0});var dct=s(xV);XHo=r(dct,"from_config()"),dct.forEach(t),zHo=r(WY,` class
method.`),WY.forEach(t),QHo=i(Ks),Cy=n(Ks,"P",{});var iqe=s(Cy);WHo=r(iqe,"This class cannot be instantiated directly using "),Vhe=n(iqe,"CODE",{});var cct=s(Vhe);HHo=r(cct,"__init__()"),cct.forEach(t),UHo=r(iqe," (throws an error)."),iqe.forEach(t),JHo=i(Ks),ut=n(Ks,"DIV",{class:!0});var iw=s(ut);T(wy.$$.fragment,iw),YHo=i(iw),Xhe=n(iw,"P",{});var fct=s(Xhe);KHo=r(fct,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),fct.forEach(t),ZHo=i(iw),fd=n(iw,"P",{});var HY=s(fd);eUo=r(HY,`Note:
Loading a model from its configuration file does `),zhe=n(HY,"STRONG",{});var mct=s(zhe);oUo=r(mct,"not"),mct.forEach(t),rUo=r(HY,` load the model weights. It only affects the
model\u2019s configuration. Use `),$V=n(HY,"A",{href:!0});var gct=s($V);tUo=r(gct,"from_pretrained()"),gct.forEach(t),aUo=r(HY," to load the model weights."),HY.forEach(t),nUo=i(iw),T(pF.$$.fragment,iw),iw.forEach(t),sUo=i(Ks),fo=n(Ks,"DIV",{class:!0});var ma=s(fo);T(Ay.$$.fragment,ma),lUo=i(ma),Qhe=n(ma,"P",{});var hct=s(Qhe);iUo=r(hct,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),hct.forEach(t),dUo=i(ma),Da=n(ma,"P",{});var dw=s(Da);cUo=r(dw,"The model class to instantiate is selected based on the "),Whe=n(dw,"CODE",{});var pct=s(Whe);fUo=r(pct,"model_type"),pct.forEach(t),mUo=r(dw,` property of the config object (either
passed as an argument or loaded from `),Hhe=n(dw,"CODE",{});var uct=s(Hhe);gUo=r(uct,"pretrained_model_name_or_path"),uct.forEach(t),hUo=r(dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uhe=n(dw,"CODE",{});var _ct=s(Uhe);pUo=r(_ct,"pretrained_model_name_or_path"),_ct.forEach(t),uUo=r(dw,":"),dw.forEach(t),_Uo=i(ma),yy=n(ma,"UL",{});var dqe=s(yy);uF=n(dqe,"LI",{});var fxe=s(uF);Jhe=n(fxe,"STRONG",{});var bct=s(Jhe);bUo=r(bct,"speech-encoder-decoder"),bct.forEach(t),vUo=r(fxe," \u2014 "),kV=n(fxe,"A",{href:!0});var vct=s(kV);FUo=r(vct,"SpeechEncoderDecoderModel"),vct.forEach(t),TUo=r(fxe," (Speech Encoder decoder model)"),fxe.forEach(t),MUo=i(dqe),_F=n(dqe,"LI",{});var mxe=s(_F);Yhe=n(mxe,"STRONG",{});var Fct=s(Yhe);EUo=r(Fct,"speech_to_text"),Fct.forEach(t),CUo=r(mxe," \u2014 "),SV=n(mxe,"A",{href:!0});var Tct=s(SV);wUo=r(Tct,"Speech2TextForConditionalGeneration"),Tct.forEach(t),AUo=r(mxe," (Speech2Text model)"),mxe.forEach(t),dqe.forEach(t),yUo=i(ma),bF=n(ma,"P",{});var gxe=s(bF);LUo=r(gxe,"The model is set in evaluation mode by default using "),Khe=n(gxe,"CODE",{});var Mct=s(Khe);xUo=r(Mct,"model.eval()"),Mct.forEach(t),$Uo=r(gxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zhe=n(gxe,"CODE",{});var Ect=s(Zhe);kUo=r(Ect,"model.train()"),Ect.forEach(t),gxe.forEach(t),SUo=i(ma),T(vF.$$.fragment,ma),ma.forEach(t),Ks.forEach(t),lPe=i(f),md=n(f,"H2",{class:!0});var cqe=s(md);FF=n(cqe,"A",{id:!0,class:!0,href:!0});var Cct=s(FF);epe=n(Cct,"SPAN",{});var wct=s(epe);T(Ly.$$.fragment,wct),wct.forEach(t),Cct.forEach(t),RUo=i(cqe),ope=n(cqe,"SPAN",{});var Act=s(ope);BUo=r(Act,"AutoModelForAudioXVector"),Act.forEach(t),cqe.forEach(t),iPe=i(f),zo=n(f,"DIV",{class:!0});var Zs=s(zo);T(xy.$$.fragment,Zs),PUo=i(Zs),gd=n(Zs,"P",{});var UY=s(gd);IUo=r(UY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),RV=n(UY,"A",{href:!0});var yct=s(RV);qUo=r(yct,"from_pretrained()"),yct.forEach(t),NUo=r(UY," class method or the "),BV=n(UY,"A",{href:!0});var Lct=s(BV);jUo=r(Lct,"from_config()"),Lct.forEach(t),DUo=r(UY,` class
method.`),UY.forEach(t),GUo=i(Zs),$y=n(Zs,"P",{});var fqe=s($y);OUo=r(fqe,"This class cannot be instantiated directly using "),rpe=n(fqe,"CODE",{});var xct=s(rpe);VUo=r(xct,"__init__()"),xct.forEach(t),XUo=r(fqe," (throws an error)."),fqe.forEach(t),zUo=i(Zs),_t=n(Zs,"DIV",{class:!0});var cw=s(_t);T(ky.$$.fragment,cw),QUo=i(cw),tpe=n(cw,"P",{});var $ct=s(tpe);WUo=r($ct,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),$ct.forEach(t),HUo=i(cw),hd=n(cw,"P",{});var JY=s(hd);UUo=r(JY,`Note:
Loading a model from its configuration file does `),ape=n(JY,"STRONG",{});var kct=s(ape);JUo=r(kct,"not"),kct.forEach(t),YUo=r(JY,` load the model weights. It only affects the
model\u2019s configuration. Use `),PV=n(JY,"A",{href:!0});var Sct=s(PV);KUo=r(Sct,"from_pretrained()"),Sct.forEach(t),ZUo=r(JY," to load the model weights."),JY.forEach(t),eJo=i(cw),T(TF.$$.fragment,cw),cw.forEach(t),oJo=i(Zs),mo=n(Zs,"DIV",{class:!0});var ga=s(mo);T(Sy.$$.fragment,ga),rJo=i(ga),npe=n(ga,"P",{});var Rct=s(npe);tJo=r(Rct,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Rct.forEach(t),aJo=i(ga),Ga=n(ga,"P",{});var fw=s(Ga);nJo=r(fw,"The model class to instantiate is selected based on the "),spe=n(fw,"CODE",{});var Bct=s(spe);sJo=r(Bct,"model_type"),Bct.forEach(t),lJo=r(fw,` property of the config object (either
passed as an argument or loaded from `),lpe=n(fw,"CODE",{});var Pct=s(lpe);iJo=r(Pct,"pretrained_model_name_or_path"),Pct.forEach(t),dJo=r(fw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ipe=n(fw,"CODE",{});var Ict=s(ipe);cJo=r(Ict,"pretrained_model_name_or_path"),Ict.forEach(t),fJo=r(fw,":"),fw.forEach(t),mJo=i(ga),Oa=n(ga,"UL",{});var mw=s(Oa);MF=n(mw,"LI",{});var hxe=s(MF);dpe=n(hxe,"STRONG",{});var qct=s(dpe);gJo=r(qct,"data2vec-audio"),qct.forEach(t),hJo=r(hxe," \u2014 "),IV=n(hxe,"A",{href:!0});var Nct=s(IV);pJo=r(Nct,"Data2VecAudioForXVector"),Nct.forEach(t),uJo=r(hxe," (Data2VecAudio model)"),hxe.forEach(t),_Jo=i(mw),EF=n(mw,"LI",{});var pxe=s(EF);cpe=n(pxe,"STRONG",{});var jct=s(cpe);bJo=r(jct,"unispeech-sat"),jct.forEach(t),vJo=r(pxe," \u2014 "),qV=n(pxe,"A",{href:!0});var Dct=s(qV);FJo=r(Dct,"UniSpeechSatForXVector"),Dct.forEach(t),TJo=r(pxe," (UniSpeechSat model)"),pxe.forEach(t),MJo=i(mw),CF=n(mw,"LI",{});var uxe=s(CF);fpe=n(uxe,"STRONG",{});var Gct=s(fpe);EJo=r(Gct,"wav2vec2"),Gct.forEach(t),CJo=r(uxe," \u2014 "),NV=n(uxe,"A",{href:!0});var Oct=s(NV);wJo=r(Oct,"Wav2Vec2ForXVector"),Oct.forEach(t),AJo=r(uxe," (Wav2Vec2 model)"),uxe.forEach(t),yJo=i(mw),wF=n(mw,"LI",{});var _xe=s(wF);mpe=n(_xe,"STRONG",{});var Vct=s(mpe);LJo=r(Vct,"wavlm"),Vct.forEach(t),xJo=r(_xe," \u2014 "),jV=n(_xe,"A",{href:!0});var Xct=s(jV);$Jo=r(Xct,"WavLMForXVector"),Xct.forEach(t),kJo=r(_xe," (WavLM model)"),_xe.forEach(t),mw.forEach(t),SJo=i(ga),AF=n(ga,"P",{});var bxe=s(AF);RJo=r(bxe,"The model is set in evaluation mode by default using "),gpe=n(bxe,"CODE",{});var zct=s(gpe);BJo=r(zct,"model.eval()"),zct.forEach(t),PJo=r(bxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hpe=n(bxe,"CODE",{});var Qct=s(hpe);IJo=r(Qct,"model.train()"),Qct.forEach(t),bxe.forEach(t),qJo=i(ga),T(yF.$$.fragment,ga),ga.forEach(t),Zs.forEach(t),dPe=i(f),pd=n(f,"H2",{class:!0});var mqe=s(pd);LF=n(mqe,"A",{id:!0,class:!0,href:!0});var Wct=s(LF);ppe=n(Wct,"SPAN",{});var Hct=s(ppe);T(Ry.$$.fragment,Hct),Hct.forEach(t),Wct.forEach(t),NJo=i(mqe),upe=n(mqe,"SPAN",{});var Uct=s(upe);jJo=r(Uct,"AutoModelForMaskedImageModeling"),Uct.forEach(t),mqe.forEach(t),cPe=i(f),Qo=n(f,"DIV",{class:!0});var el=s(Qo);T(By.$$.fragment,el),DJo=i(el),ud=n(el,"P",{});var YY=s(ud);GJo=r(YY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),DV=n(YY,"A",{href:!0});var Jct=s(DV);OJo=r(Jct,"from_pretrained()"),Jct.forEach(t),VJo=r(YY," class method or the "),GV=n(YY,"A",{href:!0});var Yct=s(GV);XJo=r(Yct,"from_config()"),Yct.forEach(t),zJo=r(YY,` class
method.`),YY.forEach(t),QJo=i(el),Py=n(el,"P",{});var gqe=s(Py);WJo=r(gqe,"This class cannot be instantiated directly using "),_pe=n(gqe,"CODE",{});var Kct=s(_pe);HJo=r(Kct,"__init__()"),Kct.forEach(t),UJo=r(gqe," (throws an error)."),gqe.forEach(t),JJo=i(el),bt=n(el,"DIV",{class:!0});var gw=s(bt);T(Iy.$$.fragment,gw),YJo=i(gw),bpe=n(gw,"P",{});var Zct=s(bpe);KJo=r(Zct,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Zct.forEach(t),ZJo=i(gw),_d=n(gw,"P",{});var KY=s(_d);eYo=r(KY,`Note:
Loading a model from its configuration file does `),vpe=n(KY,"STRONG",{});var eft=s(vpe);oYo=r(eft,"not"),eft.forEach(t),rYo=r(KY,` load the model weights. It only affects the
model\u2019s configuration. Use `),OV=n(KY,"A",{href:!0});var oft=s(OV);tYo=r(oft,"from_pretrained()"),oft.forEach(t),aYo=r(KY," to load the model weights."),KY.forEach(t),nYo=i(gw),T(xF.$$.fragment,gw),gw.forEach(t),sYo=i(el),go=n(el,"DIV",{class:!0});var ha=s(go);T(qy.$$.fragment,ha),lYo=i(ha),Fpe=n(ha,"P",{});var rft=s(Fpe);iYo=r(rft,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),rft.forEach(t),dYo=i(ha),Va=n(ha,"P",{});var hw=s(Va);cYo=r(hw,"The model class to instantiate is selected based on the "),Tpe=n(hw,"CODE",{});var tft=s(Tpe);fYo=r(tft,"model_type"),tft.forEach(t),mYo=r(hw,` property of the config object (either
passed as an argument or loaded from `),Mpe=n(hw,"CODE",{});var aft=s(Mpe);gYo=r(aft,"pretrained_model_name_or_path"),aft.forEach(t),hYo=r(hw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Epe=n(hw,"CODE",{});var nft=s(Epe);pYo=r(nft,"pretrained_model_name_or_path"),nft.forEach(t),uYo=r(hw,":"),hw.forEach(t),_Yo=i(ha),bd=n(ha,"UL",{});var ZY=s(bd);$F=n(ZY,"LI",{});var vxe=s($F);Cpe=n(vxe,"STRONG",{});var sft=s(Cpe);bYo=r(sft,"deit"),sft.forEach(t),vYo=r(vxe," \u2014 "),VV=n(vxe,"A",{href:!0});var lft=s(VV);FYo=r(lft,"DeiTForMaskedImageModeling"),lft.forEach(t),TYo=r(vxe," (DeiT model)"),vxe.forEach(t),MYo=i(ZY),kF=n(ZY,"LI",{});var Fxe=s(kF);wpe=n(Fxe,"STRONG",{});var ift=s(wpe);EYo=r(ift,"swin"),ift.forEach(t),CYo=r(Fxe," \u2014 "),XV=n(Fxe,"A",{href:!0});var dft=s(XV);wYo=r(dft,"SwinForMaskedImageModeling"),dft.forEach(t),AYo=r(Fxe," (Swin model)"),Fxe.forEach(t),yYo=i(ZY),SF=n(ZY,"LI",{});var Txe=s(SF);Ape=n(Txe,"STRONG",{});var cft=s(Ape);LYo=r(cft,"vit"),cft.forEach(t),xYo=r(Txe," \u2014 "),zV=n(Txe,"A",{href:!0});var fft=s(zV);$Yo=r(fft,"ViTForMaskedImageModeling"),fft.forEach(t),kYo=r(Txe," (ViT model)"),Txe.forEach(t),ZY.forEach(t),SYo=i(ha),RF=n(ha,"P",{});var Mxe=s(RF);RYo=r(Mxe,"The model is set in evaluation mode by default using "),ype=n(Mxe,"CODE",{});var mft=s(ype);BYo=r(mft,"model.eval()"),mft.forEach(t),PYo=r(Mxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lpe=n(Mxe,"CODE",{});var gft=s(Lpe);IYo=r(gft,"model.train()"),gft.forEach(t),Mxe.forEach(t),qYo=i(ha),T(BF.$$.fragment,ha),ha.forEach(t),el.forEach(t),fPe=i(f),vd=n(f,"H2",{class:!0});var hqe=s(vd);PF=n(hqe,"A",{id:!0,class:!0,href:!0});var hft=s(PF);xpe=n(hft,"SPAN",{});var pft=s(xpe);T(Ny.$$.fragment,pft),pft.forEach(t),hft.forEach(t),NYo=i(hqe),$pe=n(hqe,"SPAN",{});var uft=s($pe);jYo=r(uft,"AutoModelForObjectDetection"),uft.forEach(t),hqe.forEach(t),mPe=i(f),Wo=n(f,"DIV",{class:!0});var ol=s(Wo);T(jy.$$.fragment,ol),DYo=i(ol),Fd=n(ol,"P",{});var eK=s(Fd);GYo=r(eK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),QV=n(eK,"A",{href:!0});var _ft=s(QV);OYo=r(_ft,"from_pretrained()"),_ft.forEach(t),VYo=r(eK," class method or the "),WV=n(eK,"A",{href:!0});var bft=s(WV);XYo=r(bft,"from_config()"),bft.forEach(t),zYo=r(eK,` class
method.`),eK.forEach(t),QYo=i(ol),Dy=n(ol,"P",{});var pqe=s(Dy);WYo=r(pqe,"This class cannot be instantiated directly using "),kpe=n(pqe,"CODE",{});var vft=s(kpe);HYo=r(vft,"__init__()"),vft.forEach(t),UYo=r(pqe," (throws an error)."),pqe.forEach(t),JYo=i(ol),vt=n(ol,"DIV",{class:!0});var pw=s(vt);T(Gy.$$.fragment,pw),YYo=i(pw),Spe=n(pw,"P",{});var Fft=s(Spe);KYo=r(Fft,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Fft.forEach(t),ZYo=i(pw),Td=n(pw,"P",{});var oK=s(Td);eKo=r(oK,`Note:
Loading a model from its configuration file does `),Rpe=n(oK,"STRONG",{});var Tft=s(Rpe);oKo=r(Tft,"not"),Tft.forEach(t),rKo=r(oK,` load the model weights. It only affects the
model\u2019s configuration. Use `),HV=n(oK,"A",{href:!0});var Mft=s(HV);tKo=r(Mft,"from_pretrained()"),Mft.forEach(t),aKo=r(oK," to load the model weights."),oK.forEach(t),nKo=i(pw),T(IF.$$.fragment,pw),pw.forEach(t),sKo=i(ol),ho=n(ol,"DIV",{class:!0});var pa=s(ho);T(Oy.$$.fragment,pa),lKo=i(pa),Bpe=n(pa,"P",{});var Eft=s(Bpe);iKo=r(Eft,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Eft.forEach(t),dKo=i(pa),Xa=n(pa,"P",{});var uw=s(Xa);cKo=r(uw,"The model class to instantiate is selected based on the "),Ppe=n(uw,"CODE",{});var Cft=s(Ppe);fKo=r(Cft,"model_type"),Cft.forEach(t),mKo=r(uw,` property of the config object (either
passed as an argument or loaded from `),Ipe=n(uw,"CODE",{});var wft=s(Ipe);gKo=r(wft,"pretrained_model_name_or_path"),wft.forEach(t),hKo=r(uw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qpe=n(uw,"CODE",{});var Aft=s(qpe);pKo=r(Aft,"pretrained_model_name_or_path"),Aft.forEach(t),uKo=r(uw,":"),uw.forEach(t),_Ko=i(pa),Vy=n(pa,"UL",{});var uqe=s(Vy);qF=n(uqe,"LI",{});var Exe=s(qF);Npe=n(Exe,"STRONG",{});var yft=s(Npe);bKo=r(yft,"detr"),yft.forEach(t),vKo=r(Exe," \u2014 "),UV=n(Exe,"A",{href:!0});var Lft=s(UV);FKo=r(Lft,"DetrForObjectDetection"),Lft.forEach(t),TKo=r(Exe," (DETR model)"),Exe.forEach(t),MKo=i(uqe),NF=n(uqe,"LI",{});var Cxe=s(NF);jpe=n(Cxe,"STRONG",{});var xft=s(jpe);EKo=r(xft,"yolos"),xft.forEach(t),CKo=r(Cxe," \u2014 "),JV=n(Cxe,"A",{href:!0});var $ft=s(JV);wKo=r($ft,"YolosForObjectDetection"),$ft.forEach(t),AKo=r(Cxe," (YOLOS model)"),Cxe.forEach(t),uqe.forEach(t),yKo=i(pa),jF=n(pa,"P",{});var wxe=s(jF);LKo=r(wxe,"The model is set in evaluation mode by default using "),Dpe=n(wxe,"CODE",{});var kft=s(Dpe);xKo=r(kft,"model.eval()"),kft.forEach(t),$Ko=r(wxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gpe=n(wxe,"CODE",{});var Sft=s(Gpe);kKo=r(Sft,"model.train()"),Sft.forEach(t),wxe.forEach(t),SKo=i(pa),T(DF.$$.fragment,pa),pa.forEach(t),ol.forEach(t),gPe=i(f),Md=n(f,"H2",{class:!0});var _qe=s(Md);GF=n(_qe,"A",{id:!0,class:!0,href:!0});var Rft=s(GF);Ope=n(Rft,"SPAN",{});var Bft=s(Ope);T(Xy.$$.fragment,Bft),Bft.forEach(t),Rft.forEach(t),RKo=i(_qe),Vpe=n(_qe,"SPAN",{});var Pft=s(Vpe);BKo=r(Pft,"AutoModelForImageSegmentation"),Pft.forEach(t),_qe.forEach(t),hPe=i(f),Ho=n(f,"DIV",{class:!0});var rl=s(Ho);T(zy.$$.fragment,rl),PKo=i(rl),Ed=n(rl,"P",{});var rK=s(Ed);IKo=r(rK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),YV=n(rK,"A",{href:!0});var Ift=s(YV);qKo=r(Ift,"from_pretrained()"),Ift.forEach(t),NKo=r(rK," class method or the "),KV=n(rK,"A",{href:!0});var qft=s(KV);jKo=r(qft,"from_config()"),qft.forEach(t),DKo=r(rK,` class
method.`),rK.forEach(t),GKo=i(rl),Qy=n(rl,"P",{});var bqe=s(Qy);OKo=r(bqe,"This class cannot be instantiated directly using "),Xpe=n(bqe,"CODE",{});var Nft=s(Xpe);VKo=r(Nft,"__init__()"),Nft.forEach(t),XKo=r(bqe," (throws an error)."),bqe.forEach(t),zKo=i(rl),Ft=n(rl,"DIV",{class:!0});var _w=s(Ft);T(Wy.$$.fragment,_w),QKo=i(_w),zpe=n(_w,"P",{});var jft=s(zpe);WKo=r(jft,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),jft.forEach(t),HKo=i(_w),Cd=n(_w,"P",{});var tK=s(Cd);UKo=r(tK,`Note:
Loading a model from its configuration file does `),Qpe=n(tK,"STRONG",{});var Dft=s(Qpe);JKo=r(Dft,"not"),Dft.forEach(t),YKo=r(tK,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZV=n(tK,"A",{href:!0});var Gft=s(ZV);KKo=r(Gft,"from_pretrained()"),Gft.forEach(t),ZKo=r(tK," to load the model weights."),tK.forEach(t),eZo=i(_w),T(OF.$$.fragment,_w),_w.forEach(t),oZo=i(rl),po=n(rl,"DIV",{class:!0});var ua=s(po);T(Hy.$$.fragment,ua),rZo=i(ua),Wpe=n(ua,"P",{});var Oft=s(Wpe);tZo=r(Oft,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Oft.forEach(t),aZo=i(ua),za=n(ua,"P",{});var bw=s(za);nZo=r(bw,"The model class to instantiate is selected based on the "),Hpe=n(bw,"CODE",{});var Vft=s(Hpe);sZo=r(Vft,"model_type"),Vft.forEach(t),lZo=r(bw,` property of the config object (either
passed as an argument or loaded from `),Upe=n(bw,"CODE",{});var Xft=s(Upe);iZo=r(Xft,"pretrained_model_name_or_path"),Xft.forEach(t),dZo=r(bw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jpe=n(bw,"CODE",{});var zft=s(Jpe);cZo=r(zft,"pretrained_model_name_or_path"),zft.forEach(t),fZo=r(bw,":"),bw.forEach(t),mZo=i(ua),Ype=n(ua,"UL",{});var Qft=s(Ype);VF=n(Qft,"LI",{});var Axe=s(VF);Kpe=n(Axe,"STRONG",{});var Wft=s(Kpe);gZo=r(Wft,"detr"),Wft.forEach(t),hZo=r(Axe," \u2014 "),eX=n(Axe,"A",{href:!0});var Hft=s(eX);pZo=r(Hft,"DetrForSegmentation"),Hft.forEach(t),uZo=r(Axe," (DETR model)"),Axe.forEach(t),Qft.forEach(t),_Zo=i(ua),XF=n(ua,"P",{});var yxe=s(XF);bZo=r(yxe,"The model is set in evaluation mode by default using "),Zpe=n(yxe,"CODE",{});var Uft=s(Zpe);vZo=r(Uft,"model.eval()"),Uft.forEach(t),FZo=r(yxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eue=n(yxe,"CODE",{});var Jft=s(eue);TZo=r(Jft,"model.train()"),Jft.forEach(t),yxe.forEach(t),MZo=i(ua),T(zF.$$.fragment,ua),ua.forEach(t),rl.forEach(t),pPe=i(f),wd=n(f,"H2",{class:!0});var vqe=s(wd);QF=n(vqe,"A",{id:!0,class:!0,href:!0});var Yft=s(QF);oue=n(Yft,"SPAN",{});var Kft=s(oue);T(Uy.$$.fragment,Kft),Kft.forEach(t),Yft.forEach(t),EZo=i(vqe),rue=n(vqe,"SPAN",{});var Zft=s(rue);CZo=r(Zft,"AutoModelForSemanticSegmentation"),Zft.forEach(t),vqe.forEach(t),uPe=i(f),Uo=n(f,"DIV",{class:!0});var tl=s(Uo);T(Jy.$$.fragment,tl),wZo=i(tl),Ad=n(tl,"P",{});var aK=s(Ad);AZo=r(aK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),oX=n(aK,"A",{href:!0});var emt=s(oX);yZo=r(emt,"from_pretrained()"),emt.forEach(t),LZo=r(aK," class method or the "),rX=n(aK,"A",{href:!0});var omt=s(rX);xZo=r(omt,"from_config()"),omt.forEach(t),$Zo=r(aK,` class
method.`),aK.forEach(t),kZo=i(tl),Yy=n(tl,"P",{});var Fqe=s(Yy);SZo=r(Fqe,"This class cannot be instantiated directly using "),tue=n(Fqe,"CODE",{});var rmt=s(tue);RZo=r(rmt,"__init__()"),rmt.forEach(t),BZo=r(Fqe," (throws an error)."),Fqe.forEach(t),PZo=i(tl),Tt=n(tl,"DIV",{class:!0});var vw=s(Tt);T(Ky.$$.fragment,vw),IZo=i(vw),aue=n(vw,"P",{});var tmt=s(aue);qZo=r(tmt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),tmt.forEach(t),NZo=i(vw),yd=n(vw,"P",{});var nK=s(yd);jZo=r(nK,`Note:
Loading a model from its configuration file does `),nue=n(nK,"STRONG",{});var amt=s(nue);DZo=r(amt,"not"),amt.forEach(t),GZo=r(nK,` load the model weights. It only affects the
model\u2019s configuration. Use `),tX=n(nK,"A",{href:!0});var nmt=s(tX);OZo=r(nmt,"from_pretrained()"),nmt.forEach(t),VZo=r(nK," to load the model weights."),nK.forEach(t),XZo=i(vw),T(WF.$$.fragment,vw),vw.forEach(t),zZo=i(tl),uo=n(tl,"DIV",{class:!0});var _a=s(uo);T(Zy.$$.fragment,_a),QZo=i(_a),sue=n(_a,"P",{});var smt=s(sue);WZo=r(smt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),smt.forEach(t),HZo=i(_a),Qa=n(_a,"P",{});var Fw=s(Qa);UZo=r(Fw,"The model class to instantiate is selected based on the "),lue=n(Fw,"CODE",{});var lmt=s(lue);JZo=r(lmt,"model_type"),lmt.forEach(t),YZo=r(Fw,` property of the config object (either
passed as an argument or loaded from `),iue=n(Fw,"CODE",{});var imt=s(iue);KZo=r(imt,"pretrained_model_name_or_path"),imt.forEach(t),ZZo=r(Fw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),due=n(Fw,"CODE",{});var dmt=s(due);eer=r(dmt,"pretrained_model_name_or_path"),dmt.forEach(t),oer=r(Fw,":"),Fw.forEach(t),rer=i(_a),Wa=n(_a,"UL",{});var Tw=s(Wa);HF=n(Tw,"LI",{});var Lxe=s(HF);cue=n(Lxe,"STRONG",{});var cmt=s(cue);ter=r(cmt,"beit"),cmt.forEach(t),aer=r(Lxe," \u2014 "),aX=n(Lxe,"A",{href:!0});var fmt=s(aX);ner=r(fmt,"BeitForSemanticSegmentation"),fmt.forEach(t),ser=r(Lxe," (BEiT model)"),Lxe.forEach(t),ler=i(Tw),UF=n(Tw,"LI",{});var xxe=s(UF);fue=n(xxe,"STRONG",{});var mmt=s(fue);ier=r(mmt,"data2vec-vision"),mmt.forEach(t),der=r(xxe," \u2014 "),nX=n(xxe,"A",{href:!0});var gmt=s(nX);cer=r(gmt,"Data2VecVisionForSemanticSegmentation"),gmt.forEach(t),fer=r(xxe," (Data2VecVision model)"),xxe.forEach(t),mer=i(Tw),JF=n(Tw,"LI",{});var $xe=s(JF);mue=n($xe,"STRONG",{});var hmt=s(mue);ger=r(hmt,"dpt"),hmt.forEach(t),her=r($xe," \u2014 "),sX=n($xe,"A",{href:!0});var pmt=s(sX);per=r(pmt,"DPTForSemanticSegmentation"),pmt.forEach(t),uer=r($xe," (DPT model)"),$xe.forEach(t),_er=i(Tw),YF=n(Tw,"LI",{});var kxe=s(YF);gue=n(kxe,"STRONG",{});var umt=s(gue);ber=r(umt,"segformer"),umt.forEach(t),ver=r(kxe," \u2014 "),lX=n(kxe,"A",{href:!0});var _mt=s(lX);Fer=r(_mt,"SegformerForSemanticSegmentation"),_mt.forEach(t),Ter=r(kxe," (SegFormer model)"),kxe.forEach(t),Tw.forEach(t),Mer=i(_a),KF=n(_a,"P",{});var Sxe=s(KF);Eer=r(Sxe,"The model is set in evaluation mode by default using "),hue=n(Sxe,"CODE",{});var bmt=s(hue);Cer=r(bmt,"model.eval()"),bmt.forEach(t),wer=r(Sxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pue=n(Sxe,"CODE",{});var vmt=s(pue);Aer=r(vmt,"model.train()"),vmt.forEach(t),Sxe.forEach(t),yer=i(_a),T(ZF.$$.fragment,_a),_a.forEach(t),tl.forEach(t),_Pe=i(f),Ld=n(f,"H2",{class:!0});var Tqe=s(Ld);eT=n(Tqe,"A",{id:!0,class:!0,href:!0});var Fmt=s(eT);uue=n(Fmt,"SPAN",{});var Tmt=s(uue);T(eL.$$.fragment,Tmt),Tmt.forEach(t),Fmt.forEach(t),Ler=i(Tqe),_ue=n(Tqe,"SPAN",{});var Mmt=s(_ue);xer=r(Mmt,"AutoModelForInstanceSegmentation"),Mmt.forEach(t),Tqe.forEach(t),bPe=i(f),Jo=n(f,"DIV",{class:!0});var al=s(Jo);T(oL.$$.fragment,al),$er=i(al),xd=n(al,"P",{});var sK=s(xd);ker=r(sK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),iX=n(sK,"A",{href:!0});var Emt=s(iX);Ser=r(Emt,"from_pretrained()"),Emt.forEach(t),Rer=r(sK," class method or the "),dX=n(sK,"A",{href:!0});var Cmt=s(dX);Ber=r(Cmt,"from_config()"),Cmt.forEach(t),Per=r(sK,` class
method.`),sK.forEach(t),Ier=i(al),rL=n(al,"P",{});var Mqe=s(rL);qer=r(Mqe,"This class cannot be instantiated directly using "),bue=n(Mqe,"CODE",{});var wmt=s(bue);Ner=r(wmt,"__init__()"),wmt.forEach(t),jer=r(Mqe," (throws an error)."),Mqe.forEach(t),Der=i(al),Mt=n(al,"DIV",{class:!0});var Mw=s(Mt);T(tL.$$.fragment,Mw),Ger=i(Mw),vue=n(Mw,"P",{});var Amt=s(vue);Oer=r(Amt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Amt.forEach(t),Ver=i(Mw),$d=n(Mw,"P",{});var lK=s($d);Xer=r(lK,`Note:
Loading a model from its configuration file does `),Fue=n(lK,"STRONG",{});var ymt=s(Fue);zer=r(ymt,"not"),ymt.forEach(t),Qer=r(lK,` load the model weights. It only affects the
model\u2019s configuration. Use `),cX=n(lK,"A",{href:!0});var Lmt=s(cX);Wer=r(Lmt,"from_pretrained()"),Lmt.forEach(t),Her=r(lK," to load the model weights."),lK.forEach(t),Uer=i(Mw),T(oT.$$.fragment,Mw),Mw.forEach(t),Jer=i(al),_o=n(al,"DIV",{class:!0});var ba=s(_o);T(aL.$$.fragment,ba),Yer=i(ba),Tue=n(ba,"P",{});var xmt=s(Tue);Ker=r(xmt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),xmt.forEach(t),Zer=i(ba),Ha=n(ba,"P",{});var Ew=s(Ha);eor=r(Ew,"The model class to instantiate is selected based on the "),Mue=n(Ew,"CODE",{});var $mt=s(Mue);oor=r($mt,"model_type"),$mt.forEach(t),ror=r(Ew,` property of the config object (either
passed as an argument or loaded from `),Eue=n(Ew,"CODE",{});var kmt=s(Eue);tor=r(kmt,"pretrained_model_name_or_path"),kmt.forEach(t),aor=r(Ew,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cue=n(Ew,"CODE",{});var Smt=s(Cue);nor=r(Smt,"pretrained_model_name_or_path"),Smt.forEach(t),sor=r(Ew,":"),Ew.forEach(t),lor=i(ba),wue=n(ba,"UL",{});var Rmt=s(wue);rT=n(Rmt,"LI",{});var Rxe=s(rT);Aue=n(Rxe,"STRONG",{});var Bmt=s(Aue);ior=r(Bmt,"maskformer"),Bmt.forEach(t),dor=r(Rxe," \u2014 "),fX=n(Rxe,"A",{href:!0});var Pmt=s(fX);cor=r(Pmt,"MaskFormerForInstanceSegmentation"),Pmt.forEach(t),mor=r(Rxe," (MaskFormer model)"),Rxe.forEach(t),Rmt.forEach(t),gor=i(ba),tT=n(ba,"P",{});var Bxe=s(tT);hor=r(Bxe,"The model is set in evaluation mode by default using "),yue=n(Bxe,"CODE",{});var Imt=s(yue);por=r(Imt,"model.eval()"),Imt.forEach(t),uor=r(Bxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lue=n(Bxe,"CODE",{});var qmt=s(Lue);_or=r(qmt,"model.train()"),qmt.forEach(t),Bxe.forEach(t),bor=i(ba),T(aT.$$.fragment,ba),ba.forEach(t),al.forEach(t),vPe=i(f),kd=n(f,"H2",{class:!0});var Eqe=s(kd);nT=n(Eqe,"A",{id:!0,class:!0,href:!0});var Nmt=s(nT);xue=n(Nmt,"SPAN",{});var jmt=s(xue);T(nL.$$.fragment,jmt),jmt.forEach(t),Nmt.forEach(t),vor=i(Eqe),$ue=n(Eqe,"SPAN",{});var Dmt=s($ue);For=r(Dmt,"TFAutoModel"),Dmt.forEach(t),Eqe.forEach(t),FPe=i(f),Yo=n(f,"DIV",{class:!0});var nl=s(Yo);T(sL.$$.fragment,nl),Tor=i(nl),Sd=n(nl,"P",{});var iK=s(Sd);Mor=r(iK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),mX=n(iK,"A",{href:!0});var Gmt=s(mX);Eor=r(Gmt,"from_pretrained()"),Gmt.forEach(t),Cor=r(iK," class method or the "),gX=n(iK,"A",{href:!0});var Omt=s(gX);wor=r(Omt,"from_config()"),Omt.forEach(t),Aor=r(iK,` class
method.`),iK.forEach(t),yor=i(nl),lL=n(nl,"P",{});var Cqe=s(lL);Lor=r(Cqe,"This class cannot be instantiated directly using "),kue=n(Cqe,"CODE",{});var Vmt=s(kue);xor=r(Vmt,"__init__()"),Vmt.forEach(t),$or=r(Cqe," (throws an error)."),Cqe.forEach(t),kor=i(nl),Et=n(nl,"DIV",{class:!0});var Cw=s(Et);T(iL.$$.fragment,Cw),Sor=i(Cw),Sue=n(Cw,"P",{});var Xmt=s(Sue);Ror=r(Xmt,"Instantiates one of the base model classes of the library from a configuration."),Xmt.forEach(t),Bor=i(Cw),Rd=n(Cw,"P",{});var dK=s(Rd);Por=r(dK,`Note:
Loading a model from its configuration file does `),Rue=n(dK,"STRONG",{});var zmt=s(Rue);Ior=r(zmt,"not"),zmt.forEach(t),qor=r(dK,` load the model weights. It only affects the
model\u2019s configuration. Use `),hX=n(dK,"A",{href:!0});var Qmt=s(hX);Nor=r(Qmt,"from_pretrained()"),Qmt.forEach(t),jor=r(dK," to load the model weights."),dK.forEach(t),Dor=i(Cw),T(sT.$$.fragment,Cw),Cw.forEach(t),Gor=i(nl),Cr=n(nl,"DIV",{class:!0});var sl=s(Cr);T(dL.$$.fragment,sl),Oor=i(sl),Bue=n(sl,"P",{});var Wmt=s(Bue);Vor=r(Wmt,"Instantiate one of the base model classes of the library from a pretrained model."),Wmt.forEach(t),Xor=i(sl),Ua=n(sl,"P",{});var ww=s(Ua);zor=r(ww,"The model class to instantiate is selected based on the "),Pue=n(ww,"CODE",{});var Hmt=s(Pue);Qor=r(Hmt,"model_type"),Hmt.forEach(t),Wor=r(ww,` property of the config object (either
passed as an argument or loaded from `),Iue=n(ww,"CODE",{});var Umt=s(Iue);Hor=r(Umt,"pretrained_model_name_or_path"),Umt.forEach(t),Uor=r(ww,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),que=n(ww,"CODE",{});var Jmt=s(que);Jor=r(Jmt,"pretrained_model_name_or_path"),Jmt.forEach(t),Yor=r(ww,":"),ww.forEach(t),Kor=i(sl),j=n(sl,"UL",{});var D=s(j);lT=n(D,"LI",{});var Pxe=s(lT);Nue=n(Pxe,"STRONG",{});var Ymt=s(Nue);Zor=r(Ymt,"albert"),Ymt.forEach(t),err=r(Pxe," \u2014 "),pX=n(Pxe,"A",{href:!0});var Kmt=s(pX);orr=r(Kmt,"TFAlbertModel"),Kmt.forEach(t),rrr=r(Pxe," (ALBERT model)"),Pxe.forEach(t),trr=i(D),iT=n(D,"LI",{});var Ixe=s(iT);jue=n(Ixe,"STRONG",{});var Zmt=s(jue);arr=r(Zmt,"bart"),Zmt.forEach(t),nrr=r(Ixe," \u2014 "),uX=n(Ixe,"A",{href:!0});var egt=s(uX);srr=r(egt,"TFBartModel"),egt.forEach(t),lrr=r(Ixe," (BART model)"),Ixe.forEach(t),irr=i(D),dT=n(D,"LI",{});var qxe=s(dT);Due=n(qxe,"STRONG",{});var ogt=s(Due);drr=r(ogt,"bert"),ogt.forEach(t),crr=r(qxe," \u2014 "),_X=n(qxe,"A",{href:!0});var rgt=s(_X);frr=r(rgt,"TFBertModel"),rgt.forEach(t),mrr=r(qxe," (BERT model)"),qxe.forEach(t),grr=i(D),cT=n(D,"LI",{});var Nxe=s(cT);Gue=n(Nxe,"STRONG",{});var tgt=s(Gue);hrr=r(tgt,"blenderbot"),tgt.forEach(t),prr=r(Nxe," \u2014 "),bX=n(Nxe,"A",{href:!0});var agt=s(bX);urr=r(agt,"TFBlenderbotModel"),agt.forEach(t),_rr=r(Nxe," (Blenderbot model)"),Nxe.forEach(t),brr=i(D),fT=n(D,"LI",{});var jxe=s(fT);Oue=n(jxe,"STRONG",{});var ngt=s(Oue);vrr=r(ngt,"blenderbot-small"),ngt.forEach(t),Frr=r(jxe," \u2014 "),vX=n(jxe,"A",{href:!0});var sgt=s(vX);Trr=r(sgt,"TFBlenderbotSmallModel"),sgt.forEach(t),Mrr=r(jxe," (BlenderbotSmall model)"),jxe.forEach(t),Err=i(D),mT=n(D,"LI",{});var Dxe=s(mT);Vue=n(Dxe,"STRONG",{});var lgt=s(Vue);Crr=r(lgt,"camembert"),lgt.forEach(t),wrr=r(Dxe," \u2014 "),FX=n(Dxe,"A",{href:!0});var igt=s(FX);Arr=r(igt,"TFCamembertModel"),igt.forEach(t),yrr=r(Dxe," (CamemBERT model)"),Dxe.forEach(t),Lrr=i(D),gT=n(D,"LI",{});var Gxe=s(gT);Xue=n(Gxe,"STRONG",{});var dgt=s(Xue);xrr=r(dgt,"clip"),dgt.forEach(t),$rr=r(Gxe," \u2014 "),TX=n(Gxe,"A",{href:!0});var cgt=s(TX);krr=r(cgt,"TFCLIPModel"),cgt.forEach(t),Srr=r(Gxe," (CLIP model)"),Gxe.forEach(t),Rrr=i(D),hT=n(D,"LI",{});var Oxe=s(hT);zue=n(Oxe,"STRONG",{});var fgt=s(zue);Brr=r(fgt,"convbert"),fgt.forEach(t),Prr=r(Oxe," \u2014 "),MX=n(Oxe,"A",{href:!0});var mgt=s(MX);Irr=r(mgt,"TFConvBertModel"),mgt.forEach(t),qrr=r(Oxe," (ConvBERT model)"),Oxe.forEach(t),Nrr=i(D),pT=n(D,"LI",{});var Vxe=s(pT);Que=n(Vxe,"STRONG",{});var ggt=s(Que);jrr=r(ggt,"convnext"),ggt.forEach(t),Drr=r(Vxe," \u2014 "),EX=n(Vxe,"A",{href:!0});var hgt=s(EX);Grr=r(hgt,"TFConvNextModel"),hgt.forEach(t),Orr=r(Vxe," (ConvNext model)"),Vxe.forEach(t),Vrr=i(D),uT=n(D,"LI",{});var Xxe=s(uT);Wue=n(Xxe,"STRONG",{});var pgt=s(Wue);Xrr=r(pgt,"ctrl"),pgt.forEach(t),zrr=r(Xxe," \u2014 "),CX=n(Xxe,"A",{href:!0});var ugt=s(CX);Qrr=r(ugt,"TFCTRLModel"),ugt.forEach(t),Wrr=r(Xxe," (CTRL model)"),Xxe.forEach(t),Hrr=i(D),_T=n(D,"LI",{});var zxe=s(_T);Hue=n(zxe,"STRONG",{});var _gt=s(Hue);Urr=r(_gt,"data2vec-vision"),_gt.forEach(t),Jrr=r(zxe," \u2014 "),wX=n(zxe,"A",{href:!0});var bgt=s(wX);Yrr=r(bgt,"TFData2VecVisionModel"),bgt.forEach(t),Krr=r(zxe," (Data2VecVision model)"),zxe.forEach(t),Zrr=i(D),bT=n(D,"LI",{});var Qxe=s(bT);Uue=n(Qxe,"STRONG",{});var vgt=s(Uue);etr=r(vgt,"deberta"),vgt.forEach(t),otr=r(Qxe," \u2014 "),AX=n(Qxe,"A",{href:!0});var Fgt=s(AX);rtr=r(Fgt,"TFDebertaModel"),Fgt.forEach(t),ttr=r(Qxe," (DeBERTa model)"),Qxe.forEach(t),atr=i(D),vT=n(D,"LI",{});var Wxe=s(vT);Jue=n(Wxe,"STRONG",{});var Tgt=s(Jue);ntr=r(Tgt,"deberta-v2"),Tgt.forEach(t),str=r(Wxe," \u2014 "),yX=n(Wxe,"A",{href:!0});var Mgt=s(yX);ltr=r(Mgt,"TFDebertaV2Model"),Mgt.forEach(t),itr=r(Wxe," (DeBERTa-v2 model)"),Wxe.forEach(t),dtr=i(D),FT=n(D,"LI",{});var Hxe=s(FT);Yue=n(Hxe,"STRONG",{});var Egt=s(Yue);ctr=r(Egt,"distilbert"),Egt.forEach(t),ftr=r(Hxe," \u2014 "),LX=n(Hxe,"A",{href:!0});var Cgt=s(LX);mtr=r(Cgt,"TFDistilBertModel"),Cgt.forEach(t),gtr=r(Hxe," (DistilBERT model)"),Hxe.forEach(t),htr=i(D),TT=n(D,"LI",{});var Uxe=s(TT);Kue=n(Uxe,"STRONG",{});var wgt=s(Kue);ptr=r(wgt,"dpr"),wgt.forEach(t),utr=r(Uxe," \u2014 "),xX=n(Uxe,"A",{href:!0});var Agt=s(xX);_tr=r(Agt,"TFDPRQuestionEncoder"),Agt.forEach(t),btr=r(Uxe," (DPR model)"),Uxe.forEach(t),vtr=i(D),MT=n(D,"LI",{});var Jxe=s(MT);Zue=n(Jxe,"STRONG",{});var ygt=s(Zue);Ftr=r(ygt,"electra"),ygt.forEach(t),Ttr=r(Jxe," \u2014 "),$X=n(Jxe,"A",{href:!0});var Lgt=s($X);Mtr=r(Lgt,"TFElectraModel"),Lgt.forEach(t),Etr=r(Jxe," (ELECTRA model)"),Jxe.forEach(t),Ctr=i(D),ET=n(D,"LI",{});var Yxe=s(ET);e_e=n(Yxe,"STRONG",{});var xgt=s(e_e);wtr=r(xgt,"flaubert"),xgt.forEach(t),Atr=r(Yxe," \u2014 "),kX=n(Yxe,"A",{href:!0});var $gt=s(kX);ytr=r($gt,"TFFlaubertModel"),$gt.forEach(t),Ltr=r(Yxe," (FlauBERT model)"),Yxe.forEach(t),xtr=i(D),$s=n(D,"LI",{});var B9=s($s);o_e=n(B9,"STRONG",{});var kgt=s(o_e);$tr=r(kgt,"funnel"),kgt.forEach(t),ktr=r(B9," \u2014 "),SX=n(B9,"A",{href:!0});var Sgt=s(SX);Str=r(Sgt,"TFFunnelModel"),Sgt.forEach(t),Rtr=r(B9," or "),RX=n(B9,"A",{href:!0});var Rgt=s(RX);Btr=r(Rgt,"TFFunnelBaseModel"),Rgt.forEach(t),Ptr=r(B9," (Funnel Transformer model)"),B9.forEach(t),Itr=i(D),CT=n(D,"LI",{});var Kxe=s(CT);r_e=n(Kxe,"STRONG",{});var Bgt=s(r_e);qtr=r(Bgt,"gpt2"),Bgt.forEach(t),Ntr=r(Kxe," \u2014 "),BX=n(Kxe,"A",{href:!0});var Pgt=s(BX);jtr=r(Pgt,"TFGPT2Model"),Pgt.forEach(t),Dtr=r(Kxe," (OpenAI GPT-2 model)"),Kxe.forEach(t),Gtr=i(D),wT=n(D,"LI",{});var Zxe=s(wT);t_e=n(Zxe,"STRONG",{});var Igt=s(t_e);Otr=r(Igt,"gptj"),Igt.forEach(t),Vtr=r(Zxe," \u2014 "),PX=n(Zxe,"A",{href:!0});var qgt=s(PX);Xtr=r(qgt,"TFGPTJModel"),qgt.forEach(t),ztr=r(Zxe," (GPT-J model)"),Zxe.forEach(t),Qtr=i(D),AT=n(D,"LI",{});var e9e=s(AT);a_e=n(e9e,"STRONG",{});var Ngt=s(a_e);Wtr=r(Ngt,"hubert"),Ngt.forEach(t),Htr=r(e9e," \u2014 "),IX=n(e9e,"A",{href:!0});var jgt=s(IX);Utr=r(jgt,"TFHubertModel"),jgt.forEach(t),Jtr=r(e9e," (Hubert model)"),e9e.forEach(t),Ytr=i(D),yT=n(D,"LI",{});var o9e=s(yT);n_e=n(o9e,"STRONG",{});var Dgt=s(n_e);Ktr=r(Dgt,"layoutlm"),Dgt.forEach(t),Ztr=r(o9e," \u2014 "),qX=n(o9e,"A",{href:!0});var Ggt=s(qX);ear=r(Ggt,"TFLayoutLMModel"),Ggt.forEach(t),oar=r(o9e," (LayoutLM model)"),o9e.forEach(t),rar=i(D),LT=n(D,"LI",{});var r9e=s(LT);s_e=n(r9e,"STRONG",{});var Ogt=s(s_e);tar=r(Ogt,"led"),Ogt.forEach(t),aar=r(r9e," \u2014 "),NX=n(r9e,"A",{href:!0});var Vgt=s(NX);nar=r(Vgt,"TFLEDModel"),Vgt.forEach(t),sar=r(r9e," (LED model)"),r9e.forEach(t),lar=i(D),xT=n(D,"LI",{});var t9e=s(xT);l_e=n(t9e,"STRONG",{});var Xgt=s(l_e);iar=r(Xgt,"longformer"),Xgt.forEach(t),dar=r(t9e," \u2014 "),jX=n(t9e,"A",{href:!0});var zgt=s(jX);car=r(zgt,"TFLongformerModel"),zgt.forEach(t),far=r(t9e," (Longformer model)"),t9e.forEach(t),mar=i(D),$T=n(D,"LI",{});var a9e=s($T);i_e=n(a9e,"STRONG",{});var Qgt=s(i_e);gar=r(Qgt,"lxmert"),Qgt.forEach(t),har=r(a9e," \u2014 "),DX=n(a9e,"A",{href:!0});var Wgt=s(DX);par=r(Wgt,"TFLxmertModel"),Wgt.forEach(t),uar=r(a9e," (LXMERT model)"),a9e.forEach(t),_ar=i(D),kT=n(D,"LI",{});var n9e=s(kT);d_e=n(n9e,"STRONG",{});var Hgt=s(d_e);bar=r(Hgt,"marian"),Hgt.forEach(t),Far=r(n9e," \u2014 "),GX=n(n9e,"A",{href:!0});var Ugt=s(GX);Tar=r(Ugt,"TFMarianModel"),Ugt.forEach(t),Mar=r(n9e," (Marian model)"),n9e.forEach(t),Ear=i(D),ST=n(D,"LI",{});var s9e=s(ST);c_e=n(s9e,"STRONG",{});var Jgt=s(c_e);Car=r(Jgt,"mbart"),Jgt.forEach(t),war=r(s9e," \u2014 "),OX=n(s9e,"A",{href:!0});var Ygt=s(OX);Aar=r(Ygt,"TFMBartModel"),Ygt.forEach(t),yar=r(s9e," (mBART model)"),s9e.forEach(t),Lar=i(D),RT=n(D,"LI",{});var l9e=s(RT);f_e=n(l9e,"STRONG",{});var Kgt=s(f_e);xar=r(Kgt,"mobilebert"),Kgt.forEach(t),$ar=r(l9e," \u2014 "),VX=n(l9e,"A",{href:!0});var Zgt=s(VX);kar=r(Zgt,"TFMobileBertModel"),Zgt.forEach(t),Sar=r(l9e," (MobileBERT model)"),l9e.forEach(t),Rar=i(D),BT=n(D,"LI",{});var i9e=s(BT);m_e=n(i9e,"STRONG",{});var eht=s(m_e);Bar=r(eht,"mpnet"),eht.forEach(t),Par=r(i9e," \u2014 "),XX=n(i9e,"A",{href:!0});var oht=s(XX);Iar=r(oht,"TFMPNetModel"),oht.forEach(t),qar=r(i9e," (MPNet model)"),i9e.forEach(t),Nar=i(D),PT=n(D,"LI",{});var d9e=s(PT);g_e=n(d9e,"STRONG",{});var rht=s(g_e);jar=r(rht,"mt5"),rht.forEach(t),Dar=r(d9e," \u2014 "),zX=n(d9e,"A",{href:!0});var tht=s(zX);Gar=r(tht,"TFMT5Model"),tht.forEach(t),Oar=r(d9e," (mT5 model)"),d9e.forEach(t),Var=i(D),IT=n(D,"LI",{});var c9e=s(IT);h_e=n(c9e,"STRONG",{});var aht=s(h_e);Xar=r(aht,"openai-gpt"),aht.forEach(t),zar=r(c9e," \u2014 "),QX=n(c9e,"A",{href:!0});var nht=s(QX);Qar=r(nht,"TFOpenAIGPTModel"),nht.forEach(t),War=r(c9e," (OpenAI GPT model)"),c9e.forEach(t),Har=i(D),qT=n(D,"LI",{});var f9e=s(qT);p_e=n(f9e,"STRONG",{});var sht=s(p_e);Uar=r(sht,"pegasus"),sht.forEach(t),Jar=r(f9e," \u2014 "),WX=n(f9e,"A",{href:!0});var lht=s(WX);Yar=r(lht,"TFPegasusModel"),lht.forEach(t),Kar=r(f9e," (Pegasus model)"),f9e.forEach(t),Zar=i(D),NT=n(D,"LI",{});var m9e=s(NT);u_e=n(m9e,"STRONG",{});var iht=s(u_e);enr=r(iht,"rembert"),iht.forEach(t),onr=r(m9e," \u2014 "),HX=n(m9e,"A",{href:!0});var dht=s(HX);rnr=r(dht,"TFRemBertModel"),dht.forEach(t),tnr=r(m9e," (RemBERT model)"),m9e.forEach(t),anr=i(D),jT=n(D,"LI",{});var g9e=s(jT);__e=n(g9e,"STRONG",{});var cht=s(__e);nnr=r(cht,"roberta"),cht.forEach(t),snr=r(g9e," \u2014 "),UX=n(g9e,"A",{href:!0});var fht=s(UX);lnr=r(fht,"TFRobertaModel"),fht.forEach(t),inr=r(g9e," (RoBERTa model)"),g9e.forEach(t),dnr=i(D),DT=n(D,"LI",{});var h9e=s(DT);b_e=n(h9e,"STRONG",{});var mht=s(b_e);cnr=r(mht,"roformer"),mht.forEach(t),fnr=r(h9e," \u2014 "),JX=n(h9e,"A",{href:!0});var ght=s(JX);mnr=r(ght,"TFRoFormerModel"),ght.forEach(t),gnr=r(h9e," (RoFormer model)"),h9e.forEach(t),hnr=i(D),GT=n(D,"LI",{});var p9e=s(GT);v_e=n(p9e,"STRONG",{});var hht=s(v_e);pnr=r(hht,"speech_to_text"),hht.forEach(t),unr=r(p9e," \u2014 "),YX=n(p9e,"A",{href:!0});var pht=s(YX);_nr=r(pht,"TFSpeech2TextModel"),pht.forEach(t),bnr=r(p9e," (Speech2Text model)"),p9e.forEach(t),vnr=i(D),OT=n(D,"LI",{});var u9e=s(OT);F_e=n(u9e,"STRONG",{});var uht=s(F_e);Fnr=r(uht,"t5"),uht.forEach(t),Tnr=r(u9e," \u2014 "),KX=n(u9e,"A",{href:!0});var _ht=s(KX);Mnr=r(_ht,"TFT5Model"),_ht.forEach(t),Enr=r(u9e," (T5 model)"),u9e.forEach(t),Cnr=i(D),VT=n(D,"LI",{});var _9e=s(VT);T_e=n(_9e,"STRONG",{});var bht=s(T_e);wnr=r(bht,"tapas"),bht.forEach(t),Anr=r(_9e," \u2014 "),ZX=n(_9e,"A",{href:!0});var vht=s(ZX);ynr=r(vht,"TFTapasModel"),vht.forEach(t),Lnr=r(_9e," (TAPAS model)"),_9e.forEach(t),xnr=i(D),XT=n(D,"LI",{});var b9e=s(XT);M_e=n(b9e,"STRONG",{});var Fht=s(M_e);$nr=r(Fht,"transfo-xl"),Fht.forEach(t),knr=r(b9e," \u2014 "),ez=n(b9e,"A",{href:!0});var Tht=s(ez);Snr=r(Tht,"TFTransfoXLModel"),Tht.forEach(t),Rnr=r(b9e," (Transformer-XL model)"),b9e.forEach(t),Bnr=i(D),zT=n(D,"LI",{});var v9e=s(zT);E_e=n(v9e,"STRONG",{});var Mht=s(E_e);Pnr=r(Mht,"vit"),Mht.forEach(t),Inr=r(v9e," \u2014 "),oz=n(v9e,"A",{href:!0});var Eht=s(oz);qnr=r(Eht,"TFViTModel"),Eht.forEach(t),Nnr=r(v9e," (ViT model)"),v9e.forEach(t),jnr=i(D),QT=n(D,"LI",{});var F9e=s(QT);C_e=n(F9e,"STRONG",{});var Cht=s(C_e);Dnr=r(Cht,"vit_mae"),Cht.forEach(t),Gnr=r(F9e," \u2014 "),rz=n(F9e,"A",{href:!0});var wht=s(rz);Onr=r(wht,"TFViTMAEModel"),wht.forEach(t),Vnr=r(F9e," (ViTMAE model)"),F9e.forEach(t),Xnr=i(D),WT=n(D,"LI",{});var T9e=s(WT);w_e=n(T9e,"STRONG",{});var Aht=s(w_e);znr=r(Aht,"wav2vec2"),Aht.forEach(t),Qnr=r(T9e," \u2014 "),tz=n(T9e,"A",{href:!0});var yht=s(tz);Wnr=r(yht,"TFWav2Vec2Model"),yht.forEach(t),Hnr=r(T9e," (Wav2Vec2 model)"),T9e.forEach(t),Unr=i(D),HT=n(D,"LI",{});var M9e=s(HT);A_e=n(M9e,"STRONG",{});var Lht=s(A_e);Jnr=r(Lht,"xlm"),Lht.forEach(t),Ynr=r(M9e," \u2014 "),az=n(M9e,"A",{href:!0});var xht=s(az);Knr=r(xht,"TFXLMModel"),xht.forEach(t),Znr=r(M9e," (XLM model)"),M9e.forEach(t),esr=i(D),UT=n(D,"LI",{});var E9e=s(UT);y_e=n(E9e,"STRONG",{});var $ht=s(y_e);osr=r($ht,"xlm-roberta"),$ht.forEach(t),rsr=r(E9e," \u2014 "),nz=n(E9e,"A",{href:!0});var kht=s(nz);tsr=r(kht,"TFXLMRobertaModel"),kht.forEach(t),asr=r(E9e," (XLM-RoBERTa model)"),E9e.forEach(t),nsr=i(D),JT=n(D,"LI",{});var C9e=s(JT);L_e=n(C9e,"STRONG",{});var Sht=s(L_e);ssr=r(Sht,"xlnet"),Sht.forEach(t),lsr=r(C9e," \u2014 "),sz=n(C9e,"A",{href:!0});var Rht=s(sz);isr=r(Rht,"TFXLNetModel"),Rht.forEach(t),dsr=r(C9e," (XLNet model)"),C9e.forEach(t),D.forEach(t),csr=i(sl),T(YT.$$.fragment,sl),sl.forEach(t),nl.forEach(t),TPe=i(f),Bd=n(f,"H2",{class:!0});var wqe=s(Bd);KT=n(wqe,"A",{id:!0,class:!0,href:!0});var Bht=s(KT);x_e=n(Bht,"SPAN",{});var Pht=s(x_e);T(cL.$$.fragment,Pht),Pht.forEach(t),Bht.forEach(t),fsr=i(wqe),$_e=n(wqe,"SPAN",{});var Iht=s($_e);msr=r(Iht,"TFAutoModelForPreTraining"),Iht.forEach(t),wqe.forEach(t),MPe=i(f),Ko=n(f,"DIV",{class:!0});var ll=s(Ko);T(fL.$$.fragment,ll),gsr=i(ll),Pd=n(ll,"P",{});var cK=s(Pd);hsr=r(cK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),lz=n(cK,"A",{href:!0});var qht=s(lz);psr=r(qht,"from_pretrained()"),qht.forEach(t),usr=r(cK," class method or the "),iz=n(cK,"A",{href:!0});var Nht=s(iz);_sr=r(Nht,"from_config()"),Nht.forEach(t),bsr=r(cK,` class
method.`),cK.forEach(t),vsr=i(ll),mL=n(ll,"P",{});var Aqe=s(mL);Fsr=r(Aqe,"This class cannot be instantiated directly using "),k_e=n(Aqe,"CODE",{});var jht=s(k_e);Tsr=r(jht,"__init__()"),jht.forEach(t),Msr=r(Aqe," (throws an error)."),Aqe.forEach(t),Esr=i(ll),Ct=n(ll,"DIV",{class:!0});var Aw=s(Ct);T(gL.$$.fragment,Aw),Csr=i(Aw),S_e=n(Aw,"P",{});var Dht=s(S_e);wsr=r(Dht,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Dht.forEach(t),Asr=i(Aw),Id=n(Aw,"P",{});var fK=s(Id);ysr=r(fK,`Note:
Loading a model from its configuration file does `),R_e=n(fK,"STRONG",{});var Ght=s(R_e);Lsr=r(Ght,"not"),Ght.forEach(t),xsr=r(fK,` load the model weights. It only affects the
model\u2019s configuration. Use `),dz=n(fK,"A",{href:!0});var Oht=s(dz);$sr=r(Oht,"from_pretrained()"),Oht.forEach(t),ksr=r(fK," to load the model weights."),fK.forEach(t),Ssr=i(Aw),T(ZT.$$.fragment,Aw),Aw.forEach(t),Rsr=i(ll),wr=n(ll,"DIV",{class:!0});var il=s(wr);T(hL.$$.fragment,il),Bsr=i(il),B_e=n(il,"P",{});var Vht=s(B_e);Psr=r(Vht,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Vht.forEach(t),Isr=i(il),Ja=n(il,"P",{});var yw=s(Ja);qsr=r(yw,"The model class to instantiate is selected based on the "),P_e=n(yw,"CODE",{});var Xht=s(P_e);Nsr=r(Xht,"model_type"),Xht.forEach(t),jsr=r(yw,` property of the config object (either
passed as an argument or loaded from `),I_e=n(yw,"CODE",{});var zht=s(I_e);Dsr=r(zht,"pretrained_model_name_or_path"),zht.forEach(t),Gsr=r(yw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q_e=n(yw,"CODE",{});var Qht=s(q_e);Osr=r(Qht,"pretrained_model_name_or_path"),Qht.forEach(t),Vsr=r(yw,":"),yw.forEach(t),Xsr=i(il),ne=n(il,"UL",{});var le=s(ne);e8=n(le,"LI",{});var w9e=s(e8);N_e=n(w9e,"STRONG",{});var Wht=s(N_e);zsr=r(Wht,"albert"),Wht.forEach(t),Qsr=r(w9e," \u2014 "),cz=n(w9e,"A",{href:!0});var Hht=s(cz);Wsr=r(Hht,"TFAlbertForPreTraining"),Hht.forEach(t),Hsr=r(w9e," (ALBERT model)"),w9e.forEach(t),Usr=i(le),o8=n(le,"LI",{});var A9e=s(o8);j_e=n(A9e,"STRONG",{});var Uht=s(j_e);Jsr=r(Uht,"bart"),Uht.forEach(t),Ysr=r(A9e," \u2014 "),fz=n(A9e,"A",{href:!0});var Jht=s(fz);Ksr=r(Jht,"TFBartForConditionalGeneration"),Jht.forEach(t),Zsr=r(A9e," (BART model)"),A9e.forEach(t),elr=i(le),r8=n(le,"LI",{});var y9e=s(r8);D_e=n(y9e,"STRONG",{});var Yht=s(D_e);olr=r(Yht,"bert"),Yht.forEach(t),rlr=r(y9e," \u2014 "),mz=n(y9e,"A",{href:!0});var Kht=s(mz);tlr=r(Kht,"TFBertForPreTraining"),Kht.forEach(t),alr=r(y9e," (BERT model)"),y9e.forEach(t),nlr=i(le),t8=n(le,"LI",{});var L9e=s(t8);G_e=n(L9e,"STRONG",{});var Zht=s(G_e);slr=r(Zht,"camembert"),Zht.forEach(t),llr=r(L9e," \u2014 "),gz=n(L9e,"A",{href:!0});var ept=s(gz);ilr=r(ept,"TFCamembertForMaskedLM"),ept.forEach(t),dlr=r(L9e," (CamemBERT model)"),L9e.forEach(t),clr=i(le),a8=n(le,"LI",{});var x9e=s(a8);O_e=n(x9e,"STRONG",{});var opt=s(O_e);flr=r(opt,"ctrl"),opt.forEach(t),mlr=r(x9e," \u2014 "),hz=n(x9e,"A",{href:!0});var rpt=s(hz);glr=r(rpt,"TFCTRLLMHeadModel"),rpt.forEach(t),hlr=r(x9e," (CTRL model)"),x9e.forEach(t),plr=i(le),n8=n(le,"LI",{});var $9e=s(n8);V_e=n($9e,"STRONG",{});var tpt=s(V_e);ulr=r(tpt,"distilbert"),tpt.forEach(t),_lr=r($9e," \u2014 "),pz=n($9e,"A",{href:!0});var apt=s(pz);blr=r(apt,"TFDistilBertForMaskedLM"),apt.forEach(t),vlr=r($9e," (DistilBERT model)"),$9e.forEach(t),Flr=i(le),s8=n(le,"LI",{});var k9e=s(s8);X_e=n(k9e,"STRONG",{});var npt=s(X_e);Tlr=r(npt,"electra"),npt.forEach(t),Mlr=r(k9e," \u2014 "),uz=n(k9e,"A",{href:!0});var spt=s(uz);Elr=r(spt,"TFElectraForPreTraining"),spt.forEach(t),Clr=r(k9e," (ELECTRA model)"),k9e.forEach(t),wlr=i(le),l8=n(le,"LI",{});var S9e=s(l8);z_e=n(S9e,"STRONG",{});var lpt=s(z_e);Alr=r(lpt,"flaubert"),lpt.forEach(t),ylr=r(S9e," \u2014 "),_z=n(S9e,"A",{href:!0});var ipt=s(_z);Llr=r(ipt,"TFFlaubertWithLMHeadModel"),ipt.forEach(t),xlr=r(S9e," (FlauBERT model)"),S9e.forEach(t),$lr=i(le),i8=n(le,"LI",{});var R9e=s(i8);Q_e=n(R9e,"STRONG",{});var dpt=s(Q_e);klr=r(dpt,"funnel"),dpt.forEach(t),Slr=r(R9e," \u2014 "),bz=n(R9e,"A",{href:!0});var cpt=s(bz);Rlr=r(cpt,"TFFunnelForPreTraining"),cpt.forEach(t),Blr=r(R9e," (Funnel Transformer model)"),R9e.forEach(t),Plr=i(le),d8=n(le,"LI",{});var B9e=s(d8);W_e=n(B9e,"STRONG",{});var fpt=s(W_e);Ilr=r(fpt,"gpt2"),fpt.forEach(t),qlr=r(B9e," \u2014 "),vz=n(B9e,"A",{href:!0});var mpt=s(vz);Nlr=r(mpt,"TFGPT2LMHeadModel"),mpt.forEach(t),jlr=r(B9e," (OpenAI GPT-2 model)"),B9e.forEach(t),Dlr=i(le),c8=n(le,"LI",{});var P9e=s(c8);H_e=n(P9e,"STRONG",{});var gpt=s(H_e);Glr=r(gpt,"layoutlm"),gpt.forEach(t),Olr=r(P9e," \u2014 "),Fz=n(P9e,"A",{href:!0});var hpt=s(Fz);Vlr=r(hpt,"TFLayoutLMForMaskedLM"),hpt.forEach(t),Xlr=r(P9e," (LayoutLM model)"),P9e.forEach(t),zlr=i(le),f8=n(le,"LI",{});var I9e=s(f8);U_e=n(I9e,"STRONG",{});var ppt=s(U_e);Qlr=r(ppt,"lxmert"),ppt.forEach(t),Wlr=r(I9e," \u2014 "),Tz=n(I9e,"A",{href:!0});var upt=s(Tz);Hlr=r(upt,"TFLxmertForPreTraining"),upt.forEach(t),Ulr=r(I9e," (LXMERT model)"),I9e.forEach(t),Jlr=i(le),m8=n(le,"LI",{});var q9e=s(m8);J_e=n(q9e,"STRONG",{});var _pt=s(J_e);Ylr=r(_pt,"mobilebert"),_pt.forEach(t),Klr=r(q9e," \u2014 "),Mz=n(q9e,"A",{href:!0});var bpt=s(Mz);Zlr=r(bpt,"TFMobileBertForPreTraining"),bpt.forEach(t),eir=r(q9e," (MobileBERT model)"),q9e.forEach(t),oir=i(le),g8=n(le,"LI",{});var N9e=s(g8);Y_e=n(N9e,"STRONG",{});var vpt=s(Y_e);rir=r(vpt,"mpnet"),vpt.forEach(t),tir=r(N9e," \u2014 "),Ez=n(N9e,"A",{href:!0});var Fpt=s(Ez);air=r(Fpt,"TFMPNetForMaskedLM"),Fpt.forEach(t),nir=r(N9e," (MPNet model)"),N9e.forEach(t),sir=i(le),h8=n(le,"LI",{});var j9e=s(h8);K_e=n(j9e,"STRONG",{});var Tpt=s(K_e);lir=r(Tpt,"openai-gpt"),Tpt.forEach(t),iir=r(j9e," \u2014 "),Cz=n(j9e,"A",{href:!0});var Mpt=s(Cz);dir=r(Mpt,"TFOpenAIGPTLMHeadModel"),Mpt.forEach(t),cir=r(j9e," (OpenAI GPT model)"),j9e.forEach(t),fir=i(le),p8=n(le,"LI",{});var D9e=s(p8);Z_e=n(D9e,"STRONG",{});var Ept=s(Z_e);mir=r(Ept,"roberta"),Ept.forEach(t),gir=r(D9e," \u2014 "),wz=n(D9e,"A",{href:!0});var Cpt=s(wz);hir=r(Cpt,"TFRobertaForMaskedLM"),Cpt.forEach(t),pir=r(D9e," (RoBERTa model)"),D9e.forEach(t),uir=i(le),u8=n(le,"LI",{});var G9e=s(u8);e2e=n(G9e,"STRONG",{});var wpt=s(e2e);_ir=r(wpt,"t5"),wpt.forEach(t),bir=r(G9e," \u2014 "),Az=n(G9e,"A",{href:!0});var Apt=s(Az);vir=r(Apt,"TFT5ForConditionalGeneration"),Apt.forEach(t),Fir=r(G9e," (T5 model)"),G9e.forEach(t),Tir=i(le),_8=n(le,"LI",{});var O9e=s(_8);o2e=n(O9e,"STRONG",{});var ypt=s(o2e);Mir=r(ypt,"tapas"),ypt.forEach(t),Eir=r(O9e," \u2014 "),yz=n(O9e,"A",{href:!0});var Lpt=s(yz);Cir=r(Lpt,"TFTapasForMaskedLM"),Lpt.forEach(t),wir=r(O9e," (TAPAS model)"),O9e.forEach(t),Air=i(le),b8=n(le,"LI",{});var V9e=s(b8);r2e=n(V9e,"STRONG",{});var xpt=s(r2e);yir=r(xpt,"transfo-xl"),xpt.forEach(t),Lir=r(V9e," \u2014 "),Lz=n(V9e,"A",{href:!0});var $pt=s(Lz);xir=r($pt,"TFTransfoXLLMHeadModel"),$pt.forEach(t),$ir=r(V9e," (Transformer-XL model)"),V9e.forEach(t),kir=i(le),v8=n(le,"LI",{});var X9e=s(v8);t2e=n(X9e,"STRONG",{});var kpt=s(t2e);Sir=r(kpt,"vit_mae"),kpt.forEach(t),Rir=r(X9e," \u2014 "),xz=n(X9e,"A",{href:!0});var Spt=s(xz);Bir=r(Spt,"TFViTMAEForPreTraining"),Spt.forEach(t),Pir=r(X9e," (ViTMAE model)"),X9e.forEach(t),Iir=i(le),F8=n(le,"LI",{});var z9e=s(F8);a2e=n(z9e,"STRONG",{});var Rpt=s(a2e);qir=r(Rpt,"xlm"),Rpt.forEach(t),Nir=r(z9e," \u2014 "),$z=n(z9e,"A",{href:!0});var Bpt=s($z);jir=r(Bpt,"TFXLMWithLMHeadModel"),Bpt.forEach(t),Dir=r(z9e," (XLM model)"),z9e.forEach(t),Gir=i(le),T8=n(le,"LI",{});var Q9e=s(T8);n2e=n(Q9e,"STRONG",{});var Ppt=s(n2e);Oir=r(Ppt,"xlm-roberta"),Ppt.forEach(t),Vir=r(Q9e," \u2014 "),kz=n(Q9e,"A",{href:!0});var Ipt=s(kz);Xir=r(Ipt,"TFXLMRobertaForMaskedLM"),Ipt.forEach(t),zir=r(Q9e," (XLM-RoBERTa model)"),Q9e.forEach(t),Qir=i(le),M8=n(le,"LI",{});var W9e=s(M8);s2e=n(W9e,"STRONG",{});var qpt=s(s2e);Wir=r(qpt,"xlnet"),qpt.forEach(t),Hir=r(W9e," \u2014 "),Sz=n(W9e,"A",{href:!0});var Npt=s(Sz);Uir=r(Npt,"TFXLNetLMHeadModel"),Npt.forEach(t),Jir=r(W9e," (XLNet model)"),W9e.forEach(t),le.forEach(t),Yir=i(il),T(E8.$$.fragment,il),il.forEach(t),ll.forEach(t),EPe=i(f),qd=n(f,"H2",{class:!0});var yqe=s(qd);C8=n(yqe,"A",{id:!0,class:!0,href:!0});var jpt=s(C8);l2e=n(jpt,"SPAN",{});var Dpt=s(l2e);T(pL.$$.fragment,Dpt),Dpt.forEach(t),jpt.forEach(t),Kir=i(yqe),i2e=n(yqe,"SPAN",{});var Gpt=s(i2e);Zir=r(Gpt,"TFAutoModelForCausalLM"),Gpt.forEach(t),yqe.forEach(t),CPe=i(f),Zo=n(f,"DIV",{class:!0});var dl=s(Zo);T(uL.$$.fragment,dl),edr=i(dl),Nd=n(dl,"P",{});var mK=s(Nd);odr=r(mK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Rz=n(mK,"A",{href:!0});var Opt=s(Rz);rdr=r(Opt,"from_pretrained()"),Opt.forEach(t),tdr=r(mK," class method or the "),Bz=n(mK,"A",{href:!0});var Vpt=s(Bz);adr=r(Vpt,"from_config()"),Vpt.forEach(t),ndr=r(mK,` class
method.`),mK.forEach(t),sdr=i(dl),_L=n(dl,"P",{});var Lqe=s(_L);ldr=r(Lqe,"This class cannot be instantiated directly using "),d2e=n(Lqe,"CODE",{});var Xpt=s(d2e);idr=r(Xpt,"__init__()"),Xpt.forEach(t),ddr=r(Lqe," (throws an error)."),Lqe.forEach(t),cdr=i(dl),wt=n(dl,"DIV",{class:!0});var Lw=s(wt);T(bL.$$.fragment,Lw),fdr=i(Lw),c2e=n(Lw,"P",{});var zpt=s(c2e);mdr=r(zpt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),zpt.forEach(t),gdr=i(Lw),jd=n(Lw,"P",{});var gK=s(jd);hdr=r(gK,`Note:
Loading a model from its configuration file does `),f2e=n(gK,"STRONG",{});var Qpt=s(f2e);pdr=r(Qpt,"not"),Qpt.forEach(t),udr=r(gK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Pz=n(gK,"A",{href:!0});var Wpt=s(Pz);_dr=r(Wpt,"from_pretrained()"),Wpt.forEach(t),bdr=r(gK," to load the model weights."),gK.forEach(t),vdr=i(Lw),T(w8.$$.fragment,Lw),Lw.forEach(t),Fdr=i(dl),Ar=n(dl,"DIV",{class:!0});var cl=s(Ar);T(vL.$$.fragment,cl),Tdr=i(cl),m2e=n(cl,"P",{});var Hpt=s(m2e);Mdr=r(Hpt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Hpt.forEach(t),Edr=i(cl),Ya=n(cl,"P",{});var xw=s(Ya);Cdr=r(xw,"The model class to instantiate is selected based on the "),g2e=n(xw,"CODE",{});var Upt=s(g2e);wdr=r(Upt,"model_type"),Upt.forEach(t),Adr=r(xw,` property of the config object (either
passed as an argument or loaded from `),h2e=n(xw,"CODE",{});var Jpt=s(h2e);ydr=r(Jpt,"pretrained_model_name_or_path"),Jpt.forEach(t),Ldr=r(xw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p2e=n(xw,"CODE",{});var Ypt=s(p2e);xdr=r(Ypt,"pretrained_model_name_or_path"),Ypt.forEach(t),$dr=r(xw,":"),xw.forEach(t),kdr=i(cl),Te=n(cl,"UL",{});var Ce=s(Te);A8=n(Ce,"LI",{});var H9e=s(A8);u2e=n(H9e,"STRONG",{});var Kpt=s(u2e);Sdr=r(Kpt,"bert"),Kpt.forEach(t),Rdr=r(H9e," \u2014 "),Iz=n(H9e,"A",{href:!0});var Zpt=s(Iz);Bdr=r(Zpt,"TFBertLMHeadModel"),Zpt.forEach(t),Pdr=r(H9e," (BERT model)"),H9e.forEach(t),Idr=i(Ce),y8=n(Ce,"LI",{});var U9e=s(y8);_2e=n(U9e,"STRONG",{});var eut=s(_2e);qdr=r(eut,"camembert"),eut.forEach(t),Ndr=r(U9e," \u2014 "),qz=n(U9e,"A",{href:!0});var out=s(qz);jdr=r(out,"TFCamembertForCausalLM"),out.forEach(t),Ddr=r(U9e," (CamemBERT model)"),U9e.forEach(t),Gdr=i(Ce),L8=n(Ce,"LI",{});var J9e=s(L8);b2e=n(J9e,"STRONG",{});var rut=s(b2e);Odr=r(rut,"ctrl"),rut.forEach(t),Vdr=r(J9e," \u2014 "),Nz=n(J9e,"A",{href:!0});var tut=s(Nz);Xdr=r(tut,"TFCTRLLMHeadModel"),tut.forEach(t),zdr=r(J9e," (CTRL model)"),J9e.forEach(t),Qdr=i(Ce),x8=n(Ce,"LI",{});var Y9e=s(x8);v2e=n(Y9e,"STRONG",{});var aut=s(v2e);Wdr=r(aut,"gpt2"),aut.forEach(t),Hdr=r(Y9e," \u2014 "),jz=n(Y9e,"A",{href:!0});var nut=s(jz);Udr=r(nut,"TFGPT2LMHeadModel"),nut.forEach(t),Jdr=r(Y9e," (OpenAI GPT-2 model)"),Y9e.forEach(t),Ydr=i(Ce),$8=n(Ce,"LI",{});var K9e=s($8);F2e=n(K9e,"STRONG",{});var sut=s(F2e);Kdr=r(sut,"gptj"),sut.forEach(t),Zdr=r(K9e," \u2014 "),Dz=n(K9e,"A",{href:!0});var lut=s(Dz);ecr=r(lut,"TFGPTJForCausalLM"),lut.forEach(t),ocr=r(K9e," (GPT-J model)"),K9e.forEach(t),rcr=i(Ce),k8=n(Ce,"LI",{});var Z9e=s(k8);T2e=n(Z9e,"STRONG",{});var iut=s(T2e);tcr=r(iut,"openai-gpt"),iut.forEach(t),acr=r(Z9e," \u2014 "),Gz=n(Z9e,"A",{href:!0});var dut=s(Gz);ncr=r(dut,"TFOpenAIGPTLMHeadModel"),dut.forEach(t),scr=r(Z9e," (OpenAI GPT model)"),Z9e.forEach(t),lcr=i(Ce),S8=n(Ce,"LI",{});var e$e=s(S8);M2e=n(e$e,"STRONG",{});var cut=s(M2e);icr=r(cut,"rembert"),cut.forEach(t),dcr=r(e$e," \u2014 "),Oz=n(e$e,"A",{href:!0});var fut=s(Oz);ccr=r(fut,"TFRemBertForCausalLM"),fut.forEach(t),fcr=r(e$e," (RemBERT model)"),e$e.forEach(t),mcr=i(Ce),R8=n(Ce,"LI",{});var o$e=s(R8);E2e=n(o$e,"STRONG",{});var mut=s(E2e);gcr=r(mut,"roberta"),mut.forEach(t),hcr=r(o$e," \u2014 "),Vz=n(o$e,"A",{href:!0});var gut=s(Vz);pcr=r(gut,"TFRobertaForCausalLM"),gut.forEach(t),ucr=r(o$e," (RoBERTa model)"),o$e.forEach(t),_cr=i(Ce),B8=n(Ce,"LI",{});var r$e=s(B8);C2e=n(r$e,"STRONG",{});var hut=s(C2e);bcr=r(hut,"roformer"),hut.forEach(t),vcr=r(r$e," \u2014 "),Xz=n(r$e,"A",{href:!0});var put=s(Xz);Fcr=r(put,"TFRoFormerForCausalLM"),put.forEach(t),Tcr=r(r$e," (RoFormer model)"),r$e.forEach(t),Mcr=i(Ce),P8=n(Ce,"LI",{});var t$e=s(P8);w2e=n(t$e,"STRONG",{});var uut=s(w2e);Ecr=r(uut,"transfo-xl"),uut.forEach(t),Ccr=r(t$e," \u2014 "),zz=n(t$e,"A",{href:!0});var _ut=s(zz);wcr=r(_ut,"TFTransfoXLLMHeadModel"),_ut.forEach(t),Acr=r(t$e," (Transformer-XL model)"),t$e.forEach(t),ycr=i(Ce),I8=n(Ce,"LI",{});var a$e=s(I8);A2e=n(a$e,"STRONG",{});var but=s(A2e);Lcr=r(but,"xlm"),but.forEach(t),xcr=r(a$e," \u2014 "),Qz=n(a$e,"A",{href:!0});var vut=s(Qz);$cr=r(vut,"TFXLMWithLMHeadModel"),vut.forEach(t),kcr=r(a$e," (XLM model)"),a$e.forEach(t),Scr=i(Ce),q8=n(Ce,"LI",{});var n$e=s(q8);y2e=n(n$e,"STRONG",{});var Fut=s(y2e);Rcr=r(Fut,"xlnet"),Fut.forEach(t),Bcr=r(n$e," \u2014 "),Wz=n(n$e,"A",{href:!0});var Tut=s(Wz);Pcr=r(Tut,"TFXLNetLMHeadModel"),Tut.forEach(t),Icr=r(n$e," (XLNet model)"),n$e.forEach(t),Ce.forEach(t),qcr=i(cl),T(N8.$$.fragment,cl),cl.forEach(t),dl.forEach(t),wPe=i(f),Dd=n(f,"H2",{class:!0});var xqe=s(Dd);j8=n(xqe,"A",{id:!0,class:!0,href:!0});var Mut=s(j8);L2e=n(Mut,"SPAN",{});var Eut=s(L2e);T(FL.$$.fragment,Eut),Eut.forEach(t),Mut.forEach(t),Ncr=i(xqe),x2e=n(xqe,"SPAN",{});var Cut=s(x2e);jcr=r(Cut,"TFAutoModelForImageClassification"),Cut.forEach(t),xqe.forEach(t),APe=i(f),er=n(f,"DIV",{class:!0});var fl=s(er);T(TL.$$.fragment,fl),Dcr=i(fl),Gd=n(fl,"P",{});var hK=s(Gd);Gcr=r(hK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Hz=n(hK,"A",{href:!0});var wut=s(Hz);Ocr=r(wut,"from_pretrained()"),wut.forEach(t),Vcr=r(hK," class method or the "),Uz=n(hK,"A",{href:!0});var Aut=s(Uz);Xcr=r(Aut,"from_config()"),Aut.forEach(t),zcr=r(hK,` class
method.`),hK.forEach(t),Qcr=i(fl),ML=n(fl,"P",{});var $qe=s(ML);Wcr=r($qe,"This class cannot be instantiated directly using "),$2e=n($qe,"CODE",{});var yut=s($2e);Hcr=r(yut,"__init__()"),yut.forEach(t),Ucr=r($qe," (throws an error)."),$qe.forEach(t),Jcr=i(fl),At=n(fl,"DIV",{class:!0});var $w=s(At);T(EL.$$.fragment,$w),Ycr=i($w),k2e=n($w,"P",{});var Lut=s(k2e);Kcr=r(Lut,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Lut.forEach(t),Zcr=i($w),Od=n($w,"P",{});var pK=s(Od);efr=r(pK,`Note:
Loading a model from its configuration file does `),S2e=n(pK,"STRONG",{});var xut=s(S2e);ofr=r(xut,"not"),xut.forEach(t),rfr=r(pK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Jz=n(pK,"A",{href:!0});var $ut=s(Jz);tfr=r($ut,"from_pretrained()"),$ut.forEach(t),afr=r(pK," to load the model weights."),pK.forEach(t),nfr=i($w),T(D8.$$.fragment,$w),$w.forEach(t),sfr=i(fl),yr=n(fl,"DIV",{class:!0});var ml=s(yr);T(CL.$$.fragment,ml),lfr=i(ml),R2e=n(ml,"P",{});var kut=s(R2e);ifr=r(kut,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),kut.forEach(t),dfr=i(ml),Ka=n(ml,"P",{});var kw=s(Ka);cfr=r(kw,"The model class to instantiate is selected based on the "),B2e=n(kw,"CODE",{});var Sut=s(B2e);ffr=r(Sut,"model_type"),Sut.forEach(t),mfr=r(kw,` property of the config object (either
passed as an argument or loaded from `),P2e=n(kw,"CODE",{});var Rut=s(P2e);gfr=r(Rut,"pretrained_model_name_or_path"),Rut.forEach(t),hfr=r(kw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I2e=n(kw,"CODE",{});var But=s(I2e);pfr=r(But,"pretrained_model_name_or_path"),But.forEach(t),ufr=r(kw,":"),kw.forEach(t),_fr=i(ml),Vd=n(ml,"UL",{});var uK=s(Vd);G8=n(uK,"LI",{});var s$e=s(G8);q2e=n(s$e,"STRONG",{});var Put=s(q2e);bfr=r(Put,"convnext"),Put.forEach(t),vfr=r(s$e," \u2014 "),Yz=n(s$e,"A",{href:!0});var Iut=s(Yz);Ffr=r(Iut,"TFConvNextForImageClassification"),Iut.forEach(t),Tfr=r(s$e," (ConvNext model)"),s$e.forEach(t),Mfr=i(uK),O8=n(uK,"LI",{});var l$e=s(O8);N2e=n(l$e,"STRONG",{});var qut=s(N2e);Efr=r(qut,"data2vec-vision"),qut.forEach(t),Cfr=r(l$e," \u2014 "),Kz=n(l$e,"A",{href:!0});var Nut=s(Kz);wfr=r(Nut,"TFData2VecVisionForImageClassification"),Nut.forEach(t),Afr=r(l$e," (Data2VecVision model)"),l$e.forEach(t),yfr=i(uK),V8=n(uK,"LI",{});var i$e=s(V8);j2e=n(i$e,"STRONG",{});var jut=s(j2e);Lfr=r(jut,"vit"),jut.forEach(t),xfr=r(i$e," \u2014 "),Zz=n(i$e,"A",{href:!0});var Dut=s(Zz);$fr=r(Dut,"TFViTForImageClassification"),Dut.forEach(t),kfr=r(i$e," (ViT model)"),i$e.forEach(t),uK.forEach(t),Sfr=i(ml),T(X8.$$.fragment,ml),ml.forEach(t),fl.forEach(t),yPe=i(f),Xd=n(f,"H2",{class:!0});var kqe=s(Xd);z8=n(kqe,"A",{id:!0,class:!0,href:!0});var Gut=s(z8);D2e=n(Gut,"SPAN",{});var Out=s(D2e);T(wL.$$.fragment,Out),Out.forEach(t),Gut.forEach(t),Rfr=i(kqe),G2e=n(kqe,"SPAN",{});var Vut=s(G2e);Bfr=r(Vut,"TFAutoModelForMaskedLM"),Vut.forEach(t),kqe.forEach(t),LPe=i(f),or=n(f,"DIV",{class:!0});var gl=s(or);T(AL.$$.fragment,gl),Pfr=i(gl),zd=n(gl,"P",{});var _K=s(zd);Ifr=r(_K,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),eQ=n(_K,"A",{href:!0});var Xut=s(eQ);qfr=r(Xut,"from_pretrained()"),Xut.forEach(t),Nfr=r(_K," class method or the "),oQ=n(_K,"A",{href:!0});var zut=s(oQ);jfr=r(zut,"from_config()"),zut.forEach(t),Dfr=r(_K,` class
method.`),_K.forEach(t),Gfr=i(gl),yL=n(gl,"P",{});var Sqe=s(yL);Ofr=r(Sqe,"This class cannot be instantiated directly using "),O2e=n(Sqe,"CODE",{});var Qut=s(O2e);Vfr=r(Qut,"__init__()"),Qut.forEach(t),Xfr=r(Sqe," (throws an error)."),Sqe.forEach(t),zfr=i(gl),yt=n(gl,"DIV",{class:!0});var Sw=s(yt);T(LL.$$.fragment,Sw),Qfr=i(Sw),V2e=n(Sw,"P",{});var Wut=s(V2e);Wfr=r(Wut,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Wut.forEach(t),Hfr=i(Sw),Qd=n(Sw,"P",{});var bK=s(Qd);Ufr=r(bK,`Note:
Loading a model from its configuration file does `),X2e=n(bK,"STRONG",{});var Hut=s(X2e);Jfr=r(Hut,"not"),Hut.forEach(t),Yfr=r(bK,` load the model weights. It only affects the
model\u2019s configuration. Use `),rQ=n(bK,"A",{href:!0});var Uut=s(rQ);Kfr=r(Uut,"from_pretrained()"),Uut.forEach(t),Zfr=r(bK," to load the model weights."),bK.forEach(t),emr=i(Sw),T(Q8.$$.fragment,Sw),Sw.forEach(t),omr=i(gl),Lr=n(gl,"DIV",{class:!0});var hl=s(Lr);T(xL.$$.fragment,hl),rmr=i(hl),z2e=n(hl,"P",{});var Jut=s(z2e);tmr=r(Jut,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Jut.forEach(t),amr=i(hl),Za=n(hl,"P",{});var Rw=s(Za);nmr=r(Rw,"The model class to instantiate is selected based on the "),Q2e=n(Rw,"CODE",{});var Yut=s(Q2e);smr=r(Yut,"model_type"),Yut.forEach(t),lmr=r(Rw,` property of the config object (either
passed as an argument or loaded from `),W2e=n(Rw,"CODE",{});var Kut=s(W2e);imr=r(Kut,"pretrained_model_name_or_path"),Kut.forEach(t),dmr=r(Rw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H2e=n(Rw,"CODE",{});var Zut=s(H2e);cmr=r(Zut,"pretrained_model_name_or_path"),Zut.forEach(t),fmr=r(Rw,":"),Rw.forEach(t),mmr=i(hl),ie=n(hl,"UL",{});var fe=s(ie);W8=n(fe,"LI",{});var d$e=s(W8);U2e=n(d$e,"STRONG",{});var e_t=s(U2e);gmr=r(e_t,"albert"),e_t.forEach(t),hmr=r(d$e," \u2014 "),tQ=n(d$e,"A",{href:!0});var o_t=s(tQ);pmr=r(o_t,"TFAlbertForMaskedLM"),o_t.forEach(t),umr=r(d$e," (ALBERT model)"),d$e.forEach(t),_mr=i(fe),H8=n(fe,"LI",{});var c$e=s(H8);J2e=n(c$e,"STRONG",{});var r_t=s(J2e);bmr=r(r_t,"bert"),r_t.forEach(t),vmr=r(c$e," \u2014 "),aQ=n(c$e,"A",{href:!0});var t_t=s(aQ);Fmr=r(t_t,"TFBertForMaskedLM"),t_t.forEach(t),Tmr=r(c$e," (BERT model)"),c$e.forEach(t),Mmr=i(fe),U8=n(fe,"LI",{});var f$e=s(U8);Y2e=n(f$e,"STRONG",{});var a_t=s(Y2e);Emr=r(a_t,"camembert"),a_t.forEach(t),Cmr=r(f$e," \u2014 "),nQ=n(f$e,"A",{href:!0});var n_t=s(nQ);wmr=r(n_t,"TFCamembertForMaskedLM"),n_t.forEach(t),Amr=r(f$e," (CamemBERT model)"),f$e.forEach(t),ymr=i(fe),J8=n(fe,"LI",{});var m$e=s(J8);K2e=n(m$e,"STRONG",{});var s_t=s(K2e);Lmr=r(s_t,"convbert"),s_t.forEach(t),xmr=r(m$e," \u2014 "),sQ=n(m$e,"A",{href:!0});var l_t=s(sQ);$mr=r(l_t,"TFConvBertForMaskedLM"),l_t.forEach(t),kmr=r(m$e," (ConvBERT model)"),m$e.forEach(t),Smr=i(fe),Y8=n(fe,"LI",{});var g$e=s(Y8);Z2e=n(g$e,"STRONG",{});var i_t=s(Z2e);Rmr=r(i_t,"deberta"),i_t.forEach(t),Bmr=r(g$e," \u2014 "),lQ=n(g$e,"A",{href:!0});var d_t=s(lQ);Pmr=r(d_t,"TFDebertaForMaskedLM"),d_t.forEach(t),Imr=r(g$e," (DeBERTa model)"),g$e.forEach(t),qmr=i(fe),K8=n(fe,"LI",{});var h$e=s(K8);e6e=n(h$e,"STRONG",{});var c_t=s(e6e);Nmr=r(c_t,"deberta-v2"),c_t.forEach(t),jmr=r(h$e," \u2014 "),iQ=n(h$e,"A",{href:!0});var f_t=s(iQ);Dmr=r(f_t,"TFDebertaV2ForMaskedLM"),f_t.forEach(t),Gmr=r(h$e," (DeBERTa-v2 model)"),h$e.forEach(t),Omr=i(fe),Z8=n(fe,"LI",{});var p$e=s(Z8);o6e=n(p$e,"STRONG",{});var m_t=s(o6e);Vmr=r(m_t,"distilbert"),m_t.forEach(t),Xmr=r(p$e," \u2014 "),dQ=n(p$e,"A",{href:!0});var g_t=s(dQ);zmr=r(g_t,"TFDistilBertForMaskedLM"),g_t.forEach(t),Qmr=r(p$e," (DistilBERT model)"),p$e.forEach(t),Wmr=i(fe),eM=n(fe,"LI",{});var u$e=s(eM);r6e=n(u$e,"STRONG",{});var h_t=s(r6e);Hmr=r(h_t,"electra"),h_t.forEach(t),Umr=r(u$e," \u2014 "),cQ=n(u$e,"A",{href:!0});var p_t=s(cQ);Jmr=r(p_t,"TFElectraForMaskedLM"),p_t.forEach(t),Ymr=r(u$e," (ELECTRA model)"),u$e.forEach(t),Kmr=i(fe),oM=n(fe,"LI",{});var _$e=s(oM);t6e=n(_$e,"STRONG",{});var u_t=s(t6e);Zmr=r(u_t,"flaubert"),u_t.forEach(t),egr=r(_$e," \u2014 "),fQ=n(_$e,"A",{href:!0});var __t=s(fQ);ogr=r(__t,"TFFlaubertWithLMHeadModel"),__t.forEach(t),rgr=r(_$e," (FlauBERT model)"),_$e.forEach(t),tgr=i(fe),rM=n(fe,"LI",{});var b$e=s(rM);a6e=n(b$e,"STRONG",{});var b_t=s(a6e);agr=r(b_t,"funnel"),b_t.forEach(t),ngr=r(b$e," \u2014 "),mQ=n(b$e,"A",{href:!0});var v_t=s(mQ);sgr=r(v_t,"TFFunnelForMaskedLM"),v_t.forEach(t),lgr=r(b$e," (Funnel Transformer model)"),b$e.forEach(t),igr=i(fe),tM=n(fe,"LI",{});var v$e=s(tM);n6e=n(v$e,"STRONG",{});var F_t=s(n6e);dgr=r(F_t,"layoutlm"),F_t.forEach(t),cgr=r(v$e," \u2014 "),gQ=n(v$e,"A",{href:!0});var T_t=s(gQ);fgr=r(T_t,"TFLayoutLMForMaskedLM"),T_t.forEach(t),mgr=r(v$e," (LayoutLM model)"),v$e.forEach(t),ggr=i(fe),aM=n(fe,"LI",{});var F$e=s(aM);s6e=n(F$e,"STRONG",{});var M_t=s(s6e);hgr=r(M_t,"longformer"),M_t.forEach(t),pgr=r(F$e," \u2014 "),hQ=n(F$e,"A",{href:!0});var E_t=s(hQ);ugr=r(E_t,"TFLongformerForMaskedLM"),E_t.forEach(t),_gr=r(F$e," (Longformer model)"),F$e.forEach(t),bgr=i(fe),nM=n(fe,"LI",{});var T$e=s(nM);l6e=n(T$e,"STRONG",{});var C_t=s(l6e);vgr=r(C_t,"mobilebert"),C_t.forEach(t),Fgr=r(T$e," \u2014 "),pQ=n(T$e,"A",{href:!0});var w_t=s(pQ);Tgr=r(w_t,"TFMobileBertForMaskedLM"),w_t.forEach(t),Mgr=r(T$e," (MobileBERT model)"),T$e.forEach(t),Egr=i(fe),sM=n(fe,"LI",{});var M$e=s(sM);i6e=n(M$e,"STRONG",{});var A_t=s(i6e);Cgr=r(A_t,"mpnet"),A_t.forEach(t),wgr=r(M$e," \u2014 "),uQ=n(M$e,"A",{href:!0});var y_t=s(uQ);Agr=r(y_t,"TFMPNetForMaskedLM"),y_t.forEach(t),ygr=r(M$e," (MPNet model)"),M$e.forEach(t),Lgr=i(fe),lM=n(fe,"LI",{});var E$e=s(lM);d6e=n(E$e,"STRONG",{});var L_t=s(d6e);xgr=r(L_t,"rembert"),L_t.forEach(t),$gr=r(E$e," \u2014 "),_Q=n(E$e,"A",{href:!0});var x_t=s(_Q);kgr=r(x_t,"TFRemBertForMaskedLM"),x_t.forEach(t),Sgr=r(E$e," (RemBERT model)"),E$e.forEach(t),Rgr=i(fe),iM=n(fe,"LI",{});var C$e=s(iM);c6e=n(C$e,"STRONG",{});var $_t=s(c6e);Bgr=r($_t,"roberta"),$_t.forEach(t),Pgr=r(C$e," \u2014 "),bQ=n(C$e,"A",{href:!0});var k_t=s(bQ);Igr=r(k_t,"TFRobertaForMaskedLM"),k_t.forEach(t),qgr=r(C$e," (RoBERTa model)"),C$e.forEach(t),Ngr=i(fe),dM=n(fe,"LI",{});var w$e=s(dM);f6e=n(w$e,"STRONG",{});var S_t=s(f6e);jgr=r(S_t,"roformer"),S_t.forEach(t),Dgr=r(w$e," \u2014 "),vQ=n(w$e,"A",{href:!0});var R_t=s(vQ);Ggr=r(R_t,"TFRoFormerForMaskedLM"),R_t.forEach(t),Ogr=r(w$e," (RoFormer model)"),w$e.forEach(t),Vgr=i(fe),cM=n(fe,"LI",{});var A$e=s(cM);m6e=n(A$e,"STRONG",{});var B_t=s(m6e);Xgr=r(B_t,"tapas"),B_t.forEach(t),zgr=r(A$e," \u2014 "),FQ=n(A$e,"A",{href:!0});var P_t=s(FQ);Qgr=r(P_t,"TFTapasForMaskedLM"),P_t.forEach(t),Wgr=r(A$e," (TAPAS model)"),A$e.forEach(t),Hgr=i(fe),fM=n(fe,"LI",{});var y$e=s(fM);g6e=n(y$e,"STRONG",{});var I_t=s(g6e);Ugr=r(I_t,"xlm"),I_t.forEach(t),Jgr=r(y$e," \u2014 "),TQ=n(y$e,"A",{href:!0});var q_t=s(TQ);Ygr=r(q_t,"TFXLMWithLMHeadModel"),q_t.forEach(t),Kgr=r(y$e," (XLM model)"),y$e.forEach(t),Zgr=i(fe),mM=n(fe,"LI",{});var L$e=s(mM);h6e=n(L$e,"STRONG",{});var N_t=s(h6e);ehr=r(N_t,"xlm-roberta"),N_t.forEach(t),ohr=r(L$e," \u2014 "),MQ=n(L$e,"A",{href:!0});var j_t=s(MQ);rhr=r(j_t,"TFXLMRobertaForMaskedLM"),j_t.forEach(t),thr=r(L$e," (XLM-RoBERTa model)"),L$e.forEach(t),fe.forEach(t),ahr=i(hl),T(gM.$$.fragment,hl),hl.forEach(t),gl.forEach(t),xPe=i(f),Wd=n(f,"H2",{class:!0});var Rqe=s(Wd);hM=n(Rqe,"A",{id:!0,class:!0,href:!0});var D_t=s(hM);p6e=n(D_t,"SPAN",{});var G_t=s(p6e);T($L.$$.fragment,G_t),G_t.forEach(t),D_t.forEach(t),nhr=i(Rqe),u6e=n(Rqe,"SPAN",{});var O_t=s(u6e);shr=r(O_t,"TFAutoModelForSeq2SeqLM"),O_t.forEach(t),Rqe.forEach(t),$Pe=i(f),rr=n(f,"DIV",{class:!0});var pl=s(rr);T(kL.$$.fragment,pl),lhr=i(pl),Hd=n(pl,"P",{});var vK=s(Hd);ihr=r(vK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),EQ=n(vK,"A",{href:!0});var V_t=s(EQ);dhr=r(V_t,"from_pretrained()"),V_t.forEach(t),chr=r(vK," class method or the "),CQ=n(vK,"A",{href:!0});var X_t=s(CQ);fhr=r(X_t,"from_config()"),X_t.forEach(t),mhr=r(vK,` class
method.`),vK.forEach(t),ghr=i(pl),SL=n(pl,"P",{});var Bqe=s(SL);hhr=r(Bqe,"This class cannot be instantiated directly using "),_6e=n(Bqe,"CODE",{});var z_t=s(_6e);phr=r(z_t,"__init__()"),z_t.forEach(t),uhr=r(Bqe," (throws an error)."),Bqe.forEach(t),_hr=i(pl),Lt=n(pl,"DIV",{class:!0});var Bw=s(Lt);T(RL.$$.fragment,Bw),bhr=i(Bw),b6e=n(Bw,"P",{});var Q_t=s(b6e);vhr=r(Q_t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Q_t.forEach(t),Fhr=i(Bw),Ud=n(Bw,"P",{});var FK=s(Ud);Thr=r(FK,`Note:
Loading a model from its configuration file does `),v6e=n(FK,"STRONG",{});var W_t=s(v6e);Mhr=r(W_t,"not"),W_t.forEach(t),Ehr=r(FK,` load the model weights. It only affects the
model\u2019s configuration. Use `),wQ=n(FK,"A",{href:!0});var H_t=s(wQ);Chr=r(H_t,"from_pretrained()"),H_t.forEach(t),whr=r(FK," to load the model weights."),FK.forEach(t),Ahr=i(Bw),T(pM.$$.fragment,Bw),Bw.forEach(t),yhr=i(pl),xr=n(pl,"DIV",{class:!0});var ul=s(xr);T(BL.$$.fragment,ul),Lhr=i(ul),F6e=n(ul,"P",{});var U_t=s(F6e);xhr=r(U_t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),U_t.forEach(t),$hr=i(ul),en=n(ul,"P",{});var Pw=s(en);khr=r(Pw,"The model class to instantiate is selected based on the "),T6e=n(Pw,"CODE",{});var J_t=s(T6e);Shr=r(J_t,"model_type"),J_t.forEach(t),Rhr=r(Pw,` property of the config object (either
passed as an argument or loaded from `),M6e=n(Pw,"CODE",{});var Y_t=s(M6e);Bhr=r(Y_t,"pretrained_model_name_or_path"),Y_t.forEach(t),Phr=r(Pw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E6e=n(Pw,"CODE",{});var K_t=s(E6e);Ihr=r(K_t,"pretrained_model_name_or_path"),K_t.forEach(t),qhr=r(Pw,":"),Pw.forEach(t),Nhr=i(ul),ye=n(ul,"UL",{});var Re=s(ye);uM=n(Re,"LI",{});var x$e=s(uM);C6e=n(x$e,"STRONG",{});var Z_t=s(C6e);jhr=r(Z_t,"bart"),Z_t.forEach(t),Dhr=r(x$e," \u2014 "),AQ=n(x$e,"A",{href:!0});var e2t=s(AQ);Ghr=r(e2t,"TFBartForConditionalGeneration"),e2t.forEach(t),Ohr=r(x$e," (BART model)"),x$e.forEach(t),Vhr=i(Re),_M=n(Re,"LI",{});var $$e=s(_M);w6e=n($$e,"STRONG",{});var o2t=s(w6e);Xhr=r(o2t,"blenderbot"),o2t.forEach(t),zhr=r($$e," \u2014 "),yQ=n($$e,"A",{href:!0});var r2t=s(yQ);Qhr=r(r2t,"TFBlenderbotForConditionalGeneration"),r2t.forEach(t),Whr=r($$e," (Blenderbot model)"),$$e.forEach(t),Hhr=i(Re),bM=n(Re,"LI",{});var k$e=s(bM);A6e=n(k$e,"STRONG",{});var t2t=s(A6e);Uhr=r(t2t,"blenderbot-small"),t2t.forEach(t),Jhr=r(k$e," \u2014 "),LQ=n(k$e,"A",{href:!0});var a2t=s(LQ);Yhr=r(a2t,"TFBlenderbotSmallForConditionalGeneration"),a2t.forEach(t),Khr=r(k$e," (BlenderbotSmall model)"),k$e.forEach(t),Zhr=i(Re),vM=n(Re,"LI",{});var S$e=s(vM);y6e=n(S$e,"STRONG",{});var n2t=s(y6e);epr=r(n2t,"encoder-decoder"),n2t.forEach(t),opr=r(S$e," \u2014 "),xQ=n(S$e,"A",{href:!0});var s2t=s(xQ);rpr=r(s2t,"TFEncoderDecoderModel"),s2t.forEach(t),tpr=r(S$e," (Encoder decoder model)"),S$e.forEach(t),apr=i(Re),FM=n(Re,"LI",{});var R$e=s(FM);L6e=n(R$e,"STRONG",{});var l2t=s(L6e);npr=r(l2t,"led"),l2t.forEach(t),spr=r(R$e," \u2014 "),$Q=n(R$e,"A",{href:!0});var i2t=s($Q);lpr=r(i2t,"TFLEDForConditionalGeneration"),i2t.forEach(t),ipr=r(R$e," (LED model)"),R$e.forEach(t),dpr=i(Re),TM=n(Re,"LI",{});var B$e=s(TM);x6e=n(B$e,"STRONG",{});var d2t=s(x6e);cpr=r(d2t,"marian"),d2t.forEach(t),fpr=r(B$e," \u2014 "),kQ=n(B$e,"A",{href:!0});var c2t=s(kQ);mpr=r(c2t,"TFMarianMTModel"),c2t.forEach(t),gpr=r(B$e," (Marian model)"),B$e.forEach(t),hpr=i(Re),MM=n(Re,"LI",{});var P$e=s(MM);$6e=n(P$e,"STRONG",{});var f2t=s($6e);ppr=r(f2t,"mbart"),f2t.forEach(t),upr=r(P$e," \u2014 "),SQ=n(P$e,"A",{href:!0});var m2t=s(SQ);_pr=r(m2t,"TFMBartForConditionalGeneration"),m2t.forEach(t),bpr=r(P$e," (mBART model)"),P$e.forEach(t),vpr=i(Re),EM=n(Re,"LI",{});var I$e=s(EM);k6e=n(I$e,"STRONG",{});var g2t=s(k6e);Fpr=r(g2t,"mt5"),g2t.forEach(t),Tpr=r(I$e," \u2014 "),RQ=n(I$e,"A",{href:!0});var h2t=s(RQ);Mpr=r(h2t,"TFMT5ForConditionalGeneration"),h2t.forEach(t),Epr=r(I$e," (mT5 model)"),I$e.forEach(t),Cpr=i(Re),CM=n(Re,"LI",{});var q$e=s(CM);S6e=n(q$e,"STRONG",{});var p2t=s(S6e);wpr=r(p2t,"pegasus"),p2t.forEach(t),Apr=r(q$e," \u2014 "),BQ=n(q$e,"A",{href:!0});var u2t=s(BQ);ypr=r(u2t,"TFPegasusForConditionalGeneration"),u2t.forEach(t),Lpr=r(q$e," (Pegasus model)"),q$e.forEach(t),xpr=i(Re),wM=n(Re,"LI",{});var N$e=s(wM);R6e=n(N$e,"STRONG",{});var _2t=s(R6e);$pr=r(_2t,"t5"),_2t.forEach(t),kpr=r(N$e," \u2014 "),PQ=n(N$e,"A",{href:!0});var b2t=s(PQ);Spr=r(b2t,"TFT5ForConditionalGeneration"),b2t.forEach(t),Rpr=r(N$e," (T5 model)"),N$e.forEach(t),Re.forEach(t),Bpr=i(ul),T(AM.$$.fragment,ul),ul.forEach(t),pl.forEach(t),kPe=i(f),Jd=n(f,"H2",{class:!0});var Pqe=s(Jd);yM=n(Pqe,"A",{id:!0,class:!0,href:!0});var v2t=s(yM);B6e=n(v2t,"SPAN",{});var F2t=s(B6e);T(PL.$$.fragment,F2t),F2t.forEach(t),v2t.forEach(t),Ppr=i(Pqe),P6e=n(Pqe,"SPAN",{});var T2t=s(P6e);Ipr=r(T2t,"TFAutoModelForSequenceClassification"),T2t.forEach(t),Pqe.forEach(t),SPe=i(f),tr=n(f,"DIV",{class:!0});var _l=s(tr);T(IL.$$.fragment,_l),qpr=i(_l),Yd=n(_l,"P",{});var TK=s(Yd);Npr=r(TK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),IQ=n(TK,"A",{href:!0});var M2t=s(IQ);jpr=r(M2t,"from_pretrained()"),M2t.forEach(t),Dpr=r(TK," class method or the "),qQ=n(TK,"A",{href:!0});var E2t=s(qQ);Gpr=r(E2t,"from_config()"),E2t.forEach(t),Opr=r(TK,` class
method.`),TK.forEach(t),Vpr=i(_l),qL=n(_l,"P",{});var Iqe=s(qL);Xpr=r(Iqe,"This class cannot be instantiated directly using "),I6e=n(Iqe,"CODE",{});var C2t=s(I6e);zpr=r(C2t,"__init__()"),C2t.forEach(t),Qpr=r(Iqe," (throws an error)."),Iqe.forEach(t),Wpr=i(_l),xt=n(_l,"DIV",{class:!0});var Iw=s(xt);T(NL.$$.fragment,Iw),Hpr=i(Iw),q6e=n(Iw,"P",{});var w2t=s(q6e);Upr=r(w2t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),w2t.forEach(t),Jpr=i(Iw),Kd=n(Iw,"P",{});var MK=s(Kd);Ypr=r(MK,`Note:
Loading a model from its configuration file does `),N6e=n(MK,"STRONG",{});var A2t=s(N6e);Kpr=r(A2t,"not"),A2t.forEach(t),Zpr=r(MK,` load the model weights. It only affects the
model\u2019s configuration. Use `),NQ=n(MK,"A",{href:!0});var y2t=s(NQ);eur=r(y2t,"from_pretrained()"),y2t.forEach(t),our=r(MK," to load the model weights."),MK.forEach(t),rur=i(Iw),T(LM.$$.fragment,Iw),Iw.forEach(t),tur=i(_l),$r=n(_l,"DIV",{class:!0});var bl=s($r);T(jL.$$.fragment,bl),aur=i(bl),j6e=n(bl,"P",{});var L2t=s(j6e);nur=r(L2t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),L2t.forEach(t),sur=i(bl),on=n(bl,"P",{});var qw=s(on);lur=r(qw,"The model class to instantiate is selected based on the "),D6e=n(qw,"CODE",{});var x2t=s(D6e);iur=r(x2t,"model_type"),x2t.forEach(t),dur=r(qw,` property of the config object (either
passed as an argument or loaded from `),G6e=n(qw,"CODE",{});var $2t=s(G6e);cur=r($2t,"pretrained_model_name_or_path"),$2t.forEach(t),fur=r(qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O6e=n(qw,"CODE",{});var k2t=s(O6e);mur=r(k2t,"pretrained_model_name_or_path"),k2t.forEach(t),gur=r(qw,":"),qw.forEach(t),hur=i(bl),Z=n(bl,"UL",{});var re=s(Z);xM=n(re,"LI",{});var j$e=s(xM);V6e=n(j$e,"STRONG",{});var S2t=s(V6e);pur=r(S2t,"albert"),S2t.forEach(t),uur=r(j$e," \u2014 "),jQ=n(j$e,"A",{href:!0});var R2t=s(jQ);_ur=r(R2t,"TFAlbertForSequenceClassification"),R2t.forEach(t),bur=r(j$e," (ALBERT model)"),j$e.forEach(t),vur=i(re),$M=n(re,"LI",{});var D$e=s($M);X6e=n(D$e,"STRONG",{});var B2t=s(X6e);Fur=r(B2t,"bert"),B2t.forEach(t),Tur=r(D$e," \u2014 "),DQ=n(D$e,"A",{href:!0});var P2t=s(DQ);Mur=r(P2t,"TFBertForSequenceClassification"),P2t.forEach(t),Eur=r(D$e," (BERT model)"),D$e.forEach(t),Cur=i(re),kM=n(re,"LI",{});var G$e=s(kM);z6e=n(G$e,"STRONG",{});var I2t=s(z6e);wur=r(I2t,"camembert"),I2t.forEach(t),Aur=r(G$e," \u2014 "),GQ=n(G$e,"A",{href:!0});var q2t=s(GQ);yur=r(q2t,"TFCamembertForSequenceClassification"),q2t.forEach(t),Lur=r(G$e," (CamemBERT model)"),G$e.forEach(t),xur=i(re),SM=n(re,"LI",{});var O$e=s(SM);Q6e=n(O$e,"STRONG",{});var N2t=s(Q6e);$ur=r(N2t,"convbert"),N2t.forEach(t),kur=r(O$e," \u2014 "),OQ=n(O$e,"A",{href:!0});var j2t=s(OQ);Sur=r(j2t,"TFConvBertForSequenceClassification"),j2t.forEach(t),Rur=r(O$e," (ConvBERT model)"),O$e.forEach(t),Bur=i(re),RM=n(re,"LI",{});var V$e=s(RM);W6e=n(V$e,"STRONG",{});var D2t=s(W6e);Pur=r(D2t,"ctrl"),D2t.forEach(t),Iur=r(V$e," \u2014 "),VQ=n(V$e,"A",{href:!0});var G2t=s(VQ);qur=r(G2t,"TFCTRLForSequenceClassification"),G2t.forEach(t),Nur=r(V$e," (CTRL model)"),V$e.forEach(t),jur=i(re),BM=n(re,"LI",{});var X$e=s(BM);H6e=n(X$e,"STRONG",{});var O2t=s(H6e);Dur=r(O2t,"deberta"),O2t.forEach(t),Gur=r(X$e," \u2014 "),XQ=n(X$e,"A",{href:!0});var V2t=s(XQ);Our=r(V2t,"TFDebertaForSequenceClassification"),V2t.forEach(t),Vur=r(X$e," (DeBERTa model)"),X$e.forEach(t),Xur=i(re),PM=n(re,"LI",{});var z$e=s(PM);U6e=n(z$e,"STRONG",{});var X2t=s(U6e);zur=r(X2t,"deberta-v2"),X2t.forEach(t),Qur=r(z$e," \u2014 "),zQ=n(z$e,"A",{href:!0});var z2t=s(zQ);Wur=r(z2t,"TFDebertaV2ForSequenceClassification"),z2t.forEach(t),Hur=r(z$e," (DeBERTa-v2 model)"),z$e.forEach(t),Uur=i(re),IM=n(re,"LI",{});var Q$e=s(IM);J6e=n(Q$e,"STRONG",{});var Q2t=s(J6e);Jur=r(Q2t,"distilbert"),Q2t.forEach(t),Yur=r(Q$e," \u2014 "),QQ=n(Q$e,"A",{href:!0});var W2t=s(QQ);Kur=r(W2t,"TFDistilBertForSequenceClassification"),W2t.forEach(t),Zur=r(Q$e," (DistilBERT model)"),Q$e.forEach(t),e_r=i(re),qM=n(re,"LI",{});var W$e=s(qM);Y6e=n(W$e,"STRONG",{});var H2t=s(Y6e);o_r=r(H2t,"electra"),H2t.forEach(t),r_r=r(W$e," \u2014 "),WQ=n(W$e,"A",{href:!0});var U2t=s(WQ);t_r=r(U2t,"TFElectraForSequenceClassification"),U2t.forEach(t),a_r=r(W$e," (ELECTRA model)"),W$e.forEach(t),n_r=i(re),NM=n(re,"LI",{});var H$e=s(NM);K6e=n(H$e,"STRONG",{});var J2t=s(K6e);s_r=r(J2t,"flaubert"),J2t.forEach(t),l_r=r(H$e," \u2014 "),HQ=n(H$e,"A",{href:!0});var Y2t=s(HQ);i_r=r(Y2t,"TFFlaubertForSequenceClassification"),Y2t.forEach(t),d_r=r(H$e," (FlauBERT model)"),H$e.forEach(t),c_r=i(re),jM=n(re,"LI",{});var U$e=s(jM);Z6e=n(U$e,"STRONG",{});var K2t=s(Z6e);f_r=r(K2t,"funnel"),K2t.forEach(t),m_r=r(U$e," \u2014 "),UQ=n(U$e,"A",{href:!0});var Z2t=s(UQ);g_r=r(Z2t,"TFFunnelForSequenceClassification"),Z2t.forEach(t),h_r=r(U$e," (Funnel Transformer model)"),U$e.forEach(t),p_r=i(re),DM=n(re,"LI",{});var J$e=s(DM);e1e=n(J$e,"STRONG",{});var e6t=s(e1e);u_r=r(e6t,"gpt2"),e6t.forEach(t),__r=r(J$e," \u2014 "),JQ=n(J$e,"A",{href:!0});var o6t=s(JQ);b_r=r(o6t,"TFGPT2ForSequenceClassification"),o6t.forEach(t),v_r=r(J$e," (OpenAI GPT-2 model)"),J$e.forEach(t),F_r=i(re),GM=n(re,"LI",{});var Y$e=s(GM);o1e=n(Y$e,"STRONG",{});var r6t=s(o1e);T_r=r(r6t,"gptj"),r6t.forEach(t),M_r=r(Y$e," \u2014 "),YQ=n(Y$e,"A",{href:!0});var t6t=s(YQ);E_r=r(t6t,"TFGPTJForSequenceClassification"),t6t.forEach(t),C_r=r(Y$e," (GPT-J model)"),Y$e.forEach(t),w_r=i(re),OM=n(re,"LI",{});var K$e=s(OM);r1e=n(K$e,"STRONG",{});var a6t=s(r1e);A_r=r(a6t,"layoutlm"),a6t.forEach(t),y_r=r(K$e," \u2014 "),KQ=n(K$e,"A",{href:!0});var n6t=s(KQ);L_r=r(n6t,"TFLayoutLMForSequenceClassification"),n6t.forEach(t),x_r=r(K$e," (LayoutLM model)"),K$e.forEach(t),$_r=i(re),VM=n(re,"LI",{});var Z$e=s(VM);t1e=n(Z$e,"STRONG",{});var s6t=s(t1e);k_r=r(s6t,"longformer"),s6t.forEach(t),S_r=r(Z$e," \u2014 "),ZQ=n(Z$e,"A",{href:!0});var l6t=s(ZQ);R_r=r(l6t,"TFLongformerForSequenceClassification"),l6t.forEach(t),B_r=r(Z$e," (Longformer model)"),Z$e.forEach(t),P_r=i(re),XM=n(re,"LI",{});var eke=s(XM);a1e=n(eke,"STRONG",{});var i6t=s(a1e);I_r=r(i6t,"mobilebert"),i6t.forEach(t),q_r=r(eke," \u2014 "),eW=n(eke,"A",{href:!0});var d6t=s(eW);N_r=r(d6t,"TFMobileBertForSequenceClassification"),d6t.forEach(t),j_r=r(eke," (MobileBERT model)"),eke.forEach(t),D_r=i(re),zM=n(re,"LI",{});var oke=s(zM);n1e=n(oke,"STRONG",{});var c6t=s(n1e);G_r=r(c6t,"mpnet"),c6t.forEach(t),O_r=r(oke," \u2014 "),oW=n(oke,"A",{href:!0});var f6t=s(oW);V_r=r(f6t,"TFMPNetForSequenceClassification"),f6t.forEach(t),X_r=r(oke," (MPNet model)"),oke.forEach(t),z_r=i(re),QM=n(re,"LI",{});var rke=s(QM);s1e=n(rke,"STRONG",{});var m6t=s(s1e);Q_r=r(m6t,"openai-gpt"),m6t.forEach(t),W_r=r(rke," \u2014 "),rW=n(rke,"A",{href:!0});var g6t=s(rW);H_r=r(g6t,"TFOpenAIGPTForSequenceClassification"),g6t.forEach(t),U_r=r(rke," (OpenAI GPT model)"),rke.forEach(t),J_r=i(re),WM=n(re,"LI",{});var tke=s(WM);l1e=n(tke,"STRONG",{});var h6t=s(l1e);Y_r=r(h6t,"rembert"),h6t.forEach(t),K_r=r(tke," \u2014 "),tW=n(tke,"A",{href:!0});var p6t=s(tW);Z_r=r(p6t,"TFRemBertForSequenceClassification"),p6t.forEach(t),e2r=r(tke," (RemBERT model)"),tke.forEach(t),o2r=i(re),HM=n(re,"LI",{});var ake=s(HM);i1e=n(ake,"STRONG",{});var u6t=s(i1e);r2r=r(u6t,"roberta"),u6t.forEach(t),t2r=r(ake," \u2014 "),aW=n(ake,"A",{href:!0});var _6t=s(aW);a2r=r(_6t,"TFRobertaForSequenceClassification"),_6t.forEach(t),n2r=r(ake," (RoBERTa model)"),ake.forEach(t),s2r=i(re),UM=n(re,"LI",{});var nke=s(UM);d1e=n(nke,"STRONG",{});var b6t=s(d1e);l2r=r(b6t,"roformer"),b6t.forEach(t),i2r=r(nke," \u2014 "),nW=n(nke,"A",{href:!0});var v6t=s(nW);d2r=r(v6t,"TFRoFormerForSequenceClassification"),v6t.forEach(t),c2r=r(nke," (RoFormer model)"),nke.forEach(t),f2r=i(re),JM=n(re,"LI",{});var ske=s(JM);c1e=n(ske,"STRONG",{});var F6t=s(c1e);m2r=r(F6t,"tapas"),F6t.forEach(t),g2r=r(ske," \u2014 "),sW=n(ske,"A",{href:!0});var T6t=s(sW);h2r=r(T6t,"TFTapasForSequenceClassification"),T6t.forEach(t),p2r=r(ske," (TAPAS model)"),ske.forEach(t),u2r=i(re),YM=n(re,"LI",{});var lke=s(YM);f1e=n(lke,"STRONG",{});var M6t=s(f1e);_2r=r(M6t,"transfo-xl"),M6t.forEach(t),b2r=r(lke," \u2014 "),lW=n(lke,"A",{href:!0});var E6t=s(lW);v2r=r(E6t,"TFTransfoXLForSequenceClassification"),E6t.forEach(t),F2r=r(lke," (Transformer-XL model)"),lke.forEach(t),T2r=i(re),KM=n(re,"LI",{});var ike=s(KM);m1e=n(ike,"STRONG",{});var C6t=s(m1e);M2r=r(C6t,"xlm"),C6t.forEach(t),E2r=r(ike," \u2014 "),iW=n(ike,"A",{href:!0});var w6t=s(iW);C2r=r(w6t,"TFXLMForSequenceClassification"),w6t.forEach(t),w2r=r(ike," (XLM model)"),ike.forEach(t),A2r=i(re),ZM=n(re,"LI",{});var dke=s(ZM);g1e=n(dke,"STRONG",{});var A6t=s(g1e);y2r=r(A6t,"xlm-roberta"),A6t.forEach(t),L2r=r(dke," \u2014 "),dW=n(dke,"A",{href:!0});var y6t=s(dW);x2r=r(y6t,"TFXLMRobertaForSequenceClassification"),y6t.forEach(t),$2r=r(dke," (XLM-RoBERTa model)"),dke.forEach(t),k2r=i(re),e4=n(re,"LI",{});var cke=s(e4);h1e=n(cke,"STRONG",{});var L6t=s(h1e);S2r=r(L6t,"xlnet"),L6t.forEach(t),R2r=r(cke," \u2014 "),cW=n(cke,"A",{href:!0});var x6t=s(cW);B2r=r(x6t,"TFXLNetForSequenceClassification"),x6t.forEach(t),P2r=r(cke," (XLNet model)"),cke.forEach(t),re.forEach(t),I2r=i(bl),T(o4.$$.fragment,bl),bl.forEach(t),_l.forEach(t),RPe=i(f),Zd=n(f,"H2",{class:!0});var qqe=s(Zd);r4=n(qqe,"A",{id:!0,class:!0,href:!0});var $6t=s(r4);p1e=n($6t,"SPAN",{});var k6t=s(p1e);T(DL.$$.fragment,k6t),k6t.forEach(t),$6t.forEach(t),q2r=i(qqe),u1e=n(qqe,"SPAN",{});var S6t=s(u1e);N2r=r(S6t,"TFAutoModelForMultipleChoice"),S6t.forEach(t),qqe.forEach(t),BPe=i(f),ar=n(f,"DIV",{class:!0});var vl=s(ar);T(GL.$$.fragment,vl),j2r=i(vl),ec=n(vl,"P",{});var EK=s(ec);D2r=r(EK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),fW=n(EK,"A",{href:!0});var R6t=s(fW);G2r=r(R6t,"from_pretrained()"),R6t.forEach(t),O2r=r(EK," class method or the "),mW=n(EK,"A",{href:!0});var B6t=s(mW);V2r=r(B6t,"from_config()"),B6t.forEach(t),X2r=r(EK,` class
method.`),EK.forEach(t),z2r=i(vl),OL=n(vl,"P",{});var Nqe=s(OL);Q2r=r(Nqe,"This class cannot be instantiated directly using "),_1e=n(Nqe,"CODE",{});var P6t=s(_1e);W2r=r(P6t,"__init__()"),P6t.forEach(t),H2r=r(Nqe," (throws an error)."),Nqe.forEach(t),U2r=i(vl),$t=n(vl,"DIV",{class:!0});var Nw=s($t);T(VL.$$.fragment,Nw),J2r=i(Nw),b1e=n(Nw,"P",{});var I6t=s(b1e);Y2r=r(I6t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),I6t.forEach(t),K2r=i(Nw),oc=n(Nw,"P",{});var CK=s(oc);Z2r=r(CK,`Note:
Loading a model from its configuration file does `),v1e=n(CK,"STRONG",{});var q6t=s(v1e);e6r=r(q6t,"not"),q6t.forEach(t),o6r=r(CK,` load the model weights. It only affects the
model\u2019s configuration. Use `),gW=n(CK,"A",{href:!0});var N6t=s(gW);r6r=r(N6t,"from_pretrained()"),N6t.forEach(t),t6r=r(CK," to load the model weights."),CK.forEach(t),a6r=i(Nw),T(t4.$$.fragment,Nw),Nw.forEach(t),n6r=i(vl),kr=n(vl,"DIV",{class:!0});var Fl=s(kr);T(XL.$$.fragment,Fl),s6r=i(Fl),F1e=n(Fl,"P",{});var j6t=s(F1e);l6r=r(j6t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),j6t.forEach(t),i6r=i(Fl),rn=n(Fl,"P",{});var jw=s(rn);d6r=r(jw,"The model class to instantiate is selected based on the "),T1e=n(jw,"CODE",{});var D6t=s(T1e);c6r=r(D6t,"model_type"),D6t.forEach(t),f6r=r(jw,` property of the config object (either
passed as an argument or loaded from `),M1e=n(jw,"CODE",{});var G6t=s(M1e);m6r=r(G6t,"pretrained_model_name_or_path"),G6t.forEach(t),g6r=r(jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E1e=n(jw,"CODE",{});var O6t=s(E1e);h6r=r(O6t,"pretrained_model_name_or_path"),O6t.forEach(t),p6r=r(jw,":"),jw.forEach(t),u6r=i(Fl),pe=n(Fl,"UL",{});var _e=s(pe);a4=n(_e,"LI",{});var fke=s(a4);C1e=n(fke,"STRONG",{});var V6t=s(C1e);_6r=r(V6t,"albert"),V6t.forEach(t),b6r=r(fke," \u2014 "),hW=n(fke,"A",{href:!0});var X6t=s(hW);v6r=r(X6t,"TFAlbertForMultipleChoice"),X6t.forEach(t),F6r=r(fke," (ALBERT model)"),fke.forEach(t),T6r=i(_e),n4=n(_e,"LI",{});var mke=s(n4);w1e=n(mke,"STRONG",{});var z6t=s(w1e);M6r=r(z6t,"bert"),z6t.forEach(t),E6r=r(mke," \u2014 "),pW=n(mke,"A",{href:!0});var Q6t=s(pW);C6r=r(Q6t,"TFBertForMultipleChoice"),Q6t.forEach(t),w6r=r(mke," (BERT model)"),mke.forEach(t),A6r=i(_e),s4=n(_e,"LI",{});var gke=s(s4);A1e=n(gke,"STRONG",{});var W6t=s(A1e);y6r=r(W6t,"camembert"),W6t.forEach(t),L6r=r(gke," \u2014 "),uW=n(gke,"A",{href:!0});var H6t=s(uW);x6r=r(H6t,"TFCamembertForMultipleChoice"),H6t.forEach(t),$6r=r(gke," (CamemBERT model)"),gke.forEach(t),k6r=i(_e),l4=n(_e,"LI",{});var hke=s(l4);y1e=n(hke,"STRONG",{});var U6t=s(y1e);S6r=r(U6t,"convbert"),U6t.forEach(t),R6r=r(hke," \u2014 "),_W=n(hke,"A",{href:!0});var J6t=s(_W);B6r=r(J6t,"TFConvBertForMultipleChoice"),J6t.forEach(t),P6r=r(hke," (ConvBERT model)"),hke.forEach(t),I6r=i(_e),i4=n(_e,"LI",{});var pke=s(i4);L1e=n(pke,"STRONG",{});var Y6t=s(L1e);q6r=r(Y6t,"distilbert"),Y6t.forEach(t),N6r=r(pke," \u2014 "),bW=n(pke,"A",{href:!0});var K6t=s(bW);j6r=r(K6t,"TFDistilBertForMultipleChoice"),K6t.forEach(t),D6r=r(pke," (DistilBERT model)"),pke.forEach(t),G6r=i(_e),d4=n(_e,"LI",{});var uke=s(d4);x1e=n(uke,"STRONG",{});var Z6t=s(x1e);O6r=r(Z6t,"electra"),Z6t.forEach(t),V6r=r(uke," \u2014 "),vW=n(uke,"A",{href:!0});var e1t=s(vW);X6r=r(e1t,"TFElectraForMultipleChoice"),e1t.forEach(t),z6r=r(uke," (ELECTRA model)"),uke.forEach(t),Q6r=i(_e),c4=n(_e,"LI",{});var _ke=s(c4);$1e=n(_ke,"STRONG",{});var o1t=s($1e);W6r=r(o1t,"flaubert"),o1t.forEach(t),H6r=r(_ke," \u2014 "),FW=n(_ke,"A",{href:!0});var r1t=s(FW);U6r=r(r1t,"TFFlaubertForMultipleChoice"),r1t.forEach(t),J6r=r(_ke," (FlauBERT model)"),_ke.forEach(t),Y6r=i(_e),f4=n(_e,"LI",{});var bke=s(f4);k1e=n(bke,"STRONG",{});var t1t=s(k1e);K6r=r(t1t,"funnel"),t1t.forEach(t),Z6r=r(bke," \u2014 "),TW=n(bke,"A",{href:!0});var a1t=s(TW);e1r=r(a1t,"TFFunnelForMultipleChoice"),a1t.forEach(t),o1r=r(bke," (Funnel Transformer model)"),bke.forEach(t),r1r=i(_e),m4=n(_e,"LI",{});var vke=s(m4);S1e=n(vke,"STRONG",{});var n1t=s(S1e);t1r=r(n1t,"longformer"),n1t.forEach(t),a1r=r(vke," \u2014 "),MW=n(vke,"A",{href:!0});var s1t=s(MW);n1r=r(s1t,"TFLongformerForMultipleChoice"),s1t.forEach(t),s1r=r(vke," (Longformer model)"),vke.forEach(t),l1r=i(_e),g4=n(_e,"LI",{});var Fke=s(g4);R1e=n(Fke,"STRONG",{});var l1t=s(R1e);i1r=r(l1t,"mobilebert"),l1t.forEach(t),d1r=r(Fke," \u2014 "),EW=n(Fke,"A",{href:!0});var i1t=s(EW);c1r=r(i1t,"TFMobileBertForMultipleChoice"),i1t.forEach(t),f1r=r(Fke," (MobileBERT model)"),Fke.forEach(t),m1r=i(_e),h4=n(_e,"LI",{});var Tke=s(h4);B1e=n(Tke,"STRONG",{});var d1t=s(B1e);g1r=r(d1t,"mpnet"),d1t.forEach(t),h1r=r(Tke," \u2014 "),CW=n(Tke,"A",{href:!0});var c1t=s(CW);p1r=r(c1t,"TFMPNetForMultipleChoice"),c1t.forEach(t),u1r=r(Tke," (MPNet model)"),Tke.forEach(t),_1r=i(_e),p4=n(_e,"LI",{});var Mke=s(p4);P1e=n(Mke,"STRONG",{});var f1t=s(P1e);b1r=r(f1t,"rembert"),f1t.forEach(t),v1r=r(Mke," \u2014 "),wW=n(Mke,"A",{href:!0});var m1t=s(wW);F1r=r(m1t,"TFRemBertForMultipleChoice"),m1t.forEach(t),T1r=r(Mke," (RemBERT model)"),Mke.forEach(t),M1r=i(_e),u4=n(_e,"LI",{});var Eke=s(u4);I1e=n(Eke,"STRONG",{});var g1t=s(I1e);E1r=r(g1t,"roberta"),g1t.forEach(t),C1r=r(Eke," \u2014 "),AW=n(Eke,"A",{href:!0});var h1t=s(AW);w1r=r(h1t,"TFRobertaForMultipleChoice"),h1t.forEach(t),A1r=r(Eke," (RoBERTa model)"),Eke.forEach(t),y1r=i(_e),_4=n(_e,"LI",{});var Cke=s(_4);q1e=n(Cke,"STRONG",{});var p1t=s(q1e);L1r=r(p1t,"roformer"),p1t.forEach(t),x1r=r(Cke," \u2014 "),yW=n(Cke,"A",{href:!0});var u1t=s(yW);$1r=r(u1t,"TFRoFormerForMultipleChoice"),u1t.forEach(t),k1r=r(Cke," (RoFormer model)"),Cke.forEach(t),S1r=i(_e),b4=n(_e,"LI",{});var wke=s(b4);N1e=n(wke,"STRONG",{});var _1t=s(N1e);R1r=r(_1t,"xlm"),_1t.forEach(t),B1r=r(wke," \u2014 "),LW=n(wke,"A",{href:!0});var b1t=s(LW);P1r=r(b1t,"TFXLMForMultipleChoice"),b1t.forEach(t),I1r=r(wke," (XLM model)"),wke.forEach(t),q1r=i(_e),v4=n(_e,"LI",{});var Ake=s(v4);j1e=n(Ake,"STRONG",{});var v1t=s(j1e);N1r=r(v1t,"xlm-roberta"),v1t.forEach(t),j1r=r(Ake," \u2014 "),xW=n(Ake,"A",{href:!0});var F1t=s(xW);D1r=r(F1t,"TFXLMRobertaForMultipleChoice"),F1t.forEach(t),G1r=r(Ake," (XLM-RoBERTa model)"),Ake.forEach(t),O1r=i(_e),F4=n(_e,"LI",{});var yke=s(F4);D1e=n(yke,"STRONG",{});var T1t=s(D1e);V1r=r(T1t,"xlnet"),T1t.forEach(t),X1r=r(yke," \u2014 "),$W=n(yke,"A",{href:!0});var M1t=s($W);z1r=r(M1t,"TFXLNetForMultipleChoice"),M1t.forEach(t),Q1r=r(yke," (XLNet model)"),yke.forEach(t),_e.forEach(t),W1r=i(Fl),T(T4.$$.fragment,Fl),Fl.forEach(t),vl.forEach(t),PPe=i(f),rc=n(f,"H2",{class:!0});var jqe=s(rc);M4=n(jqe,"A",{id:!0,class:!0,href:!0});var E1t=s(M4);G1e=n(E1t,"SPAN",{});var C1t=s(G1e);T(zL.$$.fragment,C1t),C1t.forEach(t),E1t.forEach(t),H1r=i(jqe),O1e=n(jqe,"SPAN",{});var w1t=s(O1e);U1r=r(w1t,"TFAutoModelForTableQuestionAnswering"),w1t.forEach(t),jqe.forEach(t),IPe=i(f),nr=n(f,"DIV",{class:!0});var Tl=s(nr);T(QL.$$.fragment,Tl),J1r=i(Tl),tc=n(Tl,"P",{});var wK=s(tc);Y1r=r(wK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),kW=n(wK,"A",{href:!0});var A1t=s(kW);K1r=r(A1t,"from_pretrained()"),A1t.forEach(t),Z1r=r(wK," class method or the "),SW=n(wK,"A",{href:!0});var y1t=s(SW);ebr=r(y1t,"from_config()"),y1t.forEach(t),obr=r(wK,` class
method.`),wK.forEach(t),rbr=i(Tl),WL=n(Tl,"P",{});var Dqe=s(WL);tbr=r(Dqe,"This class cannot be instantiated directly using "),V1e=n(Dqe,"CODE",{});var L1t=s(V1e);abr=r(L1t,"__init__()"),L1t.forEach(t),nbr=r(Dqe," (throws an error)."),Dqe.forEach(t),sbr=i(Tl),kt=n(Tl,"DIV",{class:!0});var Dw=s(kt);T(HL.$$.fragment,Dw),lbr=i(Dw),X1e=n(Dw,"P",{});var x1t=s(X1e);ibr=r(x1t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),x1t.forEach(t),dbr=i(Dw),ac=n(Dw,"P",{});var AK=s(ac);cbr=r(AK,`Note:
Loading a model from its configuration file does `),z1e=n(AK,"STRONG",{});var $1t=s(z1e);fbr=r($1t,"not"),$1t.forEach(t),mbr=r(AK,` load the model weights. It only affects the
model\u2019s configuration. Use `),RW=n(AK,"A",{href:!0});var k1t=s(RW);gbr=r(k1t,"from_pretrained()"),k1t.forEach(t),hbr=r(AK," to load the model weights."),AK.forEach(t),pbr=i(Dw),T(E4.$$.fragment,Dw),Dw.forEach(t),ubr=i(Tl),Sr=n(Tl,"DIV",{class:!0});var Ml=s(Sr);T(UL.$$.fragment,Ml),_br=i(Ml),Q1e=n(Ml,"P",{});var S1t=s(Q1e);bbr=r(S1t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),S1t.forEach(t),vbr=i(Ml),tn=n(Ml,"P",{});var Gw=s(tn);Fbr=r(Gw,"The model class to instantiate is selected based on the "),W1e=n(Gw,"CODE",{});var R1t=s(W1e);Tbr=r(R1t,"model_type"),R1t.forEach(t),Mbr=r(Gw,` property of the config object (either
passed as an argument or loaded from `),H1e=n(Gw,"CODE",{});var B1t=s(H1e);Ebr=r(B1t,"pretrained_model_name_or_path"),B1t.forEach(t),Cbr=r(Gw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U1e=n(Gw,"CODE",{});var P1t=s(U1e);wbr=r(P1t,"pretrained_model_name_or_path"),P1t.forEach(t),Abr=r(Gw,":"),Gw.forEach(t),ybr=i(Ml),J1e=n(Ml,"UL",{});var I1t=s(J1e);C4=n(I1t,"LI",{});var Lke=s(C4);Y1e=n(Lke,"STRONG",{});var q1t=s(Y1e);Lbr=r(q1t,"tapas"),q1t.forEach(t),xbr=r(Lke," \u2014 "),BW=n(Lke,"A",{href:!0});var N1t=s(BW);$br=r(N1t,"TFTapasForQuestionAnswering"),N1t.forEach(t),kbr=r(Lke," (TAPAS model)"),Lke.forEach(t),I1t.forEach(t),Sbr=i(Ml),T(w4.$$.fragment,Ml),Ml.forEach(t),Tl.forEach(t),qPe=i(f),nc=n(f,"H2",{class:!0});var Gqe=s(nc);A4=n(Gqe,"A",{id:!0,class:!0,href:!0});var j1t=s(A4);K1e=n(j1t,"SPAN",{});var D1t=s(K1e);T(JL.$$.fragment,D1t),D1t.forEach(t),j1t.forEach(t),Rbr=i(Gqe),Z1e=n(Gqe,"SPAN",{});var G1t=s(Z1e);Bbr=r(G1t,"TFAutoModelForTokenClassification"),G1t.forEach(t),Gqe.forEach(t),NPe=i(f),sr=n(f,"DIV",{class:!0});var El=s(sr);T(YL.$$.fragment,El),Pbr=i(El),sc=n(El,"P",{});var yK=s(sc);Ibr=r(yK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),PW=n(yK,"A",{href:!0});var O1t=s(PW);qbr=r(O1t,"from_pretrained()"),O1t.forEach(t),Nbr=r(yK," class method or the "),IW=n(yK,"A",{href:!0});var V1t=s(IW);jbr=r(V1t,"from_config()"),V1t.forEach(t),Dbr=r(yK,` class
method.`),yK.forEach(t),Gbr=i(El),KL=n(El,"P",{});var Oqe=s(KL);Obr=r(Oqe,"This class cannot be instantiated directly using "),ebe=n(Oqe,"CODE",{});var X1t=s(ebe);Vbr=r(X1t,"__init__()"),X1t.forEach(t),Xbr=r(Oqe," (throws an error)."),Oqe.forEach(t),zbr=i(El),St=n(El,"DIV",{class:!0});var Ow=s(St);T(ZL.$$.fragment,Ow),Qbr=i(Ow),obe=n(Ow,"P",{});var z1t=s(obe);Wbr=r(z1t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),z1t.forEach(t),Hbr=i(Ow),lc=n(Ow,"P",{});var LK=s(lc);Ubr=r(LK,`Note:
Loading a model from its configuration file does `),rbe=n(LK,"STRONG",{});var Q1t=s(rbe);Jbr=r(Q1t,"not"),Q1t.forEach(t),Ybr=r(LK,` load the model weights. It only affects the
model\u2019s configuration. Use `),qW=n(LK,"A",{href:!0});var W1t=s(qW);Kbr=r(W1t,"from_pretrained()"),W1t.forEach(t),Zbr=r(LK," to load the model weights."),LK.forEach(t),evr=i(Ow),T(y4.$$.fragment,Ow),Ow.forEach(t),ovr=i(El),Rr=n(El,"DIV",{class:!0});var Cl=s(Rr);T(e7.$$.fragment,Cl),rvr=i(Cl),tbe=n(Cl,"P",{});var H1t=s(tbe);tvr=r(H1t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),H1t.forEach(t),avr=i(Cl),an=n(Cl,"P",{});var Vw=s(an);nvr=r(Vw,"The model class to instantiate is selected based on the "),abe=n(Vw,"CODE",{});var U1t=s(abe);svr=r(U1t,"model_type"),U1t.forEach(t),lvr=r(Vw,` property of the config object (either
passed as an argument or loaded from `),nbe=n(Vw,"CODE",{});var J1t=s(nbe);ivr=r(J1t,"pretrained_model_name_or_path"),J1t.forEach(t),dvr=r(Vw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sbe=n(Vw,"CODE",{});var Y1t=s(sbe);cvr=r(Y1t,"pretrained_model_name_or_path"),Y1t.forEach(t),fvr=r(Vw,":"),Vw.forEach(t),mvr=i(Cl),de=n(Cl,"UL",{});var me=s(de);L4=n(me,"LI",{});var xke=s(L4);lbe=n(xke,"STRONG",{});var K1t=s(lbe);gvr=r(K1t,"albert"),K1t.forEach(t),hvr=r(xke," \u2014 "),NW=n(xke,"A",{href:!0});var Z1t=s(NW);pvr=r(Z1t,"TFAlbertForTokenClassification"),Z1t.forEach(t),uvr=r(xke," (ALBERT model)"),xke.forEach(t),_vr=i(me),x4=n(me,"LI",{});var $ke=s(x4);ibe=n($ke,"STRONG",{});var ebt=s(ibe);bvr=r(ebt,"bert"),ebt.forEach(t),vvr=r($ke," \u2014 "),jW=n($ke,"A",{href:!0});var obt=s(jW);Fvr=r(obt,"TFBertForTokenClassification"),obt.forEach(t),Tvr=r($ke," (BERT model)"),$ke.forEach(t),Mvr=i(me),$4=n(me,"LI",{});var kke=s($4);dbe=n(kke,"STRONG",{});var rbt=s(dbe);Evr=r(rbt,"camembert"),rbt.forEach(t),Cvr=r(kke," \u2014 "),DW=n(kke,"A",{href:!0});var tbt=s(DW);wvr=r(tbt,"TFCamembertForTokenClassification"),tbt.forEach(t),Avr=r(kke," (CamemBERT model)"),kke.forEach(t),yvr=i(me),k4=n(me,"LI",{});var Ske=s(k4);cbe=n(Ske,"STRONG",{});var abt=s(cbe);Lvr=r(abt,"convbert"),abt.forEach(t),xvr=r(Ske," \u2014 "),GW=n(Ske,"A",{href:!0});var nbt=s(GW);$vr=r(nbt,"TFConvBertForTokenClassification"),nbt.forEach(t),kvr=r(Ske," (ConvBERT model)"),Ske.forEach(t),Svr=i(me),S4=n(me,"LI",{});var Rke=s(S4);fbe=n(Rke,"STRONG",{});var sbt=s(fbe);Rvr=r(sbt,"deberta"),sbt.forEach(t),Bvr=r(Rke," \u2014 "),OW=n(Rke,"A",{href:!0});var lbt=s(OW);Pvr=r(lbt,"TFDebertaForTokenClassification"),lbt.forEach(t),Ivr=r(Rke," (DeBERTa model)"),Rke.forEach(t),qvr=i(me),R4=n(me,"LI",{});var Bke=s(R4);mbe=n(Bke,"STRONG",{});var ibt=s(mbe);Nvr=r(ibt,"deberta-v2"),ibt.forEach(t),jvr=r(Bke," \u2014 "),VW=n(Bke,"A",{href:!0});var dbt=s(VW);Dvr=r(dbt,"TFDebertaV2ForTokenClassification"),dbt.forEach(t),Gvr=r(Bke," (DeBERTa-v2 model)"),Bke.forEach(t),Ovr=i(me),B4=n(me,"LI",{});var Pke=s(B4);gbe=n(Pke,"STRONG",{});var cbt=s(gbe);Vvr=r(cbt,"distilbert"),cbt.forEach(t),Xvr=r(Pke," \u2014 "),XW=n(Pke,"A",{href:!0});var fbt=s(XW);zvr=r(fbt,"TFDistilBertForTokenClassification"),fbt.forEach(t),Qvr=r(Pke," (DistilBERT model)"),Pke.forEach(t),Wvr=i(me),P4=n(me,"LI",{});var Ike=s(P4);hbe=n(Ike,"STRONG",{});var mbt=s(hbe);Hvr=r(mbt,"electra"),mbt.forEach(t),Uvr=r(Ike," \u2014 "),zW=n(Ike,"A",{href:!0});var gbt=s(zW);Jvr=r(gbt,"TFElectraForTokenClassification"),gbt.forEach(t),Yvr=r(Ike," (ELECTRA model)"),Ike.forEach(t),Kvr=i(me),I4=n(me,"LI",{});var qke=s(I4);pbe=n(qke,"STRONG",{});var hbt=s(pbe);Zvr=r(hbt,"flaubert"),hbt.forEach(t),eFr=r(qke," \u2014 "),QW=n(qke,"A",{href:!0});var pbt=s(QW);oFr=r(pbt,"TFFlaubertForTokenClassification"),pbt.forEach(t),rFr=r(qke," (FlauBERT model)"),qke.forEach(t),tFr=i(me),q4=n(me,"LI",{});var Nke=s(q4);ube=n(Nke,"STRONG",{});var ubt=s(ube);aFr=r(ubt,"funnel"),ubt.forEach(t),nFr=r(Nke," \u2014 "),WW=n(Nke,"A",{href:!0});var _bt=s(WW);sFr=r(_bt,"TFFunnelForTokenClassification"),_bt.forEach(t),lFr=r(Nke," (Funnel Transformer model)"),Nke.forEach(t),iFr=i(me),N4=n(me,"LI",{});var jke=s(N4);_be=n(jke,"STRONG",{});var bbt=s(_be);dFr=r(bbt,"layoutlm"),bbt.forEach(t),cFr=r(jke," \u2014 "),HW=n(jke,"A",{href:!0});var vbt=s(HW);fFr=r(vbt,"TFLayoutLMForTokenClassification"),vbt.forEach(t),mFr=r(jke," (LayoutLM model)"),jke.forEach(t),gFr=i(me),j4=n(me,"LI",{});var Dke=s(j4);bbe=n(Dke,"STRONG",{});var Fbt=s(bbe);hFr=r(Fbt,"longformer"),Fbt.forEach(t),pFr=r(Dke," \u2014 "),UW=n(Dke,"A",{href:!0});var Tbt=s(UW);uFr=r(Tbt,"TFLongformerForTokenClassification"),Tbt.forEach(t),_Fr=r(Dke," (Longformer model)"),Dke.forEach(t),bFr=i(me),D4=n(me,"LI",{});var Gke=s(D4);vbe=n(Gke,"STRONG",{});var Mbt=s(vbe);vFr=r(Mbt,"mobilebert"),Mbt.forEach(t),FFr=r(Gke," \u2014 "),JW=n(Gke,"A",{href:!0});var Ebt=s(JW);TFr=r(Ebt,"TFMobileBertForTokenClassification"),Ebt.forEach(t),MFr=r(Gke," (MobileBERT model)"),Gke.forEach(t),EFr=i(me),G4=n(me,"LI",{});var Oke=s(G4);Fbe=n(Oke,"STRONG",{});var Cbt=s(Fbe);CFr=r(Cbt,"mpnet"),Cbt.forEach(t),wFr=r(Oke," \u2014 "),YW=n(Oke,"A",{href:!0});var wbt=s(YW);AFr=r(wbt,"TFMPNetForTokenClassification"),wbt.forEach(t),yFr=r(Oke," (MPNet model)"),Oke.forEach(t),LFr=i(me),O4=n(me,"LI",{});var Vke=s(O4);Tbe=n(Vke,"STRONG",{});var Abt=s(Tbe);xFr=r(Abt,"rembert"),Abt.forEach(t),$Fr=r(Vke," \u2014 "),KW=n(Vke,"A",{href:!0});var ybt=s(KW);kFr=r(ybt,"TFRemBertForTokenClassification"),ybt.forEach(t),SFr=r(Vke," (RemBERT model)"),Vke.forEach(t),RFr=i(me),V4=n(me,"LI",{});var Xke=s(V4);Mbe=n(Xke,"STRONG",{});var Lbt=s(Mbe);BFr=r(Lbt,"roberta"),Lbt.forEach(t),PFr=r(Xke," \u2014 "),ZW=n(Xke,"A",{href:!0});var xbt=s(ZW);IFr=r(xbt,"TFRobertaForTokenClassification"),xbt.forEach(t),qFr=r(Xke," (RoBERTa model)"),Xke.forEach(t),NFr=i(me),X4=n(me,"LI",{});var zke=s(X4);Ebe=n(zke,"STRONG",{});var $bt=s(Ebe);jFr=r($bt,"roformer"),$bt.forEach(t),DFr=r(zke," \u2014 "),eH=n(zke,"A",{href:!0});var kbt=s(eH);GFr=r(kbt,"TFRoFormerForTokenClassification"),kbt.forEach(t),OFr=r(zke," (RoFormer model)"),zke.forEach(t),VFr=i(me),z4=n(me,"LI",{});var Qke=s(z4);Cbe=n(Qke,"STRONG",{});var Sbt=s(Cbe);XFr=r(Sbt,"xlm"),Sbt.forEach(t),zFr=r(Qke," \u2014 "),oH=n(Qke,"A",{href:!0});var Rbt=s(oH);QFr=r(Rbt,"TFXLMForTokenClassification"),Rbt.forEach(t),WFr=r(Qke," (XLM model)"),Qke.forEach(t),HFr=i(me),Q4=n(me,"LI",{});var Wke=s(Q4);wbe=n(Wke,"STRONG",{});var Bbt=s(wbe);UFr=r(Bbt,"xlm-roberta"),Bbt.forEach(t),JFr=r(Wke," \u2014 "),rH=n(Wke,"A",{href:!0});var Pbt=s(rH);YFr=r(Pbt,"TFXLMRobertaForTokenClassification"),Pbt.forEach(t),KFr=r(Wke," (XLM-RoBERTa model)"),Wke.forEach(t),ZFr=i(me),W4=n(me,"LI",{});var Hke=s(W4);Abe=n(Hke,"STRONG",{});var Ibt=s(Abe);eTr=r(Ibt,"xlnet"),Ibt.forEach(t),oTr=r(Hke," \u2014 "),tH=n(Hke,"A",{href:!0});var qbt=s(tH);rTr=r(qbt,"TFXLNetForTokenClassification"),qbt.forEach(t),tTr=r(Hke," (XLNet model)"),Hke.forEach(t),me.forEach(t),aTr=i(Cl),T(H4.$$.fragment,Cl),Cl.forEach(t),El.forEach(t),jPe=i(f),ic=n(f,"H2",{class:!0});var Vqe=s(ic);U4=n(Vqe,"A",{id:!0,class:!0,href:!0});var Nbt=s(U4);ybe=n(Nbt,"SPAN",{});var jbt=s(ybe);T(o7.$$.fragment,jbt),jbt.forEach(t),Nbt.forEach(t),nTr=i(Vqe),Lbe=n(Vqe,"SPAN",{});var Dbt=s(Lbe);sTr=r(Dbt,"TFAutoModelForQuestionAnswering"),Dbt.forEach(t),Vqe.forEach(t),DPe=i(f),lr=n(f,"DIV",{class:!0});var wl=s(lr);T(r7.$$.fragment,wl),lTr=i(wl),dc=n(wl,"P",{});var xK=s(dc);iTr=r(xK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),aH=n(xK,"A",{href:!0});var Gbt=s(aH);dTr=r(Gbt,"from_pretrained()"),Gbt.forEach(t),cTr=r(xK," class method or the "),nH=n(xK,"A",{href:!0});var Obt=s(nH);fTr=r(Obt,"from_config()"),Obt.forEach(t),mTr=r(xK,` class
method.`),xK.forEach(t),gTr=i(wl),t7=n(wl,"P",{});var Xqe=s(t7);hTr=r(Xqe,"This class cannot be instantiated directly using "),xbe=n(Xqe,"CODE",{});var Vbt=s(xbe);pTr=r(Vbt,"__init__()"),Vbt.forEach(t),uTr=r(Xqe," (throws an error)."),Xqe.forEach(t),_Tr=i(wl),Rt=n(wl,"DIV",{class:!0});var Xw=s(Rt);T(a7.$$.fragment,Xw),bTr=i(Xw),$be=n(Xw,"P",{});var Xbt=s($be);vTr=r(Xbt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Xbt.forEach(t),FTr=i(Xw),cc=n(Xw,"P",{});var $K=s(cc);TTr=r($K,`Note:
Loading a model from its configuration file does `),kbe=n($K,"STRONG",{});var zbt=s(kbe);MTr=r(zbt,"not"),zbt.forEach(t),ETr=r($K,` load the model weights. It only affects the
model\u2019s configuration. Use `),sH=n($K,"A",{href:!0});var Qbt=s(sH);CTr=r(Qbt,"from_pretrained()"),Qbt.forEach(t),wTr=r($K," to load the model weights."),$K.forEach(t),ATr=i(Xw),T(J4.$$.fragment,Xw),Xw.forEach(t),yTr=i(wl),Br=n(wl,"DIV",{class:!0});var Al=s(Br);T(n7.$$.fragment,Al),LTr=i(Al),Sbe=n(Al,"P",{});var Wbt=s(Sbe);xTr=r(Wbt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Wbt.forEach(t),$Tr=i(Al),nn=n(Al,"P",{});var zw=s(nn);kTr=r(zw,"The model class to instantiate is selected based on the "),Rbe=n(zw,"CODE",{});var Hbt=s(Rbe);STr=r(Hbt,"model_type"),Hbt.forEach(t),RTr=r(zw,` property of the config object (either
passed as an argument or loaded from `),Bbe=n(zw,"CODE",{});var Ubt=s(Bbe);BTr=r(Ubt,"pretrained_model_name_or_path"),Ubt.forEach(t),PTr=r(zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pbe=n(zw,"CODE",{});var Jbt=s(Pbe);ITr=r(Jbt,"pretrained_model_name_or_path"),Jbt.forEach(t),qTr=r(zw,":"),zw.forEach(t),NTr=i(Al),ce=n(Al,"UL",{});var ge=s(ce);Y4=n(ge,"LI",{});var Uke=s(Y4);Ibe=n(Uke,"STRONG",{});var Ybt=s(Ibe);jTr=r(Ybt,"albert"),Ybt.forEach(t),DTr=r(Uke," \u2014 "),lH=n(Uke,"A",{href:!0});var Kbt=s(lH);GTr=r(Kbt,"TFAlbertForQuestionAnswering"),Kbt.forEach(t),OTr=r(Uke," (ALBERT model)"),Uke.forEach(t),VTr=i(ge),K4=n(ge,"LI",{});var Jke=s(K4);qbe=n(Jke,"STRONG",{});var Zbt=s(qbe);XTr=r(Zbt,"bert"),Zbt.forEach(t),zTr=r(Jke," \u2014 "),iH=n(Jke,"A",{href:!0});var evt=s(iH);QTr=r(evt,"TFBertForQuestionAnswering"),evt.forEach(t),WTr=r(Jke," (BERT model)"),Jke.forEach(t),HTr=i(ge),Z4=n(ge,"LI",{});var Yke=s(Z4);Nbe=n(Yke,"STRONG",{});var ovt=s(Nbe);UTr=r(ovt,"camembert"),ovt.forEach(t),JTr=r(Yke," \u2014 "),dH=n(Yke,"A",{href:!0});var rvt=s(dH);YTr=r(rvt,"TFCamembertForQuestionAnswering"),rvt.forEach(t),KTr=r(Yke," (CamemBERT model)"),Yke.forEach(t),ZTr=i(ge),eE=n(ge,"LI",{});var Kke=s(eE);jbe=n(Kke,"STRONG",{});var tvt=s(jbe);e8r=r(tvt,"convbert"),tvt.forEach(t),o8r=r(Kke," \u2014 "),cH=n(Kke,"A",{href:!0});var avt=s(cH);r8r=r(avt,"TFConvBertForQuestionAnswering"),avt.forEach(t),t8r=r(Kke," (ConvBERT model)"),Kke.forEach(t),a8r=i(ge),oE=n(ge,"LI",{});var Zke=s(oE);Dbe=n(Zke,"STRONG",{});var nvt=s(Dbe);n8r=r(nvt,"deberta"),nvt.forEach(t),s8r=r(Zke," \u2014 "),fH=n(Zke,"A",{href:!0});var svt=s(fH);l8r=r(svt,"TFDebertaForQuestionAnswering"),svt.forEach(t),i8r=r(Zke," (DeBERTa model)"),Zke.forEach(t),d8r=i(ge),rE=n(ge,"LI",{});var eSe=s(rE);Gbe=n(eSe,"STRONG",{});var lvt=s(Gbe);c8r=r(lvt,"deberta-v2"),lvt.forEach(t),f8r=r(eSe," \u2014 "),mH=n(eSe,"A",{href:!0});var ivt=s(mH);m8r=r(ivt,"TFDebertaV2ForQuestionAnswering"),ivt.forEach(t),g8r=r(eSe," (DeBERTa-v2 model)"),eSe.forEach(t),h8r=i(ge),tE=n(ge,"LI",{});var oSe=s(tE);Obe=n(oSe,"STRONG",{});var dvt=s(Obe);p8r=r(dvt,"distilbert"),dvt.forEach(t),u8r=r(oSe," \u2014 "),gH=n(oSe,"A",{href:!0});var cvt=s(gH);_8r=r(cvt,"TFDistilBertForQuestionAnswering"),cvt.forEach(t),b8r=r(oSe," (DistilBERT model)"),oSe.forEach(t),v8r=i(ge),aE=n(ge,"LI",{});var rSe=s(aE);Vbe=n(rSe,"STRONG",{});var fvt=s(Vbe);F8r=r(fvt,"electra"),fvt.forEach(t),T8r=r(rSe," \u2014 "),hH=n(rSe,"A",{href:!0});var mvt=s(hH);M8r=r(mvt,"TFElectraForQuestionAnswering"),mvt.forEach(t),E8r=r(rSe," (ELECTRA model)"),rSe.forEach(t),C8r=i(ge),nE=n(ge,"LI",{});var tSe=s(nE);Xbe=n(tSe,"STRONG",{});var gvt=s(Xbe);w8r=r(gvt,"flaubert"),gvt.forEach(t),A8r=r(tSe," \u2014 "),pH=n(tSe,"A",{href:!0});var hvt=s(pH);y8r=r(hvt,"TFFlaubertForQuestionAnsweringSimple"),hvt.forEach(t),L8r=r(tSe," (FlauBERT model)"),tSe.forEach(t),x8r=i(ge),sE=n(ge,"LI",{});var aSe=s(sE);zbe=n(aSe,"STRONG",{});var pvt=s(zbe);$8r=r(pvt,"funnel"),pvt.forEach(t),k8r=r(aSe," \u2014 "),uH=n(aSe,"A",{href:!0});var uvt=s(uH);S8r=r(uvt,"TFFunnelForQuestionAnswering"),uvt.forEach(t),R8r=r(aSe," (Funnel Transformer model)"),aSe.forEach(t),B8r=i(ge),lE=n(ge,"LI",{});var nSe=s(lE);Qbe=n(nSe,"STRONG",{});var _vt=s(Qbe);P8r=r(_vt,"gptj"),_vt.forEach(t),I8r=r(nSe," \u2014 "),_H=n(nSe,"A",{href:!0});var bvt=s(_H);q8r=r(bvt,"TFGPTJForQuestionAnswering"),bvt.forEach(t),N8r=r(nSe," (GPT-J model)"),nSe.forEach(t),j8r=i(ge),iE=n(ge,"LI",{});var sSe=s(iE);Wbe=n(sSe,"STRONG",{});var vvt=s(Wbe);D8r=r(vvt,"longformer"),vvt.forEach(t),G8r=r(sSe," \u2014 "),bH=n(sSe,"A",{href:!0});var Fvt=s(bH);O8r=r(Fvt,"TFLongformerForQuestionAnswering"),Fvt.forEach(t),V8r=r(sSe," (Longformer model)"),sSe.forEach(t),X8r=i(ge),dE=n(ge,"LI",{});var lSe=s(dE);Hbe=n(lSe,"STRONG",{});var Tvt=s(Hbe);z8r=r(Tvt,"mobilebert"),Tvt.forEach(t),Q8r=r(lSe," \u2014 "),vH=n(lSe,"A",{href:!0});var Mvt=s(vH);W8r=r(Mvt,"TFMobileBertForQuestionAnswering"),Mvt.forEach(t),H8r=r(lSe," (MobileBERT model)"),lSe.forEach(t),U8r=i(ge),cE=n(ge,"LI",{});var iSe=s(cE);Ube=n(iSe,"STRONG",{});var Evt=s(Ube);J8r=r(Evt,"mpnet"),Evt.forEach(t),Y8r=r(iSe," \u2014 "),FH=n(iSe,"A",{href:!0});var Cvt=s(FH);K8r=r(Cvt,"TFMPNetForQuestionAnswering"),Cvt.forEach(t),Z8r=r(iSe," (MPNet model)"),iSe.forEach(t),eMr=i(ge),fE=n(ge,"LI",{});var dSe=s(fE);Jbe=n(dSe,"STRONG",{});var wvt=s(Jbe);oMr=r(wvt,"rembert"),wvt.forEach(t),rMr=r(dSe," \u2014 "),TH=n(dSe,"A",{href:!0});var Avt=s(TH);tMr=r(Avt,"TFRemBertForQuestionAnswering"),Avt.forEach(t),aMr=r(dSe," (RemBERT model)"),dSe.forEach(t),nMr=i(ge),mE=n(ge,"LI",{});var cSe=s(mE);Ybe=n(cSe,"STRONG",{});var yvt=s(Ybe);sMr=r(yvt,"roberta"),yvt.forEach(t),lMr=r(cSe," \u2014 "),MH=n(cSe,"A",{href:!0});var Lvt=s(MH);iMr=r(Lvt,"TFRobertaForQuestionAnswering"),Lvt.forEach(t),dMr=r(cSe," (RoBERTa model)"),cSe.forEach(t),cMr=i(ge),gE=n(ge,"LI",{});var fSe=s(gE);Kbe=n(fSe,"STRONG",{});var xvt=s(Kbe);fMr=r(xvt,"roformer"),xvt.forEach(t),mMr=r(fSe," \u2014 "),EH=n(fSe,"A",{href:!0});var $vt=s(EH);gMr=r($vt,"TFRoFormerForQuestionAnswering"),$vt.forEach(t),hMr=r(fSe," (RoFormer model)"),fSe.forEach(t),pMr=i(ge),hE=n(ge,"LI",{});var mSe=s(hE);Zbe=n(mSe,"STRONG",{});var kvt=s(Zbe);uMr=r(kvt,"xlm"),kvt.forEach(t),_Mr=r(mSe," \u2014 "),CH=n(mSe,"A",{href:!0});var Svt=s(CH);bMr=r(Svt,"TFXLMForQuestionAnsweringSimple"),Svt.forEach(t),vMr=r(mSe," (XLM model)"),mSe.forEach(t),FMr=i(ge),pE=n(ge,"LI",{});var gSe=s(pE);eve=n(gSe,"STRONG",{});var Rvt=s(eve);TMr=r(Rvt,"xlm-roberta"),Rvt.forEach(t),MMr=r(gSe," \u2014 "),wH=n(gSe,"A",{href:!0});var Bvt=s(wH);EMr=r(Bvt,"TFXLMRobertaForQuestionAnswering"),Bvt.forEach(t),CMr=r(gSe," (XLM-RoBERTa model)"),gSe.forEach(t),wMr=i(ge),uE=n(ge,"LI",{});var hSe=s(uE);ove=n(hSe,"STRONG",{});var Pvt=s(ove);AMr=r(Pvt,"xlnet"),Pvt.forEach(t),yMr=r(hSe," \u2014 "),AH=n(hSe,"A",{href:!0});var Ivt=s(AH);LMr=r(Ivt,"TFXLNetForQuestionAnsweringSimple"),Ivt.forEach(t),xMr=r(hSe," (XLNet model)"),hSe.forEach(t),ge.forEach(t),$Mr=i(Al),T(_E.$$.fragment,Al),Al.forEach(t),wl.forEach(t),GPe=i(f),fc=n(f,"H2",{class:!0});var zqe=s(fc);bE=n(zqe,"A",{id:!0,class:!0,href:!0});var qvt=s(bE);rve=n(qvt,"SPAN",{});var Nvt=s(rve);T(s7.$$.fragment,Nvt),Nvt.forEach(t),qvt.forEach(t),kMr=i(zqe),tve=n(zqe,"SPAN",{});var jvt=s(tve);SMr=r(jvt,"TFAutoModelForVision2Seq"),jvt.forEach(t),zqe.forEach(t),OPe=i(f),ir=n(f,"DIV",{class:!0});var yl=s(ir);T(l7.$$.fragment,yl),RMr=i(yl),mc=n(yl,"P",{});var kK=s(mc);BMr=r(kK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),yH=n(kK,"A",{href:!0});var Dvt=s(yH);PMr=r(Dvt,"from_pretrained()"),Dvt.forEach(t),IMr=r(kK," class method or the "),LH=n(kK,"A",{href:!0});var Gvt=s(LH);qMr=r(Gvt,"from_config()"),Gvt.forEach(t),NMr=r(kK,` class
method.`),kK.forEach(t),jMr=i(yl),i7=n(yl,"P",{});var Qqe=s(i7);DMr=r(Qqe,"This class cannot be instantiated directly using "),ave=n(Qqe,"CODE",{});var Ovt=s(ave);GMr=r(Ovt,"__init__()"),Ovt.forEach(t),OMr=r(Qqe," (throws an error)."),Qqe.forEach(t),VMr=i(yl),Bt=n(yl,"DIV",{class:!0});var Qw=s(Bt);T(d7.$$.fragment,Qw),XMr=i(Qw),nve=n(Qw,"P",{});var Vvt=s(nve);zMr=r(Vvt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Vvt.forEach(t),QMr=i(Qw),gc=n(Qw,"P",{});var SK=s(gc);WMr=r(SK,`Note:
Loading a model from its configuration file does `),sve=n(SK,"STRONG",{});var Xvt=s(sve);HMr=r(Xvt,"not"),Xvt.forEach(t),UMr=r(SK,` load the model weights. It only affects the
model\u2019s configuration. Use `),xH=n(SK,"A",{href:!0});var zvt=s(xH);JMr=r(zvt,"from_pretrained()"),zvt.forEach(t),YMr=r(SK," to load the model weights."),SK.forEach(t),KMr=i(Qw),T(vE.$$.fragment,Qw),Qw.forEach(t),ZMr=i(yl),Pr=n(yl,"DIV",{class:!0});var Ll=s(Pr);T(c7.$$.fragment,Ll),e4r=i(Ll),lve=n(Ll,"P",{});var Qvt=s(lve);o4r=r(Qvt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Qvt.forEach(t),r4r=i(Ll),sn=n(Ll,"P",{});var Ww=s(sn);t4r=r(Ww,"The model class to instantiate is selected based on the "),ive=n(Ww,"CODE",{});var Wvt=s(ive);a4r=r(Wvt,"model_type"),Wvt.forEach(t),n4r=r(Ww,` property of the config object (either
passed as an argument or loaded from `),dve=n(Ww,"CODE",{});var Hvt=s(dve);s4r=r(Hvt,"pretrained_model_name_or_path"),Hvt.forEach(t),l4r=r(Ww,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cve=n(Ww,"CODE",{});var Uvt=s(cve);i4r=r(Uvt,"pretrained_model_name_or_path"),Uvt.forEach(t),d4r=r(Ww,":"),Ww.forEach(t),c4r=i(Ll),fve=n(Ll,"UL",{});var Jvt=s(fve);FE=n(Jvt,"LI",{});var pSe=s(FE);mve=n(pSe,"STRONG",{});var Yvt=s(mve);f4r=r(Yvt,"vision-encoder-decoder"),Yvt.forEach(t),m4r=r(pSe," \u2014 "),$H=n(pSe,"A",{href:!0});var Kvt=s($H);g4r=r(Kvt,"TFVisionEncoderDecoderModel"),Kvt.forEach(t),h4r=r(pSe," (Vision Encoder decoder model)"),pSe.forEach(t),Jvt.forEach(t),p4r=i(Ll),T(TE.$$.fragment,Ll),Ll.forEach(t),yl.forEach(t),VPe=i(f),hc=n(f,"H2",{class:!0});var Wqe=s(hc);ME=n(Wqe,"A",{id:!0,class:!0,href:!0});var Zvt=s(ME);gve=n(Zvt,"SPAN",{});var eFt=s(gve);T(f7.$$.fragment,eFt),eFt.forEach(t),Zvt.forEach(t),u4r=i(Wqe),hve=n(Wqe,"SPAN",{});var oFt=s(hve);_4r=r(oFt,"TFAutoModelForSpeechSeq2Seq"),oFt.forEach(t),Wqe.forEach(t),XPe=i(f),dr=n(f,"DIV",{class:!0});var xl=s(dr);T(m7.$$.fragment,xl),b4r=i(xl),pc=n(xl,"P",{});var RK=s(pc);v4r=r(RK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),kH=n(RK,"A",{href:!0});var rFt=s(kH);F4r=r(rFt,"from_pretrained()"),rFt.forEach(t),T4r=r(RK," class method or the "),SH=n(RK,"A",{href:!0});var tFt=s(SH);M4r=r(tFt,"from_config()"),tFt.forEach(t),E4r=r(RK,` class
method.`),RK.forEach(t),C4r=i(xl),g7=n(xl,"P",{});var Hqe=s(g7);w4r=r(Hqe,"This class cannot be instantiated directly using "),pve=n(Hqe,"CODE",{});var aFt=s(pve);A4r=r(aFt,"__init__()"),aFt.forEach(t),y4r=r(Hqe," (throws an error)."),Hqe.forEach(t),L4r=i(xl),Pt=n(xl,"DIV",{class:!0});var Hw=s(Pt);T(h7.$$.fragment,Hw),x4r=i(Hw),uve=n(Hw,"P",{});var nFt=s(uve);$4r=r(nFt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),nFt.forEach(t),k4r=i(Hw),uc=n(Hw,"P",{});var BK=s(uc);S4r=r(BK,`Note:
Loading a model from its configuration file does `),_ve=n(BK,"STRONG",{});var sFt=s(_ve);R4r=r(sFt,"not"),sFt.forEach(t),B4r=r(BK,` load the model weights. It only affects the
model\u2019s configuration. Use `),RH=n(BK,"A",{href:!0});var lFt=s(RH);P4r=r(lFt,"from_pretrained()"),lFt.forEach(t),I4r=r(BK," to load the model weights."),BK.forEach(t),q4r=i(Hw),T(EE.$$.fragment,Hw),Hw.forEach(t),N4r=i(xl),Ir=n(xl,"DIV",{class:!0});var $l=s(Ir);T(p7.$$.fragment,$l),j4r=i($l),bve=n($l,"P",{});var iFt=s(bve);D4r=r(iFt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),iFt.forEach(t),G4r=i($l),ln=n($l,"P",{});var Uw=s(ln);O4r=r(Uw,"The model class to instantiate is selected based on the "),vve=n(Uw,"CODE",{});var dFt=s(vve);V4r=r(dFt,"model_type"),dFt.forEach(t),X4r=r(Uw,` property of the config object (either
passed as an argument or loaded from `),Fve=n(Uw,"CODE",{});var cFt=s(Fve);z4r=r(cFt,"pretrained_model_name_or_path"),cFt.forEach(t),Q4r=r(Uw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tve=n(Uw,"CODE",{});var fFt=s(Tve);W4r=r(fFt,"pretrained_model_name_or_path"),fFt.forEach(t),H4r=r(Uw,":"),Uw.forEach(t),U4r=i($l),Mve=n($l,"UL",{});var mFt=s(Mve);CE=n(mFt,"LI",{});var uSe=s(CE);Eve=n(uSe,"STRONG",{});var gFt=s(Eve);J4r=r(gFt,"speech_to_text"),gFt.forEach(t),Y4r=r(uSe," \u2014 "),BH=n(uSe,"A",{href:!0});var hFt=s(BH);K4r=r(hFt,"TFSpeech2TextForConditionalGeneration"),hFt.forEach(t),Z4r=r(uSe," (Speech2Text model)"),uSe.forEach(t),mFt.forEach(t),eEr=i($l),T(wE.$$.fragment,$l),$l.forEach(t),xl.forEach(t),zPe=i(f),_c=n(f,"H2",{class:!0});var Uqe=s(_c);AE=n(Uqe,"A",{id:!0,class:!0,href:!0});var pFt=s(AE);Cve=n(pFt,"SPAN",{});var uFt=s(Cve);T(u7.$$.fragment,uFt),uFt.forEach(t),pFt.forEach(t),oEr=i(Uqe),wve=n(Uqe,"SPAN",{});var _Ft=s(wve);rEr=r(_Ft,"FlaxAutoModel"),_Ft.forEach(t),Uqe.forEach(t),QPe=i(f),cr=n(f,"DIV",{class:!0});var kl=s(cr);T(_7.$$.fragment,kl),tEr=i(kl),bc=n(kl,"P",{});var PK=s(bc);aEr=r(PK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),PH=n(PK,"A",{href:!0});var bFt=s(PH);nEr=r(bFt,"from_pretrained()"),bFt.forEach(t),sEr=r(PK," class method or the "),IH=n(PK,"A",{href:!0});var vFt=s(IH);lEr=r(vFt,"from_config()"),vFt.forEach(t),iEr=r(PK,` class
method.`),PK.forEach(t),dEr=i(kl),b7=n(kl,"P",{});var Jqe=s(b7);cEr=r(Jqe,"This class cannot be instantiated directly using "),Ave=n(Jqe,"CODE",{});var FFt=s(Ave);fEr=r(FFt,"__init__()"),FFt.forEach(t),mEr=r(Jqe," (throws an error)."),Jqe.forEach(t),gEr=i(kl),It=n(kl,"DIV",{class:!0});var Jw=s(It);T(v7.$$.fragment,Jw),hEr=i(Jw),yve=n(Jw,"P",{});var TFt=s(yve);pEr=r(TFt,"Instantiates one of the base model classes of the library from a configuration."),TFt.forEach(t),uEr=i(Jw),vc=n(Jw,"P",{});var IK=s(vc);_Er=r(IK,`Note:
Loading a model from its configuration file does `),Lve=n(IK,"STRONG",{});var MFt=s(Lve);bEr=r(MFt,"not"),MFt.forEach(t),vEr=r(IK,` load the model weights. It only affects the
model\u2019s configuration. Use `),qH=n(IK,"A",{href:!0});var EFt=s(qH);FEr=r(EFt,"from_pretrained()"),EFt.forEach(t),TEr=r(IK," to load the model weights."),IK.forEach(t),MEr=i(Jw),T(yE.$$.fragment,Jw),Jw.forEach(t),EEr=i(kl),qr=n(kl,"DIV",{class:!0});var Sl=s(qr);T(F7.$$.fragment,Sl),CEr=i(Sl),xve=n(Sl,"P",{});var CFt=s(xve);wEr=r(CFt,"Instantiate one of the base model classes of the library from a pretrained model."),CFt.forEach(t),AEr=i(Sl),dn=n(Sl,"P",{});var Yw=s(dn);yEr=r(Yw,"The model class to instantiate is selected based on the "),$ve=n(Yw,"CODE",{});var wFt=s($ve);LEr=r(wFt,"model_type"),wFt.forEach(t),xEr=r(Yw,` property of the config object (either
passed as an argument or loaded from `),kve=n(Yw,"CODE",{});var AFt=s(kve);$Er=r(AFt,"pretrained_model_name_or_path"),AFt.forEach(t),kEr=r(Yw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sve=n(Yw,"CODE",{});var yFt=s(Sve);SEr=r(yFt,"pretrained_model_name_or_path"),yFt.forEach(t),REr=r(Yw,":"),Yw.forEach(t),BEr=i(Sl),oe=n(Sl,"UL",{});var ae=s(oe);LE=n(ae,"LI",{});var _Se=s(LE);Rve=n(_Se,"STRONG",{});var LFt=s(Rve);PEr=r(LFt,"albert"),LFt.forEach(t),IEr=r(_Se," \u2014 "),NH=n(_Se,"A",{href:!0});var xFt=s(NH);qEr=r(xFt,"FlaxAlbertModel"),xFt.forEach(t),NEr=r(_Se," (ALBERT model)"),_Se.forEach(t),jEr=i(ae),xE=n(ae,"LI",{});var bSe=s(xE);Bve=n(bSe,"STRONG",{});var $Ft=s(Bve);DEr=r($Ft,"bart"),$Ft.forEach(t),GEr=r(bSe," \u2014 "),jH=n(bSe,"A",{href:!0});var kFt=s(jH);OEr=r(kFt,"FlaxBartModel"),kFt.forEach(t),VEr=r(bSe," (BART model)"),bSe.forEach(t),XEr=i(ae),$E=n(ae,"LI",{});var vSe=s($E);Pve=n(vSe,"STRONG",{});var SFt=s(Pve);zEr=r(SFt,"beit"),SFt.forEach(t),QEr=r(vSe," \u2014 "),DH=n(vSe,"A",{href:!0});var RFt=s(DH);WEr=r(RFt,"FlaxBeitModel"),RFt.forEach(t),HEr=r(vSe," (BEiT model)"),vSe.forEach(t),UEr=i(ae),kE=n(ae,"LI",{});var FSe=s(kE);Ive=n(FSe,"STRONG",{});var BFt=s(Ive);JEr=r(BFt,"bert"),BFt.forEach(t),YEr=r(FSe," \u2014 "),GH=n(FSe,"A",{href:!0});var PFt=s(GH);KEr=r(PFt,"FlaxBertModel"),PFt.forEach(t),ZEr=r(FSe," (BERT model)"),FSe.forEach(t),e5r=i(ae),SE=n(ae,"LI",{});var TSe=s(SE);qve=n(TSe,"STRONG",{});var IFt=s(qve);o5r=r(IFt,"big_bird"),IFt.forEach(t),r5r=r(TSe," \u2014 "),OH=n(TSe,"A",{href:!0});var qFt=s(OH);t5r=r(qFt,"FlaxBigBirdModel"),qFt.forEach(t),a5r=r(TSe," (BigBird model)"),TSe.forEach(t),n5r=i(ae),RE=n(ae,"LI",{});var MSe=s(RE);Nve=n(MSe,"STRONG",{});var NFt=s(Nve);s5r=r(NFt,"blenderbot"),NFt.forEach(t),l5r=r(MSe," \u2014 "),VH=n(MSe,"A",{href:!0});var jFt=s(VH);i5r=r(jFt,"FlaxBlenderbotModel"),jFt.forEach(t),d5r=r(MSe," (Blenderbot model)"),MSe.forEach(t),c5r=i(ae),BE=n(ae,"LI",{});var ESe=s(BE);jve=n(ESe,"STRONG",{});var DFt=s(jve);f5r=r(DFt,"blenderbot-small"),DFt.forEach(t),m5r=r(ESe," \u2014 "),XH=n(ESe,"A",{href:!0});var GFt=s(XH);g5r=r(GFt,"FlaxBlenderbotSmallModel"),GFt.forEach(t),h5r=r(ESe," (BlenderbotSmall model)"),ESe.forEach(t),p5r=i(ae),PE=n(ae,"LI",{});var CSe=s(PE);Dve=n(CSe,"STRONG",{});var OFt=s(Dve);u5r=r(OFt,"clip"),OFt.forEach(t),_5r=r(CSe," \u2014 "),zH=n(CSe,"A",{href:!0});var VFt=s(zH);b5r=r(VFt,"FlaxCLIPModel"),VFt.forEach(t),v5r=r(CSe," (CLIP model)"),CSe.forEach(t),F5r=i(ae),IE=n(ae,"LI",{});var wSe=s(IE);Gve=n(wSe,"STRONG",{});var XFt=s(Gve);T5r=r(XFt,"distilbert"),XFt.forEach(t),M5r=r(wSe," \u2014 "),QH=n(wSe,"A",{href:!0});var zFt=s(QH);E5r=r(zFt,"FlaxDistilBertModel"),zFt.forEach(t),C5r=r(wSe," (DistilBERT model)"),wSe.forEach(t),w5r=i(ae),qE=n(ae,"LI",{});var ASe=s(qE);Ove=n(ASe,"STRONG",{});var QFt=s(Ove);A5r=r(QFt,"electra"),QFt.forEach(t),y5r=r(ASe," \u2014 "),WH=n(ASe,"A",{href:!0});var WFt=s(WH);L5r=r(WFt,"FlaxElectraModel"),WFt.forEach(t),x5r=r(ASe," (ELECTRA model)"),ASe.forEach(t),$5r=i(ae),NE=n(ae,"LI",{});var ySe=s(NE);Vve=n(ySe,"STRONG",{});var HFt=s(Vve);k5r=r(HFt,"gpt2"),HFt.forEach(t),S5r=r(ySe," \u2014 "),HH=n(ySe,"A",{href:!0});var UFt=s(HH);R5r=r(UFt,"FlaxGPT2Model"),UFt.forEach(t),B5r=r(ySe," (OpenAI GPT-2 model)"),ySe.forEach(t),P5r=i(ae),jE=n(ae,"LI",{});var LSe=s(jE);Xve=n(LSe,"STRONG",{});var JFt=s(Xve);I5r=r(JFt,"gpt_neo"),JFt.forEach(t),q5r=r(LSe," \u2014 "),UH=n(LSe,"A",{href:!0});var YFt=s(UH);N5r=r(YFt,"FlaxGPTNeoModel"),YFt.forEach(t),j5r=r(LSe," (GPT Neo model)"),LSe.forEach(t),D5r=i(ae),DE=n(ae,"LI",{});var xSe=s(DE);zve=n(xSe,"STRONG",{});var KFt=s(zve);G5r=r(KFt,"gptj"),KFt.forEach(t),O5r=r(xSe," \u2014 "),JH=n(xSe,"A",{href:!0});var ZFt=s(JH);V5r=r(ZFt,"FlaxGPTJModel"),ZFt.forEach(t),X5r=r(xSe," (GPT-J model)"),xSe.forEach(t),z5r=i(ae),GE=n(ae,"LI",{});var $Se=s(GE);Qve=n($Se,"STRONG",{});var eTt=s(Qve);Q5r=r(eTt,"marian"),eTt.forEach(t),W5r=r($Se," \u2014 "),YH=n($Se,"A",{href:!0});var oTt=s(YH);H5r=r(oTt,"FlaxMarianModel"),oTt.forEach(t),U5r=r($Se," (Marian model)"),$Se.forEach(t),J5r=i(ae),OE=n(ae,"LI",{});var kSe=s(OE);Wve=n(kSe,"STRONG",{});var rTt=s(Wve);Y5r=r(rTt,"mbart"),rTt.forEach(t),K5r=r(kSe," \u2014 "),KH=n(kSe,"A",{href:!0});var tTt=s(KH);Z5r=r(tTt,"FlaxMBartModel"),tTt.forEach(t),eCr=r(kSe," (mBART model)"),kSe.forEach(t),oCr=i(ae),VE=n(ae,"LI",{});var SSe=s(VE);Hve=n(SSe,"STRONG",{});var aTt=s(Hve);rCr=r(aTt,"mt5"),aTt.forEach(t),tCr=r(SSe," \u2014 "),ZH=n(SSe,"A",{href:!0});var nTt=s(ZH);aCr=r(nTt,"FlaxMT5Model"),nTt.forEach(t),nCr=r(SSe," (mT5 model)"),SSe.forEach(t),sCr=i(ae),XE=n(ae,"LI",{});var RSe=s(XE);Uve=n(RSe,"STRONG",{});var sTt=s(Uve);lCr=r(sTt,"pegasus"),sTt.forEach(t),iCr=r(RSe," \u2014 "),eU=n(RSe,"A",{href:!0});var lTt=s(eU);dCr=r(lTt,"FlaxPegasusModel"),lTt.forEach(t),cCr=r(RSe," (Pegasus model)"),RSe.forEach(t),fCr=i(ae),zE=n(ae,"LI",{});var BSe=s(zE);Jve=n(BSe,"STRONG",{});var iTt=s(Jve);mCr=r(iTt,"roberta"),iTt.forEach(t),gCr=r(BSe," \u2014 "),oU=n(BSe,"A",{href:!0});var dTt=s(oU);hCr=r(dTt,"FlaxRobertaModel"),dTt.forEach(t),pCr=r(BSe," (RoBERTa model)"),BSe.forEach(t),uCr=i(ae),QE=n(ae,"LI",{});var PSe=s(QE);Yve=n(PSe,"STRONG",{});var cTt=s(Yve);_Cr=r(cTt,"roformer"),cTt.forEach(t),bCr=r(PSe," \u2014 "),rU=n(PSe,"A",{href:!0});var fTt=s(rU);vCr=r(fTt,"FlaxRoFormerModel"),fTt.forEach(t),FCr=r(PSe," (RoFormer model)"),PSe.forEach(t),TCr=i(ae),WE=n(ae,"LI",{});var ISe=s(WE);Kve=n(ISe,"STRONG",{});var mTt=s(Kve);MCr=r(mTt,"t5"),mTt.forEach(t),ECr=r(ISe," \u2014 "),tU=n(ISe,"A",{href:!0});var gTt=s(tU);CCr=r(gTt,"FlaxT5Model"),gTt.forEach(t),wCr=r(ISe," (T5 model)"),ISe.forEach(t),ACr=i(ae),HE=n(ae,"LI",{});var qSe=s(HE);Zve=n(qSe,"STRONG",{});var hTt=s(Zve);yCr=r(hTt,"vision-text-dual-encoder"),hTt.forEach(t),LCr=r(qSe," \u2014 "),aU=n(qSe,"A",{href:!0});var pTt=s(aU);xCr=r(pTt,"FlaxVisionTextDualEncoderModel"),pTt.forEach(t),$Cr=r(qSe," (VisionTextDualEncoder model)"),qSe.forEach(t),kCr=i(ae),UE=n(ae,"LI",{});var NSe=s(UE);eFe=n(NSe,"STRONG",{});var uTt=s(eFe);SCr=r(uTt,"vit"),uTt.forEach(t),RCr=r(NSe," \u2014 "),nU=n(NSe,"A",{href:!0});var _Tt=s(nU);BCr=r(_Tt,"FlaxViTModel"),_Tt.forEach(t),PCr=r(NSe," (ViT model)"),NSe.forEach(t),ICr=i(ae),JE=n(ae,"LI",{});var jSe=s(JE);oFe=n(jSe,"STRONG",{});var bTt=s(oFe);qCr=r(bTt,"wav2vec2"),bTt.forEach(t),NCr=r(jSe," \u2014 "),sU=n(jSe,"A",{href:!0});var vTt=s(sU);jCr=r(vTt,"FlaxWav2Vec2Model"),vTt.forEach(t),DCr=r(jSe," (Wav2Vec2 model)"),jSe.forEach(t),GCr=i(ae),YE=n(ae,"LI",{});var DSe=s(YE);rFe=n(DSe,"STRONG",{});var FTt=s(rFe);OCr=r(FTt,"xglm"),FTt.forEach(t),VCr=r(DSe," \u2014 "),lU=n(DSe,"A",{href:!0});var TTt=s(lU);XCr=r(TTt,"FlaxXGLMModel"),TTt.forEach(t),zCr=r(DSe," (XGLM model)"),DSe.forEach(t),QCr=i(ae),KE=n(ae,"LI",{});var GSe=s(KE);tFe=n(GSe,"STRONG",{});var MTt=s(tFe);WCr=r(MTt,"xlm-roberta"),MTt.forEach(t),HCr=r(GSe," \u2014 "),iU=n(GSe,"A",{href:!0});var ETt=s(iU);UCr=r(ETt,"FlaxXLMRobertaModel"),ETt.forEach(t),JCr=r(GSe," (XLM-RoBERTa model)"),GSe.forEach(t),ae.forEach(t),YCr=i(Sl),T(ZE.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),WPe=i(f),Fc=n(f,"H2",{class:!0});var Yqe=s(Fc);e5=n(Yqe,"A",{id:!0,class:!0,href:!0});var CTt=s(e5);aFe=n(CTt,"SPAN",{});var wTt=s(aFe);T(T7.$$.fragment,wTt),wTt.forEach(t),CTt.forEach(t),KCr=i(Yqe),nFe=n(Yqe,"SPAN",{});var ATt=s(nFe);ZCr=r(ATt,"FlaxAutoModelForCausalLM"),ATt.forEach(t),Yqe.forEach(t),HPe=i(f),fr=n(f,"DIV",{class:!0});var Rl=s(fr);T(M7.$$.fragment,Rl),e3r=i(Rl),Tc=n(Rl,"P",{});var qK=s(Tc);o3r=r(qK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),dU=n(qK,"A",{href:!0});var yTt=s(dU);r3r=r(yTt,"from_pretrained()"),yTt.forEach(t),t3r=r(qK," class method or the "),cU=n(qK,"A",{href:!0});var LTt=s(cU);a3r=r(LTt,"from_config()"),LTt.forEach(t),n3r=r(qK,` class
method.`),qK.forEach(t),s3r=i(Rl),E7=n(Rl,"P",{});var Kqe=s(E7);l3r=r(Kqe,"This class cannot be instantiated directly using "),sFe=n(Kqe,"CODE",{});var xTt=s(sFe);i3r=r(xTt,"__init__()"),xTt.forEach(t),d3r=r(Kqe," (throws an error)."),Kqe.forEach(t),c3r=i(Rl),qt=n(Rl,"DIV",{class:!0});var Kw=s(qt);T(C7.$$.fragment,Kw),f3r=i(Kw),lFe=n(Kw,"P",{});var $Tt=s(lFe);m3r=r($Tt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),$Tt.forEach(t),g3r=i(Kw),Mc=n(Kw,"P",{});var NK=s(Mc);h3r=r(NK,`Note:
Loading a model from its configuration file does `),iFe=n(NK,"STRONG",{});var kTt=s(iFe);p3r=r(kTt,"not"),kTt.forEach(t),u3r=r(NK,` load the model weights. It only affects the
model\u2019s configuration. Use `),fU=n(NK,"A",{href:!0});var STt=s(fU);_3r=r(STt,"from_pretrained()"),STt.forEach(t),b3r=r(NK," to load the model weights."),NK.forEach(t),v3r=i(Kw),T(o5.$$.fragment,Kw),Kw.forEach(t),F3r=i(Rl),Nr=n(Rl,"DIV",{class:!0});var Bl=s(Nr);T(w7.$$.fragment,Bl),T3r=i(Bl),dFe=n(Bl,"P",{});var RTt=s(dFe);M3r=r(RTt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),RTt.forEach(t),E3r=i(Bl),cn=n(Bl,"P",{});var Zw=s(cn);C3r=r(Zw,"The model class to instantiate is selected based on the "),cFe=n(Zw,"CODE",{});var BTt=s(cFe);w3r=r(BTt,"model_type"),BTt.forEach(t),A3r=r(Zw,` property of the config object (either
passed as an argument or loaded from `),fFe=n(Zw,"CODE",{});var PTt=s(fFe);y3r=r(PTt,"pretrained_model_name_or_path"),PTt.forEach(t),L3r=r(Zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mFe=n(Zw,"CODE",{});var ITt=s(mFe);x3r=r(ITt,"pretrained_model_name_or_path"),ITt.forEach(t),$3r=r(Zw,":"),Zw.forEach(t),k3r=i(Bl),ke=n(Bl,"UL",{});var Oe=s(ke);r5=n(Oe,"LI",{});var OSe=s(r5);gFe=n(OSe,"STRONG",{});var qTt=s(gFe);S3r=r(qTt,"bart"),qTt.forEach(t),R3r=r(OSe," \u2014 "),mU=n(OSe,"A",{href:!0});var NTt=s(mU);B3r=r(NTt,"FlaxBartForCausalLM"),NTt.forEach(t),P3r=r(OSe," (BART model)"),OSe.forEach(t),I3r=i(Oe),t5=n(Oe,"LI",{});var VSe=s(t5);hFe=n(VSe,"STRONG",{});var jTt=s(hFe);q3r=r(jTt,"bert"),jTt.forEach(t),N3r=r(VSe," \u2014 "),gU=n(VSe,"A",{href:!0});var DTt=s(gU);j3r=r(DTt,"FlaxBertForCausalLM"),DTt.forEach(t),D3r=r(VSe," (BERT model)"),VSe.forEach(t),G3r=i(Oe),a5=n(Oe,"LI",{});var XSe=s(a5);pFe=n(XSe,"STRONG",{});var GTt=s(pFe);O3r=r(GTt,"big_bird"),GTt.forEach(t),V3r=r(XSe," \u2014 "),hU=n(XSe,"A",{href:!0});var OTt=s(hU);X3r=r(OTt,"FlaxBigBirdForCausalLM"),OTt.forEach(t),z3r=r(XSe," (BigBird model)"),XSe.forEach(t),Q3r=i(Oe),n5=n(Oe,"LI",{});var zSe=s(n5);uFe=n(zSe,"STRONG",{});var VTt=s(uFe);W3r=r(VTt,"electra"),VTt.forEach(t),H3r=r(zSe," \u2014 "),pU=n(zSe,"A",{href:!0});var XTt=s(pU);U3r=r(XTt,"FlaxElectraForCausalLM"),XTt.forEach(t),J3r=r(zSe," (ELECTRA model)"),zSe.forEach(t),Y3r=i(Oe),s5=n(Oe,"LI",{});var QSe=s(s5);_Fe=n(QSe,"STRONG",{});var zTt=s(_Fe);K3r=r(zTt,"gpt2"),zTt.forEach(t),Z3r=r(QSe," \u2014 "),uU=n(QSe,"A",{href:!0});var QTt=s(uU);ewr=r(QTt,"FlaxGPT2LMHeadModel"),QTt.forEach(t),owr=r(QSe," (OpenAI GPT-2 model)"),QSe.forEach(t),rwr=i(Oe),l5=n(Oe,"LI",{});var WSe=s(l5);bFe=n(WSe,"STRONG",{});var WTt=s(bFe);twr=r(WTt,"gpt_neo"),WTt.forEach(t),awr=r(WSe," \u2014 "),_U=n(WSe,"A",{href:!0});var HTt=s(_U);nwr=r(HTt,"FlaxGPTNeoForCausalLM"),HTt.forEach(t),swr=r(WSe," (GPT Neo model)"),WSe.forEach(t),lwr=i(Oe),i5=n(Oe,"LI",{});var HSe=s(i5);vFe=n(HSe,"STRONG",{});var UTt=s(vFe);iwr=r(UTt,"gptj"),UTt.forEach(t),dwr=r(HSe," \u2014 "),bU=n(HSe,"A",{href:!0});var JTt=s(bU);cwr=r(JTt,"FlaxGPTJForCausalLM"),JTt.forEach(t),fwr=r(HSe," (GPT-J model)"),HSe.forEach(t),mwr=i(Oe),d5=n(Oe,"LI",{});var USe=s(d5);FFe=n(USe,"STRONG",{});var YTt=s(FFe);gwr=r(YTt,"roberta"),YTt.forEach(t),hwr=r(USe," \u2014 "),vU=n(USe,"A",{href:!0});var KTt=s(vU);pwr=r(KTt,"FlaxRobertaForCausalLM"),KTt.forEach(t),uwr=r(USe," (RoBERTa model)"),USe.forEach(t),_wr=i(Oe),c5=n(Oe,"LI",{});var JSe=s(c5);TFe=n(JSe,"STRONG",{});var ZTt=s(TFe);bwr=r(ZTt,"xglm"),ZTt.forEach(t),vwr=r(JSe," \u2014 "),FU=n(JSe,"A",{href:!0});var e8t=s(FU);Fwr=r(e8t,"FlaxXGLMForCausalLM"),e8t.forEach(t),Twr=r(JSe," (XGLM model)"),JSe.forEach(t),Oe.forEach(t),Mwr=i(Bl),T(f5.$$.fragment,Bl),Bl.forEach(t),Rl.forEach(t),UPe=i(f),Ec=n(f,"H2",{class:!0});var Zqe=s(Ec);m5=n(Zqe,"A",{id:!0,class:!0,href:!0});var o8t=s(m5);MFe=n(o8t,"SPAN",{});var r8t=s(MFe);T(A7.$$.fragment,r8t),r8t.forEach(t),o8t.forEach(t),Ewr=i(Zqe),EFe=n(Zqe,"SPAN",{});var t8t=s(EFe);Cwr=r(t8t,"FlaxAutoModelForPreTraining"),t8t.forEach(t),Zqe.forEach(t),JPe=i(f),mr=n(f,"DIV",{class:!0});var Pl=s(mr);T(y7.$$.fragment,Pl),wwr=i(Pl),Cc=n(Pl,"P",{});var jK=s(Cc);Awr=r(jK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),TU=n(jK,"A",{href:!0});var a8t=s(TU);ywr=r(a8t,"from_pretrained()"),a8t.forEach(t),Lwr=r(jK," class method or the "),MU=n(jK,"A",{href:!0});var n8t=s(MU);xwr=r(n8t,"from_config()"),n8t.forEach(t),$wr=r(jK,` class
method.`),jK.forEach(t),kwr=i(Pl),L7=n(Pl,"P",{});var eNe=s(L7);Swr=r(eNe,"This class cannot be instantiated directly using "),CFe=n(eNe,"CODE",{});var s8t=s(CFe);Rwr=r(s8t,"__init__()"),s8t.forEach(t),Bwr=r(eNe," (throws an error)."),eNe.forEach(t),Pwr=i(Pl),Nt=n(Pl,"DIV",{class:!0});var eA=s(Nt);T(x7.$$.fragment,eA),Iwr=i(eA),wFe=n(eA,"P",{});var l8t=s(wFe);qwr=r(l8t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),l8t.forEach(t),Nwr=i(eA),wc=n(eA,"P",{});var DK=s(wc);jwr=r(DK,`Note:
Loading a model from its configuration file does `),AFe=n(DK,"STRONG",{});var i8t=s(AFe);Dwr=r(i8t,"not"),i8t.forEach(t),Gwr=r(DK,` load the model weights. It only affects the
model\u2019s configuration. Use `),EU=n(DK,"A",{href:!0});var d8t=s(EU);Owr=r(d8t,"from_pretrained()"),d8t.forEach(t),Vwr=r(DK," to load the model weights."),DK.forEach(t),Xwr=i(eA),T(g5.$$.fragment,eA),eA.forEach(t),zwr=i(Pl),jr=n(Pl,"DIV",{class:!0});var Il=s(jr);T($7.$$.fragment,Il),Qwr=i(Il),yFe=n(Il,"P",{});var c8t=s(yFe);Wwr=r(c8t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),c8t.forEach(t),Hwr=i(Il),fn=n(Il,"P",{});var oA=s(fn);Uwr=r(oA,"The model class to instantiate is selected based on the "),LFe=n(oA,"CODE",{});var f8t=s(LFe);Jwr=r(f8t,"model_type"),f8t.forEach(t),Ywr=r(oA,` property of the config object (either
passed as an argument or loaded from `),xFe=n(oA,"CODE",{});var m8t=s(xFe);Kwr=r(m8t,"pretrained_model_name_or_path"),m8t.forEach(t),Zwr=r(oA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$Fe=n(oA,"CODE",{});var g8t=s($Fe);eAr=r(g8t,"pretrained_model_name_or_path"),g8t.forEach(t),oAr=r(oA,":"),oA.forEach(t),rAr=i(Il),Me=n(Il,"UL",{});var we=s(Me);h5=n(we,"LI",{});var YSe=s(h5);kFe=n(YSe,"STRONG",{});var h8t=s(kFe);tAr=r(h8t,"albert"),h8t.forEach(t),aAr=r(YSe," \u2014 "),CU=n(YSe,"A",{href:!0});var p8t=s(CU);nAr=r(p8t,"FlaxAlbertForPreTraining"),p8t.forEach(t),sAr=r(YSe," (ALBERT model)"),YSe.forEach(t),lAr=i(we),p5=n(we,"LI",{});var KSe=s(p5);SFe=n(KSe,"STRONG",{});var u8t=s(SFe);iAr=r(u8t,"bart"),u8t.forEach(t),dAr=r(KSe," \u2014 "),wU=n(KSe,"A",{href:!0});var _8t=s(wU);cAr=r(_8t,"FlaxBartForConditionalGeneration"),_8t.forEach(t),fAr=r(KSe," (BART model)"),KSe.forEach(t),mAr=i(we),u5=n(we,"LI",{});var ZSe=s(u5);RFe=n(ZSe,"STRONG",{});var b8t=s(RFe);gAr=r(b8t,"bert"),b8t.forEach(t),hAr=r(ZSe," \u2014 "),AU=n(ZSe,"A",{href:!0});var v8t=s(AU);pAr=r(v8t,"FlaxBertForPreTraining"),v8t.forEach(t),uAr=r(ZSe," (BERT model)"),ZSe.forEach(t),_Ar=i(we),_5=n(we,"LI",{});var eRe=s(_5);BFe=n(eRe,"STRONG",{});var F8t=s(BFe);bAr=r(F8t,"big_bird"),F8t.forEach(t),vAr=r(eRe," \u2014 "),yU=n(eRe,"A",{href:!0});var T8t=s(yU);FAr=r(T8t,"FlaxBigBirdForPreTraining"),T8t.forEach(t),TAr=r(eRe," (BigBird model)"),eRe.forEach(t),MAr=i(we),b5=n(we,"LI",{});var oRe=s(b5);PFe=n(oRe,"STRONG",{});var M8t=s(PFe);EAr=r(M8t,"electra"),M8t.forEach(t),CAr=r(oRe," \u2014 "),LU=n(oRe,"A",{href:!0});var E8t=s(LU);wAr=r(E8t,"FlaxElectraForPreTraining"),E8t.forEach(t),AAr=r(oRe," (ELECTRA model)"),oRe.forEach(t),yAr=i(we),v5=n(we,"LI",{});var rRe=s(v5);IFe=n(rRe,"STRONG",{});var C8t=s(IFe);LAr=r(C8t,"mbart"),C8t.forEach(t),xAr=r(rRe," \u2014 "),xU=n(rRe,"A",{href:!0});var w8t=s(xU);$Ar=r(w8t,"FlaxMBartForConditionalGeneration"),w8t.forEach(t),kAr=r(rRe," (mBART model)"),rRe.forEach(t),SAr=i(we),F5=n(we,"LI",{});var tRe=s(F5);qFe=n(tRe,"STRONG",{});var A8t=s(qFe);RAr=r(A8t,"mt5"),A8t.forEach(t),BAr=r(tRe," \u2014 "),$U=n(tRe,"A",{href:!0});var y8t=s($U);PAr=r(y8t,"FlaxMT5ForConditionalGeneration"),y8t.forEach(t),IAr=r(tRe," (mT5 model)"),tRe.forEach(t),qAr=i(we),T5=n(we,"LI",{});var aRe=s(T5);NFe=n(aRe,"STRONG",{});var L8t=s(NFe);NAr=r(L8t,"roberta"),L8t.forEach(t),jAr=r(aRe," \u2014 "),kU=n(aRe,"A",{href:!0});var x8t=s(kU);DAr=r(x8t,"FlaxRobertaForMaskedLM"),x8t.forEach(t),GAr=r(aRe," (RoBERTa model)"),aRe.forEach(t),OAr=i(we),M5=n(we,"LI",{});var nRe=s(M5);jFe=n(nRe,"STRONG",{});var $8t=s(jFe);VAr=r($8t,"roformer"),$8t.forEach(t),XAr=r(nRe," \u2014 "),SU=n(nRe,"A",{href:!0});var k8t=s(SU);zAr=r(k8t,"FlaxRoFormerForMaskedLM"),k8t.forEach(t),QAr=r(nRe," (RoFormer model)"),nRe.forEach(t),WAr=i(we),E5=n(we,"LI",{});var sRe=s(E5);DFe=n(sRe,"STRONG",{});var S8t=s(DFe);HAr=r(S8t,"t5"),S8t.forEach(t),UAr=r(sRe," \u2014 "),RU=n(sRe,"A",{href:!0});var R8t=s(RU);JAr=r(R8t,"FlaxT5ForConditionalGeneration"),R8t.forEach(t),YAr=r(sRe," (T5 model)"),sRe.forEach(t),KAr=i(we),C5=n(we,"LI",{});var lRe=s(C5);GFe=n(lRe,"STRONG",{});var B8t=s(GFe);ZAr=r(B8t,"wav2vec2"),B8t.forEach(t),e0r=r(lRe," \u2014 "),BU=n(lRe,"A",{href:!0});var P8t=s(BU);o0r=r(P8t,"FlaxWav2Vec2ForPreTraining"),P8t.forEach(t),r0r=r(lRe," (Wav2Vec2 model)"),lRe.forEach(t),t0r=i(we),w5=n(we,"LI",{});var iRe=s(w5);OFe=n(iRe,"STRONG",{});var I8t=s(OFe);a0r=r(I8t,"xlm-roberta"),I8t.forEach(t),n0r=r(iRe," \u2014 "),PU=n(iRe,"A",{href:!0});var q8t=s(PU);s0r=r(q8t,"FlaxXLMRobertaForMaskedLM"),q8t.forEach(t),l0r=r(iRe," (XLM-RoBERTa model)"),iRe.forEach(t),we.forEach(t),i0r=i(Il),T(A5.$$.fragment,Il),Il.forEach(t),Pl.forEach(t),YPe=i(f),Ac=n(f,"H2",{class:!0});var oNe=s(Ac);y5=n(oNe,"A",{id:!0,class:!0,href:!0});var N8t=s(y5);VFe=n(N8t,"SPAN",{});var j8t=s(VFe);T(k7.$$.fragment,j8t),j8t.forEach(t),N8t.forEach(t),d0r=i(oNe),XFe=n(oNe,"SPAN",{});var D8t=s(XFe);c0r=r(D8t,"FlaxAutoModelForMaskedLM"),D8t.forEach(t),oNe.forEach(t),KPe=i(f),gr=n(f,"DIV",{class:!0});var ql=s(gr);T(S7.$$.fragment,ql),f0r=i(ql),yc=n(ql,"P",{});var GK=s(yc);m0r=r(GK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),IU=n(GK,"A",{href:!0});var G8t=s(IU);g0r=r(G8t,"from_pretrained()"),G8t.forEach(t),h0r=r(GK," class method or the "),qU=n(GK,"A",{href:!0});var O8t=s(qU);p0r=r(O8t,"from_config()"),O8t.forEach(t),u0r=r(GK,` class
method.`),GK.forEach(t),_0r=i(ql),R7=n(ql,"P",{});var rNe=s(R7);b0r=r(rNe,"This class cannot be instantiated directly using "),zFe=n(rNe,"CODE",{});var V8t=s(zFe);v0r=r(V8t,"__init__()"),V8t.forEach(t),F0r=r(rNe," (throws an error)."),rNe.forEach(t),T0r=i(ql),jt=n(ql,"DIV",{class:!0});var rA=s(jt);T(B7.$$.fragment,rA),M0r=i(rA),QFe=n(rA,"P",{});var X8t=s(QFe);E0r=r(X8t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),X8t.forEach(t),C0r=i(rA),Lc=n(rA,"P",{});var OK=s(Lc);w0r=r(OK,`Note:
Loading a model from its configuration file does `),WFe=n(OK,"STRONG",{});var z8t=s(WFe);A0r=r(z8t,"not"),z8t.forEach(t),y0r=r(OK,` load the model weights. It only affects the
model\u2019s configuration. Use `),NU=n(OK,"A",{href:!0});var Q8t=s(NU);L0r=r(Q8t,"from_pretrained()"),Q8t.forEach(t),x0r=r(OK," to load the model weights."),OK.forEach(t),$0r=i(rA),T(L5.$$.fragment,rA),rA.forEach(t),k0r=i(ql),Dr=n(ql,"DIV",{class:!0});var Nl=s(Dr);T(P7.$$.fragment,Nl),S0r=i(Nl),HFe=n(Nl,"P",{});var W8t=s(HFe);R0r=r(W8t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),W8t.forEach(t),B0r=i(Nl),mn=n(Nl,"P",{});var tA=s(mn);P0r=r(tA,"The model class to instantiate is selected based on the "),UFe=n(tA,"CODE",{});var H8t=s(UFe);I0r=r(H8t,"model_type"),H8t.forEach(t),q0r=r(tA,` property of the config object (either
passed as an argument or loaded from `),JFe=n(tA,"CODE",{});var U8t=s(JFe);N0r=r(U8t,"pretrained_model_name_or_path"),U8t.forEach(t),j0r=r(tA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YFe=n(tA,"CODE",{});var J8t=s(YFe);D0r=r(J8t,"pretrained_model_name_or_path"),J8t.forEach(t),G0r=r(tA,":"),tA.forEach(t),O0r=i(Nl),Le=n(Nl,"UL",{});var Be=s(Le);x5=n(Be,"LI",{});var dRe=s(x5);KFe=n(dRe,"STRONG",{});var Y8t=s(KFe);V0r=r(Y8t,"albert"),Y8t.forEach(t),X0r=r(dRe," \u2014 "),jU=n(dRe,"A",{href:!0});var K8t=s(jU);z0r=r(K8t,"FlaxAlbertForMaskedLM"),K8t.forEach(t),Q0r=r(dRe," (ALBERT model)"),dRe.forEach(t),W0r=i(Be),$5=n(Be,"LI",{});var cRe=s($5);ZFe=n(cRe,"STRONG",{});var Z8t=s(ZFe);H0r=r(Z8t,"bart"),Z8t.forEach(t),U0r=r(cRe," \u2014 "),DU=n(cRe,"A",{href:!0});var eMt=s(DU);J0r=r(eMt,"FlaxBartForConditionalGeneration"),eMt.forEach(t),Y0r=r(cRe," (BART model)"),cRe.forEach(t),K0r=i(Be),k5=n(Be,"LI",{});var fRe=s(k5);eTe=n(fRe,"STRONG",{});var oMt=s(eTe);Z0r=r(oMt,"bert"),oMt.forEach(t),eyr=r(fRe," \u2014 "),GU=n(fRe,"A",{href:!0});var rMt=s(GU);oyr=r(rMt,"FlaxBertForMaskedLM"),rMt.forEach(t),ryr=r(fRe," (BERT model)"),fRe.forEach(t),tyr=i(Be),S5=n(Be,"LI",{});var mRe=s(S5);oTe=n(mRe,"STRONG",{});var tMt=s(oTe);ayr=r(tMt,"big_bird"),tMt.forEach(t),nyr=r(mRe," \u2014 "),OU=n(mRe,"A",{href:!0});var aMt=s(OU);syr=r(aMt,"FlaxBigBirdForMaskedLM"),aMt.forEach(t),lyr=r(mRe," (BigBird model)"),mRe.forEach(t),iyr=i(Be),R5=n(Be,"LI",{});var gRe=s(R5);rTe=n(gRe,"STRONG",{});var nMt=s(rTe);dyr=r(nMt,"distilbert"),nMt.forEach(t),cyr=r(gRe," \u2014 "),VU=n(gRe,"A",{href:!0});var sMt=s(VU);fyr=r(sMt,"FlaxDistilBertForMaskedLM"),sMt.forEach(t),myr=r(gRe," (DistilBERT model)"),gRe.forEach(t),gyr=i(Be),B5=n(Be,"LI",{});var hRe=s(B5);tTe=n(hRe,"STRONG",{});var lMt=s(tTe);hyr=r(lMt,"electra"),lMt.forEach(t),pyr=r(hRe," \u2014 "),XU=n(hRe,"A",{href:!0});var iMt=s(XU);uyr=r(iMt,"FlaxElectraForMaskedLM"),iMt.forEach(t),_yr=r(hRe," (ELECTRA model)"),hRe.forEach(t),byr=i(Be),P5=n(Be,"LI",{});var pRe=s(P5);aTe=n(pRe,"STRONG",{});var dMt=s(aTe);vyr=r(dMt,"mbart"),dMt.forEach(t),Fyr=r(pRe," \u2014 "),zU=n(pRe,"A",{href:!0});var cMt=s(zU);Tyr=r(cMt,"FlaxMBartForConditionalGeneration"),cMt.forEach(t),Myr=r(pRe," (mBART model)"),pRe.forEach(t),Eyr=i(Be),I5=n(Be,"LI",{});var uRe=s(I5);nTe=n(uRe,"STRONG",{});var fMt=s(nTe);Cyr=r(fMt,"roberta"),fMt.forEach(t),wyr=r(uRe," \u2014 "),QU=n(uRe,"A",{href:!0});var mMt=s(QU);Ayr=r(mMt,"FlaxRobertaForMaskedLM"),mMt.forEach(t),yyr=r(uRe," (RoBERTa model)"),uRe.forEach(t),Lyr=i(Be),q5=n(Be,"LI",{});var _Re=s(q5);sTe=n(_Re,"STRONG",{});var gMt=s(sTe);xyr=r(gMt,"roformer"),gMt.forEach(t),$yr=r(_Re," \u2014 "),WU=n(_Re,"A",{href:!0});var hMt=s(WU);kyr=r(hMt,"FlaxRoFormerForMaskedLM"),hMt.forEach(t),Syr=r(_Re," (RoFormer model)"),_Re.forEach(t),Ryr=i(Be),N5=n(Be,"LI",{});var bRe=s(N5);lTe=n(bRe,"STRONG",{});var pMt=s(lTe);Byr=r(pMt,"xlm-roberta"),pMt.forEach(t),Pyr=r(bRe," \u2014 "),HU=n(bRe,"A",{href:!0});var uMt=s(HU);Iyr=r(uMt,"FlaxXLMRobertaForMaskedLM"),uMt.forEach(t),qyr=r(bRe," (XLM-RoBERTa model)"),bRe.forEach(t),Be.forEach(t),Nyr=i(Nl),T(j5.$$.fragment,Nl),Nl.forEach(t),ql.forEach(t),ZPe=i(f),xc=n(f,"H2",{class:!0});var tNe=s(xc);D5=n(tNe,"A",{id:!0,class:!0,href:!0});var _Mt=s(D5);iTe=n(_Mt,"SPAN",{});var bMt=s(iTe);T(I7.$$.fragment,bMt),bMt.forEach(t),_Mt.forEach(t),jyr=i(tNe),dTe=n(tNe,"SPAN",{});var vMt=s(dTe);Dyr=r(vMt,"FlaxAutoModelForSeq2SeqLM"),vMt.forEach(t),tNe.forEach(t),eIe=i(f),hr=n(f,"DIV",{class:!0});var jl=s(hr);T(q7.$$.fragment,jl),Gyr=i(jl),$c=n(jl,"P",{});var VK=s($c);Oyr=r(VK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),UU=n(VK,"A",{href:!0});var FMt=s(UU);Vyr=r(FMt,"from_pretrained()"),FMt.forEach(t),Xyr=r(VK," class method or the "),JU=n(VK,"A",{href:!0});var TMt=s(JU);zyr=r(TMt,"from_config()"),TMt.forEach(t),Qyr=r(VK,` class
method.`),VK.forEach(t),Wyr=i(jl),N7=n(jl,"P",{});var aNe=s(N7);Hyr=r(aNe,"This class cannot be instantiated directly using "),cTe=n(aNe,"CODE",{});var MMt=s(cTe);Uyr=r(MMt,"__init__()"),MMt.forEach(t),Jyr=r(aNe," (throws an error)."),aNe.forEach(t),Yyr=i(jl),Dt=n(jl,"DIV",{class:!0});var aA=s(Dt);T(j7.$$.fragment,aA),Kyr=i(aA),fTe=n(aA,"P",{});var EMt=s(fTe);Zyr=r(EMt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),EMt.forEach(t),eLr=i(aA),kc=n(aA,"P",{});var XK=s(kc);oLr=r(XK,`Note:
Loading a model from its configuration file does `),mTe=n(XK,"STRONG",{});var CMt=s(mTe);rLr=r(CMt,"not"),CMt.forEach(t),tLr=r(XK,` load the model weights. It only affects the
model\u2019s configuration. Use `),YU=n(XK,"A",{href:!0});var wMt=s(YU);aLr=r(wMt,"from_pretrained()"),wMt.forEach(t),nLr=r(XK," to load the model weights."),XK.forEach(t),sLr=i(aA),T(G5.$$.fragment,aA),aA.forEach(t),lLr=i(jl),Gr=n(jl,"DIV",{class:!0});var Dl=s(Gr);T(D7.$$.fragment,Dl),iLr=i(Dl),gTe=n(Dl,"P",{});var AMt=s(gTe);dLr=r(AMt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),AMt.forEach(t),cLr=i(Dl),gn=n(Dl,"P",{});var nA=s(gn);fLr=r(nA,"The model class to instantiate is selected based on the "),hTe=n(nA,"CODE",{});var yMt=s(hTe);mLr=r(yMt,"model_type"),yMt.forEach(t),gLr=r(nA,` property of the config object (either
passed as an argument or loaded from `),pTe=n(nA,"CODE",{});var LMt=s(pTe);hLr=r(LMt,"pretrained_model_name_or_path"),LMt.forEach(t),pLr=r(nA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uTe=n(nA,"CODE",{});var xMt=s(uTe);uLr=r(xMt,"pretrained_model_name_or_path"),xMt.forEach(t),_Lr=r(nA,":"),nA.forEach(t),bLr=i(Dl),Se=n(Dl,"UL",{});var Ve=s(Se);O5=n(Ve,"LI",{});var vRe=s(O5);_Te=n(vRe,"STRONG",{});var $Mt=s(_Te);vLr=r($Mt,"bart"),$Mt.forEach(t),FLr=r(vRe," \u2014 "),KU=n(vRe,"A",{href:!0});var kMt=s(KU);TLr=r(kMt,"FlaxBartForConditionalGeneration"),kMt.forEach(t),MLr=r(vRe," (BART model)"),vRe.forEach(t),ELr=i(Ve),V5=n(Ve,"LI",{});var FRe=s(V5);bTe=n(FRe,"STRONG",{});var SMt=s(bTe);CLr=r(SMt,"blenderbot"),SMt.forEach(t),wLr=r(FRe," \u2014 "),ZU=n(FRe,"A",{href:!0});var RMt=s(ZU);ALr=r(RMt,"FlaxBlenderbotForConditionalGeneration"),RMt.forEach(t),yLr=r(FRe," (Blenderbot model)"),FRe.forEach(t),LLr=i(Ve),X5=n(Ve,"LI",{});var TRe=s(X5);vTe=n(TRe,"STRONG",{});var BMt=s(vTe);xLr=r(BMt,"blenderbot-small"),BMt.forEach(t),$Lr=r(TRe," \u2014 "),eJ=n(TRe,"A",{href:!0});var PMt=s(eJ);kLr=r(PMt,"FlaxBlenderbotSmallForConditionalGeneration"),PMt.forEach(t),SLr=r(TRe," (BlenderbotSmall model)"),TRe.forEach(t),RLr=i(Ve),z5=n(Ve,"LI",{});var MRe=s(z5);FTe=n(MRe,"STRONG",{});var IMt=s(FTe);BLr=r(IMt,"encoder-decoder"),IMt.forEach(t),PLr=r(MRe," \u2014 "),oJ=n(MRe,"A",{href:!0});var qMt=s(oJ);ILr=r(qMt,"FlaxEncoderDecoderModel"),qMt.forEach(t),qLr=r(MRe," (Encoder decoder model)"),MRe.forEach(t),NLr=i(Ve),Q5=n(Ve,"LI",{});var ERe=s(Q5);TTe=n(ERe,"STRONG",{});var NMt=s(TTe);jLr=r(NMt,"marian"),NMt.forEach(t),DLr=r(ERe," \u2014 "),rJ=n(ERe,"A",{href:!0});var jMt=s(rJ);GLr=r(jMt,"FlaxMarianMTModel"),jMt.forEach(t),OLr=r(ERe," (Marian model)"),ERe.forEach(t),VLr=i(Ve),W5=n(Ve,"LI",{});var CRe=s(W5);MTe=n(CRe,"STRONG",{});var DMt=s(MTe);XLr=r(DMt,"mbart"),DMt.forEach(t),zLr=r(CRe," \u2014 "),tJ=n(CRe,"A",{href:!0});var GMt=s(tJ);QLr=r(GMt,"FlaxMBartForConditionalGeneration"),GMt.forEach(t),WLr=r(CRe," (mBART model)"),CRe.forEach(t),HLr=i(Ve),H5=n(Ve,"LI",{});var wRe=s(H5);ETe=n(wRe,"STRONG",{});var OMt=s(ETe);ULr=r(OMt,"mt5"),OMt.forEach(t),JLr=r(wRe," \u2014 "),aJ=n(wRe,"A",{href:!0});var VMt=s(aJ);YLr=r(VMt,"FlaxMT5ForConditionalGeneration"),VMt.forEach(t),KLr=r(wRe," (mT5 model)"),wRe.forEach(t),ZLr=i(Ve),U5=n(Ve,"LI",{});var ARe=s(U5);CTe=n(ARe,"STRONG",{});var XMt=s(CTe);e7r=r(XMt,"pegasus"),XMt.forEach(t),o7r=r(ARe," \u2014 "),nJ=n(ARe,"A",{href:!0});var zMt=s(nJ);r7r=r(zMt,"FlaxPegasusForConditionalGeneration"),zMt.forEach(t),t7r=r(ARe," (Pegasus model)"),ARe.forEach(t),a7r=i(Ve),J5=n(Ve,"LI",{});var yRe=s(J5);wTe=n(yRe,"STRONG",{});var QMt=s(wTe);n7r=r(QMt,"t5"),QMt.forEach(t),s7r=r(yRe," \u2014 "),sJ=n(yRe,"A",{href:!0});var WMt=s(sJ);l7r=r(WMt,"FlaxT5ForConditionalGeneration"),WMt.forEach(t),i7r=r(yRe," (T5 model)"),yRe.forEach(t),Ve.forEach(t),d7r=i(Dl),T(Y5.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),oIe=i(f),Sc=n(f,"H2",{class:!0});var nNe=s(Sc);K5=n(nNe,"A",{id:!0,class:!0,href:!0});var HMt=s(K5);ATe=n(HMt,"SPAN",{});var UMt=s(ATe);T(G7.$$.fragment,UMt),UMt.forEach(t),HMt.forEach(t),c7r=i(nNe),yTe=n(nNe,"SPAN",{});var JMt=s(yTe);f7r=r(JMt,"FlaxAutoModelForSequenceClassification"),JMt.forEach(t),nNe.forEach(t),rIe=i(f),pr=n(f,"DIV",{class:!0});var Gl=s(pr);T(O7.$$.fragment,Gl),m7r=i(Gl),Rc=n(Gl,"P",{});var zK=s(Rc);g7r=r(zK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),lJ=n(zK,"A",{href:!0});var YMt=s(lJ);h7r=r(YMt,"from_pretrained()"),YMt.forEach(t),p7r=r(zK," class method or the "),iJ=n(zK,"A",{href:!0});var KMt=s(iJ);u7r=r(KMt,"from_config()"),KMt.forEach(t),_7r=r(zK,` class
method.`),zK.forEach(t),b7r=i(Gl),V7=n(Gl,"P",{});var sNe=s(V7);v7r=r(sNe,"This class cannot be instantiated directly using "),LTe=n(sNe,"CODE",{});var ZMt=s(LTe);F7r=r(ZMt,"__init__()"),ZMt.forEach(t),T7r=r(sNe," (throws an error)."),sNe.forEach(t),M7r=i(Gl),Gt=n(Gl,"DIV",{class:!0});var sA=s(Gt);T(X7.$$.fragment,sA),E7r=i(sA),xTe=n(sA,"P",{});var e4t=s(xTe);C7r=r(e4t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),e4t.forEach(t),w7r=i(sA),Bc=n(sA,"P",{});var QK=s(Bc);A7r=r(QK,`Note:
Loading a model from its configuration file does `),$Te=n(QK,"STRONG",{});var o4t=s($Te);y7r=r(o4t,"not"),o4t.forEach(t),L7r=r(QK,` load the model weights. It only affects the
model\u2019s configuration. Use `),dJ=n(QK,"A",{href:!0});var r4t=s(dJ);x7r=r(r4t,"from_pretrained()"),r4t.forEach(t),$7r=r(QK," to load the model weights."),QK.forEach(t),k7r=i(sA),T(Z5.$$.fragment,sA),sA.forEach(t),S7r=i(Gl),Or=n(Gl,"DIV",{class:!0});var Ol=s(Or);T(z7.$$.fragment,Ol),R7r=i(Ol),kTe=n(Ol,"P",{});var t4t=s(kTe);B7r=r(t4t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),t4t.forEach(t),P7r=i(Ol),hn=n(Ol,"P",{});var lA=s(hn);I7r=r(lA,"The model class to instantiate is selected based on the "),STe=n(lA,"CODE",{});var a4t=s(STe);q7r=r(a4t,"model_type"),a4t.forEach(t),N7r=r(lA,` property of the config object (either
passed as an argument or loaded from `),RTe=n(lA,"CODE",{});var n4t=s(RTe);j7r=r(n4t,"pretrained_model_name_or_path"),n4t.forEach(t),D7r=r(lA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BTe=n(lA,"CODE",{});var s4t=s(BTe);G7r=r(s4t,"pretrained_model_name_or_path"),s4t.forEach(t),O7r=r(lA,":"),lA.forEach(t),V7r=i(Ol),xe=n(Ol,"UL",{});var Pe=s(xe);eC=n(Pe,"LI",{});var LRe=s(eC);PTe=n(LRe,"STRONG",{});var l4t=s(PTe);X7r=r(l4t,"albert"),l4t.forEach(t),z7r=r(LRe," \u2014 "),cJ=n(LRe,"A",{href:!0});var i4t=s(cJ);Q7r=r(i4t,"FlaxAlbertForSequenceClassification"),i4t.forEach(t),W7r=r(LRe," (ALBERT model)"),LRe.forEach(t),H7r=i(Pe),oC=n(Pe,"LI",{});var xRe=s(oC);ITe=n(xRe,"STRONG",{});var d4t=s(ITe);U7r=r(d4t,"bart"),d4t.forEach(t),J7r=r(xRe," \u2014 "),fJ=n(xRe,"A",{href:!0});var c4t=s(fJ);Y7r=r(c4t,"FlaxBartForSequenceClassification"),c4t.forEach(t),K7r=r(xRe," (BART model)"),xRe.forEach(t),Z7r=i(Pe),rC=n(Pe,"LI",{});var $Re=s(rC);qTe=n($Re,"STRONG",{});var f4t=s(qTe);exr=r(f4t,"bert"),f4t.forEach(t),oxr=r($Re," \u2014 "),mJ=n($Re,"A",{href:!0});var m4t=s(mJ);rxr=r(m4t,"FlaxBertForSequenceClassification"),m4t.forEach(t),txr=r($Re," (BERT model)"),$Re.forEach(t),axr=i(Pe),tC=n(Pe,"LI",{});var kRe=s(tC);NTe=n(kRe,"STRONG",{});var g4t=s(NTe);nxr=r(g4t,"big_bird"),g4t.forEach(t),sxr=r(kRe," \u2014 "),gJ=n(kRe,"A",{href:!0});var h4t=s(gJ);lxr=r(h4t,"FlaxBigBirdForSequenceClassification"),h4t.forEach(t),ixr=r(kRe," (BigBird model)"),kRe.forEach(t),dxr=i(Pe),aC=n(Pe,"LI",{});var SRe=s(aC);jTe=n(SRe,"STRONG",{});var p4t=s(jTe);cxr=r(p4t,"distilbert"),p4t.forEach(t),fxr=r(SRe," \u2014 "),hJ=n(SRe,"A",{href:!0});var u4t=s(hJ);mxr=r(u4t,"FlaxDistilBertForSequenceClassification"),u4t.forEach(t),gxr=r(SRe," (DistilBERT model)"),SRe.forEach(t),hxr=i(Pe),nC=n(Pe,"LI",{});var RRe=s(nC);DTe=n(RRe,"STRONG",{});var _4t=s(DTe);pxr=r(_4t,"electra"),_4t.forEach(t),uxr=r(RRe," \u2014 "),pJ=n(RRe,"A",{href:!0});var b4t=s(pJ);_xr=r(b4t,"FlaxElectraForSequenceClassification"),b4t.forEach(t),bxr=r(RRe," (ELECTRA model)"),RRe.forEach(t),vxr=i(Pe),sC=n(Pe,"LI",{});var BRe=s(sC);GTe=n(BRe,"STRONG",{});var v4t=s(GTe);Fxr=r(v4t,"mbart"),v4t.forEach(t),Txr=r(BRe," \u2014 "),uJ=n(BRe,"A",{href:!0});var F4t=s(uJ);Mxr=r(F4t,"FlaxMBartForSequenceClassification"),F4t.forEach(t),Exr=r(BRe," (mBART model)"),BRe.forEach(t),Cxr=i(Pe),lC=n(Pe,"LI",{});var PRe=s(lC);OTe=n(PRe,"STRONG",{});var T4t=s(OTe);wxr=r(T4t,"roberta"),T4t.forEach(t),Axr=r(PRe," \u2014 "),_J=n(PRe,"A",{href:!0});var M4t=s(_J);yxr=r(M4t,"FlaxRobertaForSequenceClassification"),M4t.forEach(t),Lxr=r(PRe," (RoBERTa model)"),PRe.forEach(t),xxr=i(Pe),iC=n(Pe,"LI",{});var IRe=s(iC);VTe=n(IRe,"STRONG",{});var E4t=s(VTe);$xr=r(E4t,"roformer"),E4t.forEach(t),kxr=r(IRe," \u2014 "),bJ=n(IRe,"A",{href:!0});var C4t=s(bJ);Sxr=r(C4t,"FlaxRoFormerForSequenceClassification"),C4t.forEach(t),Rxr=r(IRe," (RoFormer model)"),IRe.forEach(t),Bxr=i(Pe),dC=n(Pe,"LI",{});var qRe=s(dC);XTe=n(qRe,"STRONG",{});var w4t=s(XTe);Pxr=r(w4t,"xlm-roberta"),w4t.forEach(t),Ixr=r(qRe," \u2014 "),vJ=n(qRe,"A",{href:!0});var A4t=s(vJ);qxr=r(A4t,"FlaxXLMRobertaForSequenceClassification"),A4t.forEach(t),Nxr=r(qRe," (XLM-RoBERTa model)"),qRe.forEach(t),Pe.forEach(t),jxr=i(Ol),T(cC.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),tIe=i(f),Pc=n(f,"H2",{class:!0});var lNe=s(Pc);fC=n(lNe,"A",{id:!0,class:!0,href:!0});var y4t=s(fC);zTe=n(y4t,"SPAN",{});var L4t=s(zTe);T(Q7.$$.fragment,L4t),L4t.forEach(t),y4t.forEach(t),Dxr=i(lNe),QTe=n(lNe,"SPAN",{});var x4t=s(QTe);Gxr=r(x4t,"FlaxAutoModelForQuestionAnswering"),x4t.forEach(t),lNe.forEach(t),aIe=i(f),ur=n(f,"DIV",{class:!0});var Vl=s(ur);T(W7.$$.fragment,Vl),Oxr=i(Vl),Ic=n(Vl,"P",{});var WK=s(Ic);Vxr=r(WK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),FJ=n(WK,"A",{href:!0});var $4t=s(FJ);Xxr=r($4t,"from_pretrained()"),$4t.forEach(t),zxr=r(WK," class method or the "),TJ=n(WK,"A",{href:!0});var k4t=s(TJ);Qxr=r(k4t,"from_config()"),k4t.forEach(t),Wxr=r(WK,` class
method.`),WK.forEach(t),Hxr=i(Vl),H7=n(Vl,"P",{});var iNe=s(H7);Uxr=r(iNe,"This class cannot be instantiated directly using "),WTe=n(iNe,"CODE",{});var S4t=s(WTe);Jxr=r(S4t,"__init__()"),S4t.forEach(t),Yxr=r(iNe," (throws an error)."),iNe.forEach(t),Kxr=i(Vl),Ot=n(Vl,"DIV",{class:!0});var iA=s(Ot);T(U7.$$.fragment,iA),Zxr=i(iA),HTe=n(iA,"P",{});var R4t=s(HTe);e9r=r(R4t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),R4t.forEach(t),o9r=i(iA),qc=n(iA,"P",{});var HK=s(qc);r9r=r(HK,`Note:
Loading a model from its configuration file does `),UTe=n(HK,"STRONG",{});var B4t=s(UTe);t9r=r(B4t,"not"),B4t.forEach(t),a9r=r(HK,` load the model weights. It only affects the
model\u2019s configuration. Use `),MJ=n(HK,"A",{href:!0});var P4t=s(MJ);n9r=r(P4t,"from_pretrained()"),P4t.forEach(t),s9r=r(HK," to load the model weights."),HK.forEach(t),l9r=i(iA),T(mC.$$.fragment,iA),iA.forEach(t),i9r=i(Vl),Vr=n(Vl,"DIV",{class:!0});var Xl=s(Vr);T(J7.$$.fragment,Xl),d9r=i(Xl),JTe=n(Xl,"P",{});var I4t=s(JTe);c9r=r(I4t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),I4t.forEach(t),f9r=i(Xl),pn=n(Xl,"P",{});var dA=s(pn);m9r=r(dA,"The model class to instantiate is selected based on the "),YTe=n(dA,"CODE",{});var q4t=s(YTe);g9r=r(q4t,"model_type"),q4t.forEach(t),h9r=r(dA,` property of the config object (either
passed as an argument or loaded from `),KTe=n(dA,"CODE",{});var N4t=s(KTe);p9r=r(N4t,"pretrained_model_name_or_path"),N4t.forEach(t),u9r=r(dA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZTe=n(dA,"CODE",{});var j4t=s(ZTe);_9r=r(j4t,"pretrained_model_name_or_path"),j4t.forEach(t),b9r=r(dA,":"),dA.forEach(t),v9r=i(Xl),$e=n(Xl,"UL",{});var Ie=s($e);gC=n(Ie,"LI",{});var NRe=s(gC);e8e=n(NRe,"STRONG",{});var D4t=s(e8e);F9r=r(D4t,"albert"),D4t.forEach(t),T9r=r(NRe," \u2014 "),EJ=n(NRe,"A",{href:!0});var G4t=s(EJ);M9r=r(G4t,"FlaxAlbertForQuestionAnswering"),G4t.forEach(t),E9r=r(NRe," (ALBERT model)"),NRe.forEach(t),C9r=i(Ie),hC=n(Ie,"LI",{});var jRe=s(hC);o8e=n(jRe,"STRONG",{});var O4t=s(o8e);w9r=r(O4t,"bart"),O4t.forEach(t),A9r=r(jRe," \u2014 "),CJ=n(jRe,"A",{href:!0});var V4t=s(CJ);y9r=r(V4t,"FlaxBartForQuestionAnswering"),V4t.forEach(t),L9r=r(jRe," (BART model)"),jRe.forEach(t),x9r=i(Ie),pC=n(Ie,"LI",{});var DRe=s(pC);r8e=n(DRe,"STRONG",{});var X4t=s(r8e);$9r=r(X4t,"bert"),X4t.forEach(t),k9r=r(DRe," \u2014 "),wJ=n(DRe,"A",{href:!0});var z4t=s(wJ);S9r=r(z4t,"FlaxBertForQuestionAnswering"),z4t.forEach(t),R9r=r(DRe," (BERT model)"),DRe.forEach(t),B9r=i(Ie),uC=n(Ie,"LI",{});var GRe=s(uC);t8e=n(GRe,"STRONG",{});var Q4t=s(t8e);P9r=r(Q4t,"big_bird"),Q4t.forEach(t),I9r=r(GRe," \u2014 "),AJ=n(GRe,"A",{href:!0});var W4t=s(AJ);q9r=r(W4t,"FlaxBigBirdForQuestionAnswering"),W4t.forEach(t),N9r=r(GRe," (BigBird model)"),GRe.forEach(t),j9r=i(Ie),_C=n(Ie,"LI",{});var ORe=s(_C);a8e=n(ORe,"STRONG",{});var H4t=s(a8e);D9r=r(H4t,"distilbert"),H4t.forEach(t),G9r=r(ORe," \u2014 "),yJ=n(ORe,"A",{href:!0});var U4t=s(yJ);O9r=r(U4t,"FlaxDistilBertForQuestionAnswering"),U4t.forEach(t),V9r=r(ORe," (DistilBERT model)"),ORe.forEach(t),X9r=i(Ie),bC=n(Ie,"LI",{});var VRe=s(bC);n8e=n(VRe,"STRONG",{});var J4t=s(n8e);z9r=r(J4t,"electra"),J4t.forEach(t),Q9r=r(VRe," \u2014 "),LJ=n(VRe,"A",{href:!0});var Y4t=s(LJ);W9r=r(Y4t,"FlaxElectraForQuestionAnswering"),Y4t.forEach(t),H9r=r(VRe," (ELECTRA model)"),VRe.forEach(t),U9r=i(Ie),vC=n(Ie,"LI",{});var XRe=s(vC);s8e=n(XRe,"STRONG",{});var K4t=s(s8e);J9r=r(K4t,"mbart"),K4t.forEach(t),Y9r=r(XRe," \u2014 "),xJ=n(XRe,"A",{href:!0});var Z4t=s(xJ);K9r=r(Z4t,"FlaxMBartForQuestionAnswering"),Z4t.forEach(t),Z9r=r(XRe," (mBART model)"),XRe.forEach(t),e$r=i(Ie),FC=n(Ie,"LI",{});var zRe=s(FC);l8e=n(zRe,"STRONG",{});var eEt=s(l8e);o$r=r(eEt,"roberta"),eEt.forEach(t),r$r=r(zRe," \u2014 "),$J=n(zRe,"A",{href:!0});var oEt=s($J);t$r=r(oEt,"FlaxRobertaForQuestionAnswering"),oEt.forEach(t),a$r=r(zRe," (RoBERTa model)"),zRe.forEach(t),n$r=i(Ie),TC=n(Ie,"LI",{});var QRe=s(TC);i8e=n(QRe,"STRONG",{});var rEt=s(i8e);s$r=r(rEt,"roformer"),rEt.forEach(t),l$r=r(QRe," \u2014 "),kJ=n(QRe,"A",{href:!0});var tEt=s(kJ);i$r=r(tEt,"FlaxRoFormerForQuestionAnswering"),tEt.forEach(t),d$r=r(QRe," (RoFormer model)"),QRe.forEach(t),c$r=i(Ie),MC=n(Ie,"LI",{});var WRe=s(MC);d8e=n(WRe,"STRONG",{});var aEt=s(d8e);f$r=r(aEt,"xlm-roberta"),aEt.forEach(t),m$r=r(WRe," \u2014 "),SJ=n(WRe,"A",{href:!0});var nEt=s(SJ);g$r=r(nEt,"FlaxXLMRobertaForQuestionAnswering"),nEt.forEach(t),h$r=r(WRe," (XLM-RoBERTa model)"),WRe.forEach(t),Ie.forEach(t),p$r=i(Xl),T(EC.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),nIe=i(f),Nc=n(f,"H2",{class:!0});var dNe=s(Nc);CC=n(dNe,"A",{id:!0,class:!0,href:!0});var sEt=s(CC);c8e=n(sEt,"SPAN",{});var lEt=s(c8e);T(Y7.$$.fragment,lEt),lEt.forEach(t),sEt.forEach(t),u$r=i(dNe),f8e=n(dNe,"SPAN",{});var iEt=s(f8e);_$r=r(iEt,"FlaxAutoModelForTokenClassification"),iEt.forEach(t),dNe.forEach(t),sIe=i(f),_r=n(f,"DIV",{class:!0});var zl=s(_r);T(K7.$$.fragment,zl),b$r=i(zl),jc=n(zl,"P",{});var UK=s(jc);v$r=r(UK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),RJ=n(UK,"A",{href:!0});var dEt=s(RJ);F$r=r(dEt,"from_pretrained()"),dEt.forEach(t),T$r=r(UK," class method or the "),BJ=n(UK,"A",{href:!0});var cEt=s(BJ);M$r=r(cEt,"from_config()"),cEt.forEach(t),E$r=r(UK,` class
method.`),UK.forEach(t),C$r=i(zl),Z7=n(zl,"P",{});var cNe=s(Z7);w$r=r(cNe,"This class cannot be instantiated directly using "),m8e=n(cNe,"CODE",{});var fEt=s(m8e);A$r=r(fEt,"__init__()"),fEt.forEach(t),y$r=r(cNe," (throws an error)."),cNe.forEach(t),L$r=i(zl),Vt=n(zl,"DIV",{class:!0});var cA=s(Vt);T(ex.$$.fragment,cA),x$r=i(cA),g8e=n(cA,"P",{});var mEt=s(g8e);$$r=r(mEt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),mEt.forEach(t),k$r=i(cA),Dc=n(cA,"P",{});var JK=s(Dc);S$r=r(JK,`Note:
Loading a model from its configuration file does `),h8e=n(JK,"STRONG",{});var gEt=s(h8e);R$r=r(gEt,"not"),gEt.forEach(t),B$r=r(JK,` load the model weights. It only affects the
model\u2019s configuration. Use `),PJ=n(JK,"A",{href:!0});var hEt=s(PJ);P$r=r(hEt,"from_pretrained()"),hEt.forEach(t),I$r=r(JK," to load the model weights."),JK.forEach(t),q$r=i(cA),T(wC.$$.fragment,cA),cA.forEach(t),N$r=i(zl),Xr=n(zl,"DIV",{class:!0});var Ql=s(Xr);T(ox.$$.fragment,Ql),j$r=i(Ql),p8e=n(Ql,"P",{});var pEt=s(p8e);D$r=r(pEt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),pEt.forEach(t),G$r=i(Ql),un=n(Ql,"P",{});var fA=s(un);O$r=r(fA,"The model class to instantiate is selected based on the "),u8e=n(fA,"CODE",{});var uEt=s(u8e);V$r=r(uEt,"model_type"),uEt.forEach(t),X$r=r(fA,` property of the config object (either
passed as an argument or loaded from `),_8e=n(fA,"CODE",{});var _Et=s(_8e);z$r=r(_Et,"pretrained_model_name_or_path"),_Et.forEach(t),Q$r=r(fA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b8e=n(fA,"CODE",{});var bEt=s(b8e);W$r=r(bEt,"pretrained_model_name_or_path"),bEt.forEach(t),H$r=r(fA,":"),fA.forEach(t),U$r=i(Ql),De=n(Ql,"UL",{});var Fo=s(De);AC=n(Fo,"LI",{});var HRe=s(AC);v8e=n(HRe,"STRONG",{});var vEt=s(v8e);J$r=r(vEt,"albert"),vEt.forEach(t),Y$r=r(HRe," \u2014 "),IJ=n(HRe,"A",{href:!0});var FEt=s(IJ);K$r=r(FEt,"FlaxAlbertForTokenClassification"),FEt.forEach(t),Z$r=r(HRe," (ALBERT model)"),HRe.forEach(t),ekr=i(Fo),yC=n(Fo,"LI",{});var URe=s(yC);F8e=n(URe,"STRONG",{});var TEt=s(F8e);okr=r(TEt,"bert"),TEt.forEach(t),rkr=r(URe," \u2014 "),qJ=n(URe,"A",{href:!0});var MEt=s(qJ);tkr=r(MEt,"FlaxBertForTokenClassification"),MEt.forEach(t),akr=r(URe," (BERT model)"),URe.forEach(t),nkr=i(Fo),LC=n(Fo,"LI",{});var JRe=s(LC);T8e=n(JRe,"STRONG",{});var EEt=s(T8e);skr=r(EEt,"big_bird"),EEt.forEach(t),lkr=r(JRe," \u2014 "),NJ=n(JRe,"A",{href:!0});var CEt=s(NJ);ikr=r(CEt,"FlaxBigBirdForTokenClassification"),CEt.forEach(t),dkr=r(JRe," (BigBird model)"),JRe.forEach(t),ckr=i(Fo),xC=n(Fo,"LI",{});var YRe=s(xC);M8e=n(YRe,"STRONG",{});var wEt=s(M8e);fkr=r(wEt,"distilbert"),wEt.forEach(t),mkr=r(YRe," \u2014 "),jJ=n(YRe,"A",{href:!0});var AEt=s(jJ);gkr=r(AEt,"FlaxDistilBertForTokenClassification"),AEt.forEach(t),hkr=r(YRe," (DistilBERT model)"),YRe.forEach(t),pkr=i(Fo),$C=n(Fo,"LI",{});var KRe=s($C);E8e=n(KRe,"STRONG",{});var yEt=s(E8e);ukr=r(yEt,"electra"),yEt.forEach(t),_kr=r(KRe," \u2014 "),DJ=n(KRe,"A",{href:!0});var LEt=s(DJ);bkr=r(LEt,"FlaxElectraForTokenClassification"),LEt.forEach(t),vkr=r(KRe," (ELECTRA model)"),KRe.forEach(t),Fkr=i(Fo),kC=n(Fo,"LI",{});var ZRe=s(kC);C8e=n(ZRe,"STRONG",{});var xEt=s(C8e);Tkr=r(xEt,"roberta"),xEt.forEach(t),Mkr=r(ZRe," \u2014 "),GJ=n(ZRe,"A",{href:!0});var $Et=s(GJ);Ekr=r($Et,"FlaxRobertaForTokenClassification"),$Et.forEach(t),Ckr=r(ZRe," (RoBERTa model)"),ZRe.forEach(t),wkr=i(Fo),SC=n(Fo,"LI",{});var eBe=s(SC);w8e=n(eBe,"STRONG",{});var kEt=s(w8e);Akr=r(kEt,"roformer"),kEt.forEach(t),ykr=r(eBe," \u2014 "),OJ=n(eBe,"A",{href:!0});var SEt=s(OJ);Lkr=r(SEt,"FlaxRoFormerForTokenClassification"),SEt.forEach(t),xkr=r(eBe," (RoFormer model)"),eBe.forEach(t),$kr=i(Fo),RC=n(Fo,"LI",{});var oBe=s(RC);A8e=n(oBe,"STRONG",{});var REt=s(A8e);kkr=r(REt,"xlm-roberta"),REt.forEach(t),Skr=r(oBe," \u2014 "),VJ=n(oBe,"A",{href:!0});var BEt=s(VJ);Rkr=r(BEt,"FlaxXLMRobertaForTokenClassification"),BEt.forEach(t),Bkr=r(oBe," (XLM-RoBERTa model)"),oBe.forEach(t),Fo.forEach(t),Pkr=i(Ql),T(BC.$$.fragment,Ql),Ql.forEach(t),zl.forEach(t),lIe=i(f),Gc=n(f,"H2",{class:!0});var fNe=s(Gc);PC=n(fNe,"A",{id:!0,class:!0,href:!0});var PEt=s(PC);y8e=n(PEt,"SPAN",{});var IEt=s(y8e);T(rx.$$.fragment,IEt),IEt.forEach(t),PEt.forEach(t),Ikr=i(fNe),L8e=n(fNe,"SPAN",{});var qEt=s(L8e);qkr=r(qEt,"FlaxAutoModelForMultipleChoice"),qEt.forEach(t),fNe.forEach(t),iIe=i(f),br=n(f,"DIV",{class:!0});var Wl=s(br);T(tx.$$.fragment,Wl),Nkr=i(Wl),Oc=n(Wl,"P",{});var YK=s(Oc);jkr=r(YK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),XJ=n(YK,"A",{href:!0});var NEt=s(XJ);Dkr=r(NEt,"from_pretrained()"),NEt.forEach(t),Gkr=r(YK," class method or the "),zJ=n(YK,"A",{href:!0});var jEt=s(zJ);Okr=r(jEt,"from_config()"),jEt.forEach(t),Vkr=r(YK,` class
method.`),YK.forEach(t),Xkr=i(Wl),ax=n(Wl,"P",{});var mNe=s(ax);zkr=r(mNe,"This class cannot be instantiated directly using "),x8e=n(mNe,"CODE",{});var DEt=s(x8e);Qkr=r(DEt,"__init__()"),DEt.forEach(t),Wkr=r(mNe," (throws an error)."),mNe.forEach(t),Hkr=i(Wl),Xt=n(Wl,"DIV",{class:!0});var mA=s(Xt);T(nx.$$.fragment,mA),Ukr=i(mA),$8e=n(mA,"P",{});var GEt=s($8e);Jkr=r(GEt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),GEt.forEach(t),Ykr=i(mA),Vc=n(mA,"P",{});var KK=s(Vc);Kkr=r(KK,`Note:
Loading a model from its configuration file does `),k8e=n(KK,"STRONG",{});var OEt=s(k8e);Zkr=r(OEt,"not"),OEt.forEach(t),eSr=r(KK,` load the model weights. It only affects the
model\u2019s configuration. Use `),QJ=n(KK,"A",{href:!0});var VEt=s(QJ);oSr=r(VEt,"from_pretrained()"),VEt.forEach(t),rSr=r(KK," to load the model weights."),KK.forEach(t),tSr=i(mA),T(IC.$$.fragment,mA),mA.forEach(t),aSr=i(Wl),zr=n(Wl,"DIV",{class:!0});var Hl=s(zr);T(sx.$$.fragment,Hl),nSr=i(Hl),S8e=n(Hl,"P",{});var XEt=s(S8e);sSr=r(XEt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),XEt.forEach(t),lSr=i(Hl),_n=n(Hl,"P",{});var gA=s(_n);iSr=r(gA,"The model class to instantiate is selected based on the "),R8e=n(gA,"CODE",{});var zEt=s(R8e);dSr=r(zEt,"model_type"),zEt.forEach(t),cSr=r(gA,` property of the config object (either
passed as an argument or loaded from `),B8e=n(gA,"CODE",{});var QEt=s(B8e);fSr=r(QEt,"pretrained_model_name_or_path"),QEt.forEach(t),mSr=r(gA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P8e=n(gA,"CODE",{});var WEt=s(P8e);gSr=r(WEt,"pretrained_model_name_or_path"),WEt.forEach(t),hSr=r(gA,":"),gA.forEach(t),pSr=i(Hl),Ge=n(Hl,"UL",{});var To=s(Ge);qC=n(To,"LI",{});var rBe=s(qC);I8e=n(rBe,"STRONG",{});var HEt=s(I8e);uSr=r(HEt,"albert"),HEt.forEach(t),_Sr=r(rBe," \u2014 "),WJ=n(rBe,"A",{href:!0});var UEt=s(WJ);bSr=r(UEt,"FlaxAlbertForMultipleChoice"),UEt.forEach(t),vSr=r(rBe," (ALBERT model)"),rBe.forEach(t),FSr=i(To),NC=n(To,"LI",{});var tBe=s(NC);q8e=n(tBe,"STRONG",{});var JEt=s(q8e);TSr=r(JEt,"bert"),JEt.forEach(t),MSr=r(tBe," \u2014 "),HJ=n(tBe,"A",{href:!0});var YEt=s(HJ);ESr=r(YEt,"FlaxBertForMultipleChoice"),YEt.forEach(t),CSr=r(tBe," (BERT model)"),tBe.forEach(t),wSr=i(To),jC=n(To,"LI",{});var aBe=s(jC);N8e=n(aBe,"STRONG",{});var KEt=s(N8e);ASr=r(KEt,"big_bird"),KEt.forEach(t),ySr=r(aBe," \u2014 "),UJ=n(aBe,"A",{href:!0});var ZEt=s(UJ);LSr=r(ZEt,"FlaxBigBirdForMultipleChoice"),ZEt.forEach(t),xSr=r(aBe," (BigBird model)"),aBe.forEach(t),$Sr=i(To),DC=n(To,"LI",{});var nBe=s(DC);j8e=n(nBe,"STRONG",{});var e5t=s(j8e);kSr=r(e5t,"distilbert"),e5t.forEach(t),SSr=r(nBe," \u2014 "),JJ=n(nBe,"A",{href:!0});var o5t=s(JJ);RSr=r(o5t,"FlaxDistilBertForMultipleChoice"),o5t.forEach(t),BSr=r(nBe," (DistilBERT model)"),nBe.forEach(t),PSr=i(To),GC=n(To,"LI",{});var sBe=s(GC);D8e=n(sBe,"STRONG",{});var r5t=s(D8e);ISr=r(r5t,"electra"),r5t.forEach(t),qSr=r(sBe," \u2014 "),YJ=n(sBe,"A",{href:!0});var t5t=s(YJ);NSr=r(t5t,"FlaxElectraForMultipleChoice"),t5t.forEach(t),jSr=r(sBe," (ELECTRA model)"),sBe.forEach(t),DSr=i(To),OC=n(To,"LI",{});var lBe=s(OC);G8e=n(lBe,"STRONG",{});var a5t=s(G8e);GSr=r(a5t,"roberta"),a5t.forEach(t),OSr=r(lBe," \u2014 "),KJ=n(lBe,"A",{href:!0});var n5t=s(KJ);VSr=r(n5t,"FlaxRobertaForMultipleChoice"),n5t.forEach(t),XSr=r(lBe," (RoBERTa model)"),lBe.forEach(t),zSr=i(To),VC=n(To,"LI",{});var iBe=s(VC);O8e=n(iBe,"STRONG",{});var s5t=s(O8e);QSr=r(s5t,"roformer"),s5t.forEach(t),WSr=r(iBe," \u2014 "),ZJ=n(iBe,"A",{href:!0});var l5t=s(ZJ);HSr=r(l5t,"FlaxRoFormerForMultipleChoice"),l5t.forEach(t),USr=r(iBe," (RoFormer model)"),iBe.forEach(t),JSr=i(To),XC=n(To,"LI",{});var dBe=s(XC);V8e=n(dBe,"STRONG",{});var i5t=s(V8e);YSr=r(i5t,"xlm-roberta"),i5t.forEach(t),KSr=r(dBe," \u2014 "),eY=n(dBe,"A",{href:!0});var d5t=s(eY);ZSr=r(d5t,"FlaxXLMRobertaForMultipleChoice"),d5t.forEach(t),eRr=r(dBe," (XLM-RoBERTa model)"),dBe.forEach(t),To.forEach(t),oRr=i(Hl),T(zC.$$.fragment,Hl),Hl.forEach(t),Wl.forEach(t),dIe=i(f),Xc=n(f,"H2",{class:!0});var gNe=s(Xc);QC=n(gNe,"A",{id:!0,class:!0,href:!0});var c5t=s(QC);X8e=n(c5t,"SPAN",{});var f5t=s(X8e);T(lx.$$.fragment,f5t),f5t.forEach(t),c5t.forEach(t),rRr=i(gNe),z8e=n(gNe,"SPAN",{});var m5t=s(z8e);tRr=r(m5t,"FlaxAutoModelForNextSentencePrediction"),m5t.forEach(t),gNe.forEach(t),cIe=i(f),vr=n(f,"DIV",{class:!0});var Ul=s(vr);T(ix.$$.fragment,Ul),aRr=i(Ul),zc=n(Ul,"P",{});var ZK=s(zc);nRr=r(ZK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),oY=n(ZK,"A",{href:!0});var g5t=s(oY);sRr=r(g5t,"from_pretrained()"),g5t.forEach(t),lRr=r(ZK," class method or the "),rY=n(ZK,"A",{href:!0});var h5t=s(rY);iRr=r(h5t,"from_config()"),h5t.forEach(t),dRr=r(ZK,` class
method.`),ZK.forEach(t),cRr=i(Ul),dx=n(Ul,"P",{});var hNe=s(dx);fRr=r(hNe,"This class cannot be instantiated directly using "),Q8e=n(hNe,"CODE",{});var p5t=s(Q8e);mRr=r(p5t,"__init__()"),p5t.forEach(t),gRr=r(hNe," (throws an error)."),hNe.forEach(t),hRr=i(Ul),zt=n(Ul,"DIV",{class:!0});var hA=s(zt);T(cx.$$.fragment,hA),pRr=i(hA),W8e=n(hA,"P",{});var u5t=s(W8e);uRr=r(u5t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),u5t.forEach(t),_Rr=i(hA),Qc=n(hA,"P",{});var eZ=s(Qc);bRr=r(eZ,`Note:
Loading a model from its configuration file does `),H8e=n(eZ,"STRONG",{});var _5t=s(H8e);vRr=r(_5t,"not"),_5t.forEach(t),FRr=r(eZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),tY=n(eZ,"A",{href:!0});var b5t=s(tY);TRr=r(b5t,"from_pretrained()"),b5t.forEach(t),MRr=r(eZ," to load the model weights."),eZ.forEach(t),ERr=i(hA),T(WC.$$.fragment,hA),hA.forEach(t),CRr=i(Ul),Qr=n(Ul,"DIV",{class:!0});var Jl=s(Qr);T(fx.$$.fragment,Jl),wRr=i(Jl),U8e=n(Jl,"P",{});var v5t=s(U8e);ARr=r(v5t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),v5t.forEach(t),yRr=i(Jl),bn=n(Jl,"P",{});var pA=s(bn);LRr=r(pA,"The model class to instantiate is selected based on the "),J8e=n(pA,"CODE",{});var F5t=s(J8e);xRr=r(F5t,"model_type"),F5t.forEach(t),$Rr=r(pA,` property of the config object (either
passed as an argument or loaded from `),Y8e=n(pA,"CODE",{});var T5t=s(Y8e);kRr=r(T5t,"pretrained_model_name_or_path"),T5t.forEach(t),SRr=r(pA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K8e=n(pA,"CODE",{});var M5t=s(K8e);RRr=r(M5t,"pretrained_model_name_or_path"),M5t.forEach(t),BRr=r(pA,":"),pA.forEach(t),PRr=i(Jl),Z8e=n(Jl,"UL",{});var E5t=s(Z8e);HC=n(E5t,"LI",{});var cBe=s(HC);eMe=n(cBe,"STRONG",{});var C5t=s(eMe);IRr=r(C5t,"bert"),C5t.forEach(t),qRr=r(cBe," \u2014 "),aY=n(cBe,"A",{href:!0});var w5t=s(aY);NRr=r(w5t,"FlaxBertForNextSentencePrediction"),w5t.forEach(t),jRr=r(cBe," (BERT model)"),cBe.forEach(t),E5t.forEach(t),DRr=i(Jl),T(UC.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),fIe=i(f),Wc=n(f,"H2",{class:!0});var pNe=s(Wc);JC=n(pNe,"A",{id:!0,class:!0,href:!0});var A5t=s(JC);oMe=n(A5t,"SPAN",{});var y5t=s(oMe);T(mx.$$.fragment,y5t),y5t.forEach(t),A5t.forEach(t),GRr=i(pNe),rMe=n(pNe,"SPAN",{});var L5t=s(rMe);ORr=r(L5t,"FlaxAutoModelForImageClassification"),L5t.forEach(t),pNe.forEach(t),mIe=i(f),Fr=n(f,"DIV",{class:!0});var Yl=s(Fr);T(gx.$$.fragment,Yl),VRr=i(Yl),Hc=n(Yl,"P",{});var oZ=s(Hc);XRr=r(oZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),nY=n(oZ,"A",{href:!0});var x5t=s(nY);zRr=r(x5t,"from_pretrained()"),x5t.forEach(t),QRr=r(oZ," class method or the "),sY=n(oZ,"A",{href:!0});var $5t=s(sY);WRr=r($5t,"from_config()"),$5t.forEach(t),HRr=r(oZ,` class
method.`),oZ.forEach(t),URr=i(Yl),hx=n(Yl,"P",{});var uNe=s(hx);JRr=r(uNe,"This class cannot be instantiated directly using "),tMe=n(uNe,"CODE",{});var k5t=s(tMe);YRr=r(k5t,"__init__()"),k5t.forEach(t),KRr=r(uNe," (throws an error)."),uNe.forEach(t),ZRr=i(Yl),Qt=n(Yl,"DIV",{class:!0});var uA=s(Qt);T(px.$$.fragment,uA),eBr=i(uA),aMe=n(uA,"P",{});var S5t=s(aMe);oBr=r(S5t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),S5t.forEach(t),rBr=i(uA),Uc=n(uA,"P",{});var rZ=s(Uc);tBr=r(rZ,`Note:
Loading a model from its configuration file does `),nMe=n(rZ,"STRONG",{});var R5t=s(nMe);aBr=r(R5t,"not"),R5t.forEach(t),nBr=r(rZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),lY=n(rZ,"A",{href:!0});var B5t=s(lY);sBr=r(B5t,"from_pretrained()"),B5t.forEach(t),lBr=r(rZ," to load the model weights."),rZ.forEach(t),iBr=i(uA),T(YC.$$.fragment,uA),uA.forEach(t),dBr=i(Yl),Wr=n(Yl,"DIV",{class:!0});var Kl=s(Wr);T(ux.$$.fragment,Kl),cBr=i(Kl),sMe=n(Kl,"P",{});var P5t=s(sMe);fBr=r(P5t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),P5t.forEach(t),mBr=i(Kl),vn=n(Kl,"P",{});var _A=s(vn);gBr=r(_A,"The model class to instantiate is selected based on the "),lMe=n(_A,"CODE",{});var I5t=s(lMe);hBr=r(I5t,"model_type"),I5t.forEach(t),pBr=r(_A,` property of the config object (either
passed as an argument or loaded from `),iMe=n(_A,"CODE",{});var q5t=s(iMe);uBr=r(q5t,"pretrained_model_name_or_path"),q5t.forEach(t),_Br=r(_A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dMe=n(_A,"CODE",{});var N5t=s(dMe);bBr=r(N5t,"pretrained_model_name_or_path"),N5t.forEach(t),vBr=r(_A,":"),_A.forEach(t),FBr=i(Kl),_x=n(Kl,"UL",{});var _Ne=s(_x);KC=n(_Ne,"LI",{});var fBe=s(KC);cMe=n(fBe,"STRONG",{});var j5t=s(cMe);TBr=r(j5t,"beit"),j5t.forEach(t),MBr=r(fBe," \u2014 "),iY=n(fBe,"A",{href:!0});var D5t=s(iY);EBr=r(D5t,"FlaxBeitForImageClassification"),D5t.forEach(t),CBr=r(fBe," (BEiT model)"),fBe.forEach(t),wBr=i(_Ne),ZC=n(_Ne,"LI",{});var mBe=s(ZC);fMe=n(mBe,"STRONG",{});var G5t=s(fMe);ABr=r(G5t,"vit"),G5t.forEach(t),yBr=r(mBe," \u2014 "),dY=n(mBe,"A",{href:!0});var O5t=s(dY);LBr=r(O5t,"FlaxViTForImageClassification"),O5t.forEach(t),xBr=r(mBe," (ViT model)"),mBe.forEach(t),_Ne.forEach(t),$Br=i(Kl),T(e3.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),gIe=i(f),Jc=n(f,"H2",{class:!0});var bNe=s(Jc);o3=n(bNe,"A",{id:!0,class:!0,href:!0});var V5t=s(o3);mMe=n(V5t,"SPAN",{});var X5t=s(mMe);T(bx.$$.fragment,X5t),X5t.forEach(t),V5t.forEach(t),kBr=i(bNe),gMe=n(bNe,"SPAN",{});var z5t=s(gMe);SBr=r(z5t,"FlaxAutoModelForVision2Seq"),z5t.forEach(t),bNe.forEach(t),hIe=i(f),Tr=n(f,"DIV",{class:!0});var Zl=s(Tr);T(vx.$$.fragment,Zl),RBr=i(Zl),Yc=n(Zl,"P",{});var tZ=s(Yc);BBr=r(tZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),cY=n(tZ,"A",{href:!0});var Q5t=s(cY);PBr=r(Q5t,"from_pretrained()"),Q5t.forEach(t),IBr=r(tZ," class method or the "),fY=n(tZ,"A",{href:!0});var W5t=s(fY);qBr=r(W5t,"from_config()"),W5t.forEach(t),NBr=r(tZ,` class
method.`),tZ.forEach(t),jBr=i(Zl),Fx=n(Zl,"P",{});var vNe=s(Fx);DBr=r(vNe,"This class cannot be instantiated directly using "),hMe=n(vNe,"CODE",{});var H5t=s(hMe);GBr=r(H5t,"__init__()"),H5t.forEach(t),OBr=r(vNe," (throws an error)."),vNe.forEach(t),VBr=i(Zl),Wt=n(Zl,"DIV",{class:!0});var bA=s(Wt);T(Tx.$$.fragment,bA),XBr=i(bA),pMe=n(bA,"P",{});var U5t=s(pMe);zBr=r(U5t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),U5t.forEach(t),QBr=i(bA),Kc=n(bA,"P",{});var aZ=s(Kc);WBr=r(aZ,`Note:
Loading a model from its configuration file does `),uMe=n(aZ,"STRONG",{});var J5t=s(uMe);HBr=r(J5t,"not"),J5t.forEach(t),UBr=r(aZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),mY=n(aZ,"A",{href:!0});var Y5t=s(mY);JBr=r(Y5t,"from_pretrained()"),Y5t.forEach(t),YBr=r(aZ," to load the model weights."),aZ.forEach(t),KBr=i(bA),T(r3.$$.fragment,bA),bA.forEach(t),ZBr=i(Zl),Hr=n(Zl,"DIV",{class:!0});var ei=s(Hr);T(Mx.$$.fragment,ei),ePr=i(ei),_Me=n(ei,"P",{});var K5t=s(_Me);oPr=r(K5t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),K5t.forEach(t),rPr=i(ei),Fn=n(ei,"P",{});var vA=s(Fn);tPr=r(vA,"The model class to instantiate is selected based on the "),bMe=n(vA,"CODE",{});var Z5t=s(bMe);aPr=r(Z5t,"model_type"),Z5t.forEach(t),nPr=r(vA,` property of the config object (either
passed as an argument or loaded from `),vMe=n(vA,"CODE",{});var eCt=s(vMe);sPr=r(eCt,"pretrained_model_name_or_path"),eCt.forEach(t),lPr=r(vA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FMe=n(vA,"CODE",{});var oCt=s(FMe);iPr=r(oCt,"pretrained_model_name_or_path"),oCt.forEach(t),dPr=r(vA,":"),vA.forEach(t),cPr=i(ei),TMe=n(ei,"UL",{});var rCt=s(TMe);t3=n(rCt,"LI",{});var gBe=s(t3);MMe=n(gBe,"STRONG",{});var tCt=s(MMe);fPr=r(tCt,"vision-encoder-decoder"),tCt.forEach(t),mPr=r(gBe," \u2014 "),gY=n(gBe,"A",{href:!0});var aCt=s(gY);gPr=r(aCt,"FlaxVisionEncoderDecoderModel"),aCt.forEach(t),hPr=r(gBe," (Vision Encoder decoder model)"),gBe.forEach(t),rCt.forEach(t),pPr=i(ei),T(a3.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(swt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Mn,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.AutoConfig"),c(Cn,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.AutoModel"),c(wn,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.AutoTokenizer"),c(li,"href","/docs/transformers/pr_16682/en/model_doc/bert#transformers.BertModel"),c(sf,"id","extending-the-auto-classes"),c(sf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sf,"href","#extending-the-auto-classes"),c(ii,"class","relative group"),c(df,"id","transformers.AutoConfig"),c(df,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(df,"href","#transformers.AutoConfig"),c(di,"class","relative group"),c(G9,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(O9,"href","/docs/transformers/pr_16682/en/model_doc/albert#transformers.AlbertConfig"),c(V9,"href","/docs/transformers/pr_16682/en/model_doc/bart#transformers.BartConfig"),c(X9,"href","/docs/transformers/pr_16682/en/model_doc/beit#transformers.BeitConfig"),c(z9,"href","/docs/transformers/pr_16682/en/model_doc/bert#transformers.BertConfig"),c(Q9,"href","/docs/transformers/pr_16682/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(W9,"href","/docs/transformers/pr_16682/en/model_doc/big_bird#transformers.BigBirdConfig"),c(H9,"href","/docs/transformers/pr_16682/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(U9,"href","/docs/transformers/pr_16682/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(J9,"href","/docs/transformers/pr_16682/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(Y9,"href","/docs/transformers/pr_16682/en/model_doc/camembert#transformers.CamembertConfig"),c(K9,"href","/docs/transformers/pr_16682/en/model_doc/canine#transformers.CanineConfig"),c(Z9,"href","/docs/transformers/pr_16682/en/model_doc/clip#transformers.CLIPConfig"),c(e$,"href","/docs/transformers/pr_16682/en/model_doc/convbert#transformers.ConvBertConfig"),c(o$,"href","/docs/transformers/pr_16682/en/model_doc/convnext#transformers.ConvNextConfig"),c(r$,"href","/docs/transformers/pr_16682/en/model_doc/ctrl#transformers.CTRLConfig"),c(t$,"href","/docs/transformers/pr_16682/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(a$,"href","/docs/transformers/pr_16682/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(n$,"href","/docs/transformers/pr_16682/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(s$,"href","/docs/transformers/pr_16682/en/model_doc/deberta#transformers.DebertaConfig"),c(l$,"href","/docs/transformers/pr_16682/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(i$,"href","/docs/transformers/pr_16682/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(d$,"href","/docs/transformers/pr_16682/en/model_doc/deit#transformers.DeiTConfig"),c(c$,"href","/docs/transformers/pr_16682/en/model_doc/detr#transformers.DetrConfig"),c(f$,"href","/docs/transformers/pr_16682/en/model_doc/distilbert#transformers.DistilBertConfig"),c(m$,"href","/docs/transformers/pr_16682/en/model_doc/dpr#transformers.DPRConfig"),c(g$,"href","/docs/transformers/pr_16682/en/model_doc/dpt#transformers.DPTConfig"),c(h$,"href","/docs/transformers/pr_16682/en/model_doc/electra#transformers.ElectraConfig"),c(p$,"href","/docs/transformers/pr_16682/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(u$,"href","/docs/transformers/pr_16682/en/model_doc/flaubert#transformers.FlaubertConfig"),c(_$,"href","/docs/transformers/pr_16682/en/model_doc/fnet#transformers.FNetConfig"),c(b$,"href","/docs/transformers/pr_16682/en/model_doc/fsmt#transformers.FSMTConfig"),c(v$,"href","/docs/transformers/pr_16682/en/model_doc/funnel#transformers.FunnelConfig"),c(F$,"href","/docs/transformers/pr_16682/en/model_doc/glpn#transformers.GLPNConfig"),c(T$,"href","/docs/transformers/pr_16682/en/model_doc/gpt2#transformers.GPT2Config"),c(M$,"href","/docs/transformers/pr_16682/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(E$,"href","/docs/transformers/pr_16682/en/model_doc/gptj#transformers.GPTJConfig"),c(C$,"href","/docs/transformers/pr_16682/en/model_doc/hubert#transformers.HubertConfig"),c(w$,"href","/docs/transformers/pr_16682/en/model_doc/ibert#transformers.IBertConfig"),c(A$,"href","/docs/transformers/pr_16682/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(y$,"href","/docs/transformers/pr_16682/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(L$,"href","/docs/transformers/pr_16682/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(x$,"href","/docs/transformers/pr_16682/en/model_doc/led#transformers.LEDConfig"),c($$,"href","/docs/transformers/pr_16682/en/model_doc/longformer#transformers.LongformerConfig"),c(k$,"href","/docs/transformers/pr_16682/en/model_doc/luke#transformers.LukeConfig"),c(S$,"href","/docs/transformers/pr_16682/en/model_doc/lxmert#transformers.LxmertConfig"),c(R$,"href","/docs/transformers/pr_16682/en/model_doc/m2m_100#transformers.M2M100Config"),c(B$,"href","/docs/transformers/pr_16682/en/model_doc/marian#transformers.MarianConfig"),c(P$,"href","/docs/transformers/pr_16682/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(I$,"href","/docs/transformers/pr_16682/en/model_doc/mbart#transformers.MBartConfig"),c(q$,"href","/docs/transformers/pr_16682/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(N$,"href","/docs/transformers/pr_16682/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(j$,"href","/docs/transformers/pr_16682/en/model_doc/mpnet#transformers.MPNetConfig"),c(D$,"href","/docs/transformers/pr_16682/en/model_doc/mt5#transformers.MT5Config"),c(G$,"href","/docs/transformers/pr_16682/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(O$,"href","/docs/transformers/pr_16682/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(V$,"href","/docs/transformers/pr_16682/en/model_doc/pegasus#transformers.PegasusConfig"),c(X$,"href","/docs/transformers/pr_16682/en/model_doc/perceiver#transformers.PerceiverConfig"),c(z$,"href","/docs/transformers/pr_16682/en/model_doc/plbart#transformers.PLBartConfig"),c(Q$,"href","/docs/transformers/pr_16682/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(W$,"href","/docs/transformers/pr_16682/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(H$,"href","/docs/transformers/pr_16682/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(U$,"href","/docs/transformers/pr_16682/en/model_doc/rag#transformers.RagConfig"),c(J$,"href","/docs/transformers/pr_16682/en/model_doc/realm#transformers.RealmConfig"),c(Y$,"href","/docs/transformers/pr_16682/en/model_doc/reformer#transformers.ReformerConfig"),c(K$,"href","/docs/transformers/pr_16682/en/model_doc/regnet#transformers.RegNetConfig"),c(Z$,"href","/docs/transformers/pr_16682/en/model_doc/rembert#transformers.RemBertConfig"),c(ek,"href","/docs/transformers/pr_16682/en/model_doc/resnet#transformers.ResNetConfig"),c(ok,"href","/docs/transformers/pr_16682/en/model_doc/retribert#transformers.RetriBertConfig"),c(rk,"href","/docs/transformers/pr_16682/en/model_doc/roberta#transformers.RobertaConfig"),c(tk,"href","/docs/transformers/pr_16682/en/model_doc/roformer#transformers.RoFormerConfig"),c(ak,"href","/docs/transformers/pr_16682/en/model_doc/segformer#transformers.SegformerConfig"),c(nk,"href","/docs/transformers/pr_16682/en/model_doc/sew#transformers.SEWConfig"),c(sk,"href","/docs/transformers/pr_16682/en/model_doc/sew-d#transformers.SEWDConfig"),c(lk,"href","/docs/transformers/pr_16682/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(ik,"href","/docs/transformers/pr_16682/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(dk,"href","/docs/transformers/pr_16682/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(ck,"href","/docs/transformers/pr_16682/en/model_doc/splinter#transformers.SplinterConfig"),c(fk,"href","/docs/transformers/pr_16682/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(mk,"href","/docs/transformers/pr_16682/en/model_doc/swin#transformers.SwinConfig"),c(gk,"href","/docs/transformers/pr_16682/en/model_doc/t5#transformers.T5Config"),c(hk,"href","/docs/transformers/pr_16682/en/model_doc/tapas#transformers.TapasConfig"),c(pk,"href","/docs/transformers/pr_16682/en/model_doc/bart#transformers.BartConfig"),c(uk,"href","/docs/transformers/pr_16682/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(_k,"href","/docs/transformers/pr_16682/en/model_doc/trocr#transformers.TrOCRConfig"),c(bk,"href","/docs/transformers/pr_16682/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(vk,"href","/docs/transformers/pr_16682/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(Fk,"href","/docs/transformers/pr_16682/en/model_doc/van#transformers.VanConfig"),c(Tk,"href","/docs/transformers/pr_16682/en/model_doc/vilt#transformers.ViltConfig"),c(Mk,"href","/docs/transformers/pr_16682/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(Ek,"href","/docs/transformers/pr_16682/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(Ck,"href","/docs/transformers/pr_16682/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(wk,"href","/docs/transformers/pr_16682/en/model_doc/vit#transformers.ViTConfig"),c(Ak,"href","/docs/transformers/pr_16682/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(yk,"href","/docs/transformers/pr_16682/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(Lk,"href","/docs/transformers/pr_16682/en/model_doc/wavlm#transformers.WavLMConfig"),c(xk,"href","/docs/transformers/pr_16682/en/model_doc/xglm#transformers.XGLMConfig"),c($k,"href","/docs/transformers/pr_16682/en/model_doc/xlm#transformers.XLMConfig"),c(kk,"href","/docs/transformers/pr_16682/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(Sk,"href","/docs/transformers/pr_16682/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(Rk,"href","/docs/transformers/pr_16682/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(Bk,"href","/docs/transformers/pr_16682/en/model_doc/xlnet#transformers.XLNetConfig"),c(Pk,"href","/docs/transformers/pr_16682/en/model_doc/yolos#transformers.YolosConfig"),c(Ik,"href","/docs/transformers/pr_16682/en/model_doc/yoso#transformers.YosoConfig"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lg,"id","transformers.AutoTokenizer"),c(lg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lg,"href","#transformers.AutoTokenizer"),c(fi,"class","relative group"),c(qk,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(Nk,"href","/docs/transformers/pr_16682/en/model_doc/albert#transformers.AlbertTokenizer"),c(jk,"href","/docs/transformers/pr_16682/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Dk,"href","/docs/transformers/pr_16682/en/model_doc/bart#transformers.BartTokenizer"),c(Gk,"href","/docs/transformers/pr_16682/en/model_doc/bart#transformers.BartTokenizerFast"),c(Ok,"href","/docs/transformers/pr_16682/en/model_doc/barthez#transformers.BarthezTokenizer"),c(Vk,"href","/docs/transformers/pr_16682/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(Xk,"href","/docs/transformers/pr_16682/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(zk,"href","/docs/transformers/pr_16682/en/model_doc/bert#transformers.BertTokenizer"),c(Qk,"href","/docs/transformers/pr_16682/en/model_doc/bert#transformers.BertTokenizerFast"),c(Wk,"href","/docs/transformers/pr_16682/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(Hk,"href","/docs/transformers/pr_16682/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(Uk,"href","/docs/transformers/pr_16682/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(Jk,"href","/docs/transformers/pr_16682/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(Yk,"href","/docs/transformers/pr_16682/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(Kk,"href","/docs/transformers/pr_16682/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(Zk,"href","/docs/transformers/pr_16682/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(eS,"href","/docs/transformers/pr_16682/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(oS,"href","/docs/transformers/pr_16682/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(rS,"href","/docs/transformers/pr_16682/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(tS,"href","/docs/transformers/pr_16682/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(aS,"href","/docs/transformers/pr_16682/en/model_doc/camembert#transformers.CamembertTokenizer"),c(nS,"href","/docs/transformers/pr_16682/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(sS,"href","/docs/transformers/pr_16682/en/model_doc/canine#transformers.CanineTokenizer"),c(lS,"href","/docs/transformers/pr_16682/en/model_doc/clip#transformers.CLIPTokenizer"),c(iS,"href","/docs/transformers/pr_16682/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(dS,"href","/docs/transformers/pr_16682/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(cS,"href","/docs/transformers/pr_16682/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(fS,"href","/docs/transformers/pr_16682/en/model_doc/cpm#transformers.CpmTokenizer"),c(mS,"href","/docs/transformers/pr_16682/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(gS,"href","/docs/transformers/pr_16682/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(hS,"href","/docs/transformers/pr_16682/en/model_doc/roberta#transformers.RobertaTokenizer"),c(pS,"href","/docs/transformers/pr_16682/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(uS,"href","/docs/transformers/pr_16682/en/model_doc/deberta#transformers.DebertaTokenizer"),c(_S,"href","/docs/transformers/pr_16682/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(bS,"href","/docs/transformers/pr_16682/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(vS,"href","/docs/transformers/pr_16682/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(FS,"href","/docs/transformers/pr_16682/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(TS,"href","/docs/transformers/pr_16682/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(MS,"href","/docs/transformers/pr_16682/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(ES,"href","/docs/transformers/pr_16682/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(CS,"href","/docs/transformers/pr_16682/en/model_doc/electra#transformers.ElectraTokenizer"),c(wS,"href","/docs/transformers/pr_16682/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(AS,"href","/docs/transformers/pr_16682/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(yS,"href","/docs/transformers/pr_16682/en/model_doc/fnet#transformers.FNetTokenizer"),c(LS,"href","/docs/transformers/pr_16682/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(xS,"href","/docs/transformers/pr_16682/en/model_doc/fsmt#transformers.FSMTTokenizer"),c($S,"href","/docs/transformers/pr_16682/en/model_doc/funnel#transformers.FunnelTokenizer"),c(kS,"href","/docs/transformers/pr_16682/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(SS,"href","/docs/transformers/pr_16682/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(RS,"href","/docs/transformers/pr_16682/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(BS,"href","/docs/transformers/pr_16682/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(PS,"href","/docs/transformers/pr_16682/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(IS,"href","/docs/transformers/pr_16682/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(qS,"href","/docs/transformers/pr_16682/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(NS,"href","/docs/transformers/pr_16682/en/model_doc/herbert#transformers.HerbertTokenizer"),c(jS,"href","/docs/transformers/pr_16682/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(DS,"href","/docs/transformers/pr_16682/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(GS,"href","/docs/transformers/pr_16682/en/model_doc/roberta#transformers.RobertaTokenizer"),c(OS,"href","/docs/transformers/pr_16682/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(VS,"href","/docs/transformers/pr_16682/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(XS,"href","/docs/transformers/pr_16682/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(zS,"href","/docs/transformers/pr_16682/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(QS,"href","/docs/transformers/pr_16682/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(WS,"href","/docs/transformers/pr_16682/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(HS,"href","/docs/transformers/pr_16682/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(US,"href","/docs/transformers/pr_16682/en/model_doc/led#transformers.LEDTokenizer"),c(JS,"href","/docs/transformers/pr_16682/en/model_doc/led#transformers.LEDTokenizerFast"),c(YS,"href","/docs/transformers/pr_16682/en/model_doc/longformer#transformers.LongformerTokenizer"),c(KS,"href","/docs/transformers/pr_16682/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(ZS,"href","/docs/transformers/pr_16682/en/model_doc/luke#transformers.LukeTokenizer"),c(eR,"href","/docs/transformers/pr_16682/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(oR,"href","/docs/transformers/pr_16682/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(rR,"href","/docs/transformers/pr_16682/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(tR,"href","/docs/transformers/pr_16682/en/model_doc/marian#transformers.MarianTokenizer"),c(aR,"href","/docs/transformers/pr_16682/en/model_doc/mbart#transformers.MBartTokenizer"),c(nR,"href","/docs/transformers/pr_16682/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(sR,"href","/docs/transformers/pr_16682/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(lR,"href","/docs/transformers/pr_16682/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(iR,"href","/docs/transformers/pr_16682/en/model_doc/bert#transformers.BertTokenizer"),c(dR,"href","/docs/transformers/pr_16682/en/model_doc/bert#transformers.BertTokenizerFast"),c(cR,"href","/docs/transformers/pr_16682/en/model_doc/mluke#transformers.MLukeTokenizer"),c(fR,"href","/docs/transformers/pr_16682/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(mR,"href","/docs/transformers/pr_16682/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(gR,"href","/docs/transformers/pr_16682/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(hR,"href","/docs/transformers/pr_16682/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(pR,"href","/docs/transformers/pr_16682/en/model_doc/mt5#transformers.T5Tokenizer"),c(uR,"href","/docs/transformers/pr_16682/en/model_doc/mt5#transformers.T5TokenizerFast"),c(_R,"href","/docs/transformers/pr_16682/en/model_doc/albert#transformers.AlbertTokenizer"),c(bR,"href","/docs/transformers/pr_16682/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(vR,"href","/docs/transformers/pr_16682/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(FR,"href","/docs/transformers/pr_16682/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(TR,"href","/docs/transformers/pr_16682/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(MR,"href","/docs/transformers/pr_16682/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(ER,"href","/docs/transformers/pr_16682/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(CR,"href","/docs/transformers/pr_16682/en/model_doc/phobert#transformers.PhobertTokenizer"),c(wR,"href","/docs/transformers/pr_16682/en/model_doc/plbart#transformers.PLBartTokenizer"),c(AR,"href","/docs/transformers/pr_16682/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(yR,"href","/docs/transformers/pr_16682/en/model_doc/bert#transformers.BertTokenizer"),c(LR,"href","/docs/transformers/pr_16682/en/model_doc/bert#transformers.BertTokenizerFast"),c(xR,"href","/docs/transformers/pr_16682/en/model_doc/rag#transformers.RagTokenizer"),c($R,"href","/docs/transformers/pr_16682/en/model_doc/realm#transformers.RealmTokenizer"),c(kR,"href","/docs/transformers/pr_16682/en/model_doc/realm#transformers.RealmTokenizerFast"),c(SR,"href","/docs/transformers/pr_16682/en/model_doc/reformer#transformers.ReformerTokenizer"),c(RR,"href","/docs/transformers/pr_16682/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(BR,"href","/docs/transformers/pr_16682/en/model_doc/rembert#transformers.RemBertTokenizer"),c(PR,"href","/docs/transformers/pr_16682/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(IR,"href","/docs/transformers/pr_16682/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(qR,"href","/docs/transformers/pr_16682/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(NR,"href","/docs/transformers/pr_16682/en/model_doc/roberta#transformers.RobertaTokenizer"),c(jR,"href","/docs/transformers/pr_16682/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(DR,"href","/docs/transformers/pr_16682/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(GR,"href","/docs/transformers/pr_16682/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(OR,"href","/docs/transformers/pr_16682/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(VR,"href","/docs/transformers/pr_16682/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(XR,"href","/docs/transformers/pr_16682/en/model_doc/splinter#transformers.SplinterTokenizer"),c(zR,"href","/docs/transformers/pr_16682/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(QR,"href","/docs/transformers/pr_16682/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(WR,"href","/docs/transformers/pr_16682/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(HR,"href","/docs/transformers/pr_16682/en/model_doc/mt5#transformers.T5Tokenizer"),c(UR,"href","/docs/transformers/pr_16682/en/model_doc/mt5#transformers.T5TokenizerFast"),c(JR,"href","/docs/transformers/pr_16682/en/model_doc/tapas#transformers.TapasTokenizer"),c(YR,"href","/docs/transformers/pr_16682/en/model_doc/tapex#transformers.TapexTokenizer"),c(KR,"href","/docs/transformers/pr_16682/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(ZR,"href","/docs/transformers/pr_16682/en/model_doc/bert#transformers.BertTokenizer"),c(eB,"href","/docs/transformers/pr_16682/en/model_doc/bert#transformers.BertTokenizerFast"),c(oB,"href","/docs/transformers/pr_16682/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(rB,"href","/docs/transformers/pr_16682/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(tB,"href","/docs/transformers/pr_16682/en/model_doc/xglm#transformers.XGLMTokenizer"),c(aB,"href","/docs/transformers/pr_16682/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(nB,"href","/docs/transformers/pr_16682/en/model_doc/xlm#transformers.XLMTokenizer"),c(sB,"href","/docs/transformers/pr_16682/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(lB,"href","/docs/transformers/pr_16682/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(iB,"href","/docs/transformers/pr_16682/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(dB,"href","/docs/transformers/pr_16682/en/model_doc/roberta#transformers.RobertaTokenizer"),c(cB,"href","/docs/transformers/pr_16682/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(fB,"href","/docs/transformers/pr_16682/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(mB,"href","/docs/transformers/pr_16682/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(gB,"href","/docs/transformers/pr_16682/en/model_doc/albert#transformers.AlbertTokenizer"),c(hB,"href","/docs/transformers/pr_16682/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ng,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jg,"id","transformers.AutoFeatureExtractor"),c(jg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jg,"href","#transformers.AutoFeatureExtractor"),c(mi,"class","relative group"),c(pB,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(uB,"href","/docs/transformers/pr_16682/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(_B,"href","/docs/transformers/pr_16682/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(bB,"href","/docs/transformers/pr_16682/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(vB,"href","/docs/transformers/pr_16682/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(FB,"href","/docs/transformers/pr_16682/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(TB,"href","/docs/transformers/pr_16682/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(MB,"href","/docs/transformers/pr_16682/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(EB,"href","/docs/transformers/pr_16682/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(CB,"href","/docs/transformers/pr_16682/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(wB,"href","/docs/transformers/pr_16682/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(AB,"href","/docs/transformers/pr_16682/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(yB,"href","/docs/transformers/pr_16682/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(LB,"href","/docs/transformers/pr_16682/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(xB,"href","/docs/transformers/pr_16682/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c($B,"href","/docs/transformers/pr_16682/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(kB,"href","/docs/transformers/pr_16682/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(SB,"href","/docs/transformers/pr_16682/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(RB,"href","/docs/transformers/pr_16682/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(BB,"href","/docs/transformers/pr_16682/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(PB,"href","/docs/transformers/pr_16682/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(IB,"href","/docs/transformers/pr_16682/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(qB,"href","/docs/transformers/pr_16682/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(NB,"href","/docs/transformers/pr_16682/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(jB,"href","/docs/transformers/pr_16682/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(Qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gh,"id","transformers.AutoProcessor"),c(gh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gh,"href","#transformers.AutoProcessor"),c(gi,"class","relative group"),c(DB,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(GB,"href","/docs/transformers/pr_16682/en/model_doc/clip#transformers.CLIPProcessor"),c(OB,"href","/docs/transformers/pr_16682/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(VB,"href","/docs/transformers/pr_16682/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(XB,"href","/docs/transformers/pr_16682/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(zB,"href","/docs/transformers/pr_16682/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(QB,"href","/docs/transformers/pr_16682/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(WB,"href","/docs/transformers/pr_16682/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(HB,"href","/docs/transformers/pr_16682/en/model_doc/trocr#transformers.TrOCRProcessor"),c(UB,"href","/docs/transformers/pr_16682/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(JB,"href","/docs/transformers/pr_16682/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(YB,"href","/docs/transformers/pr_16682/en/model_doc/vilt#transformers.ViltProcessor"),c(KB,"href","/docs/transformers/pr_16682/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(ZB,"href","/docs/transformers/pr_16682/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(eP,"href","/docs/transformers/pr_16682/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(We,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($h,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kh,"id","transformers.AutoModel"),c(kh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kh,"href","#transformers.AutoModel"),c(pi,"class","relative group"),c(oP,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rP,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tP,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aP,"href","/docs/transformers/pr_16682/en/model_doc/albert#transformers.AlbertModel"),c(nP,"href","/docs/transformers/pr_16682/en/model_doc/bart#transformers.BartModel"),c(sP,"href","/docs/transformers/pr_16682/en/model_doc/beit#transformers.BeitModel"),c(lP,"href","/docs/transformers/pr_16682/en/model_doc/bert#transformers.BertModel"),c(iP,"href","/docs/transformers/pr_16682/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(dP,"href","/docs/transformers/pr_16682/en/model_doc/big_bird#transformers.BigBirdModel"),c(cP,"href","/docs/transformers/pr_16682/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(fP,"href","/docs/transformers/pr_16682/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(mP,"href","/docs/transformers/pr_16682/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(gP,"href","/docs/transformers/pr_16682/en/model_doc/camembert#transformers.CamembertModel"),c(hP,"href","/docs/transformers/pr_16682/en/model_doc/canine#transformers.CanineModel"),c(pP,"href","/docs/transformers/pr_16682/en/model_doc/clip#transformers.CLIPModel"),c(uP,"href","/docs/transformers/pr_16682/en/model_doc/convbert#transformers.ConvBertModel"),c(_P,"href","/docs/transformers/pr_16682/en/model_doc/convnext#transformers.ConvNextModel"),c(bP,"href","/docs/transformers/pr_16682/en/model_doc/ctrl#transformers.CTRLModel"),c(vP,"href","/docs/transformers/pr_16682/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(FP,"href","/docs/transformers/pr_16682/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(TP,"href","/docs/transformers/pr_16682/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(MP,"href","/docs/transformers/pr_16682/en/model_doc/deberta#transformers.DebertaModel"),c(EP,"href","/docs/transformers/pr_16682/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(CP,"href","/docs/transformers/pr_16682/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(wP,"href","/docs/transformers/pr_16682/en/model_doc/deit#transformers.DeiTModel"),c(AP,"href","/docs/transformers/pr_16682/en/model_doc/detr#transformers.DetrModel"),c(yP,"href","/docs/transformers/pr_16682/en/model_doc/distilbert#transformers.DistilBertModel"),c(LP,"href","/docs/transformers/pr_16682/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(xP,"href","/docs/transformers/pr_16682/en/model_doc/dpt#transformers.DPTModel"),c($P,"href","/docs/transformers/pr_16682/en/model_doc/electra#transformers.ElectraModel"),c(kP,"href","/docs/transformers/pr_16682/en/model_doc/flaubert#transformers.FlaubertModel"),c(SP,"href","/docs/transformers/pr_16682/en/model_doc/fnet#transformers.FNetModel"),c(RP,"href","/docs/transformers/pr_16682/en/model_doc/fsmt#transformers.FSMTModel"),c(BP,"href","/docs/transformers/pr_16682/en/model_doc/funnel#transformers.FunnelModel"),c(PP,"href","/docs/transformers/pr_16682/en/model_doc/funnel#transformers.FunnelBaseModel"),c(IP,"href","/docs/transformers/pr_16682/en/model_doc/glpn#transformers.GLPNModel"),c(qP,"href","/docs/transformers/pr_16682/en/model_doc/gpt2#transformers.GPT2Model"),c(NP,"href","/docs/transformers/pr_16682/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(jP,"href","/docs/transformers/pr_16682/en/model_doc/gptj#transformers.GPTJModel"),c(DP,"href","/docs/transformers/pr_16682/en/model_doc/hubert#transformers.HubertModel"),c(GP,"href","/docs/transformers/pr_16682/en/model_doc/ibert#transformers.IBertModel"),c(OP,"href","/docs/transformers/pr_16682/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(VP,"href","/docs/transformers/pr_16682/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(XP,"href","/docs/transformers/pr_16682/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(zP,"href","/docs/transformers/pr_16682/en/model_doc/led#transformers.LEDModel"),c(QP,"href","/docs/transformers/pr_16682/en/model_doc/longformer#transformers.LongformerModel"),c(WP,"href","/docs/transformers/pr_16682/en/model_doc/luke#transformers.LukeModel"),c(HP,"href","/docs/transformers/pr_16682/en/model_doc/lxmert#transformers.LxmertModel"),c(UP,"href","/docs/transformers/pr_16682/en/model_doc/m2m_100#transformers.M2M100Model"),c(JP,"href","/docs/transformers/pr_16682/en/model_doc/marian#transformers.MarianModel"),c(YP,"href","/docs/transformers/pr_16682/en/model_doc/maskformer#transformers.MaskFormerModel"),c(KP,"href","/docs/transformers/pr_16682/en/model_doc/mbart#transformers.MBartModel"),c(ZP,"href","/docs/transformers/pr_16682/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(eI,"href","/docs/transformers/pr_16682/en/model_doc/mobilebert#transformers.MobileBertModel"),c(oI,"href","/docs/transformers/pr_16682/en/model_doc/mpnet#transformers.MPNetModel"),c(rI,"href","/docs/transformers/pr_16682/en/model_doc/mt5#transformers.MT5Model"),c(tI,"href","/docs/transformers/pr_16682/en/model_doc/nystromformer#transformers.NystromformerModel"),c(aI,"href","/docs/transformers/pr_16682/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(nI,"href","/docs/transformers/pr_16682/en/model_doc/pegasus#transformers.PegasusModel"),c(sI,"href","/docs/transformers/pr_16682/en/model_doc/perceiver#transformers.PerceiverModel"),c(lI,"href","/docs/transformers/pr_16682/en/model_doc/plbart#transformers.PLBartModel"),c(iI,"href","/docs/transformers/pr_16682/en/model_doc/poolformer#transformers.PoolFormerModel"),c(dI,"href","/docs/transformers/pr_16682/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(cI,"href","/docs/transformers/pr_16682/en/model_doc/qdqbert#transformers.QDQBertModel"),c(fI,"href","/docs/transformers/pr_16682/en/model_doc/reformer#transformers.ReformerModel"),c(mI,"href","/docs/transformers/pr_16682/en/model_doc/regnet#transformers.RegNetModel"),c(gI,"href","/docs/transformers/pr_16682/en/model_doc/rembert#transformers.RemBertModel"),c(hI,"href","/docs/transformers/pr_16682/en/model_doc/resnet#transformers.ResNetModel"),c(pI,"href","/docs/transformers/pr_16682/en/model_doc/retribert#transformers.RetriBertModel"),c(uI,"href","/docs/transformers/pr_16682/en/model_doc/roberta#transformers.RobertaModel"),c(_I,"href","/docs/transformers/pr_16682/en/model_doc/roformer#transformers.RoFormerModel"),c(bI,"href","/docs/transformers/pr_16682/en/model_doc/segformer#transformers.SegformerModel"),c(vI,"href","/docs/transformers/pr_16682/en/model_doc/sew#transformers.SEWModel"),c(FI,"href","/docs/transformers/pr_16682/en/model_doc/sew-d#transformers.SEWDModel"),c(TI,"href","/docs/transformers/pr_16682/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(MI,"href","/docs/transformers/pr_16682/en/model_doc/splinter#transformers.SplinterModel"),c(EI,"href","/docs/transformers/pr_16682/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(CI,"href","/docs/transformers/pr_16682/en/model_doc/swin#transformers.SwinModel"),c(wI,"href","/docs/transformers/pr_16682/en/model_doc/t5#transformers.T5Model"),c(AI,"href","/docs/transformers/pr_16682/en/model_doc/tapas#transformers.TapasModel"),c(yI,"href","/docs/transformers/pr_16682/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(LI,"href","/docs/transformers/pr_16682/en/model_doc/unispeech#transformers.UniSpeechModel"),c(xI,"href","/docs/transformers/pr_16682/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c($I,"href","/docs/transformers/pr_16682/en/model_doc/van#transformers.VanModel"),c(kI,"href","/docs/transformers/pr_16682/en/model_doc/vilt#transformers.ViltModel"),c(SI,"href","/docs/transformers/pr_16682/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(RI,"href","/docs/transformers/pr_16682/en/model_doc/visual_bert#transformers.VisualBertModel"),c(BI,"href","/docs/transformers/pr_16682/en/model_doc/vit#transformers.ViTModel"),c(PI,"href","/docs/transformers/pr_16682/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(II,"href","/docs/transformers/pr_16682/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(qI,"href","/docs/transformers/pr_16682/en/model_doc/wavlm#transformers.WavLMModel"),c(NI,"href","/docs/transformers/pr_16682/en/model_doc/xglm#transformers.XGLMModel"),c(jI,"href","/docs/transformers/pr_16682/en/model_doc/xlm#transformers.XLMModel"),c(DI,"href","/docs/transformers/pr_16682/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(GI,"href","/docs/transformers/pr_16682/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(OI,"href","/docs/transformers/pr_16682/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(VI,"href","/docs/transformers/pr_16682/en/model_doc/xlnet#transformers.XLNetModel"),c(XI,"href","/docs/transformers/pr_16682/en/model_doc/yolos#transformers.YolosModel"),c(zI,"href","/docs/transformers/pr_16682/en/model_doc/yoso#transformers.YosoModel"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tu,"id","transformers.AutoModelForPreTraining"),c(Tu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tu,"href","#transformers.AutoModelForPreTraining"),c(bi,"class","relative group"),c(QI,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WI,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HI,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UI,"href","/docs/transformers/pr_16682/en/model_doc/albert#transformers.AlbertForPreTraining"),c(JI,"href","/docs/transformers/pr_16682/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(YI,"href","/docs/transformers/pr_16682/en/model_doc/bert#transformers.BertForPreTraining"),c(KI,"href","/docs/transformers/pr_16682/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(ZI,"href","/docs/transformers/pr_16682/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(eq,"href","/docs/transformers/pr_16682/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(oq,"href","/docs/transformers/pr_16682/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(rq,"href","/docs/transformers/pr_16682/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(tq,"href","/docs/transformers/pr_16682/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(aq,"href","/docs/transformers/pr_16682/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(nq,"href","/docs/transformers/pr_16682/en/model_doc/electra#transformers.ElectraForPreTraining"),c(sq,"href","/docs/transformers/pr_16682/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(lq,"href","/docs/transformers/pr_16682/en/model_doc/fnet#transformers.FNetForPreTraining"),c(iq,"href","/docs/transformers/pr_16682/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(dq,"href","/docs/transformers/pr_16682/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(cq,"href","/docs/transformers/pr_16682/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(fq,"href","/docs/transformers/pr_16682/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(mq,"href","/docs/transformers/pr_16682/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(gq,"href","/docs/transformers/pr_16682/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(hq,"href","/docs/transformers/pr_16682/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(pq,"href","/docs/transformers/pr_16682/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(uq,"href","/docs/transformers/pr_16682/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(_q,"href","/docs/transformers/pr_16682/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(bq,"href","/docs/transformers/pr_16682/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(vq,"href","/docs/transformers/pr_16682/en/model_doc/retribert#transformers.RetriBertModel"),c(Fq,"href","/docs/transformers/pr_16682/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(Tq,"href","/docs/transformers/pr_16682/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(Mq,"href","/docs/transformers/pr_16682/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(Eq,"href","/docs/transformers/pr_16682/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(Cq,"href","/docs/transformers/pr_16682/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(wq,"href","/docs/transformers/pr_16682/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(Aq,"href","/docs/transformers/pr_16682/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(yq,"href","/docs/transformers/pr_16682/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(Lq,"href","/docs/transformers/pr_16682/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(xq,"href","/docs/transformers/pr_16682/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c($q,"href","/docs/transformers/pr_16682/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(kq,"href","/docs/transformers/pr_16682/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(Sq,"href","/docs/transformers/pr_16682/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(Rq,"href","/docs/transformers/pr_16682/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(c_,"id","transformers.AutoModelForCausalLM"),c(c_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(c_,"href","#transformers.AutoModelForCausalLM"),c(Ti,"class","relative group"),c(Bq,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pq,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Iq,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qq,"href","/docs/transformers/pr_16682/en/model_doc/bart#transformers.BartForCausalLM"),c(Nq,"href","/docs/transformers/pr_16682/en/model_doc/bert#transformers.BertLMHeadModel"),c(jq,"href","/docs/transformers/pr_16682/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(Dq,"href","/docs/transformers/pr_16682/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(Gq,"href","/docs/transformers/pr_16682/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(Oq,"href","/docs/transformers/pr_16682/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(Vq,"href","/docs/transformers/pr_16682/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(Xq,"href","/docs/transformers/pr_16682/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(zq,"href","/docs/transformers/pr_16682/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(Qq,"href","/docs/transformers/pr_16682/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(Wq,"href","/docs/transformers/pr_16682/en/model_doc/electra#transformers.ElectraForCausalLM"),c(Hq,"href","/docs/transformers/pr_16682/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(Uq,"href","/docs/transformers/pr_16682/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(Jq,"href","/docs/transformers/pr_16682/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(Yq,"href","/docs/transformers/pr_16682/en/model_doc/marian#transformers.MarianForCausalLM"),c(Kq,"href","/docs/transformers/pr_16682/en/model_doc/mbart#transformers.MBartForCausalLM"),c(Zq,"href","/docs/transformers/pr_16682/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(eN,"href","/docs/transformers/pr_16682/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(oN,"href","/docs/transformers/pr_16682/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(rN,"href","/docs/transformers/pr_16682/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(tN,"href","/docs/transformers/pr_16682/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(aN,"href","/docs/transformers/pr_16682/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(nN,"href","/docs/transformers/pr_16682/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(sN,"href","/docs/transformers/pr_16682/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(lN,"href","/docs/transformers/pr_16682/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(iN,"href","/docs/transformers/pr_16682/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(dN,"href","/docs/transformers/pr_16682/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(cN,"href","/docs/transformers/pr_16682/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(fN,"href","/docs/transformers/pr_16682/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(mN,"href","/docs/transformers/pr_16682/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(gN,"href","/docs/transformers/pr_16682/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(hN,"href","/docs/transformers/pr_16682/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(pN,"href","/docs/transformers/pr_16682/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(uN,"href","/docs/transformers/pr_16682/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(_N,"href","/docs/transformers/pr_16682/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U_,"id","transformers.AutoModelForMaskedLM"),c(U_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U_,"href","#transformers.AutoModelForMaskedLM"),c(Ci,"class","relative group"),c(bN,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vN,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FN,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TN,"href","/docs/transformers/pr_16682/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(MN,"href","/docs/transformers/pr_16682/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(EN,"href","/docs/transformers/pr_16682/en/model_doc/bert#transformers.BertForMaskedLM"),c(CN,"href","/docs/transformers/pr_16682/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(wN,"href","/docs/transformers/pr_16682/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(AN,"href","/docs/transformers/pr_16682/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(yN,"href","/docs/transformers/pr_16682/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(LN,"href","/docs/transformers/pr_16682/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(xN,"href","/docs/transformers/pr_16682/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c($N,"href","/docs/transformers/pr_16682/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(kN,"href","/docs/transformers/pr_16682/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(SN,"href","/docs/transformers/pr_16682/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(RN,"href","/docs/transformers/pr_16682/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(BN,"href","/docs/transformers/pr_16682/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(PN,"href","/docs/transformers/pr_16682/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(IN,"href","/docs/transformers/pr_16682/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(qN,"href","/docs/transformers/pr_16682/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(NN,"href","/docs/transformers/pr_16682/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(jN,"href","/docs/transformers/pr_16682/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(DN,"href","/docs/transformers/pr_16682/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(GN,"href","/docs/transformers/pr_16682/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(ON,"href","/docs/transformers/pr_16682/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(VN,"href","/docs/transformers/pr_16682/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(XN,"href","/docs/transformers/pr_16682/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(zN,"href","/docs/transformers/pr_16682/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(QN,"href","/docs/transformers/pr_16682/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(WN,"href","/docs/transformers/pr_16682/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(HN,"href","/docs/transformers/pr_16682/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(UN,"href","/docs/transformers/pr_16682/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(JN,"href","/docs/transformers/pr_16682/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(YN,"href","/docs/transformers/pr_16682/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(KN,"href","/docs/transformers/pr_16682/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(ZN,"href","/docs/transformers/pr_16682/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(ej,"href","/docs/transformers/pr_16682/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(B2,"id","transformers.AutoModelForSeq2SeqLM"),c(B2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(B2,"href","#transformers.AutoModelForSeq2SeqLM"),c(yi,"class","relative group"),c(oj,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rj,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tj,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aj,"href","/docs/transformers/pr_16682/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(nj,"href","/docs/transformers/pr_16682/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(sj,"href","/docs/transformers/pr_16682/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(lj,"href","/docs/transformers/pr_16682/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(ij,"href","/docs/transformers/pr_16682/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(dj,"href","/docs/transformers/pr_16682/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(cj,"href","/docs/transformers/pr_16682/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(fj,"href","/docs/transformers/pr_16682/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(mj,"href","/docs/transformers/pr_16682/en/model_doc/marian#transformers.MarianMTModel"),c(gj,"href","/docs/transformers/pr_16682/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(hj,"href","/docs/transformers/pr_16682/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(pj,"href","/docs/transformers/pr_16682/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(uj,"href","/docs/transformers/pr_16682/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(_j,"href","/docs/transformers/pr_16682/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(bj,"href","/docs/transformers/pr_16682/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(vj,"href","/docs/transformers/pr_16682/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Fj,"href","/docs/transformers/pr_16682/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o6,"id","transformers.AutoModelForSequenceClassification"),c(o6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o6,"href","#transformers.AutoModelForSequenceClassification"),c($i,"class","relative group"),c(Tj,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mj,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Ej,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cj,"href","/docs/transformers/pr_16682/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(wj,"href","/docs/transformers/pr_16682/en/model_doc/bart#transformers.BartForSequenceClassification"),c(Aj,"href","/docs/transformers/pr_16682/en/model_doc/bert#transformers.BertForSequenceClassification"),c(yj,"href","/docs/transformers/pr_16682/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(Lj,"href","/docs/transformers/pr_16682/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(xj,"href","/docs/transformers/pr_16682/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c($j,"href","/docs/transformers/pr_16682/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(kj,"href","/docs/transformers/pr_16682/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(Sj,"href","/docs/transformers/pr_16682/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(Rj,"href","/docs/transformers/pr_16682/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(Bj,"href","/docs/transformers/pr_16682/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(Pj,"href","/docs/transformers/pr_16682/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(Ij,"href","/docs/transformers/pr_16682/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(qj,"href","/docs/transformers/pr_16682/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(Nj,"href","/docs/transformers/pr_16682/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(jj,"href","/docs/transformers/pr_16682/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(Dj,"href","/docs/transformers/pr_16682/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(Gj,"href","/docs/transformers/pr_16682/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(Oj,"href","/docs/transformers/pr_16682/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(Vj,"href","/docs/transformers/pr_16682/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(Xj,"href","/docs/transformers/pr_16682/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(zj,"href","/docs/transformers/pr_16682/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(Qj,"href","/docs/transformers/pr_16682/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(Wj,"href","/docs/transformers/pr_16682/en/model_doc/led#transformers.LEDForSequenceClassification"),c(Hj,"href","/docs/transformers/pr_16682/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(Uj,"href","/docs/transformers/pr_16682/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(Jj,"href","/docs/transformers/pr_16682/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(Yj,"href","/docs/transformers/pr_16682/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(Kj,"href","/docs/transformers/pr_16682/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(Zj,"href","/docs/transformers/pr_16682/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(eD,"href","/docs/transformers/pr_16682/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(oD,"href","/docs/transformers/pr_16682/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(rD,"href","/docs/transformers/pr_16682/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(tD,"href","/docs/transformers/pr_16682/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(aD,"href","/docs/transformers/pr_16682/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(nD,"href","/docs/transformers/pr_16682/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(sD,"href","/docs/transformers/pr_16682/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(lD,"href","/docs/transformers/pr_16682/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(iD,"href","/docs/transformers/pr_16682/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(dD,"href","/docs/transformers/pr_16682/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(cD,"href","/docs/transformers/pr_16682/en/model_doc/bart#transformers.BartForSequenceClassification"),c(fD,"href","/docs/transformers/pr_16682/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(mD,"href","/docs/transformers/pr_16682/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(gD,"href","/docs/transformers/pr_16682/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(hD,"href","/docs/transformers/pr_16682/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(pD,"href","/docs/transformers/pr_16682/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(uD,"href","/docs/transformers/pr_16682/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(K6,"id","transformers.AutoModelForMultipleChoice"),c(K6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K6,"href","#transformers.AutoModelForMultipleChoice"),c(Ri,"class","relative group"),c(_D,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bD,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vD,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FD,"href","/docs/transformers/pr_16682/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(TD,"href","/docs/transformers/pr_16682/en/model_doc/bert#transformers.BertForMultipleChoice"),c(MD,"href","/docs/transformers/pr_16682/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(ED,"href","/docs/transformers/pr_16682/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(CD,"href","/docs/transformers/pr_16682/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(wD,"href","/docs/transformers/pr_16682/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(AD,"href","/docs/transformers/pr_16682/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(yD,"href","/docs/transformers/pr_16682/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(LD,"href","/docs/transformers/pr_16682/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(xD,"href","/docs/transformers/pr_16682/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c($D,"href","/docs/transformers/pr_16682/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(kD,"href","/docs/transformers/pr_16682/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(SD,"href","/docs/transformers/pr_16682/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(RD,"href","/docs/transformers/pr_16682/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(BD,"href","/docs/transformers/pr_16682/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(PD,"href","/docs/transformers/pr_16682/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(ID,"href","/docs/transformers/pr_16682/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(qD,"href","/docs/transformers/pr_16682/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(ND,"href","/docs/transformers/pr_16682/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(jD,"href","/docs/transformers/pr_16682/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(DD,"href","/docs/transformers/pr_16682/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(GD,"href","/docs/transformers/pr_16682/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(OD,"href","/docs/transformers/pr_16682/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(VD,"href","/docs/transformers/pr_16682/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(XD,"href","/docs/transformers/pr_16682/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(zD,"href","/docs/transformers/pr_16682/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(QD,"href","/docs/transformers/pr_16682/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(WD,"href","/docs/transformers/pr_16682/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($1,"id","transformers.AutoModelForNextSentencePrediction"),c($1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($1,"href","#transformers.AutoModelForNextSentencePrediction"),c(Ii,"class","relative group"),c(HD,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UD,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JD,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YD,"href","/docs/transformers/pr_16682/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(KD,"href","/docs/transformers/pr_16682/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(ZD,"href","/docs/transformers/pr_16682/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(eG,"href","/docs/transformers/pr_16682/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(oG,"href","/docs/transformers/pr_16682/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(j1,"id","transformers.AutoModelForTokenClassification"),c(j1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(j1,"href","#transformers.AutoModelForTokenClassification"),c(ji,"class","relative group"),c(rG,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tG,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aG,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nG,"href","/docs/transformers/pr_16682/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(sG,"href","/docs/transformers/pr_16682/en/model_doc/bert#transformers.BertForTokenClassification"),c(lG,"href","/docs/transformers/pr_16682/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(iG,"href","/docs/transformers/pr_16682/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(dG,"href","/docs/transformers/pr_16682/en/model_doc/canine#transformers.CanineForTokenClassification"),c(cG,"href","/docs/transformers/pr_16682/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(fG,"href","/docs/transformers/pr_16682/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(mG,"href","/docs/transformers/pr_16682/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(gG,"href","/docs/transformers/pr_16682/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(hG,"href","/docs/transformers/pr_16682/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(pG,"href","/docs/transformers/pr_16682/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(uG,"href","/docs/transformers/pr_16682/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(_G,"href","/docs/transformers/pr_16682/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(bG,"href","/docs/transformers/pr_16682/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(vG,"href","/docs/transformers/pr_16682/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(FG,"href","/docs/transformers/pr_16682/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(TG,"href","/docs/transformers/pr_16682/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(MG,"href","/docs/transformers/pr_16682/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(EG,"href","/docs/transformers/pr_16682/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(CG,"href","/docs/transformers/pr_16682/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(wG,"href","/docs/transformers/pr_16682/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(AG,"href","/docs/transformers/pr_16682/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(yG,"href","/docs/transformers/pr_16682/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(LG,"href","/docs/transformers/pr_16682/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(xG,"href","/docs/transformers/pr_16682/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c($G,"href","/docs/transformers/pr_16682/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(kG,"href","/docs/transformers/pr_16682/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(SG,"href","/docs/transformers/pr_16682/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(RG,"href","/docs/transformers/pr_16682/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(BG,"href","/docs/transformers/pr_16682/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(PG,"href","/docs/transformers/pr_16682/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(IG,"href","/docs/transformers/pr_16682/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(qG,"href","/docs/transformers/pr_16682/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mb,"id","transformers.AutoModelForQuestionAnswering"),c(Mb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Mb,"href","#transformers.AutoModelForQuestionAnswering"),c(Oi,"class","relative group"),c(NG,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jG,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DG,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GG,"href","/docs/transformers/pr_16682/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(OG,"href","/docs/transformers/pr_16682/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(VG,"href","/docs/transformers/pr_16682/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(XG,"href","/docs/transformers/pr_16682/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(zG,"href","/docs/transformers/pr_16682/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(QG,"href","/docs/transformers/pr_16682/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(WG,"href","/docs/transformers/pr_16682/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(HG,"href","/docs/transformers/pr_16682/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(UG,"href","/docs/transformers/pr_16682/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(JG,"href","/docs/transformers/pr_16682/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(YG,"href","/docs/transformers/pr_16682/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(KG,"href","/docs/transformers/pr_16682/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(ZG,"href","/docs/transformers/pr_16682/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(eO,"href","/docs/transformers/pr_16682/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(oO,"href","/docs/transformers/pr_16682/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(rO,"href","/docs/transformers/pr_16682/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(tO,"href","/docs/transformers/pr_16682/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(aO,"href","/docs/transformers/pr_16682/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(nO,"href","/docs/transformers/pr_16682/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(sO,"href","/docs/transformers/pr_16682/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(lO,"href","/docs/transformers/pr_16682/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(iO,"href","/docs/transformers/pr_16682/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(dO,"href","/docs/transformers/pr_16682/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(cO,"href","/docs/transformers/pr_16682/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(fO,"href","/docs/transformers/pr_16682/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(mO,"href","/docs/transformers/pr_16682/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(gO,"href","/docs/transformers/pr_16682/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(hO,"href","/docs/transformers/pr_16682/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(pO,"href","/docs/transformers/pr_16682/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(uO,"href","/docs/transformers/pr_16682/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(_O,"href","/docs/transformers/pr_16682/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(bO,"href","/docs/transformers/pr_16682/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(vO,"href","/docs/transformers/pr_16682/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(FO,"href","/docs/transformers/pr_16682/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(TO,"href","/docs/transformers/pr_16682/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(MO,"href","/docs/transformers/pr_16682/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(EO,"href","/docs/transformers/pr_16682/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(CO,"href","/docs/transformers/pr_16682/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(wO,"href","/docs/transformers/pr_16682/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fv,"id","transformers.AutoModelForTableQuestionAnswering"),c(fv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fv,"href","#transformers.AutoModelForTableQuestionAnswering"),c(zi,"class","relative group"),c(AO,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yO,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LO,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xO,"href","/docs/transformers/pr_16682/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uv,"id","transformers.AutoModelForImageClassification"),c(uv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uv,"href","#transformers.AutoModelForImageClassification"),c(Hi,"class","relative group"),c($O,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kO,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SO,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RO,"href","/docs/transformers/pr_16682/en/model_doc/beit#transformers.BeitForImageClassification"),c(BO,"href","/docs/transformers/pr_16682/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(PO,"href","/docs/transformers/pr_16682/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(IO,"href","/docs/transformers/pr_16682/en/model_doc/deit#transformers.DeiTForImageClassification"),c(qO,"href","/docs/transformers/pr_16682/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(NO,"href","/docs/transformers/pr_16682/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(jO,"href","/docs/transformers/pr_16682/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(DO,"href","/docs/transformers/pr_16682/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(GO,"href","/docs/transformers/pr_16682/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(OO,"href","/docs/transformers/pr_16682/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(VO,"href","/docs/transformers/pr_16682/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(XO,"href","/docs/transformers/pr_16682/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(zO,"href","/docs/transformers/pr_16682/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(QO,"href","/docs/transformers/pr_16682/en/model_doc/swin#transformers.SwinForImageClassification"),c(WO,"href","/docs/transformers/pr_16682/en/model_doc/van#transformers.VanForImageClassification"),c(HO,"href","/docs/transformers/pr_16682/en/model_doc/vit#transformers.ViTForImageClassification"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kv,"id","transformers.AutoModelForVision2Seq"),c(kv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kv,"href","#transformers.AutoModelForVision2Seq"),c(Yi,"class","relative group"),c(UO,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JO,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YO,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KO,"href","/docs/transformers/pr_16682/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Iv,"id","transformers.AutoModelForAudioClassification"),c(Iv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Iv,"href","#transformers.AutoModelForAudioClassification"),c(ed,"class","relative group"),c(ZO,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eV,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oV,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rV,"href","/docs/transformers/pr_16682/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(tV,"href","/docs/transformers/pr_16682/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(aV,"href","/docs/transformers/pr_16682/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(nV,"href","/docs/transformers/pr_16682/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(sV,"href","/docs/transformers/pr_16682/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(lV,"href","/docs/transformers/pr_16682/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(iV,"href","/docs/transformers/pr_16682/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(dV,"href","/docs/transformers/pr_16682/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hv,"id","transformers.AutoModelForAudioFrameClassification"),c(Hv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Hv,"href","#transformers.AutoModelForAudioFrameClassification"),c(td,"class","relative group"),c(cV,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fV,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mV,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gV,"href","/docs/transformers/pr_16682/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(hV,"href","/docs/transformers/pr_16682/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(pV,"href","/docs/transformers/pr_16682/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(uV,"href","/docs/transformers/pr_16682/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rF,"id","transformers.AutoModelForCTC"),c(rF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rF,"href","#transformers.AutoModelForCTC"),c(sd,"class","relative group"),c(_V,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bV,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vV,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FV,"href","/docs/transformers/pr_16682/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(TV,"href","/docs/transformers/pr_16682/en/model_doc/hubert#transformers.HubertForCTC"),c(MV,"href","/docs/transformers/pr_16682/en/model_doc/sew#transformers.SEWForCTC"),c(EV,"href","/docs/transformers/pr_16682/en/model_doc/sew-d#transformers.SEWDForCTC"),c(CV,"href","/docs/transformers/pr_16682/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(wV,"href","/docs/transformers/pr_16682/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(AV,"href","/docs/transformers/pr_16682/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(yV,"href","/docs/transformers/pr_16682/en/model_doc/wavlm#transformers.WavLMForCTC"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hF,"id","transformers.AutoModelForSpeechSeq2Seq"),c(hF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hF,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(dd,"class","relative group"),c(LV,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xV,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($V,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kV,"href","/docs/transformers/pr_16682/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(SV,"href","/docs/transformers/pr_16682/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FF,"id","transformers.AutoModelForAudioXVector"),c(FF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(FF,"href","#transformers.AutoModelForAudioXVector"),c(md,"class","relative group"),c(RV,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BV,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PV,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IV,"href","/docs/transformers/pr_16682/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(qV,"href","/docs/transformers/pr_16682/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(NV,"href","/docs/transformers/pr_16682/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(jV,"href","/docs/transformers/pr_16682/en/model_doc/wavlm#transformers.WavLMForXVector"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LF,"id","transformers.AutoModelForMaskedImageModeling"),c(LF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(LF,"href","#transformers.AutoModelForMaskedImageModeling"),c(pd,"class","relative group"),c(DV,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GV,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OV,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VV,"href","/docs/transformers/pr_16682/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(XV,"href","/docs/transformers/pr_16682/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(zV,"href","/docs/transformers/pr_16682/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PF,"id","transformers.AutoModelForObjectDetection"),c(PF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PF,"href","#transformers.AutoModelForObjectDetection"),c(vd,"class","relative group"),c(QV,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WV,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HV,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UV,"href","/docs/transformers/pr_16682/en/model_doc/detr#transformers.DetrForObjectDetection"),c(JV,"href","/docs/transformers/pr_16682/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GF,"id","transformers.AutoModelForImageSegmentation"),c(GF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(GF,"href","#transformers.AutoModelForImageSegmentation"),c(Md,"class","relative group"),c(YV,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KV,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZV,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eX,"href","/docs/transformers/pr_16682/en/model_doc/detr#transformers.DetrForSegmentation"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QF,"id","transformers.AutoModelForSemanticSegmentation"),c(QF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(QF,"href","#transformers.AutoModelForSemanticSegmentation"),c(wd,"class","relative group"),c(oX,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rX,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tX,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aX,"href","/docs/transformers/pr_16682/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(nX,"href","/docs/transformers/pr_16682/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(sX,"href","/docs/transformers/pr_16682/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(lX,"href","/docs/transformers/pr_16682/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eT,"id","transformers.AutoModelForInstanceSegmentation"),c(eT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eT,"href","#transformers.AutoModelForInstanceSegmentation"),c(Ld,"class","relative group"),c(iX,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dX,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cX,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fX,"href","/docs/transformers/pr_16682/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nT,"id","transformers.TFAutoModel"),c(nT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nT,"href","#transformers.TFAutoModel"),c(kd,"class","relative group"),c(mX,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gX,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hX,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pX,"href","/docs/transformers/pr_16682/en/model_doc/albert#transformers.TFAlbertModel"),c(uX,"href","/docs/transformers/pr_16682/en/model_doc/bart#transformers.TFBartModel"),c(_X,"href","/docs/transformers/pr_16682/en/model_doc/bert#transformers.TFBertModel"),c(bX,"href","/docs/transformers/pr_16682/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(vX,"href","/docs/transformers/pr_16682/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(FX,"href","/docs/transformers/pr_16682/en/model_doc/camembert#transformers.TFCamembertModel"),c(TX,"href","/docs/transformers/pr_16682/en/model_doc/clip#transformers.TFCLIPModel"),c(MX,"href","/docs/transformers/pr_16682/en/model_doc/convbert#transformers.TFConvBertModel"),c(EX,"href","/docs/transformers/pr_16682/en/model_doc/convnext#transformers.TFConvNextModel"),c(CX,"href","/docs/transformers/pr_16682/en/model_doc/ctrl#transformers.TFCTRLModel"),c(wX,"href","/docs/transformers/pr_16682/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(AX,"href","/docs/transformers/pr_16682/en/model_doc/deberta#transformers.TFDebertaModel"),c(yX,"href","/docs/transformers/pr_16682/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(LX,"href","/docs/transformers/pr_16682/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(xX,"href","/docs/transformers/pr_16682/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c($X,"href","/docs/transformers/pr_16682/en/model_doc/electra#transformers.TFElectraModel"),c(kX,"href","/docs/transformers/pr_16682/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(SX,"href","/docs/transformers/pr_16682/en/model_doc/funnel#transformers.TFFunnelModel"),c(RX,"href","/docs/transformers/pr_16682/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(BX,"href","/docs/transformers/pr_16682/en/model_doc/gpt2#transformers.TFGPT2Model"),c(PX,"href","/docs/transformers/pr_16682/en/model_doc/gptj#transformers.TFGPTJModel"),c(IX,"href","/docs/transformers/pr_16682/en/model_doc/hubert#transformers.TFHubertModel"),c(qX,"href","/docs/transformers/pr_16682/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(NX,"href","/docs/transformers/pr_16682/en/model_doc/led#transformers.TFLEDModel"),c(jX,"href","/docs/transformers/pr_16682/en/model_doc/longformer#transformers.TFLongformerModel"),c(DX,"href","/docs/transformers/pr_16682/en/model_doc/lxmert#transformers.TFLxmertModel"),c(GX,"href","/docs/transformers/pr_16682/en/model_doc/marian#transformers.TFMarianModel"),c(OX,"href","/docs/transformers/pr_16682/en/model_doc/mbart#transformers.TFMBartModel"),c(VX,"href","/docs/transformers/pr_16682/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(XX,"href","/docs/transformers/pr_16682/en/model_doc/mpnet#transformers.TFMPNetModel"),c(zX,"href","/docs/transformers/pr_16682/en/model_doc/mt5#transformers.TFMT5Model"),c(QX,"href","/docs/transformers/pr_16682/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(WX,"href","/docs/transformers/pr_16682/en/model_doc/pegasus#transformers.TFPegasusModel"),c(HX,"href","/docs/transformers/pr_16682/en/model_doc/rembert#transformers.TFRemBertModel"),c(UX,"href","/docs/transformers/pr_16682/en/model_doc/roberta#transformers.TFRobertaModel"),c(JX,"href","/docs/transformers/pr_16682/en/model_doc/roformer#transformers.TFRoFormerModel"),c(YX,"href","/docs/transformers/pr_16682/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(KX,"href","/docs/transformers/pr_16682/en/model_doc/t5#transformers.TFT5Model"),c(ZX,"href","/docs/transformers/pr_16682/en/model_doc/tapas#transformers.TFTapasModel"),c(ez,"href","/docs/transformers/pr_16682/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(oz,"href","/docs/transformers/pr_16682/en/model_doc/vit#transformers.TFViTModel"),c(rz,"href","/docs/transformers/pr_16682/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(tz,"href","/docs/transformers/pr_16682/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(az,"href","/docs/transformers/pr_16682/en/model_doc/xlm#transformers.TFXLMModel"),c(nz,"href","/docs/transformers/pr_16682/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(sz,"href","/docs/transformers/pr_16682/en/model_doc/xlnet#transformers.TFXLNetModel"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KT,"id","transformers.TFAutoModelForPreTraining"),c(KT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(KT,"href","#transformers.TFAutoModelForPreTraining"),c(Bd,"class","relative group"),c(lz,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iz,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dz,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cz,"href","/docs/transformers/pr_16682/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(fz,"href","/docs/transformers/pr_16682/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(mz,"href","/docs/transformers/pr_16682/en/model_doc/bert#transformers.TFBertForPreTraining"),c(gz,"href","/docs/transformers/pr_16682/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(hz,"href","/docs/transformers/pr_16682/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(pz,"href","/docs/transformers/pr_16682/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(uz,"href","/docs/transformers/pr_16682/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(_z,"href","/docs/transformers/pr_16682/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(bz,"href","/docs/transformers/pr_16682/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(vz,"href","/docs/transformers/pr_16682/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(Fz,"href","/docs/transformers/pr_16682/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(Tz,"href","/docs/transformers/pr_16682/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(Mz,"href","/docs/transformers/pr_16682/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(Ez,"href","/docs/transformers/pr_16682/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(Cz,"href","/docs/transformers/pr_16682/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(wz,"href","/docs/transformers/pr_16682/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(Az,"href","/docs/transformers/pr_16682/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(yz,"href","/docs/transformers/pr_16682/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(Lz,"href","/docs/transformers/pr_16682/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(xz,"href","/docs/transformers/pr_16682/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c($z,"href","/docs/transformers/pr_16682/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(kz,"href","/docs/transformers/pr_16682/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Sz,"href","/docs/transformers/pr_16682/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(C8,"id","transformers.TFAutoModelForCausalLM"),c(C8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C8,"href","#transformers.TFAutoModelForCausalLM"),c(qd,"class","relative group"),c(Rz,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bz,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Pz,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Iz,"href","/docs/transformers/pr_16682/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(qz,"href","/docs/transformers/pr_16682/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(Nz,"href","/docs/transformers/pr_16682/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(jz,"href","/docs/transformers/pr_16682/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(Dz,"href","/docs/transformers/pr_16682/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(Gz,"href","/docs/transformers/pr_16682/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(Oz,"href","/docs/transformers/pr_16682/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(Vz,"href","/docs/transformers/pr_16682/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(Xz,"href","/docs/transformers/pr_16682/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(zz,"href","/docs/transformers/pr_16682/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(Qz,"href","/docs/transformers/pr_16682/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(Wz,"href","/docs/transformers/pr_16682/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(j8,"id","transformers.TFAutoModelForImageClassification"),c(j8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(j8,"href","#transformers.TFAutoModelForImageClassification"),c(Dd,"class","relative group"),c(Hz,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Uz,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Jz,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yz,"href","/docs/transformers/pr_16682/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(Kz,"href","/docs/transformers/pr_16682/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(Zz,"href","/docs/transformers/pr_16682/en/model_doc/vit#transformers.TFViTForImageClassification"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z8,"id","transformers.TFAutoModelForMaskedLM"),c(z8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z8,"href","#transformers.TFAutoModelForMaskedLM"),c(Xd,"class","relative group"),c(eQ,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oQ,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rQ,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tQ,"href","/docs/transformers/pr_16682/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(aQ,"href","/docs/transformers/pr_16682/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(nQ,"href","/docs/transformers/pr_16682/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(sQ,"href","/docs/transformers/pr_16682/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(lQ,"href","/docs/transformers/pr_16682/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(iQ,"href","/docs/transformers/pr_16682/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(dQ,"href","/docs/transformers/pr_16682/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(cQ,"href","/docs/transformers/pr_16682/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(fQ,"href","/docs/transformers/pr_16682/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(mQ,"href","/docs/transformers/pr_16682/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(gQ,"href","/docs/transformers/pr_16682/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(hQ,"href","/docs/transformers/pr_16682/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(pQ,"href","/docs/transformers/pr_16682/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(uQ,"href","/docs/transformers/pr_16682/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(_Q,"href","/docs/transformers/pr_16682/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(bQ,"href","/docs/transformers/pr_16682/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(vQ,"href","/docs/transformers/pr_16682/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(FQ,"href","/docs/transformers/pr_16682/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(TQ,"href","/docs/transformers/pr_16682/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(MQ,"href","/docs/transformers/pr_16682/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hM,"id","transformers.TFAutoModelForSeq2SeqLM"),c(hM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hM,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Wd,"class","relative group"),c(EQ,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CQ,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wQ,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AQ,"href","/docs/transformers/pr_16682/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(yQ,"href","/docs/transformers/pr_16682/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(LQ,"href","/docs/transformers/pr_16682/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(xQ,"href","/docs/transformers/pr_16682/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c($Q,"href","/docs/transformers/pr_16682/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(kQ,"href","/docs/transformers/pr_16682/en/model_doc/marian#transformers.TFMarianMTModel"),c(SQ,"href","/docs/transformers/pr_16682/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(RQ,"href","/docs/transformers/pr_16682/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(BQ,"href","/docs/transformers/pr_16682/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(PQ,"href","/docs/transformers/pr_16682/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yM,"id","transformers.TFAutoModelForSequenceClassification"),c(yM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yM,"href","#transformers.TFAutoModelForSequenceClassification"),c(Jd,"class","relative group"),c(IQ,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qQ,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NQ,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jQ,"href","/docs/transformers/pr_16682/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(DQ,"href","/docs/transformers/pr_16682/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(GQ,"href","/docs/transformers/pr_16682/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(OQ,"href","/docs/transformers/pr_16682/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(VQ,"href","/docs/transformers/pr_16682/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(XQ,"href","/docs/transformers/pr_16682/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(zQ,"href","/docs/transformers/pr_16682/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(QQ,"href","/docs/transformers/pr_16682/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(WQ,"href","/docs/transformers/pr_16682/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(HQ,"href","/docs/transformers/pr_16682/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(UQ,"href","/docs/transformers/pr_16682/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(JQ,"href","/docs/transformers/pr_16682/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(YQ,"href","/docs/transformers/pr_16682/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(KQ,"href","/docs/transformers/pr_16682/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(ZQ,"href","/docs/transformers/pr_16682/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(eW,"href","/docs/transformers/pr_16682/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(oW,"href","/docs/transformers/pr_16682/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(rW,"href","/docs/transformers/pr_16682/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(tW,"href","/docs/transformers/pr_16682/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(aW,"href","/docs/transformers/pr_16682/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(nW,"href","/docs/transformers/pr_16682/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(sW,"href","/docs/transformers/pr_16682/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(lW,"href","/docs/transformers/pr_16682/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(iW,"href","/docs/transformers/pr_16682/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(dW,"href","/docs/transformers/pr_16682/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(cW,"href","/docs/transformers/pr_16682/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(r4,"id","transformers.TFAutoModelForMultipleChoice"),c(r4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(r4,"href","#transformers.TFAutoModelForMultipleChoice"),c(Zd,"class","relative group"),c(fW,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mW,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gW,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hW,"href","/docs/transformers/pr_16682/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(pW,"href","/docs/transformers/pr_16682/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(uW,"href","/docs/transformers/pr_16682/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(_W,"href","/docs/transformers/pr_16682/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(bW,"href","/docs/transformers/pr_16682/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(vW,"href","/docs/transformers/pr_16682/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(FW,"href","/docs/transformers/pr_16682/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(TW,"href","/docs/transformers/pr_16682/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(MW,"href","/docs/transformers/pr_16682/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(EW,"href","/docs/transformers/pr_16682/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(CW,"href","/docs/transformers/pr_16682/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(wW,"href","/docs/transformers/pr_16682/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(AW,"href","/docs/transformers/pr_16682/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(yW,"href","/docs/transformers/pr_16682/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(LW,"href","/docs/transformers/pr_16682/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(xW,"href","/docs/transformers/pr_16682/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c($W,"href","/docs/transformers/pr_16682/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(M4,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(M4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M4,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(rc,"class","relative group"),c(kW,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SW,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RW,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BW,"href","/docs/transformers/pr_16682/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A4,"id","transformers.TFAutoModelForTokenClassification"),c(A4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A4,"href","#transformers.TFAutoModelForTokenClassification"),c(nc,"class","relative group"),c(PW,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IW,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qW,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NW,"href","/docs/transformers/pr_16682/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(jW,"href","/docs/transformers/pr_16682/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(DW,"href","/docs/transformers/pr_16682/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(GW,"href","/docs/transformers/pr_16682/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(OW,"href","/docs/transformers/pr_16682/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(VW,"href","/docs/transformers/pr_16682/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(XW,"href","/docs/transformers/pr_16682/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(zW,"href","/docs/transformers/pr_16682/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(QW,"href","/docs/transformers/pr_16682/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(WW,"href","/docs/transformers/pr_16682/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(HW,"href","/docs/transformers/pr_16682/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(UW,"href","/docs/transformers/pr_16682/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(JW,"href","/docs/transformers/pr_16682/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(YW,"href","/docs/transformers/pr_16682/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(KW,"href","/docs/transformers/pr_16682/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(ZW,"href","/docs/transformers/pr_16682/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(eH,"href","/docs/transformers/pr_16682/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(oH,"href","/docs/transformers/pr_16682/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(rH,"href","/docs/transformers/pr_16682/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(tH,"href","/docs/transformers/pr_16682/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U4,"id","transformers.TFAutoModelForQuestionAnswering"),c(U4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U4,"href","#transformers.TFAutoModelForQuestionAnswering"),c(ic,"class","relative group"),c(aH,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nH,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sH,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lH,"href","/docs/transformers/pr_16682/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(iH,"href","/docs/transformers/pr_16682/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(dH,"href","/docs/transformers/pr_16682/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(cH,"href","/docs/transformers/pr_16682/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(fH,"href","/docs/transformers/pr_16682/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(mH,"href","/docs/transformers/pr_16682/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(gH,"href","/docs/transformers/pr_16682/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(hH,"href","/docs/transformers/pr_16682/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(pH,"href","/docs/transformers/pr_16682/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(uH,"href","/docs/transformers/pr_16682/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(_H,"href","/docs/transformers/pr_16682/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(bH,"href","/docs/transformers/pr_16682/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(vH,"href","/docs/transformers/pr_16682/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(FH,"href","/docs/transformers/pr_16682/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(TH,"href","/docs/transformers/pr_16682/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(MH,"href","/docs/transformers/pr_16682/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(EH,"href","/docs/transformers/pr_16682/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(CH,"href","/docs/transformers/pr_16682/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(wH,"href","/docs/transformers/pr_16682/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(AH,"href","/docs/transformers/pr_16682/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bE,"id","transformers.TFAutoModelForVision2Seq"),c(bE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bE,"href","#transformers.TFAutoModelForVision2Seq"),c(fc,"class","relative group"),c(yH,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LH,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xH,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($H,"href","/docs/transformers/pr_16682/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ME,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(ME,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ME,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(hc,"class","relative group"),c(kH,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SH,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RH,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BH,"href","/docs/transformers/pr_16682/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AE,"id","transformers.FlaxAutoModel"),c(AE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(AE,"href","#transformers.FlaxAutoModel"),c(_c,"class","relative group"),c(PH,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IH,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qH,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NH,"href","/docs/transformers/pr_16682/en/model_doc/albert#transformers.FlaxAlbertModel"),c(jH,"href","/docs/transformers/pr_16682/en/model_doc/bart#transformers.FlaxBartModel"),c(DH,"href","/docs/transformers/pr_16682/en/model_doc/beit#transformers.FlaxBeitModel"),c(GH,"href","/docs/transformers/pr_16682/en/model_doc/bert#transformers.FlaxBertModel"),c(OH,"href","/docs/transformers/pr_16682/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(VH,"href","/docs/transformers/pr_16682/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(XH,"href","/docs/transformers/pr_16682/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(zH,"href","/docs/transformers/pr_16682/en/model_doc/clip#transformers.FlaxCLIPModel"),c(QH,"href","/docs/transformers/pr_16682/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(WH,"href","/docs/transformers/pr_16682/en/model_doc/electra#transformers.FlaxElectraModel"),c(HH,"href","/docs/transformers/pr_16682/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(UH,"href","/docs/transformers/pr_16682/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(JH,"href","/docs/transformers/pr_16682/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(YH,"href","/docs/transformers/pr_16682/en/model_doc/marian#transformers.FlaxMarianModel"),c(KH,"href","/docs/transformers/pr_16682/en/model_doc/mbart#transformers.FlaxMBartModel"),c(ZH,"href","/docs/transformers/pr_16682/en/model_doc/mt5#transformers.FlaxMT5Model"),c(eU,"href","/docs/transformers/pr_16682/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(oU,"href","/docs/transformers/pr_16682/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(rU,"href","/docs/transformers/pr_16682/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(tU,"href","/docs/transformers/pr_16682/en/model_doc/t5#transformers.FlaxT5Model"),c(aU,"href","/docs/transformers/pr_16682/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(nU,"href","/docs/transformers/pr_16682/en/model_doc/vit#transformers.FlaxViTModel"),c(sU,"href","/docs/transformers/pr_16682/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(lU,"href","/docs/transformers/pr_16682/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(iU,"href","/docs/transformers/pr_16682/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(e5,"id","transformers.FlaxAutoModelForCausalLM"),c(e5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e5,"href","#transformers.FlaxAutoModelForCausalLM"),c(Fc,"class","relative group"),c(dU,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cU,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fU,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mU,"href","/docs/transformers/pr_16682/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(gU,"href","/docs/transformers/pr_16682/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(hU,"href","/docs/transformers/pr_16682/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(pU,"href","/docs/transformers/pr_16682/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(uU,"href","/docs/transformers/pr_16682/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(_U,"href","/docs/transformers/pr_16682/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(bU,"href","/docs/transformers/pr_16682/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(vU,"href","/docs/transformers/pr_16682/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(FU,"href","/docs/transformers/pr_16682/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(m5,"id","transformers.FlaxAutoModelForPreTraining"),c(m5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m5,"href","#transformers.FlaxAutoModelForPreTraining"),c(Ec,"class","relative group"),c(TU,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MU,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EU,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CU,"href","/docs/transformers/pr_16682/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(wU,"href","/docs/transformers/pr_16682/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(AU,"href","/docs/transformers/pr_16682/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(yU,"href","/docs/transformers/pr_16682/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(LU,"href","/docs/transformers/pr_16682/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(xU,"href","/docs/transformers/pr_16682/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c($U,"href","/docs/transformers/pr_16682/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(kU,"href","/docs/transformers/pr_16682/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(SU,"href","/docs/transformers/pr_16682/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(RU,"href","/docs/transformers/pr_16682/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(BU,"href","/docs/transformers/pr_16682/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(PU,"href","/docs/transformers/pr_16682/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(y5,"id","transformers.FlaxAutoModelForMaskedLM"),c(y5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(y5,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Ac,"class","relative group"),c(IU,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qU,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NU,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jU,"href","/docs/transformers/pr_16682/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(DU,"href","/docs/transformers/pr_16682/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(GU,"href","/docs/transformers/pr_16682/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(OU,"href","/docs/transformers/pr_16682/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(VU,"href","/docs/transformers/pr_16682/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(XU,"href","/docs/transformers/pr_16682/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(zU,"href","/docs/transformers/pr_16682/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(QU,"href","/docs/transformers/pr_16682/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(WU,"href","/docs/transformers/pr_16682/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(HU,"href","/docs/transformers/pr_16682/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(D5,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(D5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D5,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(xc,"class","relative group"),c(UU,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JU,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YU,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KU,"href","/docs/transformers/pr_16682/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(ZU,"href","/docs/transformers/pr_16682/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(eJ,"href","/docs/transformers/pr_16682/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(oJ,"href","/docs/transformers/pr_16682/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(rJ,"href","/docs/transformers/pr_16682/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(tJ,"href","/docs/transformers/pr_16682/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(aJ,"href","/docs/transformers/pr_16682/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(nJ,"href","/docs/transformers/pr_16682/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(sJ,"href","/docs/transformers/pr_16682/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(K5,"id","transformers.FlaxAutoModelForSequenceClassification"),c(K5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K5,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Sc,"class","relative group"),c(lJ,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iJ,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dJ,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cJ,"href","/docs/transformers/pr_16682/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(fJ,"href","/docs/transformers/pr_16682/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(mJ,"href","/docs/transformers/pr_16682/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(gJ,"href","/docs/transformers/pr_16682/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(hJ,"href","/docs/transformers/pr_16682/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(pJ,"href","/docs/transformers/pr_16682/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(uJ,"href","/docs/transformers/pr_16682/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(_J,"href","/docs/transformers/pr_16682/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(bJ,"href","/docs/transformers/pr_16682/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(vJ,"href","/docs/transformers/pr_16682/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fC,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(fC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fC,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Pc,"class","relative group"),c(FJ,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TJ,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MJ,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EJ,"href","/docs/transformers/pr_16682/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(CJ,"href","/docs/transformers/pr_16682/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(wJ,"href","/docs/transformers/pr_16682/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(AJ,"href","/docs/transformers/pr_16682/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(yJ,"href","/docs/transformers/pr_16682/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(LJ,"href","/docs/transformers/pr_16682/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(xJ,"href","/docs/transformers/pr_16682/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c($J,"href","/docs/transformers/pr_16682/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(kJ,"href","/docs/transformers/pr_16682/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(SJ,"href","/docs/transformers/pr_16682/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CC,"id","transformers.FlaxAutoModelForTokenClassification"),c(CC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(CC,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Nc,"class","relative group"),c(RJ,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BJ,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PJ,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IJ,"href","/docs/transformers/pr_16682/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(qJ,"href","/docs/transformers/pr_16682/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(NJ,"href","/docs/transformers/pr_16682/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(jJ,"href","/docs/transformers/pr_16682/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(DJ,"href","/docs/transformers/pr_16682/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(GJ,"href","/docs/transformers/pr_16682/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(OJ,"href","/docs/transformers/pr_16682/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(VJ,"href","/docs/transformers/pr_16682/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PC,"id","transformers.FlaxAutoModelForMultipleChoice"),c(PC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PC,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Gc,"class","relative group"),c(XJ,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zJ,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QJ,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WJ,"href","/docs/transformers/pr_16682/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(HJ,"href","/docs/transformers/pr_16682/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(UJ,"href","/docs/transformers/pr_16682/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(JJ,"href","/docs/transformers/pr_16682/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(YJ,"href","/docs/transformers/pr_16682/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(KJ,"href","/docs/transformers/pr_16682/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(ZJ,"href","/docs/transformers/pr_16682/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(eY,"href","/docs/transformers/pr_16682/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QC,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(QC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(QC,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Xc,"class","relative group"),c(oY,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rY,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tY,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aY,"href","/docs/transformers/pr_16682/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JC,"id","transformers.FlaxAutoModelForImageClassification"),c(JC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(JC,"href","#transformers.FlaxAutoModelForImageClassification"),c(Wc,"class","relative group"),c(nY,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sY,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lY,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iY,"href","/docs/transformers/pr_16682/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(dY,"href","/docs/transformers/pr_16682/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o3,"id","transformers.FlaxAutoModelForVision2Seq"),c(o3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o3,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Jc,"class","relative group"),c(cY,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fY,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mY,"href","/docs/transformers/pr_16682/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gY,"href","/docs/transformers/pr_16682/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,_){e(document.head,g),b(f,v,_),b(f,p,_),e(p,m),e(m,u),M(d,u,null),e(p,h),e(p,Mo),e(Mo,oi),b(f,rf,_),b(f,Kr,_),e(Kr,ri),e(Kr,ti),e(ti,FA),e(Kr,tf),b(f,qe,_),b(f,Xe,_),e(Xe,ai),e(Xe,Mn),e(Mn,TA),e(Xe,En),e(Xe,Cn),e(Cn,MA),e(Xe,ni),e(Xe,wn),e(wn,EA),e(Xe,si),b(f,af,_),M(va,f,_),b(f,ze,_),b(f,Ae,_),e(Ae,P9),e(Ae,li),e(li,I9),e(Ae,q9),b(f,Eo,_),b(f,Fa,_),e(Fa,N9),e(Fa,nf),e(nf,j9),e(Fa,FNe),b(f,hBe,_),b(f,ii,_),e(ii,sf),e(sf,nZ),M(CA,nZ,null),e(ii,TNe),e(ii,sZ),e(sZ,MNe),b(f,pBe,_),b(f,An,_),e(An,ENe),e(An,lZ),e(lZ,CNe),e(An,wNe),e(An,iZ),e(iZ,ANe),e(An,yNe),b(f,uBe,_),M(wA,f,_),b(f,_Be,_),b(f,D9,_),e(D9,LNe),b(f,bBe,_),M(lf,f,_),b(f,vBe,_),b(f,di,_),e(di,df),e(df,dZ),M(AA,dZ,null),e(di,xNe),e(di,cZ),e(cZ,$Ne),b(f,FBe,_),b(f,Co,_),M(yA,Co,null),e(Co,kNe),e(Co,LA),e(LA,SNe),e(LA,G9),e(G9,RNe),e(LA,BNe),e(Co,PNe),e(Co,xA),e(xA,INe),e(xA,fZ),e(fZ,qNe),e(xA,NNe),e(Co,jNe),e(Co,Mr),M($A,Mr,null),e(Mr,DNe),e(Mr,mZ),e(mZ,GNe),e(Mr,ONe),e(Mr,ci),e(ci,VNe),e(ci,gZ),e(gZ,XNe),e(ci,zNe),e(ci,hZ),e(hZ,QNe),e(ci,WNe),e(Mr,HNe),e(Mr,A),e(A,cf),e(cf,pZ),e(pZ,UNe),e(cf,JNe),e(cf,O9),e(O9,YNe),e(cf,KNe),e(A,ZNe),e(A,ff),e(ff,uZ),e(uZ,eje),e(ff,oje),e(ff,V9),e(V9,rje),e(ff,tje),e(A,aje),e(A,mf),e(mf,_Z),e(_Z,nje),e(mf,sje),e(mf,X9),e(X9,lje),e(mf,ije),e(A,dje),e(A,gf),e(gf,bZ),e(bZ,cje),e(gf,fje),e(gf,z9),e(z9,mje),e(gf,gje),e(A,hje),e(A,hf),e(hf,vZ),e(vZ,pje),e(hf,uje),e(hf,Q9),e(Q9,_je),e(hf,bje),e(A,vje),e(A,pf),e(pf,FZ),e(FZ,Fje),e(pf,Tje),e(pf,W9),e(W9,Mje),e(pf,Eje),e(A,Cje),e(A,uf),e(uf,TZ),e(TZ,wje),e(uf,Aje),e(uf,H9),e(H9,yje),e(uf,Lje),e(A,xje),e(A,_f),e(_f,MZ),e(MZ,$je),e(_f,kje),e(_f,U9),e(U9,Sje),e(_f,Rje),e(A,Bje),e(A,bf),e(bf,EZ),e(EZ,Pje),e(bf,Ije),e(bf,J9),e(J9,qje),e(bf,Nje),e(A,jje),e(A,vf),e(vf,CZ),e(CZ,Dje),e(vf,Gje),e(vf,Y9),e(Y9,Oje),e(vf,Vje),e(A,Xje),e(A,Ff),e(Ff,wZ),e(wZ,zje),e(Ff,Qje),e(Ff,K9),e(K9,Wje),e(Ff,Hje),e(A,Uje),e(A,Tf),e(Tf,AZ),e(AZ,Jje),e(Tf,Yje),e(Tf,Z9),e(Z9,Kje),e(Tf,Zje),e(A,eDe),e(A,Mf),e(Mf,yZ),e(yZ,oDe),e(Mf,rDe),e(Mf,e$),e(e$,tDe),e(Mf,aDe),e(A,nDe),e(A,Ef),e(Ef,LZ),e(LZ,sDe),e(Ef,lDe),e(Ef,o$),e(o$,iDe),e(Ef,dDe),e(A,cDe),e(A,Cf),e(Cf,xZ),e(xZ,fDe),e(Cf,mDe),e(Cf,r$),e(r$,gDe),e(Cf,hDe),e(A,pDe),e(A,wf),e(wf,$Z),e($Z,uDe),e(wf,_De),e(wf,t$),e(t$,bDe),e(wf,vDe),e(A,FDe),e(A,Af),e(Af,kZ),e(kZ,TDe),e(Af,MDe),e(Af,a$),e(a$,EDe),e(Af,CDe),e(A,wDe),e(A,yf),e(yf,SZ),e(SZ,ADe),e(yf,yDe),e(yf,n$),e(n$,LDe),e(yf,xDe),e(A,$De),e(A,Lf),e(Lf,RZ),e(RZ,kDe),e(Lf,SDe),e(Lf,s$),e(s$,RDe),e(Lf,BDe),e(A,PDe),e(A,xf),e(xf,BZ),e(BZ,IDe),e(xf,qDe),e(xf,l$),e(l$,NDe),e(xf,jDe),e(A,DDe),e(A,$f),e($f,PZ),e(PZ,GDe),e($f,ODe),e($f,i$),e(i$,VDe),e($f,XDe),e(A,zDe),e(A,kf),e(kf,IZ),e(IZ,QDe),e(kf,WDe),e(kf,d$),e(d$,HDe),e(kf,UDe),e(A,JDe),e(A,Sf),e(Sf,qZ),e(qZ,YDe),e(Sf,KDe),e(Sf,c$),e(c$,ZDe),e(Sf,eGe),e(A,oGe),e(A,Rf),e(Rf,NZ),e(NZ,rGe),e(Rf,tGe),e(Rf,f$),e(f$,aGe),e(Rf,nGe),e(A,sGe),e(A,Bf),e(Bf,jZ),e(jZ,lGe),e(Bf,iGe),e(Bf,m$),e(m$,dGe),e(Bf,cGe),e(A,fGe),e(A,Pf),e(Pf,DZ),e(DZ,mGe),e(Pf,gGe),e(Pf,g$),e(g$,hGe),e(Pf,pGe),e(A,uGe),e(A,If),e(If,GZ),e(GZ,_Ge),e(If,bGe),e(If,h$),e(h$,vGe),e(If,FGe),e(A,TGe),e(A,qf),e(qf,OZ),e(OZ,MGe),e(qf,EGe),e(qf,p$),e(p$,CGe),e(qf,wGe),e(A,AGe),e(A,Nf),e(Nf,VZ),e(VZ,yGe),e(Nf,LGe),e(Nf,u$),e(u$,xGe),e(Nf,$Ge),e(A,kGe),e(A,jf),e(jf,XZ),e(XZ,SGe),e(jf,RGe),e(jf,_$),e(_$,BGe),e(jf,PGe),e(A,IGe),e(A,Df),e(Df,zZ),e(zZ,qGe),e(Df,NGe),e(Df,b$),e(b$,jGe),e(Df,DGe),e(A,GGe),e(A,Gf),e(Gf,QZ),e(QZ,OGe),e(Gf,VGe),e(Gf,v$),e(v$,XGe),e(Gf,zGe),e(A,QGe),e(A,Of),e(Of,WZ),e(WZ,WGe),e(Of,HGe),e(Of,F$),e(F$,UGe),e(Of,JGe),e(A,YGe),e(A,Vf),e(Vf,HZ),e(HZ,KGe),e(Vf,ZGe),e(Vf,T$),e(T$,eOe),e(Vf,oOe),e(A,rOe),e(A,Xf),e(Xf,UZ),e(UZ,tOe),e(Xf,aOe),e(Xf,M$),e(M$,nOe),e(Xf,sOe),e(A,lOe),e(A,zf),e(zf,JZ),e(JZ,iOe),e(zf,dOe),e(zf,E$),e(E$,cOe),e(zf,fOe),e(A,mOe),e(A,Qf),e(Qf,YZ),e(YZ,gOe),e(Qf,hOe),e(Qf,C$),e(C$,pOe),e(Qf,uOe),e(A,_Oe),e(A,Wf),e(Wf,KZ),e(KZ,bOe),e(Wf,vOe),e(Wf,w$),e(w$,FOe),e(Wf,TOe),e(A,MOe),e(A,Hf),e(Hf,ZZ),e(ZZ,EOe),e(Hf,COe),e(Hf,A$),e(A$,wOe),e(Hf,AOe),e(A,yOe),e(A,Uf),e(Uf,eee),e(eee,LOe),e(Uf,xOe),e(Uf,y$),e(y$,$Oe),e(Uf,kOe),e(A,SOe),e(A,Jf),e(Jf,oee),e(oee,ROe),e(Jf,BOe),e(Jf,L$),e(L$,POe),e(Jf,IOe),e(A,qOe),e(A,Yf),e(Yf,ree),e(ree,NOe),e(Yf,jOe),e(Yf,x$),e(x$,DOe),e(Yf,GOe),e(A,OOe),e(A,Kf),e(Kf,tee),e(tee,VOe),e(Kf,XOe),e(Kf,$$),e($$,zOe),e(Kf,QOe),e(A,WOe),e(A,Zf),e(Zf,aee),e(aee,HOe),e(Zf,UOe),e(Zf,k$),e(k$,JOe),e(Zf,YOe),e(A,KOe),e(A,em),e(em,nee),e(nee,ZOe),e(em,eVe),e(em,S$),e(S$,oVe),e(em,rVe),e(A,tVe),e(A,om),e(om,see),e(see,aVe),e(om,nVe),e(om,R$),e(R$,sVe),e(om,lVe),e(A,iVe),e(A,rm),e(rm,lee),e(lee,dVe),e(rm,cVe),e(rm,B$),e(B$,fVe),e(rm,mVe),e(A,gVe),e(A,tm),e(tm,iee),e(iee,hVe),e(tm,pVe),e(tm,P$),e(P$,uVe),e(tm,_Ve),e(A,bVe),e(A,am),e(am,dee),e(dee,vVe),e(am,FVe),e(am,I$),e(I$,TVe),e(am,MVe),e(A,EVe),e(A,nm),e(nm,cee),e(cee,CVe),e(nm,wVe),e(nm,q$),e(q$,AVe),e(nm,yVe),e(A,LVe),e(A,sm),e(sm,fee),e(fee,xVe),e(sm,$Ve),e(sm,N$),e(N$,kVe),e(sm,SVe),e(A,RVe),e(A,lm),e(lm,mee),e(mee,BVe),e(lm,PVe),e(lm,j$),e(j$,IVe),e(lm,qVe),e(A,NVe),e(A,im),e(im,gee),e(gee,jVe),e(im,DVe),e(im,D$),e(D$,GVe),e(im,OVe),e(A,VVe),e(A,dm),e(dm,hee),e(hee,XVe),e(dm,zVe),e(dm,G$),e(G$,QVe),e(dm,WVe),e(A,HVe),e(A,cm),e(cm,pee),e(pee,UVe),e(cm,JVe),e(cm,O$),e(O$,YVe),e(cm,KVe),e(A,ZVe),e(A,fm),e(fm,uee),e(uee,eXe),e(fm,oXe),e(fm,V$),e(V$,rXe),e(fm,tXe),e(A,aXe),e(A,mm),e(mm,_ee),e(_ee,nXe),e(mm,sXe),e(mm,X$),e(X$,lXe),e(mm,iXe),e(A,dXe),e(A,gm),e(gm,bee),e(bee,cXe),e(gm,fXe),e(gm,z$),e(z$,mXe),e(gm,gXe),e(A,hXe),e(A,hm),e(hm,vee),e(vee,pXe),e(hm,uXe),e(hm,Q$),e(Q$,_Xe),e(hm,bXe),e(A,vXe),e(A,pm),e(pm,Fee),e(Fee,FXe),e(pm,TXe),e(pm,W$),e(W$,MXe),e(pm,EXe),e(A,CXe),e(A,um),e(um,Tee),e(Tee,wXe),e(um,AXe),e(um,H$),e(H$,yXe),e(um,LXe),e(A,xXe),e(A,_m),e(_m,Mee),e(Mee,$Xe),e(_m,kXe),e(_m,U$),e(U$,SXe),e(_m,RXe),e(A,BXe),e(A,bm),e(bm,Eee),e(Eee,PXe),e(bm,IXe),e(bm,J$),e(J$,qXe),e(bm,NXe),e(A,jXe),e(A,vm),e(vm,Cee),e(Cee,DXe),e(vm,GXe),e(vm,Y$),e(Y$,OXe),e(vm,VXe),e(A,XXe),e(A,Fm),e(Fm,wee),e(wee,zXe),e(Fm,QXe),e(Fm,K$),e(K$,WXe),e(Fm,HXe),e(A,UXe),e(A,Tm),e(Tm,Aee),e(Aee,JXe),e(Tm,YXe),e(Tm,Z$),e(Z$,KXe),e(Tm,ZXe),e(A,eze),e(A,Mm),e(Mm,yee),e(yee,oze),e(Mm,rze),e(Mm,ek),e(ek,tze),e(Mm,aze),e(A,nze),e(A,Em),e(Em,Lee),e(Lee,sze),e(Em,lze),e(Em,ok),e(ok,ize),e(Em,dze),e(A,cze),e(A,Cm),e(Cm,xee),e(xee,fze),e(Cm,mze),e(Cm,rk),e(rk,gze),e(Cm,hze),e(A,pze),e(A,wm),e(wm,$ee),e($ee,uze),e(wm,_ze),e(wm,tk),e(tk,bze),e(wm,vze),e(A,Fze),e(A,Am),e(Am,kee),e(kee,Tze),e(Am,Mze),e(Am,ak),e(ak,Eze),e(Am,Cze),e(A,wze),e(A,ym),e(ym,See),e(See,Aze),e(ym,yze),e(ym,nk),e(nk,Lze),e(ym,xze),e(A,$ze),e(A,Lm),e(Lm,Ree),e(Ree,kze),e(Lm,Sze),e(Lm,sk),e(sk,Rze),e(Lm,Bze),e(A,Pze),e(A,xm),e(xm,Bee),e(Bee,Ize),e(xm,qze),e(xm,lk),e(lk,Nze),e(xm,jze),e(A,Dze),e(A,$m),e($m,Pee),e(Pee,Gze),e($m,Oze),e($m,ik),e(ik,Vze),e($m,Xze),e(A,zze),e(A,km),e(km,Iee),e(Iee,Qze),e(km,Wze),e(km,dk),e(dk,Hze),e(km,Uze),e(A,Jze),e(A,Sm),e(Sm,qee),e(qee,Yze),e(Sm,Kze),e(Sm,ck),e(ck,Zze),e(Sm,eQe),e(A,oQe),e(A,Rm),e(Rm,Nee),e(Nee,rQe),e(Rm,tQe),e(Rm,fk),e(fk,aQe),e(Rm,nQe),e(A,sQe),e(A,Bm),e(Bm,jee),e(jee,lQe),e(Bm,iQe),e(Bm,mk),e(mk,dQe),e(Bm,cQe),e(A,fQe),e(A,Pm),e(Pm,Dee),e(Dee,mQe),e(Pm,gQe),e(Pm,gk),e(gk,hQe),e(Pm,pQe),e(A,uQe),e(A,Im),e(Im,Gee),e(Gee,_Qe),e(Im,bQe),e(Im,hk),e(hk,vQe),e(Im,FQe),e(A,TQe),e(A,qm),e(qm,Oee),e(Oee,MQe),e(qm,EQe),e(qm,pk),e(pk,CQe),e(qm,wQe),e(A,AQe),e(A,Nm),e(Nm,Vee),e(Vee,yQe),e(Nm,LQe),e(Nm,uk),e(uk,xQe),e(Nm,$Qe),e(A,kQe),e(A,jm),e(jm,Xee),e(Xee,SQe),e(jm,RQe),e(jm,_k),e(_k,BQe),e(jm,PQe),e(A,IQe),e(A,Dm),e(Dm,zee),e(zee,qQe),e(Dm,NQe),e(Dm,bk),e(bk,jQe),e(Dm,DQe),e(A,GQe),e(A,Gm),e(Gm,Qee),e(Qee,OQe),e(Gm,VQe),e(Gm,vk),e(vk,XQe),e(Gm,zQe),e(A,QQe),e(A,Om),e(Om,Wee),e(Wee,WQe),e(Om,HQe),e(Om,Fk),e(Fk,UQe),e(Om,JQe),e(A,YQe),e(A,Vm),e(Vm,Hee),e(Hee,KQe),e(Vm,ZQe),e(Vm,Tk),e(Tk,eWe),e(Vm,oWe),e(A,rWe),e(A,Xm),e(Xm,Uee),e(Uee,tWe),e(Xm,aWe),e(Xm,Mk),e(Mk,nWe),e(Xm,sWe),e(A,lWe),e(A,zm),e(zm,Jee),e(Jee,iWe),e(zm,dWe),e(zm,Ek),e(Ek,cWe),e(zm,fWe),e(A,mWe),e(A,Qm),e(Qm,Yee),e(Yee,gWe),e(Qm,hWe),e(Qm,Ck),e(Ck,pWe),e(Qm,uWe),e(A,_We),e(A,Wm),e(Wm,Kee),e(Kee,bWe),e(Wm,vWe),e(Wm,wk),e(wk,FWe),e(Wm,TWe),e(A,MWe),e(A,Hm),e(Hm,Zee),e(Zee,EWe),e(Hm,CWe),e(Hm,Ak),e(Ak,wWe),e(Hm,AWe),e(A,yWe),e(A,Um),e(Um,eoe),e(eoe,LWe),e(Um,xWe),e(Um,yk),e(yk,$We),e(Um,kWe),e(A,SWe),e(A,Jm),e(Jm,ooe),e(ooe,RWe),e(Jm,BWe),e(Jm,Lk),e(Lk,PWe),e(Jm,IWe),e(A,qWe),e(A,Ym),e(Ym,roe),e(roe,NWe),e(Ym,jWe),e(Ym,xk),e(xk,DWe),e(Ym,GWe),e(A,OWe),e(A,Km),e(Km,toe),e(toe,VWe),e(Km,XWe),e(Km,$k),e($k,zWe),e(Km,QWe),e(A,WWe),e(A,Zm),e(Zm,aoe),e(aoe,HWe),e(Zm,UWe),e(Zm,kk),e(kk,JWe),e(Zm,YWe),e(A,KWe),e(A,eg),e(eg,noe),e(noe,ZWe),e(eg,eHe),e(eg,Sk),e(Sk,oHe),e(eg,rHe),e(A,tHe),e(A,og),e(og,soe),e(soe,aHe),e(og,nHe),e(og,Rk),e(Rk,sHe),e(og,lHe),e(A,iHe),e(A,rg),e(rg,loe),e(loe,dHe),e(rg,cHe),e(rg,Bk),e(Bk,fHe),e(rg,mHe),e(A,gHe),e(A,tg),e(tg,ioe),e(ioe,hHe),e(tg,pHe),e(tg,Pk),e(Pk,uHe),e(tg,_He),e(A,bHe),e(A,ag),e(ag,doe),e(doe,vHe),e(ag,FHe),e(ag,Ik),e(Ik,THe),e(ag,MHe),e(Mr,EHe),M(ng,Mr,null),e(Co,CHe),e(Co,sg),M(kA,sg,null),e(sg,wHe),e(sg,coe),e(coe,AHe),b(f,TBe,_),b(f,fi,_),e(fi,lg),e(lg,foe),M(SA,foe,null),e(fi,yHe),e(fi,moe),e(moe,LHe),b(f,MBe,_),b(f,wo,_),M(RA,wo,null),e(wo,xHe),e(wo,BA),e(BA,$He),e(BA,qk),e(qk,kHe),e(BA,SHe),e(wo,RHe),e(wo,PA),e(PA,BHe),e(PA,goe),e(goe,PHe),e(PA,IHe),e(wo,qHe),e(wo,Er),M(IA,Er,null),e(Er,NHe),e(Er,hoe),e(hoe,jHe),e(Er,DHe),e(Er,Ta),e(Ta,GHe),e(Ta,poe),e(poe,OHe),e(Ta,VHe),e(Ta,uoe),e(uoe,XHe),e(Ta,zHe),e(Ta,_oe),e(_oe,QHe),e(Ta,WHe),e(Er,HHe),e(Er,k),e(k,yn),e(yn,boe),e(boe,UHe),e(yn,JHe),e(yn,Nk),e(Nk,YHe),e(yn,KHe),e(yn,jk),e(jk,ZHe),e(yn,eUe),e(k,oUe),e(k,Ln),e(Ln,voe),e(voe,rUe),e(Ln,tUe),e(Ln,Dk),e(Dk,aUe),e(Ln,nUe),e(Ln,Gk),e(Gk,sUe),e(Ln,lUe),e(k,iUe),e(k,xn),e(xn,Foe),e(Foe,dUe),e(xn,cUe),e(xn,Ok),e(Ok,fUe),e(xn,mUe),e(xn,Vk),e(Vk,gUe),e(xn,hUe),e(k,pUe),e(k,ig),e(ig,Toe),e(Toe,uUe),e(ig,_Ue),e(ig,Xk),e(Xk,bUe),e(ig,vUe),e(k,FUe),e(k,$n),e($n,Moe),e(Moe,TUe),e($n,MUe),e($n,zk),e(zk,EUe),e($n,CUe),e($n,Qk),e(Qk,wUe),e($n,AUe),e(k,yUe),e(k,dg),e(dg,Eoe),e(Eoe,LUe),e(dg,xUe),e(dg,Wk),e(Wk,$Ue),e(dg,kUe),e(k,SUe),e(k,cg),e(cg,Coe),e(Coe,RUe),e(cg,BUe),e(cg,Hk),e(Hk,PUe),e(cg,IUe),e(k,qUe),e(k,fg),e(fg,woe),e(woe,NUe),e(fg,jUe),e(fg,Uk),e(Uk,DUe),e(fg,GUe),e(k,OUe),e(k,kn),e(kn,Aoe),e(Aoe,VUe),e(kn,XUe),e(kn,Jk),e(Jk,zUe),e(kn,QUe),e(kn,Yk),e(Yk,WUe),e(kn,HUe),e(k,UUe),e(k,Sn),e(Sn,yoe),e(yoe,JUe),e(Sn,YUe),e(Sn,Kk),e(Kk,KUe),e(Sn,ZUe),e(Sn,Zk),e(Zk,eJe),e(Sn,oJe),e(k,rJe),e(k,Rn),e(Rn,Loe),e(Loe,tJe),e(Rn,aJe),e(Rn,eS),e(eS,nJe),e(Rn,sJe),e(Rn,oS),e(oS,lJe),e(Rn,iJe),e(k,dJe),e(k,mg),e(mg,xoe),e(xoe,cJe),e(mg,fJe),e(mg,rS),e(rS,mJe),e(mg,gJe),e(k,hJe),e(k,gg),e(gg,$oe),e($oe,pJe),e(gg,uJe),e(gg,tS),e(tS,_Je),e(gg,bJe),e(k,vJe),e(k,Bn),e(Bn,koe),e(koe,FJe),e(Bn,TJe),e(Bn,aS),e(aS,MJe),e(Bn,EJe),e(Bn,nS),e(nS,CJe),e(Bn,wJe),e(k,AJe),e(k,hg),e(hg,Soe),e(Soe,yJe),e(hg,LJe),e(hg,sS),e(sS,xJe),e(hg,$Je),e(k,kJe),e(k,Pn),e(Pn,Roe),e(Roe,SJe),e(Pn,RJe),e(Pn,lS),e(lS,BJe),e(Pn,PJe),e(Pn,iS),e(iS,IJe),e(Pn,qJe),e(k,NJe),e(k,In),e(In,Boe),e(Boe,jJe),e(In,DJe),e(In,dS),e(dS,GJe),e(In,OJe),e(In,cS),e(cS,VJe),e(In,XJe),e(k,zJe),e(k,qn),e(qn,Poe),e(Poe,QJe),e(qn,WJe),e(qn,fS),e(fS,HJe),e(qn,UJe),e(qn,mS),e(mS,JJe),e(qn,YJe),e(k,KJe),e(k,pg),e(pg,Ioe),e(Ioe,ZJe),e(pg,eYe),e(pg,gS),e(gS,oYe),e(pg,rYe),e(k,tYe),e(k,Nn),e(Nn,qoe),e(qoe,aYe),e(Nn,nYe),e(Nn,hS),e(hS,sYe),e(Nn,lYe),e(Nn,pS),e(pS,iYe),e(Nn,dYe),e(k,cYe),e(k,jn),e(jn,Noe),e(Noe,fYe),e(jn,mYe),e(jn,uS),e(uS,gYe),e(jn,hYe),e(jn,_S),e(_S,pYe),e(jn,uYe),e(k,_Ye),e(k,Dn),e(Dn,joe),e(joe,bYe),e(Dn,vYe),e(Dn,bS),e(bS,FYe),e(Dn,TYe),e(Dn,vS),e(vS,MYe),e(Dn,EYe),e(k,CYe),e(k,Gn),e(Gn,Doe),e(Doe,wYe),e(Gn,AYe),e(Gn,FS),e(FS,yYe),e(Gn,LYe),e(Gn,TS),e(TS,xYe),e(Gn,$Ye),e(k,kYe),e(k,On),e(On,Goe),e(Goe,SYe),e(On,RYe),e(On,MS),e(MS,BYe),e(On,PYe),e(On,ES),e(ES,IYe),e(On,qYe),e(k,NYe),e(k,Vn),e(Vn,Ooe),e(Ooe,jYe),e(Vn,DYe),e(Vn,CS),e(CS,GYe),e(Vn,OYe),e(Vn,wS),e(wS,VYe),e(Vn,XYe),e(k,zYe),e(k,ug),e(ug,Voe),e(Voe,QYe),e(ug,WYe),e(ug,AS),e(AS,HYe),e(ug,UYe),e(k,JYe),e(k,Xn),e(Xn,Xoe),e(Xoe,YYe),e(Xn,KYe),e(Xn,yS),e(yS,ZYe),e(Xn,eKe),e(Xn,LS),e(LS,oKe),e(Xn,rKe),e(k,tKe),e(k,_g),e(_g,zoe),e(zoe,aKe),e(_g,nKe),e(_g,xS),e(xS,sKe),e(_g,lKe),e(k,iKe),e(k,zn),e(zn,Qoe),e(Qoe,dKe),e(zn,cKe),e(zn,$S),e($S,fKe),e(zn,mKe),e(zn,kS),e(kS,gKe),e(zn,hKe),e(k,pKe),e(k,Qn),e(Qn,Woe),e(Woe,uKe),e(Qn,_Ke),e(Qn,SS),e(SS,bKe),e(Qn,vKe),e(Qn,RS),e(RS,FKe),e(Qn,TKe),e(k,MKe),e(k,Wn),e(Wn,Hoe),e(Hoe,EKe),e(Wn,CKe),e(Wn,BS),e(BS,wKe),e(Wn,AKe),e(Wn,PS),e(PS,yKe),e(Wn,LKe),e(k,xKe),e(k,Hn),e(Hn,Uoe),e(Uoe,$Ke),e(Hn,kKe),e(Hn,IS),e(IS,SKe),e(Hn,RKe),e(Hn,qS),e(qS,BKe),e(Hn,PKe),e(k,IKe),e(k,Un),e(Un,Joe),e(Joe,qKe),e(Un,NKe),e(Un,NS),e(NS,jKe),e(Un,DKe),e(Un,jS),e(jS,GKe),e(Un,OKe),e(k,VKe),e(k,bg),e(bg,Yoe),e(Yoe,XKe),e(bg,zKe),e(bg,DS),e(DS,QKe),e(bg,WKe),e(k,HKe),e(k,Jn),e(Jn,Koe),e(Koe,UKe),e(Jn,JKe),e(Jn,GS),e(GS,YKe),e(Jn,KKe),e(Jn,OS),e(OS,ZKe),e(Jn,eZe),e(k,oZe),e(k,Yn),e(Yn,Zoe),e(Zoe,rZe),e(Yn,tZe),e(Yn,VS),e(VS,aZe),e(Yn,nZe),e(Yn,XS),e(XS,sZe),e(Yn,lZe),e(k,iZe),e(k,Kn),e(Kn,ere),e(ere,dZe),e(Kn,cZe),e(Kn,zS),e(zS,fZe),e(Kn,mZe),e(Kn,QS),e(QS,gZe),e(Kn,hZe),e(k,pZe),e(k,Zn),e(Zn,ore),e(ore,uZe),e(Zn,_Ze),e(Zn,WS),e(WS,bZe),e(Zn,vZe),e(Zn,HS),e(HS,FZe),e(Zn,TZe),e(k,MZe),e(k,es),e(es,rre),e(rre,EZe),e(es,CZe),e(es,US),e(US,wZe),e(es,AZe),e(es,JS),e(JS,yZe),e(es,LZe),e(k,xZe),e(k,os),e(os,tre),e(tre,$Ze),e(os,kZe),e(os,YS),e(YS,SZe),e(os,RZe),e(os,KS),e(KS,BZe),e(os,PZe),e(k,IZe),e(k,vg),e(vg,are),e(are,qZe),e(vg,NZe),e(vg,ZS),e(ZS,jZe),e(vg,DZe),e(k,GZe),e(k,rs),e(rs,nre),e(nre,OZe),e(rs,VZe),e(rs,eR),e(eR,XZe),e(rs,zZe),e(rs,oR),e(oR,QZe),e(rs,WZe),e(k,HZe),e(k,Fg),e(Fg,sre),e(sre,UZe),e(Fg,JZe),e(Fg,rR),e(rR,YZe),e(Fg,KZe),e(k,ZZe),e(k,Tg),e(Tg,lre),e(lre,eeo),e(Tg,oeo),e(Tg,tR),e(tR,reo),e(Tg,teo),e(k,aeo),e(k,ts),e(ts,ire),e(ire,neo),e(ts,seo),e(ts,aR),e(aR,leo),e(ts,ieo),e(ts,nR),e(nR,deo),e(ts,ceo),e(k,feo),e(k,as),e(as,dre),e(dre,meo),e(as,geo),e(as,sR),e(sR,heo),e(as,peo),e(as,lR),e(lR,ueo),e(as,_eo),e(k,beo),e(k,ns),e(ns,cre),e(cre,veo),e(ns,Feo),e(ns,iR),e(iR,Teo),e(ns,Meo),e(ns,dR),e(dR,Eeo),e(ns,Ceo),e(k,weo),e(k,Mg),e(Mg,fre),e(fre,Aeo),e(Mg,yeo),e(Mg,cR),e(cR,Leo),e(Mg,xeo),e(k,$eo),e(k,ss),e(ss,mre),e(mre,keo),e(ss,Seo),e(ss,fR),e(fR,Reo),e(ss,Beo),e(ss,mR),e(mR,Peo),e(ss,Ieo),e(k,qeo),e(k,ls),e(ls,gre),e(gre,Neo),e(ls,jeo),e(ls,gR),e(gR,Deo),e(ls,Geo),e(ls,hR),e(hR,Oeo),e(ls,Veo),e(k,Xeo),e(k,is),e(is,hre),e(hre,zeo),e(is,Qeo),e(is,pR),e(pR,Weo),e(is,Heo),e(is,uR),e(uR,Ueo),e(is,Jeo),e(k,Yeo),e(k,ds),e(ds,pre),e(pre,Keo),e(ds,Zeo),e(ds,_R),e(_R,eoo),e(ds,ooo),e(ds,bR),e(bR,roo),e(ds,too),e(k,aoo),e(k,cs),e(cs,ure),e(ure,noo),e(cs,soo),e(cs,vR),e(vR,loo),e(cs,ioo),e(cs,FR),e(FR,doo),e(cs,coo),e(k,foo),e(k,fs),e(fs,_re),e(_re,moo),e(fs,goo),e(fs,TR),e(TR,hoo),e(fs,poo),e(fs,MR),e(MR,uoo),e(fs,_oo),e(k,boo),e(k,Eg),e(Eg,bre),e(bre,voo),e(Eg,Foo),e(Eg,ER),e(ER,Too),e(Eg,Moo),e(k,Eoo),e(k,Cg),e(Cg,vre),e(vre,Coo),e(Cg,woo),e(Cg,CR),e(CR,Aoo),e(Cg,yoo),e(k,Loo),e(k,wg),e(wg,Fre),e(Fre,xoo),e(wg,$oo),e(wg,wR),e(wR,koo),e(wg,Soo),e(k,Roo),e(k,Ag),e(Ag,Tre),e(Tre,Boo),e(Ag,Poo),e(Ag,AR),e(AR,Ioo),e(Ag,qoo),e(k,Noo),e(k,ms),e(ms,Mre),e(Mre,joo),e(ms,Doo),e(ms,yR),e(yR,Goo),e(ms,Ooo),e(ms,LR),e(LR,Voo),e(ms,Xoo),e(k,zoo),e(k,yg),e(yg,Ere),e(Ere,Qoo),e(yg,Woo),e(yg,xR),e(xR,Hoo),e(yg,Uoo),e(k,Joo),e(k,gs),e(gs,Cre),e(Cre,Yoo),e(gs,Koo),e(gs,$R),e($R,Zoo),e(gs,ero),e(gs,kR),e(kR,oro),e(gs,rro),e(k,tro),e(k,hs),e(hs,wre),e(wre,aro),e(hs,nro),e(hs,SR),e(SR,sro),e(hs,lro),e(hs,RR),e(RR,iro),e(hs,dro),e(k,cro),e(k,ps),e(ps,Are),e(Are,fro),e(ps,mro),e(ps,BR),e(BR,gro),e(ps,hro),e(ps,PR),e(PR,pro),e(ps,uro),e(k,_ro),e(k,us),e(us,yre),e(yre,bro),e(us,vro),e(us,IR),e(IR,Fro),e(us,Tro),e(us,qR),e(qR,Mro),e(us,Ero),e(k,Cro),e(k,_s),e(_s,Lre),e(Lre,wro),e(_s,Aro),e(_s,NR),e(NR,yro),e(_s,Lro),e(_s,jR),e(jR,xro),e(_s,$ro),e(k,kro),e(k,bs),e(bs,xre),e(xre,Sro),e(bs,Rro),e(bs,DR),e(DR,Bro),e(bs,Pro),e(bs,GR),e(GR,Iro),e(bs,qro),e(k,Nro),e(k,Lg),e(Lg,$re),e($re,jro),e(Lg,Dro),e(Lg,OR),e(OR,Gro),e(Lg,Oro),e(k,Vro),e(k,xg),e(xg,kre),e(kre,Xro),e(xg,zro),e(xg,VR),e(VR,Qro),e(xg,Wro),e(k,Hro),e(k,vs),e(vs,Sre),e(Sre,Uro),e(vs,Jro),e(vs,XR),e(XR,Yro),e(vs,Kro),e(vs,zR),e(zR,Zro),e(vs,eto),e(k,oto),e(k,Fs),e(Fs,Rre),e(Rre,rto),e(Fs,tto),e(Fs,QR),e(QR,ato),e(Fs,nto),e(Fs,WR),e(WR,sto),e(Fs,lto),e(k,ito),e(k,Ts),e(Ts,Bre),e(Bre,dto),e(Ts,cto),e(Ts,HR),e(HR,fto),e(Ts,mto),e(Ts,UR),e(UR,gto),e(Ts,hto),e(k,pto),e(k,$g),e($g,Pre),e(Pre,uto),e($g,_to),e($g,JR),e(JR,bto),e($g,vto),e(k,Fto),e(k,kg),e(kg,Ire),e(Ire,Tto),e(kg,Mto),e(kg,YR),e(YR,Eto),e(kg,Cto),e(k,wto),e(k,Sg),e(Sg,qre),e(qre,Ato),e(Sg,yto),e(Sg,KR),e(KR,Lto),e(Sg,xto),e(k,$to),e(k,Ms),e(Ms,Nre),e(Nre,kto),e(Ms,Sto),e(Ms,ZR),e(ZR,Rto),e(Ms,Bto),e(Ms,eB),e(eB,Pto),e(Ms,Ito),e(k,qto),e(k,Rg),e(Rg,jre),e(jre,Nto),e(Rg,jto),e(Rg,oB),e(oB,Dto),e(Rg,Gto),e(k,Oto),e(k,Bg),e(Bg,Dre),e(Dre,Vto),e(Bg,Xto),e(Bg,rB),e(rB,zto),e(Bg,Qto),e(k,Wto),e(k,Es),e(Es,Gre),e(Gre,Hto),e(Es,Uto),e(Es,tB),e(tB,Jto),e(Es,Yto),e(Es,aB),e(aB,Kto),e(Es,Zto),e(k,eao),e(k,Pg),e(Pg,Ore),e(Ore,oao),e(Pg,rao),e(Pg,nB),e(nB,tao),e(Pg,aao),e(k,nao),e(k,Ig),e(Ig,Vre),e(Vre,sao),e(Ig,lao),e(Ig,sB),e(sB,iao),e(Ig,dao),e(k,cao),e(k,Cs),e(Cs,Xre),e(Xre,fao),e(Cs,mao),e(Cs,lB),e(lB,gao),e(Cs,hao),e(Cs,iB),e(iB,pao),e(Cs,uao),e(k,_ao),e(k,ws),e(ws,zre),e(zre,bao),e(ws,vao),e(ws,dB),e(dB,Fao),e(ws,Tao),e(ws,cB),e(cB,Mao),e(ws,Eao),e(k,Cao),e(k,As),e(As,Qre),e(Qre,wao),e(As,Aao),e(As,fB),e(fB,yao),e(As,Lao),e(As,mB),e(mB,xao),e(As,$ao),e(k,kao),e(k,ys),e(ys,Wre),e(Wre,Sao),e(ys,Rao),e(ys,gB),e(gB,Bao),e(ys,Pao),e(ys,hB),e(hB,Iao),e(ys,qao),e(Er,Nao),M(qg,Er,null),e(wo,jao),e(wo,Ng),M(qA,Ng,null),e(Ng,Dao),e(Ng,Hre),e(Hre,Gao),b(f,EBe,_),b(f,mi,_),e(mi,jg),e(jg,Ure),M(NA,Ure,null),e(mi,Oao),e(mi,Jre),e(Jre,Vao),b(f,CBe,_),b(f,Ao,_),M(jA,Ao,null),e(Ao,Xao),e(Ao,DA),e(DA,zao),e(DA,pB),e(pB,Qao),e(DA,Wao),e(Ao,Hao),e(Ao,GA),e(GA,Uao),e(GA,Yre),e(Yre,Jao),e(GA,Yao),e(Ao,Kao),e(Ao,Qe),M(OA,Qe,null),e(Qe,Zao),e(Qe,Kre),e(Kre,eno),e(Qe,ono),e(Qe,Ma),e(Ma,rno),e(Ma,Zre),e(Zre,tno),e(Ma,ano),e(Ma,ete),e(ete,nno),e(Ma,sno),e(Ma,ote),e(ote,lno),e(Ma,ino),e(Qe,dno),e(Qe,te),e(te,Dg),e(Dg,rte),e(rte,cno),e(Dg,fno),e(Dg,uB),e(uB,mno),e(Dg,gno),e(te,hno),e(te,Gg),e(Gg,tte),e(tte,pno),e(Gg,uno),e(Gg,_B),e(_B,_no),e(Gg,bno),e(te,vno),e(te,Og),e(Og,ate),e(ate,Fno),e(Og,Tno),e(Og,bB),e(bB,Mno),e(Og,Eno),e(te,Cno),e(te,Vg),e(Vg,nte),e(nte,wno),e(Vg,Ano),e(Vg,vB),e(vB,yno),e(Vg,Lno),e(te,xno),e(te,Xg),e(Xg,ste),e(ste,$no),e(Xg,kno),e(Xg,FB),e(FB,Sno),e(Xg,Rno),e(te,Bno),e(te,zg),e(zg,lte),e(lte,Pno),e(zg,Ino),e(zg,TB),e(TB,qno),e(zg,Nno),e(te,jno),e(te,Qg),e(Qg,ite),e(ite,Dno),e(Qg,Gno),e(Qg,MB),e(MB,Ono),e(Qg,Vno),e(te,Xno),e(te,Wg),e(Wg,dte),e(dte,zno),e(Wg,Qno),e(Wg,EB),e(EB,Wno),e(Wg,Hno),e(te,Uno),e(te,Hg),e(Hg,cte),e(cte,Jno),e(Hg,Yno),e(Hg,CB),e(CB,Kno),e(Hg,Zno),e(te,eso),e(te,Ug),e(Ug,fte),e(fte,oso),e(Ug,rso),e(Ug,wB),e(wB,tso),e(Ug,aso),e(te,nso),e(te,Jg),e(Jg,mte),e(mte,sso),e(Jg,lso),e(Jg,AB),e(AB,iso),e(Jg,dso),e(te,cso),e(te,Yg),e(Yg,gte),e(gte,fso),e(Yg,mso),e(Yg,yB),e(yB,gso),e(Yg,hso),e(te,pso),e(te,Kg),e(Kg,hte),e(hte,uso),e(Kg,_so),e(Kg,LB),e(LB,bso),e(Kg,vso),e(te,Fso),e(te,Zg),e(Zg,pte),e(pte,Tso),e(Zg,Mso),e(Zg,xB),e(xB,Eso),e(Zg,Cso),e(te,wso),e(te,eh),e(eh,ute),e(ute,Aso),e(eh,yso),e(eh,$B),e($B,Lso),e(eh,xso),e(te,$so),e(te,oh),e(oh,_te),e(_te,kso),e(oh,Sso),e(oh,kB),e(kB,Rso),e(oh,Bso),e(te,Pso),e(te,rh),e(rh,bte),e(bte,Iso),e(rh,qso),e(rh,SB),e(SB,Nso),e(rh,jso),e(te,Dso),e(te,th),e(th,vte),e(vte,Gso),e(th,Oso),e(th,RB),e(RB,Vso),e(th,Xso),e(te,zso),e(te,ah),e(ah,Fte),e(Fte,Qso),e(ah,Wso),e(ah,BB),e(BB,Hso),e(ah,Uso),e(te,Jso),e(te,nh),e(nh,Tte),e(Tte,Yso),e(nh,Kso),e(nh,PB),e(PB,Zso),e(nh,elo),e(te,olo),e(te,sh),e(sh,Mte),e(Mte,rlo),e(sh,tlo),e(sh,IB),e(IB,alo),e(sh,nlo),e(te,slo),e(te,lh),e(lh,Ete),e(Ete,llo),e(lh,ilo),e(lh,qB),e(qB,dlo),e(lh,clo),e(te,flo),e(te,ih),e(ih,Cte),e(Cte,mlo),e(ih,glo),e(ih,NB),e(NB,hlo),e(ih,plo),e(te,ulo),e(te,dh),e(dh,wte),e(wte,_lo),e(dh,blo),e(dh,jB),e(jB,vlo),e(dh,Flo),e(Qe,Tlo),M(ch,Qe,null),e(Qe,Mlo),M(fh,Qe,null),e(Ao,Elo),e(Ao,mh),M(VA,mh,null),e(mh,Clo),e(mh,Ate),e(Ate,wlo),b(f,wBe,_),b(f,gi,_),e(gi,gh),e(gh,yte),M(XA,yte,null),e(gi,Alo),e(gi,Lte),e(Lte,ylo),b(f,ABe,_),b(f,yo,_),M(zA,yo,null),e(yo,Llo),e(yo,QA),e(QA,xlo),e(QA,DB),e(DB,$lo),e(QA,klo),e(yo,Slo),e(yo,WA),e(WA,Rlo),e(WA,xte),e(xte,Blo),e(WA,Plo),e(yo,Ilo),e(yo,We),M(HA,We,null),e(We,qlo),e(We,$te),e($te,Nlo),e(We,jlo),e(We,hi),e(hi,Dlo),e(hi,kte),e(kte,Glo),e(hi,Olo),e(hi,Ste),e(Ste,Vlo),e(hi,Xlo),e(We,zlo),e(We,be),e(be,hh),e(hh,Rte),e(Rte,Qlo),e(hh,Wlo),e(hh,GB),e(GB,Hlo),e(hh,Ulo),e(be,Jlo),e(be,ph),e(ph,Bte),e(Bte,Ylo),e(ph,Klo),e(ph,OB),e(OB,Zlo),e(ph,eio),e(be,oio),e(be,uh),e(uh,Pte),e(Pte,rio),e(uh,tio),e(uh,VB),e(VB,aio),e(uh,nio),e(be,sio),e(be,_h),e(_h,Ite),e(Ite,lio),e(_h,iio),e(_h,XB),e(XB,dio),e(_h,cio),e(be,fio),e(be,bh),e(bh,qte),e(qte,mio),e(bh,gio),e(bh,zB),e(zB,hio),e(bh,pio),e(be,uio),e(be,vh),e(vh,Nte),e(Nte,_io),e(vh,bio),e(vh,QB),e(QB,vio),e(vh,Fio),e(be,Tio),e(be,Fh),e(Fh,jte),e(jte,Mio),e(Fh,Eio),e(Fh,WB),e(WB,Cio),e(Fh,wio),e(be,Aio),e(be,Th),e(Th,Dte),e(Dte,yio),e(Th,Lio),e(Th,HB),e(HB,xio),e(Th,$io),e(be,kio),e(be,Mh),e(Mh,Gte),e(Gte,Sio),e(Mh,Rio),e(Mh,UB),e(UB,Bio),e(Mh,Pio),e(be,Iio),e(be,Eh),e(Eh,Ote),e(Ote,qio),e(Eh,Nio),e(Eh,JB),e(JB,jio),e(Eh,Dio),e(be,Gio),e(be,Ch),e(Ch,Vte),e(Vte,Oio),e(Ch,Vio),e(Ch,YB),e(YB,Xio),e(Ch,zio),e(be,Qio),e(be,wh),e(wh,Xte),e(Xte,Wio),e(wh,Hio),e(wh,KB),e(KB,Uio),e(wh,Jio),e(be,Yio),e(be,Ah),e(Ah,zte),e(zte,Kio),e(Ah,Zio),e(Ah,ZB),e(ZB,edo),e(Ah,odo),e(be,rdo),e(be,yh),e(yh,Qte),e(Qte,tdo),e(yh,ado),e(yh,eP),e(eP,ndo),e(yh,sdo),e(We,ldo),M(Lh,We,null),e(We,ido),M(xh,We,null),e(yo,ddo),e(yo,$h),M(UA,$h,null),e($h,cdo),e($h,Wte),e(Wte,fdo),b(f,yBe,_),b(f,pi,_),e(pi,kh),e(kh,Hte),M(JA,Hte,null),e(pi,mdo),e(pi,Ute),e(Ute,gdo),b(f,LBe,_),b(f,Lo,_),M(YA,Lo,null),e(Lo,hdo),e(Lo,ui),e(ui,pdo),e(ui,oP),e(oP,udo),e(ui,_do),e(ui,rP),e(rP,bdo),e(ui,vdo),e(Lo,Fdo),e(Lo,KA),e(KA,Tdo),e(KA,Jte),e(Jte,Mdo),e(KA,Edo),e(Lo,Cdo),e(Lo,Zr),M(ZA,Zr,null),e(Zr,wdo),e(Zr,Yte),e(Yte,Ado),e(Zr,ydo),e(Zr,_i),e(_i,Ldo),e(_i,Kte),e(Kte,xdo),e(_i,$do),e(_i,tP),e(tP,kdo),e(_i,Sdo),e(Zr,Rdo),M(Sh,Zr,null),e(Lo,Bdo),e(Lo,He),M(e0,He,null),e(He,Pdo),e(He,Zte),e(Zte,Ido),e(He,qdo),e(He,Ea),e(Ea,Ndo),e(Ea,eae),e(eae,jdo),e(Ea,Ddo),e(Ea,oae),e(oae,Gdo),e(Ea,Odo),e(Ea,rae),e(rae,Vdo),e(Ea,Xdo),e(He,zdo),e(He,x),e(x,Rh),e(Rh,tae),e(tae,Qdo),e(Rh,Wdo),e(Rh,aP),e(aP,Hdo),e(Rh,Udo),e(x,Jdo),e(x,Bh),e(Bh,aae),e(aae,Ydo),e(Bh,Kdo),e(Bh,nP),e(nP,Zdo),e(Bh,eco),e(x,oco),e(x,Ph),e(Ph,nae),e(nae,rco),e(Ph,tco),e(Ph,sP),e(sP,aco),e(Ph,nco),e(x,sco),e(x,Ih),e(Ih,sae),e(sae,lco),e(Ih,ico),e(Ih,lP),e(lP,dco),e(Ih,cco),e(x,fco),e(x,qh),e(qh,lae),e(lae,mco),e(qh,gco),e(qh,iP),e(iP,hco),e(qh,pco),e(x,uco),e(x,Nh),e(Nh,iae),e(iae,_co),e(Nh,bco),e(Nh,dP),e(dP,vco),e(Nh,Fco),e(x,Tco),e(x,jh),e(jh,dae),e(dae,Mco),e(jh,Eco),e(jh,cP),e(cP,Cco),e(jh,wco),e(x,Aco),e(x,Dh),e(Dh,cae),e(cae,yco),e(Dh,Lco),e(Dh,fP),e(fP,xco),e(Dh,$co),e(x,kco),e(x,Gh),e(Gh,fae),e(fae,Sco),e(Gh,Rco),e(Gh,mP),e(mP,Bco),e(Gh,Pco),e(x,Ico),e(x,Oh),e(Oh,mae),e(mae,qco),e(Oh,Nco),e(Oh,gP),e(gP,jco),e(Oh,Dco),e(x,Gco),e(x,Vh),e(Vh,gae),e(gae,Oco),e(Vh,Vco),e(Vh,hP),e(hP,Xco),e(Vh,zco),e(x,Qco),e(x,Xh),e(Xh,hae),e(hae,Wco),e(Xh,Hco),e(Xh,pP),e(pP,Uco),e(Xh,Jco),e(x,Yco),e(x,zh),e(zh,pae),e(pae,Kco),e(zh,Zco),e(zh,uP),e(uP,efo),e(zh,ofo),e(x,rfo),e(x,Qh),e(Qh,uae),e(uae,tfo),e(Qh,afo),e(Qh,_P),e(_P,nfo),e(Qh,sfo),e(x,lfo),e(x,Wh),e(Wh,_ae),e(_ae,ifo),e(Wh,dfo),e(Wh,bP),e(bP,cfo),e(Wh,ffo),e(x,mfo),e(x,Hh),e(Hh,bae),e(bae,gfo),e(Hh,hfo),e(Hh,vP),e(vP,pfo),e(Hh,ufo),e(x,_fo),e(x,Uh),e(Uh,vae),e(vae,bfo),e(Uh,vfo),e(Uh,FP),e(FP,Ffo),e(Uh,Tfo),e(x,Mfo),e(x,Jh),e(Jh,Fae),e(Fae,Efo),e(Jh,Cfo),e(Jh,TP),e(TP,wfo),e(Jh,Afo),e(x,yfo),e(x,Yh),e(Yh,Tae),e(Tae,Lfo),e(Yh,xfo),e(Yh,MP),e(MP,$fo),e(Yh,kfo),e(x,Sfo),e(x,Kh),e(Kh,Mae),e(Mae,Rfo),e(Kh,Bfo),e(Kh,EP),e(EP,Pfo),e(Kh,Ifo),e(x,qfo),e(x,Zh),e(Zh,Eae),e(Eae,Nfo),e(Zh,jfo),e(Zh,CP),e(CP,Dfo),e(Zh,Gfo),e(x,Ofo),e(x,ep),e(ep,Cae),e(Cae,Vfo),e(ep,Xfo),e(ep,wP),e(wP,zfo),e(ep,Qfo),e(x,Wfo),e(x,op),e(op,wae),e(wae,Hfo),e(op,Ufo),e(op,AP),e(AP,Jfo),e(op,Yfo),e(x,Kfo),e(x,rp),e(rp,Aae),e(Aae,Zfo),e(rp,emo),e(rp,yP),e(yP,omo),e(rp,rmo),e(x,tmo),e(x,tp),e(tp,yae),e(yae,amo),e(tp,nmo),e(tp,LP),e(LP,smo),e(tp,lmo),e(x,imo),e(x,ap),e(ap,Lae),e(Lae,dmo),e(ap,cmo),e(ap,xP),e(xP,fmo),e(ap,mmo),e(x,gmo),e(x,np),e(np,xae),e(xae,hmo),e(np,pmo),e(np,$P),e($P,umo),e(np,_mo),e(x,bmo),e(x,sp),e(sp,$ae),e($ae,vmo),e(sp,Fmo),e(sp,kP),e(kP,Tmo),e(sp,Mmo),e(x,Emo),e(x,lp),e(lp,kae),e(kae,Cmo),e(lp,wmo),e(lp,SP),e(SP,Amo),e(lp,ymo),e(x,Lmo),e(x,ip),e(ip,Sae),e(Sae,xmo),e(ip,$mo),e(ip,RP),e(RP,kmo),e(ip,Smo),e(x,Rmo),e(x,Ls),e(Ls,Rae),e(Rae,Bmo),e(Ls,Pmo),e(Ls,BP),e(BP,Imo),e(Ls,qmo),e(Ls,PP),e(PP,Nmo),e(Ls,jmo),e(x,Dmo),e(x,dp),e(dp,Bae),e(Bae,Gmo),e(dp,Omo),e(dp,IP),e(IP,Vmo),e(dp,Xmo),e(x,zmo),e(x,cp),e(cp,Pae),e(Pae,Qmo),e(cp,Wmo),e(cp,qP),e(qP,Hmo),e(cp,Umo),e(x,Jmo),e(x,fp),e(fp,Iae),e(Iae,Ymo),e(fp,Kmo),e(fp,NP),e(NP,Zmo),e(fp,ego),e(x,ogo),e(x,mp),e(mp,qae),e(qae,rgo),e(mp,tgo),e(mp,jP),e(jP,ago),e(mp,ngo),e(x,sgo),e(x,gp),e(gp,Nae),e(Nae,lgo),e(gp,igo),e(gp,DP),e(DP,dgo),e(gp,cgo),e(x,fgo),e(x,hp),e(hp,jae),e(jae,mgo),e(hp,ggo),e(hp,GP),e(GP,hgo),e(hp,pgo),e(x,ugo),e(x,pp),e(pp,Dae),e(Dae,_go),e(pp,bgo),e(pp,OP),e(OP,vgo),e(pp,Fgo),e(x,Tgo),e(x,up),e(up,Gae),e(Gae,Mgo),e(up,Ego),e(up,VP),e(VP,Cgo),e(up,wgo),e(x,Ago),e(x,_p),e(_p,Oae),e(Oae,ygo),e(_p,Lgo),e(_p,XP),e(XP,xgo),e(_p,$go),e(x,kgo),e(x,bp),e(bp,Vae),e(Vae,Sgo),e(bp,Rgo),e(bp,zP),e(zP,Bgo),e(bp,Pgo),e(x,Igo),e(x,vp),e(vp,Xae),e(Xae,qgo),e(vp,Ngo),e(vp,QP),e(QP,jgo),e(vp,Dgo),e(x,Ggo),e(x,Fp),e(Fp,zae),e(zae,Ogo),e(Fp,Vgo),e(Fp,WP),e(WP,Xgo),e(Fp,zgo),e(x,Qgo),e(x,Tp),e(Tp,Qae),e(Qae,Wgo),e(Tp,Hgo),e(Tp,HP),e(HP,Ugo),e(Tp,Jgo),e(x,Ygo),e(x,Mp),e(Mp,Wae),e(Wae,Kgo),e(Mp,Zgo),e(Mp,UP),e(UP,eho),e(Mp,oho),e(x,rho),e(x,Ep),e(Ep,Hae),e(Hae,tho),e(Ep,aho),e(Ep,JP),e(JP,nho),e(Ep,sho),e(x,lho),e(x,Cp),e(Cp,Uae),e(Uae,iho),e(Cp,dho),e(Cp,YP),e(YP,cho),e(Cp,fho),e(x,mho),e(x,wp),e(wp,Jae),e(Jae,gho),e(wp,hho),e(wp,KP),e(KP,pho),e(wp,uho),e(x,_ho),e(x,Ap),e(Ap,Yae),e(Yae,bho),e(Ap,vho),e(Ap,ZP),e(ZP,Fho),e(Ap,Tho),e(x,Mho),e(x,yp),e(yp,Kae),e(Kae,Eho),e(yp,Cho),e(yp,eI),e(eI,who),e(yp,Aho),e(x,yho),e(x,Lp),e(Lp,Zae),e(Zae,Lho),e(Lp,xho),e(Lp,oI),e(oI,$ho),e(Lp,kho),e(x,Sho),e(x,xp),e(xp,ene),e(ene,Rho),e(xp,Bho),e(xp,rI),e(rI,Pho),e(xp,Iho),e(x,qho),e(x,$p),e($p,one),e(one,Nho),e($p,jho),e($p,tI),e(tI,Dho),e($p,Gho),e(x,Oho),e(x,kp),e(kp,rne),e(rne,Vho),e(kp,Xho),e(kp,aI),e(aI,zho),e(kp,Qho),e(x,Who),e(x,Sp),e(Sp,tne),e(tne,Hho),e(Sp,Uho),e(Sp,nI),e(nI,Jho),e(Sp,Yho),e(x,Kho),e(x,Rp),e(Rp,ane),e(ane,Zho),e(Rp,epo),e(Rp,sI),e(sI,opo),e(Rp,rpo),e(x,tpo),e(x,Bp),e(Bp,nne),e(nne,apo),e(Bp,npo),e(Bp,lI),e(lI,spo),e(Bp,lpo),e(x,ipo),e(x,Pp),e(Pp,sne),e(sne,dpo),e(Pp,cpo),e(Pp,iI),e(iI,fpo),e(Pp,mpo),e(x,gpo),e(x,Ip),e(Ip,lne),e(lne,hpo),e(Ip,ppo),e(Ip,dI),e(dI,upo),e(Ip,_po),e(x,bpo),e(x,qp),e(qp,ine),e(ine,vpo),e(qp,Fpo),e(qp,cI),e(cI,Tpo),e(qp,Mpo),e(x,Epo),e(x,Np),e(Np,dne),e(dne,Cpo),e(Np,wpo),e(Np,fI),e(fI,Apo),e(Np,ypo),e(x,Lpo),e(x,jp),e(jp,cne),e(cne,xpo),e(jp,$po),e(jp,mI),e(mI,kpo),e(jp,Spo),e(x,Rpo),e(x,Dp),e(Dp,fne),e(fne,Bpo),e(Dp,Ppo),e(Dp,gI),e(gI,Ipo),e(Dp,qpo),e(x,Npo),e(x,Gp),e(Gp,mne),e(mne,jpo),e(Gp,Dpo),e(Gp,hI),e(hI,Gpo),e(Gp,Opo),e(x,Vpo),e(x,Op),e(Op,gne),e(gne,Xpo),e(Op,zpo),e(Op,pI),e(pI,Qpo),e(Op,Wpo),e(x,Hpo),e(x,Vp),e(Vp,hne),e(hne,Upo),e(Vp,Jpo),e(Vp,uI),e(uI,Ypo),e(Vp,Kpo),e(x,Zpo),e(x,Xp),e(Xp,pne),e(pne,euo),e(Xp,ouo),e(Xp,_I),e(_I,ruo),e(Xp,tuo),e(x,auo),e(x,zp),e(zp,une),e(une,nuo),e(zp,suo),e(zp,bI),e(bI,luo),e(zp,iuo),e(x,duo),e(x,Qp),e(Qp,_ne),e(_ne,cuo),e(Qp,fuo),e(Qp,vI),e(vI,muo),e(Qp,guo),e(x,huo),e(x,Wp),e(Wp,bne),e(bne,puo),e(Wp,uuo),e(Wp,FI),e(FI,_uo),e(Wp,buo),e(x,vuo),e(x,Hp),e(Hp,vne),e(vne,Fuo),e(Hp,Tuo),e(Hp,TI),e(TI,Muo),e(Hp,Euo),e(x,Cuo),e(x,Up),e(Up,Fne),e(Fne,wuo),e(Up,Auo),e(Up,MI),e(MI,yuo),e(Up,Luo),e(x,xuo),e(x,Jp),e(Jp,Tne),e(Tne,$uo),e(Jp,kuo),e(Jp,EI),e(EI,Suo),e(Jp,Ruo),e(x,Buo),e(x,Yp),e(Yp,Mne),e(Mne,Puo),e(Yp,Iuo),e(Yp,CI),e(CI,quo),e(Yp,Nuo),e(x,juo),e(x,Kp),e(Kp,Ene),e(Ene,Duo),e(Kp,Guo),e(Kp,wI),e(wI,Ouo),e(Kp,Vuo),e(x,Xuo),e(x,Zp),e(Zp,Cne),e(Cne,zuo),e(Zp,Quo),e(Zp,AI),e(AI,Wuo),e(Zp,Huo),e(x,Uuo),e(x,eu),e(eu,wne),e(wne,Juo),e(eu,Yuo),e(eu,yI),e(yI,Kuo),e(eu,Zuo),e(x,e_o),e(x,ou),e(ou,Ane),e(Ane,o_o),e(ou,r_o),e(ou,LI),e(LI,t_o),e(ou,a_o),e(x,n_o),e(x,ru),e(ru,yne),e(yne,s_o),e(ru,l_o),e(ru,xI),e(xI,i_o),e(ru,d_o),e(x,c_o),e(x,tu),e(tu,Lne),e(Lne,f_o),e(tu,m_o),e(tu,$I),e($I,g_o),e(tu,h_o),e(x,p_o),e(x,au),e(au,xne),e(xne,u_o),e(au,__o),e(au,kI),e(kI,b_o),e(au,v_o),e(x,F_o),e(x,nu),e(nu,$ne),e($ne,T_o),e(nu,M_o),e(nu,SI),e(SI,E_o),e(nu,C_o),e(x,w_o),e(x,su),e(su,kne),e(kne,A_o),e(su,y_o),e(su,RI),e(RI,L_o),e(su,x_o),e(x,$_o),e(x,lu),e(lu,Sne),e(Sne,k_o),e(lu,S_o),e(lu,BI),e(BI,R_o),e(lu,B_o),e(x,P_o),e(x,iu),e(iu,Rne),e(Rne,I_o),e(iu,q_o),e(iu,PI),e(PI,N_o),e(iu,j_o),e(x,D_o),e(x,du),e(du,Bne),e(Bne,G_o),e(du,O_o),e(du,II),e(II,V_o),e(du,X_o),e(x,z_o),e(x,cu),e(cu,Pne),e(Pne,Q_o),e(cu,W_o),e(cu,qI),e(qI,H_o),e(cu,U_o),e(x,J_o),e(x,fu),e(fu,Ine),e(Ine,Y_o),e(fu,K_o),e(fu,NI),e(NI,Z_o),e(fu,e2o),e(x,o2o),e(x,mu),e(mu,qne),e(qne,r2o),e(mu,t2o),e(mu,jI),e(jI,a2o),e(mu,n2o),e(x,s2o),e(x,gu),e(gu,Nne),e(Nne,l2o),e(gu,i2o),e(gu,DI),e(DI,d2o),e(gu,c2o),e(x,f2o),e(x,hu),e(hu,jne),e(jne,m2o),e(hu,g2o),e(hu,GI),e(GI,h2o),e(hu,p2o),e(x,u2o),e(x,pu),e(pu,Dne),e(Dne,_2o),e(pu,b2o),e(pu,OI),e(OI,v2o),e(pu,F2o),e(x,T2o),e(x,uu),e(uu,Gne),e(Gne,M2o),e(uu,E2o),e(uu,VI),e(VI,C2o),e(uu,w2o),e(x,A2o),e(x,_u),e(_u,One),e(One,y2o),e(_u,L2o),e(_u,XI),e(XI,x2o),e(_u,$2o),e(x,k2o),e(x,bu),e(bu,Vne),e(Vne,S2o),e(bu,R2o),e(bu,zI),e(zI,B2o),e(bu,P2o),e(He,I2o),e(He,vu),e(vu,q2o),e(vu,Xne),e(Xne,N2o),e(vu,j2o),e(vu,zne),e(zne,D2o),e(He,G2o),M(Fu,He,null),b(f,xBe,_),b(f,bi,_),e(bi,Tu),e(Tu,Qne),M(o0,Qne,null),e(bi,O2o),e(bi,Wne),e(Wne,V2o),b(f,$Be,_),b(f,xo,_),M(r0,xo,null),e(xo,X2o),e(xo,vi),e(vi,z2o),e(vi,QI),e(QI,Q2o),e(vi,W2o),e(vi,WI),e(WI,H2o),e(vi,U2o),e(xo,J2o),e(xo,t0),e(t0,Y2o),e(t0,Hne),e(Hne,K2o),e(t0,Z2o),e(xo,e6o),e(xo,et),M(a0,et,null),e(et,o6o),e(et,Une),e(Une,r6o),e(et,t6o),e(et,Fi),e(Fi,a6o),e(Fi,Jne),e(Jne,n6o),e(Fi,s6o),e(Fi,HI),e(HI,l6o),e(Fi,i6o),e(et,d6o),M(Mu,et,null),e(xo,c6o),e(xo,Ue),M(n0,Ue,null),e(Ue,f6o),e(Ue,Yne),e(Yne,m6o),e(Ue,g6o),e(Ue,Ca),e(Ca,h6o),e(Ca,Kne),e(Kne,p6o),e(Ca,u6o),e(Ca,Zne),e(Zne,_6o),e(Ca,b6o),e(Ca,ese),e(ese,v6o),e(Ca,F6o),e(Ue,T6o),e(Ue,G),e(G,Eu),e(Eu,ose),e(ose,M6o),e(Eu,E6o),e(Eu,UI),e(UI,C6o),e(Eu,w6o),e(G,A6o),e(G,Cu),e(Cu,rse),e(rse,y6o),e(Cu,L6o),e(Cu,JI),e(JI,x6o),e(Cu,$6o),e(G,k6o),e(G,wu),e(wu,tse),e(tse,S6o),e(wu,R6o),e(wu,YI),e(YI,B6o),e(wu,P6o),e(G,I6o),e(G,Au),e(Au,ase),e(ase,q6o),e(Au,N6o),e(Au,KI),e(KI,j6o),e(Au,D6o),e(G,G6o),e(G,yu),e(yu,nse),e(nse,O6o),e(yu,V6o),e(yu,ZI),e(ZI,X6o),e(yu,z6o),e(G,Q6o),e(G,Lu),e(Lu,sse),e(sse,W6o),e(Lu,H6o),e(Lu,eq),e(eq,U6o),e(Lu,J6o),e(G,Y6o),e(G,xu),e(xu,lse),e(lse,K6o),e(xu,Z6o),e(xu,oq),e(oq,e1o),e(xu,o1o),e(G,r1o),e(G,$u),e($u,ise),e(ise,t1o),e($u,a1o),e($u,rq),e(rq,n1o),e($u,s1o),e(G,l1o),e(G,ku),e(ku,dse),e(dse,i1o),e(ku,d1o),e(ku,tq),e(tq,c1o),e(ku,f1o),e(G,m1o),e(G,Su),e(Su,cse),e(cse,g1o),e(Su,h1o),e(Su,aq),e(aq,p1o),e(Su,u1o),e(G,_1o),e(G,Ru),e(Ru,fse),e(fse,b1o),e(Ru,v1o),e(Ru,nq),e(nq,F1o),e(Ru,T1o),e(G,M1o),e(G,Bu),e(Bu,mse),e(mse,E1o),e(Bu,C1o),e(Bu,sq),e(sq,w1o),e(Bu,A1o),e(G,y1o),e(G,Pu),e(Pu,gse),e(gse,L1o),e(Pu,x1o),e(Pu,lq),e(lq,$1o),e(Pu,k1o),e(G,S1o),e(G,Iu),e(Iu,hse),e(hse,R1o),e(Iu,B1o),e(Iu,iq),e(iq,P1o),e(Iu,I1o),e(G,q1o),e(G,qu),e(qu,pse),e(pse,N1o),e(qu,j1o),e(qu,dq),e(dq,D1o),e(qu,G1o),e(G,O1o),e(G,Nu),e(Nu,use),e(use,V1o),e(Nu,X1o),e(Nu,cq),e(cq,z1o),e(Nu,Q1o),e(G,W1o),e(G,ju),e(ju,_se),e(_se,H1o),e(ju,U1o),e(ju,fq),e(fq,J1o),e(ju,Y1o),e(G,K1o),e(G,Du),e(Du,bse),e(bse,Z1o),e(Du,ebo),e(Du,mq),e(mq,obo),e(Du,rbo),e(G,tbo),e(G,Gu),e(Gu,vse),e(vse,abo),e(Gu,nbo),e(Gu,gq),e(gq,sbo),e(Gu,lbo),e(G,ibo),e(G,Ou),e(Ou,Fse),e(Fse,dbo),e(Ou,cbo),e(Ou,hq),e(hq,fbo),e(Ou,mbo),e(G,gbo),e(G,Vu),e(Vu,Tse),e(Tse,hbo),e(Vu,pbo),e(Vu,pq),e(pq,ubo),e(Vu,_bo),e(G,bbo),e(G,Xu),e(Xu,Mse),e(Mse,vbo),e(Xu,Fbo),e(Xu,uq),e(uq,Tbo),e(Xu,Mbo),e(G,Ebo),e(G,zu),e(zu,Ese),e(Ese,Cbo),e(zu,wbo),e(zu,_q),e(_q,Abo),e(zu,ybo),e(G,Lbo),e(G,Qu),e(Qu,Cse),e(Cse,xbo),e(Qu,$bo),e(Qu,bq),e(bq,kbo),e(Qu,Sbo),e(G,Rbo),e(G,Wu),e(Wu,wse),e(wse,Bbo),e(Wu,Pbo),e(Wu,vq),e(vq,Ibo),e(Wu,qbo),e(G,Nbo),e(G,Hu),e(Hu,Ase),e(Ase,jbo),e(Hu,Dbo),e(Hu,Fq),e(Fq,Gbo),e(Hu,Obo),e(G,Vbo),e(G,Uu),e(Uu,yse),e(yse,Xbo),e(Uu,zbo),e(Uu,Tq),e(Tq,Qbo),e(Uu,Wbo),e(G,Hbo),e(G,Ju),e(Ju,Lse),e(Lse,Ubo),e(Ju,Jbo),e(Ju,Mq),e(Mq,Ybo),e(Ju,Kbo),e(G,Zbo),e(G,Yu),e(Yu,xse),e(xse,evo),e(Yu,ovo),e(Yu,Eq),e(Eq,rvo),e(Yu,tvo),e(G,avo),e(G,Ku),e(Ku,$se),e($se,nvo),e(Ku,svo),e(Ku,Cq),e(Cq,lvo),e(Ku,ivo),e(G,dvo),e(G,Zu),e(Zu,kse),e(kse,cvo),e(Zu,fvo),e(Zu,wq),e(wq,mvo),e(Zu,gvo),e(G,hvo),e(G,e_),e(e_,Sse),e(Sse,pvo),e(e_,uvo),e(e_,Aq),e(Aq,_vo),e(e_,bvo),e(G,vvo),e(G,o_),e(o_,Rse),e(Rse,Fvo),e(o_,Tvo),e(o_,yq),e(yq,Mvo),e(o_,Evo),e(G,Cvo),e(G,r_),e(r_,Bse),e(Bse,wvo),e(r_,Avo),e(r_,Lq),e(Lq,yvo),e(r_,Lvo),e(G,xvo),e(G,t_),e(t_,Pse),e(Pse,$vo),e(t_,kvo),e(t_,xq),e(xq,Svo),e(t_,Rvo),e(G,Bvo),e(G,a_),e(a_,Ise),e(Ise,Pvo),e(a_,Ivo),e(a_,$q),e($q,qvo),e(a_,Nvo),e(G,jvo),e(G,n_),e(n_,qse),e(qse,Dvo),e(n_,Gvo),e(n_,kq),e(kq,Ovo),e(n_,Vvo),e(G,Xvo),e(G,s_),e(s_,Nse),e(Nse,zvo),e(s_,Qvo),e(s_,Sq),e(Sq,Wvo),e(s_,Hvo),e(G,Uvo),e(G,l_),e(l_,jse),e(jse,Jvo),e(l_,Yvo),e(l_,Rq),e(Rq,Kvo),e(l_,Zvo),e(Ue,eFo),e(Ue,i_),e(i_,oFo),e(i_,Dse),e(Dse,rFo),e(i_,tFo),e(i_,Gse),e(Gse,aFo),e(Ue,nFo),M(d_,Ue,null),b(f,kBe,_),b(f,Ti,_),e(Ti,c_),e(c_,Ose),M(s0,Ose,null),e(Ti,sFo),e(Ti,Vse),e(Vse,lFo),b(f,SBe,_),b(f,$o,_),M(l0,$o,null),e($o,iFo),e($o,Mi),e(Mi,dFo),e(Mi,Bq),e(Bq,cFo),e(Mi,fFo),e(Mi,Pq),e(Pq,mFo),e(Mi,gFo),e($o,hFo),e($o,i0),e(i0,pFo),e(i0,Xse),e(Xse,uFo),e(i0,_Fo),e($o,bFo),e($o,ot),M(d0,ot,null),e(ot,vFo),e(ot,zse),e(zse,FFo),e(ot,TFo),e(ot,Ei),e(Ei,MFo),e(Ei,Qse),e(Qse,EFo),e(Ei,CFo),e(Ei,Iq),e(Iq,wFo),e(Ei,AFo),e(ot,yFo),M(f_,ot,null),e($o,LFo),e($o,Je),M(c0,Je,null),e(Je,xFo),e(Je,Wse),e(Wse,$Fo),e(Je,kFo),e(Je,wa),e(wa,SFo),e(wa,Hse),e(Hse,RFo),e(wa,BFo),e(wa,Use),e(Use,PFo),e(wa,IFo),e(wa,Jse),e(Jse,qFo),e(wa,NFo),e(Je,jFo),e(Je,z),e(z,m_),e(m_,Yse),e(Yse,DFo),e(m_,GFo),e(m_,qq),e(qq,OFo),e(m_,VFo),e(z,XFo),e(z,g_),e(g_,Kse),e(Kse,zFo),e(g_,QFo),e(g_,Nq),e(Nq,WFo),e(g_,HFo),e(z,UFo),e(z,h_),e(h_,Zse),e(Zse,JFo),e(h_,YFo),e(h_,jq),e(jq,KFo),e(h_,ZFo),e(z,eTo),e(z,p_),e(p_,ele),e(ele,oTo),e(p_,rTo),e(p_,Dq),e(Dq,tTo),e(p_,aTo),e(z,nTo),e(z,u_),e(u_,ole),e(ole,sTo),e(u_,lTo),e(u_,Gq),e(Gq,iTo),e(u_,dTo),e(z,cTo),e(z,__),e(__,rle),e(rle,fTo),e(__,mTo),e(__,Oq),e(Oq,gTo),e(__,hTo),e(z,pTo),e(z,b_),e(b_,tle),e(tle,uTo),e(b_,_To),e(b_,Vq),e(Vq,bTo),e(b_,vTo),e(z,FTo),e(z,v_),e(v_,ale),e(ale,TTo),e(v_,MTo),e(v_,Xq),e(Xq,ETo),e(v_,CTo),e(z,wTo),e(z,F_),e(F_,nle),e(nle,ATo),e(F_,yTo),e(F_,zq),e(zq,LTo),e(F_,xTo),e(z,$To),e(z,T_),e(T_,sle),e(sle,kTo),e(T_,STo),e(T_,Qq),e(Qq,RTo),e(T_,BTo),e(z,PTo),e(z,M_),e(M_,lle),e(lle,ITo),e(M_,qTo),e(M_,Wq),e(Wq,NTo),e(M_,jTo),e(z,DTo),e(z,E_),e(E_,ile),e(ile,GTo),e(E_,OTo),e(E_,Hq),e(Hq,VTo),e(E_,XTo),e(z,zTo),e(z,C_),e(C_,dle),e(dle,QTo),e(C_,WTo),e(C_,Uq),e(Uq,HTo),e(C_,UTo),e(z,JTo),e(z,w_),e(w_,cle),e(cle,YTo),e(w_,KTo),e(w_,Jq),e(Jq,ZTo),e(w_,e8o),e(z,o8o),e(z,A_),e(A_,fle),e(fle,r8o),e(A_,t8o),e(A_,Yq),e(Yq,a8o),e(A_,n8o),e(z,s8o),e(z,y_),e(y_,mle),e(mle,l8o),e(y_,i8o),e(y_,Kq),e(Kq,d8o),e(y_,c8o),e(z,f8o),e(z,L_),e(L_,gle),e(gle,m8o),e(L_,g8o),e(L_,Zq),e(Zq,h8o),e(L_,p8o),e(z,u8o),e(z,x_),e(x_,hle),e(hle,_8o),e(x_,b8o),e(x_,eN),e(eN,v8o),e(x_,F8o),e(z,T8o),e(z,$_),e($_,ple),e(ple,M8o),e($_,E8o),e($_,oN),e(oN,C8o),e($_,w8o),e(z,A8o),e(z,k_),e(k_,ule),e(ule,y8o),e(k_,L8o),e(k_,rN),e(rN,x8o),e(k_,$8o),e(z,k8o),e(z,S_),e(S_,_le),e(_le,S8o),e(S_,R8o),e(S_,tN),e(tN,B8o),e(S_,P8o),e(z,I8o),e(z,R_),e(R_,ble),e(ble,q8o),e(R_,N8o),e(R_,aN),e(aN,j8o),e(R_,D8o),e(z,G8o),e(z,B_),e(B_,vle),e(vle,O8o),e(B_,V8o),e(B_,nN),e(nN,X8o),e(B_,z8o),e(z,Q8o),e(z,P_),e(P_,Fle),e(Fle,W8o),e(P_,H8o),e(P_,sN),e(sN,U8o),e(P_,J8o),e(z,Y8o),e(z,I_),e(I_,Tle),e(Tle,K8o),e(I_,Z8o),e(I_,lN),e(lN,eMo),e(I_,oMo),e(z,rMo),e(z,q_),e(q_,Mle),e(Mle,tMo),e(q_,aMo),e(q_,iN),e(iN,nMo),e(q_,sMo),e(z,lMo),e(z,N_),e(N_,Ele),e(Ele,iMo),e(N_,dMo),e(N_,dN),e(dN,cMo),e(N_,fMo),e(z,mMo),e(z,j_),e(j_,Cle),e(Cle,gMo),e(j_,hMo),e(j_,cN),e(cN,pMo),e(j_,uMo),e(z,_Mo),e(z,D_),e(D_,wle),e(wle,bMo),e(D_,vMo),e(D_,fN),e(fN,FMo),e(D_,TMo),e(z,MMo),e(z,G_),e(G_,Ale),e(Ale,EMo),e(G_,CMo),e(G_,mN),e(mN,wMo),e(G_,AMo),e(z,yMo),e(z,O_),e(O_,yle),e(yle,LMo),e(O_,xMo),e(O_,gN),e(gN,$Mo),e(O_,kMo),e(z,SMo),e(z,V_),e(V_,Lle),e(Lle,RMo),e(V_,BMo),e(V_,hN),e(hN,PMo),e(V_,IMo),e(z,qMo),e(z,X_),e(X_,xle),e(xle,NMo),e(X_,jMo),e(X_,pN),e(pN,DMo),e(X_,GMo),e(z,OMo),e(z,z_),e(z_,$le),e($le,VMo),e(z_,XMo),e(z_,uN),e(uN,zMo),e(z_,QMo),e(z,WMo),e(z,Q_),e(Q_,kle),e(kle,HMo),e(Q_,UMo),e(Q_,_N),e(_N,JMo),e(Q_,YMo),e(Je,KMo),e(Je,W_),e(W_,ZMo),e(W_,Sle),e(Sle,e4o),e(W_,o4o),e(W_,Rle),e(Rle,r4o),e(Je,t4o),M(H_,Je,null),b(f,RBe,_),b(f,Ci,_),e(Ci,U_),e(U_,Ble),M(f0,Ble,null),e(Ci,a4o),e(Ci,Ple),e(Ple,n4o),b(f,BBe,_),b(f,ko,_),M(m0,ko,null),e(ko,s4o),e(ko,wi),e(wi,l4o),e(wi,bN),e(bN,i4o),e(wi,d4o),e(wi,vN),e(vN,c4o),e(wi,f4o),e(ko,m4o),e(ko,g0),e(g0,g4o),e(g0,Ile),e(Ile,h4o),e(g0,p4o),e(ko,u4o),e(ko,rt),M(h0,rt,null),e(rt,_4o),e(rt,qle),e(qle,b4o),e(rt,v4o),e(rt,Ai),e(Ai,F4o),e(Ai,Nle),e(Nle,T4o),e(Ai,M4o),e(Ai,FN),e(FN,E4o),e(Ai,C4o),e(rt,w4o),M(J_,rt,null),e(ko,A4o),e(ko,Ye),M(p0,Ye,null),e(Ye,y4o),e(Ye,jle),e(jle,L4o),e(Ye,x4o),e(Ye,Aa),e(Aa,$4o),e(Aa,Dle),e(Dle,k4o),e(Aa,S4o),e(Aa,Gle),e(Gle,R4o),e(Aa,B4o),e(Aa,Ole),e(Ole,P4o),e(Aa,I4o),e(Ye,q4o),e(Ye,Q),e(Q,Y_),e(Y_,Vle),e(Vle,N4o),e(Y_,j4o),e(Y_,TN),e(TN,D4o),e(Y_,G4o),e(Q,O4o),e(Q,K_),e(K_,Xle),e(Xle,V4o),e(K_,X4o),e(K_,MN),e(MN,z4o),e(K_,Q4o),e(Q,W4o),e(Q,Z_),e(Z_,zle),e(zle,H4o),e(Z_,U4o),e(Z_,EN),e(EN,J4o),e(Z_,Y4o),e(Q,K4o),e(Q,e2),e(e2,Qle),e(Qle,Z4o),e(e2,eEo),e(e2,CN),e(CN,oEo),e(e2,rEo),e(Q,tEo),e(Q,o2),e(o2,Wle),e(Wle,aEo),e(o2,nEo),e(o2,wN),e(wN,sEo),e(o2,lEo),e(Q,iEo),e(Q,r2),e(r2,Hle),e(Hle,dEo),e(r2,cEo),e(r2,AN),e(AN,fEo),e(r2,mEo),e(Q,gEo),e(Q,t2),e(t2,Ule),e(Ule,hEo),e(t2,pEo),e(t2,yN),e(yN,uEo),e(t2,_Eo),e(Q,bEo),e(Q,a2),e(a2,Jle),e(Jle,vEo),e(a2,FEo),e(a2,LN),e(LN,TEo),e(a2,MEo),e(Q,EEo),e(Q,n2),e(n2,Yle),e(Yle,CEo),e(n2,wEo),e(n2,xN),e(xN,AEo),e(n2,yEo),e(Q,LEo),e(Q,s2),e(s2,Kle),e(Kle,xEo),e(s2,$Eo),e(s2,$N),e($N,kEo),e(s2,SEo),e(Q,REo),e(Q,l2),e(l2,Zle),e(Zle,BEo),e(l2,PEo),e(l2,kN),e(kN,IEo),e(l2,qEo),e(Q,NEo),e(Q,i2),e(i2,eie),e(eie,jEo),e(i2,DEo),e(i2,SN),e(SN,GEo),e(i2,OEo),e(Q,VEo),e(Q,d2),e(d2,oie),e(oie,XEo),e(d2,zEo),e(d2,RN),e(RN,QEo),e(d2,WEo),e(Q,HEo),e(Q,c2),e(c2,rie),e(rie,UEo),e(c2,JEo),e(c2,BN),e(BN,YEo),e(c2,KEo),e(Q,ZEo),e(Q,f2),e(f2,tie),e(tie,e5o),e(f2,o5o),e(f2,PN),e(PN,r5o),e(f2,t5o),e(Q,a5o),e(Q,m2),e(m2,aie),e(aie,n5o),e(m2,s5o),e(m2,IN),e(IN,l5o),e(m2,i5o),e(Q,d5o),e(Q,g2),e(g2,nie),e(nie,c5o),e(g2,f5o),e(g2,qN),e(qN,m5o),e(g2,g5o),e(Q,h5o),e(Q,h2),e(h2,sie),e(sie,p5o),e(h2,u5o),e(h2,NN),e(NN,_5o),e(h2,b5o),e(Q,v5o),e(Q,p2),e(p2,lie),e(lie,F5o),e(p2,T5o),e(p2,jN),e(jN,M5o),e(p2,E5o),e(Q,C5o),e(Q,u2),e(u2,iie),e(iie,w5o),e(u2,A5o),e(u2,DN),e(DN,y5o),e(u2,L5o),e(Q,x5o),e(Q,_2),e(_2,die),e(die,$5o),e(_2,k5o),e(_2,GN),e(GN,S5o),e(_2,R5o),e(Q,B5o),e(Q,b2),e(b2,cie),e(cie,P5o),e(b2,I5o),e(b2,ON),e(ON,q5o),e(b2,N5o),e(Q,j5o),e(Q,v2),e(v2,fie),e(fie,D5o),e(v2,G5o),e(v2,VN),e(VN,O5o),e(v2,V5o),e(Q,X5o),e(Q,F2),e(F2,mie),e(mie,z5o),e(F2,Q5o),e(F2,XN),e(XN,W5o),e(F2,H5o),e(Q,U5o),e(Q,T2),e(T2,gie),e(gie,J5o),e(T2,Y5o),e(T2,zN),e(zN,K5o),e(T2,Z5o),e(Q,eCo),e(Q,M2),e(M2,hie),e(hie,oCo),e(M2,rCo),e(M2,QN),e(QN,tCo),e(M2,aCo),e(Q,nCo),e(Q,E2),e(E2,pie),e(pie,sCo),e(E2,lCo),e(E2,WN),e(WN,iCo),e(E2,dCo),e(Q,cCo),e(Q,C2),e(C2,uie),e(uie,fCo),e(C2,mCo),e(C2,HN),e(HN,gCo),e(C2,hCo),e(Q,pCo),e(Q,w2),e(w2,_ie),e(_ie,uCo),e(w2,_Co),e(w2,UN),e(UN,bCo),e(w2,vCo),e(Q,FCo),e(Q,A2),e(A2,bie),e(bie,TCo),e(A2,MCo),e(A2,JN),e(JN,ECo),e(A2,CCo),e(Q,wCo),e(Q,y2),e(y2,vie),e(vie,ACo),e(y2,yCo),e(y2,Fie),e(Fie,LCo),e(y2,xCo),e(Q,$Co),e(Q,L2),e(L2,Tie),e(Tie,kCo),e(L2,SCo),e(L2,YN),e(YN,RCo),e(L2,BCo),e(Q,PCo),e(Q,x2),e(x2,Mie),e(Mie,ICo),e(x2,qCo),e(x2,KN),e(KN,NCo),e(x2,jCo),e(Q,DCo),e(Q,$2),e($2,Eie),e(Eie,GCo),e($2,OCo),e($2,ZN),e(ZN,VCo),e($2,XCo),e(Q,zCo),e(Q,k2),e(k2,Cie),e(Cie,QCo),e(k2,WCo),e(k2,ej),e(ej,HCo),e(k2,UCo),e(Ye,JCo),e(Ye,S2),e(S2,YCo),e(S2,wie),e(wie,KCo),e(S2,ZCo),e(S2,Aie),e(Aie,e3o),e(Ye,o3o),M(R2,Ye,null),b(f,PBe,_),b(f,yi,_),e(yi,B2),e(B2,yie),M(u0,yie,null),e(yi,r3o),e(yi,Lie),e(Lie,t3o),b(f,IBe,_),b(f,So,_),M(_0,So,null),e(So,a3o),e(So,Li),e(Li,n3o),e(Li,oj),e(oj,s3o),e(Li,l3o),e(Li,rj),e(rj,i3o),e(Li,d3o),e(So,c3o),e(So,b0),e(b0,f3o),e(b0,xie),e(xie,m3o),e(b0,g3o),e(So,h3o),e(So,tt),M(v0,tt,null),e(tt,p3o),e(tt,$ie),e($ie,u3o),e(tt,_3o),e(tt,xi),e(xi,b3o),e(xi,kie),e(kie,v3o),e(xi,F3o),e(xi,tj),e(tj,T3o),e(xi,M3o),e(tt,E3o),M(P2,tt,null),e(So,C3o),e(So,Ke),M(F0,Ke,null),e(Ke,w3o),e(Ke,Sie),e(Sie,A3o),e(Ke,y3o),e(Ke,ya),e(ya,L3o),e(ya,Rie),e(Rie,x3o),e(ya,$3o),e(ya,Bie),e(Bie,k3o),e(ya,S3o),e(ya,Pie),e(Pie,R3o),e(ya,B3o),e(Ke,P3o),e(Ke,he),e(he,I2),e(I2,Iie),e(Iie,I3o),e(I2,q3o),e(I2,aj),e(aj,N3o),e(I2,j3o),e(he,D3o),e(he,q2),e(q2,qie),e(qie,G3o),e(q2,O3o),e(q2,nj),e(nj,V3o),e(q2,X3o),e(he,z3o),e(he,N2),e(N2,Nie),e(Nie,Q3o),e(N2,W3o),e(N2,sj),e(sj,H3o),e(N2,U3o),e(he,J3o),e(he,j2),e(j2,jie),e(jie,Y3o),e(j2,K3o),e(j2,lj),e(lj,Z3o),e(j2,ewo),e(he,owo),e(he,D2),e(D2,Die),e(Die,rwo),e(D2,two),e(D2,ij),e(ij,awo),e(D2,nwo),e(he,swo),e(he,G2),e(G2,Gie),e(Gie,lwo),e(G2,iwo),e(G2,dj),e(dj,dwo),e(G2,cwo),e(he,fwo),e(he,O2),e(O2,Oie),e(Oie,mwo),e(O2,gwo),e(O2,cj),e(cj,hwo),e(O2,pwo),e(he,uwo),e(he,V2),e(V2,Vie),e(Vie,_wo),e(V2,bwo),e(V2,fj),e(fj,vwo),e(V2,Fwo),e(he,Two),e(he,X2),e(X2,Xie),e(Xie,Mwo),e(X2,Ewo),e(X2,mj),e(mj,Cwo),e(X2,wwo),e(he,Awo),e(he,z2),e(z2,zie),e(zie,ywo),e(z2,Lwo),e(z2,gj),e(gj,xwo),e(z2,$wo),e(he,kwo),e(he,Q2),e(Q2,Qie),e(Qie,Swo),e(Q2,Rwo),e(Q2,hj),e(hj,Bwo),e(Q2,Pwo),e(he,Iwo),e(he,W2),e(W2,Wie),e(Wie,qwo),e(W2,Nwo),e(W2,pj),e(pj,jwo),e(W2,Dwo),e(he,Gwo),e(he,H2),e(H2,Hie),e(Hie,Owo),e(H2,Vwo),e(H2,uj),e(uj,Xwo),e(H2,zwo),e(he,Qwo),e(he,U2),e(U2,Uie),e(Uie,Wwo),e(U2,Hwo),e(U2,_j),e(_j,Uwo),e(U2,Jwo),e(he,Ywo),e(he,J2),e(J2,Jie),e(Jie,Kwo),e(J2,Zwo),e(J2,bj),e(bj,eAo),e(J2,oAo),e(he,rAo),e(he,Y2),e(Y2,Yie),e(Yie,tAo),e(Y2,aAo),e(Y2,vj),e(vj,nAo),e(Y2,sAo),e(he,lAo),e(he,K2),e(K2,Kie),e(Kie,iAo),e(K2,dAo),e(K2,Fj),e(Fj,cAo),e(K2,fAo),e(Ke,mAo),e(Ke,Z2),e(Z2,gAo),e(Z2,Zie),e(Zie,hAo),e(Z2,pAo),e(Z2,ede),e(ede,uAo),e(Ke,_Ao),M(e6,Ke,null),b(f,qBe,_),b(f,$i,_),e($i,o6),e(o6,ode),M(T0,ode,null),e($i,bAo),e($i,rde),e(rde,vAo),b(f,NBe,_),b(f,Ro,_),M(M0,Ro,null),e(Ro,FAo),e(Ro,ki),e(ki,TAo),e(ki,Tj),e(Tj,MAo),e(ki,EAo),e(ki,Mj),e(Mj,CAo),e(ki,wAo),e(Ro,AAo),e(Ro,E0),e(E0,yAo),e(E0,tde),e(tde,LAo),e(E0,xAo),e(Ro,$Ao),e(Ro,at),M(C0,at,null),e(at,kAo),e(at,ade),e(ade,SAo),e(at,RAo),e(at,Si),e(Si,BAo),e(Si,nde),e(nde,PAo),e(Si,IAo),e(Si,Ej),e(Ej,qAo),e(Si,NAo),e(at,jAo),M(r6,at,null),e(Ro,DAo),e(Ro,Ze),M(w0,Ze,null),e(Ze,GAo),e(Ze,sde),e(sde,OAo),e(Ze,VAo),e(Ze,La),e(La,XAo),e(La,lde),e(lde,zAo),e(La,QAo),e(La,ide),e(ide,WAo),e(La,HAo),e(La,dde),e(dde,UAo),e(La,JAo),e(Ze,YAo),e(Ze,q),e(q,t6),e(t6,cde),e(cde,KAo),e(t6,ZAo),e(t6,Cj),e(Cj,e0o),e(t6,o0o),e(q,r0o),e(q,a6),e(a6,fde),e(fde,t0o),e(a6,a0o),e(a6,wj),e(wj,n0o),e(a6,s0o),e(q,l0o),e(q,n6),e(n6,mde),e(mde,i0o),e(n6,d0o),e(n6,Aj),e(Aj,c0o),e(n6,f0o),e(q,m0o),e(q,s6),e(s6,gde),e(gde,g0o),e(s6,h0o),e(s6,yj),e(yj,p0o),e(s6,u0o),e(q,_0o),e(q,l6),e(l6,hde),e(hde,b0o),e(l6,v0o),e(l6,Lj),e(Lj,F0o),e(l6,T0o),e(q,M0o),e(q,i6),e(i6,pde),e(pde,E0o),e(i6,C0o),e(i6,xj),e(xj,w0o),e(i6,A0o),e(q,y0o),e(q,d6),e(d6,ude),e(ude,L0o),e(d6,x0o),e(d6,$j),e($j,$0o),e(d6,k0o),e(q,S0o),e(q,c6),e(c6,_de),e(_de,R0o),e(c6,B0o),e(c6,kj),e(kj,P0o),e(c6,I0o),e(q,q0o),e(q,f6),e(f6,bde),e(bde,N0o),e(f6,j0o),e(f6,Sj),e(Sj,D0o),e(f6,G0o),e(q,O0o),e(q,m6),e(m6,vde),e(vde,V0o),e(m6,X0o),e(m6,Rj),e(Rj,z0o),e(m6,Q0o),e(q,W0o),e(q,g6),e(g6,Fde),e(Fde,H0o),e(g6,U0o),e(g6,Bj),e(Bj,J0o),e(g6,Y0o),e(q,K0o),e(q,h6),e(h6,Tde),e(Tde,Z0o),e(h6,eyo),e(h6,Pj),e(Pj,oyo),e(h6,ryo),e(q,tyo),e(q,p6),e(p6,Mde),e(Mde,ayo),e(p6,nyo),e(p6,Ij),e(Ij,syo),e(p6,lyo),e(q,iyo),e(q,u6),e(u6,Ede),e(Ede,dyo),e(u6,cyo),e(u6,qj),e(qj,fyo),e(u6,myo),e(q,gyo),e(q,_6),e(_6,Cde),e(Cde,hyo),e(_6,pyo),e(_6,Nj),e(Nj,uyo),e(_6,_yo),e(q,byo),e(q,b6),e(b6,wde),e(wde,vyo),e(b6,Fyo),e(b6,jj),e(jj,Tyo),e(b6,Myo),e(q,Eyo),e(q,v6),e(v6,Ade),e(Ade,Cyo),e(v6,wyo),e(v6,Dj),e(Dj,Ayo),e(v6,yyo),e(q,Lyo),e(q,F6),e(F6,yde),e(yde,xyo),e(F6,$yo),e(F6,Gj),e(Gj,kyo),e(F6,Syo),e(q,Ryo),e(q,T6),e(T6,Lde),e(Lde,Byo),e(T6,Pyo),e(T6,Oj),e(Oj,Iyo),e(T6,qyo),e(q,Nyo),e(q,M6),e(M6,xde),e(xde,jyo),e(M6,Dyo),e(M6,Vj),e(Vj,Gyo),e(M6,Oyo),e(q,Vyo),e(q,E6),e(E6,$de),e($de,Xyo),e(E6,zyo),e(E6,Xj),e(Xj,Qyo),e(E6,Wyo),e(q,Hyo),e(q,C6),e(C6,kde),e(kde,Uyo),e(C6,Jyo),e(C6,zj),e(zj,Yyo),e(C6,Kyo),e(q,Zyo),e(q,w6),e(w6,Sde),e(Sde,eLo),e(w6,oLo),e(w6,Qj),e(Qj,rLo),e(w6,tLo),e(q,aLo),e(q,A6),e(A6,Rde),e(Rde,nLo),e(A6,sLo),e(A6,Wj),e(Wj,lLo),e(A6,iLo),e(q,dLo),e(q,y6),e(y6,Bde),e(Bde,cLo),e(y6,fLo),e(y6,Hj),e(Hj,mLo),e(y6,gLo),e(q,hLo),e(q,L6),e(L6,Pde),e(Pde,pLo),e(L6,uLo),e(L6,Uj),e(Uj,_Lo),e(L6,bLo),e(q,vLo),e(q,x6),e(x6,Ide),e(Ide,FLo),e(x6,TLo),e(x6,Jj),e(Jj,MLo),e(x6,ELo),e(q,CLo),e(q,$6),e($6,qde),e(qde,wLo),e($6,ALo),e($6,Yj),e(Yj,yLo),e($6,LLo),e(q,xLo),e(q,k6),e(k6,Nde),e(Nde,$Lo),e(k6,kLo),e(k6,Kj),e(Kj,SLo),e(k6,RLo),e(q,BLo),e(q,S6),e(S6,jde),e(jde,PLo),e(S6,ILo),e(S6,Zj),e(Zj,qLo),e(S6,NLo),e(q,jLo),e(q,R6),e(R6,Dde),e(Dde,DLo),e(R6,GLo),e(R6,eD),e(eD,OLo),e(R6,VLo),e(q,XLo),e(q,B6),e(B6,Gde),e(Gde,zLo),e(B6,QLo),e(B6,oD),e(oD,WLo),e(B6,HLo),e(q,ULo),e(q,P6),e(P6,Ode),e(Ode,JLo),e(P6,YLo),e(P6,rD),e(rD,KLo),e(P6,ZLo),e(q,e7o),e(q,I6),e(I6,Vde),e(Vde,o7o),e(I6,r7o),e(I6,tD),e(tD,t7o),e(I6,a7o),e(q,n7o),e(q,q6),e(q6,Xde),e(Xde,s7o),e(q6,l7o),e(q6,aD),e(aD,i7o),e(q6,d7o),e(q,c7o),e(q,N6),e(N6,zde),e(zde,f7o),e(N6,m7o),e(N6,nD),e(nD,g7o),e(N6,h7o),e(q,p7o),e(q,j6),e(j6,Qde),e(Qde,u7o),e(j6,_7o),e(j6,sD),e(sD,b7o),e(j6,v7o),e(q,F7o),e(q,D6),e(D6,Wde),e(Wde,T7o),e(D6,M7o),e(D6,lD),e(lD,E7o),e(D6,C7o),e(q,w7o),e(q,G6),e(G6,Hde),e(Hde,A7o),e(G6,y7o),e(G6,iD),e(iD,L7o),e(G6,x7o),e(q,$7o),e(q,O6),e(O6,Ude),e(Ude,k7o),e(O6,S7o),e(O6,dD),e(dD,R7o),e(O6,B7o),e(q,P7o),e(q,V6),e(V6,Jde),e(Jde,I7o),e(V6,q7o),e(V6,cD),e(cD,N7o),e(V6,j7o),e(q,D7o),e(q,X6),e(X6,Yde),e(Yde,G7o),e(X6,O7o),e(X6,fD),e(fD,V7o),e(X6,X7o),e(q,z7o),e(q,z6),e(z6,Kde),e(Kde,Q7o),e(z6,W7o),e(z6,mD),e(mD,H7o),e(z6,U7o),e(q,J7o),e(q,Q6),e(Q6,Zde),e(Zde,Y7o),e(Q6,K7o),e(Q6,gD),e(gD,Z7o),e(Q6,exo),e(q,oxo),e(q,W6),e(W6,ece),e(ece,rxo),e(W6,txo),e(W6,hD),e(hD,axo),e(W6,nxo),e(q,sxo),e(q,H6),e(H6,oce),e(oce,lxo),e(H6,ixo),e(H6,pD),e(pD,dxo),e(H6,cxo),e(q,fxo),e(q,U6),e(U6,rce),e(rce,mxo),e(U6,gxo),e(U6,uD),e(uD,hxo),e(U6,pxo),e(Ze,uxo),e(Ze,J6),e(J6,_xo),e(J6,tce),e(tce,bxo),e(J6,vxo),e(J6,ace),e(ace,Fxo),e(Ze,Txo),M(Y6,Ze,null),b(f,jBe,_),b(f,Ri,_),e(Ri,K6),e(K6,nce),M(A0,nce,null),e(Ri,Mxo),e(Ri,sce),e(sce,Exo),b(f,DBe,_),b(f,Bo,_),M(y0,Bo,null),e(Bo,Cxo),e(Bo,Bi),e(Bi,wxo),e(Bi,_D),e(_D,Axo),e(Bi,yxo),e(Bi,bD),e(bD,Lxo),e(Bi,xxo),e(Bo,$xo),e(Bo,L0),e(L0,kxo),e(L0,lce),e(lce,Sxo),e(L0,Rxo),e(Bo,Bxo),e(Bo,nt),M(x0,nt,null),e(nt,Pxo),e(nt,ice),e(ice,Ixo),e(nt,qxo),e(nt,Pi),e(Pi,Nxo),e(Pi,dce),e(dce,jxo),e(Pi,Dxo),e(Pi,vD),e(vD,Gxo),e(Pi,Oxo),e(nt,Vxo),M(Z6,nt,null),e(Bo,Xxo),e(Bo,eo),M($0,eo,null),e(eo,zxo),e(eo,cce),e(cce,Qxo),e(eo,Wxo),e(eo,xa),e(xa,Hxo),e(xa,fce),e(fce,Uxo),e(xa,Jxo),e(xa,mce),e(mce,Yxo),e(xa,Kxo),e(xa,gce),e(gce,Zxo),e(xa,e9o),e(eo,o9o),e(eo,Y),e(Y,e1),e(e1,hce),e(hce,r9o),e(e1,t9o),e(e1,FD),e(FD,a9o),e(e1,n9o),e(Y,s9o),e(Y,o1),e(o1,pce),e(pce,l9o),e(o1,i9o),e(o1,TD),e(TD,d9o),e(o1,c9o),e(Y,f9o),e(Y,r1),e(r1,uce),e(uce,m9o),e(r1,g9o),e(r1,MD),e(MD,h9o),e(r1,p9o),e(Y,u9o),e(Y,t1),e(t1,_ce),e(_ce,_9o),e(t1,b9o),e(t1,ED),e(ED,v9o),e(t1,F9o),e(Y,T9o),e(Y,a1),e(a1,bce),e(bce,M9o),e(a1,E9o),e(a1,CD),e(CD,C9o),e(a1,w9o),e(Y,A9o),e(Y,n1),e(n1,vce),e(vce,y9o),e(n1,L9o),e(n1,wD),e(wD,x9o),e(n1,$9o),e(Y,k9o),e(Y,s1),e(s1,Fce),e(Fce,S9o),e(s1,R9o),e(s1,AD),e(AD,B9o),e(s1,P9o),e(Y,I9o),e(Y,l1),e(l1,Tce),e(Tce,q9o),e(l1,N9o),e(l1,yD),e(yD,j9o),e(l1,D9o),e(Y,G9o),e(Y,i1),e(i1,Mce),e(Mce,O9o),e(i1,V9o),e(i1,LD),e(LD,X9o),e(i1,z9o),e(Y,Q9o),e(Y,d1),e(d1,Ece),e(Ece,W9o),e(d1,H9o),e(d1,xD),e(xD,U9o),e(d1,J9o),e(Y,Y9o),e(Y,c1),e(c1,Cce),e(Cce,K9o),e(c1,Z9o),e(c1,$D),e($D,e$o),e(c1,o$o),e(Y,r$o),e(Y,f1),e(f1,wce),e(wce,t$o),e(f1,a$o),e(f1,kD),e(kD,n$o),e(f1,s$o),e(Y,l$o),e(Y,m1),e(m1,Ace),e(Ace,i$o),e(m1,d$o),e(m1,SD),e(SD,c$o),e(m1,f$o),e(Y,m$o),e(Y,g1),e(g1,yce),e(yce,g$o),e(g1,h$o),e(g1,RD),e(RD,p$o),e(g1,u$o),e(Y,_$o),e(Y,h1),e(h1,Lce),e(Lce,b$o),e(h1,v$o),e(h1,BD),e(BD,F$o),e(h1,T$o),e(Y,M$o),e(Y,p1),e(p1,xce),e(xce,E$o),e(p1,C$o),e(p1,PD),e(PD,w$o),e(p1,A$o),e(Y,y$o),e(Y,u1),e(u1,$ce),e($ce,L$o),e(u1,x$o),e(u1,ID),e(ID,$$o),e(u1,k$o),e(Y,S$o),e(Y,_1),e(_1,kce),e(kce,R$o),e(_1,B$o),e(_1,qD),e(qD,P$o),e(_1,I$o),e(Y,q$o),e(Y,b1),e(b1,Sce),e(Sce,N$o),e(b1,j$o),e(b1,ND),e(ND,D$o),e(b1,G$o),e(Y,O$o),e(Y,v1),e(v1,Rce),e(Rce,V$o),e(v1,X$o),e(v1,jD),e(jD,z$o),e(v1,Q$o),e(Y,W$o),e(Y,F1),e(F1,Bce),e(Bce,H$o),e(F1,U$o),e(F1,DD),e(DD,J$o),e(F1,Y$o),e(Y,K$o),e(Y,T1),e(T1,Pce),e(Pce,Z$o),e(T1,eko),e(T1,GD),e(GD,oko),e(T1,rko),e(Y,tko),e(Y,M1),e(M1,Ice),e(Ice,ako),e(M1,nko),e(M1,OD),e(OD,sko),e(M1,lko),e(Y,iko),e(Y,E1),e(E1,qce),e(qce,dko),e(E1,cko),e(E1,VD),e(VD,fko),e(E1,mko),e(Y,gko),e(Y,C1),e(C1,Nce),e(Nce,hko),e(C1,pko),e(C1,XD),e(XD,uko),e(C1,_ko),e(Y,bko),e(Y,w1),e(w1,jce),e(jce,vko),e(w1,Fko),e(w1,zD),e(zD,Tko),e(w1,Mko),e(Y,Eko),e(Y,A1),e(A1,Dce),e(Dce,Cko),e(A1,wko),e(A1,QD),e(QD,Ako),e(A1,yko),e(Y,Lko),e(Y,y1),e(y1,Gce),e(Gce,xko),e(y1,$ko),e(y1,WD),e(WD,kko),e(y1,Sko),e(eo,Rko),e(eo,L1),e(L1,Bko),e(L1,Oce),e(Oce,Pko),e(L1,Iko),e(L1,Vce),e(Vce,qko),e(eo,Nko),M(x1,eo,null),b(f,GBe,_),b(f,Ii,_),e(Ii,$1),e($1,Xce),M(k0,Xce,null),e(Ii,jko),e(Ii,zce),e(zce,Dko),b(f,OBe,_),b(f,Po,_),M(S0,Po,null),e(Po,Gko),e(Po,qi),e(qi,Oko),e(qi,HD),e(HD,Vko),e(qi,Xko),e(qi,UD),e(UD,zko),e(qi,Qko),e(Po,Wko),e(Po,R0),e(R0,Hko),e(R0,Qce),e(Qce,Uko),e(R0,Jko),e(Po,Yko),e(Po,st),M(B0,st,null),e(st,Kko),e(st,Wce),e(Wce,Zko),e(st,eSo),e(st,Ni),e(Ni,oSo),e(Ni,Hce),e(Hce,rSo),e(Ni,tSo),e(Ni,JD),e(JD,aSo),e(Ni,nSo),e(st,sSo),M(k1,st,null),e(Po,lSo),e(Po,oo),M(P0,oo,null),e(oo,iSo),e(oo,Uce),e(Uce,dSo),e(oo,cSo),e(oo,$a),e($a,fSo),e($a,Jce),e(Jce,mSo),e($a,gSo),e($a,Yce),e(Yce,hSo),e($a,pSo),e($a,Kce),e(Kce,uSo),e($a,_So),e(oo,bSo),e(oo,Ur),e(Ur,S1),e(S1,Zce),e(Zce,vSo),e(S1,FSo),e(S1,YD),e(YD,TSo),e(S1,MSo),e(Ur,ESo),e(Ur,R1),e(R1,efe),e(efe,CSo),e(R1,wSo),e(R1,KD),e(KD,ASo),e(R1,ySo),e(Ur,LSo),e(Ur,B1),e(B1,ofe),e(ofe,xSo),e(B1,$So),e(B1,ZD),e(ZD,kSo),e(B1,SSo),e(Ur,RSo),e(Ur,P1),e(P1,rfe),e(rfe,BSo),e(P1,PSo),e(P1,eG),e(eG,ISo),e(P1,qSo),e(Ur,NSo),e(Ur,I1),e(I1,tfe),e(tfe,jSo),e(I1,DSo),e(I1,oG),e(oG,GSo),e(I1,OSo),e(oo,VSo),e(oo,q1),e(q1,XSo),e(q1,afe),e(afe,zSo),e(q1,QSo),e(q1,nfe),e(nfe,WSo),e(oo,HSo),M(N1,oo,null),b(f,VBe,_),b(f,ji,_),e(ji,j1),e(j1,sfe),M(I0,sfe,null),e(ji,USo),e(ji,lfe),e(lfe,JSo),b(f,XBe,_),b(f,Io,_),M(q0,Io,null),e(Io,YSo),e(Io,Di),e(Di,KSo),e(Di,rG),e(rG,ZSo),e(Di,eRo),e(Di,tG),e(tG,oRo),e(Di,rRo),e(Io,tRo),e(Io,N0),e(N0,aRo),e(N0,ife),e(ife,nRo),e(N0,sRo),e(Io,lRo),e(Io,lt),M(j0,lt,null),e(lt,iRo),e(lt,dfe),e(dfe,dRo),e(lt,cRo),e(lt,Gi),e(Gi,fRo),e(Gi,cfe),e(cfe,mRo),e(Gi,gRo),e(Gi,aG),e(aG,hRo),e(Gi,pRo),e(lt,uRo),M(D1,lt,null),e(Io,_Ro),e(Io,ro),M(D0,ro,null),e(ro,bRo),e(ro,ffe),e(ffe,vRo),e(ro,FRo),e(ro,ka),e(ka,TRo),e(ka,mfe),e(mfe,MRo),e(ka,ERo),e(ka,gfe),e(gfe,CRo),e(ka,wRo),e(ka,hfe),e(hfe,ARo),e(ka,yRo),e(ro,LRo),e(ro,U),e(U,G1),e(G1,pfe),e(pfe,xRo),e(G1,$Ro),e(G1,nG),e(nG,kRo),e(G1,SRo),e(U,RRo),e(U,O1),e(O1,ufe),e(ufe,BRo),e(O1,PRo),e(O1,sG),e(sG,IRo),e(O1,qRo),e(U,NRo),e(U,V1),e(V1,_fe),e(_fe,jRo),e(V1,DRo),e(V1,lG),e(lG,GRo),e(V1,ORo),e(U,VRo),e(U,X1),e(X1,bfe),e(bfe,XRo),e(X1,zRo),e(X1,iG),e(iG,QRo),e(X1,WRo),e(U,HRo),e(U,z1),e(z1,vfe),e(vfe,URo),e(z1,JRo),e(z1,dG),e(dG,YRo),e(z1,KRo),e(U,ZRo),e(U,Q1),e(Q1,Ffe),e(Ffe,eBo),e(Q1,oBo),e(Q1,cG),e(cG,rBo),e(Q1,tBo),e(U,aBo),e(U,W1),e(W1,Tfe),e(Tfe,nBo),e(W1,sBo),e(W1,fG),e(fG,lBo),e(W1,iBo),e(U,dBo),e(U,H1),e(H1,Mfe),e(Mfe,cBo),e(H1,fBo),e(H1,mG),e(mG,mBo),e(H1,gBo),e(U,hBo),e(U,U1),e(U1,Efe),e(Efe,pBo),e(U1,uBo),e(U1,gG),e(gG,_Bo),e(U1,bBo),e(U,vBo),e(U,J1),e(J1,Cfe),e(Cfe,FBo),e(J1,TBo),e(J1,hG),e(hG,MBo),e(J1,EBo),e(U,CBo),e(U,Y1),e(Y1,wfe),e(wfe,wBo),e(Y1,ABo),e(Y1,pG),e(pG,yBo),e(Y1,LBo),e(U,xBo),e(U,K1),e(K1,Afe),e(Afe,$Bo),e(K1,kBo),e(K1,uG),e(uG,SBo),e(K1,RBo),e(U,BBo),e(U,Z1),e(Z1,yfe),e(yfe,PBo),e(Z1,IBo),e(Z1,_G),e(_G,qBo),e(Z1,NBo),e(U,jBo),e(U,eb),e(eb,Lfe),e(Lfe,DBo),e(eb,GBo),e(eb,bG),e(bG,OBo),e(eb,VBo),e(U,XBo),e(U,ob),e(ob,xfe),e(xfe,zBo),e(ob,QBo),e(ob,vG),e(vG,WBo),e(ob,HBo),e(U,UBo),e(U,rb),e(rb,$fe),e($fe,JBo),e(rb,YBo),e(rb,FG),e(FG,KBo),e(rb,ZBo),e(U,ePo),e(U,tb),e(tb,kfe),e(kfe,oPo),e(tb,rPo),e(tb,TG),e(TG,tPo),e(tb,aPo),e(U,nPo),e(U,ab),e(ab,Sfe),e(Sfe,sPo),e(ab,lPo),e(ab,MG),e(MG,iPo),e(ab,dPo),e(U,cPo),e(U,nb),e(nb,Rfe),e(Rfe,fPo),e(nb,mPo),e(nb,EG),e(EG,gPo),e(nb,hPo),e(U,pPo),e(U,sb),e(sb,Bfe),e(Bfe,uPo),e(sb,_Po),e(sb,CG),e(CG,bPo),e(sb,vPo),e(U,FPo),e(U,lb),e(lb,Pfe),e(Pfe,TPo),e(lb,MPo),e(lb,wG),e(wG,EPo),e(lb,CPo),e(U,wPo),e(U,ib),e(ib,Ife),e(Ife,APo),e(ib,yPo),e(ib,AG),e(AG,LPo),e(ib,xPo),e(U,$Po),e(U,db),e(db,qfe),e(qfe,kPo),e(db,SPo),e(db,yG),e(yG,RPo),e(db,BPo),e(U,PPo),e(U,cb),e(cb,Nfe),e(Nfe,IPo),e(cb,qPo),e(cb,LG),e(LG,NPo),e(cb,jPo),e(U,DPo),e(U,fb),e(fb,jfe),e(jfe,GPo),e(fb,OPo),e(fb,xG),e(xG,VPo),e(fb,XPo),e(U,zPo),e(U,mb),e(mb,Dfe),e(Dfe,QPo),e(mb,WPo),e(mb,$G),e($G,HPo),e(mb,UPo),e(U,JPo),e(U,gb),e(gb,Gfe),e(Gfe,YPo),e(gb,KPo),e(gb,kG),e(kG,ZPo),e(gb,eIo),e(U,oIo),e(U,hb),e(hb,Ofe),e(Ofe,rIo),e(hb,tIo),e(hb,SG),e(SG,aIo),e(hb,nIo),e(U,sIo),e(U,pb),e(pb,Vfe),e(Vfe,lIo),e(pb,iIo),e(pb,RG),e(RG,dIo),e(pb,cIo),e(U,fIo),e(U,ub),e(ub,Xfe),e(Xfe,mIo),e(ub,gIo),e(ub,BG),e(BG,hIo),e(ub,pIo),e(U,uIo),e(U,_b),e(_b,zfe),e(zfe,_Io),e(_b,bIo),e(_b,PG),e(PG,vIo),e(_b,FIo),e(U,TIo),e(U,bb),e(bb,Qfe),e(Qfe,MIo),e(bb,EIo),e(bb,IG),e(IG,CIo),e(bb,wIo),e(U,AIo),e(U,vb),e(vb,Wfe),e(Wfe,yIo),e(vb,LIo),e(vb,qG),e(qG,xIo),e(vb,$Io),e(ro,kIo),e(ro,Fb),e(Fb,SIo),e(Fb,Hfe),e(Hfe,RIo),e(Fb,BIo),e(Fb,Ufe),e(Ufe,PIo),e(ro,IIo),M(Tb,ro,null),b(f,zBe,_),b(f,Oi,_),e(Oi,Mb),e(Mb,Jfe),M(G0,Jfe,null),e(Oi,qIo),e(Oi,Yfe),e(Yfe,NIo),b(f,QBe,_),b(f,qo,_),M(O0,qo,null),e(qo,jIo),e(qo,Vi),e(Vi,DIo),e(Vi,NG),e(NG,GIo),e(Vi,OIo),e(Vi,jG),e(jG,VIo),e(Vi,XIo),e(qo,zIo),e(qo,V0),e(V0,QIo),e(V0,Kfe),e(Kfe,WIo),e(V0,HIo),e(qo,UIo),e(qo,it),M(X0,it,null),e(it,JIo),e(it,Zfe),e(Zfe,YIo),e(it,KIo),e(it,Xi),e(Xi,ZIo),e(Xi,eme),e(eme,eqo),e(Xi,oqo),e(Xi,DG),e(DG,rqo),e(Xi,tqo),e(it,aqo),M(Eb,it,null),e(qo,nqo),e(qo,to),M(z0,to,null),e(to,sqo),e(to,ome),e(ome,lqo),e(to,iqo),e(to,Sa),e(Sa,dqo),e(Sa,rme),e(rme,cqo),e(Sa,fqo),e(Sa,tme),e(tme,mqo),e(Sa,gqo),e(Sa,ame),e(ame,hqo),e(Sa,pqo),e(to,uqo),e(to,O),e(O,Cb),e(Cb,nme),e(nme,_qo),e(Cb,bqo),e(Cb,GG),e(GG,vqo),e(Cb,Fqo),e(O,Tqo),e(O,wb),e(wb,sme),e(sme,Mqo),e(wb,Eqo),e(wb,OG),e(OG,Cqo),e(wb,wqo),e(O,Aqo),e(O,Ab),e(Ab,lme),e(lme,yqo),e(Ab,Lqo),e(Ab,VG),e(VG,xqo),e(Ab,$qo),e(O,kqo),e(O,yb),e(yb,ime),e(ime,Sqo),e(yb,Rqo),e(yb,XG),e(XG,Bqo),e(yb,Pqo),e(O,Iqo),e(O,Lb),e(Lb,dme),e(dme,qqo),e(Lb,Nqo),e(Lb,zG),e(zG,jqo),e(Lb,Dqo),e(O,Gqo),e(O,xb),e(xb,cme),e(cme,Oqo),e(xb,Vqo),e(xb,QG),e(QG,Xqo),e(xb,zqo),e(O,Qqo),e(O,$b),e($b,fme),e(fme,Wqo),e($b,Hqo),e($b,WG),e(WG,Uqo),e($b,Jqo),e(O,Yqo),e(O,kb),e(kb,mme),e(mme,Kqo),e(kb,Zqo),e(kb,HG),e(HG,eNo),e(kb,oNo),e(O,rNo),e(O,Sb),e(Sb,gme),e(gme,tNo),e(Sb,aNo),e(Sb,UG),e(UG,nNo),e(Sb,sNo),e(O,lNo),e(O,Rb),e(Rb,hme),e(hme,iNo),e(Rb,dNo),e(Rb,JG),e(JG,cNo),e(Rb,fNo),e(O,mNo),e(O,Bb),e(Bb,pme),e(pme,gNo),e(Bb,hNo),e(Bb,YG),e(YG,pNo),e(Bb,uNo),e(O,_No),e(O,Pb),e(Pb,ume),e(ume,bNo),e(Pb,vNo),e(Pb,KG),e(KG,FNo),e(Pb,TNo),e(O,MNo),e(O,Ib),e(Ib,_me),e(_me,ENo),e(Ib,CNo),e(Ib,ZG),e(ZG,wNo),e(Ib,ANo),e(O,yNo),e(O,qb),e(qb,bme),e(bme,LNo),e(qb,xNo),e(qb,eO),e(eO,$No),e(qb,kNo),e(O,SNo),e(O,Nb),e(Nb,vme),e(vme,RNo),e(Nb,BNo),e(Nb,oO),e(oO,PNo),e(Nb,INo),e(O,qNo),e(O,jb),e(jb,Fme),e(Fme,NNo),e(jb,jNo),e(jb,rO),e(rO,DNo),e(jb,GNo),e(O,ONo),e(O,Db),e(Db,Tme),e(Tme,VNo),e(Db,XNo),e(Db,tO),e(tO,zNo),e(Db,QNo),e(O,WNo),e(O,Gb),e(Gb,Mme),e(Mme,HNo),e(Gb,UNo),e(Gb,aO),e(aO,JNo),e(Gb,YNo),e(O,KNo),e(O,Ob),e(Ob,Eme),e(Eme,ZNo),e(Ob,ejo),e(Ob,nO),e(nO,ojo),e(Ob,rjo),e(O,tjo),e(O,Vb),e(Vb,Cme),e(Cme,ajo),e(Vb,njo),e(Vb,sO),e(sO,sjo),e(Vb,ljo),e(O,ijo),e(O,Xb),e(Xb,wme),e(wme,djo),e(Xb,cjo),e(Xb,lO),e(lO,fjo),e(Xb,mjo),e(O,gjo),e(O,zb),e(zb,Ame),e(Ame,hjo),e(zb,pjo),e(zb,iO),e(iO,ujo),e(zb,_jo),e(O,bjo),e(O,Qb),e(Qb,yme),e(yme,vjo),e(Qb,Fjo),e(Qb,dO),e(dO,Tjo),e(Qb,Mjo),e(O,Ejo),e(O,Wb),e(Wb,Lme),e(Lme,Cjo),e(Wb,wjo),e(Wb,cO),e(cO,Ajo),e(Wb,yjo),e(O,Ljo),e(O,Hb),e(Hb,xme),e(xme,xjo),e(Hb,$jo),e(Hb,fO),e(fO,kjo),e(Hb,Sjo),e(O,Rjo),e(O,Ub),e(Ub,$me),e($me,Bjo),e(Ub,Pjo),e(Ub,mO),e(mO,Ijo),e(Ub,qjo),e(O,Njo),e(O,Jb),e(Jb,kme),e(kme,jjo),e(Jb,Djo),e(Jb,gO),e(gO,Gjo),e(Jb,Ojo),e(O,Vjo),e(O,Yb),e(Yb,Sme),e(Sme,Xjo),e(Yb,zjo),e(Yb,hO),e(hO,Qjo),e(Yb,Wjo),e(O,Hjo),e(O,Kb),e(Kb,Rme),e(Rme,Ujo),e(Kb,Jjo),e(Kb,pO),e(pO,Yjo),e(Kb,Kjo),e(O,Zjo),e(O,Zb),e(Zb,Bme),e(Bme,eDo),e(Zb,oDo),e(Zb,uO),e(uO,rDo),e(Zb,tDo),e(O,aDo),e(O,ev),e(ev,Pme),e(Pme,nDo),e(ev,sDo),e(ev,_O),e(_O,lDo),e(ev,iDo),e(O,dDo),e(O,ov),e(ov,Ime),e(Ime,cDo),e(ov,fDo),e(ov,bO),e(bO,mDo),e(ov,gDo),e(O,hDo),e(O,rv),e(rv,qme),e(qme,pDo),e(rv,uDo),e(rv,vO),e(vO,_Do),e(rv,bDo),e(O,vDo),e(O,tv),e(tv,Nme),e(Nme,FDo),e(tv,TDo),e(tv,FO),e(FO,MDo),e(tv,EDo),e(O,CDo),e(O,av),e(av,jme),e(jme,wDo),e(av,ADo),e(av,TO),e(TO,yDo),e(av,LDo),e(O,xDo),e(O,nv),e(nv,Dme),e(Dme,$Do),e(nv,kDo),e(nv,MO),e(MO,SDo),e(nv,RDo),e(O,BDo),e(O,sv),e(sv,Gme),e(Gme,PDo),e(sv,IDo),e(sv,EO),e(EO,qDo),e(sv,NDo),e(O,jDo),e(O,lv),e(lv,Ome),e(Ome,DDo),e(lv,GDo),e(lv,CO),e(CO,ODo),e(lv,VDo),e(O,XDo),e(O,iv),e(iv,Vme),e(Vme,zDo),e(iv,QDo),e(iv,wO),e(wO,WDo),e(iv,HDo),e(to,UDo),e(to,dv),e(dv,JDo),e(dv,Xme),e(Xme,YDo),e(dv,KDo),e(dv,zme),e(zme,ZDo),e(to,eGo),M(cv,to,null),b(f,WBe,_),b(f,zi,_),e(zi,fv),e(fv,Qme),M(Q0,Qme,null),e(zi,oGo),e(zi,Wme),e(Wme,rGo),b(f,HBe,_),b(f,No,_),M(W0,No,null),e(No,tGo),e(No,Qi),e(Qi,aGo),e(Qi,AO),e(AO,nGo),e(Qi,sGo),e(Qi,yO),e(yO,lGo),e(Qi,iGo),e(No,dGo),e(No,H0),e(H0,cGo),e(H0,Hme),e(Hme,fGo),e(H0,mGo),e(No,gGo),e(No,dt),M(U0,dt,null),e(dt,hGo),e(dt,Ume),e(Ume,pGo),e(dt,uGo),e(dt,Wi),e(Wi,_Go),e(Wi,Jme),e(Jme,bGo),e(Wi,vGo),e(Wi,LO),e(LO,FGo),e(Wi,TGo),e(dt,MGo),M(mv,dt,null),e(No,EGo),e(No,ao),M(J0,ao,null),e(ao,CGo),e(ao,Yme),e(Yme,wGo),e(ao,AGo),e(ao,Ra),e(Ra,yGo),e(Ra,Kme),e(Kme,LGo),e(Ra,xGo),e(Ra,Zme),e(Zme,$Go),e(Ra,kGo),e(Ra,ege),e(ege,SGo),e(Ra,RGo),e(ao,BGo),e(ao,oge),e(oge,gv),e(gv,rge),e(rge,PGo),e(gv,IGo),e(gv,xO),e(xO,qGo),e(gv,NGo),e(ao,jGo),e(ao,hv),e(hv,DGo),e(hv,tge),e(tge,GGo),e(hv,OGo),e(hv,age),e(age,VGo),e(ao,XGo),M(pv,ao,null),b(f,UBe,_),b(f,Hi,_),e(Hi,uv),e(uv,nge),M(Y0,nge,null),e(Hi,zGo),e(Hi,sge),e(sge,QGo),b(f,JBe,_),b(f,jo,_),M(K0,jo,null),e(jo,WGo),e(jo,Ui),e(Ui,HGo),e(Ui,$O),e($O,UGo),e(Ui,JGo),e(Ui,kO),e(kO,YGo),e(Ui,KGo),e(jo,ZGo),e(jo,Z0),e(Z0,eOo),e(Z0,lge),e(lge,oOo),e(Z0,rOo),e(jo,tOo),e(jo,ct),M(ey,ct,null),e(ct,aOo),e(ct,ige),e(ige,nOo),e(ct,sOo),e(ct,Ji),e(Ji,lOo),e(Ji,dge),e(dge,iOo),e(Ji,dOo),e(Ji,SO),e(SO,cOo),e(Ji,fOo),e(ct,mOo),M(_v,ct,null),e(jo,gOo),e(jo,no),M(oy,no,null),e(no,hOo),e(no,cge),e(cge,pOo),e(no,uOo),e(no,Ba),e(Ba,_Oo),e(Ba,fge),e(fge,bOo),e(Ba,vOo),e(Ba,mge),e(mge,FOo),e(Ba,TOo),e(Ba,gge),e(gge,MOo),e(Ba,EOo),e(no,COo),e(no,ve),e(ve,bv),e(bv,hge),e(hge,wOo),e(bv,AOo),e(bv,RO),e(RO,yOo),e(bv,LOo),e(ve,xOo),e(ve,vv),e(vv,pge),e(pge,$Oo),e(vv,kOo),e(vv,BO),e(BO,SOo),e(vv,ROo),e(ve,BOo),e(ve,Fv),e(Fv,uge),e(uge,POo),e(Fv,IOo),e(Fv,PO),e(PO,qOo),e(Fv,NOo),e(ve,jOo),e(ve,xs),e(xs,_ge),e(_ge,DOo),e(xs,GOo),e(xs,IO),e(IO,OOo),e(xs,VOo),e(xs,qO),e(qO,XOo),e(xs,zOo),e(ve,QOo),e(ve,Tv),e(Tv,bge),e(bge,WOo),e(Tv,HOo),e(Tv,NO),e(NO,UOo),e(Tv,JOo),e(ve,YOo),e(ve,ft),e(ft,vge),e(vge,KOo),e(ft,ZOo),e(ft,jO),e(jO,eVo),e(ft,oVo),e(ft,DO),e(DO,rVo),e(ft,tVo),e(ft,GO),e(GO,aVo),e(ft,nVo),e(ve,sVo),e(ve,Mv),e(Mv,Fge),e(Fge,lVo),e(Mv,iVo),e(Mv,OO),e(OO,dVo),e(Mv,cVo),e(ve,fVo),e(ve,Ev),e(Ev,Tge),e(Tge,mVo),e(Ev,gVo),e(Ev,VO),e(VO,hVo),e(Ev,pVo),e(ve,uVo),e(ve,Cv),e(Cv,Mge),e(Mge,_Vo),e(Cv,bVo),e(Cv,XO),e(XO,vVo),e(Cv,FVo),e(ve,TVo),e(ve,wv),e(wv,Ege),e(Ege,MVo),e(wv,EVo),e(wv,zO),e(zO,CVo),e(wv,wVo),e(ve,AVo),e(ve,Av),e(Av,Cge),e(Cge,yVo),e(Av,LVo),e(Av,QO),e(QO,xVo),e(Av,$Vo),e(ve,kVo),e(ve,yv),e(yv,wge),e(wge,SVo),e(yv,RVo),e(yv,WO),e(WO,BVo),e(yv,PVo),e(ve,IVo),e(ve,Lv),e(Lv,Age),e(Age,qVo),e(Lv,NVo),e(Lv,HO),e(HO,jVo),e(Lv,DVo),e(no,GVo),e(no,xv),e(xv,OVo),e(xv,yge),e(yge,VVo),e(xv,XVo),e(xv,Lge),e(Lge,zVo),e(no,QVo),M($v,no,null),b(f,YBe,_),b(f,Yi,_),e(Yi,kv),e(kv,xge),M(ry,xge,null),e(Yi,WVo),e(Yi,$ge),e($ge,HVo),b(f,KBe,_),b(f,Do,_),M(ty,Do,null),e(Do,UVo),e(Do,Ki),e(Ki,JVo),e(Ki,UO),e(UO,YVo),e(Ki,KVo),e(Ki,JO),e(JO,ZVo),e(Ki,eXo),e(Do,oXo),e(Do,ay),e(ay,rXo),e(ay,kge),e(kge,tXo),e(ay,aXo),e(Do,nXo),e(Do,mt),M(ny,mt,null),e(mt,sXo),e(mt,Sge),e(Sge,lXo),e(mt,iXo),e(mt,Zi),e(Zi,dXo),e(Zi,Rge),e(Rge,cXo),e(Zi,fXo),e(Zi,YO),e(YO,mXo),e(Zi,gXo),e(mt,hXo),M(Sv,mt,null),e(Do,pXo),e(Do,so),M(sy,so,null),e(so,uXo),e(so,Bge),e(Bge,_Xo),e(so,bXo),e(so,Pa),e(Pa,vXo),e(Pa,Pge),e(Pge,FXo),e(Pa,TXo),e(Pa,Ige),e(Ige,MXo),e(Pa,EXo),e(Pa,qge),e(qge,CXo),e(Pa,wXo),e(so,AXo),e(so,Nge),e(Nge,Rv),e(Rv,jge),e(jge,yXo),e(Rv,LXo),e(Rv,KO),e(KO,xXo),e(Rv,$Xo),e(so,kXo),e(so,Bv),e(Bv,SXo),e(Bv,Dge),e(Dge,RXo),e(Bv,BXo),e(Bv,Gge),e(Gge,PXo),e(so,IXo),M(Pv,so,null),b(f,ZBe,_),b(f,ed,_),e(ed,Iv),e(Iv,Oge),M(ly,Oge,null),e(ed,qXo),e(ed,Vge),e(Vge,NXo),b(f,ePe,_),b(f,Go,_),M(iy,Go,null),e(Go,jXo),e(Go,od),e(od,DXo),e(od,ZO),e(ZO,GXo),e(od,OXo),e(od,eV),e(eV,VXo),e(od,XXo),e(Go,zXo),e(Go,dy),e(dy,QXo),e(dy,Xge),e(Xge,WXo),e(dy,HXo),e(Go,UXo),e(Go,gt),M(cy,gt,null),e(gt,JXo),e(gt,zge),e(zge,YXo),e(gt,KXo),e(gt,rd),e(rd,ZXo),e(rd,Qge),e(Qge,ezo),e(rd,ozo),e(rd,oV),e(oV,rzo),e(rd,tzo),e(gt,azo),M(qv,gt,null),e(Go,nzo),e(Go,lo),M(fy,lo,null),e(lo,szo),e(lo,Wge),e(Wge,lzo),e(lo,izo),e(lo,Ia),e(Ia,dzo),e(Ia,Hge),e(Hge,czo),e(Ia,fzo),e(Ia,Uge),e(Uge,mzo),e(Ia,gzo),e(Ia,Jge),e(Jge,hzo),e(Ia,pzo),e(lo,uzo),e(lo,Ne),e(Ne,Nv),e(Nv,Yge),e(Yge,_zo),e(Nv,bzo),e(Nv,rV),e(rV,vzo),e(Nv,Fzo),e(Ne,Tzo),e(Ne,jv),e(jv,Kge),e(Kge,Mzo),e(jv,Ezo),e(jv,tV),e(tV,Czo),e(jv,wzo),e(Ne,Azo),e(Ne,Dv),e(Dv,Zge),e(Zge,yzo),e(Dv,Lzo),e(Dv,aV),e(aV,xzo),e(Dv,$zo),e(Ne,kzo),e(Ne,Gv),e(Gv,ehe),e(ehe,Szo),e(Gv,Rzo),e(Gv,nV),e(nV,Bzo),e(Gv,Pzo),e(Ne,Izo),e(Ne,Ov),e(Ov,ohe),e(ohe,qzo),e(Ov,Nzo),e(Ov,sV),e(sV,jzo),e(Ov,Dzo),e(Ne,Gzo),e(Ne,Vv),e(Vv,rhe),e(rhe,Ozo),e(Vv,Vzo),e(Vv,lV),e(lV,Xzo),e(Vv,zzo),e(Ne,Qzo),e(Ne,Xv),e(Xv,the),e(the,Wzo),e(Xv,Hzo),e(Xv,iV),e(iV,Uzo),e(Xv,Jzo),e(Ne,Yzo),e(Ne,zv),e(zv,ahe),e(ahe,Kzo),e(zv,Zzo),e(zv,dV),e(dV,eQo),e(zv,oQo),e(lo,rQo),e(lo,Qv),e(Qv,tQo),e(Qv,nhe),e(nhe,aQo),e(Qv,nQo),e(Qv,she),e(she,sQo),e(lo,lQo),M(Wv,lo,null),b(f,oPe,_),b(f,td,_),e(td,Hv),e(Hv,lhe),M(my,lhe,null),e(td,iQo),e(td,ihe),e(ihe,dQo),b(f,rPe,_),b(f,Oo,_),M(gy,Oo,null),e(Oo,cQo),e(Oo,ad),e(ad,fQo),e(ad,cV),e(cV,mQo),e(ad,gQo),e(ad,fV),e(fV,hQo),e(ad,pQo),e(Oo,uQo),e(Oo,hy),e(hy,_Qo),e(hy,dhe),e(dhe,bQo),e(hy,vQo),e(Oo,FQo),e(Oo,ht),M(py,ht,null),e(ht,TQo),e(ht,che),e(che,MQo),e(ht,EQo),e(ht,nd),e(nd,CQo),e(nd,fhe),e(fhe,wQo),e(nd,AQo),e(nd,mV),e(mV,yQo),e(nd,LQo),e(ht,xQo),M(Uv,ht,null),e(Oo,$Qo),e(Oo,io),M(uy,io,null),e(io,kQo),e(io,mhe),e(mhe,SQo),e(io,RQo),e(io,qa),e(qa,BQo),e(qa,ghe),e(ghe,PQo),e(qa,IQo),e(qa,hhe),e(hhe,qQo),e(qa,NQo),e(qa,phe),e(phe,jQo),e(qa,DQo),e(io,GQo),e(io,Na),e(Na,Jv),e(Jv,uhe),e(uhe,OQo),e(Jv,VQo),e(Jv,gV),e(gV,XQo),e(Jv,zQo),e(Na,QQo),e(Na,Yv),e(Yv,_he),e(_he,WQo),e(Yv,HQo),e(Yv,hV),e(hV,UQo),e(Yv,JQo),e(Na,YQo),e(Na,Kv),e(Kv,bhe),e(bhe,KQo),e(Kv,ZQo),e(Kv,pV),e(pV,eWo),e(Kv,oWo),e(Na,rWo),e(Na,Zv),e(Zv,vhe),e(vhe,tWo),e(Zv,aWo),e(Zv,uV),e(uV,nWo),e(Zv,sWo),e(io,lWo),e(io,eF),e(eF,iWo),e(eF,Fhe),e(Fhe,dWo),e(eF,cWo),e(eF,The),e(The,fWo),e(io,mWo),M(oF,io,null),b(f,tPe,_),b(f,sd,_),e(sd,rF),e(rF,Mhe),M(_y,Mhe,null),e(sd,gWo),e(sd,Ehe),e(Ehe,hWo),b(f,aPe,_),b(f,Vo,_),M(by,Vo,null),e(Vo,pWo),e(Vo,ld),e(ld,uWo),e(ld,_V),e(_V,_Wo),e(ld,bWo),e(ld,bV),e(bV,vWo),e(ld,FWo),e(Vo,TWo),e(Vo,vy),e(vy,MWo),e(vy,Che),e(Che,EWo),e(vy,CWo),e(Vo,wWo),e(Vo,pt),M(Fy,pt,null),e(pt,AWo),e(pt,whe),e(whe,yWo),e(pt,LWo),e(pt,id),e(id,xWo),e(id,Ahe),e(Ahe,$Wo),e(id,kWo),e(id,vV),e(vV,SWo),e(id,RWo),e(pt,BWo),M(tF,pt,null),e(Vo,PWo),e(Vo,co),M(Ty,co,null),e(co,IWo),e(co,yhe),e(yhe,qWo),e(co,NWo),e(co,ja),e(ja,jWo),e(ja,Lhe),e(Lhe,DWo),e(ja,GWo),e(ja,xhe),e(xhe,OWo),e(ja,VWo),e(ja,$he),e($he,XWo),e(ja,zWo),e(co,QWo),e(co,je),e(je,aF),e(aF,khe),e(khe,WWo),e(aF,HWo),e(aF,FV),e(FV,UWo),e(aF,JWo),e(je,YWo),e(je,nF),e(nF,She),e(She,KWo),e(nF,ZWo),e(nF,TV),e(TV,eHo),e(nF,oHo),e(je,rHo),e(je,sF),e(sF,Rhe),e(Rhe,tHo),e(sF,aHo),e(sF,MV),e(MV,nHo),e(sF,sHo),e(je,lHo),e(je,lF),e(lF,Bhe),e(Bhe,iHo),e(lF,dHo),e(lF,EV),e(EV,cHo),e(lF,fHo),e(je,mHo),e(je,iF),e(iF,Phe),e(Phe,gHo),e(iF,hHo),e(iF,CV),e(CV,pHo),e(iF,uHo),e(je,_Ho),e(je,dF),e(dF,Ihe),e(Ihe,bHo),e(dF,vHo),e(dF,wV),e(wV,FHo),e(dF,THo),e(je,MHo),e(je,cF),e(cF,qhe),e(qhe,EHo),e(cF,CHo),e(cF,AV),e(AV,wHo),e(cF,AHo),e(je,yHo),e(je,fF),e(fF,Nhe),e(Nhe,LHo),e(fF,xHo),e(fF,yV),e(yV,$Ho),e(fF,kHo),e(co,SHo),e(co,mF),e(mF,RHo),e(mF,jhe),e(jhe,BHo),e(mF,PHo),e(mF,Dhe),e(Dhe,IHo),e(co,qHo),M(gF,co,null),b(f,nPe,_),b(f,dd,_),e(dd,hF),e(hF,Ghe),M(My,Ghe,null),e(dd,NHo),e(dd,Ohe),e(Ohe,jHo),b(f,sPe,_),b(f,Xo,_),M(Ey,Xo,null),e(Xo,DHo),e(Xo,cd),e(cd,GHo),e(cd,LV),e(LV,OHo),e(cd,VHo),e(cd,xV),e(xV,XHo),e(cd,zHo),e(Xo,QHo),e(Xo,Cy),e(Cy,WHo),e(Cy,Vhe),e(Vhe,HHo),e(Cy,UHo),e(Xo,JHo),e(Xo,ut),M(wy,ut,null),e(ut,YHo),e(ut,Xhe),e(Xhe,KHo),e(ut,ZHo),e(ut,fd),e(fd,eUo),e(fd,zhe),e(zhe,oUo),e(fd,rUo),e(fd,$V),e($V,tUo),e(fd,aUo),e(ut,nUo),M(pF,ut,null),e(Xo,sUo),e(Xo,fo),M(Ay,fo,null),e(fo,lUo),e(fo,Qhe),e(Qhe,iUo),e(fo,dUo),e(fo,Da),e(Da,cUo),e(Da,Whe),e(Whe,fUo),e(Da,mUo),e(Da,Hhe),e(Hhe,gUo),e(Da,hUo),e(Da,Uhe),e(Uhe,pUo),e(Da,uUo),e(fo,_Uo),e(fo,yy),e(yy,uF),e(uF,Jhe),e(Jhe,bUo),e(uF,vUo),e(uF,kV),e(kV,FUo),e(uF,TUo),e(yy,MUo),e(yy,_F),e(_F,Yhe),e(Yhe,EUo),e(_F,CUo),e(_F,SV),e(SV,wUo),e(_F,AUo),e(fo,yUo),e(fo,bF),e(bF,LUo),e(bF,Khe),e(Khe,xUo),e(bF,$Uo),e(bF,Zhe),e(Zhe,kUo),e(fo,SUo),M(vF,fo,null),b(f,lPe,_),b(f,md,_),e(md,FF),e(FF,epe),M(Ly,epe,null),e(md,RUo),e(md,ope),e(ope,BUo),b(f,iPe,_),b(f,zo,_),M(xy,zo,null),e(zo,PUo),e(zo,gd),e(gd,IUo),e(gd,RV),e(RV,qUo),e(gd,NUo),e(gd,BV),e(BV,jUo),e(gd,DUo),e(zo,GUo),e(zo,$y),e($y,OUo),e($y,rpe),e(rpe,VUo),e($y,XUo),e(zo,zUo),e(zo,_t),M(ky,_t,null),e(_t,QUo),e(_t,tpe),e(tpe,WUo),e(_t,HUo),e(_t,hd),e(hd,UUo),e(hd,ape),e(ape,JUo),e(hd,YUo),e(hd,PV),e(PV,KUo),e(hd,ZUo),e(_t,eJo),M(TF,_t,null),e(zo,oJo),e(zo,mo),M(Sy,mo,null),e(mo,rJo),e(mo,npe),e(npe,tJo),e(mo,aJo),e(mo,Ga),e(Ga,nJo),e(Ga,spe),e(spe,sJo),e(Ga,lJo),e(Ga,lpe),e(lpe,iJo),e(Ga,dJo),e(Ga,ipe),e(ipe,cJo),e(Ga,fJo),e(mo,mJo),e(mo,Oa),e(Oa,MF),e(MF,dpe),e(dpe,gJo),e(MF,hJo),e(MF,IV),e(IV,pJo),e(MF,uJo),e(Oa,_Jo),e(Oa,EF),e(EF,cpe),e(cpe,bJo),e(EF,vJo),e(EF,qV),e(qV,FJo),e(EF,TJo),e(Oa,MJo),e(Oa,CF),e(CF,fpe),e(fpe,EJo),e(CF,CJo),e(CF,NV),e(NV,wJo),e(CF,AJo),e(Oa,yJo),e(Oa,wF),e(wF,mpe),e(mpe,LJo),e(wF,xJo),e(wF,jV),e(jV,$Jo),e(wF,kJo),e(mo,SJo),e(mo,AF),e(AF,RJo),e(AF,gpe),e(gpe,BJo),e(AF,PJo),e(AF,hpe),e(hpe,IJo),e(mo,qJo),M(yF,mo,null),b(f,dPe,_),b(f,pd,_),e(pd,LF),e(LF,ppe),M(Ry,ppe,null),e(pd,NJo),e(pd,upe),e(upe,jJo),b(f,cPe,_),b(f,Qo,_),M(By,Qo,null),e(Qo,DJo),e(Qo,ud),e(ud,GJo),e(ud,DV),e(DV,OJo),e(ud,VJo),e(ud,GV),e(GV,XJo),e(ud,zJo),e(Qo,QJo),e(Qo,Py),e(Py,WJo),e(Py,_pe),e(_pe,HJo),e(Py,UJo),e(Qo,JJo),e(Qo,bt),M(Iy,bt,null),e(bt,YJo),e(bt,bpe),e(bpe,KJo),e(bt,ZJo),e(bt,_d),e(_d,eYo),e(_d,vpe),e(vpe,oYo),e(_d,rYo),e(_d,OV),e(OV,tYo),e(_d,aYo),e(bt,nYo),M(xF,bt,null),e(Qo,sYo),e(Qo,go),M(qy,go,null),e(go,lYo),e(go,Fpe),e(Fpe,iYo),e(go,dYo),e(go,Va),e(Va,cYo),e(Va,Tpe),e(Tpe,fYo),e(Va,mYo),e(Va,Mpe),e(Mpe,gYo),e(Va,hYo),e(Va,Epe),e(Epe,pYo),e(Va,uYo),e(go,_Yo),e(go,bd),e(bd,$F),e($F,Cpe),e(Cpe,bYo),e($F,vYo),e($F,VV),e(VV,FYo),e($F,TYo),e(bd,MYo),e(bd,kF),e(kF,wpe),e(wpe,EYo),e(kF,CYo),e(kF,XV),e(XV,wYo),e(kF,AYo),e(bd,yYo),e(bd,SF),e(SF,Ape),e(Ape,LYo),e(SF,xYo),e(SF,zV),e(zV,$Yo),e(SF,kYo),e(go,SYo),e(go,RF),e(RF,RYo),e(RF,ype),e(ype,BYo),e(RF,PYo),e(RF,Lpe),e(Lpe,IYo),e(go,qYo),M(BF,go,null),b(f,fPe,_),b(f,vd,_),e(vd,PF),e(PF,xpe),M(Ny,xpe,null),e(vd,NYo),e(vd,$pe),e($pe,jYo),b(f,mPe,_),b(f,Wo,_),M(jy,Wo,null),e(Wo,DYo),e(Wo,Fd),e(Fd,GYo),e(Fd,QV),e(QV,OYo),e(Fd,VYo),e(Fd,WV),e(WV,XYo),e(Fd,zYo),e(Wo,QYo),e(Wo,Dy),e(Dy,WYo),e(Dy,kpe),e(kpe,HYo),e(Dy,UYo),e(Wo,JYo),e(Wo,vt),M(Gy,vt,null),e(vt,YYo),e(vt,Spe),e(Spe,KYo),e(vt,ZYo),e(vt,Td),e(Td,eKo),e(Td,Rpe),e(Rpe,oKo),e(Td,rKo),e(Td,HV),e(HV,tKo),e(Td,aKo),e(vt,nKo),M(IF,vt,null),e(Wo,sKo),e(Wo,ho),M(Oy,ho,null),e(ho,lKo),e(ho,Bpe),e(Bpe,iKo),e(ho,dKo),e(ho,Xa),e(Xa,cKo),e(Xa,Ppe),e(Ppe,fKo),e(Xa,mKo),e(Xa,Ipe),e(Ipe,gKo),e(Xa,hKo),e(Xa,qpe),e(qpe,pKo),e(Xa,uKo),e(ho,_Ko),e(ho,Vy),e(Vy,qF),e(qF,Npe),e(Npe,bKo),e(qF,vKo),e(qF,UV),e(UV,FKo),e(qF,TKo),e(Vy,MKo),e(Vy,NF),e(NF,jpe),e(jpe,EKo),e(NF,CKo),e(NF,JV),e(JV,wKo),e(NF,AKo),e(ho,yKo),e(ho,jF),e(jF,LKo),e(jF,Dpe),e(Dpe,xKo),e(jF,$Ko),e(jF,Gpe),e(Gpe,kKo),e(ho,SKo),M(DF,ho,null),b(f,gPe,_),b(f,Md,_),e(Md,GF),e(GF,Ope),M(Xy,Ope,null),e(Md,RKo),e(Md,Vpe),e(Vpe,BKo),b(f,hPe,_),b(f,Ho,_),M(zy,Ho,null),e(Ho,PKo),e(Ho,Ed),e(Ed,IKo),e(Ed,YV),e(YV,qKo),e(Ed,NKo),e(Ed,KV),e(KV,jKo),e(Ed,DKo),e(Ho,GKo),e(Ho,Qy),e(Qy,OKo),e(Qy,Xpe),e(Xpe,VKo),e(Qy,XKo),e(Ho,zKo),e(Ho,Ft),M(Wy,Ft,null),e(Ft,QKo),e(Ft,zpe),e(zpe,WKo),e(Ft,HKo),e(Ft,Cd),e(Cd,UKo),e(Cd,Qpe),e(Qpe,JKo),e(Cd,YKo),e(Cd,ZV),e(ZV,KKo),e(Cd,ZKo),e(Ft,eZo),M(OF,Ft,null),e(Ho,oZo),e(Ho,po),M(Hy,po,null),e(po,rZo),e(po,Wpe),e(Wpe,tZo),e(po,aZo),e(po,za),e(za,nZo),e(za,Hpe),e(Hpe,sZo),e(za,lZo),e(za,Upe),e(Upe,iZo),e(za,dZo),e(za,Jpe),e(Jpe,cZo),e(za,fZo),e(po,mZo),e(po,Ype),e(Ype,VF),e(VF,Kpe),e(Kpe,gZo),e(VF,hZo),e(VF,eX),e(eX,pZo),e(VF,uZo),e(po,_Zo),e(po,XF),e(XF,bZo),e(XF,Zpe),e(Zpe,vZo),e(XF,FZo),e(XF,eue),e(eue,TZo),e(po,MZo),M(zF,po,null),b(f,pPe,_),b(f,wd,_),e(wd,QF),e(QF,oue),M(Uy,oue,null),e(wd,EZo),e(wd,rue),e(rue,CZo),b(f,uPe,_),b(f,Uo,_),M(Jy,Uo,null),e(Uo,wZo),e(Uo,Ad),e(Ad,AZo),e(Ad,oX),e(oX,yZo),e(Ad,LZo),e(Ad,rX),e(rX,xZo),e(Ad,$Zo),e(Uo,kZo),e(Uo,Yy),e(Yy,SZo),e(Yy,tue),e(tue,RZo),e(Yy,BZo),e(Uo,PZo),e(Uo,Tt),M(Ky,Tt,null),e(Tt,IZo),e(Tt,aue),e(aue,qZo),e(Tt,NZo),e(Tt,yd),e(yd,jZo),e(yd,nue),e(nue,DZo),e(yd,GZo),e(yd,tX),e(tX,OZo),e(yd,VZo),e(Tt,XZo),M(WF,Tt,null),e(Uo,zZo),e(Uo,uo),M(Zy,uo,null),e(uo,QZo),e(uo,sue),e(sue,WZo),e(uo,HZo),e(uo,Qa),e(Qa,UZo),e(Qa,lue),e(lue,JZo),e(Qa,YZo),e(Qa,iue),e(iue,KZo),e(Qa,ZZo),e(Qa,due),e(due,eer),e(Qa,oer),e(uo,rer),e(uo,Wa),e(Wa,HF),e(HF,cue),e(cue,ter),e(HF,aer),e(HF,aX),e(aX,ner),e(HF,ser),e(Wa,ler),e(Wa,UF),e(UF,fue),e(fue,ier),e(UF,der),e(UF,nX),e(nX,cer),e(UF,fer),e(Wa,mer),e(Wa,JF),e(JF,mue),e(mue,ger),e(JF,her),e(JF,sX),e(sX,per),e(JF,uer),e(Wa,_er),e(Wa,YF),e(YF,gue),e(gue,ber),e(YF,ver),e(YF,lX),e(lX,Fer),e(YF,Ter),e(uo,Mer),e(uo,KF),e(KF,Eer),e(KF,hue),e(hue,Cer),e(KF,wer),e(KF,pue),e(pue,Aer),e(uo,yer),M(ZF,uo,null),b(f,_Pe,_),b(f,Ld,_),e(Ld,eT),e(eT,uue),M(eL,uue,null),e(Ld,Ler),e(Ld,_ue),e(_ue,xer),b(f,bPe,_),b(f,Jo,_),M(oL,Jo,null),e(Jo,$er),e(Jo,xd),e(xd,ker),e(xd,iX),e(iX,Ser),e(xd,Rer),e(xd,dX),e(dX,Ber),e(xd,Per),e(Jo,Ier),e(Jo,rL),e(rL,qer),e(rL,bue),e(bue,Ner),e(rL,jer),e(Jo,Der),e(Jo,Mt),M(tL,Mt,null),e(Mt,Ger),e(Mt,vue),e(vue,Oer),e(Mt,Ver),e(Mt,$d),e($d,Xer),e($d,Fue),e(Fue,zer),e($d,Qer),e($d,cX),e(cX,Wer),e($d,Her),e(Mt,Uer),M(oT,Mt,null),e(Jo,Jer),e(Jo,_o),M(aL,_o,null),e(_o,Yer),e(_o,Tue),e(Tue,Ker),e(_o,Zer),e(_o,Ha),e(Ha,eor),e(Ha,Mue),e(Mue,oor),e(Ha,ror),e(Ha,Eue),e(Eue,tor),e(Ha,aor),e(Ha,Cue),e(Cue,nor),e(Ha,sor),e(_o,lor),e(_o,wue),e(wue,rT),e(rT,Aue),e(Aue,ior),e(rT,dor),e(rT,fX),e(fX,cor),e(rT,mor),e(_o,gor),e(_o,tT),e(tT,hor),e(tT,yue),e(yue,por),e(tT,uor),e(tT,Lue),e(Lue,_or),e(_o,bor),M(aT,_o,null),b(f,vPe,_),b(f,kd,_),e(kd,nT),e(nT,xue),M(nL,xue,null),e(kd,vor),e(kd,$ue),e($ue,For),b(f,FPe,_),b(f,Yo,_),M(sL,Yo,null),e(Yo,Tor),e(Yo,Sd),e(Sd,Mor),e(Sd,mX),e(mX,Eor),e(Sd,Cor),e(Sd,gX),e(gX,wor),e(Sd,Aor),e(Yo,yor),e(Yo,lL),e(lL,Lor),e(lL,kue),e(kue,xor),e(lL,$or),e(Yo,kor),e(Yo,Et),M(iL,Et,null),e(Et,Sor),e(Et,Sue),e(Sue,Ror),e(Et,Bor),e(Et,Rd),e(Rd,Por),e(Rd,Rue),e(Rue,Ior),e(Rd,qor),e(Rd,hX),e(hX,Nor),e(Rd,jor),e(Et,Dor),M(sT,Et,null),e(Yo,Gor),e(Yo,Cr),M(dL,Cr,null),e(Cr,Oor),e(Cr,Bue),e(Bue,Vor),e(Cr,Xor),e(Cr,Ua),e(Ua,zor),e(Ua,Pue),e(Pue,Qor),e(Ua,Wor),e(Ua,Iue),e(Iue,Hor),e(Ua,Uor),e(Ua,que),e(que,Jor),e(Ua,Yor),e(Cr,Kor),e(Cr,j),e(j,lT),e(lT,Nue),e(Nue,Zor),e(lT,err),e(lT,pX),e(pX,orr),e(lT,rrr),e(j,trr),e(j,iT),e(iT,jue),e(jue,arr),e(iT,nrr),e(iT,uX),e(uX,srr),e(iT,lrr),e(j,irr),e(j,dT),e(dT,Due),e(Due,drr),e(dT,crr),e(dT,_X),e(_X,frr),e(dT,mrr),e(j,grr),e(j,cT),e(cT,Gue),e(Gue,hrr),e(cT,prr),e(cT,bX),e(bX,urr),e(cT,_rr),e(j,brr),e(j,fT),e(fT,Oue),e(Oue,vrr),e(fT,Frr),e(fT,vX),e(vX,Trr),e(fT,Mrr),e(j,Err),e(j,mT),e(mT,Vue),e(Vue,Crr),e(mT,wrr),e(mT,FX),e(FX,Arr),e(mT,yrr),e(j,Lrr),e(j,gT),e(gT,Xue),e(Xue,xrr),e(gT,$rr),e(gT,TX),e(TX,krr),e(gT,Srr),e(j,Rrr),e(j,hT),e(hT,zue),e(zue,Brr),e(hT,Prr),e(hT,MX),e(MX,Irr),e(hT,qrr),e(j,Nrr),e(j,pT),e(pT,Que),e(Que,jrr),e(pT,Drr),e(pT,EX),e(EX,Grr),e(pT,Orr),e(j,Vrr),e(j,uT),e(uT,Wue),e(Wue,Xrr),e(uT,zrr),e(uT,CX),e(CX,Qrr),e(uT,Wrr),e(j,Hrr),e(j,_T),e(_T,Hue),e(Hue,Urr),e(_T,Jrr),e(_T,wX),e(wX,Yrr),e(_T,Krr),e(j,Zrr),e(j,bT),e(bT,Uue),e(Uue,etr),e(bT,otr),e(bT,AX),e(AX,rtr),e(bT,ttr),e(j,atr),e(j,vT),e(vT,Jue),e(Jue,ntr),e(vT,str),e(vT,yX),e(yX,ltr),e(vT,itr),e(j,dtr),e(j,FT),e(FT,Yue),e(Yue,ctr),e(FT,ftr),e(FT,LX),e(LX,mtr),e(FT,gtr),e(j,htr),e(j,TT),e(TT,Kue),e(Kue,ptr),e(TT,utr),e(TT,xX),e(xX,_tr),e(TT,btr),e(j,vtr),e(j,MT),e(MT,Zue),e(Zue,Ftr),e(MT,Ttr),e(MT,$X),e($X,Mtr),e(MT,Etr),e(j,Ctr),e(j,ET),e(ET,e_e),e(e_e,wtr),e(ET,Atr),e(ET,kX),e(kX,ytr),e(ET,Ltr),e(j,xtr),e(j,$s),e($s,o_e),e(o_e,$tr),e($s,ktr),e($s,SX),e(SX,Str),e($s,Rtr),e($s,RX),e(RX,Btr),e($s,Ptr),e(j,Itr),e(j,CT),e(CT,r_e),e(r_e,qtr),e(CT,Ntr),e(CT,BX),e(BX,jtr),e(CT,Dtr),e(j,Gtr),e(j,wT),e(wT,t_e),e(t_e,Otr),e(wT,Vtr),e(wT,PX),e(PX,Xtr),e(wT,ztr),e(j,Qtr),e(j,AT),e(AT,a_e),e(a_e,Wtr),e(AT,Htr),e(AT,IX),e(IX,Utr),e(AT,Jtr),e(j,Ytr),e(j,yT),e(yT,n_e),e(n_e,Ktr),e(yT,Ztr),e(yT,qX),e(qX,ear),e(yT,oar),e(j,rar),e(j,LT),e(LT,s_e),e(s_e,tar),e(LT,aar),e(LT,NX),e(NX,nar),e(LT,sar),e(j,lar),e(j,xT),e(xT,l_e),e(l_e,iar),e(xT,dar),e(xT,jX),e(jX,car),e(xT,far),e(j,mar),e(j,$T),e($T,i_e),e(i_e,gar),e($T,har),e($T,DX),e(DX,par),e($T,uar),e(j,_ar),e(j,kT),e(kT,d_e),e(d_e,bar),e(kT,Far),e(kT,GX),e(GX,Tar),e(kT,Mar),e(j,Ear),e(j,ST),e(ST,c_e),e(c_e,Car),e(ST,war),e(ST,OX),e(OX,Aar),e(ST,yar),e(j,Lar),e(j,RT),e(RT,f_e),e(f_e,xar),e(RT,$ar),e(RT,VX),e(VX,kar),e(RT,Sar),e(j,Rar),e(j,BT),e(BT,m_e),e(m_e,Bar),e(BT,Par),e(BT,XX),e(XX,Iar),e(BT,qar),e(j,Nar),e(j,PT),e(PT,g_e),e(g_e,jar),e(PT,Dar),e(PT,zX),e(zX,Gar),e(PT,Oar),e(j,Var),e(j,IT),e(IT,h_e),e(h_e,Xar),e(IT,zar),e(IT,QX),e(QX,Qar),e(IT,War),e(j,Har),e(j,qT),e(qT,p_e),e(p_e,Uar),e(qT,Jar),e(qT,WX),e(WX,Yar),e(qT,Kar),e(j,Zar),e(j,NT),e(NT,u_e),e(u_e,enr),e(NT,onr),e(NT,HX),e(HX,rnr),e(NT,tnr),e(j,anr),e(j,jT),e(jT,__e),e(__e,nnr),e(jT,snr),e(jT,UX),e(UX,lnr),e(jT,inr),e(j,dnr),e(j,DT),e(DT,b_e),e(b_e,cnr),e(DT,fnr),e(DT,JX),e(JX,mnr),e(DT,gnr),e(j,hnr),e(j,GT),e(GT,v_e),e(v_e,pnr),e(GT,unr),e(GT,YX),e(YX,_nr),e(GT,bnr),e(j,vnr),e(j,OT),e(OT,F_e),e(F_e,Fnr),e(OT,Tnr),e(OT,KX),e(KX,Mnr),e(OT,Enr),e(j,Cnr),e(j,VT),e(VT,T_e),e(T_e,wnr),e(VT,Anr),e(VT,ZX),e(ZX,ynr),e(VT,Lnr),e(j,xnr),e(j,XT),e(XT,M_e),e(M_e,$nr),e(XT,knr),e(XT,ez),e(ez,Snr),e(XT,Rnr),e(j,Bnr),e(j,zT),e(zT,E_e),e(E_e,Pnr),e(zT,Inr),e(zT,oz),e(oz,qnr),e(zT,Nnr),e(j,jnr),e(j,QT),e(QT,C_e),e(C_e,Dnr),e(QT,Gnr),e(QT,rz),e(rz,Onr),e(QT,Vnr),e(j,Xnr),e(j,WT),e(WT,w_e),e(w_e,znr),e(WT,Qnr),e(WT,tz),e(tz,Wnr),e(WT,Hnr),e(j,Unr),e(j,HT),e(HT,A_e),e(A_e,Jnr),e(HT,Ynr),e(HT,az),e(az,Knr),e(HT,Znr),e(j,esr),e(j,UT),e(UT,y_e),e(y_e,osr),e(UT,rsr),e(UT,nz),e(nz,tsr),e(UT,asr),e(j,nsr),e(j,JT),e(JT,L_e),e(L_e,ssr),e(JT,lsr),e(JT,sz),e(sz,isr),e(JT,dsr),e(Cr,csr),M(YT,Cr,null),b(f,TPe,_),b(f,Bd,_),e(Bd,KT),e(KT,x_e),M(cL,x_e,null),e(Bd,fsr),e(Bd,$_e),e($_e,msr),b(f,MPe,_),b(f,Ko,_),M(fL,Ko,null),e(Ko,gsr),e(Ko,Pd),e(Pd,hsr),e(Pd,lz),e(lz,psr),e(Pd,usr),e(Pd,iz),e(iz,_sr),e(Pd,bsr),e(Ko,vsr),e(Ko,mL),e(mL,Fsr),e(mL,k_e),e(k_e,Tsr),e(mL,Msr),e(Ko,Esr),e(Ko,Ct),M(gL,Ct,null),e(Ct,Csr),e(Ct,S_e),e(S_e,wsr),e(Ct,Asr),e(Ct,Id),e(Id,ysr),e(Id,R_e),e(R_e,Lsr),e(Id,xsr),e(Id,dz),e(dz,$sr),e(Id,ksr),e(Ct,Ssr),M(ZT,Ct,null),e(Ko,Rsr),e(Ko,wr),M(hL,wr,null),e(wr,Bsr),e(wr,B_e),e(B_e,Psr),e(wr,Isr),e(wr,Ja),e(Ja,qsr),e(Ja,P_e),e(P_e,Nsr),e(Ja,jsr),e(Ja,I_e),e(I_e,Dsr),e(Ja,Gsr),e(Ja,q_e),e(q_e,Osr),e(Ja,Vsr),e(wr,Xsr),e(wr,ne),e(ne,e8),e(e8,N_e),e(N_e,zsr),e(e8,Qsr),e(e8,cz),e(cz,Wsr),e(e8,Hsr),e(ne,Usr),e(ne,o8),e(o8,j_e),e(j_e,Jsr),e(o8,Ysr),e(o8,fz),e(fz,Ksr),e(o8,Zsr),e(ne,elr),e(ne,r8),e(r8,D_e),e(D_e,olr),e(r8,rlr),e(r8,mz),e(mz,tlr),e(r8,alr),e(ne,nlr),e(ne,t8),e(t8,G_e),e(G_e,slr),e(t8,llr),e(t8,gz),e(gz,ilr),e(t8,dlr),e(ne,clr),e(ne,a8),e(a8,O_e),e(O_e,flr),e(a8,mlr),e(a8,hz),e(hz,glr),e(a8,hlr),e(ne,plr),e(ne,n8),e(n8,V_e),e(V_e,ulr),e(n8,_lr),e(n8,pz),e(pz,blr),e(n8,vlr),e(ne,Flr),e(ne,s8),e(s8,X_e),e(X_e,Tlr),e(s8,Mlr),e(s8,uz),e(uz,Elr),e(s8,Clr),e(ne,wlr),e(ne,l8),e(l8,z_e),e(z_e,Alr),e(l8,ylr),e(l8,_z),e(_z,Llr),e(l8,xlr),e(ne,$lr),e(ne,i8),e(i8,Q_e),e(Q_e,klr),e(i8,Slr),e(i8,bz),e(bz,Rlr),e(i8,Blr),e(ne,Plr),e(ne,d8),e(d8,W_e),e(W_e,Ilr),e(d8,qlr),e(d8,vz),e(vz,Nlr),e(d8,jlr),e(ne,Dlr),e(ne,c8),e(c8,H_e),e(H_e,Glr),e(c8,Olr),e(c8,Fz),e(Fz,Vlr),e(c8,Xlr),e(ne,zlr),e(ne,f8),e(f8,U_e),e(U_e,Qlr),e(f8,Wlr),e(f8,Tz),e(Tz,Hlr),e(f8,Ulr),e(ne,Jlr),e(ne,m8),e(m8,J_e),e(J_e,Ylr),e(m8,Klr),e(m8,Mz),e(Mz,Zlr),e(m8,eir),e(ne,oir),e(ne,g8),e(g8,Y_e),e(Y_e,rir),e(g8,tir),e(g8,Ez),e(Ez,air),e(g8,nir),e(ne,sir),e(ne,h8),e(h8,K_e),e(K_e,lir),e(h8,iir),e(h8,Cz),e(Cz,dir),e(h8,cir),e(ne,fir),e(ne,p8),e(p8,Z_e),e(Z_e,mir),e(p8,gir),e(p8,wz),e(wz,hir),e(p8,pir),e(ne,uir),e(ne,u8),e(u8,e2e),e(e2e,_ir),e(u8,bir),e(u8,Az),e(Az,vir),e(u8,Fir),e(ne,Tir),e(ne,_8),e(_8,o2e),e(o2e,Mir),e(_8,Eir),e(_8,yz),e(yz,Cir),e(_8,wir),e(ne,Air),e(ne,b8),e(b8,r2e),e(r2e,yir),e(b8,Lir),e(b8,Lz),e(Lz,xir),e(b8,$ir),e(ne,kir),e(ne,v8),e(v8,t2e),e(t2e,Sir),e(v8,Rir),e(v8,xz),e(xz,Bir),e(v8,Pir),e(ne,Iir),e(ne,F8),e(F8,a2e),e(a2e,qir),e(F8,Nir),e(F8,$z),e($z,jir),e(F8,Dir),e(ne,Gir),e(ne,T8),e(T8,n2e),e(n2e,Oir),e(T8,Vir),e(T8,kz),e(kz,Xir),e(T8,zir),e(ne,Qir),e(ne,M8),e(M8,s2e),e(s2e,Wir),e(M8,Hir),e(M8,Sz),e(Sz,Uir),e(M8,Jir),e(wr,Yir),M(E8,wr,null),b(f,EPe,_),b(f,qd,_),e(qd,C8),e(C8,l2e),M(pL,l2e,null),e(qd,Kir),e(qd,i2e),e(i2e,Zir),b(f,CPe,_),b(f,Zo,_),M(uL,Zo,null),e(Zo,edr),e(Zo,Nd),e(Nd,odr),e(Nd,Rz),e(Rz,rdr),e(Nd,tdr),e(Nd,Bz),e(Bz,adr),e(Nd,ndr),e(Zo,sdr),e(Zo,_L),e(_L,ldr),e(_L,d2e),e(d2e,idr),e(_L,ddr),e(Zo,cdr),e(Zo,wt),M(bL,wt,null),e(wt,fdr),e(wt,c2e),e(c2e,mdr),e(wt,gdr),e(wt,jd),e(jd,hdr),e(jd,f2e),e(f2e,pdr),e(jd,udr),e(jd,Pz),e(Pz,_dr),e(jd,bdr),e(wt,vdr),M(w8,wt,null),e(Zo,Fdr),e(Zo,Ar),M(vL,Ar,null),e(Ar,Tdr),e(Ar,m2e),e(m2e,Mdr),e(Ar,Edr),e(Ar,Ya),e(Ya,Cdr),e(Ya,g2e),e(g2e,wdr),e(Ya,Adr),e(Ya,h2e),e(h2e,ydr),e(Ya,Ldr),e(Ya,p2e),e(p2e,xdr),e(Ya,$dr),e(Ar,kdr),e(Ar,Te),e(Te,A8),e(A8,u2e),e(u2e,Sdr),e(A8,Rdr),e(A8,Iz),e(Iz,Bdr),e(A8,Pdr),e(Te,Idr),e(Te,y8),e(y8,_2e),e(_2e,qdr),e(y8,Ndr),e(y8,qz),e(qz,jdr),e(y8,Ddr),e(Te,Gdr),e(Te,L8),e(L8,b2e),e(b2e,Odr),e(L8,Vdr),e(L8,Nz),e(Nz,Xdr),e(L8,zdr),e(Te,Qdr),e(Te,x8),e(x8,v2e),e(v2e,Wdr),e(x8,Hdr),e(x8,jz),e(jz,Udr),e(x8,Jdr),e(Te,Ydr),e(Te,$8),e($8,F2e),e(F2e,Kdr),e($8,Zdr),e($8,Dz),e(Dz,ecr),e($8,ocr),e(Te,rcr),e(Te,k8),e(k8,T2e),e(T2e,tcr),e(k8,acr),e(k8,Gz),e(Gz,ncr),e(k8,scr),e(Te,lcr),e(Te,S8),e(S8,M2e),e(M2e,icr),e(S8,dcr),e(S8,Oz),e(Oz,ccr),e(S8,fcr),e(Te,mcr),e(Te,R8),e(R8,E2e),e(E2e,gcr),e(R8,hcr),e(R8,Vz),e(Vz,pcr),e(R8,ucr),e(Te,_cr),e(Te,B8),e(B8,C2e),e(C2e,bcr),e(B8,vcr),e(B8,Xz),e(Xz,Fcr),e(B8,Tcr),e(Te,Mcr),e(Te,P8),e(P8,w2e),e(w2e,Ecr),e(P8,Ccr),e(P8,zz),e(zz,wcr),e(P8,Acr),e(Te,ycr),e(Te,I8),e(I8,A2e),e(A2e,Lcr),e(I8,xcr),e(I8,Qz),e(Qz,$cr),e(I8,kcr),e(Te,Scr),e(Te,q8),e(q8,y2e),e(y2e,Rcr),e(q8,Bcr),e(q8,Wz),e(Wz,Pcr),e(q8,Icr),e(Ar,qcr),M(N8,Ar,null),b(f,wPe,_),b(f,Dd,_),e(Dd,j8),e(j8,L2e),M(FL,L2e,null),e(Dd,Ncr),e(Dd,x2e),e(x2e,jcr),b(f,APe,_),b(f,er,_),M(TL,er,null),e(er,Dcr),e(er,Gd),e(Gd,Gcr),e(Gd,Hz),e(Hz,Ocr),e(Gd,Vcr),e(Gd,Uz),e(Uz,Xcr),e(Gd,zcr),e(er,Qcr),e(er,ML),e(ML,Wcr),e(ML,$2e),e($2e,Hcr),e(ML,Ucr),e(er,Jcr),e(er,At),M(EL,At,null),e(At,Ycr),e(At,k2e),e(k2e,Kcr),e(At,Zcr),e(At,Od),e(Od,efr),e(Od,S2e),e(S2e,ofr),e(Od,rfr),e(Od,Jz),e(Jz,tfr),e(Od,afr),e(At,nfr),M(D8,At,null),e(er,sfr),e(er,yr),M(CL,yr,null),e(yr,lfr),e(yr,R2e),e(R2e,ifr),e(yr,dfr),e(yr,Ka),e(Ka,cfr),e(Ka,B2e),e(B2e,ffr),e(Ka,mfr),e(Ka,P2e),e(P2e,gfr),e(Ka,hfr),e(Ka,I2e),e(I2e,pfr),e(Ka,ufr),e(yr,_fr),e(yr,Vd),e(Vd,G8),e(G8,q2e),e(q2e,bfr),e(G8,vfr),e(G8,Yz),e(Yz,Ffr),e(G8,Tfr),e(Vd,Mfr),e(Vd,O8),e(O8,N2e),e(N2e,Efr),e(O8,Cfr),e(O8,Kz),e(Kz,wfr),e(O8,Afr),e(Vd,yfr),e(Vd,V8),e(V8,j2e),e(j2e,Lfr),e(V8,xfr),e(V8,Zz),e(Zz,$fr),e(V8,kfr),e(yr,Sfr),M(X8,yr,null),b(f,yPe,_),b(f,Xd,_),e(Xd,z8),e(z8,D2e),M(wL,D2e,null),e(Xd,Rfr),e(Xd,G2e),e(G2e,Bfr),b(f,LPe,_),b(f,or,_),M(AL,or,null),e(or,Pfr),e(or,zd),e(zd,Ifr),e(zd,eQ),e(eQ,qfr),e(zd,Nfr),e(zd,oQ),e(oQ,jfr),e(zd,Dfr),e(or,Gfr),e(or,yL),e(yL,Ofr),e(yL,O2e),e(O2e,Vfr),e(yL,Xfr),e(or,zfr),e(or,yt),M(LL,yt,null),e(yt,Qfr),e(yt,V2e),e(V2e,Wfr),e(yt,Hfr),e(yt,Qd),e(Qd,Ufr),e(Qd,X2e),e(X2e,Jfr),e(Qd,Yfr),e(Qd,rQ),e(rQ,Kfr),e(Qd,Zfr),e(yt,emr),M(Q8,yt,null),e(or,omr),e(or,Lr),M(xL,Lr,null),e(Lr,rmr),e(Lr,z2e),e(z2e,tmr),e(Lr,amr),e(Lr,Za),e(Za,nmr),e(Za,Q2e),e(Q2e,smr),e(Za,lmr),e(Za,W2e),e(W2e,imr),e(Za,dmr),e(Za,H2e),e(H2e,cmr),e(Za,fmr),e(Lr,mmr),e(Lr,ie),e(ie,W8),e(W8,U2e),e(U2e,gmr),e(W8,hmr),e(W8,tQ),e(tQ,pmr),e(W8,umr),e(ie,_mr),e(ie,H8),e(H8,J2e),e(J2e,bmr),e(H8,vmr),e(H8,aQ),e(aQ,Fmr),e(H8,Tmr),e(ie,Mmr),e(ie,U8),e(U8,Y2e),e(Y2e,Emr),e(U8,Cmr),e(U8,nQ),e(nQ,wmr),e(U8,Amr),e(ie,ymr),e(ie,J8),e(J8,K2e),e(K2e,Lmr),e(J8,xmr),e(J8,sQ),e(sQ,$mr),e(J8,kmr),e(ie,Smr),e(ie,Y8),e(Y8,Z2e),e(Z2e,Rmr),e(Y8,Bmr),e(Y8,lQ),e(lQ,Pmr),e(Y8,Imr),e(ie,qmr),e(ie,K8),e(K8,e6e),e(e6e,Nmr),e(K8,jmr),e(K8,iQ),e(iQ,Dmr),e(K8,Gmr),e(ie,Omr),e(ie,Z8),e(Z8,o6e),e(o6e,Vmr),e(Z8,Xmr),e(Z8,dQ),e(dQ,zmr),e(Z8,Qmr),e(ie,Wmr),e(ie,eM),e(eM,r6e),e(r6e,Hmr),e(eM,Umr),e(eM,cQ),e(cQ,Jmr),e(eM,Ymr),e(ie,Kmr),e(ie,oM),e(oM,t6e),e(t6e,Zmr),e(oM,egr),e(oM,fQ),e(fQ,ogr),e(oM,rgr),e(ie,tgr),e(ie,rM),e(rM,a6e),e(a6e,agr),e(rM,ngr),e(rM,mQ),e(mQ,sgr),e(rM,lgr),e(ie,igr),e(ie,tM),e(tM,n6e),e(n6e,dgr),e(tM,cgr),e(tM,gQ),e(gQ,fgr),e(tM,mgr),e(ie,ggr),e(ie,aM),e(aM,s6e),e(s6e,hgr),e(aM,pgr),e(aM,hQ),e(hQ,ugr),e(aM,_gr),e(ie,bgr),e(ie,nM),e(nM,l6e),e(l6e,vgr),e(nM,Fgr),e(nM,pQ),e(pQ,Tgr),e(nM,Mgr),e(ie,Egr),e(ie,sM),e(sM,i6e),e(i6e,Cgr),e(sM,wgr),e(sM,uQ),e(uQ,Agr),e(sM,ygr),e(ie,Lgr),e(ie,lM),e(lM,d6e),e(d6e,xgr),e(lM,$gr),e(lM,_Q),e(_Q,kgr),e(lM,Sgr),e(ie,Rgr),e(ie,iM),e(iM,c6e),e(c6e,Bgr),e(iM,Pgr),e(iM,bQ),e(bQ,Igr),e(iM,qgr),e(ie,Ngr),e(ie,dM),e(dM,f6e),e(f6e,jgr),e(dM,Dgr),e(dM,vQ),e(vQ,Ggr),e(dM,Ogr),e(ie,Vgr),e(ie,cM),e(cM,m6e),e(m6e,Xgr),e(cM,zgr),e(cM,FQ),e(FQ,Qgr),e(cM,Wgr),e(ie,Hgr),e(ie,fM),e(fM,g6e),e(g6e,Ugr),e(fM,Jgr),e(fM,TQ),e(TQ,Ygr),e(fM,Kgr),e(ie,Zgr),e(ie,mM),e(mM,h6e),e(h6e,ehr),e(mM,ohr),e(mM,MQ),e(MQ,rhr),e(mM,thr),e(Lr,ahr),M(gM,Lr,null),b(f,xPe,_),b(f,Wd,_),e(Wd,hM),e(hM,p6e),M($L,p6e,null),e(Wd,nhr),e(Wd,u6e),e(u6e,shr),b(f,$Pe,_),b(f,rr,_),M(kL,rr,null),e(rr,lhr),e(rr,Hd),e(Hd,ihr),e(Hd,EQ),e(EQ,dhr),e(Hd,chr),e(Hd,CQ),e(CQ,fhr),e(Hd,mhr),e(rr,ghr),e(rr,SL),e(SL,hhr),e(SL,_6e),e(_6e,phr),e(SL,uhr),e(rr,_hr),e(rr,Lt),M(RL,Lt,null),e(Lt,bhr),e(Lt,b6e),e(b6e,vhr),e(Lt,Fhr),e(Lt,Ud),e(Ud,Thr),e(Ud,v6e),e(v6e,Mhr),e(Ud,Ehr),e(Ud,wQ),e(wQ,Chr),e(Ud,whr),e(Lt,Ahr),M(pM,Lt,null),e(rr,yhr),e(rr,xr),M(BL,xr,null),e(xr,Lhr),e(xr,F6e),e(F6e,xhr),e(xr,$hr),e(xr,en),e(en,khr),e(en,T6e),e(T6e,Shr),e(en,Rhr),e(en,M6e),e(M6e,Bhr),e(en,Phr),e(en,E6e),e(E6e,Ihr),e(en,qhr),e(xr,Nhr),e(xr,ye),e(ye,uM),e(uM,C6e),e(C6e,jhr),e(uM,Dhr),e(uM,AQ),e(AQ,Ghr),e(uM,Ohr),e(ye,Vhr),e(ye,_M),e(_M,w6e),e(w6e,Xhr),e(_M,zhr),e(_M,yQ),e(yQ,Qhr),e(_M,Whr),e(ye,Hhr),e(ye,bM),e(bM,A6e),e(A6e,Uhr),e(bM,Jhr),e(bM,LQ),e(LQ,Yhr),e(bM,Khr),e(ye,Zhr),e(ye,vM),e(vM,y6e),e(y6e,epr),e(vM,opr),e(vM,xQ),e(xQ,rpr),e(vM,tpr),e(ye,apr),e(ye,FM),e(FM,L6e),e(L6e,npr),e(FM,spr),e(FM,$Q),e($Q,lpr),e(FM,ipr),e(ye,dpr),e(ye,TM),e(TM,x6e),e(x6e,cpr),e(TM,fpr),e(TM,kQ),e(kQ,mpr),e(TM,gpr),e(ye,hpr),e(ye,MM),e(MM,$6e),e($6e,ppr),e(MM,upr),e(MM,SQ),e(SQ,_pr),e(MM,bpr),e(ye,vpr),e(ye,EM),e(EM,k6e),e(k6e,Fpr),e(EM,Tpr),e(EM,RQ),e(RQ,Mpr),e(EM,Epr),e(ye,Cpr),e(ye,CM),e(CM,S6e),e(S6e,wpr),e(CM,Apr),e(CM,BQ),e(BQ,ypr),e(CM,Lpr),e(ye,xpr),e(ye,wM),e(wM,R6e),e(R6e,$pr),e(wM,kpr),e(wM,PQ),e(PQ,Spr),e(wM,Rpr),e(xr,Bpr),M(AM,xr,null),b(f,kPe,_),b(f,Jd,_),e(Jd,yM),e(yM,B6e),M(PL,B6e,null),e(Jd,Ppr),e(Jd,P6e),e(P6e,Ipr),b(f,SPe,_),b(f,tr,_),M(IL,tr,null),e(tr,qpr),e(tr,Yd),e(Yd,Npr),e(Yd,IQ),e(IQ,jpr),e(Yd,Dpr),e(Yd,qQ),e(qQ,Gpr),e(Yd,Opr),e(tr,Vpr),e(tr,qL),e(qL,Xpr),e(qL,I6e),e(I6e,zpr),e(qL,Qpr),e(tr,Wpr),e(tr,xt),M(NL,xt,null),e(xt,Hpr),e(xt,q6e),e(q6e,Upr),e(xt,Jpr),e(xt,Kd),e(Kd,Ypr),e(Kd,N6e),e(N6e,Kpr),e(Kd,Zpr),e(Kd,NQ),e(NQ,eur),e(Kd,our),e(xt,rur),M(LM,xt,null),e(tr,tur),e(tr,$r),M(jL,$r,null),e($r,aur),e($r,j6e),e(j6e,nur),e($r,sur),e($r,on),e(on,lur),e(on,D6e),e(D6e,iur),e(on,dur),e(on,G6e),e(G6e,cur),e(on,fur),e(on,O6e),e(O6e,mur),e(on,gur),e($r,hur),e($r,Z),e(Z,xM),e(xM,V6e),e(V6e,pur),e(xM,uur),e(xM,jQ),e(jQ,_ur),e(xM,bur),e(Z,vur),e(Z,$M),e($M,X6e),e(X6e,Fur),e($M,Tur),e($M,DQ),e(DQ,Mur),e($M,Eur),e(Z,Cur),e(Z,kM),e(kM,z6e),e(z6e,wur),e(kM,Aur),e(kM,GQ),e(GQ,yur),e(kM,Lur),e(Z,xur),e(Z,SM),e(SM,Q6e),e(Q6e,$ur),e(SM,kur),e(SM,OQ),e(OQ,Sur),e(SM,Rur),e(Z,Bur),e(Z,RM),e(RM,W6e),e(W6e,Pur),e(RM,Iur),e(RM,VQ),e(VQ,qur),e(RM,Nur),e(Z,jur),e(Z,BM),e(BM,H6e),e(H6e,Dur),e(BM,Gur),e(BM,XQ),e(XQ,Our),e(BM,Vur),e(Z,Xur),e(Z,PM),e(PM,U6e),e(U6e,zur),e(PM,Qur),e(PM,zQ),e(zQ,Wur),e(PM,Hur),e(Z,Uur),e(Z,IM),e(IM,J6e),e(J6e,Jur),e(IM,Yur),e(IM,QQ),e(QQ,Kur),e(IM,Zur),e(Z,e_r),e(Z,qM),e(qM,Y6e),e(Y6e,o_r),e(qM,r_r),e(qM,WQ),e(WQ,t_r),e(qM,a_r),e(Z,n_r),e(Z,NM),e(NM,K6e),e(K6e,s_r),e(NM,l_r),e(NM,HQ),e(HQ,i_r),e(NM,d_r),e(Z,c_r),e(Z,jM),e(jM,Z6e),e(Z6e,f_r),e(jM,m_r),e(jM,UQ),e(UQ,g_r),e(jM,h_r),e(Z,p_r),e(Z,DM),e(DM,e1e),e(e1e,u_r),e(DM,__r),e(DM,JQ),e(JQ,b_r),e(DM,v_r),e(Z,F_r),e(Z,GM),e(GM,o1e),e(o1e,T_r),e(GM,M_r),e(GM,YQ),e(YQ,E_r),e(GM,C_r),e(Z,w_r),e(Z,OM),e(OM,r1e),e(r1e,A_r),e(OM,y_r),e(OM,KQ),e(KQ,L_r),e(OM,x_r),e(Z,$_r),e(Z,VM),e(VM,t1e),e(t1e,k_r),e(VM,S_r),e(VM,ZQ),e(ZQ,R_r),e(VM,B_r),e(Z,P_r),e(Z,XM),e(XM,a1e),e(a1e,I_r),e(XM,q_r),e(XM,eW),e(eW,N_r),e(XM,j_r),e(Z,D_r),e(Z,zM),e(zM,n1e),e(n1e,G_r),e(zM,O_r),e(zM,oW),e(oW,V_r),e(zM,X_r),e(Z,z_r),e(Z,QM),e(QM,s1e),e(s1e,Q_r),e(QM,W_r),e(QM,rW),e(rW,H_r),e(QM,U_r),e(Z,J_r),e(Z,WM),e(WM,l1e),e(l1e,Y_r),e(WM,K_r),e(WM,tW),e(tW,Z_r),e(WM,e2r),e(Z,o2r),e(Z,HM),e(HM,i1e),e(i1e,r2r),e(HM,t2r),e(HM,aW),e(aW,a2r),e(HM,n2r),e(Z,s2r),e(Z,UM),e(UM,d1e),e(d1e,l2r),e(UM,i2r),e(UM,nW),e(nW,d2r),e(UM,c2r),e(Z,f2r),e(Z,JM),e(JM,c1e),e(c1e,m2r),e(JM,g2r),e(JM,sW),e(sW,h2r),e(JM,p2r),e(Z,u2r),e(Z,YM),e(YM,f1e),e(f1e,_2r),e(YM,b2r),e(YM,lW),e(lW,v2r),e(YM,F2r),e(Z,T2r),e(Z,KM),e(KM,m1e),e(m1e,M2r),e(KM,E2r),e(KM,iW),e(iW,C2r),e(KM,w2r),e(Z,A2r),e(Z,ZM),e(ZM,g1e),e(g1e,y2r),e(ZM,L2r),e(ZM,dW),e(dW,x2r),e(ZM,$2r),e(Z,k2r),e(Z,e4),e(e4,h1e),e(h1e,S2r),e(e4,R2r),e(e4,cW),e(cW,B2r),e(e4,P2r),e($r,I2r),M(o4,$r,null),b(f,RPe,_),b(f,Zd,_),e(Zd,r4),e(r4,p1e),M(DL,p1e,null),e(Zd,q2r),e(Zd,u1e),e(u1e,N2r),b(f,BPe,_),b(f,ar,_),M(GL,ar,null),e(ar,j2r),e(ar,ec),e(ec,D2r),e(ec,fW),e(fW,G2r),e(ec,O2r),e(ec,mW),e(mW,V2r),e(ec,X2r),e(ar,z2r),e(ar,OL),e(OL,Q2r),e(OL,_1e),e(_1e,W2r),e(OL,H2r),e(ar,U2r),e(ar,$t),M(VL,$t,null),e($t,J2r),e($t,b1e),e(b1e,Y2r),e($t,K2r),e($t,oc),e(oc,Z2r),e(oc,v1e),e(v1e,e6r),e(oc,o6r),e(oc,gW),e(gW,r6r),e(oc,t6r),e($t,a6r),M(t4,$t,null),e(ar,n6r),e(ar,kr),M(XL,kr,null),e(kr,s6r),e(kr,F1e),e(F1e,l6r),e(kr,i6r),e(kr,rn),e(rn,d6r),e(rn,T1e),e(T1e,c6r),e(rn,f6r),e(rn,M1e),e(M1e,m6r),e(rn,g6r),e(rn,E1e),e(E1e,h6r),e(rn,p6r),e(kr,u6r),e(kr,pe),e(pe,a4),e(a4,C1e),e(C1e,_6r),e(a4,b6r),e(a4,hW),e(hW,v6r),e(a4,F6r),e(pe,T6r),e(pe,n4),e(n4,w1e),e(w1e,M6r),e(n4,E6r),e(n4,pW),e(pW,C6r),e(n4,w6r),e(pe,A6r),e(pe,s4),e(s4,A1e),e(A1e,y6r),e(s4,L6r),e(s4,uW),e(uW,x6r),e(s4,$6r),e(pe,k6r),e(pe,l4),e(l4,y1e),e(y1e,S6r),e(l4,R6r),e(l4,_W),e(_W,B6r),e(l4,P6r),e(pe,I6r),e(pe,i4),e(i4,L1e),e(L1e,q6r),e(i4,N6r),e(i4,bW),e(bW,j6r),e(i4,D6r),e(pe,G6r),e(pe,d4),e(d4,x1e),e(x1e,O6r),e(d4,V6r),e(d4,vW),e(vW,X6r),e(d4,z6r),e(pe,Q6r),e(pe,c4),e(c4,$1e),e($1e,W6r),e(c4,H6r),e(c4,FW),e(FW,U6r),e(c4,J6r),e(pe,Y6r),e(pe,f4),e(f4,k1e),e(k1e,K6r),e(f4,Z6r),e(f4,TW),e(TW,e1r),e(f4,o1r),e(pe,r1r),e(pe,m4),e(m4,S1e),e(S1e,t1r),e(m4,a1r),e(m4,MW),e(MW,n1r),e(m4,s1r),e(pe,l1r),e(pe,g4),e(g4,R1e),e(R1e,i1r),e(g4,d1r),e(g4,EW),e(EW,c1r),e(g4,f1r),e(pe,m1r),e(pe,h4),e(h4,B1e),e(B1e,g1r),e(h4,h1r),e(h4,CW),e(CW,p1r),e(h4,u1r),e(pe,_1r),e(pe,p4),e(p4,P1e),e(P1e,b1r),e(p4,v1r),e(p4,wW),e(wW,F1r),e(p4,T1r),e(pe,M1r),e(pe,u4),e(u4,I1e),e(I1e,E1r),e(u4,C1r),e(u4,AW),e(AW,w1r),e(u4,A1r),e(pe,y1r),e(pe,_4),e(_4,q1e),e(q1e,L1r),e(_4,x1r),e(_4,yW),e(yW,$1r),e(_4,k1r),e(pe,S1r),e(pe,b4),e(b4,N1e),e(N1e,R1r),e(b4,B1r),e(b4,LW),e(LW,P1r),e(b4,I1r),e(pe,q1r),e(pe,v4),e(v4,j1e),e(j1e,N1r),e(v4,j1r),e(v4,xW),e(xW,D1r),e(v4,G1r),e(pe,O1r),e(pe,F4),e(F4,D1e),e(D1e,V1r),e(F4,X1r),e(F4,$W),e($W,z1r),e(F4,Q1r),e(kr,W1r),M(T4,kr,null),b(f,PPe,_),b(f,rc,_),e(rc,M4),e(M4,G1e),M(zL,G1e,null),e(rc,H1r),e(rc,O1e),e(O1e,U1r),b(f,IPe,_),b(f,nr,_),M(QL,nr,null),e(nr,J1r),e(nr,tc),e(tc,Y1r),e(tc,kW),e(kW,K1r),e(tc,Z1r),e(tc,SW),e(SW,ebr),e(tc,obr),e(nr,rbr),e(nr,WL),e(WL,tbr),e(WL,V1e),e(V1e,abr),e(WL,nbr),e(nr,sbr),e(nr,kt),M(HL,kt,null),e(kt,lbr),e(kt,X1e),e(X1e,ibr),e(kt,dbr),e(kt,ac),e(ac,cbr),e(ac,z1e),e(z1e,fbr),e(ac,mbr),e(ac,RW),e(RW,gbr),e(ac,hbr),e(kt,pbr),M(E4,kt,null),e(nr,ubr),e(nr,Sr),M(UL,Sr,null),e(Sr,_br),e(Sr,Q1e),e(Q1e,bbr),e(Sr,vbr),e(Sr,tn),e(tn,Fbr),e(tn,W1e),e(W1e,Tbr),e(tn,Mbr),e(tn,H1e),e(H1e,Ebr),e(tn,Cbr),e(tn,U1e),e(U1e,wbr),e(tn,Abr),e(Sr,ybr),e(Sr,J1e),e(J1e,C4),e(C4,Y1e),e(Y1e,Lbr),e(C4,xbr),e(C4,BW),e(BW,$br),e(C4,kbr),e(Sr,Sbr),M(w4,Sr,null),b(f,qPe,_),b(f,nc,_),e(nc,A4),e(A4,K1e),M(JL,K1e,null),e(nc,Rbr),e(nc,Z1e),e(Z1e,Bbr),b(f,NPe,_),b(f,sr,_),M(YL,sr,null),e(sr,Pbr),e(sr,sc),e(sc,Ibr),e(sc,PW),e(PW,qbr),e(sc,Nbr),e(sc,IW),e(IW,jbr),e(sc,Dbr),e(sr,Gbr),e(sr,KL),e(KL,Obr),e(KL,ebe),e(ebe,Vbr),e(KL,Xbr),e(sr,zbr),e(sr,St),M(ZL,St,null),e(St,Qbr),e(St,obe),e(obe,Wbr),e(St,Hbr),e(St,lc),e(lc,Ubr),e(lc,rbe),e(rbe,Jbr),e(lc,Ybr),e(lc,qW),e(qW,Kbr),e(lc,Zbr),e(St,evr),M(y4,St,null),e(sr,ovr),e(sr,Rr),M(e7,Rr,null),e(Rr,rvr),e(Rr,tbe),e(tbe,tvr),e(Rr,avr),e(Rr,an),e(an,nvr),e(an,abe),e(abe,svr),e(an,lvr),e(an,nbe),e(nbe,ivr),e(an,dvr),e(an,sbe),e(sbe,cvr),e(an,fvr),e(Rr,mvr),e(Rr,de),e(de,L4),e(L4,lbe),e(lbe,gvr),e(L4,hvr),e(L4,NW),e(NW,pvr),e(L4,uvr),e(de,_vr),e(de,x4),e(x4,ibe),e(ibe,bvr),e(x4,vvr),e(x4,jW),e(jW,Fvr),e(x4,Tvr),e(de,Mvr),e(de,$4),e($4,dbe),e(dbe,Evr),e($4,Cvr),e($4,DW),e(DW,wvr),e($4,Avr),e(de,yvr),e(de,k4),e(k4,cbe),e(cbe,Lvr),e(k4,xvr),e(k4,GW),e(GW,$vr),e(k4,kvr),e(de,Svr),e(de,S4),e(S4,fbe),e(fbe,Rvr),e(S4,Bvr),e(S4,OW),e(OW,Pvr),e(S4,Ivr),e(de,qvr),e(de,R4),e(R4,mbe),e(mbe,Nvr),e(R4,jvr),e(R4,VW),e(VW,Dvr),e(R4,Gvr),e(de,Ovr),e(de,B4),e(B4,gbe),e(gbe,Vvr),e(B4,Xvr),e(B4,XW),e(XW,zvr),e(B4,Qvr),e(de,Wvr),e(de,P4),e(P4,hbe),e(hbe,Hvr),e(P4,Uvr),e(P4,zW),e(zW,Jvr),e(P4,Yvr),e(de,Kvr),e(de,I4),e(I4,pbe),e(pbe,Zvr),e(I4,eFr),e(I4,QW),e(QW,oFr),e(I4,rFr),e(de,tFr),e(de,q4),e(q4,ube),e(ube,aFr),e(q4,nFr),e(q4,WW),e(WW,sFr),e(q4,lFr),e(de,iFr),e(de,N4),e(N4,_be),e(_be,dFr),e(N4,cFr),e(N4,HW),e(HW,fFr),e(N4,mFr),e(de,gFr),e(de,j4),e(j4,bbe),e(bbe,hFr),e(j4,pFr),e(j4,UW),e(UW,uFr),e(j4,_Fr),e(de,bFr),e(de,D4),e(D4,vbe),e(vbe,vFr),e(D4,FFr),e(D4,JW),e(JW,TFr),e(D4,MFr),e(de,EFr),e(de,G4),e(G4,Fbe),e(Fbe,CFr),e(G4,wFr),e(G4,YW),e(YW,AFr),e(G4,yFr),e(de,LFr),e(de,O4),e(O4,Tbe),e(Tbe,xFr),e(O4,$Fr),e(O4,KW),e(KW,kFr),e(O4,SFr),e(de,RFr),e(de,V4),e(V4,Mbe),e(Mbe,BFr),e(V4,PFr),e(V4,ZW),e(ZW,IFr),e(V4,qFr),e(de,NFr),e(de,X4),e(X4,Ebe),e(Ebe,jFr),e(X4,DFr),e(X4,eH),e(eH,GFr),e(X4,OFr),e(de,VFr),e(de,z4),e(z4,Cbe),e(Cbe,XFr),e(z4,zFr),e(z4,oH),e(oH,QFr),e(z4,WFr),e(de,HFr),e(de,Q4),e(Q4,wbe),e(wbe,UFr),e(Q4,JFr),e(Q4,rH),e(rH,YFr),e(Q4,KFr),e(de,ZFr),e(de,W4),e(W4,Abe),e(Abe,eTr),e(W4,oTr),e(W4,tH),e(tH,rTr),e(W4,tTr),e(Rr,aTr),M(H4,Rr,null),b(f,jPe,_),b(f,ic,_),e(ic,U4),e(U4,ybe),M(o7,ybe,null),e(ic,nTr),e(ic,Lbe),e(Lbe,sTr),b(f,DPe,_),b(f,lr,_),M(r7,lr,null),e(lr,lTr),e(lr,dc),e(dc,iTr),e(dc,aH),e(aH,dTr),e(dc,cTr),e(dc,nH),e(nH,fTr),e(dc,mTr),e(lr,gTr),e(lr,t7),e(t7,hTr),e(t7,xbe),e(xbe,pTr),e(t7,uTr),e(lr,_Tr),e(lr,Rt),M(a7,Rt,null),e(Rt,bTr),e(Rt,$be),e($be,vTr),e(Rt,FTr),e(Rt,cc),e(cc,TTr),e(cc,kbe),e(kbe,MTr),e(cc,ETr),e(cc,sH),e(sH,CTr),e(cc,wTr),e(Rt,ATr),M(J4,Rt,null),e(lr,yTr),e(lr,Br),M(n7,Br,null),e(Br,LTr),e(Br,Sbe),e(Sbe,xTr),e(Br,$Tr),e(Br,nn),e(nn,kTr),e(nn,Rbe),e(Rbe,STr),e(nn,RTr),e(nn,Bbe),e(Bbe,BTr),e(nn,PTr),e(nn,Pbe),e(Pbe,ITr),e(nn,qTr),e(Br,NTr),e(Br,ce),e(ce,Y4),e(Y4,Ibe),e(Ibe,jTr),e(Y4,DTr),e(Y4,lH),e(lH,GTr),e(Y4,OTr),e(ce,VTr),e(ce,K4),e(K4,qbe),e(qbe,XTr),e(K4,zTr),e(K4,iH),e(iH,QTr),e(K4,WTr),e(ce,HTr),e(ce,Z4),e(Z4,Nbe),e(Nbe,UTr),e(Z4,JTr),e(Z4,dH),e(dH,YTr),e(Z4,KTr),e(ce,ZTr),e(ce,eE),e(eE,jbe),e(jbe,e8r),e(eE,o8r),e(eE,cH),e(cH,r8r),e(eE,t8r),e(ce,a8r),e(ce,oE),e(oE,Dbe),e(Dbe,n8r),e(oE,s8r),e(oE,fH),e(fH,l8r),e(oE,i8r),e(ce,d8r),e(ce,rE),e(rE,Gbe),e(Gbe,c8r),e(rE,f8r),e(rE,mH),e(mH,m8r),e(rE,g8r),e(ce,h8r),e(ce,tE),e(tE,Obe),e(Obe,p8r),e(tE,u8r),e(tE,gH),e(gH,_8r),e(tE,b8r),e(ce,v8r),e(ce,aE),e(aE,Vbe),e(Vbe,F8r),e(aE,T8r),e(aE,hH),e(hH,M8r),e(aE,E8r),e(ce,C8r),e(ce,nE),e(nE,Xbe),e(Xbe,w8r),e(nE,A8r),e(nE,pH),e(pH,y8r),e(nE,L8r),e(ce,x8r),e(ce,sE),e(sE,zbe),e(zbe,$8r),e(sE,k8r),e(sE,uH),e(uH,S8r),e(sE,R8r),e(ce,B8r),e(ce,lE),e(lE,Qbe),e(Qbe,P8r),e(lE,I8r),e(lE,_H),e(_H,q8r),e(lE,N8r),e(ce,j8r),e(ce,iE),e(iE,Wbe),e(Wbe,D8r),e(iE,G8r),e(iE,bH),e(bH,O8r),e(iE,V8r),e(ce,X8r),e(ce,dE),e(dE,Hbe),e(Hbe,z8r),e(dE,Q8r),e(dE,vH),e(vH,W8r),e(dE,H8r),e(ce,U8r),e(ce,cE),e(cE,Ube),e(Ube,J8r),e(cE,Y8r),e(cE,FH),e(FH,K8r),e(cE,Z8r),e(ce,eMr),e(ce,fE),e(fE,Jbe),e(Jbe,oMr),e(fE,rMr),e(fE,TH),e(TH,tMr),e(fE,aMr),e(ce,nMr),e(ce,mE),e(mE,Ybe),e(Ybe,sMr),e(mE,lMr),e(mE,MH),e(MH,iMr),e(mE,dMr),e(ce,cMr),e(ce,gE),e(gE,Kbe),e(Kbe,fMr),e(gE,mMr),e(gE,EH),e(EH,gMr),e(gE,hMr),e(ce,pMr),e(ce,hE),e(hE,Zbe),e(Zbe,uMr),e(hE,_Mr),e(hE,CH),e(CH,bMr),e(hE,vMr),e(ce,FMr),e(ce,pE),e(pE,eve),e(eve,TMr),e(pE,MMr),e(pE,wH),e(wH,EMr),e(pE,CMr),e(ce,wMr),e(ce,uE),e(uE,ove),e(ove,AMr),e(uE,yMr),e(uE,AH),e(AH,LMr),e(uE,xMr),e(Br,$Mr),M(_E,Br,null),b(f,GPe,_),b(f,fc,_),e(fc,bE),e(bE,rve),M(s7,rve,null),e(fc,kMr),e(fc,tve),e(tve,SMr),b(f,OPe,_),b(f,ir,_),M(l7,ir,null),e(ir,RMr),e(ir,mc),e(mc,BMr),e(mc,yH),e(yH,PMr),e(mc,IMr),e(mc,LH),e(LH,qMr),e(mc,NMr),e(ir,jMr),e(ir,i7),e(i7,DMr),e(i7,ave),e(ave,GMr),e(i7,OMr),e(ir,VMr),e(ir,Bt),M(d7,Bt,null),e(Bt,XMr),e(Bt,nve),e(nve,zMr),e(Bt,QMr),e(Bt,gc),e(gc,WMr),e(gc,sve),e(sve,HMr),e(gc,UMr),e(gc,xH),e(xH,JMr),e(gc,YMr),e(Bt,KMr),M(vE,Bt,null),e(ir,ZMr),e(ir,Pr),M(c7,Pr,null),e(Pr,e4r),e(Pr,lve),e(lve,o4r),e(Pr,r4r),e(Pr,sn),e(sn,t4r),e(sn,ive),e(ive,a4r),e(sn,n4r),e(sn,dve),e(dve,s4r),e(sn,l4r),e(sn,cve),e(cve,i4r),e(sn,d4r),e(Pr,c4r),e(Pr,fve),e(fve,FE),e(FE,mve),e(mve,f4r),e(FE,m4r),e(FE,$H),e($H,g4r),e(FE,h4r),e(Pr,p4r),M(TE,Pr,null),b(f,VPe,_),b(f,hc,_),e(hc,ME),e(ME,gve),M(f7,gve,null),e(hc,u4r),e(hc,hve),e(hve,_4r),b(f,XPe,_),b(f,dr,_),M(m7,dr,null),e(dr,b4r),e(dr,pc),e(pc,v4r),e(pc,kH),e(kH,F4r),e(pc,T4r),e(pc,SH),e(SH,M4r),e(pc,E4r),e(dr,C4r),e(dr,g7),e(g7,w4r),e(g7,pve),e(pve,A4r),e(g7,y4r),e(dr,L4r),e(dr,Pt),M(h7,Pt,null),e(Pt,x4r),e(Pt,uve),e(uve,$4r),e(Pt,k4r),e(Pt,uc),e(uc,S4r),e(uc,_ve),e(_ve,R4r),e(uc,B4r),e(uc,RH),e(RH,P4r),e(uc,I4r),e(Pt,q4r),M(EE,Pt,null),e(dr,N4r),e(dr,Ir),M(p7,Ir,null),e(Ir,j4r),e(Ir,bve),e(bve,D4r),e(Ir,G4r),e(Ir,ln),e(ln,O4r),e(ln,vve),e(vve,V4r),e(ln,X4r),e(ln,Fve),e(Fve,z4r),e(ln,Q4r),e(ln,Tve),e(Tve,W4r),e(ln,H4r),e(Ir,U4r),e(Ir,Mve),e(Mve,CE),e(CE,Eve),e(Eve,J4r),e(CE,Y4r),e(CE,BH),e(BH,K4r),e(CE,Z4r),e(Ir,eEr),M(wE,Ir,null),b(f,zPe,_),b(f,_c,_),e(_c,AE),e(AE,Cve),M(u7,Cve,null),e(_c,oEr),e(_c,wve),e(wve,rEr),b(f,QPe,_),b(f,cr,_),M(_7,cr,null),e(cr,tEr),e(cr,bc),e(bc,aEr),e(bc,PH),e(PH,nEr),e(bc,sEr),e(bc,IH),e(IH,lEr),e(bc,iEr),e(cr,dEr),e(cr,b7),e(b7,cEr),e(b7,Ave),e(Ave,fEr),e(b7,mEr),e(cr,gEr),e(cr,It),M(v7,It,null),e(It,hEr),e(It,yve),e(yve,pEr),e(It,uEr),e(It,vc),e(vc,_Er),e(vc,Lve),e(Lve,bEr),e(vc,vEr),e(vc,qH),e(qH,FEr),e(vc,TEr),e(It,MEr),M(yE,It,null),e(cr,EEr),e(cr,qr),M(F7,qr,null),e(qr,CEr),e(qr,xve),e(xve,wEr),e(qr,AEr),e(qr,dn),e(dn,yEr),e(dn,$ve),e($ve,LEr),e(dn,xEr),e(dn,kve),e(kve,$Er),e(dn,kEr),e(dn,Sve),e(Sve,SEr),e(dn,REr),e(qr,BEr),e(qr,oe),e(oe,LE),e(LE,Rve),e(Rve,PEr),e(LE,IEr),e(LE,NH),e(NH,qEr),e(LE,NEr),e(oe,jEr),e(oe,xE),e(xE,Bve),e(Bve,DEr),e(xE,GEr),e(xE,jH),e(jH,OEr),e(xE,VEr),e(oe,XEr),e(oe,$E),e($E,Pve),e(Pve,zEr),e($E,QEr),e($E,DH),e(DH,WEr),e($E,HEr),e(oe,UEr),e(oe,kE),e(kE,Ive),e(Ive,JEr),e(kE,YEr),e(kE,GH),e(GH,KEr),e(kE,ZEr),e(oe,e5r),e(oe,SE),e(SE,qve),e(qve,o5r),e(SE,r5r),e(SE,OH),e(OH,t5r),e(SE,a5r),e(oe,n5r),e(oe,RE),e(RE,Nve),e(Nve,s5r),e(RE,l5r),e(RE,VH),e(VH,i5r),e(RE,d5r),e(oe,c5r),e(oe,BE),e(BE,jve),e(jve,f5r),e(BE,m5r),e(BE,XH),e(XH,g5r),e(BE,h5r),e(oe,p5r),e(oe,PE),e(PE,Dve),e(Dve,u5r),e(PE,_5r),e(PE,zH),e(zH,b5r),e(PE,v5r),e(oe,F5r),e(oe,IE),e(IE,Gve),e(Gve,T5r),e(IE,M5r),e(IE,QH),e(QH,E5r),e(IE,C5r),e(oe,w5r),e(oe,qE),e(qE,Ove),e(Ove,A5r),e(qE,y5r),e(qE,WH),e(WH,L5r),e(qE,x5r),e(oe,$5r),e(oe,NE),e(NE,Vve),e(Vve,k5r),e(NE,S5r),e(NE,HH),e(HH,R5r),e(NE,B5r),e(oe,P5r),e(oe,jE),e(jE,Xve),e(Xve,I5r),e(jE,q5r),e(jE,UH),e(UH,N5r),e(jE,j5r),e(oe,D5r),e(oe,DE),e(DE,zve),e(zve,G5r),e(DE,O5r),e(DE,JH),e(JH,V5r),e(DE,X5r),e(oe,z5r),e(oe,GE),e(GE,Qve),e(Qve,Q5r),e(GE,W5r),e(GE,YH),e(YH,H5r),e(GE,U5r),e(oe,J5r),e(oe,OE),e(OE,Wve),e(Wve,Y5r),e(OE,K5r),e(OE,KH),e(KH,Z5r),e(OE,eCr),e(oe,oCr),e(oe,VE),e(VE,Hve),e(Hve,rCr),e(VE,tCr),e(VE,ZH),e(ZH,aCr),e(VE,nCr),e(oe,sCr),e(oe,XE),e(XE,Uve),e(Uve,lCr),e(XE,iCr),e(XE,eU),e(eU,dCr),e(XE,cCr),e(oe,fCr),e(oe,zE),e(zE,Jve),e(Jve,mCr),e(zE,gCr),e(zE,oU),e(oU,hCr),e(zE,pCr),e(oe,uCr),e(oe,QE),e(QE,Yve),e(Yve,_Cr),e(QE,bCr),e(QE,rU),e(rU,vCr),e(QE,FCr),e(oe,TCr),e(oe,WE),e(WE,Kve),e(Kve,MCr),e(WE,ECr),e(WE,tU),e(tU,CCr),e(WE,wCr),e(oe,ACr),e(oe,HE),e(HE,Zve),e(Zve,yCr),e(HE,LCr),e(HE,aU),e(aU,xCr),e(HE,$Cr),e(oe,kCr),e(oe,UE),e(UE,eFe),e(eFe,SCr),e(UE,RCr),e(UE,nU),e(nU,BCr),e(UE,PCr),e(oe,ICr),e(oe,JE),e(JE,oFe),e(oFe,qCr),e(JE,NCr),e(JE,sU),e(sU,jCr),e(JE,DCr),e(oe,GCr),e(oe,YE),e(YE,rFe),e(rFe,OCr),e(YE,VCr),e(YE,lU),e(lU,XCr),e(YE,zCr),e(oe,QCr),e(oe,KE),e(KE,tFe),e(tFe,WCr),e(KE,HCr),e(KE,iU),e(iU,UCr),e(KE,JCr),e(qr,YCr),M(ZE,qr,null),b(f,WPe,_),b(f,Fc,_),e(Fc,e5),e(e5,aFe),M(T7,aFe,null),e(Fc,KCr),e(Fc,nFe),e(nFe,ZCr),b(f,HPe,_),b(f,fr,_),M(M7,fr,null),e(fr,e3r),e(fr,Tc),e(Tc,o3r),e(Tc,dU),e(dU,r3r),e(Tc,t3r),e(Tc,cU),e(cU,a3r),e(Tc,n3r),e(fr,s3r),e(fr,E7),e(E7,l3r),e(E7,sFe),e(sFe,i3r),e(E7,d3r),e(fr,c3r),e(fr,qt),M(C7,qt,null),e(qt,f3r),e(qt,lFe),e(lFe,m3r),e(qt,g3r),e(qt,Mc),e(Mc,h3r),e(Mc,iFe),e(iFe,p3r),e(Mc,u3r),e(Mc,fU),e(fU,_3r),e(Mc,b3r),e(qt,v3r),M(o5,qt,null),e(fr,F3r),e(fr,Nr),M(w7,Nr,null),e(Nr,T3r),e(Nr,dFe),e(dFe,M3r),e(Nr,E3r),e(Nr,cn),e(cn,C3r),e(cn,cFe),e(cFe,w3r),e(cn,A3r),e(cn,fFe),e(fFe,y3r),e(cn,L3r),e(cn,mFe),e(mFe,x3r),e(cn,$3r),e(Nr,k3r),e(Nr,ke),e(ke,r5),e(r5,gFe),e(gFe,S3r),e(r5,R3r),e(r5,mU),e(mU,B3r),e(r5,P3r),e(ke,I3r),e(ke,t5),e(t5,hFe),e(hFe,q3r),e(t5,N3r),e(t5,gU),e(gU,j3r),e(t5,D3r),e(ke,G3r),e(ke,a5),e(a5,pFe),e(pFe,O3r),e(a5,V3r),e(a5,hU),e(hU,X3r),e(a5,z3r),e(ke,Q3r),e(ke,n5),e(n5,uFe),e(uFe,W3r),e(n5,H3r),e(n5,pU),e(pU,U3r),e(n5,J3r),e(ke,Y3r),e(ke,s5),e(s5,_Fe),e(_Fe,K3r),e(s5,Z3r),e(s5,uU),e(uU,ewr),e(s5,owr),e(ke,rwr),e(ke,l5),e(l5,bFe),e(bFe,twr),e(l5,awr),e(l5,_U),e(_U,nwr),e(l5,swr),e(ke,lwr),e(ke,i5),e(i5,vFe),e(vFe,iwr),e(i5,dwr),e(i5,bU),e(bU,cwr),e(i5,fwr),e(ke,mwr),e(ke,d5),e(d5,FFe),e(FFe,gwr),e(d5,hwr),e(d5,vU),e(vU,pwr),e(d5,uwr),e(ke,_wr),e(ke,c5),e(c5,TFe),e(TFe,bwr),e(c5,vwr),e(c5,FU),e(FU,Fwr),e(c5,Twr),e(Nr,Mwr),M(f5,Nr,null),b(f,UPe,_),b(f,Ec,_),e(Ec,m5),e(m5,MFe),M(A7,MFe,null),e(Ec,Ewr),e(Ec,EFe),e(EFe,Cwr),b(f,JPe,_),b(f,mr,_),M(y7,mr,null),e(mr,wwr),e(mr,Cc),e(Cc,Awr),e(Cc,TU),e(TU,ywr),e(Cc,Lwr),e(Cc,MU),e(MU,xwr),e(Cc,$wr),e(mr,kwr),e(mr,L7),e(L7,Swr),e(L7,CFe),e(CFe,Rwr),e(L7,Bwr),e(mr,Pwr),e(mr,Nt),M(x7,Nt,null),e(Nt,Iwr),e(Nt,wFe),e(wFe,qwr),e(Nt,Nwr),e(Nt,wc),e(wc,jwr),e(wc,AFe),e(AFe,Dwr),e(wc,Gwr),e(wc,EU),e(EU,Owr),e(wc,Vwr),e(Nt,Xwr),M(g5,Nt,null),e(mr,zwr),e(mr,jr),M($7,jr,null),e(jr,Qwr),e(jr,yFe),e(yFe,Wwr),e(jr,Hwr),e(jr,fn),e(fn,Uwr),e(fn,LFe),e(LFe,Jwr),e(fn,Ywr),e(fn,xFe),e(xFe,Kwr),e(fn,Zwr),e(fn,$Fe),e($Fe,eAr),e(fn,oAr),e(jr,rAr),e(jr,Me),e(Me,h5),e(h5,kFe),e(kFe,tAr),e(h5,aAr),e(h5,CU),e(CU,nAr),e(h5,sAr),e(Me,lAr),e(Me,p5),e(p5,SFe),e(SFe,iAr),e(p5,dAr),e(p5,wU),e(wU,cAr),e(p5,fAr),e(Me,mAr),e(Me,u5),e(u5,RFe),e(RFe,gAr),e(u5,hAr),e(u5,AU),e(AU,pAr),e(u5,uAr),e(Me,_Ar),e(Me,_5),e(_5,BFe),e(BFe,bAr),e(_5,vAr),e(_5,yU),e(yU,FAr),e(_5,TAr),e(Me,MAr),e(Me,b5),e(b5,PFe),e(PFe,EAr),e(b5,CAr),e(b5,LU),e(LU,wAr),e(b5,AAr),e(Me,yAr),e(Me,v5),e(v5,IFe),e(IFe,LAr),e(v5,xAr),e(v5,xU),e(xU,$Ar),e(v5,kAr),e(Me,SAr),e(Me,F5),e(F5,qFe),e(qFe,RAr),e(F5,BAr),e(F5,$U),e($U,PAr),e(F5,IAr),e(Me,qAr),e(Me,T5),e(T5,NFe),e(NFe,NAr),e(T5,jAr),e(T5,kU),e(kU,DAr),e(T5,GAr),e(Me,OAr),e(Me,M5),e(M5,jFe),e(jFe,VAr),e(M5,XAr),e(M5,SU),e(SU,zAr),e(M5,QAr),e(Me,WAr),e(Me,E5),e(E5,DFe),e(DFe,HAr),e(E5,UAr),e(E5,RU),e(RU,JAr),e(E5,YAr),e(Me,KAr),e(Me,C5),e(C5,GFe),e(GFe,ZAr),e(C5,e0r),e(C5,BU),e(BU,o0r),e(C5,r0r),e(Me,t0r),e(Me,w5),e(w5,OFe),e(OFe,a0r),e(w5,n0r),e(w5,PU),e(PU,s0r),e(w5,l0r),e(jr,i0r),M(A5,jr,null),b(f,YPe,_),b(f,Ac,_),e(Ac,y5),e(y5,VFe),M(k7,VFe,null),e(Ac,d0r),e(Ac,XFe),e(XFe,c0r),b(f,KPe,_),b(f,gr,_),M(S7,gr,null),e(gr,f0r),e(gr,yc),e(yc,m0r),e(yc,IU),e(IU,g0r),e(yc,h0r),e(yc,qU),e(qU,p0r),e(yc,u0r),e(gr,_0r),e(gr,R7),e(R7,b0r),e(R7,zFe),e(zFe,v0r),e(R7,F0r),e(gr,T0r),e(gr,jt),M(B7,jt,null),e(jt,M0r),e(jt,QFe),e(QFe,E0r),e(jt,C0r),e(jt,Lc),e(Lc,w0r),e(Lc,WFe),e(WFe,A0r),e(Lc,y0r),e(Lc,NU),e(NU,L0r),e(Lc,x0r),e(jt,$0r),M(L5,jt,null),e(gr,k0r),e(gr,Dr),M(P7,Dr,null),e(Dr,S0r),e(Dr,HFe),e(HFe,R0r),e(Dr,B0r),e(Dr,mn),e(mn,P0r),e(mn,UFe),e(UFe,I0r),e(mn,q0r),e(mn,JFe),e(JFe,N0r),e(mn,j0r),e(mn,YFe),e(YFe,D0r),e(mn,G0r),e(Dr,O0r),e(Dr,Le),e(Le,x5),e(x5,KFe),e(KFe,V0r),e(x5,X0r),e(x5,jU),e(jU,z0r),e(x5,Q0r),e(Le,W0r),e(Le,$5),e($5,ZFe),e(ZFe,H0r),e($5,U0r),e($5,DU),e(DU,J0r),e($5,Y0r),e(Le,K0r),e(Le,k5),e(k5,eTe),e(eTe,Z0r),e(k5,eyr),e(k5,GU),e(GU,oyr),e(k5,ryr),e(Le,tyr),e(Le,S5),e(S5,oTe),e(oTe,ayr),e(S5,nyr),e(S5,OU),e(OU,syr),e(S5,lyr),e(Le,iyr),e(Le,R5),e(R5,rTe),e(rTe,dyr),e(R5,cyr),e(R5,VU),e(VU,fyr),e(R5,myr),e(Le,gyr),e(Le,B5),e(B5,tTe),e(tTe,hyr),e(B5,pyr),e(B5,XU),e(XU,uyr),e(B5,_yr),e(Le,byr),e(Le,P5),e(P5,aTe),e(aTe,vyr),e(P5,Fyr),e(P5,zU),e(zU,Tyr),e(P5,Myr),e(Le,Eyr),e(Le,I5),e(I5,nTe),e(nTe,Cyr),e(I5,wyr),e(I5,QU),e(QU,Ayr),e(I5,yyr),e(Le,Lyr),e(Le,q5),e(q5,sTe),e(sTe,xyr),e(q5,$yr),e(q5,WU),e(WU,kyr),e(q5,Syr),e(Le,Ryr),e(Le,N5),e(N5,lTe),e(lTe,Byr),e(N5,Pyr),e(N5,HU),e(HU,Iyr),e(N5,qyr),e(Dr,Nyr),M(j5,Dr,null),b(f,ZPe,_),b(f,xc,_),e(xc,D5),e(D5,iTe),M(I7,iTe,null),e(xc,jyr),e(xc,dTe),e(dTe,Dyr),b(f,eIe,_),b(f,hr,_),M(q7,hr,null),e(hr,Gyr),e(hr,$c),e($c,Oyr),e($c,UU),e(UU,Vyr),e($c,Xyr),e($c,JU),e(JU,zyr),e($c,Qyr),e(hr,Wyr),e(hr,N7),e(N7,Hyr),e(N7,cTe),e(cTe,Uyr),e(N7,Jyr),e(hr,Yyr),e(hr,Dt),M(j7,Dt,null),e(Dt,Kyr),e(Dt,fTe),e(fTe,Zyr),e(Dt,eLr),e(Dt,kc),e(kc,oLr),e(kc,mTe),e(mTe,rLr),e(kc,tLr),e(kc,YU),e(YU,aLr),e(kc,nLr),e(Dt,sLr),M(G5,Dt,null),e(hr,lLr),e(hr,Gr),M(D7,Gr,null),e(Gr,iLr),e(Gr,gTe),e(gTe,dLr),e(Gr,cLr),e(Gr,gn),e(gn,fLr),e(gn,hTe),e(hTe,mLr),e(gn,gLr),e(gn,pTe),e(pTe,hLr),e(gn,pLr),e(gn,uTe),e(uTe,uLr),e(gn,_Lr),e(Gr,bLr),e(Gr,Se),e(Se,O5),e(O5,_Te),e(_Te,vLr),e(O5,FLr),e(O5,KU),e(KU,TLr),e(O5,MLr),e(Se,ELr),e(Se,V5),e(V5,bTe),e(bTe,CLr),e(V5,wLr),e(V5,ZU),e(ZU,ALr),e(V5,yLr),e(Se,LLr),e(Se,X5),e(X5,vTe),e(vTe,xLr),e(X5,$Lr),e(X5,eJ),e(eJ,kLr),e(X5,SLr),e(Se,RLr),e(Se,z5),e(z5,FTe),e(FTe,BLr),e(z5,PLr),e(z5,oJ),e(oJ,ILr),e(z5,qLr),e(Se,NLr),e(Se,Q5),e(Q5,TTe),e(TTe,jLr),e(Q5,DLr),e(Q5,rJ),e(rJ,GLr),e(Q5,OLr),e(Se,VLr),e(Se,W5),e(W5,MTe),e(MTe,XLr),e(W5,zLr),e(W5,tJ),e(tJ,QLr),e(W5,WLr),e(Se,HLr),e(Se,H5),e(H5,ETe),e(ETe,ULr),e(H5,JLr),e(H5,aJ),e(aJ,YLr),e(H5,KLr),e(Se,ZLr),e(Se,U5),e(U5,CTe),e(CTe,e7r),e(U5,o7r),e(U5,nJ),e(nJ,r7r),e(U5,t7r),e(Se,a7r),e(Se,J5),e(J5,wTe),e(wTe,n7r),e(J5,s7r),e(J5,sJ),e(sJ,l7r),e(J5,i7r),e(Gr,d7r),M(Y5,Gr,null),b(f,oIe,_),b(f,Sc,_),e(Sc,K5),e(K5,ATe),M(G7,ATe,null),e(Sc,c7r),e(Sc,yTe),e(yTe,f7r),b(f,rIe,_),b(f,pr,_),M(O7,pr,null),e(pr,m7r),e(pr,Rc),e(Rc,g7r),e(Rc,lJ),e(lJ,h7r),e(Rc,p7r),e(Rc,iJ),e(iJ,u7r),e(Rc,_7r),e(pr,b7r),e(pr,V7),e(V7,v7r),e(V7,LTe),e(LTe,F7r),e(V7,T7r),e(pr,M7r),e(pr,Gt),M(X7,Gt,null),e(Gt,E7r),e(Gt,xTe),e(xTe,C7r),e(Gt,w7r),e(Gt,Bc),e(Bc,A7r),e(Bc,$Te),e($Te,y7r),e(Bc,L7r),e(Bc,dJ),e(dJ,x7r),e(Bc,$7r),e(Gt,k7r),M(Z5,Gt,null),e(pr,S7r),e(pr,Or),M(z7,Or,null),e(Or,R7r),e(Or,kTe),e(kTe,B7r),e(Or,P7r),e(Or,hn),e(hn,I7r),e(hn,STe),e(STe,q7r),e(hn,N7r),e(hn,RTe),e(RTe,j7r),e(hn,D7r),e(hn,BTe),e(BTe,G7r),e(hn,O7r),e(Or,V7r),e(Or,xe),e(xe,eC),e(eC,PTe),e(PTe,X7r),e(eC,z7r),e(eC,cJ),e(cJ,Q7r),e(eC,W7r),e(xe,H7r),e(xe,oC),e(oC,ITe),e(ITe,U7r),e(oC,J7r),e(oC,fJ),e(fJ,Y7r),e(oC,K7r),e(xe,Z7r),e(xe,rC),e(rC,qTe),e(qTe,exr),e(rC,oxr),e(rC,mJ),e(mJ,rxr),e(rC,txr),e(xe,axr),e(xe,tC),e(tC,NTe),e(NTe,nxr),e(tC,sxr),e(tC,gJ),e(gJ,lxr),e(tC,ixr),e(xe,dxr),e(xe,aC),e(aC,jTe),e(jTe,cxr),e(aC,fxr),e(aC,hJ),e(hJ,mxr),e(aC,gxr),e(xe,hxr),e(xe,nC),e(nC,DTe),e(DTe,pxr),e(nC,uxr),e(nC,pJ),e(pJ,_xr),e(nC,bxr),e(xe,vxr),e(xe,sC),e(sC,GTe),e(GTe,Fxr),e(sC,Txr),e(sC,uJ),e(uJ,Mxr),e(sC,Exr),e(xe,Cxr),e(xe,lC),e(lC,OTe),e(OTe,wxr),e(lC,Axr),e(lC,_J),e(_J,yxr),e(lC,Lxr),e(xe,xxr),e(xe,iC),e(iC,VTe),e(VTe,$xr),e(iC,kxr),e(iC,bJ),e(bJ,Sxr),e(iC,Rxr),e(xe,Bxr),e(xe,dC),e(dC,XTe),e(XTe,Pxr),e(dC,Ixr),e(dC,vJ),e(vJ,qxr),e(dC,Nxr),e(Or,jxr),M(cC,Or,null),b(f,tIe,_),b(f,Pc,_),e(Pc,fC),e(fC,zTe),M(Q7,zTe,null),e(Pc,Dxr),e(Pc,QTe),e(QTe,Gxr),b(f,aIe,_),b(f,ur,_),M(W7,ur,null),e(ur,Oxr),e(ur,Ic),e(Ic,Vxr),e(Ic,FJ),e(FJ,Xxr),e(Ic,zxr),e(Ic,TJ),e(TJ,Qxr),e(Ic,Wxr),e(ur,Hxr),e(ur,H7),e(H7,Uxr),e(H7,WTe),e(WTe,Jxr),e(H7,Yxr),e(ur,Kxr),e(ur,Ot),M(U7,Ot,null),e(Ot,Zxr),e(Ot,HTe),e(HTe,e9r),e(Ot,o9r),e(Ot,qc),e(qc,r9r),e(qc,UTe),e(UTe,t9r),e(qc,a9r),e(qc,MJ),e(MJ,n9r),e(qc,s9r),e(Ot,l9r),M(mC,Ot,null),e(ur,i9r),e(ur,Vr),M(J7,Vr,null),e(Vr,d9r),e(Vr,JTe),e(JTe,c9r),e(Vr,f9r),e(Vr,pn),e(pn,m9r),e(pn,YTe),e(YTe,g9r),e(pn,h9r),e(pn,KTe),e(KTe,p9r),e(pn,u9r),e(pn,ZTe),e(ZTe,_9r),e(pn,b9r),e(Vr,v9r),e(Vr,$e),e($e,gC),e(gC,e8e),e(e8e,F9r),e(gC,T9r),e(gC,EJ),e(EJ,M9r),e(gC,E9r),e($e,C9r),e($e,hC),e(hC,o8e),e(o8e,w9r),e(hC,A9r),e(hC,CJ),e(CJ,y9r),e(hC,L9r),e($e,x9r),e($e,pC),e(pC,r8e),e(r8e,$9r),e(pC,k9r),e(pC,wJ),e(wJ,S9r),e(pC,R9r),e($e,B9r),e($e,uC),e(uC,t8e),e(t8e,P9r),e(uC,I9r),e(uC,AJ),e(AJ,q9r),e(uC,N9r),e($e,j9r),e($e,_C),e(_C,a8e),e(a8e,D9r),e(_C,G9r),e(_C,yJ),e(yJ,O9r),e(_C,V9r),e($e,X9r),e($e,bC),e(bC,n8e),e(n8e,z9r),e(bC,Q9r),e(bC,LJ),e(LJ,W9r),e(bC,H9r),e($e,U9r),e($e,vC),e(vC,s8e),e(s8e,J9r),e(vC,Y9r),e(vC,xJ),e(xJ,K9r),e(vC,Z9r),e($e,e$r),e($e,FC),e(FC,l8e),e(l8e,o$r),e(FC,r$r),e(FC,$J),e($J,t$r),e(FC,a$r),e($e,n$r),e($e,TC),e(TC,i8e),e(i8e,s$r),e(TC,l$r),e(TC,kJ),e(kJ,i$r),e(TC,d$r),e($e,c$r),e($e,MC),e(MC,d8e),e(d8e,f$r),e(MC,m$r),e(MC,SJ),e(SJ,g$r),e(MC,h$r),e(Vr,p$r),M(EC,Vr,null),b(f,nIe,_),b(f,Nc,_),e(Nc,CC),e(CC,c8e),M(Y7,c8e,null),e(Nc,u$r),e(Nc,f8e),e(f8e,_$r),b(f,sIe,_),b(f,_r,_),M(K7,_r,null),e(_r,b$r),e(_r,jc),e(jc,v$r),e(jc,RJ),e(RJ,F$r),e(jc,T$r),e(jc,BJ),e(BJ,M$r),e(jc,E$r),e(_r,C$r),e(_r,Z7),e(Z7,w$r),e(Z7,m8e),e(m8e,A$r),e(Z7,y$r),e(_r,L$r),e(_r,Vt),M(ex,Vt,null),e(Vt,x$r),e(Vt,g8e),e(g8e,$$r),e(Vt,k$r),e(Vt,Dc),e(Dc,S$r),e(Dc,h8e),e(h8e,R$r),e(Dc,B$r),e(Dc,PJ),e(PJ,P$r),e(Dc,I$r),e(Vt,q$r),M(wC,Vt,null),e(_r,N$r),e(_r,Xr),M(ox,Xr,null),e(Xr,j$r),e(Xr,p8e),e(p8e,D$r),e(Xr,G$r),e(Xr,un),e(un,O$r),e(un,u8e),e(u8e,V$r),e(un,X$r),e(un,_8e),e(_8e,z$r),e(un,Q$r),e(un,b8e),e(b8e,W$r),e(un,H$r),e(Xr,U$r),e(Xr,De),e(De,AC),e(AC,v8e),e(v8e,J$r),e(AC,Y$r),e(AC,IJ),e(IJ,K$r),e(AC,Z$r),e(De,ekr),e(De,yC),e(yC,F8e),e(F8e,okr),e(yC,rkr),e(yC,qJ),e(qJ,tkr),e(yC,akr),e(De,nkr),e(De,LC),e(LC,T8e),e(T8e,skr),e(LC,lkr),e(LC,NJ),e(NJ,ikr),e(LC,dkr),e(De,ckr),e(De,xC),e(xC,M8e),e(M8e,fkr),e(xC,mkr),e(xC,jJ),e(jJ,gkr),e(xC,hkr),e(De,pkr),e(De,$C),e($C,E8e),e(E8e,ukr),e($C,_kr),e($C,DJ),e(DJ,bkr),e($C,vkr),e(De,Fkr),e(De,kC),e(kC,C8e),e(C8e,Tkr),e(kC,Mkr),e(kC,GJ),e(GJ,Ekr),e(kC,Ckr),e(De,wkr),e(De,SC),e(SC,w8e),e(w8e,Akr),e(SC,ykr),e(SC,OJ),e(OJ,Lkr),e(SC,xkr),e(De,$kr),e(De,RC),e(RC,A8e),e(A8e,kkr),e(RC,Skr),e(RC,VJ),e(VJ,Rkr),e(RC,Bkr),e(Xr,Pkr),M(BC,Xr,null),b(f,lIe,_),b(f,Gc,_),e(Gc,PC),e(PC,y8e),M(rx,y8e,null),e(Gc,Ikr),e(Gc,L8e),e(L8e,qkr),b(f,iIe,_),b(f,br,_),M(tx,br,null),e(br,Nkr),e(br,Oc),e(Oc,jkr),e(Oc,XJ),e(XJ,Dkr),e(Oc,Gkr),e(Oc,zJ),e(zJ,Okr),e(Oc,Vkr),e(br,Xkr),e(br,ax),e(ax,zkr),e(ax,x8e),e(x8e,Qkr),e(ax,Wkr),e(br,Hkr),e(br,Xt),M(nx,Xt,null),e(Xt,Ukr),e(Xt,$8e),e($8e,Jkr),e(Xt,Ykr),e(Xt,Vc),e(Vc,Kkr),e(Vc,k8e),e(k8e,Zkr),e(Vc,eSr),e(Vc,QJ),e(QJ,oSr),e(Vc,rSr),e(Xt,tSr),M(IC,Xt,null),e(br,aSr),e(br,zr),M(sx,zr,null),e(zr,nSr),e(zr,S8e),e(S8e,sSr),e(zr,lSr),e(zr,_n),e(_n,iSr),e(_n,R8e),e(R8e,dSr),e(_n,cSr),e(_n,B8e),e(B8e,fSr),e(_n,mSr),e(_n,P8e),e(P8e,gSr),e(_n,hSr),e(zr,pSr),e(zr,Ge),e(Ge,qC),e(qC,I8e),e(I8e,uSr),e(qC,_Sr),e(qC,WJ),e(WJ,bSr),e(qC,vSr),e(Ge,FSr),e(Ge,NC),e(NC,q8e),e(q8e,TSr),e(NC,MSr),e(NC,HJ),e(HJ,ESr),e(NC,CSr),e(Ge,wSr),e(Ge,jC),e(jC,N8e),e(N8e,ASr),e(jC,ySr),e(jC,UJ),e(UJ,LSr),e(jC,xSr),e(Ge,$Sr),e(Ge,DC),e(DC,j8e),e(j8e,kSr),e(DC,SSr),e(DC,JJ),e(JJ,RSr),e(DC,BSr),e(Ge,PSr),e(Ge,GC),e(GC,D8e),e(D8e,ISr),e(GC,qSr),e(GC,YJ),e(YJ,NSr),e(GC,jSr),e(Ge,DSr),e(Ge,OC),e(OC,G8e),e(G8e,GSr),e(OC,OSr),e(OC,KJ),e(KJ,VSr),e(OC,XSr),e(Ge,zSr),e(Ge,VC),e(VC,O8e),e(O8e,QSr),e(VC,WSr),e(VC,ZJ),e(ZJ,HSr),e(VC,USr),e(Ge,JSr),e(Ge,XC),e(XC,V8e),e(V8e,YSr),e(XC,KSr),e(XC,eY),e(eY,ZSr),e(XC,eRr),e(zr,oRr),M(zC,zr,null),b(f,dIe,_),b(f,Xc,_),e(Xc,QC),e(QC,X8e),M(lx,X8e,null),e(Xc,rRr),e(Xc,z8e),e(z8e,tRr),b(f,cIe,_),b(f,vr,_),M(ix,vr,null),e(vr,aRr),e(vr,zc),e(zc,nRr),e(zc,oY),e(oY,sRr),e(zc,lRr),e(zc,rY),e(rY,iRr),e(zc,dRr),e(vr,cRr),e(vr,dx),e(dx,fRr),e(dx,Q8e),e(Q8e,mRr),e(dx,gRr),e(vr,hRr),e(vr,zt),M(cx,zt,null),e(zt,pRr),e(zt,W8e),e(W8e,uRr),e(zt,_Rr),e(zt,Qc),e(Qc,bRr),e(Qc,H8e),e(H8e,vRr),e(Qc,FRr),e(Qc,tY),e(tY,TRr),e(Qc,MRr),e(zt,ERr),M(WC,zt,null),e(vr,CRr),e(vr,Qr),M(fx,Qr,null),e(Qr,wRr),e(Qr,U8e),e(U8e,ARr),e(Qr,yRr),e(Qr,bn),e(bn,LRr),e(bn,J8e),e(J8e,xRr),e(bn,$Rr),e(bn,Y8e),e(Y8e,kRr),e(bn,SRr),e(bn,K8e),e(K8e,RRr),e(bn,BRr),e(Qr,PRr),e(Qr,Z8e),e(Z8e,HC),e(HC,eMe),e(eMe,IRr),e(HC,qRr),e(HC,aY),e(aY,NRr),e(HC,jRr),e(Qr,DRr),M(UC,Qr,null),b(f,fIe,_),b(f,Wc,_),e(Wc,JC),e(JC,oMe),M(mx,oMe,null),e(Wc,GRr),e(Wc,rMe),e(rMe,ORr),b(f,mIe,_),b(f,Fr,_),M(gx,Fr,null),e(Fr,VRr),e(Fr,Hc),e(Hc,XRr),e(Hc,nY),e(nY,zRr),e(Hc,QRr),e(Hc,sY),e(sY,WRr),e(Hc,HRr),e(Fr,URr),e(Fr,hx),e(hx,JRr),e(hx,tMe),e(tMe,YRr),e(hx,KRr),e(Fr,ZRr),e(Fr,Qt),M(px,Qt,null),e(Qt,eBr),e(Qt,aMe),e(aMe,oBr),e(Qt,rBr),e(Qt,Uc),e(Uc,tBr),e(Uc,nMe),e(nMe,aBr),e(Uc,nBr),e(Uc,lY),e(lY,sBr),e(Uc,lBr),e(Qt,iBr),M(YC,Qt,null),e(Fr,dBr),e(Fr,Wr),M(ux,Wr,null),e(Wr,cBr),e(Wr,sMe),e(sMe,fBr),e(Wr,mBr),e(Wr,vn),e(vn,gBr),e(vn,lMe),e(lMe,hBr),e(vn,pBr),e(vn,iMe),e(iMe,uBr),e(vn,_Br),e(vn,dMe),e(dMe,bBr),e(vn,vBr),e(Wr,FBr),e(Wr,_x),e(_x,KC),e(KC,cMe),e(cMe,TBr),e(KC,MBr),e(KC,iY),e(iY,EBr),e(KC,CBr),e(_x,wBr),e(_x,ZC),e(ZC,fMe),e(fMe,ABr),e(ZC,yBr),e(ZC,dY),e(dY,LBr),e(ZC,xBr),e(Wr,$Br),M(e3,Wr,null),b(f,gIe,_),b(f,Jc,_),e(Jc,o3),e(o3,mMe),M(bx,mMe,null),e(Jc,kBr),e(Jc,gMe),e(gMe,SBr),b(f,hIe,_),b(f,Tr,_),M(vx,Tr,null),e(Tr,RBr),e(Tr,Yc),e(Yc,BBr),e(Yc,cY),e(cY,PBr),e(Yc,IBr),e(Yc,fY),e(fY,qBr),e(Yc,NBr),e(Tr,jBr),e(Tr,Fx),e(Fx,DBr),e(Fx,hMe),e(hMe,GBr),e(Fx,OBr),e(Tr,VBr),e(Tr,Wt),M(Tx,Wt,null),e(Wt,XBr),e(Wt,pMe),e(pMe,zBr),e(Wt,QBr),e(Wt,Kc),e(Kc,WBr),e(Kc,uMe),e(uMe,HBr),e(Kc,UBr),e(Kc,mY),e(mY,JBr),e(Kc,YBr),e(Wt,KBr),M(r3,Wt,null),e(Tr,ZBr),e(Tr,Hr),M(Mx,Hr,null),e(Hr,ePr),e(Hr,_Me),e(_Me,oPr),e(Hr,rPr),e(Hr,Fn),e(Fn,tPr),e(Fn,bMe),e(bMe,aPr),e(Fn,nPr),e(Fn,vMe),e(vMe,sPr),e(Fn,lPr),e(Fn,FMe),e(FMe,iPr),e(Fn,dPr),e(Hr,cPr),e(Hr,TMe),e(TMe,t3),e(t3,MMe),e(MMe,fPr),e(t3,mPr),e(t3,gY),e(gY,gPr),e(t3,hPr),e(Hr,pPr),M(a3,Hr,null),pIe=!0},p(f,[_]){const Ex={};_&2&&(Ex.$$scope={dirty:_,ctx:f}),lf.$set(Ex);const EMe={};_&2&&(EMe.$$scope={dirty:_,ctx:f}),ng.$set(EMe);const CMe={};_&2&&(CMe.$$scope={dirty:_,ctx:f}),qg.$set(CMe);const wMe={};_&2&&(wMe.$$scope={dirty:_,ctx:f}),ch.$set(wMe);const Cx={};_&2&&(Cx.$$scope={dirty:_,ctx:f}),fh.$set(Cx);const AMe={};_&2&&(AMe.$$scope={dirty:_,ctx:f}),Lh.$set(AMe);const Tn={};_&2&&(Tn.$$scope={dirty:_,ctx:f}),xh.$set(Tn);const yMe={};_&2&&(yMe.$$scope={dirty:_,ctx:f}),Sh.$set(yMe);const LMe={};_&2&&(LMe.$$scope={dirty:_,ctx:f}),Fu.$set(LMe);const xMe={};_&2&&(xMe.$$scope={dirty:_,ctx:f}),Mu.$set(xMe);const wx={};_&2&&(wx.$$scope={dirty:_,ctx:f}),d_.$set(wx);const $Me={};_&2&&($Me.$$scope={dirty:_,ctx:f}),f_.$set($Me);const Ax={};_&2&&(Ax.$$scope={dirty:_,ctx:f}),H_.$set(Ax);const kMe={};_&2&&(kMe.$$scope={dirty:_,ctx:f}),J_.$set(kMe);const yx={};_&2&&(yx.$$scope={dirty:_,ctx:f}),R2.$set(yx);const SMe={};_&2&&(SMe.$$scope={dirty:_,ctx:f}),P2.$set(SMe);const RMe={};_&2&&(RMe.$$scope={dirty:_,ctx:f}),e6.$set(RMe);const BMe={};_&2&&(BMe.$$scope={dirty:_,ctx:f}),r6.$set(BMe);const Zc={};_&2&&(Zc.$$scope={dirty:_,ctx:f}),Y6.$set(Zc);const PMe={};_&2&&(PMe.$$scope={dirty:_,ctx:f}),Z6.$set(PMe);const IMe={};_&2&&(IMe.$$scope={dirty:_,ctx:f}),x1.$set(IMe);const qMe={};_&2&&(qMe.$$scope={dirty:_,ctx:f}),k1.$set(qMe);const Lx={};_&2&&(Lx.$$scope={dirty:_,ctx:f}),N1.$set(Lx);const NMe={};_&2&&(NMe.$$scope={dirty:_,ctx:f}),D1.$set(NMe);const jMe={};_&2&&(jMe.$$scope={dirty:_,ctx:f}),Tb.$set(jMe);const DMe={};_&2&&(DMe.$$scope={dirty:_,ctx:f}),Eb.$set(DMe);const Jr={};_&2&&(Jr.$$scope={dirty:_,ctx:f}),cv.$set(Jr);const xx={};_&2&&(xx.$$scope={dirty:_,ctx:f}),mv.$set(xx);const GMe={};_&2&&(GMe.$$scope={dirty:_,ctx:f}),pv.$set(GMe);const $x={};_&2&&($x.$$scope={dirty:_,ctx:f}),_v.$set($x);const OMe={};_&2&&(OMe.$$scope={dirty:_,ctx:f}),$v.$set(OMe);const Yr={};_&2&&(Yr.$$scope={dirty:_,ctx:f}),Sv.$set(Yr);const VMe={};_&2&&(VMe.$$scope={dirty:_,ctx:f}),Pv.$set(VMe);const ef={};_&2&&(ef.$$scope={dirty:_,ctx:f}),qv.$set(ef);const XMe={};_&2&&(XMe.$$scope={dirty:_,ctx:f}),Wv.$set(XMe);const zMe={};_&2&&(zMe.$$scope={dirty:_,ctx:f}),Uv.$set(zMe);const y={};_&2&&(y.$$scope={dirty:_,ctx:f}),oF.$set(y);const n3={};_&2&&(n3.$$scope={dirty:_,ctx:f}),tF.$set(n3);const QMe={};_&2&&(QMe.$$scope={dirty:_,ctx:f}),gF.$set(QMe);const WMe={};_&2&&(WMe.$$scope={dirty:_,ctx:f}),pF.$set(WMe);const s3={};_&2&&(s3.$$scope={dirty:_,ctx:f}),vF.$set(s3);const HMe={};_&2&&(HMe.$$scope={dirty:_,ctx:f}),TF.$set(HMe);const UMe={};_&2&&(UMe.$$scope={dirty:_,ctx:f}),yF.$set(UMe);const l3={};_&2&&(l3.$$scope={dirty:_,ctx:f}),xF.$set(l3);const JMe={};_&2&&(JMe.$$scope={dirty:_,ctx:f}),BF.$set(JMe);const YMe={};_&2&&(YMe.$$scope={dirty:_,ctx:f}),IF.$set(YMe);const i3={};_&2&&(i3.$$scope={dirty:_,ctx:f}),DF.$set(i3);const KMe={};_&2&&(KMe.$$scope={dirty:_,ctx:f}),OF.$set(KMe);const ZMe={};_&2&&(ZMe.$$scope={dirty:_,ctx:f}),zF.$set(ZMe);const d3={};_&2&&(d3.$$scope={dirty:_,ctx:f}),WF.$set(d3);const e4e={};_&2&&(e4e.$$scope={dirty:_,ctx:f}),ZF.$set(e4e);const o4e={};_&2&&(o4e.$$scope={dirty:_,ctx:f}),oT.$set(o4e);const c3={};_&2&&(c3.$$scope={dirty:_,ctx:f}),aT.$set(c3);const r4e={};_&2&&(r4e.$$scope={dirty:_,ctx:f}),sT.$set(r4e);const t4e={};_&2&&(t4e.$$scope={dirty:_,ctx:f}),YT.$set(t4e);const f3={};_&2&&(f3.$$scope={dirty:_,ctx:f}),ZT.$set(f3);const a4e={};_&2&&(a4e.$$scope={dirty:_,ctx:f}),E8.$set(a4e);const n4e={};_&2&&(n4e.$$scope={dirty:_,ctx:f}),w8.$set(n4e);const m3={};_&2&&(m3.$$scope={dirty:_,ctx:f}),N8.$set(m3);const s4e={};_&2&&(s4e.$$scope={dirty:_,ctx:f}),D8.$set(s4e);const l4e={};_&2&&(l4e.$$scope={dirty:_,ctx:f}),X8.$set(l4e);const g3={};_&2&&(g3.$$scope={dirty:_,ctx:f}),Q8.$set(g3);const i4e={};_&2&&(i4e.$$scope={dirty:_,ctx:f}),gM.$set(i4e);const d4e={};_&2&&(d4e.$$scope={dirty:_,ctx:f}),pM.$set(d4e);const h3={};_&2&&(h3.$$scope={dirty:_,ctx:f}),AM.$set(h3);const c4e={};_&2&&(c4e.$$scope={dirty:_,ctx:f}),LM.$set(c4e);const f4e={};_&2&&(f4e.$$scope={dirty:_,ctx:f}),o4.$set(f4e);const p3={};_&2&&(p3.$$scope={dirty:_,ctx:f}),t4.$set(p3);const m4e={};_&2&&(m4e.$$scope={dirty:_,ctx:f}),T4.$set(m4e);const g4e={};_&2&&(g4e.$$scope={dirty:_,ctx:f}),E4.$set(g4e);const u3={};_&2&&(u3.$$scope={dirty:_,ctx:f}),w4.$set(u3);const h4e={};_&2&&(h4e.$$scope={dirty:_,ctx:f}),y4.$set(h4e);const p4e={};_&2&&(p4e.$$scope={dirty:_,ctx:f}),H4.$set(p4e);const _3={};_&2&&(_3.$$scope={dirty:_,ctx:f}),J4.$set(_3);const u4e={};_&2&&(u4e.$$scope={dirty:_,ctx:f}),_E.$set(u4e);const _4e={};_&2&&(_4e.$$scope={dirty:_,ctx:f}),vE.$set(_4e);const b3={};_&2&&(b3.$$scope={dirty:_,ctx:f}),TE.$set(b3);const b4e={};_&2&&(b4e.$$scope={dirty:_,ctx:f}),EE.$set(b4e);const v4e={};_&2&&(v4e.$$scope={dirty:_,ctx:f}),wE.$set(v4e);const v3={};_&2&&(v3.$$scope={dirty:_,ctx:f}),yE.$set(v3);const F4e={};_&2&&(F4e.$$scope={dirty:_,ctx:f}),ZE.$set(F4e);const T4e={};_&2&&(T4e.$$scope={dirty:_,ctx:f}),o5.$set(T4e);const F3={};_&2&&(F3.$$scope={dirty:_,ctx:f}),f5.$set(F3);const M4e={};_&2&&(M4e.$$scope={dirty:_,ctx:f}),g5.$set(M4e);const E4e={};_&2&&(E4e.$$scope={dirty:_,ctx:f}),A5.$set(E4e);const T3={};_&2&&(T3.$$scope={dirty:_,ctx:f}),L5.$set(T3);const C4e={};_&2&&(C4e.$$scope={dirty:_,ctx:f}),j5.$set(C4e);const w4e={};_&2&&(w4e.$$scope={dirty:_,ctx:f}),G5.$set(w4e);const M3={};_&2&&(M3.$$scope={dirty:_,ctx:f}),Y5.$set(M3);const A4e={};_&2&&(A4e.$$scope={dirty:_,ctx:f}),Z5.$set(A4e);const y4e={};_&2&&(y4e.$$scope={dirty:_,ctx:f}),cC.$set(y4e);const E3={};_&2&&(E3.$$scope={dirty:_,ctx:f}),mC.$set(E3);const L4e={};_&2&&(L4e.$$scope={dirty:_,ctx:f}),EC.$set(L4e);const x4e={};_&2&&(x4e.$$scope={dirty:_,ctx:f}),wC.$set(x4e);const C3={};_&2&&(C3.$$scope={dirty:_,ctx:f}),BC.$set(C3);const $4e={};_&2&&($4e.$$scope={dirty:_,ctx:f}),IC.$set($4e);const k4e={};_&2&&(k4e.$$scope={dirty:_,ctx:f}),zC.$set(k4e);const w3={};_&2&&(w3.$$scope={dirty:_,ctx:f}),WC.$set(w3);const S4e={};_&2&&(S4e.$$scope={dirty:_,ctx:f}),UC.$set(S4e);const R4e={};_&2&&(R4e.$$scope={dirty:_,ctx:f}),YC.$set(R4e);const A3={};_&2&&(A3.$$scope={dirty:_,ctx:f}),e3.$set(A3);const B4e={};_&2&&(B4e.$$scope={dirty:_,ctx:f}),r3.$set(B4e);const P4e={};_&2&&(P4e.$$scope={dirty:_,ctx:f}),a3.$set(P4e)},i(f){pIe||(E(d.$$.fragment,f),E(va.$$.fragment,f),E(CA.$$.fragment,f),E(wA.$$.fragment,f),E(lf.$$.fragment,f),E(AA.$$.fragment,f),E(yA.$$.fragment,f),E($A.$$.fragment,f),E(ng.$$.fragment,f),E(kA.$$.fragment,f),E(SA.$$.fragment,f),E(RA.$$.fragment,f),E(IA.$$.fragment,f),E(qg.$$.fragment,f),E(qA.$$.fragment,f),E(NA.$$.fragment,f),E(jA.$$.fragment,f),E(OA.$$.fragment,f),E(ch.$$.fragment,f),E(fh.$$.fragment,f),E(VA.$$.fragment,f),E(XA.$$.fragment,f),E(zA.$$.fragment,f),E(HA.$$.fragment,f),E(Lh.$$.fragment,f),E(xh.$$.fragment,f),E(UA.$$.fragment,f),E(JA.$$.fragment,f),E(YA.$$.fragment,f),E(ZA.$$.fragment,f),E(Sh.$$.fragment,f),E(e0.$$.fragment,f),E(Fu.$$.fragment,f),E(o0.$$.fragment,f),E(r0.$$.fragment,f),E(a0.$$.fragment,f),E(Mu.$$.fragment,f),E(n0.$$.fragment,f),E(d_.$$.fragment,f),E(s0.$$.fragment,f),E(l0.$$.fragment,f),E(d0.$$.fragment,f),E(f_.$$.fragment,f),E(c0.$$.fragment,f),E(H_.$$.fragment,f),E(f0.$$.fragment,f),E(m0.$$.fragment,f),E(h0.$$.fragment,f),E(J_.$$.fragment,f),E(p0.$$.fragment,f),E(R2.$$.fragment,f),E(u0.$$.fragment,f),E(_0.$$.fragment,f),E(v0.$$.fragment,f),E(P2.$$.fragment,f),E(F0.$$.fragment,f),E(e6.$$.fragment,f),E(T0.$$.fragment,f),E(M0.$$.fragment,f),E(C0.$$.fragment,f),E(r6.$$.fragment,f),E(w0.$$.fragment,f),E(Y6.$$.fragment,f),E(A0.$$.fragment,f),E(y0.$$.fragment,f),E(x0.$$.fragment,f),E(Z6.$$.fragment,f),E($0.$$.fragment,f),E(x1.$$.fragment,f),E(k0.$$.fragment,f),E(S0.$$.fragment,f),E(B0.$$.fragment,f),E(k1.$$.fragment,f),E(P0.$$.fragment,f),E(N1.$$.fragment,f),E(I0.$$.fragment,f),E(q0.$$.fragment,f),E(j0.$$.fragment,f),E(D1.$$.fragment,f),E(D0.$$.fragment,f),E(Tb.$$.fragment,f),E(G0.$$.fragment,f),E(O0.$$.fragment,f),E(X0.$$.fragment,f),E(Eb.$$.fragment,f),E(z0.$$.fragment,f),E(cv.$$.fragment,f),E(Q0.$$.fragment,f),E(W0.$$.fragment,f),E(U0.$$.fragment,f),E(mv.$$.fragment,f),E(J0.$$.fragment,f),E(pv.$$.fragment,f),E(Y0.$$.fragment,f),E(K0.$$.fragment,f),E(ey.$$.fragment,f),E(_v.$$.fragment,f),E(oy.$$.fragment,f),E($v.$$.fragment,f),E(ry.$$.fragment,f),E(ty.$$.fragment,f),E(ny.$$.fragment,f),E(Sv.$$.fragment,f),E(sy.$$.fragment,f),E(Pv.$$.fragment,f),E(ly.$$.fragment,f),E(iy.$$.fragment,f),E(cy.$$.fragment,f),E(qv.$$.fragment,f),E(fy.$$.fragment,f),E(Wv.$$.fragment,f),E(my.$$.fragment,f),E(gy.$$.fragment,f),E(py.$$.fragment,f),E(Uv.$$.fragment,f),E(uy.$$.fragment,f),E(oF.$$.fragment,f),E(_y.$$.fragment,f),E(by.$$.fragment,f),E(Fy.$$.fragment,f),E(tF.$$.fragment,f),E(Ty.$$.fragment,f),E(gF.$$.fragment,f),E(My.$$.fragment,f),E(Ey.$$.fragment,f),E(wy.$$.fragment,f),E(pF.$$.fragment,f),E(Ay.$$.fragment,f),E(vF.$$.fragment,f),E(Ly.$$.fragment,f),E(xy.$$.fragment,f),E(ky.$$.fragment,f),E(TF.$$.fragment,f),E(Sy.$$.fragment,f),E(yF.$$.fragment,f),E(Ry.$$.fragment,f),E(By.$$.fragment,f),E(Iy.$$.fragment,f),E(xF.$$.fragment,f),E(qy.$$.fragment,f),E(BF.$$.fragment,f),E(Ny.$$.fragment,f),E(jy.$$.fragment,f),E(Gy.$$.fragment,f),E(IF.$$.fragment,f),E(Oy.$$.fragment,f),E(DF.$$.fragment,f),E(Xy.$$.fragment,f),E(zy.$$.fragment,f),E(Wy.$$.fragment,f),E(OF.$$.fragment,f),E(Hy.$$.fragment,f),E(zF.$$.fragment,f),E(Uy.$$.fragment,f),E(Jy.$$.fragment,f),E(Ky.$$.fragment,f),E(WF.$$.fragment,f),E(Zy.$$.fragment,f),E(ZF.$$.fragment,f),E(eL.$$.fragment,f),E(oL.$$.fragment,f),E(tL.$$.fragment,f),E(oT.$$.fragment,f),E(aL.$$.fragment,f),E(aT.$$.fragment,f),E(nL.$$.fragment,f),E(sL.$$.fragment,f),E(iL.$$.fragment,f),E(sT.$$.fragment,f),E(dL.$$.fragment,f),E(YT.$$.fragment,f),E(cL.$$.fragment,f),E(fL.$$.fragment,f),E(gL.$$.fragment,f),E(ZT.$$.fragment,f),E(hL.$$.fragment,f),E(E8.$$.fragment,f),E(pL.$$.fragment,f),E(uL.$$.fragment,f),E(bL.$$.fragment,f),E(w8.$$.fragment,f),E(vL.$$.fragment,f),E(N8.$$.fragment,f),E(FL.$$.fragment,f),E(TL.$$.fragment,f),E(EL.$$.fragment,f),E(D8.$$.fragment,f),E(CL.$$.fragment,f),E(X8.$$.fragment,f),E(wL.$$.fragment,f),E(AL.$$.fragment,f),E(LL.$$.fragment,f),E(Q8.$$.fragment,f),E(xL.$$.fragment,f),E(gM.$$.fragment,f),E($L.$$.fragment,f),E(kL.$$.fragment,f),E(RL.$$.fragment,f),E(pM.$$.fragment,f),E(BL.$$.fragment,f),E(AM.$$.fragment,f),E(PL.$$.fragment,f),E(IL.$$.fragment,f),E(NL.$$.fragment,f),E(LM.$$.fragment,f),E(jL.$$.fragment,f),E(o4.$$.fragment,f),E(DL.$$.fragment,f),E(GL.$$.fragment,f),E(VL.$$.fragment,f),E(t4.$$.fragment,f),E(XL.$$.fragment,f),E(T4.$$.fragment,f),E(zL.$$.fragment,f),E(QL.$$.fragment,f),E(HL.$$.fragment,f),E(E4.$$.fragment,f),E(UL.$$.fragment,f),E(w4.$$.fragment,f),E(JL.$$.fragment,f),E(YL.$$.fragment,f),E(ZL.$$.fragment,f),E(y4.$$.fragment,f),E(e7.$$.fragment,f),E(H4.$$.fragment,f),E(o7.$$.fragment,f),E(r7.$$.fragment,f),E(a7.$$.fragment,f),E(J4.$$.fragment,f),E(n7.$$.fragment,f),E(_E.$$.fragment,f),E(s7.$$.fragment,f),E(l7.$$.fragment,f),E(d7.$$.fragment,f),E(vE.$$.fragment,f),E(c7.$$.fragment,f),E(TE.$$.fragment,f),E(f7.$$.fragment,f),E(m7.$$.fragment,f),E(h7.$$.fragment,f),E(EE.$$.fragment,f),E(p7.$$.fragment,f),E(wE.$$.fragment,f),E(u7.$$.fragment,f),E(_7.$$.fragment,f),E(v7.$$.fragment,f),E(yE.$$.fragment,f),E(F7.$$.fragment,f),E(ZE.$$.fragment,f),E(T7.$$.fragment,f),E(M7.$$.fragment,f),E(C7.$$.fragment,f),E(o5.$$.fragment,f),E(w7.$$.fragment,f),E(f5.$$.fragment,f),E(A7.$$.fragment,f),E(y7.$$.fragment,f),E(x7.$$.fragment,f),E(g5.$$.fragment,f),E($7.$$.fragment,f),E(A5.$$.fragment,f),E(k7.$$.fragment,f),E(S7.$$.fragment,f),E(B7.$$.fragment,f),E(L5.$$.fragment,f),E(P7.$$.fragment,f),E(j5.$$.fragment,f),E(I7.$$.fragment,f),E(q7.$$.fragment,f),E(j7.$$.fragment,f),E(G5.$$.fragment,f),E(D7.$$.fragment,f),E(Y5.$$.fragment,f),E(G7.$$.fragment,f),E(O7.$$.fragment,f),E(X7.$$.fragment,f),E(Z5.$$.fragment,f),E(z7.$$.fragment,f),E(cC.$$.fragment,f),E(Q7.$$.fragment,f),E(W7.$$.fragment,f),E(U7.$$.fragment,f),E(mC.$$.fragment,f),E(J7.$$.fragment,f),E(EC.$$.fragment,f),E(Y7.$$.fragment,f),E(K7.$$.fragment,f),E(ex.$$.fragment,f),E(wC.$$.fragment,f),E(ox.$$.fragment,f),E(BC.$$.fragment,f),E(rx.$$.fragment,f),E(tx.$$.fragment,f),E(nx.$$.fragment,f),E(IC.$$.fragment,f),E(sx.$$.fragment,f),E(zC.$$.fragment,f),E(lx.$$.fragment,f),E(ix.$$.fragment,f),E(cx.$$.fragment,f),E(WC.$$.fragment,f),E(fx.$$.fragment,f),E(UC.$$.fragment,f),E(mx.$$.fragment,f),E(gx.$$.fragment,f),E(px.$$.fragment,f),E(YC.$$.fragment,f),E(ux.$$.fragment,f),E(e3.$$.fragment,f),E(bx.$$.fragment,f),E(vx.$$.fragment,f),E(Tx.$$.fragment,f),E(r3.$$.fragment,f),E(Mx.$$.fragment,f),E(a3.$$.fragment,f),pIe=!0)},o(f){C(d.$$.fragment,f),C(va.$$.fragment,f),C(CA.$$.fragment,f),C(wA.$$.fragment,f),C(lf.$$.fragment,f),C(AA.$$.fragment,f),C(yA.$$.fragment,f),C($A.$$.fragment,f),C(ng.$$.fragment,f),C(kA.$$.fragment,f),C(SA.$$.fragment,f),C(RA.$$.fragment,f),C(IA.$$.fragment,f),C(qg.$$.fragment,f),C(qA.$$.fragment,f),C(NA.$$.fragment,f),C(jA.$$.fragment,f),C(OA.$$.fragment,f),C(ch.$$.fragment,f),C(fh.$$.fragment,f),C(VA.$$.fragment,f),C(XA.$$.fragment,f),C(zA.$$.fragment,f),C(HA.$$.fragment,f),C(Lh.$$.fragment,f),C(xh.$$.fragment,f),C(UA.$$.fragment,f),C(JA.$$.fragment,f),C(YA.$$.fragment,f),C(ZA.$$.fragment,f),C(Sh.$$.fragment,f),C(e0.$$.fragment,f),C(Fu.$$.fragment,f),C(o0.$$.fragment,f),C(r0.$$.fragment,f),C(a0.$$.fragment,f),C(Mu.$$.fragment,f),C(n0.$$.fragment,f),C(d_.$$.fragment,f),C(s0.$$.fragment,f),C(l0.$$.fragment,f),C(d0.$$.fragment,f),C(f_.$$.fragment,f),C(c0.$$.fragment,f),C(H_.$$.fragment,f),C(f0.$$.fragment,f),C(m0.$$.fragment,f),C(h0.$$.fragment,f),C(J_.$$.fragment,f),C(p0.$$.fragment,f),C(R2.$$.fragment,f),C(u0.$$.fragment,f),C(_0.$$.fragment,f),C(v0.$$.fragment,f),C(P2.$$.fragment,f),C(F0.$$.fragment,f),C(e6.$$.fragment,f),C(T0.$$.fragment,f),C(M0.$$.fragment,f),C(C0.$$.fragment,f),C(r6.$$.fragment,f),C(w0.$$.fragment,f),C(Y6.$$.fragment,f),C(A0.$$.fragment,f),C(y0.$$.fragment,f),C(x0.$$.fragment,f),C(Z6.$$.fragment,f),C($0.$$.fragment,f),C(x1.$$.fragment,f),C(k0.$$.fragment,f),C(S0.$$.fragment,f),C(B0.$$.fragment,f),C(k1.$$.fragment,f),C(P0.$$.fragment,f),C(N1.$$.fragment,f),C(I0.$$.fragment,f),C(q0.$$.fragment,f),C(j0.$$.fragment,f),C(D1.$$.fragment,f),C(D0.$$.fragment,f),C(Tb.$$.fragment,f),C(G0.$$.fragment,f),C(O0.$$.fragment,f),C(X0.$$.fragment,f),C(Eb.$$.fragment,f),C(z0.$$.fragment,f),C(cv.$$.fragment,f),C(Q0.$$.fragment,f),C(W0.$$.fragment,f),C(U0.$$.fragment,f),C(mv.$$.fragment,f),C(J0.$$.fragment,f),C(pv.$$.fragment,f),C(Y0.$$.fragment,f),C(K0.$$.fragment,f),C(ey.$$.fragment,f),C(_v.$$.fragment,f),C(oy.$$.fragment,f),C($v.$$.fragment,f),C(ry.$$.fragment,f),C(ty.$$.fragment,f),C(ny.$$.fragment,f),C(Sv.$$.fragment,f),C(sy.$$.fragment,f),C(Pv.$$.fragment,f),C(ly.$$.fragment,f),C(iy.$$.fragment,f),C(cy.$$.fragment,f),C(qv.$$.fragment,f),C(fy.$$.fragment,f),C(Wv.$$.fragment,f),C(my.$$.fragment,f),C(gy.$$.fragment,f),C(py.$$.fragment,f),C(Uv.$$.fragment,f),C(uy.$$.fragment,f),C(oF.$$.fragment,f),C(_y.$$.fragment,f),C(by.$$.fragment,f),C(Fy.$$.fragment,f),C(tF.$$.fragment,f),C(Ty.$$.fragment,f),C(gF.$$.fragment,f),C(My.$$.fragment,f),C(Ey.$$.fragment,f),C(wy.$$.fragment,f),C(pF.$$.fragment,f),C(Ay.$$.fragment,f),C(vF.$$.fragment,f),C(Ly.$$.fragment,f),C(xy.$$.fragment,f),C(ky.$$.fragment,f),C(TF.$$.fragment,f),C(Sy.$$.fragment,f),C(yF.$$.fragment,f),C(Ry.$$.fragment,f),C(By.$$.fragment,f),C(Iy.$$.fragment,f),C(xF.$$.fragment,f),C(qy.$$.fragment,f),C(BF.$$.fragment,f),C(Ny.$$.fragment,f),C(jy.$$.fragment,f),C(Gy.$$.fragment,f),C(IF.$$.fragment,f),C(Oy.$$.fragment,f),C(DF.$$.fragment,f),C(Xy.$$.fragment,f),C(zy.$$.fragment,f),C(Wy.$$.fragment,f),C(OF.$$.fragment,f),C(Hy.$$.fragment,f),C(zF.$$.fragment,f),C(Uy.$$.fragment,f),C(Jy.$$.fragment,f),C(Ky.$$.fragment,f),C(WF.$$.fragment,f),C(Zy.$$.fragment,f),C(ZF.$$.fragment,f),C(eL.$$.fragment,f),C(oL.$$.fragment,f),C(tL.$$.fragment,f),C(oT.$$.fragment,f),C(aL.$$.fragment,f),C(aT.$$.fragment,f),C(nL.$$.fragment,f),C(sL.$$.fragment,f),C(iL.$$.fragment,f),C(sT.$$.fragment,f),C(dL.$$.fragment,f),C(YT.$$.fragment,f),C(cL.$$.fragment,f),C(fL.$$.fragment,f),C(gL.$$.fragment,f),C(ZT.$$.fragment,f),C(hL.$$.fragment,f),C(E8.$$.fragment,f),C(pL.$$.fragment,f),C(uL.$$.fragment,f),C(bL.$$.fragment,f),C(w8.$$.fragment,f),C(vL.$$.fragment,f),C(N8.$$.fragment,f),C(FL.$$.fragment,f),C(TL.$$.fragment,f),C(EL.$$.fragment,f),C(D8.$$.fragment,f),C(CL.$$.fragment,f),C(X8.$$.fragment,f),C(wL.$$.fragment,f),C(AL.$$.fragment,f),C(LL.$$.fragment,f),C(Q8.$$.fragment,f),C(xL.$$.fragment,f),C(gM.$$.fragment,f),C($L.$$.fragment,f),C(kL.$$.fragment,f),C(RL.$$.fragment,f),C(pM.$$.fragment,f),C(BL.$$.fragment,f),C(AM.$$.fragment,f),C(PL.$$.fragment,f),C(IL.$$.fragment,f),C(NL.$$.fragment,f),C(LM.$$.fragment,f),C(jL.$$.fragment,f),C(o4.$$.fragment,f),C(DL.$$.fragment,f),C(GL.$$.fragment,f),C(VL.$$.fragment,f),C(t4.$$.fragment,f),C(XL.$$.fragment,f),C(T4.$$.fragment,f),C(zL.$$.fragment,f),C(QL.$$.fragment,f),C(HL.$$.fragment,f),C(E4.$$.fragment,f),C(UL.$$.fragment,f),C(w4.$$.fragment,f),C(JL.$$.fragment,f),C(YL.$$.fragment,f),C(ZL.$$.fragment,f),C(y4.$$.fragment,f),C(e7.$$.fragment,f),C(H4.$$.fragment,f),C(o7.$$.fragment,f),C(r7.$$.fragment,f),C(a7.$$.fragment,f),C(J4.$$.fragment,f),C(n7.$$.fragment,f),C(_E.$$.fragment,f),C(s7.$$.fragment,f),C(l7.$$.fragment,f),C(d7.$$.fragment,f),C(vE.$$.fragment,f),C(c7.$$.fragment,f),C(TE.$$.fragment,f),C(f7.$$.fragment,f),C(m7.$$.fragment,f),C(h7.$$.fragment,f),C(EE.$$.fragment,f),C(p7.$$.fragment,f),C(wE.$$.fragment,f),C(u7.$$.fragment,f),C(_7.$$.fragment,f),C(v7.$$.fragment,f),C(yE.$$.fragment,f),C(F7.$$.fragment,f),C(ZE.$$.fragment,f),C(T7.$$.fragment,f),C(M7.$$.fragment,f),C(C7.$$.fragment,f),C(o5.$$.fragment,f),C(w7.$$.fragment,f),C(f5.$$.fragment,f),C(A7.$$.fragment,f),C(y7.$$.fragment,f),C(x7.$$.fragment,f),C(g5.$$.fragment,f),C($7.$$.fragment,f),C(A5.$$.fragment,f),C(k7.$$.fragment,f),C(S7.$$.fragment,f),C(B7.$$.fragment,f),C(L5.$$.fragment,f),C(P7.$$.fragment,f),C(j5.$$.fragment,f),C(I7.$$.fragment,f),C(q7.$$.fragment,f),C(j7.$$.fragment,f),C(G5.$$.fragment,f),C(D7.$$.fragment,f),C(Y5.$$.fragment,f),C(G7.$$.fragment,f),C(O7.$$.fragment,f),C(X7.$$.fragment,f),C(Z5.$$.fragment,f),C(z7.$$.fragment,f),C(cC.$$.fragment,f),C(Q7.$$.fragment,f),C(W7.$$.fragment,f),C(U7.$$.fragment,f),C(mC.$$.fragment,f),C(J7.$$.fragment,f),C(EC.$$.fragment,f),C(Y7.$$.fragment,f),C(K7.$$.fragment,f),C(ex.$$.fragment,f),C(wC.$$.fragment,f),C(ox.$$.fragment,f),C(BC.$$.fragment,f),C(rx.$$.fragment,f),C(tx.$$.fragment,f),C(nx.$$.fragment,f),C(IC.$$.fragment,f),C(sx.$$.fragment,f),C(zC.$$.fragment,f),C(lx.$$.fragment,f),C(ix.$$.fragment,f),C(cx.$$.fragment,f),C(WC.$$.fragment,f),C(fx.$$.fragment,f),C(UC.$$.fragment,f),C(mx.$$.fragment,f),C(gx.$$.fragment,f),C(px.$$.fragment,f),C(YC.$$.fragment,f),C(ux.$$.fragment,f),C(e3.$$.fragment,f),C(bx.$$.fragment,f),C(vx.$$.fragment,f),C(Tx.$$.fragment,f),C(r3.$$.fragment,f),C(Mx.$$.fragment,f),C(a3.$$.fragment,f),pIe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(rf),f&&t(Kr),f&&t(qe),f&&t(Xe),f&&t(af),w(va,f),f&&t(ze),f&&t(Ae),f&&t(Eo),f&&t(Fa),f&&t(hBe),f&&t(ii),w(CA),f&&t(pBe),f&&t(An),f&&t(uBe),w(wA,f),f&&t(_Be),f&&t(D9),f&&t(bBe),w(lf,f),f&&t(vBe),f&&t(di),w(AA),f&&t(FBe),f&&t(Co),w(yA),w($A),w(ng),w(kA),f&&t(TBe),f&&t(fi),w(SA),f&&t(MBe),f&&t(wo),w(RA),w(IA),w(qg),w(qA),f&&t(EBe),f&&t(mi),w(NA),f&&t(CBe),f&&t(Ao),w(jA),w(OA),w(ch),w(fh),w(VA),f&&t(wBe),f&&t(gi),w(XA),f&&t(ABe),f&&t(yo),w(zA),w(HA),w(Lh),w(xh),w(UA),f&&t(yBe),f&&t(pi),w(JA),f&&t(LBe),f&&t(Lo),w(YA),w(ZA),w(Sh),w(e0),w(Fu),f&&t(xBe),f&&t(bi),w(o0),f&&t($Be),f&&t(xo),w(r0),w(a0),w(Mu),w(n0),w(d_),f&&t(kBe),f&&t(Ti),w(s0),f&&t(SBe),f&&t($o),w(l0),w(d0),w(f_),w(c0),w(H_),f&&t(RBe),f&&t(Ci),w(f0),f&&t(BBe),f&&t(ko),w(m0),w(h0),w(J_),w(p0),w(R2),f&&t(PBe),f&&t(yi),w(u0),f&&t(IBe),f&&t(So),w(_0),w(v0),w(P2),w(F0),w(e6),f&&t(qBe),f&&t($i),w(T0),f&&t(NBe),f&&t(Ro),w(M0),w(C0),w(r6),w(w0),w(Y6),f&&t(jBe),f&&t(Ri),w(A0),f&&t(DBe),f&&t(Bo),w(y0),w(x0),w(Z6),w($0),w(x1),f&&t(GBe),f&&t(Ii),w(k0),f&&t(OBe),f&&t(Po),w(S0),w(B0),w(k1),w(P0),w(N1),f&&t(VBe),f&&t(ji),w(I0),f&&t(XBe),f&&t(Io),w(q0),w(j0),w(D1),w(D0),w(Tb),f&&t(zBe),f&&t(Oi),w(G0),f&&t(QBe),f&&t(qo),w(O0),w(X0),w(Eb),w(z0),w(cv),f&&t(WBe),f&&t(zi),w(Q0),f&&t(HBe),f&&t(No),w(W0),w(U0),w(mv),w(J0),w(pv),f&&t(UBe),f&&t(Hi),w(Y0),f&&t(JBe),f&&t(jo),w(K0),w(ey),w(_v),w(oy),w($v),f&&t(YBe),f&&t(Yi),w(ry),f&&t(KBe),f&&t(Do),w(ty),w(ny),w(Sv),w(sy),w(Pv),f&&t(ZBe),f&&t(ed),w(ly),f&&t(ePe),f&&t(Go),w(iy),w(cy),w(qv),w(fy),w(Wv),f&&t(oPe),f&&t(td),w(my),f&&t(rPe),f&&t(Oo),w(gy),w(py),w(Uv),w(uy),w(oF),f&&t(tPe),f&&t(sd),w(_y),f&&t(aPe),f&&t(Vo),w(by),w(Fy),w(tF),w(Ty),w(gF),f&&t(nPe),f&&t(dd),w(My),f&&t(sPe),f&&t(Xo),w(Ey),w(wy),w(pF),w(Ay),w(vF),f&&t(lPe),f&&t(md),w(Ly),f&&t(iPe),f&&t(zo),w(xy),w(ky),w(TF),w(Sy),w(yF),f&&t(dPe),f&&t(pd),w(Ry),f&&t(cPe),f&&t(Qo),w(By),w(Iy),w(xF),w(qy),w(BF),f&&t(fPe),f&&t(vd),w(Ny),f&&t(mPe),f&&t(Wo),w(jy),w(Gy),w(IF),w(Oy),w(DF),f&&t(gPe),f&&t(Md),w(Xy),f&&t(hPe),f&&t(Ho),w(zy),w(Wy),w(OF),w(Hy),w(zF),f&&t(pPe),f&&t(wd),w(Uy),f&&t(uPe),f&&t(Uo),w(Jy),w(Ky),w(WF),w(Zy),w(ZF),f&&t(_Pe),f&&t(Ld),w(eL),f&&t(bPe),f&&t(Jo),w(oL),w(tL),w(oT),w(aL),w(aT),f&&t(vPe),f&&t(kd),w(nL),f&&t(FPe),f&&t(Yo),w(sL),w(iL),w(sT),w(dL),w(YT),f&&t(TPe),f&&t(Bd),w(cL),f&&t(MPe),f&&t(Ko),w(fL),w(gL),w(ZT),w(hL),w(E8),f&&t(EPe),f&&t(qd),w(pL),f&&t(CPe),f&&t(Zo),w(uL),w(bL),w(w8),w(vL),w(N8),f&&t(wPe),f&&t(Dd),w(FL),f&&t(APe),f&&t(er),w(TL),w(EL),w(D8),w(CL),w(X8),f&&t(yPe),f&&t(Xd),w(wL),f&&t(LPe),f&&t(or),w(AL),w(LL),w(Q8),w(xL),w(gM),f&&t(xPe),f&&t(Wd),w($L),f&&t($Pe),f&&t(rr),w(kL),w(RL),w(pM),w(BL),w(AM),f&&t(kPe),f&&t(Jd),w(PL),f&&t(SPe),f&&t(tr),w(IL),w(NL),w(LM),w(jL),w(o4),f&&t(RPe),f&&t(Zd),w(DL),f&&t(BPe),f&&t(ar),w(GL),w(VL),w(t4),w(XL),w(T4),f&&t(PPe),f&&t(rc),w(zL),f&&t(IPe),f&&t(nr),w(QL),w(HL),w(E4),w(UL),w(w4),f&&t(qPe),f&&t(nc),w(JL),f&&t(NPe),f&&t(sr),w(YL),w(ZL),w(y4),w(e7),w(H4),f&&t(jPe),f&&t(ic),w(o7),f&&t(DPe),f&&t(lr),w(r7),w(a7),w(J4),w(n7),w(_E),f&&t(GPe),f&&t(fc),w(s7),f&&t(OPe),f&&t(ir),w(l7),w(d7),w(vE),w(c7),w(TE),f&&t(VPe),f&&t(hc),w(f7),f&&t(XPe),f&&t(dr),w(m7),w(h7),w(EE),w(p7),w(wE),f&&t(zPe),f&&t(_c),w(u7),f&&t(QPe),f&&t(cr),w(_7),w(v7),w(yE),w(F7),w(ZE),f&&t(WPe),f&&t(Fc),w(T7),f&&t(HPe),f&&t(fr),w(M7),w(C7),w(o5),w(w7),w(f5),f&&t(UPe),f&&t(Ec),w(A7),f&&t(JPe),f&&t(mr),w(y7),w(x7),w(g5),w($7),w(A5),f&&t(YPe),f&&t(Ac),w(k7),f&&t(KPe),f&&t(gr),w(S7),w(B7),w(L5),w(P7),w(j5),f&&t(ZPe),f&&t(xc),w(I7),f&&t(eIe),f&&t(hr),w(q7),w(j7),w(G5),w(D7),w(Y5),f&&t(oIe),f&&t(Sc),w(G7),f&&t(rIe),f&&t(pr),w(O7),w(X7),w(Z5),w(z7),w(cC),f&&t(tIe),f&&t(Pc),w(Q7),f&&t(aIe),f&&t(ur),w(W7),w(U7),w(mC),w(J7),w(EC),f&&t(nIe),f&&t(Nc),w(Y7),f&&t(sIe),f&&t(_r),w(K7),w(ex),w(wC),w(ox),w(BC),f&&t(lIe),f&&t(Gc),w(rx),f&&t(iIe),f&&t(br),w(tx),w(nx),w(IC),w(sx),w(zC),f&&t(dIe),f&&t(Xc),w(lx),f&&t(cIe),f&&t(vr),w(ix),w(cx),w(WC),w(fx),w(UC),f&&t(fIe),f&&t(Wc),w(mx),f&&t(mIe),f&&t(Fr),w(gx),w(px),w(YC),w(ux),w(e3),f&&t(gIe),f&&t(Jc),w(bx),f&&t(hIe),f&&t(Tr),w(vx),w(Tx),w(r3),w(Mx),w(a3)}}}const swt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function lwt(L){return dCt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class hwt extends nCt{constructor(g){super();sCt(this,g,lwt,nwt,lCt,{})}}export{hwt as default,swt as metadata};
