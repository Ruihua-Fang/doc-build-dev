import{S as DEt,i as GEt,s as OEt,e as a,k as l,w as f,t as o,M as VEt,c as n,d as t,m as i,a as s,x as m,h as r,b as d,F as e,g as b,y as g,q as h,o as p,B as _,v as XEt}from"../../chunks/vendor-6b77c823.js";import{T as uBr}from"../../chunks/Tip-39098574.js";import{D as C}from"../../chunks/Docstring-abef54e3.js";import{C as A}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as X}from"../../chunks/IconCopyLink-7a11ce68.js";function zEt(If){let Z,io,de,Ce,lo,me,Me,Xo,Ii,qf,fa,qi,Ni,FC,Nf,xe,co,ji,Gn,vC,On,Vn,TC,Di,Xn,MC,Gi,jf,Da;return{c(){Z=a("p"),io=o("If your "),de=a("code"),Ce=o("NewModelConfig"),lo=o(" is a subclass of "),me=a("code"),Me=o("PretrainedConfig"),Xo=o(`, make sure its
`),Ii=a("code"),qf=o("model_type"),fa=o(" attribute is set to the same key you use when registering the config (here "),qi=a("code"),Ni=o('"new-model"'),FC=o(")."),Nf=l(),xe=a("p"),co=o("Likewise, if your "),ji=a("code"),Gn=o("NewModel"),vC=o(" is a subclass of "),On=a("a"),Vn=o("PreTrainedModel"),TC=o(`, make sure its
`),Di=a("code"),Xn=o("config_class"),MC=o(` attribute is set to the same class you use when registering the model (here
`),Gi=a("code"),jf=o("NewModelConfig"),Da=o(")."),this.h()},l(fo){Z=n(fo,"P",{});var _e=s(Z);io=r(_e,"If your "),de=n(_e,"CODE",{});var f9=s(de);Ce=r(f9,"NewModelConfig"),f9.forEach(t),lo=r(_e," is a subclass of "),me=n(_e,"CODE",{});var Oi=s(me);Me=r(Oi,"PretrainedConfig"),Oi.forEach(t),Xo=r(_e,`, make sure its
`),Ii=n(_e,"CODE",{});var m9=s(Ii);qf=r(m9,"model_type"),m9.forEach(t),fa=r(_e," attribute is set to the same key you use when registering the config (here "),qi=n(_e,"CODE",{});var g9=s(qi);Ni=r(g9,'"new-model"'),g9.forEach(t),FC=r(_e,")."),_e.forEach(t),Nf=i(fo),xe=n(fo,"P",{});var zo=s(xe);co=r(zo,"Likewise, if your "),ji=n(zo,"CODE",{});var Ga=s(ji);Gn=r(Ga,"NewModel"),Ga.forEach(t),vC=r(zo," is a subclass of "),On=n(zo,"A",{href:!0});var h9=s(On);Vn=r(h9,"PreTrainedModel"),h9.forEach(t),TC=r(zo,`, make sure its
`),Di=n(zo,"CODE",{});var Df=s(Di);Xn=r(Df,"config_class"),Df.forEach(t),MC=r(zo,` attribute is set to the same class you use when registering the model (here
`),Gi=n(zo,"CODE",{});var p9=s(Gi);jf=r(p9,"NewModelConfig"),p9.forEach(t),Da=r(zo,")."),zo.forEach(t),this.h()},h(){d(On,"href","/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel")},m(fo,_e){b(fo,Z,_e),e(Z,io),e(Z,de),e(de,Ce),e(Z,lo),e(Z,me),e(me,Me),e(Z,Xo),e(Z,Ii),e(Ii,qf),e(Z,fa),e(Z,qi),e(qi,Ni),e(Z,FC),b(fo,Nf,_e),b(fo,xe,_e),e(xe,co),e(xe,ji),e(ji,Gn),e(xe,vC),e(xe,On),e(On,Vn),e(xe,TC),e(xe,Di),e(Di,Xn),e(xe,MC),e(xe,Gi),e(Gi,jf),e(xe,Da)},d(fo){fo&&t(Z),fo&&t(Nf),fo&&t(xe)}}}function QEt(If){let Z,io,de,Ce,lo;return{c(){Z=a("p"),io=o("Passing "),de=a("code"),Ce=o("use_auth_token=True"),lo=o(" is required when you want to use a private model.")},l(me){Z=n(me,"P",{});var Me=s(Z);io=r(Me,"Passing "),de=n(Me,"CODE",{});var Xo=s(de);Ce=r(Xo,"use_auth_token=True"),Xo.forEach(t),lo=r(Me," is required when you want to use a private model."),Me.forEach(t)},m(me,Me){b(me,Z,Me),e(Z,io),e(Z,de),e(de,Ce),e(Z,lo)},d(me){me&&t(Z)}}}function WEt(If){let Z,io,de,Ce,lo;return{c(){Z=a("p"),io=o("Passing "),de=a("code"),Ce=o("use_auth_token=True"),lo=o(" is required when you want to use a private model.")},l(me){Z=n(me,"P",{});var Me=s(Z);io=r(Me,"Passing "),de=n(Me,"CODE",{});var Xo=s(de);Ce=r(Xo,"use_auth_token=True"),Xo.forEach(t),lo=r(Me," is required when you want to use a private model."),Me.forEach(t)},m(me,Me){b(me,Z,Me),e(Z,io),e(Z,de),e(de,Ce),e(Z,lo)},d(me){me&&t(Z)}}}function HEt(If){let Z,io,de,Ce,lo,me,Me,Xo,Ii,qf,fa,qi,Ni,FC,Nf,xe,co,ji,Gn,vC,On,Vn,TC,Di,Xn,MC,Gi,jf,Da,fo,_e,f9,Oi,m9,g9,zo,Ga,h9,Df,p9,mIe,ZSe,Vi,Gf,WJ,EC,gIe,HJ,hIe,eRe,zn,pIe,UJ,_Ie,uIe,JJ,bIe,FIe,oRe,CC,rRe,_9,vIe,tRe,Of,aRe,Xi,Vf,YJ,wC,TIe,KJ,MIe,nRe,Qo,AC,EIe,yC,CIe,u9,wIe,AIe,yIe,LC,LIe,ZJ,xIe,kIe,SIe,mo,xC,RIe,eY,BIe,PIe,zi,$Ie,oY,IIe,qIe,rY,NIe,jIe,DIe,F,Xf,tY,GIe,OIe,b9,VIe,XIe,zIe,zf,aY,QIe,WIe,F9,HIe,UIe,JIe,Qf,nY,YIe,KIe,v9,ZIe,eqe,oqe,Wf,sY,rqe,tqe,T9,aqe,nqe,sqe,Hf,lY,lqe,iqe,M9,dqe,cqe,fqe,Uf,iY,mqe,gqe,E9,hqe,pqe,_qe,Jf,dY,uqe,bqe,C9,Fqe,vqe,Tqe,Yf,cY,Mqe,Eqe,w9,Cqe,wqe,Aqe,Kf,fY,yqe,Lqe,A9,xqe,kqe,Sqe,Zf,mY,Rqe,Bqe,y9,Pqe,$qe,Iqe,em,gY,qqe,Nqe,L9,jqe,Dqe,Gqe,om,hY,Oqe,Vqe,x9,Xqe,zqe,Qqe,rm,pY,Wqe,Hqe,k9,Uqe,Jqe,Yqe,tm,_Y,Kqe,Zqe,S9,eNe,oNe,rNe,am,uY,tNe,aNe,R9,nNe,sNe,lNe,nm,bY,iNe,dNe,B9,cNe,fNe,mNe,sm,FY,gNe,hNe,P9,pNe,_Ne,uNe,lm,vY,bNe,FNe,$9,vNe,TNe,MNe,im,TY,ENe,CNe,I9,wNe,ANe,yNe,dm,MY,LNe,xNe,q9,kNe,SNe,RNe,cm,EY,BNe,PNe,N9,$Ne,INe,qNe,fm,CY,NNe,jNe,j9,DNe,GNe,ONe,mm,wY,VNe,XNe,D9,zNe,QNe,WNe,gm,AY,HNe,UNe,G9,JNe,YNe,KNe,hm,yY,ZNe,eje,O9,oje,rje,tje,pm,LY,aje,nje,V9,sje,lje,ije,_m,xY,dje,cje,X9,fje,mje,gje,um,kY,hje,pje,z9,_je,uje,bje,bm,SY,Fje,vje,Q9,Tje,Mje,Eje,Fm,RY,Cje,wje,W9,Aje,yje,Lje,vm,BY,xje,kje,H9,Sje,Rje,Bje,Tm,PY,Pje,$je,U9,Ije,qje,Nje,Mm,$Y,jje,Dje,J9,Gje,Oje,Vje,Em,IY,Xje,zje,Y9,Qje,Wje,Hje,Cm,qY,Uje,Jje,K9,Yje,Kje,Zje,wm,NY,eDe,oDe,Z9,rDe,tDe,aDe,Am,jY,nDe,sDe,ex,lDe,iDe,dDe,ym,DY,cDe,fDe,ox,mDe,gDe,hDe,Lm,GY,pDe,_De,rx,uDe,bDe,FDe,xm,OY,vDe,TDe,tx,MDe,EDe,CDe,km,VY,wDe,ADe,ax,yDe,LDe,xDe,Sm,XY,kDe,SDe,nx,RDe,BDe,PDe,Rm,zY,$De,IDe,sx,qDe,NDe,jDe,Bm,QY,DDe,GDe,lx,ODe,VDe,XDe,Pm,WY,zDe,QDe,ix,WDe,HDe,UDe,$m,HY,JDe,YDe,dx,KDe,ZDe,eGe,Im,UY,oGe,rGe,cx,tGe,aGe,nGe,qm,JY,sGe,lGe,fx,iGe,dGe,cGe,Nm,YY,fGe,mGe,mx,gGe,hGe,pGe,jm,KY,_Ge,uGe,gx,bGe,FGe,vGe,Dm,ZY,TGe,MGe,hx,EGe,CGe,wGe,Gm,eK,AGe,yGe,px,LGe,xGe,kGe,Om,oK,SGe,RGe,_x,BGe,PGe,$Ge,Vm,rK,IGe,qGe,ux,NGe,jGe,DGe,Xm,tK,GGe,OGe,bx,VGe,XGe,zGe,zm,aK,QGe,WGe,Fx,HGe,UGe,JGe,Qm,nK,YGe,KGe,vx,ZGe,eOe,oOe,Wm,sK,rOe,tOe,Tx,aOe,nOe,sOe,Hm,lK,lOe,iOe,Mx,dOe,cOe,fOe,Um,iK,mOe,gOe,Ex,hOe,pOe,_Oe,Jm,dK,uOe,bOe,Cx,FOe,vOe,TOe,Ym,cK,MOe,EOe,wx,COe,wOe,AOe,Km,fK,yOe,LOe,Ax,xOe,kOe,SOe,Zm,mK,ROe,BOe,yx,POe,$Oe,IOe,eg,gK,qOe,NOe,Lx,jOe,DOe,GOe,og,hK,OOe,VOe,xx,XOe,zOe,QOe,rg,pK,WOe,HOe,kx,UOe,JOe,YOe,tg,_K,KOe,ZOe,Sx,eVe,oVe,rVe,ag,uK,tVe,aVe,Rx,nVe,sVe,lVe,ng,bK,iVe,dVe,Bx,cVe,fVe,mVe,sg,FK,gVe,hVe,Px,pVe,_Ve,uVe,lg,vK,bVe,FVe,$x,vVe,TVe,MVe,ig,TK,EVe,CVe,Ix,wVe,AVe,yVe,dg,MK,LVe,xVe,qx,kVe,SVe,RVe,cg,EK,BVe,PVe,Nx,$Ve,IVe,qVe,fg,CK,NVe,jVe,jx,DVe,GVe,OVe,mg,wK,VVe,XVe,Dx,zVe,QVe,WVe,gg,AK,HVe,UVe,Gx,JVe,YVe,KVe,hg,yK,ZVe,eXe,Ox,oXe,rXe,tXe,pg,LK,aXe,nXe,Vx,sXe,lXe,iXe,_g,xK,dXe,cXe,Xx,fXe,mXe,gXe,ug,kK,hXe,pXe,zx,_Xe,uXe,bXe,bg,SK,FXe,vXe,Qx,TXe,MXe,EXe,Fg,RK,CXe,wXe,Wx,AXe,yXe,LXe,vg,BK,xXe,kXe,Hx,SXe,RXe,BXe,Tg,PK,PXe,$Xe,Ux,IXe,qXe,NXe,Mg,$K,jXe,DXe,Jx,GXe,OXe,VXe,Eg,IK,XXe,zXe,Yx,QXe,WXe,HXe,Cg,qK,UXe,JXe,Kx,YXe,KXe,ZXe,wg,NK,eze,oze,Zx,rze,tze,aze,Ag,jK,nze,sze,ek,lze,ize,dze,yg,DK,cze,fze,ok,mze,gze,hze,Lg,GK,pze,_ze,rk,uze,bze,Fze,xg,OK,vze,Tze,tk,Mze,Eze,Cze,kg,VK,wze,Aze,ak,yze,Lze,xze,Sg,XK,kze,Sze,nk,Rze,Bze,Pze,Rg,zK,$ze,Ize,sk,qze,Nze,jze,Bg,QK,Dze,Gze,lk,Oze,Vze,Xze,Pg,WK,zze,Qze,ik,Wze,Hze,Uze,$g,HK,Jze,Yze,dk,Kze,Zze,eQe,UK,oQe,rQe,kC,tQe,Ig,SC,aQe,JK,nQe,sRe,Qi,qg,YK,RC,sQe,KK,lQe,lRe,Wo,BC,iQe,PC,dQe,ck,cQe,fQe,mQe,$C,gQe,ZK,hQe,pQe,_Qe,go,IC,uQe,eZ,bQe,FQe,Oa,vQe,oZ,TQe,MQe,rZ,EQe,CQe,tZ,wQe,AQe,yQe,E,Qn,aZ,LQe,xQe,fk,kQe,SQe,mk,RQe,BQe,PQe,Wn,nZ,$Qe,IQe,gk,qQe,NQe,hk,jQe,DQe,GQe,Hn,sZ,OQe,VQe,pk,XQe,zQe,_k,QQe,WQe,HQe,Ng,lZ,UQe,JQe,uk,YQe,KQe,ZQe,Un,iZ,eWe,oWe,bk,rWe,tWe,Fk,aWe,nWe,sWe,jg,dZ,lWe,iWe,vk,dWe,cWe,fWe,Dg,cZ,mWe,gWe,Tk,hWe,pWe,_We,Gg,fZ,uWe,bWe,Mk,FWe,vWe,TWe,Jn,mZ,MWe,EWe,Ek,CWe,wWe,Ck,AWe,yWe,LWe,Yn,gZ,xWe,kWe,wk,SWe,RWe,Ak,BWe,PWe,$We,Kn,hZ,IWe,qWe,yk,NWe,jWe,Lk,DWe,GWe,OWe,Og,pZ,VWe,XWe,xk,zWe,QWe,WWe,Vg,_Z,HWe,UWe,kk,JWe,YWe,KWe,Zn,uZ,ZWe,eHe,Sk,oHe,rHe,Rk,tHe,aHe,nHe,Xg,bZ,sHe,lHe,Bk,iHe,dHe,cHe,es,FZ,fHe,mHe,Pk,gHe,hHe,$k,pHe,_He,uHe,os,vZ,bHe,FHe,Ik,vHe,THe,qk,MHe,EHe,CHe,rs,TZ,wHe,AHe,Nk,yHe,LHe,MZ,xHe,kHe,SHe,zg,EZ,RHe,BHe,jk,PHe,$He,IHe,ts,CZ,qHe,NHe,Dk,jHe,DHe,Gk,GHe,OHe,VHe,Qg,wZ,XHe,zHe,Ok,QHe,WHe,HHe,as,AZ,UHe,JHe,Vk,YHe,KHe,Xk,ZHe,eUe,oUe,ns,yZ,rUe,tUe,zk,aUe,nUe,Qk,sUe,lUe,iUe,ss,LZ,dUe,cUe,Wk,fUe,mUe,Hk,gUe,hUe,pUe,Wg,xZ,_Ue,uUe,Uk,bUe,FUe,vUe,ls,kZ,TUe,MUe,Jk,EUe,CUe,Yk,wUe,AUe,yUe,Hg,SZ,LUe,xUe,Kk,kUe,SUe,RUe,is,RZ,BUe,PUe,Zk,$Ue,IUe,eS,qUe,NUe,jUe,ds,BZ,DUe,GUe,oS,OUe,VUe,rS,XUe,zUe,QUe,cs,PZ,WUe,HUe,tS,UUe,JUe,aS,YUe,KUe,ZUe,fs,$Z,eJe,oJe,nS,rJe,tJe,sS,aJe,nJe,sJe,Ug,IZ,lJe,iJe,lS,dJe,cJe,fJe,ms,qZ,mJe,gJe,iS,hJe,pJe,dS,_Je,uJe,bJe,gs,NZ,FJe,vJe,cS,TJe,MJe,fS,EJe,CJe,wJe,hs,jZ,AJe,yJe,mS,LJe,xJe,gS,kJe,SJe,RJe,ps,DZ,BJe,PJe,hS,$Je,IJe,pS,qJe,NJe,jJe,_s,GZ,DJe,GJe,_S,OJe,VJe,uS,XJe,zJe,QJe,us,OZ,WJe,HJe,bS,UJe,JJe,FS,YJe,KJe,ZJe,Jg,VZ,eYe,oYe,vS,rYe,tYe,aYe,bs,XZ,nYe,sYe,TS,lYe,iYe,MS,dYe,cYe,fYe,Yg,zZ,mYe,gYe,ES,hYe,pYe,_Ye,Kg,QZ,uYe,bYe,CS,FYe,vYe,TYe,Fs,WZ,MYe,EYe,wS,CYe,wYe,AS,AYe,yYe,LYe,vs,HZ,xYe,kYe,yS,SYe,RYe,LS,BYe,PYe,$Ye,Zg,UZ,IYe,qYe,xS,NYe,jYe,DYe,Ts,JZ,GYe,OYe,kS,VYe,XYe,SS,zYe,QYe,WYe,Ms,YZ,HYe,UYe,RS,JYe,YYe,BS,KYe,ZYe,eKe,Es,KZ,oKe,rKe,PS,tKe,aKe,$S,nKe,sKe,lKe,Cs,ZZ,iKe,dKe,IS,cKe,fKe,qS,mKe,gKe,hKe,ws,eee,pKe,_Ke,NS,uKe,bKe,jS,FKe,vKe,TKe,eh,oee,MKe,EKe,DS,CKe,wKe,AKe,oh,ree,yKe,LKe,GS,xKe,kKe,SKe,rh,tee,RKe,BKe,OS,PKe,$Ke,IKe,th,aee,qKe,NKe,VS,jKe,DKe,GKe,As,nee,OKe,VKe,XS,XKe,zKe,zS,QKe,WKe,HKe,ah,see,UKe,JKe,QS,YKe,KKe,ZKe,ys,lee,eZe,oZe,WS,rZe,tZe,HS,aZe,nZe,sZe,Ls,iee,lZe,iZe,US,dZe,cZe,JS,fZe,mZe,gZe,xs,dee,hZe,pZe,YS,_Ze,uZe,KS,bZe,FZe,vZe,ks,cee,TZe,MZe,ZS,EZe,CZe,eR,wZe,AZe,yZe,Ss,fee,LZe,xZe,oR,kZe,SZe,rR,RZe,BZe,PZe,Rs,mee,$Ze,IZe,tR,qZe,NZe,aR,jZe,DZe,GZe,nh,gee,OZe,VZe,nR,XZe,zZe,QZe,sh,hee,WZe,HZe,sR,UZe,JZe,YZe,Bs,pee,KZe,ZZe,lR,eeo,oeo,iR,reo,teo,aeo,Ps,_ee,neo,seo,dR,leo,ieo,cR,deo,ceo,feo,$s,uee,meo,geo,fR,heo,peo,mR,_eo,ueo,beo,lh,bee,Feo,veo,gR,Teo,Meo,Eeo,ih,Fee,Ceo,weo,hR,Aeo,yeo,Leo,dh,vee,xeo,keo,pR,Seo,Reo,Beo,ch,Tee,Peo,$eo,_R,Ieo,qeo,Neo,fh,Mee,jeo,Deo,uR,Geo,Oeo,Veo,Is,Eee,Xeo,zeo,bR,Qeo,Weo,FR,Heo,Ueo,Jeo,mh,Cee,Yeo,Keo,vR,Zeo,eoo,ooo,gh,wee,roo,too,TR,aoo,noo,soo,qs,Aee,loo,ioo,MR,doo,coo,ER,foo,moo,goo,Ns,yee,hoo,poo,CR,_oo,uoo,wR,boo,Foo,voo,Lee,Too,Moo,qC,Eoo,hh,NC,Coo,xee,woo,iRe,Wi,ph,kee,jC,Aoo,See,yoo,dRe,Ho,DC,Loo,GC,xoo,AR,koo,Soo,Roo,OC,Boo,Ree,Poo,$oo,Ioo,$e,VC,qoo,Bee,Noo,joo,Va,Doo,Pee,Goo,Ooo,$ee,Voo,Xoo,Iee,zoo,Qoo,Woo,te,_h,qee,Hoo,Uoo,yR,Joo,Yoo,Koo,uh,Nee,Zoo,ero,LR,oro,rro,tro,bh,jee,aro,nro,xR,sro,lro,iro,Fh,Dee,dro,cro,kR,fro,mro,gro,vh,Gee,hro,pro,SR,_ro,uro,bro,Th,Oee,Fro,vro,RR,Tro,Mro,Ero,Mh,Vee,Cro,wro,BR,Aro,yro,Lro,Eh,Xee,xro,kro,PR,Sro,Rro,Bro,Ch,zee,Pro,$ro,$R,Iro,qro,Nro,wh,Qee,jro,Dro,IR,Gro,Oro,Vro,Ah,Wee,Xro,zro,qR,Qro,Wro,Hro,yh,Hee,Uro,Jro,NR,Yro,Kro,Zro,Lh,Uee,eto,oto,jR,rto,tto,ato,xh,Jee,nto,sto,DR,lto,ito,dto,kh,Yee,cto,fto,GR,mto,gto,hto,Sh,Kee,pto,_to,OR,uto,bto,Fto,Rh,Zee,vto,Tto,VR,Mto,Eto,Cto,Bh,eoe,wto,Ato,XR,yto,Lto,xto,Ph,kto,ooe,Sto,Rto,XC,Bto,$h,zC,Pto,roe,$to,cRe,Hi,Ih,toe,QC,Ito,aoe,qto,fRe,Uo,WC,Nto,HC,jto,zR,Dto,Gto,Oto,UC,Vto,noe,Xto,zto,Qto,Ie,JC,Wto,soe,Hto,Uto,Ui,Jto,loe,Yto,Kto,ioe,Zto,eao,oao,ke,qh,doe,rao,tao,QR,aao,nao,sao,Nh,coe,lao,iao,WR,dao,cao,fao,jh,foe,mao,gao,HR,hao,pao,_ao,Dh,moe,uao,bao,UR,Fao,vao,Tao,Gh,goe,Mao,Eao,JR,Cao,wao,Aao,Oh,hoe,yao,Lao,YR,xao,kao,Sao,Vh,poe,Rao,Bao,KR,Pao,$ao,Iao,Xh,_oe,qao,Nao,ZR,jao,Dao,Gao,zh,Oao,uoe,Vao,Xao,YC,zao,Qh,KC,Qao,boe,Wao,mRe,Ji,Wh,Foe,ZC,Hao,voe,Uao,gRe,Jo,e5,Jao,Yi,Yao,eB,Kao,Zao,oB,eno,ono,rno,o5,tno,Toe,ano,nno,sno,Xr,r5,lno,Moe,ino,dno,Ki,cno,Eoe,fno,mno,rB,gno,hno,pno,Coe,_no,uno,t5,bno,qe,a5,Fno,woe,vno,Tno,Xa,Mno,Aoe,Eno,Cno,yoe,wno,Ano,Loe,yno,Lno,xno,T,Hh,xoe,kno,Sno,tB,Rno,Bno,Pno,Uh,koe,$no,Ino,aB,qno,Nno,jno,Jh,Soe,Dno,Gno,nB,Ono,Vno,Xno,Yh,Roe,zno,Qno,sB,Wno,Hno,Uno,Kh,Boe,Jno,Yno,lB,Kno,Zno,eso,Zh,Poe,oso,rso,iB,tso,aso,nso,ep,$oe,sso,lso,dB,iso,dso,cso,op,Ioe,fso,mso,cB,gso,hso,pso,rp,qoe,_so,uso,fB,bso,Fso,vso,tp,Noe,Tso,Mso,mB,Eso,Cso,wso,ap,joe,Aso,yso,gB,Lso,xso,kso,np,Doe,Sso,Rso,hB,Bso,Pso,$so,sp,Goe,Iso,qso,pB,Nso,jso,Dso,lp,Ooe,Gso,Oso,_B,Vso,Xso,zso,ip,Voe,Qso,Wso,uB,Hso,Uso,Jso,dp,Xoe,Yso,Kso,bB,Zso,elo,olo,cp,zoe,rlo,tlo,FB,alo,nlo,slo,fp,Qoe,llo,ilo,vB,dlo,clo,flo,mp,Woe,mlo,glo,TB,hlo,plo,_lo,gp,Hoe,ulo,blo,MB,Flo,vlo,Tlo,hp,Uoe,Mlo,Elo,EB,Clo,wlo,Alo,pp,Joe,ylo,Llo,CB,xlo,klo,Slo,_p,Yoe,Rlo,Blo,wB,Plo,$lo,Ilo,up,Koe,qlo,Nlo,AB,jlo,Dlo,Glo,bp,Zoe,Olo,Vlo,yB,Xlo,zlo,Qlo,Fp,ere,Wlo,Hlo,LB,Ulo,Jlo,Ylo,vp,ore,Klo,Zlo,xB,eio,oio,rio,Tp,rre,tio,aio,kB,nio,sio,lio,Mp,tre,iio,dio,SB,cio,fio,mio,js,are,gio,hio,RB,pio,_io,BB,uio,bio,Fio,Ep,nre,vio,Tio,PB,Mio,Eio,Cio,Cp,sre,wio,Aio,$B,yio,Lio,xio,wp,lre,kio,Sio,IB,Rio,Bio,Pio,Ap,ire,$io,Iio,qB,qio,Nio,jio,yp,dre,Dio,Gio,NB,Oio,Vio,Xio,Lp,cre,zio,Qio,jB,Wio,Hio,Uio,xp,fre,Jio,Yio,DB,Kio,Zio,edo,kp,mre,odo,rdo,GB,tdo,ado,ndo,Sp,gre,sdo,ldo,OB,ido,ddo,cdo,Rp,hre,fdo,mdo,VB,gdo,hdo,pdo,Bp,pre,_do,udo,XB,bdo,Fdo,vdo,Pp,_re,Tdo,Mdo,zB,Edo,Cdo,wdo,$p,ure,Ado,ydo,QB,Ldo,xdo,kdo,Ip,bre,Sdo,Rdo,WB,Bdo,Pdo,$do,qp,Fre,Ido,qdo,HB,Ndo,jdo,Ddo,Np,vre,Gdo,Odo,UB,Vdo,Xdo,zdo,jp,Tre,Qdo,Wdo,JB,Hdo,Udo,Jdo,Dp,Mre,Ydo,Kdo,YB,Zdo,eco,oco,Gp,Ere,rco,tco,KB,aco,nco,sco,Op,Cre,lco,ico,ZB,dco,cco,fco,Vp,wre,mco,gco,eP,hco,pco,_co,Xp,Are,uco,bco,oP,Fco,vco,Tco,zp,yre,Mco,Eco,rP,Cco,wco,Aco,Qp,Lre,yco,Lco,tP,xco,kco,Sco,Wp,xre,Rco,Bco,aP,Pco,$co,Ico,Hp,kre,qco,Nco,nP,jco,Dco,Gco,Up,Sre,Oco,Vco,sP,Xco,zco,Qco,Jp,Rre,Wco,Hco,lP,Uco,Jco,Yco,Yp,Bre,Kco,Zco,iP,efo,ofo,rfo,Kp,Pre,tfo,afo,dP,nfo,sfo,lfo,Zp,$re,ifo,dfo,cP,cfo,ffo,mfo,e_,Ire,gfo,hfo,fP,pfo,_fo,ufo,o_,qre,bfo,Ffo,mP,vfo,Tfo,Mfo,r_,Nre,Efo,Cfo,gP,wfo,Afo,yfo,t_,jre,Lfo,xfo,hP,kfo,Sfo,Rfo,a_,Dre,Bfo,Pfo,pP,$fo,Ifo,qfo,n_,Gre,Nfo,jfo,_P,Dfo,Gfo,Ofo,s_,Ore,Vfo,Xfo,uP,zfo,Qfo,Wfo,l_,Vre,Hfo,Ufo,bP,Jfo,Yfo,Kfo,i_,Xre,Zfo,emo,FP,omo,rmo,tmo,d_,zre,amo,nmo,vP,smo,lmo,imo,c_,Qre,dmo,cmo,TP,fmo,mmo,gmo,f_,Wre,hmo,pmo,MP,_mo,umo,bmo,m_,Hre,Fmo,vmo,EP,Tmo,Mmo,Emo,g_,Ure,Cmo,wmo,CP,Amo,ymo,Lmo,h_,Jre,xmo,kmo,wP,Smo,Rmo,Bmo,p_,Yre,Pmo,$mo,AP,Imo,qmo,Nmo,__,Kre,jmo,Dmo,yP,Gmo,Omo,Vmo,u_,Zre,Xmo,zmo,LP,Qmo,Wmo,Hmo,b_,ete,Umo,Jmo,xP,Ymo,Kmo,Zmo,F_,ote,ego,ogo,kP,rgo,tgo,ago,v_,rte,ngo,sgo,SP,lgo,igo,dgo,T_,tte,cgo,fgo,RP,mgo,ggo,hgo,M_,ate,pgo,_go,BP,ugo,bgo,Fgo,E_,nte,vgo,Tgo,PP,Mgo,Ego,Cgo,C_,ste,wgo,Ago,$P,ygo,Lgo,xgo,w_,lte,kgo,Sgo,IP,Rgo,Bgo,Pgo,A_,ite,$go,Igo,qP,qgo,Ngo,jgo,y_,dte,Dgo,Ggo,NP,Ogo,Vgo,Xgo,L_,cte,zgo,Qgo,jP,Wgo,Hgo,Ugo,x_,fte,Jgo,Ygo,DP,Kgo,Zgo,eho,k_,mte,oho,rho,GP,tho,aho,nho,S_,sho,gte,lho,iho,hte,dho,cho,pte,fho,mho,n5,hRe,Zi,R_,_te,s5,gho,ute,hho,pRe,Yo,l5,pho,ed,_ho,OP,uho,bho,VP,Fho,vho,Tho,i5,Mho,bte,Eho,Cho,who,zr,d5,Aho,Fte,yho,Lho,od,xho,vte,kho,Sho,XP,Rho,Bho,Pho,Tte,$ho,Iho,c5,qho,Ne,f5,Nho,Mte,jho,Dho,za,Gho,Ete,Oho,Vho,Cte,Xho,zho,wte,Qho,Who,Hho,S,B_,Ate,Uho,Jho,zP,Yho,Kho,Zho,P_,yte,epo,opo,QP,rpo,tpo,apo,$_,Lte,npo,spo,WP,lpo,ipo,dpo,I_,xte,cpo,fpo,HP,mpo,gpo,hpo,q_,kte,ppo,_po,UP,upo,bpo,Fpo,N_,Ste,vpo,Tpo,JP,Mpo,Epo,Cpo,j_,Rte,wpo,Apo,YP,ypo,Lpo,xpo,D_,Bte,kpo,Spo,KP,Rpo,Bpo,Ppo,G_,Pte,$po,Ipo,ZP,qpo,Npo,jpo,O_,$te,Dpo,Gpo,e$,Opo,Vpo,Xpo,V_,Ite,zpo,Qpo,o$,Wpo,Hpo,Upo,X_,qte,Jpo,Ypo,r$,Kpo,Zpo,e_o,z_,Nte,o_o,r_o,t$,t_o,a_o,n_o,Q_,jte,s_o,l_o,a$,i_o,d_o,c_o,W_,Dte,f_o,m_o,n$,g_o,h_o,p_o,H_,Gte,__o,u_o,s$,b_o,F_o,v_o,U_,Ote,T_o,M_o,l$,E_o,C_o,w_o,J_,Vte,A_o,y_o,i$,L_o,x_o,k_o,Y_,Xte,S_o,R_o,d$,B_o,P_o,$_o,K_,zte,I_o,q_o,c$,N_o,j_o,D_o,Z_,Qte,G_o,O_o,f$,V_o,X_o,z_o,eu,Wte,Q_o,W_o,m$,H_o,U_o,J_o,ou,Hte,Y_o,K_o,g$,Z_o,euo,ouo,ru,Ute,ruo,tuo,h$,auo,nuo,suo,tu,Jte,luo,iuo,p$,duo,cuo,fuo,au,Yte,muo,guo,_$,huo,puo,_uo,nu,Kte,uuo,buo,u$,Fuo,vuo,Tuo,su,Zte,Muo,Euo,b$,Cuo,wuo,Auo,lu,eae,yuo,Luo,F$,xuo,kuo,Suo,iu,oae,Ruo,Buo,v$,Puo,$uo,Iuo,du,rae,quo,Nuo,T$,juo,Duo,Guo,cu,tae,Ouo,Vuo,M$,Xuo,zuo,Quo,fu,aae,Wuo,Huo,E$,Uuo,Juo,Yuo,mu,nae,Kuo,Zuo,C$,e1o,o1o,r1o,gu,sae,t1o,a1o,w$,n1o,s1o,l1o,hu,lae,i1o,d1o,A$,c1o,f1o,m1o,pu,iae,g1o,h1o,y$,p1o,_1o,u1o,_u,dae,b1o,F1o,L$,v1o,T1o,M1o,uu,cae,E1o,C1o,x$,w1o,A1o,y1o,bu,L1o,fae,x1o,k1o,mae,S1o,R1o,gae,B1o,P1o,m5,_Re,rd,Fu,hae,g5,$1o,pae,I1o,uRe,Ko,h5,q1o,td,N1o,k$,j1o,D1o,S$,G1o,O1o,V1o,p5,X1o,_ae,z1o,Q1o,W1o,Qr,_5,H1o,uae,U1o,J1o,ad,Y1o,bae,K1o,Z1o,R$,e4o,o4o,r4o,Fae,t4o,a4o,u5,n4o,je,b5,s4o,vae,l4o,i4o,Qa,d4o,Tae,c4o,f4o,Mae,m4o,g4o,Eae,h4o,p4o,_4o,$,vu,Cae,u4o,b4o,B$,F4o,v4o,T4o,Tu,wae,M4o,E4o,P$,C4o,w4o,A4o,Mu,Aae,y4o,L4o,$$,x4o,k4o,S4o,Eu,yae,R4o,B4o,I$,P4o,$4o,I4o,Cu,Lae,q4o,N4o,q$,j4o,D4o,G4o,wu,xae,O4o,V4o,N$,X4o,z4o,Q4o,Au,kae,W4o,H4o,j$,U4o,J4o,Y4o,yu,Sae,K4o,Z4o,D$,ebo,obo,rbo,Lu,Rae,tbo,abo,G$,nbo,sbo,lbo,xu,Bae,ibo,dbo,O$,cbo,fbo,mbo,ku,Pae,gbo,hbo,V$,pbo,_bo,ubo,Su,$ae,bbo,Fbo,X$,vbo,Tbo,Mbo,Ru,Iae,Ebo,Cbo,z$,wbo,Abo,ybo,Bu,qae,Lbo,xbo,Q$,kbo,Sbo,Rbo,Pu,Nae,Bbo,Pbo,W$,$bo,Ibo,qbo,$u,jae,Nbo,jbo,H$,Dbo,Gbo,Obo,Iu,Dae,Vbo,Xbo,U$,zbo,Qbo,Wbo,qu,Gae,Hbo,Ubo,J$,Jbo,Ybo,Kbo,Nu,Oae,Zbo,e3o,Y$,o3o,r3o,t3o,ju,Vae,a3o,n3o,K$,s3o,l3o,i3o,Du,Xae,d3o,c3o,Z$,f3o,m3o,g3o,Gu,zae,h3o,p3o,eI,_3o,u3o,b3o,Ou,Qae,F3o,v3o,oI,T3o,M3o,E3o,Vu,Wae,C3o,w3o,rI,A3o,y3o,L3o,Xu,Hae,x3o,k3o,tI,S3o,R3o,B3o,zu,Uae,P3o,$3o,aI,I3o,q3o,N3o,Qu,Jae,j3o,D3o,nI,G3o,O3o,V3o,Wu,Yae,X3o,z3o,sI,Q3o,W3o,H3o,Hu,Kae,U3o,J3o,lI,Y3o,K3o,Z3o,Uu,Zae,e2o,o2o,iI,r2o,t2o,a2o,Ju,ene,n2o,s2o,dI,l2o,i2o,d2o,Yu,one,c2o,f2o,cI,m2o,g2o,h2o,Ku,rne,p2o,_2o,fI,u2o,b2o,F2o,Zu,tne,v2o,T2o,mI,M2o,E2o,C2o,e1,ane,w2o,A2o,gI,y2o,L2o,x2o,o1,k2o,nne,S2o,R2o,sne,B2o,P2o,lne,$2o,I2o,F5,bRe,nd,r1,ine,v5,q2o,dne,N2o,FRe,Zo,T5,j2o,sd,D2o,hI,G2o,O2o,pI,V2o,X2o,z2o,M5,Q2o,cne,W2o,H2o,U2o,Wr,E5,J2o,fne,Y2o,K2o,ld,Z2o,mne,eFo,oFo,_I,rFo,tFo,aFo,gne,nFo,sFo,C5,lFo,De,w5,iFo,hne,dFo,cFo,Wa,fFo,pne,mFo,gFo,_ne,hFo,pFo,une,_Fo,uFo,bFo,I,t1,bne,FFo,vFo,uI,TFo,MFo,EFo,a1,Fne,CFo,wFo,bI,AFo,yFo,LFo,n1,vne,xFo,kFo,FI,SFo,RFo,BFo,s1,Tne,PFo,$Fo,vI,IFo,qFo,NFo,l1,Mne,jFo,DFo,TI,GFo,OFo,VFo,i1,Ene,XFo,zFo,MI,QFo,WFo,HFo,d1,Cne,UFo,JFo,EI,YFo,KFo,ZFo,c1,wne,evo,ovo,CI,rvo,tvo,avo,f1,Ane,nvo,svo,wI,lvo,ivo,dvo,m1,yne,cvo,fvo,AI,mvo,gvo,hvo,g1,Lne,pvo,_vo,yI,uvo,bvo,Fvo,h1,xne,vvo,Tvo,LI,Mvo,Evo,Cvo,p1,kne,wvo,Avo,xI,yvo,Lvo,xvo,_1,Sne,kvo,Svo,kI,Rvo,Bvo,Pvo,u1,Rne,$vo,Ivo,SI,qvo,Nvo,jvo,b1,Bne,Dvo,Gvo,RI,Ovo,Vvo,Xvo,F1,Pne,zvo,Qvo,BI,Wvo,Hvo,Uvo,v1,$ne,Jvo,Yvo,PI,Kvo,Zvo,e6o,T1,Ine,o6o,r6o,$I,t6o,a6o,n6o,M1,qne,s6o,l6o,II,i6o,d6o,c6o,E1,Nne,f6o,m6o,qI,g6o,h6o,p6o,C1,jne,_6o,u6o,NI,b6o,F6o,v6o,w1,Dne,T6o,M6o,jI,E6o,C6o,w6o,A1,Gne,A6o,y6o,DI,L6o,x6o,k6o,y1,One,S6o,R6o,GI,B6o,P6o,$6o,L1,Vne,I6o,q6o,OI,N6o,j6o,D6o,x1,Xne,G6o,O6o,VI,V6o,X6o,z6o,k1,zne,Q6o,W6o,XI,H6o,U6o,J6o,S1,Qne,Y6o,K6o,zI,Z6o,eTo,oTo,R1,Wne,rTo,tTo,QI,aTo,nTo,sTo,B1,Hne,lTo,iTo,Une,dTo,cTo,fTo,P1,Jne,mTo,gTo,WI,hTo,pTo,_To,$1,Yne,uTo,bTo,HI,FTo,vTo,TTo,I1,Kne,MTo,ETo,UI,CTo,wTo,ATo,q1,Zne,yTo,LTo,JI,xTo,kTo,STo,N1,RTo,ese,BTo,PTo,ose,$To,ITo,rse,qTo,NTo,A5,vRe,id,j1,tse,y5,jTo,ase,DTo,TRe,er,L5,GTo,dd,OTo,YI,VTo,XTo,KI,zTo,QTo,WTo,x5,HTo,nse,UTo,JTo,YTo,Hr,k5,KTo,sse,ZTo,e7o,cd,o7o,lse,r7o,t7o,ZI,a7o,n7o,s7o,ise,l7o,i7o,S5,d7o,Ge,R5,c7o,dse,f7o,m7o,Ha,g7o,cse,h7o,p7o,fse,_7o,u7o,mse,b7o,F7o,v7o,ae,D1,gse,T7o,M7o,eq,E7o,C7o,w7o,G1,hse,A7o,y7o,oq,L7o,x7o,k7o,O1,pse,S7o,R7o,rq,B7o,P7o,$7o,V1,_se,I7o,q7o,tq,N7o,j7o,D7o,X1,use,G7o,O7o,aq,V7o,X7o,z7o,z1,bse,Q7o,W7o,nq,H7o,U7o,J7o,Q1,Fse,Y7o,K7o,sq,Z7o,eMo,oMo,W1,vse,rMo,tMo,lq,aMo,nMo,sMo,H1,Tse,lMo,iMo,iq,dMo,cMo,fMo,U1,Mse,mMo,gMo,dq,hMo,pMo,_Mo,J1,Ese,uMo,bMo,cq,FMo,vMo,TMo,Y1,Cse,MMo,EMo,fq,CMo,wMo,AMo,K1,wse,yMo,LMo,mq,xMo,kMo,SMo,Z1,Ase,RMo,BMo,gq,PMo,$Mo,IMo,e4,yse,qMo,NMo,hq,jMo,DMo,GMo,o4,Lse,OMo,VMo,pq,XMo,zMo,QMo,r4,xse,WMo,HMo,_q,UMo,JMo,YMo,t4,KMo,kse,ZMo,eEo,Sse,oEo,rEo,Rse,tEo,aEo,B5,MRe,fd,a4,Bse,P5,nEo,Pse,sEo,ERe,or,$5,lEo,md,iEo,uq,dEo,cEo,bq,fEo,mEo,gEo,I5,hEo,$se,pEo,_Eo,uEo,Ur,q5,bEo,Ise,FEo,vEo,gd,TEo,qse,MEo,EEo,Fq,CEo,wEo,AEo,Nse,yEo,LEo,N5,xEo,Oe,j5,kEo,jse,SEo,REo,Ua,BEo,Dse,PEo,$Eo,Gse,IEo,qEo,Ose,NEo,jEo,DEo,y,n4,Vse,GEo,OEo,vq,VEo,XEo,zEo,s4,Xse,QEo,WEo,Tq,HEo,UEo,JEo,l4,zse,YEo,KEo,Mq,ZEo,eCo,oCo,i4,Qse,rCo,tCo,Eq,aCo,nCo,sCo,d4,Wse,lCo,iCo,Cq,dCo,cCo,fCo,c4,Hse,mCo,gCo,wq,hCo,pCo,_Co,f4,Use,uCo,bCo,Aq,FCo,vCo,TCo,m4,Jse,MCo,ECo,yq,CCo,wCo,ACo,g4,Yse,yCo,LCo,Lq,xCo,kCo,SCo,h4,Kse,RCo,BCo,xq,PCo,$Co,ICo,p4,Zse,qCo,NCo,kq,jCo,DCo,GCo,_4,ele,OCo,VCo,Sq,XCo,zCo,QCo,u4,ole,WCo,HCo,Rq,UCo,JCo,YCo,b4,rle,KCo,ZCo,Bq,e5o,o5o,r5o,F4,tle,t5o,a5o,Pq,n5o,s5o,l5o,v4,ale,i5o,d5o,$q,c5o,f5o,m5o,T4,nle,g5o,h5o,Iq,p5o,_5o,u5o,M4,sle,b5o,F5o,qq,v5o,T5o,M5o,E4,lle,E5o,C5o,Nq,w5o,A5o,y5o,C4,ile,L5o,x5o,jq,k5o,S5o,R5o,w4,dle,B5o,P5o,Dq,$5o,I5o,q5o,A4,cle,N5o,j5o,Gq,D5o,G5o,O5o,y4,fle,V5o,X5o,Oq,z5o,Q5o,W5o,L4,mle,H5o,U5o,Vq,J5o,Y5o,K5o,x4,gle,Z5o,ewo,Xq,owo,rwo,two,k4,hle,awo,nwo,zq,swo,lwo,iwo,S4,ple,dwo,cwo,Qq,fwo,mwo,gwo,R4,_le,hwo,pwo,Wq,_wo,uwo,bwo,B4,ule,Fwo,vwo,Hq,Two,Mwo,Ewo,P4,ble,Cwo,wwo,Uq,Awo,ywo,Lwo,$4,Fle,xwo,kwo,Jq,Swo,Rwo,Bwo,I4,vle,Pwo,$wo,Yq,Iwo,qwo,Nwo,q4,Tle,jwo,Dwo,Kq,Gwo,Owo,Vwo,N4,Mle,Xwo,zwo,Zq,Qwo,Wwo,Hwo,j4,Ele,Uwo,Jwo,eN,Ywo,Kwo,Zwo,D4,Cle,eAo,oAo,oN,rAo,tAo,aAo,G4,wle,nAo,sAo,rN,lAo,iAo,dAo,O4,Ale,cAo,fAo,tN,mAo,gAo,hAo,V4,yle,pAo,_Ao,aN,uAo,bAo,FAo,X4,Lle,vAo,TAo,nN,MAo,EAo,CAo,z4,xle,wAo,AAo,sN,yAo,LAo,xAo,Q4,kle,kAo,SAo,lN,RAo,BAo,PAo,W4,Sle,$Ao,IAo,iN,qAo,NAo,jAo,H4,Rle,DAo,GAo,dN,OAo,VAo,XAo,U4,Ble,zAo,QAo,cN,WAo,HAo,UAo,J4,Ple,JAo,YAo,fN,KAo,ZAo,e0o,Y4,$le,o0o,r0o,mN,t0o,a0o,n0o,K4,s0o,Ile,l0o,i0o,qle,d0o,c0o,Nle,f0o,m0o,D5,CRe,hd,Z4,jle,G5,g0o,Dle,h0o,wRe,rr,O5,p0o,pd,_0o,gN,u0o,b0o,hN,F0o,v0o,T0o,V5,M0o,Gle,E0o,C0o,w0o,Jr,X5,A0o,Ole,y0o,L0o,_d,x0o,Vle,k0o,S0o,pN,R0o,B0o,P0o,Xle,$0o,I0o,z5,q0o,Ve,Q5,N0o,zle,j0o,D0o,Ja,G0o,Qle,O0o,V0o,Wle,X0o,z0o,Hle,Q0o,W0o,H0o,G,eb,Ule,U0o,J0o,_N,Y0o,K0o,Z0o,ob,Jle,eyo,oyo,uN,ryo,tyo,ayo,rb,Yle,nyo,syo,bN,lyo,iyo,dyo,tb,Kle,cyo,fyo,FN,myo,gyo,hyo,ab,Zle,pyo,_yo,vN,uyo,byo,Fyo,nb,eie,vyo,Tyo,TN,Myo,Eyo,Cyo,sb,oie,wyo,Ayo,MN,yyo,Lyo,xyo,lb,rie,kyo,Syo,EN,Ryo,Byo,Pyo,ib,tie,$yo,Iyo,CN,qyo,Nyo,jyo,db,aie,Dyo,Gyo,wN,Oyo,Vyo,Xyo,cb,nie,zyo,Qyo,AN,Wyo,Hyo,Uyo,fb,sie,Jyo,Yyo,yN,Kyo,Zyo,eLo,mb,lie,oLo,rLo,LN,tLo,aLo,nLo,gb,iie,sLo,lLo,xN,iLo,dLo,cLo,hb,die,fLo,mLo,kN,gLo,hLo,pLo,pb,cie,_Lo,uLo,SN,bLo,FLo,vLo,_b,fie,TLo,MLo,RN,ELo,CLo,wLo,ub,mie,ALo,yLo,BN,LLo,xLo,kLo,bb,gie,SLo,RLo,PN,BLo,PLo,$Lo,Fb,hie,ILo,qLo,$N,NLo,jLo,DLo,vb,pie,GLo,OLo,IN,VLo,XLo,zLo,Tb,_ie,QLo,WLo,qN,HLo,ULo,JLo,Mb,uie,YLo,KLo,NN,ZLo,e8o,o8o,Eb,bie,r8o,t8o,jN,a8o,n8o,s8o,Cb,Fie,l8o,i8o,DN,d8o,c8o,f8o,wb,vie,m8o,g8o,GN,h8o,p8o,_8o,Ab,Tie,u8o,b8o,ON,F8o,v8o,T8o,yb,Mie,M8o,E8o,VN,C8o,w8o,A8o,Lb,y8o,Eie,L8o,x8o,Cie,k8o,S8o,wie,R8o,B8o,W5,ARe,ud,xb,Aie,H5,P8o,yie,$8o,yRe,tr,U5,I8o,bd,q8o,XN,N8o,j8o,zN,D8o,G8o,O8o,J5,V8o,Lie,X8o,z8o,Q8o,Yr,Y5,W8o,xie,H8o,U8o,Fd,J8o,kie,Y8o,K8o,QN,Z8o,e9o,o9o,Sie,r9o,t9o,K5,a9o,Xe,Z5,n9o,Rie,s9o,l9o,Ya,i9o,Bie,d9o,c9o,Pie,f9o,m9o,$ie,g9o,h9o,p9o,da,kb,Iie,_9o,u9o,WN,b9o,F9o,v9o,Sb,qie,T9o,M9o,HN,E9o,C9o,w9o,Rb,Nie,A9o,y9o,UN,L9o,x9o,k9o,Bb,jie,S9o,R9o,JN,B9o,P9o,$9o,Pb,Die,I9o,q9o,YN,N9o,j9o,D9o,$b,G9o,Gie,O9o,V9o,Oie,X9o,z9o,Vie,Q9o,W9o,ew,LRe,vd,Ib,Xie,ow,H9o,zie,U9o,xRe,ar,rw,J9o,Td,Y9o,KN,K9o,Z9o,ZN,exo,oxo,rxo,tw,txo,Qie,axo,nxo,sxo,Kr,aw,lxo,Wie,ixo,dxo,Md,cxo,Hie,fxo,mxo,ej,gxo,hxo,pxo,Uie,_xo,uxo,nw,bxo,ze,sw,Fxo,Jie,vxo,Txo,Ka,Mxo,Yie,Exo,Cxo,Kie,wxo,Axo,Zie,yxo,Lxo,xxo,j,qb,ede,kxo,Sxo,oj,Rxo,Bxo,Pxo,Nb,ode,$xo,Ixo,rj,qxo,Nxo,jxo,jb,rde,Dxo,Gxo,tj,Oxo,Vxo,Xxo,Db,tde,zxo,Qxo,aj,Wxo,Hxo,Uxo,Gb,ade,Jxo,Yxo,nj,Kxo,Zxo,eko,Ob,nde,oko,rko,sj,tko,ako,nko,Vb,sde,sko,lko,lj,iko,dko,cko,Xb,lde,fko,mko,ij,gko,hko,pko,zb,ide,_ko,uko,dj,bko,Fko,vko,Qb,dde,Tko,Mko,cj,Eko,Cko,wko,Wb,cde,Ako,yko,fj,Lko,xko,kko,Hb,fde,Sko,Rko,mj,Bko,Pko,$ko,Ub,mde,Iko,qko,gj,Nko,jko,Dko,Jb,gde,Gko,Oko,hj,Vko,Xko,zko,Yb,hde,Qko,Wko,pj,Hko,Uko,Jko,Kb,pde,Yko,Kko,_j,Zko,eSo,oSo,Zb,_de,rSo,tSo,uj,aSo,nSo,sSo,e3,ude,lSo,iSo,bj,dSo,cSo,fSo,o3,bde,mSo,gSo,Fj,hSo,pSo,_So,r3,Fde,uSo,bSo,vj,FSo,vSo,TSo,t3,vde,MSo,ESo,Tj,CSo,wSo,ASo,a3,Tde,ySo,LSo,Mj,xSo,kSo,SSo,n3,Mde,RSo,BSo,Ej,PSo,$So,ISo,s3,Ede,qSo,NSo,Cj,jSo,DSo,GSo,l3,Cde,OSo,VSo,wj,XSo,zSo,QSo,i3,wde,WSo,HSo,Aj,USo,JSo,YSo,d3,Ade,KSo,ZSo,yj,eRo,oRo,rRo,c3,yde,tRo,aRo,Lj,nRo,sRo,lRo,f3,Lde,iRo,dRo,xj,cRo,fRo,mRo,m3,xde,gRo,hRo,kj,pRo,_Ro,uRo,g3,kde,bRo,FRo,Sj,vRo,TRo,MRo,h3,Sde,ERo,CRo,Rj,wRo,ARo,yRo,p3,Rde,LRo,xRo,Bj,kRo,SRo,RRo,_3,BRo,Bde,PRo,$Ro,Pde,IRo,qRo,$de,NRo,jRo,lw,kRe,Ed,u3,Ide,iw,DRo,qde,GRo,SRe,nr,dw,ORo,Cd,VRo,Pj,XRo,zRo,$j,QRo,WRo,HRo,cw,URo,Nde,JRo,YRo,KRo,Zr,fw,ZRo,jde,eBo,oBo,wd,rBo,Dde,tBo,aBo,Ij,nBo,sBo,lBo,Gde,iBo,dBo,mw,cBo,Qe,gw,fBo,Ode,mBo,gBo,Za,hBo,Vde,pBo,_Bo,Xde,uBo,bBo,zde,FBo,vBo,TBo,R,b3,Qde,MBo,EBo,qj,CBo,wBo,ABo,F3,Wde,yBo,LBo,Nj,xBo,kBo,SBo,v3,Hde,RBo,BBo,jj,PBo,$Bo,IBo,T3,Ude,qBo,NBo,Dj,jBo,DBo,GBo,M3,Jde,OBo,VBo,Gj,XBo,zBo,QBo,E3,Yde,WBo,HBo,Oj,UBo,JBo,YBo,C3,Kde,KBo,ZBo,Vj,ePo,oPo,rPo,w3,Zde,tPo,aPo,Xj,nPo,sPo,lPo,A3,ece,iPo,dPo,zj,cPo,fPo,mPo,y3,oce,gPo,hPo,Qj,pPo,_Po,uPo,L3,rce,bPo,FPo,Wj,vPo,TPo,MPo,x3,tce,EPo,CPo,Hj,wPo,APo,yPo,k3,ace,LPo,xPo,Uj,kPo,SPo,RPo,S3,nce,BPo,PPo,Jj,$Po,IPo,qPo,R3,sce,NPo,jPo,Yj,DPo,GPo,OPo,B3,lce,VPo,XPo,Kj,zPo,QPo,WPo,P3,ice,HPo,UPo,Zj,JPo,YPo,KPo,$3,dce,ZPo,e$o,eD,o$o,r$o,t$o,I3,cce,a$o,n$o,oD,s$o,l$o,i$o,q3,fce,d$o,c$o,rD,f$o,m$o,g$o,N3,mce,h$o,p$o,tD,_$o,u$o,b$o,j3,gce,F$o,v$o,aD,T$o,M$o,E$o,D3,hce,C$o,w$o,nD,A$o,y$o,L$o,G3,pce,x$o,k$o,sD,S$o,R$o,B$o,O3,_ce,P$o,$$o,lD,I$o,q$o,N$o,V3,uce,j$o,D$o,iD,G$o,O$o,V$o,X3,bce,X$o,z$o,dD,Q$o,W$o,H$o,z3,Fce,U$o,J$o,cD,Y$o,K$o,Z$o,Q3,vce,eIo,oIo,fD,rIo,tIo,aIo,W3,Tce,nIo,sIo,mD,lIo,iIo,dIo,H3,Mce,cIo,fIo,gD,mIo,gIo,hIo,U3,Ece,pIo,_Io,hD,uIo,bIo,FIo,J3,Cce,vIo,TIo,pD,MIo,EIo,CIo,Y3,wce,wIo,AIo,_D,yIo,LIo,xIo,K3,Ace,kIo,SIo,uD,RIo,BIo,PIo,Z3,yce,$Io,IIo,bD,qIo,NIo,jIo,e2,Lce,DIo,GIo,FD,OIo,VIo,XIo,o2,xce,zIo,QIo,vD,WIo,HIo,UIo,r2,kce,JIo,YIo,TD,KIo,ZIo,eqo,t2,oqo,Sce,rqo,tqo,Rce,aqo,nqo,Bce,sqo,lqo,hw,RRe,Ad,a2,Pce,pw,iqo,$ce,dqo,BRe,sr,_w,cqo,yd,fqo,MD,mqo,gqo,ED,hqo,pqo,_qo,uw,uqo,Ice,bqo,Fqo,vqo,et,bw,Tqo,qce,Mqo,Eqo,Ld,Cqo,Nce,wqo,Aqo,CD,yqo,Lqo,xqo,jce,kqo,Sqo,Fw,Rqo,We,vw,Bqo,Dce,Pqo,$qo,en,Iqo,Gce,qqo,Nqo,Oce,jqo,Dqo,Vce,Gqo,Oqo,Vqo,Xce,n2,zce,Xqo,zqo,wD,Qqo,Wqo,Hqo,s2,Uqo,Qce,Jqo,Yqo,Wce,Kqo,Zqo,Hce,eNo,oNo,Tw,PRe,xd,l2,Uce,Mw,rNo,Jce,tNo,$Re,lr,Ew,aNo,kd,nNo,AD,sNo,lNo,yD,iNo,dNo,cNo,Cw,fNo,Yce,mNo,gNo,hNo,ot,ww,pNo,Kce,_No,uNo,Sd,bNo,Zce,FNo,vNo,LD,TNo,MNo,ENo,efe,CNo,wNo,Aw,ANo,He,yw,yNo,ofe,LNo,xNo,on,kNo,rfe,SNo,RNo,tfe,BNo,PNo,afe,$No,INo,qNo,ge,i2,nfe,NNo,jNo,xD,DNo,GNo,ONo,d2,sfe,VNo,XNo,kD,zNo,QNo,WNo,Ds,lfe,HNo,UNo,SD,JNo,YNo,RD,KNo,ZNo,ejo,c2,ife,ojo,rjo,BD,tjo,ajo,njo,ma,dfe,sjo,ljo,PD,ijo,djo,$D,cjo,fjo,ID,mjo,gjo,hjo,f2,cfe,pjo,_jo,qD,ujo,bjo,Fjo,m2,ffe,vjo,Tjo,ND,Mjo,Ejo,Cjo,g2,mfe,wjo,Ajo,jD,yjo,Ljo,xjo,h2,gfe,kjo,Sjo,DD,Rjo,Bjo,Pjo,p2,hfe,$jo,Ijo,GD,qjo,Njo,jjo,_2,pfe,Djo,Gjo,OD,Ojo,Vjo,Xjo,u2,zjo,_fe,Qjo,Wjo,ufe,Hjo,Ujo,bfe,Jjo,Yjo,Lw,IRe,Rd,b2,Ffe,xw,Kjo,vfe,Zjo,qRe,ir,kw,eDo,Bd,oDo,VD,rDo,tDo,XD,aDo,nDo,sDo,Sw,lDo,Tfe,iDo,dDo,cDo,rt,Rw,fDo,Mfe,mDo,gDo,Pd,hDo,Efe,pDo,_Do,zD,uDo,bDo,FDo,Cfe,vDo,TDo,Bw,MDo,Ue,Pw,EDo,wfe,CDo,wDo,rn,ADo,Afe,yDo,LDo,yfe,xDo,kDo,Lfe,SDo,RDo,BDo,xfe,F2,kfe,PDo,$Do,QD,IDo,qDo,NDo,v2,jDo,Sfe,DDo,GDo,Rfe,ODo,VDo,Bfe,XDo,zDo,$w,NRe,$d,T2,Pfe,Iw,QDo,$fe,WDo,jRe,dr,qw,HDo,Id,UDo,WD,JDo,YDo,HD,KDo,ZDo,eGo,Nw,oGo,Ife,rGo,tGo,aGo,tt,jw,nGo,qfe,sGo,lGo,qd,iGo,Nfe,dGo,cGo,UD,fGo,mGo,gGo,jfe,hGo,pGo,Dw,_Go,Je,Gw,uGo,Dfe,bGo,FGo,tn,vGo,Gfe,TGo,MGo,Ofe,EGo,CGo,Vfe,wGo,AGo,yGo,Se,M2,Xfe,LGo,xGo,JD,kGo,SGo,RGo,E2,zfe,BGo,PGo,YD,$Go,IGo,qGo,C2,Qfe,NGo,jGo,KD,DGo,GGo,OGo,w2,Wfe,VGo,XGo,ZD,zGo,QGo,WGo,A2,Hfe,HGo,UGo,eG,JGo,YGo,KGo,y2,Ufe,ZGo,eOo,oG,oOo,rOo,tOo,L2,Jfe,aOo,nOo,rG,sOo,lOo,iOo,x2,Yfe,dOo,cOo,tG,fOo,mOo,gOo,k2,hOo,Kfe,pOo,_Oo,Zfe,uOo,bOo,eme,FOo,vOo,Ow,DRe,Nd,S2,ome,Vw,TOo,rme,MOo,GRe,cr,Xw,EOo,jd,COo,aG,wOo,AOo,nG,yOo,LOo,xOo,zw,kOo,tme,SOo,ROo,BOo,at,Qw,POo,ame,$Oo,IOo,Dd,qOo,nme,NOo,jOo,sG,DOo,GOo,OOo,sme,VOo,XOo,Ww,zOo,Ye,Hw,QOo,lme,WOo,HOo,an,UOo,ime,JOo,YOo,dme,KOo,ZOo,cme,eVo,oVo,rVo,nn,R2,fme,tVo,aVo,lG,nVo,sVo,lVo,B2,mme,iVo,dVo,iG,cVo,fVo,mVo,P2,gme,gVo,hVo,dG,pVo,_Vo,uVo,$2,hme,bVo,FVo,cG,vVo,TVo,MVo,I2,EVo,pme,CVo,wVo,_me,AVo,yVo,ume,LVo,xVo,Uw,ORe,Gd,q2,bme,Jw,kVo,Fme,SVo,VRe,fr,Yw,RVo,Od,BVo,fG,PVo,$Vo,mG,IVo,qVo,NVo,Kw,jVo,vme,DVo,GVo,OVo,nt,Zw,VVo,Tme,XVo,zVo,Vd,QVo,Mme,WVo,HVo,gG,UVo,JVo,YVo,Eme,KVo,ZVo,eA,eXo,Ke,oA,oXo,Cme,rXo,tXo,sn,aXo,wme,nXo,sXo,Ame,lXo,iXo,yme,dXo,cXo,fXo,Re,N2,Lme,mXo,gXo,hG,hXo,pXo,_Xo,j2,xme,uXo,bXo,pG,FXo,vXo,TXo,D2,kme,MXo,EXo,_G,CXo,wXo,AXo,G2,Sme,yXo,LXo,uG,xXo,kXo,SXo,O2,Rme,RXo,BXo,bG,PXo,$Xo,IXo,V2,Bme,qXo,NXo,FG,jXo,DXo,GXo,X2,Pme,OXo,VXo,vG,XXo,zXo,QXo,z2,$me,WXo,HXo,TG,UXo,JXo,YXo,Q2,KXo,Ime,ZXo,ezo,qme,ozo,rzo,Nme,tzo,azo,rA,XRe,Xd,W2,jme,tA,nzo,Dme,szo,zRe,mr,aA,lzo,zd,izo,MG,dzo,czo,EG,fzo,mzo,gzo,nA,hzo,Gme,pzo,_zo,uzo,st,sA,bzo,Ome,Fzo,vzo,Qd,Tzo,Vme,Mzo,Ezo,CG,Czo,wzo,Azo,Xme,yzo,Lzo,lA,xzo,Ze,iA,kzo,zme,Szo,Rzo,ln,Bzo,Qme,Pzo,$zo,Wme,Izo,qzo,Hme,Nzo,jzo,Dzo,dA,H2,Ume,Gzo,Ozo,wG,Vzo,Xzo,zzo,U2,Jme,Qzo,Wzo,AG,Hzo,Uzo,Jzo,J2,Yzo,Yme,Kzo,Zzo,Kme,eQo,oQo,Zme,rQo,tQo,cA,QRe,Wd,Y2,ege,fA,aQo,oge,nQo,WRe,gr,mA,sQo,Hd,lQo,yG,iQo,dQo,LG,cQo,fQo,mQo,gA,gQo,rge,hQo,pQo,_Qo,lt,hA,uQo,tge,bQo,FQo,Ud,vQo,age,TQo,MQo,xG,EQo,CQo,wQo,nge,AQo,yQo,pA,LQo,eo,_A,xQo,sge,kQo,SQo,dn,RQo,lge,BQo,PQo,ige,$Qo,IQo,dge,qQo,NQo,jQo,cn,K2,cge,DQo,GQo,kG,OQo,VQo,XQo,Z2,fge,zQo,QQo,SG,WQo,HQo,UQo,eF,mge,JQo,YQo,RG,KQo,ZQo,eWo,oF,gge,oWo,rWo,BG,tWo,aWo,nWo,rF,sWo,hge,lWo,iWo,pge,dWo,cWo,_ge,fWo,mWo,uA,HRe,Jd,tF,uge,bA,gWo,bge,hWo,URe,hr,FA,pWo,Yd,_Wo,PG,uWo,bWo,$G,FWo,vWo,TWo,vA,MWo,Fge,EWo,CWo,wWo,it,TA,AWo,vge,yWo,LWo,Kd,xWo,Tge,kWo,SWo,IG,RWo,BWo,PWo,Mge,$Wo,IWo,MA,qWo,oo,EA,NWo,Ege,jWo,DWo,fn,GWo,Cge,OWo,VWo,wge,XWo,zWo,Age,QWo,WWo,HWo,Zd,aF,yge,UWo,JWo,qG,YWo,KWo,ZWo,nF,Lge,eHo,oHo,NG,rHo,tHo,aHo,sF,xge,nHo,sHo,jG,lHo,iHo,dHo,lF,cHo,kge,fHo,mHo,Sge,gHo,hHo,Rge,pHo,_Ho,CA,JRe,ec,iF,Bge,wA,uHo,Pge,bHo,YRe,pr,AA,FHo,oc,vHo,DG,THo,MHo,GG,EHo,CHo,wHo,yA,AHo,$ge,yHo,LHo,xHo,dt,LA,kHo,Ige,SHo,RHo,rc,BHo,qge,PHo,$Ho,OG,IHo,qHo,NHo,Nge,jHo,DHo,xA,GHo,ro,kA,OHo,jge,VHo,XHo,mn,zHo,Dge,QHo,WHo,Gge,HHo,UHo,Oge,JHo,YHo,KHo,Vge,dF,Xge,ZHo,eUo,VG,oUo,rUo,tUo,cF,aUo,zge,nUo,sUo,Qge,lUo,iUo,Wge,dUo,cUo,SA,KRe,tc,fF,Hge,RA,fUo,Uge,mUo,ZRe,_r,BA,gUo,ac,hUo,XG,pUo,_Uo,zG,uUo,bUo,FUo,PA,vUo,Jge,TUo,MUo,EUo,ct,$A,CUo,Yge,wUo,AUo,nc,yUo,Kge,LUo,xUo,QG,kUo,SUo,RUo,Zge,BUo,PUo,IA,$Uo,to,qA,IUo,ehe,qUo,NUo,gn,jUo,ohe,DUo,GUo,rhe,OUo,VUo,the,XUo,zUo,QUo,ahe,mF,nhe,WUo,HUo,WG,UUo,JUo,YUo,gF,KUo,she,ZUo,eJo,lhe,oJo,rJo,ihe,tJo,aJo,NA,eBe,sc,hF,dhe,jA,nJo,che,sJo,oBe,ur,DA,lJo,lc,iJo,HG,dJo,cJo,UG,fJo,mJo,gJo,GA,hJo,fhe,pJo,_Jo,uJo,ft,OA,bJo,mhe,FJo,vJo,ic,TJo,ghe,MJo,EJo,JG,CJo,wJo,AJo,hhe,yJo,LJo,VA,xJo,ao,XA,kJo,phe,SJo,RJo,hn,BJo,_he,PJo,$Jo,uhe,IJo,qJo,bhe,NJo,jJo,DJo,dc,pF,Fhe,GJo,OJo,YG,VJo,XJo,zJo,_F,vhe,QJo,WJo,KG,HJo,UJo,JJo,uF,The,YJo,KJo,ZG,ZJo,eYo,oYo,bF,rYo,Mhe,tYo,aYo,Ehe,nYo,sYo,Che,lYo,iYo,zA,rBe,cc,FF,whe,QA,dYo,Ahe,cYo,tBe,br,WA,fYo,fc,mYo,eO,gYo,hYo,oO,pYo,_Yo,uYo,HA,bYo,yhe,FYo,vYo,TYo,mt,UA,MYo,Lhe,EYo,CYo,mc,wYo,xhe,AYo,yYo,rO,LYo,xYo,kYo,khe,SYo,RYo,JA,BYo,no,YA,PYo,She,$Yo,IYo,pn,qYo,Rhe,NYo,jYo,Bhe,DYo,GYo,Phe,OYo,VYo,XYo,$he,vF,Ihe,zYo,QYo,tO,WYo,HYo,UYo,TF,JYo,qhe,YYo,KYo,Nhe,ZYo,eKo,jhe,oKo,rKo,KA,aBe,gc,MF,Dhe,ZA,tKo,Ghe,aKo,nBe,Fr,e0,nKo,hc,sKo,aO,lKo,iKo,nO,dKo,cKo,fKo,o0,mKo,Ohe,gKo,hKo,pKo,gt,r0,_Ko,Vhe,uKo,bKo,pc,FKo,Xhe,vKo,TKo,sO,MKo,EKo,CKo,zhe,wKo,AKo,t0,yKo,ho,a0,LKo,Qhe,xKo,kKo,_n,SKo,Whe,RKo,BKo,Hhe,PKo,$Ko,Uhe,IKo,qKo,NKo,x,EF,Jhe,jKo,DKo,lO,GKo,OKo,VKo,CF,Yhe,XKo,zKo,iO,QKo,WKo,HKo,wF,Khe,UKo,JKo,dO,YKo,KKo,ZKo,AF,Zhe,eZo,oZo,cO,rZo,tZo,aZo,yF,epe,nZo,sZo,fO,lZo,iZo,dZo,LF,ope,cZo,fZo,mO,mZo,gZo,hZo,xF,rpe,pZo,_Zo,gO,uZo,bZo,FZo,kF,tpe,vZo,TZo,hO,MZo,EZo,CZo,SF,ape,wZo,AZo,pO,yZo,LZo,xZo,RF,npe,kZo,SZo,_O,RZo,BZo,PZo,BF,spe,$Zo,IZo,uO,qZo,NZo,jZo,PF,lpe,DZo,GZo,bO,OZo,VZo,XZo,$F,ipe,zZo,QZo,FO,WZo,HZo,UZo,IF,dpe,JZo,YZo,vO,KZo,ZZo,eer,qF,cpe,oer,rer,TO,ter,aer,ner,NF,fpe,ser,ler,MO,ier,der,cer,Gs,mpe,fer,mer,EO,ger,her,CO,per,_er,uer,jF,gpe,ber,Fer,wO,ver,Ter,Mer,DF,hpe,Eer,Cer,AO,wer,Aer,yer,GF,ppe,Ler,xer,yO,ker,Ser,Rer,OF,_pe,Ber,Per,LO,$er,Ier,qer,VF,upe,Ner,jer,xO,Der,Ger,Oer,XF,bpe,Ver,Xer,kO,zer,Qer,Wer,zF,Fpe,Her,Uer,SO,Jer,Yer,Ker,QF,vpe,Zer,eor,RO,oor,ror,tor,WF,Tpe,aor,nor,BO,sor,lor,ior,HF,Mpe,dor,cor,PO,mor,gor,hor,UF,Epe,por,_or,$O,uor,bor,For,JF,Cpe,vor,Tor,IO,Mor,Eor,Cor,YF,wpe,wor,Aor,qO,yor,Lor,xor,KF,Ape,kor,Sor,NO,Ror,Bor,Por,ZF,ype,$or,Ior,jO,qor,Nor,jor,ev,Lpe,Dor,Gor,DO,Oor,Vor,Xor,ov,xpe,zor,Qor,GO,Wor,Hor,Uor,rv,kpe,Jor,Yor,OO,Kor,Zor,err,tv,Spe,orr,rrr,VO,trr,arr,nrr,av,Rpe,srr,lrr,XO,irr,drr,crr,nv,Bpe,frr,mrr,zO,grr,hrr,prr,sv,Ppe,_rr,urr,QO,brr,Frr,vrr,lv,$pe,Trr,Mrr,WO,Err,Crr,wrr,iv,Ipe,Arr,yrr,HO,Lrr,xrr,krr,dv,qpe,Srr,Rrr,UO,Brr,Prr,$rr,cv,Npe,Irr,qrr,JO,Nrr,jrr,Drr,fv,jpe,Grr,Orr,YO,Vrr,Xrr,zrr,Dpe,Qrr,Wrr,n0,sBe,_c,mv,Gpe,s0,Hrr,Ope,Urr,lBe,vr,l0,Jrr,uc,Yrr,KO,Krr,Zrr,ZO,etr,otr,rtr,i0,ttr,Vpe,atr,ntr,str,ht,d0,ltr,Xpe,itr,dtr,bc,ctr,zpe,ftr,mtr,eV,gtr,htr,ptr,Qpe,_tr,utr,c0,btr,po,f0,Ftr,Wpe,vtr,Ttr,un,Mtr,Hpe,Etr,Ctr,Upe,wtr,Atr,Jpe,ytr,Ltr,xtr,H,gv,Ype,ktr,Str,oV,Rtr,Btr,Ptr,hv,Kpe,$tr,Itr,rV,qtr,Ntr,jtr,pv,Zpe,Dtr,Gtr,tV,Otr,Vtr,Xtr,_v,e_e,ztr,Qtr,aV,Wtr,Htr,Utr,uv,o_e,Jtr,Ytr,nV,Ktr,Ztr,ear,bv,r_e,oar,rar,sV,tar,aar,nar,Fv,t_e,sar,lar,lV,iar,dar,car,vv,a_e,far,mar,iV,gar,har,par,Tv,n_e,_ar,uar,dV,bar,Far,Tar,Mv,s_e,Mar,Ear,cV,Car,war,Aar,Ev,l_e,yar,Lar,fV,xar,kar,Sar,Cv,i_e,Rar,Bar,mV,Par,$ar,Iar,wv,d_e,qar,Nar,gV,jar,Dar,Gar,Av,c_e,Oar,Var,hV,Xar,zar,Qar,yv,f_e,War,Har,pV,Uar,Jar,Yar,Lv,m_e,Kar,Zar,_V,enr,onr,rnr,xv,g_e,tnr,anr,uV,nnr,snr,lnr,kv,h_e,inr,dnr,bV,cnr,fnr,mnr,Sv,p_e,gnr,hnr,FV,pnr,_nr,unr,Rv,__e,bnr,Fnr,vV,vnr,Tnr,Mnr,Bv,u_e,Enr,Cnr,TV,wnr,Anr,ynr,Pv,b_e,Lnr,xnr,MV,knr,Snr,Rnr,$v,F_e,Bnr,Pnr,EV,$nr,Inr,qnr,v_e,Nnr,jnr,m0,iBe,Fc,Iv,T_e,g0,Dnr,M_e,Gnr,dBe,Tr,h0,Onr,vc,Vnr,CV,Xnr,znr,wV,Qnr,Wnr,Hnr,p0,Unr,E_e,Jnr,Ynr,Knr,pt,_0,Znr,C_e,esr,osr,Tc,rsr,w_e,tsr,asr,AV,nsr,ssr,lsr,A_e,isr,dsr,u0,csr,_o,b0,fsr,y_e,msr,gsr,bn,hsr,L_e,psr,_sr,x_e,usr,bsr,k_e,Fsr,vsr,Tsr,ce,qv,S_e,Msr,Esr,yV,Csr,wsr,Asr,Nv,R_e,ysr,Lsr,LV,xsr,ksr,Ssr,jv,B_e,Rsr,Bsr,xV,Psr,$sr,Isr,Dv,P_e,qsr,Nsr,kV,jsr,Dsr,Gsr,Gv,$_e,Osr,Vsr,SV,Xsr,zsr,Qsr,Ov,I_e,Wsr,Hsr,RV,Usr,Jsr,Ysr,Vv,q_e,Ksr,Zsr,BV,elr,olr,rlr,Xv,N_e,tlr,alr,PV,nlr,slr,llr,zv,j_e,ilr,dlr,$V,clr,flr,mlr,Qv,D_e,glr,hlr,IV,plr,_lr,ulr,Wv,G_e,blr,Flr,qV,vlr,Tlr,Mlr,Hv,O_e,Elr,Clr,NV,wlr,Alr,ylr,V_e,Llr,xlr,F0,cBe,Mc,Uv,X_e,v0,klr,z_e,Slr,fBe,Mr,T0,Rlr,Ec,Blr,jV,Plr,$lr,DV,Ilr,qlr,Nlr,M0,jlr,Q_e,Dlr,Glr,Olr,_t,E0,Vlr,W_e,Xlr,zlr,Cc,Qlr,H_e,Wlr,Hlr,GV,Ulr,Jlr,Ylr,U_e,Klr,Zlr,C0,eir,uo,w0,oir,J_e,rir,tir,Fn,air,Y_e,nir,sir,K_e,lir,iir,Z_e,dir,cir,fir,A0,Jv,eue,mir,gir,OV,hir,pir,_ir,Yv,oue,uir,bir,VV,Fir,vir,Tir,rue,Mir,Eir,y0,mBe,wc,Kv,tue,L0,Cir,aue,wir,gBe,Er,x0,Air,Ac,yir,XV,Lir,xir,zV,kir,Sir,Rir,k0,Bir,nue,Pir,$ir,Iir,ut,S0,qir,sue,Nir,jir,yc,Dir,lue,Gir,Oir,QV,Vir,Xir,zir,iue,Qir,Wir,R0,Hir,bo,B0,Uir,due,Jir,Yir,vn,Kir,cue,Zir,edr,fue,odr,rdr,mue,tdr,adr,ndr,J,Zv,gue,sdr,ldr,WV,idr,ddr,cdr,e6,hue,fdr,mdr,HV,gdr,hdr,pdr,o6,pue,_dr,udr,UV,bdr,Fdr,vdr,r6,_ue,Tdr,Mdr,JV,Edr,Cdr,wdr,t6,uue,Adr,ydr,YV,Ldr,xdr,kdr,a6,bue,Sdr,Rdr,KV,Bdr,Pdr,$dr,n6,Fue,Idr,qdr,ZV,Ndr,jdr,Ddr,s6,vue,Gdr,Odr,eX,Vdr,Xdr,zdr,l6,Tue,Qdr,Wdr,oX,Hdr,Udr,Jdr,i6,Mue,Ydr,Kdr,rX,Zdr,ecr,ocr,d6,Eue,rcr,tcr,tX,acr,ncr,scr,c6,Cue,lcr,icr,aX,dcr,ccr,fcr,f6,wue,mcr,gcr,nX,hcr,pcr,_cr,m6,Aue,ucr,bcr,sX,Fcr,vcr,Tcr,g6,yue,Mcr,Ecr,lX,Ccr,wcr,Acr,h6,Lue,ycr,Lcr,iX,xcr,kcr,Scr,p6,xue,Rcr,Bcr,dX,Pcr,$cr,Icr,_6,kue,qcr,Ncr,cX,jcr,Dcr,Gcr,u6,Sue,Ocr,Vcr,fX,Xcr,zcr,Qcr,b6,Rue,Wcr,Hcr,mX,Ucr,Jcr,Ycr,Bue,Kcr,Zcr,P0,hBe,Lc,F6,Pue,$0,efr,$ue,ofr,pBe,Cr,I0,rfr,xc,tfr,gX,afr,nfr,hX,sfr,lfr,ifr,q0,dfr,Iue,cfr,ffr,mfr,bt,N0,gfr,que,hfr,pfr,kc,_fr,Nue,ufr,bfr,pX,Ffr,vfr,Tfr,jue,Mfr,Efr,j0,Cfr,Fo,D0,wfr,Due,Afr,yfr,Tn,Lfr,Gue,xfr,kfr,Oue,Sfr,Rfr,Vue,Bfr,Pfr,$fr,ue,v6,Xue,Ifr,qfr,_X,Nfr,jfr,Dfr,T6,zue,Gfr,Ofr,uX,Vfr,Xfr,zfr,M6,Que,Qfr,Wfr,bX,Hfr,Ufr,Jfr,E6,Wue,Yfr,Kfr,FX,Zfr,emr,omr,C6,Hue,rmr,tmr,vX,amr,nmr,smr,w6,Uue,lmr,imr,TX,dmr,cmr,fmr,A6,Jue,mmr,gmr,MX,hmr,pmr,_mr,y6,Yue,umr,bmr,EX,Fmr,vmr,Tmr,L6,Kue,Mmr,Emr,CX,Cmr,wmr,Amr,x6,Zue,ymr,Lmr,wX,xmr,kmr,Smr,e1e,Rmr,Bmr,G0,_Be,Sc,k6,o1e,O0,Pmr,r1e,$mr,uBe,wr,V0,Imr,Rc,qmr,AX,Nmr,jmr,yX,Dmr,Gmr,Omr,X0,Vmr,t1e,Xmr,zmr,Qmr,Ft,z0,Wmr,a1e,Hmr,Umr,Bc,Jmr,n1e,Ymr,Kmr,LX,Zmr,egr,ogr,s1e,rgr,tgr,Q0,agr,vo,W0,ngr,l1e,sgr,lgr,Mn,igr,i1e,dgr,cgr,d1e,fgr,mgr,c1e,ggr,hgr,pgr,V,S6,f1e,_gr,ugr,xX,bgr,Fgr,vgr,R6,m1e,Tgr,Mgr,kX,Egr,Cgr,wgr,B6,g1e,Agr,ygr,SX,Lgr,xgr,kgr,P6,h1e,Sgr,Rgr,RX,Bgr,Pgr,$gr,$6,p1e,Igr,qgr,BX,Ngr,jgr,Dgr,I6,_1e,Ggr,Ogr,PX,Vgr,Xgr,zgr,q6,u1e,Qgr,Wgr,$X,Hgr,Ugr,Jgr,N6,b1e,Ygr,Kgr,IX,Zgr,ehr,ohr,j6,F1e,rhr,thr,qX,ahr,nhr,shr,D6,v1e,lhr,ihr,NX,dhr,chr,fhr,G6,T1e,mhr,ghr,jX,hhr,phr,_hr,O6,M1e,uhr,bhr,DX,Fhr,vhr,Thr,V6,E1e,Mhr,Ehr,GX,Chr,whr,Ahr,X6,C1e,yhr,Lhr,OX,xhr,khr,Shr,z6,w1e,Rhr,Bhr,VX,Phr,$hr,Ihr,Q6,A1e,qhr,Nhr,XX,jhr,Dhr,Ghr,W6,y1e,Ohr,Vhr,zX,Xhr,zhr,Qhr,H6,L1e,Whr,Hhr,QX,Uhr,Jhr,Yhr,U6,x1e,Khr,Zhr,WX,epr,opr,rpr,J6,k1e,tpr,apr,HX,npr,spr,lpr,Y6,S1e,ipr,dpr,UX,cpr,fpr,mpr,K6,R1e,gpr,hpr,JX,ppr,_pr,upr,Z6,B1e,bpr,Fpr,YX,vpr,Tpr,Mpr,eT,P1e,Epr,Cpr,KX,wpr,Apr,ypr,oT,$1e,Lpr,xpr,ZX,kpr,Spr,Rpr,rT,I1e,Bpr,Ppr,ez,$pr,Ipr,qpr,q1e,Npr,jpr,H0,bBe,Pc,tT,N1e,U0,Dpr,j1e,Gpr,FBe,Ar,J0,Opr,$c,Vpr,oz,Xpr,zpr,rz,Qpr,Wpr,Hpr,Y0,Upr,D1e,Jpr,Ypr,Kpr,vt,K0,Zpr,G1e,e_r,o_r,Ic,r_r,O1e,t_r,a_r,tz,n_r,s_r,l_r,V1e,i_r,d_r,Z0,c_r,To,ey,f_r,X1e,m_r,g_r,En,h_r,z1e,p_r,__r,Q1e,u_r,b_r,W1e,F_r,v_r,T_r,ne,aT,H1e,M_r,E_r,az,C_r,w_r,A_r,nT,U1e,y_r,L_r,nz,x_r,k_r,S_r,sT,J1e,R_r,B_r,sz,P_r,$_r,I_r,lT,Y1e,q_r,N_r,lz,j_r,D_r,G_r,iT,K1e,O_r,V_r,iz,X_r,z_r,Q_r,dT,Z1e,W_r,H_r,dz,U_r,J_r,Y_r,cT,e4e,K_r,Z_r,cz,eur,our,rur,fT,o4e,tur,aur,fz,nur,sur,lur,mT,r4e,iur,dur,mz,cur,fur,mur,gT,t4e,gur,hur,gz,pur,_ur,uur,hT,a4e,bur,Fur,hz,vur,Tur,Mur,pT,n4e,Eur,Cur,pz,wur,Aur,yur,_T,s4e,Lur,xur,_z,kur,Sur,Rur,uT,l4e,Bur,Pur,uz,$ur,Iur,qur,bT,i4e,Nur,jur,bz,Dur,Gur,Our,FT,d4e,Vur,Xur,Fz,zur,Qur,Wur,vT,c4e,Hur,Uur,vz,Jur,Yur,Kur,f4e,Zur,e1r,oy,vBe,qc,TT,m4e,ry,o1r,g4e,r1r,TBe,yr,ty,t1r,Nc,a1r,Tz,n1r,s1r,Mz,l1r,i1r,d1r,ay,c1r,h4e,f1r,m1r,g1r,Tt,ny,h1r,p4e,p1r,_1r,jc,u1r,_4e,b1r,F1r,Ez,v1r,T1r,M1r,u4e,E1r,C1r,sy,w1r,Mo,ly,A1r,b4e,y1r,L1r,Cn,x1r,F4e,k1r,S1r,v4e,R1r,B1r,T4e,P1r,$1r,I1r,M4e,MT,E4e,q1r,N1r,Cz,j1r,D1r,G1r,C4e,O1r,V1r,iy,MBe,Dc,ET,w4e,dy,X1r,A4e,z1r,EBe,Lr,cy,Q1r,Gc,W1r,wz,H1r,U1r,Az,J1r,Y1r,K1r,fy,Z1r,y4e,e4r,o4r,r4r,Mt,my,t4r,L4e,a4r,n4r,Oc,s4r,x4e,l4r,i4r,yz,d4r,c4r,f4r,k4e,m4r,g4r,gy,h4r,Eo,hy,p4r,S4e,_4r,u4r,wn,b4r,R4e,F4r,v4r,B4e,T4r,M4r,P4e,E4r,C4r,w4r,Y,CT,$4e,A4r,y4r,Lz,L4r,x4r,k4r,wT,I4e,S4r,R4r,xz,B4r,P4r,$4r,AT,q4e,I4r,q4r,kz,N4r,j4r,D4r,yT,N4e,G4r,O4r,Sz,V4r,X4r,z4r,LT,j4e,Q4r,W4r,Rz,H4r,U4r,J4r,xT,D4e,Y4r,K4r,Bz,Z4r,ebr,obr,kT,G4e,rbr,tbr,Pz,abr,nbr,sbr,ST,O4e,lbr,ibr,$z,dbr,cbr,fbr,RT,V4e,mbr,gbr,Iz,hbr,pbr,_br,BT,X4e,ubr,bbr,qz,Fbr,vbr,Tbr,PT,z4e,Mbr,Ebr,Nz,Cbr,wbr,Abr,$T,Q4e,ybr,Lbr,jz,xbr,kbr,Sbr,IT,W4e,Rbr,Bbr,Dz,Pbr,$br,Ibr,qT,H4e,qbr,Nbr,Gz,jbr,Dbr,Gbr,NT,U4e,Obr,Vbr,Oz,Xbr,zbr,Qbr,jT,J4e,Wbr,Hbr,Vz,Ubr,Jbr,Ybr,DT,Y4e,Kbr,Zbr,Xz,e3r,o3r,r3r,GT,K4e,t3r,a3r,zz,n3r,s3r,l3r,OT,Z4e,i3r,d3r,Qz,c3r,f3r,m3r,VT,ebe,g3r,h3r,Wz,p3r,_3r,u3r,obe,b3r,F3r,py,CBe,Vc,XT,rbe,_y,v3r,tbe,T3r,wBe,xr,uy,M3r,Xc,E3r,Hz,C3r,w3r,Uz,A3r,y3r,L3r,by,x3r,abe,k3r,S3r,R3r,Et,Fy,B3r,nbe,P3r,$3r,zc,I3r,sbe,q3r,N3r,Jz,j3r,D3r,G3r,lbe,O3r,V3r,vy,X3r,Co,Ty,z3r,ibe,Q3r,W3r,An,H3r,dbe,U3r,J3r,cbe,Y3r,K3r,fbe,Z3r,e2r,o2r,K,zT,mbe,r2r,t2r,Yz,a2r,n2r,s2r,QT,gbe,l2r,i2r,Kz,d2r,c2r,f2r,WT,hbe,m2r,g2r,Zz,h2r,p2r,_2r,HT,pbe,u2r,b2r,eQ,F2r,v2r,T2r,UT,_be,M2r,E2r,oQ,C2r,w2r,A2r,JT,ube,y2r,L2r,rQ,x2r,k2r,S2r,YT,bbe,R2r,B2r,tQ,P2r,$2r,I2r,KT,Fbe,q2r,N2r,aQ,j2r,D2r,G2r,ZT,vbe,O2r,V2r,nQ,X2r,z2r,Q2r,e7,Tbe,W2r,H2r,sQ,U2r,J2r,Y2r,o7,Mbe,K2r,Z2r,lQ,eFr,oFr,rFr,r7,Ebe,tFr,aFr,iQ,nFr,sFr,lFr,t7,Cbe,iFr,dFr,dQ,cFr,fFr,mFr,a7,wbe,gFr,hFr,cQ,pFr,_Fr,uFr,n7,Abe,bFr,FFr,fQ,vFr,TFr,MFr,s7,ybe,EFr,CFr,mQ,wFr,AFr,yFr,l7,Lbe,LFr,xFr,gQ,kFr,SFr,RFr,i7,xbe,BFr,PFr,hQ,$Fr,IFr,qFr,d7,kbe,NFr,jFr,pQ,DFr,GFr,OFr,c7,Sbe,VFr,XFr,_Q,zFr,QFr,WFr,Rbe,HFr,UFr,My,ABe,Qc,f7,Bbe,Ey,JFr,Pbe,YFr,yBe,kr,Cy,KFr,Wc,ZFr,uQ,evr,ovr,bQ,rvr,tvr,avr,wy,nvr,$be,svr,lvr,ivr,Ct,Ay,dvr,Ibe,cvr,fvr,Hc,mvr,qbe,gvr,hvr,FQ,pvr,_vr,uvr,Nbe,bvr,Fvr,yy,vvr,wo,Ly,Tvr,jbe,Mvr,Evr,yn,Cvr,Dbe,wvr,Avr,Gbe,yvr,Lvr,Obe,xvr,kvr,Svr,Vbe,m7,Xbe,Rvr,Bvr,vQ,Pvr,$vr,Ivr,zbe,qvr,Nvr,xy,LBe,Uc,g7,Qbe,ky,jvr,Wbe,Dvr,xBe,Sr,Sy,Gvr,Jc,Ovr,TQ,Vvr,Xvr,MQ,zvr,Qvr,Wvr,Ry,Hvr,Hbe,Uvr,Jvr,Yvr,wt,By,Kvr,Ube,Zvr,e6r,Yc,o6r,Jbe,r6r,t6r,EQ,a6r,n6r,s6r,Ybe,l6r,i6r,Py,d6r,Ao,$y,c6r,Kbe,f6r,m6r,Ln,g6r,Zbe,h6r,p6r,e3e,_6r,u6r,o3e,b6r,F6r,v6r,r3e,h7,t3e,T6r,M6r,CQ,E6r,C6r,w6r,a3e,A6r,y6r,Iy,kBe,Kc,p7,n3e,qy,L6r,s3e,x6r,SBe,Rr,Ny,k6r,Zc,S6r,wQ,R6r,B6r,AQ,P6r,$6r,I6r,jy,q6r,l3e,N6r,j6r,D6r,At,Dy,G6r,i3e,O6r,V6r,ef,X6r,d3e,z6r,Q6r,yQ,W6r,H6r,U6r,c3e,J6r,Y6r,Gy,K6r,yo,Oy,Z6r,f3e,eTr,oTr,xn,rTr,m3e,tTr,aTr,g3e,nTr,sTr,h3e,lTr,iTr,dTr,z,_7,p3e,cTr,fTr,LQ,mTr,gTr,hTr,u7,_3e,pTr,_Tr,xQ,uTr,bTr,FTr,b7,u3e,vTr,TTr,kQ,MTr,ETr,CTr,F7,b3e,wTr,ATr,SQ,yTr,LTr,xTr,v7,F3e,kTr,STr,RQ,RTr,BTr,PTr,T7,v3e,$Tr,ITr,BQ,qTr,NTr,jTr,M7,T3e,DTr,GTr,PQ,OTr,VTr,XTr,E7,M3e,zTr,QTr,$Q,WTr,HTr,UTr,C7,E3e,JTr,YTr,IQ,KTr,ZTr,e7r,w7,C3e,o7r,r7r,qQ,t7r,a7r,n7r,A7,w3e,s7r,l7r,NQ,i7r,d7r,c7r,y7,A3e,f7r,m7r,jQ,g7r,h7r,p7r,L7,y3e,_7r,u7r,DQ,b7r,F7r,v7r,x7,L3e,T7r,M7r,GQ,E7r,C7r,w7r,k7,x3e,A7r,y7r,OQ,L7r,x7r,k7r,S7,k3e,S7r,R7r,VQ,B7r,P7r,$7r,R7,S3e,I7r,q7r,XQ,N7r,j7r,D7r,B7,R3e,G7r,O7r,zQ,V7r,X7r,z7r,P7,B3e,Q7r,W7r,QQ,H7r,U7r,J7r,$7,P3e,Y7r,K7r,WQ,Z7r,eMr,oMr,I7,$3e,rMr,tMr,HQ,aMr,nMr,sMr,q7,I3e,lMr,iMr,UQ,dMr,cMr,fMr,N7,q3e,mMr,gMr,JQ,hMr,pMr,_Mr,j7,N3e,uMr,bMr,YQ,FMr,vMr,TMr,D7,j3e,MMr,EMr,KQ,CMr,wMr,AMr,D3e,yMr,LMr,Vy,RBe,of,G7,G3e,Xy,xMr,O3e,kMr,BBe,Br,zy,SMr,rf,RMr,ZQ,BMr,PMr,eW,$Mr,IMr,qMr,Qy,NMr,V3e,jMr,DMr,GMr,yt,Wy,OMr,X3e,VMr,XMr,tf,zMr,z3e,QMr,WMr,oW,HMr,UMr,JMr,Q3e,YMr,KMr,Hy,ZMr,Lo,Uy,eEr,W3e,oEr,rEr,kn,tEr,H3e,aEr,nEr,U3e,sEr,lEr,J3e,iEr,dEr,cEr,ca,O7,Y3e,fEr,mEr,rW,gEr,hEr,pEr,V7,K3e,_Er,uEr,tW,bEr,FEr,vEr,X7,Z3e,TEr,MEr,aW,EEr,CEr,wEr,z7,e2e,AEr,yEr,nW,LEr,xEr,kEr,Q7,o2e,SEr,REr,sW,BEr,PEr,$Er,r2e,IEr,qEr,Jy,PBe,af,W7,t2e,Yy,NEr,a2e,jEr,$Be,Pr,Ky,DEr,nf,GEr,lW,OEr,VEr,iW,XEr,zEr,QEr,Zy,WEr,n2e,HEr,UEr,JEr,Lt,eL,YEr,s2e,KEr,ZEr,sf,eCr,l2e,oCr,rCr,dW,tCr,aCr,nCr,i2e,sCr,lCr,oL,iCr,xo,rL,dCr,d2e,cCr,fCr,Sn,mCr,c2e,gCr,hCr,f2e,pCr,_Cr,m2e,uCr,bCr,FCr,fe,H7,g2e,vCr,TCr,cW,MCr,ECr,CCr,U7,h2e,wCr,ACr,fW,yCr,LCr,xCr,J7,p2e,kCr,SCr,mW,RCr,BCr,PCr,Y7,_2e,$Cr,ICr,gW,qCr,NCr,jCr,K7,u2e,DCr,GCr,hW,OCr,VCr,XCr,Z7,b2e,zCr,QCr,pW,WCr,HCr,UCr,eM,F2e,JCr,YCr,_W,KCr,ZCr,e5r,oM,v2e,o5r,r5r,uW,t5r,a5r,n5r,rM,T2e,s5r,l5r,bW,i5r,d5r,c5r,tM,M2e,f5r,m5r,FW,g5r,h5r,p5r,aM,E2e,_5r,u5r,vW,b5r,F5r,v5r,nM,C2e,T5r,M5r,TW,E5r,C5r,w5r,w2e,A5r,y5r,tL,IBe,lf,sM,A2e,aL,L5r,y2e,x5r,qBe,$r,nL,k5r,df,S5r,MW,R5r,B5r,EW,P5r,$5r,I5r,sL,q5r,L2e,N5r,j5r,D5r,xt,lL,G5r,x2e,O5r,V5r,cf,X5r,k2e,z5r,Q5r,CW,W5r,H5r,U5r,S2e,J5r,Y5r,iL,K5r,ko,dL,Z5r,R2e,ewr,owr,Rn,rwr,B2e,twr,awr,P2e,nwr,swr,$2e,lwr,iwr,dwr,be,lM,I2e,cwr,fwr,wW,mwr,gwr,hwr,iM,q2e,pwr,_wr,AW,uwr,bwr,Fwr,dM,N2e,vwr,Twr,yW,Mwr,Ewr,Cwr,cM,j2e,wwr,Awr,LW,ywr,Lwr,xwr,fM,D2e,kwr,Swr,xW,Rwr,Bwr,Pwr,mM,G2e,$wr,Iwr,kW,qwr,Nwr,jwr,gM,O2e,Dwr,Gwr,SW,Owr,Vwr,Xwr,hM,V2e,zwr,Qwr,RW,Wwr,Hwr,Uwr,pM,X2e,Jwr,Ywr,BW,Kwr,Zwr,eAr,_M,z2e,oAr,rAr,PW,tAr,aAr,nAr,Q2e,sAr,lAr,cL,NBe,ff,uM,W2e,fL,iAr,H2e,dAr,jBe,Ir,mL,cAr,mf,fAr,$W,mAr,gAr,IW,hAr,pAr,_Ar,gL,uAr,U2e,bAr,FAr,vAr,kt,hL,TAr,J2e,MAr,EAr,gf,CAr,Y2e,wAr,AAr,qW,yAr,LAr,xAr,K2e,kAr,SAr,pL,RAr,So,_L,BAr,Z2e,PAr,$Ar,Bn,IAr,eFe,qAr,NAr,oFe,jAr,DAr,rFe,GAr,OAr,VAr,Ee,bM,tFe,XAr,zAr,NW,QAr,WAr,HAr,FM,aFe,UAr,JAr,jW,YAr,KAr,ZAr,vM,nFe,e0r,o0r,DW,r0r,t0r,a0r,TM,sFe,n0r,s0r,GW,l0r,i0r,d0r,MM,lFe,c0r,f0r,OW,m0r,g0r,h0r,EM,iFe,p0r,_0r,VW,u0r,b0r,F0r,CM,dFe,v0r,T0r,XW,M0r,E0r,C0r,wM,cFe,w0r,A0r,zW,y0r,L0r,x0r,AM,fFe,k0r,S0r,QW,R0r,B0r,P0r,mFe,$0r,I0r,uL,DBe,hf,yM,gFe,bL,q0r,hFe,N0r,GBe,qr,FL,j0r,pf,D0r,WW,G0r,O0r,HW,V0r,X0r,z0r,vL,Q0r,pFe,W0r,H0r,U0r,St,TL,J0r,_Fe,Y0r,K0r,_f,Z0r,uFe,eyr,oyr,UW,ryr,tyr,ayr,bFe,nyr,syr,ML,lyr,Ro,EL,iyr,FFe,dyr,cyr,Pn,fyr,vFe,myr,gyr,TFe,hyr,pyr,MFe,_yr,uyr,byr,Fe,LM,EFe,Fyr,vyr,JW,Tyr,Myr,Eyr,xM,CFe,Cyr,wyr,YW,Ayr,yyr,Lyr,kM,wFe,xyr,kyr,KW,Syr,Ryr,Byr,SM,AFe,Pyr,$yr,ZW,Iyr,qyr,Nyr,RM,yFe,jyr,Dyr,eH,Gyr,Oyr,Vyr,BM,LFe,Xyr,zyr,oH,Qyr,Wyr,Hyr,PM,xFe,Uyr,Jyr,rH,Yyr,Kyr,Zyr,$M,kFe,eLr,oLr,tH,rLr,tLr,aLr,IM,SFe,nLr,sLr,aH,lLr,iLr,dLr,qM,RFe,cLr,fLr,nH,mLr,gLr,hLr,BFe,pLr,_Lr,CL,OBe,uf,NM,PFe,wL,uLr,$Fe,bLr,VBe,Nr,AL,FLr,bf,vLr,sH,TLr,MLr,lH,ELr,CLr,wLr,yL,ALr,IFe,yLr,LLr,xLr,Rt,LL,kLr,qFe,SLr,RLr,Ff,BLr,NFe,PLr,$Lr,iH,ILr,qLr,NLr,jFe,jLr,DLr,xL,GLr,Bo,kL,OLr,DFe,VLr,XLr,$n,zLr,GFe,QLr,WLr,OFe,HLr,ULr,VFe,JLr,YLr,KLr,ve,jM,XFe,ZLr,e8r,dH,o8r,r8r,t8r,DM,zFe,a8r,n8r,cH,s8r,l8r,i8r,GM,QFe,d8r,c8r,fH,f8r,m8r,g8r,OM,WFe,h8r,p8r,mH,_8r,u8r,b8r,VM,HFe,F8r,v8r,gH,T8r,M8r,E8r,XM,UFe,C8r,w8r,hH,A8r,y8r,L8r,zM,JFe,x8r,k8r,pH,S8r,R8r,B8r,QM,YFe,P8r,$8r,_H,I8r,q8r,N8r,WM,KFe,j8r,D8r,uH,G8r,O8r,V8r,HM,ZFe,X8r,z8r,bH,Q8r,W8r,H8r,eve,U8r,J8r,SL,XBe,vf,UM,ove,RL,Y8r,rve,K8r,zBe,jr,BL,Z8r,Tf,e9r,FH,o9r,r9r,vH,t9r,a9r,n9r,PL,s9r,tve,l9r,i9r,d9r,Bt,$L,c9r,ave,f9r,m9r,Mf,g9r,nve,h9r,p9r,TH,_9r,u9r,b9r,sve,F9r,v9r,IL,T9r,Po,qL,M9r,lve,E9r,C9r,In,w9r,ive,A9r,y9r,dve,L9r,x9r,cve,k9r,S9r,R9r,Be,JM,fve,B9r,P9r,MH,$9r,I9r,q9r,YM,mve,N9r,j9r,EH,D9r,G9r,O9r,KM,gve,V9r,X9r,CH,z9r,Q9r,W9r,ZM,hve,H9r,U9r,wH,J9r,Y9r,K9r,eE,pve,Z9r,exr,AH,oxr,rxr,txr,oE,_ve,axr,nxr,yH,sxr,lxr,ixr,rE,uve,dxr,cxr,LH,fxr,mxr,gxr,tE,bve,hxr,pxr,xH,_xr,uxr,bxr,Fve,Fxr,vxr,NL,QBe,Ef,aE,vve,jL,Txr,Tve,Mxr,WBe,Dr,DL,Exr,Cf,Cxr,kH,wxr,Axr,SH,yxr,Lxr,xxr,GL,kxr,Mve,Sxr,Rxr,Bxr,Pt,OL,Pxr,Eve,$xr,Ixr,wf,qxr,Cve,Nxr,jxr,RH,Dxr,Gxr,Oxr,wve,Vxr,Xxr,VL,zxr,$o,XL,Qxr,Ave,Wxr,Hxr,qn,Uxr,yve,Jxr,Yxr,Lve,Kxr,Zxr,xve,ekr,okr,rkr,Pe,nE,kve,tkr,akr,BH,nkr,skr,lkr,sE,Sve,ikr,dkr,PH,ckr,fkr,mkr,lE,Rve,gkr,hkr,$H,pkr,_kr,ukr,iE,Bve,bkr,Fkr,IH,vkr,Tkr,Mkr,dE,Pve,Ekr,Ckr,qH,wkr,Akr,ykr,cE,$ve,Lkr,xkr,NH,kkr,Skr,Rkr,fE,Ive,Bkr,Pkr,jH,$kr,Ikr,qkr,mE,qve,Nkr,jkr,DH,Dkr,Gkr,Okr,Nve,Vkr,Xkr,zL,HBe,Af,gE,jve,QL,zkr,Dve,Qkr,UBe,Gr,WL,Wkr,yf,Hkr,GH,Ukr,Jkr,OH,Ykr,Kkr,Zkr,HL,eSr,Gve,oSr,rSr,tSr,$t,UL,aSr,Ove,nSr,sSr,Lf,lSr,Vve,iSr,dSr,VH,cSr,fSr,mSr,Xve,gSr,hSr,JL,pSr,Io,YL,_Sr,zve,uSr,bSr,Nn,FSr,Qve,vSr,TSr,Wve,MSr,ESr,Hve,CSr,wSr,ASr,Uve,hE,Jve,ySr,LSr,XH,xSr,kSr,SSr,Yve,RSr,BSr,KL,JBe,xf,pE,Kve,ZL,PSr,Zve,$Sr,YBe,Or,e8,ISr,kf,qSr,zH,NSr,jSr,QH,DSr,GSr,OSr,o8,VSr,e6e,XSr,zSr,QSr,It,r8,WSr,o6e,HSr,USr,Sf,JSr,r6e,YSr,KSr,WH,ZSr,eRr,oRr,t6e,rRr,tRr,t8,aRr,qo,a8,nRr,a6e,sRr,lRr,jn,iRr,n6e,dRr,cRr,s6e,fRr,mRr,l6e,gRr,hRr,pRr,n8,_E,i6e,_Rr,uRr,HH,bRr,FRr,vRr,uE,d6e,TRr,MRr,UH,ERr,CRr,wRr,c6e,ARr,yRr,s8,KBe,Rf,bE,f6e,l8,LRr,m6e,xRr,ZBe,Vr,i8,kRr,Bf,SRr,JH,RRr,BRr,YH,PRr,$Rr,IRr,d8,qRr,g6e,NRr,jRr,DRr,qt,c8,GRr,h6e,ORr,VRr,Pf,XRr,p6e,zRr,QRr,KH,WRr,HRr,URr,_6e,JRr,YRr,f8,KRr,No,m8,ZRr,u6e,eBr,oBr,Dn,rBr,b6e,tBr,aBr,F6e,nBr,sBr,v6e,lBr,iBr,dBr,T6e,FE,M6e,cBr,fBr,ZH,mBr,gBr,hBr,E6e,pBr,_Br,g8,ePe;return me=new X({}),Da=new A({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),EC=new X({}),CC=new A({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Of=new uBr({props:{warning:!0,$$slots:{default:[zEt]},$$scope:{ctx:If}}}),wC=new X({}),AC=new C({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/configuration_auto.py#L549"}}),xC=new C({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/configuration_auto.py#L572",parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}]}}),kC=new A({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),SC=new C({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/configuration_auto.py#L694",parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}]}}),RC=new X({}),BC=new C({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/tokenization_auto.py#L352"}}),IC=new C({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/tokenization_auto.py#L366",parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_16473/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}]}}),qC=new A({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),NC=new C({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/tokenization_auto.py#L562",parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}]}}),jC=new X({}),DC=new C({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/feature_extraction_auto.py#L171"}}),VC=new C({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/feature_extraction_auto.py#L185",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_16473/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),Ph=new uBr({props:{$$slots:{default:[QEt]},$$scope:{ctx:If}}}),XC=new A({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),zC=new C({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/feature_extraction_auto.py#L312",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}]}}),QC=new X({}),WC=new C({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/processing_auto.py#L70"}}),JC=new C({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/processing_auto.py#L84",parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),zh=new uBr({props:{$$slots:{default:[WEt]},$$scope:{ctx:If}}}),YC=new A({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),KC=new C({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/processing_auto.py#L237",parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}]}}),ZC=new X({}),e5=new C({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L709"}}),r5=new C({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),t5=new A({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),a5=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),n5=new A({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),s5=new X({}),l5=new C({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L716"}}),d5=new C({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),c5=new A({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),f5=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),m5=new A({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),g5=new X({}),h5=new C({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L731"}}),_5=new C({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),u5=new A({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),b5=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),F5=new A({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),v5=new X({}),T5=new C({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L738"}}),E5=new C({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),C5=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),w5=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),A5=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),y5=new X({}),L5=new C({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L745"}}),k5=new C({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}]}}),S5=new A({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),R5=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),B5=new A({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),P5=new X({}),$5=new C({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L754"}}),q5=new C({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),N5=new A({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),j5=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),D5=new A({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),G5=new X({}),O5=new C({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L788"}}),X5=new C({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),z5=new A({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),Q5=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),W5=new A({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),H5=new X({}),U5=new C({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L795"}}),Y5=new C({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}]}}),K5=new A({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),Z5=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ew=new A({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ow=new X({}),rw=new C({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L781"}}),aw=new C({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),nw=new A({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),sw=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),lw=new A({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),iw=new X({}),dw=new C({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L763"}}),fw=new C({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),mw=new A({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),gw=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),hw=new A({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),pw=new X({}),_w=new C({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L770"}}),bw=new C({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),Fw=new A({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),vw=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Tw=new A({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Mw=new X({}),Ew=new C({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L804"}}),ww=new C({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_16473/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_16473/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_16473/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),Aw=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),yw=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Lw=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),xw=new X({}),kw=new C({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L843"}}),Rw=new C({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),Bw=new A({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),Pw=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),$w=new A({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Iw=new X({}),qw=new C({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L850"}}),jw=new C({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),Dw=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),Gw=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Ow=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Vw=new X({}),Xw=new C({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L873"}}),Qw=new C({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),Ww=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),Hw=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Uw=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Jw=new X({}),Yw=new C({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L857"}}),Zw=new C({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),eA=new A({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),oA=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),rA=new A({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),tA=new X({}),aA=new C({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L864"}}),sA=new C({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}]}}),lA=new A({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),iA=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),cA=new A({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),fA=new X({}),mA=new C({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L882"}}),hA=new C({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),pA=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),_A=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),uA=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),bA=new X({}),FA=new C({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L889"}}),TA=new C({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}]}}),MA=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),EA=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),CA=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),wA=new X({}),AA=new C({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L836"}}),LA=new C({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
</ul>`,name:"config"}]}}),xA=new A({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),kA=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),SA=new A({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),RA=new X({}),BA=new C({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L811"}}),$A=new C({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}]}}),IA=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),qA=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),NA=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),jA=new X({}),DA=new C({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L818"}}),OA=new C({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}]}}),VA=new A({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),XA=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),zA=new A({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),QA=new X({}),WA=new C({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L827"}}),UA=new C({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}]}}),JA=new A({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),YA=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),KA=new A({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ZA=new X({}),e0=new C({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_tf_auto.py#L381"}}),r0=new C({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),t0=new A({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),a0=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),n0=new A({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),s0=new X({}),l0=new C({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_tf_auto.py#L388"}}),d0=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),c0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),f0=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),m0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),g0=new X({}),h0=new C({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_tf_auto.py#L403"}}),_0=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),u0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),b0=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),F0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),v0=new X({}),T0=new C({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_tf_auto.py#L410"}}),E0=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),C0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),w0=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),y0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),L0=new X({}),x0=new C({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_tf_auto.py#L424"}}),S0=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),R0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),B0=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),P0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),$0=new X({}),I0=new C({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_tf_auto.py#L431"}}),N0=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),j0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),D0=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),G0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),O0=new X({}),V0=new C({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_tf_auto.py#L440"}}),z0=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Q0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),W0=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),H0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),U0=new X({}),J0=new C({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_tf_auto.py#L476"}}),K0=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Z0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),ey=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),oy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ry=new X({}),ty=new C({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_tf_auto.py#L456"}}),ny=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),sy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),ly=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),iy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),dy=new X({}),cy=new C({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_tf_auto.py#L467"}}),my=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),gy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),hy=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),py=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),_y=new X({}),uy=new C({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_tf_auto.py#L449"}}),Fy=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),vy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),Ty=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),My=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ey=new X({}),Cy=new C({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_tf_auto.py#L417"}}),Ay=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),yy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),Ly=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),xy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ky=new X({}),Sy=new C({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_tf_auto.py#L492"}}),By=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}]}}),Py=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),$y=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Iy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),qy=new X({}),Ny=new C({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_flax_auto.py#L237"}}),Dy=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),Gy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),Oy=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Vy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Xy=new X({}),zy=new C({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_flax_auto.py#L251"}}),Wy=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}]}}),Hy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),Uy=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Jy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Yy=new X({}),Ky=new C({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_flax_auto.py#L244"}}),eL=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),oL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),rL=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),tL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),aL=new X({}),nL=new C({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_flax_auto.py#L258"}}),lL=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),iL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),dL=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),cL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),fL=new X({}),mL=new C({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_flax_auto.py#L265"}}),hL=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),pL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),_L=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),uL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),bL=new X({}),FL=new C({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),TL=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),ML=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),EL=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),CL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),wL=new X({}),AL=new C({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),LL=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),xL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),kL=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),SL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),RL=new X({}),BL=new C({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_flax_auto.py#L290"}}),$L=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),IL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),qL=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),NL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),jL=new X({}),DL=new C({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),OL=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),VL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),XL=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),zL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),QL=new X({}),WL=new C({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_flax_auto.py#L306"}}),UL=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}]}}),JL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),YL=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),KL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ZL=new X({}),e8=new C({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),r8=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),t8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),a8=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),s8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),l8=new X({}),i8=new C({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),c8=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),f8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),m8=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),g8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){Z=a("meta"),io=l(),de=a("h1"),Ce=a("a"),lo=a("span"),f(me.$$.fragment),Me=l(),Xo=a("span"),Ii=o("Auto Classes"),qf=l(),fa=a("p"),qi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ni=a("code"),FC=o("from_pretrained()"),Nf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),xe=l(),co=a("p"),ji=o("Instantiating one of "),Gn=a("a"),vC=o("AutoConfig"),On=o(", "),Vn=a("a"),TC=o("AutoModel"),Di=o(`, and
`),Xn=a("a"),MC=o("AutoTokenizer"),Gi=o(" will directly create a class of the relevant architecture. For instance"),jf=l(),f(Da.$$.fragment),fo=l(),_e=a("p"),f9=o("will create a model that is an instance of "),Oi=a("a"),m9=o("BertModel"),g9=o("."),zo=l(),Ga=a("p"),h9=o("There is one class of "),Df=a("code"),p9=o("AutoModel"),mIe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),ZSe=l(),Vi=a("h2"),Gf=a("a"),WJ=a("span"),f(EC.$$.fragment),gIe=l(),HJ=a("span"),hIe=o("Extending the Auto Classes"),eRe=l(),zn=a("p"),pIe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),UJ=a("code"),_Ie=o("NewModel"),uIe=o(", make sure you have a "),JJ=a("code"),bIe=o("NewModelConfig"),FIe=o(` then you can add those to the auto
classes like this:`),oRe=l(),f(CC.$$.fragment),rRe=l(),_9=a("p"),vIe=o("You will then be able to use the auto classes like you would usually do!"),tRe=l(),f(Of.$$.fragment),aRe=l(),Xi=a("h2"),Vf=a("a"),YJ=a("span"),f(wC.$$.fragment),TIe=l(),KJ=a("span"),MIe=o("AutoConfig"),nRe=l(),Qo=a("div"),f(AC.$$.fragment),EIe=l(),yC=a("p"),CIe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),u9=a("a"),wIe=o("from_pretrained()"),AIe=o(" class method."),yIe=l(),LC=a("p"),LIe=o("This class cannot be instantiated directly using "),ZJ=a("code"),xIe=o("__init__()"),kIe=o(" (throws an error)."),SIe=l(),mo=a("div"),f(xC.$$.fragment),RIe=l(),eY=a("p"),BIe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),PIe=l(),zi=a("p"),$Ie=o("The configuration class to instantiate is selected based on the "),oY=a("code"),IIe=o("model_type"),qIe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),rY=a("code"),NIe=o("pretrained_model_name_or_path"),jIe=o(":"),DIe=l(),F=a("ul"),Xf=a("li"),tY=a("strong"),GIe=o("albert"),OIe=o(" \u2014 "),b9=a("a"),VIe=o("AlbertConfig"),XIe=o(" (ALBERT model)"),zIe=l(),zf=a("li"),aY=a("strong"),QIe=o("bart"),WIe=o(" \u2014 "),F9=a("a"),HIe=o("BartConfig"),UIe=o(" (BART model)"),JIe=l(),Qf=a("li"),nY=a("strong"),YIe=o("beit"),KIe=o(" \u2014 "),v9=a("a"),ZIe=o("BeitConfig"),eqe=o(" (BEiT model)"),oqe=l(),Wf=a("li"),sY=a("strong"),rqe=o("bert"),tqe=o(" \u2014 "),T9=a("a"),aqe=o("BertConfig"),nqe=o(" (BERT model)"),sqe=l(),Hf=a("li"),lY=a("strong"),lqe=o("bert-generation"),iqe=o(" \u2014 "),M9=a("a"),dqe=o("BertGenerationConfig"),cqe=o(" (Bert Generation model)"),fqe=l(),Uf=a("li"),iY=a("strong"),mqe=o("big_bird"),gqe=o(" \u2014 "),E9=a("a"),hqe=o("BigBirdConfig"),pqe=o(" (BigBird model)"),_qe=l(),Jf=a("li"),dY=a("strong"),uqe=o("bigbird_pegasus"),bqe=o(" \u2014 "),C9=a("a"),Fqe=o("BigBirdPegasusConfig"),vqe=o(" (BigBirdPegasus model)"),Tqe=l(),Yf=a("li"),cY=a("strong"),Mqe=o("blenderbot"),Eqe=o(" \u2014 "),w9=a("a"),Cqe=o("BlenderbotConfig"),wqe=o(" (Blenderbot model)"),Aqe=l(),Kf=a("li"),fY=a("strong"),yqe=o("blenderbot-small"),Lqe=o(" \u2014 "),A9=a("a"),xqe=o("BlenderbotSmallConfig"),kqe=o(" (BlenderbotSmall model)"),Sqe=l(),Zf=a("li"),mY=a("strong"),Rqe=o("camembert"),Bqe=o(" \u2014 "),y9=a("a"),Pqe=o("CamembertConfig"),$qe=o(" (CamemBERT model)"),Iqe=l(),em=a("li"),gY=a("strong"),qqe=o("canine"),Nqe=o(" \u2014 "),L9=a("a"),jqe=o("CanineConfig"),Dqe=o(" (Canine model)"),Gqe=l(),om=a("li"),hY=a("strong"),Oqe=o("clip"),Vqe=o(" \u2014 "),x9=a("a"),Xqe=o("CLIPConfig"),zqe=o(" (CLIP model)"),Qqe=l(),rm=a("li"),pY=a("strong"),Wqe=o("convbert"),Hqe=o(" \u2014 "),k9=a("a"),Uqe=o("ConvBertConfig"),Jqe=o(" (ConvBERT model)"),Yqe=l(),tm=a("li"),_Y=a("strong"),Kqe=o("convnext"),Zqe=o(" \u2014 "),S9=a("a"),eNe=o("ConvNextConfig"),oNe=o(" (ConvNext model)"),rNe=l(),am=a("li"),uY=a("strong"),tNe=o("ctrl"),aNe=o(" \u2014 "),R9=a("a"),nNe=o("CTRLConfig"),sNe=o(" (CTRL model)"),lNe=l(),nm=a("li"),bY=a("strong"),iNe=o("data2vec-audio"),dNe=o(" \u2014 "),B9=a("a"),cNe=o("Data2VecAudioConfig"),fNe=o(" (Data2VecAudio model)"),mNe=l(),sm=a("li"),FY=a("strong"),gNe=o("data2vec-text"),hNe=o(" \u2014 "),P9=a("a"),pNe=o("Data2VecTextConfig"),_Ne=o(" (Data2VecText model)"),uNe=l(),lm=a("li"),vY=a("strong"),bNe=o("deberta"),FNe=o(" \u2014 "),$9=a("a"),vNe=o("DebertaConfig"),TNe=o(" (DeBERTa model)"),MNe=l(),im=a("li"),TY=a("strong"),ENe=o("deberta-v2"),CNe=o(" \u2014 "),I9=a("a"),wNe=o("DebertaV2Config"),ANe=o(" (DeBERTa-v2 model)"),yNe=l(),dm=a("li"),MY=a("strong"),LNe=o("decision_transformer"),xNe=o(" \u2014 "),q9=a("a"),kNe=o("DecisionTransformerConfig"),SNe=o(" (Decision Transformer model)"),RNe=l(),cm=a("li"),EY=a("strong"),BNe=o("deit"),PNe=o(" \u2014 "),N9=a("a"),$Ne=o("DeiTConfig"),INe=o(" (DeiT model)"),qNe=l(),fm=a("li"),CY=a("strong"),NNe=o("detr"),jNe=o(" \u2014 "),j9=a("a"),DNe=o("DetrConfig"),GNe=o(" (DETR model)"),ONe=l(),mm=a("li"),wY=a("strong"),VNe=o("distilbert"),XNe=o(" \u2014 "),D9=a("a"),zNe=o("DistilBertConfig"),QNe=o(" (DistilBERT model)"),WNe=l(),gm=a("li"),AY=a("strong"),HNe=o("dpr"),UNe=o(" \u2014 "),G9=a("a"),JNe=o("DPRConfig"),YNe=o(" (DPR model)"),KNe=l(),hm=a("li"),yY=a("strong"),ZNe=o("dpt"),eje=o(" \u2014 "),O9=a("a"),oje=o("DPTConfig"),rje=o(" (DPT model)"),tje=l(),pm=a("li"),LY=a("strong"),aje=o("electra"),nje=o(" \u2014 "),V9=a("a"),sje=o("ElectraConfig"),lje=o(" (ELECTRA model)"),ije=l(),_m=a("li"),xY=a("strong"),dje=o("encoder-decoder"),cje=o(" \u2014 "),X9=a("a"),fje=o("EncoderDecoderConfig"),mje=o(" (Encoder decoder model)"),gje=l(),um=a("li"),kY=a("strong"),hje=o("flaubert"),pje=o(" \u2014 "),z9=a("a"),_je=o("FlaubertConfig"),uje=o(" (FlauBERT model)"),bje=l(),bm=a("li"),SY=a("strong"),Fje=o("fnet"),vje=o(" \u2014 "),Q9=a("a"),Tje=o("FNetConfig"),Mje=o(" (FNet model)"),Eje=l(),Fm=a("li"),RY=a("strong"),Cje=o("fsmt"),wje=o(" \u2014 "),W9=a("a"),Aje=o("FSMTConfig"),yje=o(" (FairSeq Machine-Translation model)"),Lje=l(),vm=a("li"),BY=a("strong"),xje=o("funnel"),kje=o(" \u2014 "),H9=a("a"),Sje=o("FunnelConfig"),Rje=o(" (Funnel Transformer model)"),Bje=l(),Tm=a("li"),PY=a("strong"),Pje=o("glpn"),$je=o(" \u2014 "),U9=a("a"),Ije=o("GLPNConfig"),qje=o(" (GLPN model)"),Nje=l(),Mm=a("li"),$Y=a("strong"),jje=o("gpt2"),Dje=o(" \u2014 "),J9=a("a"),Gje=o("GPT2Config"),Oje=o(" (OpenAI GPT-2 model)"),Vje=l(),Em=a("li"),IY=a("strong"),Xje=o("gpt_neo"),zje=o(" \u2014 "),Y9=a("a"),Qje=o("GPTNeoConfig"),Wje=o(" (GPT Neo model)"),Hje=l(),Cm=a("li"),qY=a("strong"),Uje=o("gptj"),Jje=o(" \u2014 "),K9=a("a"),Yje=o("GPTJConfig"),Kje=o(" (GPT-J model)"),Zje=l(),wm=a("li"),NY=a("strong"),eDe=o("hubert"),oDe=o(" \u2014 "),Z9=a("a"),rDe=o("HubertConfig"),tDe=o(" (Hubert model)"),aDe=l(),Am=a("li"),jY=a("strong"),nDe=o("ibert"),sDe=o(" \u2014 "),ex=a("a"),lDe=o("IBertConfig"),iDe=o(" (I-BERT model)"),dDe=l(),ym=a("li"),DY=a("strong"),cDe=o("imagegpt"),fDe=o(" \u2014 "),ox=a("a"),mDe=o("ImageGPTConfig"),gDe=o(" (ImageGPT model)"),hDe=l(),Lm=a("li"),GY=a("strong"),pDe=o("layoutlm"),_De=o(" \u2014 "),rx=a("a"),uDe=o("LayoutLMConfig"),bDe=o(" (LayoutLM model)"),FDe=l(),xm=a("li"),OY=a("strong"),vDe=o("layoutlmv2"),TDe=o(" \u2014 "),tx=a("a"),MDe=o("LayoutLMv2Config"),EDe=o(" (LayoutLMv2 model)"),CDe=l(),km=a("li"),VY=a("strong"),wDe=o("led"),ADe=o(" \u2014 "),ax=a("a"),yDe=o("LEDConfig"),LDe=o(" (LED model)"),xDe=l(),Sm=a("li"),XY=a("strong"),kDe=o("longformer"),SDe=o(" \u2014 "),nx=a("a"),RDe=o("LongformerConfig"),BDe=o(" (Longformer model)"),PDe=l(),Rm=a("li"),zY=a("strong"),$De=o("luke"),IDe=o(" \u2014 "),sx=a("a"),qDe=o("LukeConfig"),NDe=o(" (LUKE model)"),jDe=l(),Bm=a("li"),QY=a("strong"),DDe=o("lxmert"),GDe=o(" \u2014 "),lx=a("a"),ODe=o("LxmertConfig"),VDe=o(" (LXMERT model)"),XDe=l(),Pm=a("li"),WY=a("strong"),zDe=o("m2m_100"),QDe=o(" \u2014 "),ix=a("a"),WDe=o("M2M100Config"),HDe=o(" (M2M100 model)"),UDe=l(),$m=a("li"),HY=a("strong"),JDe=o("marian"),YDe=o(" \u2014 "),dx=a("a"),KDe=o("MarianConfig"),ZDe=o(" (Marian model)"),eGe=l(),Im=a("li"),UY=a("strong"),oGe=o("maskformer"),rGe=o(" \u2014 "),cx=a("a"),tGe=o("MaskFormerConfig"),aGe=o(" (MaskFormer model)"),nGe=l(),qm=a("li"),JY=a("strong"),sGe=o("mbart"),lGe=o(" \u2014 "),fx=a("a"),iGe=o("MBartConfig"),dGe=o(" (mBART model)"),cGe=l(),Nm=a("li"),YY=a("strong"),fGe=o("megatron-bert"),mGe=o(" \u2014 "),mx=a("a"),gGe=o("MegatronBertConfig"),hGe=o(" (MegatronBert model)"),pGe=l(),jm=a("li"),KY=a("strong"),_Ge=o("mobilebert"),uGe=o(" \u2014 "),gx=a("a"),bGe=o("MobileBertConfig"),FGe=o(" (MobileBERT model)"),vGe=l(),Dm=a("li"),ZY=a("strong"),TGe=o("mpnet"),MGe=o(" \u2014 "),hx=a("a"),EGe=o("MPNetConfig"),CGe=o(" (MPNet model)"),wGe=l(),Gm=a("li"),eK=a("strong"),AGe=o("mt5"),yGe=o(" \u2014 "),px=a("a"),LGe=o("MT5Config"),xGe=o(" (mT5 model)"),kGe=l(),Om=a("li"),oK=a("strong"),SGe=o("nystromformer"),RGe=o(" \u2014 "),_x=a("a"),BGe=o("NystromformerConfig"),PGe=o(" (Nystromformer model)"),$Ge=l(),Vm=a("li"),rK=a("strong"),IGe=o("openai-gpt"),qGe=o(" \u2014 "),ux=a("a"),NGe=o("OpenAIGPTConfig"),jGe=o(" (OpenAI GPT model)"),DGe=l(),Xm=a("li"),tK=a("strong"),GGe=o("pegasus"),OGe=o(" \u2014 "),bx=a("a"),VGe=o("PegasusConfig"),XGe=o(" (Pegasus model)"),zGe=l(),zm=a("li"),aK=a("strong"),QGe=o("perceiver"),WGe=o(" \u2014 "),Fx=a("a"),HGe=o("PerceiverConfig"),UGe=o(" (Perceiver model)"),JGe=l(),Qm=a("li"),nK=a("strong"),YGe=o("plbart"),KGe=o(" \u2014 "),vx=a("a"),ZGe=o("PLBartConfig"),eOe=o(" (PLBart model)"),oOe=l(),Wm=a("li"),sK=a("strong"),rOe=o("poolformer"),tOe=o(" \u2014 "),Tx=a("a"),aOe=o("PoolFormerConfig"),nOe=o(" (PoolFormer model)"),sOe=l(),Hm=a("li"),lK=a("strong"),lOe=o("prophetnet"),iOe=o(" \u2014 "),Mx=a("a"),dOe=o("ProphetNetConfig"),cOe=o(" (ProphetNet model)"),fOe=l(),Um=a("li"),iK=a("strong"),mOe=o("qdqbert"),gOe=o(" \u2014 "),Ex=a("a"),hOe=o("QDQBertConfig"),pOe=o(" (QDQBert model)"),_Oe=l(),Jm=a("li"),dK=a("strong"),uOe=o("rag"),bOe=o(" \u2014 "),Cx=a("a"),FOe=o("RagConfig"),vOe=o(" (RAG model)"),TOe=l(),Ym=a("li"),cK=a("strong"),MOe=o("realm"),EOe=o(" \u2014 "),wx=a("a"),COe=o("RealmConfig"),wOe=o(" (Realm model)"),AOe=l(),Km=a("li"),fK=a("strong"),yOe=o("reformer"),LOe=o(" \u2014 "),Ax=a("a"),xOe=o("ReformerConfig"),kOe=o(" (Reformer model)"),SOe=l(),Zm=a("li"),mK=a("strong"),ROe=o("rembert"),BOe=o(" \u2014 "),yx=a("a"),POe=o("RemBertConfig"),$Oe=o(" (RemBERT model)"),IOe=l(),eg=a("li"),gK=a("strong"),qOe=o("resnet"),NOe=o(" \u2014 "),Lx=a("a"),jOe=o("ResNetConfig"),DOe=o(" (ResNet model)"),GOe=l(),og=a("li"),hK=a("strong"),OOe=o("retribert"),VOe=o(" \u2014 "),xx=a("a"),XOe=o("RetriBertConfig"),zOe=o(" (RetriBERT model)"),QOe=l(),rg=a("li"),pK=a("strong"),WOe=o("roberta"),HOe=o(" \u2014 "),kx=a("a"),UOe=o("RobertaConfig"),JOe=o(" (RoBERTa model)"),YOe=l(),tg=a("li"),_K=a("strong"),KOe=o("roformer"),ZOe=o(" \u2014 "),Sx=a("a"),eVe=o("RoFormerConfig"),oVe=o(" (RoFormer model)"),rVe=l(),ag=a("li"),uK=a("strong"),tVe=o("segformer"),aVe=o(" \u2014 "),Rx=a("a"),nVe=o("SegformerConfig"),sVe=o(" (SegFormer model)"),lVe=l(),ng=a("li"),bK=a("strong"),iVe=o("sew"),dVe=o(" \u2014 "),Bx=a("a"),cVe=o("SEWConfig"),fVe=o(" (SEW model)"),mVe=l(),sg=a("li"),FK=a("strong"),gVe=o("sew-d"),hVe=o(" \u2014 "),Px=a("a"),pVe=o("SEWDConfig"),_Ve=o(" (SEW-D model)"),uVe=l(),lg=a("li"),vK=a("strong"),bVe=o("speech-encoder-decoder"),FVe=o(" \u2014 "),$x=a("a"),vVe=o("SpeechEncoderDecoderConfig"),TVe=o(" (Speech Encoder decoder model)"),MVe=l(),ig=a("li"),TK=a("strong"),EVe=o("speech_to_text"),CVe=o(" \u2014 "),Ix=a("a"),wVe=o("Speech2TextConfig"),AVe=o(" (Speech2Text model)"),yVe=l(),dg=a("li"),MK=a("strong"),LVe=o("speech_to_text_2"),xVe=o(" \u2014 "),qx=a("a"),kVe=o("Speech2Text2Config"),SVe=o(" (Speech2Text2 model)"),RVe=l(),cg=a("li"),EK=a("strong"),BVe=o("splinter"),PVe=o(" \u2014 "),Nx=a("a"),$Ve=o("SplinterConfig"),IVe=o(" (Splinter model)"),qVe=l(),fg=a("li"),CK=a("strong"),NVe=o("squeezebert"),jVe=o(" \u2014 "),jx=a("a"),DVe=o("SqueezeBertConfig"),GVe=o(" (SqueezeBERT model)"),OVe=l(),mg=a("li"),wK=a("strong"),VVe=o("swin"),XVe=o(" \u2014 "),Dx=a("a"),zVe=o("SwinConfig"),QVe=o(" (Swin model)"),WVe=l(),gg=a("li"),AK=a("strong"),HVe=o("t5"),UVe=o(" \u2014 "),Gx=a("a"),JVe=o("T5Config"),YVe=o(" (T5 model)"),KVe=l(),hg=a("li"),yK=a("strong"),ZVe=o("tapas"),eXe=o(" \u2014 "),Ox=a("a"),oXe=o("TapasConfig"),rXe=o(" (TAPAS model)"),tXe=l(),pg=a("li"),LK=a("strong"),aXe=o("tapex"),nXe=o(" \u2014 "),Vx=a("a"),sXe=o("BartConfig"),lXe=o(" (TAPEX model)"),iXe=l(),_g=a("li"),xK=a("strong"),dXe=o("transfo-xl"),cXe=o(" \u2014 "),Xx=a("a"),fXe=o("TransfoXLConfig"),mXe=o(" (Transformer-XL model)"),gXe=l(),ug=a("li"),kK=a("strong"),hXe=o("trocr"),pXe=o(" \u2014 "),zx=a("a"),_Xe=o("TrOCRConfig"),uXe=o(" (TrOCR model)"),bXe=l(),bg=a("li"),SK=a("strong"),FXe=o("unispeech"),vXe=o(" \u2014 "),Qx=a("a"),TXe=o("UniSpeechConfig"),MXe=o(" (UniSpeech model)"),EXe=l(),Fg=a("li"),RK=a("strong"),CXe=o("unispeech-sat"),wXe=o(" \u2014 "),Wx=a("a"),AXe=o("UniSpeechSatConfig"),yXe=o(" (UniSpeechSat model)"),LXe=l(),vg=a("li"),BK=a("strong"),xXe=o("van"),kXe=o(" \u2014 "),Hx=a("a"),SXe=o("VanConfig"),RXe=o(" (VAN model)"),BXe=l(),Tg=a("li"),PK=a("strong"),PXe=o("vilt"),$Xe=o(" \u2014 "),Ux=a("a"),IXe=o("ViltConfig"),qXe=o(" (ViLT model)"),NXe=l(),Mg=a("li"),$K=a("strong"),jXe=o("vision-encoder-decoder"),DXe=o(" \u2014 "),Jx=a("a"),GXe=o("VisionEncoderDecoderConfig"),OXe=o(" (Vision Encoder decoder model)"),VXe=l(),Eg=a("li"),IK=a("strong"),XXe=o("vision-text-dual-encoder"),zXe=o(" \u2014 "),Yx=a("a"),QXe=o("VisionTextDualEncoderConfig"),WXe=o(" (VisionTextDualEncoder model)"),HXe=l(),Cg=a("li"),qK=a("strong"),UXe=o("visual_bert"),JXe=o(" \u2014 "),Kx=a("a"),YXe=o("VisualBertConfig"),KXe=o(" (VisualBert model)"),ZXe=l(),wg=a("li"),NK=a("strong"),eze=o("vit"),oze=o(" \u2014 "),Zx=a("a"),rze=o("ViTConfig"),tze=o(" (ViT model)"),aze=l(),Ag=a("li"),jK=a("strong"),nze=o("vit_mae"),sze=o(" \u2014 "),ek=a("a"),lze=o("ViTMAEConfig"),ize=o(" (ViTMAE model)"),dze=l(),yg=a("li"),DK=a("strong"),cze=o("wav2vec2"),fze=o(" \u2014 "),ok=a("a"),mze=o("Wav2Vec2Config"),gze=o(" (Wav2Vec2 model)"),hze=l(),Lg=a("li"),GK=a("strong"),pze=o("wavlm"),_ze=o(" \u2014 "),rk=a("a"),uze=o("WavLMConfig"),bze=o(" (WavLM model)"),Fze=l(),xg=a("li"),OK=a("strong"),vze=o("xglm"),Tze=o(" \u2014 "),tk=a("a"),Mze=o("XGLMConfig"),Eze=o(" (XGLM model)"),Cze=l(),kg=a("li"),VK=a("strong"),wze=o("xlm"),Aze=o(" \u2014 "),ak=a("a"),yze=o("XLMConfig"),Lze=o(" (XLM model)"),xze=l(),Sg=a("li"),XK=a("strong"),kze=o("xlm-prophetnet"),Sze=o(" \u2014 "),nk=a("a"),Rze=o("XLMProphetNetConfig"),Bze=o(" (XLMProphetNet model)"),Pze=l(),Rg=a("li"),zK=a("strong"),$ze=o("xlm-roberta"),Ize=o(" \u2014 "),sk=a("a"),qze=o("XLMRobertaConfig"),Nze=o(" (XLM-RoBERTa model)"),jze=l(),Bg=a("li"),QK=a("strong"),Dze=o("xlm-roberta-xl"),Gze=o(" \u2014 "),lk=a("a"),Oze=o("XLMRobertaXLConfig"),Vze=o(" (XLM-RoBERTa-XL model)"),Xze=l(),Pg=a("li"),WK=a("strong"),zze=o("xlnet"),Qze=o(" \u2014 "),ik=a("a"),Wze=o("XLNetConfig"),Hze=o(" (XLNet model)"),Uze=l(),$g=a("li"),HK=a("strong"),Jze=o("yoso"),Yze=o(" \u2014 "),dk=a("a"),Kze=o("YosoConfig"),Zze=o(" (YOSO model)"),eQe=l(),UK=a("p"),oQe=o("Examples:"),rQe=l(),f(kC.$$.fragment),tQe=l(),Ig=a("div"),f(SC.$$.fragment),aQe=l(),JK=a("p"),nQe=o("Register a new configuration for this class."),sRe=l(),Qi=a("h2"),qg=a("a"),YK=a("span"),f(RC.$$.fragment),sQe=l(),KK=a("span"),lQe=o("AutoTokenizer"),lRe=l(),Wo=a("div"),f(BC.$$.fragment),iQe=l(),PC=a("p"),dQe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),ck=a("a"),cQe=o("AutoTokenizer.from_pretrained()"),fQe=o(" class method."),mQe=l(),$C=a("p"),gQe=o("This class cannot be instantiated directly using "),ZK=a("code"),hQe=o("__init__()"),pQe=o(" (throws an error)."),_Qe=l(),go=a("div"),f(IC.$$.fragment),uQe=l(),eZ=a("p"),bQe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),FQe=l(),Oa=a("p"),vQe=o("The tokenizer class to instantiate is selected based on the "),oZ=a("code"),TQe=o("model_type"),MQe=o(` property of the config object (either
passed as an argument or loaded from `),rZ=a("code"),EQe=o("pretrained_model_name_or_path"),CQe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tZ=a("code"),wQe=o("pretrained_model_name_or_path"),AQe=o(":"),yQe=l(),E=a("ul"),Qn=a("li"),aZ=a("strong"),LQe=o("albert"),xQe=o(" \u2014 "),fk=a("a"),kQe=o("AlbertTokenizer"),SQe=o(" or "),mk=a("a"),RQe=o("AlbertTokenizerFast"),BQe=o(" (ALBERT model)"),PQe=l(),Wn=a("li"),nZ=a("strong"),$Qe=o("bart"),IQe=o(" \u2014 "),gk=a("a"),qQe=o("BartTokenizer"),NQe=o(" or "),hk=a("a"),jQe=o("BartTokenizerFast"),DQe=o(" (BART model)"),GQe=l(),Hn=a("li"),sZ=a("strong"),OQe=o("barthez"),VQe=o(" \u2014 "),pk=a("a"),XQe=o("BarthezTokenizer"),zQe=o(" or "),_k=a("a"),QQe=o("BarthezTokenizerFast"),WQe=o(" (BARThez model)"),HQe=l(),Ng=a("li"),lZ=a("strong"),UQe=o("bartpho"),JQe=o(" \u2014 "),uk=a("a"),YQe=o("BartphoTokenizer"),KQe=o(" (BARTpho model)"),ZQe=l(),Un=a("li"),iZ=a("strong"),eWe=o("bert"),oWe=o(" \u2014 "),bk=a("a"),rWe=o("BertTokenizer"),tWe=o(" or "),Fk=a("a"),aWe=o("BertTokenizerFast"),nWe=o(" (BERT model)"),sWe=l(),jg=a("li"),dZ=a("strong"),lWe=o("bert-generation"),iWe=o(" \u2014 "),vk=a("a"),dWe=o("BertGenerationTokenizer"),cWe=o(" (Bert Generation model)"),fWe=l(),Dg=a("li"),cZ=a("strong"),mWe=o("bert-japanese"),gWe=o(" \u2014 "),Tk=a("a"),hWe=o("BertJapaneseTokenizer"),pWe=o(" (BertJapanese model)"),_We=l(),Gg=a("li"),fZ=a("strong"),uWe=o("bertweet"),bWe=o(" \u2014 "),Mk=a("a"),FWe=o("BertweetTokenizer"),vWe=o(" (Bertweet model)"),TWe=l(),Jn=a("li"),mZ=a("strong"),MWe=o("big_bird"),EWe=o(" \u2014 "),Ek=a("a"),CWe=o("BigBirdTokenizer"),wWe=o(" or "),Ck=a("a"),AWe=o("BigBirdTokenizerFast"),yWe=o(" (BigBird model)"),LWe=l(),Yn=a("li"),gZ=a("strong"),xWe=o("bigbird_pegasus"),kWe=o(" \u2014 "),wk=a("a"),SWe=o("PegasusTokenizer"),RWe=o(" or "),Ak=a("a"),BWe=o("PegasusTokenizerFast"),PWe=o(" (BigBirdPegasus model)"),$We=l(),Kn=a("li"),hZ=a("strong"),IWe=o("blenderbot"),qWe=o(" \u2014 "),yk=a("a"),NWe=o("BlenderbotTokenizer"),jWe=o(" or "),Lk=a("a"),DWe=o("BlenderbotTokenizerFast"),GWe=o(" (Blenderbot model)"),OWe=l(),Og=a("li"),pZ=a("strong"),VWe=o("blenderbot-small"),XWe=o(" \u2014 "),xk=a("a"),zWe=o("BlenderbotSmallTokenizer"),QWe=o(" (BlenderbotSmall model)"),WWe=l(),Vg=a("li"),_Z=a("strong"),HWe=o("byt5"),UWe=o(" \u2014 "),kk=a("a"),JWe=o("ByT5Tokenizer"),YWe=o(" (ByT5 model)"),KWe=l(),Zn=a("li"),uZ=a("strong"),ZWe=o("camembert"),eHe=o(" \u2014 "),Sk=a("a"),oHe=o("CamembertTokenizer"),rHe=o(" or "),Rk=a("a"),tHe=o("CamembertTokenizerFast"),aHe=o(" (CamemBERT model)"),nHe=l(),Xg=a("li"),bZ=a("strong"),sHe=o("canine"),lHe=o(" \u2014 "),Bk=a("a"),iHe=o("CanineTokenizer"),dHe=o(" (Canine model)"),cHe=l(),es=a("li"),FZ=a("strong"),fHe=o("clip"),mHe=o(" \u2014 "),Pk=a("a"),gHe=o("CLIPTokenizer"),hHe=o(" or "),$k=a("a"),pHe=o("CLIPTokenizerFast"),_He=o(" (CLIP model)"),uHe=l(),os=a("li"),vZ=a("strong"),bHe=o("convbert"),FHe=o(" \u2014 "),Ik=a("a"),vHe=o("ConvBertTokenizer"),THe=o(" or "),qk=a("a"),MHe=o("ConvBertTokenizerFast"),EHe=o(" (ConvBERT model)"),CHe=l(),rs=a("li"),TZ=a("strong"),wHe=o("cpm"),AHe=o(" \u2014 "),Nk=a("a"),yHe=o("CpmTokenizer"),LHe=o(" or "),MZ=a("code"),xHe=o("CpmTokenizerFast"),kHe=o(" (CPM model)"),SHe=l(),zg=a("li"),EZ=a("strong"),RHe=o("ctrl"),BHe=o(" \u2014 "),jk=a("a"),PHe=o("CTRLTokenizer"),$He=o(" (CTRL model)"),IHe=l(),ts=a("li"),CZ=a("strong"),qHe=o("deberta"),NHe=o(" \u2014 "),Dk=a("a"),jHe=o("DebertaTokenizer"),DHe=o(" or "),Gk=a("a"),GHe=o("DebertaTokenizerFast"),OHe=o(" (DeBERTa model)"),VHe=l(),Qg=a("li"),wZ=a("strong"),XHe=o("deberta-v2"),zHe=o(" \u2014 "),Ok=a("a"),QHe=o("DebertaV2Tokenizer"),WHe=o(" (DeBERTa-v2 model)"),HHe=l(),as=a("li"),AZ=a("strong"),UHe=o("distilbert"),JHe=o(" \u2014 "),Vk=a("a"),YHe=o("DistilBertTokenizer"),KHe=o(" or "),Xk=a("a"),ZHe=o("DistilBertTokenizerFast"),eUe=o(" (DistilBERT model)"),oUe=l(),ns=a("li"),yZ=a("strong"),rUe=o("dpr"),tUe=o(" \u2014 "),zk=a("a"),aUe=o("DPRQuestionEncoderTokenizer"),nUe=o(" or "),Qk=a("a"),sUe=o("DPRQuestionEncoderTokenizerFast"),lUe=o(" (DPR model)"),iUe=l(),ss=a("li"),LZ=a("strong"),dUe=o("electra"),cUe=o(" \u2014 "),Wk=a("a"),fUe=o("ElectraTokenizer"),mUe=o(" or "),Hk=a("a"),gUe=o("ElectraTokenizerFast"),hUe=o(" (ELECTRA model)"),pUe=l(),Wg=a("li"),xZ=a("strong"),_Ue=o("flaubert"),uUe=o(" \u2014 "),Uk=a("a"),bUe=o("FlaubertTokenizer"),FUe=o(" (FlauBERT model)"),vUe=l(),ls=a("li"),kZ=a("strong"),TUe=o("fnet"),MUe=o(" \u2014 "),Jk=a("a"),EUe=o("FNetTokenizer"),CUe=o(" or "),Yk=a("a"),wUe=o("FNetTokenizerFast"),AUe=o(" (FNet model)"),yUe=l(),Hg=a("li"),SZ=a("strong"),LUe=o("fsmt"),xUe=o(" \u2014 "),Kk=a("a"),kUe=o("FSMTTokenizer"),SUe=o(" (FairSeq Machine-Translation model)"),RUe=l(),is=a("li"),RZ=a("strong"),BUe=o("funnel"),PUe=o(" \u2014 "),Zk=a("a"),$Ue=o("FunnelTokenizer"),IUe=o(" or "),eS=a("a"),qUe=o("FunnelTokenizerFast"),NUe=o(" (Funnel Transformer model)"),jUe=l(),ds=a("li"),BZ=a("strong"),DUe=o("gpt2"),GUe=o(" \u2014 "),oS=a("a"),OUe=o("GPT2Tokenizer"),VUe=o(" or "),rS=a("a"),XUe=o("GPT2TokenizerFast"),zUe=o(" (OpenAI GPT-2 model)"),QUe=l(),cs=a("li"),PZ=a("strong"),WUe=o("gpt_neo"),HUe=o(" \u2014 "),tS=a("a"),UUe=o("GPT2Tokenizer"),JUe=o(" or "),aS=a("a"),YUe=o("GPT2TokenizerFast"),KUe=o(" (GPT Neo model)"),ZUe=l(),fs=a("li"),$Z=a("strong"),eJe=o("herbert"),oJe=o(" \u2014 "),nS=a("a"),rJe=o("HerbertTokenizer"),tJe=o(" or "),sS=a("a"),aJe=o("HerbertTokenizerFast"),nJe=o(" (HerBERT model)"),sJe=l(),Ug=a("li"),IZ=a("strong"),lJe=o("hubert"),iJe=o(" \u2014 "),lS=a("a"),dJe=o("Wav2Vec2CTCTokenizer"),cJe=o(" (Hubert model)"),fJe=l(),ms=a("li"),qZ=a("strong"),mJe=o("ibert"),gJe=o(" \u2014 "),iS=a("a"),hJe=o("RobertaTokenizer"),pJe=o(" or "),dS=a("a"),_Je=o("RobertaTokenizerFast"),uJe=o(" (I-BERT model)"),bJe=l(),gs=a("li"),NZ=a("strong"),FJe=o("layoutlm"),vJe=o(" \u2014 "),cS=a("a"),TJe=o("LayoutLMTokenizer"),MJe=o(" or "),fS=a("a"),EJe=o("LayoutLMTokenizerFast"),CJe=o(" (LayoutLM model)"),wJe=l(),hs=a("li"),jZ=a("strong"),AJe=o("layoutlmv2"),yJe=o(" \u2014 "),mS=a("a"),LJe=o("LayoutLMv2Tokenizer"),xJe=o(" or "),gS=a("a"),kJe=o("LayoutLMv2TokenizerFast"),SJe=o(" (LayoutLMv2 model)"),RJe=l(),ps=a("li"),DZ=a("strong"),BJe=o("layoutxlm"),PJe=o(" \u2014 "),hS=a("a"),$Je=o("LayoutXLMTokenizer"),IJe=o(" or "),pS=a("a"),qJe=o("LayoutXLMTokenizerFast"),NJe=o(" (LayoutXLM model)"),jJe=l(),_s=a("li"),GZ=a("strong"),DJe=o("led"),GJe=o(" \u2014 "),_S=a("a"),OJe=o("LEDTokenizer"),VJe=o(" or "),uS=a("a"),XJe=o("LEDTokenizerFast"),zJe=o(" (LED model)"),QJe=l(),us=a("li"),OZ=a("strong"),WJe=o("longformer"),HJe=o(" \u2014 "),bS=a("a"),UJe=o("LongformerTokenizer"),JJe=o(" or "),FS=a("a"),YJe=o("LongformerTokenizerFast"),KJe=o(" (Longformer model)"),ZJe=l(),Jg=a("li"),VZ=a("strong"),eYe=o("luke"),oYe=o(" \u2014 "),vS=a("a"),rYe=o("LukeTokenizer"),tYe=o(" (LUKE model)"),aYe=l(),bs=a("li"),XZ=a("strong"),nYe=o("lxmert"),sYe=o(" \u2014 "),TS=a("a"),lYe=o("LxmertTokenizer"),iYe=o(" or "),MS=a("a"),dYe=o("LxmertTokenizerFast"),cYe=o(" (LXMERT model)"),fYe=l(),Yg=a("li"),zZ=a("strong"),mYe=o("m2m_100"),gYe=o(" \u2014 "),ES=a("a"),hYe=o("M2M100Tokenizer"),pYe=o(" (M2M100 model)"),_Ye=l(),Kg=a("li"),QZ=a("strong"),uYe=o("marian"),bYe=o(" \u2014 "),CS=a("a"),FYe=o("MarianTokenizer"),vYe=o(" (Marian model)"),TYe=l(),Fs=a("li"),WZ=a("strong"),MYe=o("mbart"),EYe=o(" \u2014 "),wS=a("a"),CYe=o("MBartTokenizer"),wYe=o(" or "),AS=a("a"),AYe=o("MBartTokenizerFast"),yYe=o(" (mBART model)"),LYe=l(),vs=a("li"),HZ=a("strong"),xYe=o("mbart50"),kYe=o(" \u2014 "),yS=a("a"),SYe=o("MBart50Tokenizer"),RYe=o(" or "),LS=a("a"),BYe=o("MBart50TokenizerFast"),PYe=o(" (mBART-50 model)"),$Ye=l(),Zg=a("li"),UZ=a("strong"),IYe=o("mluke"),qYe=o(" \u2014 "),xS=a("a"),NYe=o("MLukeTokenizer"),jYe=o(" (mLUKE model)"),DYe=l(),Ts=a("li"),JZ=a("strong"),GYe=o("mobilebert"),OYe=o(" \u2014 "),kS=a("a"),VYe=o("MobileBertTokenizer"),XYe=o(" or "),SS=a("a"),zYe=o("MobileBertTokenizerFast"),QYe=o(" (MobileBERT model)"),WYe=l(),Ms=a("li"),YZ=a("strong"),HYe=o("mpnet"),UYe=o(" \u2014 "),RS=a("a"),JYe=o("MPNetTokenizer"),YYe=o(" or "),BS=a("a"),KYe=o("MPNetTokenizerFast"),ZYe=o(" (MPNet model)"),eKe=l(),Es=a("li"),KZ=a("strong"),oKe=o("mt5"),rKe=o(" \u2014 "),PS=a("a"),tKe=o("MT5Tokenizer"),aKe=o(" or "),$S=a("a"),nKe=o("MT5TokenizerFast"),sKe=o(" (mT5 model)"),lKe=l(),Cs=a("li"),ZZ=a("strong"),iKe=o("openai-gpt"),dKe=o(" \u2014 "),IS=a("a"),cKe=o("OpenAIGPTTokenizer"),fKe=o(" or "),qS=a("a"),mKe=o("OpenAIGPTTokenizerFast"),gKe=o(" (OpenAI GPT model)"),hKe=l(),ws=a("li"),eee=a("strong"),pKe=o("pegasus"),_Ke=o(" \u2014 "),NS=a("a"),uKe=o("PegasusTokenizer"),bKe=o(" or "),jS=a("a"),FKe=o("PegasusTokenizerFast"),vKe=o(" (Pegasus model)"),TKe=l(),eh=a("li"),oee=a("strong"),MKe=o("perceiver"),EKe=o(" \u2014 "),DS=a("a"),CKe=o("PerceiverTokenizer"),wKe=o(" (Perceiver model)"),AKe=l(),oh=a("li"),ree=a("strong"),yKe=o("phobert"),LKe=o(" \u2014 "),GS=a("a"),xKe=o("PhobertTokenizer"),kKe=o(" (PhoBERT model)"),SKe=l(),rh=a("li"),tee=a("strong"),RKe=o("plbart"),BKe=o(" \u2014 "),OS=a("a"),PKe=o("PLBartTokenizer"),$Ke=o(" (PLBart model)"),IKe=l(),th=a("li"),aee=a("strong"),qKe=o("prophetnet"),NKe=o(" \u2014 "),VS=a("a"),jKe=o("ProphetNetTokenizer"),DKe=o(" (ProphetNet model)"),GKe=l(),As=a("li"),nee=a("strong"),OKe=o("qdqbert"),VKe=o(" \u2014 "),XS=a("a"),XKe=o("BertTokenizer"),zKe=o(" or "),zS=a("a"),QKe=o("BertTokenizerFast"),WKe=o(" (QDQBert model)"),HKe=l(),ah=a("li"),see=a("strong"),UKe=o("rag"),JKe=o(" \u2014 "),QS=a("a"),YKe=o("RagTokenizer"),KKe=o(" (RAG model)"),ZKe=l(),ys=a("li"),lee=a("strong"),eZe=o("realm"),oZe=o(" \u2014 "),WS=a("a"),rZe=o("RealmTokenizer"),tZe=o(" or "),HS=a("a"),aZe=o("RealmTokenizerFast"),nZe=o(" (Realm model)"),sZe=l(),Ls=a("li"),iee=a("strong"),lZe=o("reformer"),iZe=o(" \u2014 "),US=a("a"),dZe=o("ReformerTokenizer"),cZe=o(" or "),JS=a("a"),fZe=o("ReformerTokenizerFast"),mZe=o(" (Reformer model)"),gZe=l(),xs=a("li"),dee=a("strong"),hZe=o("rembert"),pZe=o(" \u2014 "),YS=a("a"),_Ze=o("RemBertTokenizer"),uZe=o(" or "),KS=a("a"),bZe=o("RemBertTokenizerFast"),FZe=o(" (RemBERT model)"),vZe=l(),ks=a("li"),cee=a("strong"),TZe=o("retribert"),MZe=o(" \u2014 "),ZS=a("a"),EZe=o("RetriBertTokenizer"),CZe=o(" or "),eR=a("a"),wZe=o("RetriBertTokenizerFast"),AZe=o(" (RetriBERT model)"),yZe=l(),Ss=a("li"),fee=a("strong"),LZe=o("roberta"),xZe=o(" \u2014 "),oR=a("a"),kZe=o("RobertaTokenizer"),SZe=o(" or "),rR=a("a"),RZe=o("RobertaTokenizerFast"),BZe=o(" (RoBERTa model)"),PZe=l(),Rs=a("li"),mee=a("strong"),$Ze=o("roformer"),IZe=o(" \u2014 "),tR=a("a"),qZe=o("RoFormerTokenizer"),NZe=o(" or "),aR=a("a"),jZe=o("RoFormerTokenizerFast"),DZe=o(" (RoFormer model)"),GZe=l(),nh=a("li"),gee=a("strong"),OZe=o("speech_to_text"),VZe=o(" \u2014 "),nR=a("a"),XZe=o("Speech2TextTokenizer"),zZe=o(" (Speech2Text model)"),QZe=l(),sh=a("li"),hee=a("strong"),WZe=o("speech_to_text_2"),HZe=o(" \u2014 "),sR=a("a"),UZe=o("Speech2Text2Tokenizer"),JZe=o(" (Speech2Text2 model)"),YZe=l(),Bs=a("li"),pee=a("strong"),KZe=o("splinter"),ZZe=o(" \u2014 "),lR=a("a"),eeo=o("SplinterTokenizer"),oeo=o(" or "),iR=a("a"),reo=o("SplinterTokenizerFast"),teo=o(" (Splinter model)"),aeo=l(),Ps=a("li"),_ee=a("strong"),neo=o("squeezebert"),seo=o(" \u2014 "),dR=a("a"),leo=o("SqueezeBertTokenizer"),ieo=o(" or "),cR=a("a"),deo=o("SqueezeBertTokenizerFast"),ceo=o(" (SqueezeBERT model)"),feo=l(),$s=a("li"),uee=a("strong"),meo=o("t5"),geo=o(" \u2014 "),fR=a("a"),heo=o("T5Tokenizer"),peo=o(" or "),mR=a("a"),_eo=o("T5TokenizerFast"),ueo=o(" (T5 model)"),beo=l(),lh=a("li"),bee=a("strong"),Feo=o("tapas"),veo=o(" \u2014 "),gR=a("a"),Teo=o("TapasTokenizer"),Meo=o(" (TAPAS model)"),Eeo=l(),ih=a("li"),Fee=a("strong"),Ceo=o("tapex"),weo=o(" \u2014 "),hR=a("a"),Aeo=o("TapexTokenizer"),yeo=o(" (TAPEX model)"),Leo=l(),dh=a("li"),vee=a("strong"),xeo=o("transfo-xl"),keo=o(" \u2014 "),pR=a("a"),Seo=o("TransfoXLTokenizer"),Reo=o(" (Transformer-XL model)"),Beo=l(),ch=a("li"),Tee=a("strong"),Peo=o("wav2vec2"),$eo=o(" \u2014 "),_R=a("a"),Ieo=o("Wav2Vec2CTCTokenizer"),qeo=o(" (Wav2Vec2 model)"),Neo=l(),fh=a("li"),Mee=a("strong"),jeo=o("wav2vec2_phoneme"),Deo=o(" \u2014 "),uR=a("a"),Geo=o("Wav2Vec2PhonemeCTCTokenizer"),Oeo=o(" (Wav2Vec2Phoneme model)"),Veo=l(),Is=a("li"),Eee=a("strong"),Xeo=o("xglm"),zeo=o(" \u2014 "),bR=a("a"),Qeo=o("XGLMTokenizer"),Weo=o(" or "),FR=a("a"),Heo=o("XGLMTokenizerFast"),Ueo=o(" (XGLM model)"),Jeo=l(),mh=a("li"),Cee=a("strong"),Yeo=o("xlm"),Keo=o(" \u2014 "),vR=a("a"),Zeo=o("XLMTokenizer"),eoo=o(" (XLM model)"),ooo=l(),gh=a("li"),wee=a("strong"),roo=o("xlm-prophetnet"),too=o(" \u2014 "),TR=a("a"),aoo=o("XLMProphetNetTokenizer"),noo=o(" (XLMProphetNet model)"),soo=l(),qs=a("li"),Aee=a("strong"),loo=o("xlm-roberta"),ioo=o(" \u2014 "),MR=a("a"),doo=o("XLMRobertaTokenizer"),coo=o(" or "),ER=a("a"),foo=o("XLMRobertaTokenizerFast"),moo=o(" (XLM-RoBERTa model)"),goo=l(),Ns=a("li"),yee=a("strong"),hoo=o("xlnet"),poo=o(" \u2014 "),CR=a("a"),_oo=o("XLNetTokenizer"),uoo=o(" or "),wR=a("a"),boo=o("XLNetTokenizerFast"),Foo=o(" (XLNet model)"),voo=l(),Lee=a("p"),Too=o("Examples:"),Moo=l(),f(qC.$$.fragment),Eoo=l(),hh=a("div"),f(NC.$$.fragment),Coo=l(),xee=a("p"),woo=o("Register a new tokenizer in this mapping."),iRe=l(),Wi=a("h2"),ph=a("a"),kee=a("span"),f(jC.$$.fragment),Aoo=l(),See=a("span"),yoo=o("AutoFeatureExtractor"),dRe=l(),Ho=a("div"),f(DC.$$.fragment),Loo=l(),GC=a("p"),xoo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),AR=a("a"),koo=o("AutoFeatureExtractor.from_pretrained()"),Soo=o(" class method."),Roo=l(),OC=a("p"),Boo=o("This class cannot be instantiated directly using "),Ree=a("code"),Poo=o("__init__()"),$oo=o(" (throws an error)."),Ioo=l(),$e=a("div"),f(VC.$$.fragment),qoo=l(),Bee=a("p"),Noo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),joo=l(),Va=a("p"),Doo=o("The feature extractor class to instantiate is selected based on the "),Pee=a("code"),Goo=o("model_type"),Ooo=o(` property of the config object
(either passed as an argument or loaded from `),$ee=a("code"),Voo=o("pretrained_model_name_or_path"),Xoo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Iee=a("code"),zoo=o("pretrained_model_name_or_path"),Qoo=o(":"),Woo=l(),te=a("ul"),_h=a("li"),qee=a("strong"),Hoo=o("beit"),Uoo=o(" \u2014 "),yR=a("a"),Joo=o("BeitFeatureExtractor"),Yoo=o(" (BEiT model)"),Koo=l(),uh=a("li"),Nee=a("strong"),Zoo=o("clip"),ero=o(" \u2014 "),LR=a("a"),oro=o("CLIPFeatureExtractor"),rro=o(" (CLIP model)"),tro=l(),bh=a("li"),jee=a("strong"),aro=o("convnext"),nro=o(" \u2014 "),xR=a("a"),sro=o("ConvNextFeatureExtractor"),lro=o(" (ConvNext model)"),iro=l(),Fh=a("li"),Dee=a("strong"),dro=o("deit"),cro=o(" \u2014 "),kR=a("a"),fro=o("DeiTFeatureExtractor"),mro=o(" (DeiT model)"),gro=l(),vh=a("li"),Gee=a("strong"),hro=o("detr"),pro=o(" \u2014 "),SR=a("a"),_ro=o("DetrFeatureExtractor"),uro=o(" (DETR model)"),bro=l(),Th=a("li"),Oee=a("strong"),Fro=o("hubert"),vro=o(" \u2014 "),RR=a("a"),Tro=o("Wav2Vec2FeatureExtractor"),Mro=o(" (Hubert model)"),Ero=l(),Mh=a("li"),Vee=a("strong"),Cro=o("layoutlmv2"),wro=o(" \u2014 "),BR=a("a"),Aro=o("LayoutLMv2FeatureExtractor"),yro=o(" (LayoutLMv2 model)"),Lro=l(),Eh=a("li"),Xee=a("strong"),xro=o("maskformer"),kro=o(" \u2014 "),PR=a("a"),Sro=o("MaskFormerFeatureExtractor"),Rro=o(" (MaskFormer model)"),Bro=l(),Ch=a("li"),zee=a("strong"),Pro=o("perceiver"),$ro=o(" \u2014 "),$R=a("a"),Iro=o("PerceiverFeatureExtractor"),qro=o(" (Perceiver model)"),Nro=l(),wh=a("li"),Qee=a("strong"),jro=o("poolformer"),Dro=o(" \u2014 "),IR=a("a"),Gro=o("PoolFormerFeatureExtractor"),Oro=o(" (PoolFormer model)"),Vro=l(),Ah=a("li"),Wee=a("strong"),Xro=o("resnet"),zro=o(" \u2014 "),qR=a("a"),Qro=o("ConvNextFeatureExtractor"),Wro=o(" (ResNet model)"),Hro=l(),yh=a("li"),Hee=a("strong"),Uro=o("segformer"),Jro=o(" \u2014 "),NR=a("a"),Yro=o("SegformerFeatureExtractor"),Kro=o(" (SegFormer model)"),Zro=l(),Lh=a("li"),Uee=a("strong"),eto=o("speech_to_text"),oto=o(" \u2014 "),jR=a("a"),rto=o("Speech2TextFeatureExtractor"),tto=o(" (Speech2Text model)"),ato=l(),xh=a("li"),Jee=a("strong"),nto=o("swin"),sto=o(" \u2014 "),DR=a("a"),lto=o("ViTFeatureExtractor"),ito=o(" (Swin model)"),dto=l(),kh=a("li"),Yee=a("strong"),cto=o("van"),fto=o(" \u2014 "),GR=a("a"),mto=o("ConvNextFeatureExtractor"),gto=o(" (VAN model)"),hto=l(),Sh=a("li"),Kee=a("strong"),pto=o("vit"),_to=o(" \u2014 "),OR=a("a"),uto=o("ViTFeatureExtractor"),bto=o(" (ViT model)"),Fto=l(),Rh=a("li"),Zee=a("strong"),vto=o("vit_mae"),Tto=o(" \u2014 "),VR=a("a"),Mto=o("ViTFeatureExtractor"),Eto=o(" (ViTMAE model)"),Cto=l(),Bh=a("li"),eoe=a("strong"),wto=o("wav2vec2"),Ato=o(" \u2014 "),XR=a("a"),yto=o("Wav2Vec2FeatureExtractor"),Lto=o(" (Wav2Vec2 model)"),xto=l(),f(Ph.$$.fragment),kto=l(),ooe=a("p"),Sto=o("Examples:"),Rto=l(),f(XC.$$.fragment),Bto=l(),$h=a("div"),f(zC.$$.fragment),Pto=l(),roe=a("p"),$to=o("Register a new feature extractor for this class."),cRe=l(),Hi=a("h2"),Ih=a("a"),toe=a("span"),f(QC.$$.fragment),Ito=l(),aoe=a("span"),qto=o("AutoProcessor"),fRe=l(),Uo=a("div"),f(WC.$$.fragment),Nto=l(),HC=a("p"),jto=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),zR=a("a"),Dto=o("AutoProcessor.from_pretrained()"),Gto=o(" class method."),Oto=l(),UC=a("p"),Vto=o("This class cannot be instantiated directly using "),noe=a("code"),Xto=o("__init__()"),zto=o(" (throws an error)."),Qto=l(),Ie=a("div"),f(JC.$$.fragment),Wto=l(),soe=a("p"),Hto=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Uto=l(),Ui=a("p"),Jto=o("The processor class to instantiate is selected based on the "),loe=a("code"),Yto=o("model_type"),Kto=o(` property of the config object (either
passed as an argument or loaded from `),ioe=a("code"),Zto=o("pretrained_model_name_or_path"),eao=o(" if possible):"),oao=l(),ke=a("ul"),qh=a("li"),doe=a("strong"),rao=o("clip"),tao=o(" \u2014 "),QR=a("a"),aao=o("CLIPProcessor"),nao=o(" (CLIP model)"),sao=l(),Nh=a("li"),coe=a("strong"),lao=o("layoutlmv2"),iao=o(" \u2014 "),WR=a("a"),dao=o("LayoutLMv2Processor"),cao=o(" (LayoutLMv2 model)"),fao=l(),jh=a("li"),foe=a("strong"),mao=o("layoutxlm"),gao=o(" \u2014 "),HR=a("a"),hao=o("LayoutXLMProcessor"),pao=o(" (LayoutXLM model)"),_ao=l(),Dh=a("li"),moe=a("strong"),uao=o("speech_to_text"),bao=o(" \u2014 "),UR=a("a"),Fao=o("Speech2TextProcessor"),vao=o(" (Speech2Text model)"),Tao=l(),Gh=a("li"),goe=a("strong"),Mao=o("speech_to_text_2"),Eao=o(" \u2014 "),JR=a("a"),Cao=o("Speech2Text2Processor"),wao=o(" (Speech2Text2 model)"),Aao=l(),Oh=a("li"),hoe=a("strong"),yao=o("trocr"),Lao=o(" \u2014 "),YR=a("a"),xao=o("TrOCRProcessor"),kao=o(" (TrOCR model)"),Sao=l(),Vh=a("li"),poe=a("strong"),Rao=o("vision-text-dual-encoder"),Bao=o(" \u2014 "),KR=a("a"),Pao=o("VisionTextDualEncoderProcessor"),$ao=o(" (VisionTextDualEncoder model)"),Iao=l(),Xh=a("li"),_oe=a("strong"),qao=o("wav2vec2"),Nao=o(" \u2014 "),ZR=a("a"),jao=o("Wav2Vec2Processor"),Dao=o(" (Wav2Vec2 model)"),Gao=l(),f(zh.$$.fragment),Oao=l(),uoe=a("p"),Vao=o("Examples:"),Xao=l(),f(YC.$$.fragment),zao=l(),Qh=a("div"),f(KC.$$.fragment),Qao=l(),boe=a("p"),Wao=o("Register a new processor for this class."),mRe=l(),Ji=a("h2"),Wh=a("a"),Foe=a("span"),f(ZC.$$.fragment),Hao=l(),voe=a("span"),Uao=o("AutoModel"),gRe=l(),Jo=a("div"),f(e5.$$.fragment),Jao=l(),Yi=a("p"),Yao=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),eB=a("a"),Kao=o("from_pretrained()"),Zao=o(" class method or the "),oB=a("a"),eno=o("from_config()"),ono=o(` class
method.`),rno=l(),o5=a("p"),tno=o("This class cannot be instantiated directly using "),Toe=a("code"),ano=o("__init__()"),nno=o(" (throws an error)."),sno=l(),Xr=a("div"),f(r5.$$.fragment),lno=l(),Moe=a("p"),ino=o("Instantiates one of the base model classes of the library from a configuration."),dno=l(),Ki=a("p"),cno=o(`Note:
Loading a model from its configuration file does `),Eoe=a("strong"),fno=o("not"),mno=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rB=a("a"),gno=o("from_pretrained()"),hno=o(" to load the model weights."),pno=l(),Coe=a("p"),_no=o("Examples:"),uno=l(),f(t5.$$.fragment),bno=l(),qe=a("div"),f(a5.$$.fragment),Fno=l(),woe=a("p"),vno=o("Instantiate one of the base model classes of the library from a pretrained model."),Tno=l(),Xa=a("p"),Mno=o("The model class to instantiate is selected based on the "),Aoe=a("code"),Eno=o("model_type"),Cno=o(` property of the config object (either
passed as an argument or loaded from `),yoe=a("code"),wno=o("pretrained_model_name_or_path"),Ano=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Loe=a("code"),yno=o("pretrained_model_name_or_path"),Lno=o(":"),xno=l(),T=a("ul"),Hh=a("li"),xoe=a("strong"),kno=o("albert"),Sno=o(" \u2014 "),tB=a("a"),Rno=o("AlbertModel"),Bno=o(" (ALBERT model)"),Pno=l(),Uh=a("li"),koe=a("strong"),$no=o("bart"),Ino=o(" \u2014 "),aB=a("a"),qno=o("BartModel"),Nno=o(" (BART model)"),jno=l(),Jh=a("li"),Soe=a("strong"),Dno=o("beit"),Gno=o(" \u2014 "),nB=a("a"),Ono=o("BeitModel"),Vno=o(" (BEiT model)"),Xno=l(),Yh=a("li"),Roe=a("strong"),zno=o("bert"),Qno=o(" \u2014 "),sB=a("a"),Wno=o("BertModel"),Hno=o(" (BERT model)"),Uno=l(),Kh=a("li"),Boe=a("strong"),Jno=o("bert-generation"),Yno=o(" \u2014 "),lB=a("a"),Kno=o("BertGenerationEncoder"),Zno=o(" (Bert Generation model)"),eso=l(),Zh=a("li"),Poe=a("strong"),oso=o("big_bird"),rso=o(" \u2014 "),iB=a("a"),tso=o("BigBirdModel"),aso=o(" (BigBird model)"),nso=l(),ep=a("li"),$oe=a("strong"),sso=o("bigbird_pegasus"),lso=o(" \u2014 "),dB=a("a"),iso=o("BigBirdPegasusModel"),dso=o(" (BigBirdPegasus model)"),cso=l(),op=a("li"),Ioe=a("strong"),fso=o("blenderbot"),mso=o(" \u2014 "),cB=a("a"),gso=o("BlenderbotModel"),hso=o(" (Blenderbot model)"),pso=l(),rp=a("li"),qoe=a("strong"),_so=o("blenderbot-small"),uso=o(" \u2014 "),fB=a("a"),bso=o("BlenderbotSmallModel"),Fso=o(" (BlenderbotSmall model)"),vso=l(),tp=a("li"),Noe=a("strong"),Tso=o("camembert"),Mso=o(" \u2014 "),mB=a("a"),Eso=o("CamembertModel"),Cso=o(" (CamemBERT model)"),wso=l(),ap=a("li"),joe=a("strong"),Aso=o("canine"),yso=o(" \u2014 "),gB=a("a"),Lso=o("CanineModel"),xso=o(" (Canine model)"),kso=l(),np=a("li"),Doe=a("strong"),Sso=o("clip"),Rso=o(" \u2014 "),hB=a("a"),Bso=o("CLIPModel"),Pso=o(" (CLIP model)"),$so=l(),sp=a("li"),Goe=a("strong"),Iso=o("convbert"),qso=o(" \u2014 "),pB=a("a"),Nso=o("ConvBertModel"),jso=o(" (ConvBERT model)"),Dso=l(),lp=a("li"),Ooe=a("strong"),Gso=o("convnext"),Oso=o(" \u2014 "),_B=a("a"),Vso=o("ConvNextModel"),Xso=o(" (ConvNext model)"),zso=l(),ip=a("li"),Voe=a("strong"),Qso=o("ctrl"),Wso=o(" \u2014 "),uB=a("a"),Hso=o("CTRLModel"),Uso=o(" (CTRL model)"),Jso=l(),dp=a("li"),Xoe=a("strong"),Yso=o("data2vec-audio"),Kso=o(" \u2014 "),bB=a("a"),Zso=o("Data2VecAudioModel"),elo=o(" (Data2VecAudio model)"),olo=l(),cp=a("li"),zoe=a("strong"),rlo=o("data2vec-text"),tlo=o(" \u2014 "),FB=a("a"),alo=o("Data2VecTextModel"),nlo=o(" (Data2VecText model)"),slo=l(),fp=a("li"),Qoe=a("strong"),llo=o("deberta"),ilo=o(" \u2014 "),vB=a("a"),dlo=o("DebertaModel"),clo=o(" (DeBERTa model)"),flo=l(),mp=a("li"),Woe=a("strong"),mlo=o("deberta-v2"),glo=o(" \u2014 "),TB=a("a"),hlo=o("DebertaV2Model"),plo=o(" (DeBERTa-v2 model)"),_lo=l(),gp=a("li"),Hoe=a("strong"),ulo=o("decision_transformer"),blo=o(" \u2014 "),MB=a("a"),Flo=o("DecisionTransformerModel"),vlo=o(" (Decision Transformer model)"),Tlo=l(),hp=a("li"),Uoe=a("strong"),Mlo=o("deit"),Elo=o(" \u2014 "),EB=a("a"),Clo=o("DeiTModel"),wlo=o(" (DeiT model)"),Alo=l(),pp=a("li"),Joe=a("strong"),ylo=o("detr"),Llo=o(" \u2014 "),CB=a("a"),xlo=o("DetrModel"),klo=o(" (DETR model)"),Slo=l(),_p=a("li"),Yoe=a("strong"),Rlo=o("distilbert"),Blo=o(" \u2014 "),wB=a("a"),Plo=o("DistilBertModel"),$lo=o(" (DistilBERT model)"),Ilo=l(),up=a("li"),Koe=a("strong"),qlo=o("dpr"),Nlo=o(" \u2014 "),AB=a("a"),jlo=o("DPRQuestionEncoder"),Dlo=o(" (DPR model)"),Glo=l(),bp=a("li"),Zoe=a("strong"),Olo=o("dpt"),Vlo=o(" \u2014 "),yB=a("a"),Xlo=o("DPTModel"),zlo=o(" (DPT model)"),Qlo=l(),Fp=a("li"),ere=a("strong"),Wlo=o("electra"),Hlo=o(" \u2014 "),LB=a("a"),Ulo=o("ElectraModel"),Jlo=o(" (ELECTRA model)"),Ylo=l(),vp=a("li"),ore=a("strong"),Klo=o("flaubert"),Zlo=o(" \u2014 "),xB=a("a"),eio=o("FlaubertModel"),oio=o(" (FlauBERT model)"),rio=l(),Tp=a("li"),rre=a("strong"),tio=o("fnet"),aio=o(" \u2014 "),kB=a("a"),nio=o("FNetModel"),sio=o(" (FNet model)"),lio=l(),Mp=a("li"),tre=a("strong"),iio=o("fsmt"),dio=o(" \u2014 "),SB=a("a"),cio=o("FSMTModel"),fio=o(" (FairSeq Machine-Translation model)"),mio=l(),js=a("li"),are=a("strong"),gio=o("funnel"),hio=o(" \u2014 "),RB=a("a"),pio=o("FunnelModel"),_io=o(" or "),BB=a("a"),uio=o("FunnelBaseModel"),bio=o(" (Funnel Transformer model)"),Fio=l(),Ep=a("li"),nre=a("strong"),vio=o("glpn"),Tio=o(" \u2014 "),PB=a("a"),Mio=o("GLPNModel"),Eio=o(" (GLPN model)"),Cio=l(),Cp=a("li"),sre=a("strong"),wio=o("gpt2"),Aio=o(" \u2014 "),$B=a("a"),yio=o("GPT2Model"),Lio=o(" (OpenAI GPT-2 model)"),xio=l(),wp=a("li"),lre=a("strong"),kio=o("gpt_neo"),Sio=o(" \u2014 "),IB=a("a"),Rio=o("GPTNeoModel"),Bio=o(" (GPT Neo model)"),Pio=l(),Ap=a("li"),ire=a("strong"),$io=o("gptj"),Iio=o(" \u2014 "),qB=a("a"),qio=o("GPTJModel"),Nio=o(" (GPT-J model)"),jio=l(),yp=a("li"),dre=a("strong"),Dio=o("hubert"),Gio=o(" \u2014 "),NB=a("a"),Oio=o("HubertModel"),Vio=o(" (Hubert model)"),Xio=l(),Lp=a("li"),cre=a("strong"),zio=o("ibert"),Qio=o(" \u2014 "),jB=a("a"),Wio=o("IBertModel"),Hio=o(" (I-BERT model)"),Uio=l(),xp=a("li"),fre=a("strong"),Jio=o("imagegpt"),Yio=o(" \u2014 "),DB=a("a"),Kio=o("ImageGPTModel"),Zio=o(" (ImageGPT model)"),edo=l(),kp=a("li"),mre=a("strong"),odo=o("layoutlm"),rdo=o(" \u2014 "),GB=a("a"),tdo=o("LayoutLMModel"),ado=o(" (LayoutLM model)"),ndo=l(),Sp=a("li"),gre=a("strong"),sdo=o("layoutlmv2"),ldo=o(" \u2014 "),OB=a("a"),ido=o("LayoutLMv2Model"),ddo=o(" (LayoutLMv2 model)"),cdo=l(),Rp=a("li"),hre=a("strong"),fdo=o("led"),mdo=o(" \u2014 "),VB=a("a"),gdo=o("LEDModel"),hdo=o(" (LED model)"),pdo=l(),Bp=a("li"),pre=a("strong"),_do=o("longformer"),udo=o(" \u2014 "),XB=a("a"),bdo=o("LongformerModel"),Fdo=o(" (Longformer model)"),vdo=l(),Pp=a("li"),_re=a("strong"),Tdo=o("luke"),Mdo=o(" \u2014 "),zB=a("a"),Edo=o("LukeModel"),Cdo=o(" (LUKE model)"),wdo=l(),$p=a("li"),ure=a("strong"),Ado=o("lxmert"),ydo=o(" \u2014 "),QB=a("a"),Ldo=o("LxmertModel"),xdo=o(" (LXMERT model)"),kdo=l(),Ip=a("li"),bre=a("strong"),Sdo=o("m2m_100"),Rdo=o(" \u2014 "),WB=a("a"),Bdo=o("M2M100Model"),Pdo=o(" (M2M100 model)"),$do=l(),qp=a("li"),Fre=a("strong"),Ido=o("marian"),qdo=o(" \u2014 "),HB=a("a"),Ndo=o("MarianModel"),jdo=o(" (Marian model)"),Ddo=l(),Np=a("li"),vre=a("strong"),Gdo=o("maskformer"),Odo=o(" \u2014 "),UB=a("a"),Vdo=o("MaskFormerModel"),Xdo=o(" (MaskFormer model)"),zdo=l(),jp=a("li"),Tre=a("strong"),Qdo=o("mbart"),Wdo=o(" \u2014 "),JB=a("a"),Hdo=o("MBartModel"),Udo=o(" (mBART model)"),Jdo=l(),Dp=a("li"),Mre=a("strong"),Ydo=o("megatron-bert"),Kdo=o(" \u2014 "),YB=a("a"),Zdo=o("MegatronBertModel"),eco=o(" (MegatronBert model)"),oco=l(),Gp=a("li"),Ere=a("strong"),rco=o("mobilebert"),tco=o(" \u2014 "),KB=a("a"),aco=o("MobileBertModel"),nco=o(" (MobileBERT model)"),sco=l(),Op=a("li"),Cre=a("strong"),lco=o("mpnet"),ico=o(" \u2014 "),ZB=a("a"),dco=o("MPNetModel"),cco=o(" (MPNet model)"),fco=l(),Vp=a("li"),wre=a("strong"),mco=o("mt5"),gco=o(" \u2014 "),eP=a("a"),hco=o("MT5Model"),pco=o(" (mT5 model)"),_co=l(),Xp=a("li"),Are=a("strong"),uco=o("nystromformer"),bco=o(" \u2014 "),oP=a("a"),Fco=o("NystromformerModel"),vco=o(" (Nystromformer model)"),Tco=l(),zp=a("li"),yre=a("strong"),Mco=o("openai-gpt"),Eco=o(" \u2014 "),rP=a("a"),Cco=o("OpenAIGPTModel"),wco=o(" (OpenAI GPT model)"),Aco=l(),Qp=a("li"),Lre=a("strong"),yco=o("pegasus"),Lco=o(" \u2014 "),tP=a("a"),xco=o("PegasusModel"),kco=o(" (Pegasus model)"),Sco=l(),Wp=a("li"),xre=a("strong"),Rco=o("perceiver"),Bco=o(" \u2014 "),aP=a("a"),Pco=o("PerceiverModel"),$co=o(" (Perceiver model)"),Ico=l(),Hp=a("li"),kre=a("strong"),qco=o("plbart"),Nco=o(" \u2014 "),nP=a("a"),jco=o("PLBartModel"),Dco=o(" (PLBart model)"),Gco=l(),Up=a("li"),Sre=a("strong"),Oco=o("poolformer"),Vco=o(" \u2014 "),sP=a("a"),Xco=o("PoolFormerModel"),zco=o(" (PoolFormer model)"),Qco=l(),Jp=a("li"),Rre=a("strong"),Wco=o("prophetnet"),Hco=o(" \u2014 "),lP=a("a"),Uco=o("ProphetNetModel"),Jco=o(" (ProphetNet model)"),Yco=l(),Yp=a("li"),Bre=a("strong"),Kco=o("qdqbert"),Zco=o(" \u2014 "),iP=a("a"),efo=o("QDQBertModel"),ofo=o(" (QDQBert model)"),rfo=l(),Kp=a("li"),Pre=a("strong"),tfo=o("reformer"),afo=o(" \u2014 "),dP=a("a"),nfo=o("ReformerModel"),sfo=o(" (Reformer model)"),lfo=l(),Zp=a("li"),$re=a("strong"),ifo=o("rembert"),dfo=o(" \u2014 "),cP=a("a"),cfo=o("RemBertModel"),ffo=o(" (RemBERT model)"),mfo=l(),e_=a("li"),Ire=a("strong"),gfo=o("resnet"),hfo=o(" \u2014 "),fP=a("a"),pfo=o("ResNetModel"),_fo=o(" (ResNet model)"),ufo=l(),o_=a("li"),qre=a("strong"),bfo=o("retribert"),Ffo=o(" \u2014 "),mP=a("a"),vfo=o("RetriBertModel"),Tfo=o(" (RetriBERT model)"),Mfo=l(),r_=a("li"),Nre=a("strong"),Efo=o("roberta"),Cfo=o(" \u2014 "),gP=a("a"),wfo=o("RobertaModel"),Afo=o(" (RoBERTa model)"),yfo=l(),t_=a("li"),jre=a("strong"),Lfo=o("roformer"),xfo=o(" \u2014 "),hP=a("a"),kfo=o("RoFormerModel"),Sfo=o(" (RoFormer model)"),Rfo=l(),a_=a("li"),Dre=a("strong"),Bfo=o("segformer"),Pfo=o(" \u2014 "),pP=a("a"),$fo=o("SegformerModel"),Ifo=o(" (SegFormer model)"),qfo=l(),n_=a("li"),Gre=a("strong"),Nfo=o("sew"),jfo=o(" \u2014 "),_P=a("a"),Dfo=o("SEWModel"),Gfo=o(" (SEW model)"),Ofo=l(),s_=a("li"),Ore=a("strong"),Vfo=o("sew-d"),Xfo=o(" \u2014 "),uP=a("a"),zfo=o("SEWDModel"),Qfo=o(" (SEW-D model)"),Wfo=l(),l_=a("li"),Vre=a("strong"),Hfo=o("speech_to_text"),Ufo=o(" \u2014 "),bP=a("a"),Jfo=o("Speech2TextModel"),Yfo=o(" (Speech2Text model)"),Kfo=l(),i_=a("li"),Xre=a("strong"),Zfo=o("splinter"),emo=o(" \u2014 "),FP=a("a"),omo=o("SplinterModel"),rmo=o(" (Splinter model)"),tmo=l(),d_=a("li"),zre=a("strong"),amo=o("squeezebert"),nmo=o(" \u2014 "),vP=a("a"),smo=o("SqueezeBertModel"),lmo=o(" (SqueezeBERT model)"),imo=l(),c_=a("li"),Qre=a("strong"),dmo=o("swin"),cmo=o(" \u2014 "),TP=a("a"),fmo=o("SwinModel"),mmo=o(" (Swin model)"),gmo=l(),f_=a("li"),Wre=a("strong"),hmo=o("t5"),pmo=o(" \u2014 "),MP=a("a"),_mo=o("T5Model"),umo=o(" (T5 model)"),bmo=l(),m_=a("li"),Hre=a("strong"),Fmo=o("tapas"),vmo=o(" \u2014 "),EP=a("a"),Tmo=o("TapasModel"),Mmo=o(" (TAPAS model)"),Emo=l(),g_=a("li"),Ure=a("strong"),Cmo=o("transfo-xl"),wmo=o(" \u2014 "),CP=a("a"),Amo=o("TransfoXLModel"),ymo=o(" (Transformer-XL model)"),Lmo=l(),h_=a("li"),Jre=a("strong"),xmo=o("unispeech"),kmo=o(" \u2014 "),wP=a("a"),Smo=o("UniSpeechModel"),Rmo=o(" (UniSpeech model)"),Bmo=l(),p_=a("li"),Yre=a("strong"),Pmo=o("unispeech-sat"),$mo=o(" \u2014 "),AP=a("a"),Imo=o("UniSpeechSatModel"),qmo=o(" (UniSpeechSat model)"),Nmo=l(),__=a("li"),Kre=a("strong"),jmo=o("van"),Dmo=o(" \u2014 "),yP=a("a"),Gmo=o("VanModel"),Omo=o(" (VAN model)"),Vmo=l(),u_=a("li"),Zre=a("strong"),Xmo=o("vilt"),zmo=o(" \u2014 "),LP=a("a"),Qmo=o("ViltModel"),Wmo=o(" (ViLT model)"),Hmo=l(),b_=a("li"),ete=a("strong"),Umo=o("vision-text-dual-encoder"),Jmo=o(" \u2014 "),xP=a("a"),Ymo=o("VisionTextDualEncoderModel"),Kmo=o(" (VisionTextDualEncoder model)"),Zmo=l(),F_=a("li"),ote=a("strong"),ego=o("visual_bert"),ogo=o(" \u2014 "),kP=a("a"),rgo=o("VisualBertModel"),tgo=o(" (VisualBert model)"),ago=l(),v_=a("li"),rte=a("strong"),ngo=o("vit"),sgo=o(" \u2014 "),SP=a("a"),lgo=o("ViTModel"),igo=o(" (ViT model)"),dgo=l(),T_=a("li"),tte=a("strong"),cgo=o("vit_mae"),fgo=o(" \u2014 "),RP=a("a"),mgo=o("ViTMAEModel"),ggo=o(" (ViTMAE model)"),hgo=l(),M_=a("li"),ate=a("strong"),pgo=o("wav2vec2"),_go=o(" \u2014 "),BP=a("a"),ugo=o("Wav2Vec2Model"),bgo=o(" (Wav2Vec2 model)"),Fgo=l(),E_=a("li"),nte=a("strong"),vgo=o("wavlm"),Tgo=o(" \u2014 "),PP=a("a"),Mgo=o("WavLMModel"),Ego=o(" (WavLM model)"),Cgo=l(),C_=a("li"),ste=a("strong"),wgo=o("xglm"),Ago=o(" \u2014 "),$P=a("a"),ygo=o("XGLMModel"),Lgo=o(" (XGLM model)"),xgo=l(),w_=a("li"),lte=a("strong"),kgo=o("xlm"),Sgo=o(" \u2014 "),IP=a("a"),Rgo=o("XLMModel"),Bgo=o(" (XLM model)"),Pgo=l(),A_=a("li"),ite=a("strong"),$go=o("xlm-prophetnet"),Igo=o(" \u2014 "),qP=a("a"),qgo=o("XLMProphetNetModel"),Ngo=o(" (XLMProphetNet model)"),jgo=l(),y_=a("li"),dte=a("strong"),Dgo=o("xlm-roberta"),Ggo=o(" \u2014 "),NP=a("a"),Ogo=o("XLMRobertaModel"),Vgo=o(" (XLM-RoBERTa model)"),Xgo=l(),L_=a("li"),cte=a("strong"),zgo=o("xlm-roberta-xl"),Qgo=o(" \u2014 "),jP=a("a"),Wgo=o("XLMRobertaXLModel"),Hgo=o(" (XLM-RoBERTa-XL model)"),Ugo=l(),x_=a("li"),fte=a("strong"),Jgo=o("xlnet"),Ygo=o(" \u2014 "),DP=a("a"),Kgo=o("XLNetModel"),Zgo=o(" (XLNet model)"),eho=l(),k_=a("li"),mte=a("strong"),oho=o("yoso"),rho=o(" \u2014 "),GP=a("a"),tho=o("YosoModel"),aho=o(" (YOSO model)"),nho=l(),S_=a("p"),sho=o("The model is set in evaluation mode by default using "),gte=a("code"),lho=o("model.eval()"),iho=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hte=a("code"),dho=o("model.train()"),cho=l(),pte=a("p"),fho=o("Examples:"),mho=l(),f(n5.$$.fragment),hRe=l(),Zi=a("h2"),R_=a("a"),_te=a("span"),f(s5.$$.fragment),gho=l(),ute=a("span"),hho=o("AutoModelForPreTraining"),pRe=l(),Yo=a("div"),f(l5.$$.fragment),pho=l(),ed=a("p"),_ho=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),OP=a("a"),uho=o("from_pretrained()"),bho=o(" class method or the "),VP=a("a"),Fho=o("from_config()"),vho=o(` class
method.`),Tho=l(),i5=a("p"),Mho=o("This class cannot be instantiated directly using "),bte=a("code"),Eho=o("__init__()"),Cho=o(" (throws an error)."),who=l(),zr=a("div"),f(d5.$$.fragment),Aho=l(),Fte=a("p"),yho=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Lho=l(),od=a("p"),xho=o(`Note:
Loading a model from its configuration file does `),vte=a("strong"),kho=o("not"),Sho=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XP=a("a"),Rho=o("from_pretrained()"),Bho=o(" to load the model weights."),Pho=l(),Tte=a("p"),$ho=o("Examples:"),Iho=l(),f(c5.$$.fragment),qho=l(),Ne=a("div"),f(f5.$$.fragment),Nho=l(),Mte=a("p"),jho=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Dho=l(),za=a("p"),Gho=o("The model class to instantiate is selected based on the "),Ete=a("code"),Oho=o("model_type"),Vho=o(` property of the config object (either
passed as an argument or loaded from `),Cte=a("code"),Xho=o("pretrained_model_name_or_path"),zho=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wte=a("code"),Qho=o("pretrained_model_name_or_path"),Who=o(":"),Hho=l(),S=a("ul"),B_=a("li"),Ate=a("strong"),Uho=o("albert"),Jho=o(" \u2014 "),zP=a("a"),Yho=o("AlbertForPreTraining"),Kho=o(" (ALBERT model)"),Zho=l(),P_=a("li"),yte=a("strong"),epo=o("bart"),opo=o(" \u2014 "),QP=a("a"),rpo=o("BartForConditionalGeneration"),tpo=o(" (BART model)"),apo=l(),$_=a("li"),Lte=a("strong"),npo=o("bert"),spo=o(" \u2014 "),WP=a("a"),lpo=o("BertForPreTraining"),ipo=o(" (BERT model)"),dpo=l(),I_=a("li"),xte=a("strong"),cpo=o("big_bird"),fpo=o(" \u2014 "),HP=a("a"),mpo=o("BigBirdForPreTraining"),gpo=o(" (BigBird model)"),hpo=l(),q_=a("li"),kte=a("strong"),ppo=o("camembert"),_po=o(" \u2014 "),UP=a("a"),upo=o("CamembertForMaskedLM"),bpo=o(" (CamemBERT model)"),Fpo=l(),N_=a("li"),Ste=a("strong"),vpo=o("ctrl"),Tpo=o(" \u2014 "),JP=a("a"),Mpo=o("CTRLLMHeadModel"),Epo=o(" (CTRL model)"),Cpo=l(),j_=a("li"),Rte=a("strong"),wpo=o("data2vec-text"),Apo=o(" \u2014 "),YP=a("a"),ypo=o("Data2VecTextForMaskedLM"),Lpo=o(" (Data2VecText model)"),xpo=l(),D_=a("li"),Bte=a("strong"),kpo=o("deberta"),Spo=o(" \u2014 "),KP=a("a"),Rpo=o("DebertaForMaskedLM"),Bpo=o(" (DeBERTa model)"),Ppo=l(),G_=a("li"),Pte=a("strong"),$po=o("deberta-v2"),Ipo=o(" \u2014 "),ZP=a("a"),qpo=o("DebertaV2ForMaskedLM"),Npo=o(" (DeBERTa-v2 model)"),jpo=l(),O_=a("li"),$te=a("strong"),Dpo=o("distilbert"),Gpo=o(" \u2014 "),e$=a("a"),Opo=o("DistilBertForMaskedLM"),Vpo=o(" (DistilBERT model)"),Xpo=l(),V_=a("li"),Ite=a("strong"),zpo=o("electra"),Qpo=o(" \u2014 "),o$=a("a"),Wpo=o("ElectraForPreTraining"),Hpo=o(" (ELECTRA model)"),Upo=l(),X_=a("li"),qte=a("strong"),Jpo=o("flaubert"),Ypo=o(" \u2014 "),r$=a("a"),Kpo=o("FlaubertWithLMHeadModel"),Zpo=o(" (FlauBERT model)"),e_o=l(),z_=a("li"),Nte=a("strong"),o_o=o("fnet"),r_o=o(" \u2014 "),t$=a("a"),t_o=o("FNetForPreTraining"),a_o=o(" (FNet model)"),n_o=l(),Q_=a("li"),jte=a("strong"),s_o=o("fsmt"),l_o=o(" \u2014 "),a$=a("a"),i_o=o("FSMTForConditionalGeneration"),d_o=o(" (FairSeq Machine-Translation model)"),c_o=l(),W_=a("li"),Dte=a("strong"),f_o=o("funnel"),m_o=o(" \u2014 "),n$=a("a"),g_o=o("FunnelForPreTraining"),h_o=o(" (Funnel Transformer model)"),p_o=l(),H_=a("li"),Gte=a("strong"),__o=o("gpt2"),u_o=o(" \u2014 "),s$=a("a"),b_o=o("GPT2LMHeadModel"),F_o=o(" (OpenAI GPT-2 model)"),v_o=l(),U_=a("li"),Ote=a("strong"),T_o=o("ibert"),M_o=o(" \u2014 "),l$=a("a"),E_o=o("IBertForMaskedLM"),C_o=o(" (I-BERT model)"),w_o=l(),J_=a("li"),Vte=a("strong"),A_o=o("layoutlm"),y_o=o(" \u2014 "),i$=a("a"),L_o=o("LayoutLMForMaskedLM"),x_o=o(" (LayoutLM model)"),k_o=l(),Y_=a("li"),Xte=a("strong"),S_o=o("longformer"),R_o=o(" \u2014 "),d$=a("a"),B_o=o("LongformerForMaskedLM"),P_o=o(" (Longformer model)"),$_o=l(),K_=a("li"),zte=a("strong"),I_o=o("lxmert"),q_o=o(" \u2014 "),c$=a("a"),N_o=o("LxmertForPreTraining"),j_o=o(" (LXMERT model)"),D_o=l(),Z_=a("li"),Qte=a("strong"),G_o=o("megatron-bert"),O_o=o(" \u2014 "),f$=a("a"),V_o=o("MegatronBertForPreTraining"),X_o=o(" (MegatronBert model)"),z_o=l(),eu=a("li"),Wte=a("strong"),Q_o=o("mobilebert"),W_o=o(" \u2014 "),m$=a("a"),H_o=o("MobileBertForPreTraining"),U_o=o(" (MobileBERT model)"),J_o=l(),ou=a("li"),Hte=a("strong"),Y_o=o("mpnet"),K_o=o(" \u2014 "),g$=a("a"),Z_o=o("MPNetForMaskedLM"),euo=o(" (MPNet model)"),ouo=l(),ru=a("li"),Ute=a("strong"),ruo=o("openai-gpt"),tuo=o(" \u2014 "),h$=a("a"),auo=o("OpenAIGPTLMHeadModel"),nuo=o(" (OpenAI GPT model)"),suo=l(),tu=a("li"),Jte=a("strong"),luo=o("retribert"),iuo=o(" \u2014 "),p$=a("a"),duo=o("RetriBertModel"),cuo=o(" (RetriBERT model)"),fuo=l(),au=a("li"),Yte=a("strong"),muo=o("roberta"),guo=o(" \u2014 "),_$=a("a"),huo=o("RobertaForMaskedLM"),puo=o(" (RoBERTa model)"),_uo=l(),nu=a("li"),Kte=a("strong"),uuo=o("squeezebert"),buo=o(" \u2014 "),u$=a("a"),Fuo=o("SqueezeBertForMaskedLM"),vuo=o(" (SqueezeBERT model)"),Tuo=l(),su=a("li"),Zte=a("strong"),Muo=o("t5"),Euo=o(" \u2014 "),b$=a("a"),Cuo=o("T5ForConditionalGeneration"),wuo=o(" (T5 model)"),Auo=l(),lu=a("li"),eae=a("strong"),yuo=o("tapas"),Luo=o(" \u2014 "),F$=a("a"),xuo=o("TapasForMaskedLM"),kuo=o(" (TAPAS model)"),Suo=l(),iu=a("li"),oae=a("strong"),Ruo=o("transfo-xl"),Buo=o(" \u2014 "),v$=a("a"),Puo=o("TransfoXLLMHeadModel"),$uo=o(" (Transformer-XL model)"),Iuo=l(),du=a("li"),rae=a("strong"),quo=o("unispeech"),Nuo=o(" \u2014 "),T$=a("a"),juo=o("UniSpeechForPreTraining"),Duo=o(" (UniSpeech model)"),Guo=l(),cu=a("li"),tae=a("strong"),Ouo=o("unispeech-sat"),Vuo=o(" \u2014 "),M$=a("a"),Xuo=o("UniSpeechSatForPreTraining"),zuo=o(" (UniSpeechSat model)"),Quo=l(),fu=a("li"),aae=a("strong"),Wuo=o("visual_bert"),Huo=o(" \u2014 "),E$=a("a"),Uuo=o("VisualBertForPreTraining"),Juo=o(" (VisualBert model)"),Yuo=l(),mu=a("li"),nae=a("strong"),Kuo=o("vit_mae"),Zuo=o(" \u2014 "),C$=a("a"),e1o=o("ViTMAEForPreTraining"),o1o=o(" (ViTMAE model)"),r1o=l(),gu=a("li"),sae=a("strong"),t1o=o("wav2vec2"),a1o=o(" \u2014 "),w$=a("a"),n1o=o("Wav2Vec2ForPreTraining"),s1o=o(" (Wav2Vec2 model)"),l1o=l(),hu=a("li"),lae=a("strong"),i1o=o("xlm"),d1o=o(" \u2014 "),A$=a("a"),c1o=o("XLMWithLMHeadModel"),f1o=o(" (XLM model)"),m1o=l(),pu=a("li"),iae=a("strong"),g1o=o("xlm-roberta"),h1o=o(" \u2014 "),y$=a("a"),p1o=o("XLMRobertaForMaskedLM"),_1o=o(" (XLM-RoBERTa model)"),u1o=l(),_u=a("li"),dae=a("strong"),b1o=o("xlm-roberta-xl"),F1o=o(" \u2014 "),L$=a("a"),v1o=o("XLMRobertaXLForMaskedLM"),T1o=o(" (XLM-RoBERTa-XL model)"),M1o=l(),uu=a("li"),cae=a("strong"),E1o=o("xlnet"),C1o=o(" \u2014 "),x$=a("a"),w1o=o("XLNetLMHeadModel"),A1o=o(" (XLNet model)"),y1o=l(),bu=a("p"),L1o=o("The model is set in evaluation mode by default using "),fae=a("code"),x1o=o("model.eval()"),k1o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mae=a("code"),S1o=o("model.train()"),R1o=l(),gae=a("p"),B1o=o("Examples:"),P1o=l(),f(m5.$$.fragment),_Re=l(),rd=a("h2"),Fu=a("a"),hae=a("span"),f(g5.$$.fragment),$1o=l(),pae=a("span"),I1o=o("AutoModelForCausalLM"),uRe=l(),Ko=a("div"),f(h5.$$.fragment),q1o=l(),td=a("p"),N1o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),k$=a("a"),j1o=o("from_pretrained()"),D1o=o(" class method or the "),S$=a("a"),G1o=o("from_config()"),O1o=o(` class
method.`),V1o=l(),p5=a("p"),X1o=o("This class cannot be instantiated directly using "),_ae=a("code"),z1o=o("__init__()"),Q1o=o(" (throws an error)."),W1o=l(),Qr=a("div"),f(_5.$$.fragment),H1o=l(),uae=a("p"),U1o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),J1o=l(),ad=a("p"),Y1o=o(`Note:
Loading a model from its configuration file does `),bae=a("strong"),K1o=o("not"),Z1o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),R$=a("a"),e4o=o("from_pretrained()"),o4o=o(" to load the model weights."),r4o=l(),Fae=a("p"),t4o=o("Examples:"),a4o=l(),f(u5.$$.fragment),n4o=l(),je=a("div"),f(b5.$$.fragment),s4o=l(),vae=a("p"),l4o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),i4o=l(),Qa=a("p"),d4o=o("The model class to instantiate is selected based on the "),Tae=a("code"),c4o=o("model_type"),f4o=o(` property of the config object (either
passed as an argument or loaded from `),Mae=a("code"),m4o=o("pretrained_model_name_or_path"),g4o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Eae=a("code"),h4o=o("pretrained_model_name_or_path"),p4o=o(":"),_4o=l(),$=a("ul"),vu=a("li"),Cae=a("strong"),u4o=o("bart"),b4o=o(" \u2014 "),B$=a("a"),F4o=o("BartForCausalLM"),v4o=o(" (BART model)"),T4o=l(),Tu=a("li"),wae=a("strong"),M4o=o("bert"),E4o=o(" \u2014 "),P$=a("a"),C4o=o("BertLMHeadModel"),w4o=o(" (BERT model)"),A4o=l(),Mu=a("li"),Aae=a("strong"),y4o=o("bert-generation"),L4o=o(" \u2014 "),$$=a("a"),x4o=o("BertGenerationDecoder"),k4o=o(" (Bert Generation model)"),S4o=l(),Eu=a("li"),yae=a("strong"),R4o=o("big_bird"),B4o=o(" \u2014 "),I$=a("a"),P4o=o("BigBirdForCausalLM"),$4o=o(" (BigBird model)"),I4o=l(),Cu=a("li"),Lae=a("strong"),q4o=o("bigbird_pegasus"),N4o=o(" \u2014 "),q$=a("a"),j4o=o("BigBirdPegasusForCausalLM"),D4o=o(" (BigBirdPegasus model)"),G4o=l(),wu=a("li"),xae=a("strong"),O4o=o("blenderbot"),V4o=o(" \u2014 "),N$=a("a"),X4o=o("BlenderbotForCausalLM"),z4o=o(" (Blenderbot model)"),Q4o=l(),Au=a("li"),kae=a("strong"),W4o=o("blenderbot-small"),H4o=o(" \u2014 "),j$=a("a"),U4o=o("BlenderbotSmallForCausalLM"),J4o=o(" (BlenderbotSmall model)"),Y4o=l(),yu=a("li"),Sae=a("strong"),K4o=o("camembert"),Z4o=o(" \u2014 "),D$=a("a"),ebo=o("CamembertForCausalLM"),obo=o(" (CamemBERT model)"),rbo=l(),Lu=a("li"),Rae=a("strong"),tbo=o("ctrl"),abo=o(" \u2014 "),G$=a("a"),nbo=o("CTRLLMHeadModel"),sbo=o(" (CTRL model)"),lbo=l(),xu=a("li"),Bae=a("strong"),ibo=o("data2vec-text"),dbo=o(" \u2014 "),O$=a("a"),cbo=o("Data2VecTextForCausalLM"),fbo=o(" (Data2VecText model)"),mbo=l(),ku=a("li"),Pae=a("strong"),gbo=o("electra"),hbo=o(" \u2014 "),V$=a("a"),pbo=o("ElectraForCausalLM"),_bo=o(" (ELECTRA model)"),ubo=l(),Su=a("li"),$ae=a("strong"),bbo=o("gpt2"),Fbo=o(" \u2014 "),X$=a("a"),vbo=o("GPT2LMHeadModel"),Tbo=o(" (OpenAI GPT-2 model)"),Mbo=l(),Ru=a("li"),Iae=a("strong"),Ebo=o("gpt_neo"),Cbo=o(" \u2014 "),z$=a("a"),wbo=o("GPTNeoForCausalLM"),Abo=o(" (GPT Neo model)"),ybo=l(),Bu=a("li"),qae=a("strong"),Lbo=o("gptj"),xbo=o(" \u2014 "),Q$=a("a"),kbo=o("GPTJForCausalLM"),Sbo=o(" (GPT-J model)"),Rbo=l(),Pu=a("li"),Nae=a("strong"),Bbo=o("marian"),Pbo=o(" \u2014 "),W$=a("a"),$bo=o("MarianForCausalLM"),Ibo=o(" (Marian model)"),qbo=l(),$u=a("li"),jae=a("strong"),Nbo=o("mbart"),jbo=o(" \u2014 "),H$=a("a"),Dbo=o("MBartForCausalLM"),Gbo=o(" (mBART model)"),Obo=l(),Iu=a("li"),Dae=a("strong"),Vbo=o("megatron-bert"),Xbo=o(" \u2014 "),U$=a("a"),zbo=o("MegatronBertForCausalLM"),Qbo=o(" (MegatronBert model)"),Wbo=l(),qu=a("li"),Gae=a("strong"),Hbo=o("openai-gpt"),Ubo=o(" \u2014 "),J$=a("a"),Jbo=o("OpenAIGPTLMHeadModel"),Ybo=o(" (OpenAI GPT model)"),Kbo=l(),Nu=a("li"),Oae=a("strong"),Zbo=o("pegasus"),e3o=o(" \u2014 "),Y$=a("a"),o3o=o("PegasusForCausalLM"),r3o=o(" (Pegasus model)"),t3o=l(),ju=a("li"),Vae=a("strong"),a3o=o("plbart"),n3o=o(" \u2014 "),K$=a("a"),s3o=o("PLBartForCausalLM"),l3o=o(" (PLBart model)"),i3o=l(),Du=a("li"),Xae=a("strong"),d3o=o("prophetnet"),c3o=o(" \u2014 "),Z$=a("a"),f3o=o("ProphetNetForCausalLM"),m3o=o(" (ProphetNet model)"),g3o=l(),Gu=a("li"),zae=a("strong"),h3o=o("qdqbert"),p3o=o(" \u2014 "),eI=a("a"),_3o=o("QDQBertLMHeadModel"),u3o=o(" (QDQBert model)"),b3o=l(),Ou=a("li"),Qae=a("strong"),F3o=o("reformer"),v3o=o(" \u2014 "),oI=a("a"),T3o=o("ReformerModelWithLMHead"),M3o=o(" (Reformer model)"),E3o=l(),Vu=a("li"),Wae=a("strong"),C3o=o("rembert"),w3o=o(" \u2014 "),rI=a("a"),A3o=o("RemBertForCausalLM"),y3o=o(" (RemBERT model)"),L3o=l(),Xu=a("li"),Hae=a("strong"),x3o=o("roberta"),k3o=o(" \u2014 "),tI=a("a"),S3o=o("RobertaForCausalLM"),R3o=o(" (RoBERTa model)"),B3o=l(),zu=a("li"),Uae=a("strong"),P3o=o("roformer"),$3o=o(" \u2014 "),aI=a("a"),I3o=o("RoFormerForCausalLM"),q3o=o(" (RoFormer model)"),N3o=l(),Qu=a("li"),Jae=a("strong"),j3o=o("speech_to_text_2"),D3o=o(" \u2014 "),nI=a("a"),G3o=o("Speech2Text2ForCausalLM"),O3o=o(" (Speech2Text2 model)"),V3o=l(),Wu=a("li"),Yae=a("strong"),X3o=o("transfo-xl"),z3o=o(" \u2014 "),sI=a("a"),Q3o=o("TransfoXLLMHeadModel"),W3o=o(" (Transformer-XL model)"),H3o=l(),Hu=a("li"),Kae=a("strong"),U3o=o("trocr"),J3o=o(" \u2014 "),lI=a("a"),Y3o=o("TrOCRForCausalLM"),K3o=o(" (TrOCR model)"),Z3o=l(),Uu=a("li"),Zae=a("strong"),e2o=o("xglm"),o2o=o(" \u2014 "),iI=a("a"),r2o=o("XGLMForCausalLM"),t2o=o(" (XGLM model)"),a2o=l(),Ju=a("li"),ene=a("strong"),n2o=o("xlm"),s2o=o(" \u2014 "),dI=a("a"),l2o=o("XLMWithLMHeadModel"),i2o=o(" (XLM model)"),d2o=l(),Yu=a("li"),one=a("strong"),c2o=o("xlm-prophetnet"),f2o=o(" \u2014 "),cI=a("a"),m2o=o("XLMProphetNetForCausalLM"),g2o=o(" (XLMProphetNet model)"),h2o=l(),Ku=a("li"),rne=a("strong"),p2o=o("xlm-roberta"),_2o=o(" \u2014 "),fI=a("a"),u2o=o("XLMRobertaForCausalLM"),b2o=o(" (XLM-RoBERTa model)"),F2o=l(),Zu=a("li"),tne=a("strong"),v2o=o("xlm-roberta-xl"),T2o=o(" \u2014 "),mI=a("a"),M2o=o("XLMRobertaXLForCausalLM"),E2o=o(" (XLM-RoBERTa-XL model)"),C2o=l(),e1=a("li"),ane=a("strong"),w2o=o("xlnet"),A2o=o(" \u2014 "),gI=a("a"),y2o=o("XLNetLMHeadModel"),L2o=o(" (XLNet model)"),x2o=l(),o1=a("p"),k2o=o("The model is set in evaluation mode by default using "),nne=a("code"),S2o=o("model.eval()"),R2o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sne=a("code"),B2o=o("model.train()"),P2o=l(),lne=a("p"),$2o=o("Examples:"),I2o=l(),f(F5.$$.fragment),bRe=l(),nd=a("h2"),r1=a("a"),ine=a("span"),f(v5.$$.fragment),q2o=l(),dne=a("span"),N2o=o("AutoModelForMaskedLM"),FRe=l(),Zo=a("div"),f(T5.$$.fragment),j2o=l(),sd=a("p"),D2o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),hI=a("a"),G2o=o("from_pretrained()"),O2o=o(" class method or the "),pI=a("a"),V2o=o("from_config()"),X2o=o(` class
method.`),z2o=l(),M5=a("p"),Q2o=o("This class cannot be instantiated directly using "),cne=a("code"),W2o=o("__init__()"),H2o=o(" (throws an error)."),U2o=l(),Wr=a("div"),f(E5.$$.fragment),J2o=l(),fne=a("p"),Y2o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),K2o=l(),ld=a("p"),Z2o=o(`Note:
Loading a model from its configuration file does `),mne=a("strong"),eFo=o("not"),oFo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_I=a("a"),rFo=o("from_pretrained()"),tFo=o(" to load the model weights."),aFo=l(),gne=a("p"),nFo=o("Examples:"),sFo=l(),f(C5.$$.fragment),lFo=l(),De=a("div"),f(w5.$$.fragment),iFo=l(),hne=a("p"),dFo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),cFo=l(),Wa=a("p"),fFo=o("The model class to instantiate is selected based on the "),pne=a("code"),mFo=o("model_type"),gFo=o(` property of the config object (either
passed as an argument or loaded from `),_ne=a("code"),hFo=o("pretrained_model_name_or_path"),pFo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),une=a("code"),_Fo=o("pretrained_model_name_or_path"),uFo=o(":"),bFo=l(),I=a("ul"),t1=a("li"),bne=a("strong"),FFo=o("albert"),vFo=o(" \u2014 "),uI=a("a"),TFo=o("AlbertForMaskedLM"),MFo=o(" (ALBERT model)"),EFo=l(),a1=a("li"),Fne=a("strong"),CFo=o("bart"),wFo=o(" \u2014 "),bI=a("a"),AFo=o("BartForConditionalGeneration"),yFo=o(" (BART model)"),LFo=l(),n1=a("li"),vne=a("strong"),xFo=o("bert"),kFo=o(" \u2014 "),FI=a("a"),SFo=o("BertForMaskedLM"),RFo=o(" (BERT model)"),BFo=l(),s1=a("li"),Tne=a("strong"),PFo=o("big_bird"),$Fo=o(" \u2014 "),vI=a("a"),IFo=o("BigBirdForMaskedLM"),qFo=o(" (BigBird model)"),NFo=l(),l1=a("li"),Mne=a("strong"),jFo=o("camembert"),DFo=o(" \u2014 "),TI=a("a"),GFo=o("CamembertForMaskedLM"),OFo=o(" (CamemBERT model)"),VFo=l(),i1=a("li"),Ene=a("strong"),XFo=o("convbert"),zFo=o(" \u2014 "),MI=a("a"),QFo=o("ConvBertForMaskedLM"),WFo=o(" (ConvBERT model)"),HFo=l(),d1=a("li"),Cne=a("strong"),UFo=o("data2vec-text"),JFo=o(" \u2014 "),EI=a("a"),YFo=o("Data2VecTextForMaskedLM"),KFo=o(" (Data2VecText model)"),ZFo=l(),c1=a("li"),wne=a("strong"),evo=o("deberta"),ovo=o(" \u2014 "),CI=a("a"),rvo=o("DebertaForMaskedLM"),tvo=o(" (DeBERTa model)"),avo=l(),f1=a("li"),Ane=a("strong"),nvo=o("deberta-v2"),svo=o(" \u2014 "),wI=a("a"),lvo=o("DebertaV2ForMaskedLM"),ivo=o(" (DeBERTa-v2 model)"),dvo=l(),m1=a("li"),yne=a("strong"),cvo=o("distilbert"),fvo=o(" \u2014 "),AI=a("a"),mvo=o("DistilBertForMaskedLM"),gvo=o(" (DistilBERT model)"),hvo=l(),g1=a("li"),Lne=a("strong"),pvo=o("electra"),_vo=o(" \u2014 "),yI=a("a"),uvo=o("ElectraForMaskedLM"),bvo=o(" (ELECTRA model)"),Fvo=l(),h1=a("li"),xne=a("strong"),vvo=o("flaubert"),Tvo=o(" \u2014 "),LI=a("a"),Mvo=o("FlaubertWithLMHeadModel"),Evo=o(" (FlauBERT model)"),Cvo=l(),p1=a("li"),kne=a("strong"),wvo=o("fnet"),Avo=o(" \u2014 "),xI=a("a"),yvo=o("FNetForMaskedLM"),Lvo=o(" (FNet model)"),xvo=l(),_1=a("li"),Sne=a("strong"),kvo=o("funnel"),Svo=o(" \u2014 "),kI=a("a"),Rvo=o("FunnelForMaskedLM"),Bvo=o(" (Funnel Transformer model)"),Pvo=l(),u1=a("li"),Rne=a("strong"),$vo=o("ibert"),Ivo=o(" \u2014 "),SI=a("a"),qvo=o("IBertForMaskedLM"),Nvo=o(" (I-BERT model)"),jvo=l(),b1=a("li"),Bne=a("strong"),Dvo=o("layoutlm"),Gvo=o(" \u2014 "),RI=a("a"),Ovo=o("LayoutLMForMaskedLM"),Vvo=o(" (LayoutLM model)"),Xvo=l(),F1=a("li"),Pne=a("strong"),zvo=o("longformer"),Qvo=o(" \u2014 "),BI=a("a"),Wvo=o("LongformerForMaskedLM"),Hvo=o(" (Longformer model)"),Uvo=l(),v1=a("li"),$ne=a("strong"),Jvo=o("mbart"),Yvo=o(" \u2014 "),PI=a("a"),Kvo=o("MBartForConditionalGeneration"),Zvo=o(" (mBART model)"),e6o=l(),T1=a("li"),Ine=a("strong"),o6o=o("megatron-bert"),r6o=o(" \u2014 "),$I=a("a"),t6o=o("MegatronBertForMaskedLM"),a6o=o(" (MegatronBert model)"),n6o=l(),M1=a("li"),qne=a("strong"),s6o=o("mobilebert"),l6o=o(" \u2014 "),II=a("a"),i6o=o("MobileBertForMaskedLM"),d6o=o(" (MobileBERT model)"),c6o=l(),E1=a("li"),Nne=a("strong"),f6o=o("mpnet"),m6o=o(" \u2014 "),qI=a("a"),g6o=o("MPNetForMaskedLM"),h6o=o(" (MPNet model)"),p6o=l(),C1=a("li"),jne=a("strong"),_6o=o("nystromformer"),u6o=o(" \u2014 "),NI=a("a"),b6o=o("NystromformerForMaskedLM"),F6o=o(" (Nystromformer model)"),v6o=l(),w1=a("li"),Dne=a("strong"),T6o=o("perceiver"),M6o=o(" \u2014 "),jI=a("a"),E6o=o("PerceiverForMaskedLM"),C6o=o(" (Perceiver model)"),w6o=l(),A1=a("li"),Gne=a("strong"),A6o=o("qdqbert"),y6o=o(" \u2014 "),DI=a("a"),L6o=o("QDQBertForMaskedLM"),x6o=o(" (QDQBert model)"),k6o=l(),y1=a("li"),One=a("strong"),S6o=o("reformer"),R6o=o(" \u2014 "),GI=a("a"),B6o=o("ReformerForMaskedLM"),P6o=o(" (Reformer model)"),$6o=l(),L1=a("li"),Vne=a("strong"),I6o=o("rembert"),q6o=o(" \u2014 "),OI=a("a"),N6o=o("RemBertForMaskedLM"),j6o=o(" (RemBERT model)"),D6o=l(),x1=a("li"),Xne=a("strong"),G6o=o("roberta"),O6o=o(" \u2014 "),VI=a("a"),V6o=o("RobertaForMaskedLM"),X6o=o(" (RoBERTa model)"),z6o=l(),k1=a("li"),zne=a("strong"),Q6o=o("roformer"),W6o=o(" \u2014 "),XI=a("a"),H6o=o("RoFormerForMaskedLM"),U6o=o(" (RoFormer model)"),J6o=l(),S1=a("li"),Qne=a("strong"),Y6o=o("squeezebert"),K6o=o(" \u2014 "),zI=a("a"),Z6o=o("SqueezeBertForMaskedLM"),eTo=o(" (SqueezeBERT model)"),oTo=l(),R1=a("li"),Wne=a("strong"),rTo=o("tapas"),tTo=o(" \u2014 "),QI=a("a"),aTo=o("TapasForMaskedLM"),nTo=o(" (TAPAS model)"),sTo=l(),B1=a("li"),Hne=a("strong"),lTo=o("wav2vec2"),iTo=o(" \u2014 "),Une=a("code"),dTo=o("Wav2Vec2ForMaskedLM"),cTo=o(" (Wav2Vec2 model)"),fTo=l(),P1=a("li"),Jne=a("strong"),mTo=o("xlm"),gTo=o(" \u2014 "),WI=a("a"),hTo=o("XLMWithLMHeadModel"),pTo=o(" (XLM model)"),_To=l(),$1=a("li"),Yne=a("strong"),uTo=o("xlm-roberta"),bTo=o(" \u2014 "),HI=a("a"),FTo=o("XLMRobertaForMaskedLM"),vTo=o(" (XLM-RoBERTa model)"),TTo=l(),I1=a("li"),Kne=a("strong"),MTo=o("xlm-roberta-xl"),ETo=o(" \u2014 "),UI=a("a"),CTo=o("XLMRobertaXLForMaskedLM"),wTo=o(" (XLM-RoBERTa-XL model)"),ATo=l(),q1=a("li"),Zne=a("strong"),yTo=o("yoso"),LTo=o(" \u2014 "),JI=a("a"),xTo=o("YosoForMaskedLM"),kTo=o(" (YOSO model)"),STo=l(),N1=a("p"),RTo=o("The model is set in evaluation mode by default using "),ese=a("code"),BTo=o("model.eval()"),PTo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ose=a("code"),$To=o("model.train()"),ITo=l(),rse=a("p"),qTo=o("Examples:"),NTo=l(),f(A5.$$.fragment),vRe=l(),id=a("h2"),j1=a("a"),tse=a("span"),f(y5.$$.fragment),jTo=l(),ase=a("span"),DTo=o("AutoModelForSeq2SeqLM"),TRe=l(),er=a("div"),f(L5.$$.fragment),GTo=l(),dd=a("p"),OTo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),YI=a("a"),VTo=o("from_pretrained()"),XTo=o(" class method or the "),KI=a("a"),zTo=o("from_config()"),QTo=o(` class
method.`),WTo=l(),x5=a("p"),HTo=o("This class cannot be instantiated directly using "),nse=a("code"),UTo=o("__init__()"),JTo=o(" (throws an error)."),YTo=l(),Hr=a("div"),f(k5.$$.fragment),KTo=l(),sse=a("p"),ZTo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),e7o=l(),cd=a("p"),o7o=o(`Note:
Loading a model from its configuration file does `),lse=a("strong"),r7o=o("not"),t7o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZI=a("a"),a7o=o("from_pretrained()"),n7o=o(" to load the model weights."),s7o=l(),ise=a("p"),l7o=o("Examples:"),i7o=l(),f(S5.$$.fragment),d7o=l(),Ge=a("div"),f(R5.$$.fragment),c7o=l(),dse=a("p"),f7o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),m7o=l(),Ha=a("p"),g7o=o("The model class to instantiate is selected based on the "),cse=a("code"),h7o=o("model_type"),p7o=o(` property of the config object (either
passed as an argument or loaded from `),fse=a("code"),_7o=o("pretrained_model_name_or_path"),u7o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mse=a("code"),b7o=o("pretrained_model_name_or_path"),F7o=o(":"),v7o=l(),ae=a("ul"),D1=a("li"),gse=a("strong"),T7o=o("bart"),M7o=o(" \u2014 "),eq=a("a"),E7o=o("BartForConditionalGeneration"),C7o=o(" (BART model)"),w7o=l(),G1=a("li"),hse=a("strong"),A7o=o("bigbird_pegasus"),y7o=o(" \u2014 "),oq=a("a"),L7o=o("BigBirdPegasusForConditionalGeneration"),x7o=o(" (BigBirdPegasus model)"),k7o=l(),O1=a("li"),pse=a("strong"),S7o=o("blenderbot"),R7o=o(" \u2014 "),rq=a("a"),B7o=o("BlenderbotForConditionalGeneration"),P7o=o(" (Blenderbot model)"),$7o=l(),V1=a("li"),_se=a("strong"),I7o=o("blenderbot-small"),q7o=o(" \u2014 "),tq=a("a"),N7o=o("BlenderbotSmallForConditionalGeneration"),j7o=o(" (BlenderbotSmall model)"),D7o=l(),X1=a("li"),use=a("strong"),G7o=o("encoder-decoder"),O7o=o(" \u2014 "),aq=a("a"),V7o=o("EncoderDecoderModel"),X7o=o(" (Encoder decoder model)"),z7o=l(),z1=a("li"),bse=a("strong"),Q7o=o("fsmt"),W7o=o(" \u2014 "),nq=a("a"),H7o=o("FSMTForConditionalGeneration"),U7o=o(" (FairSeq Machine-Translation model)"),J7o=l(),Q1=a("li"),Fse=a("strong"),Y7o=o("led"),K7o=o(" \u2014 "),sq=a("a"),Z7o=o("LEDForConditionalGeneration"),eMo=o(" (LED model)"),oMo=l(),W1=a("li"),vse=a("strong"),rMo=o("m2m_100"),tMo=o(" \u2014 "),lq=a("a"),aMo=o("M2M100ForConditionalGeneration"),nMo=o(" (M2M100 model)"),sMo=l(),H1=a("li"),Tse=a("strong"),lMo=o("marian"),iMo=o(" \u2014 "),iq=a("a"),dMo=o("MarianMTModel"),cMo=o(" (Marian model)"),fMo=l(),U1=a("li"),Mse=a("strong"),mMo=o("mbart"),gMo=o(" \u2014 "),dq=a("a"),hMo=o("MBartForConditionalGeneration"),pMo=o(" (mBART model)"),_Mo=l(),J1=a("li"),Ese=a("strong"),uMo=o("mt5"),bMo=o(" \u2014 "),cq=a("a"),FMo=o("MT5ForConditionalGeneration"),vMo=o(" (mT5 model)"),TMo=l(),Y1=a("li"),Cse=a("strong"),MMo=o("pegasus"),EMo=o(" \u2014 "),fq=a("a"),CMo=o("PegasusForConditionalGeneration"),wMo=o(" (Pegasus model)"),AMo=l(),K1=a("li"),wse=a("strong"),yMo=o("plbart"),LMo=o(" \u2014 "),mq=a("a"),xMo=o("PLBartForConditionalGeneration"),kMo=o(" (PLBart model)"),SMo=l(),Z1=a("li"),Ase=a("strong"),RMo=o("prophetnet"),BMo=o(" \u2014 "),gq=a("a"),PMo=o("ProphetNetForConditionalGeneration"),$Mo=o(" (ProphetNet model)"),IMo=l(),e4=a("li"),yse=a("strong"),qMo=o("t5"),NMo=o(" \u2014 "),hq=a("a"),jMo=o("T5ForConditionalGeneration"),DMo=o(" (T5 model)"),GMo=l(),o4=a("li"),Lse=a("strong"),OMo=o("tapex"),VMo=o(" \u2014 "),pq=a("a"),XMo=o("BartForConditionalGeneration"),zMo=o(" (TAPEX model)"),QMo=l(),r4=a("li"),xse=a("strong"),WMo=o("xlm-prophetnet"),HMo=o(" \u2014 "),_q=a("a"),UMo=o("XLMProphetNetForConditionalGeneration"),JMo=o(" (XLMProphetNet model)"),YMo=l(),t4=a("p"),KMo=o("The model is set in evaluation mode by default using "),kse=a("code"),ZMo=o("model.eval()"),eEo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sse=a("code"),oEo=o("model.train()"),rEo=l(),Rse=a("p"),tEo=o("Examples:"),aEo=l(),f(B5.$$.fragment),MRe=l(),fd=a("h2"),a4=a("a"),Bse=a("span"),f(P5.$$.fragment),nEo=l(),Pse=a("span"),sEo=o("AutoModelForSequenceClassification"),ERe=l(),or=a("div"),f($5.$$.fragment),lEo=l(),md=a("p"),iEo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),uq=a("a"),dEo=o("from_pretrained()"),cEo=o(" class method or the "),bq=a("a"),fEo=o("from_config()"),mEo=o(` class
method.`),gEo=l(),I5=a("p"),hEo=o("This class cannot be instantiated directly using "),$se=a("code"),pEo=o("__init__()"),_Eo=o(" (throws an error)."),uEo=l(),Ur=a("div"),f(q5.$$.fragment),bEo=l(),Ise=a("p"),FEo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),vEo=l(),gd=a("p"),TEo=o(`Note:
Loading a model from its configuration file does `),qse=a("strong"),MEo=o("not"),EEo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Fq=a("a"),CEo=o("from_pretrained()"),wEo=o(" to load the model weights."),AEo=l(),Nse=a("p"),yEo=o("Examples:"),LEo=l(),f(N5.$$.fragment),xEo=l(),Oe=a("div"),f(j5.$$.fragment),kEo=l(),jse=a("p"),SEo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),REo=l(),Ua=a("p"),BEo=o("The model class to instantiate is selected based on the "),Dse=a("code"),PEo=o("model_type"),$Eo=o(` property of the config object (either
passed as an argument or loaded from `),Gse=a("code"),IEo=o("pretrained_model_name_or_path"),qEo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ose=a("code"),NEo=o("pretrained_model_name_or_path"),jEo=o(":"),DEo=l(),y=a("ul"),n4=a("li"),Vse=a("strong"),GEo=o("albert"),OEo=o(" \u2014 "),vq=a("a"),VEo=o("AlbertForSequenceClassification"),XEo=o(" (ALBERT model)"),zEo=l(),s4=a("li"),Xse=a("strong"),QEo=o("bart"),WEo=o(" \u2014 "),Tq=a("a"),HEo=o("BartForSequenceClassification"),UEo=o(" (BART model)"),JEo=l(),l4=a("li"),zse=a("strong"),YEo=o("bert"),KEo=o(" \u2014 "),Mq=a("a"),ZEo=o("BertForSequenceClassification"),eCo=o(" (BERT model)"),oCo=l(),i4=a("li"),Qse=a("strong"),rCo=o("big_bird"),tCo=o(" \u2014 "),Eq=a("a"),aCo=o("BigBirdForSequenceClassification"),nCo=o(" (BigBird model)"),sCo=l(),d4=a("li"),Wse=a("strong"),lCo=o("bigbird_pegasus"),iCo=o(" \u2014 "),Cq=a("a"),dCo=o("BigBirdPegasusForSequenceClassification"),cCo=o(" (BigBirdPegasus model)"),fCo=l(),c4=a("li"),Hse=a("strong"),mCo=o("camembert"),gCo=o(" \u2014 "),wq=a("a"),hCo=o("CamembertForSequenceClassification"),pCo=o(" (CamemBERT model)"),_Co=l(),f4=a("li"),Use=a("strong"),uCo=o("canine"),bCo=o(" \u2014 "),Aq=a("a"),FCo=o("CanineForSequenceClassification"),vCo=o(" (Canine model)"),TCo=l(),m4=a("li"),Jse=a("strong"),MCo=o("convbert"),ECo=o(" \u2014 "),yq=a("a"),CCo=o("ConvBertForSequenceClassification"),wCo=o(" (ConvBERT model)"),ACo=l(),g4=a("li"),Yse=a("strong"),yCo=o("ctrl"),LCo=o(" \u2014 "),Lq=a("a"),xCo=o("CTRLForSequenceClassification"),kCo=o(" (CTRL model)"),SCo=l(),h4=a("li"),Kse=a("strong"),RCo=o("data2vec-text"),BCo=o(" \u2014 "),xq=a("a"),PCo=o("Data2VecTextForSequenceClassification"),$Co=o(" (Data2VecText model)"),ICo=l(),p4=a("li"),Zse=a("strong"),qCo=o("deberta"),NCo=o(" \u2014 "),kq=a("a"),jCo=o("DebertaForSequenceClassification"),DCo=o(" (DeBERTa model)"),GCo=l(),_4=a("li"),ele=a("strong"),OCo=o("deberta-v2"),VCo=o(" \u2014 "),Sq=a("a"),XCo=o("DebertaV2ForSequenceClassification"),zCo=o(" (DeBERTa-v2 model)"),QCo=l(),u4=a("li"),ole=a("strong"),WCo=o("distilbert"),HCo=o(" \u2014 "),Rq=a("a"),UCo=o("DistilBertForSequenceClassification"),JCo=o(" (DistilBERT model)"),YCo=l(),b4=a("li"),rle=a("strong"),KCo=o("electra"),ZCo=o(" \u2014 "),Bq=a("a"),e5o=o("ElectraForSequenceClassification"),o5o=o(" (ELECTRA model)"),r5o=l(),F4=a("li"),tle=a("strong"),t5o=o("flaubert"),a5o=o(" \u2014 "),Pq=a("a"),n5o=o("FlaubertForSequenceClassification"),s5o=o(" (FlauBERT model)"),l5o=l(),v4=a("li"),ale=a("strong"),i5o=o("fnet"),d5o=o(" \u2014 "),$q=a("a"),c5o=o("FNetForSequenceClassification"),f5o=o(" (FNet model)"),m5o=l(),T4=a("li"),nle=a("strong"),g5o=o("funnel"),h5o=o(" \u2014 "),Iq=a("a"),p5o=o("FunnelForSequenceClassification"),_5o=o(" (Funnel Transformer model)"),u5o=l(),M4=a("li"),sle=a("strong"),b5o=o("gpt2"),F5o=o(" \u2014 "),qq=a("a"),v5o=o("GPT2ForSequenceClassification"),T5o=o(" (OpenAI GPT-2 model)"),M5o=l(),E4=a("li"),lle=a("strong"),E5o=o("gpt_neo"),C5o=o(" \u2014 "),Nq=a("a"),w5o=o("GPTNeoForSequenceClassification"),A5o=o(" (GPT Neo model)"),y5o=l(),C4=a("li"),ile=a("strong"),L5o=o("gptj"),x5o=o(" \u2014 "),jq=a("a"),k5o=o("GPTJForSequenceClassification"),S5o=o(" (GPT-J model)"),R5o=l(),w4=a("li"),dle=a("strong"),B5o=o("ibert"),P5o=o(" \u2014 "),Dq=a("a"),$5o=o("IBertForSequenceClassification"),I5o=o(" (I-BERT model)"),q5o=l(),A4=a("li"),cle=a("strong"),N5o=o("layoutlm"),j5o=o(" \u2014 "),Gq=a("a"),D5o=o("LayoutLMForSequenceClassification"),G5o=o(" (LayoutLM model)"),O5o=l(),y4=a("li"),fle=a("strong"),V5o=o("layoutlmv2"),X5o=o(" \u2014 "),Oq=a("a"),z5o=o("LayoutLMv2ForSequenceClassification"),Q5o=o(" (LayoutLMv2 model)"),W5o=l(),L4=a("li"),mle=a("strong"),H5o=o("led"),U5o=o(" \u2014 "),Vq=a("a"),J5o=o("LEDForSequenceClassification"),Y5o=o(" (LED model)"),K5o=l(),x4=a("li"),gle=a("strong"),Z5o=o("longformer"),ewo=o(" \u2014 "),Xq=a("a"),owo=o("LongformerForSequenceClassification"),rwo=o(" (Longformer model)"),two=l(),k4=a("li"),hle=a("strong"),awo=o("mbart"),nwo=o(" \u2014 "),zq=a("a"),swo=o("MBartForSequenceClassification"),lwo=o(" (mBART model)"),iwo=l(),S4=a("li"),ple=a("strong"),dwo=o("megatron-bert"),cwo=o(" \u2014 "),Qq=a("a"),fwo=o("MegatronBertForSequenceClassification"),mwo=o(" (MegatronBert model)"),gwo=l(),R4=a("li"),_le=a("strong"),hwo=o("mobilebert"),pwo=o(" \u2014 "),Wq=a("a"),_wo=o("MobileBertForSequenceClassification"),uwo=o(" (MobileBERT model)"),bwo=l(),B4=a("li"),ule=a("strong"),Fwo=o("mpnet"),vwo=o(" \u2014 "),Hq=a("a"),Two=o("MPNetForSequenceClassification"),Mwo=o(" (MPNet model)"),Ewo=l(),P4=a("li"),ble=a("strong"),Cwo=o("nystromformer"),wwo=o(" \u2014 "),Uq=a("a"),Awo=o("NystromformerForSequenceClassification"),ywo=o(" (Nystromformer model)"),Lwo=l(),$4=a("li"),Fle=a("strong"),xwo=o("openai-gpt"),kwo=o(" \u2014 "),Jq=a("a"),Swo=o("OpenAIGPTForSequenceClassification"),Rwo=o(" (OpenAI GPT model)"),Bwo=l(),I4=a("li"),vle=a("strong"),Pwo=o("perceiver"),$wo=o(" \u2014 "),Yq=a("a"),Iwo=o("PerceiverForSequenceClassification"),qwo=o(" (Perceiver model)"),Nwo=l(),q4=a("li"),Tle=a("strong"),jwo=o("plbart"),Dwo=o(" \u2014 "),Kq=a("a"),Gwo=o("PLBartForSequenceClassification"),Owo=o(" (PLBart model)"),Vwo=l(),N4=a("li"),Mle=a("strong"),Xwo=o("qdqbert"),zwo=o(" \u2014 "),Zq=a("a"),Qwo=o("QDQBertForSequenceClassification"),Wwo=o(" (QDQBert model)"),Hwo=l(),j4=a("li"),Ele=a("strong"),Uwo=o("reformer"),Jwo=o(" \u2014 "),eN=a("a"),Ywo=o("ReformerForSequenceClassification"),Kwo=o(" (Reformer model)"),Zwo=l(),D4=a("li"),Cle=a("strong"),eAo=o("rembert"),oAo=o(" \u2014 "),oN=a("a"),rAo=o("RemBertForSequenceClassification"),tAo=o(" (RemBERT model)"),aAo=l(),G4=a("li"),wle=a("strong"),nAo=o("roberta"),sAo=o(" \u2014 "),rN=a("a"),lAo=o("RobertaForSequenceClassification"),iAo=o(" (RoBERTa model)"),dAo=l(),O4=a("li"),Ale=a("strong"),cAo=o("roformer"),fAo=o(" \u2014 "),tN=a("a"),mAo=o("RoFormerForSequenceClassification"),gAo=o(" (RoFormer model)"),hAo=l(),V4=a("li"),yle=a("strong"),pAo=o("squeezebert"),_Ao=o(" \u2014 "),aN=a("a"),uAo=o("SqueezeBertForSequenceClassification"),bAo=o(" (SqueezeBERT model)"),FAo=l(),X4=a("li"),Lle=a("strong"),vAo=o("tapas"),TAo=o(" \u2014 "),nN=a("a"),MAo=o("TapasForSequenceClassification"),EAo=o(" (TAPAS model)"),CAo=l(),z4=a("li"),xle=a("strong"),wAo=o("tapex"),AAo=o(" \u2014 "),sN=a("a"),yAo=o("BartForSequenceClassification"),LAo=o(" (TAPEX model)"),xAo=l(),Q4=a("li"),kle=a("strong"),kAo=o("transfo-xl"),SAo=o(" \u2014 "),lN=a("a"),RAo=o("TransfoXLForSequenceClassification"),BAo=o(" (Transformer-XL model)"),PAo=l(),W4=a("li"),Sle=a("strong"),$Ao=o("xlm"),IAo=o(" \u2014 "),iN=a("a"),qAo=o("XLMForSequenceClassification"),NAo=o(" (XLM model)"),jAo=l(),H4=a("li"),Rle=a("strong"),DAo=o("xlm-roberta"),GAo=o(" \u2014 "),dN=a("a"),OAo=o("XLMRobertaForSequenceClassification"),VAo=o(" (XLM-RoBERTa model)"),XAo=l(),U4=a("li"),Ble=a("strong"),zAo=o("xlm-roberta-xl"),QAo=o(" \u2014 "),cN=a("a"),WAo=o("XLMRobertaXLForSequenceClassification"),HAo=o(" (XLM-RoBERTa-XL model)"),UAo=l(),J4=a("li"),Ple=a("strong"),JAo=o("xlnet"),YAo=o(" \u2014 "),fN=a("a"),KAo=o("XLNetForSequenceClassification"),ZAo=o(" (XLNet model)"),e0o=l(),Y4=a("li"),$le=a("strong"),o0o=o("yoso"),r0o=o(" \u2014 "),mN=a("a"),t0o=o("YosoForSequenceClassification"),a0o=o(" (YOSO model)"),n0o=l(),K4=a("p"),s0o=o("The model is set in evaluation mode by default using "),Ile=a("code"),l0o=o("model.eval()"),i0o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qle=a("code"),d0o=o("model.train()"),c0o=l(),Nle=a("p"),f0o=o("Examples:"),m0o=l(),f(D5.$$.fragment),CRe=l(),hd=a("h2"),Z4=a("a"),jle=a("span"),f(G5.$$.fragment),g0o=l(),Dle=a("span"),h0o=o("AutoModelForMultipleChoice"),wRe=l(),rr=a("div"),f(O5.$$.fragment),p0o=l(),pd=a("p"),_0o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),gN=a("a"),u0o=o("from_pretrained()"),b0o=o(" class method or the "),hN=a("a"),F0o=o("from_config()"),v0o=o(` class
method.`),T0o=l(),V5=a("p"),M0o=o("This class cannot be instantiated directly using "),Gle=a("code"),E0o=o("__init__()"),C0o=o(" (throws an error)."),w0o=l(),Jr=a("div"),f(X5.$$.fragment),A0o=l(),Ole=a("p"),y0o=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),L0o=l(),_d=a("p"),x0o=o(`Note:
Loading a model from its configuration file does `),Vle=a("strong"),k0o=o("not"),S0o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pN=a("a"),R0o=o("from_pretrained()"),B0o=o(" to load the model weights."),P0o=l(),Xle=a("p"),$0o=o("Examples:"),I0o=l(),f(z5.$$.fragment),q0o=l(),Ve=a("div"),f(Q5.$$.fragment),N0o=l(),zle=a("p"),j0o=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),D0o=l(),Ja=a("p"),G0o=o("The model class to instantiate is selected based on the "),Qle=a("code"),O0o=o("model_type"),V0o=o(` property of the config object (either
passed as an argument or loaded from `),Wle=a("code"),X0o=o("pretrained_model_name_or_path"),z0o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hle=a("code"),Q0o=o("pretrained_model_name_or_path"),W0o=o(":"),H0o=l(),G=a("ul"),eb=a("li"),Ule=a("strong"),U0o=o("albert"),J0o=o(" \u2014 "),_N=a("a"),Y0o=o("AlbertForMultipleChoice"),K0o=o(" (ALBERT model)"),Z0o=l(),ob=a("li"),Jle=a("strong"),eyo=o("bert"),oyo=o(" \u2014 "),uN=a("a"),ryo=o("BertForMultipleChoice"),tyo=o(" (BERT model)"),ayo=l(),rb=a("li"),Yle=a("strong"),nyo=o("big_bird"),syo=o(" \u2014 "),bN=a("a"),lyo=o("BigBirdForMultipleChoice"),iyo=o(" (BigBird model)"),dyo=l(),tb=a("li"),Kle=a("strong"),cyo=o("camembert"),fyo=o(" \u2014 "),FN=a("a"),myo=o("CamembertForMultipleChoice"),gyo=o(" (CamemBERT model)"),hyo=l(),ab=a("li"),Zle=a("strong"),pyo=o("canine"),_yo=o(" \u2014 "),vN=a("a"),uyo=o("CanineForMultipleChoice"),byo=o(" (Canine model)"),Fyo=l(),nb=a("li"),eie=a("strong"),vyo=o("convbert"),Tyo=o(" \u2014 "),TN=a("a"),Myo=o("ConvBertForMultipleChoice"),Eyo=o(" (ConvBERT model)"),Cyo=l(),sb=a("li"),oie=a("strong"),wyo=o("data2vec-text"),Ayo=o(" \u2014 "),MN=a("a"),yyo=o("Data2VecTextForMultipleChoice"),Lyo=o(" (Data2VecText model)"),xyo=l(),lb=a("li"),rie=a("strong"),kyo=o("distilbert"),Syo=o(" \u2014 "),EN=a("a"),Ryo=o("DistilBertForMultipleChoice"),Byo=o(" (DistilBERT model)"),Pyo=l(),ib=a("li"),tie=a("strong"),$yo=o("electra"),Iyo=o(" \u2014 "),CN=a("a"),qyo=o("ElectraForMultipleChoice"),Nyo=o(" (ELECTRA model)"),jyo=l(),db=a("li"),aie=a("strong"),Dyo=o("flaubert"),Gyo=o(" \u2014 "),wN=a("a"),Oyo=o("FlaubertForMultipleChoice"),Vyo=o(" (FlauBERT model)"),Xyo=l(),cb=a("li"),nie=a("strong"),zyo=o("fnet"),Qyo=o(" \u2014 "),AN=a("a"),Wyo=o("FNetForMultipleChoice"),Hyo=o(" (FNet model)"),Uyo=l(),fb=a("li"),sie=a("strong"),Jyo=o("funnel"),Yyo=o(" \u2014 "),yN=a("a"),Kyo=o("FunnelForMultipleChoice"),Zyo=o(" (Funnel Transformer model)"),eLo=l(),mb=a("li"),lie=a("strong"),oLo=o("ibert"),rLo=o(" \u2014 "),LN=a("a"),tLo=o("IBertForMultipleChoice"),aLo=o(" (I-BERT model)"),nLo=l(),gb=a("li"),iie=a("strong"),sLo=o("longformer"),lLo=o(" \u2014 "),xN=a("a"),iLo=o("LongformerForMultipleChoice"),dLo=o(" (Longformer model)"),cLo=l(),hb=a("li"),die=a("strong"),fLo=o("megatron-bert"),mLo=o(" \u2014 "),kN=a("a"),gLo=o("MegatronBertForMultipleChoice"),hLo=o(" (MegatronBert model)"),pLo=l(),pb=a("li"),cie=a("strong"),_Lo=o("mobilebert"),uLo=o(" \u2014 "),SN=a("a"),bLo=o("MobileBertForMultipleChoice"),FLo=o(" (MobileBERT model)"),vLo=l(),_b=a("li"),fie=a("strong"),TLo=o("mpnet"),MLo=o(" \u2014 "),RN=a("a"),ELo=o("MPNetForMultipleChoice"),CLo=o(" (MPNet model)"),wLo=l(),ub=a("li"),mie=a("strong"),ALo=o("nystromformer"),yLo=o(" \u2014 "),BN=a("a"),LLo=o("NystromformerForMultipleChoice"),xLo=o(" (Nystromformer model)"),kLo=l(),bb=a("li"),gie=a("strong"),SLo=o("qdqbert"),RLo=o(" \u2014 "),PN=a("a"),BLo=o("QDQBertForMultipleChoice"),PLo=o(" (QDQBert model)"),$Lo=l(),Fb=a("li"),hie=a("strong"),ILo=o("rembert"),qLo=o(" \u2014 "),$N=a("a"),NLo=o("RemBertForMultipleChoice"),jLo=o(" (RemBERT model)"),DLo=l(),vb=a("li"),pie=a("strong"),GLo=o("roberta"),OLo=o(" \u2014 "),IN=a("a"),VLo=o("RobertaForMultipleChoice"),XLo=o(" (RoBERTa model)"),zLo=l(),Tb=a("li"),_ie=a("strong"),QLo=o("roformer"),WLo=o(" \u2014 "),qN=a("a"),HLo=o("RoFormerForMultipleChoice"),ULo=o(" (RoFormer model)"),JLo=l(),Mb=a("li"),uie=a("strong"),YLo=o("squeezebert"),KLo=o(" \u2014 "),NN=a("a"),ZLo=o("SqueezeBertForMultipleChoice"),e8o=o(" (SqueezeBERT model)"),o8o=l(),Eb=a("li"),bie=a("strong"),r8o=o("xlm"),t8o=o(" \u2014 "),jN=a("a"),a8o=o("XLMForMultipleChoice"),n8o=o(" (XLM model)"),s8o=l(),Cb=a("li"),Fie=a("strong"),l8o=o("xlm-roberta"),i8o=o(" \u2014 "),DN=a("a"),d8o=o("XLMRobertaForMultipleChoice"),c8o=o(" (XLM-RoBERTa model)"),f8o=l(),wb=a("li"),vie=a("strong"),m8o=o("xlm-roberta-xl"),g8o=o(" \u2014 "),GN=a("a"),h8o=o("XLMRobertaXLForMultipleChoice"),p8o=o(" (XLM-RoBERTa-XL model)"),_8o=l(),Ab=a("li"),Tie=a("strong"),u8o=o("xlnet"),b8o=o(" \u2014 "),ON=a("a"),F8o=o("XLNetForMultipleChoice"),v8o=o(" (XLNet model)"),T8o=l(),yb=a("li"),Mie=a("strong"),M8o=o("yoso"),E8o=o(" \u2014 "),VN=a("a"),C8o=o("YosoForMultipleChoice"),w8o=o(" (YOSO model)"),A8o=l(),Lb=a("p"),y8o=o("The model is set in evaluation mode by default using "),Eie=a("code"),L8o=o("model.eval()"),x8o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cie=a("code"),k8o=o("model.train()"),S8o=l(),wie=a("p"),R8o=o("Examples:"),B8o=l(),f(W5.$$.fragment),ARe=l(),ud=a("h2"),xb=a("a"),Aie=a("span"),f(H5.$$.fragment),P8o=l(),yie=a("span"),$8o=o("AutoModelForNextSentencePrediction"),yRe=l(),tr=a("div"),f(U5.$$.fragment),I8o=l(),bd=a("p"),q8o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),XN=a("a"),N8o=o("from_pretrained()"),j8o=o(" class method or the "),zN=a("a"),D8o=o("from_config()"),G8o=o(` class
method.`),O8o=l(),J5=a("p"),V8o=o("This class cannot be instantiated directly using "),Lie=a("code"),X8o=o("__init__()"),z8o=o(" (throws an error)."),Q8o=l(),Yr=a("div"),f(Y5.$$.fragment),W8o=l(),xie=a("p"),H8o=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),U8o=l(),Fd=a("p"),J8o=o(`Note:
Loading a model from its configuration file does `),kie=a("strong"),Y8o=o("not"),K8o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QN=a("a"),Z8o=o("from_pretrained()"),e9o=o(" to load the model weights."),o9o=l(),Sie=a("p"),r9o=o("Examples:"),t9o=l(),f(K5.$$.fragment),a9o=l(),Xe=a("div"),f(Z5.$$.fragment),n9o=l(),Rie=a("p"),s9o=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),l9o=l(),Ya=a("p"),i9o=o("The model class to instantiate is selected based on the "),Bie=a("code"),d9o=o("model_type"),c9o=o(` property of the config object (either
passed as an argument or loaded from `),Pie=a("code"),f9o=o("pretrained_model_name_or_path"),m9o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$ie=a("code"),g9o=o("pretrained_model_name_or_path"),h9o=o(":"),p9o=l(),da=a("ul"),kb=a("li"),Iie=a("strong"),_9o=o("bert"),u9o=o(" \u2014 "),WN=a("a"),b9o=o("BertForNextSentencePrediction"),F9o=o(" (BERT model)"),v9o=l(),Sb=a("li"),qie=a("strong"),T9o=o("fnet"),M9o=o(" \u2014 "),HN=a("a"),E9o=o("FNetForNextSentencePrediction"),C9o=o(" (FNet model)"),w9o=l(),Rb=a("li"),Nie=a("strong"),A9o=o("megatron-bert"),y9o=o(" \u2014 "),UN=a("a"),L9o=o("MegatronBertForNextSentencePrediction"),x9o=o(" (MegatronBert model)"),k9o=l(),Bb=a("li"),jie=a("strong"),S9o=o("mobilebert"),R9o=o(" \u2014 "),JN=a("a"),B9o=o("MobileBertForNextSentencePrediction"),P9o=o(" (MobileBERT model)"),$9o=l(),Pb=a("li"),Die=a("strong"),I9o=o("qdqbert"),q9o=o(" \u2014 "),YN=a("a"),N9o=o("QDQBertForNextSentencePrediction"),j9o=o(" (QDQBert model)"),D9o=l(),$b=a("p"),G9o=o("The model is set in evaluation mode by default using "),Gie=a("code"),O9o=o("model.eval()"),V9o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Oie=a("code"),X9o=o("model.train()"),z9o=l(),Vie=a("p"),Q9o=o("Examples:"),W9o=l(),f(ew.$$.fragment),LRe=l(),vd=a("h2"),Ib=a("a"),Xie=a("span"),f(ow.$$.fragment),H9o=l(),zie=a("span"),U9o=o("AutoModelForTokenClassification"),xRe=l(),ar=a("div"),f(rw.$$.fragment),J9o=l(),Td=a("p"),Y9o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),KN=a("a"),K9o=o("from_pretrained()"),Z9o=o(" class method or the "),ZN=a("a"),exo=o("from_config()"),oxo=o(` class
method.`),rxo=l(),tw=a("p"),txo=o("This class cannot be instantiated directly using "),Qie=a("code"),axo=o("__init__()"),nxo=o(" (throws an error)."),sxo=l(),Kr=a("div"),f(aw.$$.fragment),lxo=l(),Wie=a("p"),ixo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),dxo=l(),Md=a("p"),cxo=o(`Note:
Loading a model from its configuration file does `),Hie=a("strong"),fxo=o("not"),mxo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ej=a("a"),gxo=o("from_pretrained()"),hxo=o(" to load the model weights."),pxo=l(),Uie=a("p"),_xo=o("Examples:"),uxo=l(),f(nw.$$.fragment),bxo=l(),ze=a("div"),f(sw.$$.fragment),Fxo=l(),Jie=a("p"),vxo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Txo=l(),Ka=a("p"),Mxo=o("The model class to instantiate is selected based on the "),Yie=a("code"),Exo=o("model_type"),Cxo=o(` property of the config object (either
passed as an argument or loaded from `),Kie=a("code"),wxo=o("pretrained_model_name_or_path"),Axo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zie=a("code"),yxo=o("pretrained_model_name_or_path"),Lxo=o(":"),xxo=l(),j=a("ul"),qb=a("li"),ede=a("strong"),kxo=o("albert"),Sxo=o(" \u2014 "),oj=a("a"),Rxo=o("AlbertForTokenClassification"),Bxo=o(" (ALBERT model)"),Pxo=l(),Nb=a("li"),ode=a("strong"),$xo=o("bert"),Ixo=o(" \u2014 "),rj=a("a"),qxo=o("BertForTokenClassification"),Nxo=o(" (BERT model)"),jxo=l(),jb=a("li"),rde=a("strong"),Dxo=o("big_bird"),Gxo=o(" \u2014 "),tj=a("a"),Oxo=o("BigBirdForTokenClassification"),Vxo=o(" (BigBird model)"),Xxo=l(),Db=a("li"),tde=a("strong"),zxo=o("camembert"),Qxo=o(" \u2014 "),aj=a("a"),Wxo=o("CamembertForTokenClassification"),Hxo=o(" (CamemBERT model)"),Uxo=l(),Gb=a("li"),ade=a("strong"),Jxo=o("canine"),Yxo=o(" \u2014 "),nj=a("a"),Kxo=o("CanineForTokenClassification"),Zxo=o(" (Canine model)"),eko=l(),Ob=a("li"),nde=a("strong"),oko=o("convbert"),rko=o(" \u2014 "),sj=a("a"),tko=o("ConvBertForTokenClassification"),ako=o(" (ConvBERT model)"),nko=l(),Vb=a("li"),sde=a("strong"),sko=o("data2vec-text"),lko=o(" \u2014 "),lj=a("a"),iko=o("Data2VecTextForTokenClassification"),dko=o(" (Data2VecText model)"),cko=l(),Xb=a("li"),lde=a("strong"),fko=o("deberta"),mko=o(" \u2014 "),ij=a("a"),gko=o("DebertaForTokenClassification"),hko=o(" (DeBERTa model)"),pko=l(),zb=a("li"),ide=a("strong"),_ko=o("deberta-v2"),uko=o(" \u2014 "),dj=a("a"),bko=o("DebertaV2ForTokenClassification"),Fko=o(" (DeBERTa-v2 model)"),vko=l(),Qb=a("li"),dde=a("strong"),Tko=o("distilbert"),Mko=o(" \u2014 "),cj=a("a"),Eko=o("DistilBertForTokenClassification"),Cko=o(" (DistilBERT model)"),wko=l(),Wb=a("li"),cde=a("strong"),Ako=o("electra"),yko=o(" \u2014 "),fj=a("a"),Lko=o("ElectraForTokenClassification"),xko=o(" (ELECTRA model)"),kko=l(),Hb=a("li"),fde=a("strong"),Sko=o("flaubert"),Rko=o(" \u2014 "),mj=a("a"),Bko=o("FlaubertForTokenClassification"),Pko=o(" (FlauBERT model)"),$ko=l(),Ub=a("li"),mde=a("strong"),Iko=o("fnet"),qko=o(" \u2014 "),gj=a("a"),Nko=o("FNetForTokenClassification"),jko=o(" (FNet model)"),Dko=l(),Jb=a("li"),gde=a("strong"),Gko=o("funnel"),Oko=o(" \u2014 "),hj=a("a"),Vko=o("FunnelForTokenClassification"),Xko=o(" (Funnel Transformer model)"),zko=l(),Yb=a("li"),hde=a("strong"),Qko=o("gpt2"),Wko=o(" \u2014 "),pj=a("a"),Hko=o("GPT2ForTokenClassification"),Uko=o(" (OpenAI GPT-2 model)"),Jko=l(),Kb=a("li"),pde=a("strong"),Yko=o("ibert"),Kko=o(" \u2014 "),_j=a("a"),Zko=o("IBertForTokenClassification"),eSo=o(" (I-BERT model)"),oSo=l(),Zb=a("li"),_de=a("strong"),rSo=o("layoutlm"),tSo=o(" \u2014 "),uj=a("a"),aSo=o("LayoutLMForTokenClassification"),nSo=o(" (LayoutLM model)"),sSo=l(),e3=a("li"),ude=a("strong"),lSo=o("layoutlmv2"),iSo=o(" \u2014 "),bj=a("a"),dSo=o("LayoutLMv2ForTokenClassification"),cSo=o(" (LayoutLMv2 model)"),fSo=l(),o3=a("li"),bde=a("strong"),mSo=o("longformer"),gSo=o(" \u2014 "),Fj=a("a"),hSo=o("LongformerForTokenClassification"),pSo=o(" (Longformer model)"),_So=l(),r3=a("li"),Fde=a("strong"),uSo=o("megatron-bert"),bSo=o(" \u2014 "),vj=a("a"),FSo=o("MegatronBertForTokenClassification"),vSo=o(" (MegatronBert model)"),TSo=l(),t3=a("li"),vde=a("strong"),MSo=o("mobilebert"),ESo=o(" \u2014 "),Tj=a("a"),CSo=o("MobileBertForTokenClassification"),wSo=o(" (MobileBERT model)"),ASo=l(),a3=a("li"),Tde=a("strong"),ySo=o("mpnet"),LSo=o(" \u2014 "),Mj=a("a"),xSo=o("MPNetForTokenClassification"),kSo=o(" (MPNet model)"),SSo=l(),n3=a("li"),Mde=a("strong"),RSo=o("nystromformer"),BSo=o(" \u2014 "),Ej=a("a"),PSo=o("NystromformerForTokenClassification"),$So=o(" (Nystromformer model)"),ISo=l(),s3=a("li"),Ede=a("strong"),qSo=o("qdqbert"),NSo=o(" \u2014 "),Cj=a("a"),jSo=o("QDQBertForTokenClassification"),DSo=o(" (QDQBert model)"),GSo=l(),l3=a("li"),Cde=a("strong"),OSo=o("rembert"),VSo=o(" \u2014 "),wj=a("a"),XSo=o("RemBertForTokenClassification"),zSo=o(" (RemBERT model)"),QSo=l(),i3=a("li"),wde=a("strong"),WSo=o("roberta"),HSo=o(" \u2014 "),Aj=a("a"),USo=o("RobertaForTokenClassification"),JSo=o(" (RoBERTa model)"),YSo=l(),d3=a("li"),Ade=a("strong"),KSo=o("roformer"),ZSo=o(" \u2014 "),yj=a("a"),eRo=o("RoFormerForTokenClassification"),oRo=o(" (RoFormer model)"),rRo=l(),c3=a("li"),yde=a("strong"),tRo=o("squeezebert"),aRo=o(" \u2014 "),Lj=a("a"),nRo=o("SqueezeBertForTokenClassification"),sRo=o(" (SqueezeBERT model)"),lRo=l(),f3=a("li"),Lde=a("strong"),iRo=o("xlm"),dRo=o(" \u2014 "),xj=a("a"),cRo=o("XLMForTokenClassification"),fRo=o(" (XLM model)"),mRo=l(),m3=a("li"),xde=a("strong"),gRo=o("xlm-roberta"),hRo=o(" \u2014 "),kj=a("a"),pRo=o("XLMRobertaForTokenClassification"),_Ro=o(" (XLM-RoBERTa model)"),uRo=l(),g3=a("li"),kde=a("strong"),bRo=o("xlm-roberta-xl"),FRo=o(" \u2014 "),Sj=a("a"),vRo=o("XLMRobertaXLForTokenClassification"),TRo=o(" (XLM-RoBERTa-XL model)"),MRo=l(),h3=a("li"),Sde=a("strong"),ERo=o("xlnet"),CRo=o(" \u2014 "),Rj=a("a"),wRo=o("XLNetForTokenClassification"),ARo=o(" (XLNet model)"),yRo=l(),p3=a("li"),Rde=a("strong"),LRo=o("yoso"),xRo=o(" \u2014 "),Bj=a("a"),kRo=o("YosoForTokenClassification"),SRo=o(" (YOSO model)"),RRo=l(),_3=a("p"),BRo=o("The model is set in evaluation mode by default using "),Bde=a("code"),PRo=o("model.eval()"),$Ro=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pde=a("code"),IRo=o("model.train()"),qRo=l(),$de=a("p"),NRo=o("Examples:"),jRo=l(),f(lw.$$.fragment),kRe=l(),Ed=a("h2"),u3=a("a"),Ide=a("span"),f(iw.$$.fragment),DRo=l(),qde=a("span"),GRo=o("AutoModelForQuestionAnswering"),SRe=l(),nr=a("div"),f(dw.$$.fragment),ORo=l(),Cd=a("p"),VRo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Pj=a("a"),XRo=o("from_pretrained()"),zRo=o(" class method or the "),$j=a("a"),QRo=o("from_config()"),WRo=o(` class
method.`),HRo=l(),cw=a("p"),URo=o("This class cannot be instantiated directly using "),Nde=a("code"),JRo=o("__init__()"),YRo=o(" (throws an error)."),KRo=l(),Zr=a("div"),f(fw.$$.fragment),ZRo=l(),jde=a("p"),eBo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),oBo=l(),wd=a("p"),rBo=o(`Note:
Loading a model from its configuration file does `),Dde=a("strong"),tBo=o("not"),aBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ij=a("a"),nBo=o("from_pretrained()"),sBo=o(" to load the model weights."),lBo=l(),Gde=a("p"),iBo=o("Examples:"),dBo=l(),f(mw.$$.fragment),cBo=l(),Qe=a("div"),f(gw.$$.fragment),fBo=l(),Ode=a("p"),mBo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),gBo=l(),Za=a("p"),hBo=o("The model class to instantiate is selected based on the "),Vde=a("code"),pBo=o("model_type"),_Bo=o(` property of the config object (either
passed as an argument or loaded from `),Xde=a("code"),uBo=o("pretrained_model_name_or_path"),bBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zde=a("code"),FBo=o("pretrained_model_name_or_path"),vBo=o(":"),TBo=l(),R=a("ul"),b3=a("li"),Qde=a("strong"),MBo=o("albert"),EBo=o(" \u2014 "),qj=a("a"),CBo=o("AlbertForQuestionAnswering"),wBo=o(" (ALBERT model)"),ABo=l(),F3=a("li"),Wde=a("strong"),yBo=o("bart"),LBo=o(" \u2014 "),Nj=a("a"),xBo=o("BartForQuestionAnswering"),kBo=o(" (BART model)"),SBo=l(),v3=a("li"),Hde=a("strong"),RBo=o("bert"),BBo=o(" \u2014 "),jj=a("a"),PBo=o("BertForQuestionAnswering"),$Bo=o(" (BERT model)"),IBo=l(),T3=a("li"),Ude=a("strong"),qBo=o("big_bird"),NBo=o(" \u2014 "),Dj=a("a"),jBo=o("BigBirdForQuestionAnswering"),DBo=o(" (BigBird model)"),GBo=l(),M3=a("li"),Jde=a("strong"),OBo=o("bigbird_pegasus"),VBo=o(" \u2014 "),Gj=a("a"),XBo=o("BigBirdPegasusForQuestionAnswering"),zBo=o(" (BigBirdPegasus model)"),QBo=l(),E3=a("li"),Yde=a("strong"),WBo=o("camembert"),HBo=o(" \u2014 "),Oj=a("a"),UBo=o("CamembertForQuestionAnswering"),JBo=o(" (CamemBERT model)"),YBo=l(),C3=a("li"),Kde=a("strong"),KBo=o("canine"),ZBo=o(" \u2014 "),Vj=a("a"),ePo=o("CanineForQuestionAnswering"),oPo=o(" (Canine model)"),rPo=l(),w3=a("li"),Zde=a("strong"),tPo=o("convbert"),aPo=o(" \u2014 "),Xj=a("a"),nPo=o("ConvBertForQuestionAnswering"),sPo=o(" (ConvBERT model)"),lPo=l(),A3=a("li"),ece=a("strong"),iPo=o("data2vec-text"),dPo=o(" \u2014 "),zj=a("a"),cPo=o("Data2VecTextForQuestionAnswering"),fPo=o(" (Data2VecText model)"),mPo=l(),y3=a("li"),oce=a("strong"),gPo=o("deberta"),hPo=o(" \u2014 "),Qj=a("a"),pPo=o("DebertaForQuestionAnswering"),_Po=o(" (DeBERTa model)"),uPo=l(),L3=a("li"),rce=a("strong"),bPo=o("deberta-v2"),FPo=o(" \u2014 "),Wj=a("a"),vPo=o("DebertaV2ForQuestionAnswering"),TPo=o(" (DeBERTa-v2 model)"),MPo=l(),x3=a("li"),tce=a("strong"),EPo=o("distilbert"),CPo=o(" \u2014 "),Hj=a("a"),wPo=o("DistilBertForQuestionAnswering"),APo=o(" (DistilBERT model)"),yPo=l(),k3=a("li"),ace=a("strong"),LPo=o("electra"),xPo=o(" \u2014 "),Uj=a("a"),kPo=o("ElectraForQuestionAnswering"),SPo=o(" (ELECTRA model)"),RPo=l(),S3=a("li"),nce=a("strong"),BPo=o("flaubert"),PPo=o(" \u2014 "),Jj=a("a"),$Po=o("FlaubertForQuestionAnsweringSimple"),IPo=o(" (FlauBERT model)"),qPo=l(),R3=a("li"),sce=a("strong"),NPo=o("fnet"),jPo=o(" \u2014 "),Yj=a("a"),DPo=o("FNetForQuestionAnswering"),GPo=o(" (FNet model)"),OPo=l(),B3=a("li"),lce=a("strong"),VPo=o("funnel"),XPo=o(" \u2014 "),Kj=a("a"),zPo=o("FunnelForQuestionAnswering"),QPo=o(" (Funnel Transformer model)"),WPo=l(),P3=a("li"),ice=a("strong"),HPo=o("gptj"),UPo=o(" \u2014 "),Zj=a("a"),JPo=o("GPTJForQuestionAnswering"),YPo=o(" (GPT-J model)"),KPo=l(),$3=a("li"),dce=a("strong"),ZPo=o("ibert"),e$o=o(" \u2014 "),eD=a("a"),o$o=o("IBertForQuestionAnswering"),r$o=o(" (I-BERT model)"),t$o=l(),I3=a("li"),cce=a("strong"),a$o=o("layoutlmv2"),n$o=o(" \u2014 "),oD=a("a"),s$o=o("LayoutLMv2ForQuestionAnswering"),l$o=o(" (LayoutLMv2 model)"),i$o=l(),q3=a("li"),fce=a("strong"),d$o=o("led"),c$o=o(" \u2014 "),rD=a("a"),f$o=o("LEDForQuestionAnswering"),m$o=o(" (LED model)"),g$o=l(),N3=a("li"),mce=a("strong"),h$o=o("longformer"),p$o=o(" \u2014 "),tD=a("a"),_$o=o("LongformerForQuestionAnswering"),u$o=o(" (Longformer model)"),b$o=l(),j3=a("li"),gce=a("strong"),F$o=o("lxmert"),v$o=o(" \u2014 "),aD=a("a"),T$o=o("LxmertForQuestionAnswering"),M$o=o(" (LXMERT model)"),E$o=l(),D3=a("li"),hce=a("strong"),C$o=o("mbart"),w$o=o(" \u2014 "),nD=a("a"),A$o=o("MBartForQuestionAnswering"),y$o=o(" (mBART model)"),L$o=l(),G3=a("li"),pce=a("strong"),x$o=o("megatron-bert"),k$o=o(" \u2014 "),sD=a("a"),S$o=o("MegatronBertForQuestionAnswering"),R$o=o(" (MegatronBert model)"),B$o=l(),O3=a("li"),_ce=a("strong"),P$o=o("mobilebert"),$$o=o(" \u2014 "),lD=a("a"),I$o=o("MobileBertForQuestionAnswering"),q$o=o(" (MobileBERT model)"),N$o=l(),V3=a("li"),uce=a("strong"),j$o=o("mpnet"),D$o=o(" \u2014 "),iD=a("a"),G$o=o("MPNetForQuestionAnswering"),O$o=o(" (MPNet model)"),V$o=l(),X3=a("li"),bce=a("strong"),X$o=o("nystromformer"),z$o=o(" \u2014 "),dD=a("a"),Q$o=o("NystromformerForQuestionAnswering"),W$o=o(" (Nystromformer model)"),H$o=l(),z3=a("li"),Fce=a("strong"),U$o=o("qdqbert"),J$o=o(" \u2014 "),cD=a("a"),Y$o=o("QDQBertForQuestionAnswering"),K$o=o(" (QDQBert model)"),Z$o=l(),Q3=a("li"),vce=a("strong"),eIo=o("reformer"),oIo=o(" \u2014 "),fD=a("a"),rIo=o("ReformerForQuestionAnswering"),tIo=o(" (Reformer model)"),aIo=l(),W3=a("li"),Tce=a("strong"),nIo=o("rembert"),sIo=o(" \u2014 "),mD=a("a"),lIo=o("RemBertForQuestionAnswering"),iIo=o(" (RemBERT model)"),dIo=l(),H3=a("li"),Mce=a("strong"),cIo=o("roberta"),fIo=o(" \u2014 "),gD=a("a"),mIo=o("RobertaForQuestionAnswering"),gIo=o(" (RoBERTa model)"),hIo=l(),U3=a("li"),Ece=a("strong"),pIo=o("roformer"),_Io=o(" \u2014 "),hD=a("a"),uIo=o("RoFormerForQuestionAnswering"),bIo=o(" (RoFormer model)"),FIo=l(),J3=a("li"),Cce=a("strong"),vIo=o("splinter"),TIo=o(" \u2014 "),pD=a("a"),MIo=o("SplinterForQuestionAnswering"),EIo=o(" (Splinter model)"),CIo=l(),Y3=a("li"),wce=a("strong"),wIo=o("squeezebert"),AIo=o(" \u2014 "),_D=a("a"),yIo=o("SqueezeBertForQuestionAnswering"),LIo=o(" (SqueezeBERT model)"),xIo=l(),K3=a("li"),Ace=a("strong"),kIo=o("xlm"),SIo=o(" \u2014 "),uD=a("a"),RIo=o("XLMForQuestionAnsweringSimple"),BIo=o(" (XLM model)"),PIo=l(),Z3=a("li"),yce=a("strong"),$Io=o("xlm-roberta"),IIo=o(" \u2014 "),bD=a("a"),qIo=o("XLMRobertaForQuestionAnswering"),NIo=o(" (XLM-RoBERTa model)"),jIo=l(),e2=a("li"),Lce=a("strong"),DIo=o("xlm-roberta-xl"),GIo=o(" \u2014 "),FD=a("a"),OIo=o("XLMRobertaXLForQuestionAnswering"),VIo=o(" (XLM-RoBERTa-XL model)"),XIo=l(),o2=a("li"),xce=a("strong"),zIo=o("xlnet"),QIo=o(" \u2014 "),vD=a("a"),WIo=o("XLNetForQuestionAnsweringSimple"),HIo=o(" (XLNet model)"),UIo=l(),r2=a("li"),kce=a("strong"),JIo=o("yoso"),YIo=o(" \u2014 "),TD=a("a"),KIo=o("YosoForQuestionAnswering"),ZIo=o(" (YOSO model)"),eqo=l(),t2=a("p"),oqo=o("The model is set in evaluation mode by default using "),Sce=a("code"),rqo=o("model.eval()"),tqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rce=a("code"),aqo=o("model.train()"),nqo=l(),Bce=a("p"),sqo=o("Examples:"),lqo=l(),f(hw.$$.fragment),RRe=l(),Ad=a("h2"),a2=a("a"),Pce=a("span"),f(pw.$$.fragment),iqo=l(),$ce=a("span"),dqo=o("AutoModelForTableQuestionAnswering"),BRe=l(),sr=a("div"),f(_w.$$.fragment),cqo=l(),yd=a("p"),fqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),MD=a("a"),mqo=o("from_pretrained()"),gqo=o(" class method or the "),ED=a("a"),hqo=o("from_config()"),pqo=o(` class
method.`),_qo=l(),uw=a("p"),uqo=o("This class cannot be instantiated directly using "),Ice=a("code"),bqo=o("__init__()"),Fqo=o(" (throws an error)."),vqo=l(),et=a("div"),f(bw.$$.fragment),Tqo=l(),qce=a("p"),Mqo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Eqo=l(),Ld=a("p"),Cqo=o(`Note:
Loading a model from its configuration file does `),Nce=a("strong"),wqo=o("not"),Aqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CD=a("a"),yqo=o("from_pretrained()"),Lqo=o(" to load the model weights."),xqo=l(),jce=a("p"),kqo=o("Examples:"),Sqo=l(),f(Fw.$$.fragment),Rqo=l(),We=a("div"),f(vw.$$.fragment),Bqo=l(),Dce=a("p"),Pqo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),$qo=l(),en=a("p"),Iqo=o("The model class to instantiate is selected based on the "),Gce=a("code"),qqo=o("model_type"),Nqo=o(` property of the config object (either
passed as an argument or loaded from `),Oce=a("code"),jqo=o("pretrained_model_name_or_path"),Dqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vce=a("code"),Gqo=o("pretrained_model_name_or_path"),Oqo=o(":"),Vqo=l(),Xce=a("ul"),n2=a("li"),zce=a("strong"),Xqo=o("tapas"),zqo=o(" \u2014 "),wD=a("a"),Qqo=o("TapasForQuestionAnswering"),Wqo=o(" (TAPAS model)"),Hqo=l(),s2=a("p"),Uqo=o("The model is set in evaluation mode by default using "),Qce=a("code"),Jqo=o("model.eval()"),Yqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wce=a("code"),Kqo=o("model.train()"),Zqo=l(),Hce=a("p"),eNo=o("Examples:"),oNo=l(),f(Tw.$$.fragment),PRe=l(),xd=a("h2"),l2=a("a"),Uce=a("span"),f(Mw.$$.fragment),rNo=l(),Jce=a("span"),tNo=o("AutoModelForImageClassification"),$Re=l(),lr=a("div"),f(Ew.$$.fragment),aNo=l(),kd=a("p"),nNo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),AD=a("a"),sNo=o("from_pretrained()"),lNo=o(" class method or the "),yD=a("a"),iNo=o("from_config()"),dNo=o(` class
method.`),cNo=l(),Cw=a("p"),fNo=o("This class cannot be instantiated directly using "),Yce=a("code"),mNo=o("__init__()"),gNo=o(" (throws an error)."),hNo=l(),ot=a("div"),f(ww.$$.fragment),pNo=l(),Kce=a("p"),_No=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),uNo=l(),Sd=a("p"),bNo=o(`Note:
Loading a model from its configuration file does `),Zce=a("strong"),FNo=o("not"),vNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LD=a("a"),TNo=o("from_pretrained()"),MNo=o(" to load the model weights."),ENo=l(),efe=a("p"),CNo=o("Examples:"),wNo=l(),f(Aw.$$.fragment),ANo=l(),He=a("div"),f(yw.$$.fragment),yNo=l(),ofe=a("p"),LNo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),xNo=l(),on=a("p"),kNo=o("The model class to instantiate is selected based on the "),rfe=a("code"),SNo=o("model_type"),RNo=o(` property of the config object (either
passed as an argument or loaded from `),tfe=a("code"),BNo=o("pretrained_model_name_or_path"),PNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),afe=a("code"),$No=o("pretrained_model_name_or_path"),INo=o(":"),qNo=l(),ge=a("ul"),i2=a("li"),nfe=a("strong"),NNo=o("beit"),jNo=o(" \u2014 "),xD=a("a"),DNo=o("BeitForImageClassification"),GNo=o(" (BEiT model)"),ONo=l(),d2=a("li"),sfe=a("strong"),VNo=o("convnext"),XNo=o(" \u2014 "),kD=a("a"),zNo=o("ConvNextForImageClassification"),QNo=o(" (ConvNext model)"),WNo=l(),Ds=a("li"),lfe=a("strong"),HNo=o("deit"),UNo=o(" \u2014 "),SD=a("a"),JNo=o("DeiTForImageClassification"),YNo=o(" or "),RD=a("a"),KNo=o("DeiTForImageClassificationWithTeacher"),ZNo=o(" (DeiT model)"),ejo=l(),c2=a("li"),ife=a("strong"),ojo=o("imagegpt"),rjo=o(" \u2014 "),BD=a("a"),tjo=o("ImageGPTForImageClassification"),ajo=o(" (ImageGPT model)"),njo=l(),ma=a("li"),dfe=a("strong"),sjo=o("perceiver"),ljo=o(" \u2014 "),PD=a("a"),ijo=o("PerceiverForImageClassificationLearned"),djo=o(" or "),$D=a("a"),cjo=o("PerceiverForImageClassificationFourier"),fjo=o(" or "),ID=a("a"),mjo=o("PerceiverForImageClassificationConvProcessing"),gjo=o(" (Perceiver model)"),hjo=l(),f2=a("li"),cfe=a("strong"),pjo=o("poolformer"),_jo=o(" \u2014 "),qD=a("a"),ujo=o("PoolFormerForImageClassification"),bjo=o(" (PoolFormer model)"),Fjo=l(),m2=a("li"),ffe=a("strong"),vjo=o("resnet"),Tjo=o(" \u2014 "),ND=a("a"),Mjo=o("ResNetForImageClassification"),Ejo=o(" (ResNet model)"),Cjo=l(),g2=a("li"),mfe=a("strong"),wjo=o("segformer"),Ajo=o(" \u2014 "),jD=a("a"),yjo=o("SegformerForImageClassification"),Ljo=o(" (SegFormer model)"),xjo=l(),h2=a("li"),gfe=a("strong"),kjo=o("swin"),Sjo=o(" \u2014 "),DD=a("a"),Rjo=o("SwinForImageClassification"),Bjo=o(" (Swin model)"),Pjo=l(),p2=a("li"),hfe=a("strong"),$jo=o("van"),Ijo=o(" \u2014 "),GD=a("a"),qjo=o("VanForImageClassification"),Njo=o(" (VAN model)"),jjo=l(),_2=a("li"),pfe=a("strong"),Djo=o("vit"),Gjo=o(" \u2014 "),OD=a("a"),Ojo=o("ViTForImageClassification"),Vjo=o(" (ViT model)"),Xjo=l(),u2=a("p"),zjo=o("The model is set in evaluation mode by default using "),_fe=a("code"),Qjo=o("model.eval()"),Wjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ufe=a("code"),Hjo=o("model.train()"),Ujo=l(),bfe=a("p"),Jjo=o("Examples:"),Yjo=l(),f(Lw.$$.fragment),IRe=l(),Rd=a("h2"),b2=a("a"),Ffe=a("span"),f(xw.$$.fragment),Kjo=l(),vfe=a("span"),Zjo=o("AutoModelForVision2Seq"),qRe=l(),ir=a("div"),f(kw.$$.fragment),eDo=l(),Bd=a("p"),oDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),VD=a("a"),rDo=o("from_pretrained()"),tDo=o(" class method or the "),XD=a("a"),aDo=o("from_config()"),nDo=o(` class
method.`),sDo=l(),Sw=a("p"),lDo=o("This class cannot be instantiated directly using "),Tfe=a("code"),iDo=o("__init__()"),dDo=o(" (throws an error)."),cDo=l(),rt=a("div"),f(Rw.$$.fragment),fDo=l(),Mfe=a("p"),mDo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),gDo=l(),Pd=a("p"),hDo=o(`Note:
Loading a model from its configuration file does `),Efe=a("strong"),pDo=o("not"),_Do=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zD=a("a"),uDo=o("from_pretrained()"),bDo=o(" to load the model weights."),FDo=l(),Cfe=a("p"),vDo=o("Examples:"),TDo=l(),f(Bw.$$.fragment),MDo=l(),Ue=a("div"),f(Pw.$$.fragment),EDo=l(),wfe=a("p"),CDo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),wDo=l(),rn=a("p"),ADo=o("The model class to instantiate is selected based on the "),Afe=a("code"),yDo=o("model_type"),LDo=o(` property of the config object (either
passed as an argument or loaded from `),yfe=a("code"),xDo=o("pretrained_model_name_or_path"),kDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lfe=a("code"),SDo=o("pretrained_model_name_or_path"),RDo=o(":"),BDo=l(),xfe=a("ul"),F2=a("li"),kfe=a("strong"),PDo=o("vision-encoder-decoder"),$Do=o(" \u2014 "),QD=a("a"),IDo=o("VisionEncoderDecoderModel"),qDo=o(" (Vision Encoder decoder model)"),NDo=l(),v2=a("p"),jDo=o("The model is set in evaluation mode by default using "),Sfe=a("code"),DDo=o("model.eval()"),GDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rfe=a("code"),ODo=o("model.train()"),VDo=l(),Bfe=a("p"),XDo=o("Examples:"),zDo=l(),f($w.$$.fragment),NRe=l(),$d=a("h2"),T2=a("a"),Pfe=a("span"),f(Iw.$$.fragment),QDo=l(),$fe=a("span"),WDo=o("AutoModelForAudioClassification"),jRe=l(),dr=a("div"),f(qw.$$.fragment),HDo=l(),Id=a("p"),UDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),WD=a("a"),JDo=o("from_pretrained()"),YDo=o(" class method or the "),HD=a("a"),KDo=o("from_config()"),ZDo=o(` class
method.`),eGo=l(),Nw=a("p"),oGo=o("This class cannot be instantiated directly using "),Ife=a("code"),rGo=o("__init__()"),tGo=o(" (throws an error)."),aGo=l(),tt=a("div"),f(jw.$$.fragment),nGo=l(),qfe=a("p"),sGo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),lGo=l(),qd=a("p"),iGo=o(`Note:
Loading a model from its configuration file does `),Nfe=a("strong"),dGo=o("not"),cGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UD=a("a"),fGo=o("from_pretrained()"),mGo=o(" to load the model weights."),gGo=l(),jfe=a("p"),hGo=o("Examples:"),pGo=l(),f(Dw.$$.fragment),_Go=l(),Je=a("div"),f(Gw.$$.fragment),uGo=l(),Dfe=a("p"),bGo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),FGo=l(),tn=a("p"),vGo=o("The model class to instantiate is selected based on the "),Gfe=a("code"),TGo=o("model_type"),MGo=o(` property of the config object (either
passed as an argument or loaded from `),Ofe=a("code"),EGo=o("pretrained_model_name_or_path"),CGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vfe=a("code"),wGo=o("pretrained_model_name_or_path"),AGo=o(":"),yGo=l(),Se=a("ul"),M2=a("li"),Xfe=a("strong"),LGo=o("data2vec-audio"),xGo=o(" \u2014 "),JD=a("a"),kGo=o("Data2VecAudioForSequenceClassification"),SGo=o(" (Data2VecAudio model)"),RGo=l(),E2=a("li"),zfe=a("strong"),BGo=o("hubert"),PGo=o(" \u2014 "),YD=a("a"),$Go=o("HubertForSequenceClassification"),IGo=o(" (Hubert model)"),qGo=l(),C2=a("li"),Qfe=a("strong"),NGo=o("sew"),jGo=o(" \u2014 "),KD=a("a"),DGo=o("SEWForSequenceClassification"),GGo=o(" (SEW model)"),OGo=l(),w2=a("li"),Wfe=a("strong"),VGo=o("sew-d"),XGo=o(" \u2014 "),ZD=a("a"),zGo=o("SEWDForSequenceClassification"),QGo=o(" (SEW-D model)"),WGo=l(),A2=a("li"),Hfe=a("strong"),HGo=o("unispeech"),UGo=o(" \u2014 "),eG=a("a"),JGo=o("UniSpeechForSequenceClassification"),YGo=o(" (UniSpeech model)"),KGo=l(),y2=a("li"),Ufe=a("strong"),ZGo=o("unispeech-sat"),eOo=o(" \u2014 "),oG=a("a"),oOo=o("UniSpeechSatForSequenceClassification"),rOo=o(" (UniSpeechSat model)"),tOo=l(),L2=a("li"),Jfe=a("strong"),aOo=o("wav2vec2"),nOo=o(" \u2014 "),rG=a("a"),sOo=o("Wav2Vec2ForSequenceClassification"),lOo=o(" (Wav2Vec2 model)"),iOo=l(),x2=a("li"),Yfe=a("strong"),dOo=o("wavlm"),cOo=o(" \u2014 "),tG=a("a"),fOo=o("WavLMForSequenceClassification"),mOo=o(" (WavLM model)"),gOo=l(),k2=a("p"),hOo=o("The model is set in evaluation mode by default using "),Kfe=a("code"),pOo=o("model.eval()"),_Oo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zfe=a("code"),uOo=o("model.train()"),bOo=l(),eme=a("p"),FOo=o("Examples:"),vOo=l(),f(Ow.$$.fragment),DRe=l(),Nd=a("h2"),S2=a("a"),ome=a("span"),f(Vw.$$.fragment),TOo=l(),rme=a("span"),MOo=o("AutoModelForAudioFrameClassification"),GRe=l(),cr=a("div"),f(Xw.$$.fragment),EOo=l(),jd=a("p"),COo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),aG=a("a"),wOo=o("from_pretrained()"),AOo=o(" class method or the "),nG=a("a"),yOo=o("from_config()"),LOo=o(` class
method.`),xOo=l(),zw=a("p"),kOo=o("This class cannot be instantiated directly using "),tme=a("code"),SOo=o("__init__()"),ROo=o(" (throws an error)."),BOo=l(),at=a("div"),f(Qw.$$.fragment),POo=l(),ame=a("p"),$Oo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),IOo=l(),Dd=a("p"),qOo=o(`Note:
Loading a model from its configuration file does `),nme=a("strong"),NOo=o("not"),jOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sG=a("a"),DOo=o("from_pretrained()"),GOo=o(" to load the model weights."),OOo=l(),sme=a("p"),VOo=o("Examples:"),XOo=l(),f(Ww.$$.fragment),zOo=l(),Ye=a("div"),f(Hw.$$.fragment),QOo=l(),lme=a("p"),WOo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),HOo=l(),an=a("p"),UOo=o("The model class to instantiate is selected based on the "),ime=a("code"),JOo=o("model_type"),YOo=o(` property of the config object (either
passed as an argument or loaded from `),dme=a("code"),KOo=o("pretrained_model_name_or_path"),ZOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cme=a("code"),eVo=o("pretrained_model_name_or_path"),oVo=o(":"),rVo=l(),nn=a("ul"),R2=a("li"),fme=a("strong"),tVo=o("data2vec-audio"),aVo=o(" \u2014 "),lG=a("a"),nVo=o("Data2VecAudioForAudioFrameClassification"),sVo=o(" (Data2VecAudio model)"),lVo=l(),B2=a("li"),mme=a("strong"),iVo=o("unispeech-sat"),dVo=o(" \u2014 "),iG=a("a"),cVo=o("UniSpeechSatForAudioFrameClassification"),fVo=o(" (UniSpeechSat model)"),mVo=l(),P2=a("li"),gme=a("strong"),gVo=o("wav2vec2"),hVo=o(" \u2014 "),dG=a("a"),pVo=o("Wav2Vec2ForAudioFrameClassification"),_Vo=o(" (Wav2Vec2 model)"),uVo=l(),$2=a("li"),hme=a("strong"),bVo=o("wavlm"),FVo=o(" \u2014 "),cG=a("a"),vVo=o("WavLMForAudioFrameClassification"),TVo=o(" (WavLM model)"),MVo=l(),I2=a("p"),EVo=o("The model is set in evaluation mode by default using "),pme=a("code"),CVo=o("model.eval()"),wVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_me=a("code"),AVo=o("model.train()"),yVo=l(),ume=a("p"),LVo=o("Examples:"),xVo=l(),f(Uw.$$.fragment),ORe=l(),Gd=a("h2"),q2=a("a"),bme=a("span"),f(Jw.$$.fragment),kVo=l(),Fme=a("span"),SVo=o("AutoModelForCTC"),VRe=l(),fr=a("div"),f(Yw.$$.fragment),RVo=l(),Od=a("p"),BVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),fG=a("a"),PVo=o("from_pretrained()"),$Vo=o(" class method or the "),mG=a("a"),IVo=o("from_config()"),qVo=o(` class
method.`),NVo=l(),Kw=a("p"),jVo=o("This class cannot be instantiated directly using "),vme=a("code"),DVo=o("__init__()"),GVo=o(" (throws an error)."),OVo=l(),nt=a("div"),f(Zw.$$.fragment),VVo=l(),Tme=a("p"),XVo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),zVo=l(),Vd=a("p"),QVo=o(`Note:
Loading a model from its configuration file does `),Mme=a("strong"),WVo=o("not"),HVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gG=a("a"),UVo=o("from_pretrained()"),JVo=o(" to load the model weights."),YVo=l(),Eme=a("p"),KVo=o("Examples:"),ZVo=l(),f(eA.$$.fragment),eXo=l(),Ke=a("div"),f(oA.$$.fragment),oXo=l(),Cme=a("p"),rXo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),tXo=l(),sn=a("p"),aXo=o("The model class to instantiate is selected based on the "),wme=a("code"),nXo=o("model_type"),sXo=o(` property of the config object (either
passed as an argument or loaded from `),Ame=a("code"),lXo=o("pretrained_model_name_or_path"),iXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yme=a("code"),dXo=o("pretrained_model_name_or_path"),cXo=o(":"),fXo=l(),Re=a("ul"),N2=a("li"),Lme=a("strong"),mXo=o("data2vec-audio"),gXo=o(" \u2014 "),hG=a("a"),hXo=o("Data2VecAudioForCTC"),pXo=o(" (Data2VecAudio model)"),_Xo=l(),j2=a("li"),xme=a("strong"),uXo=o("hubert"),bXo=o(" \u2014 "),pG=a("a"),FXo=o("HubertForCTC"),vXo=o(" (Hubert model)"),TXo=l(),D2=a("li"),kme=a("strong"),MXo=o("sew"),EXo=o(" \u2014 "),_G=a("a"),CXo=o("SEWForCTC"),wXo=o(" (SEW model)"),AXo=l(),G2=a("li"),Sme=a("strong"),yXo=o("sew-d"),LXo=o(" \u2014 "),uG=a("a"),xXo=o("SEWDForCTC"),kXo=o(" (SEW-D model)"),SXo=l(),O2=a("li"),Rme=a("strong"),RXo=o("unispeech"),BXo=o(" \u2014 "),bG=a("a"),PXo=o("UniSpeechForCTC"),$Xo=o(" (UniSpeech model)"),IXo=l(),V2=a("li"),Bme=a("strong"),qXo=o("unispeech-sat"),NXo=o(" \u2014 "),FG=a("a"),jXo=o("UniSpeechSatForCTC"),DXo=o(" (UniSpeechSat model)"),GXo=l(),X2=a("li"),Pme=a("strong"),OXo=o("wav2vec2"),VXo=o(" \u2014 "),vG=a("a"),XXo=o("Wav2Vec2ForCTC"),zXo=o(" (Wav2Vec2 model)"),QXo=l(),z2=a("li"),$me=a("strong"),WXo=o("wavlm"),HXo=o(" \u2014 "),TG=a("a"),UXo=o("WavLMForCTC"),JXo=o(" (WavLM model)"),YXo=l(),Q2=a("p"),KXo=o("The model is set in evaluation mode by default using "),Ime=a("code"),ZXo=o("model.eval()"),ezo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qme=a("code"),ozo=o("model.train()"),rzo=l(),Nme=a("p"),tzo=o("Examples:"),azo=l(),f(rA.$$.fragment),XRe=l(),Xd=a("h2"),W2=a("a"),jme=a("span"),f(tA.$$.fragment),nzo=l(),Dme=a("span"),szo=o("AutoModelForSpeechSeq2Seq"),zRe=l(),mr=a("div"),f(aA.$$.fragment),lzo=l(),zd=a("p"),izo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),MG=a("a"),dzo=o("from_pretrained()"),czo=o(" class method or the "),EG=a("a"),fzo=o("from_config()"),mzo=o(` class
method.`),gzo=l(),nA=a("p"),hzo=o("This class cannot be instantiated directly using "),Gme=a("code"),pzo=o("__init__()"),_zo=o(" (throws an error)."),uzo=l(),st=a("div"),f(sA.$$.fragment),bzo=l(),Ome=a("p"),Fzo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),vzo=l(),Qd=a("p"),Tzo=o(`Note:
Loading a model from its configuration file does `),Vme=a("strong"),Mzo=o("not"),Ezo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CG=a("a"),Czo=o("from_pretrained()"),wzo=o(" to load the model weights."),Azo=l(),Xme=a("p"),yzo=o("Examples:"),Lzo=l(),f(lA.$$.fragment),xzo=l(),Ze=a("div"),f(iA.$$.fragment),kzo=l(),zme=a("p"),Szo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Rzo=l(),ln=a("p"),Bzo=o("The model class to instantiate is selected based on the "),Qme=a("code"),Pzo=o("model_type"),$zo=o(` property of the config object (either
passed as an argument or loaded from `),Wme=a("code"),Izo=o("pretrained_model_name_or_path"),qzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hme=a("code"),Nzo=o("pretrained_model_name_or_path"),jzo=o(":"),Dzo=l(),dA=a("ul"),H2=a("li"),Ume=a("strong"),Gzo=o("speech-encoder-decoder"),Ozo=o(" \u2014 "),wG=a("a"),Vzo=o("SpeechEncoderDecoderModel"),Xzo=o(" (Speech Encoder decoder model)"),zzo=l(),U2=a("li"),Jme=a("strong"),Qzo=o("speech_to_text"),Wzo=o(" \u2014 "),AG=a("a"),Hzo=o("Speech2TextForConditionalGeneration"),Uzo=o(" (Speech2Text model)"),Jzo=l(),J2=a("p"),Yzo=o("The model is set in evaluation mode by default using "),Yme=a("code"),Kzo=o("model.eval()"),Zzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kme=a("code"),eQo=o("model.train()"),oQo=l(),Zme=a("p"),rQo=o("Examples:"),tQo=l(),f(cA.$$.fragment),QRe=l(),Wd=a("h2"),Y2=a("a"),ege=a("span"),f(fA.$$.fragment),aQo=l(),oge=a("span"),nQo=o("AutoModelForAudioXVector"),WRe=l(),gr=a("div"),f(mA.$$.fragment),sQo=l(),Hd=a("p"),lQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),yG=a("a"),iQo=o("from_pretrained()"),dQo=o(" class method or the "),LG=a("a"),cQo=o("from_config()"),fQo=o(` class
method.`),mQo=l(),gA=a("p"),gQo=o("This class cannot be instantiated directly using "),rge=a("code"),hQo=o("__init__()"),pQo=o(" (throws an error)."),_Qo=l(),lt=a("div"),f(hA.$$.fragment),uQo=l(),tge=a("p"),bQo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),FQo=l(),Ud=a("p"),vQo=o(`Note:
Loading a model from its configuration file does `),age=a("strong"),TQo=o("not"),MQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xG=a("a"),EQo=o("from_pretrained()"),CQo=o(" to load the model weights."),wQo=l(),nge=a("p"),AQo=o("Examples:"),yQo=l(),f(pA.$$.fragment),LQo=l(),eo=a("div"),f(_A.$$.fragment),xQo=l(),sge=a("p"),kQo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),SQo=l(),dn=a("p"),RQo=o("The model class to instantiate is selected based on the "),lge=a("code"),BQo=o("model_type"),PQo=o(` property of the config object (either
passed as an argument or loaded from `),ige=a("code"),$Qo=o("pretrained_model_name_or_path"),IQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dge=a("code"),qQo=o("pretrained_model_name_or_path"),NQo=o(":"),jQo=l(),cn=a("ul"),K2=a("li"),cge=a("strong"),DQo=o("data2vec-audio"),GQo=o(" \u2014 "),kG=a("a"),OQo=o("Data2VecAudioForXVector"),VQo=o(" (Data2VecAudio model)"),XQo=l(),Z2=a("li"),fge=a("strong"),zQo=o("unispeech-sat"),QQo=o(" \u2014 "),SG=a("a"),WQo=o("UniSpeechSatForXVector"),HQo=o(" (UniSpeechSat model)"),UQo=l(),eF=a("li"),mge=a("strong"),JQo=o("wav2vec2"),YQo=o(" \u2014 "),RG=a("a"),KQo=o("Wav2Vec2ForXVector"),ZQo=o(" (Wav2Vec2 model)"),eWo=l(),oF=a("li"),gge=a("strong"),oWo=o("wavlm"),rWo=o(" \u2014 "),BG=a("a"),tWo=o("WavLMForXVector"),aWo=o(" (WavLM model)"),nWo=l(),rF=a("p"),sWo=o("The model is set in evaluation mode by default using "),hge=a("code"),lWo=o("model.eval()"),iWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pge=a("code"),dWo=o("model.train()"),cWo=l(),_ge=a("p"),fWo=o("Examples:"),mWo=l(),f(uA.$$.fragment),HRe=l(),Jd=a("h2"),tF=a("a"),uge=a("span"),f(bA.$$.fragment),gWo=l(),bge=a("span"),hWo=o("AutoModelForMaskedImageModeling"),URe=l(),hr=a("div"),f(FA.$$.fragment),pWo=l(),Yd=a("p"),_Wo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),PG=a("a"),uWo=o("from_pretrained()"),bWo=o(" class method or the "),$G=a("a"),FWo=o("from_config()"),vWo=o(` class
method.`),TWo=l(),vA=a("p"),MWo=o("This class cannot be instantiated directly using "),Fge=a("code"),EWo=o("__init__()"),CWo=o(" (throws an error)."),wWo=l(),it=a("div"),f(TA.$$.fragment),AWo=l(),vge=a("p"),yWo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),LWo=l(),Kd=a("p"),xWo=o(`Note:
Loading a model from its configuration file does `),Tge=a("strong"),kWo=o("not"),SWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IG=a("a"),RWo=o("from_pretrained()"),BWo=o(" to load the model weights."),PWo=l(),Mge=a("p"),$Wo=o("Examples:"),IWo=l(),f(MA.$$.fragment),qWo=l(),oo=a("div"),f(EA.$$.fragment),NWo=l(),Ege=a("p"),jWo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),DWo=l(),fn=a("p"),GWo=o("The model class to instantiate is selected based on the "),Cge=a("code"),OWo=o("model_type"),VWo=o(` property of the config object (either
passed as an argument or loaded from `),wge=a("code"),XWo=o("pretrained_model_name_or_path"),zWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Age=a("code"),QWo=o("pretrained_model_name_or_path"),WWo=o(":"),HWo=l(),Zd=a("ul"),aF=a("li"),yge=a("strong"),UWo=o("deit"),JWo=o(" \u2014 "),qG=a("a"),YWo=o("DeiTForMaskedImageModeling"),KWo=o(" (DeiT model)"),ZWo=l(),nF=a("li"),Lge=a("strong"),eHo=o("swin"),oHo=o(" \u2014 "),NG=a("a"),rHo=o("SwinForMaskedImageModeling"),tHo=o(" (Swin model)"),aHo=l(),sF=a("li"),xge=a("strong"),nHo=o("vit"),sHo=o(" \u2014 "),jG=a("a"),lHo=o("ViTForMaskedImageModeling"),iHo=o(" (ViT model)"),dHo=l(),lF=a("p"),cHo=o("The model is set in evaluation mode by default using "),kge=a("code"),fHo=o("model.eval()"),mHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sge=a("code"),gHo=o("model.train()"),hHo=l(),Rge=a("p"),pHo=o("Examples:"),_Ho=l(),f(CA.$$.fragment),JRe=l(),ec=a("h2"),iF=a("a"),Bge=a("span"),f(wA.$$.fragment),uHo=l(),Pge=a("span"),bHo=o("AutoModelForObjectDetection"),YRe=l(),pr=a("div"),f(AA.$$.fragment),FHo=l(),oc=a("p"),vHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),DG=a("a"),THo=o("from_pretrained()"),MHo=o(" class method or the "),GG=a("a"),EHo=o("from_config()"),CHo=o(` class
method.`),wHo=l(),yA=a("p"),AHo=o("This class cannot be instantiated directly using "),$ge=a("code"),yHo=o("__init__()"),LHo=o(" (throws an error)."),xHo=l(),dt=a("div"),f(LA.$$.fragment),kHo=l(),Ige=a("p"),SHo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),RHo=l(),rc=a("p"),BHo=o(`Note:
Loading a model from its configuration file does `),qge=a("strong"),PHo=o("not"),$Ho=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OG=a("a"),IHo=o("from_pretrained()"),qHo=o(" to load the model weights."),NHo=l(),Nge=a("p"),jHo=o("Examples:"),DHo=l(),f(xA.$$.fragment),GHo=l(),ro=a("div"),f(kA.$$.fragment),OHo=l(),jge=a("p"),VHo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),XHo=l(),mn=a("p"),zHo=o("The model class to instantiate is selected based on the "),Dge=a("code"),QHo=o("model_type"),WHo=o(` property of the config object (either
passed as an argument or loaded from `),Gge=a("code"),HHo=o("pretrained_model_name_or_path"),UHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oge=a("code"),JHo=o("pretrained_model_name_or_path"),YHo=o(":"),KHo=l(),Vge=a("ul"),dF=a("li"),Xge=a("strong"),ZHo=o("detr"),eUo=o(" \u2014 "),VG=a("a"),oUo=o("DetrForObjectDetection"),rUo=o(" (DETR model)"),tUo=l(),cF=a("p"),aUo=o("The model is set in evaluation mode by default using "),zge=a("code"),nUo=o("model.eval()"),sUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qge=a("code"),lUo=o("model.train()"),iUo=l(),Wge=a("p"),dUo=o("Examples:"),cUo=l(),f(SA.$$.fragment),KRe=l(),tc=a("h2"),fF=a("a"),Hge=a("span"),f(RA.$$.fragment),fUo=l(),Uge=a("span"),mUo=o("AutoModelForImageSegmentation"),ZRe=l(),_r=a("div"),f(BA.$$.fragment),gUo=l(),ac=a("p"),hUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),XG=a("a"),pUo=o("from_pretrained()"),_Uo=o(" class method or the "),zG=a("a"),uUo=o("from_config()"),bUo=o(` class
method.`),FUo=l(),PA=a("p"),vUo=o("This class cannot be instantiated directly using "),Jge=a("code"),TUo=o("__init__()"),MUo=o(" (throws an error)."),EUo=l(),ct=a("div"),f($A.$$.fragment),CUo=l(),Yge=a("p"),wUo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),AUo=l(),nc=a("p"),yUo=o(`Note:
Loading a model from its configuration file does `),Kge=a("strong"),LUo=o("not"),xUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QG=a("a"),kUo=o("from_pretrained()"),SUo=o(" to load the model weights."),RUo=l(),Zge=a("p"),BUo=o("Examples:"),PUo=l(),f(IA.$$.fragment),$Uo=l(),to=a("div"),f(qA.$$.fragment),IUo=l(),ehe=a("p"),qUo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),NUo=l(),gn=a("p"),jUo=o("The model class to instantiate is selected based on the "),ohe=a("code"),DUo=o("model_type"),GUo=o(` property of the config object (either
passed as an argument or loaded from `),rhe=a("code"),OUo=o("pretrained_model_name_or_path"),VUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),the=a("code"),XUo=o("pretrained_model_name_or_path"),zUo=o(":"),QUo=l(),ahe=a("ul"),mF=a("li"),nhe=a("strong"),WUo=o("detr"),HUo=o(" \u2014 "),WG=a("a"),UUo=o("DetrForSegmentation"),JUo=o(" (DETR model)"),YUo=l(),gF=a("p"),KUo=o("The model is set in evaluation mode by default using "),she=a("code"),ZUo=o("model.eval()"),eJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lhe=a("code"),oJo=o("model.train()"),rJo=l(),ihe=a("p"),tJo=o("Examples:"),aJo=l(),f(NA.$$.fragment),eBe=l(),sc=a("h2"),hF=a("a"),dhe=a("span"),f(jA.$$.fragment),nJo=l(),che=a("span"),sJo=o("AutoModelForSemanticSegmentation"),oBe=l(),ur=a("div"),f(DA.$$.fragment),lJo=l(),lc=a("p"),iJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),HG=a("a"),dJo=o("from_pretrained()"),cJo=o(" class method or the "),UG=a("a"),fJo=o("from_config()"),mJo=o(` class
method.`),gJo=l(),GA=a("p"),hJo=o("This class cannot be instantiated directly using "),fhe=a("code"),pJo=o("__init__()"),_Jo=o(" (throws an error)."),uJo=l(),ft=a("div"),f(OA.$$.fragment),bJo=l(),mhe=a("p"),FJo=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),vJo=l(),ic=a("p"),TJo=o(`Note:
Loading a model from its configuration file does `),ghe=a("strong"),MJo=o("not"),EJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JG=a("a"),CJo=o("from_pretrained()"),wJo=o(" to load the model weights."),AJo=l(),hhe=a("p"),yJo=o("Examples:"),LJo=l(),f(VA.$$.fragment),xJo=l(),ao=a("div"),f(XA.$$.fragment),kJo=l(),phe=a("p"),SJo=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),RJo=l(),hn=a("p"),BJo=o("The model class to instantiate is selected based on the "),_he=a("code"),PJo=o("model_type"),$Jo=o(` property of the config object (either
passed as an argument or loaded from `),uhe=a("code"),IJo=o("pretrained_model_name_or_path"),qJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bhe=a("code"),NJo=o("pretrained_model_name_or_path"),jJo=o(":"),DJo=l(),dc=a("ul"),pF=a("li"),Fhe=a("strong"),GJo=o("beit"),OJo=o(" \u2014 "),YG=a("a"),VJo=o("BeitForSemanticSegmentation"),XJo=o(" (BEiT model)"),zJo=l(),_F=a("li"),vhe=a("strong"),QJo=o("dpt"),WJo=o(" \u2014 "),KG=a("a"),HJo=o("DPTForSemanticSegmentation"),UJo=o(" (DPT model)"),JJo=l(),uF=a("li"),The=a("strong"),YJo=o("segformer"),KJo=o(" \u2014 "),ZG=a("a"),ZJo=o("SegformerForSemanticSegmentation"),eYo=o(" (SegFormer model)"),oYo=l(),bF=a("p"),rYo=o("The model is set in evaluation mode by default using "),Mhe=a("code"),tYo=o("model.eval()"),aYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ehe=a("code"),nYo=o("model.train()"),sYo=l(),Che=a("p"),lYo=o("Examples:"),iYo=l(),f(zA.$$.fragment),rBe=l(),cc=a("h2"),FF=a("a"),whe=a("span"),f(QA.$$.fragment),dYo=l(),Ahe=a("span"),cYo=o("AutoModelForInstanceSegmentation"),tBe=l(),br=a("div"),f(WA.$$.fragment),fYo=l(),fc=a("p"),mYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),eO=a("a"),gYo=o("from_pretrained()"),hYo=o(" class method or the "),oO=a("a"),pYo=o("from_config()"),_Yo=o(` class
method.`),uYo=l(),HA=a("p"),bYo=o("This class cannot be instantiated directly using "),yhe=a("code"),FYo=o("__init__()"),vYo=o(" (throws an error)."),TYo=l(),mt=a("div"),f(UA.$$.fragment),MYo=l(),Lhe=a("p"),EYo=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),CYo=l(),mc=a("p"),wYo=o(`Note:
Loading a model from its configuration file does `),xhe=a("strong"),AYo=o("not"),yYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rO=a("a"),LYo=o("from_pretrained()"),xYo=o(" to load the model weights."),kYo=l(),khe=a("p"),SYo=o("Examples:"),RYo=l(),f(JA.$$.fragment),BYo=l(),no=a("div"),f(YA.$$.fragment),PYo=l(),She=a("p"),$Yo=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),IYo=l(),pn=a("p"),qYo=o("The model class to instantiate is selected based on the "),Rhe=a("code"),NYo=o("model_type"),jYo=o(` property of the config object (either
passed as an argument or loaded from `),Bhe=a("code"),DYo=o("pretrained_model_name_or_path"),GYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Phe=a("code"),OYo=o("pretrained_model_name_or_path"),VYo=o(":"),XYo=l(),$he=a("ul"),vF=a("li"),Ihe=a("strong"),zYo=o("maskformer"),QYo=o(" \u2014 "),tO=a("a"),WYo=o("MaskFormerForInstanceSegmentation"),HYo=o(" (MaskFormer model)"),UYo=l(),TF=a("p"),JYo=o("The model is set in evaluation mode by default using "),qhe=a("code"),YYo=o("model.eval()"),KYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nhe=a("code"),ZYo=o("model.train()"),eKo=l(),jhe=a("p"),oKo=o("Examples:"),rKo=l(),f(KA.$$.fragment),aBe=l(),gc=a("h2"),MF=a("a"),Dhe=a("span"),f(ZA.$$.fragment),tKo=l(),Ghe=a("span"),aKo=o("TFAutoModel"),nBe=l(),Fr=a("div"),f(e0.$$.fragment),nKo=l(),hc=a("p"),sKo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),aO=a("a"),lKo=o("from_pretrained()"),iKo=o(" class method or the "),nO=a("a"),dKo=o("from_config()"),cKo=o(` class
method.`),fKo=l(),o0=a("p"),mKo=o("This class cannot be instantiated directly using "),Ohe=a("code"),gKo=o("__init__()"),hKo=o(" (throws an error)."),pKo=l(),gt=a("div"),f(r0.$$.fragment),_Ko=l(),Vhe=a("p"),uKo=o("Instantiates one of the base model classes of the library from a configuration."),bKo=l(),pc=a("p"),FKo=o(`Note:
Loading a model from its configuration file does `),Xhe=a("strong"),vKo=o("not"),TKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sO=a("a"),MKo=o("from_pretrained()"),EKo=o(" to load the model weights."),CKo=l(),zhe=a("p"),wKo=o("Examples:"),AKo=l(),f(t0.$$.fragment),yKo=l(),ho=a("div"),f(a0.$$.fragment),LKo=l(),Qhe=a("p"),xKo=o("Instantiate one of the base model classes of the library from a pretrained model."),kKo=l(),_n=a("p"),SKo=o("The model class to instantiate is selected based on the "),Whe=a("code"),RKo=o("model_type"),BKo=o(` property of the config object (either
passed as an argument or loaded from `),Hhe=a("code"),PKo=o("pretrained_model_name_or_path"),$Ko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uhe=a("code"),IKo=o("pretrained_model_name_or_path"),qKo=o(":"),NKo=l(),x=a("ul"),EF=a("li"),Jhe=a("strong"),jKo=o("albert"),DKo=o(" \u2014 "),lO=a("a"),GKo=o("TFAlbertModel"),OKo=o(" (ALBERT model)"),VKo=l(),CF=a("li"),Yhe=a("strong"),XKo=o("bart"),zKo=o(" \u2014 "),iO=a("a"),QKo=o("TFBartModel"),WKo=o(" (BART model)"),HKo=l(),wF=a("li"),Khe=a("strong"),UKo=o("bert"),JKo=o(" \u2014 "),dO=a("a"),YKo=o("TFBertModel"),KKo=o(" (BERT model)"),ZKo=l(),AF=a("li"),Zhe=a("strong"),eZo=o("blenderbot"),oZo=o(" \u2014 "),cO=a("a"),rZo=o("TFBlenderbotModel"),tZo=o(" (Blenderbot model)"),aZo=l(),yF=a("li"),epe=a("strong"),nZo=o("blenderbot-small"),sZo=o(" \u2014 "),fO=a("a"),lZo=o("TFBlenderbotSmallModel"),iZo=o(" (BlenderbotSmall model)"),dZo=l(),LF=a("li"),ope=a("strong"),cZo=o("camembert"),fZo=o(" \u2014 "),mO=a("a"),mZo=o("TFCamembertModel"),gZo=o(" (CamemBERT model)"),hZo=l(),xF=a("li"),rpe=a("strong"),pZo=o("clip"),_Zo=o(" \u2014 "),gO=a("a"),uZo=o("TFCLIPModel"),bZo=o(" (CLIP model)"),FZo=l(),kF=a("li"),tpe=a("strong"),vZo=o("convbert"),TZo=o(" \u2014 "),hO=a("a"),MZo=o("TFConvBertModel"),EZo=o(" (ConvBERT model)"),CZo=l(),SF=a("li"),ape=a("strong"),wZo=o("convnext"),AZo=o(" \u2014 "),pO=a("a"),yZo=o("TFConvNextModel"),LZo=o(" (ConvNext model)"),xZo=l(),RF=a("li"),npe=a("strong"),kZo=o("ctrl"),SZo=o(" \u2014 "),_O=a("a"),RZo=o("TFCTRLModel"),BZo=o(" (CTRL model)"),PZo=l(),BF=a("li"),spe=a("strong"),$Zo=o("deberta"),IZo=o(" \u2014 "),uO=a("a"),qZo=o("TFDebertaModel"),NZo=o(" (DeBERTa model)"),jZo=l(),PF=a("li"),lpe=a("strong"),DZo=o("deberta-v2"),GZo=o(" \u2014 "),bO=a("a"),OZo=o("TFDebertaV2Model"),VZo=o(" (DeBERTa-v2 model)"),XZo=l(),$F=a("li"),ipe=a("strong"),zZo=o("distilbert"),QZo=o(" \u2014 "),FO=a("a"),WZo=o("TFDistilBertModel"),HZo=o(" (DistilBERT model)"),UZo=l(),IF=a("li"),dpe=a("strong"),JZo=o("dpr"),YZo=o(" \u2014 "),vO=a("a"),KZo=o("TFDPRQuestionEncoder"),ZZo=o(" (DPR model)"),eer=l(),qF=a("li"),cpe=a("strong"),oer=o("electra"),rer=o(" \u2014 "),TO=a("a"),ter=o("TFElectraModel"),aer=o(" (ELECTRA model)"),ner=l(),NF=a("li"),fpe=a("strong"),ser=o("flaubert"),ler=o(" \u2014 "),MO=a("a"),ier=o("TFFlaubertModel"),der=o(" (FlauBERT model)"),cer=l(),Gs=a("li"),mpe=a("strong"),fer=o("funnel"),mer=o(" \u2014 "),EO=a("a"),ger=o("TFFunnelModel"),her=o(" or "),CO=a("a"),per=o("TFFunnelBaseModel"),_er=o(" (Funnel Transformer model)"),uer=l(),jF=a("li"),gpe=a("strong"),ber=o("gpt2"),Fer=o(" \u2014 "),wO=a("a"),ver=o("TFGPT2Model"),Ter=o(" (OpenAI GPT-2 model)"),Mer=l(),DF=a("li"),hpe=a("strong"),Eer=o("gptj"),Cer=o(" \u2014 "),AO=a("a"),wer=o("TFGPTJModel"),Aer=o(" (GPT-J model)"),yer=l(),GF=a("li"),ppe=a("strong"),Ler=o("hubert"),xer=o(" \u2014 "),yO=a("a"),ker=o("TFHubertModel"),Ser=o(" (Hubert model)"),Rer=l(),OF=a("li"),_pe=a("strong"),Ber=o("layoutlm"),Per=o(" \u2014 "),LO=a("a"),$er=o("TFLayoutLMModel"),Ier=o(" (LayoutLM model)"),qer=l(),VF=a("li"),upe=a("strong"),Ner=o("led"),jer=o(" \u2014 "),xO=a("a"),Der=o("TFLEDModel"),Ger=o(" (LED model)"),Oer=l(),XF=a("li"),bpe=a("strong"),Ver=o("longformer"),Xer=o(" \u2014 "),kO=a("a"),zer=o("TFLongformerModel"),Qer=o(" (Longformer model)"),Wer=l(),zF=a("li"),Fpe=a("strong"),Her=o("lxmert"),Uer=o(" \u2014 "),SO=a("a"),Jer=o("TFLxmertModel"),Yer=o(" (LXMERT model)"),Ker=l(),QF=a("li"),vpe=a("strong"),Zer=o("marian"),eor=o(" \u2014 "),RO=a("a"),oor=o("TFMarianModel"),ror=o(" (Marian model)"),tor=l(),WF=a("li"),Tpe=a("strong"),aor=o("mbart"),nor=o(" \u2014 "),BO=a("a"),sor=o("TFMBartModel"),lor=o(" (mBART model)"),ior=l(),HF=a("li"),Mpe=a("strong"),dor=o("mobilebert"),cor=o(" \u2014 "),PO=a("a"),mor=o("TFMobileBertModel"),gor=o(" (MobileBERT model)"),hor=l(),UF=a("li"),Epe=a("strong"),por=o("mpnet"),_or=o(" \u2014 "),$O=a("a"),uor=o("TFMPNetModel"),bor=o(" (MPNet model)"),For=l(),JF=a("li"),Cpe=a("strong"),vor=o("mt5"),Tor=o(" \u2014 "),IO=a("a"),Mor=o("TFMT5Model"),Eor=o(" (mT5 model)"),Cor=l(),YF=a("li"),wpe=a("strong"),wor=o("openai-gpt"),Aor=o(" \u2014 "),qO=a("a"),yor=o("TFOpenAIGPTModel"),Lor=o(" (OpenAI GPT model)"),xor=l(),KF=a("li"),Ape=a("strong"),kor=o("pegasus"),Sor=o(" \u2014 "),NO=a("a"),Ror=o("TFPegasusModel"),Bor=o(" (Pegasus model)"),Por=l(),ZF=a("li"),ype=a("strong"),$or=o("rembert"),Ior=o(" \u2014 "),jO=a("a"),qor=o("TFRemBertModel"),Nor=o(" (RemBERT model)"),jor=l(),ev=a("li"),Lpe=a("strong"),Dor=o("roberta"),Gor=o(" \u2014 "),DO=a("a"),Oor=o("TFRobertaModel"),Vor=o(" (RoBERTa model)"),Xor=l(),ov=a("li"),xpe=a("strong"),zor=o("roformer"),Qor=o(" \u2014 "),GO=a("a"),Wor=o("TFRoFormerModel"),Hor=o(" (RoFormer model)"),Uor=l(),rv=a("li"),kpe=a("strong"),Jor=o("speech_to_text"),Yor=o(" \u2014 "),OO=a("a"),Kor=o("TFSpeech2TextModel"),Zor=o(" (Speech2Text model)"),err=l(),tv=a("li"),Spe=a("strong"),orr=o("t5"),rrr=o(" \u2014 "),VO=a("a"),trr=o("TFT5Model"),arr=o(" (T5 model)"),nrr=l(),av=a("li"),Rpe=a("strong"),srr=o("tapas"),lrr=o(" \u2014 "),XO=a("a"),irr=o("TFTapasModel"),drr=o(" (TAPAS model)"),crr=l(),nv=a("li"),Bpe=a("strong"),frr=o("transfo-xl"),mrr=o(" \u2014 "),zO=a("a"),grr=o("TFTransfoXLModel"),hrr=o(" (Transformer-XL model)"),prr=l(),sv=a("li"),Ppe=a("strong"),_rr=o("vit"),urr=o(" \u2014 "),QO=a("a"),brr=o("TFViTModel"),Frr=o(" (ViT model)"),vrr=l(),lv=a("li"),$pe=a("strong"),Trr=o("vit_mae"),Mrr=o(" \u2014 "),WO=a("a"),Err=o("TFViTMAEModel"),Crr=o(" (ViTMAE model)"),wrr=l(),iv=a("li"),Ipe=a("strong"),Arr=o("wav2vec2"),yrr=o(" \u2014 "),HO=a("a"),Lrr=o("TFWav2Vec2Model"),xrr=o(" (Wav2Vec2 model)"),krr=l(),dv=a("li"),qpe=a("strong"),Srr=o("xlm"),Rrr=o(" \u2014 "),UO=a("a"),Brr=o("TFXLMModel"),Prr=o(" (XLM model)"),$rr=l(),cv=a("li"),Npe=a("strong"),Irr=o("xlm-roberta"),qrr=o(" \u2014 "),JO=a("a"),Nrr=o("TFXLMRobertaModel"),jrr=o(" (XLM-RoBERTa model)"),Drr=l(),fv=a("li"),jpe=a("strong"),Grr=o("xlnet"),Orr=o(" \u2014 "),YO=a("a"),Vrr=o("TFXLNetModel"),Xrr=o(" (XLNet model)"),zrr=l(),Dpe=a("p"),Qrr=o("Examples:"),Wrr=l(),f(n0.$$.fragment),sBe=l(),_c=a("h2"),mv=a("a"),Gpe=a("span"),f(s0.$$.fragment),Hrr=l(),Ope=a("span"),Urr=o("TFAutoModelForPreTraining"),lBe=l(),vr=a("div"),f(l0.$$.fragment),Jrr=l(),uc=a("p"),Yrr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),KO=a("a"),Krr=o("from_pretrained()"),Zrr=o(" class method or the "),ZO=a("a"),etr=o("from_config()"),otr=o(` class
method.`),rtr=l(),i0=a("p"),ttr=o("This class cannot be instantiated directly using "),Vpe=a("code"),atr=o("__init__()"),ntr=o(" (throws an error)."),str=l(),ht=a("div"),f(d0.$$.fragment),ltr=l(),Xpe=a("p"),itr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),dtr=l(),bc=a("p"),ctr=o(`Note:
Loading a model from its configuration file does `),zpe=a("strong"),ftr=o("not"),mtr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eV=a("a"),gtr=o("from_pretrained()"),htr=o(" to load the model weights."),ptr=l(),Qpe=a("p"),_tr=o("Examples:"),utr=l(),f(c0.$$.fragment),btr=l(),po=a("div"),f(f0.$$.fragment),Ftr=l(),Wpe=a("p"),vtr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Ttr=l(),un=a("p"),Mtr=o("The model class to instantiate is selected based on the "),Hpe=a("code"),Etr=o("model_type"),Ctr=o(` property of the config object (either
passed as an argument or loaded from `),Upe=a("code"),wtr=o("pretrained_model_name_or_path"),Atr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jpe=a("code"),ytr=o("pretrained_model_name_or_path"),Ltr=o(":"),xtr=l(),H=a("ul"),gv=a("li"),Ype=a("strong"),ktr=o("albert"),Str=o(" \u2014 "),oV=a("a"),Rtr=o("TFAlbertForPreTraining"),Btr=o(" (ALBERT model)"),Ptr=l(),hv=a("li"),Kpe=a("strong"),$tr=o("bart"),Itr=o(" \u2014 "),rV=a("a"),qtr=o("TFBartForConditionalGeneration"),Ntr=o(" (BART model)"),jtr=l(),pv=a("li"),Zpe=a("strong"),Dtr=o("bert"),Gtr=o(" \u2014 "),tV=a("a"),Otr=o("TFBertForPreTraining"),Vtr=o(" (BERT model)"),Xtr=l(),_v=a("li"),e_e=a("strong"),ztr=o("camembert"),Qtr=o(" \u2014 "),aV=a("a"),Wtr=o("TFCamembertForMaskedLM"),Htr=o(" (CamemBERT model)"),Utr=l(),uv=a("li"),o_e=a("strong"),Jtr=o("ctrl"),Ytr=o(" \u2014 "),nV=a("a"),Ktr=o("TFCTRLLMHeadModel"),Ztr=o(" (CTRL model)"),ear=l(),bv=a("li"),r_e=a("strong"),oar=o("distilbert"),rar=o(" \u2014 "),sV=a("a"),tar=o("TFDistilBertForMaskedLM"),aar=o(" (DistilBERT model)"),nar=l(),Fv=a("li"),t_e=a("strong"),sar=o("electra"),lar=o(" \u2014 "),lV=a("a"),iar=o("TFElectraForPreTraining"),dar=o(" (ELECTRA model)"),car=l(),vv=a("li"),a_e=a("strong"),far=o("flaubert"),mar=o(" \u2014 "),iV=a("a"),gar=o("TFFlaubertWithLMHeadModel"),har=o(" (FlauBERT model)"),par=l(),Tv=a("li"),n_e=a("strong"),_ar=o("funnel"),uar=o(" \u2014 "),dV=a("a"),bar=o("TFFunnelForPreTraining"),Far=o(" (Funnel Transformer model)"),Tar=l(),Mv=a("li"),s_e=a("strong"),Mar=o("gpt2"),Ear=o(" \u2014 "),cV=a("a"),Car=o("TFGPT2LMHeadModel"),war=o(" (OpenAI GPT-2 model)"),Aar=l(),Ev=a("li"),l_e=a("strong"),yar=o("layoutlm"),Lar=o(" \u2014 "),fV=a("a"),xar=o("TFLayoutLMForMaskedLM"),kar=o(" (LayoutLM model)"),Sar=l(),Cv=a("li"),i_e=a("strong"),Rar=o("lxmert"),Bar=o(" \u2014 "),mV=a("a"),Par=o("TFLxmertForPreTraining"),$ar=o(" (LXMERT model)"),Iar=l(),wv=a("li"),d_e=a("strong"),qar=o("mobilebert"),Nar=o(" \u2014 "),gV=a("a"),jar=o("TFMobileBertForPreTraining"),Dar=o(" (MobileBERT model)"),Gar=l(),Av=a("li"),c_e=a("strong"),Oar=o("mpnet"),Var=o(" \u2014 "),hV=a("a"),Xar=o("TFMPNetForMaskedLM"),zar=o(" (MPNet model)"),Qar=l(),yv=a("li"),f_e=a("strong"),War=o("openai-gpt"),Har=o(" \u2014 "),pV=a("a"),Uar=o("TFOpenAIGPTLMHeadModel"),Jar=o(" (OpenAI GPT model)"),Yar=l(),Lv=a("li"),m_e=a("strong"),Kar=o("roberta"),Zar=o(" \u2014 "),_V=a("a"),enr=o("TFRobertaForMaskedLM"),onr=o(" (RoBERTa model)"),rnr=l(),xv=a("li"),g_e=a("strong"),tnr=o("t5"),anr=o(" \u2014 "),uV=a("a"),nnr=o("TFT5ForConditionalGeneration"),snr=o(" (T5 model)"),lnr=l(),kv=a("li"),h_e=a("strong"),inr=o("tapas"),dnr=o(" \u2014 "),bV=a("a"),cnr=o("TFTapasForMaskedLM"),fnr=o(" (TAPAS model)"),mnr=l(),Sv=a("li"),p_e=a("strong"),gnr=o("transfo-xl"),hnr=o(" \u2014 "),FV=a("a"),pnr=o("TFTransfoXLLMHeadModel"),_nr=o(" (Transformer-XL model)"),unr=l(),Rv=a("li"),__e=a("strong"),bnr=o("vit_mae"),Fnr=o(" \u2014 "),vV=a("a"),vnr=o("TFViTMAEForPreTraining"),Tnr=o(" (ViTMAE model)"),Mnr=l(),Bv=a("li"),u_e=a("strong"),Enr=o("xlm"),Cnr=o(" \u2014 "),TV=a("a"),wnr=o("TFXLMWithLMHeadModel"),Anr=o(" (XLM model)"),ynr=l(),Pv=a("li"),b_e=a("strong"),Lnr=o("xlm-roberta"),xnr=o(" \u2014 "),MV=a("a"),knr=o("TFXLMRobertaForMaskedLM"),Snr=o(" (XLM-RoBERTa model)"),Rnr=l(),$v=a("li"),F_e=a("strong"),Bnr=o("xlnet"),Pnr=o(" \u2014 "),EV=a("a"),$nr=o("TFXLNetLMHeadModel"),Inr=o(" (XLNet model)"),qnr=l(),v_e=a("p"),Nnr=o("Examples:"),jnr=l(),f(m0.$$.fragment),iBe=l(),Fc=a("h2"),Iv=a("a"),T_e=a("span"),f(g0.$$.fragment),Dnr=l(),M_e=a("span"),Gnr=o("TFAutoModelForCausalLM"),dBe=l(),Tr=a("div"),f(h0.$$.fragment),Onr=l(),vc=a("p"),Vnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),CV=a("a"),Xnr=o("from_pretrained()"),znr=o(" class method or the "),wV=a("a"),Qnr=o("from_config()"),Wnr=o(` class
method.`),Hnr=l(),p0=a("p"),Unr=o("This class cannot be instantiated directly using "),E_e=a("code"),Jnr=o("__init__()"),Ynr=o(" (throws an error)."),Knr=l(),pt=a("div"),f(_0.$$.fragment),Znr=l(),C_e=a("p"),esr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),osr=l(),Tc=a("p"),rsr=o(`Note:
Loading a model from its configuration file does `),w_e=a("strong"),tsr=o("not"),asr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AV=a("a"),nsr=o("from_pretrained()"),ssr=o(" to load the model weights."),lsr=l(),A_e=a("p"),isr=o("Examples:"),dsr=l(),f(u0.$$.fragment),csr=l(),_o=a("div"),f(b0.$$.fragment),fsr=l(),y_e=a("p"),msr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),gsr=l(),bn=a("p"),hsr=o("The model class to instantiate is selected based on the "),L_e=a("code"),psr=o("model_type"),_sr=o(` property of the config object (either
passed as an argument or loaded from `),x_e=a("code"),usr=o("pretrained_model_name_or_path"),bsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k_e=a("code"),Fsr=o("pretrained_model_name_or_path"),vsr=o(":"),Tsr=l(),ce=a("ul"),qv=a("li"),S_e=a("strong"),Msr=o("bert"),Esr=o(" \u2014 "),yV=a("a"),Csr=o("TFBertLMHeadModel"),wsr=o(" (BERT model)"),Asr=l(),Nv=a("li"),R_e=a("strong"),ysr=o("camembert"),Lsr=o(" \u2014 "),LV=a("a"),xsr=o("TFCamembertForCausalLM"),ksr=o(" (CamemBERT model)"),Ssr=l(),jv=a("li"),B_e=a("strong"),Rsr=o("ctrl"),Bsr=o(" \u2014 "),xV=a("a"),Psr=o("TFCTRLLMHeadModel"),$sr=o(" (CTRL model)"),Isr=l(),Dv=a("li"),P_e=a("strong"),qsr=o("gpt2"),Nsr=o(" \u2014 "),kV=a("a"),jsr=o("TFGPT2LMHeadModel"),Dsr=o(" (OpenAI GPT-2 model)"),Gsr=l(),Gv=a("li"),$_e=a("strong"),Osr=o("gptj"),Vsr=o(" \u2014 "),SV=a("a"),Xsr=o("TFGPTJForCausalLM"),zsr=o(" (GPT-J model)"),Qsr=l(),Ov=a("li"),I_e=a("strong"),Wsr=o("openai-gpt"),Hsr=o(" \u2014 "),RV=a("a"),Usr=o("TFOpenAIGPTLMHeadModel"),Jsr=o(" (OpenAI GPT model)"),Ysr=l(),Vv=a("li"),q_e=a("strong"),Ksr=o("rembert"),Zsr=o(" \u2014 "),BV=a("a"),elr=o("TFRemBertForCausalLM"),olr=o(" (RemBERT model)"),rlr=l(),Xv=a("li"),N_e=a("strong"),tlr=o("roberta"),alr=o(" \u2014 "),PV=a("a"),nlr=o("TFRobertaForCausalLM"),slr=o(" (RoBERTa model)"),llr=l(),zv=a("li"),j_e=a("strong"),ilr=o("roformer"),dlr=o(" \u2014 "),$V=a("a"),clr=o("TFRoFormerForCausalLM"),flr=o(" (RoFormer model)"),mlr=l(),Qv=a("li"),D_e=a("strong"),glr=o("transfo-xl"),hlr=o(" \u2014 "),IV=a("a"),plr=o("TFTransfoXLLMHeadModel"),_lr=o(" (Transformer-XL model)"),ulr=l(),Wv=a("li"),G_e=a("strong"),blr=o("xlm"),Flr=o(" \u2014 "),qV=a("a"),vlr=o("TFXLMWithLMHeadModel"),Tlr=o(" (XLM model)"),Mlr=l(),Hv=a("li"),O_e=a("strong"),Elr=o("xlnet"),Clr=o(" \u2014 "),NV=a("a"),wlr=o("TFXLNetLMHeadModel"),Alr=o(" (XLNet model)"),ylr=l(),V_e=a("p"),Llr=o("Examples:"),xlr=l(),f(F0.$$.fragment),cBe=l(),Mc=a("h2"),Uv=a("a"),X_e=a("span"),f(v0.$$.fragment),klr=l(),z_e=a("span"),Slr=o("TFAutoModelForImageClassification"),fBe=l(),Mr=a("div"),f(T0.$$.fragment),Rlr=l(),Ec=a("p"),Blr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),jV=a("a"),Plr=o("from_pretrained()"),$lr=o(" class method or the "),DV=a("a"),Ilr=o("from_config()"),qlr=o(` class
method.`),Nlr=l(),M0=a("p"),jlr=o("This class cannot be instantiated directly using "),Q_e=a("code"),Dlr=o("__init__()"),Glr=o(" (throws an error)."),Olr=l(),_t=a("div"),f(E0.$$.fragment),Vlr=l(),W_e=a("p"),Xlr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),zlr=l(),Cc=a("p"),Qlr=o(`Note:
Loading a model from its configuration file does `),H_e=a("strong"),Wlr=o("not"),Hlr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GV=a("a"),Ulr=o("from_pretrained()"),Jlr=o(" to load the model weights."),Ylr=l(),U_e=a("p"),Klr=o("Examples:"),Zlr=l(),f(C0.$$.fragment),eir=l(),uo=a("div"),f(w0.$$.fragment),oir=l(),J_e=a("p"),rir=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),tir=l(),Fn=a("p"),air=o("The model class to instantiate is selected based on the "),Y_e=a("code"),nir=o("model_type"),sir=o(` property of the config object (either
passed as an argument or loaded from `),K_e=a("code"),lir=o("pretrained_model_name_or_path"),iir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z_e=a("code"),dir=o("pretrained_model_name_or_path"),cir=o(":"),fir=l(),A0=a("ul"),Jv=a("li"),eue=a("strong"),mir=o("convnext"),gir=o(" \u2014 "),OV=a("a"),hir=o("TFConvNextForImageClassification"),pir=o(" (ConvNext model)"),_ir=l(),Yv=a("li"),oue=a("strong"),uir=o("vit"),bir=o(" \u2014 "),VV=a("a"),Fir=o("TFViTForImageClassification"),vir=o(" (ViT model)"),Tir=l(),rue=a("p"),Mir=o("Examples:"),Eir=l(),f(y0.$$.fragment),mBe=l(),wc=a("h2"),Kv=a("a"),tue=a("span"),f(L0.$$.fragment),Cir=l(),aue=a("span"),wir=o("TFAutoModelForMaskedLM"),gBe=l(),Er=a("div"),f(x0.$$.fragment),Air=l(),Ac=a("p"),yir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),XV=a("a"),Lir=o("from_pretrained()"),xir=o(" class method or the "),zV=a("a"),kir=o("from_config()"),Sir=o(` class
method.`),Rir=l(),k0=a("p"),Bir=o("This class cannot be instantiated directly using "),nue=a("code"),Pir=o("__init__()"),$ir=o(" (throws an error)."),Iir=l(),ut=a("div"),f(S0.$$.fragment),qir=l(),sue=a("p"),Nir=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),jir=l(),yc=a("p"),Dir=o(`Note:
Loading a model from its configuration file does `),lue=a("strong"),Gir=o("not"),Oir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QV=a("a"),Vir=o("from_pretrained()"),Xir=o(" to load the model weights."),zir=l(),iue=a("p"),Qir=o("Examples:"),Wir=l(),f(R0.$$.fragment),Hir=l(),bo=a("div"),f(B0.$$.fragment),Uir=l(),due=a("p"),Jir=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Yir=l(),vn=a("p"),Kir=o("The model class to instantiate is selected based on the "),cue=a("code"),Zir=o("model_type"),edr=o(` property of the config object (either
passed as an argument or loaded from `),fue=a("code"),odr=o("pretrained_model_name_or_path"),rdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mue=a("code"),tdr=o("pretrained_model_name_or_path"),adr=o(":"),ndr=l(),J=a("ul"),Zv=a("li"),gue=a("strong"),sdr=o("albert"),ldr=o(" \u2014 "),WV=a("a"),idr=o("TFAlbertForMaskedLM"),ddr=o(" (ALBERT model)"),cdr=l(),e6=a("li"),hue=a("strong"),fdr=o("bert"),mdr=o(" \u2014 "),HV=a("a"),gdr=o("TFBertForMaskedLM"),hdr=o(" (BERT model)"),pdr=l(),o6=a("li"),pue=a("strong"),_dr=o("camembert"),udr=o(" \u2014 "),UV=a("a"),bdr=o("TFCamembertForMaskedLM"),Fdr=o(" (CamemBERT model)"),vdr=l(),r6=a("li"),_ue=a("strong"),Tdr=o("convbert"),Mdr=o(" \u2014 "),JV=a("a"),Edr=o("TFConvBertForMaskedLM"),Cdr=o(" (ConvBERT model)"),wdr=l(),t6=a("li"),uue=a("strong"),Adr=o("deberta"),ydr=o(" \u2014 "),YV=a("a"),Ldr=o("TFDebertaForMaskedLM"),xdr=o(" (DeBERTa model)"),kdr=l(),a6=a("li"),bue=a("strong"),Sdr=o("deberta-v2"),Rdr=o(" \u2014 "),KV=a("a"),Bdr=o("TFDebertaV2ForMaskedLM"),Pdr=o(" (DeBERTa-v2 model)"),$dr=l(),n6=a("li"),Fue=a("strong"),Idr=o("distilbert"),qdr=o(" \u2014 "),ZV=a("a"),Ndr=o("TFDistilBertForMaskedLM"),jdr=o(" (DistilBERT model)"),Ddr=l(),s6=a("li"),vue=a("strong"),Gdr=o("electra"),Odr=o(" \u2014 "),eX=a("a"),Vdr=o("TFElectraForMaskedLM"),Xdr=o(" (ELECTRA model)"),zdr=l(),l6=a("li"),Tue=a("strong"),Qdr=o("flaubert"),Wdr=o(" \u2014 "),oX=a("a"),Hdr=o("TFFlaubertWithLMHeadModel"),Udr=o(" (FlauBERT model)"),Jdr=l(),i6=a("li"),Mue=a("strong"),Ydr=o("funnel"),Kdr=o(" \u2014 "),rX=a("a"),Zdr=o("TFFunnelForMaskedLM"),ecr=o(" (Funnel Transformer model)"),ocr=l(),d6=a("li"),Eue=a("strong"),rcr=o("layoutlm"),tcr=o(" \u2014 "),tX=a("a"),acr=o("TFLayoutLMForMaskedLM"),ncr=o(" (LayoutLM model)"),scr=l(),c6=a("li"),Cue=a("strong"),lcr=o("longformer"),icr=o(" \u2014 "),aX=a("a"),dcr=o("TFLongformerForMaskedLM"),ccr=o(" (Longformer model)"),fcr=l(),f6=a("li"),wue=a("strong"),mcr=o("mobilebert"),gcr=o(" \u2014 "),nX=a("a"),hcr=o("TFMobileBertForMaskedLM"),pcr=o(" (MobileBERT model)"),_cr=l(),m6=a("li"),Aue=a("strong"),ucr=o("mpnet"),bcr=o(" \u2014 "),sX=a("a"),Fcr=o("TFMPNetForMaskedLM"),vcr=o(" (MPNet model)"),Tcr=l(),g6=a("li"),yue=a("strong"),Mcr=o("rembert"),Ecr=o(" \u2014 "),lX=a("a"),Ccr=o("TFRemBertForMaskedLM"),wcr=o(" (RemBERT model)"),Acr=l(),h6=a("li"),Lue=a("strong"),ycr=o("roberta"),Lcr=o(" \u2014 "),iX=a("a"),xcr=o("TFRobertaForMaskedLM"),kcr=o(" (RoBERTa model)"),Scr=l(),p6=a("li"),xue=a("strong"),Rcr=o("roformer"),Bcr=o(" \u2014 "),dX=a("a"),Pcr=o("TFRoFormerForMaskedLM"),$cr=o(" (RoFormer model)"),Icr=l(),_6=a("li"),kue=a("strong"),qcr=o("tapas"),Ncr=o(" \u2014 "),cX=a("a"),jcr=o("TFTapasForMaskedLM"),Dcr=o(" (TAPAS model)"),Gcr=l(),u6=a("li"),Sue=a("strong"),Ocr=o("xlm"),Vcr=o(" \u2014 "),fX=a("a"),Xcr=o("TFXLMWithLMHeadModel"),zcr=o(" (XLM model)"),Qcr=l(),b6=a("li"),Rue=a("strong"),Wcr=o("xlm-roberta"),Hcr=o(" \u2014 "),mX=a("a"),Ucr=o("TFXLMRobertaForMaskedLM"),Jcr=o(" (XLM-RoBERTa model)"),Ycr=l(),Bue=a("p"),Kcr=o("Examples:"),Zcr=l(),f(P0.$$.fragment),hBe=l(),Lc=a("h2"),F6=a("a"),Pue=a("span"),f($0.$$.fragment),efr=l(),$ue=a("span"),ofr=o("TFAutoModelForSeq2SeqLM"),pBe=l(),Cr=a("div"),f(I0.$$.fragment),rfr=l(),xc=a("p"),tfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),gX=a("a"),afr=o("from_pretrained()"),nfr=o(" class method or the "),hX=a("a"),sfr=o("from_config()"),lfr=o(` class
method.`),ifr=l(),q0=a("p"),dfr=o("This class cannot be instantiated directly using "),Iue=a("code"),cfr=o("__init__()"),ffr=o(" (throws an error)."),mfr=l(),bt=a("div"),f(N0.$$.fragment),gfr=l(),que=a("p"),hfr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),pfr=l(),kc=a("p"),_fr=o(`Note:
Loading a model from its configuration file does `),Nue=a("strong"),ufr=o("not"),bfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pX=a("a"),Ffr=o("from_pretrained()"),vfr=o(" to load the model weights."),Tfr=l(),jue=a("p"),Mfr=o("Examples:"),Efr=l(),f(j0.$$.fragment),Cfr=l(),Fo=a("div"),f(D0.$$.fragment),wfr=l(),Due=a("p"),Afr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),yfr=l(),Tn=a("p"),Lfr=o("The model class to instantiate is selected based on the "),Gue=a("code"),xfr=o("model_type"),kfr=o(` property of the config object (either
passed as an argument or loaded from `),Oue=a("code"),Sfr=o("pretrained_model_name_or_path"),Rfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vue=a("code"),Bfr=o("pretrained_model_name_or_path"),Pfr=o(":"),$fr=l(),ue=a("ul"),v6=a("li"),Xue=a("strong"),Ifr=o("bart"),qfr=o(" \u2014 "),_X=a("a"),Nfr=o("TFBartForConditionalGeneration"),jfr=o(" (BART model)"),Dfr=l(),T6=a("li"),zue=a("strong"),Gfr=o("blenderbot"),Ofr=o(" \u2014 "),uX=a("a"),Vfr=o("TFBlenderbotForConditionalGeneration"),Xfr=o(" (Blenderbot model)"),zfr=l(),M6=a("li"),Que=a("strong"),Qfr=o("blenderbot-small"),Wfr=o(" \u2014 "),bX=a("a"),Hfr=o("TFBlenderbotSmallForConditionalGeneration"),Ufr=o(" (BlenderbotSmall model)"),Jfr=l(),E6=a("li"),Wue=a("strong"),Yfr=o("encoder-decoder"),Kfr=o(" \u2014 "),FX=a("a"),Zfr=o("TFEncoderDecoderModel"),emr=o(" (Encoder decoder model)"),omr=l(),C6=a("li"),Hue=a("strong"),rmr=o("led"),tmr=o(" \u2014 "),vX=a("a"),amr=o("TFLEDForConditionalGeneration"),nmr=o(" (LED model)"),smr=l(),w6=a("li"),Uue=a("strong"),lmr=o("marian"),imr=o(" \u2014 "),TX=a("a"),dmr=o("TFMarianMTModel"),cmr=o(" (Marian model)"),fmr=l(),A6=a("li"),Jue=a("strong"),mmr=o("mbart"),gmr=o(" \u2014 "),MX=a("a"),hmr=o("TFMBartForConditionalGeneration"),pmr=o(" (mBART model)"),_mr=l(),y6=a("li"),Yue=a("strong"),umr=o("mt5"),bmr=o(" \u2014 "),EX=a("a"),Fmr=o("TFMT5ForConditionalGeneration"),vmr=o(" (mT5 model)"),Tmr=l(),L6=a("li"),Kue=a("strong"),Mmr=o("pegasus"),Emr=o(" \u2014 "),CX=a("a"),Cmr=o("TFPegasusForConditionalGeneration"),wmr=o(" (Pegasus model)"),Amr=l(),x6=a("li"),Zue=a("strong"),ymr=o("t5"),Lmr=o(" \u2014 "),wX=a("a"),xmr=o("TFT5ForConditionalGeneration"),kmr=o(" (T5 model)"),Smr=l(),e1e=a("p"),Rmr=o("Examples:"),Bmr=l(),f(G0.$$.fragment),_Be=l(),Sc=a("h2"),k6=a("a"),o1e=a("span"),f(O0.$$.fragment),Pmr=l(),r1e=a("span"),$mr=o("TFAutoModelForSequenceClassification"),uBe=l(),wr=a("div"),f(V0.$$.fragment),Imr=l(),Rc=a("p"),qmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),AX=a("a"),Nmr=o("from_pretrained()"),jmr=o(" class method or the "),yX=a("a"),Dmr=o("from_config()"),Gmr=o(` class
method.`),Omr=l(),X0=a("p"),Vmr=o("This class cannot be instantiated directly using "),t1e=a("code"),Xmr=o("__init__()"),zmr=o(" (throws an error)."),Qmr=l(),Ft=a("div"),f(z0.$$.fragment),Wmr=l(),a1e=a("p"),Hmr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Umr=l(),Bc=a("p"),Jmr=o(`Note:
Loading a model from its configuration file does `),n1e=a("strong"),Ymr=o("not"),Kmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LX=a("a"),Zmr=o("from_pretrained()"),egr=o(" to load the model weights."),ogr=l(),s1e=a("p"),rgr=o("Examples:"),tgr=l(),f(Q0.$$.fragment),agr=l(),vo=a("div"),f(W0.$$.fragment),ngr=l(),l1e=a("p"),sgr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),lgr=l(),Mn=a("p"),igr=o("The model class to instantiate is selected based on the "),i1e=a("code"),dgr=o("model_type"),cgr=o(` property of the config object (either
passed as an argument or loaded from `),d1e=a("code"),fgr=o("pretrained_model_name_or_path"),mgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c1e=a("code"),ggr=o("pretrained_model_name_or_path"),hgr=o(":"),pgr=l(),V=a("ul"),S6=a("li"),f1e=a("strong"),_gr=o("albert"),ugr=o(" \u2014 "),xX=a("a"),bgr=o("TFAlbertForSequenceClassification"),Fgr=o(" (ALBERT model)"),vgr=l(),R6=a("li"),m1e=a("strong"),Tgr=o("bert"),Mgr=o(" \u2014 "),kX=a("a"),Egr=o("TFBertForSequenceClassification"),Cgr=o(" (BERT model)"),wgr=l(),B6=a("li"),g1e=a("strong"),Agr=o("camembert"),ygr=o(" \u2014 "),SX=a("a"),Lgr=o("TFCamembertForSequenceClassification"),xgr=o(" (CamemBERT model)"),kgr=l(),P6=a("li"),h1e=a("strong"),Sgr=o("convbert"),Rgr=o(" \u2014 "),RX=a("a"),Bgr=o("TFConvBertForSequenceClassification"),Pgr=o(" (ConvBERT model)"),$gr=l(),$6=a("li"),p1e=a("strong"),Igr=o("ctrl"),qgr=o(" \u2014 "),BX=a("a"),Ngr=o("TFCTRLForSequenceClassification"),jgr=o(" (CTRL model)"),Dgr=l(),I6=a("li"),_1e=a("strong"),Ggr=o("deberta"),Ogr=o(" \u2014 "),PX=a("a"),Vgr=o("TFDebertaForSequenceClassification"),Xgr=o(" (DeBERTa model)"),zgr=l(),q6=a("li"),u1e=a("strong"),Qgr=o("deberta-v2"),Wgr=o(" \u2014 "),$X=a("a"),Hgr=o("TFDebertaV2ForSequenceClassification"),Ugr=o(" (DeBERTa-v2 model)"),Jgr=l(),N6=a("li"),b1e=a("strong"),Ygr=o("distilbert"),Kgr=o(" \u2014 "),IX=a("a"),Zgr=o("TFDistilBertForSequenceClassification"),ehr=o(" (DistilBERT model)"),ohr=l(),j6=a("li"),F1e=a("strong"),rhr=o("electra"),thr=o(" \u2014 "),qX=a("a"),ahr=o("TFElectraForSequenceClassification"),nhr=o(" (ELECTRA model)"),shr=l(),D6=a("li"),v1e=a("strong"),lhr=o("flaubert"),ihr=o(" \u2014 "),NX=a("a"),dhr=o("TFFlaubertForSequenceClassification"),chr=o(" (FlauBERT model)"),fhr=l(),G6=a("li"),T1e=a("strong"),mhr=o("funnel"),ghr=o(" \u2014 "),jX=a("a"),hhr=o("TFFunnelForSequenceClassification"),phr=o(" (Funnel Transformer model)"),_hr=l(),O6=a("li"),M1e=a("strong"),uhr=o("gpt2"),bhr=o(" \u2014 "),DX=a("a"),Fhr=o("TFGPT2ForSequenceClassification"),vhr=o(" (OpenAI GPT-2 model)"),Thr=l(),V6=a("li"),E1e=a("strong"),Mhr=o("gptj"),Ehr=o(" \u2014 "),GX=a("a"),Chr=o("TFGPTJForSequenceClassification"),whr=o(" (GPT-J model)"),Ahr=l(),X6=a("li"),C1e=a("strong"),yhr=o("layoutlm"),Lhr=o(" \u2014 "),OX=a("a"),xhr=o("TFLayoutLMForSequenceClassification"),khr=o(" (LayoutLM model)"),Shr=l(),z6=a("li"),w1e=a("strong"),Rhr=o("longformer"),Bhr=o(" \u2014 "),VX=a("a"),Phr=o("TFLongformerForSequenceClassification"),$hr=o(" (Longformer model)"),Ihr=l(),Q6=a("li"),A1e=a("strong"),qhr=o("mobilebert"),Nhr=o(" \u2014 "),XX=a("a"),jhr=o("TFMobileBertForSequenceClassification"),Dhr=o(" (MobileBERT model)"),Ghr=l(),W6=a("li"),y1e=a("strong"),Ohr=o("mpnet"),Vhr=o(" \u2014 "),zX=a("a"),Xhr=o("TFMPNetForSequenceClassification"),zhr=o(" (MPNet model)"),Qhr=l(),H6=a("li"),L1e=a("strong"),Whr=o("openai-gpt"),Hhr=o(" \u2014 "),QX=a("a"),Uhr=o("TFOpenAIGPTForSequenceClassification"),Jhr=o(" (OpenAI GPT model)"),Yhr=l(),U6=a("li"),x1e=a("strong"),Khr=o("rembert"),Zhr=o(" \u2014 "),WX=a("a"),epr=o("TFRemBertForSequenceClassification"),opr=o(" (RemBERT model)"),rpr=l(),J6=a("li"),k1e=a("strong"),tpr=o("roberta"),apr=o(" \u2014 "),HX=a("a"),npr=o("TFRobertaForSequenceClassification"),spr=o(" (RoBERTa model)"),lpr=l(),Y6=a("li"),S1e=a("strong"),ipr=o("roformer"),dpr=o(" \u2014 "),UX=a("a"),cpr=o("TFRoFormerForSequenceClassification"),fpr=o(" (RoFormer model)"),mpr=l(),K6=a("li"),R1e=a("strong"),gpr=o("tapas"),hpr=o(" \u2014 "),JX=a("a"),ppr=o("TFTapasForSequenceClassification"),_pr=o(" (TAPAS model)"),upr=l(),Z6=a("li"),B1e=a("strong"),bpr=o("transfo-xl"),Fpr=o(" \u2014 "),YX=a("a"),vpr=o("TFTransfoXLForSequenceClassification"),Tpr=o(" (Transformer-XL model)"),Mpr=l(),eT=a("li"),P1e=a("strong"),Epr=o("xlm"),Cpr=o(" \u2014 "),KX=a("a"),wpr=o("TFXLMForSequenceClassification"),Apr=o(" (XLM model)"),ypr=l(),oT=a("li"),$1e=a("strong"),Lpr=o("xlm-roberta"),xpr=o(" \u2014 "),ZX=a("a"),kpr=o("TFXLMRobertaForSequenceClassification"),Spr=o(" (XLM-RoBERTa model)"),Rpr=l(),rT=a("li"),I1e=a("strong"),Bpr=o("xlnet"),Ppr=o(" \u2014 "),ez=a("a"),$pr=o("TFXLNetForSequenceClassification"),Ipr=o(" (XLNet model)"),qpr=l(),q1e=a("p"),Npr=o("Examples:"),jpr=l(),f(H0.$$.fragment),bBe=l(),Pc=a("h2"),tT=a("a"),N1e=a("span"),f(U0.$$.fragment),Dpr=l(),j1e=a("span"),Gpr=o("TFAutoModelForMultipleChoice"),FBe=l(),Ar=a("div"),f(J0.$$.fragment),Opr=l(),$c=a("p"),Vpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),oz=a("a"),Xpr=o("from_pretrained()"),zpr=o(" class method or the "),rz=a("a"),Qpr=o("from_config()"),Wpr=o(` class
method.`),Hpr=l(),Y0=a("p"),Upr=o("This class cannot be instantiated directly using "),D1e=a("code"),Jpr=o("__init__()"),Ypr=o(" (throws an error)."),Kpr=l(),vt=a("div"),f(K0.$$.fragment),Zpr=l(),G1e=a("p"),e_r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),o_r=l(),Ic=a("p"),r_r=o(`Note:
Loading a model from its configuration file does `),O1e=a("strong"),t_r=o("not"),a_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tz=a("a"),n_r=o("from_pretrained()"),s_r=o(" to load the model weights."),l_r=l(),V1e=a("p"),i_r=o("Examples:"),d_r=l(),f(Z0.$$.fragment),c_r=l(),To=a("div"),f(ey.$$.fragment),f_r=l(),X1e=a("p"),m_r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),g_r=l(),En=a("p"),h_r=o("The model class to instantiate is selected based on the "),z1e=a("code"),p_r=o("model_type"),__r=o(` property of the config object (either
passed as an argument or loaded from `),Q1e=a("code"),u_r=o("pretrained_model_name_or_path"),b_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W1e=a("code"),F_r=o("pretrained_model_name_or_path"),v_r=o(":"),T_r=l(),ne=a("ul"),aT=a("li"),H1e=a("strong"),M_r=o("albert"),E_r=o(" \u2014 "),az=a("a"),C_r=o("TFAlbertForMultipleChoice"),w_r=o(" (ALBERT model)"),A_r=l(),nT=a("li"),U1e=a("strong"),y_r=o("bert"),L_r=o(" \u2014 "),nz=a("a"),x_r=o("TFBertForMultipleChoice"),k_r=o(" (BERT model)"),S_r=l(),sT=a("li"),J1e=a("strong"),R_r=o("camembert"),B_r=o(" \u2014 "),sz=a("a"),P_r=o("TFCamembertForMultipleChoice"),$_r=o(" (CamemBERT model)"),I_r=l(),lT=a("li"),Y1e=a("strong"),q_r=o("convbert"),N_r=o(" \u2014 "),lz=a("a"),j_r=o("TFConvBertForMultipleChoice"),D_r=o(" (ConvBERT model)"),G_r=l(),iT=a("li"),K1e=a("strong"),O_r=o("distilbert"),V_r=o(" \u2014 "),iz=a("a"),X_r=o("TFDistilBertForMultipleChoice"),z_r=o(" (DistilBERT model)"),Q_r=l(),dT=a("li"),Z1e=a("strong"),W_r=o("electra"),H_r=o(" \u2014 "),dz=a("a"),U_r=o("TFElectraForMultipleChoice"),J_r=o(" (ELECTRA model)"),Y_r=l(),cT=a("li"),e4e=a("strong"),K_r=o("flaubert"),Z_r=o(" \u2014 "),cz=a("a"),eur=o("TFFlaubertForMultipleChoice"),our=o(" (FlauBERT model)"),rur=l(),fT=a("li"),o4e=a("strong"),tur=o("funnel"),aur=o(" \u2014 "),fz=a("a"),nur=o("TFFunnelForMultipleChoice"),sur=o(" (Funnel Transformer model)"),lur=l(),mT=a("li"),r4e=a("strong"),iur=o("longformer"),dur=o(" \u2014 "),mz=a("a"),cur=o("TFLongformerForMultipleChoice"),fur=o(" (Longformer model)"),mur=l(),gT=a("li"),t4e=a("strong"),gur=o("mobilebert"),hur=o(" \u2014 "),gz=a("a"),pur=o("TFMobileBertForMultipleChoice"),_ur=o(" (MobileBERT model)"),uur=l(),hT=a("li"),a4e=a("strong"),bur=o("mpnet"),Fur=o(" \u2014 "),hz=a("a"),vur=o("TFMPNetForMultipleChoice"),Tur=o(" (MPNet model)"),Mur=l(),pT=a("li"),n4e=a("strong"),Eur=o("rembert"),Cur=o(" \u2014 "),pz=a("a"),wur=o("TFRemBertForMultipleChoice"),Aur=o(" (RemBERT model)"),yur=l(),_T=a("li"),s4e=a("strong"),Lur=o("roberta"),xur=o(" \u2014 "),_z=a("a"),kur=o("TFRobertaForMultipleChoice"),Sur=o(" (RoBERTa model)"),Rur=l(),uT=a("li"),l4e=a("strong"),Bur=o("roformer"),Pur=o(" \u2014 "),uz=a("a"),$ur=o("TFRoFormerForMultipleChoice"),Iur=o(" (RoFormer model)"),qur=l(),bT=a("li"),i4e=a("strong"),Nur=o("xlm"),jur=o(" \u2014 "),bz=a("a"),Dur=o("TFXLMForMultipleChoice"),Gur=o(" (XLM model)"),Our=l(),FT=a("li"),d4e=a("strong"),Vur=o("xlm-roberta"),Xur=o(" \u2014 "),Fz=a("a"),zur=o("TFXLMRobertaForMultipleChoice"),Qur=o(" (XLM-RoBERTa model)"),Wur=l(),vT=a("li"),c4e=a("strong"),Hur=o("xlnet"),Uur=o(" \u2014 "),vz=a("a"),Jur=o("TFXLNetForMultipleChoice"),Yur=o(" (XLNet model)"),Kur=l(),f4e=a("p"),Zur=o("Examples:"),e1r=l(),f(oy.$$.fragment),vBe=l(),qc=a("h2"),TT=a("a"),m4e=a("span"),f(ry.$$.fragment),o1r=l(),g4e=a("span"),r1r=o("TFAutoModelForTableQuestionAnswering"),TBe=l(),yr=a("div"),f(ty.$$.fragment),t1r=l(),Nc=a("p"),a1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Tz=a("a"),n1r=o("from_pretrained()"),s1r=o(" class method or the "),Mz=a("a"),l1r=o("from_config()"),i1r=o(` class
method.`),d1r=l(),ay=a("p"),c1r=o("This class cannot be instantiated directly using "),h4e=a("code"),f1r=o("__init__()"),m1r=o(" (throws an error)."),g1r=l(),Tt=a("div"),f(ny.$$.fragment),h1r=l(),p4e=a("p"),p1r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),_1r=l(),jc=a("p"),u1r=o(`Note:
Loading a model from its configuration file does `),_4e=a("strong"),b1r=o("not"),F1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ez=a("a"),v1r=o("from_pretrained()"),T1r=o(" to load the model weights."),M1r=l(),u4e=a("p"),E1r=o("Examples:"),C1r=l(),f(sy.$$.fragment),w1r=l(),Mo=a("div"),f(ly.$$.fragment),A1r=l(),b4e=a("p"),y1r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),L1r=l(),Cn=a("p"),x1r=o("The model class to instantiate is selected based on the "),F4e=a("code"),k1r=o("model_type"),S1r=o(` property of the config object (either
passed as an argument or loaded from `),v4e=a("code"),R1r=o("pretrained_model_name_or_path"),B1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T4e=a("code"),P1r=o("pretrained_model_name_or_path"),$1r=o(":"),I1r=l(),M4e=a("ul"),MT=a("li"),E4e=a("strong"),q1r=o("tapas"),N1r=o(" \u2014 "),Cz=a("a"),j1r=o("TFTapasForQuestionAnswering"),D1r=o(" (TAPAS model)"),G1r=l(),C4e=a("p"),O1r=o("Examples:"),V1r=l(),f(iy.$$.fragment),MBe=l(),Dc=a("h2"),ET=a("a"),w4e=a("span"),f(dy.$$.fragment),X1r=l(),A4e=a("span"),z1r=o("TFAutoModelForTokenClassification"),EBe=l(),Lr=a("div"),f(cy.$$.fragment),Q1r=l(),Gc=a("p"),W1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),wz=a("a"),H1r=o("from_pretrained()"),U1r=o(" class method or the "),Az=a("a"),J1r=o("from_config()"),Y1r=o(` class
method.`),K1r=l(),fy=a("p"),Z1r=o("This class cannot be instantiated directly using "),y4e=a("code"),e4r=o("__init__()"),o4r=o(" (throws an error)."),r4r=l(),Mt=a("div"),f(my.$$.fragment),t4r=l(),L4e=a("p"),a4r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),n4r=l(),Oc=a("p"),s4r=o(`Note:
Loading a model from its configuration file does `),x4e=a("strong"),l4r=o("not"),i4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yz=a("a"),d4r=o("from_pretrained()"),c4r=o(" to load the model weights."),f4r=l(),k4e=a("p"),m4r=o("Examples:"),g4r=l(),f(gy.$$.fragment),h4r=l(),Eo=a("div"),f(hy.$$.fragment),p4r=l(),S4e=a("p"),_4r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),u4r=l(),wn=a("p"),b4r=o("The model class to instantiate is selected based on the "),R4e=a("code"),F4r=o("model_type"),v4r=o(` property of the config object (either
passed as an argument or loaded from `),B4e=a("code"),T4r=o("pretrained_model_name_or_path"),M4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P4e=a("code"),E4r=o("pretrained_model_name_or_path"),C4r=o(":"),w4r=l(),Y=a("ul"),CT=a("li"),$4e=a("strong"),A4r=o("albert"),y4r=o(" \u2014 "),Lz=a("a"),L4r=o("TFAlbertForTokenClassification"),x4r=o(" (ALBERT model)"),k4r=l(),wT=a("li"),I4e=a("strong"),S4r=o("bert"),R4r=o(" \u2014 "),xz=a("a"),B4r=o("TFBertForTokenClassification"),P4r=o(" (BERT model)"),$4r=l(),AT=a("li"),q4e=a("strong"),I4r=o("camembert"),q4r=o(" \u2014 "),kz=a("a"),N4r=o("TFCamembertForTokenClassification"),j4r=o(" (CamemBERT model)"),D4r=l(),yT=a("li"),N4e=a("strong"),G4r=o("convbert"),O4r=o(" \u2014 "),Sz=a("a"),V4r=o("TFConvBertForTokenClassification"),X4r=o(" (ConvBERT model)"),z4r=l(),LT=a("li"),j4e=a("strong"),Q4r=o("deberta"),W4r=o(" \u2014 "),Rz=a("a"),H4r=o("TFDebertaForTokenClassification"),U4r=o(" (DeBERTa model)"),J4r=l(),xT=a("li"),D4e=a("strong"),Y4r=o("deberta-v2"),K4r=o(" \u2014 "),Bz=a("a"),Z4r=o("TFDebertaV2ForTokenClassification"),ebr=o(" (DeBERTa-v2 model)"),obr=l(),kT=a("li"),G4e=a("strong"),rbr=o("distilbert"),tbr=o(" \u2014 "),Pz=a("a"),abr=o("TFDistilBertForTokenClassification"),nbr=o(" (DistilBERT model)"),sbr=l(),ST=a("li"),O4e=a("strong"),lbr=o("electra"),ibr=o(" \u2014 "),$z=a("a"),dbr=o("TFElectraForTokenClassification"),cbr=o(" (ELECTRA model)"),fbr=l(),RT=a("li"),V4e=a("strong"),mbr=o("flaubert"),gbr=o(" \u2014 "),Iz=a("a"),hbr=o("TFFlaubertForTokenClassification"),pbr=o(" (FlauBERT model)"),_br=l(),BT=a("li"),X4e=a("strong"),ubr=o("funnel"),bbr=o(" \u2014 "),qz=a("a"),Fbr=o("TFFunnelForTokenClassification"),vbr=o(" (Funnel Transformer model)"),Tbr=l(),PT=a("li"),z4e=a("strong"),Mbr=o("layoutlm"),Ebr=o(" \u2014 "),Nz=a("a"),Cbr=o("TFLayoutLMForTokenClassification"),wbr=o(" (LayoutLM model)"),Abr=l(),$T=a("li"),Q4e=a("strong"),ybr=o("longformer"),Lbr=o(" \u2014 "),jz=a("a"),xbr=o("TFLongformerForTokenClassification"),kbr=o(" (Longformer model)"),Sbr=l(),IT=a("li"),W4e=a("strong"),Rbr=o("mobilebert"),Bbr=o(" \u2014 "),Dz=a("a"),Pbr=o("TFMobileBertForTokenClassification"),$br=o(" (MobileBERT model)"),Ibr=l(),qT=a("li"),H4e=a("strong"),qbr=o("mpnet"),Nbr=o(" \u2014 "),Gz=a("a"),jbr=o("TFMPNetForTokenClassification"),Dbr=o(" (MPNet model)"),Gbr=l(),NT=a("li"),U4e=a("strong"),Obr=o("rembert"),Vbr=o(" \u2014 "),Oz=a("a"),Xbr=o("TFRemBertForTokenClassification"),zbr=o(" (RemBERT model)"),Qbr=l(),jT=a("li"),J4e=a("strong"),Wbr=o("roberta"),Hbr=o(" \u2014 "),Vz=a("a"),Ubr=o("TFRobertaForTokenClassification"),Jbr=o(" (RoBERTa model)"),Ybr=l(),DT=a("li"),Y4e=a("strong"),Kbr=o("roformer"),Zbr=o(" \u2014 "),Xz=a("a"),e3r=o("TFRoFormerForTokenClassification"),o3r=o(" (RoFormer model)"),r3r=l(),GT=a("li"),K4e=a("strong"),t3r=o("xlm"),a3r=o(" \u2014 "),zz=a("a"),n3r=o("TFXLMForTokenClassification"),s3r=o(" (XLM model)"),l3r=l(),OT=a("li"),Z4e=a("strong"),i3r=o("xlm-roberta"),d3r=o(" \u2014 "),Qz=a("a"),c3r=o("TFXLMRobertaForTokenClassification"),f3r=o(" (XLM-RoBERTa model)"),m3r=l(),VT=a("li"),ebe=a("strong"),g3r=o("xlnet"),h3r=o(" \u2014 "),Wz=a("a"),p3r=o("TFXLNetForTokenClassification"),_3r=o(" (XLNet model)"),u3r=l(),obe=a("p"),b3r=o("Examples:"),F3r=l(),f(py.$$.fragment),CBe=l(),Vc=a("h2"),XT=a("a"),rbe=a("span"),f(_y.$$.fragment),v3r=l(),tbe=a("span"),T3r=o("TFAutoModelForQuestionAnswering"),wBe=l(),xr=a("div"),f(uy.$$.fragment),M3r=l(),Xc=a("p"),E3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Hz=a("a"),C3r=o("from_pretrained()"),w3r=o(" class method or the "),Uz=a("a"),A3r=o("from_config()"),y3r=o(` class
method.`),L3r=l(),by=a("p"),x3r=o("This class cannot be instantiated directly using "),abe=a("code"),k3r=o("__init__()"),S3r=o(" (throws an error)."),R3r=l(),Et=a("div"),f(Fy.$$.fragment),B3r=l(),nbe=a("p"),P3r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),$3r=l(),zc=a("p"),I3r=o(`Note:
Loading a model from its configuration file does `),sbe=a("strong"),q3r=o("not"),N3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Jz=a("a"),j3r=o("from_pretrained()"),D3r=o(" to load the model weights."),G3r=l(),lbe=a("p"),O3r=o("Examples:"),V3r=l(),f(vy.$$.fragment),X3r=l(),Co=a("div"),f(Ty.$$.fragment),z3r=l(),ibe=a("p"),Q3r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),W3r=l(),An=a("p"),H3r=o("The model class to instantiate is selected based on the "),dbe=a("code"),U3r=o("model_type"),J3r=o(` property of the config object (either
passed as an argument or loaded from `),cbe=a("code"),Y3r=o("pretrained_model_name_or_path"),K3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fbe=a("code"),Z3r=o("pretrained_model_name_or_path"),e2r=o(":"),o2r=l(),K=a("ul"),zT=a("li"),mbe=a("strong"),r2r=o("albert"),t2r=o(" \u2014 "),Yz=a("a"),a2r=o("TFAlbertForQuestionAnswering"),n2r=o(" (ALBERT model)"),s2r=l(),QT=a("li"),gbe=a("strong"),l2r=o("bert"),i2r=o(" \u2014 "),Kz=a("a"),d2r=o("TFBertForQuestionAnswering"),c2r=o(" (BERT model)"),f2r=l(),WT=a("li"),hbe=a("strong"),m2r=o("camembert"),g2r=o(" \u2014 "),Zz=a("a"),h2r=o("TFCamembertForQuestionAnswering"),p2r=o(" (CamemBERT model)"),_2r=l(),HT=a("li"),pbe=a("strong"),u2r=o("convbert"),b2r=o(" \u2014 "),eQ=a("a"),F2r=o("TFConvBertForQuestionAnswering"),v2r=o(" (ConvBERT model)"),T2r=l(),UT=a("li"),_be=a("strong"),M2r=o("deberta"),E2r=o(" \u2014 "),oQ=a("a"),C2r=o("TFDebertaForQuestionAnswering"),w2r=o(" (DeBERTa model)"),A2r=l(),JT=a("li"),ube=a("strong"),y2r=o("deberta-v2"),L2r=o(" \u2014 "),rQ=a("a"),x2r=o("TFDebertaV2ForQuestionAnswering"),k2r=o(" (DeBERTa-v2 model)"),S2r=l(),YT=a("li"),bbe=a("strong"),R2r=o("distilbert"),B2r=o(" \u2014 "),tQ=a("a"),P2r=o("TFDistilBertForQuestionAnswering"),$2r=o(" (DistilBERT model)"),I2r=l(),KT=a("li"),Fbe=a("strong"),q2r=o("electra"),N2r=o(" \u2014 "),aQ=a("a"),j2r=o("TFElectraForQuestionAnswering"),D2r=o(" (ELECTRA model)"),G2r=l(),ZT=a("li"),vbe=a("strong"),O2r=o("flaubert"),V2r=o(" \u2014 "),nQ=a("a"),X2r=o("TFFlaubertForQuestionAnsweringSimple"),z2r=o(" (FlauBERT model)"),Q2r=l(),e7=a("li"),Tbe=a("strong"),W2r=o("funnel"),H2r=o(" \u2014 "),sQ=a("a"),U2r=o("TFFunnelForQuestionAnswering"),J2r=o(" (Funnel Transformer model)"),Y2r=l(),o7=a("li"),Mbe=a("strong"),K2r=o("gptj"),Z2r=o(" \u2014 "),lQ=a("a"),eFr=o("TFGPTJForQuestionAnswering"),oFr=o(" (GPT-J model)"),rFr=l(),r7=a("li"),Ebe=a("strong"),tFr=o("longformer"),aFr=o(" \u2014 "),iQ=a("a"),nFr=o("TFLongformerForQuestionAnswering"),sFr=o(" (Longformer model)"),lFr=l(),t7=a("li"),Cbe=a("strong"),iFr=o("mobilebert"),dFr=o(" \u2014 "),dQ=a("a"),cFr=o("TFMobileBertForQuestionAnswering"),fFr=o(" (MobileBERT model)"),mFr=l(),a7=a("li"),wbe=a("strong"),gFr=o("mpnet"),hFr=o(" \u2014 "),cQ=a("a"),pFr=o("TFMPNetForQuestionAnswering"),_Fr=o(" (MPNet model)"),uFr=l(),n7=a("li"),Abe=a("strong"),bFr=o("rembert"),FFr=o(" \u2014 "),fQ=a("a"),vFr=o("TFRemBertForQuestionAnswering"),TFr=o(" (RemBERT model)"),MFr=l(),s7=a("li"),ybe=a("strong"),EFr=o("roberta"),CFr=o(" \u2014 "),mQ=a("a"),wFr=o("TFRobertaForQuestionAnswering"),AFr=o(" (RoBERTa model)"),yFr=l(),l7=a("li"),Lbe=a("strong"),LFr=o("roformer"),xFr=o(" \u2014 "),gQ=a("a"),kFr=o("TFRoFormerForQuestionAnswering"),SFr=o(" (RoFormer model)"),RFr=l(),i7=a("li"),xbe=a("strong"),BFr=o("xlm"),PFr=o(" \u2014 "),hQ=a("a"),$Fr=o("TFXLMForQuestionAnsweringSimple"),IFr=o(" (XLM model)"),qFr=l(),d7=a("li"),kbe=a("strong"),NFr=o("xlm-roberta"),jFr=o(" \u2014 "),pQ=a("a"),DFr=o("TFXLMRobertaForQuestionAnswering"),GFr=o(" (XLM-RoBERTa model)"),OFr=l(),c7=a("li"),Sbe=a("strong"),VFr=o("xlnet"),XFr=o(" \u2014 "),_Q=a("a"),zFr=o("TFXLNetForQuestionAnsweringSimple"),QFr=o(" (XLNet model)"),WFr=l(),Rbe=a("p"),HFr=o("Examples:"),UFr=l(),f(My.$$.fragment),ABe=l(),Qc=a("h2"),f7=a("a"),Bbe=a("span"),f(Ey.$$.fragment),JFr=l(),Pbe=a("span"),YFr=o("TFAutoModelForVision2Seq"),yBe=l(),kr=a("div"),f(Cy.$$.fragment),KFr=l(),Wc=a("p"),ZFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),uQ=a("a"),evr=o("from_pretrained()"),ovr=o(" class method or the "),bQ=a("a"),rvr=o("from_config()"),tvr=o(` class
method.`),avr=l(),wy=a("p"),nvr=o("This class cannot be instantiated directly using "),$be=a("code"),svr=o("__init__()"),lvr=o(" (throws an error)."),ivr=l(),Ct=a("div"),f(Ay.$$.fragment),dvr=l(),Ibe=a("p"),cvr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),fvr=l(),Hc=a("p"),mvr=o(`Note:
Loading a model from its configuration file does `),qbe=a("strong"),gvr=o("not"),hvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FQ=a("a"),pvr=o("from_pretrained()"),_vr=o(" to load the model weights."),uvr=l(),Nbe=a("p"),bvr=o("Examples:"),Fvr=l(),f(yy.$$.fragment),vvr=l(),wo=a("div"),f(Ly.$$.fragment),Tvr=l(),jbe=a("p"),Mvr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Evr=l(),yn=a("p"),Cvr=o("The model class to instantiate is selected based on the "),Dbe=a("code"),wvr=o("model_type"),Avr=o(` property of the config object (either
passed as an argument or loaded from `),Gbe=a("code"),yvr=o("pretrained_model_name_or_path"),Lvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Obe=a("code"),xvr=o("pretrained_model_name_or_path"),kvr=o(":"),Svr=l(),Vbe=a("ul"),m7=a("li"),Xbe=a("strong"),Rvr=o("vision-encoder-decoder"),Bvr=o(" \u2014 "),vQ=a("a"),Pvr=o("TFVisionEncoderDecoderModel"),$vr=o(" (Vision Encoder decoder model)"),Ivr=l(),zbe=a("p"),qvr=o("Examples:"),Nvr=l(),f(xy.$$.fragment),LBe=l(),Uc=a("h2"),g7=a("a"),Qbe=a("span"),f(ky.$$.fragment),jvr=l(),Wbe=a("span"),Dvr=o("TFAutoModelForSpeechSeq2Seq"),xBe=l(),Sr=a("div"),f(Sy.$$.fragment),Gvr=l(),Jc=a("p"),Ovr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),TQ=a("a"),Vvr=o("from_pretrained()"),Xvr=o(" class method or the "),MQ=a("a"),zvr=o("from_config()"),Qvr=o(` class
method.`),Wvr=l(),Ry=a("p"),Hvr=o("This class cannot be instantiated directly using "),Hbe=a("code"),Uvr=o("__init__()"),Jvr=o(" (throws an error)."),Yvr=l(),wt=a("div"),f(By.$$.fragment),Kvr=l(),Ube=a("p"),Zvr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),e6r=l(),Yc=a("p"),o6r=o(`Note:
Loading a model from its configuration file does `),Jbe=a("strong"),r6r=o("not"),t6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EQ=a("a"),a6r=o("from_pretrained()"),n6r=o(" to load the model weights."),s6r=l(),Ybe=a("p"),l6r=o("Examples:"),i6r=l(),f(Py.$$.fragment),d6r=l(),Ao=a("div"),f($y.$$.fragment),c6r=l(),Kbe=a("p"),f6r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),m6r=l(),Ln=a("p"),g6r=o("The model class to instantiate is selected based on the "),Zbe=a("code"),h6r=o("model_type"),p6r=o(` property of the config object (either
passed as an argument or loaded from `),e3e=a("code"),_6r=o("pretrained_model_name_or_path"),u6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o3e=a("code"),b6r=o("pretrained_model_name_or_path"),F6r=o(":"),v6r=l(),r3e=a("ul"),h7=a("li"),t3e=a("strong"),T6r=o("speech_to_text"),M6r=o(" \u2014 "),CQ=a("a"),E6r=o("TFSpeech2TextForConditionalGeneration"),C6r=o(" (Speech2Text model)"),w6r=l(),a3e=a("p"),A6r=o("Examples:"),y6r=l(),f(Iy.$$.fragment),kBe=l(),Kc=a("h2"),p7=a("a"),n3e=a("span"),f(qy.$$.fragment),L6r=l(),s3e=a("span"),x6r=o("FlaxAutoModel"),SBe=l(),Rr=a("div"),f(Ny.$$.fragment),k6r=l(),Zc=a("p"),S6r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),wQ=a("a"),R6r=o("from_pretrained()"),B6r=o(" class method or the "),AQ=a("a"),P6r=o("from_config()"),$6r=o(` class
method.`),I6r=l(),jy=a("p"),q6r=o("This class cannot be instantiated directly using "),l3e=a("code"),N6r=o("__init__()"),j6r=o(" (throws an error)."),D6r=l(),At=a("div"),f(Dy.$$.fragment),G6r=l(),i3e=a("p"),O6r=o("Instantiates one of the base model classes of the library from a configuration."),V6r=l(),ef=a("p"),X6r=o(`Note:
Loading a model from its configuration file does `),d3e=a("strong"),z6r=o("not"),Q6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yQ=a("a"),W6r=o("from_pretrained()"),H6r=o(" to load the model weights."),U6r=l(),c3e=a("p"),J6r=o("Examples:"),Y6r=l(),f(Gy.$$.fragment),K6r=l(),yo=a("div"),f(Oy.$$.fragment),Z6r=l(),f3e=a("p"),eTr=o("Instantiate one of the base model classes of the library from a pretrained model."),oTr=l(),xn=a("p"),rTr=o("The model class to instantiate is selected based on the "),m3e=a("code"),tTr=o("model_type"),aTr=o(` property of the config object (either
passed as an argument or loaded from `),g3e=a("code"),nTr=o("pretrained_model_name_or_path"),sTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h3e=a("code"),lTr=o("pretrained_model_name_or_path"),iTr=o(":"),dTr=l(),z=a("ul"),_7=a("li"),p3e=a("strong"),cTr=o("albert"),fTr=o(" \u2014 "),LQ=a("a"),mTr=o("FlaxAlbertModel"),gTr=o(" (ALBERT model)"),hTr=l(),u7=a("li"),_3e=a("strong"),pTr=o("bart"),_Tr=o(" \u2014 "),xQ=a("a"),uTr=o("FlaxBartModel"),bTr=o(" (BART model)"),FTr=l(),b7=a("li"),u3e=a("strong"),vTr=o("beit"),TTr=o(" \u2014 "),kQ=a("a"),MTr=o("FlaxBeitModel"),ETr=o(" (BEiT model)"),CTr=l(),F7=a("li"),b3e=a("strong"),wTr=o("bert"),ATr=o(" \u2014 "),SQ=a("a"),yTr=o("FlaxBertModel"),LTr=o(" (BERT model)"),xTr=l(),v7=a("li"),F3e=a("strong"),kTr=o("big_bird"),STr=o(" \u2014 "),RQ=a("a"),RTr=o("FlaxBigBirdModel"),BTr=o(" (BigBird model)"),PTr=l(),T7=a("li"),v3e=a("strong"),$Tr=o("blenderbot"),ITr=o(" \u2014 "),BQ=a("a"),qTr=o("FlaxBlenderbotModel"),NTr=o(" (Blenderbot model)"),jTr=l(),M7=a("li"),T3e=a("strong"),DTr=o("blenderbot-small"),GTr=o(" \u2014 "),PQ=a("a"),OTr=o("FlaxBlenderbotSmallModel"),VTr=o(" (BlenderbotSmall model)"),XTr=l(),E7=a("li"),M3e=a("strong"),zTr=o("clip"),QTr=o(" \u2014 "),$Q=a("a"),WTr=o("FlaxCLIPModel"),HTr=o(" (CLIP model)"),UTr=l(),C7=a("li"),E3e=a("strong"),JTr=o("distilbert"),YTr=o(" \u2014 "),IQ=a("a"),KTr=o("FlaxDistilBertModel"),ZTr=o(" (DistilBERT model)"),e7r=l(),w7=a("li"),C3e=a("strong"),o7r=o("electra"),r7r=o(" \u2014 "),qQ=a("a"),t7r=o("FlaxElectraModel"),a7r=o(" (ELECTRA model)"),n7r=l(),A7=a("li"),w3e=a("strong"),s7r=o("gpt2"),l7r=o(" \u2014 "),NQ=a("a"),i7r=o("FlaxGPT2Model"),d7r=o(" (OpenAI GPT-2 model)"),c7r=l(),y7=a("li"),A3e=a("strong"),f7r=o("gpt_neo"),m7r=o(" \u2014 "),jQ=a("a"),g7r=o("FlaxGPTNeoModel"),h7r=o(" (GPT Neo model)"),p7r=l(),L7=a("li"),y3e=a("strong"),_7r=o("gptj"),u7r=o(" \u2014 "),DQ=a("a"),b7r=o("FlaxGPTJModel"),F7r=o(" (GPT-J model)"),v7r=l(),x7=a("li"),L3e=a("strong"),T7r=o("marian"),M7r=o(" \u2014 "),GQ=a("a"),E7r=o("FlaxMarianModel"),C7r=o(" (Marian model)"),w7r=l(),k7=a("li"),x3e=a("strong"),A7r=o("mbart"),y7r=o(" \u2014 "),OQ=a("a"),L7r=o("FlaxMBartModel"),x7r=o(" (mBART model)"),k7r=l(),S7=a("li"),k3e=a("strong"),S7r=o("mt5"),R7r=o(" \u2014 "),VQ=a("a"),B7r=o("FlaxMT5Model"),P7r=o(" (mT5 model)"),$7r=l(),R7=a("li"),S3e=a("strong"),I7r=o("pegasus"),q7r=o(" \u2014 "),XQ=a("a"),N7r=o("FlaxPegasusModel"),j7r=o(" (Pegasus model)"),D7r=l(),B7=a("li"),R3e=a("strong"),G7r=o("roberta"),O7r=o(" \u2014 "),zQ=a("a"),V7r=o("FlaxRobertaModel"),X7r=o(" (RoBERTa model)"),z7r=l(),P7=a("li"),B3e=a("strong"),Q7r=o("roformer"),W7r=o(" \u2014 "),QQ=a("a"),H7r=o("FlaxRoFormerModel"),U7r=o(" (RoFormer model)"),J7r=l(),$7=a("li"),P3e=a("strong"),Y7r=o("t5"),K7r=o(" \u2014 "),WQ=a("a"),Z7r=o("FlaxT5Model"),eMr=o(" (T5 model)"),oMr=l(),I7=a("li"),$3e=a("strong"),rMr=o("vision-text-dual-encoder"),tMr=o(" \u2014 "),HQ=a("a"),aMr=o("FlaxVisionTextDualEncoderModel"),nMr=o(" (VisionTextDualEncoder model)"),sMr=l(),q7=a("li"),I3e=a("strong"),lMr=o("vit"),iMr=o(" \u2014 "),UQ=a("a"),dMr=o("FlaxViTModel"),cMr=o(" (ViT model)"),fMr=l(),N7=a("li"),q3e=a("strong"),mMr=o("wav2vec2"),gMr=o(" \u2014 "),JQ=a("a"),hMr=o("FlaxWav2Vec2Model"),pMr=o(" (Wav2Vec2 model)"),_Mr=l(),j7=a("li"),N3e=a("strong"),uMr=o("xglm"),bMr=o(" \u2014 "),YQ=a("a"),FMr=o("FlaxXGLMModel"),vMr=o(" (XGLM model)"),TMr=l(),D7=a("li"),j3e=a("strong"),MMr=o("xlm-roberta"),EMr=o(" \u2014 "),KQ=a("a"),CMr=o("FlaxXLMRobertaModel"),wMr=o(" (XLM-RoBERTa model)"),AMr=l(),D3e=a("p"),yMr=o("Examples:"),LMr=l(),f(Vy.$$.fragment),RBe=l(),of=a("h2"),G7=a("a"),G3e=a("span"),f(Xy.$$.fragment),xMr=l(),O3e=a("span"),kMr=o("FlaxAutoModelForCausalLM"),BBe=l(),Br=a("div"),f(zy.$$.fragment),SMr=l(),rf=a("p"),RMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),ZQ=a("a"),BMr=o("from_pretrained()"),PMr=o(" class method or the "),eW=a("a"),$Mr=o("from_config()"),IMr=o(` class
method.`),qMr=l(),Qy=a("p"),NMr=o("This class cannot be instantiated directly using "),V3e=a("code"),jMr=o("__init__()"),DMr=o(" (throws an error)."),GMr=l(),yt=a("div"),f(Wy.$$.fragment),OMr=l(),X3e=a("p"),VMr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),XMr=l(),tf=a("p"),zMr=o(`Note:
Loading a model from its configuration file does `),z3e=a("strong"),QMr=o("not"),WMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oW=a("a"),HMr=o("from_pretrained()"),UMr=o(" to load the model weights."),JMr=l(),Q3e=a("p"),YMr=o("Examples:"),KMr=l(),f(Hy.$$.fragment),ZMr=l(),Lo=a("div"),f(Uy.$$.fragment),eEr=l(),W3e=a("p"),oEr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),rEr=l(),kn=a("p"),tEr=o("The model class to instantiate is selected based on the "),H3e=a("code"),aEr=o("model_type"),nEr=o(` property of the config object (either
passed as an argument or loaded from `),U3e=a("code"),sEr=o("pretrained_model_name_or_path"),lEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J3e=a("code"),iEr=o("pretrained_model_name_or_path"),dEr=o(":"),cEr=l(),ca=a("ul"),O7=a("li"),Y3e=a("strong"),fEr=o("bart"),mEr=o(" \u2014 "),rW=a("a"),gEr=o("FlaxBartForCausalLM"),hEr=o(" (BART model)"),pEr=l(),V7=a("li"),K3e=a("strong"),_Er=o("gpt2"),uEr=o(" \u2014 "),tW=a("a"),bEr=o("FlaxGPT2LMHeadModel"),FEr=o(" (OpenAI GPT-2 model)"),vEr=l(),X7=a("li"),Z3e=a("strong"),TEr=o("gpt_neo"),MEr=o(" \u2014 "),aW=a("a"),EEr=o("FlaxGPTNeoForCausalLM"),CEr=o(" (GPT Neo model)"),wEr=l(),z7=a("li"),e2e=a("strong"),AEr=o("gptj"),yEr=o(" \u2014 "),nW=a("a"),LEr=o("FlaxGPTJForCausalLM"),xEr=o(" (GPT-J model)"),kEr=l(),Q7=a("li"),o2e=a("strong"),SEr=o("xglm"),REr=o(" \u2014 "),sW=a("a"),BEr=o("FlaxXGLMForCausalLM"),PEr=o(" (XGLM model)"),$Er=l(),r2e=a("p"),IEr=o("Examples:"),qEr=l(),f(Jy.$$.fragment),PBe=l(),af=a("h2"),W7=a("a"),t2e=a("span"),f(Yy.$$.fragment),NEr=l(),a2e=a("span"),jEr=o("FlaxAutoModelForPreTraining"),$Be=l(),Pr=a("div"),f(Ky.$$.fragment),DEr=l(),nf=a("p"),GEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),lW=a("a"),OEr=o("from_pretrained()"),VEr=o(" class method or the "),iW=a("a"),XEr=o("from_config()"),zEr=o(` class
method.`),QEr=l(),Zy=a("p"),WEr=o("This class cannot be instantiated directly using "),n2e=a("code"),HEr=o("__init__()"),UEr=o(" (throws an error)."),JEr=l(),Lt=a("div"),f(eL.$$.fragment),YEr=l(),s2e=a("p"),KEr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),ZEr=l(),sf=a("p"),eCr=o(`Note:
Loading a model from its configuration file does `),l2e=a("strong"),oCr=o("not"),rCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dW=a("a"),tCr=o("from_pretrained()"),aCr=o(" to load the model weights."),nCr=l(),i2e=a("p"),sCr=o("Examples:"),lCr=l(),f(oL.$$.fragment),iCr=l(),xo=a("div"),f(rL.$$.fragment),dCr=l(),d2e=a("p"),cCr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),fCr=l(),Sn=a("p"),mCr=o("The model class to instantiate is selected based on the "),c2e=a("code"),gCr=o("model_type"),hCr=o(` property of the config object (either
passed as an argument or loaded from `),f2e=a("code"),pCr=o("pretrained_model_name_or_path"),_Cr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m2e=a("code"),uCr=o("pretrained_model_name_or_path"),bCr=o(":"),FCr=l(),fe=a("ul"),H7=a("li"),g2e=a("strong"),vCr=o("albert"),TCr=o(" \u2014 "),cW=a("a"),MCr=o("FlaxAlbertForPreTraining"),ECr=o(" (ALBERT model)"),CCr=l(),U7=a("li"),h2e=a("strong"),wCr=o("bart"),ACr=o(" \u2014 "),fW=a("a"),yCr=o("FlaxBartForConditionalGeneration"),LCr=o(" (BART model)"),xCr=l(),J7=a("li"),p2e=a("strong"),kCr=o("bert"),SCr=o(" \u2014 "),mW=a("a"),RCr=o("FlaxBertForPreTraining"),BCr=o(" (BERT model)"),PCr=l(),Y7=a("li"),_2e=a("strong"),$Cr=o("big_bird"),ICr=o(" \u2014 "),gW=a("a"),qCr=o("FlaxBigBirdForPreTraining"),NCr=o(" (BigBird model)"),jCr=l(),K7=a("li"),u2e=a("strong"),DCr=o("electra"),GCr=o(" \u2014 "),hW=a("a"),OCr=o("FlaxElectraForPreTraining"),VCr=o(" (ELECTRA model)"),XCr=l(),Z7=a("li"),b2e=a("strong"),zCr=o("mbart"),QCr=o(" \u2014 "),pW=a("a"),WCr=o("FlaxMBartForConditionalGeneration"),HCr=o(" (mBART model)"),UCr=l(),eM=a("li"),F2e=a("strong"),JCr=o("mt5"),YCr=o(" \u2014 "),_W=a("a"),KCr=o("FlaxMT5ForConditionalGeneration"),ZCr=o(" (mT5 model)"),e5r=l(),oM=a("li"),v2e=a("strong"),o5r=o("roberta"),r5r=o(" \u2014 "),uW=a("a"),t5r=o("FlaxRobertaForMaskedLM"),a5r=o(" (RoBERTa model)"),n5r=l(),rM=a("li"),T2e=a("strong"),s5r=o("roformer"),l5r=o(" \u2014 "),bW=a("a"),i5r=o("FlaxRoFormerForMaskedLM"),d5r=o(" (RoFormer model)"),c5r=l(),tM=a("li"),M2e=a("strong"),f5r=o("t5"),m5r=o(" \u2014 "),FW=a("a"),g5r=o("FlaxT5ForConditionalGeneration"),h5r=o(" (T5 model)"),p5r=l(),aM=a("li"),E2e=a("strong"),_5r=o("wav2vec2"),u5r=o(" \u2014 "),vW=a("a"),b5r=o("FlaxWav2Vec2ForPreTraining"),F5r=o(" (Wav2Vec2 model)"),v5r=l(),nM=a("li"),C2e=a("strong"),T5r=o("xlm-roberta"),M5r=o(" \u2014 "),TW=a("a"),E5r=o("FlaxXLMRobertaForMaskedLM"),C5r=o(" (XLM-RoBERTa model)"),w5r=l(),w2e=a("p"),A5r=o("Examples:"),y5r=l(),f(tL.$$.fragment),IBe=l(),lf=a("h2"),sM=a("a"),A2e=a("span"),f(aL.$$.fragment),L5r=l(),y2e=a("span"),x5r=o("FlaxAutoModelForMaskedLM"),qBe=l(),$r=a("div"),f(nL.$$.fragment),k5r=l(),df=a("p"),S5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),MW=a("a"),R5r=o("from_pretrained()"),B5r=o(" class method or the "),EW=a("a"),P5r=o("from_config()"),$5r=o(` class
method.`),I5r=l(),sL=a("p"),q5r=o("This class cannot be instantiated directly using "),L2e=a("code"),N5r=o("__init__()"),j5r=o(" (throws an error)."),D5r=l(),xt=a("div"),f(lL.$$.fragment),G5r=l(),x2e=a("p"),O5r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),V5r=l(),cf=a("p"),X5r=o(`Note:
Loading a model from its configuration file does `),k2e=a("strong"),z5r=o("not"),Q5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CW=a("a"),W5r=o("from_pretrained()"),H5r=o(" to load the model weights."),U5r=l(),S2e=a("p"),J5r=o("Examples:"),Y5r=l(),f(iL.$$.fragment),K5r=l(),ko=a("div"),f(dL.$$.fragment),Z5r=l(),R2e=a("p"),ewr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),owr=l(),Rn=a("p"),rwr=o("The model class to instantiate is selected based on the "),B2e=a("code"),twr=o("model_type"),awr=o(` property of the config object (either
passed as an argument or loaded from `),P2e=a("code"),nwr=o("pretrained_model_name_or_path"),swr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$2e=a("code"),lwr=o("pretrained_model_name_or_path"),iwr=o(":"),dwr=l(),be=a("ul"),lM=a("li"),I2e=a("strong"),cwr=o("albert"),fwr=o(" \u2014 "),wW=a("a"),mwr=o("FlaxAlbertForMaskedLM"),gwr=o(" (ALBERT model)"),hwr=l(),iM=a("li"),q2e=a("strong"),pwr=o("bart"),_wr=o(" \u2014 "),AW=a("a"),uwr=o("FlaxBartForConditionalGeneration"),bwr=o(" (BART model)"),Fwr=l(),dM=a("li"),N2e=a("strong"),vwr=o("bert"),Twr=o(" \u2014 "),yW=a("a"),Mwr=o("FlaxBertForMaskedLM"),Ewr=o(" (BERT model)"),Cwr=l(),cM=a("li"),j2e=a("strong"),wwr=o("big_bird"),Awr=o(" \u2014 "),LW=a("a"),ywr=o("FlaxBigBirdForMaskedLM"),Lwr=o(" (BigBird model)"),xwr=l(),fM=a("li"),D2e=a("strong"),kwr=o("distilbert"),Swr=o(" \u2014 "),xW=a("a"),Rwr=o("FlaxDistilBertForMaskedLM"),Bwr=o(" (DistilBERT model)"),Pwr=l(),mM=a("li"),G2e=a("strong"),$wr=o("electra"),Iwr=o(" \u2014 "),kW=a("a"),qwr=o("FlaxElectraForMaskedLM"),Nwr=o(" (ELECTRA model)"),jwr=l(),gM=a("li"),O2e=a("strong"),Dwr=o("mbart"),Gwr=o(" \u2014 "),SW=a("a"),Owr=o("FlaxMBartForConditionalGeneration"),Vwr=o(" (mBART model)"),Xwr=l(),hM=a("li"),V2e=a("strong"),zwr=o("roberta"),Qwr=o(" \u2014 "),RW=a("a"),Wwr=o("FlaxRobertaForMaskedLM"),Hwr=o(" (RoBERTa model)"),Uwr=l(),pM=a("li"),X2e=a("strong"),Jwr=o("roformer"),Ywr=o(" \u2014 "),BW=a("a"),Kwr=o("FlaxRoFormerForMaskedLM"),Zwr=o(" (RoFormer model)"),eAr=l(),_M=a("li"),z2e=a("strong"),oAr=o("xlm-roberta"),rAr=o(" \u2014 "),PW=a("a"),tAr=o("FlaxXLMRobertaForMaskedLM"),aAr=o(" (XLM-RoBERTa model)"),nAr=l(),Q2e=a("p"),sAr=o("Examples:"),lAr=l(),f(cL.$$.fragment),NBe=l(),ff=a("h2"),uM=a("a"),W2e=a("span"),f(fL.$$.fragment),iAr=l(),H2e=a("span"),dAr=o("FlaxAutoModelForSeq2SeqLM"),jBe=l(),Ir=a("div"),f(mL.$$.fragment),cAr=l(),mf=a("p"),fAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),$W=a("a"),mAr=o("from_pretrained()"),gAr=o(" class method or the "),IW=a("a"),hAr=o("from_config()"),pAr=o(` class
method.`),_Ar=l(),gL=a("p"),uAr=o("This class cannot be instantiated directly using "),U2e=a("code"),bAr=o("__init__()"),FAr=o(" (throws an error)."),vAr=l(),kt=a("div"),f(hL.$$.fragment),TAr=l(),J2e=a("p"),MAr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),EAr=l(),gf=a("p"),CAr=o(`Note:
Loading a model from its configuration file does `),Y2e=a("strong"),wAr=o("not"),AAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qW=a("a"),yAr=o("from_pretrained()"),LAr=o(" to load the model weights."),xAr=l(),K2e=a("p"),kAr=o("Examples:"),SAr=l(),f(pL.$$.fragment),RAr=l(),So=a("div"),f(_L.$$.fragment),BAr=l(),Z2e=a("p"),PAr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),$Ar=l(),Bn=a("p"),IAr=o("The model class to instantiate is selected based on the "),eFe=a("code"),qAr=o("model_type"),NAr=o(` property of the config object (either
passed as an argument or loaded from `),oFe=a("code"),jAr=o("pretrained_model_name_or_path"),DAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rFe=a("code"),GAr=o("pretrained_model_name_or_path"),OAr=o(":"),VAr=l(),Ee=a("ul"),bM=a("li"),tFe=a("strong"),XAr=o("bart"),zAr=o(" \u2014 "),NW=a("a"),QAr=o("FlaxBartForConditionalGeneration"),WAr=o(" (BART model)"),HAr=l(),FM=a("li"),aFe=a("strong"),UAr=o("blenderbot"),JAr=o(" \u2014 "),jW=a("a"),YAr=o("FlaxBlenderbotForConditionalGeneration"),KAr=o(" (Blenderbot model)"),ZAr=l(),vM=a("li"),nFe=a("strong"),e0r=o("blenderbot-small"),o0r=o(" \u2014 "),DW=a("a"),r0r=o("FlaxBlenderbotSmallForConditionalGeneration"),t0r=o(" (BlenderbotSmall model)"),a0r=l(),TM=a("li"),sFe=a("strong"),n0r=o("encoder-decoder"),s0r=o(" \u2014 "),GW=a("a"),l0r=o("FlaxEncoderDecoderModel"),i0r=o(" (Encoder decoder model)"),d0r=l(),MM=a("li"),lFe=a("strong"),c0r=o("marian"),f0r=o(" \u2014 "),OW=a("a"),m0r=o("FlaxMarianMTModel"),g0r=o(" (Marian model)"),h0r=l(),EM=a("li"),iFe=a("strong"),p0r=o("mbart"),_0r=o(" \u2014 "),VW=a("a"),u0r=o("FlaxMBartForConditionalGeneration"),b0r=o(" (mBART model)"),F0r=l(),CM=a("li"),dFe=a("strong"),v0r=o("mt5"),T0r=o(" \u2014 "),XW=a("a"),M0r=o("FlaxMT5ForConditionalGeneration"),E0r=o(" (mT5 model)"),C0r=l(),wM=a("li"),cFe=a("strong"),w0r=o("pegasus"),A0r=o(" \u2014 "),zW=a("a"),y0r=o("FlaxPegasusForConditionalGeneration"),L0r=o(" (Pegasus model)"),x0r=l(),AM=a("li"),fFe=a("strong"),k0r=o("t5"),S0r=o(" \u2014 "),QW=a("a"),R0r=o("FlaxT5ForConditionalGeneration"),B0r=o(" (T5 model)"),P0r=l(),mFe=a("p"),$0r=o("Examples:"),I0r=l(),f(uL.$$.fragment),DBe=l(),hf=a("h2"),yM=a("a"),gFe=a("span"),f(bL.$$.fragment),q0r=l(),hFe=a("span"),N0r=o("FlaxAutoModelForSequenceClassification"),GBe=l(),qr=a("div"),f(FL.$$.fragment),j0r=l(),pf=a("p"),D0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),WW=a("a"),G0r=o("from_pretrained()"),O0r=o(" class method or the "),HW=a("a"),V0r=o("from_config()"),X0r=o(` class
method.`),z0r=l(),vL=a("p"),Q0r=o("This class cannot be instantiated directly using "),pFe=a("code"),W0r=o("__init__()"),H0r=o(" (throws an error)."),U0r=l(),St=a("div"),f(TL.$$.fragment),J0r=l(),_Fe=a("p"),Y0r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),K0r=l(),_f=a("p"),Z0r=o(`Note:
Loading a model from its configuration file does `),uFe=a("strong"),eyr=o("not"),oyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UW=a("a"),ryr=o("from_pretrained()"),tyr=o(" to load the model weights."),ayr=l(),bFe=a("p"),nyr=o("Examples:"),syr=l(),f(ML.$$.fragment),lyr=l(),Ro=a("div"),f(EL.$$.fragment),iyr=l(),FFe=a("p"),dyr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),cyr=l(),Pn=a("p"),fyr=o("The model class to instantiate is selected based on the "),vFe=a("code"),myr=o("model_type"),gyr=o(` property of the config object (either
passed as an argument or loaded from `),TFe=a("code"),hyr=o("pretrained_model_name_or_path"),pyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MFe=a("code"),_yr=o("pretrained_model_name_or_path"),uyr=o(":"),byr=l(),Fe=a("ul"),LM=a("li"),EFe=a("strong"),Fyr=o("albert"),vyr=o(" \u2014 "),JW=a("a"),Tyr=o("FlaxAlbertForSequenceClassification"),Myr=o(" (ALBERT model)"),Eyr=l(),xM=a("li"),CFe=a("strong"),Cyr=o("bart"),wyr=o(" \u2014 "),YW=a("a"),Ayr=o("FlaxBartForSequenceClassification"),yyr=o(" (BART model)"),Lyr=l(),kM=a("li"),wFe=a("strong"),xyr=o("bert"),kyr=o(" \u2014 "),KW=a("a"),Syr=o("FlaxBertForSequenceClassification"),Ryr=o(" (BERT model)"),Byr=l(),SM=a("li"),AFe=a("strong"),Pyr=o("big_bird"),$yr=o(" \u2014 "),ZW=a("a"),Iyr=o("FlaxBigBirdForSequenceClassification"),qyr=o(" (BigBird model)"),Nyr=l(),RM=a("li"),yFe=a("strong"),jyr=o("distilbert"),Dyr=o(" \u2014 "),eH=a("a"),Gyr=o("FlaxDistilBertForSequenceClassification"),Oyr=o(" (DistilBERT model)"),Vyr=l(),BM=a("li"),LFe=a("strong"),Xyr=o("electra"),zyr=o(" \u2014 "),oH=a("a"),Qyr=o("FlaxElectraForSequenceClassification"),Wyr=o(" (ELECTRA model)"),Hyr=l(),PM=a("li"),xFe=a("strong"),Uyr=o("mbart"),Jyr=o(" \u2014 "),rH=a("a"),Yyr=o("FlaxMBartForSequenceClassification"),Kyr=o(" (mBART model)"),Zyr=l(),$M=a("li"),kFe=a("strong"),eLr=o("roberta"),oLr=o(" \u2014 "),tH=a("a"),rLr=o("FlaxRobertaForSequenceClassification"),tLr=o(" (RoBERTa model)"),aLr=l(),IM=a("li"),SFe=a("strong"),nLr=o("roformer"),sLr=o(" \u2014 "),aH=a("a"),lLr=o("FlaxRoFormerForSequenceClassification"),iLr=o(" (RoFormer model)"),dLr=l(),qM=a("li"),RFe=a("strong"),cLr=o("xlm-roberta"),fLr=o(" \u2014 "),nH=a("a"),mLr=o("FlaxXLMRobertaForSequenceClassification"),gLr=o(" (XLM-RoBERTa model)"),hLr=l(),BFe=a("p"),pLr=o("Examples:"),_Lr=l(),f(CL.$$.fragment),OBe=l(),uf=a("h2"),NM=a("a"),PFe=a("span"),f(wL.$$.fragment),uLr=l(),$Fe=a("span"),bLr=o("FlaxAutoModelForQuestionAnswering"),VBe=l(),Nr=a("div"),f(AL.$$.fragment),FLr=l(),bf=a("p"),vLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),sH=a("a"),TLr=o("from_pretrained()"),MLr=o(" class method or the "),lH=a("a"),ELr=o("from_config()"),CLr=o(` class
method.`),wLr=l(),yL=a("p"),ALr=o("This class cannot be instantiated directly using "),IFe=a("code"),yLr=o("__init__()"),LLr=o(" (throws an error)."),xLr=l(),Rt=a("div"),f(LL.$$.fragment),kLr=l(),qFe=a("p"),SLr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),RLr=l(),Ff=a("p"),BLr=o(`Note:
Loading a model from its configuration file does `),NFe=a("strong"),PLr=o("not"),$Lr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iH=a("a"),ILr=o("from_pretrained()"),qLr=o(" to load the model weights."),NLr=l(),jFe=a("p"),jLr=o("Examples:"),DLr=l(),f(xL.$$.fragment),GLr=l(),Bo=a("div"),f(kL.$$.fragment),OLr=l(),DFe=a("p"),VLr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),XLr=l(),$n=a("p"),zLr=o("The model class to instantiate is selected based on the "),GFe=a("code"),QLr=o("model_type"),WLr=o(` property of the config object (either
passed as an argument or loaded from `),OFe=a("code"),HLr=o("pretrained_model_name_or_path"),ULr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VFe=a("code"),JLr=o("pretrained_model_name_or_path"),YLr=o(":"),KLr=l(),ve=a("ul"),jM=a("li"),XFe=a("strong"),ZLr=o("albert"),e8r=o(" \u2014 "),dH=a("a"),o8r=o("FlaxAlbertForQuestionAnswering"),r8r=o(" (ALBERT model)"),t8r=l(),DM=a("li"),zFe=a("strong"),a8r=o("bart"),n8r=o(" \u2014 "),cH=a("a"),s8r=o("FlaxBartForQuestionAnswering"),l8r=o(" (BART model)"),i8r=l(),GM=a("li"),QFe=a("strong"),d8r=o("bert"),c8r=o(" \u2014 "),fH=a("a"),f8r=o("FlaxBertForQuestionAnswering"),m8r=o(" (BERT model)"),g8r=l(),OM=a("li"),WFe=a("strong"),h8r=o("big_bird"),p8r=o(" \u2014 "),mH=a("a"),_8r=o("FlaxBigBirdForQuestionAnswering"),u8r=o(" (BigBird model)"),b8r=l(),VM=a("li"),HFe=a("strong"),F8r=o("distilbert"),v8r=o(" \u2014 "),gH=a("a"),T8r=o("FlaxDistilBertForQuestionAnswering"),M8r=o(" (DistilBERT model)"),E8r=l(),XM=a("li"),UFe=a("strong"),C8r=o("electra"),w8r=o(" \u2014 "),hH=a("a"),A8r=o("FlaxElectraForQuestionAnswering"),y8r=o(" (ELECTRA model)"),L8r=l(),zM=a("li"),JFe=a("strong"),x8r=o("mbart"),k8r=o(" \u2014 "),pH=a("a"),S8r=o("FlaxMBartForQuestionAnswering"),R8r=o(" (mBART model)"),B8r=l(),QM=a("li"),YFe=a("strong"),P8r=o("roberta"),$8r=o(" \u2014 "),_H=a("a"),I8r=o("FlaxRobertaForQuestionAnswering"),q8r=o(" (RoBERTa model)"),N8r=l(),WM=a("li"),KFe=a("strong"),j8r=o("roformer"),D8r=o(" \u2014 "),uH=a("a"),G8r=o("FlaxRoFormerForQuestionAnswering"),O8r=o(" (RoFormer model)"),V8r=l(),HM=a("li"),ZFe=a("strong"),X8r=o("xlm-roberta"),z8r=o(" \u2014 "),bH=a("a"),Q8r=o("FlaxXLMRobertaForQuestionAnswering"),W8r=o(" (XLM-RoBERTa model)"),H8r=l(),eve=a("p"),U8r=o("Examples:"),J8r=l(),f(SL.$$.fragment),XBe=l(),vf=a("h2"),UM=a("a"),ove=a("span"),f(RL.$$.fragment),Y8r=l(),rve=a("span"),K8r=o("FlaxAutoModelForTokenClassification"),zBe=l(),jr=a("div"),f(BL.$$.fragment),Z8r=l(),Tf=a("p"),e9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),FH=a("a"),o9r=o("from_pretrained()"),r9r=o(" class method or the "),vH=a("a"),t9r=o("from_config()"),a9r=o(` class
method.`),n9r=l(),PL=a("p"),s9r=o("This class cannot be instantiated directly using "),tve=a("code"),l9r=o("__init__()"),i9r=o(" (throws an error)."),d9r=l(),Bt=a("div"),f($L.$$.fragment),c9r=l(),ave=a("p"),f9r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),m9r=l(),Mf=a("p"),g9r=o(`Note:
Loading a model from its configuration file does `),nve=a("strong"),h9r=o("not"),p9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TH=a("a"),_9r=o("from_pretrained()"),u9r=o(" to load the model weights."),b9r=l(),sve=a("p"),F9r=o("Examples:"),v9r=l(),f(IL.$$.fragment),T9r=l(),Po=a("div"),f(qL.$$.fragment),M9r=l(),lve=a("p"),E9r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),C9r=l(),In=a("p"),w9r=o("The model class to instantiate is selected based on the "),ive=a("code"),A9r=o("model_type"),y9r=o(` property of the config object (either
passed as an argument or loaded from `),dve=a("code"),L9r=o("pretrained_model_name_or_path"),x9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cve=a("code"),k9r=o("pretrained_model_name_or_path"),S9r=o(":"),R9r=l(),Be=a("ul"),JM=a("li"),fve=a("strong"),B9r=o("albert"),P9r=o(" \u2014 "),MH=a("a"),$9r=o("FlaxAlbertForTokenClassification"),I9r=o(" (ALBERT model)"),q9r=l(),YM=a("li"),mve=a("strong"),N9r=o("bert"),j9r=o(" \u2014 "),EH=a("a"),D9r=o("FlaxBertForTokenClassification"),G9r=o(" (BERT model)"),O9r=l(),KM=a("li"),gve=a("strong"),V9r=o("big_bird"),X9r=o(" \u2014 "),CH=a("a"),z9r=o("FlaxBigBirdForTokenClassification"),Q9r=o(" (BigBird model)"),W9r=l(),ZM=a("li"),hve=a("strong"),H9r=o("distilbert"),U9r=o(" \u2014 "),wH=a("a"),J9r=o("FlaxDistilBertForTokenClassification"),Y9r=o(" (DistilBERT model)"),K9r=l(),eE=a("li"),pve=a("strong"),Z9r=o("electra"),exr=o(" \u2014 "),AH=a("a"),oxr=o("FlaxElectraForTokenClassification"),rxr=o(" (ELECTRA model)"),txr=l(),oE=a("li"),_ve=a("strong"),axr=o("roberta"),nxr=o(" \u2014 "),yH=a("a"),sxr=o("FlaxRobertaForTokenClassification"),lxr=o(" (RoBERTa model)"),ixr=l(),rE=a("li"),uve=a("strong"),dxr=o("roformer"),cxr=o(" \u2014 "),LH=a("a"),fxr=o("FlaxRoFormerForTokenClassification"),mxr=o(" (RoFormer model)"),gxr=l(),tE=a("li"),bve=a("strong"),hxr=o("xlm-roberta"),pxr=o(" \u2014 "),xH=a("a"),_xr=o("FlaxXLMRobertaForTokenClassification"),uxr=o(" (XLM-RoBERTa model)"),bxr=l(),Fve=a("p"),Fxr=o("Examples:"),vxr=l(),f(NL.$$.fragment),QBe=l(),Ef=a("h2"),aE=a("a"),vve=a("span"),f(jL.$$.fragment),Txr=l(),Tve=a("span"),Mxr=o("FlaxAutoModelForMultipleChoice"),WBe=l(),Dr=a("div"),f(DL.$$.fragment),Exr=l(),Cf=a("p"),Cxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),kH=a("a"),wxr=o("from_pretrained()"),Axr=o(" class method or the "),SH=a("a"),yxr=o("from_config()"),Lxr=o(` class
method.`),xxr=l(),GL=a("p"),kxr=o("This class cannot be instantiated directly using "),Mve=a("code"),Sxr=o("__init__()"),Rxr=o(" (throws an error)."),Bxr=l(),Pt=a("div"),f(OL.$$.fragment),Pxr=l(),Eve=a("p"),$xr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Ixr=l(),wf=a("p"),qxr=o(`Note:
Loading a model from its configuration file does `),Cve=a("strong"),Nxr=o("not"),jxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RH=a("a"),Dxr=o("from_pretrained()"),Gxr=o(" to load the model weights."),Oxr=l(),wve=a("p"),Vxr=o("Examples:"),Xxr=l(),f(VL.$$.fragment),zxr=l(),$o=a("div"),f(XL.$$.fragment),Qxr=l(),Ave=a("p"),Wxr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Hxr=l(),qn=a("p"),Uxr=o("The model class to instantiate is selected based on the "),yve=a("code"),Jxr=o("model_type"),Yxr=o(` property of the config object (either
passed as an argument or loaded from `),Lve=a("code"),Kxr=o("pretrained_model_name_or_path"),Zxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xve=a("code"),ekr=o("pretrained_model_name_or_path"),okr=o(":"),rkr=l(),Pe=a("ul"),nE=a("li"),kve=a("strong"),tkr=o("albert"),akr=o(" \u2014 "),BH=a("a"),nkr=o("FlaxAlbertForMultipleChoice"),skr=o(" (ALBERT model)"),lkr=l(),sE=a("li"),Sve=a("strong"),ikr=o("bert"),dkr=o(" \u2014 "),PH=a("a"),ckr=o("FlaxBertForMultipleChoice"),fkr=o(" (BERT model)"),mkr=l(),lE=a("li"),Rve=a("strong"),gkr=o("big_bird"),hkr=o(" \u2014 "),$H=a("a"),pkr=o("FlaxBigBirdForMultipleChoice"),_kr=o(" (BigBird model)"),ukr=l(),iE=a("li"),Bve=a("strong"),bkr=o("distilbert"),Fkr=o(" \u2014 "),IH=a("a"),vkr=o("FlaxDistilBertForMultipleChoice"),Tkr=o(" (DistilBERT model)"),Mkr=l(),dE=a("li"),Pve=a("strong"),Ekr=o("electra"),Ckr=o(" \u2014 "),qH=a("a"),wkr=o("FlaxElectraForMultipleChoice"),Akr=o(" (ELECTRA model)"),ykr=l(),cE=a("li"),$ve=a("strong"),Lkr=o("roberta"),xkr=o(" \u2014 "),NH=a("a"),kkr=o("FlaxRobertaForMultipleChoice"),Skr=o(" (RoBERTa model)"),Rkr=l(),fE=a("li"),Ive=a("strong"),Bkr=o("roformer"),Pkr=o(" \u2014 "),jH=a("a"),$kr=o("FlaxRoFormerForMultipleChoice"),Ikr=o(" (RoFormer model)"),qkr=l(),mE=a("li"),qve=a("strong"),Nkr=o("xlm-roberta"),jkr=o(" \u2014 "),DH=a("a"),Dkr=o("FlaxXLMRobertaForMultipleChoice"),Gkr=o(" (XLM-RoBERTa model)"),Okr=l(),Nve=a("p"),Vkr=o("Examples:"),Xkr=l(),f(zL.$$.fragment),HBe=l(),Af=a("h2"),gE=a("a"),jve=a("span"),f(QL.$$.fragment),zkr=l(),Dve=a("span"),Qkr=o("FlaxAutoModelForNextSentencePrediction"),UBe=l(),Gr=a("div"),f(WL.$$.fragment),Wkr=l(),yf=a("p"),Hkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),GH=a("a"),Ukr=o("from_pretrained()"),Jkr=o(" class method or the "),OH=a("a"),Ykr=o("from_config()"),Kkr=o(` class
method.`),Zkr=l(),HL=a("p"),eSr=o("This class cannot be instantiated directly using "),Gve=a("code"),oSr=o("__init__()"),rSr=o(" (throws an error)."),tSr=l(),$t=a("div"),f(UL.$$.fragment),aSr=l(),Ove=a("p"),nSr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),sSr=l(),Lf=a("p"),lSr=o(`Note:
Loading a model from its configuration file does `),Vve=a("strong"),iSr=o("not"),dSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VH=a("a"),cSr=o("from_pretrained()"),fSr=o(" to load the model weights."),mSr=l(),Xve=a("p"),gSr=o("Examples:"),hSr=l(),f(JL.$$.fragment),pSr=l(),Io=a("div"),f(YL.$$.fragment),_Sr=l(),zve=a("p"),uSr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),bSr=l(),Nn=a("p"),FSr=o("The model class to instantiate is selected based on the "),Qve=a("code"),vSr=o("model_type"),TSr=o(` property of the config object (either
passed as an argument or loaded from `),Wve=a("code"),MSr=o("pretrained_model_name_or_path"),ESr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hve=a("code"),CSr=o("pretrained_model_name_or_path"),wSr=o(":"),ASr=l(),Uve=a("ul"),hE=a("li"),Jve=a("strong"),ySr=o("bert"),LSr=o(" \u2014 "),XH=a("a"),xSr=o("FlaxBertForNextSentencePrediction"),kSr=o(" (BERT model)"),SSr=l(),Yve=a("p"),RSr=o("Examples:"),BSr=l(),f(KL.$$.fragment),JBe=l(),xf=a("h2"),pE=a("a"),Kve=a("span"),f(ZL.$$.fragment),PSr=l(),Zve=a("span"),$Sr=o("FlaxAutoModelForImageClassification"),YBe=l(),Or=a("div"),f(e8.$$.fragment),ISr=l(),kf=a("p"),qSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),zH=a("a"),NSr=o("from_pretrained()"),jSr=o(" class method or the "),QH=a("a"),DSr=o("from_config()"),GSr=o(` class
method.`),OSr=l(),o8=a("p"),VSr=o("This class cannot be instantiated directly using "),e6e=a("code"),XSr=o("__init__()"),zSr=o(" (throws an error)."),QSr=l(),It=a("div"),f(r8.$$.fragment),WSr=l(),o6e=a("p"),HSr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),USr=l(),Sf=a("p"),JSr=o(`Note:
Loading a model from its configuration file does `),r6e=a("strong"),YSr=o("not"),KSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WH=a("a"),ZSr=o("from_pretrained()"),eRr=o(" to load the model weights."),oRr=l(),t6e=a("p"),rRr=o("Examples:"),tRr=l(),f(t8.$$.fragment),aRr=l(),qo=a("div"),f(a8.$$.fragment),nRr=l(),a6e=a("p"),sRr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),lRr=l(),jn=a("p"),iRr=o("The model class to instantiate is selected based on the "),n6e=a("code"),dRr=o("model_type"),cRr=o(` property of the config object (either
passed as an argument or loaded from `),s6e=a("code"),fRr=o("pretrained_model_name_or_path"),mRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l6e=a("code"),gRr=o("pretrained_model_name_or_path"),hRr=o(":"),pRr=l(),n8=a("ul"),_E=a("li"),i6e=a("strong"),_Rr=o("beit"),uRr=o(" \u2014 "),HH=a("a"),bRr=o("FlaxBeitForImageClassification"),FRr=o(" (BEiT model)"),vRr=l(),uE=a("li"),d6e=a("strong"),TRr=o("vit"),MRr=o(" \u2014 "),UH=a("a"),ERr=o("FlaxViTForImageClassification"),CRr=o(" (ViT model)"),wRr=l(),c6e=a("p"),ARr=o("Examples:"),yRr=l(),f(s8.$$.fragment),KBe=l(),Rf=a("h2"),bE=a("a"),f6e=a("span"),f(l8.$$.fragment),LRr=l(),m6e=a("span"),xRr=o("FlaxAutoModelForVision2Seq"),ZBe=l(),Vr=a("div"),f(i8.$$.fragment),kRr=l(),Bf=a("p"),SRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),JH=a("a"),RRr=o("from_pretrained()"),BRr=o(" class method or the "),YH=a("a"),PRr=o("from_config()"),$Rr=o(` class
method.`),IRr=l(),d8=a("p"),qRr=o("This class cannot be instantiated directly using "),g6e=a("code"),NRr=o("__init__()"),jRr=o(" (throws an error)."),DRr=l(),qt=a("div"),f(c8.$$.fragment),GRr=l(),h6e=a("p"),ORr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),VRr=l(),Pf=a("p"),XRr=o(`Note:
Loading a model from its configuration file does `),p6e=a("strong"),zRr=o("not"),QRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KH=a("a"),WRr=o("from_pretrained()"),HRr=o(" to load the model weights."),URr=l(),_6e=a("p"),JRr=o("Examples:"),YRr=l(),f(f8.$$.fragment),KRr=l(),No=a("div"),f(m8.$$.fragment),ZRr=l(),u6e=a("p"),eBr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),oBr=l(),Dn=a("p"),rBr=o("The model class to instantiate is selected based on the "),b6e=a("code"),tBr=o("model_type"),aBr=o(` property of the config object (either
passed as an argument or loaded from `),F6e=a("code"),nBr=o("pretrained_model_name_or_path"),sBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v6e=a("code"),lBr=o("pretrained_model_name_or_path"),iBr=o(":"),dBr=l(),T6e=a("ul"),FE=a("li"),M6e=a("strong"),cBr=o("vision-encoder-decoder"),fBr=o(" \u2014 "),ZH=a("a"),mBr=o("FlaxVisionEncoderDecoderModel"),gBr=o(" (Vision Encoder decoder model)"),hBr=l(),E6e=a("p"),pBr=o("Examples:"),_Br=l(),f(g8.$$.fragment),this.h()},l(c){const u=VEt('[data-svelte="svelte-1phssyn"]',document.head);Z=n(u,"META",{name:!0,content:!0}),u.forEach(t),io=i(c),de=n(c,"H1",{class:!0});var h8=s(de);Ce=n(h8,"A",{id:!0,class:!0,href:!0});var C6e=s(Ce);lo=n(C6e,"SPAN",{});var w6e=s(lo);m(me.$$.fragment,w6e),w6e.forEach(t),C6e.forEach(t),Me=i(h8),Xo=n(h8,"SPAN",{});var bBr=s(Xo);Ii=r(bBr,"Auto Classes"),bBr.forEach(t),h8.forEach(t),qf=i(c),fa=n(c,"P",{});var oPe=s(fa);qi=r(oPe,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ni=n(oPe,"CODE",{});var FBr=s(Ni);FC=r(FBr,"from_pretrained()"),FBr.forEach(t),Nf=r(oPe,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),oPe.forEach(t),xe=i(c),co=n(c,"P",{});var vE=s(co);ji=r(vE,"Instantiating one of "),Gn=n(vE,"A",{href:!0});var vBr=s(Gn);vC=r(vBr,"AutoConfig"),vBr.forEach(t),On=r(vE,", "),Vn=n(vE,"A",{href:!0});var TBr=s(Vn);TC=r(TBr,"AutoModel"),TBr.forEach(t),Di=r(vE,`, and
`),Xn=n(vE,"A",{href:!0});var MBr=s(Xn);MC=r(MBr,"AutoTokenizer"),MBr.forEach(t),Gi=r(vE," will directly create a class of the relevant architecture. For instance"),vE.forEach(t),jf=i(c),m(Da.$$.fragment,c),fo=i(c),_e=n(c,"P",{});var rPe=s(_e);f9=r(rPe,"will create a model that is an instance of "),Oi=n(rPe,"A",{href:!0});var EBr=s(Oi);m9=r(EBr,"BertModel"),EBr.forEach(t),g9=r(rPe,"."),rPe.forEach(t),zo=i(c),Ga=n(c,"P",{});var tPe=s(Ga);h9=r(tPe,"There is one class of "),Df=n(tPe,"CODE",{});var CBr=s(Df);p9=r(CBr,"AutoModel"),CBr.forEach(t),mIe=r(tPe," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),tPe.forEach(t),ZSe=i(c),Vi=n(c,"H2",{class:!0});var aPe=s(Vi);Gf=n(aPe,"A",{id:!0,class:!0,href:!0});var wBr=s(Gf);WJ=n(wBr,"SPAN",{});var ABr=s(WJ);m(EC.$$.fragment,ABr),ABr.forEach(t),wBr.forEach(t),gIe=i(aPe),HJ=n(aPe,"SPAN",{});var yBr=s(HJ);hIe=r(yBr,"Extending the Auto Classes"),yBr.forEach(t),aPe.forEach(t),eRe=i(c),zn=n(c,"P",{});var eU=s(zn);pIe=r(eU,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),UJ=n(eU,"CODE",{});var LBr=s(UJ);_Ie=r(LBr,"NewModel"),LBr.forEach(t),uIe=r(eU,", make sure you have a "),JJ=n(eU,"CODE",{});var xBr=s(JJ);bIe=r(xBr,"NewModelConfig"),xBr.forEach(t),FIe=r(eU,` then you can add those to the auto
classes like this:`),eU.forEach(t),oRe=i(c),m(CC.$$.fragment,c),rRe=i(c),_9=n(c,"P",{});var kBr=s(_9);vIe=r(kBr,"You will then be able to use the auto classes like you would usually do!"),kBr.forEach(t),tRe=i(c),m(Of.$$.fragment,c),aRe=i(c),Xi=n(c,"H2",{class:!0});var nPe=s(Xi);Vf=n(nPe,"A",{id:!0,class:!0,href:!0});var SBr=s(Vf);YJ=n(SBr,"SPAN",{});var RBr=s(YJ);m(wC.$$.fragment,RBr),RBr.forEach(t),SBr.forEach(t),TIe=i(nPe),KJ=n(nPe,"SPAN",{});var BBr=s(KJ);MIe=r(BBr,"AutoConfig"),BBr.forEach(t),nPe.forEach(t),nRe=i(c),Qo=n(c,"DIV",{class:!0});var Os=s(Qo);m(AC.$$.fragment,Os),EIe=i(Os),yC=n(Os,"P",{});var sPe=s(yC);CIe=r(sPe,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),u9=n(sPe,"A",{href:!0});var PBr=s(u9);wIe=r(PBr,"from_pretrained()"),PBr.forEach(t),AIe=r(sPe," class method."),sPe.forEach(t),yIe=i(Os),LC=n(Os,"P",{});var lPe=s(LC);LIe=r(lPe,"This class cannot be instantiated directly using "),ZJ=n(lPe,"CODE",{});var $Br=s(ZJ);xIe=r($Br,"__init__()"),$Br.forEach(t),kIe=r(lPe," (throws an error)."),lPe.forEach(t),SIe=i(Os),mo=n(Os,"DIV",{class:!0});var ga=s(mo);m(xC.$$.fragment,ga),RIe=i(ga),eY=n(ga,"P",{});var IBr=s(eY);BIe=r(IBr,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),IBr.forEach(t),PIe=i(ga),zi=n(ga,"P",{});var oU=s(zi);$Ie=r(oU,"The configuration class to instantiate is selected based on the "),oY=n(oU,"CODE",{});var qBr=s(oY);IIe=r(qBr,"model_type"),qBr.forEach(t),qIe=r(oU,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),rY=n(oU,"CODE",{});var NBr=s(rY);NIe=r(NBr,"pretrained_model_name_or_path"),NBr.forEach(t),jIe=r(oU,":"),oU.forEach(t),DIe=i(ga),F=n(ga,"UL",{});var v=s(F);Xf=n(v,"LI",{});var A6e=s(Xf);tY=n(A6e,"STRONG",{});var jBr=s(tY);GIe=r(jBr,"albert"),jBr.forEach(t),OIe=r(A6e," \u2014 "),b9=n(A6e,"A",{href:!0});var DBr=s(b9);VIe=r(DBr,"AlbertConfig"),DBr.forEach(t),XIe=r(A6e," (ALBERT model)"),A6e.forEach(t),zIe=i(v),zf=n(v,"LI",{});var y6e=s(zf);aY=n(y6e,"STRONG",{});var GBr=s(aY);QIe=r(GBr,"bart"),GBr.forEach(t),WIe=r(y6e," \u2014 "),F9=n(y6e,"A",{href:!0});var OBr=s(F9);HIe=r(OBr,"BartConfig"),OBr.forEach(t),UIe=r(y6e," (BART model)"),y6e.forEach(t),JIe=i(v),Qf=n(v,"LI",{});var L6e=s(Qf);nY=n(L6e,"STRONG",{});var VBr=s(nY);YIe=r(VBr,"beit"),VBr.forEach(t),KIe=r(L6e," \u2014 "),v9=n(L6e,"A",{href:!0});var XBr=s(v9);ZIe=r(XBr,"BeitConfig"),XBr.forEach(t),eqe=r(L6e," (BEiT model)"),L6e.forEach(t),oqe=i(v),Wf=n(v,"LI",{});var x6e=s(Wf);sY=n(x6e,"STRONG",{});var zBr=s(sY);rqe=r(zBr,"bert"),zBr.forEach(t),tqe=r(x6e," \u2014 "),T9=n(x6e,"A",{href:!0});var QBr=s(T9);aqe=r(QBr,"BertConfig"),QBr.forEach(t),nqe=r(x6e," (BERT model)"),x6e.forEach(t),sqe=i(v),Hf=n(v,"LI",{});var k6e=s(Hf);lY=n(k6e,"STRONG",{});var WBr=s(lY);lqe=r(WBr,"bert-generation"),WBr.forEach(t),iqe=r(k6e," \u2014 "),M9=n(k6e,"A",{href:!0});var HBr=s(M9);dqe=r(HBr,"BertGenerationConfig"),HBr.forEach(t),cqe=r(k6e," (Bert Generation model)"),k6e.forEach(t),fqe=i(v),Uf=n(v,"LI",{});var S6e=s(Uf);iY=n(S6e,"STRONG",{});var UBr=s(iY);mqe=r(UBr,"big_bird"),UBr.forEach(t),gqe=r(S6e," \u2014 "),E9=n(S6e,"A",{href:!0});var JBr=s(E9);hqe=r(JBr,"BigBirdConfig"),JBr.forEach(t),pqe=r(S6e," (BigBird model)"),S6e.forEach(t),_qe=i(v),Jf=n(v,"LI",{});var R6e=s(Jf);dY=n(R6e,"STRONG",{});var YBr=s(dY);uqe=r(YBr,"bigbird_pegasus"),YBr.forEach(t),bqe=r(R6e," \u2014 "),C9=n(R6e,"A",{href:!0});var KBr=s(C9);Fqe=r(KBr,"BigBirdPegasusConfig"),KBr.forEach(t),vqe=r(R6e," (BigBirdPegasus model)"),R6e.forEach(t),Tqe=i(v),Yf=n(v,"LI",{});var B6e=s(Yf);cY=n(B6e,"STRONG",{});var ZBr=s(cY);Mqe=r(ZBr,"blenderbot"),ZBr.forEach(t),Eqe=r(B6e," \u2014 "),w9=n(B6e,"A",{href:!0});var ePr=s(w9);Cqe=r(ePr,"BlenderbotConfig"),ePr.forEach(t),wqe=r(B6e," (Blenderbot model)"),B6e.forEach(t),Aqe=i(v),Kf=n(v,"LI",{});var P6e=s(Kf);fY=n(P6e,"STRONG",{});var oPr=s(fY);yqe=r(oPr,"blenderbot-small"),oPr.forEach(t),Lqe=r(P6e," \u2014 "),A9=n(P6e,"A",{href:!0});var rPr=s(A9);xqe=r(rPr,"BlenderbotSmallConfig"),rPr.forEach(t),kqe=r(P6e," (BlenderbotSmall model)"),P6e.forEach(t),Sqe=i(v),Zf=n(v,"LI",{});var $6e=s(Zf);mY=n($6e,"STRONG",{});var tPr=s(mY);Rqe=r(tPr,"camembert"),tPr.forEach(t),Bqe=r($6e," \u2014 "),y9=n($6e,"A",{href:!0});var aPr=s(y9);Pqe=r(aPr,"CamembertConfig"),aPr.forEach(t),$qe=r($6e," (CamemBERT model)"),$6e.forEach(t),Iqe=i(v),em=n(v,"LI",{});var I6e=s(em);gY=n(I6e,"STRONG",{});var nPr=s(gY);qqe=r(nPr,"canine"),nPr.forEach(t),Nqe=r(I6e," \u2014 "),L9=n(I6e,"A",{href:!0});var sPr=s(L9);jqe=r(sPr,"CanineConfig"),sPr.forEach(t),Dqe=r(I6e," (Canine model)"),I6e.forEach(t),Gqe=i(v),om=n(v,"LI",{});var q6e=s(om);hY=n(q6e,"STRONG",{});var lPr=s(hY);Oqe=r(lPr,"clip"),lPr.forEach(t),Vqe=r(q6e," \u2014 "),x9=n(q6e,"A",{href:!0});var iPr=s(x9);Xqe=r(iPr,"CLIPConfig"),iPr.forEach(t),zqe=r(q6e," (CLIP model)"),q6e.forEach(t),Qqe=i(v),rm=n(v,"LI",{});var N6e=s(rm);pY=n(N6e,"STRONG",{});var dPr=s(pY);Wqe=r(dPr,"convbert"),dPr.forEach(t),Hqe=r(N6e," \u2014 "),k9=n(N6e,"A",{href:!0});var cPr=s(k9);Uqe=r(cPr,"ConvBertConfig"),cPr.forEach(t),Jqe=r(N6e," (ConvBERT model)"),N6e.forEach(t),Yqe=i(v),tm=n(v,"LI",{});var j6e=s(tm);_Y=n(j6e,"STRONG",{});var fPr=s(_Y);Kqe=r(fPr,"convnext"),fPr.forEach(t),Zqe=r(j6e," \u2014 "),S9=n(j6e,"A",{href:!0});var mPr=s(S9);eNe=r(mPr,"ConvNextConfig"),mPr.forEach(t),oNe=r(j6e," (ConvNext model)"),j6e.forEach(t),rNe=i(v),am=n(v,"LI",{});var D6e=s(am);uY=n(D6e,"STRONG",{});var gPr=s(uY);tNe=r(gPr,"ctrl"),gPr.forEach(t),aNe=r(D6e," \u2014 "),R9=n(D6e,"A",{href:!0});var hPr=s(R9);nNe=r(hPr,"CTRLConfig"),hPr.forEach(t),sNe=r(D6e," (CTRL model)"),D6e.forEach(t),lNe=i(v),nm=n(v,"LI",{});var G6e=s(nm);bY=n(G6e,"STRONG",{});var pPr=s(bY);iNe=r(pPr,"data2vec-audio"),pPr.forEach(t),dNe=r(G6e," \u2014 "),B9=n(G6e,"A",{href:!0});var _Pr=s(B9);cNe=r(_Pr,"Data2VecAudioConfig"),_Pr.forEach(t),fNe=r(G6e," (Data2VecAudio model)"),G6e.forEach(t),mNe=i(v),sm=n(v,"LI",{});var O6e=s(sm);FY=n(O6e,"STRONG",{});var uPr=s(FY);gNe=r(uPr,"data2vec-text"),uPr.forEach(t),hNe=r(O6e," \u2014 "),P9=n(O6e,"A",{href:!0});var bPr=s(P9);pNe=r(bPr,"Data2VecTextConfig"),bPr.forEach(t),_Ne=r(O6e," (Data2VecText model)"),O6e.forEach(t),uNe=i(v),lm=n(v,"LI",{});var V6e=s(lm);vY=n(V6e,"STRONG",{});var FPr=s(vY);bNe=r(FPr,"deberta"),FPr.forEach(t),FNe=r(V6e," \u2014 "),$9=n(V6e,"A",{href:!0});var vPr=s($9);vNe=r(vPr,"DebertaConfig"),vPr.forEach(t),TNe=r(V6e," (DeBERTa model)"),V6e.forEach(t),MNe=i(v),im=n(v,"LI",{});var X6e=s(im);TY=n(X6e,"STRONG",{});var TPr=s(TY);ENe=r(TPr,"deberta-v2"),TPr.forEach(t),CNe=r(X6e," \u2014 "),I9=n(X6e,"A",{href:!0});var MPr=s(I9);wNe=r(MPr,"DebertaV2Config"),MPr.forEach(t),ANe=r(X6e," (DeBERTa-v2 model)"),X6e.forEach(t),yNe=i(v),dm=n(v,"LI",{});var z6e=s(dm);MY=n(z6e,"STRONG",{});var EPr=s(MY);LNe=r(EPr,"decision_transformer"),EPr.forEach(t),xNe=r(z6e," \u2014 "),q9=n(z6e,"A",{href:!0});var CPr=s(q9);kNe=r(CPr,"DecisionTransformerConfig"),CPr.forEach(t),SNe=r(z6e," (Decision Transformer model)"),z6e.forEach(t),RNe=i(v),cm=n(v,"LI",{});var Q6e=s(cm);EY=n(Q6e,"STRONG",{});var wPr=s(EY);BNe=r(wPr,"deit"),wPr.forEach(t),PNe=r(Q6e," \u2014 "),N9=n(Q6e,"A",{href:!0});var APr=s(N9);$Ne=r(APr,"DeiTConfig"),APr.forEach(t),INe=r(Q6e," (DeiT model)"),Q6e.forEach(t),qNe=i(v),fm=n(v,"LI",{});var W6e=s(fm);CY=n(W6e,"STRONG",{});var yPr=s(CY);NNe=r(yPr,"detr"),yPr.forEach(t),jNe=r(W6e," \u2014 "),j9=n(W6e,"A",{href:!0});var LPr=s(j9);DNe=r(LPr,"DetrConfig"),LPr.forEach(t),GNe=r(W6e," (DETR model)"),W6e.forEach(t),ONe=i(v),mm=n(v,"LI",{});var H6e=s(mm);wY=n(H6e,"STRONG",{});var xPr=s(wY);VNe=r(xPr,"distilbert"),xPr.forEach(t),XNe=r(H6e," \u2014 "),D9=n(H6e,"A",{href:!0});var kPr=s(D9);zNe=r(kPr,"DistilBertConfig"),kPr.forEach(t),QNe=r(H6e," (DistilBERT model)"),H6e.forEach(t),WNe=i(v),gm=n(v,"LI",{});var U6e=s(gm);AY=n(U6e,"STRONG",{});var SPr=s(AY);HNe=r(SPr,"dpr"),SPr.forEach(t),UNe=r(U6e," \u2014 "),G9=n(U6e,"A",{href:!0});var RPr=s(G9);JNe=r(RPr,"DPRConfig"),RPr.forEach(t),YNe=r(U6e," (DPR model)"),U6e.forEach(t),KNe=i(v),hm=n(v,"LI",{});var J6e=s(hm);yY=n(J6e,"STRONG",{});var BPr=s(yY);ZNe=r(BPr,"dpt"),BPr.forEach(t),eje=r(J6e," \u2014 "),O9=n(J6e,"A",{href:!0});var PPr=s(O9);oje=r(PPr,"DPTConfig"),PPr.forEach(t),rje=r(J6e," (DPT model)"),J6e.forEach(t),tje=i(v),pm=n(v,"LI",{});var Y6e=s(pm);LY=n(Y6e,"STRONG",{});var $Pr=s(LY);aje=r($Pr,"electra"),$Pr.forEach(t),nje=r(Y6e," \u2014 "),V9=n(Y6e,"A",{href:!0});var IPr=s(V9);sje=r(IPr,"ElectraConfig"),IPr.forEach(t),lje=r(Y6e," (ELECTRA model)"),Y6e.forEach(t),ije=i(v),_m=n(v,"LI",{});var K6e=s(_m);xY=n(K6e,"STRONG",{});var qPr=s(xY);dje=r(qPr,"encoder-decoder"),qPr.forEach(t),cje=r(K6e," \u2014 "),X9=n(K6e,"A",{href:!0});var NPr=s(X9);fje=r(NPr,"EncoderDecoderConfig"),NPr.forEach(t),mje=r(K6e," (Encoder decoder model)"),K6e.forEach(t),gje=i(v),um=n(v,"LI",{});var Z6e=s(um);kY=n(Z6e,"STRONG",{});var jPr=s(kY);hje=r(jPr,"flaubert"),jPr.forEach(t),pje=r(Z6e," \u2014 "),z9=n(Z6e,"A",{href:!0});var DPr=s(z9);_je=r(DPr,"FlaubertConfig"),DPr.forEach(t),uje=r(Z6e," (FlauBERT model)"),Z6e.forEach(t),bje=i(v),bm=n(v,"LI",{});var eTe=s(bm);SY=n(eTe,"STRONG",{});var GPr=s(SY);Fje=r(GPr,"fnet"),GPr.forEach(t),vje=r(eTe," \u2014 "),Q9=n(eTe,"A",{href:!0});var OPr=s(Q9);Tje=r(OPr,"FNetConfig"),OPr.forEach(t),Mje=r(eTe," (FNet model)"),eTe.forEach(t),Eje=i(v),Fm=n(v,"LI",{});var oTe=s(Fm);RY=n(oTe,"STRONG",{});var VPr=s(RY);Cje=r(VPr,"fsmt"),VPr.forEach(t),wje=r(oTe," \u2014 "),W9=n(oTe,"A",{href:!0});var XPr=s(W9);Aje=r(XPr,"FSMTConfig"),XPr.forEach(t),yje=r(oTe," (FairSeq Machine-Translation model)"),oTe.forEach(t),Lje=i(v),vm=n(v,"LI",{});var rTe=s(vm);BY=n(rTe,"STRONG",{});var zPr=s(BY);xje=r(zPr,"funnel"),zPr.forEach(t),kje=r(rTe," \u2014 "),H9=n(rTe,"A",{href:!0});var QPr=s(H9);Sje=r(QPr,"FunnelConfig"),QPr.forEach(t),Rje=r(rTe," (Funnel Transformer model)"),rTe.forEach(t),Bje=i(v),Tm=n(v,"LI",{});var tTe=s(Tm);PY=n(tTe,"STRONG",{});var WPr=s(PY);Pje=r(WPr,"glpn"),WPr.forEach(t),$je=r(tTe," \u2014 "),U9=n(tTe,"A",{href:!0});var HPr=s(U9);Ije=r(HPr,"GLPNConfig"),HPr.forEach(t),qje=r(tTe," (GLPN model)"),tTe.forEach(t),Nje=i(v),Mm=n(v,"LI",{});var aTe=s(Mm);$Y=n(aTe,"STRONG",{});var UPr=s($Y);jje=r(UPr,"gpt2"),UPr.forEach(t),Dje=r(aTe," \u2014 "),J9=n(aTe,"A",{href:!0});var JPr=s(J9);Gje=r(JPr,"GPT2Config"),JPr.forEach(t),Oje=r(aTe," (OpenAI GPT-2 model)"),aTe.forEach(t),Vje=i(v),Em=n(v,"LI",{});var nTe=s(Em);IY=n(nTe,"STRONG",{});var YPr=s(IY);Xje=r(YPr,"gpt_neo"),YPr.forEach(t),zje=r(nTe," \u2014 "),Y9=n(nTe,"A",{href:!0});var KPr=s(Y9);Qje=r(KPr,"GPTNeoConfig"),KPr.forEach(t),Wje=r(nTe," (GPT Neo model)"),nTe.forEach(t),Hje=i(v),Cm=n(v,"LI",{});var sTe=s(Cm);qY=n(sTe,"STRONG",{});var ZPr=s(qY);Uje=r(ZPr,"gptj"),ZPr.forEach(t),Jje=r(sTe," \u2014 "),K9=n(sTe,"A",{href:!0});var e$r=s(K9);Yje=r(e$r,"GPTJConfig"),e$r.forEach(t),Kje=r(sTe," (GPT-J model)"),sTe.forEach(t),Zje=i(v),wm=n(v,"LI",{});var lTe=s(wm);NY=n(lTe,"STRONG",{});var o$r=s(NY);eDe=r(o$r,"hubert"),o$r.forEach(t),oDe=r(lTe," \u2014 "),Z9=n(lTe,"A",{href:!0});var r$r=s(Z9);rDe=r(r$r,"HubertConfig"),r$r.forEach(t),tDe=r(lTe," (Hubert model)"),lTe.forEach(t),aDe=i(v),Am=n(v,"LI",{});var iTe=s(Am);jY=n(iTe,"STRONG",{});var t$r=s(jY);nDe=r(t$r,"ibert"),t$r.forEach(t),sDe=r(iTe," \u2014 "),ex=n(iTe,"A",{href:!0});var a$r=s(ex);lDe=r(a$r,"IBertConfig"),a$r.forEach(t),iDe=r(iTe," (I-BERT model)"),iTe.forEach(t),dDe=i(v),ym=n(v,"LI",{});var dTe=s(ym);DY=n(dTe,"STRONG",{});var n$r=s(DY);cDe=r(n$r,"imagegpt"),n$r.forEach(t),fDe=r(dTe," \u2014 "),ox=n(dTe,"A",{href:!0});var s$r=s(ox);mDe=r(s$r,"ImageGPTConfig"),s$r.forEach(t),gDe=r(dTe," (ImageGPT model)"),dTe.forEach(t),hDe=i(v),Lm=n(v,"LI",{});var cTe=s(Lm);GY=n(cTe,"STRONG",{});var l$r=s(GY);pDe=r(l$r,"layoutlm"),l$r.forEach(t),_De=r(cTe," \u2014 "),rx=n(cTe,"A",{href:!0});var i$r=s(rx);uDe=r(i$r,"LayoutLMConfig"),i$r.forEach(t),bDe=r(cTe," (LayoutLM model)"),cTe.forEach(t),FDe=i(v),xm=n(v,"LI",{});var fTe=s(xm);OY=n(fTe,"STRONG",{});var d$r=s(OY);vDe=r(d$r,"layoutlmv2"),d$r.forEach(t),TDe=r(fTe," \u2014 "),tx=n(fTe,"A",{href:!0});var c$r=s(tx);MDe=r(c$r,"LayoutLMv2Config"),c$r.forEach(t),EDe=r(fTe," (LayoutLMv2 model)"),fTe.forEach(t),CDe=i(v),km=n(v,"LI",{});var mTe=s(km);VY=n(mTe,"STRONG",{});var f$r=s(VY);wDe=r(f$r,"led"),f$r.forEach(t),ADe=r(mTe," \u2014 "),ax=n(mTe,"A",{href:!0});var m$r=s(ax);yDe=r(m$r,"LEDConfig"),m$r.forEach(t),LDe=r(mTe," (LED model)"),mTe.forEach(t),xDe=i(v),Sm=n(v,"LI",{});var gTe=s(Sm);XY=n(gTe,"STRONG",{});var g$r=s(XY);kDe=r(g$r,"longformer"),g$r.forEach(t),SDe=r(gTe," \u2014 "),nx=n(gTe,"A",{href:!0});var h$r=s(nx);RDe=r(h$r,"LongformerConfig"),h$r.forEach(t),BDe=r(gTe," (Longformer model)"),gTe.forEach(t),PDe=i(v),Rm=n(v,"LI",{});var hTe=s(Rm);zY=n(hTe,"STRONG",{});var p$r=s(zY);$De=r(p$r,"luke"),p$r.forEach(t),IDe=r(hTe," \u2014 "),sx=n(hTe,"A",{href:!0});var _$r=s(sx);qDe=r(_$r,"LukeConfig"),_$r.forEach(t),NDe=r(hTe," (LUKE model)"),hTe.forEach(t),jDe=i(v),Bm=n(v,"LI",{});var pTe=s(Bm);QY=n(pTe,"STRONG",{});var u$r=s(QY);DDe=r(u$r,"lxmert"),u$r.forEach(t),GDe=r(pTe," \u2014 "),lx=n(pTe,"A",{href:!0});var b$r=s(lx);ODe=r(b$r,"LxmertConfig"),b$r.forEach(t),VDe=r(pTe," (LXMERT model)"),pTe.forEach(t),XDe=i(v),Pm=n(v,"LI",{});var _Te=s(Pm);WY=n(_Te,"STRONG",{});var F$r=s(WY);zDe=r(F$r,"m2m_100"),F$r.forEach(t),QDe=r(_Te," \u2014 "),ix=n(_Te,"A",{href:!0});var v$r=s(ix);WDe=r(v$r,"M2M100Config"),v$r.forEach(t),HDe=r(_Te," (M2M100 model)"),_Te.forEach(t),UDe=i(v),$m=n(v,"LI",{});var uTe=s($m);HY=n(uTe,"STRONG",{});var T$r=s(HY);JDe=r(T$r,"marian"),T$r.forEach(t),YDe=r(uTe," \u2014 "),dx=n(uTe,"A",{href:!0});var M$r=s(dx);KDe=r(M$r,"MarianConfig"),M$r.forEach(t),ZDe=r(uTe," (Marian model)"),uTe.forEach(t),eGe=i(v),Im=n(v,"LI",{});var bTe=s(Im);UY=n(bTe,"STRONG",{});var E$r=s(UY);oGe=r(E$r,"maskformer"),E$r.forEach(t),rGe=r(bTe," \u2014 "),cx=n(bTe,"A",{href:!0});var C$r=s(cx);tGe=r(C$r,"MaskFormerConfig"),C$r.forEach(t),aGe=r(bTe," (MaskFormer model)"),bTe.forEach(t),nGe=i(v),qm=n(v,"LI",{});var FTe=s(qm);JY=n(FTe,"STRONG",{});var w$r=s(JY);sGe=r(w$r,"mbart"),w$r.forEach(t),lGe=r(FTe," \u2014 "),fx=n(FTe,"A",{href:!0});var A$r=s(fx);iGe=r(A$r,"MBartConfig"),A$r.forEach(t),dGe=r(FTe," (mBART model)"),FTe.forEach(t),cGe=i(v),Nm=n(v,"LI",{});var vTe=s(Nm);YY=n(vTe,"STRONG",{});var y$r=s(YY);fGe=r(y$r,"megatron-bert"),y$r.forEach(t),mGe=r(vTe," \u2014 "),mx=n(vTe,"A",{href:!0});var L$r=s(mx);gGe=r(L$r,"MegatronBertConfig"),L$r.forEach(t),hGe=r(vTe," (MegatronBert model)"),vTe.forEach(t),pGe=i(v),jm=n(v,"LI",{});var TTe=s(jm);KY=n(TTe,"STRONG",{});var x$r=s(KY);_Ge=r(x$r,"mobilebert"),x$r.forEach(t),uGe=r(TTe," \u2014 "),gx=n(TTe,"A",{href:!0});var k$r=s(gx);bGe=r(k$r,"MobileBertConfig"),k$r.forEach(t),FGe=r(TTe," (MobileBERT model)"),TTe.forEach(t),vGe=i(v),Dm=n(v,"LI",{});var MTe=s(Dm);ZY=n(MTe,"STRONG",{});var S$r=s(ZY);TGe=r(S$r,"mpnet"),S$r.forEach(t),MGe=r(MTe," \u2014 "),hx=n(MTe,"A",{href:!0});var R$r=s(hx);EGe=r(R$r,"MPNetConfig"),R$r.forEach(t),CGe=r(MTe," (MPNet model)"),MTe.forEach(t),wGe=i(v),Gm=n(v,"LI",{});var ETe=s(Gm);eK=n(ETe,"STRONG",{});var B$r=s(eK);AGe=r(B$r,"mt5"),B$r.forEach(t),yGe=r(ETe," \u2014 "),px=n(ETe,"A",{href:!0});var P$r=s(px);LGe=r(P$r,"MT5Config"),P$r.forEach(t),xGe=r(ETe," (mT5 model)"),ETe.forEach(t),kGe=i(v),Om=n(v,"LI",{});var CTe=s(Om);oK=n(CTe,"STRONG",{});var $$r=s(oK);SGe=r($$r,"nystromformer"),$$r.forEach(t),RGe=r(CTe," \u2014 "),_x=n(CTe,"A",{href:!0});var I$r=s(_x);BGe=r(I$r,"NystromformerConfig"),I$r.forEach(t),PGe=r(CTe," (Nystromformer model)"),CTe.forEach(t),$Ge=i(v),Vm=n(v,"LI",{});var wTe=s(Vm);rK=n(wTe,"STRONG",{});var q$r=s(rK);IGe=r(q$r,"openai-gpt"),q$r.forEach(t),qGe=r(wTe," \u2014 "),ux=n(wTe,"A",{href:!0});var N$r=s(ux);NGe=r(N$r,"OpenAIGPTConfig"),N$r.forEach(t),jGe=r(wTe," (OpenAI GPT model)"),wTe.forEach(t),DGe=i(v),Xm=n(v,"LI",{});var ATe=s(Xm);tK=n(ATe,"STRONG",{});var j$r=s(tK);GGe=r(j$r,"pegasus"),j$r.forEach(t),OGe=r(ATe," \u2014 "),bx=n(ATe,"A",{href:!0});var D$r=s(bx);VGe=r(D$r,"PegasusConfig"),D$r.forEach(t),XGe=r(ATe," (Pegasus model)"),ATe.forEach(t),zGe=i(v),zm=n(v,"LI",{});var yTe=s(zm);aK=n(yTe,"STRONG",{});var G$r=s(aK);QGe=r(G$r,"perceiver"),G$r.forEach(t),WGe=r(yTe," \u2014 "),Fx=n(yTe,"A",{href:!0});var O$r=s(Fx);HGe=r(O$r,"PerceiverConfig"),O$r.forEach(t),UGe=r(yTe," (Perceiver model)"),yTe.forEach(t),JGe=i(v),Qm=n(v,"LI",{});var LTe=s(Qm);nK=n(LTe,"STRONG",{});var V$r=s(nK);YGe=r(V$r,"plbart"),V$r.forEach(t),KGe=r(LTe," \u2014 "),vx=n(LTe,"A",{href:!0});var X$r=s(vx);ZGe=r(X$r,"PLBartConfig"),X$r.forEach(t),eOe=r(LTe," (PLBart model)"),LTe.forEach(t),oOe=i(v),Wm=n(v,"LI",{});var xTe=s(Wm);sK=n(xTe,"STRONG",{});var z$r=s(sK);rOe=r(z$r,"poolformer"),z$r.forEach(t),tOe=r(xTe," \u2014 "),Tx=n(xTe,"A",{href:!0});var Q$r=s(Tx);aOe=r(Q$r,"PoolFormerConfig"),Q$r.forEach(t),nOe=r(xTe," (PoolFormer model)"),xTe.forEach(t),sOe=i(v),Hm=n(v,"LI",{});var kTe=s(Hm);lK=n(kTe,"STRONG",{});var W$r=s(lK);lOe=r(W$r,"prophetnet"),W$r.forEach(t),iOe=r(kTe," \u2014 "),Mx=n(kTe,"A",{href:!0});var H$r=s(Mx);dOe=r(H$r,"ProphetNetConfig"),H$r.forEach(t),cOe=r(kTe," (ProphetNet model)"),kTe.forEach(t),fOe=i(v),Um=n(v,"LI",{});var STe=s(Um);iK=n(STe,"STRONG",{});var U$r=s(iK);mOe=r(U$r,"qdqbert"),U$r.forEach(t),gOe=r(STe," \u2014 "),Ex=n(STe,"A",{href:!0});var J$r=s(Ex);hOe=r(J$r,"QDQBertConfig"),J$r.forEach(t),pOe=r(STe," (QDQBert model)"),STe.forEach(t),_Oe=i(v),Jm=n(v,"LI",{});var RTe=s(Jm);dK=n(RTe,"STRONG",{});var Y$r=s(dK);uOe=r(Y$r,"rag"),Y$r.forEach(t),bOe=r(RTe," \u2014 "),Cx=n(RTe,"A",{href:!0});var K$r=s(Cx);FOe=r(K$r,"RagConfig"),K$r.forEach(t),vOe=r(RTe," (RAG model)"),RTe.forEach(t),TOe=i(v),Ym=n(v,"LI",{});var BTe=s(Ym);cK=n(BTe,"STRONG",{});var Z$r=s(cK);MOe=r(Z$r,"realm"),Z$r.forEach(t),EOe=r(BTe," \u2014 "),wx=n(BTe,"A",{href:!0});var eIr=s(wx);COe=r(eIr,"RealmConfig"),eIr.forEach(t),wOe=r(BTe," (Realm model)"),BTe.forEach(t),AOe=i(v),Km=n(v,"LI",{});var PTe=s(Km);fK=n(PTe,"STRONG",{});var oIr=s(fK);yOe=r(oIr,"reformer"),oIr.forEach(t),LOe=r(PTe," \u2014 "),Ax=n(PTe,"A",{href:!0});var rIr=s(Ax);xOe=r(rIr,"ReformerConfig"),rIr.forEach(t),kOe=r(PTe," (Reformer model)"),PTe.forEach(t),SOe=i(v),Zm=n(v,"LI",{});var $Te=s(Zm);mK=n($Te,"STRONG",{});var tIr=s(mK);ROe=r(tIr,"rembert"),tIr.forEach(t),BOe=r($Te," \u2014 "),yx=n($Te,"A",{href:!0});var aIr=s(yx);POe=r(aIr,"RemBertConfig"),aIr.forEach(t),$Oe=r($Te," (RemBERT model)"),$Te.forEach(t),IOe=i(v),eg=n(v,"LI",{});var ITe=s(eg);gK=n(ITe,"STRONG",{});var nIr=s(gK);qOe=r(nIr,"resnet"),nIr.forEach(t),NOe=r(ITe," \u2014 "),Lx=n(ITe,"A",{href:!0});var sIr=s(Lx);jOe=r(sIr,"ResNetConfig"),sIr.forEach(t),DOe=r(ITe," (ResNet model)"),ITe.forEach(t),GOe=i(v),og=n(v,"LI",{});var qTe=s(og);hK=n(qTe,"STRONG",{});var lIr=s(hK);OOe=r(lIr,"retribert"),lIr.forEach(t),VOe=r(qTe," \u2014 "),xx=n(qTe,"A",{href:!0});var iIr=s(xx);XOe=r(iIr,"RetriBertConfig"),iIr.forEach(t),zOe=r(qTe," (RetriBERT model)"),qTe.forEach(t),QOe=i(v),rg=n(v,"LI",{});var NTe=s(rg);pK=n(NTe,"STRONG",{});var dIr=s(pK);WOe=r(dIr,"roberta"),dIr.forEach(t),HOe=r(NTe," \u2014 "),kx=n(NTe,"A",{href:!0});var cIr=s(kx);UOe=r(cIr,"RobertaConfig"),cIr.forEach(t),JOe=r(NTe," (RoBERTa model)"),NTe.forEach(t),YOe=i(v),tg=n(v,"LI",{});var jTe=s(tg);_K=n(jTe,"STRONG",{});var fIr=s(_K);KOe=r(fIr,"roformer"),fIr.forEach(t),ZOe=r(jTe," \u2014 "),Sx=n(jTe,"A",{href:!0});var mIr=s(Sx);eVe=r(mIr,"RoFormerConfig"),mIr.forEach(t),oVe=r(jTe," (RoFormer model)"),jTe.forEach(t),rVe=i(v),ag=n(v,"LI",{});var DTe=s(ag);uK=n(DTe,"STRONG",{});var gIr=s(uK);tVe=r(gIr,"segformer"),gIr.forEach(t),aVe=r(DTe," \u2014 "),Rx=n(DTe,"A",{href:!0});var hIr=s(Rx);nVe=r(hIr,"SegformerConfig"),hIr.forEach(t),sVe=r(DTe," (SegFormer model)"),DTe.forEach(t),lVe=i(v),ng=n(v,"LI",{});var GTe=s(ng);bK=n(GTe,"STRONG",{});var pIr=s(bK);iVe=r(pIr,"sew"),pIr.forEach(t),dVe=r(GTe," \u2014 "),Bx=n(GTe,"A",{href:!0});var _Ir=s(Bx);cVe=r(_Ir,"SEWConfig"),_Ir.forEach(t),fVe=r(GTe," (SEW model)"),GTe.forEach(t),mVe=i(v),sg=n(v,"LI",{});var OTe=s(sg);FK=n(OTe,"STRONG",{});var uIr=s(FK);gVe=r(uIr,"sew-d"),uIr.forEach(t),hVe=r(OTe," \u2014 "),Px=n(OTe,"A",{href:!0});var bIr=s(Px);pVe=r(bIr,"SEWDConfig"),bIr.forEach(t),_Ve=r(OTe," (SEW-D model)"),OTe.forEach(t),uVe=i(v),lg=n(v,"LI",{});var VTe=s(lg);vK=n(VTe,"STRONG",{});var FIr=s(vK);bVe=r(FIr,"speech-encoder-decoder"),FIr.forEach(t),FVe=r(VTe," \u2014 "),$x=n(VTe,"A",{href:!0});var vIr=s($x);vVe=r(vIr,"SpeechEncoderDecoderConfig"),vIr.forEach(t),TVe=r(VTe," (Speech Encoder decoder model)"),VTe.forEach(t),MVe=i(v),ig=n(v,"LI",{});var XTe=s(ig);TK=n(XTe,"STRONG",{});var TIr=s(TK);EVe=r(TIr,"speech_to_text"),TIr.forEach(t),CVe=r(XTe," \u2014 "),Ix=n(XTe,"A",{href:!0});var MIr=s(Ix);wVe=r(MIr,"Speech2TextConfig"),MIr.forEach(t),AVe=r(XTe," (Speech2Text model)"),XTe.forEach(t),yVe=i(v),dg=n(v,"LI",{});var zTe=s(dg);MK=n(zTe,"STRONG",{});var EIr=s(MK);LVe=r(EIr,"speech_to_text_2"),EIr.forEach(t),xVe=r(zTe," \u2014 "),qx=n(zTe,"A",{href:!0});var CIr=s(qx);kVe=r(CIr,"Speech2Text2Config"),CIr.forEach(t),SVe=r(zTe," (Speech2Text2 model)"),zTe.forEach(t),RVe=i(v),cg=n(v,"LI",{});var QTe=s(cg);EK=n(QTe,"STRONG",{});var wIr=s(EK);BVe=r(wIr,"splinter"),wIr.forEach(t),PVe=r(QTe," \u2014 "),Nx=n(QTe,"A",{href:!0});var AIr=s(Nx);$Ve=r(AIr,"SplinterConfig"),AIr.forEach(t),IVe=r(QTe," (Splinter model)"),QTe.forEach(t),qVe=i(v),fg=n(v,"LI",{});var WTe=s(fg);CK=n(WTe,"STRONG",{});var yIr=s(CK);NVe=r(yIr,"squeezebert"),yIr.forEach(t),jVe=r(WTe," \u2014 "),jx=n(WTe,"A",{href:!0});var LIr=s(jx);DVe=r(LIr,"SqueezeBertConfig"),LIr.forEach(t),GVe=r(WTe," (SqueezeBERT model)"),WTe.forEach(t),OVe=i(v),mg=n(v,"LI",{});var HTe=s(mg);wK=n(HTe,"STRONG",{});var xIr=s(wK);VVe=r(xIr,"swin"),xIr.forEach(t),XVe=r(HTe," \u2014 "),Dx=n(HTe,"A",{href:!0});var kIr=s(Dx);zVe=r(kIr,"SwinConfig"),kIr.forEach(t),QVe=r(HTe," (Swin model)"),HTe.forEach(t),WVe=i(v),gg=n(v,"LI",{});var UTe=s(gg);AK=n(UTe,"STRONG",{});var SIr=s(AK);HVe=r(SIr,"t5"),SIr.forEach(t),UVe=r(UTe," \u2014 "),Gx=n(UTe,"A",{href:!0});var RIr=s(Gx);JVe=r(RIr,"T5Config"),RIr.forEach(t),YVe=r(UTe," (T5 model)"),UTe.forEach(t),KVe=i(v),hg=n(v,"LI",{});var JTe=s(hg);yK=n(JTe,"STRONG",{});var BIr=s(yK);ZVe=r(BIr,"tapas"),BIr.forEach(t),eXe=r(JTe," \u2014 "),Ox=n(JTe,"A",{href:!0});var PIr=s(Ox);oXe=r(PIr,"TapasConfig"),PIr.forEach(t),rXe=r(JTe," (TAPAS model)"),JTe.forEach(t),tXe=i(v),pg=n(v,"LI",{});var YTe=s(pg);LK=n(YTe,"STRONG",{});var $Ir=s(LK);aXe=r($Ir,"tapex"),$Ir.forEach(t),nXe=r(YTe," \u2014 "),Vx=n(YTe,"A",{href:!0});var IIr=s(Vx);sXe=r(IIr,"BartConfig"),IIr.forEach(t),lXe=r(YTe," (TAPEX model)"),YTe.forEach(t),iXe=i(v),_g=n(v,"LI",{});var KTe=s(_g);xK=n(KTe,"STRONG",{});var qIr=s(xK);dXe=r(qIr,"transfo-xl"),qIr.forEach(t),cXe=r(KTe," \u2014 "),Xx=n(KTe,"A",{href:!0});var NIr=s(Xx);fXe=r(NIr,"TransfoXLConfig"),NIr.forEach(t),mXe=r(KTe," (Transformer-XL model)"),KTe.forEach(t),gXe=i(v),ug=n(v,"LI",{});var ZTe=s(ug);kK=n(ZTe,"STRONG",{});var jIr=s(kK);hXe=r(jIr,"trocr"),jIr.forEach(t),pXe=r(ZTe," \u2014 "),zx=n(ZTe,"A",{href:!0});var DIr=s(zx);_Xe=r(DIr,"TrOCRConfig"),DIr.forEach(t),uXe=r(ZTe," (TrOCR model)"),ZTe.forEach(t),bXe=i(v),bg=n(v,"LI",{});var e7e=s(bg);SK=n(e7e,"STRONG",{});var GIr=s(SK);FXe=r(GIr,"unispeech"),GIr.forEach(t),vXe=r(e7e," \u2014 "),Qx=n(e7e,"A",{href:!0});var OIr=s(Qx);TXe=r(OIr,"UniSpeechConfig"),OIr.forEach(t),MXe=r(e7e," (UniSpeech model)"),e7e.forEach(t),EXe=i(v),Fg=n(v,"LI",{});var o7e=s(Fg);RK=n(o7e,"STRONG",{});var VIr=s(RK);CXe=r(VIr,"unispeech-sat"),VIr.forEach(t),wXe=r(o7e," \u2014 "),Wx=n(o7e,"A",{href:!0});var XIr=s(Wx);AXe=r(XIr,"UniSpeechSatConfig"),XIr.forEach(t),yXe=r(o7e," (UniSpeechSat model)"),o7e.forEach(t),LXe=i(v),vg=n(v,"LI",{});var r7e=s(vg);BK=n(r7e,"STRONG",{});var zIr=s(BK);xXe=r(zIr,"van"),zIr.forEach(t),kXe=r(r7e," \u2014 "),Hx=n(r7e,"A",{href:!0});var QIr=s(Hx);SXe=r(QIr,"VanConfig"),QIr.forEach(t),RXe=r(r7e," (VAN model)"),r7e.forEach(t),BXe=i(v),Tg=n(v,"LI",{});var t7e=s(Tg);PK=n(t7e,"STRONG",{});var WIr=s(PK);PXe=r(WIr,"vilt"),WIr.forEach(t),$Xe=r(t7e," \u2014 "),Ux=n(t7e,"A",{href:!0});var HIr=s(Ux);IXe=r(HIr,"ViltConfig"),HIr.forEach(t),qXe=r(t7e," (ViLT model)"),t7e.forEach(t),NXe=i(v),Mg=n(v,"LI",{});var a7e=s(Mg);$K=n(a7e,"STRONG",{});var UIr=s($K);jXe=r(UIr,"vision-encoder-decoder"),UIr.forEach(t),DXe=r(a7e," \u2014 "),Jx=n(a7e,"A",{href:!0});var JIr=s(Jx);GXe=r(JIr,"VisionEncoderDecoderConfig"),JIr.forEach(t),OXe=r(a7e," (Vision Encoder decoder model)"),a7e.forEach(t),VXe=i(v),Eg=n(v,"LI",{});var n7e=s(Eg);IK=n(n7e,"STRONG",{});var YIr=s(IK);XXe=r(YIr,"vision-text-dual-encoder"),YIr.forEach(t),zXe=r(n7e," \u2014 "),Yx=n(n7e,"A",{href:!0});var KIr=s(Yx);QXe=r(KIr,"VisionTextDualEncoderConfig"),KIr.forEach(t),WXe=r(n7e," (VisionTextDualEncoder model)"),n7e.forEach(t),HXe=i(v),Cg=n(v,"LI",{});var s7e=s(Cg);qK=n(s7e,"STRONG",{});var ZIr=s(qK);UXe=r(ZIr,"visual_bert"),ZIr.forEach(t),JXe=r(s7e," \u2014 "),Kx=n(s7e,"A",{href:!0});var eqr=s(Kx);YXe=r(eqr,"VisualBertConfig"),eqr.forEach(t),KXe=r(s7e," (VisualBert model)"),s7e.forEach(t),ZXe=i(v),wg=n(v,"LI",{});var l7e=s(wg);NK=n(l7e,"STRONG",{});var oqr=s(NK);eze=r(oqr,"vit"),oqr.forEach(t),oze=r(l7e," \u2014 "),Zx=n(l7e,"A",{href:!0});var rqr=s(Zx);rze=r(rqr,"ViTConfig"),rqr.forEach(t),tze=r(l7e," (ViT model)"),l7e.forEach(t),aze=i(v),Ag=n(v,"LI",{});var i7e=s(Ag);jK=n(i7e,"STRONG",{});var tqr=s(jK);nze=r(tqr,"vit_mae"),tqr.forEach(t),sze=r(i7e," \u2014 "),ek=n(i7e,"A",{href:!0});var aqr=s(ek);lze=r(aqr,"ViTMAEConfig"),aqr.forEach(t),ize=r(i7e," (ViTMAE model)"),i7e.forEach(t),dze=i(v),yg=n(v,"LI",{});var d7e=s(yg);DK=n(d7e,"STRONG",{});var nqr=s(DK);cze=r(nqr,"wav2vec2"),nqr.forEach(t),fze=r(d7e," \u2014 "),ok=n(d7e,"A",{href:!0});var sqr=s(ok);mze=r(sqr,"Wav2Vec2Config"),sqr.forEach(t),gze=r(d7e," (Wav2Vec2 model)"),d7e.forEach(t),hze=i(v),Lg=n(v,"LI",{});var c7e=s(Lg);GK=n(c7e,"STRONG",{});var lqr=s(GK);pze=r(lqr,"wavlm"),lqr.forEach(t),_ze=r(c7e," \u2014 "),rk=n(c7e,"A",{href:!0});var iqr=s(rk);uze=r(iqr,"WavLMConfig"),iqr.forEach(t),bze=r(c7e," (WavLM model)"),c7e.forEach(t),Fze=i(v),xg=n(v,"LI",{});var f7e=s(xg);OK=n(f7e,"STRONG",{});var dqr=s(OK);vze=r(dqr,"xglm"),dqr.forEach(t),Tze=r(f7e," \u2014 "),tk=n(f7e,"A",{href:!0});var cqr=s(tk);Mze=r(cqr,"XGLMConfig"),cqr.forEach(t),Eze=r(f7e," (XGLM model)"),f7e.forEach(t),Cze=i(v),kg=n(v,"LI",{});var m7e=s(kg);VK=n(m7e,"STRONG",{});var fqr=s(VK);wze=r(fqr,"xlm"),fqr.forEach(t),Aze=r(m7e," \u2014 "),ak=n(m7e,"A",{href:!0});var mqr=s(ak);yze=r(mqr,"XLMConfig"),mqr.forEach(t),Lze=r(m7e," (XLM model)"),m7e.forEach(t),xze=i(v),Sg=n(v,"LI",{});var g7e=s(Sg);XK=n(g7e,"STRONG",{});var gqr=s(XK);kze=r(gqr,"xlm-prophetnet"),gqr.forEach(t),Sze=r(g7e," \u2014 "),nk=n(g7e,"A",{href:!0});var hqr=s(nk);Rze=r(hqr,"XLMProphetNetConfig"),hqr.forEach(t),Bze=r(g7e," (XLMProphetNet model)"),g7e.forEach(t),Pze=i(v),Rg=n(v,"LI",{});var h7e=s(Rg);zK=n(h7e,"STRONG",{});var pqr=s(zK);$ze=r(pqr,"xlm-roberta"),pqr.forEach(t),Ize=r(h7e," \u2014 "),sk=n(h7e,"A",{href:!0});var _qr=s(sk);qze=r(_qr,"XLMRobertaConfig"),_qr.forEach(t),Nze=r(h7e," (XLM-RoBERTa model)"),h7e.forEach(t),jze=i(v),Bg=n(v,"LI",{});var p7e=s(Bg);QK=n(p7e,"STRONG",{});var uqr=s(QK);Dze=r(uqr,"xlm-roberta-xl"),uqr.forEach(t),Gze=r(p7e," \u2014 "),lk=n(p7e,"A",{href:!0});var bqr=s(lk);Oze=r(bqr,"XLMRobertaXLConfig"),bqr.forEach(t),Vze=r(p7e," (XLM-RoBERTa-XL model)"),p7e.forEach(t),Xze=i(v),Pg=n(v,"LI",{});var _7e=s(Pg);WK=n(_7e,"STRONG",{});var Fqr=s(WK);zze=r(Fqr,"xlnet"),Fqr.forEach(t),Qze=r(_7e," \u2014 "),ik=n(_7e,"A",{href:!0});var vqr=s(ik);Wze=r(vqr,"XLNetConfig"),vqr.forEach(t),Hze=r(_7e," (XLNet model)"),_7e.forEach(t),Uze=i(v),$g=n(v,"LI",{});var u7e=s($g);HK=n(u7e,"STRONG",{});var Tqr=s(HK);Jze=r(Tqr,"yoso"),Tqr.forEach(t),Yze=r(u7e," \u2014 "),dk=n(u7e,"A",{href:!0});var Mqr=s(dk);Kze=r(Mqr,"YosoConfig"),Mqr.forEach(t),Zze=r(u7e," (YOSO model)"),u7e.forEach(t),v.forEach(t),eQe=i(ga),UK=n(ga,"P",{});var Eqr=s(UK);oQe=r(Eqr,"Examples:"),Eqr.forEach(t),rQe=i(ga),m(kC.$$.fragment,ga),ga.forEach(t),tQe=i(Os),Ig=n(Os,"DIV",{class:!0});var iPe=s(Ig);m(SC.$$.fragment,iPe),aQe=i(iPe),JK=n(iPe,"P",{});var Cqr=s(JK);nQe=r(Cqr,"Register a new configuration for this class."),Cqr.forEach(t),iPe.forEach(t),Os.forEach(t),sRe=i(c),Qi=n(c,"H2",{class:!0});var dPe=s(Qi);qg=n(dPe,"A",{id:!0,class:!0,href:!0});var wqr=s(qg);YK=n(wqr,"SPAN",{});var Aqr=s(YK);m(RC.$$.fragment,Aqr),Aqr.forEach(t),wqr.forEach(t),sQe=i(dPe),KK=n(dPe,"SPAN",{});var yqr=s(KK);lQe=r(yqr,"AutoTokenizer"),yqr.forEach(t),dPe.forEach(t),lRe=i(c),Wo=n(c,"DIV",{class:!0});var Vs=s(Wo);m(BC.$$.fragment,Vs),iQe=i(Vs),PC=n(Vs,"P",{});var cPe=s(PC);dQe=r(cPe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),ck=n(cPe,"A",{href:!0});var Lqr=s(ck);cQe=r(Lqr,"AutoTokenizer.from_pretrained()"),Lqr.forEach(t),fQe=r(cPe," class method."),cPe.forEach(t),mQe=i(Vs),$C=n(Vs,"P",{});var fPe=s($C);gQe=r(fPe,"This class cannot be instantiated directly using "),ZK=n(fPe,"CODE",{});var xqr=s(ZK);hQe=r(xqr,"__init__()"),xqr.forEach(t),pQe=r(fPe," (throws an error)."),fPe.forEach(t),_Qe=i(Vs),go=n(Vs,"DIV",{class:!0});var ha=s(go);m(IC.$$.fragment,ha),uQe=i(ha),eZ=n(ha,"P",{});var kqr=s(eZ);bQe=r(kqr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),kqr.forEach(t),FQe=i(ha),Oa=n(ha,"P",{});var TE=s(Oa);vQe=r(TE,"The tokenizer class to instantiate is selected based on the "),oZ=n(TE,"CODE",{});var Sqr=s(oZ);TQe=r(Sqr,"model_type"),Sqr.forEach(t),MQe=r(TE,` property of the config object (either
passed as an argument or loaded from `),rZ=n(TE,"CODE",{});var Rqr=s(rZ);EQe=r(Rqr,"pretrained_model_name_or_path"),Rqr.forEach(t),CQe=r(TE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tZ=n(TE,"CODE",{});var Bqr=s(tZ);wQe=r(Bqr,"pretrained_model_name_or_path"),Bqr.forEach(t),AQe=r(TE,":"),TE.forEach(t),yQe=i(ha),E=n(ha,"UL",{});var w=s(E);Qn=n(w,"LI",{});var p8=s(Qn);aZ=n(p8,"STRONG",{});var Pqr=s(aZ);LQe=r(Pqr,"albert"),Pqr.forEach(t),xQe=r(p8," \u2014 "),fk=n(p8,"A",{href:!0});var $qr=s(fk);kQe=r($qr,"AlbertTokenizer"),$qr.forEach(t),SQe=r(p8," or "),mk=n(p8,"A",{href:!0});var Iqr=s(mk);RQe=r(Iqr,"AlbertTokenizerFast"),Iqr.forEach(t),BQe=r(p8," (ALBERT model)"),p8.forEach(t),PQe=i(w),Wn=n(w,"LI",{});var _8=s(Wn);nZ=n(_8,"STRONG",{});var qqr=s(nZ);$Qe=r(qqr,"bart"),qqr.forEach(t),IQe=r(_8," \u2014 "),gk=n(_8,"A",{href:!0});var Nqr=s(gk);qQe=r(Nqr,"BartTokenizer"),Nqr.forEach(t),NQe=r(_8," or "),hk=n(_8,"A",{href:!0});var jqr=s(hk);jQe=r(jqr,"BartTokenizerFast"),jqr.forEach(t),DQe=r(_8," (BART model)"),_8.forEach(t),GQe=i(w),Hn=n(w,"LI",{});var u8=s(Hn);sZ=n(u8,"STRONG",{});var Dqr=s(sZ);OQe=r(Dqr,"barthez"),Dqr.forEach(t),VQe=r(u8," \u2014 "),pk=n(u8,"A",{href:!0});var Gqr=s(pk);XQe=r(Gqr,"BarthezTokenizer"),Gqr.forEach(t),zQe=r(u8," or "),_k=n(u8,"A",{href:!0});var Oqr=s(_k);QQe=r(Oqr,"BarthezTokenizerFast"),Oqr.forEach(t),WQe=r(u8," (BARThez model)"),u8.forEach(t),HQe=i(w),Ng=n(w,"LI",{});var b7e=s(Ng);lZ=n(b7e,"STRONG",{});var Vqr=s(lZ);UQe=r(Vqr,"bartpho"),Vqr.forEach(t),JQe=r(b7e," \u2014 "),uk=n(b7e,"A",{href:!0});var Xqr=s(uk);YQe=r(Xqr,"BartphoTokenizer"),Xqr.forEach(t),KQe=r(b7e," (BARTpho model)"),b7e.forEach(t),ZQe=i(w),Un=n(w,"LI",{});var b8=s(Un);iZ=n(b8,"STRONG",{});var zqr=s(iZ);eWe=r(zqr,"bert"),zqr.forEach(t),oWe=r(b8," \u2014 "),bk=n(b8,"A",{href:!0});var Qqr=s(bk);rWe=r(Qqr,"BertTokenizer"),Qqr.forEach(t),tWe=r(b8," or "),Fk=n(b8,"A",{href:!0});var Wqr=s(Fk);aWe=r(Wqr,"BertTokenizerFast"),Wqr.forEach(t),nWe=r(b8," (BERT model)"),b8.forEach(t),sWe=i(w),jg=n(w,"LI",{});var F7e=s(jg);dZ=n(F7e,"STRONG",{});var Hqr=s(dZ);lWe=r(Hqr,"bert-generation"),Hqr.forEach(t),iWe=r(F7e," \u2014 "),vk=n(F7e,"A",{href:!0});var Uqr=s(vk);dWe=r(Uqr,"BertGenerationTokenizer"),Uqr.forEach(t),cWe=r(F7e," (Bert Generation model)"),F7e.forEach(t),fWe=i(w),Dg=n(w,"LI",{});var v7e=s(Dg);cZ=n(v7e,"STRONG",{});var Jqr=s(cZ);mWe=r(Jqr,"bert-japanese"),Jqr.forEach(t),gWe=r(v7e," \u2014 "),Tk=n(v7e,"A",{href:!0});var Yqr=s(Tk);hWe=r(Yqr,"BertJapaneseTokenizer"),Yqr.forEach(t),pWe=r(v7e," (BertJapanese model)"),v7e.forEach(t),_We=i(w),Gg=n(w,"LI",{});var T7e=s(Gg);fZ=n(T7e,"STRONG",{});var Kqr=s(fZ);uWe=r(Kqr,"bertweet"),Kqr.forEach(t),bWe=r(T7e," \u2014 "),Mk=n(T7e,"A",{href:!0});var Zqr=s(Mk);FWe=r(Zqr,"BertweetTokenizer"),Zqr.forEach(t),vWe=r(T7e," (Bertweet model)"),T7e.forEach(t),TWe=i(w),Jn=n(w,"LI",{});var F8=s(Jn);mZ=n(F8,"STRONG",{});var eNr=s(mZ);MWe=r(eNr,"big_bird"),eNr.forEach(t),EWe=r(F8," \u2014 "),Ek=n(F8,"A",{href:!0});var oNr=s(Ek);CWe=r(oNr,"BigBirdTokenizer"),oNr.forEach(t),wWe=r(F8," or "),Ck=n(F8,"A",{href:!0});var rNr=s(Ck);AWe=r(rNr,"BigBirdTokenizerFast"),rNr.forEach(t),yWe=r(F8," (BigBird model)"),F8.forEach(t),LWe=i(w),Yn=n(w,"LI",{});var v8=s(Yn);gZ=n(v8,"STRONG",{});var tNr=s(gZ);xWe=r(tNr,"bigbird_pegasus"),tNr.forEach(t),kWe=r(v8," \u2014 "),wk=n(v8,"A",{href:!0});var aNr=s(wk);SWe=r(aNr,"PegasusTokenizer"),aNr.forEach(t),RWe=r(v8," or "),Ak=n(v8,"A",{href:!0});var nNr=s(Ak);BWe=r(nNr,"PegasusTokenizerFast"),nNr.forEach(t),PWe=r(v8," (BigBirdPegasus model)"),v8.forEach(t),$We=i(w),Kn=n(w,"LI",{});var T8=s(Kn);hZ=n(T8,"STRONG",{});var sNr=s(hZ);IWe=r(sNr,"blenderbot"),sNr.forEach(t),qWe=r(T8," \u2014 "),yk=n(T8,"A",{href:!0});var lNr=s(yk);NWe=r(lNr,"BlenderbotTokenizer"),lNr.forEach(t),jWe=r(T8," or "),Lk=n(T8,"A",{href:!0});var iNr=s(Lk);DWe=r(iNr,"BlenderbotTokenizerFast"),iNr.forEach(t),GWe=r(T8," (Blenderbot model)"),T8.forEach(t),OWe=i(w),Og=n(w,"LI",{});var M7e=s(Og);pZ=n(M7e,"STRONG",{});var dNr=s(pZ);VWe=r(dNr,"blenderbot-small"),dNr.forEach(t),XWe=r(M7e," \u2014 "),xk=n(M7e,"A",{href:!0});var cNr=s(xk);zWe=r(cNr,"BlenderbotSmallTokenizer"),cNr.forEach(t),QWe=r(M7e," (BlenderbotSmall model)"),M7e.forEach(t),WWe=i(w),Vg=n(w,"LI",{});var E7e=s(Vg);_Z=n(E7e,"STRONG",{});var fNr=s(_Z);HWe=r(fNr,"byt5"),fNr.forEach(t),UWe=r(E7e," \u2014 "),kk=n(E7e,"A",{href:!0});var mNr=s(kk);JWe=r(mNr,"ByT5Tokenizer"),mNr.forEach(t),YWe=r(E7e," (ByT5 model)"),E7e.forEach(t),KWe=i(w),Zn=n(w,"LI",{});var M8=s(Zn);uZ=n(M8,"STRONG",{});var gNr=s(uZ);ZWe=r(gNr,"camembert"),gNr.forEach(t),eHe=r(M8," \u2014 "),Sk=n(M8,"A",{href:!0});var hNr=s(Sk);oHe=r(hNr,"CamembertTokenizer"),hNr.forEach(t),rHe=r(M8," or "),Rk=n(M8,"A",{href:!0});var pNr=s(Rk);tHe=r(pNr,"CamembertTokenizerFast"),pNr.forEach(t),aHe=r(M8," (CamemBERT model)"),M8.forEach(t),nHe=i(w),Xg=n(w,"LI",{});var C7e=s(Xg);bZ=n(C7e,"STRONG",{});var _Nr=s(bZ);sHe=r(_Nr,"canine"),_Nr.forEach(t),lHe=r(C7e," \u2014 "),Bk=n(C7e,"A",{href:!0});var uNr=s(Bk);iHe=r(uNr,"CanineTokenizer"),uNr.forEach(t),dHe=r(C7e," (Canine model)"),C7e.forEach(t),cHe=i(w),es=n(w,"LI",{});var E8=s(es);FZ=n(E8,"STRONG",{});var bNr=s(FZ);fHe=r(bNr,"clip"),bNr.forEach(t),mHe=r(E8," \u2014 "),Pk=n(E8,"A",{href:!0});var FNr=s(Pk);gHe=r(FNr,"CLIPTokenizer"),FNr.forEach(t),hHe=r(E8," or "),$k=n(E8,"A",{href:!0});var vNr=s($k);pHe=r(vNr,"CLIPTokenizerFast"),vNr.forEach(t),_He=r(E8," (CLIP model)"),E8.forEach(t),uHe=i(w),os=n(w,"LI",{});var C8=s(os);vZ=n(C8,"STRONG",{});var TNr=s(vZ);bHe=r(TNr,"convbert"),TNr.forEach(t),FHe=r(C8," \u2014 "),Ik=n(C8,"A",{href:!0});var MNr=s(Ik);vHe=r(MNr,"ConvBertTokenizer"),MNr.forEach(t),THe=r(C8," or "),qk=n(C8,"A",{href:!0});var ENr=s(qk);MHe=r(ENr,"ConvBertTokenizerFast"),ENr.forEach(t),EHe=r(C8," (ConvBERT model)"),C8.forEach(t),CHe=i(w),rs=n(w,"LI",{});var w8=s(rs);TZ=n(w8,"STRONG",{});var CNr=s(TZ);wHe=r(CNr,"cpm"),CNr.forEach(t),AHe=r(w8," \u2014 "),Nk=n(w8,"A",{href:!0});var wNr=s(Nk);yHe=r(wNr,"CpmTokenizer"),wNr.forEach(t),LHe=r(w8," or "),MZ=n(w8,"CODE",{});var ANr=s(MZ);xHe=r(ANr,"CpmTokenizerFast"),ANr.forEach(t),kHe=r(w8," (CPM model)"),w8.forEach(t),SHe=i(w),zg=n(w,"LI",{});var w7e=s(zg);EZ=n(w7e,"STRONG",{});var yNr=s(EZ);RHe=r(yNr,"ctrl"),yNr.forEach(t),BHe=r(w7e," \u2014 "),jk=n(w7e,"A",{href:!0});var LNr=s(jk);PHe=r(LNr,"CTRLTokenizer"),LNr.forEach(t),$He=r(w7e," (CTRL model)"),w7e.forEach(t),IHe=i(w),ts=n(w,"LI",{});var A8=s(ts);CZ=n(A8,"STRONG",{});var xNr=s(CZ);qHe=r(xNr,"deberta"),xNr.forEach(t),NHe=r(A8," \u2014 "),Dk=n(A8,"A",{href:!0});var kNr=s(Dk);jHe=r(kNr,"DebertaTokenizer"),kNr.forEach(t),DHe=r(A8," or "),Gk=n(A8,"A",{href:!0});var SNr=s(Gk);GHe=r(SNr,"DebertaTokenizerFast"),SNr.forEach(t),OHe=r(A8," (DeBERTa model)"),A8.forEach(t),VHe=i(w),Qg=n(w,"LI",{});var A7e=s(Qg);wZ=n(A7e,"STRONG",{});var RNr=s(wZ);XHe=r(RNr,"deberta-v2"),RNr.forEach(t),zHe=r(A7e," \u2014 "),Ok=n(A7e,"A",{href:!0});var BNr=s(Ok);QHe=r(BNr,"DebertaV2Tokenizer"),BNr.forEach(t),WHe=r(A7e," (DeBERTa-v2 model)"),A7e.forEach(t),HHe=i(w),as=n(w,"LI",{});var y8=s(as);AZ=n(y8,"STRONG",{});var PNr=s(AZ);UHe=r(PNr,"distilbert"),PNr.forEach(t),JHe=r(y8," \u2014 "),Vk=n(y8,"A",{href:!0});var $Nr=s(Vk);YHe=r($Nr,"DistilBertTokenizer"),$Nr.forEach(t),KHe=r(y8," or "),Xk=n(y8,"A",{href:!0});var INr=s(Xk);ZHe=r(INr,"DistilBertTokenizerFast"),INr.forEach(t),eUe=r(y8," (DistilBERT model)"),y8.forEach(t),oUe=i(w),ns=n(w,"LI",{});var L8=s(ns);yZ=n(L8,"STRONG",{});var qNr=s(yZ);rUe=r(qNr,"dpr"),qNr.forEach(t),tUe=r(L8," \u2014 "),zk=n(L8,"A",{href:!0});var NNr=s(zk);aUe=r(NNr,"DPRQuestionEncoderTokenizer"),NNr.forEach(t),nUe=r(L8," or "),Qk=n(L8,"A",{href:!0});var jNr=s(Qk);sUe=r(jNr,"DPRQuestionEncoderTokenizerFast"),jNr.forEach(t),lUe=r(L8," (DPR model)"),L8.forEach(t),iUe=i(w),ss=n(w,"LI",{});var x8=s(ss);LZ=n(x8,"STRONG",{});var DNr=s(LZ);dUe=r(DNr,"electra"),DNr.forEach(t),cUe=r(x8," \u2014 "),Wk=n(x8,"A",{href:!0});var GNr=s(Wk);fUe=r(GNr,"ElectraTokenizer"),GNr.forEach(t),mUe=r(x8," or "),Hk=n(x8,"A",{href:!0});var ONr=s(Hk);gUe=r(ONr,"ElectraTokenizerFast"),ONr.forEach(t),hUe=r(x8," (ELECTRA model)"),x8.forEach(t),pUe=i(w),Wg=n(w,"LI",{});var y7e=s(Wg);xZ=n(y7e,"STRONG",{});var VNr=s(xZ);_Ue=r(VNr,"flaubert"),VNr.forEach(t),uUe=r(y7e," \u2014 "),Uk=n(y7e,"A",{href:!0});var XNr=s(Uk);bUe=r(XNr,"FlaubertTokenizer"),XNr.forEach(t),FUe=r(y7e," (FlauBERT model)"),y7e.forEach(t),vUe=i(w),ls=n(w,"LI",{});var k8=s(ls);kZ=n(k8,"STRONG",{});var zNr=s(kZ);TUe=r(zNr,"fnet"),zNr.forEach(t),MUe=r(k8," \u2014 "),Jk=n(k8,"A",{href:!0});var QNr=s(Jk);EUe=r(QNr,"FNetTokenizer"),QNr.forEach(t),CUe=r(k8," or "),Yk=n(k8,"A",{href:!0});var WNr=s(Yk);wUe=r(WNr,"FNetTokenizerFast"),WNr.forEach(t),AUe=r(k8," (FNet model)"),k8.forEach(t),yUe=i(w),Hg=n(w,"LI",{});var L7e=s(Hg);SZ=n(L7e,"STRONG",{});var HNr=s(SZ);LUe=r(HNr,"fsmt"),HNr.forEach(t),xUe=r(L7e," \u2014 "),Kk=n(L7e,"A",{href:!0});var UNr=s(Kk);kUe=r(UNr,"FSMTTokenizer"),UNr.forEach(t),SUe=r(L7e," (FairSeq Machine-Translation model)"),L7e.forEach(t),RUe=i(w),is=n(w,"LI",{});var S8=s(is);RZ=n(S8,"STRONG",{});var JNr=s(RZ);BUe=r(JNr,"funnel"),JNr.forEach(t),PUe=r(S8," \u2014 "),Zk=n(S8,"A",{href:!0});var YNr=s(Zk);$Ue=r(YNr,"FunnelTokenizer"),YNr.forEach(t),IUe=r(S8," or "),eS=n(S8,"A",{href:!0});var KNr=s(eS);qUe=r(KNr,"FunnelTokenizerFast"),KNr.forEach(t),NUe=r(S8," (Funnel Transformer model)"),S8.forEach(t),jUe=i(w),ds=n(w,"LI",{});var R8=s(ds);BZ=n(R8,"STRONG",{});var ZNr=s(BZ);DUe=r(ZNr,"gpt2"),ZNr.forEach(t),GUe=r(R8," \u2014 "),oS=n(R8,"A",{href:!0});var ejr=s(oS);OUe=r(ejr,"GPT2Tokenizer"),ejr.forEach(t),VUe=r(R8," or "),rS=n(R8,"A",{href:!0});var ojr=s(rS);XUe=r(ojr,"GPT2TokenizerFast"),ojr.forEach(t),zUe=r(R8," (OpenAI GPT-2 model)"),R8.forEach(t),QUe=i(w),cs=n(w,"LI",{});var B8=s(cs);PZ=n(B8,"STRONG",{});var rjr=s(PZ);WUe=r(rjr,"gpt_neo"),rjr.forEach(t),HUe=r(B8," \u2014 "),tS=n(B8,"A",{href:!0});var tjr=s(tS);UUe=r(tjr,"GPT2Tokenizer"),tjr.forEach(t),JUe=r(B8," or "),aS=n(B8,"A",{href:!0});var ajr=s(aS);YUe=r(ajr,"GPT2TokenizerFast"),ajr.forEach(t),KUe=r(B8," (GPT Neo model)"),B8.forEach(t),ZUe=i(w),fs=n(w,"LI",{});var P8=s(fs);$Z=n(P8,"STRONG",{});var njr=s($Z);eJe=r(njr,"herbert"),njr.forEach(t),oJe=r(P8," \u2014 "),nS=n(P8,"A",{href:!0});var sjr=s(nS);rJe=r(sjr,"HerbertTokenizer"),sjr.forEach(t),tJe=r(P8," or "),sS=n(P8,"A",{href:!0});var ljr=s(sS);aJe=r(ljr,"HerbertTokenizerFast"),ljr.forEach(t),nJe=r(P8," (HerBERT model)"),P8.forEach(t),sJe=i(w),Ug=n(w,"LI",{});var x7e=s(Ug);IZ=n(x7e,"STRONG",{});var ijr=s(IZ);lJe=r(ijr,"hubert"),ijr.forEach(t),iJe=r(x7e," \u2014 "),lS=n(x7e,"A",{href:!0});var djr=s(lS);dJe=r(djr,"Wav2Vec2CTCTokenizer"),djr.forEach(t),cJe=r(x7e," (Hubert model)"),x7e.forEach(t),fJe=i(w),ms=n(w,"LI",{});var $8=s(ms);qZ=n($8,"STRONG",{});var cjr=s(qZ);mJe=r(cjr,"ibert"),cjr.forEach(t),gJe=r($8," \u2014 "),iS=n($8,"A",{href:!0});var fjr=s(iS);hJe=r(fjr,"RobertaTokenizer"),fjr.forEach(t),pJe=r($8," or "),dS=n($8,"A",{href:!0});var mjr=s(dS);_Je=r(mjr,"RobertaTokenizerFast"),mjr.forEach(t),uJe=r($8," (I-BERT model)"),$8.forEach(t),bJe=i(w),gs=n(w,"LI",{});var I8=s(gs);NZ=n(I8,"STRONG",{});var gjr=s(NZ);FJe=r(gjr,"layoutlm"),gjr.forEach(t),vJe=r(I8," \u2014 "),cS=n(I8,"A",{href:!0});var hjr=s(cS);TJe=r(hjr,"LayoutLMTokenizer"),hjr.forEach(t),MJe=r(I8," or "),fS=n(I8,"A",{href:!0});var pjr=s(fS);EJe=r(pjr,"LayoutLMTokenizerFast"),pjr.forEach(t),CJe=r(I8," (LayoutLM model)"),I8.forEach(t),wJe=i(w),hs=n(w,"LI",{});var q8=s(hs);jZ=n(q8,"STRONG",{});var _jr=s(jZ);AJe=r(_jr,"layoutlmv2"),_jr.forEach(t),yJe=r(q8," \u2014 "),mS=n(q8,"A",{href:!0});var ujr=s(mS);LJe=r(ujr,"LayoutLMv2Tokenizer"),ujr.forEach(t),xJe=r(q8," or "),gS=n(q8,"A",{href:!0});var bjr=s(gS);kJe=r(bjr,"LayoutLMv2TokenizerFast"),bjr.forEach(t),SJe=r(q8," (LayoutLMv2 model)"),q8.forEach(t),RJe=i(w),ps=n(w,"LI",{});var N8=s(ps);DZ=n(N8,"STRONG",{});var Fjr=s(DZ);BJe=r(Fjr,"layoutxlm"),Fjr.forEach(t),PJe=r(N8," \u2014 "),hS=n(N8,"A",{href:!0});var vjr=s(hS);$Je=r(vjr,"LayoutXLMTokenizer"),vjr.forEach(t),IJe=r(N8," or "),pS=n(N8,"A",{href:!0});var Tjr=s(pS);qJe=r(Tjr,"LayoutXLMTokenizerFast"),Tjr.forEach(t),NJe=r(N8," (LayoutXLM model)"),N8.forEach(t),jJe=i(w),_s=n(w,"LI",{});var j8=s(_s);GZ=n(j8,"STRONG",{});var Mjr=s(GZ);DJe=r(Mjr,"led"),Mjr.forEach(t),GJe=r(j8," \u2014 "),_S=n(j8,"A",{href:!0});var Ejr=s(_S);OJe=r(Ejr,"LEDTokenizer"),Ejr.forEach(t),VJe=r(j8," or "),uS=n(j8,"A",{href:!0});var Cjr=s(uS);XJe=r(Cjr,"LEDTokenizerFast"),Cjr.forEach(t),zJe=r(j8," (LED model)"),j8.forEach(t),QJe=i(w),us=n(w,"LI",{});var D8=s(us);OZ=n(D8,"STRONG",{});var wjr=s(OZ);WJe=r(wjr,"longformer"),wjr.forEach(t),HJe=r(D8," \u2014 "),bS=n(D8,"A",{href:!0});var Ajr=s(bS);UJe=r(Ajr,"LongformerTokenizer"),Ajr.forEach(t),JJe=r(D8," or "),FS=n(D8,"A",{href:!0});var yjr=s(FS);YJe=r(yjr,"LongformerTokenizerFast"),yjr.forEach(t),KJe=r(D8," (Longformer model)"),D8.forEach(t),ZJe=i(w),Jg=n(w,"LI",{});var k7e=s(Jg);VZ=n(k7e,"STRONG",{});var Ljr=s(VZ);eYe=r(Ljr,"luke"),Ljr.forEach(t),oYe=r(k7e," \u2014 "),vS=n(k7e,"A",{href:!0});var xjr=s(vS);rYe=r(xjr,"LukeTokenizer"),xjr.forEach(t),tYe=r(k7e," (LUKE model)"),k7e.forEach(t),aYe=i(w),bs=n(w,"LI",{});var G8=s(bs);XZ=n(G8,"STRONG",{});var kjr=s(XZ);nYe=r(kjr,"lxmert"),kjr.forEach(t),sYe=r(G8," \u2014 "),TS=n(G8,"A",{href:!0});var Sjr=s(TS);lYe=r(Sjr,"LxmertTokenizer"),Sjr.forEach(t),iYe=r(G8," or "),MS=n(G8,"A",{href:!0});var Rjr=s(MS);dYe=r(Rjr,"LxmertTokenizerFast"),Rjr.forEach(t),cYe=r(G8," (LXMERT model)"),G8.forEach(t),fYe=i(w),Yg=n(w,"LI",{});var S7e=s(Yg);zZ=n(S7e,"STRONG",{});var Bjr=s(zZ);mYe=r(Bjr,"m2m_100"),Bjr.forEach(t),gYe=r(S7e," \u2014 "),ES=n(S7e,"A",{href:!0});var Pjr=s(ES);hYe=r(Pjr,"M2M100Tokenizer"),Pjr.forEach(t),pYe=r(S7e," (M2M100 model)"),S7e.forEach(t),_Ye=i(w),Kg=n(w,"LI",{});var R7e=s(Kg);QZ=n(R7e,"STRONG",{});var $jr=s(QZ);uYe=r($jr,"marian"),$jr.forEach(t),bYe=r(R7e," \u2014 "),CS=n(R7e,"A",{href:!0});var Ijr=s(CS);FYe=r(Ijr,"MarianTokenizer"),Ijr.forEach(t),vYe=r(R7e," (Marian model)"),R7e.forEach(t),TYe=i(w),Fs=n(w,"LI",{});var O8=s(Fs);WZ=n(O8,"STRONG",{});var qjr=s(WZ);MYe=r(qjr,"mbart"),qjr.forEach(t),EYe=r(O8," \u2014 "),wS=n(O8,"A",{href:!0});var Njr=s(wS);CYe=r(Njr,"MBartTokenizer"),Njr.forEach(t),wYe=r(O8," or "),AS=n(O8,"A",{href:!0});var jjr=s(AS);AYe=r(jjr,"MBartTokenizerFast"),jjr.forEach(t),yYe=r(O8," (mBART model)"),O8.forEach(t),LYe=i(w),vs=n(w,"LI",{});var V8=s(vs);HZ=n(V8,"STRONG",{});var Djr=s(HZ);xYe=r(Djr,"mbart50"),Djr.forEach(t),kYe=r(V8," \u2014 "),yS=n(V8,"A",{href:!0});var Gjr=s(yS);SYe=r(Gjr,"MBart50Tokenizer"),Gjr.forEach(t),RYe=r(V8," or "),LS=n(V8,"A",{href:!0});var Ojr=s(LS);BYe=r(Ojr,"MBart50TokenizerFast"),Ojr.forEach(t),PYe=r(V8," (mBART-50 model)"),V8.forEach(t),$Ye=i(w),Zg=n(w,"LI",{});var B7e=s(Zg);UZ=n(B7e,"STRONG",{});var Vjr=s(UZ);IYe=r(Vjr,"mluke"),Vjr.forEach(t),qYe=r(B7e," \u2014 "),xS=n(B7e,"A",{href:!0});var Xjr=s(xS);NYe=r(Xjr,"MLukeTokenizer"),Xjr.forEach(t),jYe=r(B7e," (mLUKE model)"),B7e.forEach(t),DYe=i(w),Ts=n(w,"LI",{});var X8=s(Ts);JZ=n(X8,"STRONG",{});var zjr=s(JZ);GYe=r(zjr,"mobilebert"),zjr.forEach(t),OYe=r(X8," \u2014 "),kS=n(X8,"A",{href:!0});var Qjr=s(kS);VYe=r(Qjr,"MobileBertTokenizer"),Qjr.forEach(t),XYe=r(X8," or "),SS=n(X8,"A",{href:!0});var Wjr=s(SS);zYe=r(Wjr,"MobileBertTokenizerFast"),Wjr.forEach(t),QYe=r(X8," (MobileBERT model)"),X8.forEach(t),WYe=i(w),Ms=n(w,"LI",{});var z8=s(Ms);YZ=n(z8,"STRONG",{});var Hjr=s(YZ);HYe=r(Hjr,"mpnet"),Hjr.forEach(t),UYe=r(z8," \u2014 "),RS=n(z8,"A",{href:!0});var Ujr=s(RS);JYe=r(Ujr,"MPNetTokenizer"),Ujr.forEach(t),YYe=r(z8," or "),BS=n(z8,"A",{href:!0});var Jjr=s(BS);KYe=r(Jjr,"MPNetTokenizerFast"),Jjr.forEach(t),ZYe=r(z8," (MPNet model)"),z8.forEach(t),eKe=i(w),Es=n(w,"LI",{});var Q8=s(Es);KZ=n(Q8,"STRONG",{});var Yjr=s(KZ);oKe=r(Yjr,"mt5"),Yjr.forEach(t),rKe=r(Q8," \u2014 "),PS=n(Q8,"A",{href:!0});var Kjr=s(PS);tKe=r(Kjr,"MT5Tokenizer"),Kjr.forEach(t),aKe=r(Q8," or "),$S=n(Q8,"A",{href:!0});var Zjr=s($S);nKe=r(Zjr,"MT5TokenizerFast"),Zjr.forEach(t),sKe=r(Q8," (mT5 model)"),Q8.forEach(t),lKe=i(w),Cs=n(w,"LI",{});var W8=s(Cs);ZZ=n(W8,"STRONG",{});var eDr=s(ZZ);iKe=r(eDr,"openai-gpt"),eDr.forEach(t),dKe=r(W8," \u2014 "),IS=n(W8,"A",{href:!0});var oDr=s(IS);cKe=r(oDr,"OpenAIGPTTokenizer"),oDr.forEach(t),fKe=r(W8," or "),qS=n(W8,"A",{href:!0});var rDr=s(qS);mKe=r(rDr,"OpenAIGPTTokenizerFast"),rDr.forEach(t),gKe=r(W8," (OpenAI GPT model)"),W8.forEach(t),hKe=i(w),ws=n(w,"LI",{});var H8=s(ws);eee=n(H8,"STRONG",{});var tDr=s(eee);pKe=r(tDr,"pegasus"),tDr.forEach(t),_Ke=r(H8," \u2014 "),NS=n(H8,"A",{href:!0});var aDr=s(NS);uKe=r(aDr,"PegasusTokenizer"),aDr.forEach(t),bKe=r(H8," or "),jS=n(H8,"A",{href:!0});var nDr=s(jS);FKe=r(nDr,"PegasusTokenizerFast"),nDr.forEach(t),vKe=r(H8," (Pegasus model)"),H8.forEach(t),TKe=i(w),eh=n(w,"LI",{});var P7e=s(eh);oee=n(P7e,"STRONG",{});var sDr=s(oee);MKe=r(sDr,"perceiver"),sDr.forEach(t),EKe=r(P7e," \u2014 "),DS=n(P7e,"A",{href:!0});var lDr=s(DS);CKe=r(lDr,"PerceiverTokenizer"),lDr.forEach(t),wKe=r(P7e," (Perceiver model)"),P7e.forEach(t),AKe=i(w),oh=n(w,"LI",{});var $7e=s(oh);ree=n($7e,"STRONG",{});var iDr=s(ree);yKe=r(iDr,"phobert"),iDr.forEach(t),LKe=r($7e," \u2014 "),GS=n($7e,"A",{href:!0});var dDr=s(GS);xKe=r(dDr,"PhobertTokenizer"),dDr.forEach(t),kKe=r($7e," (PhoBERT model)"),$7e.forEach(t),SKe=i(w),rh=n(w,"LI",{});var I7e=s(rh);tee=n(I7e,"STRONG",{});var cDr=s(tee);RKe=r(cDr,"plbart"),cDr.forEach(t),BKe=r(I7e," \u2014 "),OS=n(I7e,"A",{href:!0});var fDr=s(OS);PKe=r(fDr,"PLBartTokenizer"),fDr.forEach(t),$Ke=r(I7e," (PLBart model)"),I7e.forEach(t),IKe=i(w),th=n(w,"LI",{});var q7e=s(th);aee=n(q7e,"STRONG",{});var mDr=s(aee);qKe=r(mDr,"prophetnet"),mDr.forEach(t),NKe=r(q7e," \u2014 "),VS=n(q7e,"A",{href:!0});var gDr=s(VS);jKe=r(gDr,"ProphetNetTokenizer"),gDr.forEach(t),DKe=r(q7e," (ProphetNet model)"),q7e.forEach(t),GKe=i(w),As=n(w,"LI",{});var U8=s(As);nee=n(U8,"STRONG",{});var hDr=s(nee);OKe=r(hDr,"qdqbert"),hDr.forEach(t),VKe=r(U8," \u2014 "),XS=n(U8,"A",{href:!0});var pDr=s(XS);XKe=r(pDr,"BertTokenizer"),pDr.forEach(t),zKe=r(U8," or "),zS=n(U8,"A",{href:!0});var _Dr=s(zS);QKe=r(_Dr,"BertTokenizerFast"),_Dr.forEach(t),WKe=r(U8," (QDQBert model)"),U8.forEach(t),HKe=i(w),ah=n(w,"LI",{});var N7e=s(ah);see=n(N7e,"STRONG",{});var uDr=s(see);UKe=r(uDr,"rag"),uDr.forEach(t),JKe=r(N7e," \u2014 "),QS=n(N7e,"A",{href:!0});var bDr=s(QS);YKe=r(bDr,"RagTokenizer"),bDr.forEach(t),KKe=r(N7e," (RAG model)"),N7e.forEach(t),ZKe=i(w),ys=n(w,"LI",{});var J8=s(ys);lee=n(J8,"STRONG",{});var FDr=s(lee);eZe=r(FDr,"realm"),FDr.forEach(t),oZe=r(J8," \u2014 "),WS=n(J8,"A",{href:!0});var vDr=s(WS);rZe=r(vDr,"RealmTokenizer"),vDr.forEach(t),tZe=r(J8," or "),HS=n(J8,"A",{href:!0});var TDr=s(HS);aZe=r(TDr,"RealmTokenizerFast"),TDr.forEach(t),nZe=r(J8," (Realm model)"),J8.forEach(t),sZe=i(w),Ls=n(w,"LI",{});var Y8=s(Ls);iee=n(Y8,"STRONG",{});var MDr=s(iee);lZe=r(MDr,"reformer"),MDr.forEach(t),iZe=r(Y8," \u2014 "),US=n(Y8,"A",{href:!0});var EDr=s(US);dZe=r(EDr,"ReformerTokenizer"),EDr.forEach(t),cZe=r(Y8," or "),JS=n(Y8,"A",{href:!0});var CDr=s(JS);fZe=r(CDr,"ReformerTokenizerFast"),CDr.forEach(t),mZe=r(Y8," (Reformer model)"),Y8.forEach(t),gZe=i(w),xs=n(w,"LI",{});var K8=s(xs);dee=n(K8,"STRONG",{});var wDr=s(dee);hZe=r(wDr,"rembert"),wDr.forEach(t),pZe=r(K8," \u2014 "),YS=n(K8,"A",{href:!0});var ADr=s(YS);_Ze=r(ADr,"RemBertTokenizer"),ADr.forEach(t),uZe=r(K8," or "),KS=n(K8,"A",{href:!0});var yDr=s(KS);bZe=r(yDr,"RemBertTokenizerFast"),yDr.forEach(t),FZe=r(K8," (RemBERT model)"),K8.forEach(t),vZe=i(w),ks=n(w,"LI",{});var Z8=s(ks);cee=n(Z8,"STRONG",{});var LDr=s(cee);TZe=r(LDr,"retribert"),LDr.forEach(t),MZe=r(Z8," \u2014 "),ZS=n(Z8,"A",{href:!0});var xDr=s(ZS);EZe=r(xDr,"RetriBertTokenizer"),xDr.forEach(t),CZe=r(Z8," or "),eR=n(Z8,"A",{href:!0});var kDr=s(eR);wZe=r(kDr,"RetriBertTokenizerFast"),kDr.forEach(t),AZe=r(Z8," (RetriBERT model)"),Z8.forEach(t),yZe=i(w),Ss=n(w,"LI",{});var e9=s(Ss);fee=n(e9,"STRONG",{});var SDr=s(fee);LZe=r(SDr,"roberta"),SDr.forEach(t),xZe=r(e9," \u2014 "),oR=n(e9,"A",{href:!0});var RDr=s(oR);kZe=r(RDr,"RobertaTokenizer"),RDr.forEach(t),SZe=r(e9," or "),rR=n(e9,"A",{href:!0});var BDr=s(rR);RZe=r(BDr,"RobertaTokenizerFast"),BDr.forEach(t),BZe=r(e9," (RoBERTa model)"),e9.forEach(t),PZe=i(w),Rs=n(w,"LI",{});var o9=s(Rs);mee=n(o9,"STRONG",{});var PDr=s(mee);$Ze=r(PDr,"roformer"),PDr.forEach(t),IZe=r(o9," \u2014 "),tR=n(o9,"A",{href:!0});var $Dr=s(tR);qZe=r($Dr,"RoFormerTokenizer"),$Dr.forEach(t),NZe=r(o9," or "),aR=n(o9,"A",{href:!0});var IDr=s(aR);jZe=r(IDr,"RoFormerTokenizerFast"),IDr.forEach(t),DZe=r(o9," (RoFormer model)"),o9.forEach(t),GZe=i(w),nh=n(w,"LI",{});var j7e=s(nh);gee=n(j7e,"STRONG",{});var qDr=s(gee);OZe=r(qDr,"speech_to_text"),qDr.forEach(t),VZe=r(j7e," \u2014 "),nR=n(j7e,"A",{href:!0});var NDr=s(nR);XZe=r(NDr,"Speech2TextTokenizer"),NDr.forEach(t),zZe=r(j7e," (Speech2Text model)"),j7e.forEach(t),QZe=i(w),sh=n(w,"LI",{});var D7e=s(sh);hee=n(D7e,"STRONG",{});var jDr=s(hee);WZe=r(jDr,"speech_to_text_2"),jDr.forEach(t),HZe=r(D7e," \u2014 "),sR=n(D7e,"A",{href:!0});var DDr=s(sR);UZe=r(DDr,"Speech2Text2Tokenizer"),DDr.forEach(t),JZe=r(D7e," (Speech2Text2 model)"),D7e.forEach(t),YZe=i(w),Bs=n(w,"LI",{});var r9=s(Bs);pee=n(r9,"STRONG",{});var GDr=s(pee);KZe=r(GDr,"splinter"),GDr.forEach(t),ZZe=r(r9," \u2014 "),lR=n(r9,"A",{href:!0});var ODr=s(lR);eeo=r(ODr,"SplinterTokenizer"),ODr.forEach(t),oeo=r(r9," or "),iR=n(r9,"A",{href:!0});var VDr=s(iR);reo=r(VDr,"SplinterTokenizerFast"),VDr.forEach(t),teo=r(r9," (Splinter model)"),r9.forEach(t),aeo=i(w),Ps=n(w,"LI",{});var t9=s(Ps);_ee=n(t9,"STRONG",{});var XDr=s(_ee);neo=r(XDr,"squeezebert"),XDr.forEach(t),seo=r(t9," \u2014 "),dR=n(t9,"A",{href:!0});var zDr=s(dR);leo=r(zDr,"SqueezeBertTokenizer"),zDr.forEach(t),ieo=r(t9," or "),cR=n(t9,"A",{href:!0});var QDr=s(cR);deo=r(QDr,"SqueezeBertTokenizerFast"),QDr.forEach(t),ceo=r(t9," (SqueezeBERT model)"),t9.forEach(t),feo=i(w),$s=n(w,"LI",{});var a9=s($s);uee=n(a9,"STRONG",{});var WDr=s(uee);meo=r(WDr,"t5"),WDr.forEach(t),geo=r(a9," \u2014 "),fR=n(a9,"A",{href:!0});var HDr=s(fR);heo=r(HDr,"T5Tokenizer"),HDr.forEach(t),peo=r(a9," or "),mR=n(a9,"A",{href:!0});var UDr=s(mR);_eo=r(UDr,"T5TokenizerFast"),UDr.forEach(t),ueo=r(a9," (T5 model)"),a9.forEach(t),beo=i(w),lh=n(w,"LI",{});var G7e=s(lh);bee=n(G7e,"STRONG",{});var JDr=s(bee);Feo=r(JDr,"tapas"),JDr.forEach(t),veo=r(G7e," \u2014 "),gR=n(G7e,"A",{href:!0});var YDr=s(gR);Teo=r(YDr,"TapasTokenizer"),YDr.forEach(t),Meo=r(G7e," (TAPAS model)"),G7e.forEach(t),Eeo=i(w),ih=n(w,"LI",{});var O7e=s(ih);Fee=n(O7e,"STRONG",{});var KDr=s(Fee);Ceo=r(KDr,"tapex"),KDr.forEach(t),weo=r(O7e," \u2014 "),hR=n(O7e,"A",{href:!0});var ZDr=s(hR);Aeo=r(ZDr,"TapexTokenizer"),ZDr.forEach(t),yeo=r(O7e," (TAPEX model)"),O7e.forEach(t),Leo=i(w),dh=n(w,"LI",{});var V7e=s(dh);vee=n(V7e,"STRONG",{});var eGr=s(vee);xeo=r(eGr,"transfo-xl"),eGr.forEach(t),keo=r(V7e," \u2014 "),pR=n(V7e,"A",{href:!0});var oGr=s(pR);Seo=r(oGr,"TransfoXLTokenizer"),oGr.forEach(t),Reo=r(V7e," (Transformer-XL model)"),V7e.forEach(t),Beo=i(w),ch=n(w,"LI",{});var X7e=s(ch);Tee=n(X7e,"STRONG",{});var rGr=s(Tee);Peo=r(rGr,"wav2vec2"),rGr.forEach(t),$eo=r(X7e," \u2014 "),_R=n(X7e,"A",{href:!0});var tGr=s(_R);Ieo=r(tGr,"Wav2Vec2CTCTokenizer"),tGr.forEach(t),qeo=r(X7e," (Wav2Vec2 model)"),X7e.forEach(t),Neo=i(w),fh=n(w,"LI",{});var z7e=s(fh);Mee=n(z7e,"STRONG",{});var aGr=s(Mee);jeo=r(aGr,"wav2vec2_phoneme"),aGr.forEach(t),Deo=r(z7e," \u2014 "),uR=n(z7e,"A",{href:!0});var nGr=s(uR);Geo=r(nGr,"Wav2Vec2PhonemeCTCTokenizer"),nGr.forEach(t),Oeo=r(z7e," (Wav2Vec2Phoneme model)"),z7e.forEach(t),Veo=i(w),Is=n(w,"LI",{});var n9=s(Is);Eee=n(n9,"STRONG",{});var sGr=s(Eee);Xeo=r(sGr,"xglm"),sGr.forEach(t),zeo=r(n9," \u2014 "),bR=n(n9,"A",{href:!0});var lGr=s(bR);Qeo=r(lGr,"XGLMTokenizer"),lGr.forEach(t),Weo=r(n9," or "),FR=n(n9,"A",{href:!0});var iGr=s(FR);Heo=r(iGr,"XGLMTokenizerFast"),iGr.forEach(t),Ueo=r(n9," (XGLM model)"),n9.forEach(t),Jeo=i(w),mh=n(w,"LI",{});var Q7e=s(mh);Cee=n(Q7e,"STRONG",{});var dGr=s(Cee);Yeo=r(dGr,"xlm"),dGr.forEach(t),Keo=r(Q7e," \u2014 "),vR=n(Q7e,"A",{href:!0});var cGr=s(vR);Zeo=r(cGr,"XLMTokenizer"),cGr.forEach(t),eoo=r(Q7e," (XLM model)"),Q7e.forEach(t),ooo=i(w),gh=n(w,"LI",{});var W7e=s(gh);wee=n(W7e,"STRONG",{});var fGr=s(wee);roo=r(fGr,"xlm-prophetnet"),fGr.forEach(t),too=r(W7e," \u2014 "),TR=n(W7e,"A",{href:!0});var mGr=s(TR);aoo=r(mGr,"XLMProphetNetTokenizer"),mGr.forEach(t),noo=r(W7e," (XLMProphetNet model)"),W7e.forEach(t),soo=i(w),qs=n(w,"LI",{});var s9=s(qs);Aee=n(s9,"STRONG",{});var gGr=s(Aee);loo=r(gGr,"xlm-roberta"),gGr.forEach(t),ioo=r(s9," \u2014 "),MR=n(s9,"A",{href:!0});var hGr=s(MR);doo=r(hGr,"XLMRobertaTokenizer"),hGr.forEach(t),coo=r(s9," or "),ER=n(s9,"A",{href:!0});var pGr=s(ER);foo=r(pGr,"XLMRobertaTokenizerFast"),pGr.forEach(t),moo=r(s9," (XLM-RoBERTa model)"),s9.forEach(t),goo=i(w),Ns=n(w,"LI",{});var l9=s(Ns);yee=n(l9,"STRONG",{});var _Gr=s(yee);hoo=r(_Gr,"xlnet"),_Gr.forEach(t),poo=r(l9," \u2014 "),CR=n(l9,"A",{href:!0});var uGr=s(CR);_oo=r(uGr,"XLNetTokenizer"),uGr.forEach(t),uoo=r(l9," or "),wR=n(l9,"A",{href:!0});var bGr=s(wR);boo=r(bGr,"XLNetTokenizerFast"),bGr.forEach(t),Foo=r(l9," (XLNet model)"),l9.forEach(t),w.forEach(t),voo=i(ha),Lee=n(ha,"P",{});var FGr=s(Lee);Too=r(FGr,"Examples:"),FGr.forEach(t),Moo=i(ha),m(qC.$$.fragment,ha),ha.forEach(t),Eoo=i(Vs),hh=n(Vs,"DIV",{class:!0});var mPe=s(hh);m(NC.$$.fragment,mPe),Coo=i(mPe),xee=n(mPe,"P",{});var vGr=s(xee);woo=r(vGr,"Register a new tokenizer in this mapping."),vGr.forEach(t),mPe.forEach(t),Vs.forEach(t),iRe=i(c),Wi=n(c,"H2",{class:!0});var gPe=s(Wi);ph=n(gPe,"A",{id:!0,class:!0,href:!0});var TGr=s(ph);kee=n(TGr,"SPAN",{});var MGr=s(kee);m(jC.$$.fragment,MGr),MGr.forEach(t),TGr.forEach(t),Aoo=i(gPe),See=n(gPe,"SPAN",{});var EGr=s(See);yoo=r(EGr,"AutoFeatureExtractor"),EGr.forEach(t),gPe.forEach(t),dRe=i(c),Ho=n(c,"DIV",{class:!0});var Xs=s(Ho);m(DC.$$.fragment,Xs),Loo=i(Xs),GC=n(Xs,"P",{});var hPe=s(GC);xoo=r(hPe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),AR=n(hPe,"A",{href:!0});var CGr=s(AR);koo=r(CGr,"AutoFeatureExtractor.from_pretrained()"),CGr.forEach(t),Soo=r(hPe," class method."),hPe.forEach(t),Roo=i(Xs),OC=n(Xs,"P",{});var pPe=s(OC);Boo=r(pPe,"This class cannot be instantiated directly using "),Ree=n(pPe,"CODE",{});var wGr=s(Ree);Poo=r(wGr,"__init__()"),wGr.forEach(t),$oo=r(pPe," (throws an error)."),pPe.forEach(t),Ioo=i(Xs),$e=n(Xs,"DIV",{class:!0});var Nt=s($e);m(VC.$$.fragment,Nt),qoo=i(Nt),Bee=n(Nt,"P",{});var AGr=s(Bee);Noo=r(AGr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),AGr.forEach(t),joo=i(Nt),Va=n(Nt,"P",{});var ME=s(Va);Doo=r(ME,"The feature extractor class to instantiate is selected based on the "),Pee=n(ME,"CODE",{});var yGr=s(Pee);Goo=r(yGr,"model_type"),yGr.forEach(t),Ooo=r(ME,` property of the config object
(either passed as an argument or loaded from `),$ee=n(ME,"CODE",{});var LGr=s($ee);Voo=r(LGr,"pretrained_model_name_or_path"),LGr.forEach(t),Xoo=r(ME,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Iee=n(ME,"CODE",{});var xGr=s(Iee);zoo=r(xGr,"pretrained_model_name_or_path"),xGr.forEach(t),Qoo=r(ME,":"),ME.forEach(t),Woo=i(Nt),te=n(Nt,"UL",{});var se=s(te);_h=n(se,"LI",{});var H7e=s(_h);qee=n(H7e,"STRONG",{});var kGr=s(qee);Hoo=r(kGr,"beit"),kGr.forEach(t),Uoo=r(H7e," \u2014 "),yR=n(H7e,"A",{href:!0});var SGr=s(yR);Joo=r(SGr,"BeitFeatureExtractor"),SGr.forEach(t),Yoo=r(H7e," (BEiT model)"),H7e.forEach(t),Koo=i(se),uh=n(se,"LI",{});var U7e=s(uh);Nee=n(U7e,"STRONG",{});var RGr=s(Nee);Zoo=r(RGr,"clip"),RGr.forEach(t),ero=r(U7e," \u2014 "),LR=n(U7e,"A",{href:!0});var BGr=s(LR);oro=r(BGr,"CLIPFeatureExtractor"),BGr.forEach(t),rro=r(U7e," (CLIP model)"),U7e.forEach(t),tro=i(se),bh=n(se,"LI",{});var J7e=s(bh);jee=n(J7e,"STRONG",{});var PGr=s(jee);aro=r(PGr,"convnext"),PGr.forEach(t),nro=r(J7e," \u2014 "),xR=n(J7e,"A",{href:!0});var $Gr=s(xR);sro=r($Gr,"ConvNextFeatureExtractor"),$Gr.forEach(t),lro=r(J7e," (ConvNext model)"),J7e.forEach(t),iro=i(se),Fh=n(se,"LI",{});var Y7e=s(Fh);Dee=n(Y7e,"STRONG",{});var IGr=s(Dee);dro=r(IGr,"deit"),IGr.forEach(t),cro=r(Y7e," \u2014 "),kR=n(Y7e,"A",{href:!0});var qGr=s(kR);fro=r(qGr,"DeiTFeatureExtractor"),qGr.forEach(t),mro=r(Y7e," (DeiT model)"),Y7e.forEach(t),gro=i(se),vh=n(se,"LI",{});var K7e=s(vh);Gee=n(K7e,"STRONG",{});var NGr=s(Gee);hro=r(NGr,"detr"),NGr.forEach(t),pro=r(K7e," \u2014 "),SR=n(K7e,"A",{href:!0});var jGr=s(SR);_ro=r(jGr,"DetrFeatureExtractor"),jGr.forEach(t),uro=r(K7e," (DETR model)"),K7e.forEach(t),bro=i(se),Th=n(se,"LI",{});var Z7e=s(Th);Oee=n(Z7e,"STRONG",{});var DGr=s(Oee);Fro=r(DGr,"hubert"),DGr.forEach(t),vro=r(Z7e," \u2014 "),RR=n(Z7e,"A",{href:!0});var GGr=s(RR);Tro=r(GGr,"Wav2Vec2FeatureExtractor"),GGr.forEach(t),Mro=r(Z7e," (Hubert model)"),Z7e.forEach(t),Ero=i(se),Mh=n(se,"LI",{});var eMe=s(Mh);Vee=n(eMe,"STRONG",{});var OGr=s(Vee);Cro=r(OGr,"layoutlmv2"),OGr.forEach(t),wro=r(eMe," \u2014 "),BR=n(eMe,"A",{href:!0});var VGr=s(BR);Aro=r(VGr,"LayoutLMv2FeatureExtractor"),VGr.forEach(t),yro=r(eMe," (LayoutLMv2 model)"),eMe.forEach(t),Lro=i(se),Eh=n(se,"LI",{});var oMe=s(Eh);Xee=n(oMe,"STRONG",{});var XGr=s(Xee);xro=r(XGr,"maskformer"),XGr.forEach(t),kro=r(oMe," \u2014 "),PR=n(oMe,"A",{href:!0});var zGr=s(PR);Sro=r(zGr,"MaskFormerFeatureExtractor"),zGr.forEach(t),Rro=r(oMe," (MaskFormer model)"),oMe.forEach(t),Bro=i(se),Ch=n(se,"LI",{});var rMe=s(Ch);zee=n(rMe,"STRONG",{});var QGr=s(zee);Pro=r(QGr,"perceiver"),QGr.forEach(t),$ro=r(rMe," \u2014 "),$R=n(rMe,"A",{href:!0});var WGr=s($R);Iro=r(WGr,"PerceiverFeatureExtractor"),WGr.forEach(t),qro=r(rMe," (Perceiver model)"),rMe.forEach(t),Nro=i(se),wh=n(se,"LI",{});var tMe=s(wh);Qee=n(tMe,"STRONG",{});var HGr=s(Qee);jro=r(HGr,"poolformer"),HGr.forEach(t),Dro=r(tMe," \u2014 "),IR=n(tMe,"A",{href:!0});var UGr=s(IR);Gro=r(UGr,"PoolFormerFeatureExtractor"),UGr.forEach(t),Oro=r(tMe," (PoolFormer model)"),tMe.forEach(t),Vro=i(se),Ah=n(se,"LI",{});var aMe=s(Ah);Wee=n(aMe,"STRONG",{});var JGr=s(Wee);Xro=r(JGr,"resnet"),JGr.forEach(t),zro=r(aMe," \u2014 "),qR=n(aMe,"A",{href:!0});var YGr=s(qR);Qro=r(YGr,"ConvNextFeatureExtractor"),YGr.forEach(t),Wro=r(aMe," (ResNet model)"),aMe.forEach(t),Hro=i(se),yh=n(se,"LI",{});var nMe=s(yh);Hee=n(nMe,"STRONG",{});var KGr=s(Hee);Uro=r(KGr,"segformer"),KGr.forEach(t),Jro=r(nMe," \u2014 "),NR=n(nMe,"A",{href:!0});var ZGr=s(NR);Yro=r(ZGr,"SegformerFeatureExtractor"),ZGr.forEach(t),Kro=r(nMe," (SegFormer model)"),nMe.forEach(t),Zro=i(se),Lh=n(se,"LI",{});var sMe=s(Lh);Uee=n(sMe,"STRONG",{});var eOr=s(Uee);eto=r(eOr,"speech_to_text"),eOr.forEach(t),oto=r(sMe," \u2014 "),jR=n(sMe,"A",{href:!0});var oOr=s(jR);rto=r(oOr,"Speech2TextFeatureExtractor"),oOr.forEach(t),tto=r(sMe," (Speech2Text model)"),sMe.forEach(t),ato=i(se),xh=n(se,"LI",{});var lMe=s(xh);Jee=n(lMe,"STRONG",{});var rOr=s(Jee);nto=r(rOr,"swin"),rOr.forEach(t),sto=r(lMe," \u2014 "),DR=n(lMe,"A",{href:!0});var tOr=s(DR);lto=r(tOr,"ViTFeatureExtractor"),tOr.forEach(t),ito=r(lMe," (Swin model)"),lMe.forEach(t),dto=i(se),kh=n(se,"LI",{});var iMe=s(kh);Yee=n(iMe,"STRONG",{});var aOr=s(Yee);cto=r(aOr,"van"),aOr.forEach(t),fto=r(iMe," \u2014 "),GR=n(iMe,"A",{href:!0});var nOr=s(GR);mto=r(nOr,"ConvNextFeatureExtractor"),nOr.forEach(t),gto=r(iMe," (VAN model)"),iMe.forEach(t),hto=i(se),Sh=n(se,"LI",{});var dMe=s(Sh);Kee=n(dMe,"STRONG",{});var sOr=s(Kee);pto=r(sOr,"vit"),sOr.forEach(t),_to=r(dMe," \u2014 "),OR=n(dMe,"A",{href:!0});var lOr=s(OR);uto=r(lOr,"ViTFeatureExtractor"),lOr.forEach(t),bto=r(dMe," (ViT model)"),dMe.forEach(t),Fto=i(se),Rh=n(se,"LI",{});var cMe=s(Rh);Zee=n(cMe,"STRONG",{});var iOr=s(Zee);vto=r(iOr,"vit_mae"),iOr.forEach(t),Tto=r(cMe," \u2014 "),VR=n(cMe,"A",{href:!0});var dOr=s(VR);Mto=r(dOr,"ViTFeatureExtractor"),dOr.forEach(t),Eto=r(cMe," (ViTMAE model)"),cMe.forEach(t),Cto=i(se),Bh=n(se,"LI",{});var fMe=s(Bh);eoe=n(fMe,"STRONG",{});var cOr=s(eoe);wto=r(cOr,"wav2vec2"),cOr.forEach(t),Ato=r(fMe," \u2014 "),XR=n(fMe,"A",{href:!0});var fOr=s(XR);yto=r(fOr,"Wav2Vec2FeatureExtractor"),fOr.forEach(t),Lto=r(fMe," (Wav2Vec2 model)"),fMe.forEach(t),se.forEach(t),xto=i(Nt),m(Ph.$$.fragment,Nt),kto=i(Nt),ooe=n(Nt,"P",{});var mOr=s(ooe);Sto=r(mOr,"Examples:"),mOr.forEach(t),Rto=i(Nt),m(XC.$$.fragment,Nt),Nt.forEach(t),Bto=i(Xs),$h=n(Xs,"DIV",{class:!0});var _Pe=s($h);m(zC.$$.fragment,_Pe),Pto=i(_Pe),roe=n(_Pe,"P",{});var gOr=s(roe);$to=r(gOr,"Register a new feature extractor for this class."),gOr.forEach(t),_Pe.forEach(t),Xs.forEach(t),cRe=i(c),Hi=n(c,"H2",{class:!0});var uPe=s(Hi);Ih=n(uPe,"A",{id:!0,class:!0,href:!0});var hOr=s(Ih);toe=n(hOr,"SPAN",{});var pOr=s(toe);m(QC.$$.fragment,pOr),pOr.forEach(t),hOr.forEach(t),Ito=i(uPe),aoe=n(uPe,"SPAN",{});var _Or=s(aoe);qto=r(_Or,"AutoProcessor"),_Or.forEach(t),uPe.forEach(t),fRe=i(c),Uo=n(c,"DIV",{class:!0});var zs=s(Uo);m(WC.$$.fragment,zs),Nto=i(zs),HC=n(zs,"P",{});var bPe=s(HC);jto=r(bPe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),zR=n(bPe,"A",{href:!0});var uOr=s(zR);Dto=r(uOr,"AutoProcessor.from_pretrained()"),uOr.forEach(t),Gto=r(bPe," class method."),bPe.forEach(t),Oto=i(zs),UC=n(zs,"P",{});var FPe=s(UC);Vto=r(FPe,"This class cannot be instantiated directly using "),noe=n(FPe,"CODE",{});var bOr=s(noe);Xto=r(bOr,"__init__()"),bOr.forEach(t),zto=r(FPe," (throws an error)."),FPe.forEach(t),Qto=i(zs),Ie=n(zs,"DIV",{class:!0});var jt=s(Ie);m(JC.$$.fragment,jt),Wto=i(jt),soe=n(jt,"P",{});var FOr=s(soe);Hto=r(FOr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),FOr.forEach(t),Uto=i(jt),Ui=n(jt,"P",{});var rU=s(Ui);Jto=r(rU,"The processor class to instantiate is selected based on the "),loe=n(rU,"CODE",{});var vOr=s(loe);Yto=r(vOr,"model_type"),vOr.forEach(t),Kto=r(rU,` property of the config object (either
passed as an argument or loaded from `),ioe=n(rU,"CODE",{});var TOr=s(ioe);Zto=r(TOr,"pretrained_model_name_or_path"),TOr.forEach(t),eao=r(rU," if possible):"),rU.forEach(t),oao=i(jt),ke=n(jt,"UL",{});var jo=s(ke);qh=n(jo,"LI",{});var mMe=s(qh);doe=n(mMe,"STRONG",{});var MOr=s(doe);rao=r(MOr,"clip"),MOr.forEach(t),tao=r(mMe," \u2014 "),QR=n(mMe,"A",{href:!0});var EOr=s(QR);aao=r(EOr,"CLIPProcessor"),EOr.forEach(t),nao=r(mMe," (CLIP model)"),mMe.forEach(t),sao=i(jo),Nh=n(jo,"LI",{});var gMe=s(Nh);coe=n(gMe,"STRONG",{});var COr=s(coe);lao=r(COr,"layoutlmv2"),COr.forEach(t),iao=r(gMe," \u2014 "),WR=n(gMe,"A",{href:!0});var wOr=s(WR);dao=r(wOr,"LayoutLMv2Processor"),wOr.forEach(t),cao=r(gMe," (LayoutLMv2 model)"),gMe.forEach(t),fao=i(jo),jh=n(jo,"LI",{});var hMe=s(jh);foe=n(hMe,"STRONG",{});var AOr=s(foe);mao=r(AOr,"layoutxlm"),AOr.forEach(t),gao=r(hMe," \u2014 "),HR=n(hMe,"A",{href:!0});var yOr=s(HR);hao=r(yOr,"LayoutXLMProcessor"),yOr.forEach(t),pao=r(hMe," (LayoutXLM model)"),hMe.forEach(t),_ao=i(jo),Dh=n(jo,"LI",{});var pMe=s(Dh);moe=n(pMe,"STRONG",{});var LOr=s(moe);uao=r(LOr,"speech_to_text"),LOr.forEach(t),bao=r(pMe," \u2014 "),UR=n(pMe,"A",{href:!0});var xOr=s(UR);Fao=r(xOr,"Speech2TextProcessor"),xOr.forEach(t),vao=r(pMe," (Speech2Text model)"),pMe.forEach(t),Tao=i(jo),Gh=n(jo,"LI",{});var _Me=s(Gh);goe=n(_Me,"STRONG",{});var kOr=s(goe);Mao=r(kOr,"speech_to_text_2"),kOr.forEach(t),Eao=r(_Me," \u2014 "),JR=n(_Me,"A",{href:!0});var SOr=s(JR);Cao=r(SOr,"Speech2Text2Processor"),SOr.forEach(t),wao=r(_Me," (Speech2Text2 model)"),_Me.forEach(t),Aao=i(jo),Oh=n(jo,"LI",{});var uMe=s(Oh);hoe=n(uMe,"STRONG",{});var ROr=s(hoe);yao=r(ROr,"trocr"),ROr.forEach(t),Lao=r(uMe," \u2014 "),YR=n(uMe,"A",{href:!0});var BOr=s(YR);xao=r(BOr,"TrOCRProcessor"),BOr.forEach(t),kao=r(uMe," (TrOCR model)"),uMe.forEach(t),Sao=i(jo),Vh=n(jo,"LI",{});var bMe=s(Vh);poe=n(bMe,"STRONG",{});var POr=s(poe);Rao=r(POr,"vision-text-dual-encoder"),POr.forEach(t),Bao=r(bMe," \u2014 "),KR=n(bMe,"A",{href:!0});var $Or=s(KR);Pao=r($Or,"VisionTextDualEncoderProcessor"),$Or.forEach(t),$ao=r(bMe," (VisionTextDualEncoder model)"),bMe.forEach(t),Iao=i(jo),Xh=n(jo,"LI",{});var FMe=s(Xh);_oe=n(FMe,"STRONG",{});var IOr=s(_oe);qao=r(IOr,"wav2vec2"),IOr.forEach(t),Nao=r(FMe," \u2014 "),ZR=n(FMe,"A",{href:!0});var qOr=s(ZR);jao=r(qOr,"Wav2Vec2Processor"),qOr.forEach(t),Dao=r(FMe," (Wav2Vec2 model)"),FMe.forEach(t),jo.forEach(t),Gao=i(jt),m(zh.$$.fragment,jt),Oao=i(jt),uoe=n(jt,"P",{});var NOr=s(uoe);Vao=r(NOr,"Examples:"),NOr.forEach(t),Xao=i(jt),m(YC.$$.fragment,jt),jt.forEach(t),zao=i(zs),Qh=n(zs,"DIV",{class:!0});var vPe=s(Qh);m(KC.$$.fragment,vPe),Qao=i(vPe),boe=n(vPe,"P",{});var jOr=s(boe);Wao=r(jOr,"Register a new processor for this class."),jOr.forEach(t),vPe.forEach(t),zs.forEach(t),mRe=i(c),Ji=n(c,"H2",{class:!0});var TPe=s(Ji);Wh=n(TPe,"A",{id:!0,class:!0,href:!0});var DOr=s(Wh);Foe=n(DOr,"SPAN",{});var GOr=s(Foe);m(ZC.$$.fragment,GOr),GOr.forEach(t),DOr.forEach(t),Hao=i(TPe),voe=n(TPe,"SPAN",{});var OOr=s(voe);Uao=r(OOr,"AutoModel"),OOr.forEach(t),TPe.forEach(t),gRe=i(c),Jo=n(c,"DIV",{class:!0});var Qs=s(Jo);m(e5.$$.fragment,Qs),Jao=i(Qs),Yi=n(Qs,"P",{});var tU=s(Yi);Yao=r(tU,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),eB=n(tU,"A",{href:!0});var VOr=s(eB);Kao=r(VOr,"from_pretrained()"),VOr.forEach(t),Zao=r(tU," class method or the "),oB=n(tU,"A",{href:!0});var XOr=s(oB);eno=r(XOr,"from_config()"),XOr.forEach(t),ono=r(tU,` class
method.`),tU.forEach(t),rno=i(Qs),o5=n(Qs,"P",{});var MPe=s(o5);tno=r(MPe,"This class cannot be instantiated directly using "),Toe=n(MPe,"CODE",{});var zOr=s(Toe);ano=r(zOr,"__init__()"),zOr.forEach(t),nno=r(MPe," (throws an error)."),MPe.forEach(t),sno=i(Qs),Xr=n(Qs,"DIV",{class:!0});var Ws=s(Xr);m(r5.$$.fragment,Ws),lno=i(Ws),Moe=n(Ws,"P",{});var QOr=s(Moe);ino=r(QOr,"Instantiates one of the base model classes of the library from a configuration."),QOr.forEach(t),dno=i(Ws),Ki=n(Ws,"P",{});var aU=s(Ki);cno=r(aU,`Note:
Loading a model from its configuration file does `),Eoe=n(aU,"STRONG",{});var WOr=s(Eoe);fno=r(WOr,"not"),WOr.forEach(t),mno=r(aU,` load the model weights. It only affects the
model\u2019s configuration. Use `),rB=n(aU,"A",{href:!0});var HOr=s(rB);gno=r(HOr,"from_pretrained()"),HOr.forEach(t),hno=r(aU," to load the model weights."),aU.forEach(t),pno=i(Ws),Coe=n(Ws,"P",{});var UOr=s(Coe);_no=r(UOr,"Examples:"),UOr.forEach(t),uno=i(Ws),m(t5.$$.fragment,Ws),Ws.forEach(t),bno=i(Qs),qe=n(Qs,"DIV",{class:!0});var Dt=s(qe);m(a5.$$.fragment,Dt),Fno=i(Dt),woe=n(Dt,"P",{});var JOr=s(woe);vno=r(JOr,"Instantiate one of the base model classes of the library from a pretrained model."),JOr.forEach(t),Tno=i(Dt),Xa=n(Dt,"P",{});var EE=s(Xa);Mno=r(EE,"The model class to instantiate is selected based on the "),Aoe=n(EE,"CODE",{});var YOr=s(Aoe);Eno=r(YOr,"model_type"),YOr.forEach(t),Cno=r(EE,` property of the config object (either
passed as an argument or loaded from `),yoe=n(EE,"CODE",{});var KOr=s(yoe);wno=r(KOr,"pretrained_model_name_or_path"),KOr.forEach(t),Ano=r(EE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Loe=n(EE,"CODE",{});var ZOr=s(Loe);yno=r(ZOr,"pretrained_model_name_or_path"),ZOr.forEach(t),Lno=r(EE,":"),EE.forEach(t),xno=i(Dt),T=n(Dt,"UL",{});var M=s(T);Hh=n(M,"LI",{});var vMe=s(Hh);xoe=n(vMe,"STRONG",{});var eVr=s(xoe);kno=r(eVr,"albert"),eVr.forEach(t),Sno=r(vMe," \u2014 "),tB=n(vMe,"A",{href:!0});var oVr=s(tB);Rno=r(oVr,"AlbertModel"),oVr.forEach(t),Bno=r(vMe," (ALBERT model)"),vMe.forEach(t),Pno=i(M),Uh=n(M,"LI",{});var TMe=s(Uh);koe=n(TMe,"STRONG",{});var rVr=s(koe);$no=r(rVr,"bart"),rVr.forEach(t),Ino=r(TMe," \u2014 "),aB=n(TMe,"A",{href:!0});var tVr=s(aB);qno=r(tVr,"BartModel"),tVr.forEach(t),Nno=r(TMe," (BART model)"),TMe.forEach(t),jno=i(M),Jh=n(M,"LI",{});var MMe=s(Jh);Soe=n(MMe,"STRONG",{});var aVr=s(Soe);Dno=r(aVr,"beit"),aVr.forEach(t),Gno=r(MMe," \u2014 "),nB=n(MMe,"A",{href:!0});var nVr=s(nB);Ono=r(nVr,"BeitModel"),nVr.forEach(t),Vno=r(MMe," (BEiT model)"),MMe.forEach(t),Xno=i(M),Yh=n(M,"LI",{});var EMe=s(Yh);Roe=n(EMe,"STRONG",{});var sVr=s(Roe);zno=r(sVr,"bert"),sVr.forEach(t),Qno=r(EMe," \u2014 "),sB=n(EMe,"A",{href:!0});var lVr=s(sB);Wno=r(lVr,"BertModel"),lVr.forEach(t),Hno=r(EMe," (BERT model)"),EMe.forEach(t),Uno=i(M),Kh=n(M,"LI",{});var CMe=s(Kh);Boe=n(CMe,"STRONG",{});var iVr=s(Boe);Jno=r(iVr,"bert-generation"),iVr.forEach(t),Yno=r(CMe," \u2014 "),lB=n(CMe,"A",{href:!0});var dVr=s(lB);Kno=r(dVr,"BertGenerationEncoder"),dVr.forEach(t),Zno=r(CMe," (Bert Generation model)"),CMe.forEach(t),eso=i(M),Zh=n(M,"LI",{});var wMe=s(Zh);Poe=n(wMe,"STRONG",{});var cVr=s(Poe);oso=r(cVr,"big_bird"),cVr.forEach(t),rso=r(wMe," \u2014 "),iB=n(wMe,"A",{href:!0});var fVr=s(iB);tso=r(fVr,"BigBirdModel"),fVr.forEach(t),aso=r(wMe," (BigBird model)"),wMe.forEach(t),nso=i(M),ep=n(M,"LI",{});var AMe=s(ep);$oe=n(AMe,"STRONG",{});var mVr=s($oe);sso=r(mVr,"bigbird_pegasus"),mVr.forEach(t),lso=r(AMe," \u2014 "),dB=n(AMe,"A",{href:!0});var gVr=s(dB);iso=r(gVr,"BigBirdPegasusModel"),gVr.forEach(t),dso=r(AMe," (BigBirdPegasus model)"),AMe.forEach(t),cso=i(M),op=n(M,"LI",{});var yMe=s(op);Ioe=n(yMe,"STRONG",{});var hVr=s(Ioe);fso=r(hVr,"blenderbot"),hVr.forEach(t),mso=r(yMe," \u2014 "),cB=n(yMe,"A",{href:!0});var pVr=s(cB);gso=r(pVr,"BlenderbotModel"),pVr.forEach(t),hso=r(yMe," (Blenderbot model)"),yMe.forEach(t),pso=i(M),rp=n(M,"LI",{});var LMe=s(rp);qoe=n(LMe,"STRONG",{});var _Vr=s(qoe);_so=r(_Vr,"blenderbot-small"),_Vr.forEach(t),uso=r(LMe," \u2014 "),fB=n(LMe,"A",{href:!0});var uVr=s(fB);bso=r(uVr,"BlenderbotSmallModel"),uVr.forEach(t),Fso=r(LMe," (BlenderbotSmall model)"),LMe.forEach(t),vso=i(M),tp=n(M,"LI",{});var xMe=s(tp);Noe=n(xMe,"STRONG",{});var bVr=s(Noe);Tso=r(bVr,"camembert"),bVr.forEach(t),Mso=r(xMe," \u2014 "),mB=n(xMe,"A",{href:!0});var FVr=s(mB);Eso=r(FVr,"CamembertModel"),FVr.forEach(t),Cso=r(xMe," (CamemBERT model)"),xMe.forEach(t),wso=i(M),ap=n(M,"LI",{});var kMe=s(ap);joe=n(kMe,"STRONG",{});var vVr=s(joe);Aso=r(vVr,"canine"),vVr.forEach(t),yso=r(kMe," \u2014 "),gB=n(kMe,"A",{href:!0});var TVr=s(gB);Lso=r(TVr,"CanineModel"),TVr.forEach(t),xso=r(kMe," (Canine model)"),kMe.forEach(t),kso=i(M),np=n(M,"LI",{});var SMe=s(np);Doe=n(SMe,"STRONG",{});var MVr=s(Doe);Sso=r(MVr,"clip"),MVr.forEach(t),Rso=r(SMe," \u2014 "),hB=n(SMe,"A",{href:!0});var EVr=s(hB);Bso=r(EVr,"CLIPModel"),EVr.forEach(t),Pso=r(SMe," (CLIP model)"),SMe.forEach(t),$so=i(M),sp=n(M,"LI",{});var RMe=s(sp);Goe=n(RMe,"STRONG",{});var CVr=s(Goe);Iso=r(CVr,"convbert"),CVr.forEach(t),qso=r(RMe," \u2014 "),pB=n(RMe,"A",{href:!0});var wVr=s(pB);Nso=r(wVr,"ConvBertModel"),wVr.forEach(t),jso=r(RMe," (ConvBERT model)"),RMe.forEach(t),Dso=i(M),lp=n(M,"LI",{});var BMe=s(lp);Ooe=n(BMe,"STRONG",{});var AVr=s(Ooe);Gso=r(AVr,"convnext"),AVr.forEach(t),Oso=r(BMe," \u2014 "),_B=n(BMe,"A",{href:!0});var yVr=s(_B);Vso=r(yVr,"ConvNextModel"),yVr.forEach(t),Xso=r(BMe," (ConvNext model)"),BMe.forEach(t),zso=i(M),ip=n(M,"LI",{});var PMe=s(ip);Voe=n(PMe,"STRONG",{});var LVr=s(Voe);Qso=r(LVr,"ctrl"),LVr.forEach(t),Wso=r(PMe," \u2014 "),uB=n(PMe,"A",{href:!0});var xVr=s(uB);Hso=r(xVr,"CTRLModel"),xVr.forEach(t),Uso=r(PMe," (CTRL model)"),PMe.forEach(t),Jso=i(M),dp=n(M,"LI",{});var $Me=s(dp);Xoe=n($Me,"STRONG",{});var kVr=s(Xoe);Yso=r(kVr,"data2vec-audio"),kVr.forEach(t),Kso=r($Me," \u2014 "),bB=n($Me,"A",{href:!0});var SVr=s(bB);Zso=r(SVr,"Data2VecAudioModel"),SVr.forEach(t),elo=r($Me," (Data2VecAudio model)"),$Me.forEach(t),olo=i(M),cp=n(M,"LI",{});var IMe=s(cp);zoe=n(IMe,"STRONG",{});var RVr=s(zoe);rlo=r(RVr,"data2vec-text"),RVr.forEach(t),tlo=r(IMe," \u2014 "),FB=n(IMe,"A",{href:!0});var BVr=s(FB);alo=r(BVr,"Data2VecTextModel"),BVr.forEach(t),nlo=r(IMe," (Data2VecText model)"),IMe.forEach(t),slo=i(M),fp=n(M,"LI",{});var qMe=s(fp);Qoe=n(qMe,"STRONG",{});var PVr=s(Qoe);llo=r(PVr,"deberta"),PVr.forEach(t),ilo=r(qMe," \u2014 "),vB=n(qMe,"A",{href:!0});var $Vr=s(vB);dlo=r($Vr,"DebertaModel"),$Vr.forEach(t),clo=r(qMe," (DeBERTa model)"),qMe.forEach(t),flo=i(M),mp=n(M,"LI",{});var NMe=s(mp);Woe=n(NMe,"STRONG",{});var IVr=s(Woe);mlo=r(IVr,"deberta-v2"),IVr.forEach(t),glo=r(NMe," \u2014 "),TB=n(NMe,"A",{href:!0});var qVr=s(TB);hlo=r(qVr,"DebertaV2Model"),qVr.forEach(t),plo=r(NMe," (DeBERTa-v2 model)"),NMe.forEach(t),_lo=i(M),gp=n(M,"LI",{});var jMe=s(gp);Hoe=n(jMe,"STRONG",{});var NVr=s(Hoe);ulo=r(NVr,"decision_transformer"),NVr.forEach(t),blo=r(jMe," \u2014 "),MB=n(jMe,"A",{href:!0});var jVr=s(MB);Flo=r(jVr,"DecisionTransformerModel"),jVr.forEach(t),vlo=r(jMe," (Decision Transformer model)"),jMe.forEach(t),Tlo=i(M),hp=n(M,"LI",{});var DMe=s(hp);Uoe=n(DMe,"STRONG",{});var DVr=s(Uoe);Mlo=r(DVr,"deit"),DVr.forEach(t),Elo=r(DMe," \u2014 "),EB=n(DMe,"A",{href:!0});var GVr=s(EB);Clo=r(GVr,"DeiTModel"),GVr.forEach(t),wlo=r(DMe," (DeiT model)"),DMe.forEach(t),Alo=i(M),pp=n(M,"LI",{});var GMe=s(pp);Joe=n(GMe,"STRONG",{});var OVr=s(Joe);ylo=r(OVr,"detr"),OVr.forEach(t),Llo=r(GMe," \u2014 "),CB=n(GMe,"A",{href:!0});var VVr=s(CB);xlo=r(VVr,"DetrModel"),VVr.forEach(t),klo=r(GMe," (DETR model)"),GMe.forEach(t),Slo=i(M),_p=n(M,"LI",{});var OMe=s(_p);Yoe=n(OMe,"STRONG",{});var XVr=s(Yoe);Rlo=r(XVr,"distilbert"),XVr.forEach(t),Blo=r(OMe," \u2014 "),wB=n(OMe,"A",{href:!0});var zVr=s(wB);Plo=r(zVr,"DistilBertModel"),zVr.forEach(t),$lo=r(OMe," (DistilBERT model)"),OMe.forEach(t),Ilo=i(M),up=n(M,"LI",{});var VMe=s(up);Koe=n(VMe,"STRONG",{});var QVr=s(Koe);qlo=r(QVr,"dpr"),QVr.forEach(t),Nlo=r(VMe," \u2014 "),AB=n(VMe,"A",{href:!0});var WVr=s(AB);jlo=r(WVr,"DPRQuestionEncoder"),WVr.forEach(t),Dlo=r(VMe," (DPR model)"),VMe.forEach(t),Glo=i(M),bp=n(M,"LI",{});var XMe=s(bp);Zoe=n(XMe,"STRONG",{});var HVr=s(Zoe);Olo=r(HVr,"dpt"),HVr.forEach(t),Vlo=r(XMe," \u2014 "),yB=n(XMe,"A",{href:!0});var UVr=s(yB);Xlo=r(UVr,"DPTModel"),UVr.forEach(t),zlo=r(XMe," (DPT model)"),XMe.forEach(t),Qlo=i(M),Fp=n(M,"LI",{});var zMe=s(Fp);ere=n(zMe,"STRONG",{});var JVr=s(ere);Wlo=r(JVr,"electra"),JVr.forEach(t),Hlo=r(zMe," \u2014 "),LB=n(zMe,"A",{href:!0});var YVr=s(LB);Ulo=r(YVr,"ElectraModel"),YVr.forEach(t),Jlo=r(zMe," (ELECTRA model)"),zMe.forEach(t),Ylo=i(M),vp=n(M,"LI",{});var QMe=s(vp);ore=n(QMe,"STRONG",{});var KVr=s(ore);Klo=r(KVr,"flaubert"),KVr.forEach(t),Zlo=r(QMe," \u2014 "),xB=n(QMe,"A",{href:!0});var ZVr=s(xB);eio=r(ZVr,"FlaubertModel"),ZVr.forEach(t),oio=r(QMe," (FlauBERT model)"),QMe.forEach(t),rio=i(M),Tp=n(M,"LI",{});var WMe=s(Tp);rre=n(WMe,"STRONG",{});var eXr=s(rre);tio=r(eXr,"fnet"),eXr.forEach(t),aio=r(WMe," \u2014 "),kB=n(WMe,"A",{href:!0});var oXr=s(kB);nio=r(oXr,"FNetModel"),oXr.forEach(t),sio=r(WMe," (FNet model)"),WMe.forEach(t),lio=i(M),Mp=n(M,"LI",{});var HMe=s(Mp);tre=n(HMe,"STRONG",{});var rXr=s(tre);iio=r(rXr,"fsmt"),rXr.forEach(t),dio=r(HMe," \u2014 "),SB=n(HMe,"A",{href:!0});var tXr=s(SB);cio=r(tXr,"FSMTModel"),tXr.forEach(t),fio=r(HMe," (FairSeq Machine-Translation model)"),HMe.forEach(t),mio=i(M),js=n(M,"LI",{});var i9=s(js);are=n(i9,"STRONG",{});var aXr=s(are);gio=r(aXr,"funnel"),aXr.forEach(t),hio=r(i9," \u2014 "),RB=n(i9,"A",{href:!0});var nXr=s(RB);pio=r(nXr,"FunnelModel"),nXr.forEach(t),_io=r(i9," or "),BB=n(i9,"A",{href:!0});var sXr=s(BB);uio=r(sXr,"FunnelBaseModel"),sXr.forEach(t),bio=r(i9," (Funnel Transformer model)"),i9.forEach(t),Fio=i(M),Ep=n(M,"LI",{});var UMe=s(Ep);nre=n(UMe,"STRONG",{});var lXr=s(nre);vio=r(lXr,"glpn"),lXr.forEach(t),Tio=r(UMe," \u2014 "),PB=n(UMe,"A",{href:!0});var iXr=s(PB);Mio=r(iXr,"GLPNModel"),iXr.forEach(t),Eio=r(UMe," (GLPN model)"),UMe.forEach(t),Cio=i(M),Cp=n(M,"LI",{});var JMe=s(Cp);sre=n(JMe,"STRONG",{});var dXr=s(sre);wio=r(dXr,"gpt2"),dXr.forEach(t),Aio=r(JMe," \u2014 "),$B=n(JMe,"A",{href:!0});var cXr=s($B);yio=r(cXr,"GPT2Model"),cXr.forEach(t),Lio=r(JMe," (OpenAI GPT-2 model)"),JMe.forEach(t),xio=i(M),wp=n(M,"LI",{});var YMe=s(wp);lre=n(YMe,"STRONG",{});var fXr=s(lre);kio=r(fXr,"gpt_neo"),fXr.forEach(t),Sio=r(YMe," \u2014 "),IB=n(YMe,"A",{href:!0});var mXr=s(IB);Rio=r(mXr,"GPTNeoModel"),mXr.forEach(t),Bio=r(YMe," (GPT Neo model)"),YMe.forEach(t),Pio=i(M),Ap=n(M,"LI",{});var KMe=s(Ap);ire=n(KMe,"STRONG",{});var gXr=s(ire);$io=r(gXr,"gptj"),gXr.forEach(t),Iio=r(KMe," \u2014 "),qB=n(KMe,"A",{href:!0});var hXr=s(qB);qio=r(hXr,"GPTJModel"),hXr.forEach(t),Nio=r(KMe," (GPT-J model)"),KMe.forEach(t),jio=i(M),yp=n(M,"LI",{});var ZMe=s(yp);dre=n(ZMe,"STRONG",{});var pXr=s(dre);Dio=r(pXr,"hubert"),pXr.forEach(t),Gio=r(ZMe," \u2014 "),NB=n(ZMe,"A",{href:!0});var _Xr=s(NB);Oio=r(_Xr,"HubertModel"),_Xr.forEach(t),Vio=r(ZMe," (Hubert model)"),ZMe.forEach(t),Xio=i(M),Lp=n(M,"LI",{});var eEe=s(Lp);cre=n(eEe,"STRONG",{});var uXr=s(cre);zio=r(uXr,"ibert"),uXr.forEach(t),Qio=r(eEe," \u2014 "),jB=n(eEe,"A",{href:!0});var bXr=s(jB);Wio=r(bXr,"IBertModel"),bXr.forEach(t),Hio=r(eEe," (I-BERT model)"),eEe.forEach(t),Uio=i(M),xp=n(M,"LI",{});var oEe=s(xp);fre=n(oEe,"STRONG",{});var FXr=s(fre);Jio=r(FXr,"imagegpt"),FXr.forEach(t),Yio=r(oEe," \u2014 "),DB=n(oEe,"A",{href:!0});var vXr=s(DB);Kio=r(vXr,"ImageGPTModel"),vXr.forEach(t),Zio=r(oEe," (ImageGPT model)"),oEe.forEach(t),edo=i(M),kp=n(M,"LI",{});var rEe=s(kp);mre=n(rEe,"STRONG",{});var TXr=s(mre);odo=r(TXr,"layoutlm"),TXr.forEach(t),rdo=r(rEe," \u2014 "),GB=n(rEe,"A",{href:!0});var MXr=s(GB);tdo=r(MXr,"LayoutLMModel"),MXr.forEach(t),ado=r(rEe," (LayoutLM model)"),rEe.forEach(t),ndo=i(M),Sp=n(M,"LI",{});var tEe=s(Sp);gre=n(tEe,"STRONG",{});var EXr=s(gre);sdo=r(EXr,"layoutlmv2"),EXr.forEach(t),ldo=r(tEe," \u2014 "),OB=n(tEe,"A",{href:!0});var CXr=s(OB);ido=r(CXr,"LayoutLMv2Model"),CXr.forEach(t),ddo=r(tEe," (LayoutLMv2 model)"),tEe.forEach(t),cdo=i(M),Rp=n(M,"LI",{});var aEe=s(Rp);hre=n(aEe,"STRONG",{});var wXr=s(hre);fdo=r(wXr,"led"),wXr.forEach(t),mdo=r(aEe," \u2014 "),VB=n(aEe,"A",{href:!0});var AXr=s(VB);gdo=r(AXr,"LEDModel"),AXr.forEach(t),hdo=r(aEe," (LED model)"),aEe.forEach(t),pdo=i(M),Bp=n(M,"LI",{});var nEe=s(Bp);pre=n(nEe,"STRONG",{});var yXr=s(pre);_do=r(yXr,"longformer"),yXr.forEach(t),udo=r(nEe," \u2014 "),XB=n(nEe,"A",{href:!0});var LXr=s(XB);bdo=r(LXr,"LongformerModel"),LXr.forEach(t),Fdo=r(nEe," (Longformer model)"),nEe.forEach(t),vdo=i(M),Pp=n(M,"LI",{});var sEe=s(Pp);_re=n(sEe,"STRONG",{});var xXr=s(_re);Tdo=r(xXr,"luke"),xXr.forEach(t),Mdo=r(sEe," \u2014 "),zB=n(sEe,"A",{href:!0});var kXr=s(zB);Edo=r(kXr,"LukeModel"),kXr.forEach(t),Cdo=r(sEe," (LUKE model)"),sEe.forEach(t),wdo=i(M),$p=n(M,"LI",{});var lEe=s($p);ure=n(lEe,"STRONG",{});var SXr=s(ure);Ado=r(SXr,"lxmert"),SXr.forEach(t),ydo=r(lEe," \u2014 "),QB=n(lEe,"A",{href:!0});var RXr=s(QB);Ldo=r(RXr,"LxmertModel"),RXr.forEach(t),xdo=r(lEe," (LXMERT model)"),lEe.forEach(t),kdo=i(M),Ip=n(M,"LI",{});var iEe=s(Ip);bre=n(iEe,"STRONG",{});var BXr=s(bre);Sdo=r(BXr,"m2m_100"),BXr.forEach(t),Rdo=r(iEe," \u2014 "),WB=n(iEe,"A",{href:!0});var PXr=s(WB);Bdo=r(PXr,"M2M100Model"),PXr.forEach(t),Pdo=r(iEe," (M2M100 model)"),iEe.forEach(t),$do=i(M),qp=n(M,"LI",{});var dEe=s(qp);Fre=n(dEe,"STRONG",{});var $Xr=s(Fre);Ido=r($Xr,"marian"),$Xr.forEach(t),qdo=r(dEe," \u2014 "),HB=n(dEe,"A",{href:!0});var IXr=s(HB);Ndo=r(IXr,"MarianModel"),IXr.forEach(t),jdo=r(dEe," (Marian model)"),dEe.forEach(t),Ddo=i(M),Np=n(M,"LI",{});var cEe=s(Np);vre=n(cEe,"STRONG",{});var qXr=s(vre);Gdo=r(qXr,"maskformer"),qXr.forEach(t),Odo=r(cEe," \u2014 "),UB=n(cEe,"A",{href:!0});var NXr=s(UB);Vdo=r(NXr,"MaskFormerModel"),NXr.forEach(t),Xdo=r(cEe," (MaskFormer model)"),cEe.forEach(t),zdo=i(M),jp=n(M,"LI",{});var fEe=s(jp);Tre=n(fEe,"STRONG",{});var jXr=s(Tre);Qdo=r(jXr,"mbart"),jXr.forEach(t),Wdo=r(fEe," \u2014 "),JB=n(fEe,"A",{href:!0});var DXr=s(JB);Hdo=r(DXr,"MBartModel"),DXr.forEach(t),Udo=r(fEe," (mBART model)"),fEe.forEach(t),Jdo=i(M),Dp=n(M,"LI",{});var mEe=s(Dp);Mre=n(mEe,"STRONG",{});var GXr=s(Mre);Ydo=r(GXr,"megatron-bert"),GXr.forEach(t),Kdo=r(mEe," \u2014 "),YB=n(mEe,"A",{href:!0});var OXr=s(YB);Zdo=r(OXr,"MegatronBertModel"),OXr.forEach(t),eco=r(mEe," (MegatronBert model)"),mEe.forEach(t),oco=i(M),Gp=n(M,"LI",{});var gEe=s(Gp);Ere=n(gEe,"STRONG",{});var VXr=s(Ere);rco=r(VXr,"mobilebert"),VXr.forEach(t),tco=r(gEe," \u2014 "),KB=n(gEe,"A",{href:!0});var XXr=s(KB);aco=r(XXr,"MobileBertModel"),XXr.forEach(t),nco=r(gEe," (MobileBERT model)"),gEe.forEach(t),sco=i(M),Op=n(M,"LI",{});var hEe=s(Op);Cre=n(hEe,"STRONG",{});var zXr=s(Cre);lco=r(zXr,"mpnet"),zXr.forEach(t),ico=r(hEe," \u2014 "),ZB=n(hEe,"A",{href:!0});var QXr=s(ZB);dco=r(QXr,"MPNetModel"),QXr.forEach(t),cco=r(hEe," (MPNet model)"),hEe.forEach(t),fco=i(M),Vp=n(M,"LI",{});var pEe=s(Vp);wre=n(pEe,"STRONG",{});var WXr=s(wre);mco=r(WXr,"mt5"),WXr.forEach(t),gco=r(pEe," \u2014 "),eP=n(pEe,"A",{href:!0});var HXr=s(eP);hco=r(HXr,"MT5Model"),HXr.forEach(t),pco=r(pEe," (mT5 model)"),pEe.forEach(t),_co=i(M),Xp=n(M,"LI",{});var _Ee=s(Xp);Are=n(_Ee,"STRONG",{});var UXr=s(Are);uco=r(UXr,"nystromformer"),UXr.forEach(t),bco=r(_Ee," \u2014 "),oP=n(_Ee,"A",{href:!0});var JXr=s(oP);Fco=r(JXr,"NystromformerModel"),JXr.forEach(t),vco=r(_Ee," (Nystromformer model)"),_Ee.forEach(t),Tco=i(M),zp=n(M,"LI",{});var uEe=s(zp);yre=n(uEe,"STRONG",{});var YXr=s(yre);Mco=r(YXr,"openai-gpt"),YXr.forEach(t),Eco=r(uEe," \u2014 "),rP=n(uEe,"A",{href:!0});var KXr=s(rP);Cco=r(KXr,"OpenAIGPTModel"),KXr.forEach(t),wco=r(uEe," (OpenAI GPT model)"),uEe.forEach(t),Aco=i(M),Qp=n(M,"LI",{});var bEe=s(Qp);Lre=n(bEe,"STRONG",{});var ZXr=s(Lre);yco=r(ZXr,"pegasus"),ZXr.forEach(t),Lco=r(bEe," \u2014 "),tP=n(bEe,"A",{href:!0});var ezr=s(tP);xco=r(ezr,"PegasusModel"),ezr.forEach(t),kco=r(bEe," (Pegasus model)"),bEe.forEach(t),Sco=i(M),Wp=n(M,"LI",{});var FEe=s(Wp);xre=n(FEe,"STRONG",{});var ozr=s(xre);Rco=r(ozr,"perceiver"),ozr.forEach(t),Bco=r(FEe," \u2014 "),aP=n(FEe,"A",{href:!0});var rzr=s(aP);Pco=r(rzr,"PerceiverModel"),rzr.forEach(t),$co=r(FEe," (Perceiver model)"),FEe.forEach(t),Ico=i(M),Hp=n(M,"LI",{});var vEe=s(Hp);kre=n(vEe,"STRONG",{});var tzr=s(kre);qco=r(tzr,"plbart"),tzr.forEach(t),Nco=r(vEe," \u2014 "),nP=n(vEe,"A",{href:!0});var azr=s(nP);jco=r(azr,"PLBartModel"),azr.forEach(t),Dco=r(vEe," (PLBart model)"),vEe.forEach(t),Gco=i(M),Up=n(M,"LI",{});var TEe=s(Up);Sre=n(TEe,"STRONG",{});var nzr=s(Sre);Oco=r(nzr,"poolformer"),nzr.forEach(t),Vco=r(TEe," \u2014 "),sP=n(TEe,"A",{href:!0});var szr=s(sP);Xco=r(szr,"PoolFormerModel"),szr.forEach(t),zco=r(TEe," (PoolFormer model)"),TEe.forEach(t),Qco=i(M),Jp=n(M,"LI",{});var MEe=s(Jp);Rre=n(MEe,"STRONG",{});var lzr=s(Rre);Wco=r(lzr,"prophetnet"),lzr.forEach(t),Hco=r(MEe," \u2014 "),lP=n(MEe,"A",{href:!0});var izr=s(lP);Uco=r(izr,"ProphetNetModel"),izr.forEach(t),Jco=r(MEe," (ProphetNet model)"),MEe.forEach(t),Yco=i(M),Yp=n(M,"LI",{});var EEe=s(Yp);Bre=n(EEe,"STRONG",{});var dzr=s(Bre);Kco=r(dzr,"qdqbert"),dzr.forEach(t),Zco=r(EEe," \u2014 "),iP=n(EEe,"A",{href:!0});var czr=s(iP);efo=r(czr,"QDQBertModel"),czr.forEach(t),ofo=r(EEe," (QDQBert model)"),EEe.forEach(t),rfo=i(M),Kp=n(M,"LI",{});var CEe=s(Kp);Pre=n(CEe,"STRONG",{});var fzr=s(Pre);tfo=r(fzr,"reformer"),fzr.forEach(t),afo=r(CEe," \u2014 "),dP=n(CEe,"A",{href:!0});var mzr=s(dP);nfo=r(mzr,"ReformerModel"),mzr.forEach(t),sfo=r(CEe," (Reformer model)"),CEe.forEach(t),lfo=i(M),Zp=n(M,"LI",{});var wEe=s(Zp);$re=n(wEe,"STRONG",{});var gzr=s($re);ifo=r(gzr,"rembert"),gzr.forEach(t),dfo=r(wEe," \u2014 "),cP=n(wEe,"A",{href:!0});var hzr=s(cP);cfo=r(hzr,"RemBertModel"),hzr.forEach(t),ffo=r(wEe," (RemBERT model)"),wEe.forEach(t),mfo=i(M),e_=n(M,"LI",{});var AEe=s(e_);Ire=n(AEe,"STRONG",{});var pzr=s(Ire);gfo=r(pzr,"resnet"),pzr.forEach(t),hfo=r(AEe," \u2014 "),fP=n(AEe,"A",{href:!0});var _zr=s(fP);pfo=r(_zr,"ResNetModel"),_zr.forEach(t),_fo=r(AEe," (ResNet model)"),AEe.forEach(t),ufo=i(M),o_=n(M,"LI",{});var yEe=s(o_);qre=n(yEe,"STRONG",{});var uzr=s(qre);bfo=r(uzr,"retribert"),uzr.forEach(t),Ffo=r(yEe," \u2014 "),mP=n(yEe,"A",{href:!0});var bzr=s(mP);vfo=r(bzr,"RetriBertModel"),bzr.forEach(t),Tfo=r(yEe," (RetriBERT model)"),yEe.forEach(t),Mfo=i(M),r_=n(M,"LI",{});var LEe=s(r_);Nre=n(LEe,"STRONG",{});var Fzr=s(Nre);Efo=r(Fzr,"roberta"),Fzr.forEach(t),Cfo=r(LEe," \u2014 "),gP=n(LEe,"A",{href:!0});var vzr=s(gP);wfo=r(vzr,"RobertaModel"),vzr.forEach(t),Afo=r(LEe," (RoBERTa model)"),LEe.forEach(t),yfo=i(M),t_=n(M,"LI",{});var xEe=s(t_);jre=n(xEe,"STRONG",{});var Tzr=s(jre);Lfo=r(Tzr,"roformer"),Tzr.forEach(t),xfo=r(xEe," \u2014 "),hP=n(xEe,"A",{href:!0});var Mzr=s(hP);kfo=r(Mzr,"RoFormerModel"),Mzr.forEach(t),Sfo=r(xEe," (RoFormer model)"),xEe.forEach(t),Rfo=i(M),a_=n(M,"LI",{});var kEe=s(a_);Dre=n(kEe,"STRONG",{});var Ezr=s(Dre);Bfo=r(Ezr,"segformer"),Ezr.forEach(t),Pfo=r(kEe," \u2014 "),pP=n(kEe,"A",{href:!0});var Czr=s(pP);$fo=r(Czr,"SegformerModel"),Czr.forEach(t),Ifo=r(kEe," (SegFormer model)"),kEe.forEach(t),qfo=i(M),n_=n(M,"LI",{});var SEe=s(n_);Gre=n(SEe,"STRONG",{});var wzr=s(Gre);Nfo=r(wzr,"sew"),wzr.forEach(t),jfo=r(SEe," \u2014 "),_P=n(SEe,"A",{href:!0});var Azr=s(_P);Dfo=r(Azr,"SEWModel"),Azr.forEach(t),Gfo=r(SEe," (SEW model)"),SEe.forEach(t),Ofo=i(M),s_=n(M,"LI",{});var REe=s(s_);Ore=n(REe,"STRONG",{});var yzr=s(Ore);Vfo=r(yzr,"sew-d"),yzr.forEach(t),Xfo=r(REe," \u2014 "),uP=n(REe,"A",{href:!0});var Lzr=s(uP);zfo=r(Lzr,"SEWDModel"),Lzr.forEach(t),Qfo=r(REe," (SEW-D model)"),REe.forEach(t),Wfo=i(M),l_=n(M,"LI",{});var BEe=s(l_);Vre=n(BEe,"STRONG",{});var xzr=s(Vre);Hfo=r(xzr,"speech_to_text"),xzr.forEach(t),Ufo=r(BEe," \u2014 "),bP=n(BEe,"A",{href:!0});var kzr=s(bP);Jfo=r(kzr,"Speech2TextModel"),kzr.forEach(t),Yfo=r(BEe," (Speech2Text model)"),BEe.forEach(t),Kfo=i(M),i_=n(M,"LI",{});var PEe=s(i_);Xre=n(PEe,"STRONG",{});var Szr=s(Xre);Zfo=r(Szr,"splinter"),Szr.forEach(t),emo=r(PEe," \u2014 "),FP=n(PEe,"A",{href:!0});var Rzr=s(FP);omo=r(Rzr,"SplinterModel"),Rzr.forEach(t),rmo=r(PEe," (Splinter model)"),PEe.forEach(t),tmo=i(M),d_=n(M,"LI",{});var $Ee=s(d_);zre=n($Ee,"STRONG",{});var Bzr=s(zre);amo=r(Bzr,"squeezebert"),Bzr.forEach(t),nmo=r($Ee," \u2014 "),vP=n($Ee,"A",{href:!0});var Pzr=s(vP);smo=r(Pzr,"SqueezeBertModel"),Pzr.forEach(t),lmo=r($Ee," (SqueezeBERT model)"),$Ee.forEach(t),imo=i(M),c_=n(M,"LI",{});var IEe=s(c_);Qre=n(IEe,"STRONG",{});var $zr=s(Qre);dmo=r($zr,"swin"),$zr.forEach(t),cmo=r(IEe," \u2014 "),TP=n(IEe,"A",{href:!0});var Izr=s(TP);fmo=r(Izr,"SwinModel"),Izr.forEach(t),mmo=r(IEe," (Swin model)"),IEe.forEach(t),gmo=i(M),f_=n(M,"LI",{});var qEe=s(f_);Wre=n(qEe,"STRONG",{});var qzr=s(Wre);hmo=r(qzr,"t5"),qzr.forEach(t),pmo=r(qEe," \u2014 "),MP=n(qEe,"A",{href:!0});var Nzr=s(MP);_mo=r(Nzr,"T5Model"),Nzr.forEach(t),umo=r(qEe," (T5 model)"),qEe.forEach(t),bmo=i(M),m_=n(M,"LI",{});var NEe=s(m_);Hre=n(NEe,"STRONG",{});var jzr=s(Hre);Fmo=r(jzr,"tapas"),jzr.forEach(t),vmo=r(NEe," \u2014 "),EP=n(NEe,"A",{href:!0});var Dzr=s(EP);Tmo=r(Dzr,"TapasModel"),Dzr.forEach(t),Mmo=r(NEe," (TAPAS model)"),NEe.forEach(t),Emo=i(M),g_=n(M,"LI",{});var jEe=s(g_);Ure=n(jEe,"STRONG",{});var Gzr=s(Ure);Cmo=r(Gzr,"transfo-xl"),Gzr.forEach(t),wmo=r(jEe," \u2014 "),CP=n(jEe,"A",{href:!0});var Ozr=s(CP);Amo=r(Ozr,"TransfoXLModel"),Ozr.forEach(t),ymo=r(jEe," (Transformer-XL model)"),jEe.forEach(t),Lmo=i(M),h_=n(M,"LI",{});var DEe=s(h_);Jre=n(DEe,"STRONG",{});var Vzr=s(Jre);xmo=r(Vzr,"unispeech"),Vzr.forEach(t),kmo=r(DEe," \u2014 "),wP=n(DEe,"A",{href:!0});var Xzr=s(wP);Smo=r(Xzr,"UniSpeechModel"),Xzr.forEach(t),Rmo=r(DEe," (UniSpeech model)"),DEe.forEach(t),Bmo=i(M),p_=n(M,"LI",{});var GEe=s(p_);Yre=n(GEe,"STRONG",{});var zzr=s(Yre);Pmo=r(zzr,"unispeech-sat"),zzr.forEach(t),$mo=r(GEe," \u2014 "),AP=n(GEe,"A",{href:!0});var Qzr=s(AP);Imo=r(Qzr,"UniSpeechSatModel"),Qzr.forEach(t),qmo=r(GEe," (UniSpeechSat model)"),GEe.forEach(t),Nmo=i(M),__=n(M,"LI",{});var OEe=s(__);Kre=n(OEe,"STRONG",{});var Wzr=s(Kre);jmo=r(Wzr,"van"),Wzr.forEach(t),Dmo=r(OEe," \u2014 "),yP=n(OEe,"A",{href:!0});var Hzr=s(yP);Gmo=r(Hzr,"VanModel"),Hzr.forEach(t),Omo=r(OEe," (VAN model)"),OEe.forEach(t),Vmo=i(M),u_=n(M,"LI",{});var VEe=s(u_);Zre=n(VEe,"STRONG",{});var Uzr=s(Zre);Xmo=r(Uzr,"vilt"),Uzr.forEach(t),zmo=r(VEe," \u2014 "),LP=n(VEe,"A",{href:!0});var Jzr=s(LP);Qmo=r(Jzr,"ViltModel"),Jzr.forEach(t),Wmo=r(VEe," (ViLT model)"),VEe.forEach(t),Hmo=i(M),b_=n(M,"LI",{});var XEe=s(b_);ete=n(XEe,"STRONG",{});var Yzr=s(ete);Umo=r(Yzr,"vision-text-dual-encoder"),Yzr.forEach(t),Jmo=r(XEe," \u2014 "),xP=n(XEe,"A",{href:!0});var Kzr=s(xP);Ymo=r(Kzr,"VisionTextDualEncoderModel"),Kzr.forEach(t),Kmo=r(XEe," (VisionTextDualEncoder model)"),XEe.forEach(t),Zmo=i(M),F_=n(M,"LI",{});var zEe=s(F_);ote=n(zEe,"STRONG",{});var Zzr=s(ote);ego=r(Zzr,"visual_bert"),Zzr.forEach(t),ogo=r(zEe," \u2014 "),kP=n(zEe,"A",{href:!0});var eQr=s(kP);rgo=r(eQr,"VisualBertModel"),eQr.forEach(t),tgo=r(zEe," (VisualBert model)"),zEe.forEach(t),ago=i(M),v_=n(M,"LI",{});var QEe=s(v_);rte=n(QEe,"STRONG",{});var oQr=s(rte);ngo=r(oQr,"vit"),oQr.forEach(t),sgo=r(QEe," \u2014 "),SP=n(QEe,"A",{href:!0});var rQr=s(SP);lgo=r(rQr,"ViTModel"),rQr.forEach(t),igo=r(QEe," (ViT model)"),QEe.forEach(t),dgo=i(M),T_=n(M,"LI",{});var WEe=s(T_);tte=n(WEe,"STRONG",{});var tQr=s(tte);cgo=r(tQr,"vit_mae"),tQr.forEach(t),fgo=r(WEe," \u2014 "),RP=n(WEe,"A",{href:!0});var aQr=s(RP);mgo=r(aQr,"ViTMAEModel"),aQr.forEach(t),ggo=r(WEe," (ViTMAE model)"),WEe.forEach(t),hgo=i(M),M_=n(M,"LI",{});var HEe=s(M_);ate=n(HEe,"STRONG",{});var nQr=s(ate);pgo=r(nQr,"wav2vec2"),nQr.forEach(t),_go=r(HEe," \u2014 "),BP=n(HEe,"A",{href:!0});var sQr=s(BP);ugo=r(sQr,"Wav2Vec2Model"),sQr.forEach(t),bgo=r(HEe," (Wav2Vec2 model)"),HEe.forEach(t),Fgo=i(M),E_=n(M,"LI",{});var UEe=s(E_);nte=n(UEe,"STRONG",{});var lQr=s(nte);vgo=r(lQr,"wavlm"),lQr.forEach(t),Tgo=r(UEe," \u2014 "),PP=n(UEe,"A",{href:!0});var iQr=s(PP);Mgo=r(iQr,"WavLMModel"),iQr.forEach(t),Ego=r(UEe," (WavLM model)"),UEe.forEach(t),Cgo=i(M),C_=n(M,"LI",{});var JEe=s(C_);ste=n(JEe,"STRONG",{});var dQr=s(ste);wgo=r(dQr,"xglm"),dQr.forEach(t),Ago=r(JEe," \u2014 "),$P=n(JEe,"A",{href:!0});var cQr=s($P);ygo=r(cQr,"XGLMModel"),cQr.forEach(t),Lgo=r(JEe," (XGLM model)"),JEe.forEach(t),xgo=i(M),w_=n(M,"LI",{});var YEe=s(w_);lte=n(YEe,"STRONG",{});var fQr=s(lte);kgo=r(fQr,"xlm"),fQr.forEach(t),Sgo=r(YEe," \u2014 "),IP=n(YEe,"A",{href:!0});var mQr=s(IP);Rgo=r(mQr,"XLMModel"),mQr.forEach(t),Bgo=r(YEe," (XLM model)"),YEe.forEach(t),Pgo=i(M),A_=n(M,"LI",{});var KEe=s(A_);ite=n(KEe,"STRONG",{});var gQr=s(ite);$go=r(gQr,"xlm-prophetnet"),gQr.forEach(t),Igo=r(KEe," \u2014 "),qP=n(KEe,"A",{href:!0});var hQr=s(qP);qgo=r(hQr,"XLMProphetNetModel"),hQr.forEach(t),Ngo=r(KEe," (XLMProphetNet model)"),KEe.forEach(t),jgo=i(M),y_=n(M,"LI",{});var ZEe=s(y_);dte=n(ZEe,"STRONG",{});var pQr=s(dte);Dgo=r(pQr,"xlm-roberta"),pQr.forEach(t),Ggo=r(ZEe," \u2014 "),NP=n(ZEe,"A",{href:!0});var _Qr=s(NP);Ogo=r(_Qr,"XLMRobertaModel"),_Qr.forEach(t),Vgo=r(ZEe," (XLM-RoBERTa model)"),ZEe.forEach(t),Xgo=i(M),L_=n(M,"LI",{});var eCe=s(L_);cte=n(eCe,"STRONG",{});var uQr=s(cte);zgo=r(uQr,"xlm-roberta-xl"),uQr.forEach(t),Qgo=r(eCe," \u2014 "),jP=n(eCe,"A",{href:!0});var bQr=s(jP);Wgo=r(bQr,"XLMRobertaXLModel"),bQr.forEach(t),Hgo=r(eCe," (XLM-RoBERTa-XL model)"),eCe.forEach(t),Ugo=i(M),x_=n(M,"LI",{});var oCe=s(x_);fte=n(oCe,"STRONG",{});var FQr=s(fte);Jgo=r(FQr,"xlnet"),FQr.forEach(t),Ygo=r(oCe," \u2014 "),DP=n(oCe,"A",{href:!0});var vQr=s(DP);Kgo=r(vQr,"XLNetModel"),vQr.forEach(t),Zgo=r(oCe," (XLNet model)"),oCe.forEach(t),eho=i(M),k_=n(M,"LI",{});var rCe=s(k_);mte=n(rCe,"STRONG",{});var TQr=s(mte);oho=r(TQr,"yoso"),TQr.forEach(t),rho=r(rCe," \u2014 "),GP=n(rCe,"A",{href:!0});var MQr=s(GP);tho=r(MQr,"YosoModel"),MQr.forEach(t),aho=r(rCe," (YOSO model)"),rCe.forEach(t),M.forEach(t),nho=i(Dt),S_=n(Dt,"P",{});var tCe=s(S_);sho=r(tCe,"The model is set in evaluation mode by default using "),gte=n(tCe,"CODE",{});var EQr=s(gte);lho=r(EQr,"model.eval()"),EQr.forEach(t),iho=r(tCe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hte=n(tCe,"CODE",{});var CQr=s(hte);dho=r(CQr,"model.train()"),CQr.forEach(t),tCe.forEach(t),cho=i(Dt),pte=n(Dt,"P",{});var wQr=s(pte);fho=r(wQr,"Examples:"),wQr.forEach(t),mho=i(Dt),m(n5.$$.fragment,Dt),Dt.forEach(t),Qs.forEach(t),hRe=i(c),Zi=n(c,"H2",{class:!0});var EPe=s(Zi);R_=n(EPe,"A",{id:!0,class:!0,href:!0});var AQr=s(R_);_te=n(AQr,"SPAN",{});var yQr=s(_te);m(s5.$$.fragment,yQr),yQr.forEach(t),AQr.forEach(t),gho=i(EPe),ute=n(EPe,"SPAN",{});var LQr=s(ute);hho=r(LQr,"AutoModelForPreTraining"),LQr.forEach(t),EPe.forEach(t),pRe=i(c),Yo=n(c,"DIV",{class:!0});var Hs=s(Yo);m(l5.$$.fragment,Hs),pho=i(Hs),ed=n(Hs,"P",{});var nU=s(ed);_ho=r(nU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),OP=n(nU,"A",{href:!0});var xQr=s(OP);uho=r(xQr,"from_pretrained()"),xQr.forEach(t),bho=r(nU," class method or the "),VP=n(nU,"A",{href:!0});var kQr=s(VP);Fho=r(kQr,"from_config()"),kQr.forEach(t),vho=r(nU,` class
method.`),nU.forEach(t),Tho=i(Hs),i5=n(Hs,"P",{});var CPe=s(i5);Mho=r(CPe,"This class cannot be instantiated directly using "),bte=n(CPe,"CODE",{});var SQr=s(bte);Eho=r(SQr,"__init__()"),SQr.forEach(t),Cho=r(CPe," (throws an error)."),CPe.forEach(t),who=i(Hs),zr=n(Hs,"DIV",{class:!0});var Us=s(zr);m(d5.$$.fragment,Us),Aho=i(Us),Fte=n(Us,"P",{});var RQr=s(Fte);yho=r(RQr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),RQr.forEach(t),Lho=i(Us),od=n(Us,"P",{});var sU=s(od);xho=r(sU,`Note:
Loading a model from its configuration file does `),vte=n(sU,"STRONG",{});var BQr=s(vte);kho=r(BQr,"not"),BQr.forEach(t),Sho=r(sU,` load the model weights. It only affects the
model\u2019s configuration. Use `),XP=n(sU,"A",{href:!0});var PQr=s(XP);Rho=r(PQr,"from_pretrained()"),PQr.forEach(t),Bho=r(sU," to load the model weights."),sU.forEach(t),Pho=i(Us),Tte=n(Us,"P",{});var $Qr=s(Tte);$ho=r($Qr,"Examples:"),$Qr.forEach(t),Iho=i(Us),m(c5.$$.fragment,Us),Us.forEach(t),qho=i(Hs),Ne=n(Hs,"DIV",{class:!0});var Gt=s(Ne);m(f5.$$.fragment,Gt),Nho=i(Gt),Mte=n(Gt,"P",{});var IQr=s(Mte);jho=r(IQr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),IQr.forEach(t),Dho=i(Gt),za=n(Gt,"P",{});var CE=s(za);Gho=r(CE,"The model class to instantiate is selected based on the "),Ete=n(CE,"CODE",{});var qQr=s(Ete);Oho=r(qQr,"model_type"),qQr.forEach(t),Vho=r(CE,` property of the config object (either
passed as an argument or loaded from `),Cte=n(CE,"CODE",{});var NQr=s(Cte);Xho=r(NQr,"pretrained_model_name_or_path"),NQr.forEach(t),zho=r(CE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wte=n(CE,"CODE",{});var jQr=s(wte);Qho=r(jQr,"pretrained_model_name_or_path"),jQr.forEach(t),Who=r(CE,":"),CE.forEach(t),Hho=i(Gt),S=n(Gt,"UL",{});var B=s(S);B_=n(B,"LI",{});var aCe=s(B_);Ate=n(aCe,"STRONG",{});var DQr=s(Ate);Uho=r(DQr,"albert"),DQr.forEach(t),Jho=r(aCe," \u2014 "),zP=n(aCe,"A",{href:!0});var GQr=s(zP);Yho=r(GQr,"AlbertForPreTraining"),GQr.forEach(t),Kho=r(aCe," (ALBERT model)"),aCe.forEach(t),Zho=i(B),P_=n(B,"LI",{});var nCe=s(P_);yte=n(nCe,"STRONG",{});var OQr=s(yte);epo=r(OQr,"bart"),OQr.forEach(t),opo=r(nCe," \u2014 "),QP=n(nCe,"A",{href:!0});var VQr=s(QP);rpo=r(VQr,"BartForConditionalGeneration"),VQr.forEach(t),tpo=r(nCe," (BART model)"),nCe.forEach(t),apo=i(B),$_=n(B,"LI",{});var sCe=s($_);Lte=n(sCe,"STRONG",{});var XQr=s(Lte);npo=r(XQr,"bert"),XQr.forEach(t),spo=r(sCe," \u2014 "),WP=n(sCe,"A",{href:!0});var zQr=s(WP);lpo=r(zQr,"BertForPreTraining"),zQr.forEach(t),ipo=r(sCe," (BERT model)"),sCe.forEach(t),dpo=i(B),I_=n(B,"LI",{});var lCe=s(I_);xte=n(lCe,"STRONG",{});var QQr=s(xte);cpo=r(QQr,"big_bird"),QQr.forEach(t),fpo=r(lCe," \u2014 "),HP=n(lCe,"A",{href:!0});var WQr=s(HP);mpo=r(WQr,"BigBirdForPreTraining"),WQr.forEach(t),gpo=r(lCe," (BigBird model)"),lCe.forEach(t),hpo=i(B),q_=n(B,"LI",{});var iCe=s(q_);kte=n(iCe,"STRONG",{});var HQr=s(kte);ppo=r(HQr,"camembert"),HQr.forEach(t),_po=r(iCe," \u2014 "),UP=n(iCe,"A",{href:!0});var UQr=s(UP);upo=r(UQr,"CamembertForMaskedLM"),UQr.forEach(t),bpo=r(iCe," (CamemBERT model)"),iCe.forEach(t),Fpo=i(B),N_=n(B,"LI",{});var dCe=s(N_);Ste=n(dCe,"STRONG",{});var JQr=s(Ste);vpo=r(JQr,"ctrl"),JQr.forEach(t),Tpo=r(dCe," \u2014 "),JP=n(dCe,"A",{href:!0});var YQr=s(JP);Mpo=r(YQr,"CTRLLMHeadModel"),YQr.forEach(t),Epo=r(dCe," (CTRL model)"),dCe.forEach(t),Cpo=i(B),j_=n(B,"LI",{});var cCe=s(j_);Rte=n(cCe,"STRONG",{});var KQr=s(Rte);wpo=r(KQr,"data2vec-text"),KQr.forEach(t),Apo=r(cCe," \u2014 "),YP=n(cCe,"A",{href:!0});var ZQr=s(YP);ypo=r(ZQr,"Data2VecTextForMaskedLM"),ZQr.forEach(t),Lpo=r(cCe," (Data2VecText model)"),cCe.forEach(t),xpo=i(B),D_=n(B,"LI",{});var fCe=s(D_);Bte=n(fCe,"STRONG",{});var eWr=s(Bte);kpo=r(eWr,"deberta"),eWr.forEach(t),Spo=r(fCe," \u2014 "),KP=n(fCe,"A",{href:!0});var oWr=s(KP);Rpo=r(oWr,"DebertaForMaskedLM"),oWr.forEach(t),Bpo=r(fCe," (DeBERTa model)"),fCe.forEach(t),Ppo=i(B),G_=n(B,"LI",{});var mCe=s(G_);Pte=n(mCe,"STRONG",{});var rWr=s(Pte);$po=r(rWr,"deberta-v2"),rWr.forEach(t),Ipo=r(mCe," \u2014 "),ZP=n(mCe,"A",{href:!0});var tWr=s(ZP);qpo=r(tWr,"DebertaV2ForMaskedLM"),tWr.forEach(t),Npo=r(mCe," (DeBERTa-v2 model)"),mCe.forEach(t),jpo=i(B),O_=n(B,"LI",{});var gCe=s(O_);$te=n(gCe,"STRONG",{});var aWr=s($te);Dpo=r(aWr,"distilbert"),aWr.forEach(t),Gpo=r(gCe," \u2014 "),e$=n(gCe,"A",{href:!0});var nWr=s(e$);Opo=r(nWr,"DistilBertForMaskedLM"),nWr.forEach(t),Vpo=r(gCe," (DistilBERT model)"),gCe.forEach(t),Xpo=i(B),V_=n(B,"LI",{});var hCe=s(V_);Ite=n(hCe,"STRONG",{});var sWr=s(Ite);zpo=r(sWr,"electra"),sWr.forEach(t),Qpo=r(hCe," \u2014 "),o$=n(hCe,"A",{href:!0});var lWr=s(o$);Wpo=r(lWr,"ElectraForPreTraining"),lWr.forEach(t),Hpo=r(hCe," (ELECTRA model)"),hCe.forEach(t),Upo=i(B),X_=n(B,"LI",{});var pCe=s(X_);qte=n(pCe,"STRONG",{});var iWr=s(qte);Jpo=r(iWr,"flaubert"),iWr.forEach(t),Ypo=r(pCe," \u2014 "),r$=n(pCe,"A",{href:!0});var dWr=s(r$);Kpo=r(dWr,"FlaubertWithLMHeadModel"),dWr.forEach(t),Zpo=r(pCe," (FlauBERT model)"),pCe.forEach(t),e_o=i(B),z_=n(B,"LI",{});var _Ce=s(z_);Nte=n(_Ce,"STRONG",{});var cWr=s(Nte);o_o=r(cWr,"fnet"),cWr.forEach(t),r_o=r(_Ce," \u2014 "),t$=n(_Ce,"A",{href:!0});var fWr=s(t$);t_o=r(fWr,"FNetForPreTraining"),fWr.forEach(t),a_o=r(_Ce," (FNet model)"),_Ce.forEach(t),n_o=i(B),Q_=n(B,"LI",{});var uCe=s(Q_);jte=n(uCe,"STRONG",{});var mWr=s(jte);s_o=r(mWr,"fsmt"),mWr.forEach(t),l_o=r(uCe," \u2014 "),a$=n(uCe,"A",{href:!0});var gWr=s(a$);i_o=r(gWr,"FSMTForConditionalGeneration"),gWr.forEach(t),d_o=r(uCe," (FairSeq Machine-Translation model)"),uCe.forEach(t),c_o=i(B),W_=n(B,"LI",{});var bCe=s(W_);Dte=n(bCe,"STRONG",{});var hWr=s(Dte);f_o=r(hWr,"funnel"),hWr.forEach(t),m_o=r(bCe," \u2014 "),n$=n(bCe,"A",{href:!0});var pWr=s(n$);g_o=r(pWr,"FunnelForPreTraining"),pWr.forEach(t),h_o=r(bCe," (Funnel Transformer model)"),bCe.forEach(t),p_o=i(B),H_=n(B,"LI",{});var FCe=s(H_);Gte=n(FCe,"STRONG",{});var _Wr=s(Gte);__o=r(_Wr,"gpt2"),_Wr.forEach(t),u_o=r(FCe," \u2014 "),s$=n(FCe,"A",{href:!0});var uWr=s(s$);b_o=r(uWr,"GPT2LMHeadModel"),uWr.forEach(t),F_o=r(FCe," (OpenAI GPT-2 model)"),FCe.forEach(t),v_o=i(B),U_=n(B,"LI",{});var vCe=s(U_);Ote=n(vCe,"STRONG",{});var bWr=s(Ote);T_o=r(bWr,"ibert"),bWr.forEach(t),M_o=r(vCe," \u2014 "),l$=n(vCe,"A",{href:!0});var FWr=s(l$);E_o=r(FWr,"IBertForMaskedLM"),FWr.forEach(t),C_o=r(vCe," (I-BERT model)"),vCe.forEach(t),w_o=i(B),J_=n(B,"LI",{});var TCe=s(J_);Vte=n(TCe,"STRONG",{});var vWr=s(Vte);A_o=r(vWr,"layoutlm"),vWr.forEach(t),y_o=r(TCe," \u2014 "),i$=n(TCe,"A",{href:!0});var TWr=s(i$);L_o=r(TWr,"LayoutLMForMaskedLM"),TWr.forEach(t),x_o=r(TCe," (LayoutLM model)"),TCe.forEach(t),k_o=i(B),Y_=n(B,"LI",{});var MCe=s(Y_);Xte=n(MCe,"STRONG",{});var MWr=s(Xte);S_o=r(MWr,"longformer"),MWr.forEach(t),R_o=r(MCe," \u2014 "),d$=n(MCe,"A",{href:!0});var EWr=s(d$);B_o=r(EWr,"LongformerForMaskedLM"),EWr.forEach(t),P_o=r(MCe," (Longformer model)"),MCe.forEach(t),$_o=i(B),K_=n(B,"LI",{});var ECe=s(K_);zte=n(ECe,"STRONG",{});var CWr=s(zte);I_o=r(CWr,"lxmert"),CWr.forEach(t),q_o=r(ECe," \u2014 "),c$=n(ECe,"A",{href:!0});var wWr=s(c$);N_o=r(wWr,"LxmertForPreTraining"),wWr.forEach(t),j_o=r(ECe," (LXMERT model)"),ECe.forEach(t),D_o=i(B),Z_=n(B,"LI",{});var CCe=s(Z_);Qte=n(CCe,"STRONG",{});var AWr=s(Qte);G_o=r(AWr,"megatron-bert"),AWr.forEach(t),O_o=r(CCe," \u2014 "),f$=n(CCe,"A",{href:!0});var yWr=s(f$);V_o=r(yWr,"MegatronBertForPreTraining"),yWr.forEach(t),X_o=r(CCe," (MegatronBert model)"),CCe.forEach(t),z_o=i(B),eu=n(B,"LI",{});var wCe=s(eu);Wte=n(wCe,"STRONG",{});var LWr=s(Wte);Q_o=r(LWr,"mobilebert"),LWr.forEach(t),W_o=r(wCe," \u2014 "),m$=n(wCe,"A",{href:!0});var xWr=s(m$);H_o=r(xWr,"MobileBertForPreTraining"),xWr.forEach(t),U_o=r(wCe," (MobileBERT model)"),wCe.forEach(t),J_o=i(B),ou=n(B,"LI",{});var ACe=s(ou);Hte=n(ACe,"STRONG",{});var kWr=s(Hte);Y_o=r(kWr,"mpnet"),kWr.forEach(t),K_o=r(ACe," \u2014 "),g$=n(ACe,"A",{href:!0});var SWr=s(g$);Z_o=r(SWr,"MPNetForMaskedLM"),SWr.forEach(t),euo=r(ACe," (MPNet model)"),ACe.forEach(t),ouo=i(B),ru=n(B,"LI",{});var yCe=s(ru);Ute=n(yCe,"STRONG",{});var RWr=s(Ute);ruo=r(RWr,"openai-gpt"),RWr.forEach(t),tuo=r(yCe," \u2014 "),h$=n(yCe,"A",{href:!0});var BWr=s(h$);auo=r(BWr,"OpenAIGPTLMHeadModel"),BWr.forEach(t),nuo=r(yCe," (OpenAI GPT model)"),yCe.forEach(t),suo=i(B),tu=n(B,"LI",{});var LCe=s(tu);Jte=n(LCe,"STRONG",{});var PWr=s(Jte);luo=r(PWr,"retribert"),PWr.forEach(t),iuo=r(LCe," \u2014 "),p$=n(LCe,"A",{href:!0});var $Wr=s(p$);duo=r($Wr,"RetriBertModel"),$Wr.forEach(t),cuo=r(LCe," (RetriBERT model)"),LCe.forEach(t),fuo=i(B),au=n(B,"LI",{});var xCe=s(au);Yte=n(xCe,"STRONG",{});var IWr=s(Yte);muo=r(IWr,"roberta"),IWr.forEach(t),guo=r(xCe," \u2014 "),_$=n(xCe,"A",{href:!0});var qWr=s(_$);huo=r(qWr,"RobertaForMaskedLM"),qWr.forEach(t),puo=r(xCe," (RoBERTa model)"),xCe.forEach(t),_uo=i(B),nu=n(B,"LI",{});var kCe=s(nu);Kte=n(kCe,"STRONG",{});var NWr=s(Kte);uuo=r(NWr,"squeezebert"),NWr.forEach(t),buo=r(kCe," \u2014 "),u$=n(kCe,"A",{href:!0});var jWr=s(u$);Fuo=r(jWr,"SqueezeBertForMaskedLM"),jWr.forEach(t),vuo=r(kCe," (SqueezeBERT model)"),kCe.forEach(t),Tuo=i(B),su=n(B,"LI",{});var SCe=s(su);Zte=n(SCe,"STRONG",{});var DWr=s(Zte);Muo=r(DWr,"t5"),DWr.forEach(t),Euo=r(SCe," \u2014 "),b$=n(SCe,"A",{href:!0});var GWr=s(b$);Cuo=r(GWr,"T5ForConditionalGeneration"),GWr.forEach(t),wuo=r(SCe," (T5 model)"),SCe.forEach(t),Auo=i(B),lu=n(B,"LI",{});var RCe=s(lu);eae=n(RCe,"STRONG",{});var OWr=s(eae);yuo=r(OWr,"tapas"),OWr.forEach(t),Luo=r(RCe," \u2014 "),F$=n(RCe,"A",{href:!0});var VWr=s(F$);xuo=r(VWr,"TapasForMaskedLM"),VWr.forEach(t),kuo=r(RCe," (TAPAS model)"),RCe.forEach(t),Suo=i(B),iu=n(B,"LI",{});var BCe=s(iu);oae=n(BCe,"STRONG",{});var XWr=s(oae);Ruo=r(XWr,"transfo-xl"),XWr.forEach(t),Buo=r(BCe," \u2014 "),v$=n(BCe,"A",{href:!0});var zWr=s(v$);Puo=r(zWr,"TransfoXLLMHeadModel"),zWr.forEach(t),$uo=r(BCe," (Transformer-XL model)"),BCe.forEach(t),Iuo=i(B),du=n(B,"LI",{});var PCe=s(du);rae=n(PCe,"STRONG",{});var QWr=s(rae);quo=r(QWr,"unispeech"),QWr.forEach(t),Nuo=r(PCe," \u2014 "),T$=n(PCe,"A",{href:!0});var WWr=s(T$);juo=r(WWr,"UniSpeechForPreTraining"),WWr.forEach(t),Duo=r(PCe," (UniSpeech model)"),PCe.forEach(t),Guo=i(B),cu=n(B,"LI",{});var $Ce=s(cu);tae=n($Ce,"STRONG",{});var HWr=s(tae);Ouo=r(HWr,"unispeech-sat"),HWr.forEach(t),Vuo=r($Ce," \u2014 "),M$=n($Ce,"A",{href:!0});var UWr=s(M$);Xuo=r(UWr,"UniSpeechSatForPreTraining"),UWr.forEach(t),zuo=r($Ce," (UniSpeechSat model)"),$Ce.forEach(t),Quo=i(B),fu=n(B,"LI",{});var ICe=s(fu);aae=n(ICe,"STRONG",{});var JWr=s(aae);Wuo=r(JWr,"visual_bert"),JWr.forEach(t),Huo=r(ICe," \u2014 "),E$=n(ICe,"A",{href:!0});var YWr=s(E$);Uuo=r(YWr,"VisualBertForPreTraining"),YWr.forEach(t),Juo=r(ICe," (VisualBert model)"),ICe.forEach(t),Yuo=i(B),mu=n(B,"LI",{});var qCe=s(mu);nae=n(qCe,"STRONG",{});var KWr=s(nae);Kuo=r(KWr,"vit_mae"),KWr.forEach(t),Zuo=r(qCe," \u2014 "),C$=n(qCe,"A",{href:!0});var ZWr=s(C$);e1o=r(ZWr,"ViTMAEForPreTraining"),ZWr.forEach(t),o1o=r(qCe," (ViTMAE model)"),qCe.forEach(t),r1o=i(B),gu=n(B,"LI",{});var NCe=s(gu);sae=n(NCe,"STRONG",{});var eHr=s(sae);t1o=r(eHr,"wav2vec2"),eHr.forEach(t),a1o=r(NCe," \u2014 "),w$=n(NCe,"A",{href:!0});var oHr=s(w$);n1o=r(oHr,"Wav2Vec2ForPreTraining"),oHr.forEach(t),s1o=r(NCe," (Wav2Vec2 model)"),NCe.forEach(t),l1o=i(B),hu=n(B,"LI",{});var jCe=s(hu);lae=n(jCe,"STRONG",{});var rHr=s(lae);i1o=r(rHr,"xlm"),rHr.forEach(t),d1o=r(jCe," \u2014 "),A$=n(jCe,"A",{href:!0});var tHr=s(A$);c1o=r(tHr,"XLMWithLMHeadModel"),tHr.forEach(t),f1o=r(jCe," (XLM model)"),jCe.forEach(t),m1o=i(B),pu=n(B,"LI",{});var DCe=s(pu);iae=n(DCe,"STRONG",{});var aHr=s(iae);g1o=r(aHr,"xlm-roberta"),aHr.forEach(t),h1o=r(DCe," \u2014 "),y$=n(DCe,"A",{href:!0});var nHr=s(y$);p1o=r(nHr,"XLMRobertaForMaskedLM"),nHr.forEach(t),_1o=r(DCe," (XLM-RoBERTa model)"),DCe.forEach(t),u1o=i(B),_u=n(B,"LI",{});var GCe=s(_u);dae=n(GCe,"STRONG",{});var sHr=s(dae);b1o=r(sHr,"xlm-roberta-xl"),sHr.forEach(t),F1o=r(GCe," \u2014 "),L$=n(GCe,"A",{href:!0});var lHr=s(L$);v1o=r(lHr,"XLMRobertaXLForMaskedLM"),lHr.forEach(t),T1o=r(GCe," (XLM-RoBERTa-XL model)"),GCe.forEach(t),M1o=i(B),uu=n(B,"LI",{});var OCe=s(uu);cae=n(OCe,"STRONG",{});var iHr=s(cae);E1o=r(iHr,"xlnet"),iHr.forEach(t),C1o=r(OCe," \u2014 "),x$=n(OCe,"A",{href:!0});var dHr=s(x$);w1o=r(dHr,"XLNetLMHeadModel"),dHr.forEach(t),A1o=r(OCe," (XLNet model)"),OCe.forEach(t),B.forEach(t),y1o=i(Gt),bu=n(Gt,"P",{});var VCe=s(bu);L1o=r(VCe,"The model is set in evaluation mode by default using "),fae=n(VCe,"CODE",{});var cHr=s(fae);x1o=r(cHr,"model.eval()"),cHr.forEach(t),k1o=r(VCe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mae=n(VCe,"CODE",{});var fHr=s(mae);S1o=r(fHr,"model.train()"),fHr.forEach(t),VCe.forEach(t),R1o=i(Gt),gae=n(Gt,"P",{});var mHr=s(gae);B1o=r(mHr,"Examples:"),mHr.forEach(t),P1o=i(Gt),m(m5.$$.fragment,Gt),Gt.forEach(t),Hs.forEach(t),_Re=i(c),rd=n(c,"H2",{class:!0});var wPe=s(rd);Fu=n(wPe,"A",{id:!0,class:!0,href:!0});var gHr=s(Fu);hae=n(gHr,"SPAN",{});var hHr=s(hae);m(g5.$$.fragment,hHr),hHr.forEach(t),gHr.forEach(t),$1o=i(wPe),pae=n(wPe,"SPAN",{});var pHr=s(pae);I1o=r(pHr,"AutoModelForCausalLM"),pHr.forEach(t),wPe.forEach(t),uRe=i(c),Ko=n(c,"DIV",{class:!0});var Js=s(Ko);m(h5.$$.fragment,Js),q1o=i(Js),td=n(Js,"P",{});var lU=s(td);N1o=r(lU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),k$=n(lU,"A",{href:!0});var _Hr=s(k$);j1o=r(_Hr,"from_pretrained()"),_Hr.forEach(t),D1o=r(lU," class method or the "),S$=n(lU,"A",{href:!0});var uHr=s(S$);G1o=r(uHr,"from_config()"),uHr.forEach(t),O1o=r(lU,` class
method.`),lU.forEach(t),V1o=i(Js),p5=n(Js,"P",{});var APe=s(p5);X1o=r(APe,"This class cannot be instantiated directly using "),_ae=n(APe,"CODE",{});var bHr=s(_ae);z1o=r(bHr,"__init__()"),bHr.forEach(t),Q1o=r(APe," (throws an error)."),APe.forEach(t),W1o=i(Js),Qr=n(Js,"DIV",{class:!0});var Ys=s(Qr);m(_5.$$.fragment,Ys),H1o=i(Ys),uae=n(Ys,"P",{});var FHr=s(uae);U1o=r(FHr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),FHr.forEach(t),J1o=i(Ys),ad=n(Ys,"P",{});var iU=s(ad);Y1o=r(iU,`Note:
Loading a model from its configuration file does `),bae=n(iU,"STRONG",{});var vHr=s(bae);K1o=r(vHr,"not"),vHr.forEach(t),Z1o=r(iU,` load the model weights. It only affects the
model\u2019s configuration. Use `),R$=n(iU,"A",{href:!0});var THr=s(R$);e4o=r(THr,"from_pretrained()"),THr.forEach(t),o4o=r(iU," to load the model weights."),iU.forEach(t),r4o=i(Ys),Fae=n(Ys,"P",{});var MHr=s(Fae);t4o=r(MHr,"Examples:"),MHr.forEach(t),a4o=i(Ys),m(u5.$$.fragment,Ys),Ys.forEach(t),n4o=i(Js),je=n(Js,"DIV",{class:!0});var Ot=s(je);m(b5.$$.fragment,Ot),s4o=i(Ot),vae=n(Ot,"P",{});var EHr=s(vae);l4o=r(EHr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),EHr.forEach(t),i4o=i(Ot),Qa=n(Ot,"P",{});var wE=s(Qa);d4o=r(wE,"The model class to instantiate is selected based on the "),Tae=n(wE,"CODE",{});var CHr=s(Tae);c4o=r(CHr,"model_type"),CHr.forEach(t),f4o=r(wE,` property of the config object (either
passed as an argument or loaded from `),Mae=n(wE,"CODE",{});var wHr=s(Mae);m4o=r(wHr,"pretrained_model_name_or_path"),wHr.forEach(t),g4o=r(wE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Eae=n(wE,"CODE",{});var AHr=s(Eae);h4o=r(AHr,"pretrained_model_name_or_path"),AHr.forEach(t),p4o=r(wE,":"),wE.forEach(t),_4o=i(Ot),$=n(Ot,"UL",{});var q=s($);vu=n(q,"LI",{});var XCe=s(vu);Cae=n(XCe,"STRONG",{});var yHr=s(Cae);u4o=r(yHr,"bart"),yHr.forEach(t),b4o=r(XCe," \u2014 "),B$=n(XCe,"A",{href:!0});var LHr=s(B$);F4o=r(LHr,"BartForCausalLM"),LHr.forEach(t),v4o=r(XCe," (BART model)"),XCe.forEach(t),T4o=i(q),Tu=n(q,"LI",{});var zCe=s(Tu);wae=n(zCe,"STRONG",{});var xHr=s(wae);M4o=r(xHr,"bert"),xHr.forEach(t),E4o=r(zCe," \u2014 "),P$=n(zCe,"A",{href:!0});var kHr=s(P$);C4o=r(kHr,"BertLMHeadModel"),kHr.forEach(t),w4o=r(zCe," (BERT model)"),zCe.forEach(t),A4o=i(q),Mu=n(q,"LI",{});var QCe=s(Mu);Aae=n(QCe,"STRONG",{});var SHr=s(Aae);y4o=r(SHr,"bert-generation"),SHr.forEach(t),L4o=r(QCe," \u2014 "),$$=n(QCe,"A",{href:!0});var RHr=s($$);x4o=r(RHr,"BertGenerationDecoder"),RHr.forEach(t),k4o=r(QCe," (Bert Generation model)"),QCe.forEach(t),S4o=i(q),Eu=n(q,"LI",{});var WCe=s(Eu);yae=n(WCe,"STRONG",{});var BHr=s(yae);R4o=r(BHr,"big_bird"),BHr.forEach(t),B4o=r(WCe," \u2014 "),I$=n(WCe,"A",{href:!0});var PHr=s(I$);P4o=r(PHr,"BigBirdForCausalLM"),PHr.forEach(t),$4o=r(WCe," (BigBird model)"),WCe.forEach(t),I4o=i(q),Cu=n(q,"LI",{});var HCe=s(Cu);Lae=n(HCe,"STRONG",{});var $Hr=s(Lae);q4o=r($Hr,"bigbird_pegasus"),$Hr.forEach(t),N4o=r(HCe," \u2014 "),q$=n(HCe,"A",{href:!0});var IHr=s(q$);j4o=r(IHr,"BigBirdPegasusForCausalLM"),IHr.forEach(t),D4o=r(HCe," (BigBirdPegasus model)"),HCe.forEach(t),G4o=i(q),wu=n(q,"LI",{});var UCe=s(wu);xae=n(UCe,"STRONG",{});var qHr=s(xae);O4o=r(qHr,"blenderbot"),qHr.forEach(t),V4o=r(UCe," \u2014 "),N$=n(UCe,"A",{href:!0});var NHr=s(N$);X4o=r(NHr,"BlenderbotForCausalLM"),NHr.forEach(t),z4o=r(UCe," (Blenderbot model)"),UCe.forEach(t),Q4o=i(q),Au=n(q,"LI",{});var JCe=s(Au);kae=n(JCe,"STRONG",{});var jHr=s(kae);W4o=r(jHr,"blenderbot-small"),jHr.forEach(t),H4o=r(JCe," \u2014 "),j$=n(JCe,"A",{href:!0});var DHr=s(j$);U4o=r(DHr,"BlenderbotSmallForCausalLM"),DHr.forEach(t),J4o=r(JCe," (BlenderbotSmall model)"),JCe.forEach(t),Y4o=i(q),yu=n(q,"LI",{});var YCe=s(yu);Sae=n(YCe,"STRONG",{});var GHr=s(Sae);K4o=r(GHr,"camembert"),GHr.forEach(t),Z4o=r(YCe," \u2014 "),D$=n(YCe,"A",{href:!0});var OHr=s(D$);ebo=r(OHr,"CamembertForCausalLM"),OHr.forEach(t),obo=r(YCe," (CamemBERT model)"),YCe.forEach(t),rbo=i(q),Lu=n(q,"LI",{});var KCe=s(Lu);Rae=n(KCe,"STRONG",{});var VHr=s(Rae);tbo=r(VHr,"ctrl"),VHr.forEach(t),abo=r(KCe," \u2014 "),G$=n(KCe,"A",{href:!0});var XHr=s(G$);nbo=r(XHr,"CTRLLMHeadModel"),XHr.forEach(t),sbo=r(KCe," (CTRL model)"),KCe.forEach(t),lbo=i(q),xu=n(q,"LI",{});var ZCe=s(xu);Bae=n(ZCe,"STRONG",{});var zHr=s(Bae);ibo=r(zHr,"data2vec-text"),zHr.forEach(t),dbo=r(ZCe," \u2014 "),O$=n(ZCe,"A",{href:!0});var QHr=s(O$);cbo=r(QHr,"Data2VecTextForCausalLM"),QHr.forEach(t),fbo=r(ZCe," (Data2VecText model)"),ZCe.forEach(t),mbo=i(q),ku=n(q,"LI",{});var e5e=s(ku);Pae=n(e5e,"STRONG",{});var WHr=s(Pae);gbo=r(WHr,"electra"),WHr.forEach(t),hbo=r(e5e," \u2014 "),V$=n(e5e,"A",{href:!0});var HHr=s(V$);pbo=r(HHr,"ElectraForCausalLM"),HHr.forEach(t),_bo=r(e5e," (ELECTRA model)"),e5e.forEach(t),ubo=i(q),Su=n(q,"LI",{});var o5e=s(Su);$ae=n(o5e,"STRONG",{});var UHr=s($ae);bbo=r(UHr,"gpt2"),UHr.forEach(t),Fbo=r(o5e," \u2014 "),X$=n(o5e,"A",{href:!0});var JHr=s(X$);vbo=r(JHr,"GPT2LMHeadModel"),JHr.forEach(t),Tbo=r(o5e," (OpenAI GPT-2 model)"),o5e.forEach(t),Mbo=i(q),Ru=n(q,"LI",{});var r5e=s(Ru);Iae=n(r5e,"STRONG",{});var YHr=s(Iae);Ebo=r(YHr,"gpt_neo"),YHr.forEach(t),Cbo=r(r5e," \u2014 "),z$=n(r5e,"A",{href:!0});var KHr=s(z$);wbo=r(KHr,"GPTNeoForCausalLM"),KHr.forEach(t),Abo=r(r5e," (GPT Neo model)"),r5e.forEach(t),ybo=i(q),Bu=n(q,"LI",{});var t5e=s(Bu);qae=n(t5e,"STRONG",{});var ZHr=s(qae);Lbo=r(ZHr,"gptj"),ZHr.forEach(t),xbo=r(t5e," \u2014 "),Q$=n(t5e,"A",{href:!0});var eUr=s(Q$);kbo=r(eUr,"GPTJForCausalLM"),eUr.forEach(t),Sbo=r(t5e," (GPT-J model)"),t5e.forEach(t),Rbo=i(q),Pu=n(q,"LI",{});var a5e=s(Pu);Nae=n(a5e,"STRONG",{});var oUr=s(Nae);Bbo=r(oUr,"marian"),oUr.forEach(t),Pbo=r(a5e," \u2014 "),W$=n(a5e,"A",{href:!0});var rUr=s(W$);$bo=r(rUr,"MarianForCausalLM"),rUr.forEach(t),Ibo=r(a5e," (Marian model)"),a5e.forEach(t),qbo=i(q),$u=n(q,"LI",{});var n5e=s($u);jae=n(n5e,"STRONG",{});var tUr=s(jae);Nbo=r(tUr,"mbart"),tUr.forEach(t),jbo=r(n5e," \u2014 "),H$=n(n5e,"A",{href:!0});var aUr=s(H$);Dbo=r(aUr,"MBartForCausalLM"),aUr.forEach(t),Gbo=r(n5e," (mBART model)"),n5e.forEach(t),Obo=i(q),Iu=n(q,"LI",{});var s5e=s(Iu);Dae=n(s5e,"STRONG",{});var nUr=s(Dae);Vbo=r(nUr,"megatron-bert"),nUr.forEach(t),Xbo=r(s5e," \u2014 "),U$=n(s5e,"A",{href:!0});var sUr=s(U$);zbo=r(sUr,"MegatronBertForCausalLM"),sUr.forEach(t),Qbo=r(s5e," (MegatronBert model)"),s5e.forEach(t),Wbo=i(q),qu=n(q,"LI",{});var l5e=s(qu);Gae=n(l5e,"STRONG",{});var lUr=s(Gae);Hbo=r(lUr,"openai-gpt"),lUr.forEach(t),Ubo=r(l5e," \u2014 "),J$=n(l5e,"A",{href:!0});var iUr=s(J$);Jbo=r(iUr,"OpenAIGPTLMHeadModel"),iUr.forEach(t),Ybo=r(l5e," (OpenAI GPT model)"),l5e.forEach(t),Kbo=i(q),Nu=n(q,"LI",{});var i5e=s(Nu);Oae=n(i5e,"STRONG",{});var dUr=s(Oae);Zbo=r(dUr,"pegasus"),dUr.forEach(t),e3o=r(i5e," \u2014 "),Y$=n(i5e,"A",{href:!0});var cUr=s(Y$);o3o=r(cUr,"PegasusForCausalLM"),cUr.forEach(t),r3o=r(i5e," (Pegasus model)"),i5e.forEach(t),t3o=i(q),ju=n(q,"LI",{});var d5e=s(ju);Vae=n(d5e,"STRONG",{});var fUr=s(Vae);a3o=r(fUr,"plbart"),fUr.forEach(t),n3o=r(d5e," \u2014 "),K$=n(d5e,"A",{href:!0});var mUr=s(K$);s3o=r(mUr,"PLBartForCausalLM"),mUr.forEach(t),l3o=r(d5e," (PLBart model)"),d5e.forEach(t),i3o=i(q),Du=n(q,"LI",{});var c5e=s(Du);Xae=n(c5e,"STRONG",{});var gUr=s(Xae);d3o=r(gUr,"prophetnet"),gUr.forEach(t),c3o=r(c5e," \u2014 "),Z$=n(c5e,"A",{href:!0});var hUr=s(Z$);f3o=r(hUr,"ProphetNetForCausalLM"),hUr.forEach(t),m3o=r(c5e," (ProphetNet model)"),c5e.forEach(t),g3o=i(q),Gu=n(q,"LI",{});var f5e=s(Gu);zae=n(f5e,"STRONG",{});var pUr=s(zae);h3o=r(pUr,"qdqbert"),pUr.forEach(t),p3o=r(f5e," \u2014 "),eI=n(f5e,"A",{href:!0});var _Ur=s(eI);_3o=r(_Ur,"QDQBertLMHeadModel"),_Ur.forEach(t),u3o=r(f5e," (QDQBert model)"),f5e.forEach(t),b3o=i(q),Ou=n(q,"LI",{});var m5e=s(Ou);Qae=n(m5e,"STRONG",{});var uUr=s(Qae);F3o=r(uUr,"reformer"),uUr.forEach(t),v3o=r(m5e," \u2014 "),oI=n(m5e,"A",{href:!0});var bUr=s(oI);T3o=r(bUr,"ReformerModelWithLMHead"),bUr.forEach(t),M3o=r(m5e," (Reformer model)"),m5e.forEach(t),E3o=i(q),Vu=n(q,"LI",{});var g5e=s(Vu);Wae=n(g5e,"STRONG",{});var FUr=s(Wae);C3o=r(FUr,"rembert"),FUr.forEach(t),w3o=r(g5e," \u2014 "),rI=n(g5e,"A",{href:!0});var vUr=s(rI);A3o=r(vUr,"RemBertForCausalLM"),vUr.forEach(t),y3o=r(g5e," (RemBERT model)"),g5e.forEach(t),L3o=i(q),Xu=n(q,"LI",{});var h5e=s(Xu);Hae=n(h5e,"STRONG",{});var TUr=s(Hae);x3o=r(TUr,"roberta"),TUr.forEach(t),k3o=r(h5e," \u2014 "),tI=n(h5e,"A",{href:!0});var MUr=s(tI);S3o=r(MUr,"RobertaForCausalLM"),MUr.forEach(t),R3o=r(h5e," (RoBERTa model)"),h5e.forEach(t),B3o=i(q),zu=n(q,"LI",{});var p5e=s(zu);Uae=n(p5e,"STRONG",{});var EUr=s(Uae);P3o=r(EUr,"roformer"),EUr.forEach(t),$3o=r(p5e," \u2014 "),aI=n(p5e,"A",{href:!0});var CUr=s(aI);I3o=r(CUr,"RoFormerForCausalLM"),CUr.forEach(t),q3o=r(p5e," (RoFormer model)"),p5e.forEach(t),N3o=i(q),Qu=n(q,"LI",{});var _5e=s(Qu);Jae=n(_5e,"STRONG",{});var wUr=s(Jae);j3o=r(wUr,"speech_to_text_2"),wUr.forEach(t),D3o=r(_5e," \u2014 "),nI=n(_5e,"A",{href:!0});var AUr=s(nI);G3o=r(AUr,"Speech2Text2ForCausalLM"),AUr.forEach(t),O3o=r(_5e," (Speech2Text2 model)"),_5e.forEach(t),V3o=i(q),Wu=n(q,"LI",{});var u5e=s(Wu);Yae=n(u5e,"STRONG",{});var yUr=s(Yae);X3o=r(yUr,"transfo-xl"),yUr.forEach(t),z3o=r(u5e," \u2014 "),sI=n(u5e,"A",{href:!0});var LUr=s(sI);Q3o=r(LUr,"TransfoXLLMHeadModel"),LUr.forEach(t),W3o=r(u5e," (Transformer-XL model)"),u5e.forEach(t),H3o=i(q),Hu=n(q,"LI",{});var b5e=s(Hu);Kae=n(b5e,"STRONG",{});var xUr=s(Kae);U3o=r(xUr,"trocr"),xUr.forEach(t),J3o=r(b5e," \u2014 "),lI=n(b5e,"A",{href:!0});var kUr=s(lI);Y3o=r(kUr,"TrOCRForCausalLM"),kUr.forEach(t),K3o=r(b5e," (TrOCR model)"),b5e.forEach(t),Z3o=i(q),Uu=n(q,"LI",{});var F5e=s(Uu);Zae=n(F5e,"STRONG",{});var SUr=s(Zae);e2o=r(SUr,"xglm"),SUr.forEach(t),o2o=r(F5e," \u2014 "),iI=n(F5e,"A",{href:!0});var RUr=s(iI);r2o=r(RUr,"XGLMForCausalLM"),RUr.forEach(t),t2o=r(F5e," (XGLM model)"),F5e.forEach(t),a2o=i(q),Ju=n(q,"LI",{});var v5e=s(Ju);ene=n(v5e,"STRONG",{});var BUr=s(ene);n2o=r(BUr,"xlm"),BUr.forEach(t),s2o=r(v5e," \u2014 "),dI=n(v5e,"A",{href:!0});var PUr=s(dI);l2o=r(PUr,"XLMWithLMHeadModel"),PUr.forEach(t),i2o=r(v5e," (XLM model)"),v5e.forEach(t),d2o=i(q),Yu=n(q,"LI",{});var T5e=s(Yu);one=n(T5e,"STRONG",{});var $Ur=s(one);c2o=r($Ur,"xlm-prophetnet"),$Ur.forEach(t),f2o=r(T5e," \u2014 "),cI=n(T5e,"A",{href:!0});var IUr=s(cI);m2o=r(IUr,"XLMProphetNetForCausalLM"),IUr.forEach(t),g2o=r(T5e," (XLMProphetNet model)"),T5e.forEach(t),h2o=i(q),Ku=n(q,"LI",{});var M5e=s(Ku);rne=n(M5e,"STRONG",{});var qUr=s(rne);p2o=r(qUr,"xlm-roberta"),qUr.forEach(t),_2o=r(M5e," \u2014 "),fI=n(M5e,"A",{href:!0});var NUr=s(fI);u2o=r(NUr,"XLMRobertaForCausalLM"),NUr.forEach(t),b2o=r(M5e," (XLM-RoBERTa model)"),M5e.forEach(t),F2o=i(q),Zu=n(q,"LI",{});var E5e=s(Zu);tne=n(E5e,"STRONG",{});var jUr=s(tne);v2o=r(jUr,"xlm-roberta-xl"),jUr.forEach(t),T2o=r(E5e," \u2014 "),mI=n(E5e,"A",{href:!0});var DUr=s(mI);M2o=r(DUr,"XLMRobertaXLForCausalLM"),DUr.forEach(t),E2o=r(E5e," (XLM-RoBERTa-XL model)"),E5e.forEach(t),C2o=i(q),e1=n(q,"LI",{});var C5e=s(e1);ane=n(C5e,"STRONG",{});var GUr=s(ane);w2o=r(GUr,"xlnet"),GUr.forEach(t),A2o=r(C5e," \u2014 "),gI=n(C5e,"A",{href:!0});var OUr=s(gI);y2o=r(OUr,"XLNetLMHeadModel"),OUr.forEach(t),L2o=r(C5e," (XLNet model)"),C5e.forEach(t),q.forEach(t),x2o=i(Ot),o1=n(Ot,"P",{});var w5e=s(o1);k2o=r(w5e,"The model is set in evaluation mode by default using "),nne=n(w5e,"CODE",{});var VUr=s(nne);S2o=r(VUr,"model.eval()"),VUr.forEach(t),R2o=r(w5e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sne=n(w5e,"CODE",{});var XUr=s(sne);B2o=r(XUr,"model.train()"),XUr.forEach(t),w5e.forEach(t),P2o=i(Ot),lne=n(Ot,"P",{});var zUr=s(lne);$2o=r(zUr,"Examples:"),zUr.forEach(t),I2o=i(Ot),m(F5.$$.fragment,Ot),Ot.forEach(t),Js.forEach(t),bRe=i(c),nd=n(c,"H2",{class:!0});var yPe=s(nd);r1=n(yPe,"A",{id:!0,class:!0,href:!0});var QUr=s(r1);ine=n(QUr,"SPAN",{});var WUr=s(ine);m(v5.$$.fragment,WUr),WUr.forEach(t),QUr.forEach(t),q2o=i(yPe),dne=n(yPe,"SPAN",{});var HUr=s(dne);N2o=r(HUr,"AutoModelForMaskedLM"),HUr.forEach(t),yPe.forEach(t),FRe=i(c),Zo=n(c,"DIV",{class:!0});var Ks=s(Zo);m(T5.$$.fragment,Ks),j2o=i(Ks),sd=n(Ks,"P",{});var dU=s(sd);D2o=r(dU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),hI=n(dU,"A",{href:!0});var UUr=s(hI);G2o=r(UUr,"from_pretrained()"),UUr.forEach(t),O2o=r(dU," class method or the "),pI=n(dU,"A",{href:!0});var JUr=s(pI);V2o=r(JUr,"from_config()"),JUr.forEach(t),X2o=r(dU,` class
method.`),dU.forEach(t),z2o=i(Ks),M5=n(Ks,"P",{});var LPe=s(M5);Q2o=r(LPe,"This class cannot be instantiated directly using "),cne=n(LPe,"CODE",{});var YUr=s(cne);W2o=r(YUr,"__init__()"),YUr.forEach(t),H2o=r(LPe," (throws an error)."),LPe.forEach(t),U2o=i(Ks),Wr=n(Ks,"DIV",{class:!0});var Zs=s(Wr);m(E5.$$.fragment,Zs),J2o=i(Zs),fne=n(Zs,"P",{});var KUr=s(fne);Y2o=r(KUr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),KUr.forEach(t),K2o=i(Zs),ld=n(Zs,"P",{});var cU=s(ld);Z2o=r(cU,`Note:
Loading a model from its configuration file does `),mne=n(cU,"STRONG",{});var ZUr=s(mne);eFo=r(ZUr,"not"),ZUr.forEach(t),oFo=r(cU,` load the model weights. It only affects the
model\u2019s configuration. Use `),_I=n(cU,"A",{href:!0});var eJr=s(_I);rFo=r(eJr,"from_pretrained()"),eJr.forEach(t),tFo=r(cU," to load the model weights."),cU.forEach(t),aFo=i(Zs),gne=n(Zs,"P",{});var oJr=s(gne);nFo=r(oJr,"Examples:"),oJr.forEach(t),sFo=i(Zs),m(C5.$$.fragment,Zs),Zs.forEach(t),lFo=i(Ks),De=n(Ks,"DIV",{class:!0});var Vt=s(De);m(w5.$$.fragment,Vt),iFo=i(Vt),hne=n(Vt,"P",{});var rJr=s(hne);dFo=r(rJr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),rJr.forEach(t),cFo=i(Vt),Wa=n(Vt,"P",{});var AE=s(Wa);fFo=r(AE,"The model class to instantiate is selected based on the "),pne=n(AE,"CODE",{});var tJr=s(pne);mFo=r(tJr,"model_type"),tJr.forEach(t),gFo=r(AE,` property of the config object (either
passed as an argument or loaded from `),_ne=n(AE,"CODE",{});var aJr=s(_ne);hFo=r(aJr,"pretrained_model_name_or_path"),aJr.forEach(t),pFo=r(AE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),une=n(AE,"CODE",{});var nJr=s(une);_Fo=r(nJr,"pretrained_model_name_or_path"),nJr.forEach(t),uFo=r(AE,":"),AE.forEach(t),bFo=i(Vt),I=n(Vt,"UL",{});var N=s(I);t1=n(N,"LI",{});var A5e=s(t1);bne=n(A5e,"STRONG",{});var sJr=s(bne);FFo=r(sJr,"albert"),sJr.forEach(t),vFo=r(A5e," \u2014 "),uI=n(A5e,"A",{href:!0});var lJr=s(uI);TFo=r(lJr,"AlbertForMaskedLM"),lJr.forEach(t),MFo=r(A5e," (ALBERT model)"),A5e.forEach(t),EFo=i(N),a1=n(N,"LI",{});var y5e=s(a1);Fne=n(y5e,"STRONG",{});var iJr=s(Fne);CFo=r(iJr,"bart"),iJr.forEach(t),wFo=r(y5e," \u2014 "),bI=n(y5e,"A",{href:!0});var dJr=s(bI);AFo=r(dJr,"BartForConditionalGeneration"),dJr.forEach(t),yFo=r(y5e," (BART model)"),y5e.forEach(t),LFo=i(N),n1=n(N,"LI",{});var L5e=s(n1);vne=n(L5e,"STRONG",{});var cJr=s(vne);xFo=r(cJr,"bert"),cJr.forEach(t),kFo=r(L5e," \u2014 "),FI=n(L5e,"A",{href:!0});var fJr=s(FI);SFo=r(fJr,"BertForMaskedLM"),fJr.forEach(t),RFo=r(L5e," (BERT model)"),L5e.forEach(t),BFo=i(N),s1=n(N,"LI",{});var x5e=s(s1);Tne=n(x5e,"STRONG",{});var mJr=s(Tne);PFo=r(mJr,"big_bird"),mJr.forEach(t),$Fo=r(x5e," \u2014 "),vI=n(x5e,"A",{href:!0});var gJr=s(vI);IFo=r(gJr,"BigBirdForMaskedLM"),gJr.forEach(t),qFo=r(x5e," (BigBird model)"),x5e.forEach(t),NFo=i(N),l1=n(N,"LI",{});var k5e=s(l1);Mne=n(k5e,"STRONG",{});var hJr=s(Mne);jFo=r(hJr,"camembert"),hJr.forEach(t),DFo=r(k5e," \u2014 "),TI=n(k5e,"A",{href:!0});var pJr=s(TI);GFo=r(pJr,"CamembertForMaskedLM"),pJr.forEach(t),OFo=r(k5e," (CamemBERT model)"),k5e.forEach(t),VFo=i(N),i1=n(N,"LI",{});var S5e=s(i1);Ene=n(S5e,"STRONG",{});var _Jr=s(Ene);XFo=r(_Jr,"convbert"),_Jr.forEach(t),zFo=r(S5e," \u2014 "),MI=n(S5e,"A",{href:!0});var uJr=s(MI);QFo=r(uJr,"ConvBertForMaskedLM"),uJr.forEach(t),WFo=r(S5e," (ConvBERT model)"),S5e.forEach(t),HFo=i(N),d1=n(N,"LI",{});var R5e=s(d1);Cne=n(R5e,"STRONG",{});var bJr=s(Cne);UFo=r(bJr,"data2vec-text"),bJr.forEach(t),JFo=r(R5e," \u2014 "),EI=n(R5e,"A",{href:!0});var FJr=s(EI);YFo=r(FJr,"Data2VecTextForMaskedLM"),FJr.forEach(t),KFo=r(R5e," (Data2VecText model)"),R5e.forEach(t),ZFo=i(N),c1=n(N,"LI",{});var B5e=s(c1);wne=n(B5e,"STRONG",{});var vJr=s(wne);evo=r(vJr,"deberta"),vJr.forEach(t),ovo=r(B5e," \u2014 "),CI=n(B5e,"A",{href:!0});var TJr=s(CI);rvo=r(TJr,"DebertaForMaskedLM"),TJr.forEach(t),tvo=r(B5e," (DeBERTa model)"),B5e.forEach(t),avo=i(N),f1=n(N,"LI",{});var P5e=s(f1);Ane=n(P5e,"STRONG",{});var MJr=s(Ane);nvo=r(MJr,"deberta-v2"),MJr.forEach(t),svo=r(P5e," \u2014 "),wI=n(P5e,"A",{href:!0});var EJr=s(wI);lvo=r(EJr,"DebertaV2ForMaskedLM"),EJr.forEach(t),ivo=r(P5e," (DeBERTa-v2 model)"),P5e.forEach(t),dvo=i(N),m1=n(N,"LI",{});var $5e=s(m1);yne=n($5e,"STRONG",{});var CJr=s(yne);cvo=r(CJr,"distilbert"),CJr.forEach(t),fvo=r($5e," \u2014 "),AI=n($5e,"A",{href:!0});var wJr=s(AI);mvo=r(wJr,"DistilBertForMaskedLM"),wJr.forEach(t),gvo=r($5e," (DistilBERT model)"),$5e.forEach(t),hvo=i(N),g1=n(N,"LI",{});var I5e=s(g1);Lne=n(I5e,"STRONG",{});var AJr=s(Lne);pvo=r(AJr,"electra"),AJr.forEach(t),_vo=r(I5e," \u2014 "),yI=n(I5e,"A",{href:!0});var yJr=s(yI);uvo=r(yJr,"ElectraForMaskedLM"),yJr.forEach(t),bvo=r(I5e," (ELECTRA model)"),I5e.forEach(t),Fvo=i(N),h1=n(N,"LI",{});var q5e=s(h1);xne=n(q5e,"STRONG",{});var LJr=s(xne);vvo=r(LJr,"flaubert"),LJr.forEach(t),Tvo=r(q5e," \u2014 "),LI=n(q5e,"A",{href:!0});var xJr=s(LI);Mvo=r(xJr,"FlaubertWithLMHeadModel"),xJr.forEach(t),Evo=r(q5e," (FlauBERT model)"),q5e.forEach(t),Cvo=i(N),p1=n(N,"LI",{});var N5e=s(p1);kne=n(N5e,"STRONG",{});var kJr=s(kne);wvo=r(kJr,"fnet"),kJr.forEach(t),Avo=r(N5e," \u2014 "),xI=n(N5e,"A",{href:!0});var SJr=s(xI);yvo=r(SJr,"FNetForMaskedLM"),SJr.forEach(t),Lvo=r(N5e," (FNet model)"),N5e.forEach(t),xvo=i(N),_1=n(N,"LI",{});var j5e=s(_1);Sne=n(j5e,"STRONG",{});var RJr=s(Sne);kvo=r(RJr,"funnel"),RJr.forEach(t),Svo=r(j5e," \u2014 "),kI=n(j5e,"A",{href:!0});var BJr=s(kI);Rvo=r(BJr,"FunnelForMaskedLM"),BJr.forEach(t),Bvo=r(j5e," (Funnel Transformer model)"),j5e.forEach(t),Pvo=i(N),u1=n(N,"LI",{});var D5e=s(u1);Rne=n(D5e,"STRONG",{});var PJr=s(Rne);$vo=r(PJr,"ibert"),PJr.forEach(t),Ivo=r(D5e," \u2014 "),SI=n(D5e,"A",{href:!0});var $Jr=s(SI);qvo=r($Jr,"IBertForMaskedLM"),$Jr.forEach(t),Nvo=r(D5e," (I-BERT model)"),D5e.forEach(t),jvo=i(N),b1=n(N,"LI",{});var G5e=s(b1);Bne=n(G5e,"STRONG",{});var IJr=s(Bne);Dvo=r(IJr,"layoutlm"),IJr.forEach(t),Gvo=r(G5e," \u2014 "),RI=n(G5e,"A",{href:!0});var qJr=s(RI);Ovo=r(qJr,"LayoutLMForMaskedLM"),qJr.forEach(t),Vvo=r(G5e," (LayoutLM model)"),G5e.forEach(t),Xvo=i(N),F1=n(N,"LI",{});var O5e=s(F1);Pne=n(O5e,"STRONG",{});var NJr=s(Pne);zvo=r(NJr,"longformer"),NJr.forEach(t),Qvo=r(O5e," \u2014 "),BI=n(O5e,"A",{href:!0});var jJr=s(BI);Wvo=r(jJr,"LongformerForMaskedLM"),jJr.forEach(t),Hvo=r(O5e," (Longformer model)"),O5e.forEach(t),Uvo=i(N),v1=n(N,"LI",{});var V5e=s(v1);$ne=n(V5e,"STRONG",{});var DJr=s($ne);Jvo=r(DJr,"mbart"),DJr.forEach(t),Yvo=r(V5e," \u2014 "),PI=n(V5e,"A",{href:!0});var GJr=s(PI);Kvo=r(GJr,"MBartForConditionalGeneration"),GJr.forEach(t),Zvo=r(V5e," (mBART model)"),V5e.forEach(t),e6o=i(N),T1=n(N,"LI",{});var X5e=s(T1);Ine=n(X5e,"STRONG",{});var OJr=s(Ine);o6o=r(OJr,"megatron-bert"),OJr.forEach(t),r6o=r(X5e," \u2014 "),$I=n(X5e,"A",{href:!0});var VJr=s($I);t6o=r(VJr,"MegatronBertForMaskedLM"),VJr.forEach(t),a6o=r(X5e," (MegatronBert model)"),X5e.forEach(t),n6o=i(N),M1=n(N,"LI",{});var z5e=s(M1);qne=n(z5e,"STRONG",{});var XJr=s(qne);s6o=r(XJr,"mobilebert"),XJr.forEach(t),l6o=r(z5e," \u2014 "),II=n(z5e,"A",{href:!0});var zJr=s(II);i6o=r(zJr,"MobileBertForMaskedLM"),zJr.forEach(t),d6o=r(z5e," (MobileBERT model)"),z5e.forEach(t),c6o=i(N),E1=n(N,"LI",{});var Q5e=s(E1);Nne=n(Q5e,"STRONG",{});var QJr=s(Nne);f6o=r(QJr,"mpnet"),QJr.forEach(t),m6o=r(Q5e," \u2014 "),qI=n(Q5e,"A",{href:!0});var WJr=s(qI);g6o=r(WJr,"MPNetForMaskedLM"),WJr.forEach(t),h6o=r(Q5e," (MPNet model)"),Q5e.forEach(t),p6o=i(N),C1=n(N,"LI",{});var W5e=s(C1);jne=n(W5e,"STRONG",{});var HJr=s(jne);_6o=r(HJr,"nystromformer"),HJr.forEach(t),u6o=r(W5e," \u2014 "),NI=n(W5e,"A",{href:!0});var UJr=s(NI);b6o=r(UJr,"NystromformerForMaskedLM"),UJr.forEach(t),F6o=r(W5e," (Nystromformer model)"),W5e.forEach(t),v6o=i(N),w1=n(N,"LI",{});var H5e=s(w1);Dne=n(H5e,"STRONG",{});var JJr=s(Dne);T6o=r(JJr,"perceiver"),JJr.forEach(t),M6o=r(H5e," \u2014 "),jI=n(H5e,"A",{href:!0});var YJr=s(jI);E6o=r(YJr,"PerceiverForMaskedLM"),YJr.forEach(t),C6o=r(H5e," (Perceiver model)"),H5e.forEach(t),w6o=i(N),A1=n(N,"LI",{});var U5e=s(A1);Gne=n(U5e,"STRONG",{});var KJr=s(Gne);A6o=r(KJr,"qdqbert"),KJr.forEach(t),y6o=r(U5e," \u2014 "),DI=n(U5e,"A",{href:!0});var ZJr=s(DI);L6o=r(ZJr,"QDQBertForMaskedLM"),ZJr.forEach(t),x6o=r(U5e," (QDQBert model)"),U5e.forEach(t),k6o=i(N),y1=n(N,"LI",{});var J5e=s(y1);One=n(J5e,"STRONG",{});var eYr=s(One);S6o=r(eYr,"reformer"),eYr.forEach(t),R6o=r(J5e," \u2014 "),GI=n(J5e,"A",{href:!0});var oYr=s(GI);B6o=r(oYr,"ReformerForMaskedLM"),oYr.forEach(t),P6o=r(J5e," (Reformer model)"),J5e.forEach(t),$6o=i(N),L1=n(N,"LI",{});var Y5e=s(L1);Vne=n(Y5e,"STRONG",{});var rYr=s(Vne);I6o=r(rYr,"rembert"),rYr.forEach(t),q6o=r(Y5e," \u2014 "),OI=n(Y5e,"A",{href:!0});var tYr=s(OI);N6o=r(tYr,"RemBertForMaskedLM"),tYr.forEach(t),j6o=r(Y5e," (RemBERT model)"),Y5e.forEach(t),D6o=i(N),x1=n(N,"LI",{});var K5e=s(x1);Xne=n(K5e,"STRONG",{});var aYr=s(Xne);G6o=r(aYr,"roberta"),aYr.forEach(t),O6o=r(K5e," \u2014 "),VI=n(K5e,"A",{href:!0});var nYr=s(VI);V6o=r(nYr,"RobertaForMaskedLM"),nYr.forEach(t),X6o=r(K5e," (RoBERTa model)"),K5e.forEach(t),z6o=i(N),k1=n(N,"LI",{});var Z5e=s(k1);zne=n(Z5e,"STRONG",{});var sYr=s(zne);Q6o=r(sYr,"roformer"),sYr.forEach(t),W6o=r(Z5e," \u2014 "),XI=n(Z5e,"A",{href:!0});var lYr=s(XI);H6o=r(lYr,"RoFormerForMaskedLM"),lYr.forEach(t),U6o=r(Z5e," (RoFormer model)"),Z5e.forEach(t),J6o=i(N),S1=n(N,"LI",{});var ewe=s(S1);Qne=n(ewe,"STRONG",{});var iYr=s(Qne);Y6o=r(iYr,"squeezebert"),iYr.forEach(t),K6o=r(ewe," \u2014 "),zI=n(ewe,"A",{href:!0});var dYr=s(zI);Z6o=r(dYr,"SqueezeBertForMaskedLM"),dYr.forEach(t),eTo=r(ewe," (SqueezeBERT model)"),ewe.forEach(t),oTo=i(N),R1=n(N,"LI",{});var owe=s(R1);Wne=n(owe,"STRONG",{});var cYr=s(Wne);rTo=r(cYr,"tapas"),cYr.forEach(t),tTo=r(owe," \u2014 "),QI=n(owe,"A",{href:!0});var fYr=s(QI);aTo=r(fYr,"TapasForMaskedLM"),fYr.forEach(t),nTo=r(owe," (TAPAS model)"),owe.forEach(t),sTo=i(N),B1=n(N,"LI",{});var rwe=s(B1);Hne=n(rwe,"STRONG",{});var mYr=s(Hne);lTo=r(mYr,"wav2vec2"),mYr.forEach(t),iTo=r(rwe," \u2014 "),Une=n(rwe,"CODE",{});var gYr=s(Une);dTo=r(gYr,"Wav2Vec2ForMaskedLM"),gYr.forEach(t),cTo=r(rwe," (Wav2Vec2 model)"),rwe.forEach(t),fTo=i(N),P1=n(N,"LI",{});var twe=s(P1);Jne=n(twe,"STRONG",{});var hYr=s(Jne);mTo=r(hYr,"xlm"),hYr.forEach(t),gTo=r(twe," \u2014 "),WI=n(twe,"A",{href:!0});var pYr=s(WI);hTo=r(pYr,"XLMWithLMHeadModel"),pYr.forEach(t),pTo=r(twe," (XLM model)"),twe.forEach(t),_To=i(N),$1=n(N,"LI",{});var awe=s($1);Yne=n(awe,"STRONG",{});var _Yr=s(Yne);uTo=r(_Yr,"xlm-roberta"),_Yr.forEach(t),bTo=r(awe," \u2014 "),HI=n(awe,"A",{href:!0});var uYr=s(HI);FTo=r(uYr,"XLMRobertaForMaskedLM"),uYr.forEach(t),vTo=r(awe," (XLM-RoBERTa model)"),awe.forEach(t),TTo=i(N),I1=n(N,"LI",{});var nwe=s(I1);Kne=n(nwe,"STRONG",{});var bYr=s(Kne);MTo=r(bYr,"xlm-roberta-xl"),bYr.forEach(t),ETo=r(nwe," \u2014 "),UI=n(nwe,"A",{href:!0});var FYr=s(UI);CTo=r(FYr,"XLMRobertaXLForMaskedLM"),FYr.forEach(t),wTo=r(nwe," (XLM-RoBERTa-XL model)"),nwe.forEach(t),ATo=i(N),q1=n(N,"LI",{});var swe=s(q1);Zne=n(swe,"STRONG",{});var vYr=s(Zne);yTo=r(vYr,"yoso"),vYr.forEach(t),LTo=r(swe," \u2014 "),JI=n(swe,"A",{href:!0});var TYr=s(JI);xTo=r(TYr,"YosoForMaskedLM"),TYr.forEach(t),kTo=r(swe," (YOSO model)"),swe.forEach(t),N.forEach(t),STo=i(Vt),N1=n(Vt,"P",{});var lwe=s(N1);RTo=r(lwe,"The model is set in evaluation mode by default using "),ese=n(lwe,"CODE",{});var MYr=s(ese);BTo=r(MYr,"model.eval()"),MYr.forEach(t),PTo=r(lwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ose=n(lwe,"CODE",{});var EYr=s(ose);$To=r(EYr,"model.train()"),EYr.forEach(t),lwe.forEach(t),ITo=i(Vt),rse=n(Vt,"P",{});var CYr=s(rse);qTo=r(CYr,"Examples:"),CYr.forEach(t),NTo=i(Vt),m(A5.$$.fragment,Vt),Vt.forEach(t),Ks.forEach(t),vRe=i(c),id=n(c,"H2",{class:!0});var xPe=s(id);j1=n(xPe,"A",{id:!0,class:!0,href:!0});var wYr=s(j1);tse=n(wYr,"SPAN",{});var AYr=s(tse);m(y5.$$.fragment,AYr),AYr.forEach(t),wYr.forEach(t),jTo=i(xPe),ase=n(xPe,"SPAN",{});var yYr=s(ase);DTo=r(yYr,"AutoModelForSeq2SeqLM"),yYr.forEach(t),xPe.forEach(t),TRe=i(c),er=n(c,"DIV",{class:!0});var el=s(er);m(L5.$$.fragment,el),GTo=i(el),dd=n(el,"P",{});var fU=s(dd);OTo=r(fU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),YI=n(fU,"A",{href:!0});var LYr=s(YI);VTo=r(LYr,"from_pretrained()"),LYr.forEach(t),XTo=r(fU," class method or the "),KI=n(fU,"A",{href:!0});var xYr=s(KI);zTo=r(xYr,"from_config()"),xYr.forEach(t),QTo=r(fU,` class
method.`),fU.forEach(t),WTo=i(el),x5=n(el,"P",{});var kPe=s(x5);HTo=r(kPe,"This class cannot be instantiated directly using "),nse=n(kPe,"CODE",{});var kYr=s(nse);UTo=r(kYr,"__init__()"),kYr.forEach(t),JTo=r(kPe," (throws an error)."),kPe.forEach(t),YTo=i(el),Hr=n(el,"DIV",{class:!0});var ol=s(Hr);m(k5.$$.fragment,ol),KTo=i(ol),sse=n(ol,"P",{});var SYr=s(sse);ZTo=r(SYr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),SYr.forEach(t),e7o=i(ol),cd=n(ol,"P",{});var mU=s(cd);o7o=r(mU,`Note:
Loading a model from its configuration file does `),lse=n(mU,"STRONG",{});var RYr=s(lse);r7o=r(RYr,"not"),RYr.forEach(t),t7o=r(mU,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZI=n(mU,"A",{href:!0});var BYr=s(ZI);a7o=r(BYr,"from_pretrained()"),BYr.forEach(t),n7o=r(mU," to load the model weights."),mU.forEach(t),s7o=i(ol),ise=n(ol,"P",{});var PYr=s(ise);l7o=r(PYr,"Examples:"),PYr.forEach(t),i7o=i(ol),m(S5.$$.fragment,ol),ol.forEach(t),d7o=i(el),Ge=n(el,"DIV",{class:!0});var Xt=s(Ge);m(R5.$$.fragment,Xt),c7o=i(Xt),dse=n(Xt,"P",{});var $Yr=s(dse);f7o=r($Yr,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),$Yr.forEach(t),m7o=i(Xt),Ha=n(Xt,"P",{});var yE=s(Ha);g7o=r(yE,"The model class to instantiate is selected based on the "),cse=n(yE,"CODE",{});var IYr=s(cse);h7o=r(IYr,"model_type"),IYr.forEach(t),p7o=r(yE,` property of the config object (either
passed as an argument or loaded from `),fse=n(yE,"CODE",{});var qYr=s(fse);_7o=r(qYr,"pretrained_model_name_or_path"),qYr.forEach(t),u7o=r(yE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mse=n(yE,"CODE",{});var NYr=s(mse);b7o=r(NYr,"pretrained_model_name_or_path"),NYr.forEach(t),F7o=r(yE,":"),yE.forEach(t),v7o=i(Xt),ae=n(Xt,"UL",{});var le=s(ae);D1=n(le,"LI",{});var iwe=s(D1);gse=n(iwe,"STRONG",{});var jYr=s(gse);T7o=r(jYr,"bart"),jYr.forEach(t),M7o=r(iwe," \u2014 "),eq=n(iwe,"A",{href:!0});var DYr=s(eq);E7o=r(DYr,"BartForConditionalGeneration"),DYr.forEach(t),C7o=r(iwe," (BART model)"),iwe.forEach(t),w7o=i(le),G1=n(le,"LI",{});var dwe=s(G1);hse=n(dwe,"STRONG",{});var GYr=s(hse);A7o=r(GYr,"bigbird_pegasus"),GYr.forEach(t),y7o=r(dwe," \u2014 "),oq=n(dwe,"A",{href:!0});var OYr=s(oq);L7o=r(OYr,"BigBirdPegasusForConditionalGeneration"),OYr.forEach(t),x7o=r(dwe," (BigBirdPegasus model)"),dwe.forEach(t),k7o=i(le),O1=n(le,"LI",{});var cwe=s(O1);pse=n(cwe,"STRONG",{});var VYr=s(pse);S7o=r(VYr,"blenderbot"),VYr.forEach(t),R7o=r(cwe," \u2014 "),rq=n(cwe,"A",{href:!0});var XYr=s(rq);B7o=r(XYr,"BlenderbotForConditionalGeneration"),XYr.forEach(t),P7o=r(cwe," (Blenderbot model)"),cwe.forEach(t),$7o=i(le),V1=n(le,"LI",{});var fwe=s(V1);_se=n(fwe,"STRONG",{});var zYr=s(_se);I7o=r(zYr,"blenderbot-small"),zYr.forEach(t),q7o=r(fwe," \u2014 "),tq=n(fwe,"A",{href:!0});var QYr=s(tq);N7o=r(QYr,"BlenderbotSmallForConditionalGeneration"),QYr.forEach(t),j7o=r(fwe," (BlenderbotSmall model)"),fwe.forEach(t),D7o=i(le),X1=n(le,"LI",{});var mwe=s(X1);use=n(mwe,"STRONG",{});var WYr=s(use);G7o=r(WYr,"encoder-decoder"),WYr.forEach(t),O7o=r(mwe," \u2014 "),aq=n(mwe,"A",{href:!0});var HYr=s(aq);V7o=r(HYr,"EncoderDecoderModel"),HYr.forEach(t),X7o=r(mwe," (Encoder decoder model)"),mwe.forEach(t),z7o=i(le),z1=n(le,"LI",{});var gwe=s(z1);bse=n(gwe,"STRONG",{});var UYr=s(bse);Q7o=r(UYr,"fsmt"),UYr.forEach(t),W7o=r(gwe," \u2014 "),nq=n(gwe,"A",{href:!0});var JYr=s(nq);H7o=r(JYr,"FSMTForConditionalGeneration"),JYr.forEach(t),U7o=r(gwe," (FairSeq Machine-Translation model)"),gwe.forEach(t),J7o=i(le),Q1=n(le,"LI",{});var hwe=s(Q1);Fse=n(hwe,"STRONG",{});var YYr=s(Fse);Y7o=r(YYr,"led"),YYr.forEach(t),K7o=r(hwe," \u2014 "),sq=n(hwe,"A",{href:!0});var KYr=s(sq);Z7o=r(KYr,"LEDForConditionalGeneration"),KYr.forEach(t),eMo=r(hwe," (LED model)"),hwe.forEach(t),oMo=i(le),W1=n(le,"LI",{});var pwe=s(W1);vse=n(pwe,"STRONG",{});var ZYr=s(vse);rMo=r(ZYr,"m2m_100"),ZYr.forEach(t),tMo=r(pwe," \u2014 "),lq=n(pwe,"A",{href:!0});var eKr=s(lq);aMo=r(eKr,"M2M100ForConditionalGeneration"),eKr.forEach(t),nMo=r(pwe," (M2M100 model)"),pwe.forEach(t),sMo=i(le),H1=n(le,"LI",{});var _we=s(H1);Tse=n(_we,"STRONG",{});var oKr=s(Tse);lMo=r(oKr,"marian"),oKr.forEach(t),iMo=r(_we," \u2014 "),iq=n(_we,"A",{href:!0});var rKr=s(iq);dMo=r(rKr,"MarianMTModel"),rKr.forEach(t),cMo=r(_we," (Marian model)"),_we.forEach(t),fMo=i(le),U1=n(le,"LI",{});var uwe=s(U1);Mse=n(uwe,"STRONG",{});var tKr=s(Mse);mMo=r(tKr,"mbart"),tKr.forEach(t),gMo=r(uwe," \u2014 "),dq=n(uwe,"A",{href:!0});var aKr=s(dq);hMo=r(aKr,"MBartForConditionalGeneration"),aKr.forEach(t),pMo=r(uwe," (mBART model)"),uwe.forEach(t),_Mo=i(le),J1=n(le,"LI",{});var bwe=s(J1);Ese=n(bwe,"STRONG",{});var nKr=s(Ese);uMo=r(nKr,"mt5"),nKr.forEach(t),bMo=r(bwe," \u2014 "),cq=n(bwe,"A",{href:!0});var sKr=s(cq);FMo=r(sKr,"MT5ForConditionalGeneration"),sKr.forEach(t),vMo=r(bwe," (mT5 model)"),bwe.forEach(t),TMo=i(le),Y1=n(le,"LI",{});var Fwe=s(Y1);Cse=n(Fwe,"STRONG",{});var lKr=s(Cse);MMo=r(lKr,"pegasus"),lKr.forEach(t),EMo=r(Fwe," \u2014 "),fq=n(Fwe,"A",{href:!0});var iKr=s(fq);CMo=r(iKr,"PegasusForConditionalGeneration"),iKr.forEach(t),wMo=r(Fwe," (Pegasus model)"),Fwe.forEach(t),AMo=i(le),K1=n(le,"LI",{});var vwe=s(K1);wse=n(vwe,"STRONG",{});var dKr=s(wse);yMo=r(dKr,"plbart"),dKr.forEach(t),LMo=r(vwe," \u2014 "),mq=n(vwe,"A",{href:!0});var cKr=s(mq);xMo=r(cKr,"PLBartForConditionalGeneration"),cKr.forEach(t),kMo=r(vwe," (PLBart model)"),vwe.forEach(t),SMo=i(le),Z1=n(le,"LI",{});var Twe=s(Z1);Ase=n(Twe,"STRONG",{});var fKr=s(Ase);RMo=r(fKr,"prophetnet"),fKr.forEach(t),BMo=r(Twe," \u2014 "),gq=n(Twe,"A",{href:!0});var mKr=s(gq);PMo=r(mKr,"ProphetNetForConditionalGeneration"),mKr.forEach(t),$Mo=r(Twe," (ProphetNet model)"),Twe.forEach(t),IMo=i(le),e4=n(le,"LI",{});var Mwe=s(e4);yse=n(Mwe,"STRONG",{});var gKr=s(yse);qMo=r(gKr,"t5"),gKr.forEach(t),NMo=r(Mwe," \u2014 "),hq=n(Mwe,"A",{href:!0});var hKr=s(hq);jMo=r(hKr,"T5ForConditionalGeneration"),hKr.forEach(t),DMo=r(Mwe," (T5 model)"),Mwe.forEach(t),GMo=i(le),o4=n(le,"LI",{});var Ewe=s(o4);Lse=n(Ewe,"STRONG",{});var pKr=s(Lse);OMo=r(pKr,"tapex"),pKr.forEach(t),VMo=r(Ewe," \u2014 "),pq=n(Ewe,"A",{href:!0});var _Kr=s(pq);XMo=r(_Kr,"BartForConditionalGeneration"),_Kr.forEach(t),zMo=r(Ewe," (TAPEX model)"),Ewe.forEach(t),QMo=i(le),r4=n(le,"LI",{});var Cwe=s(r4);xse=n(Cwe,"STRONG",{});var uKr=s(xse);WMo=r(uKr,"xlm-prophetnet"),uKr.forEach(t),HMo=r(Cwe," \u2014 "),_q=n(Cwe,"A",{href:!0});var bKr=s(_q);UMo=r(bKr,"XLMProphetNetForConditionalGeneration"),bKr.forEach(t),JMo=r(Cwe," (XLMProphetNet model)"),Cwe.forEach(t),le.forEach(t),YMo=i(Xt),t4=n(Xt,"P",{});var wwe=s(t4);KMo=r(wwe,"The model is set in evaluation mode by default using "),kse=n(wwe,"CODE",{});var FKr=s(kse);ZMo=r(FKr,"model.eval()"),FKr.forEach(t),eEo=r(wwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sse=n(wwe,"CODE",{});var vKr=s(Sse);oEo=r(vKr,"model.train()"),vKr.forEach(t),wwe.forEach(t),rEo=i(Xt),Rse=n(Xt,"P",{});var TKr=s(Rse);tEo=r(TKr,"Examples:"),TKr.forEach(t),aEo=i(Xt),m(B5.$$.fragment,Xt),Xt.forEach(t),el.forEach(t),MRe=i(c),fd=n(c,"H2",{class:!0});var SPe=s(fd);a4=n(SPe,"A",{id:!0,class:!0,href:!0});var MKr=s(a4);Bse=n(MKr,"SPAN",{});var EKr=s(Bse);m(P5.$$.fragment,EKr),EKr.forEach(t),MKr.forEach(t),nEo=i(SPe),Pse=n(SPe,"SPAN",{});var CKr=s(Pse);sEo=r(CKr,"AutoModelForSequenceClassification"),CKr.forEach(t),SPe.forEach(t),ERe=i(c),or=n(c,"DIV",{class:!0});var rl=s(or);m($5.$$.fragment,rl),lEo=i(rl),md=n(rl,"P",{});var gU=s(md);iEo=r(gU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),uq=n(gU,"A",{href:!0});var wKr=s(uq);dEo=r(wKr,"from_pretrained()"),wKr.forEach(t),cEo=r(gU," class method or the "),bq=n(gU,"A",{href:!0});var AKr=s(bq);fEo=r(AKr,"from_config()"),AKr.forEach(t),mEo=r(gU,` class
method.`),gU.forEach(t),gEo=i(rl),I5=n(rl,"P",{});var RPe=s(I5);hEo=r(RPe,"This class cannot be instantiated directly using "),$se=n(RPe,"CODE",{});var yKr=s($se);pEo=r(yKr,"__init__()"),yKr.forEach(t),_Eo=r(RPe," (throws an error)."),RPe.forEach(t),uEo=i(rl),Ur=n(rl,"DIV",{class:!0});var tl=s(Ur);m(q5.$$.fragment,tl),bEo=i(tl),Ise=n(tl,"P",{});var LKr=s(Ise);FEo=r(LKr,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),LKr.forEach(t),vEo=i(tl),gd=n(tl,"P",{});var hU=s(gd);TEo=r(hU,`Note:
Loading a model from its configuration file does `),qse=n(hU,"STRONG",{});var xKr=s(qse);MEo=r(xKr,"not"),xKr.forEach(t),EEo=r(hU,` load the model weights. It only affects the
model\u2019s configuration. Use `),Fq=n(hU,"A",{href:!0});var kKr=s(Fq);CEo=r(kKr,"from_pretrained()"),kKr.forEach(t),wEo=r(hU," to load the model weights."),hU.forEach(t),AEo=i(tl),Nse=n(tl,"P",{});var SKr=s(Nse);yEo=r(SKr,"Examples:"),SKr.forEach(t),LEo=i(tl),m(N5.$$.fragment,tl),tl.forEach(t),xEo=i(rl),Oe=n(rl,"DIV",{class:!0});var zt=s(Oe);m(j5.$$.fragment,zt),kEo=i(zt),jse=n(zt,"P",{});var RKr=s(jse);SEo=r(RKr,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),RKr.forEach(t),REo=i(zt),Ua=n(zt,"P",{});var LE=s(Ua);BEo=r(LE,"The model class to instantiate is selected based on the "),Dse=n(LE,"CODE",{});var BKr=s(Dse);PEo=r(BKr,"model_type"),BKr.forEach(t),$Eo=r(LE,` property of the config object (either
passed as an argument or loaded from `),Gse=n(LE,"CODE",{});var PKr=s(Gse);IEo=r(PKr,"pretrained_model_name_or_path"),PKr.forEach(t),qEo=r(LE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ose=n(LE,"CODE",{});var $Kr=s(Ose);NEo=r($Kr,"pretrained_model_name_or_path"),$Kr.forEach(t),jEo=r(LE,":"),LE.forEach(t),DEo=i(zt),y=n(zt,"UL",{});var L=s(y);n4=n(L,"LI",{});var Awe=s(n4);Vse=n(Awe,"STRONG",{});var IKr=s(Vse);GEo=r(IKr,"albert"),IKr.forEach(t),OEo=r(Awe," \u2014 "),vq=n(Awe,"A",{href:!0});var qKr=s(vq);VEo=r(qKr,"AlbertForSequenceClassification"),qKr.forEach(t),XEo=r(Awe," (ALBERT model)"),Awe.forEach(t),zEo=i(L),s4=n(L,"LI",{});var ywe=s(s4);Xse=n(ywe,"STRONG",{});var NKr=s(Xse);QEo=r(NKr,"bart"),NKr.forEach(t),WEo=r(ywe," \u2014 "),Tq=n(ywe,"A",{href:!0});var jKr=s(Tq);HEo=r(jKr,"BartForSequenceClassification"),jKr.forEach(t),UEo=r(ywe," (BART model)"),ywe.forEach(t),JEo=i(L),l4=n(L,"LI",{});var Lwe=s(l4);zse=n(Lwe,"STRONG",{});var DKr=s(zse);YEo=r(DKr,"bert"),DKr.forEach(t),KEo=r(Lwe," \u2014 "),Mq=n(Lwe,"A",{href:!0});var GKr=s(Mq);ZEo=r(GKr,"BertForSequenceClassification"),GKr.forEach(t),eCo=r(Lwe," (BERT model)"),Lwe.forEach(t),oCo=i(L),i4=n(L,"LI",{});var xwe=s(i4);Qse=n(xwe,"STRONG",{});var OKr=s(Qse);rCo=r(OKr,"big_bird"),OKr.forEach(t),tCo=r(xwe," \u2014 "),Eq=n(xwe,"A",{href:!0});var VKr=s(Eq);aCo=r(VKr,"BigBirdForSequenceClassification"),VKr.forEach(t),nCo=r(xwe," (BigBird model)"),xwe.forEach(t),sCo=i(L),d4=n(L,"LI",{});var kwe=s(d4);Wse=n(kwe,"STRONG",{});var XKr=s(Wse);lCo=r(XKr,"bigbird_pegasus"),XKr.forEach(t),iCo=r(kwe," \u2014 "),Cq=n(kwe,"A",{href:!0});var zKr=s(Cq);dCo=r(zKr,"BigBirdPegasusForSequenceClassification"),zKr.forEach(t),cCo=r(kwe," (BigBirdPegasus model)"),kwe.forEach(t),fCo=i(L),c4=n(L,"LI",{});var Swe=s(c4);Hse=n(Swe,"STRONG",{});var QKr=s(Hse);mCo=r(QKr,"camembert"),QKr.forEach(t),gCo=r(Swe," \u2014 "),wq=n(Swe,"A",{href:!0});var WKr=s(wq);hCo=r(WKr,"CamembertForSequenceClassification"),WKr.forEach(t),pCo=r(Swe," (CamemBERT model)"),Swe.forEach(t),_Co=i(L),f4=n(L,"LI",{});var Rwe=s(f4);Use=n(Rwe,"STRONG",{});var HKr=s(Use);uCo=r(HKr,"canine"),HKr.forEach(t),bCo=r(Rwe," \u2014 "),Aq=n(Rwe,"A",{href:!0});var UKr=s(Aq);FCo=r(UKr,"CanineForSequenceClassification"),UKr.forEach(t),vCo=r(Rwe," (Canine model)"),Rwe.forEach(t),TCo=i(L),m4=n(L,"LI",{});var Bwe=s(m4);Jse=n(Bwe,"STRONG",{});var JKr=s(Jse);MCo=r(JKr,"convbert"),JKr.forEach(t),ECo=r(Bwe," \u2014 "),yq=n(Bwe,"A",{href:!0});var YKr=s(yq);CCo=r(YKr,"ConvBertForSequenceClassification"),YKr.forEach(t),wCo=r(Bwe," (ConvBERT model)"),Bwe.forEach(t),ACo=i(L),g4=n(L,"LI",{});var Pwe=s(g4);Yse=n(Pwe,"STRONG",{});var KKr=s(Yse);yCo=r(KKr,"ctrl"),KKr.forEach(t),LCo=r(Pwe," \u2014 "),Lq=n(Pwe,"A",{href:!0});var ZKr=s(Lq);xCo=r(ZKr,"CTRLForSequenceClassification"),ZKr.forEach(t),kCo=r(Pwe," (CTRL model)"),Pwe.forEach(t),SCo=i(L),h4=n(L,"LI",{});var $we=s(h4);Kse=n($we,"STRONG",{});var eZr=s(Kse);RCo=r(eZr,"data2vec-text"),eZr.forEach(t),BCo=r($we," \u2014 "),xq=n($we,"A",{href:!0});var oZr=s(xq);PCo=r(oZr,"Data2VecTextForSequenceClassification"),oZr.forEach(t),$Co=r($we," (Data2VecText model)"),$we.forEach(t),ICo=i(L),p4=n(L,"LI",{});var Iwe=s(p4);Zse=n(Iwe,"STRONG",{});var rZr=s(Zse);qCo=r(rZr,"deberta"),rZr.forEach(t),NCo=r(Iwe," \u2014 "),kq=n(Iwe,"A",{href:!0});var tZr=s(kq);jCo=r(tZr,"DebertaForSequenceClassification"),tZr.forEach(t),DCo=r(Iwe," (DeBERTa model)"),Iwe.forEach(t),GCo=i(L),_4=n(L,"LI",{});var qwe=s(_4);ele=n(qwe,"STRONG",{});var aZr=s(ele);OCo=r(aZr,"deberta-v2"),aZr.forEach(t),VCo=r(qwe," \u2014 "),Sq=n(qwe,"A",{href:!0});var nZr=s(Sq);XCo=r(nZr,"DebertaV2ForSequenceClassification"),nZr.forEach(t),zCo=r(qwe," (DeBERTa-v2 model)"),qwe.forEach(t),QCo=i(L),u4=n(L,"LI",{});var Nwe=s(u4);ole=n(Nwe,"STRONG",{});var sZr=s(ole);WCo=r(sZr,"distilbert"),sZr.forEach(t),HCo=r(Nwe," \u2014 "),Rq=n(Nwe,"A",{href:!0});var lZr=s(Rq);UCo=r(lZr,"DistilBertForSequenceClassification"),lZr.forEach(t),JCo=r(Nwe," (DistilBERT model)"),Nwe.forEach(t),YCo=i(L),b4=n(L,"LI",{});var jwe=s(b4);rle=n(jwe,"STRONG",{});var iZr=s(rle);KCo=r(iZr,"electra"),iZr.forEach(t),ZCo=r(jwe," \u2014 "),Bq=n(jwe,"A",{href:!0});var dZr=s(Bq);e5o=r(dZr,"ElectraForSequenceClassification"),dZr.forEach(t),o5o=r(jwe," (ELECTRA model)"),jwe.forEach(t),r5o=i(L),F4=n(L,"LI",{});var Dwe=s(F4);tle=n(Dwe,"STRONG",{});var cZr=s(tle);t5o=r(cZr,"flaubert"),cZr.forEach(t),a5o=r(Dwe," \u2014 "),Pq=n(Dwe,"A",{href:!0});var fZr=s(Pq);n5o=r(fZr,"FlaubertForSequenceClassification"),fZr.forEach(t),s5o=r(Dwe," (FlauBERT model)"),Dwe.forEach(t),l5o=i(L),v4=n(L,"LI",{});var Gwe=s(v4);ale=n(Gwe,"STRONG",{});var mZr=s(ale);i5o=r(mZr,"fnet"),mZr.forEach(t),d5o=r(Gwe," \u2014 "),$q=n(Gwe,"A",{href:!0});var gZr=s($q);c5o=r(gZr,"FNetForSequenceClassification"),gZr.forEach(t),f5o=r(Gwe," (FNet model)"),Gwe.forEach(t),m5o=i(L),T4=n(L,"LI",{});var Owe=s(T4);nle=n(Owe,"STRONG",{});var hZr=s(nle);g5o=r(hZr,"funnel"),hZr.forEach(t),h5o=r(Owe," \u2014 "),Iq=n(Owe,"A",{href:!0});var pZr=s(Iq);p5o=r(pZr,"FunnelForSequenceClassification"),pZr.forEach(t),_5o=r(Owe," (Funnel Transformer model)"),Owe.forEach(t),u5o=i(L),M4=n(L,"LI",{});var Vwe=s(M4);sle=n(Vwe,"STRONG",{});var _Zr=s(sle);b5o=r(_Zr,"gpt2"),_Zr.forEach(t),F5o=r(Vwe," \u2014 "),qq=n(Vwe,"A",{href:!0});var uZr=s(qq);v5o=r(uZr,"GPT2ForSequenceClassification"),uZr.forEach(t),T5o=r(Vwe," (OpenAI GPT-2 model)"),Vwe.forEach(t),M5o=i(L),E4=n(L,"LI",{});var Xwe=s(E4);lle=n(Xwe,"STRONG",{});var bZr=s(lle);E5o=r(bZr,"gpt_neo"),bZr.forEach(t),C5o=r(Xwe," \u2014 "),Nq=n(Xwe,"A",{href:!0});var FZr=s(Nq);w5o=r(FZr,"GPTNeoForSequenceClassification"),FZr.forEach(t),A5o=r(Xwe," (GPT Neo model)"),Xwe.forEach(t),y5o=i(L),C4=n(L,"LI",{});var zwe=s(C4);ile=n(zwe,"STRONG",{});var vZr=s(ile);L5o=r(vZr,"gptj"),vZr.forEach(t),x5o=r(zwe," \u2014 "),jq=n(zwe,"A",{href:!0});var TZr=s(jq);k5o=r(TZr,"GPTJForSequenceClassification"),TZr.forEach(t),S5o=r(zwe," (GPT-J model)"),zwe.forEach(t),R5o=i(L),w4=n(L,"LI",{});var Qwe=s(w4);dle=n(Qwe,"STRONG",{});var MZr=s(dle);B5o=r(MZr,"ibert"),MZr.forEach(t),P5o=r(Qwe," \u2014 "),Dq=n(Qwe,"A",{href:!0});var EZr=s(Dq);$5o=r(EZr,"IBertForSequenceClassification"),EZr.forEach(t),I5o=r(Qwe," (I-BERT model)"),Qwe.forEach(t),q5o=i(L),A4=n(L,"LI",{});var Wwe=s(A4);cle=n(Wwe,"STRONG",{});var CZr=s(cle);N5o=r(CZr,"layoutlm"),CZr.forEach(t),j5o=r(Wwe," \u2014 "),Gq=n(Wwe,"A",{href:!0});var wZr=s(Gq);D5o=r(wZr,"LayoutLMForSequenceClassification"),wZr.forEach(t),G5o=r(Wwe," (LayoutLM model)"),Wwe.forEach(t),O5o=i(L),y4=n(L,"LI",{});var Hwe=s(y4);fle=n(Hwe,"STRONG",{});var AZr=s(fle);V5o=r(AZr,"layoutlmv2"),AZr.forEach(t),X5o=r(Hwe," \u2014 "),Oq=n(Hwe,"A",{href:!0});var yZr=s(Oq);z5o=r(yZr,"LayoutLMv2ForSequenceClassification"),yZr.forEach(t),Q5o=r(Hwe," (LayoutLMv2 model)"),Hwe.forEach(t),W5o=i(L),L4=n(L,"LI",{});var Uwe=s(L4);mle=n(Uwe,"STRONG",{});var LZr=s(mle);H5o=r(LZr,"led"),LZr.forEach(t),U5o=r(Uwe," \u2014 "),Vq=n(Uwe,"A",{href:!0});var xZr=s(Vq);J5o=r(xZr,"LEDForSequenceClassification"),xZr.forEach(t),Y5o=r(Uwe," (LED model)"),Uwe.forEach(t),K5o=i(L),x4=n(L,"LI",{});var Jwe=s(x4);gle=n(Jwe,"STRONG",{});var kZr=s(gle);Z5o=r(kZr,"longformer"),kZr.forEach(t),ewo=r(Jwe," \u2014 "),Xq=n(Jwe,"A",{href:!0});var SZr=s(Xq);owo=r(SZr,"LongformerForSequenceClassification"),SZr.forEach(t),rwo=r(Jwe," (Longformer model)"),Jwe.forEach(t),two=i(L),k4=n(L,"LI",{});var Ywe=s(k4);hle=n(Ywe,"STRONG",{});var RZr=s(hle);awo=r(RZr,"mbart"),RZr.forEach(t),nwo=r(Ywe," \u2014 "),zq=n(Ywe,"A",{href:!0});var BZr=s(zq);swo=r(BZr,"MBartForSequenceClassification"),BZr.forEach(t),lwo=r(Ywe," (mBART model)"),Ywe.forEach(t),iwo=i(L),S4=n(L,"LI",{});var Kwe=s(S4);ple=n(Kwe,"STRONG",{});var PZr=s(ple);dwo=r(PZr,"megatron-bert"),PZr.forEach(t),cwo=r(Kwe," \u2014 "),Qq=n(Kwe,"A",{href:!0});var $Zr=s(Qq);fwo=r($Zr,"MegatronBertForSequenceClassification"),$Zr.forEach(t),mwo=r(Kwe," (MegatronBert model)"),Kwe.forEach(t),gwo=i(L),R4=n(L,"LI",{});var Zwe=s(R4);_le=n(Zwe,"STRONG",{});var IZr=s(_le);hwo=r(IZr,"mobilebert"),IZr.forEach(t),pwo=r(Zwe," \u2014 "),Wq=n(Zwe,"A",{href:!0});var qZr=s(Wq);_wo=r(qZr,"MobileBertForSequenceClassification"),qZr.forEach(t),uwo=r(Zwe," (MobileBERT model)"),Zwe.forEach(t),bwo=i(L),B4=n(L,"LI",{});var eAe=s(B4);ule=n(eAe,"STRONG",{});var NZr=s(ule);Fwo=r(NZr,"mpnet"),NZr.forEach(t),vwo=r(eAe," \u2014 "),Hq=n(eAe,"A",{href:!0});var jZr=s(Hq);Two=r(jZr,"MPNetForSequenceClassification"),jZr.forEach(t),Mwo=r(eAe," (MPNet model)"),eAe.forEach(t),Ewo=i(L),P4=n(L,"LI",{});var oAe=s(P4);ble=n(oAe,"STRONG",{});var DZr=s(ble);Cwo=r(DZr,"nystromformer"),DZr.forEach(t),wwo=r(oAe," \u2014 "),Uq=n(oAe,"A",{href:!0});var GZr=s(Uq);Awo=r(GZr,"NystromformerForSequenceClassification"),GZr.forEach(t),ywo=r(oAe," (Nystromformer model)"),oAe.forEach(t),Lwo=i(L),$4=n(L,"LI",{});var rAe=s($4);Fle=n(rAe,"STRONG",{});var OZr=s(Fle);xwo=r(OZr,"openai-gpt"),OZr.forEach(t),kwo=r(rAe," \u2014 "),Jq=n(rAe,"A",{href:!0});var VZr=s(Jq);Swo=r(VZr,"OpenAIGPTForSequenceClassification"),VZr.forEach(t),Rwo=r(rAe," (OpenAI GPT model)"),rAe.forEach(t),Bwo=i(L),I4=n(L,"LI",{});var tAe=s(I4);vle=n(tAe,"STRONG",{});var XZr=s(vle);Pwo=r(XZr,"perceiver"),XZr.forEach(t),$wo=r(tAe," \u2014 "),Yq=n(tAe,"A",{href:!0});var zZr=s(Yq);Iwo=r(zZr,"PerceiverForSequenceClassification"),zZr.forEach(t),qwo=r(tAe," (Perceiver model)"),tAe.forEach(t),Nwo=i(L),q4=n(L,"LI",{});var aAe=s(q4);Tle=n(aAe,"STRONG",{});var QZr=s(Tle);jwo=r(QZr,"plbart"),QZr.forEach(t),Dwo=r(aAe," \u2014 "),Kq=n(aAe,"A",{href:!0});var WZr=s(Kq);Gwo=r(WZr,"PLBartForSequenceClassification"),WZr.forEach(t),Owo=r(aAe," (PLBart model)"),aAe.forEach(t),Vwo=i(L),N4=n(L,"LI",{});var nAe=s(N4);Mle=n(nAe,"STRONG",{});var HZr=s(Mle);Xwo=r(HZr,"qdqbert"),HZr.forEach(t),zwo=r(nAe," \u2014 "),Zq=n(nAe,"A",{href:!0});var UZr=s(Zq);Qwo=r(UZr,"QDQBertForSequenceClassification"),UZr.forEach(t),Wwo=r(nAe," (QDQBert model)"),nAe.forEach(t),Hwo=i(L),j4=n(L,"LI",{});var sAe=s(j4);Ele=n(sAe,"STRONG",{});var JZr=s(Ele);Uwo=r(JZr,"reformer"),JZr.forEach(t),Jwo=r(sAe," \u2014 "),eN=n(sAe,"A",{href:!0});var YZr=s(eN);Ywo=r(YZr,"ReformerForSequenceClassification"),YZr.forEach(t),Kwo=r(sAe," (Reformer model)"),sAe.forEach(t),Zwo=i(L),D4=n(L,"LI",{});var lAe=s(D4);Cle=n(lAe,"STRONG",{});var KZr=s(Cle);eAo=r(KZr,"rembert"),KZr.forEach(t),oAo=r(lAe," \u2014 "),oN=n(lAe,"A",{href:!0});var ZZr=s(oN);rAo=r(ZZr,"RemBertForSequenceClassification"),ZZr.forEach(t),tAo=r(lAe," (RemBERT model)"),lAe.forEach(t),aAo=i(L),G4=n(L,"LI",{});var iAe=s(G4);wle=n(iAe,"STRONG",{});var eet=s(wle);nAo=r(eet,"roberta"),eet.forEach(t),sAo=r(iAe," \u2014 "),rN=n(iAe,"A",{href:!0});var oet=s(rN);lAo=r(oet,"RobertaForSequenceClassification"),oet.forEach(t),iAo=r(iAe," (RoBERTa model)"),iAe.forEach(t),dAo=i(L),O4=n(L,"LI",{});var dAe=s(O4);Ale=n(dAe,"STRONG",{});var ret=s(Ale);cAo=r(ret,"roformer"),ret.forEach(t),fAo=r(dAe," \u2014 "),tN=n(dAe,"A",{href:!0});var tet=s(tN);mAo=r(tet,"RoFormerForSequenceClassification"),tet.forEach(t),gAo=r(dAe," (RoFormer model)"),dAe.forEach(t),hAo=i(L),V4=n(L,"LI",{});var cAe=s(V4);yle=n(cAe,"STRONG",{});var aet=s(yle);pAo=r(aet,"squeezebert"),aet.forEach(t),_Ao=r(cAe," \u2014 "),aN=n(cAe,"A",{href:!0});var net=s(aN);uAo=r(net,"SqueezeBertForSequenceClassification"),net.forEach(t),bAo=r(cAe," (SqueezeBERT model)"),cAe.forEach(t),FAo=i(L),X4=n(L,"LI",{});var fAe=s(X4);Lle=n(fAe,"STRONG",{});var set=s(Lle);vAo=r(set,"tapas"),set.forEach(t),TAo=r(fAe," \u2014 "),nN=n(fAe,"A",{href:!0});var iet=s(nN);MAo=r(iet,"TapasForSequenceClassification"),iet.forEach(t),EAo=r(fAe," (TAPAS model)"),fAe.forEach(t),CAo=i(L),z4=n(L,"LI",{});var mAe=s(z4);xle=n(mAe,"STRONG",{});var det=s(xle);wAo=r(det,"tapex"),det.forEach(t),AAo=r(mAe," \u2014 "),sN=n(mAe,"A",{href:!0});var cet=s(sN);yAo=r(cet,"BartForSequenceClassification"),cet.forEach(t),LAo=r(mAe," (TAPEX model)"),mAe.forEach(t),xAo=i(L),Q4=n(L,"LI",{});var gAe=s(Q4);kle=n(gAe,"STRONG",{});var fet=s(kle);kAo=r(fet,"transfo-xl"),fet.forEach(t),SAo=r(gAe," \u2014 "),lN=n(gAe,"A",{href:!0});var met=s(lN);RAo=r(met,"TransfoXLForSequenceClassification"),met.forEach(t),BAo=r(gAe," (Transformer-XL model)"),gAe.forEach(t),PAo=i(L),W4=n(L,"LI",{});var hAe=s(W4);Sle=n(hAe,"STRONG",{});var get=s(Sle);$Ao=r(get,"xlm"),get.forEach(t),IAo=r(hAe," \u2014 "),iN=n(hAe,"A",{href:!0});var het=s(iN);qAo=r(het,"XLMForSequenceClassification"),het.forEach(t),NAo=r(hAe," (XLM model)"),hAe.forEach(t),jAo=i(L),H4=n(L,"LI",{});var pAe=s(H4);Rle=n(pAe,"STRONG",{});var pet=s(Rle);DAo=r(pet,"xlm-roberta"),pet.forEach(t),GAo=r(pAe," \u2014 "),dN=n(pAe,"A",{href:!0});var _et=s(dN);OAo=r(_et,"XLMRobertaForSequenceClassification"),_et.forEach(t),VAo=r(pAe," (XLM-RoBERTa model)"),pAe.forEach(t),XAo=i(L),U4=n(L,"LI",{});var _Ae=s(U4);Ble=n(_Ae,"STRONG",{});var uet=s(Ble);zAo=r(uet,"xlm-roberta-xl"),uet.forEach(t),QAo=r(_Ae," \u2014 "),cN=n(_Ae,"A",{href:!0});var bet=s(cN);WAo=r(bet,"XLMRobertaXLForSequenceClassification"),bet.forEach(t),HAo=r(_Ae," (XLM-RoBERTa-XL model)"),_Ae.forEach(t),UAo=i(L),J4=n(L,"LI",{});var uAe=s(J4);Ple=n(uAe,"STRONG",{});var Fet=s(Ple);JAo=r(Fet,"xlnet"),Fet.forEach(t),YAo=r(uAe," \u2014 "),fN=n(uAe,"A",{href:!0});var vet=s(fN);KAo=r(vet,"XLNetForSequenceClassification"),vet.forEach(t),ZAo=r(uAe," (XLNet model)"),uAe.forEach(t),e0o=i(L),Y4=n(L,"LI",{});var bAe=s(Y4);$le=n(bAe,"STRONG",{});var Tet=s($le);o0o=r(Tet,"yoso"),Tet.forEach(t),r0o=r(bAe," \u2014 "),mN=n(bAe,"A",{href:!0});var Met=s(mN);t0o=r(Met,"YosoForSequenceClassification"),Met.forEach(t),a0o=r(bAe," (YOSO model)"),bAe.forEach(t),L.forEach(t),n0o=i(zt),K4=n(zt,"P",{});var FAe=s(K4);s0o=r(FAe,"The model is set in evaluation mode by default using "),Ile=n(FAe,"CODE",{});var Eet=s(Ile);l0o=r(Eet,"model.eval()"),Eet.forEach(t),i0o=r(FAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qle=n(FAe,"CODE",{});var Cet=s(qle);d0o=r(Cet,"model.train()"),Cet.forEach(t),FAe.forEach(t),c0o=i(zt),Nle=n(zt,"P",{});var wet=s(Nle);f0o=r(wet,"Examples:"),wet.forEach(t),m0o=i(zt),m(D5.$$.fragment,zt),zt.forEach(t),rl.forEach(t),CRe=i(c),hd=n(c,"H2",{class:!0});var BPe=s(hd);Z4=n(BPe,"A",{id:!0,class:!0,href:!0});var Aet=s(Z4);jle=n(Aet,"SPAN",{});var yet=s(jle);m(G5.$$.fragment,yet),yet.forEach(t),Aet.forEach(t),g0o=i(BPe),Dle=n(BPe,"SPAN",{});var Let=s(Dle);h0o=r(Let,"AutoModelForMultipleChoice"),Let.forEach(t),BPe.forEach(t),wRe=i(c),rr=n(c,"DIV",{class:!0});var al=s(rr);m(O5.$$.fragment,al),p0o=i(al),pd=n(al,"P",{});var pU=s(pd);_0o=r(pU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),gN=n(pU,"A",{href:!0});var xet=s(gN);u0o=r(xet,"from_pretrained()"),xet.forEach(t),b0o=r(pU," class method or the "),hN=n(pU,"A",{href:!0});var ket=s(hN);F0o=r(ket,"from_config()"),ket.forEach(t),v0o=r(pU,` class
method.`),pU.forEach(t),T0o=i(al),V5=n(al,"P",{});var PPe=s(V5);M0o=r(PPe,"This class cannot be instantiated directly using "),Gle=n(PPe,"CODE",{});var Set=s(Gle);E0o=r(Set,"__init__()"),Set.forEach(t),C0o=r(PPe," (throws an error)."),PPe.forEach(t),w0o=i(al),Jr=n(al,"DIV",{class:!0});var nl=s(Jr);m(X5.$$.fragment,nl),A0o=i(nl),Ole=n(nl,"P",{});var Ret=s(Ole);y0o=r(Ret,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Ret.forEach(t),L0o=i(nl),_d=n(nl,"P",{});var _U=s(_d);x0o=r(_U,`Note:
Loading a model from its configuration file does `),Vle=n(_U,"STRONG",{});var Bet=s(Vle);k0o=r(Bet,"not"),Bet.forEach(t),S0o=r(_U,` load the model weights. It only affects the
model\u2019s configuration. Use `),pN=n(_U,"A",{href:!0});var Pet=s(pN);R0o=r(Pet,"from_pretrained()"),Pet.forEach(t),B0o=r(_U," to load the model weights."),_U.forEach(t),P0o=i(nl),Xle=n(nl,"P",{});var $et=s(Xle);$0o=r($et,"Examples:"),$et.forEach(t),I0o=i(nl),m(z5.$$.fragment,nl),nl.forEach(t),q0o=i(al),Ve=n(al,"DIV",{class:!0});var Qt=s(Ve);m(Q5.$$.fragment,Qt),N0o=i(Qt),zle=n(Qt,"P",{});var Iet=s(zle);j0o=r(Iet,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Iet.forEach(t),D0o=i(Qt),Ja=n(Qt,"P",{});var xE=s(Ja);G0o=r(xE,"The model class to instantiate is selected based on the "),Qle=n(xE,"CODE",{});var qet=s(Qle);O0o=r(qet,"model_type"),qet.forEach(t),V0o=r(xE,` property of the config object (either
passed as an argument or loaded from `),Wle=n(xE,"CODE",{});var Net=s(Wle);X0o=r(Net,"pretrained_model_name_or_path"),Net.forEach(t),z0o=r(xE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hle=n(xE,"CODE",{});var jet=s(Hle);Q0o=r(jet,"pretrained_model_name_or_path"),jet.forEach(t),W0o=r(xE,":"),xE.forEach(t),H0o=i(Qt),G=n(Qt,"UL",{});var O=s(G);eb=n(O,"LI",{});var vAe=s(eb);Ule=n(vAe,"STRONG",{});var Det=s(Ule);U0o=r(Det,"albert"),Det.forEach(t),J0o=r(vAe," \u2014 "),_N=n(vAe,"A",{href:!0});var Get=s(_N);Y0o=r(Get,"AlbertForMultipleChoice"),Get.forEach(t),K0o=r(vAe," (ALBERT model)"),vAe.forEach(t),Z0o=i(O),ob=n(O,"LI",{});var TAe=s(ob);Jle=n(TAe,"STRONG",{});var Oet=s(Jle);eyo=r(Oet,"bert"),Oet.forEach(t),oyo=r(TAe," \u2014 "),uN=n(TAe,"A",{href:!0});var Vet=s(uN);ryo=r(Vet,"BertForMultipleChoice"),Vet.forEach(t),tyo=r(TAe," (BERT model)"),TAe.forEach(t),ayo=i(O),rb=n(O,"LI",{});var MAe=s(rb);Yle=n(MAe,"STRONG",{});var Xet=s(Yle);nyo=r(Xet,"big_bird"),Xet.forEach(t),syo=r(MAe," \u2014 "),bN=n(MAe,"A",{href:!0});var zet=s(bN);lyo=r(zet,"BigBirdForMultipleChoice"),zet.forEach(t),iyo=r(MAe," (BigBird model)"),MAe.forEach(t),dyo=i(O),tb=n(O,"LI",{});var EAe=s(tb);Kle=n(EAe,"STRONG",{});var Qet=s(Kle);cyo=r(Qet,"camembert"),Qet.forEach(t),fyo=r(EAe," \u2014 "),FN=n(EAe,"A",{href:!0});var Wet=s(FN);myo=r(Wet,"CamembertForMultipleChoice"),Wet.forEach(t),gyo=r(EAe," (CamemBERT model)"),EAe.forEach(t),hyo=i(O),ab=n(O,"LI",{});var CAe=s(ab);Zle=n(CAe,"STRONG",{});var Het=s(Zle);pyo=r(Het,"canine"),Het.forEach(t),_yo=r(CAe," \u2014 "),vN=n(CAe,"A",{href:!0});var Uet=s(vN);uyo=r(Uet,"CanineForMultipleChoice"),Uet.forEach(t),byo=r(CAe," (Canine model)"),CAe.forEach(t),Fyo=i(O),nb=n(O,"LI",{});var wAe=s(nb);eie=n(wAe,"STRONG",{});var Jet=s(eie);vyo=r(Jet,"convbert"),Jet.forEach(t),Tyo=r(wAe," \u2014 "),TN=n(wAe,"A",{href:!0});var Yet=s(TN);Myo=r(Yet,"ConvBertForMultipleChoice"),Yet.forEach(t),Eyo=r(wAe," (ConvBERT model)"),wAe.forEach(t),Cyo=i(O),sb=n(O,"LI",{});var AAe=s(sb);oie=n(AAe,"STRONG",{});var Ket=s(oie);wyo=r(Ket,"data2vec-text"),Ket.forEach(t),Ayo=r(AAe," \u2014 "),MN=n(AAe,"A",{href:!0});var Zet=s(MN);yyo=r(Zet,"Data2VecTextForMultipleChoice"),Zet.forEach(t),Lyo=r(AAe," (Data2VecText model)"),AAe.forEach(t),xyo=i(O),lb=n(O,"LI",{});var yAe=s(lb);rie=n(yAe,"STRONG",{});var eot=s(rie);kyo=r(eot,"distilbert"),eot.forEach(t),Syo=r(yAe," \u2014 "),EN=n(yAe,"A",{href:!0});var oot=s(EN);Ryo=r(oot,"DistilBertForMultipleChoice"),oot.forEach(t),Byo=r(yAe," (DistilBERT model)"),yAe.forEach(t),Pyo=i(O),ib=n(O,"LI",{});var LAe=s(ib);tie=n(LAe,"STRONG",{});var rot=s(tie);$yo=r(rot,"electra"),rot.forEach(t),Iyo=r(LAe," \u2014 "),CN=n(LAe,"A",{href:!0});var tot=s(CN);qyo=r(tot,"ElectraForMultipleChoice"),tot.forEach(t),Nyo=r(LAe," (ELECTRA model)"),LAe.forEach(t),jyo=i(O),db=n(O,"LI",{});var xAe=s(db);aie=n(xAe,"STRONG",{});var aot=s(aie);Dyo=r(aot,"flaubert"),aot.forEach(t),Gyo=r(xAe," \u2014 "),wN=n(xAe,"A",{href:!0});var not=s(wN);Oyo=r(not,"FlaubertForMultipleChoice"),not.forEach(t),Vyo=r(xAe," (FlauBERT model)"),xAe.forEach(t),Xyo=i(O),cb=n(O,"LI",{});var kAe=s(cb);nie=n(kAe,"STRONG",{});var sot=s(nie);zyo=r(sot,"fnet"),sot.forEach(t),Qyo=r(kAe," \u2014 "),AN=n(kAe,"A",{href:!0});var lot=s(AN);Wyo=r(lot,"FNetForMultipleChoice"),lot.forEach(t),Hyo=r(kAe," (FNet model)"),kAe.forEach(t),Uyo=i(O),fb=n(O,"LI",{});var SAe=s(fb);sie=n(SAe,"STRONG",{});var iot=s(sie);Jyo=r(iot,"funnel"),iot.forEach(t),Yyo=r(SAe," \u2014 "),yN=n(SAe,"A",{href:!0});var dot=s(yN);Kyo=r(dot,"FunnelForMultipleChoice"),dot.forEach(t),Zyo=r(SAe," (Funnel Transformer model)"),SAe.forEach(t),eLo=i(O),mb=n(O,"LI",{});var RAe=s(mb);lie=n(RAe,"STRONG",{});var cot=s(lie);oLo=r(cot,"ibert"),cot.forEach(t),rLo=r(RAe," \u2014 "),LN=n(RAe,"A",{href:!0});var fot=s(LN);tLo=r(fot,"IBertForMultipleChoice"),fot.forEach(t),aLo=r(RAe," (I-BERT model)"),RAe.forEach(t),nLo=i(O),gb=n(O,"LI",{});var BAe=s(gb);iie=n(BAe,"STRONG",{});var mot=s(iie);sLo=r(mot,"longformer"),mot.forEach(t),lLo=r(BAe," \u2014 "),xN=n(BAe,"A",{href:!0});var got=s(xN);iLo=r(got,"LongformerForMultipleChoice"),got.forEach(t),dLo=r(BAe," (Longformer model)"),BAe.forEach(t),cLo=i(O),hb=n(O,"LI",{});var PAe=s(hb);die=n(PAe,"STRONG",{});var hot=s(die);fLo=r(hot,"megatron-bert"),hot.forEach(t),mLo=r(PAe," \u2014 "),kN=n(PAe,"A",{href:!0});var pot=s(kN);gLo=r(pot,"MegatronBertForMultipleChoice"),pot.forEach(t),hLo=r(PAe," (MegatronBert model)"),PAe.forEach(t),pLo=i(O),pb=n(O,"LI",{});var $Ae=s(pb);cie=n($Ae,"STRONG",{});var _ot=s(cie);_Lo=r(_ot,"mobilebert"),_ot.forEach(t),uLo=r($Ae," \u2014 "),SN=n($Ae,"A",{href:!0});var uot=s(SN);bLo=r(uot,"MobileBertForMultipleChoice"),uot.forEach(t),FLo=r($Ae," (MobileBERT model)"),$Ae.forEach(t),vLo=i(O),_b=n(O,"LI",{});var IAe=s(_b);fie=n(IAe,"STRONG",{});var bot=s(fie);TLo=r(bot,"mpnet"),bot.forEach(t),MLo=r(IAe," \u2014 "),RN=n(IAe,"A",{href:!0});var Fot=s(RN);ELo=r(Fot,"MPNetForMultipleChoice"),Fot.forEach(t),CLo=r(IAe," (MPNet model)"),IAe.forEach(t),wLo=i(O),ub=n(O,"LI",{});var qAe=s(ub);mie=n(qAe,"STRONG",{});var vot=s(mie);ALo=r(vot,"nystromformer"),vot.forEach(t),yLo=r(qAe," \u2014 "),BN=n(qAe,"A",{href:!0});var Tot=s(BN);LLo=r(Tot,"NystromformerForMultipleChoice"),Tot.forEach(t),xLo=r(qAe," (Nystromformer model)"),qAe.forEach(t),kLo=i(O),bb=n(O,"LI",{});var NAe=s(bb);gie=n(NAe,"STRONG",{});var Mot=s(gie);SLo=r(Mot,"qdqbert"),Mot.forEach(t),RLo=r(NAe," \u2014 "),PN=n(NAe,"A",{href:!0});var Eot=s(PN);BLo=r(Eot,"QDQBertForMultipleChoice"),Eot.forEach(t),PLo=r(NAe," (QDQBert model)"),NAe.forEach(t),$Lo=i(O),Fb=n(O,"LI",{});var jAe=s(Fb);hie=n(jAe,"STRONG",{});var Cot=s(hie);ILo=r(Cot,"rembert"),Cot.forEach(t),qLo=r(jAe," \u2014 "),$N=n(jAe,"A",{href:!0});var wot=s($N);NLo=r(wot,"RemBertForMultipleChoice"),wot.forEach(t),jLo=r(jAe," (RemBERT model)"),jAe.forEach(t),DLo=i(O),vb=n(O,"LI",{});var DAe=s(vb);pie=n(DAe,"STRONG",{});var Aot=s(pie);GLo=r(Aot,"roberta"),Aot.forEach(t),OLo=r(DAe," \u2014 "),IN=n(DAe,"A",{href:!0});var yot=s(IN);VLo=r(yot,"RobertaForMultipleChoice"),yot.forEach(t),XLo=r(DAe," (RoBERTa model)"),DAe.forEach(t),zLo=i(O),Tb=n(O,"LI",{});var GAe=s(Tb);_ie=n(GAe,"STRONG",{});var Lot=s(_ie);QLo=r(Lot,"roformer"),Lot.forEach(t),WLo=r(GAe," \u2014 "),qN=n(GAe,"A",{href:!0});var xot=s(qN);HLo=r(xot,"RoFormerForMultipleChoice"),xot.forEach(t),ULo=r(GAe," (RoFormer model)"),GAe.forEach(t),JLo=i(O),Mb=n(O,"LI",{});var OAe=s(Mb);uie=n(OAe,"STRONG",{});var kot=s(uie);YLo=r(kot,"squeezebert"),kot.forEach(t),KLo=r(OAe," \u2014 "),NN=n(OAe,"A",{href:!0});var Sot=s(NN);ZLo=r(Sot,"SqueezeBertForMultipleChoice"),Sot.forEach(t),e8o=r(OAe," (SqueezeBERT model)"),OAe.forEach(t),o8o=i(O),Eb=n(O,"LI",{});var VAe=s(Eb);bie=n(VAe,"STRONG",{});var Rot=s(bie);r8o=r(Rot,"xlm"),Rot.forEach(t),t8o=r(VAe," \u2014 "),jN=n(VAe,"A",{href:!0});var Bot=s(jN);a8o=r(Bot,"XLMForMultipleChoice"),Bot.forEach(t),n8o=r(VAe," (XLM model)"),VAe.forEach(t),s8o=i(O),Cb=n(O,"LI",{});var XAe=s(Cb);Fie=n(XAe,"STRONG",{});var Pot=s(Fie);l8o=r(Pot,"xlm-roberta"),Pot.forEach(t),i8o=r(XAe," \u2014 "),DN=n(XAe,"A",{href:!0});var $ot=s(DN);d8o=r($ot,"XLMRobertaForMultipleChoice"),$ot.forEach(t),c8o=r(XAe," (XLM-RoBERTa model)"),XAe.forEach(t),f8o=i(O),wb=n(O,"LI",{});var zAe=s(wb);vie=n(zAe,"STRONG",{});var Iot=s(vie);m8o=r(Iot,"xlm-roberta-xl"),Iot.forEach(t),g8o=r(zAe," \u2014 "),GN=n(zAe,"A",{href:!0});var qot=s(GN);h8o=r(qot,"XLMRobertaXLForMultipleChoice"),qot.forEach(t),p8o=r(zAe," (XLM-RoBERTa-XL model)"),zAe.forEach(t),_8o=i(O),Ab=n(O,"LI",{});var QAe=s(Ab);Tie=n(QAe,"STRONG",{});var Not=s(Tie);u8o=r(Not,"xlnet"),Not.forEach(t),b8o=r(QAe," \u2014 "),ON=n(QAe,"A",{href:!0});var jot=s(ON);F8o=r(jot,"XLNetForMultipleChoice"),jot.forEach(t),v8o=r(QAe," (XLNet model)"),QAe.forEach(t),T8o=i(O),yb=n(O,"LI",{});var WAe=s(yb);Mie=n(WAe,"STRONG",{});var Dot=s(Mie);M8o=r(Dot,"yoso"),Dot.forEach(t),E8o=r(WAe," \u2014 "),VN=n(WAe,"A",{href:!0});var Got=s(VN);C8o=r(Got,"YosoForMultipleChoice"),Got.forEach(t),w8o=r(WAe," (YOSO model)"),WAe.forEach(t),O.forEach(t),A8o=i(Qt),Lb=n(Qt,"P",{});var HAe=s(Lb);y8o=r(HAe,"The model is set in evaluation mode by default using "),Eie=n(HAe,"CODE",{});var Oot=s(Eie);L8o=r(Oot,"model.eval()"),Oot.forEach(t),x8o=r(HAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cie=n(HAe,"CODE",{});var Vot=s(Cie);k8o=r(Vot,"model.train()"),Vot.forEach(t),HAe.forEach(t),S8o=i(Qt),wie=n(Qt,"P",{});var Xot=s(wie);R8o=r(Xot,"Examples:"),Xot.forEach(t),B8o=i(Qt),m(W5.$$.fragment,Qt),Qt.forEach(t),al.forEach(t),ARe=i(c),ud=n(c,"H2",{class:!0});var $Pe=s(ud);xb=n($Pe,"A",{id:!0,class:!0,href:!0});var zot=s(xb);Aie=n(zot,"SPAN",{});var Qot=s(Aie);m(H5.$$.fragment,Qot),Qot.forEach(t),zot.forEach(t),P8o=i($Pe),yie=n($Pe,"SPAN",{});var Wot=s(yie);$8o=r(Wot,"AutoModelForNextSentencePrediction"),Wot.forEach(t),$Pe.forEach(t),yRe=i(c),tr=n(c,"DIV",{class:!0});var sl=s(tr);m(U5.$$.fragment,sl),I8o=i(sl),bd=n(sl,"P",{});var uU=s(bd);q8o=r(uU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),XN=n(uU,"A",{href:!0});var Hot=s(XN);N8o=r(Hot,"from_pretrained()"),Hot.forEach(t),j8o=r(uU," class method or the "),zN=n(uU,"A",{href:!0});var Uot=s(zN);D8o=r(Uot,"from_config()"),Uot.forEach(t),G8o=r(uU,` class
method.`),uU.forEach(t),O8o=i(sl),J5=n(sl,"P",{});var IPe=s(J5);V8o=r(IPe,"This class cannot be instantiated directly using "),Lie=n(IPe,"CODE",{});var Jot=s(Lie);X8o=r(Jot,"__init__()"),Jot.forEach(t),z8o=r(IPe," (throws an error)."),IPe.forEach(t),Q8o=i(sl),Yr=n(sl,"DIV",{class:!0});var ll=s(Yr);m(Y5.$$.fragment,ll),W8o=i(ll),xie=n(ll,"P",{});var Yot=s(xie);H8o=r(Yot,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Yot.forEach(t),U8o=i(ll),Fd=n(ll,"P",{});var bU=s(Fd);J8o=r(bU,`Note:
Loading a model from its configuration file does `),kie=n(bU,"STRONG",{});var Kot=s(kie);Y8o=r(Kot,"not"),Kot.forEach(t),K8o=r(bU,` load the model weights. It only affects the
model\u2019s configuration. Use `),QN=n(bU,"A",{href:!0});var Zot=s(QN);Z8o=r(Zot,"from_pretrained()"),Zot.forEach(t),e9o=r(bU," to load the model weights."),bU.forEach(t),o9o=i(ll),Sie=n(ll,"P",{});var ert=s(Sie);r9o=r(ert,"Examples:"),ert.forEach(t),t9o=i(ll),m(K5.$$.fragment,ll),ll.forEach(t),a9o=i(sl),Xe=n(sl,"DIV",{class:!0});var Wt=s(Xe);m(Z5.$$.fragment,Wt),n9o=i(Wt),Rie=n(Wt,"P",{});var ort=s(Rie);s9o=r(ort,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),ort.forEach(t),l9o=i(Wt),Ya=n(Wt,"P",{});var kE=s(Ya);i9o=r(kE,"The model class to instantiate is selected based on the "),Bie=n(kE,"CODE",{});var rrt=s(Bie);d9o=r(rrt,"model_type"),rrt.forEach(t),c9o=r(kE,` property of the config object (either
passed as an argument or loaded from `),Pie=n(kE,"CODE",{});var trt=s(Pie);f9o=r(trt,"pretrained_model_name_or_path"),trt.forEach(t),m9o=r(kE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$ie=n(kE,"CODE",{});var art=s($ie);g9o=r(art,"pretrained_model_name_or_path"),art.forEach(t),h9o=r(kE,":"),kE.forEach(t),p9o=i(Wt),da=n(Wt,"UL",{});var il=s(da);kb=n(il,"LI",{});var UAe=s(kb);Iie=n(UAe,"STRONG",{});var nrt=s(Iie);_9o=r(nrt,"bert"),nrt.forEach(t),u9o=r(UAe," \u2014 "),WN=n(UAe,"A",{href:!0});var srt=s(WN);b9o=r(srt,"BertForNextSentencePrediction"),srt.forEach(t),F9o=r(UAe," (BERT model)"),UAe.forEach(t),v9o=i(il),Sb=n(il,"LI",{});var JAe=s(Sb);qie=n(JAe,"STRONG",{});var lrt=s(qie);T9o=r(lrt,"fnet"),lrt.forEach(t),M9o=r(JAe," \u2014 "),HN=n(JAe,"A",{href:!0});var irt=s(HN);E9o=r(irt,"FNetForNextSentencePrediction"),irt.forEach(t),C9o=r(JAe," (FNet model)"),JAe.forEach(t),w9o=i(il),Rb=n(il,"LI",{});var YAe=s(Rb);Nie=n(YAe,"STRONG",{});var drt=s(Nie);A9o=r(drt,"megatron-bert"),drt.forEach(t),y9o=r(YAe," \u2014 "),UN=n(YAe,"A",{href:!0});var crt=s(UN);L9o=r(crt,"MegatronBertForNextSentencePrediction"),crt.forEach(t),x9o=r(YAe," (MegatronBert model)"),YAe.forEach(t),k9o=i(il),Bb=n(il,"LI",{});var KAe=s(Bb);jie=n(KAe,"STRONG",{});var frt=s(jie);S9o=r(frt,"mobilebert"),frt.forEach(t),R9o=r(KAe," \u2014 "),JN=n(KAe,"A",{href:!0});var mrt=s(JN);B9o=r(mrt,"MobileBertForNextSentencePrediction"),mrt.forEach(t),P9o=r(KAe," (MobileBERT model)"),KAe.forEach(t),$9o=i(il),Pb=n(il,"LI",{});var ZAe=s(Pb);Die=n(ZAe,"STRONG",{});var grt=s(Die);I9o=r(grt,"qdqbert"),grt.forEach(t),q9o=r(ZAe," \u2014 "),YN=n(ZAe,"A",{href:!0});var hrt=s(YN);N9o=r(hrt,"QDQBertForNextSentencePrediction"),hrt.forEach(t),j9o=r(ZAe," (QDQBert model)"),ZAe.forEach(t),il.forEach(t),D9o=i(Wt),$b=n(Wt,"P",{});var e0e=s($b);G9o=r(e0e,"The model is set in evaluation mode by default using "),Gie=n(e0e,"CODE",{});var prt=s(Gie);O9o=r(prt,"model.eval()"),prt.forEach(t),V9o=r(e0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Oie=n(e0e,"CODE",{});var _rt=s(Oie);X9o=r(_rt,"model.train()"),_rt.forEach(t),e0e.forEach(t),z9o=i(Wt),Vie=n(Wt,"P",{});var urt=s(Vie);Q9o=r(urt,"Examples:"),urt.forEach(t),W9o=i(Wt),m(ew.$$.fragment,Wt),Wt.forEach(t),sl.forEach(t),LRe=i(c),vd=n(c,"H2",{class:!0});var qPe=s(vd);Ib=n(qPe,"A",{id:!0,class:!0,href:!0});var brt=s(Ib);Xie=n(brt,"SPAN",{});var Frt=s(Xie);m(ow.$$.fragment,Frt),Frt.forEach(t),brt.forEach(t),H9o=i(qPe),zie=n(qPe,"SPAN",{});var vrt=s(zie);U9o=r(vrt,"AutoModelForTokenClassification"),vrt.forEach(t),qPe.forEach(t),xRe=i(c),ar=n(c,"DIV",{class:!0});var dl=s(ar);m(rw.$$.fragment,dl),J9o=i(dl),Td=n(dl,"P",{});var FU=s(Td);Y9o=r(FU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),KN=n(FU,"A",{href:!0});var Trt=s(KN);K9o=r(Trt,"from_pretrained()"),Trt.forEach(t),Z9o=r(FU," class method or the "),ZN=n(FU,"A",{href:!0});var Mrt=s(ZN);exo=r(Mrt,"from_config()"),Mrt.forEach(t),oxo=r(FU,` class
method.`),FU.forEach(t),rxo=i(dl),tw=n(dl,"P",{});var NPe=s(tw);txo=r(NPe,"This class cannot be instantiated directly using "),Qie=n(NPe,"CODE",{});var Ert=s(Qie);axo=r(Ert,"__init__()"),Ert.forEach(t),nxo=r(NPe," (throws an error)."),NPe.forEach(t),sxo=i(dl),Kr=n(dl,"DIV",{class:!0});var cl=s(Kr);m(aw.$$.fragment,cl),lxo=i(cl),Wie=n(cl,"P",{});var Crt=s(Wie);ixo=r(Crt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Crt.forEach(t),dxo=i(cl),Md=n(cl,"P",{});var vU=s(Md);cxo=r(vU,`Note:
Loading a model from its configuration file does `),Hie=n(vU,"STRONG",{});var wrt=s(Hie);fxo=r(wrt,"not"),wrt.forEach(t),mxo=r(vU,` load the model weights. It only affects the
model\u2019s configuration. Use `),ej=n(vU,"A",{href:!0});var Art=s(ej);gxo=r(Art,"from_pretrained()"),Art.forEach(t),hxo=r(vU," to load the model weights."),vU.forEach(t),pxo=i(cl),Uie=n(cl,"P",{});var yrt=s(Uie);_xo=r(yrt,"Examples:"),yrt.forEach(t),uxo=i(cl),m(nw.$$.fragment,cl),cl.forEach(t),bxo=i(dl),ze=n(dl,"DIV",{class:!0});var Ht=s(ze);m(sw.$$.fragment,Ht),Fxo=i(Ht),Jie=n(Ht,"P",{});var Lrt=s(Jie);vxo=r(Lrt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Lrt.forEach(t),Txo=i(Ht),Ka=n(Ht,"P",{});var SE=s(Ka);Mxo=r(SE,"The model class to instantiate is selected based on the "),Yie=n(SE,"CODE",{});var xrt=s(Yie);Exo=r(xrt,"model_type"),xrt.forEach(t),Cxo=r(SE,` property of the config object (either
passed as an argument or loaded from `),Kie=n(SE,"CODE",{});var krt=s(Kie);wxo=r(krt,"pretrained_model_name_or_path"),krt.forEach(t),Axo=r(SE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zie=n(SE,"CODE",{});var Srt=s(Zie);yxo=r(Srt,"pretrained_model_name_or_path"),Srt.forEach(t),Lxo=r(SE,":"),SE.forEach(t),xxo=i(Ht),j=n(Ht,"UL",{});var D=s(j);qb=n(D,"LI",{});var o0e=s(qb);ede=n(o0e,"STRONG",{});var Rrt=s(ede);kxo=r(Rrt,"albert"),Rrt.forEach(t),Sxo=r(o0e," \u2014 "),oj=n(o0e,"A",{href:!0});var Brt=s(oj);Rxo=r(Brt,"AlbertForTokenClassification"),Brt.forEach(t),Bxo=r(o0e," (ALBERT model)"),o0e.forEach(t),Pxo=i(D),Nb=n(D,"LI",{});var r0e=s(Nb);ode=n(r0e,"STRONG",{});var Prt=s(ode);$xo=r(Prt,"bert"),Prt.forEach(t),Ixo=r(r0e," \u2014 "),rj=n(r0e,"A",{href:!0});var $rt=s(rj);qxo=r($rt,"BertForTokenClassification"),$rt.forEach(t),Nxo=r(r0e," (BERT model)"),r0e.forEach(t),jxo=i(D),jb=n(D,"LI",{});var t0e=s(jb);rde=n(t0e,"STRONG",{});var Irt=s(rde);Dxo=r(Irt,"big_bird"),Irt.forEach(t),Gxo=r(t0e," \u2014 "),tj=n(t0e,"A",{href:!0});var qrt=s(tj);Oxo=r(qrt,"BigBirdForTokenClassification"),qrt.forEach(t),Vxo=r(t0e," (BigBird model)"),t0e.forEach(t),Xxo=i(D),Db=n(D,"LI",{});var a0e=s(Db);tde=n(a0e,"STRONG",{});var Nrt=s(tde);zxo=r(Nrt,"camembert"),Nrt.forEach(t),Qxo=r(a0e," \u2014 "),aj=n(a0e,"A",{href:!0});var jrt=s(aj);Wxo=r(jrt,"CamembertForTokenClassification"),jrt.forEach(t),Hxo=r(a0e," (CamemBERT model)"),a0e.forEach(t),Uxo=i(D),Gb=n(D,"LI",{});var n0e=s(Gb);ade=n(n0e,"STRONG",{});var Drt=s(ade);Jxo=r(Drt,"canine"),Drt.forEach(t),Yxo=r(n0e," \u2014 "),nj=n(n0e,"A",{href:!0});var Grt=s(nj);Kxo=r(Grt,"CanineForTokenClassification"),Grt.forEach(t),Zxo=r(n0e," (Canine model)"),n0e.forEach(t),eko=i(D),Ob=n(D,"LI",{});var s0e=s(Ob);nde=n(s0e,"STRONG",{});var Ort=s(nde);oko=r(Ort,"convbert"),Ort.forEach(t),rko=r(s0e," \u2014 "),sj=n(s0e,"A",{href:!0});var Vrt=s(sj);tko=r(Vrt,"ConvBertForTokenClassification"),Vrt.forEach(t),ako=r(s0e," (ConvBERT model)"),s0e.forEach(t),nko=i(D),Vb=n(D,"LI",{});var l0e=s(Vb);sde=n(l0e,"STRONG",{});var Xrt=s(sde);sko=r(Xrt,"data2vec-text"),Xrt.forEach(t),lko=r(l0e," \u2014 "),lj=n(l0e,"A",{href:!0});var zrt=s(lj);iko=r(zrt,"Data2VecTextForTokenClassification"),zrt.forEach(t),dko=r(l0e," (Data2VecText model)"),l0e.forEach(t),cko=i(D),Xb=n(D,"LI",{});var i0e=s(Xb);lde=n(i0e,"STRONG",{});var Qrt=s(lde);fko=r(Qrt,"deberta"),Qrt.forEach(t),mko=r(i0e," \u2014 "),ij=n(i0e,"A",{href:!0});var Wrt=s(ij);gko=r(Wrt,"DebertaForTokenClassification"),Wrt.forEach(t),hko=r(i0e," (DeBERTa model)"),i0e.forEach(t),pko=i(D),zb=n(D,"LI",{});var d0e=s(zb);ide=n(d0e,"STRONG",{});var Hrt=s(ide);_ko=r(Hrt,"deberta-v2"),Hrt.forEach(t),uko=r(d0e," \u2014 "),dj=n(d0e,"A",{href:!0});var Urt=s(dj);bko=r(Urt,"DebertaV2ForTokenClassification"),Urt.forEach(t),Fko=r(d0e," (DeBERTa-v2 model)"),d0e.forEach(t),vko=i(D),Qb=n(D,"LI",{});var c0e=s(Qb);dde=n(c0e,"STRONG",{});var Jrt=s(dde);Tko=r(Jrt,"distilbert"),Jrt.forEach(t),Mko=r(c0e," \u2014 "),cj=n(c0e,"A",{href:!0});var Yrt=s(cj);Eko=r(Yrt,"DistilBertForTokenClassification"),Yrt.forEach(t),Cko=r(c0e," (DistilBERT model)"),c0e.forEach(t),wko=i(D),Wb=n(D,"LI",{});var f0e=s(Wb);cde=n(f0e,"STRONG",{});var Krt=s(cde);Ako=r(Krt,"electra"),Krt.forEach(t),yko=r(f0e," \u2014 "),fj=n(f0e,"A",{href:!0});var Zrt=s(fj);Lko=r(Zrt,"ElectraForTokenClassification"),Zrt.forEach(t),xko=r(f0e," (ELECTRA model)"),f0e.forEach(t),kko=i(D),Hb=n(D,"LI",{});var m0e=s(Hb);fde=n(m0e,"STRONG",{});var ett=s(fde);Sko=r(ett,"flaubert"),ett.forEach(t),Rko=r(m0e," \u2014 "),mj=n(m0e,"A",{href:!0});var ott=s(mj);Bko=r(ott,"FlaubertForTokenClassification"),ott.forEach(t),Pko=r(m0e," (FlauBERT model)"),m0e.forEach(t),$ko=i(D),Ub=n(D,"LI",{});var g0e=s(Ub);mde=n(g0e,"STRONG",{});var rtt=s(mde);Iko=r(rtt,"fnet"),rtt.forEach(t),qko=r(g0e," \u2014 "),gj=n(g0e,"A",{href:!0});var ttt=s(gj);Nko=r(ttt,"FNetForTokenClassification"),ttt.forEach(t),jko=r(g0e," (FNet model)"),g0e.forEach(t),Dko=i(D),Jb=n(D,"LI",{});var h0e=s(Jb);gde=n(h0e,"STRONG",{});var att=s(gde);Gko=r(att,"funnel"),att.forEach(t),Oko=r(h0e," \u2014 "),hj=n(h0e,"A",{href:!0});var ntt=s(hj);Vko=r(ntt,"FunnelForTokenClassification"),ntt.forEach(t),Xko=r(h0e," (Funnel Transformer model)"),h0e.forEach(t),zko=i(D),Yb=n(D,"LI",{});var p0e=s(Yb);hde=n(p0e,"STRONG",{});var stt=s(hde);Qko=r(stt,"gpt2"),stt.forEach(t),Wko=r(p0e," \u2014 "),pj=n(p0e,"A",{href:!0});var ltt=s(pj);Hko=r(ltt,"GPT2ForTokenClassification"),ltt.forEach(t),Uko=r(p0e," (OpenAI GPT-2 model)"),p0e.forEach(t),Jko=i(D),Kb=n(D,"LI",{});var _0e=s(Kb);pde=n(_0e,"STRONG",{});var itt=s(pde);Yko=r(itt,"ibert"),itt.forEach(t),Kko=r(_0e," \u2014 "),_j=n(_0e,"A",{href:!0});var dtt=s(_j);Zko=r(dtt,"IBertForTokenClassification"),dtt.forEach(t),eSo=r(_0e," (I-BERT model)"),_0e.forEach(t),oSo=i(D),Zb=n(D,"LI",{});var u0e=s(Zb);_de=n(u0e,"STRONG",{});var ctt=s(_de);rSo=r(ctt,"layoutlm"),ctt.forEach(t),tSo=r(u0e," \u2014 "),uj=n(u0e,"A",{href:!0});var ftt=s(uj);aSo=r(ftt,"LayoutLMForTokenClassification"),ftt.forEach(t),nSo=r(u0e," (LayoutLM model)"),u0e.forEach(t),sSo=i(D),e3=n(D,"LI",{});var b0e=s(e3);ude=n(b0e,"STRONG",{});var mtt=s(ude);lSo=r(mtt,"layoutlmv2"),mtt.forEach(t),iSo=r(b0e," \u2014 "),bj=n(b0e,"A",{href:!0});var gtt=s(bj);dSo=r(gtt,"LayoutLMv2ForTokenClassification"),gtt.forEach(t),cSo=r(b0e," (LayoutLMv2 model)"),b0e.forEach(t),fSo=i(D),o3=n(D,"LI",{});var F0e=s(o3);bde=n(F0e,"STRONG",{});var htt=s(bde);mSo=r(htt,"longformer"),htt.forEach(t),gSo=r(F0e," \u2014 "),Fj=n(F0e,"A",{href:!0});var ptt=s(Fj);hSo=r(ptt,"LongformerForTokenClassification"),ptt.forEach(t),pSo=r(F0e," (Longformer model)"),F0e.forEach(t),_So=i(D),r3=n(D,"LI",{});var v0e=s(r3);Fde=n(v0e,"STRONG",{});var _tt=s(Fde);uSo=r(_tt,"megatron-bert"),_tt.forEach(t),bSo=r(v0e," \u2014 "),vj=n(v0e,"A",{href:!0});var utt=s(vj);FSo=r(utt,"MegatronBertForTokenClassification"),utt.forEach(t),vSo=r(v0e," (MegatronBert model)"),v0e.forEach(t),TSo=i(D),t3=n(D,"LI",{});var T0e=s(t3);vde=n(T0e,"STRONG",{});var btt=s(vde);MSo=r(btt,"mobilebert"),btt.forEach(t),ESo=r(T0e," \u2014 "),Tj=n(T0e,"A",{href:!0});var Ftt=s(Tj);CSo=r(Ftt,"MobileBertForTokenClassification"),Ftt.forEach(t),wSo=r(T0e," (MobileBERT model)"),T0e.forEach(t),ASo=i(D),a3=n(D,"LI",{});var M0e=s(a3);Tde=n(M0e,"STRONG",{});var vtt=s(Tde);ySo=r(vtt,"mpnet"),vtt.forEach(t),LSo=r(M0e," \u2014 "),Mj=n(M0e,"A",{href:!0});var Ttt=s(Mj);xSo=r(Ttt,"MPNetForTokenClassification"),Ttt.forEach(t),kSo=r(M0e," (MPNet model)"),M0e.forEach(t),SSo=i(D),n3=n(D,"LI",{});var E0e=s(n3);Mde=n(E0e,"STRONG",{});var Mtt=s(Mde);RSo=r(Mtt,"nystromformer"),Mtt.forEach(t),BSo=r(E0e," \u2014 "),Ej=n(E0e,"A",{href:!0});var Ett=s(Ej);PSo=r(Ett,"NystromformerForTokenClassification"),Ett.forEach(t),$So=r(E0e," (Nystromformer model)"),E0e.forEach(t),ISo=i(D),s3=n(D,"LI",{});var C0e=s(s3);Ede=n(C0e,"STRONG",{});var Ctt=s(Ede);qSo=r(Ctt,"qdqbert"),Ctt.forEach(t),NSo=r(C0e," \u2014 "),Cj=n(C0e,"A",{href:!0});var wtt=s(Cj);jSo=r(wtt,"QDQBertForTokenClassification"),wtt.forEach(t),DSo=r(C0e," (QDQBert model)"),C0e.forEach(t),GSo=i(D),l3=n(D,"LI",{});var w0e=s(l3);Cde=n(w0e,"STRONG",{});var Att=s(Cde);OSo=r(Att,"rembert"),Att.forEach(t),VSo=r(w0e," \u2014 "),wj=n(w0e,"A",{href:!0});var ytt=s(wj);XSo=r(ytt,"RemBertForTokenClassification"),ytt.forEach(t),zSo=r(w0e," (RemBERT model)"),w0e.forEach(t),QSo=i(D),i3=n(D,"LI",{});var A0e=s(i3);wde=n(A0e,"STRONG",{});var Ltt=s(wde);WSo=r(Ltt,"roberta"),Ltt.forEach(t),HSo=r(A0e," \u2014 "),Aj=n(A0e,"A",{href:!0});var xtt=s(Aj);USo=r(xtt,"RobertaForTokenClassification"),xtt.forEach(t),JSo=r(A0e," (RoBERTa model)"),A0e.forEach(t),YSo=i(D),d3=n(D,"LI",{});var y0e=s(d3);Ade=n(y0e,"STRONG",{});var ktt=s(Ade);KSo=r(ktt,"roformer"),ktt.forEach(t),ZSo=r(y0e," \u2014 "),yj=n(y0e,"A",{href:!0});var Stt=s(yj);eRo=r(Stt,"RoFormerForTokenClassification"),Stt.forEach(t),oRo=r(y0e," (RoFormer model)"),y0e.forEach(t),rRo=i(D),c3=n(D,"LI",{});var L0e=s(c3);yde=n(L0e,"STRONG",{});var Rtt=s(yde);tRo=r(Rtt,"squeezebert"),Rtt.forEach(t),aRo=r(L0e," \u2014 "),Lj=n(L0e,"A",{href:!0});var Btt=s(Lj);nRo=r(Btt,"SqueezeBertForTokenClassification"),Btt.forEach(t),sRo=r(L0e," (SqueezeBERT model)"),L0e.forEach(t),lRo=i(D),f3=n(D,"LI",{});var x0e=s(f3);Lde=n(x0e,"STRONG",{});var Ptt=s(Lde);iRo=r(Ptt,"xlm"),Ptt.forEach(t),dRo=r(x0e," \u2014 "),xj=n(x0e,"A",{href:!0});var $tt=s(xj);cRo=r($tt,"XLMForTokenClassification"),$tt.forEach(t),fRo=r(x0e," (XLM model)"),x0e.forEach(t),mRo=i(D),m3=n(D,"LI",{});var k0e=s(m3);xde=n(k0e,"STRONG",{});var Itt=s(xde);gRo=r(Itt,"xlm-roberta"),Itt.forEach(t),hRo=r(k0e," \u2014 "),kj=n(k0e,"A",{href:!0});var qtt=s(kj);pRo=r(qtt,"XLMRobertaForTokenClassification"),qtt.forEach(t),_Ro=r(k0e," (XLM-RoBERTa model)"),k0e.forEach(t),uRo=i(D),g3=n(D,"LI",{});var S0e=s(g3);kde=n(S0e,"STRONG",{});var Ntt=s(kde);bRo=r(Ntt,"xlm-roberta-xl"),Ntt.forEach(t),FRo=r(S0e," \u2014 "),Sj=n(S0e,"A",{href:!0});var jtt=s(Sj);vRo=r(jtt,"XLMRobertaXLForTokenClassification"),jtt.forEach(t),TRo=r(S0e," (XLM-RoBERTa-XL model)"),S0e.forEach(t),MRo=i(D),h3=n(D,"LI",{});var R0e=s(h3);Sde=n(R0e,"STRONG",{});var Dtt=s(Sde);ERo=r(Dtt,"xlnet"),Dtt.forEach(t),CRo=r(R0e," \u2014 "),Rj=n(R0e,"A",{href:!0});var Gtt=s(Rj);wRo=r(Gtt,"XLNetForTokenClassification"),Gtt.forEach(t),ARo=r(R0e," (XLNet model)"),R0e.forEach(t),yRo=i(D),p3=n(D,"LI",{});var B0e=s(p3);Rde=n(B0e,"STRONG",{});var Ott=s(Rde);LRo=r(Ott,"yoso"),Ott.forEach(t),xRo=r(B0e," \u2014 "),Bj=n(B0e,"A",{href:!0});var Vtt=s(Bj);kRo=r(Vtt,"YosoForTokenClassification"),Vtt.forEach(t),SRo=r(B0e," (YOSO model)"),B0e.forEach(t),D.forEach(t),RRo=i(Ht),_3=n(Ht,"P",{});var P0e=s(_3);BRo=r(P0e,"The model is set in evaluation mode by default using "),Bde=n(P0e,"CODE",{});var Xtt=s(Bde);PRo=r(Xtt,"model.eval()"),Xtt.forEach(t),$Ro=r(P0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pde=n(P0e,"CODE",{});var ztt=s(Pde);IRo=r(ztt,"model.train()"),ztt.forEach(t),P0e.forEach(t),qRo=i(Ht),$de=n(Ht,"P",{});var Qtt=s($de);NRo=r(Qtt,"Examples:"),Qtt.forEach(t),jRo=i(Ht),m(lw.$$.fragment,Ht),Ht.forEach(t),dl.forEach(t),kRe=i(c),Ed=n(c,"H2",{class:!0});var jPe=s(Ed);u3=n(jPe,"A",{id:!0,class:!0,href:!0});var Wtt=s(u3);Ide=n(Wtt,"SPAN",{});var Htt=s(Ide);m(iw.$$.fragment,Htt),Htt.forEach(t),Wtt.forEach(t),DRo=i(jPe),qde=n(jPe,"SPAN",{});var Utt=s(qde);GRo=r(Utt,"AutoModelForQuestionAnswering"),Utt.forEach(t),jPe.forEach(t),SRe=i(c),nr=n(c,"DIV",{class:!0});var fl=s(nr);m(dw.$$.fragment,fl),ORo=i(fl),Cd=n(fl,"P",{});var TU=s(Cd);VRo=r(TU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Pj=n(TU,"A",{href:!0});var Jtt=s(Pj);XRo=r(Jtt,"from_pretrained()"),Jtt.forEach(t),zRo=r(TU," class method or the "),$j=n(TU,"A",{href:!0});var Ytt=s($j);QRo=r(Ytt,"from_config()"),Ytt.forEach(t),WRo=r(TU,` class
method.`),TU.forEach(t),HRo=i(fl),cw=n(fl,"P",{});var DPe=s(cw);URo=r(DPe,"This class cannot be instantiated directly using "),Nde=n(DPe,"CODE",{});var Ktt=s(Nde);JRo=r(Ktt,"__init__()"),Ktt.forEach(t),YRo=r(DPe," (throws an error)."),DPe.forEach(t),KRo=i(fl),Zr=n(fl,"DIV",{class:!0});var ml=s(Zr);m(fw.$$.fragment,ml),ZRo=i(ml),jde=n(ml,"P",{});var Ztt=s(jde);eBo=r(Ztt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Ztt.forEach(t),oBo=i(ml),wd=n(ml,"P",{});var MU=s(wd);rBo=r(MU,`Note:
Loading a model from its configuration file does `),Dde=n(MU,"STRONG",{});var eat=s(Dde);tBo=r(eat,"not"),eat.forEach(t),aBo=r(MU,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ij=n(MU,"A",{href:!0});var oat=s(Ij);nBo=r(oat,"from_pretrained()"),oat.forEach(t),sBo=r(MU," to load the model weights."),MU.forEach(t),lBo=i(ml),Gde=n(ml,"P",{});var rat=s(Gde);iBo=r(rat,"Examples:"),rat.forEach(t),dBo=i(ml),m(mw.$$.fragment,ml),ml.forEach(t),cBo=i(fl),Qe=n(fl,"DIV",{class:!0});var Ut=s(Qe);m(gw.$$.fragment,Ut),fBo=i(Ut),Ode=n(Ut,"P",{});var tat=s(Ode);mBo=r(tat,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),tat.forEach(t),gBo=i(Ut),Za=n(Ut,"P",{});var RE=s(Za);hBo=r(RE,"The model class to instantiate is selected based on the "),Vde=n(RE,"CODE",{});var aat=s(Vde);pBo=r(aat,"model_type"),aat.forEach(t),_Bo=r(RE,` property of the config object (either
passed as an argument or loaded from `),Xde=n(RE,"CODE",{});var nat=s(Xde);uBo=r(nat,"pretrained_model_name_or_path"),nat.forEach(t),bBo=r(RE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zde=n(RE,"CODE",{});var sat=s(zde);FBo=r(sat,"pretrained_model_name_or_path"),sat.forEach(t),vBo=r(RE,":"),RE.forEach(t),TBo=i(Ut),R=n(Ut,"UL",{});var P=s(R);b3=n(P,"LI",{});var $0e=s(b3);Qde=n($0e,"STRONG",{});var lat=s(Qde);MBo=r(lat,"albert"),lat.forEach(t),EBo=r($0e," \u2014 "),qj=n($0e,"A",{href:!0});var iat=s(qj);CBo=r(iat,"AlbertForQuestionAnswering"),iat.forEach(t),wBo=r($0e," (ALBERT model)"),$0e.forEach(t),ABo=i(P),F3=n(P,"LI",{});var I0e=s(F3);Wde=n(I0e,"STRONG",{});var dat=s(Wde);yBo=r(dat,"bart"),dat.forEach(t),LBo=r(I0e," \u2014 "),Nj=n(I0e,"A",{href:!0});var cat=s(Nj);xBo=r(cat,"BartForQuestionAnswering"),cat.forEach(t),kBo=r(I0e," (BART model)"),I0e.forEach(t),SBo=i(P),v3=n(P,"LI",{});var q0e=s(v3);Hde=n(q0e,"STRONG",{});var fat=s(Hde);RBo=r(fat,"bert"),fat.forEach(t),BBo=r(q0e," \u2014 "),jj=n(q0e,"A",{href:!0});var mat=s(jj);PBo=r(mat,"BertForQuestionAnswering"),mat.forEach(t),$Bo=r(q0e," (BERT model)"),q0e.forEach(t),IBo=i(P),T3=n(P,"LI",{});var N0e=s(T3);Ude=n(N0e,"STRONG",{});var gat=s(Ude);qBo=r(gat,"big_bird"),gat.forEach(t),NBo=r(N0e," \u2014 "),Dj=n(N0e,"A",{href:!0});var hat=s(Dj);jBo=r(hat,"BigBirdForQuestionAnswering"),hat.forEach(t),DBo=r(N0e," (BigBird model)"),N0e.forEach(t),GBo=i(P),M3=n(P,"LI",{});var j0e=s(M3);Jde=n(j0e,"STRONG",{});var pat=s(Jde);OBo=r(pat,"bigbird_pegasus"),pat.forEach(t),VBo=r(j0e," \u2014 "),Gj=n(j0e,"A",{href:!0});var _at=s(Gj);XBo=r(_at,"BigBirdPegasusForQuestionAnswering"),_at.forEach(t),zBo=r(j0e," (BigBirdPegasus model)"),j0e.forEach(t),QBo=i(P),E3=n(P,"LI",{});var D0e=s(E3);Yde=n(D0e,"STRONG",{});var uat=s(Yde);WBo=r(uat,"camembert"),uat.forEach(t),HBo=r(D0e," \u2014 "),Oj=n(D0e,"A",{href:!0});var bat=s(Oj);UBo=r(bat,"CamembertForQuestionAnswering"),bat.forEach(t),JBo=r(D0e," (CamemBERT model)"),D0e.forEach(t),YBo=i(P),C3=n(P,"LI",{});var G0e=s(C3);Kde=n(G0e,"STRONG",{});var Fat=s(Kde);KBo=r(Fat,"canine"),Fat.forEach(t),ZBo=r(G0e," \u2014 "),Vj=n(G0e,"A",{href:!0});var vat=s(Vj);ePo=r(vat,"CanineForQuestionAnswering"),vat.forEach(t),oPo=r(G0e," (Canine model)"),G0e.forEach(t),rPo=i(P),w3=n(P,"LI",{});var O0e=s(w3);Zde=n(O0e,"STRONG",{});var Tat=s(Zde);tPo=r(Tat,"convbert"),Tat.forEach(t),aPo=r(O0e," \u2014 "),Xj=n(O0e,"A",{href:!0});var Mat=s(Xj);nPo=r(Mat,"ConvBertForQuestionAnswering"),Mat.forEach(t),sPo=r(O0e," (ConvBERT model)"),O0e.forEach(t),lPo=i(P),A3=n(P,"LI",{});var V0e=s(A3);ece=n(V0e,"STRONG",{});var Eat=s(ece);iPo=r(Eat,"data2vec-text"),Eat.forEach(t),dPo=r(V0e," \u2014 "),zj=n(V0e,"A",{href:!0});var Cat=s(zj);cPo=r(Cat,"Data2VecTextForQuestionAnswering"),Cat.forEach(t),fPo=r(V0e," (Data2VecText model)"),V0e.forEach(t),mPo=i(P),y3=n(P,"LI",{});var X0e=s(y3);oce=n(X0e,"STRONG",{});var wat=s(oce);gPo=r(wat,"deberta"),wat.forEach(t),hPo=r(X0e," \u2014 "),Qj=n(X0e,"A",{href:!0});var Aat=s(Qj);pPo=r(Aat,"DebertaForQuestionAnswering"),Aat.forEach(t),_Po=r(X0e," (DeBERTa model)"),X0e.forEach(t),uPo=i(P),L3=n(P,"LI",{});var z0e=s(L3);rce=n(z0e,"STRONG",{});var yat=s(rce);bPo=r(yat,"deberta-v2"),yat.forEach(t),FPo=r(z0e," \u2014 "),Wj=n(z0e,"A",{href:!0});var Lat=s(Wj);vPo=r(Lat,"DebertaV2ForQuestionAnswering"),Lat.forEach(t),TPo=r(z0e," (DeBERTa-v2 model)"),z0e.forEach(t),MPo=i(P),x3=n(P,"LI",{});var Q0e=s(x3);tce=n(Q0e,"STRONG",{});var xat=s(tce);EPo=r(xat,"distilbert"),xat.forEach(t),CPo=r(Q0e," \u2014 "),Hj=n(Q0e,"A",{href:!0});var kat=s(Hj);wPo=r(kat,"DistilBertForQuestionAnswering"),kat.forEach(t),APo=r(Q0e," (DistilBERT model)"),Q0e.forEach(t),yPo=i(P),k3=n(P,"LI",{});var W0e=s(k3);ace=n(W0e,"STRONG",{});var Sat=s(ace);LPo=r(Sat,"electra"),Sat.forEach(t),xPo=r(W0e," \u2014 "),Uj=n(W0e,"A",{href:!0});var Rat=s(Uj);kPo=r(Rat,"ElectraForQuestionAnswering"),Rat.forEach(t),SPo=r(W0e," (ELECTRA model)"),W0e.forEach(t),RPo=i(P),S3=n(P,"LI",{});var H0e=s(S3);nce=n(H0e,"STRONG",{});var Bat=s(nce);BPo=r(Bat,"flaubert"),Bat.forEach(t),PPo=r(H0e," \u2014 "),Jj=n(H0e,"A",{href:!0});var Pat=s(Jj);$Po=r(Pat,"FlaubertForQuestionAnsweringSimple"),Pat.forEach(t),IPo=r(H0e," (FlauBERT model)"),H0e.forEach(t),qPo=i(P),R3=n(P,"LI",{});var U0e=s(R3);sce=n(U0e,"STRONG",{});var $at=s(sce);NPo=r($at,"fnet"),$at.forEach(t),jPo=r(U0e," \u2014 "),Yj=n(U0e,"A",{href:!0});var Iat=s(Yj);DPo=r(Iat,"FNetForQuestionAnswering"),Iat.forEach(t),GPo=r(U0e," (FNet model)"),U0e.forEach(t),OPo=i(P),B3=n(P,"LI",{});var J0e=s(B3);lce=n(J0e,"STRONG",{});var qat=s(lce);VPo=r(qat,"funnel"),qat.forEach(t),XPo=r(J0e," \u2014 "),Kj=n(J0e,"A",{href:!0});var Nat=s(Kj);zPo=r(Nat,"FunnelForQuestionAnswering"),Nat.forEach(t),QPo=r(J0e," (Funnel Transformer model)"),J0e.forEach(t),WPo=i(P),P3=n(P,"LI",{});var Y0e=s(P3);ice=n(Y0e,"STRONG",{});var jat=s(ice);HPo=r(jat,"gptj"),jat.forEach(t),UPo=r(Y0e," \u2014 "),Zj=n(Y0e,"A",{href:!0});var Dat=s(Zj);JPo=r(Dat,"GPTJForQuestionAnswering"),Dat.forEach(t),YPo=r(Y0e," (GPT-J model)"),Y0e.forEach(t),KPo=i(P),$3=n(P,"LI",{});var K0e=s($3);dce=n(K0e,"STRONG",{});var Gat=s(dce);ZPo=r(Gat,"ibert"),Gat.forEach(t),e$o=r(K0e," \u2014 "),eD=n(K0e,"A",{href:!0});var Oat=s(eD);o$o=r(Oat,"IBertForQuestionAnswering"),Oat.forEach(t),r$o=r(K0e," (I-BERT model)"),K0e.forEach(t),t$o=i(P),I3=n(P,"LI",{});var Z0e=s(I3);cce=n(Z0e,"STRONG",{});var Vat=s(cce);a$o=r(Vat,"layoutlmv2"),Vat.forEach(t),n$o=r(Z0e," \u2014 "),oD=n(Z0e,"A",{href:!0});var Xat=s(oD);s$o=r(Xat,"LayoutLMv2ForQuestionAnswering"),Xat.forEach(t),l$o=r(Z0e," (LayoutLMv2 model)"),Z0e.forEach(t),i$o=i(P),q3=n(P,"LI",{});var eye=s(q3);fce=n(eye,"STRONG",{});var zat=s(fce);d$o=r(zat,"led"),zat.forEach(t),c$o=r(eye," \u2014 "),rD=n(eye,"A",{href:!0});var Qat=s(rD);f$o=r(Qat,"LEDForQuestionAnswering"),Qat.forEach(t),m$o=r(eye," (LED model)"),eye.forEach(t),g$o=i(P),N3=n(P,"LI",{});var oye=s(N3);mce=n(oye,"STRONG",{});var Wat=s(mce);h$o=r(Wat,"longformer"),Wat.forEach(t),p$o=r(oye," \u2014 "),tD=n(oye,"A",{href:!0});var Hat=s(tD);_$o=r(Hat,"LongformerForQuestionAnswering"),Hat.forEach(t),u$o=r(oye," (Longformer model)"),oye.forEach(t),b$o=i(P),j3=n(P,"LI",{});var rye=s(j3);gce=n(rye,"STRONG",{});var Uat=s(gce);F$o=r(Uat,"lxmert"),Uat.forEach(t),v$o=r(rye," \u2014 "),aD=n(rye,"A",{href:!0});var Jat=s(aD);T$o=r(Jat,"LxmertForQuestionAnswering"),Jat.forEach(t),M$o=r(rye," (LXMERT model)"),rye.forEach(t),E$o=i(P),D3=n(P,"LI",{});var tye=s(D3);hce=n(tye,"STRONG",{});var Yat=s(hce);C$o=r(Yat,"mbart"),Yat.forEach(t),w$o=r(tye," \u2014 "),nD=n(tye,"A",{href:!0});var Kat=s(nD);A$o=r(Kat,"MBartForQuestionAnswering"),Kat.forEach(t),y$o=r(tye," (mBART model)"),tye.forEach(t),L$o=i(P),G3=n(P,"LI",{});var aye=s(G3);pce=n(aye,"STRONG",{});var Zat=s(pce);x$o=r(Zat,"megatron-bert"),Zat.forEach(t),k$o=r(aye," \u2014 "),sD=n(aye,"A",{href:!0});var ent=s(sD);S$o=r(ent,"MegatronBertForQuestionAnswering"),ent.forEach(t),R$o=r(aye," (MegatronBert model)"),aye.forEach(t),B$o=i(P),O3=n(P,"LI",{});var nye=s(O3);_ce=n(nye,"STRONG",{});var ont=s(_ce);P$o=r(ont,"mobilebert"),ont.forEach(t),$$o=r(nye," \u2014 "),lD=n(nye,"A",{href:!0});var rnt=s(lD);I$o=r(rnt,"MobileBertForQuestionAnswering"),rnt.forEach(t),q$o=r(nye," (MobileBERT model)"),nye.forEach(t),N$o=i(P),V3=n(P,"LI",{});var sye=s(V3);uce=n(sye,"STRONG",{});var tnt=s(uce);j$o=r(tnt,"mpnet"),tnt.forEach(t),D$o=r(sye," \u2014 "),iD=n(sye,"A",{href:!0});var ant=s(iD);G$o=r(ant,"MPNetForQuestionAnswering"),ant.forEach(t),O$o=r(sye," (MPNet model)"),sye.forEach(t),V$o=i(P),X3=n(P,"LI",{});var lye=s(X3);bce=n(lye,"STRONG",{});var nnt=s(bce);X$o=r(nnt,"nystromformer"),nnt.forEach(t),z$o=r(lye," \u2014 "),dD=n(lye,"A",{href:!0});var snt=s(dD);Q$o=r(snt,"NystromformerForQuestionAnswering"),snt.forEach(t),W$o=r(lye," (Nystromformer model)"),lye.forEach(t),H$o=i(P),z3=n(P,"LI",{});var iye=s(z3);Fce=n(iye,"STRONG",{});var lnt=s(Fce);U$o=r(lnt,"qdqbert"),lnt.forEach(t),J$o=r(iye," \u2014 "),cD=n(iye,"A",{href:!0});var int=s(cD);Y$o=r(int,"QDQBertForQuestionAnswering"),int.forEach(t),K$o=r(iye," (QDQBert model)"),iye.forEach(t),Z$o=i(P),Q3=n(P,"LI",{});var dye=s(Q3);vce=n(dye,"STRONG",{});var dnt=s(vce);eIo=r(dnt,"reformer"),dnt.forEach(t),oIo=r(dye," \u2014 "),fD=n(dye,"A",{href:!0});var cnt=s(fD);rIo=r(cnt,"ReformerForQuestionAnswering"),cnt.forEach(t),tIo=r(dye," (Reformer model)"),dye.forEach(t),aIo=i(P),W3=n(P,"LI",{});var cye=s(W3);Tce=n(cye,"STRONG",{});var fnt=s(Tce);nIo=r(fnt,"rembert"),fnt.forEach(t),sIo=r(cye," \u2014 "),mD=n(cye,"A",{href:!0});var mnt=s(mD);lIo=r(mnt,"RemBertForQuestionAnswering"),mnt.forEach(t),iIo=r(cye," (RemBERT model)"),cye.forEach(t),dIo=i(P),H3=n(P,"LI",{});var fye=s(H3);Mce=n(fye,"STRONG",{});var gnt=s(Mce);cIo=r(gnt,"roberta"),gnt.forEach(t),fIo=r(fye," \u2014 "),gD=n(fye,"A",{href:!0});var hnt=s(gD);mIo=r(hnt,"RobertaForQuestionAnswering"),hnt.forEach(t),gIo=r(fye," (RoBERTa model)"),fye.forEach(t),hIo=i(P),U3=n(P,"LI",{});var mye=s(U3);Ece=n(mye,"STRONG",{});var pnt=s(Ece);pIo=r(pnt,"roformer"),pnt.forEach(t),_Io=r(mye," \u2014 "),hD=n(mye,"A",{href:!0});var _nt=s(hD);uIo=r(_nt,"RoFormerForQuestionAnswering"),_nt.forEach(t),bIo=r(mye," (RoFormer model)"),mye.forEach(t),FIo=i(P),J3=n(P,"LI",{});var gye=s(J3);Cce=n(gye,"STRONG",{});var unt=s(Cce);vIo=r(unt,"splinter"),unt.forEach(t),TIo=r(gye," \u2014 "),pD=n(gye,"A",{href:!0});var bnt=s(pD);MIo=r(bnt,"SplinterForQuestionAnswering"),bnt.forEach(t),EIo=r(gye," (Splinter model)"),gye.forEach(t),CIo=i(P),Y3=n(P,"LI",{});var hye=s(Y3);wce=n(hye,"STRONG",{});var Fnt=s(wce);wIo=r(Fnt,"squeezebert"),Fnt.forEach(t),AIo=r(hye," \u2014 "),_D=n(hye,"A",{href:!0});var vnt=s(_D);yIo=r(vnt,"SqueezeBertForQuestionAnswering"),vnt.forEach(t),LIo=r(hye," (SqueezeBERT model)"),hye.forEach(t),xIo=i(P),K3=n(P,"LI",{});var pye=s(K3);Ace=n(pye,"STRONG",{});var Tnt=s(Ace);kIo=r(Tnt,"xlm"),Tnt.forEach(t),SIo=r(pye," \u2014 "),uD=n(pye,"A",{href:!0});var Mnt=s(uD);RIo=r(Mnt,"XLMForQuestionAnsweringSimple"),Mnt.forEach(t),BIo=r(pye," (XLM model)"),pye.forEach(t),PIo=i(P),Z3=n(P,"LI",{});var _ye=s(Z3);yce=n(_ye,"STRONG",{});var Ent=s(yce);$Io=r(Ent,"xlm-roberta"),Ent.forEach(t),IIo=r(_ye," \u2014 "),bD=n(_ye,"A",{href:!0});var Cnt=s(bD);qIo=r(Cnt,"XLMRobertaForQuestionAnswering"),Cnt.forEach(t),NIo=r(_ye," (XLM-RoBERTa model)"),_ye.forEach(t),jIo=i(P),e2=n(P,"LI",{});var uye=s(e2);Lce=n(uye,"STRONG",{});var wnt=s(Lce);DIo=r(wnt,"xlm-roberta-xl"),wnt.forEach(t),GIo=r(uye," \u2014 "),FD=n(uye,"A",{href:!0});var Ant=s(FD);OIo=r(Ant,"XLMRobertaXLForQuestionAnswering"),Ant.forEach(t),VIo=r(uye," (XLM-RoBERTa-XL model)"),uye.forEach(t),XIo=i(P),o2=n(P,"LI",{});var bye=s(o2);xce=n(bye,"STRONG",{});var ynt=s(xce);zIo=r(ynt,"xlnet"),ynt.forEach(t),QIo=r(bye," \u2014 "),vD=n(bye,"A",{href:!0});var Lnt=s(vD);WIo=r(Lnt,"XLNetForQuestionAnsweringSimple"),Lnt.forEach(t),HIo=r(bye," (XLNet model)"),bye.forEach(t),UIo=i(P),r2=n(P,"LI",{});var Fye=s(r2);kce=n(Fye,"STRONG",{});var xnt=s(kce);JIo=r(xnt,"yoso"),xnt.forEach(t),YIo=r(Fye," \u2014 "),TD=n(Fye,"A",{href:!0});var knt=s(TD);KIo=r(knt,"YosoForQuestionAnswering"),knt.forEach(t),ZIo=r(Fye," (YOSO model)"),Fye.forEach(t),P.forEach(t),eqo=i(Ut),t2=n(Ut,"P",{});var vye=s(t2);oqo=r(vye,"The model is set in evaluation mode by default using "),Sce=n(vye,"CODE",{});var Snt=s(Sce);rqo=r(Snt,"model.eval()"),Snt.forEach(t),tqo=r(vye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rce=n(vye,"CODE",{});var Rnt=s(Rce);aqo=r(Rnt,"model.train()"),Rnt.forEach(t),vye.forEach(t),nqo=i(Ut),Bce=n(Ut,"P",{});var Bnt=s(Bce);sqo=r(Bnt,"Examples:"),Bnt.forEach(t),lqo=i(Ut),m(hw.$$.fragment,Ut),Ut.forEach(t),fl.forEach(t),RRe=i(c),Ad=n(c,"H2",{class:!0});var GPe=s(Ad);a2=n(GPe,"A",{id:!0,class:!0,href:!0});var Pnt=s(a2);Pce=n(Pnt,"SPAN",{});var $nt=s(Pce);m(pw.$$.fragment,$nt),$nt.forEach(t),Pnt.forEach(t),iqo=i(GPe),$ce=n(GPe,"SPAN",{});var Int=s($ce);dqo=r(Int,"AutoModelForTableQuestionAnswering"),Int.forEach(t),GPe.forEach(t),BRe=i(c),sr=n(c,"DIV",{class:!0});var gl=s(sr);m(_w.$$.fragment,gl),cqo=i(gl),yd=n(gl,"P",{});var EU=s(yd);fqo=r(EU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),MD=n(EU,"A",{href:!0});var qnt=s(MD);mqo=r(qnt,"from_pretrained()"),qnt.forEach(t),gqo=r(EU," class method or the "),ED=n(EU,"A",{href:!0});var Nnt=s(ED);hqo=r(Nnt,"from_config()"),Nnt.forEach(t),pqo=r(EU,` class
method.`),EU.forEach(t),_qo=i(gl),uw=n(gl,"P",{});var OPe=s(uw);uqo=r(OPe,"This class cannot be instantiated directly using "),Ice=n(OPe,"CODE",{});var jnt=s(Ice);bqo=r(jnt,"__init__()"),jnt.forEach(t),Fqo=r(OPe," (throws an error)."),OPe.forEach(t),vqo=i(gl),et=n(gl,"DIV",{class:!0});var hl=s(et);m(bw.$$.fragment,hl),Tqo=i(hl),qce=n(hl,"P",{});var Dnt=s(qce);Mqo=r(Dnt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Dnt.forEach(t),Eqo=i(hl),Ld=n(hl,"P",{});var CU=s(Ld);Cqo=r(CU,`Note:
Loading a model from its configuration file does `),Nce=n(CU,"STRONG",{});var Gnt=s(Nce);wqo=r(Gnt,"not"),Gnt.forEach(t),Aqo=r(CU,` load the model weights. It only affects the
model\u2019s configuration. Use `),CD=n(CU,"A",{href:!0});var Ont=s(CD);yqo=r(Ont,"from_pretrained()"),Ont.forEach(t),Lqo=r(CU," to load the model weights."),CU.forEach(t),xqo=i(hl),jce=n(hl,"P",{});var Vnt=s(jce);kqo=r(Vnt,"Examples:"),Vnt.forEach(t),Sqo=i(hl),m(Fw.$$.fragment,hl),hl.forEach(t),Rqo=i(gl),We=n(gl,"DIV",{class:!0});var Jt=s(We);m(vw.$$.fragment,Jt),Bqo=i(Jt),Dce=n(Jt,"P",{});var Xnt=s(Dce);Pqo=r(Xnt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Xnt.forEach(t),$qo=i(Jt),en=n(Jt,"P",{});var BE=s(en);Iqo=r(BE,"The model class to instantiate is selected based on the "),Gce=n(BE,"CODE",{});var znt=s(Gce);qqo=r(znt,"model_type"),znt.forEach(t),Nqo=r(BE,` property of the config object (either
passed as an argument or loaded from `),Oce=n(BE,"CODE",{});var Qnt=s(Oce);jqo=r(Qnt,"pretrained_model_name_or_path"),Qnt.forEach(t),Dqo=r(BE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vce=n(BE,"CODE",{});var Wnt=s(Vce);Gqo=r(Wnt,"pretrained_model_name_or_path"),Wnt.forEach(t),Oqo=r(BE,":"),BE.forEach(t),Vqo=i(Jt),Xce=n(Jt,"UL",{});var Hnt=s(Xce);n2=n(Hnt,"LI",{});var Tye=s(n2);zce=n(Tye,"STRONG",{});var Unt=s(zce);Xqo=r(Unt,"tapas"),Unt.forEach(t),zqo=r(Tye," \u2014 "),wD=n(Tye,"A",{href:!0});var Jnt=s(wD);Qqo=r(Jnt,"TapasForQuestionAnswering"),Jnt.forEach(t),Wqo=r(Tye," (TAPAS model)"),Tye.forEach(t),Hnt.forEach(t),Hqo=i(Jt),s2=n(Jt,"P",{});var Mye=s(s2);Uqo=r(Mye,"The model is set in evaluation mode by default using "),Qce=n(Mye,"CODE",{});var Ynt=s(Qce);Jqo=r(Ynt,"model.eval()"),Ynt.forEach(t),Yqo=r(Mye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wce=n(Mye,"CODE",{});var Knt=s(Wce);Kqo=r(Knt,"model.train()"),Knt.forEach(t),Mye.forEach(t),Zqo=i(Jt),Hce=n(Jt,"P",{});var Znt=s(Hce);eNo=r(Znt,"Examples:"),Znt.forEach(t),oNo=i(Jt),m(Tw.$$.fragment,Jt),Jt.forEach(t),gl.forEach(t),PRe=i(c),xd=n(c,"H2",{class:!0});var VPe=s(xd);l2=n(VPe,"A",{id:!0,class:!0,href:!0});var est=s(l2);Uce=n(est,"SPAN",{});var ost=s(Uce);m(Mw.$$.fragment,ost),ost.forEach(t),est.forEach(t),rNo=i(VPe),Jce=n(VPe,"SPAN",{});var rst=s(Jce);tNo=r(rst,"AutoModelForImageClassification"),rst.forEach(t),VPe.forEach(t),$Re=i(c),lr=n(c,"DIV",{class:!0});var pl=s(lr);m(Ew.$$.fragment,pl),aNo=i(pl),kd=n(pl,"P",{});var wU=s(kd);nNo=r(wU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),AD=n(wU,"A",{href:!0});var tst=s(AD);sNo=r(tst,"from_pretrained()"),tst.forEach(t),lNo=r(wU," class method or the "),yD=n(wU,"A",{href:!0});var ast=s(yD);iNo=r(ast,"from_config()"),ast.forEach(t),dNo=r(wU,` class
method.`),wU.forEach(t),cNo=i(pl),Cw=n(pl,"P",{});var XPe=s(Cw);fNo=r(XPe,"This class cannot be instantiated directly using "),Yce=n(XPe,"CODE",{});var nst=s(Yce);mNo=r(nst,"__init__()"),nst.forEach(t),gNo=r(XPe," (throws an error)."),XPe.forEach(t),hNo=i(pl),ot=n(pl,"DIV",{class:!0});var _l=s(ot);m(ww.$$.fragment,_l),pNo=i(_l),Kce=n(_l,"P",{});var sst=s(Kce);_No=r(sst,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),sst.forEach(t),uNo=i(_l),Sd=n(_l,"P",{});var AU=s(Sd);bNo=r(AU,`Note:
Loading a model from its configuration file does `),Zce=n(AU,"STRONG",{});var lst=s(Zce);FNo=r(lst,"not"),lst.forEach(t),vNo=r(AU,` load the model weights. It only affects the
model\u2019s configuration. Use `),LD=n(AU,"A",{href:!0});var ist=s(LD);TNo=r(ist,"from_pretrained()"),ist.forEach(t),MNo=r(AU," to load the model weights."),AU.forEach(t),ENo=i(_l),efe=n(_l,"P",{});var dst=s(efe);CNo=r(dst,"Examples:"),dst.forEach(t),wNo=i(_l),m(Aw.$$.fragment,_l),_l.forEach(t),ANo=i(pl),He=n(pl,"DIV",{class:!0});var Yt=s(He);m(yw.$$.fragment,Yt),yNo=i(Yt),ofe=n(Yt,"P",{});var cst=s(ofe);LNo=r(cst,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),cst.forEach(t),xNo=i(Yt),on=n(Yt,"P",{});var PE=s(on);kNo=r(PE,"The model class to instantiate is selected based on the "),rfe=n(PE,"CODE",{});var fst=s(rfe);SNo=r(fst,"model_type"),fst.forEach(t),RNo=r(PE,` property of the config object (either
passed as an argument or loaded from `),tfe=n(PE,"CODE",{});var mst=s(tfe);BNo=r(mst,"pretrained_model_name_or_path"),mst.forEach(t),PNo=r(PE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),afe=n(PE,"CODE",{});var gst=s(afe);$No=r(gst,"pretrained_model_name_or_path"),gst.forEach(t),INo=r(PE,":"),PE.forEach(t),qNo=i(Yt),ge=n(Yt,"UL",{});var Te=s(ge);i2=n(Te,"LI",{});var Eye=s(i2);nfe=n(Eye,"STRONG",{});var hst=s(nfe);NNo=r(hst,"beit"),hst.forEach(t),jNo=r(Eye," \u2014 "),xD=n(Eye,"A",{href:!0});var pst=s(xD);DNo=r(pst,"BeitForImageClassification"),pst.forEach(t),GNo=r(Eye," (BEiT model)"),Eye.forEach(t),ONo=i(Te),d2=n(Te,"LI",{});var Cye=s(d2);sfe=n(Cye,"STRONG",{});var _st=s(sfe);VNo=r(_st,"convnext"),_st.forEach(t),XNo=r(Cye," \u2014 "),kD=n(Cye,"A",{href:!0});var ust=s(kD);zNo=r(ust,"ConvNextForImageClassification"),ust.forEach(t),QNo=r(Cye," (ConvNext model)"),Cye.forEach(t),WNo=i(Te),Ds=n(Te,"LI",{});var d9=s(Ds);lfe=n(d9,"STRONG",{});var bst=s(lfe);HNo=r(bst,"deit"),bst.forEach(t),UNo=r(d9," \u2014 "),SD=n(d9,"A",{href:!0});var Fst=s(SD);JNo=r(Fst,"DeiTForImageClassification"),Fst.forEach(t),YNo=r(d9," or "),RD=n(d9,"A",{href:!0});var vst=s(RD);KNo=r(vst,"DeiTForImageClassificationWithTeacher"),vst.forEach(t),ZNo=r(d9," (DeiT model)"),d9.forEach(t),ejo=i(Te),c2=n(Te,"LI",{});var wye=s(c2);ife=n(wye,"STRONG",{});var Tst=s(ife);ojo=r(Tst,"imagegpt"),Tst.forEach(t),rjo=r(wye," \u2014 "),BD=n(wye,"A",{href:!0});var Mst=s(BD);tjo=r(Mst,"ImageGPTForImageClassification"),Mst.forEach(t),ajo=r(wye," (ImageGPT model)"),wye.forEach(t),njo=i(Te),ma=n(Te,"LI",{});var $f=s(ma);dfe=n($f,"STRONG",{});var Est=s(dfe);sjo=r(Est,"perceiver"),Est.forEach(t),ljo=r($f," \u2014 "),PD=n($f,"A",{href:!0});var Cst=s(PD);ijo=r(Cst,"PerceiverForImageClassificationLearned"),Cst.forEach(t),djo=r($f," or "),$D=n($f,"A",{href:!0});var wst=s($D);cjo=r(wst,"PerceiverForImageClassificationFourier"),wst.forEach(t),fjo=r($f," or "),ID=n($f,"A",{href:!0});var Ast=s(ID);mjo=r(Ast,"PerceiverForImageClassificationConvProcessing"),Ast.forEach(t),gjo=r($f," (Perceiver model)"),$f.forEach(t),hjo=i(Te),f2=n(Te,"LI",{});var Aye=s(f2);cfe=n(Aye,"STRONG",{});var yst=s(cfe);pjo=r(yst,"poolformer"),yst.forEach(t),_jo=r(Aye," \u2014 "),qD=n(Aye,"A",{href:!0});var Lst=s(qD);ujo=r(Lst,"PoolFormerForImageClassification"),Lst.forEach(t),bjo=r(Aye," (PoolFormer model)"),Aye.forEach(t),Fjo=i(Te),m2=n(Te,"LI",{});var yye=s(m2);ffe=n(yye,"STRONG",{});var xst=s(ffe);vjo=r(xst,"resnet"),xst.forEach(t),Tjo=r(yye," \u2014 "),ND=n(yye,"A",{href:!0});var kst=s(ND);Mjo=r(kst,"ResNetForImageClassification"),kst.forEach(t),Ejo=r(yye," (ResNet model)"),yye.forEach(t),Cjo=i(Te),g2=n(Te,"LI",{});var Lye=s(g2);mfe=n(Lye,"STRONG",{});var Sst=s(mfe);wjo=r(Sst,"segformer"),Sst.forEach(t),Ajo=r(Lye," \u2014 "),jD=n(Lye,"A",{href:!0});var Rst=s(jD);yjo=r(Rst,"SegformerForImageClassification"),Rst.forEach(t),Ljo=r(Lye," (SegFormer model)"),Lye.forEach(t),xjo=i(Te),h2=n(Te,"LI",{});var xye=s(h2);gfe=n(xye,"STRONG",{});var Bst=s(gfe);kjo=r(Bst,"swin"),Bst.forEach(t),Sjo=r(xye," \u2014 "),DD=n(xye,"A",{href:!0});var Pst=s(DD);Rjo=r(Pst,"SwinForImageClassification"),Pst.forEach(t),Bjo=r(xye," (Swin model)"),xye.forEach(t),Pjo=i(Te),p2=n(Te,"LI",{});var kye=s(p2);hfe=n(kye,"STRONG",{});var $st=s(hfe);$jo=r($st,"van"),$st.forEach(t),Ijo=r(kye," \u2014 "),GD=n(kye,"A",{href:!0});var Ist=s(GD);qjo=r(Ist,"VanForImageClassification"),Ist.forEach(t),Njo=r(kye," (VAN model)"),kye.forEach(t),jjo=i(Te),_2=n(Te,"LI",{});var Sye=s(_2);pfe=n(Sye,"STRONG",{});var qst=s(pfe);Djo=r(qst,"vit"),qst.forEach(t),Gjo=r(Sye," \u2014 "),OD=n(Sye,"A",{href:!0});var Nst=s(OD);Ojo=r(Nst,"ViTForImageClassification"),Nst.forEach(t),Vjo=r(Sye," (ViT model)"),Sye.forEach(t),Te.forEach(t),Xjo=i(Yt),u2=n(Yt,"P",{});var Rye=s(u2);zjo=r(Rye,"The model is set in evaluation mode by default using "),_fe=n(Rye,"CODE",{});var jst=s(_fe);Qjo=r(jst,"model.eval()"),jst.forEach(t),Wjo=r(Rye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ufe=n(Rye,"CODE",{});var Dst=s(ufe);Hjo=r(Dst,"model.train()"),Dst.forEach(t),Rye.forEach(t),Ujo=i(Yt),bfe=n(Yt,"P",{});var Gst=s(bfe);Jjo=r(Gst,"Examples:"),Gst.forEach(t),Yjo=i(Yt),m(Lw.$$.fragment,Yt),Yt.forEach(t),pl.forEach(t),IRe=i(c),Rd=n(c,"H2",{class:!0});var zPe=s(Rd);b2=n(zPe,"A",{id:!0,class:!0,href:!0});var Ost=s(b2);Ffe=n(Ost,"SPAN",{});var Vst=s(Ffe);m(xw.$$.fragment,Vst),Vst.forEach(t),Ost.forEach(t),Kjo=i(zPe),vfe=n(zPe,"SPAN",{});var Xst=s(vfe);Zjo=r(Xst,"AutoModelForVision2Seq"),Xst.forEach(t),zPe.forEach(t),qRe=i(c),ir=n(c,"DIV",{class:!0});var ul=s(ir);m(kw.$$.fragment,ul),eDo=i(ul),Bd=n(ul,"P",{});var yU=s(Bd);oDo=r(yU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),VD=n(yU,"A",{href:!0});var zst=s(VD);rDo=r(zst,"from_pretrained()"),zst.forEach(t),tDo=r(yU," class method or the "),XD=n(yU,"A",{href:!0});var Qst=s(XD);aDo=r(Qst,"from_config()"),Qst.forEach(t),nDo=r(yU,` class
method.`),yU.forEach(t),sDo=i(ul),Sw=n(ul,"P",{});var QPe=s(Sw);lDo=r(QPe,"This class cannot be instantiated directly using "),Tfe=n(QPe,"CODE",{});var Wst=s(Tfe);iDo=r(Wst,"__init__()"),Wst.forEach(t),dDo=r(QPe," (throws an error)."),QPe.forEach(t),cDo=i(ul),rt=n(ul,"DIV",{class:!0});var bl=s(rt);m(Rw.$$.fragment,bl),fDo=i(bl),Mfe=n(bl,"P",{});var Hst=s(Mfe);mDo=r(Hst,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Hst.forEach(t),gDo=i(bl),Pd=n(bl,"P",{});var LU=s(Pd);hDo=r(LU,`Note:
Loading a model from its configuration file does `),Efe=n(LU,"STRONG",{});var Ust=s(Efe);pDo=r(Ust,"not"),Ust.forEach(t),_Do=r(LU,` load the model weights. It only affects the
model\u2019s configuration. Use `),zD=n(LU,"A",{href:!0});var Jst=s(zD);uDo=r(Jst,"from_pretrained()"),Jst.forEach(t),bDo=r(LU," to load the model weights."),LU.forEach(t),FDo=i(bl),Cfe=n(bl,"P",{});var Yst=s(Cfe);vDo=r(Yst,"Examples:"),Yst.forEach(t),TDo=i(bl),m(Bw.$$.fragment,bl),bl.forEach(t),MDo=i(ul),Ue=n(ul,"DIV",{class:!0});var Kt=s(Ue);m(Pw.$$.fragment,Kt),EDo=i(Kt),wfe=n(Kt,"P",{});var Kst=s(wfe);CDo=r(Kst,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Kst.forEach(t),wDo=i(Kt),rn=n(Kt,"P",{});var $E=s(rn);ADo=r($E,"The model class to instantiate is selected based on the "),Afe=n($E,"CODE",{});var Zst=s(Afe);yDo=r(Zst,"model_type"),Zst.forEach(t),LDo=r($E,` property of the config object (either
passed as an argument or loaded from `),yfe=n($E,"CODE",{});var elt=s(yfe);xDo=r(elt,"pretrained_model_name_or_path"),elt.forEach(t),kDo=r($E,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lfe=n($E,"CODE",{});var olt=s(Lfe);SDo=r(olt,"pretrained_model_name_or_path"),olt.forEach(t),RDo=r($E,":"),$E.forEach(t),BDo=i(Kt),xfe=n(Kt,"UL",{});var rlt=s(xfe);F2=n(rlt,"LI",{});var Bye=s(F2);kfe=n(Bye,"STRONG",{});var tlt=s(kfe);PDo=r(tlt,"vision-encoder-decoder"),tlt.forEach(t),$Do=r(Bye," \u2014 "),QD=n(Bye,"A",{href:!0});var alt=s(QD);IDo=r(alt,"VisionEncoderDecoderModel"),alt.forEach(t),qDo=r(Bye," (Vision Encoder decoder model)"),Bye.forEach(t),rlt.forEach(t),NDo=i(Kt),v2=n(Kt,"P",{});var Pye=s(v2);jDo=r(Pye,"The model is set in evaluation mode by default using "),Sfe=n(Pye,"CODE",{});var nlt=s(Sfe);DDo=r(nlt,"model.eval()"),nlt.forEach(t),GDo=r(Pye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rfe=n(Pye,"CODE",{});var slt=s(Rfe);ODo=r(slt,"model.train()"),slt.forEach(t),Pye.forEach(t),VDo=i(Kt),Bfe=n(Kt,"P",{});var llt=s(Bfe);XDo=r(llt,"Examples:"),llt.forEach(t),zDo=i(Kt),m($w.$$.fragment,Kt),Kt.forEach(t),ul.forEach(t),NRe=i(c),$d=n(c,"H2",{class:!0});var WPe=s($d);T2=n(WPe,"A",{id:!0,class:!0,href:!0});var ilt=s(T2);Pfe=n(ilt,"SPAN",{});var dlt=s(Pfe);m(Iw.$$.fragment,dlt),dlt.forEach(t),ilt.forEach(t),QDo=i(WPe),$fe=n(WPe,"SPAN",{});var clt=s($fe);WDo=r(clt,"AutoModelForAudioClassification"),clt.forEach(t),WPe.forEach(t),jRe=i(c),dr=n(c,"DIV",{class:!0});var Fl=s(dr);m(qw.$$.fragment,Fl),HDo=i(Fl),Id=n(Fl,"P",{});var xU=s(Id);UDo=r(xU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),WD=n(xU,"A",{href:!0});var flt=s(WD);JDo=r(flt,"from_pretrained()"),flt.forEach(t),YDo=r(xU," class method or the "),HD=n(xU,"A",{href:!0});var mlt=s(HD);KDo=r(mlt,"from_config()"),mlt.forEach(t),ZDo=r(xU,` class
method.`),xU.forEach(t),eGo=i(Fl),Nw=n(Fl,"P",{});var HPe=s(Nw);oGo=r(HPe,"This class cannot be instantiated directly using "),Ife=n(HPe,"CODE",{});var glt=s(Ife);rGo=r(glt,"__init__()"),glt.forEach(t),tGo=r(HPe," (throws an error)."),HPe.forEach(t),aGo=i(Fl),tt=n(Fl,"DIV",{class:!0});var vl=s(tt);m(jw.$$.fragment,vl),nGo=i(vl),qfe=n(vl,"P",{});var hlt=s(qfe);sGo=r(hlt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),hlt.forEach(t),lGo=i(vl),qd=n(vl,"P",{});var kU=s(qd);iGo=r(kU,`Note:
Loading a model from its configuration file does `),Nfe=n(kU,"STRONG",{});var plt=s(Nfe);dGo=r(plt,"not"),plt.forEach(t),cGo=r(kU,` load the model weights. It only affects the
model\u2019s configuration. Use `),UD=n(kU,"A",{href:!0});var _lt=s(UD);fGo=r(_lt,"from_pretrained()"),_lt.forEach(t),mGo=r(kU," to load the model weights."),kU.forEach(t),gGo=i(vl),jfe=n(vl,"P",{});var ult=s(jfe);hGo=r(ult,"Examples:"),ult.forEach(t),pGo=i(vl),m(Dw.$$.fragment,vl),vl.forEach(t),_Go=i(Fl),Je=n(Fl,"DIV",{class:!0});var Zt=s(Je);m(Gw.$$.fragment,Zt),uGo=i(Zt),Dfe=n(Zt,"P",{});var blt=s(Dfe);bGo=r(blt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),blt.forEach(t),FGo=i(Zt),tn=n(Zt,"P",{});var IE=s(tn);vGo=r(IE,"The model class to instantiate is selected based on the "),Gfe=n(IE,"CODE",{});var Flt=s(Gfe);TGo=r(Flt,"model_type"),Flt.forEach(t),MGo=r(IE,` property of the config object (either
passed as an argument or loaded from `),Ofe=n(IE,"CODE",{});var vlt=s(Ofe);EGo=r(vlt,"pretrained_model_name_or_path"),vlt.forEach(t),CGo=r(IE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vfe=n(IE,"CODE",{});var Tlt=s(Vfe);wGo=r(Tlt,"pretrained_model_name_or_path"),Tlt.forEach(t),AGo=r(IE,":"),IE.forEach(t),yGo=i(Zt),Se=n(Zt,"UL",{});var Do=s(Se);M2=n(Do,"LI",{});var $ye=s(M2);Xfe=n($ye,"STRONG",{});var Mlt=s(Xfe);LGo=r(Mlt,"data2vec-audio"),Mlt.forEach(t),xGo=r($ye," \u2014 "),JD=n($ye,"A",{href:!0});var Elt=s(JD);kGo=r(Elt,"Data2VecAudioForSequenceClassification"),Elt.forEach(t),SGo=r($ye," (Data2VecAudio model)"),$ye.forEach(t),RGo=i(Do),E2=n(Do,"LI",{});var Iye=s(E2);zfe=n(Iye,"STRONG",{});var Clt=s(zfe);BGo=r(Clt,"hubert"),Clt.forEach(t),PGo=r(Iye," \u2014 "),YD=n(Iye,"A",{href:!0});var wlt=s(YD);$Go=r(wlt,"HubertForSequenceClassification"),wlt.forEach(t),IGo=r(Iye," (Hubert model)"),Iye.forEach(t),qGo=i(Do),C2=n(Do,"LI",{});var qye=s(C2);Qfe=n(qye,"STRONG",{});var Alt=s(Qfe);NGo=r(Alt,"sew"),Alt.forEach(t),jGo=r(qye," \u2014 "),KD=n(qye,"A",{href:!0});var ylt=s(KD);DGo=r(ylt,"SEWForSequenceClassification"),ylt.forEach(t),GGo=r(qye," (SEW model)"),qye.forEach(t),OGo=i(Do),w2=n(Do,"LI",{});var Nye=s(w2);Wfe=n(Nye,"STRONG",{});var Llt=s(Wfe);VGo=r(Llt,"sew-d"),Llt.forEach(t),XGo=r(Nye," \u2014 "),ZD=n(Nye,"A",{href:!0});var xlt=s(ZD);zGo=r(xlt,"SEWDForSequenceClassification"),xlt.forEach(t),QGo=r(Nye," (SEW-D model)"),Nye.forEach(t),WGo=i(Do),A2=n(Do,"LI",{});var jye=s(A2);Hfe=n(jye,"STRONG",{});var klt=s(Hfe);HGo=r(klt,"unispeech"),klt.forEach(t),UGo=r(jye," \u2014 "),eG=n(jye,"A",{href:!0});var Slt=s(eG);JGo=r(Slt,"UniSpeechForSequenceClassification"),Slt.forEach(t),YGo=r(jye," (UniSpeech model)"),jye.forEach(t),KGo=i(Do),y2=n(Do,"LI",{});var Dye=s(y2);Ufe=n(Dye,"STRONG",{});var Rlt=s(Ufe);ZGo=r(Rlt,"unispeech-sat"),Rlt.forEach(t),eOo=r(Dye," \u2014 "),oG=n(Dye,"A",{href:!0});var Blt=s(oG);oOo=r(Blt,"UniSpeechSatForSequenceClassification"),Blt.forEach(t),rOo=r(Dye," (UniSpeechSat model)"),Dye.forEach(t),tOo=i(Do),L2=n(Do,"LI",{});var Gye=s(L2);Jfe=n(Gye,"STRONG",{});var Plt=s(Jfe);aOo=r(Plt,"wav2vec2"),Plt.forEach(t),nOo=r(Gye," \u2014 "),rG=n(Gye,"A",{href:!0});var $lt=s(rG);sOo=r($lt,"Wav2Vec2ForSequenceClassification"),$lt.forEach(t),lOo=r(Gye," (Wav2Vec2 model)"),Gye.forEach(t),iOo=i(Do),x2=n(Do,"LI",{});var Oye=s(x2);Yfe=n(Oye,"STRONG",{});var Ilt=s(Yfe);dOo=r(Ilt,"wavlm"),Ilt.forEach(t),cOo=r(Oye," \u2014 "),tG=n(Oye,"A",{href:!0});var qlt=s(tG);fOo=r(qlt,"WavLMForSequenceClassification"),qlt.forEach(t),mOo=r(Oye," (WavLM model)"),Oye.forEach(t),Do.forEach(t),gOo=i(Zt),k2=n(Zt,"P",{});var Vye=s(k2);hOo=r(Vye,"The model is set in evaluation mode by default using "),Kfe=n(Vye,"CODE",{});var Nlt=s(Kfe);pOo=r(Nlt,"model.eval()"),Nlt.forEach(t),_Oo=r(Vye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zfe=n(Vye,"CODE",{});var jlt=s(Zfe);uOo=r(jlt,"model.train()"),jlt.forEach(t),Vye.forEach(t),bOo=i(Zt),eme=n(Zt,"P",{});var Dlt=s(eme);FOo=r(Dlt,"Examples:"),Dlt.forEach(t),vOo=i(Zt),m(Ow.$$.fragment,Zt),Zt.forEach(t),Fl.forEach(t),DRe=i(c),Nd=n(c,"H2",{class:!0});var UPe=s(Nd);S2=n(UPe,"A",{id:!0,class:!0,href:!0});var Glt=s(S2);ome=n(Glt,"SPAN",{});var Olt=s(ome);m(Vw.$$.fragment,Olt),Olt.forEach(t),Glt.forEach(t),TOo=i(UPe),rme=n(UPe,"SPAN",{});var Vlt=s(rme);MOo=r(Vlt,"AutoModelForAudioFrameClassification"),Vlt.forEach(t),UPe.forEach(t),GRe=i(c),cr=n(c,"DIV",{class:!0});var Tl=s(cr);m(Xw.$$.fragment,Tl),EOo=i(Tl),jd=n(Tl,"P",{});var SU=s(jd);COo=r(SU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),aG=n(SU,"A",{href:!0});var Xlt=s(aG);wOo=r(Xlt,"from_pretrained()"),Xlt.forEach(t),AOo=r(SU," class method or the "),nG=n(SU,"A",{href:!0});var zlt=s(nG);yOo=r(zlt,"from_config()"),zlt.forEach(t),LOo=r(SU,` class
method.`),SU.forEach(t),xOo=i(Tl),zw=n(Tl,"P",{});var JPe=s(zw);kOo=r(JPe,"This class cannot be instantiated directly using "),tme=n(JPe,"CODE",{});var Qlt=s(tme);SOo=r(Qlt,"__init__()"),Qlt.forEach(t),ROo=r(JPe," (throws an error)."),JPe.forEach(t),BOo=i(Tl),at=n(Tl,"DIV",{class:!0});var Ml=s(at);m(Qw.$$.fragment,Ml),POo=i(Ml),ame=n(Ml,"P",{});var Wlt=s(ame);$Oo=r(Wlt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Wlt.forEach(t),IOo=i(Ml),Dd=n(Ml,"P",{});var RU=s(Dd);qOo=r(RU,`Note:
Loading a model from its configuration file does `),nme=n(RU,"STRONG",{});var Hlt=s(nme);NOo=r(Hlt,"not"),Hlt.forEach(t),jOo=r(RU,` load the model weights. It only affects the
model\u2019s configuration. Use `),sG=n(RU,"A",{href:!0});var Ult=s(sG);DOo=r(Ult,"from_pretrained()"),Ult.forEach(t),GOo=r(RU," to load the model weights."),RU.forEach(t),OOo=i(Ml),sme=n(Ml,"P",{});var Jlt=s(sme);VOo=r(Jlt,"Examples:"),Jlt.forEach(t),XOo=i(Ml),m(Ww.$$.fragment,Ml),Ml.forEach(t),zOo=i(Tl),Ye=n(Tl,"DIV",{class:!0});var ea=s(Ye);m(Hw.$$.fragment,ea),QOo=i(ea),lme=n(ea,"P",{});var Ylt=s(lme);WOo=r(Ylt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Ylt.forEach(t),HOo=i(ea),an=n(ea,"P",{});var qE=s(an);UOo=r(qE,"The model class to instantiate is selected based on the "),ime=n(qE,"CODE",{});var Klt=s(ime);JOo=r(Klt,"model_type"),Klt.forEach(t),YOo=r(qE,` property of the config object (either
passed as an argument or loaded from `),dme=n(qE,"CODE",{});var Zlt=s(dme);KOo=r(Zlt,"pretrained_model_name_or_path"),Zlt.forEach(t),ZOo=r(qE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cme=n(qE,"CODE",{});var eit=s(cme);eVo=r(eit,"pretrained_model_name_or_path"),eit.forEach(t),oVo=r(qE,":"),qE.forEach(t),rVo=i(ea),nn=n(ea,"UL",{});var NE=s(nn);R2=n(NE,"LI",{});var Xye=s(R2);fme=n(Xye,"STRONG",{});var oit=s(fme);tVo=r(oit,"data2vec-audio"),oit.forEach(t),aVo=r(Xye," \u2014 "),lG=n(Xye,"A",{href:!0});var rit=s(lG);nVo=r(rit,"Data2VecAudioForAudioFrameClassification"),rit.forEach(t),sVo=r(Xye," (Data2VecAudio model)"),Xye.forEach(t),lVo=i(NE),B2=n(NE,"LI",{});var zye=s(B2);mme=n(zye,"STRONG",{});var tit=s(mme);iVo=r(tit,"unispeech-sat"),tit.forEach(t),dVo=r(zye," \u2014 "),iG=n(zye,"A",{href:!0});var ait=s(iG);cVo=r(ait,"UniSpeechSatForAudioFrameClassification"),ait.forEach(t),fVo=r(zye," (UniSpeechSat model)"),zye.forEach(t),mVo=i(NE),P2=n(NE,"LI",{});var Qye=s(P2);gme=n(Qye,"STRONG",{});var nit=s(gme);gVo=r(nit,"wav2vec2"),nit.forEach(t),hVo=r(Qye," \u2014 "),dG=n(Qye,"A",{href:!0});var sit=s(dG);pVo=r(sit,"Wav2Vec2ForAudioFrameClassification"),sit.forEach(t),_Vo=r(Qye," (Wav2Vec2 model)"),Qye.forEach(t),uVo=i(NE),$2=n(NE,"LI",{});var Wye=s($2);hme=n(Wye,"STRONG",{});var lit=s(hme);bVo=r(lit,"wavlm"),lit.forEach(t),FVo=r(Wye," \u2014 "),cG=n(Wye,"A",{href:!0});var iit=s(cG);vVo=r(iit,"WavLMForAudioFrameClassification"),iit.forEach(t),TVo=r(Wye," (WavLM model)"),Wye.forEach(t),NE.forEach(t),MVo=i(ea),I2=n(ea,"P",{});var Hye=s(I2);EVo=r(Hye,"The model is set in evaluation mode by default using "),pme=n(Hye,"CODE",{});var dit=s(pme);CVo=r(dit,"model.eval()"),dit.forEach(t),wVo=r(Hye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_me=n(Hye,"CODE",{});var cit=s(_me);AVo=r(cit,"model.train()"),cit.forEach(t),Hye.forEach(t),yVo=i(ea),ume=n(ea,"P",{});var fit=s(ume);LVo=r(fit,"Examples:"),fit.forEach(t),xVo=i(ea),m(Uw.$$.fragment,ea),ea.forEach(t),Tl.forEach(t),ORe=i(c),Gd=n(c,"H2",{class:!0});var YPe=s(Gd);q2=n(YPe,"A",{id:!0,class:!0,href:!0});var mit=s(q2);bme=n(mit,"SPAN",{});var git=s(bme);m(Jw.$$.fragment,git),git.forEach(t),mit.forEach(t),kVo=i(YPe),Fme=n(YPe,"SPAN",{});var hit=s(Fme);SVo=r(hit,"AutoModelForCTC"),hit.forEach(t),YPe.forEach(t),VRe=i(c),fr=n(c,"DIV",{class:!0});var El=s(fr);m(Yw.$$.fragment,El),RVo=i(El),Od=n(El,"P",{});var BU=s(Od);BVo=r(BU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),fG=n(BU,"A",{href:!0});var pit=s(fG);PVo=r(pit,"from_pretrained()"),pit.forEach(t),$Vo=r(BU," class method or the "),mG=n(BU,"A",{href:!0});var _it=s(mG);IVo=r(_it,"from_config()"),_it.forEach(t),qVo=r(BU,` class
method.`),BU.forEach(t),NVo=i(El),Kw=n(El,"P",{});var KPe=s(Kw);jVo=r(KPe,"This class cannot be instantiated directly using "),vme=n(KPe,"CODE",{});var uit=s(vme);DVo=r(uit,"__init__()"),uit.forEach(t),GVo=r(KPe," (throws an error)."),KPe.forEach(t),OVo=i(El),nt=n(El,"DIV",{class:!0});var Cl=s(nt);m(Zw.$$.fragment,Cl),VVo=i(Cl),Tme=n(Cl,"P",{});var bit=s(Tme);XVo=r(bit,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),bit.forEach(t),zVo=i(Cl),Vd=n(Cl,"P",{});var PU=s(Vd);QVo=r(PU,`Note:
Loading a model from its configuration file does `),Mme=n(PU,"STRONG",{});var Fit=s(Mme);WVo=r(Fit,"not"),Fit.forEach(t),HVo=r(PU,` load the model weights. It only affects the
model\u2019s configuration. Use `),gG=n(PU,"A",{href:!0});var vit=s(gG);UVo=r(vit,"from_pretrained()"),vit.forEach(t),JVo=r(PU," to load the model weights."),PU.forEach(t),YVo=i(Cl),Eme=n(Cl,"P",{});var Tit=s(Eme);KVo=r(Tit,"Examples:"),Tit.forEach(t),ZVo=i(Cl),m(eA.$$.fragment,Cl),Cl.forEach(t),eXo=i(El),Ke=n(El,"DIV",{class:!0});var oa=s(Ke);m(oA.$$.fragment,oa),oXo=i(oa),Cme=n(oa,"P",{});var Mit=s(Cme);rXo=r(Mit,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Mit.forEach(t),tXo=i(oa),sn=n(oa,"P",{});var jE=s(sn);aXo=r(jE,"The model class to instantiate is selected based on the "),wme=n(jE,"CODE",{});var Eit=s(wme);nXo=r(Eit,"model_type"),Eit.forEach(t),sXo=r(jE,` property of the config object (either
passed as an argument or loaded from `),Ame=n(jE,"CODE",{});var Cit=s(Ame);lXo=r(Cit,"pretrained_model_name_or_path"),Cit.forEach(t),iXo=r(jE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yme=n(jE,"CODE",{});var wit=s(yme);dXo=r(wit,"pretrained_model_name_or_path"),wit.forEach(t),cXo=r(jE,":"),jE.forEach(t),fXo=i(oa),Re=n(oa,"UL",{});var Go=s(Re);N2=n(Go,"LI",{});var Uye=s(N2);Lme=n(Uye,"STRONG",{});var Ait=s(Lme);mXo=r(Ait,"data2vec-audio"),Ait.forEach(t),gXo=r(Uye," \u2014 "),hG=n(Uye,"A",{href:!0});var yit=s(hG);hXo=r(yit,"Data2VecAudioForCTC"),yit.forEach(t),pXo=r(Uye," (Data2VecAudio model)"),Uye.forEach(t),_Xo=i(Go),j2=n(Go,"LI",{});var Jye=s(j2);xme=n(Jye,"STRONG",{});var Lit=s(xme);uXo=r(Lit,"hubert"),Lit.forEach(t),bXo=r(Jye," \u2014 "),pG=n(Jye,"A",{href:!0});var xit=s(pG);FXo=r(xit,"HubertForCTC"),xit.forEach(t),vXo=r(Jye," (Hubert model)"),Jye.forEach(t),TXo=i(Go),D2=n(Go,"LI",{});var Yye=s(D2);kme=n(Yye,"STRONG",{});var kit=s(kme);MXo=r(kit,"sew"),kit.forEach(t),EXo=r(Yye," \u2014 "),_G=n(Yye,"A",{href:!0});var Sit=s(_G);CXo=r(Sit,"SEWForCTC"),Sit.forEach(t),wXo=r(Yye," (SEW model)"),Yye.forEach(t),AXo=i(Go),G2=n(Go,"LI",{});var Kye=s(G2);Sme=n(Kye,"STRONG",{});var Rit=s(Sme);yXo=r(Rit,"sew-d"),Rit.forEach(t),LXo=r(Kye," \u2014 "),uG=n(Kye,"A",{href:!0});var Bit=s(uG);xXo=r(Bit,"SEWDForCTC"),Bit.forEach(t),kXo=r(Kye," (SEW-D model)"),Kye.forEach(t),SXo=i(Go),O2=n(Go,"LI",{});var Zye=s(O2);Rme=n(Zye,"STRONG",{});var Pit=s(Rme);RXo=r(Pit,"unispeech"),Pit.forEach(t),BXo=r(Zye," \u2014 "),bG=n(Zye,"A",{href:!0});var $it=s(bG);PXo=r($it,"UniSpeechForCTC"),$it.forEach(t),$Xo=r(Zye," (UniSpeech model)"),Zye.forEach(t),IXo=i(Go),V2=n(Go,"LI",{});var eLe=s(V2);Bme=n(eLe,"STRONG",{});var Iit=s(Bme);qXo=r(Iit,"unispeech-sat"),Iit.forEach(t),NXo=r(eLe," \u2014 "),FG=n(eLe,"A",{href:!0});var qit=s(FG);jXo=r(qit,"UniSpeechSatForCTC"),qit.forEach(t),DXo=r(eLe," (UniSpeechSat model)"),eLe.forEach(t),GXo=i(Go),X2=n(Go,"LI",{});var oLe=s(X2);Pme=n(oLe,"STRONG",{});var Nit=s(Pme);OXo=r(Nit,"wav2vec2"),Nit.forEach(t),VXo=r(oLe," \u2014 "),vG=n(oLe,"A",{href:!0});var jit=s(vG);XXo=r(jit,"Wav2Vec2ForCTC"),jit.forEach(t),zXo=r(oLe," (Wav2Vec2 model)"),oLe.forEach(t),QXo=i(Go),z2=n(Go,"LI",{});var rLe=s(z2);$me=n(rLe,"STRONG",{});var Dit=s($me);WXo=r(Dit,"wavlm"),Dit.forEach(t),HXo=r(rLe," \u2014 "),TG=n(rLe,"A",{href:!0});var Git=s(TG);UXo=r(Git,"WavLMForCTC"),Git.forEach(t),JXo=r(rLe," (WavLM model)"),rLe.forEach(t),Go.forEach(t),YXo=i(oa),Q2=n(oa,"P",{});var tLe=s(Q2);KXo=r(tLe,"The model is set in evaluation mode by default using "),Ime=n(tLe,"CODE",{});var Oit=s(Ime);ZXo=r(Oit,"model.eval()"),Oit.forEach(t),ezo=r(tLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qme=n(tLe,"CODE",{});var Vit=s(qme);ozo=r(Vit,"model.train()"),Vit.forEach(t),tLe.forEach(t),rzo=i(oa),Nme=n(oa,"P",{});var Xit=s(Nme);tzo=r(Xit,"Examples:"),Xit.forEach(t),azo=i(oa),m(rA.$$.fragment,oa),oa.forEach(t),El.forEach(t),XRe=i(c),Xd=n(c,"H2",{class:!0});var ZPe=s(Xd);W2=n(ZPe,"A",{id:!0,class:!0,href:!0});var zit=s(W2);jme=n(zit,"SPAN",{});var Qit=s(jme);m(tA.$$.fragment,Qit),Qit.forEach(t),zit.forEach(t),nzo=i(ZPe),Dme=n(ZPe,"SPAN",{});var Wit=s(Dme);szo=r(Wit,"AutoModelForSpeechSeq2Seq"),Wit.forEach(t),ZPe.forEach(t),zRe=i(c),mr=n(c,"DIV",{class:!0});var wl=s(mr);m(aA.$$.fragment,wl),lzo=i(wl),zd=n(wl,"P",{});var $U=s(zd);izo=r($U,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),MG=n($U,"A",{href:!0});var Hit=s(MG);dzo=r(Hit,"from_pretrained()"),Hit.forEach(t),czo=r($U," class method or the "),EG=n($U,"A",{href:!0});var Uit=s(EG);fzo=r(Uit,"from_config()"),Uit.forEach(t),mzo=r($U,` class
method.`),$U.forEach(t),gzo=i(wl),nA=n(wl,"P",{});var e$e=s(nA);hzo=r(e$e,"This class cannot be instantiated directly using "),Gme=n(e$e,"CODE",{});var Jit=s(Gme);pzo=r(Jit,"__init__()"),Jit.forEach(t),_zo=r(e$e," (throws an error)."),e$e.forEach(t),uzo=i(wl),st=n(wl,"DIV",{class:!0});var Al=s(st);m(sA.$$.fragment,Al),bzo=i(Al),Ome=n(Al,"P",{});var Yit=s(Ome);Fzo=r(Yit,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Yit.forEach(t),vzo=i(Al),Qd=n(Al,"P",{});var IU=s(Qd);Tzo=r(IU,`Note:
Loading a model from its configuration file does `),Vme=n(IU,"STRONG",{});var Kit=s(Vme);Mzo=r(Kit,"not"),Kit.forEach(t),Ezo=r(IU,` load the model weights. It only affects the
model\u2019s configuration. Use `),CG=n(IU,"A",{href:!0});var Zit=s(CG);Czo=r(Zit,"from_pretrained()"),Zit.forEach(t),wzo=r(IU," to load the model weights."),IU.forEach(t),Azo=i(Al),Xme=n(Al,"P",{});var edt=s(Xme);yzo=r(edt,"Examples:"),edt.forEach(t),Lzo=i(Al),m(lA.$$.fragment,Al),Al.forEach(t),xzo=i(wl),Ze=n(wl,"DIV",{class:!0});var ra=s(Ze);m(iA.$$.fragment,ra),kzo=i(ra),zme=n(ra,"P",{});var odt=s(zme);Szo=r(odt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),odt.forEach(t),Rzo=i(ra),ln=n(ra,"P",{});var DE=s(ln);Bzo=r(DE,"The model class to instantiate is selected based on the "),Qme=n(DE,"CODE",{});var rdt=s(Qme);Pzo=r(rdt,"model_type"),rdt.forEach(t),$zo=r(DE,` property of the config object (either
passed as an argument or loaded from `),Wme=n(DE,"CODE",{});var tdt=s(Wme);Izo=r(tdt,"pretrained_model_name_or_path"),tdt.forEach(t),qzo=r(DE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hme=n(DE,"CODE",{});var adt=s(Hme);Nzo=r(adt,"pretrained_model_name_or_path"),adt.forEach(t),jzo=r(DE,":"),DE.forEach(t),Dzo=i(ra),dA=n(ra,"UL",{});var o$e=s(dA);H2=n(o$e,"LI",{});var aLe=s(H2);Ume=n(aLe,"STRONG",{});var ndt=s(Ume);Gzo=r(ndt,"speech-encoder-decoder"),ndt.forEach(t),Ozo=r(aLe," \u2014 "),wG=n(aLe,"A",{href:!0});var sdt=s(wG);Vzo=r(sdt,"SpeechEncoderDecoderModel"),sdt.forEach(t),Xzo=r(aLe," (Speech Encoder decoder model)"),aLe.forEach(t),zzo=i(o$e),U2=n(o$e,"LI",{});var nLe=s(U2);Jme=n(nLe,"STRONG",{});var ldt=s(Jme);Qzo=r(ldt,"speech_to_text"),ldt.forEach(t),Wzo=r(nLe," \u2014 "),AG=n(nLe,"A",{href:!0});var idt=s(AG);Hzo=r(idt,"Speech2TextForConditionalGeneration"),idt.forEach(t),Uzo=r(nLe," (Speech2Text model)"),nLe.forEach(t),o$e.forEach(t),Jzo=i(ra),J2=n(ra,"P",{});var sLe=s(J2);Yzo=r(sLe,"The model is set in evaluation mode by default using "),Yme=n(sLe,"CODE",{});var ddt=s(Yme);Kzo=r(ddt,"model.eval()"),ddt.forEach(t),Zzo=r(sLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kme=n(sLe,"CODE",{});var cdt=s(Kme);eQo=r(cdt,"model.train()"),cdt.forEach(t),sLe.forEach(t),oQo=i(ra),Zme=n(ra,"P",{});var fdt=s(Zme);rQo=r(fdt,"Examples:"),fdt.forEach(t),tQo=i(ra),m(cA.$$.fragment,ra),ra.forEach(t),wl.forEach(t),QRe=i(c),Wd=n(c,"H2",{class:!0});var r$e=s(Wd);Y2=n(r$e,"A",{id:!0,class:!0,href:!0});var mdt=s(Y2);ege=n(mdt,"SPAN",{});var gdt=s(ege);m(fA.$$.fragment,gdt),gdt.forEach(t),mdt.forEach(t),aQo=i(r$e),oge=n(r$e,"SPAN",{});var hdt=s(oge);nQo=r(hdt,"AutoModelForAudioXVector"),hdt.forEach(t),r$e.forEach(t),WRe=i(c),gr=n(c,"DIV",{class:!0});var yl=s(gr);m(mA.$$.fragment,yl),sQo=i(yl),Hd=n(yl,"P",{});var qU=s(Hd);lQo=r(qU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),yG=n(qU,"A",{href:!0});var pdt=s(yG);iQo=r(pdt,"from_pretrained()"),pdt.forEach(t),dQo=r(qU," class method or the "),LG=n(qU,"A",{href:!0});var _dt=s(LG);cQo=r(_dt,"from_config()"),_dt.forEach(t),fQo=r(qU,` class
method.`),qU.forEach(t),mQo=i(yl),gA=n(yl,"P",{});var t$e=s(gA);gQo=r(t$e,"This class cannot be instantiated directly using "),rge=n(t$e,"CODE",{});var udt=s(rge);hQo=r(udt,"__init__()"),udt.forEach(t),pQo=r(t$e," (throws an error)."),t$e.forEach(t),_Qo=i(yl),lt=n(yl,"DIV",{class:!0});var Ll=s(lt);m(hA.$$.fragment,Ll),uQo=i(Ll),tge=n(Ll,"P",{});var bdt=s(tge);bQo=r(bdt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),bdt.forEach(t),FQo=i(Ll),Ud=n(Ll,"P",{});var NU=s(Ud);vQo=r(NU,`Note:
Loading a model from its configuration file does `),age=n(NU,"STRONG",{});var Fdt=s(age);TQo=r(Fdt,"not"),Fdt.forEach(t),MQo=r(NU,` load the model weights. It only affects the
model\u2019s configuration. Use `),xG=n(NU,"A",{href:!0});var vdt=s(xG);EQo=r(vdt,"from_pretrained()"),vdt.forEach(t),CQo=r(NU," to load the model weights."),NU.forEach(t),wQo=i(Ll),nge=n(Ll,"P",{});var Tdt=s(nge);AQo=r(Tdt,"Examples:"),Tdt.forEach(t),yQo=i(Ll),m(pA.$$.fragment,Ll),Ll.forEach(t),LQo=i(yl),eo=n(yl,"DIV",{class:!0});var ta=s(eo);m(_A.$$.fragment,ta),xQo=i(ta),sge=n(ta,"P",{});var Mdt=s(sge);kQo=r(Mdt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Mdt.forEach(t),SQo=i(ta),dn=n(ta,"P",{});var GE=s(dn);RQo=r(GE,"The model class to instantiate is selected based on the "),lge=n(GE,"CODE",{});var Edt=s(lge);BQo=r(Edt,"model_type"),Edt.forEach(t),PQo=r(GE,` property of the config object (either
passed as an argument or loaded from `),ige=n(GE,"CODE",{});var Cdt=s(ige);$Qo=r(Cdt,"pretrained_model_name_or_path"),Cdt.forEach(t),IQo=r(GE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dge=n(GE,"CODE",{});var wdt=s(dge);qQo=r(wdt,"pretrained_model_name_or_path"),wdt.forEach(t),NQo=r(GE,":"),GE.forEach(t),jQo=i(ta),cn=n(ta,"UL",{});var OE=s(cn);K2=n(OE,"LI",{});var lLe=s(K2);cge=n(lLe,"STRONG",{});var Adt=s(cge);DQo=r(Adt,"data2vec-audio"),Adt.forEach(t),GQo=r(lLe," \u2014 "),kG=n(lLe,"A",{href:!0});var ydt=s(kG);OQo=r(ydt,"Data2VecAudioForXVector"),ydt.forEach(t),VQo=r(lLe," (Data2VecAudio model)"),lLe.forEach(t),XQo=i(OE),Z2=n(OE,"LI",{});var iLe=s(Z2);fge=n(iLe,"STRONG",{});var Ldt=s(fge);zQo=r(Ldt,"unispeech-sat"),Ldt.forEach(t),QQo=r(iLe," \u2014 "),SG=n(iLe,"A",{href:!0});var xdt=s(SG);WQo=r(xdt,"UniSpeechSatForXVector"),xdt.forEach(t),HQo=r(iLe," (UniSpeechSat model)"),iLe.forEach(t),UQo=i(OE),eF=n(OE,"LI",{});var dLe=s(eF);mge=n(dLe,"STRONG",{});var kdt=s(mge);JQo=r(kdt,"wav2vec2"),kdt.forEach(t),YQo=r(dLe," \u2014 "),RG=n(dLe,"A",{href:!0});var Sdt=s(RG);KQo=r(Sdt,"Wav2Vec2ForXVector"),Sdt.forEach(t),ZQo=r(dLe," (Wav2Vec2 model)"),dLe.forEach(t),eWo=i(OE),oF=n(OE,"LI",{});var cLe=s(oF);gge=n(cLe,"STRONG",{});var Rdt=s(gge);oWo=r(Rdt,"wavlm"),Rdt.forEach(t),rWo=r(cLe," \u2014 "),BG=n(cLe,"A",{href:!0});var Bdt=s(BG);tWo=r(Bdt,"WavLMForXVector"),Bdt.forEach(t),aWo=r(cLe," (WavLM model)"),cLe.forEach(t),OE.forEach(t),nWo=i(ta),rF=n(ta,"P",{});var fLe=s(rF);sWo=r(fLe,"The model is set in evaluation mode by default using "),hge=n(fLe,"CODE",{});var Pdt=s(hge);lWo=r(Pdt,"model.eval()"),Pdt.forEach(t),iWo=r(fLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pge=n(fLe,"CODE",{});var $dt=s(pge);dWo=r($dt,"model.train()"),$dt.forEach(t),fLe.forEach(t),cWo=i(ta),_ge=n(ta,"P",{});var Idt=s(_ge);fWo=r(Idt,"Examples:"),Idt.forEach(t),mWo=i(ta),m(uA.$$.fragment,ta),ta.forEach(t),yl.forEach(t),HRe=i(c),Jd=n(c,"H2",{class:!0});var a$e=s(Jd);tF=n(a$e,"A",{id:!0,class:!0,href:!0});var qdt=s(tF);uge=n(qdt,"SPAN",{});var Ndt=s(uge);m(bA.$$.fragment,Ndt),Ndt.forEach(t),qdt.forEach(t),gWo=i(a$e),bge=n(a$e,"SPAN",{});var jdt=s(bge);hWo=r(jdt,"AutoModelForMaskedImageModeling"),jdt.forEach(t),a$e.forEach(t),URe=i(c),hr=n(c,"DIV",{class:!0});var xl=s(hr);m(FA.$$.fragment,xl),pWo=i(xl),Yd=n(xl,"P",{});var jU=s(Yd);_Wo=r(jU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),PG=n(jU,"A",{href:!0});var Ddt=s(PG);uWo=r(Ddt,"from_pretrained()"),Ddt.forEach(t),bWo=r(jU," class method or the "),$G=n(jU,"A",{href:!0});var Gdt=s($G);FWo=r(Gdt,"from_config()"),Gdt.forEach(t),vWo=r(jU,` class
method.`),jU.forEach(t),TWo=i(xl),vA=n(xl,"P",{});var n$e=s(vA);MWo=r(n$e,"This class cannot be instantiated directly using "),Fge=n(n$e,"CODE",{});var Odt=s(Fge);EWo=r(Odt,"__init__()"),Odt.forEach(t),CWo=r(n$e," (throws an error)."),n$e.forEach(t),wWo=i(xl),it=n(xl,"DIV",{class:!0});var kl=s(it);m(TA.$$.fragment,kl),AWo=i(kl),vge=n(kl,"P",{});var Vdt=s(vge);yWo=r(Vdt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Vdt.forEach(t),LWo=i(kl),Kd=n(kl,"P",{});var DU=s(Kd);xWo=r(DU,`Note:
Loading a model from its configuration file does `),Tge=n(DU,"STRONG",{});var Xdt=s(Tge);kWo=r(Xdt,"not"),Xdt.forEach(t),SWo=r(DU,` load the model weights. It only affects the
model\u2019s configuration. Use `),IG=n(DU,"A",{href:!0});var zdt=s(IG);RWo=r(zdt,"from_pretrained()"),zdt.forEach(t),BWo=r(DU," to load the model weights."),DU.forEach(t),PWo=i(kl),Mge=n(kl,"P",{});var Qdt=s(Mge);$Wo=r(Qdt,"Examples:"),Qdt.forEach(t),IWo=i(kl),m(MA.$$.fragment,kl),kl.forEach(t),qWo=i(xl),oo=n(xl,"DIV",{class:!0});var aa=s(oo);m(EA.$$.fragment,aa),NWo=i(aa),Ege=n(aa,"P",{});var Wdt=s(Ege);jWo=r(Wdt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Wdt.forEach(t),DWo=i(aa),fn=n(aa,"P",{});var VE=s(fn);GWo=r(VE,"The model class to instantiate is selected based on the "),Cge=n(VE,"CODE",{});var Hdt=s(Cge);OWo=r(Hdt,"model_type"),Hdt.forEach(t),VWo=r(VE,` property of the config object (either
passed as an argument or loaded from `),wge=n(VE,"CODE",{});var Udt=s(wge);XWo=r(Udt,"pretrained_model_name_or_path"),Udt.forEach(t),zWo=r(VE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Age=n(VE,"CODE",{});var Jdt=s(Age);QWo=r(Jdt,"pretrained_model_name_or_path"),Jdt.forEach(t),WWo=r(VE,":"),VE.forEach(t),HWo=i(aa),Zd=n(aa,"UL",{});var GU=s(Zd);aF=n(GU,"LI",{});var mLe=s(aF);yge=n(mLe,"STRONG",{});var Ydt=s(yge);UWo=r(Ydt,"deit"),Ydt.forEach(t),JWo=r(mLe," \u2014 "),qG=n(mLe,"A",{href:!0});var Kdt=s(qG);YWo=r(Kdt,"DeiTForMaskedImageModeling"),Kdt.forEach(t),KWo=r(mLe," (DeiT model)"),mLe.forEach(t),ZWo=i(GU),nF=n(GU,"LI",{});var gLe=s(nF);Lge=n(gLe,"STRONG",{});var Zdt=s(Lge);eHo=r(Zdt,"swin"),Zdt.forEach(t),oHo=r(gLe," \u2014 "),NG=n(gLe,"A",{href:!0});var ect=s(NG);rHo=r(ect,"SwinForMaskedImageModeling"),ect.forEach(t),tHo=r(gLe," (Swin model)"),gLe.forEach(t),aHo=i(GU),sF=n(GU,"LI",{});var hLe=s(sF);xge=n(hLe,"STRONG",{});var oct=s(xge);nHo=r(oct,"vit"),oct.forEach(t),sHo=r(hLe," \u2014 "),jG=n(hLe,"A",{href:!0});var rct=s(jG);lHo=r(rct,"ViTForMaskedImageModeling"),rct.forEach(t),iHo=r(hLe," (ViT model)"),hLe.forEach(t),GU.forEach(t),dHo=i(aa),lF=n(aa,"P",{});var pLe=s(lF);cHo=r(pLe,"The model is set in evaluation mode by default using "),kge=n(pLe,"CODE",{});var tct=s(kge);fHo=r(tct,"model.eval()"),tct.forEach(t),mHo=r(pLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sge=n(pLe,"CODE",{});var act=s(Sge);gHo=r(act,"model.train()"),act.forEach(t),pLe.forEach(t),hHo=i(aa),Rge=n(aa,"P",{});var nct=s(Rge);pHo=r(nct,"Examples:"),nct.forEach(t),_Ho=i(aa),m(CA.$$.fragment,aa),aa.forEach(t),xl.forEach(t),JRe=i(c),ec=n(c,"H2",{class:!0});var s$e=s(ec);iF=n(s$e,"A",{id:!0,class:!0,href:!0});var sct=s(iF);Bge=n(sct,"SPAN",{});var lct=s(Bge);m(wA.$$.fragment,lct),lct.forEach(t),sct.forEach(t),uHo=i(s$e),Pge=n(s$e,"SPAN",{});var ict=s(Pge);bHo=r(ict,"AutoModelForObjectDetection"),ict.forEach(t),s$e.forEach(t),YRe=i(c),pr=n(c,"DIV",{class:!0});var Sl=s(pr);m(AA.$$.fragment,Sl),FHo=i(Sl),oc=n(Sl,"P",{});var OU=s(oc);vHo=r(OU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),DG=n(OU,"A",{href:!0});var dct=s(DG);THo=r(dct,"from_pretrained()"),dct.forEach(t),MHo=r(OU," class method or the "),GG=n(OU,"A",{href:!0});var cct=s(GG);EHo=r(cct,"from_config()"),cct.forEach(t),CHo=r(OU,` class
method.`),OU.forEach(t),wHo=i(Sl),yA=n(Sl,"P",{});var l$e=s(yA);AHo=r(l$e,"This class cannot be instantiated directly using "),$ge=n(l$e,"CODE",{});var fct=s($ge);yHo=r(fct,"__init__()"),fct.forEach(t),LHo=r(l$e," (throws an error)."),l$e.forEach(t),xHo=i(Sl),dt=n(Sl,"DIV",{class:!0});var Rl=s(dt);m(LA.$$.fragment,Rl),kHo=i(Rl),Ige=n(Rl,"P",{});var mct=s(Ige);SHo=r(mct,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),mct.forEach(t),RHo=i(Rl),rc=n(Rl,"P",{});var VU=s(rc);BHo=r(VU,`Note:
Loading a model from its configuration file does `),qge=n(VU,"STRONG",{});var gct=s(qge);PHo=r(gct,"not"),gct.forEach(t),$Ho=r(VU,` load the model weights. It only affects the
model\u2019s configuration. Use `),OG=n(VU,"A",{href:!0});var hct=s(OG);IHo=r(hct,"from_pretrained()"),hct.forEach(t),qHo=r(VU," to load the model weights."),VU.forEach(t),NHo=i(Rl),Nge=n(Rl,"P",{});var pct=s(Nge);jHo=r(pct,"Examples:"),pct.forEach(t),DHo=i(Rl),m(xA.$$.fragment,Rl),Rl.forEach(t),GHo=i(Sl),ro=n(Sl,"DIV",{class:!0});var na=s(ro);m(kA.$$.fragment,na),OHo=i(na),jge=n(na,"P",{});var _ct=s(jge);VHo=r(_ct,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),_ct.forEach(t),XHo=i(na),mn=n(na,"P",{});var XE=s(mn);zHo=r(XE,"The model class to instantiate is selected based on the "),Dge=n(XE,"CODE",{});var uct=s(Dge);QHo=r(uct,"model_type"),uct.forEach(t),WHo=r(XE,` property of the config object (either
passed as an argument or loaded from `),Gge=n(XE,"CODE",{});var bct=s(Gge);HHo=r(bct,"pretrained_model_name_or_path"),bct.forEach(t),UHo=r(XE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oge=n(XE,"CODE",{});var Fct=s(Oge);JHo=r(Fct,"pretrained_model_name_or_path"),Fct.forEach(t),YHo=r(XE,":"),XE.forEach(t),KHo=i(na),Vge=n(na,"UL",{});var vct=s(Vge);dF=n(vct,"LI",{});var _Le=s(dF);Xge=n(_Le,"STRONG",{});var Tct=s(Xge);ZHo=r(Tct,"detr"),Tct.forEach(t),eUo=r(_Le," \u2014 "),VG=n(_Le,"A",{href:!0});var Mct=s(VG);oUo=r(Mct,"DetrForObjectDetection"),Mct.forEach(t),rUo=r(_Le," (DETR model)"),_Le.forEach(t),vct.forEach(t),tUo=i(na),cF=n(na,"P",{});var uLe=s(cF);aUo=r(uLe,"The model is set in evaluation mode by default using "),zge=n(uLe,"CODE",{});var Ect=s(zge);nUo=r(Ect,"model.eval()"),Ect.forEach(t),sUo=r(uLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qge=n(uLe,"CODE",{});var Cct=s(Qge);lUo=r(Cct,"model.train()"),Cct.forEach(t),uLe.forEach(t),iUo=i(na),Wge=n(na,"P",{});var wct=s(Wge);dUo=r(wct,"Examples:"),wct.forEach(t),cUo=i(na),m(SA.$$.fragment,na),na.forEach(t),Sl.forEach(t),KRe=i(c),tc=n(c,"H2",{class:!0});var i$e=s(tc);fF=n(i$e,"A",{id:!0,class:!0,href:!0});var Act=s(fF);Hge=n(Act,"SPAN",{});var yct=s(Hge);m(RA.$$.fragment,yct),yct.forEach(t),Act.forEach(t),fUo=i(i$e),Uge=n(i$e,"SPAN",{});var Lct=s(Uge);mUo=r(Lct,"AutoModelForImageSegmentation"),Lct.forEach(t),i$e.forEach(t),ZRe=i(c),_r=n(c,"DIV",{class:!0});var Bl=s(_r);m(BA.$$.fragment,Bl),gUo=i(Bl),ac=n(Bl,"P",{});var XU=s(ac);hUo=r(XU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),XG=n(XU,"A",{href:!0});var xct=s(XG);pUo=r(xct,"from_pretrained()"),xct.forEach(t),_Uo=r(XU," class method or the "),zG=n(XU,"A",{href:!0});var kct=s(zG);uUo=r(kct,"from_config()"),kct.forEach(t),bUo=r(XU,` class
method.`),XU.forEach(t),FUo=i(Bl),PA=n(Bl,"P",{});var d$e=s(PA);vUo=r(d$e,"This class cannot be instantiated directly using "),Jge=n(d$e,"CODE",{});var Sct=s(Jge);TUo=r(Sct,"__init__()"),Sct.forEach(t),MUo=r(d$e," (throws an error)."),d$e.forEach(t),EUo=i(Bl),ct=n(Bl,"DIV",{class:!0});var Pl=s(ct);m($A.$$.fragment,Pl),CUo=i(Pl),Yge=n(Pl,"P",{});var Rct=s(Yge);wUo=r(Rct,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Rct.forEach(t),AUo=i(Pl),nc=n(Pl,"P",{});var zU=s(nc);yUo=r(zU,`Note:
Loading a model from its configuration file does `),Kge=n(zU,"STRONG",{});var Bct=s(Kge);LUo=r(Bct,"not"),Bct.forEach(t),xUo=r(zU,` load the model weights. It only affects the
model\u2019s configuration. Use `),QG=n(zU,"A",{href:!0});var Pct=s(QG);kUo=r(Pct,"from_pretrained()"),Pct.forEach(t),SUo=r(zU," to load the model weights."),zU.forEach(t),RUo=i(Pl),Zge=n(Pl,"P",{});var $ct=s(Zge);BUo=r($ct,"Examples:"),$ct.forEach(t),PUo=i(Pl),m(IA.$$.fragment,Pl),Pl.forEach(t),$Uo=i(Bl),to=n(Bl,"DIV",{class:!0});var sa=s(to);m(qA.$$.fragment,sa),IUo=i(sa),ehe=n(sa,"P",{});var Ict=s(ehe);qUo=r(Ict,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Ict.forEach(t),NUo=i(sa),gn=n(sa,"P",{});var zE=s(gn);jUo=r(zE,"The model class to instantiate is selected based on the "),ohe=n(zE,"CODE",{});var qct=s(ohe);DUo=r(qct,"model_type"),qct.forEach(t),GUo=r(zE,` property of the config object (either
passed as an argument or loaded from `),rhe=n(zE,"CODE",{});var Nct=s(rhe);OUo=r(Nct,"pretrained_model_name_or_path"),Nct.forEach(t),VUo=r(zE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),the=n(zE,"CODE",{});var jct=s(the);XUo=r(jct,"pretrained_model_name_or_path"),jct.forEach(t),zUo=r(zE,":"),zE.forEach(t),QUo=i(sa),ahe=n(sa,"UL",{});var Dct=s(ahe);mF=n(Dct,"LI",{});var bLe=s(mF);nhe=n(bLe,"STRONG",{});var Gct=s(nhe);WUo=r(Gct,"detr"),Gct.forEach(t),HUo=r(bLe," \u2014 "),WG=n(bLe,"A",{href:!0});var Oct=s(WG);UUo=r(Oct,"DetrForSegmentation"),Oct.forEach(t),JUo=r(bLe," (DETR model)"),bLe.forEach(t),Dct.forEach(t),YUo=i(sa),gF=n(sa,"P",{});var FLe=s(gF);KUo=r(FLe,"The model is set in evaluation mode by default using "),she=n(FLe,"CODE",{});var Vct=s(she);ZUo=r(Vct,"model.eval()"),Vct.forEach(t),eJo=r(FLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lhe=n(FLe,"CODE",{});var Xct=s(lhe);oJo=r(Xct,"model.train()"),Xct.forEach(t),FLe.forEach(t),rJo=i(sa),ihe=n(sa,"P",{});var zct=s(ihe);tJo=r(zct,"Examples:"),zct.forEach(t),aJo=i(sa),m(NA.$$.fragment,sa),sa.forEach(t),Bl.forEach(t),eBe=i(c),sc=n(c,"H2",{class:!0});var c$e=s(sc);hF=n(c$e,"A",{id:!0,class:!0,href:!0});var Qct=s(hF);dhe=n(Qct,"SPAN",{});var Wct=s(dhe);m(jA.$$.fragment,Wct),Wct.forEach(t),Qct.forEach(t),nJo=i(c$e),che=n(c$e,"SPAN",{});var Hct=s(che);sJo=r(Hct,"AutoModelForSemanticSegmentation"),Hct.forEach(t),c$e.forEach(t),oBe=i(c),ur=n(c,"DIV",{class:!0});var $l=s(ur);m(DA.$$.fragment,$l),lJo=i($l),lc=n($l,"P",{});var QU=s(lc);iJo=r(QU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),HG=n(QU,"A",{href:!0});var Uct=s(HG);dJo=r(Uct,"from_pretrained()"),Uct.forEach(t),cJo=r(QU," class method or the "),UG=n(QU,"A",{href:!0});var Jct=s(UG);fJo=r(Jct,"from_config()"),Jct.forEach(t),mJo=r(QU,` class
method.`),QU.forEach(t),gJo=i($l),GA=n($l,"P",{});var f$e=s(GA);hJo=r(f$e,"This class cannot be instantiated directly using "),fhe=n(f$e,"CODE",{});var Yct=s(fhe);pJo=r(Yct,"__init__()"),Yct.forEach(t),_Jo=r(f$e," (throws an error)."),f$e.forEach(t),uJo=i($l),ft=n($l,"DIV",{class:!0});var Il=s(ft);m(OA.$$.fragment,Il),bJo=i(Il),mhe=n(Il,"P",{});var Kct=s(mhe);FJo=r(Kct,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Kct.forEach(t),vJo=i(Il),ic=n(Il,"P",{});var WU=s(ic);TJo=r(WU,`Note:
Loading a model from its configuration file does `),ghe=n(WU,"STRONG",{});var Zct=s(ghe);MJo=r(Zct,"not"),Zct.forEach(t),EJo=r(WU,` load the model weights. It only affects the
model\u2019s configuration. Use `),JG=n(WU,"A",{href:!0});var eft=s(JG);CJo=r(eft,"from_pretrained()"),eft.forEach(t),wJo=r(WU," to load the model weights."),WU.forEach(t),AJo=i(Il),hhe=n(Il,"P",{});var oft=s(hhe);yJo=r(oft,"Examples:"),oft.forEach(t),LJo=i(Il),m(VA.$$.fragment,Il),Il.forEach(t),xJo=i($l),ao=n($l,"DIV",{class:!0});var la=s(ao);m(XA.$$.fragment,la),kJo=i(la),phe=n(la,"P",{});var rft=s(phe);SJo=r(rft,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),rft.forEach(t),RJo=i(la),hn=n(la,"P",{});var QE=s(hn);BJo=r(QE,"The model class to instantiate is selected based on the "),_he=n(QE,"CODE",{});var tft=s(_he);PJo=r(tft,"model_type"),tft.forEach(t),$Jo=r(QE,` property of the config object (either
passed as an argument or loaded from `),uhe=n(QE,"CODE",{});var aft=s(uhe);IJo=r(aft,"pretrained_model_name_or_path"),aft.forEach(t),qJo=r(QE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bhe=n(QE,"CODE",{});var nft=s(bhe);NJo=r(nft,"pretrained_model_name_or_path"),nft.forEach(t),jJo=r(QE,":"),QE.forEach(t),DJo=i(la),dc=n(la,"UL",{});var HU=s(dc);pF=n(HU,"LI",{});var vLe=s(pF);Fhe=n(vLe,"STRONG",{});var sft=s(Fhe);GJo=r(sft,"beit"),sft.forEach(t),OJo=r(vLe," \u2014 "),YG=n(vLe,"A",{href:!0});var lft=s(YG);VJo=r(lft,"BeitForSemanticSegmentation"),lft.forEach(t),XJo=r(vLe," (BEiT model)"),vLe.forEach(t),zJo=i(HU),_F=n(HU,"LI",{});var TLe=s(_F);vhe=n(TLe,"STRONG",{});var ift=s(vhe);QJo=r(ift,"dpt"),ift.forEach(t),WJo=r(TLe," \u2014 "),KG=n(TLe,"A",{href:!0});var dft=s(KG);HJo=r(dft,"DPTForSemanticSegmentation"),dft.forEach(t),UJo=r(TLe," (DPT model)"),TLe.forEach(t),JJo=i(HU),uF=n(HU,"LI",{});var MLe=s(uF);The=n(MLe,"STRONG",{});var cft=s(The);YJo=r(cft,"segformer"),cft.forEach(t),KJo=r(MLe," \u2014 "),ZG=n(MLe,"A",{href:!0});var fft=s(ZG);ZJo=r(fft,"SegformerForSemanticSegmentation"),fft.forEach(t),eYo=r(MLe," (SegFormer model)"),MLe.forEach(t),HU.forEach(t),oYo=i(la),bF=n(la,"P",{});var ELe=s(bF);rYo=r(ELe,"The model is set in evaluation mode by default using "),Mhe=n(ELe,"CODE",{});var mft=s(Mhe);tYo=r(mft,"model.eval()"),mft.forEach(t),aYo=r(ELe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ehe=n(ELe,"CODE",{});var gft=s(Ehe);nYo=r(gft,"model.train()"),gft.forEach(t),ELe.forEach(t),sYo=i(la),Che=n(la,"P",{});var hft=s(Che);lYo=r(hft,"Examples:"),hft.forEach(t),iYo=i(la),m(zA.$$.fragment,la),la.forEach(t),$l.forEach(t),rBe=i(c),cc=n(c,"H2",{class:!0});var m$e=s(cc);FF=n(m$e,"A",{id:!0,class:!0,href:!0});var pft=s(FF);whe=n(pft,"SPAN",{});var _ft=s(whe);m(QA.$$.fragment,_ft),_ft.forEach(t),pft.forEach(t),dYo=i(m$e),Ahe=n(m$e,"SPAN",{});var uft=s(Ahe);cYo=r(uft,"AutoModelForInstanceSegmentation"),uft.forEach(t),m$e.forEach(t),tBe=i(c),br=n(c,"DIV",{class:!0});var ql=s(br);m(WA.$$.fragment,ql),fYo=i(ql),fc=n(ql,"P",{});var UU=s(fc);mYo=r(UU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),eO=n(UU,"A",{href:!0});var bft=s(eO);gYo=r(bft,"from_pretrained()"),bft.forEach(t),hYo=r(UU," class method or the "),oO=n(UU,"A",{href:!0});var Fft=s(oO);pYo=r(Fft,"from_config()"),Fft.forEach(t),_Yo=r(UU,` class
method.`),UU.forEach(t),uYo=i(ql),HA=n(ql,"P",{});var g$e=s(HA);bYo=r(g$e,"This class cannot be instantiated directly using "),yhe=n(g$e,"CODE",{});var vft=s(yhe);FYo=r(vft,"__init__()"),vft.forEach(t),vYo=r(g$e," (throws an error)."),g$e.forEach(t),TYo=i(ql),mt=n(ql,"DIV",{class:!0});var Nl=s(mt);m(UA.$$.fragment,Nl),MYo=i(Nl),Lhe=n(Nl,"P",{});var Tft=s(Lhe);EYo=r(Tft,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Tft.forEach(t),CYo=i(Nl),mc=n(Nl,"P",{});var JU=s(mc);wYo=r(JU,`Note:
Loading a model from its configuration file does `),xhe=n(JU,"STRONG",{});var Mft=s(xhe);AYo=r(Mft,"not"),Mft.forEach(t),yYo=r(JU,` load the model weights. It only affects the
model\u2019s configuration. Use `),rO=n(JU,"A",{href:!0});var Eft=s(rO);LYo=r(Eft,"from_pretrained()"),Eft.forEach(t),xYo=r(JU," to load the model weights."),JU.forEach(t),kYo=i(Nl),khe=n(Nl,"P",{});var Cft=s(khe);SYo=r(Cft,"Examples:"),Cft.forEach(t),RYo=i(Nl),m(JA.$$.fragment,Nl),Nl.forEach(t),BYo=i(ql),no=n(ql,"DIV",{class:!0});var ia=s(no);m(YA.$$.fragment,ia),PYo=i(ia),She=n(ia,"P",{});var wft=s(She);$Yo=r(wft,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),wft.forEach(t),IYo=i(ia),pn=n(ia,"P",{});var WE=s(pn);qYo=r(WE,"The model class to instantiate is selected based on the "),Rhe=n(WE,"CODE",{});var Aft=s(Rhe);NYo=r(Aft,"model_type"),Aft.forEach(t),jYo=r(WE,` property of the config object (either
passed as an argument or loaded from `),Bhe=n(WE,"CODE",{});var yft=s(Bhe);DYo=r(yft,"pretrained_model_name_or_path"),yft.forEach(t),GYo=r(WE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Phe=n(WE,"CODE",{});var Lft=s(Phe);OYo=r(Lft,"pretrained_model_name_or_path"),Lft.forEach(t),VYo=r(WE,":"),WE.forEach(t),XYo=i(ia),$he=n(ia,"UL",{});var xft=s($he);vF=n(xft,"LI",{});var CLe=s(vF);Ihe=n(CLe,"STRONG",{});var kft=s(Ihe);zYo=r(kft,"maskformer"),kft.forEach(t),QYo=r(CLe," \u2014 "),tO=n(CLe,"A",{href:!0});var Sft=s(tO);WYo=r(Sft,"MaskFormerForInstanceSegmentation"),Sft.forEach(t),HYo=r(CLe," (MaskFormer model)"),CLe.forEach(t),xft.forEach(t),UYo=i(ia),TF=n(ia,"P",{});var wLe=s(TF);JYo=r(wLe,"The model is set in evaluation mode by default using "),qhe=n(wLe,"CODE",{});var Rft=s(qhe);YYo=r(Rft,"model.eval()"),Rft.forEach(t),KYo=r(wLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nhe=n(wLe,"CODE",{});var Bft=s(Nhe);ZYo=r(Bft,"model.train()"),Bft.forEach(t),wLe.forEach(t),eKo=i(ia),jhe=n(ia,"P",{});var Pft=s(jhe);oKo=r(Pft,"Examples:"),Pft.forEach(t),rKo=i(ia),m(KA.$$.fragment,ia),ia.forEach(t),ql.forEach(t),aBe=i(c),gc=n(c,"H2",{class:!0});var h$e=s(gc);MF=n(h$e,"A",{id:!0,class:!0,href:!0});var $ft=s(MF);Dhe=n($ft,"SPAN",{});var Ift=s(Dhe);m(ZA.$$.fragment,Ift),Ift.forEach(t),$ft.forEach(t),tKo=i(h$e),Ghe=n(h$e,"SPAN",{});var qft=s(Ghe);aKo=r(qft,"TFAutoModel"),qft.forEach(t),h$e.forEach(t),nBe=i(c),Fr=n(c,"DIV",{class:!0});var jl=s(Fr);m(e0.$$.fragment,jl),nKo=i(jl),hc=n(jl,"P",{});var YU=s(hc);sKo=r(YU,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),aO=n(YU,"A",{href:!0});var Nft=s(aO);lKo=r(Nft,"from_pretrained()"),Nft.forEach(t),iKo=r(YU," class method or the "),nO=n(YU,"A",{href:!0});var jft=s(nO);dKo=r(jft,"from_config()"),jft.forEach(t),cKo=r(YU,` class
method.`),YU.forEach(t),fKo=i(jl),o0=n(jl,"P",{});var p$e=s(o0);mKo=r(p$e,"This class cannot be instantiated directly using "),Ohe=n(p$e,"CODE",{});var Dft=s(Ohe);gKo=r(Dft,"__init__()"),Dft.forEach(t),hKo=r(p$e," (throws an error)."),p$e.forEach(t),pKo=i(jl),gt=n(jl,"DIV",{class:!0});var Dl=s(gt);m(r0.$$.fragment,Dl),_Ko=i(Dl),Vhe=n(Dl,"P",{});var Gft=s(Vhe);uKo=r(Gft,"Instantiates one of the base model classes of the library from a configuration."),Gft.forEach(t),bKo=i(Dl),pc=n(Dl,"P",{});var KU=s(pc);FKo=r(KU,`Note:
Loading a model from its configuration file does `),Xhe=n(KU,"STRONG",{});var Oft=s(Xhe);vKo=r(Oft,"not"),Oft.forEach(t),TKo=r(KU,` load the model weights. It only affects the
model\u2019s configuration. Use `),sO=n(KU,"A",{href:!0});var Vft=s(sO);MKo=r(Vft,"from_pretrained()"),Vft.forEach(t),EKo=r(KU," to load the model weights."),KU.forEach(t),CKo=i(Dl),zhe=n(Dl,"P",{});var Xft=s(zhe);wKo=r(Xft,"Examples:"),Xft.forEach(t),AKo=i(Dl),m(t0.$$.fragment,Dl),Dl.forEach(t),yKo=i(jl),ho=n(jl,"DIV",{class:!0});var pa=s(ho);m(a0.$$.fragment,pa),LKo=i(pa),Qhe=n(pa,"P",{});var zft=s(Qhe);xKo=r(zft,"Instantiate one of the base model classes of the library from a pretrained model."),zft.forEach(t),kKo=i(pa),_n=n(pa,"P",{});var HE=s(_n);SKo=r(HE,"The model class to instantiate is selected based on the "),Whe=n(HE,"CODE",{});var Qft=s(Whe);RKo=r(Qft,"model_type"),Qft.forEach(t),BKo=r(HE,` property of the config object (either
passed as an argument or loaded from `),Hhe=n(HE,"CODE",{});var Wft=s(Hhe);PKo=r(Wft,"pretrained_model_name_or_path"),Wft.forEach(t),$Ko=r(HE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uhe=n(HE,"CODE",{});var Hft=s(Uhe);IKo=r(Hft,"pretrained_model_name_or_path"),Hft.forEach(t),qKo=r(HE,":"),HE.forEach(t),NKo=i(pa),x=n(pa,"UL",{});var k=s(x);EF=n(k,"LI",{});var ALe=s(EF);Jhe=n(ALe,"STRONG",{});var Uft=s(Jhe);jKo=r(Uft,"albert"),Uft.forEach(t),DKo=r(ALe," \u2014 "),lO=n(ALe,"A",{href:!0});var Jft=s(lO);GKo=r(Jft,"TFAlbertModel"),Jft.forEach(t),OKo=r(ALe," (ALBERT model)"),ALe.forEach(t),VKo=i(k),CF=n(k,"LI",{});var yLe=s(CF);Yhe=n(yLe,"STRONG",{});var Yft=s(Yhe);XKo=r(Yft,"bart"),Yft.forEach(t),zKo=r(yLe," \u2014 "),iO=n(yLe,"A",{href:!0});var Kft=s(iO);QKo=r(Kft,"TFBartModel"),Kft.forEach(t),WKo=r(yLe," (BART model)"),yLe.forEach(t),HKo=i(k),wF=n(k,"LI",{});var LLe=s(wF);Khe=n(LLe,"STRONG",{});var Zft=s(Khe);UKo=r(Zft,"bert"),Zft.forEach(t),JKo=r(LLe," \u2014 "),dO=n(LLe,"A",{href:!0});var emt=s(dO);YKo=r(emt,"TFBertModel"),emt.forEach(t),KKo=r(LLe," (BERT model)"),LLe.forEach(t),ZKo=i(k),AF=n(k,"LI",{});var xLe=s(AF);Zhe=n(xLe,"STRONG",{});var omt=s(Zhe);eZo=r(omt,"blenderbot"),omt.forEach(t),oZo=r(xLe," \u2014 "),cO=n(xLe,"A",{href:!0});var rmt=s(cO);rZo=r(rmt,"TFBlenderbotModel"),rmt.forEach(t),tZo=r(xLe," (Blenderbot model)"),xLe.forEach(t),aZo=i(k),yF=n(k,"LI",{});var kLe=s(yF);epe=n(kLe,"STRONG",{});var tmt=s(epe);nZo=r(tmt,"blenderbot-small"),tmt.forEach(t),sZo=r(kLe," \u2014 "),fO=n(kLe,"A",{href:!0});var amt=s(fO);lZo=r(amt,"TFBlenderbotSmallModel"),amt.forEach(t),iZo=r(kLe," (BlenderbotSmall model)"),kLe.forEach(t),dZo=i(k),LF=n(k,"LI",{});var SLe=s(LF);ope=n(SLe,"STRONG",{});var nmt=s(ope);cZo=r(nmt,"camembert"),nmt.forEach(t),fZo=r(SLe," \u2014 "),mO=n(SLe,"A",{href:!0});var smt=s(mO);mZo=r(smt,"TFCamembertModel"),smt.forEach(t),gZo=r(SLe," (CamemBERT model)"),SLe.forEach(t),hZo=i(k),xF=n(k,"LI",{});var RLe=s(xF);rpe=n(RLe,"STRONG",{});var lmt=s(rpe);pZo=r(lmt,"clip"),lmt.forEach(t),_Zo=r(RLe," \u2014 "),gO=n(RLe,"A",{href:!0});var imt=s(gO);uZo=r(imt,"TFCLIPModel"),imt.forEach(t),bZo=r(RLe," (CLIP model)"),RLe.forEach(t),FZo=i(k),kF=n(k,"LI",{});var BLe=s(kF);tpe=n(BLe,"STRONG",{});var dmt=s(tpe);vZo=r(dmt,"convbert"),dmt.forEach(t),TZo=r(BLe," \u2014 "),hO=n(BLe,"A",{href:!0});var cmt=s(hO);MZo=r(cmt,"TFConvBertModel"),cmt.forEach(t),EZo=r(BLe," (ConvBERT model)"),BLe.forEach(t),CZo=i(k),SF=n(k,"LI",{});var PLe=s(SF);ape=n(PLe,"STRONG",{});var fmt=s(ape);wZo=r(fmt,"convnext"),fmt.forEach(t),AZo=r(PLe," \u2014 "),pO=n(PLe,"A",{href:!0});var mmt=s(pO);yZo=r(mmt,"TFConvNextModel"),mmt.forEach(t),LZo=r(PLe," (ConvNext model)"),PLe.forEach(t),xZo=i(k),RF=n(k,"LI",{});var $Le=s(RF);npe=n($Le,"STRONG",{});var gmt=s(npe);kZo=r(gmt,"ctrl"),gmt.forEach(t),SZo=r($Le," \u2014 "),_O=n($Le,"A",{href:!0});var hmt=s(_O);RZo=r(hmt,"TFCTRLModel"),hmt.forEach(t),BZo=r($Le," (CTRL model)"),$Le.forEach(t),PZo=i(k),BF=n(k,"LI",{});var ILe=s(BF);spe=n(ILe,"STRONG",{});var pmt=s(spe);$Zo=r(pmt,"deberta"),pmt.forEach(t),IZo=r(ILe," \u2014 "),uO=n(ILe,"A",{href:!0});var _mt=s(uO);qZo=r(_mt,"TFDebertaModel"),_mt.forEach(t),NZo=r(ILe," (DeBERTa model)"),ILe.forEach(t),jZo=i(k),PF=n(k,"LI",{});var qLe=s(PF);lpe=n(qLe,"STRONG",{});var umt=s(lpe);DZo=r(umt,"deberta-v2"),umt.forEach(t),GZo=r(qLe," \u2014 "),bO=n(qLe,"A",{href:!0});var bmt=s(bO);OZo=r(bmt,"TFDebertaV2Model"),bmt.forEach(t),VZo=r(qLe," (DeBERTa-v2 model)"),qLe.forEach(t),XZo=i(k),$F=n(k,"LI",{});var NLe=s($F);ipe=n(NLe,"STRONG",{});var Fmt=s(ipe);zZo=r(Fmt,"distilbert"),Fmt.forEach(t),QZo=r(NLe," \u2014 "),FO=n(NLe,"A",{href:!0});var vmt=s(FO);WZo=r(vmt,"TFDistilBertModel"),vmt.forEach(t),HZo=r(NLe," (DistilBERT model)"),NLe.forEach(t),UZo=i(k),IF=n(k,"LI",{});var jLe=s(IF);dpe=n(jLe,"STRONG",{});var Tmt=s(dpe);JZo=r(Tmt,"dpr"),Tmt.forEach(t),YZo=r(jLe," \u2014 "),vO=n(jLe,"A",{href:!0});var Mmt=s(vO);KZo=r(Mmt,"TFDPRQuestionEncoder"),Mmt.forEach(t),ZZo=r(jLe," (DPR model)"),jLe.forEach(t),eer=i(k),qF=n(k,"LI",{});var DLe=s(qF);cpe=n(DLe,"STRONG",{});var Emt=s(cpe);oer=r(Emt,"electra"),Emt.forEach(t),rer=r(DLe," \u2014 "),TO=n(DLe,"A",{href:!0});var Cmt=s(TO);ter=r(Cmt,"TFElectraModel"),Cmt.forEach(t),aer=r(DLe," (ELECTRA model)"),DLe.forEach(t),ner=i(k),NF=n(k,"LI",{});var GLe=s(NF);fpe=n(GLe,"STRONG",{});var wmt=s(fpe);ser=r(wmt,"flaubert"),wmt.forEach(t),ler=r(GLe," \u2014 "),MO=n(GLe,"A",{href:!0});var Amt=s(MO);ier=r(Amt,"TFFlaubertModel"),Amt.forEach(t),der=r(GLe," (FlauBERT model)"),GLe.forEach(t),cer=i(k),Gs=n(k,"LI",{});var c9=s(Gs);mpe=n(c9,"STRONG",{});var ymt=s(mpe);fer=r(ymt,"funnel"),ymt.forEach(t),mer=r(c9," \u2014 "),EO=n(c9,"A",{href:!0});var Lmt=s(EO);ger=r(Lmt,"TFFunnelModel"),Lmt.forEach(t),her=r(c9," or "),CO=n(c9,"A",{href:!0});var xmt=s(CO);per=r(xmt,"TFFunnelBaseModel"),xmt.forEach(t),_er=r(c9," (Funnel Transformer model)"),c9.forEach(t),uer=i(k),jF=n(k,"LI",{});var OLe=s(jF);gpe=n(OLe,"STRONG",{});var kmt=s(gpe);ber=r(kmt,"gpt2"),kmt.forEach(t),Fer=r(OLe," \u2014 "),wO=n(OLe,"A",{href:!0});var Smt=s(wO);ver=r(Smt,"TFGPT2Model"),Smt.forEach(t),Ter=r(OLe," (OpenAI GPT-2 model)"),OLe.forEach(t),Mer=i(k),DF=n(k,"LI",{});var VLe=s(DF);hpe=n(VLe,"STRONG",{});var Rmt=s(hpe);Eer=r(Rmt,"gptj"),Rmt.forEach(t),Cer=r(VLe," \u2014 "),AO=n(VLe,"A",{href:!0});var Bmt=s(AO);wer=r(Bmt,"TFGPTJModel"),Bmt.forEach(t),Aer=r(VLe," (GPT-J model)"),VLe.forEach(t),yer=i(k),GF=n(k,"LI",{});var XLe=s(GF);ppe=n(XLe,"STRONG",{});var Pmt=s(ppe);Ler=r(Pmt,"hubert"),Pmt.forEach(t),xer=r(XLe," \u2014 "),yO=n(XLe,"A",{href:!0});var $mt=s(yO);ker=r($mt,"TFHubertModel"),$mt.forEach(t),Ser=r(XLe," (Hubert model)"),XLe.forEach(t),Rer=i(k),OF=n(k,"LI",{});var zLe=s(OF);_pe=n(zLe,"STRONG",{});var Imt=s(_pe);Ber=r(Imt,"layoutlm"),Imt.forEach(t),Per=r(zLe," \u2014 "),LO=n(zLe,"A",{href:!0});var qmt=s(LO);$er=r(qmt,"TFLayoutLMModel"),qmt.forEach(t),Ier=r(zLe," (LayoutLM model)"),zLe.forEach(t),qer=i(k),VF=n(k,"LI",{});var QLe=s(VF);upe=n(QLe,"STRONG",{});var Nmt=s(upe);Ner=r(Nmt,"led"),Nmt.forEach(t),jer=r(QLe," \u2014 "),xO=n(QLe,"A",{href:!0});var jmt=s(xO);Der=r(jmt,"TFLEDModel"),jmt.forEach(t),Ger=r(QLe," (LED model)"),QLe.forEach(t),Oer=i(k),XF=n(k,"LI",{});var WLe=s(XF);bpe=n(WLe,"STRONG",{});var Dmt=s(bpe);Ver=r(Dmt,"longformer"),Dmt.forEach(t),Xer=r(WLe," \u2014 "),kO=n(WLe,"A",{href:!0});var Gmt=s(kO);zer=r(Gmt,"TFLongformerModel"),Gmt.forEach(t),Qer=r(WLe," (Longformer model)"),WLe.forEach(t),Wer=i(k),zF=n(k,"LI",{});var HLe=s(zF);Fpe=n(HLe,"STRONG",{});var Omt=s(Fpe);Her=r(Omt,"lxmert"),Omt.forEach(t),Uer=r(HLe," \u2014 "),SO=n(HLe,"A",{href:!0});var Vmt=s(SO);Jer=r(Vmt,"TFLxmertModel"),Vmt.forEach(t),Yer=r(HLe," (LXMERT model)"),HLe.forEach(t),Ker=i(k),QF=n(k,"LI",{});var ULe=s(QF);vpe=n(ULe,"STRONG",{});var Xmt=s(vpe);Zer=r(Xmt,"marian"),Xmt.forEach(t),eor=r(ULe," \u2014 "),RO=n(ULe,"A",{href:!0});var zmt=s(RO);oor=r(zmt,"TFMarianModel"),zmt.forEach(t),ror=r(ULe," (Marian model)"),ULe.forEach(t),tor=i(k),WF=n(k,"LI",{});var JLe=s(WF);Tpe=n(JLe,"STRONG",{});var Qmt=s(Tpe);aor=r(Qmt,"mbart"),Qmt.forEach(t),nor=r(JLe," \u2014 "),BO=n(JLe,"A",{href:!0});var Wmt=s(BO);sor=r(Wmt,"TFMBartModel"),Wmt.forEach(t),lor=r(JLe," (mBART model)"),JLe.forEach(t),ior=i(k),HF=n(k,"LI",{});var YLe=s(HF);Mpe=n(YLe,"STRONG",{});var Hmt=s(Mpe);dor=r(Hmt,"mobilebert"),Hmt.forEach(t),cor=r(YLe," \u2014 "),PO=n(YLe,"A",{href:!0});var Umt=s(PO);mor=r(Umt,"TFMobileBertModel"),Umt.forEach(t),gor=r(YLe," (MobileBERT model)"),YLe.forEach(t),hor=i(k),UF=n(k,"LI",{});var KLe=s(UF);Epe=n(KLe,"STRONG",{});var Jmt=s(Epe);por=r(Jmt,"mpnet"),Jmt.forEach(t),_or=r(KLe," \u2014 "),$O=n(KLe,"A",{href:!0});var Ymt=s($O);uor=r(Ymt,"TFMPNetModel"),Ymt.forEach(t),bor=r(KLe," (MPNet model)"),KLe.forEach(t),For=i(k),JF=n(k,"LI",{});var ZLe=s(JF);Cpe=n(ZLe,"STRONG",{});var Kmt=s(Cpe);vor=r(Kmt,"mt5"),Kmt.forEach(t),Tor=r(ZLe," \u2014 "),IO=n(ZLe,"A",{href:!0});var Zmt=s(IO);Mor=r(Zmt,"TFMT5Model"),Zmt.forEach(t),Eor=r(ZLe," (mT5 model)"),ZLe.forEach(t),Cor=i(k),YF=n(k,"LI",{});var e8e=s(YF);wpe=n(e8e,"STRONG",{});var egt=s(wpe);wor=r(egt,"openai-gpt"),egt.forEach(t),Aor=r(e8e," \u2014 "),qO=n(e8e,"A",{href:!0});var ogt=s(qO);yor=r(ogt,"TFOpenAIGPTModel"),ogt.forEach(t),Lor=r(e8e," (OpenAI GPT model)"),e8e.forEach(t),xor=i(k),KF=n(k,"LI",{});var o8e=s(KF);Ape=n(o8e,"STRONG",{});var rgt=s(Ape);kor=r(rgt,"pegasus"),rgt.forEach(t),Sor=r(o8e," \u2014 "),NO=n(o8e,"A",{href:!0});var tgt=s(NO);Ror=r(tgt,"TFPegasusModel"),tgt.forEach(t),Bor=r(o8e," (Pegasus model)"),o8e.forEach(t),Por=i(k),ZF=n(k,"LI",{});var r8e=s(ZF);ype=n(r8e,"STRONG",{});var agt=s(ype);$or=r(agt,"rembert"),agt.forEach(t),Ior=r(r8e," \u2014 "),jO=n(r8e,"A",{href:!0});var ngt=s(jO);qor=r(ngt,"TFRemBertModel"),ngt.forEach(t),Nor=r(r8e," (RemBERT model)"),r8e.forEach(t),jor=i(k),ev=n(k,"LI",{});var t8e=s(ev);Lpe=n(t8e,"STRONG",{});var sgt=s(Lpe);Dor=r(sgt,"roberta"),sgt.forEach(t),Gor=r(t8e," \u2014 "),DO=n(t8e,"A",{href:!0});var lgt=s(DO);Oor=r(lgt,"TFRobertaModel"),lgt.forEach(t),Vor=r(t8e," (RoBERTa model)"),t8e.forEach(t),Xor=i(k),ov=n(k,"LI",{});var a8e=s(ov);xpe=n(a8e,"STRONG",{});var igt=s(xpe);zor=r(igt,"roformer"),igt.forEach(t),Qor=r(a8e," \u2014 "),GO=n(a8e,"A",{href:!0});var dgt=s(GO);Wor=r(dgt,"TFRoFormerModel"),dgt.forEach(t),Hor=r(a8e," (RoFormer model)"),a8e.forEach(t),Uor=i(k),rv=n(k,"LI",{});var n8e=s(rv);kpe=n(n8e,"STRONG",{});var cgt=s(kpe);Jor=r(cgt,"speech_to_text"),cgt.forEach(t),Yor=r(n8e," \u2014 "),OO=n(n8e,"A",{href:!0});var fgt=s(OO);Kor=r(fgt,"TFSpeech2TextModel"),fgt.forEach(t),Zor=r(n8e," (Speech2Text model)"),n8e.forEach(t),err=i(k),tv=n(k,"LI",{});var s8e=s(tv);Spe=n(s8e,"STRONG",{});var mgt=s(Spe);orr=r(mgt,"t5"),mgt.forEach(t),rrr=r(s8e," \u2014 "),VO=n(s8e,"A",{href:!0});var ggt=s(VO);trr=r(ggt,"TFT5Model"),ggt.forEach(t),arr=r(s8e," (T5 model)"),s8e.forEach(t),nrr=i(k),av=n(k,"LI",{});var l8e=s(av);Rpe=n(l8e,"STRONG",{});var hgt=s(Rpe);srr=r(hgt,"tapas"),hgt.forEach(t),lrr=r(l8e," \u2014 "),XO=n(l8e,"A",{href:!0});var pgt=s(XO);irr=r(pgt,"TFTapasModel"),pgt.forEach(t),drr=r(l8e," (TAPAS model)"),l8e.forEach(t),crr=i(k),nv=n(k,"LI",{});var i8e=s(nv);Bpe=n(i8e,"STRONG",{});var _gt=s(Bpe);frr=r(_gt,"transfo-xl"),_gt.forEach(t),mrr=r(i8e," \u2014 "),zO=n(i8e,"A",{href:!0});var ugt=s(zO);grr=r(ugt,"TFTransfoXLModel"),ugt.forEach(t),hrr=r(i8e," (Transformer-XL model)"),i8e.forEach(t),prr=i(k),sv=n(k,"LI",{});var d8e=s(sv);Ppe=n(d8e,"STRONG",{});var bgt=s(Ppe);_rr=r(bgt,"vit"),bgt.forEach(t),urr=r(d8e," \u2014 "),QO=n(d8e,"A",{href:!0});var Fgt=s(QO);brr=r(Fgt,"TFViTModel"),Fgt.forEach(t),Frr=r(d8e," (ViT model)"),d8e.forEach(t),vrr=i(k),lv=n(k,"LI",{});var c8e=s(lv);$pe=n(c8e,"STRONG",{});var vgt=s($pe);Trr=r(vgt,"vit_mae"),vgt.forEach(t),Mrr=r(c8e," \u2014 "),WO=n(c8e,"A",{href:!0});var Tgt=s(WO);Err=r(Tgt,"TFViTMAEModel"),Tgt.forEach(t),Crr=r(c8e," (ViTMAE model)"),c8e.forEach(t),wrr=i(k),iv=n(k,"LI",{});var f8e=s(iv);Ipe=n(f8e,"STRONG",{});var Mgt=s(Ipe);Arr=r(Mgt,"wav2vec2"),Mgt.forEach(t),yrr=r(f8e," \u2014 "),HO=n(f8e,"A",{href:!0});var Egt=s(HO);Lrr=r(Egt,"TFWav2Vec2Model"),Egt.forEach(t),xrr=r(f8e," (Wav2Vec2 model)"),f8e.forEach(t),krr=i(k),dv=n(k,"LI",{});var m8e=s(dv);qpe=n(m8e,"STRONG",{});var Cgt=s(qpe);Srr=r(Cgt,"xlm"),Cgt.forEach(t),Rrr=r(m8e," \u2014 "),UO=n(m8e,"A",{href:!0});var wgt=s(UO);Brr=r(wgt,"TFXLMModel"),wgt.forEach(t),Prr=r(m8e," (XLM model)"),m8e.forEach(t),$rr=i(k),cv=n(k,"LI",{});var g8e=s(cv);Npe=n(g8e,"STRONG",{});var Agt=s(Npe);Irr=r(Agt,"xlm-roberta"),Agt.forEach(t),qrr=r(g8e," \u2014 "),JO=n(g8e,"A",{href:!0});var ygt=s(JO);Nrr=r(ygt,"TFXLMRobertaModel"),ygt.forEach(t),jrr=r(g8e," (XLM-RoBERTa model)"),g8e.forEach(t),Drr=i(k),fv=n(k,"LI",{});var h8e=s(fv);jpe=n(h8e,"STRONG",{});var Lgt=s(jpe);Grr=r(Lgt,"xlnet"),Lgt.forEach(t),Orr=r(h8e," \u2014 "),YO=n(h8e,"A",{href:!0});var xgt=s(YO);Vrr=r(xgt,"TFXLNetModel"),xgt.forEach(t),Xrr=r(h8e," (XLNet model)"),h8e.forEach(t),k.forEach(t),zrr=i(pa),Dpe=n(pa,"P",{});var kgt=s(Dpe);Qrr=r(kgt,"Examples:"),kgt.forEach(t),Wrr=i(pa),m(n0.$$.fragment,pa),pa.forEach(t),jl.forEach(t),sBe=i(c),_c=n(c,"H2",{class:!0});var _$e=s(_c);mv=n(_$e,"A",{id:!0,class:!0,href:!0});var Sgt=s(mv);Gpe=n(Sgt,"SPAN",{});var Rgt=s(Gpe);m(s0.$$.fragment,Rgt),Rgt.forEach(t),Sgt.forEach(t),Hrr=i(_$e),Ope=n(_$e,"SPAN",{});var Bgt=s(Ope);Urr=r(Bgt,"TFAutoModelForPreTraining"),Bgt.forEach(t),_$e.forEach(t),lBe=i(c),vr=n(c,"DIV",{class:!0});var Gl=s(vr);m(l0.$$.fragment,Gl),Jrr=i(Gl),uc=n(Gl,"P",{});var ZU=s(uc);Yrr=r(ZU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),KO=n(ZU,"A",{href:!0});var Pgt=s(KO);Krr=r(Pgt,"from_pretrained()"),Pgt.forEach(t),Zrr=r(ZU," class method or the "),ZO=n(ZU,"A",{href:!0});var $gt=s(ZO);etr=r($gt,"from_config()"),$gt.forEach(t),otr=r(ZU,` class
method.`),ZU.forEach(t),rtr=i(Gl),i0=n(Gl,"P",{});var u$e=s(i0);ttr=r(u$e,"This class cannot be instantiated directly using "),Vpe=n(u$e,"CODE",{});var Igt=s(Vpe);atr=r(Igt,"__init__()"),Igt.forEach(t),ntr=r(u$e," (throws an error)."),u$e.forEach(t),str=i(Gl),ht=n(Gl,"DIV",{class:!0});var Ol=s(ht);m(d0.$$.fragment,Ol),ltr=i(Ol),Xpe=n(Ol,"P",{});var qgt=s(Xpe);itr=r(qgt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),qgt.forEach(t),dtr=i(Ol),bc=n(Ol,"P",{});var eJ=s(bc);ctr=r(eJ,`Note:
Loading a model from its configuration file does `),zpe=n(eJ,"STRONG",{});var Ngt=s(zpe);ftr=r(Ngt,"not"),Ngt.forEach(t),mtr=r(eJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),eV=n(eJ,"A",{href:!0});var jgt=s(eV);gtr=r(jgt,"from_pretrained()"),jgt.forEach(t),htr=r(eJ," to load the model weights."),eJ.forEach(t),ptr=i(Ol),Qpe=n(Ol,"P",{});var Dgt=s(Qpe);_tr=r(Dgt,"Examples:"),Dgt.forEach(t),utr=i(Ol),m(c0.$$.fragment,Ol),Ol.forEach(t),btr=i(Gl),po=n(Gl,"DIV",{class:!0});var _a=s(po);m(f0.$$.fragment,_a),Ftr=i(_a),Wpe=n(_a,"P",{});var Ggt=s(Wpe);vtr=r(Ggt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Ggt.forEach(t),Ttr=i(_a),un=n(_a,"P",{});var UE=s(un);Mtr=r(UE,"The model class to instantiate is selected based on the "),Hpe=n(UE,"CODE",{});var Ogt=s(Hpe);Etr=r(Ogt,"model_type"),Ogt.forEach(t),Ctr=r(UE,` property of the config object (either
passed as an argument or loaded from `),Upe=n(UE,"CODE",{});var Vgt=s(Upe);wtr=r(Vgt,"pretrained_model_name_or_path"),Vgt.forEach(t),Atr=r(UE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jpe=n(UE,"CODE",{});var Xgt=s(Jpe);ytr=r(Xgt,"pretrained_model_name_or_path"),Xgt.forEach(t),Ltr=r(UE,":"),UE.forEach(t),xtr=i(_a),H=n(_a,"UL",{});var U=s(H);gv=n(U,"LI",{});var p8e=s(gv);Ype=n(p8e,"STRONG",{});var zgt=s(Ype);ktr=r(zgt,"albert"),zgt.forEach(t),Str=r(p8e," \u2014 "),oV=n(p8e,"A",{href:!0});var Qgt=s(oV);Rtr=r(Qgt,"TFAlbertForPreTraining"),Qgt.forEach(t),Btr=r(p8e," (ALBERT model)"),p8e.forEach(t),Ptr=i(U),hv=n(U,"LI",{});var _8e=s(hv);Kpe=n(_8e,"STRONG",{});var Wgt=s(Kpe);$tr=r(Wgt,"bart"),Wgt.forEach(t),Itr=r(_8e," \u2014 "),rV=n(_8e,"A",{href:!0});var Hgt=s(rV);qtr=r(Hgt,"TFBartForConditionalGeneration"),Hgt.forEach(t),Ntr=r(_8e," (BART model)"),_8e.forEach(t),jtr=i(U),pv=n(U,"LI",{});var u8e=s(pv);Zpe=n(u8e,"STRONG",{});var Ugt=s(Zpe);Dtr=r(Ugt,"bert"),Ugt.forEach(t),Gtr=r(u8e," \u2014 "),tV=n(u8e,"A",{href:!0});var Jgt=s(tV);Otr=r(Jgt,"TFBertForPreTraining"),Jgt.forEach(t),Vtr=r(u8e," (BERT model)"),u8e.forEach(t),Xtr=i(U),_v=n(U,"LI",{});var b8e=s(_v);e_e=n(b8e,"STRONG",{});var Ygt=s(e_e);ztr=r(Ygt,"camembert"),Ygt.forEach(t),Qtr=r(b8e," \u2014 "),aV=n(b8e,"A",{href:!0});var Kgt=s(aV);Wtr=r(Kgt,"TFCamembertForMaskedLM"),Kgt.forEach(t),Htr=r(b8e," (CamemBERT model)"),b8e.forEach(t),Utr=i(U),uv=n(U,"LI",{});var F8e=s(uv);o_e=n(F8e,"STRONG",{});var Zgt=s(o_e);Jtr=r(Zgt,"ctrl"),Zgt.forEach(t),Ytr=r(F8e," \u2014 "),nV=n(F8e,"A",{href:!0});var eht=s(nV);Ktr=r(eht,"TFCTRLLMHeadModel"),eht.forEach(t),Ztr=r(F8e," (CTRL model)"),F8e.forEach(t),ear=i(U),bv=n(U,"LI",{});var v8e=s(bv);r_e=n(v8e,"STRONG",{});var oht=s(r_e);oar=r(oht,"distilbert"),oht.forEach(t),rar=r(v8e," \u2014 "),sV=n(v8e,"A",{href:!0});var rht=s(sV);tar=r(rht,"TFDistilBertForMaskedLM"),rht.forEach(t),aar=r(v8e," (DistilBERT model)"),v8e.forEach(t),nar=i(U),Fv=n(U,"LI",{});var T8e=s(Fv);t_e=n(T8e,"STRONG",{});var tht=s(t_e);sar=r(tht,"electra"),tht.forEach(t),lar=r(T8e," \u2014 "),lV=n(T8e,"A",{href:!0});var aht=s(lV);iar=r(aht,"TFElectraForPreTraining"),aht.forEach(t),dar=r(T8e," (ELECTRA model)"),T8e.forEach(t),car=i(U),vv=n(U,"LI",{});var M8e=s(vv);a_e=n(M8e,"STRONG",{});var nht=s(a_e);far=r(nht,"flaubert"),nht.forEach(t),mar=r(M8e," \u2014 "),iV=n(M8e,"A",{href:!0});var sht=s(iV);gar=r(sht,"TFFlaubertWithLMHeadModel"),sht.forEach(t),har=r(M8e," (FlauBERT model)"),M8e.forEach(t),par=i(U),Tv=n(U,"LI",{});var E8e=s(Tv);n_e=n(E8e,"STRONG",{});var lht=s(n_e);_ar=r(lht,"funnel"),lht.forEach(t),uar=r(E8e," \u2014 "),dV=n(E8e,"A",{href:!0});var iht=s(dV);bar=r(iht,"TFFunnelForPreTraining"),iht.forEach(t),Far=r(E8e," (Funnel Transformer model)"),E8e.forEach(t),Tar=i(U),Mv=n(U,"LI",{});var C8e=s(Mv);s_e=n(C8e,"STRONG",{});var dht=s(s_e);Mar=r(dht,"gpt2"),dht.forEach(t),Ear=r(C8e," \u2014 "),cV=n(C8e,"A",{href:!0});var cht=s(cV);Car=r(cht,"TFGPT2LMHeadModel"),cht.forEach(t),war=r(C8e," (OpenAI GPT-2 model)"),C8e.forEach(t),Aar=i(U),Ev=n(U,"LI",{});var w8e=s(Ev);l_e=n(w8e,"STRONG",{});var fht=s(l_e);yar=r(fht,"layoutlm"),fht.forEach(t),Lar=r(w8e," \u2014 "),fV=n(w8e,"A",{href:!0});var mht=s(fV);xar=r(mht,"TFLayoutLMForMaskedLM"),mht.forEach(t),kar=r(w8e," (LayoutLM model)"),w8e.forEach(t),Sar=i(U),Cv=n(U,"LI",{});var A8e=s(Cv);i_e=n(A8e,"STRONG",{});var ght=s(i_e);Rar=r(ght,"lxmert"),ght.forEach(t),Bar=r(A8e," \u2014 "),mV=n(A8e,"A",{href:!0});var hht=s(mV);Par=r(hht,"TFLxmertForPreTraining"),hht.forEach(t),$ar=r(A8e," (LXMERT model)"),A8e.forEach(t),Iar=i(U),wv=n(U,"LI",{});var y8e=s(wv);d_e=n(y8e,"STRONG",{});var pht=s(d_e);qar=r(pht,"mobilebert"),pht.forEach(t),Nar=r(y8e," \u2014 "),gV=n(y8e,"A",{href:!0});var _ht=s(gV);jar=r(_ht,"TFMobileBertForPreTraining"),_ht.forEach(t),Dar=r(y8e," (MobileBERT model)"),y8e.forEach(t),Gar=i(U),Av=n(U,"LI",{});var L8e=s(Av);c_e=n(L8e,"STRONG",{});var uht=s(c_e);Oar=r(uht,"mpnet"),uht.forEach(t),Var=r(L8e," \u2014 "),hV=n(L8e,"A",{href:!0});var bht=s(hV);Xar=r(bht,"TFMPNetForMaskedLM"),bht.forEach(t),zar=r(L8e," (MPNet model)"),L8e.forEach(t),Qar=i(U),yv=n(U,"LI",{});var x8e=s(yv);f_e=n(x8e,"STRONG",{});var Fht=s(f_e);War=r(Fht,"openai-gpt"),Fht.forEach(t),Har=r(x8e," \u2014 "),pV=n(x8e,"A",{href:!0});var vht=s(pV);Uar=r(vht,"TFOpenAIGPTLMHeadModel"),vht.forEach(t),Jar=r(x8e," (OpenAI GPT model)"),x8e.forEach(t),Yar=i(U),Lv=n(U,"LI",{});var k8e=s(Lv);m_e=n(k8e,"STRONG",{});var Tht=s(m_e);Kar=r(Tht,"roberta"),Tht.forEach(t),Zar=r(k8e," \u2014 "),_V=n(k8e,"A",{href:!0});var Mht=s(_V);enr=r(Mht,"TFRobertaForMaskedLM"),Mht.forEach(t),onr=r(k8e," (RoBERTa model)"),k8e.forEach(t),rnr=i(U),xv=n(U,"LI",{});var S8e=s(xv);g_e=n(S8e,"STRONG",{});var Eht=s(g_e);tnr=r(Eht,"t5"),Eht.forEach(t),anr=r(S8e," \u2014 "),uV=n(S8e,"A",{href:!0});var Cht=s(uV);nnr=r(Cht,"TFT5ForConditionalGeneration"),Cht.forEach(t),snr=r(S8e," (T5 model)"),S8e.forEach(t),lnr=i(U),kv=n(U,"LI",{});var R8e=s(kv);h_e=n(R8e,"STRONG",{});var wht=s(h_e);inr=r(wht,"tapas"),wht.forEach(t),dnr=r(R8e," \u2014 "),bV=n(R8e,"A",{href:!0});var Aht=s(bV);cnr=r(Aht,"TFTapasForMaskedLM"),Aht.forEach(t),fnr=r(R8e," (TAPAS model)"),R8e.forEach(t),mnr=i(U),Sv=n(U,"LI",{});var B8e=s(Sv);p_e=n(B8e,"STRONG",{});var yht=s(p_e);gnr=r(yht,"transfo-xl"),yht.forEach(t),hnr=r(B8e," \u2014 "),FV=n(B8e,"A",{href:!0});var Lht=s(FV);pnr=r(Lht,"TFTransfoXLLMHeadModel"),Lht.forEach(t),_nr=r(B8e," (Transformer-XL model)"),B8e.forEach(t),unr=i(U),Rv=n(U,"LI",{});var P8e=s(Rv);__e=n(P8e,"STRONG",{});var xht=s(__e);bnr=r(xht,"vit_mae"),xht.forEach(t),Fnr=r(P8e," \u2014 "),vV=n(P8e,"A",{href:!0});var kht=s(vV);vnr=r(kht,"TFViTMAEForPreTraining"),kht.forEach(t),Tnr=r(P8e," (ViTMAE model)"),P8e.forEach(t),Mnr=i(U),Bv=n(U,"LI",{});var $8e=s(Bv);u_e=n($8e,"STRONG",{});var Sht=s(u_e);Enr=r(Sht,"xlm"),Sht.forEach(t),Cnr=r($8e," \u2014 "),TV=n($8e,"A",{href:!0});var Rht=s(TV);wnr=r(Rht,"TFXLMWithLMHeadModel"),Rht.forEach(t),Anr=r($8e," (XLM model)"),$8e.forEach(t),ynr=i(U),Pv=n(U,"LI",{});var I8e=s(Pv);b_e=n(I8e,"STRONG",{});var Bht=s(b_e);Lnr=r(Bht,"xlm-roberta"),Bht.forEach(t),xnr=r(I8e," \u2014 "),MV=n(I8e,"A",{href:!0});var Pht=s(MV);knr=r(Pht,"TFXLMRobertaForMaskedLM"),Pht.forEach(t),Snr=r(I8e," (XLM-RoBERTa model)"),I8e.forEach(t),Rnr=i(U),$v=n(U,"LI",{});var q8e=s($v);F_e=n(q8e,"STRONG",{});var $ht=s(F_e);Bnr=r($ht,"xlnet"),$ht.forEach(t),Pnr=r(q8e," \u2014 "),EV=n(q8e,"A",{href:!0});var Iht=s(EV);$nr=r(Iht,"TFXLNetLMHeadModel"),Iht.forEach(t),Inr=r(q8e," (XLNet model)"),q8e.forEach(t),U.forEach(t),qnr=i(_a),v_e=n(_a,"P",{});var qht=s(v_e);Nnr=r(qht,"Examples:"),qht.forEach(t),jnr=i(_a),m(m0.$$.fragment,_a),_a.forEach(t),Gl.forEach(t),iBe=i(c),Fc=n(c,"H2",{class:!0});var b$e=s(Fc);Iv=n(b$e,"A",{id:!0,class:!0,href:!0});var Nht=s(Iv);T_e=n(Nht,"SPAN",{});var jht=s(T_e);m(g0.$$.fragment,jht),jht.forEach(t),Nht.forEach(t),Dnr=i(b$e),M_e=n(b$e,"SPAN",{});var Dht=s(M_e);Gnr=r(Dht,"TFAutoModelForCausalLM"),Dht.forEach(t),b$e.forEach(t),dBe=i(c),Tr=n(c,"DIV",{class:!0});var Vl=s(Tr);m(h0.$$.fragment,Vl),Onr=i(Vl),vc=n(Vl,"P",{});var oJ=s(vc);Vnr=r(oJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),CV=n(oJ,"A",{href:!0});var Ght=s(CV);Xnr=r(Ght,"from_pretrained()"),Ght.forEach(t),znr=r(oJ," class method or the "),wV=n(oJ,"A",{href:!0});var Oht=s(wV);Qnr=r(Oht,"from_config()"),Oht.forEach(t),Wnr=r(oJ,` class
method.`),oJ.forEach(t),Hnr=i(Vl),p0=n(Vl,"P",{});var F$e=s(p0);Unr=r(F$e,"This class cannot be instantiated directly using "),E_e=n(F$e,"CODE",{});var Vht=s(E_e);Jnr=r(Vht,"__init__()"),Vht.forEach(t),Ynr=r(F$e," (throws an error)."),F$e.forEach(t),Knr=i(Vl),pt=n(Vl,"DIV",{class:!0});var Xl=s(pt);m(_0.$$.fragment,Xl),Znr=i(Xl),C_e=n(Xl,"P",{});var Xht=s(C_e);esr=r(Xht,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Xht.forEach(t),osr=i(Xl),Tc=n(Xl,"P",{});var rJ=s(Tc);rsr=r(rJ,`Note:
Loading a model from its configuration file does `),w_e=n(rJ,"STRONG",{});var zht=s(w_e);tsr=r(zht,"not"),zht.forEach(t),asr=r(rJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),AV=n(rJ,"A",{href:!0});var Qht=s(AV);nsr=r(Qht,"from_pretrained()"),Qht.forEach(t),ssr=r(rJ," to load the model weights."),rJ.forEach(t),lsr=i(Xl),A_e=n(Xl,"P",{});var Wht=s(A_e);isr=r(Wht,"Examples:"),Wht.forEach(t),dsr=i(Xl),m(u0.$$.fragment,Xl),Xl.forEach(t),csr=i(Vl),_o=n(Vl,"DIV",{class:!0});var ua=s(_o);m(b0.$$.fragment,ua),fsr=i(ua),y_e=n(ua,"P",{});var Hht=s(y_e);msr=r(Hht,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Hht.forEach(t),gsr=i(ua),bn=n(ua,"P",{});var JE=s(bn);hsr=r(JE,"The model class to instantiate is selected based on the "),L_e=n(JE,"CODE",{});var Uht=s(L_e);psr=r(Uht,"model_type"),Uht.forEach(t),_sr=r(JE,` property of the config object (either
passed as an argument or loaded from `),x_e=n(JE,"CODE",{});var Jht=s(x_e);usr=r(Jht,"pretrained_model_name_or_path"),Jht.forEach(t),bsr=r(JE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k_e=n(JE,"CODE",{});var Yht=s(k_e);Fsr=r(Yht,"pretrained_model_name_or_path"),Yht.forEach(t),vsr=r(JE,":"),JE.forEach(t),Tsr=i(ua),ce=n(ua,"UL",{});var he=s(ce);qv=n(he,"LI",{});var N8e=s(qv);S_e=n(N8e,"STRONG",{});var Kht=s(S_e);Msr=r(Kht,"bert"),Kht.forEach(t),Esr=r(N8e," \u2014 "),yV=n(N8e,"A",{href:!0});var Zht=s(yV);Csr=r(Zht,"TFBertLMHeadModel"),Zht.forEach(t),wsr=r(N8e," (BERT model)"),N8e.forEach(t),Asr=i(he),Nv=n(he,"LI",{});var j8e=s(Nv);R_e=n(j8e,"STRONG",{});var ept=s(R_e);ysr=r(ept,"camembert"),ept.forEach(t),Lsr=r(j8e," \u2014 "),LV=n(j8e,"A",{href:!0});var opt=s(LV);xsr=r(opt,"TFCamembertForCausalLM"),opt.forEach(t),ksr=r(j8e," (CamemBERT model)"),j8e.forEach(t),Ssr=i(he),jv=n(he,"LI",{});var D8e=s(jv);B_e=n(D8e,"STRONG",{});var rpt=s(B_e);Rsr=r(rpt,"ctrl"),rpt.forEach(t),Bsr=r(D8e," \u2014 "),xV=n(D8e,"A",{href:!0});var tpt=s(xV);Psr=r(tpt,"TFCTRLLMHeadModel"),tpt.forEach(t),$sr=r(D8e," (CTRL model)"),D8e.forEach(t),Isr=i(he),Dv=n(he,"LI",{});var G8e=s(Dv);P_e=n(G8e,"STRONG",{});var apt=s(P_e);qsr=r(apt,"gpt2"),apt.forEach(t),Nsr=r(G8e," \u2014 "),kV=n(G8e,"A",{href:!0});var npt=s(kV);jsr=r(npt,"TFGPT2LMHeadModel"),npt.forEach(t),Dsr=r(G8e," (OpenAI GPT-2 model)"),G8e.forEach(t),Gsr=i(he),Gv=n(he,"LI",{});var O8e=s(Gv);$_e=n(O8e,"STRONG",{});var spt=s($_e);Osr=r(spt,"gptj"),spt.forEach(t),Vsr=r(O8e," \u2014 "),SV=n(O8e,"A",{href:!0});var lpt=s(SV);Xsr=r(lpt,"TFGPTJForCausalLM"),lpt.forEach(t),zsr=r(O8e," (GPT-J model)"),O8e.forEach(t),Qsr=i(he),Ov=n(he,"LI",{});var V8e=s(Ov);I_e=n(V8e,"STRONG",{});var ipt=s(I_e);Wsr=r(ipt,"openai-gpt"),ipt.forEach(t),Hsr=r(V8e," \u2014 "),RV=n(V8e,"A",{href:!0});var dpt=s(RV);Usr=r(dpt,"TFOpenAIGPTLMHeadModel"),dpt.forEach(t),Jsr=r(V8e," (OpenAI GPT model)"),V8e.forEach(t),Ysr=i(he),Vv=n(he,"LI",{});var X8e=s(Vv);q_e=n(X8e,"STRONG",{});var cpt=s(q_e);Ksr=r(cpt,"rembert"),cpt.forEach(t),Zsr=r(X8e," \u2014 "),BV=n(X8e,"A",{href:!0});var fpt=s(BV);elr=r(fpt,"TFRemBertForCausalLM"),fpt.forEach(t),olr=r(X8e," (RemBERT model)"),X8e.forEach(t),rlr=i(he),Xv=n(he,"LI",{});var z8e=s(Xv);N_e=n(z8e,"STRONG",{});var mpt=s(N_e);tlr=r(mpt,"roberta"),mpt.forEach(t),alr=r(z8e," \u2014 "),PV=n(z8e,"A",{href:!0});var gpt=s(PV);nlr=r(gpt,"TFRobertaForCausalLM"),gpt.forEach(t),slr=r(z8e," (RoBERTa model)"),z8e.forEach(t),llr=i(he),zv=n(he,"LI",{});var Q8e=s(zv);j_e=n(Q8e,"STRONG",{});var hpt=s(j_e);ilr=r(hpt,"roformer"),hpt.forEach(t),dlr=r(Q8e," \u2014 "),$V=n(Q8e,"A",{href:!0});var ppt=s($V);clr=r(ppt,"TFRoFormerForCausalLM"),ppt.forEach(t),flr=r(Q8e," (RoFormer model)"),Q8e.forEach(t),mlr=i(he),Qv=n(he,"LI",{});var W8e=s(Qv);D_e=n(W8e,"STRONG",{});var _pt=s(D_e);glr=r(_pt,"transfo-xl"),_pt.forEach(t),hlr=r(W8e," \u2014 "),IV=n(W8e,"A",{href:!0});var upt=s(IV);plr=r(upt,"TFTransfoXLLMHeadModel"),upt.forEach(t),_lr=r(W8e," (Transformer-XL model)"),W8e.forEach(t),ulr=i(he),Wv=n(he,"LI",{});var H8e=s(Wv);G_e=n(H8e,"STRONG",{});var bpt=s(G_e);blr=r(bpt,"xlm"),bpt.forEach(t),Flr=r(H8e," \u2014 "),qV=n(H8e,"A",{href:!0});var Fpt=s(qV);vlr=r(Fpt,"TFXLMWithLMHeadModel"),Fpt.forEach(t),Tlr=r(H8e," (XLM model)"),H8e.forEach(t),Mlr=i(he),Hv=n(he,"LI",{});var U8e=s(Hv);O_e=n(U8e,"STRONG",{});var vpt=s(O_e);Elr=r(vpt,"xlnet"),vpt.forEach(t),Clr=r(U8e," \u2014 "),NV=n(U8e,"A",{href:!0});var Tpt=s(NV);wlr=r(Tpt,"TFXLNetLMHeadModel"),Tpt.forEach(t),Alr=r(U8e," (XLNet model)"),U8e.forEach(t),he.forEach(t),ylr=i(ua),V_e=n(ua,"P",{});var Mpt=s(V_e);Llr=r(Mpt,"Examples:"),Mpt.forEach(t),xlr=i(ua),m(F0.$$.fragment,ua),ua.forEach(t),Vl.forEach(t),cBe=i(c),Mc=n(c,"H2",{class:!0});var v$e=s(Mc);Uv=n(v$e,"A",{id:!0,class:!0,href:!0});var Ept=s(Uv);X_e=n(Ept,"SPAN",{});var Cpt=s(X_e);m(v0.$$.fragment,Cpt),Cpt.forEach(t),Ept.forEach(t),klr=i(v$e),z_e=n(v$e,"SPAN",{});var wpt=s(z_e);Slr=r(wpt,"TFAutoModelForImageClassification"),wpt.forEach(t),v$e.forEach(t),fBe=i(c),Mr=n(c,"DIV",{class:!0});var zl=s(Mr);m(T0.$$.fragment,zl),Rlr=i(zl),Ec=n(zl,"P",{});var tJ=s(Ec);Blr=r(tJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),jV=n(tJ,"A",{href:!0});var Apt=s(jV);Plr=r(Apt,"from_pretrained()"),Apt.forEach(t),$lr=r(tJ," class method or the "),DV=n(tJ,"A",{href:!0});var ypt=s(DV);Ilr=r(ypt,"from_config()"),ypt.forEach(t),qlr=r(tJ,` class
method.`),tJ.forEach(t),Nlr=i(zl),M0=n(zl,"P",{});var T$e=s(M0);jlr=r(T$e,"This class cannot be instantiated directly using "),Q_e=n(T$e,"CODE",{});var Lpt=s(Q_e);Dlr=r(Lpt,"__init__()"),Lpt.forEach(t),Glr=r(T$e," (throws an error)."),T$e.forEach(t),Olr=i(zl),_t=n(zl,"DIV",{class:!0});var Ql=s(_t);m(E0.$$.fragment,Ql),Vlr=i(Ql),W_e=n(Ql,"P",{});var xpt=s(W_e);Xlr=r(xpt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),xpt.forEach(t),zlr=i(Ql),Cc=n(Ql,"P",{});var aJ=s(Cc);Qlr=r(aJ,`Note:
Loading a model from its configuration file does `),H_e=n(aJ,"STRONG",{});var kpt=s(H_e);Wlr=r(kpt,"not"),kpt.forEach(t),Hlr=r(aJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),GV=n(aJ,"A",{href:!0});var Spt=s(GV);Ulr=r(Spt,"from_pretrained()"),Spt.forEach(t),Jlr=r(aJ," to load the model weights."),aJ.forEach(t),Ylr=i(Ql),U_e=n(Ql,"P",{});var Rpt=s(U_e);Klr=r(Rpt,"Examples:"),Rpt.forEach(t),Zlr=i(Ql),m(C0.$$.fragment,Ql),Ql.forEach(t),eir=i(zl),uo=n(zl,"DIV",{class:!0});var ba=s(uo);m(w0.$$.fragment,ba),oir=i(ba),J_e=n(ba,"P",{});var Bpt=s(J_e);rir=r(Bpt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Bpt.forEach(t),tir=i(ba),Fn=n(ba,"P",{});var YE=s(Fn);air=r(YE,"The model class to instantiate is selected based on the "),Y_e=n(YE,"CODE",{});var Ppt=s(Y_e);nir=r(Ppt,"model_type"),Ppt.forEach(t),sir=r(YE,` property of the config object (either
passed as an argument or loaded from `),K_e=n(YE,"CODE",{});var $pt=s(K_e);lir=r($pt,"pretrained_model_name_or_path"),$pt.forEach(t),iir=r(YE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z_e=n(YE,"CODE",{});var Ipt=s(Z_e);dir=r(Ipt,"pretrained_model_name_or_path"),Ipt.forEach(t),cir=r(YE,":"),YE.forEach(t),fir=i(ba),A0=n(ba,"UL",{});var M$e=s(A0);Jv=n(M$e,"LI",{});var J8e=s(Jv);eue=n(J8e,"STRONG",{});var qpt=s(eue);mir=r(qpt,"convnext"),qpt.forEach(t),gir=r(J8e," \u2014 "),OV=n(J8e,"A",{href:!0});var Npt=s(OV);hir=r(Npt,"TFConvNextForImageClassification"),Npt.forEach(t),pir=r(J8e," (ConvNext model)"),J8e.forEach(t),_ir=i(M$e),Yv=n(M$e,"LI",{});var Y8e=s(Yv);oue=n(Y8e,"STRONG",{});var jpt=s(oue);uir=r(jpt,"vit"),jpt.forEach(t),bir=r(Y8e," \u2014 "),VV=n(Y8e,"A",{href:!0});var Dpt=s(VV);Fir=r(Dpt,"TFViTForImageClassification"),Dpt.forEach(t),vir=r(Y8e," (ViT model)"),Y8e.forEach(t),M$e.forEach(t),Tir=i(ba),rue=n(ba,"P",{});var Gpt=s(rue);Mir=r(Gpt,"Examples:"),Gpt.forEach(t),Eir=i(ba),m(y0.$$.fragment,ba),ba.forEach(t),zl.forEach(t),mBe=i(c),wc=n(c,"H2",{class:!0});var E$e=s(wc);Kv=n(E$e,"A",{id:!0,class:!0,href:!0});var Opt=s(Kv);tue=n(Opt,"SPAN",{});var Vpt=s(tue);m(L0.$$.fragment,Vpt),Vpt.forEach(t),Opt.forEach(t),Cir=i(E$e),aue=n(E$e,"SPAN",{});var Xpt=s(aue);wir=r(Xpt,"TFAutoModelForMaskedLM"),Xpt.forEach(t),E$e.forEach(t),gBe=i(c),Er=n(c,"DIV",{class:!0});var Wl=s(Er);m(x0.$$.fragment,Wl),Air=i(Wl),Ac=n(Wl,"P",{});var nJ=s(Ac);yir=r(nJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),XV=n(nJ,"A",{href:!0});var zpt=s(XV);Lir=r(zpt,"from_pretrained()"),zpt.forEach(t),xir=r(nJ," class method or the "),zV=n(nJ,"A",{href:!0});var Qpt=s(zV);kir=r(Qpt,"from_config()"),Qpt.forEach(t),Sir=r(nJ,` class
method.`),nJ.forEach(t),Rir=i(Wl),k0=n(Wl,"P",{});var C$e=s(k0);Bir=r(C$e,"This class cannot be instantiated directly using "),nue=n(C$e,"CODE",{});var Wpt=s(nue);Pir=r(Wpt,"__init__()"),Wpt.forEach(t),$ir=r(C$e," (throws an error)."),C$e.forEach(t),Iir=i(Wl),ut=n(Wl,"DIV",{class:!0});var Hl=s(ut);m(S0.$$.fragment,Hl),qir=i(Hl),sue=n(Hl,"P",{});var Hpt=s(sue);Nir=r(Hpt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Hpt.forEach(t),jir=i(Hl),yc=n(Hl,"P",{});var sJ=s(yc);Dir=r(sJ,`Note:
Loading a model from its configuration file does `),lue=n(sJ,"STRONG",{});var Upt=s(lue);Gir=r(Upt,"not"),Upt.forEach(t),Oir=r(sJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),QV=n(sJ,"A",{href:!0});var Jpt=s(QV);Vir=r(Jpt,"from_pretrained()"),Jpt.forEach(t),Xir=r(sJ," to load the model weights."),sJ.forEach(t),zir=i(Hl),iue=n(Hl,"P",{});var Ypt=s(iue);Qir=r(Ypt,"Examples:"),Ypt.forEach(t),Wir=i(Hl),m(R0.$$.fragment,Hl),Hl.forEach(t),Hir=i(Wl),bo=n(Wl,"DIV",{class:!0});var Fa=s(bo);m(B0.$$.fragment,Fa),Uir=i(Fa),due=n(Fa,"P",{});var Kpt=s(due);Jir=r(Kpt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Kpt.forEach(t),Yir=i(Fa),vn=n(Fa,"P",{});var KE=s(vn);Kir=r(KE,"The model class to instantiate is selected based on the "),cue=n(KE,"CODE",{});var Zpt=s(cue);Zir=r(Zpt,"model_type"),Zpt.forEach(t),edr=r(KE,` property of the config object (either
passed as an argument or loaded from `),fue=n(KE,"CODE",{});var e_t=s(fue);odr=r(e_t,"pretrained_model_name_or_path"),e_t.forEach(t),rdr=r(KE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mue=n(KE,"CODE",{});var o_t=s(mue);tdr=r(o_t,"pretrained_model_name_or_path"),o_t.forEach(t),adr=r(KE,":"),KE.forEach(t),ndr=i(Fa),J=n(Fa,"UL",{});var ee=s(J);Zv=n(ee,"LI",{});var K8e=s(Zv);gue=n(K8e,"STRONG",{});var r_t=s(gue);sdr=r(r_t,"albert"),r_t.forEach(t),ldr=r(K8e," \u2014 "),WV=n(K8e,"A",{href:!0});var t_t=s(WV);idr=r(t_t,"TFAlbertForMaskedLM"),t_t.forEach(t),ddr=r(K8e," (ALBERT model)"),K8e.forEach(t),cdr=i(ee),e6=n(ee,"LI",{});var Z8e=s(e6);hue=n(Z8e,"STRONG",{});var a_t=s(hue);fdr=r(a_t,"bert"),a_t.forEach(t),mdr=r(Z8e," \u2014 "),HV=n(Z8e,"A",{href:!0});var n_t=s(HV);gdr=r(n_t,"TFBertForMaskedLM"),n_t.forEach(t),hdr=r(Z8e," (BERT model)"),Z8e.forEach(t),pdr=i(ee),o6=n(ee,"LI",{});var e9e=s(o6);pue=n(e9e,"STRONG",{});var s_t=s(pue);_dr=r(s_t,"camembert"),s_t.forEach(t),udr=r(e9e," \u2014 "),UV=n(e9e,"A",{href:!0});var l_t=s(UV);bdr=r(l_t,"TFCamembertForMaskedLM"),l_t.forEach(t),Fdr=r(e9e," (CamemBERT model)"),e9e.forEach(t),vdr=i(ee),r6=n(ee,"LI",{});var o9e=s(r6);_ue=n(o9e,"STRONG",{});var i_t=s(_ue);Tdr=r(i_t,"convbert"),i_t.forEach(t),Mdr=r(o9e," \u2014 "),JV=n(o9e,"A",{href:!0});var d_t=s(JV);Edr=r(d_t,"TFConvBertForMaskedLM"),d_t.forEach(t),Cdr=r(o9e," (ConvBERT model)"),o9e.forEach(t),wdr=i(ee),t6=n(ee,"LI",{});var r9e=s(t6);uue=n(r9e,"STRONG",{});var c_t=s(uue);Adr=r(c_t,"deberta"),c_t.forEach(t),ydr=r(r9e," \u2014 "),YV=n(r9e,"A",{href:!0});var f_t=s(YV);Ldr=r(f_t,"TFDebertaForMaskedLM"),f_t.forEach(t),xdr=r(r9e," (DeBERTa model)"),r9e.forEach(t),kdr=i(ee),a6=n(ee,"LI",{});var t9e=s(a6);bue=n(t9e,"STRONG",{});var m_t=s(bue);Sdr=r(m_t,"deberta-v2"),m_t.forEach(t),Rdr=r(t9e," \u2014 "),KV=n(t9e,"A",{href:!0});var g_t=s(KV);Bdr=r(g_t,"TFDebertaV2ForMaskedLM"),g_t.forEach(t),Pdr=r(t9e," (DeBERTa-v2 model)"),t9e.forEach(t),$dr=i(ee),n6=n(ee,"LI",{});var a9e=s(n6);Fue=n(a9e,"STRONG",{});var h_t=s(Fue);Idr=r(h_t,"distilbert"),h_t.forEach(t),qdr=r(a9e," \u2014 "),ZV=n(a9e,"A",{href:!0});var p_t=s(ZV);Ndr=r(p_t,"TFDistilBertForMaskedLM"),p_t.forEach(t),jdr=r(a9e," (DistilBERT model)"),a9e.forEach(t),Ddr=i(ee),s6=n(ee,"LI",{});var n9e=s(s6);vue=n(n9e,"STRONG",{});var __t=s(vue);Gdr=r(__t,"electra"),__t.forEach(t),Odr=r(n9e," \u2014 "),eX=n(n9e,"A",{href:!0});var u_t=s(eX);Vdr=r(u_t,"TFElectraForMaskedLM"),u_t.forEach(t),Xdr=r(n9e," (ELECTRA model)"),n9e.forEach(t),zdr=i(ee),l6=n(ee,"LI",{});var s9e=s(l6);Tue=n(s9e,"STRONG",{});var b_t=s(Tue);Qdr=r(b_t,"flaubert"),b_t.forEach(t),Wdr=r(s9e," \u2014 "),oX=n(s9e,"A",{href:!0});var F_t=s(oX);Hdr=r(F_t,"TFFlaubertWithLMHeadModel"),F_t.forEach(t),Udr=r(s9e," (FlauBERT model)"),s9e.forEach(t),Jdr=i(ee),i6=n(ee,"LI",{});var l9e=s(i6);Mue=n(l9e,"STRONG",{});var v_t=s(Mue);Ydr=r(v_t,"funnel"),v_t.forEach(t),Kdr=r(l9e," \u2014 "),rX=n(l9e,"A",{href:!0});var T_t=s(rX);Zdr=r(T_t,"TFFunnelForMaskedLM"),T_t.forEach(t),ecr=r(l9e," (Funnel Transformer model)"),l9e.forEach(t),ocr=i(ee),d6=n(ee,"LI",{});var i9e=s(d6);Eue=n(i9e,"STRONG",{});var M_t=s(Eue);rcr=r(M_t,"layoutlm"),M_t.forEach(t),tcr=r(i9e," \u2014 "),tX=n(i9e,"A",{href:!0});var E_t=s(tX);acr=r(E_t,"TFLayoutLMForMaskedLM"),E_t.forEach(t),ncr=r(i9e," (LayoutLM model)"),i9e.forEach(t),scr=i(ee),c6=n(ee,"LI",{});var d9e=s(c6);Cue=n(d9e,"STRONG",{});var C_t=s(Cue);lcr=r(C_t,"longformer"),C_t.forEach(t),icr=r(d9e," \u2014 "),aX=n(d9e,"A",{href:!0});var w_t=s(aX);dcr=r(w_t,"TFLongformerForMaskedLM"),w_t.forEach(t),ccr=r(d9e," (Longformer model)"),d9e.forEach(t),fcr=i(ee),f6=n(ee,"LI",{});var c9e=s(f6);wue=n(c9e,"STRONG",{});var A_t=s(wue);mcr=r(A_t,"mobilebert"),A_t.forEach(t),gcr=r(c9e," \u2014 "),nX=n(c9e,"A",{href:!0});var y_t=s(nX);hcr=r(y_t,"TFMobileBertForMaskedLM"),y_t.forEach(t),pcr=r(c9e," (MobileBERT model)"),c9e.forEach(t),_cr=i(ee),m6=n(ee,"LI",{});var f9e=s(m6);Aue=n(f9e,"STRONG",{});var L_t=s(Aue);ucr=r(L_t,"mpnet"),L_t.forEach(t),bcr=r(f9e," \u2014 "),sX=n(f9e,"A",{href:!0});var x_t=s(sX);Fcr=r(x_t,"TFMPNetForMaskedLM"),x_t.forEach(t),vcr=r(f9e," (MPNet model)"),f9e.forEach(t),Tcr=i(ee),g6=n(ee,"LI",{});var m9e=s(g6);yue=n(m9e,"STRONG",{});var k_t=s(yue);Mcr=r(k_t,"rembert"),k_t.forEach(t),Ecr=r(m9e," \u2014 "),lX=n(m9e,"A",{href:!0});var S_t=s(lX);Ccr=r(S_t,"TFRemBertForMaskedLM"),S_t.forEach(t),wcr=r(m9e," (RemBERT model)"),m9e.forEach(t),Acr=i(ee),h6=n(ee,"LI",{});var g9e=s(h6);Lue=n(g9e,"STRONG",{});var R_t=s(Lue);ycr=r(R_t,"roberta"),R_t.forEach(t),Lcr=r(g9e," \u2014 "),iX=n(g9e,"A",{href:!0});var B_t=s(iX);xcr=r(B_t,"TFRobertaForMaskedLM"),B_t.forEach(t),kcr=r(g9e," (RoBERTa model)"),g9e.forEach(t),Scr=i(ee),p6=n(ee,"LI",{});var h9e=s(p6);xue=n(h9e,"STRONG",{});var P_t=s(xue);Rcr=r(P_t,"roformer"),P_t.forEach(t),Bcr=r(h9e," \u2014 "),dX=n(h9e,"A",{href:!0});var $_t=s(dX);Pcr=r($_t,"TFRoFormerForMaskedLM"),$_t.forEach(t),$cr=r(h9e," (RoFormer model)"),h9e.forEach(t),Icr=i(ee),_6=n(ee,"LI",{});var p9e=s(_6);kue=n(p9e,"STRONG",{});var I_t=s(kue);qcr=r(I_t,"tapas"),I_t.forEach(t),Ncr=r(p9e," \u2014 "),cX=n(p9e,"A",{href:!0});var q_t=s(cX);jcr=r(q_t,"TFTapasForMaskedLM"),q_t.forEach(t),Dcr=r(p9e," (TAPAS model)"),p9e.forEach(t),Gcr=i(ee),u6=n(ee,"LI",{});var _9e=s(u6);Sue=n(_9e,"STRONG",{});var N_t=s(Sue);Ocr=r(N_t,"xlm"),N_t.forEach(t),Vcr=r(_9e," \u2014 "),fX=n(_9e,"A",{href:!0});var j_t=s(fX);Xcr=r(j_t,"TFXLMWithLMHeadModel"),j_t.forEach(t),zcr=r(_9e," (XLM model)"),_9e.forEach(t),Qcr=i(ee),b6=n(ee,"LI",{});var u9e=s(b6);Rue=n(u9e,"STRONG",{});var D_t=s(Rue);Wcr=r(D_t,"xlm-roberta"),D_t.forEach(t),Hcr=r(u9e," \u2014 "),mX=n(u9e,"A",{href:!0});var G_t=s(mX);Ucr=r(G_t,"TFXLMRobertaForMaskedLM"),G_t.forEach(t),Jcr=r(u9e," (XLM-RoBERTa model)"),u9e.forEach(t),ee.forEach(t),Ycr=i(Fa),Bue=n(Fa,"P",{});var O_t=s(Bue);Kcr=r(O_t,"Examples:"),O_t.forEach(t),Zcr=i(Fa),m(P0.$$.fragment,Fa),Fa.forEach(t),Wl.forEach(t),hBe=i(c),Lc=n(c,"H2",{class:!0});var w$e=s(Lc);F6=n(w$e,"A",{id:!0,class:!0,href:!0});var V_t=s(F6);Pue=n(V_t,"SPAN",{});var X_t=s(Pue);m($0.$$.fragment,X_t),X_t.forEach(t),V_t.forEach(t),efr=i(w$e),$ue=n(w$e,"SPAN",{});var z_t=s($ue);ofr=r(z_t,"TFAutoModelForSeq2SeqLM"),z_t.forEach(t),w$e.forEach(t),pBe=i(c),Cr=n(c,"DIV",{class:!0});var Ul=s(Cr);m(I0.$$.fragment,Ul),rfr=i(Ul),xc=n(Ul,"P",{});var lJ=s(xc);tfr=r(lJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),gX=n(lJ,"A",{href:!0});var Q_t=s(gX);afr=r(Q_t,"from_pretrained()"),Q_t.forEach(t),nfr=r(lJ," class method or the "),hX=n(lJ,"A",{href:!0});var W_t=s(hX);sfr=r(W_t,"from_config()"),W_t.forEach(t),lfr=r(lJ,` class
method.`),lJ.forEach(t),ifr=i(Ul),q0=n(Ul,"P",{});var A$e=s(q0);dfr=r(A$e,"This class cannot be instantiated directly using "),Iue=n(A$e,"CODE",{});var H_t=s(Iue);cfr=r(H_t,"__init__()"),H_t.forEach(t),ffr=r(A$e," (throws an error)."),A$e.forEach(t),mfr=i(Ul),bt=n(Ul,"DIV",{class:!0});var Jl=s(bt);m(N0.$$.fragment,Jl),gfr=i(Jl),que=n(Jl,"P",{});var U_t=s(que);hfr=r(U_t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),U_t.forEach(t),pfr=i(Jl),kc=n(Jl,"P",{});var iJ=s(kc);_fr=r(iJ,`Note:
Loading a model from its configuration file does `),Nue=n(iJ,"STRONG",{});var J_t=s(Nue);ufr=r(J_t,"not"),J_t.forEach(t),bfr=r(iJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),pX=n(iJ,"A",{href:!0});var Y_t=s(pX);Ffr=r(Y_t,"from_pretrained()"),Y_t.forEach(t),vfr=r(iJ," to load the model weights."),iJ.forEach(t),Tfr=i(Jl),jue=n(Jl,"P",{});var K_t=s(jue);Mfr=r(K_t,"Examples:"),K_t.forEach(t),Efr=i(Jl),m(j0.$$.fragment,Jl),Jl.forEach(t),Cfr=i(Ul),Fo=n(Ul,"DIV",{class:!0});var va=s(Fo);m(D0.$$.fragment,va),wfr=i(va),Due=n(va,"P",{});var Z_t=s(Due);Afr=r(Z_t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Z_t.forEach(t),yfr=i(va),Tn=n(va,"P",{});var ZE=s(Tn);Lfr=r(ZE,"The model class to instantiate is selected based on the "),Gue=n(ZE,"CODE",{});var eut=s(Gue);xfr=r(eut,"model_type"),eut.forEach(t),kfr=r(ZE,` property of the config object (either
passed as an argument or loaded from `),Oue=n(ZE,"CODE",{});var out=s(Oue);Sfr=r(out,"pretrained_model_name_or_path"),out.forEach(t),Rfr=r(ZE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vue=n(ZE,"CODE",{});var rut=s(Vue);Bfr=r(rut,"pretrained_model_name_or_path"),rut.forEach(t),Pfr=r(ZE,":"),ZE.forEach(t),$fr=i(va),ue=n(va,"UL",{});var we=s(ue);v6=n(we,"LI",{});var b9e=s(v6);Xue=n(b9e,"STRONG",{});var tut=s(Xue);Ifr=r(tut,"bart"),tut.forEach(t),qfr=r(b9e," \u2014 "),_X=n(b9e,"A",{href:!0});var aut=s(_X);Nfr=r(aut,"TFBartForConditionalGeneration"),aut.forEach(t),jfr=r(b9e," (BART model)"),b9e.forEach(t),Dfr=i(we),T6=n(we,"LI",{});var F9e=s(T6);zue=n(F9e,"STRONG",{});var nut=s(zue);Gfr=r(nut,"blenderbot"),nut.forEach(t),Ofr=r(F9e," \u2014 "),uX=n(F9e,"A",{href:!0});var sut=s(uX);Vfr=r(sut,"TFBlenderbotForConditionalGeneration"),sut.forEach(t),Xfr=r(F9e," (Blenderbot model)"),F9e.forEach(t),zfr=i(we),M6=n(we,"LI",{});var v9e=s(M6);Que=n(v9e,"STRONG",{});var lut=s(Que);Qfr=r(lut,"blenderbot-small"),lut.forEach(t),Wfr=r(v9e," \u2014 "),bX=n(v9e,"A",{href:!0});var iut=s(bX);Hfr=r(iut,"TFBlenderbotSmallForConditionalGeneration"),iut.forEach(t),Ufr=r(v9e," (BlenderbotSmall model)"),v9e.forEach(t),Jfr=i(we),E6=n(we,"LI",{});var T9e=s(E6);Wue=n(T9e,"STRONG",{});var dut=s(Wue);Yfr=r(dut,"encoder-decoder"),dut.forEach(t),Kfr=r(T9e," \u2014 "),FX=n(T9e,"A",{href:!0});var cut=s(FX);Zfr=r(cut,"TFEncoderDecoderModel"),cut.forEach(t),emr=r(T9e," (Encoder decoder model)"),T9e.forEach(t),omr=i(we),C6=n(we,"LI",{});var M9e=s(C6);Hue=n(M9e,"STRONG",{});var fut=s(Hue);rmr=r(fut,"led"),fut.forEach(t),tmr=r(M9e," \u2014 "),vX=n(M9e,"A",{href:!0});var mut=s(vX);amr=r(mut,"TFLEDForConditionalGeneration"),mut.forEach(t),nmr=r(M9e," (LED model)"),M9e.forEach(t),smr=i(we),w6=n(we,"LI",{});var E9e=s(w6);Uue=n(E9e,"STRONG",{});var gut=s(Uue);lmr=r(gut,"marian"),gut.forEach(t),imr=r(E9e," \u2014 "),TX=n(E9e,"A",{href:!0});var hut=s(TX);dmr=r(hut,"TFMarianMTModel"),hut.forEach(t),cmr=r(E9e," (Marian model)"),E9e.forEach(t),fmr=i(we),A6=n(we,"LI",{});var C9e=s(A6);Jue=n(C9e,"STRONG",{});var put=s(Jue);mmr=r(put,"mbart"),put.forEach(t),gmr=r(C9e," \u2014 "),MX=n(C9e,"A",{href:!0});var _ut=s(MX);hmr=r(_ut,"TFMBartForConditionalGeneration"),_ut.forEach(t),pmr=r(C9e," (mBART model)"),C9e.forEach(t),_mr=i(we),y6=n(we,"LI",{});var w9e=s(y6);Yue=n(w9e,"STRONG",{});var uut=s(Yue);umr=r(uut,"mt5"),uut.forEach(t),bmr=r(w9e," \u2014 "),EX=n(w9e,"A",{href:!0});var but=s(EX);Fmr=r(but,"TFMT5ForConditionalGeneration"),but.forEach(t),vmr=r(w9e," (mT5 model)"),w9e.forEach(t),Tmr=i(we),L6=n(we,"LI",{});var A9e=s(L6);Kue=n(A9e,"STRONG",{});var Fut=s(Kue);Mmr=r(Fut,"pegasus"),Fut.forEach(t),Emr=r(A9e," \u2014 "),CX=n(A9e,"A",{href:!0});var vut=s(CX);Cmr=r(vut,"TFPegasusForConditionalGeneration"),vut.forEach(t),wmr=r(A9e," (Pegasus model)"),A9e.forEach(t),Amr=i(we),x6=n(we,"LI",{});var y9e=s(x6);Zue=n(y9e,"STRONG",{});var Tut=s(Zue);ymr=r(Tut,"t5"),Tut.forEach(t),Lmr=r(y9e," \u2014 "),wX=n(y9e,"A",{href:!0});var Mut=s(wX);xmr=r(Mut,"TFT5ForConditionalGeneration"),Mut.forEach(t),kmr=r(y9e," (T5 model)"),y9e.forEach(t),we.forEach(t),Smr=i(va),e1e=n(va,"P",{});var Eut=s(e1e);Rmr=r(Eut,"Examples:"),Eut.forEach(t),Bmr=i(va),m(G0.$$.fragment,va),va.forEach(t),Ul.forEach(t),_Be=i(c),Sc=n(c,"H2",{class:!0});var y$e=s(Sc);k6=n(y$e,"A",{id:!0,class:!0,href:!0});var Cut=s(k6);o1e=n(Cut,"SPAN",{});var wut=s(o1e);m(O0.$$.fragment,wut),wut.forEach(t),Cut.forEach(t),Pmr=i(y$e),r1e=n(y$e,"SPAN",{});var Aut=s(r1e);$mr=r(Aut,"TFAutoModelForSequenceClassification"),Aut.forEach(t),y$e.forEach(t),uBe=i(c),wr=n(c,"DIV",{class:!0});var Yl=s(wr);m(V0.$$.fragment,Yl),Imr=i(Yl),Rc=n(Yl,"P",{});var dJ=s(Rc);qmr=r(dJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),AX=n(dJ,"A",{href:!0});var yut=s(AX);Nmr=r(yut,"from_pretrained()"),yut.forEach(t),jmr=r(dJ," class method or the "),yX=n(dJ,"A",{href:!0});var Lut=s(yX);Dmr=r(Lut,"from_config()"),Lut.forEach(t),Gmr=r(dJ,` class
method.`),dJ.forEach(t),Omr=i(Yl),X0=n(Yl,"P",{});var L$e=s(X0);Vmr=r(L$e,"This class cannot be instantiated directly using "),t1e=n(L$e,"CODE",{});var xut=s(t1e);Xmr=r(xut,"__init__()"),xut.forEach(t),zmr=r(L$e," (throws an error)."),L$e.forEach(t),Qmr=i(Yl),Ft=n(Yl,"DIV",{class:!0});var Kl=s(Ft);m(z0.$$.fragment,Kl),Wmr=i(Kl),a1e=n(Kl,"P",{});var kut=s(a1e);Hmr=r(kut,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),kut.forEach(t),Umr=i(Kl),Bc=n(Kl,"P",{});var cJ=s(Bc);Jmr=r(cJ,`Note:
Loading a model from its configuration file does `),n1e=n(cJ,"STRONG",{});var Sut=s(n1e);Ymr=r(Sut,"not"),Sut.forEach(t),Kmr=r(cJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),LX=n(cJ,"A",{href:!0});var Rut=s(LX);Zmr=r(Rut,"from_pretrained()"),Rut.forEach(t),egr=r(cJ," to load the model weights."),cJ.forEach(t),ogr=i(Kl),s1e=n(Kl,"P",{});var But=s(s1e);rgr=r(But,"Examples:"),But.forEach(t),tgr=i(Kl),m(Q0.$$.fragment,Kl),Kl.forEach(t),agr=i(Yl),vo=n(Yl,"DIV",{class:!0});var Ta=s(vo);m(W0.$$.fragment,Ta),ngr=i(Ta),l1e=n(Ta,"P",{});var Put=s(l1e);sgr=r(Put,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Put.forEach(t),lgr=i(Ta),Mn=n(Ta,"P",{});var eC=s(Mn);igr=r(eC,"The model class to instantiate is selected based on the "),i1e=n(eC,"CODE",{});var $ut=s(i1e);dgr=r($ut,"model_type"),$ut.forEach(t),cgr=r(eC,` property of the config object (either
passed as an argument or loaded from `),d1e=n(eC,"CODE",{});var Iut=s(d1e);fgr=r(Iut,"pretrained_model_name_or_path"),Iut.forEach(t),mgr=r(eC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c1e=n(eC,"CODE",{});var qut=s(c1e);ggr=r(qut,"pretrained_model_name_or_path"),qut.forEach(t),hgr=r(eC,":"),eC.forEach(t),pgr=i(Ta),V=n(Ta,"UL",{});var Q=s(V);S6=n(Q,"LI",{});var L9e=s(S6);f1e=n(L9e,"STRONG",{});var Nut=s(f1e);_gr=r(Nut,"albert"),Nut.forEach(t),ugr=r(L9e," \u2014 "),xX=n(L9e,"A",{href:!0});var jut=s(xX);bgr=r(jut,"TFAlbertForSequenceClassification"),jut.forEach(t),Fgr=r(L9e," (ALBERT model)"),L9e.forEach(t),vgr=i(Q),R6=n(Q,"LI",{});var x9e=s(R6);m1e=n(x9e,"STRONG",{});var Dut=s(m1e);Tgr=r(Dut,"bert"),Dut.forEach(t),Mgr=r(x9e," \u2014 "),kX=n(x9e,"A",{href:!0});var Gut=s(kX);Egr=r(Gut,"TFBertForSequenceClassification"),Gut.forEach(t),Cgr=r(x9e," (BERT model)"),x9e.forEach(t),wgr=i(Q),B6=n(Q,"LI",{});var k9e=s(B6);g1e=n(k9e,"STRONG",{});var Out=s(g1e);Agr=r(Out,"camembert"),Out.forEach(t),ygr=r(k9e," \u2014 "),SX=n(k9e,"A",{href:!0});var Vut=s(SX);Lgr=r(Vut,"TFCamembertForSequenceClassification"),Vut.forEach(t),xgr=r(k9e," (CamemBERT model)"),k9e.forEach(t),kgr=i(Q),P6=n(Q,"LI",{});var S9e=s(P6);h1e=n(S9e,"STRONG",{});var Xut=s(h1e);Sgr=r(Xut,"convbert"),Xut.forEach(t),Rgr=r(S9e," \u2014 "),RX=n(S9e,"A",{href:!0});var zut=s(RX);Bgr=r(zut,"TFConvBertForSequenceClassification"),zut.forEach(t),Pgr=r(S9e," (ConvBERT model)"),S9e.forEach(t),$gr=i(Q),$6=n(Q,"LI",{});var R9e=s($6);p1e=n(R9e,"STRONG",{});var Qut=s(p1e);Igr=r(Qut,"ctrl"),Qut.forEach(t),qgr=r(R9e," \u2014 "),BX=n(R9e,"A",{href:!0});var Wut=s(BX);Ngr=r(Wut,"TFCTRLForSequenceClassification"),Wut.forEach(t),jgr=r(R9e," (CTRL model)"),R9e.forEach(t),Dgr=i(Q),I6=n(Q,"LI",{});var B9e=s(I6);_1e=n(B9e,"STRONG",{});var Hut=s(_1e);Ggr=r(Hut,"deberta"),Hut.forEach(t),Ogr=r(B9e," \u2014 "),PX=n(B9e,"A",{href:!0});var Uut=s(PX);Vgr=r(Uut,"TFDebertaForSequenceClassification"),Uut.forEach(t),Xgr=r(B9e," (DeBERTa model)"),B9e.forEach(t),zgr=i(Q),q6=n(Q,"LI",{});var P9e=s(q6);u1e=n(P9e,"STRONG",{});var Jut=s(u1e);Qgr=r(Jut,"deberta-v2"),Jut.forEach(t),Wgr=r(P9e," \u2014 "),$X=n(P9e,"A",{href:!0});var Yut=s($X);Hgr=r(Yut,"TFDebertaV2ForSequenceClassification"),Yut.forEach(t),Ugr=r(P9e," (DeBERTa-v2 model)"),P9e.forEach(t),Jgr=i(Q),N6=n(Q,"LI",{});var $9e=s(N6);b1e=n($9e,"STRONG",{});var Kut=s(b1e);Ygr=r(Kut,"distilbert"),Kut.forEach(t),Kgr=r($9e," \u2014 "),IX=n($9e,"A",{href:!0});var Zut=s(IX);Zgr=r(Zut,"TFDistilBertForSequenceClassification"),Zut.forEach(t),ehr=r($9e," (DistilBERT model)"),$9e.forEach(t),ohr=i(Q),j6=n(Q,"LI",{});var I9e=s(j6);F1e=n(I9e,"STRONG",{});var e1t=s(F1e);rhr=r(e1t,"electra"),e1t.forEach(t),thr=r(I9e," \u2014 "),qX=n(I9e,"A",{href:!0});var o1t=s(qX);ahr=r(o1t,"TFElectraForSequenceClassification"),o1t.forEach(t),nhr=r(I9e," (ELECTRA model)"),I9e.forEach(t),shr=i(Q),D6=n(Q,"LI",{});var q9e=s(D6);v1e=n(q9e,"STRONG",{});var r1t=s(v1e);lhr=r(r1t,"flaubert"),r1t.forEach(t),ihr=r(q9e," \u2014 "),NX=n(q9e,"A",{href:!0});var t1t=s(NX);dhr=r(t1t,"TFFlaubertForSequenceClassification"),t1t.forEach(t),chr=r(q9e," (FlauBERT model)"),q9e.forEach(t),fhr=i(Q),G6=n(Q,"LI",{});var N9e=s(G6);T1e=n(N9e,"STRONG",{});var a1t=s(T1e);mhr=r(a1t,"funnel"),a1t.forEach(t),ghr=r(N9e," \u2014 "),jX=n(N9e,"A",{href:!0});var n1t=s(jX);hhr=r(n1t,"TFFunnelForSequenceClassification"),n1t.forEach(t),phr=r(N9e," (Funnel Transformer model)"),N9e.forEach(t),_hr=i(Q),O6=n(Q,"LI",{});var j9e=s(O6);M1e=n(j9e,"STRONG",{});var s1t=s(M1e);uhr=r(s1t,"gpt2"),s1t.forEach(t),bhr=r(j9e," \u2014 "),DX=n(j9e,"A",{href:!0});var l1t=s(DX);Fhr=r(l1t,"TFGPT2ForSequenceClassification"),l1t.forEach(t),vhr=r(j9e," (OpenAI GPT-2 model)"),j9e.forEach(t),Thr=i(Q),V6=n(Q,"LI",{});var D9e=s(V6);E1e=n(D9e,"STRONG",{});var i1t=s(E1e);Mhr=r(i1t,"gptj"),i1t.forEach(t),Ehr=r(D9e," \u2014 "),GX=n(D9e,"A",{href:!0});var d1t=s(GX);Chr=r(d1t,"TFGPTJForSequenceClassification"),d1t.forEach(t),whr=r(D9e," (GPT-J model)"),D9e.forEach(t),Ahr=i(Q),X6=n(Q,"LI",{});var G9e=s(X6);C1e=n(G9e,"STRONG",{});var c1t=s(C1e);yhr=r(c1t,"layoutlm"),c1t.forEach(t),Lhr=r(G9e," \u2014 "),OX=n(G9e,"A",{href:!0});var f1t=s(OX);xhr=r(f1t,"TFLayoutLMForSequenceClassification"),f1t.forEach(t),khr=r(G9e," (LayoutLM model)"),G9e.forEach(t),Shr=i(Q),z6=n(Q,"LI",{});var O9e=s(z6);w1e=n(O9e,"STRONG",{});var m1t=s(w1e);Rhr=r(m1t,"longformer"),m1t.forEach(t),Bhr=r(O9e," \u2014 "),VX=n(O9e,"A",{href:!0});var g1t=s(VX);Phr=r(g1t,"TFLongformerForSequenceClassification"),g1t.forEach(t),$hr=r(O9e," (Longformer model)"),O9e.forEach(t),Ihr=i(Q),Q6=n(Q,"LI",{});var V9e=s(Q6);A1e=n(V9e,"STRONG",{});var h1t=s(A1e);qhr=r(h1t,"mobilebert"),h1t.forEach(t),Nhr=r(V9e," \u2014 "),XX=n(V9e,"A",{href:!0});var p1t=s(XX);jhr=r(p1t,"TFMobileBertForSequenceClassification"),p1t.forEach(t),Dhr=r(V9e," (MobileBERT model)"),V9e.forEach(t),Ghr=i(Q),W6=n(Q,"LI",{});var X9e=s(W6);y1e=n(X9e,"STRONG",{});var _1t=s(y1e);Ohr=r(_1t,"mpnet"),_1t.forEach(t),Vhr=r(X9e," \u2014 "),zX=n(X9e,"A",{href:!0});var u1t=s(zX);Xhr=r(u1t,"TFMPNetForSequenceClassification"),u1t.forEach(t),zhr=r(X9e," (MPNet model)"),X9e.forEach(t),Qhr=i(Q),H6=n(Q,"LI",{});var z9e=s(H6);L1e=n(z9e,"STRONG",{});var b1t=s(L1e);Whr=r(b1t,"openai-gpt"),b1t.forEach(t),Hhr=r(z9e," \u2014 "),QX=n(z9e,"A",{href:!0});var F1t=s(QX);Uhr=r(F1t,"TFOpenAIGPTForSequenceClassification"),F1t.forEach(t),Jhr=r(z9e," (OpenAI GPT model)"),z9e.forEach(t),Yhr=i(Q),U6=n(Q,"LI",{});var Q9e=s(U6);x1e=n(Q9e,"STRONG",{});var v1t=s(x1e);Khr=r(v1t,"rembert"),v1t.forEach(t),Zhr=r(Q9e," \u2014 "),WX=n(Q9e,"A",{href:!0});var T1t=s(WX);epr=r(T1t,"TFRemBertForSequenceClassification"),T1t.forEach(t),opr=r(Q9e," (RemBERT model)"),Q9e.forEach(t),rpr=i(Q),J6=n(Q,"LI",{});var W9e=s(J6);k1e=n(W9e,"STRONG",{});var M1t=s(k1e);tpr=r(M1t,"roberta"),M1t.forEach(t),apr=r(W9e," \u2014 "),HX=n(W9e,"A",{href:!0});var E1t=s(HX);npr=r(E1t,"TFRobertaForSequenceClassification"),E1t.forEach(t),spr=r(W9e," (RoBERTa model)"),W9e.forEach(t),lpr=i(Q),Y6=n(Q,"LI",{});var H9e=s(Y6);S1e=n(H9e,"STRONG",{});var C1t=s(S1e);ipr=r(C1t,"roformer"),C1t.forEach(t),dpr=r(H9e," \u2014 "),UX=n(H9e,"A",{href:!0});var w1t=s(UX);cpr=r(w1t,"TFRoFormerForSequenceClassification"),w1t.forEach(t),fpr=r(H9e," (RoFormer model)"),H9e.forEach(t),mpr=i(Q),K6=n(Q,"LI",{});var U9e=s(K6);R1e=n(U9e,"STRONG",{});var A1t=s(R1e);gpr=r(A1t,"tapas"),A1t.forEach(t),hpr=r(U9e," \u2014 "),JX=n(U9e,"A",{href:!0});var y1t=s(JX);ppr=r(y1t,"TFTapasForSequenceClassification"),y1t.forEach(t),_pr=r(U9e," (TAPAS model)"),U9e.forEach(t),upr=i(Q),Z6=n(Q,"LI",{});var J9e=s(Z6);B1e=n(J9e,"STRONG",{});var L1t=s(B1e);bpr=r(L1t,"transfo-xl"),L1t.forEach(t),Fpr=r(J9e," \u2014 "),YX=n(J9e,"A",{href:!0});var x1t=s(YX);vpr=r(x1t,"TFTransfoXLForSequenceClassification"),x1t.forEach(t),Tpr=r(J9e," (Transformer-XL model)"),J9e.forEach(t),Mpr=i(Q),eT=n(Q,"LI",{});var Y9e=s(eT);P1e=n(Y9e,"STRONG",{});var k1t=s(P1e);Epr=r(k1t,"xlm"),k1t.forEach(t),Cpr=r(Y9e," \u2014 "),KX=n(Y9e,"A",{href:!0});var S1t=s(KX);wpr=r(S1t,"TFXLMForSequenceClassification"),S1t.forEach(t),Apr=r(Y9e," (XLM model)"),Y9e.forEach(t),ypr=i(Q),oT=n(Q,"LI",{});var K9e=s(oT);$1e=n(K9e,"STRONG",{});var R1t=s($1e);Lpr=r(R1t,"xlm-roberta"),R1t.forEach(t),xpr=r(K9e," \u2014 "),ZX=n(K9e,"A",{href:!0});var B1t=s(ZX);kpr=r(B1t,"TFXLMRobertaForSequenceClassification"),B1t.forEach(t),Spr=r(K9e," (XLM-RoBERTa model)"),K9e.forEach(t),Rpr=i(Q),rT=n(Q,"LI",{});var Z9e=s(rT);I1e=n(Z9e,"STRONG",{});var P1t=s(I1e);Bpr=r(P1t,"xlnet"),P1t.forEach(t),Ppr=r(Z9e," \u2014 "),ez=n(Z9e,"A",{href:!0});var $1t=s(ez);$pr=r($1t,"TFXLNetForSequenceClassification"),$1t.forEach(t),Ipr=r(Z9e," (XLNet model)"),Z9e.forEach(t),Q.forEach(t),qpr=i(Ta),q1e=n(Ta,"P",{});var I1t=s(q1e);Npr=r(I1t,"Examples:"),I1t.forEach(t),jpr=i(Ta),m(H0.$$.fragment,Ta),Ta.forEach(t),Yl.forEach(t),bBe=i(c),Pc=n(c,"H2",{class:!0});var x$e=s(Pc);tT=n(x$e,"A",{id:!0,class:!0,href:!0});var q1t=s(tT);N1e=n(q1t,"SPAN",{});var N1t=s(N1e);m(U0.$$.fragment,N1t),N1t.forEach(t),q1t.forEach(t),Dpr=i(x$e),j1e=n(x$e,"SPAN",{});var j1t=s(j1e);Gpr=r(j1t,"TFAutoModelForMultipleChoice"),j1t.forEach(t),x$e.forEach(t),FBe=i(c),Ar=n(c,"DIV",{class:!0});var Zl=s(Ar);m(J0.$$.fragment,Zl),Opr=i(Zl),$c=n(Zl,"P",{});var fJ=s($c);Vpr=r(fJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),oz=n(fJ,"A",{href:!0});var D1t=s(oz);Xpr=r(D1t,"from_pretrained()"),D1t.forEach(t),zpr=r(fJ," class method or the "),rz=n(fJ,"A",{href:!0});var G1t=s(rz);Qpr=r(G1t,"from_config()"),G1t.forEach(t),Wpr=r(fJ,` class
method.`),fJ.forEach(t),Hpr=i(Zl),Y0=n(Zl,"P",{});var k$e=s(Y0);Upr=r(k$e,"This class cannot be instantiated directly using "),D1e=n(k$e,"CODE",{});var O1t=s(D1e);Jpr=r(O1t,"__init__()"),O1t.forEach(t),Ypr=r(k$e," (throws an error)."),k$e.forEach(t),Kpr=i(Zl),vt=n(Zl,"DIV",{class:!0});var ei=s(vt);m(K0.$$.fragment,ei),Zpr=i(ei),G1e=n(ei,"P",{});var V1t=s(G1e);e_r=r(V1t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),V1t.forEach(t),o_r=i(ei),Ic=n(ei,"P",{});var mJ=s(Ic);r_r=r(mJ,`Note:
Loading a model from its configuration file does `),O1e=n(mJ,"STRONG",{});var X1t=s(O1e);t_r=r(X1t,"not"),X1t.forEach(t),a_r=r(mJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),tz=n(mJ,"A",{href:!0});var z1t=s(tz);n_r=r(z1t,"from_pretrained()"),z1t.forEach(t),s_r=r(mJ," to load the model weights."),mJ.forEach(t),l_r=i(ei),V1e=n(ei,"P",{});var Q1t=s(V1e);i_r=r(Q1t,"Examples:"),Q1t.forEach(t),d_r=i(ei),m(Z0.$$.fragment,ei),ei.forEach(t),c_r=i(Zl),To=n(Zl,"DIV",{class:!0});var Ma=s(To);m(ey.$$.fragment,Ma),f_r=i(Ma),X1e=n(Ma,"P",{});var W1t=s(X1e);m_r=r(W1t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),W1t.forEach(t),g_r=i(Ma),En=n(Ma,"P",{});var oC=s(En);h_r=r(oC,"The model class to instantiate is selected based on the "),z1e=n(oC,"CODE",{});var H1t=s(z1e);p_r=r(H1t,"model_type"),H1t.forEach(t),__r=r(oC,` property of the config object (either
passed as an argument or loaded from `),Q1e=n(oC,"CODE",{});var U1t=s(Q1e);u_r=r(U1t,"pretrained_model_name_or_path"),U1t.forEach(t),b_r=r(oC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W1e=n(oC,"CODE",{});var J1t=s(W1e);F_r=r(J1t,"pretrained_model_name_or_path"),J1t.forEach(t),v_r=r(oC,":"),oC.forEach(t),T_r=i(Ma),ne=n(Ma,"UL",{});var ie=s(ne);aT=n(ie,"LI",{});var exe=s(aT);H1e=n(exe,"STRONG",{});var Y1t=s(H1e);M_r=r(Y1t,"albert"),Y1t.forEach(t),E_r=r(exe," \u2014 "),az=n(exe,"A",{href:!0});var K1t=s(az);C_r=r(K1t,"TFAlbertForMultipleChoice"),K1t.forEach(t),w_r=r(exe," (ALBERT model)"),exe.forEach(t),A_r=i(ie),nT=n(ie,"LI",{});var oxe=s(nT);U1e=n(oxe,"STRONG",{});var Z1t=s(U1e);y_r=r(Z1t,"bert"),Z1t.forEach(t),L_r=r(oxe," \u2014 "),nz=n(oxe,"A",{href:!0});var e4t=s(nz);x_r=r(e4t,"TFBertForMultipleChoice"),e4t.forEach(t),k_r=r(oxe," (BERT model)"),oxe.forEach(t),S_r=i(ie),sT=n(ie,"LI",{});var rxe=s(sT);J1e=n(rxe,"STRONG",{});var o4t=s(J1e);R_r=r(o4t,"camembert"),o4t.forEach(t),B_r=r(rxe," \u2014 "),sz=n(rxe,"A",{href:!0});var r4t=s(sz);P_r=r(r4t,"TFCamembertForMultipleChoice"),r4t.forEach(t),$_r=r(rxe," (CamemBERT model)"),rxe.forEach(t),I_r=i(ie),lT=n(ie,"LI",{});var txe=s(lT);Y1e=n(txe,"STRONG",{});var t4t=s(Y1e);q_r=r(t4t,"convbert"),t4t.forEach(t),N_r=r(txe," \u2014 "),lz=n(txe,"A",{href:!0});var a4t=s(lz);j_r=r(a4t,"TFConvBertForMultipleChoice"),a4t.forEach(t),D_r=r(txe," (ConvBERT model)"),txe.forEach(t),G_r=i(ie),iT=n(ie,"LI",{});var axe=s(iT);K1e=n(axe,"STRONG",{});var n4t=s(K1e);O_r=r(n4t,"distilbert"),n4t.forEach(t),V_r=r(axe," \u2014 "),iz=n(axe,"A",{href:!0});var s4t=s(iz);X_r=r(s4t,"TFDistilBertForMultipleChoice"),s4t.forEach(t),z_r=r(axe," (DistilBERT model)"),axe.forEach(t),Q_r=i(ie),dT=n(ie,"LI",{});var nxe=s(dT);Z1e=n(nxe,"STRONG",{});var l4t=s(Z1e);W_r=r(l4t,"electra"),l4t.forEach(t),H_r=r(nxe," \u2014 "),dz=n(nxe,"A",{href:!0});var i4t=s(dz);U_r=r(i4t,"TFElectraForMultipleChoice"),i4t.forEach(t),J_r=r(nxe," (ELECTRA model)"),nxe.forEach(t),Y_r=i(ie),cT=n(ie,"LI",{});var sxe=s(cT);e4e=n(sxe,"STRONG",{});var d4t=s(e4e);K_r=r(d4t,"flaubert"),d4t.forEach(t),Z_r=r(sxe," \u2014 "),cz=n(sxe,"A",{href:!0});var c4t=s(cz);eur=r(c4t,"TFFlaubertForMultipleChoice"),c4t.forEach(t),our=r(sxe," (FlauBERT model)"),sxe.forEach(t),rur=i(ie),fT=n(ie,"LI",{});var lxe=s(fT);o4e=n(lxe,"STRONG",{});var f4t=s(o4e);tur=r(f4t,"funnel"),f4t.forEach(t),aur=r(lxe," \u2014 "),fz=n(lxe,"A",{href:!0});var m4t=s(fz);nur=r(m4t,"TFFunnelForMultipleChoice"),m4t.forEach(t),sur=r(lxe," (Funnel Transformer model)"),lxe.forEach(t),lur=i(ie),mT=n(ie,"LI",{});var ixe=s(mT);r4e=n(ixe,"STRONG",{});var g4t=s(r4e);iur=r(g4t,"longformer"),g4t.forEach(t),dur=r(ixe," \u2014 "),mz=n(ixe,"A",{href:!0});var h4t=s(mz);cur=r(h4t,"TFLongformerForMultipleChoice"),h4t.forEach(t),fur=r(ixe," (Longformer model)"),ixe.forEach(t),mur=i(ie),gT=n(ie,"LI",{});var dxe=s(gT);t4e=n(dxe,"STRONG",{});var p4t=s(t4e);gur=r(p4t,"mobilebert"),p4t.forEach(t),hur=r(dxe," \u2014 "),gz=n(dxe,"A",{href:!0});var _4t=s(gz);pur=r(_4t,"TFMobileBertForMultipleChoice"),_4t.forEach(t),_ur=r(dxe," (MobileBERT model)"),dxe.forEach(t),uur=i(ie),hT=n(ie,"LI",{});var cxe=s(hT);a4e=n(cxe,"STRONG",{});var u4t=s(a4e);bur=r(u4t,"mpnet"),u4t.forEach(t),Fur=r(cxe," \u2014 "),hz=n(cxe,"A",{href:!0});var b4t=s(hz);vur=r(b4t,"TFMPNetForMultipleChoice"),b4t.forEach(t),Tur=r(cxe," (MPNet model)"),cxe.forEach(t),Mur=i(ie),pT=n(ie,"LI",{});var fxe=s(pT);n4e=n(fxe,"STRONG",{});var F4t=s(n4e);Eur=r(F4t,"rembert"),F4t.forEach(t),Cur=r(fxe," \u2014 "),pz=n(fxe,"A",{href:!0});var v4t=s(pz);wur=r(v4t,"TFRemBertForMultipleChoice"),v4t.forEach(t),Aur=r(fxe," (RemBERT model)"),fxe.forEach(t),yur=i(ie),_T=n(ie,"LI",{});var mxe=s(_T);s4e=n(mxe,"STRONG",{});var T4t=s(s4e);Lur=r(T4t,"roberta"),T4t.forEach(t),xur=r(mxe," \u2014 "),_z=n(mxe,"A",{href:!0});var M4t=s(_z);kur=r(M4t,"TFRobertaForMultipleChoice"),M4t.forEach(t),Sur=r(mxe," (RoBERTa model)"),mxe.forEach(t),Rur=i(ie),uT=n(ie,"LI",{});var gxe=s(uT);l4e=n(gxe,"STRONG",{});var E4t=s(l4e);Bur=r(E4t,"roformer"),E4t.forEach(t),Pur=r(gxe," \u2014 "),uz=n(gxe,"A",{href:!0});var C4t=s(uz);$ur=r(C4t,"TFRoFormerForMultipleChoice"),C4t.forEach(t),Iur=r(gxe," (RoFormer model)"),gxe.forEach(t),qur=i(ie),bT=n(ie,"LI",{});var hxe=s(bT);i4e=n(hxe,"STRONG",{});var w4t=s(i4e);Nur=r(w4t,"xlm"),w4t.forEach(t),jur=r(hxe," \u2014 "),bz=n(hxe,"A",{href:!0});var A4t=s(bz);Dur=r(A4t,"TFXLMForMultipleChoice"),A4t.forEach(t),Gur=r(hxe," (XLM model)"),hxe.forEach(t),Our=i(ie),FT=n(ie,"LI",{});var pxe=s(FT);d4e=n(pxe,"STRONG",{});var y4t=s(d4e);Vur=r(y4t,"xlm-roberta"),y4t.forEach(t),Xur=r(pxe," \u2014 "),Fz=n(pxe,"A",{href:!0});var L4t=s(Fz);zur=r(L4t,"TFXLMRobertaForMultipleChoice"),L4t.forEach(t),Qur=r(pxe," (XLM-RoBERTa model)"),pxe.forEach(t),Wur=i(ie),vT=n(ie,"LI",{});var _xe=s(vT);c4e=n(_xe,"STRONG",{});var x4t=s(c4e);Hur=r(x4t,"xlnet"),x4t.forEach(t),Uur=r(_xe," \u2014 "),vz=n(_xe,"A",{href:!0});var k4t=s(vz);Jur=r(k4t,"TFXLNetForMultipleChoice"),k4t.forEach(t),Yur=r(_xe," (XLNet model)"),_xe.forEach(t),ie.forEach(t),Kur=i(Ma),f4e=n(Ma,"P",{});var S4t=s(f4e);Zur=r(S4t,"Examples:"),S4t.forEach(t),e1r=i(Ma),m(oy.$$.fragment,Ma),Ma.forEach(t),Zl.forEach(t),vBe=i(c),qc=n(c,"H2",{class:!0});var S$e=s(qc);TT=n(S$e,"A",{id:!0,class:!0,href:!0});var R4t=s(TT);m4e=n(R4t,"SPAN",{});var B4t=s(m4e);m(ry.$$.fragment,B4t),B4t.forEach(t),R4t.forEach(t),o1r=i(S$e),g4e=n(S$e,"SPAN",{});var P4t=s(g4e);r1r=r(P4t,"TFAutoModelForTableQuestionAnswering"),P4t.forEach(t),S$e.forEach(t),TBe=i(c),yr=n(c,"DIV",{class:!0});var oi=s(yr);m(ty.$$.fragment,oi),t1r=i(oi),Nc=n(oi,"P",{});var gJ=s(Nc);a1r=r(gJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Tz=n(gJ,"A",{href:!0});var $4t=s(Tz);n1r=r($4t,"from_pretrained()"),$4t.forEach(t),s1r=r(gJ," class method or the "),Mz=n(gJ,"A",{href:!0});var I4t=s(Mz);l1r=r(I4t,"from_config()"),I4t.forEach(t),i1r=r(gJ,` class
method.`),gJ.forEach(t),d1r=i(oi),ay=n(oi,"P",{});var R$e=s(ay);c1r=r(R$e,"This class cannot be instantiated directly using "),h4e=n(R$e,"CODE",{});var q4t=s(h4e);f1r=r(q4t,"__init__()"),q4t.forEach(t),m1r=r(R$e," (throws an error)."),R$e.forEach(t),g1r=i(oi),Tt=n(oi,"DIV",{class:!0});var ri=s(Tt);m(ny.$$.fragment,ri),h1r=i(ri),p4e=n(ri,"P",{});var N4t=s(p4e);p1r=r(N4t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),N4t.forEach(t),_1r=i(ri),jc=n(ri,"P",{});var hJ=s(jc);u1r=r(hJ,`Note:
Loading a model from its configuration file does `),_4e=n(hJ,"STRONG",{});var j4t=s(_4e);b1r=r(j4t,"not"),j4t.forEach(t),F1r=r(hJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ez=n(hJ,"A",{href:!0});var D4t=s(Ez);v1r=r(D4t,"from_pretrained()"),D4t.forEach(t),T1r=r(hJ," to load the model weights."),hJ.forEach(t),M1r=i(ri),u4e=n(ri,"P",{});var G4t=s(u4e);E1r=r(G4t,"Examples:"),G4t.forEach(t),C1r=i(ri),m(sy.$$.fragment,ri),ri.forEach(t),w1r=i(oi),Mo=n(oi,"DIV",{class:!0});var Ea=s(Mo);m(ly.$$.fragment,Ea),A1r=i(Ea),b4e=n(Ea,"P",{});var O4t=s(b4e);y1r=r(O4t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),O4t.forEach(t),L1r=i(Ea),Cn=n(Ea,"P",{});var rC=s(Cn);x1r=r(rC,"The model class to instantiate is selected based on the "),F4e=n(rC,"CODE",{});var V4t=s(F4e);k1r=r(V4t,"model_type"),V4t.forEach(t),S1r=r(rC,` property of the config object (either
passed as an argument or loaded from `),v4e=n(rC,"CODE",{});var X4t=s(v4e);R1r=r(X4t,"pretrained_model_name_or_path"),X4t.forEach(t),B1r=r(rC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T4e=n(rC,"CODE",{});var z4t=s(T4e);P1r=r(z4t,"pretrained_model_name_or_path"),z4t.forEach(t),$1r=r(rC,":"),rC.forEach(t),I1r=i(Ea),M4e=n(Ea,"UL",{});var Q4t=s(M4e);MT=n(Q4t,"LI",{});var uxe=s(MT);E4e=n(uxe,"STRONG",{});var W4t=s(E4e);q1r=r(W4t,"tapas"),W4t.forEach(t),N1r=r(uxe," \u2014 "),Cz=n(uxe,"A",{href:!0});var H4t=s(Cz);j1r=r(H4t,"TFTapasForQuestionAnswering"),H4t.forEach(t),D1r=r(uxe," (TAPAS model)"),uxe.forEach(t),Q4t.forEach(t),G1r=i(Ea),C4e=n(Ea,"P",{});var U4t=s(C4e);O1r=r(U4t,"Examples:"),U4t.forEach(t),V1r=i(Ea),m(iy.$$.fragment,Ea),Ea.forEach(t),oi.forEach(t),MBe=i(c),Dc=n(c,"H2",{class:!0});var B$e=s(Dc);ET=n(B$e,"A",{id:!0,class:!0,href:!0});var J4t=s(ET);w4e=n(J4t,"SPAN",{});var Y4t=s(w4e);m(dy.$$.fragment,Y4t),Y4t.forEach(t),J4t.forEach(t),X1r=i(B$e),A4e=n(B$e,"SPAN",{});var K4t=s(A4e);z1r=r(K4t,"TFAutoModelForTokenClassification"),K4t.forEach(t),B$e.forEach(t),EBe=i(c),Lr=n(c,"DIV",{class:!0});var ti=s(Lr);m(cy.$$.fragment,ti),Q1r=i(ti),Gc=n(ti,"P",{});var pJ=s(Gc);W1r=r(pJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),wz=n(pJ,"A",{href:!0});var Z4t=s(wz);H1r=r(Z4t,"from_pretrained()"),Z4t.forEach(t),U1r=r(pJ," class method or the "),Az=n(pJ,"A",{href:!0});var ebt=s(Az);J1r=r(ebt,"from_config()"),ebt.forEach(t),Y1r=r(pJ,` class
method.`),pJ.forEach(t),K1r=i(ti),fy=n(ti,"P",{});var P$e=s(fy);Z1r=r(P$e,"This class cannot be instantiated directly using "),y4e=n(P$e,"CODE",{});var obt=s(y4e);e4r=r(obt,"__init__()"),obt.forEach(t),o4r=r(P$e," (throws an error)."),P$e.forEach(t),r4r=i(ti),Mt=n(ti,"DIV",{class:!0});var ai=s(Mt);m(my.$$.fragment,ai),t4r=i(ai),L4e=n(ai,"P",{});var rbt=s(L4e);a4r=r(rbt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),rbt.forEach(t),n4r=i(ai),Oc=n(ai,"P",{});var _J=s(Oc);s4r=r(_J,`Note:
Loading a model from its configuration file does `),x4e=n(_J,"STRONG",{});var tbt=s(x4e);l4r=r(tbt,"not"),tbt.forEach(t),i4r=r(_J,` load the model weights. It only affects the
model\u2019s configuration. Use `),yz=n(_J,"A",{href:!0});var abt=s(yz);d4r=r(abt,"from_pretrained()"),abt.forEach(t),c4r=r(_J," to load the model weights."),_J.forEach(t),f4r=i(ai),k4e=n(ai,"P",{});var nbt=s(k4e);m4r=r(nbt,"Examples:"),nbt.forEach(t),g4r=i(ai),m(gy.$$.fragment,ai),ai.forEach(t),h4r=i(ti),Eo=n(ti,"DIV",{class:!0});var Ca=s(Eo);m(hy.$$.fragment,Ca),p4r=i(Ca),S4e=n(Ca,"P",{});var sbt=s(S4e);_4r=r(sbt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),sbt.forEach(t),u4r=i(Ca),wn=n(Ca,"P",{});var tC=s(wn);b4r=r(tC,"The model class to instantiate is selected based on the "),R4e=n(tC,"CODE",{});var lbt=s(R4e);F4r=r(lbt,"model_type"),lbt.forEach(t),v4r=r(tC,` property of the config object (either
passed as an argument or loaded from `),B4e=n(tC,"CODE",{});var ibt=s(B4e);T4r=r(ibt,"pretrained_model_name_or_path"),ibt.forEach(t),M4r=r(tC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P4e=n(tC,"CODE",{});var dbt=s(P4e);E4r=r(dbt,"pretrained_model_name_or_path"),dbt.forEach(t),C4r=r(tC,":"),tC.forEach(t),w4r=i(Ca),Y=n(Ca,"UL",{});var oe=s(Y);CT=n(oe,"LI",{});var bxe=s(CT);$4e=n(bxe,"STRONG",{});var cbt=s($4e);A4r=r(cbt,"albert"),cbt.forEach(t),y4r=r(bxe," \u2014 "),Lz=n(bxe,"A",{href:!0});var fbt=s(Lz);L4r=r(fbt,"TFAlbertForTokenClassification"),fbt.forEach(t),x4r=r(bxe," (ALBERT model)"),bxe.forEach(t),k4r=i(oe),wT=n(oe,"LI",{});var Fxe=s(wT);I4e=n(Fxe,"STRONG",{});var mbt=s(I4e);S4r=r(mbt,"bert"),mbt.forEach(t),R4r=r(Fxe," \u2014 "),xz=n(Fxe,"A",{href:!0});var gbt=s(xz);B4r=r(gbt,"TFBertForTokenClassification"),gbt.forEach(t),P4r=r(Fxe," (BERT model)"),Fxe.forEach(t),$4r=i(oe),AT=n(oe,"LI",{});var vxe=s(AT);q4e=n(vxe,"STRONG",{});var hbt=s(q4e);I4r=r(hbt,"camembert"),hbt.forEach(t),q4r=r(vxe," \u2014 "),kz=n(vxe,"A",{href:!0});var pbt=s(kz);N4r=r(pbt,"TFCamembertForTokenClassification"),pbt.forEach(t),j4r=r(vxe," (CamemBERT model)"),vxe.forEach(t),D4r=i(oe),yT=n(oe,"LI",{});var Txe=s(yT);N4e=n(Txe,"STRONG",{});var _bt=s(N4e);G4r=r(_bt,"convbert"),_bt.forEach(t),O4r=r(Txe," \u2014 "),Sz=n(Txe,"A",{href:!0});var ubt=s(Sz);V4r=r(ubt,"TFConvBertForTokenClassification"),ubt.forEach(t),X4r=r(Txe," (ConvBERT model)"),Txe.forEach(t),z4r=i(oe),LT=n(oe,"LI",{});var Mxe=s(LT);j4e=n(Mxe,"STRONG",{});var bbt=s(j4e);Q4r=r(bbt,"deberta"),bbt.forEach(t),W4r=r(Mxe," \u2014 "),Rz=n(Mxe,"A",{href:!0});var Fbt=s(Rz);H4r=r(Fbt,"TFDebertaForTokenClassification"),Fbt.forEach(t),U4r=r(Mxe," (DeBERTa model)"),Mxe.forEach(t),J4r=i(oe),xT=n(oe,"LI",{});var Exe=s(xT);D4e=n(Exe,"STRONG",{});var vbt=s(D4e);Y4r=r(vbt,"deberta-v2"),vbt.forEach(t),K4r=r(Exe," \u2014 "),Bz=n(Exe,"A",{href:!0});var Tbt=s(Bz);Z4r=r(Tbt,"TFDebertaV2ForTokenClassification"),Tbt.forEach(t),ebr=r(Exe," (DeBERTa-v2 model)"),Exe.forEach(t),obr=i(oe),kT=n(oe,"LI",{});var Cxe=s(kT);G4e=n(Cxe,"STRONG",{});var Mbt=s(G4e);rbr=r(Mbt,"distilbert"),Mbt.forEach(t),tbr=r(Cxe," \u2014 "),Pz=n(Cxe,"A",{href:!0});var Ebt=s(Pz);abr=r(Ebt,"TFDistilBertForTokenClassification"),Ebt.forEach(t),nbr=r(Cxe," (DistilBERT model)"),Cxe.forEach(t),sbr=i(oe),ST=n(oe,"LI",{});var wxe=s(ST);O4e=n(wxe,"STRONG",{});var Cbt=s(O4e);lbr=r(Cbt,"electra"),Cbt.forEach(t),ibr=r(wxe," \u2014 "),$z=n(wxe,"A",{href:!0});var wbt=s($z);dbr=r(wbt,"TFElectraForTokenClassification"),wbt.forEach(t),cbr=r(wxe," (ELECTRA model)"),wxe.forEach(t),fbr=i(oe),RT=n(oe,"LI",{});var Axe=s(RT);V4e=n(Axe,"STRONG",{});var Abt=s(V4e);mbr=r(Abt,"flaubert"),Abt.forEach(t),gbr=r(Axe," \u2014 "),Iz=n(Axe,"A",{href:!0});var ybt=s(Iz);hbr=r(ybt,"TFFlaubertForTokenClassification"),ybt.forEach(t),pbr=r(Axe," (FlauBERT model)"),Axe.forEach(t),_br=i(oe),BT=n(oe,"LI",{});var yxe=s(BT);X4e=n(yxe,"STRONG",{});var Lbt=s(X4e);ubr=r(Lbt,"funnel"),Lbt.forEach(t),bbr=r(yxe," \u2014 "),qz=n(yxe,"A",{href:!0});var xbt=s(qz);Fbr=r(xbt,"TFFunnelForTokenClassification"),xbt.forEach(t),vbr=r(yxe," (Funnel Transformer model)"),yxe.forEach(t),Tbr=i(oe),PT=n(oe,"LI",{});var Lxe=s(PT);z4e=n(Lxe,"STRONG",{});var kbt=s(z4e);Mbr=r(kbt,"layoutlm"),kbt.forEach(t),Ebr=r(Lxe," \u2014 "),Nz=n(Lxe,"A",{href:!0});var Sbt=s(Nz);Cbr=r(Sbt,"TFLayoutLMForTokenClassification"),Sbt.forEach(t),wbr=r(Lxe," (LayoutLM model)"),Lxe.forEach(t),Abr=i(oe),$T=n(oe,"LI",{});var xxe=s($T);Q4e=n(xxe,"STRONG",{});var Rbt=s(Q4e);ybr=r(Rbt,"longformer"),Rbt.forEach(t),Lbr=r(xxe," \u2014 "),jz=n(xxe,"A",{href:!0});var Bbt=s(jz);xbr=r(Bbt,"TFLongformerForTokenClassification"),Bbt.forEach(t),kbr=r(xxe," (Longformer model)"),xxe.forEach(t),Sbr=i(oe),IT=n(oe,"LI",{});var kxe=s(IT);W4e=n(kxe,"STRONG",{});var Pbt=s(W4e);Rbr=r(Pbt,"mobilebert"),Pbt.forEach(t),Bbr=r(kxe," \u2014 "),Dz=n(kxe,"A",{href:!0});var $bt=s(Dz);Pbr=r($bt,"TFMobileBertForTokenClassification"),$bt.forEach(t),$br=r(kxe," (MobileBERT model)"),kxe.forEach(t),Ibr=i(oe),qT=n(oe,"LI",{});var Sxe=s(qT);H4e=n(Sxe,"STRONG",{});var Ibt=s(H4e);qbr=r(Ibt,"mpnet"),Ibt.forEach(t),Nbr=r(Sxe," \u2014 "),Gz=n(Sxe,"A",{href:!0});var qbt=s(Gz);jbr=r(qbt,"TFMPNetForTokenClassification"),qbt.forEach(t),Dbr=r(Sxe," (MPNet model)"),Sxe.forEach(t),Gbr=i(oe),NT=n(oe,"LI",{});var Rxe=s(NT);U4e=n(Rxe,"STRONG",{});var Nbt=s(U4e);Obr=r(Nbt,"rembert"),Nbt.forEach(t),Vbr=r(Rxe," \u2014 "),Oz=n(Rxe,"A",{href:!0});var jbt=s(Oz);Xbr=r(jbt,"TFRemBertForTokenClassification"),jbt.forEach(t),zbr=r(Rxe," (RemBERT model)"),Rxe.forEach(t),Qbr=i(oe),jT=n(oe,"LI",{});var Bxe=s(jT);J4e=n(Bxe,"STRONG",{});var Dbt=s(J4e);Wbr=r(Dbt,"roberta"),Dbt.forEach(t),Hbr=r(Bxe," \u2014 "),Vz=n(Bxe,"A",{href:!0});var Gbt=s(Vz);Ubr=r(Gbt,"TFRobertaForTokenClassification"),Gbt.forEach(t),Jbr=r(Bxe," (RoBERTa model)"),Bxe.forEach(t),Ybr=i(oe),DT=n(oe,"LI",{});var Pxe=s(DT);Y4e=n(Pxe,"STRONG",{});var Obt=s(Y4e);Kbr=r(Obt,"roformer"),Obt.forEach(t),Zbr=r(Pxe," \u2014 "),Xz=n(Pxe,"A",{href:!0});var Vbt=s(Xz);e3r=r(Vbt,"TFRoFormerForTokenClassification"),Vbt.forEach(t),o3r=r(Pxe," (RoFormer model)"),Pxe.forEach(t),r3r=i(oe),GT=n(oe,"LI",{});var $xe=s(GT);K4e=n($xe,"STRONG",{});var Xbt=s(K4e);t3r=r(Xbt,"xlm"),Xbt.forEach(t),a3r=r($xe," \u2014 "),zz=n($xe,"A",{href:!0});var zbt=s(zz);n3r=r(zbt,"TFXLMForTokenClassification"),zbt.forEach(t),s3r=r($xe," (XLM model)"),$xe.forEach(t),l3r=i(oe),OT=n(oe,"LI",{});var Ixe=s(OT);Z4e=n(Ixe,"STRONG",{});var Qbt=s(Z4e);i3r=r(Qbt,"xlm-roberta"),Qbt.forEach(t),d3r=r(Ixe," \u2014 "),Qz=n(Ixe,"A",{href:!0});var Wbt=s(Qz);c3r=r(Wbt,"TFXLMRobertaForTokenClassification"),Wbt.forEach(t),f3r=r(Ixe," (XLM-RoBERTa model)"),Ixe.forEach(t),m3r=i(oe),VT=n(oe,"LI",{});var qxe=s(VT);ebe=n(qxe,"STRONG",{});var Hbt=s(ebe);g3r=r(Hbt,"xlnet"),Hbt.forEach(t),h3r=r(qxe," \u2014 "),Wz=n(qxe,"A",{href:!0});var Ubt=s(Wz);p3r=r(Ubt,"TFXLNetForTokenClassification"),Ubt.forEach(t),_3r=r(qxe," (XLNet model)"),qxe.forEach(t),oe.forEach(t),u3r=i(Ca),obe=n(Ca,"P",{});var Jbt=s(obe);b3r=r(Jbt,"Examples:"),Jbt.forEach(t),F3r=i(Ca),m(py.$$.fragment,Ca),Ca.forEach(t),ti.forEach(t),CBe=i(c),Vc=n(c,"H2",{class:!0});var $$e=s(Vc);XT=n($$e,"A",{id:!0,class:!0,href:!0});var Ybt=s(XT);rbe=n(Ybt,"SPAN",{});var Kbt=s(rbe);m(_y.$$.fragment,Kbt),Kbt.forEach(t),Ybt.forEach(t),v3r=i($$e),tbe=n($$e,"SPAN",{});var Zbt=s(tbe);T3r=r(Zbt,"TFAutoModelForQuestionAnswering"),Zbt.forEach(t),$$e.forEach(t),wBe=i(c),xr=n(c,"DIV",{class:!0});var ni=s(xr);m(uy.$$.fragment,ni),M3r=i(ni),Xc=n(ni,"P",{});var uJ=s(Xc);E3r=r(uJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Hz=n(uJ,"A",{href:!0});var e3t=s(Hz);C3r=r(e3t,"from_pretrained()"),e3t.forEach(t),w3r=r(uJ," class method or the "),Uz=n(uJ,"A",{href:!0});var o3t=s(Uz);A3r=r(o3t,"from_config()"),o3t.forEach(t),y3r=r(uJ,` class
method.`),uJ.forEach(t),L3r=i(ni),by=n(ni,"P",{});var I$e=s(by);x3r=r(I$e,"This class cannot be instantiated directly using "),abe=n(I$e,"CODE",{});var r3t=s(abe);k3r=r(r3t,"__init__()"),r3t.forEach(t),S3r=r(I$e," (throws an error)."),I$e.forEach(t),R3r=i(ni),Et=n(ni,"DIV",{class:!0});var si=s(Et);m(Fy.$$.fragment,si),B3r=i(si),nbe=n(si,"P",{});var t3t=s(nbe);P3r=r(t3t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),t3t.forEach(t),$3r=i(si),zc=n(si,"P",{});var bJ=s(zc);I3r=r(bJ,`Note:
Loading a model from its configuration file does `),sbe=n(bJ,"STRONG",{});var a3t=s(sbe);q3r=r(a3t,"not"),a3t.forEach(t),N3r=r(bJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Jz=n(bJ,"A",{href:!0});var n3t=s(Jz);j3r=r(n3t,"from_pretrained()"),n3t.forEach(t),D3r=r(bJ," to load the model weights."),bJ.forEach(t),G3r=i(si),lbe=n(si,"P",{});var s3t=s(lbe);O3r=r(s3t,"Examples:"),s3t.forEach(t),V3r=i(si),m(vy.$$.fragment,si),si.forEach(t),X3r=i(ni),Co=n(ni,"DIV",{class:!0});var wa=s(Co);m(Ty.$$.fragment,wa),z3r=i(wa),ibe=n(wa,"P",{});var l3t=s(ibe);Q3r=r(l3t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),l3t.forEach(t),W3r=i(wa),An=n(wa,"P",{});var aC=s(An);H3r=r(aC,"The model class to instantiate is selected based on the "),dbe=n(aC,"CODE",{});var i3t=s(dbe);U3r=r(i3t,"model_type"),i3t.forEach(t),J3r=r(aC,` property of the config object (either
passed as an argument or loaded from `),cbe=n(aC,"CODE",{});var d3t=s(cbe);Y3r=r(d3t,"pretrained_model_name_or_path"),d3t.forEach(t),K3r=r(aC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fbe=n(aC,"CODE",{});var c3t=s(fbe);Z3r=r(c3t,"pretrained_model_name_or_path"),c3t.forEach(t),e2r=r(aC,":"),aC.forEach(t),o2r=i(wa),K=n(wa,"UL",{});var re=s(K);zT=n(re,"LI",{});var Nxe=s(zT);mbe=n(Nxe,"STRONG",{});var f3t=s(mbe);r2r=r(f3t,"albert"),f3t.forEach(t),t2r=r(Nxe," \u2014 "),Yz=n(Nxe,"A",{href:!0});var m3t=s(Yz);a2r=r(m3t,"TFAlbertForQuestionAnswering"),m3t.forEach(t),n2r=r(Nxe," (ALBERT model)"),Nxe.forEach(t),s2r=i(re),QT=n(re,"LI",{});var jxe=s(QT);gbe=n(jxe,"STRONG",{});var g3t=s(gbe);l2r=r(g3t,"bert"),g3t.forEach(t),i2r=r(jxe," \u2014 "),Kz=n(jxe,"A",{href:!0});var h3t=s(Kz);d2r=r(h3t,"TFBertForQuestionAnswering"),h3t.forEach(t),c2r=r(jxe," (BERT model)"),jxe.forEach(t),f2r=i(re),WT=n(re,"LI",{});var Dxe=s(WT);hbe=n(Dxe,"STRONG",{});var p3t=s(hbe);m2r=r(p3t,"camembert"),p3t.forEach(t),g2r=r(Dxe," \u2014 "),Zz=n(Dxe,"A",{href:!0});var _3t=s(Zz);h2r=r(_3t,"TFCamembertForQuestionAnswering"),_3t.forEach(t),p2r=r(Dxe," (CamemBERT model)"),Dxe.forEach(t),_2r=i(re),HT=n(re,"LI",{});var Gxe=s(HT);pbe=n(Gxe,"STRONG",{});var u3t=s(pbe);u2r=r(u3t,"convbert"),u3t.forEach(t),b2r=r(Gxe," \u2014 "),eQ=n(Gxe,"A",{href:!0});var b3t=s(eQ);F2r=r(b3t,"TFConvBertForQuestionAnswering"),b3t.forEach(t),v2r=r(Gxe," (ConvBERT model)"),Gxe.forEach(t),T2r=i(re),UT=n(re,"LI",{});var Oxe=s(UT);_be=n(Oxe,"STRONG",{});var F3t=s(_be);M2r=r(F3t,"deberta"),F3t.forEach(t),E2r=r(Oxe," \u2014 "),oQ=n(Oxe,"A",{href:!0});var v3t=s(oQ);C2r=r(v3t,"TFDebertaForQuestionAnswering"),v3t.forEach(t),w2r=r(Oxe," (DeBERTa model)"),Oxe.forEach(t),A2r=i(re),JT=n(re,"LI",{});var Vxe=s(JT);ube=n(Vxe,"STRONG",{});var T3t=s(ube);y2r=r(T3t,"deberta-v2"),T3t.forEach(t),L2r=r(Vxe," \u2014 "),rQ=n(Vxe,"A",{href:!0});var M3t=s(rQ);x2r=r(M3t,"TFDebertaV2ForQuestionAnswering"),M3t.forEach(t),k2r=r(Vxe," (DeBERTa-v2 model)"),Vxe.forEach(t),S2r=i(re),YT=n(re,"LI",{});var Xxe=s(YT);bbe=n(Xxe,"STRONG",{});var E3t=s(bbe);R2r=r(E3t,"distilbert"),E3t.forEach(t),B2r=r(Xxe," \u2014 "),tQ=n(Xxe,"A",{href:!0});var C3t=s(tQ);P2r=r(C3t,"TFDistilBertForQuestionAnswering"),C3t.forEach(t),$2r=r(Xxe," (DistilBERT model)"),Xxe.forEach(t),I2r=i(re),KT=n(re,"LI",{});var zxe=s(KT);Fbe=n(zxe,"STRONG",{});var w3t=s(Fbe);q2r=r(w3t,"electra"),w3t.forEach(t),N2r=r(zxe," \u2014 "),aQ=n(zxe,"A",{href:!0});var A3t=s(aQ);j2r=r(A3t,"TFElectraForQuestionAnswering"),A3t.forEach(t),D2r=r(zxe," (ELECTRA model)"),zxe.forEach(t),G2r=i(re),ZT=n(re,"LI",{});var Qxe=s(ZT);vbe=n(Qxe,"STRONG",{});var y3t=s(vbe);O2r=r(y3t,"flaubert"),y3t.forEach(t),V2r=r(Qxe," \u2014 "),nQ=n(Qxe,"A",{href:!0});var L3t=s(nQ);X2r=r(L3t,"TFFlaubertForQuestionAnsweringSimple"),L3t.forEach(t),z2r=r(Qxe," (FlauBERT model)"),Qxe.forEach(t),Q2r=i(re),e7=n(re,"LI",{});var Wxe=s(e7);Tbe=n(Wxe,"STRONG",{});var x3t=s(Tbe);W2r=r(x3t,"funnel"),x3t.forEach(t),H2r=r(Wxe," \u2014 "),sQ=n(Wxe,"A",{href:!0});var k3t=s(sQ);U2r=r(k3t,"TFFunnelForQuestionAnswering"),k3t.forEach(t),J2r=r(Wxe," (Funnel Transformer model)"),Wxe.forEach(t),Y2r=i(re),o7=n(re,"LI",{});var Hxe=s(o7);Mbe=n(Hxe,"STRONG",{});var S3t=s(Mbe);K2r=r(S3t,"gptj"),S3t.forEach(t),Z2r=r(Hxe," \u2014 "),lQ=n(Hxe,"A",{href:!0});var R3t=s(lQ);eFr=r(R3t,"TFGPTJForQuestionAnswering"),R3t.forEach(t),oFr=r(Hxe," (GPT-J model)"),Hxe.forEach(t),rFr=i(re),r7=n(re,"LI",{});var Uxe=s(r7);Ebe=n(Uxe,"STRONG",{});var B3t=s(Ebe);tFr=r(B3t,"longformer"),B3t.forEach(t),aFr=r(Uxe," \u2014 "),iQ=n(Uxe,"A",{href:!0});var P3t=s(iQ);nFr=r(P3t,"TFLongformerForQuestionAnswering"),P3t.forEach(t),sFr=r(Uxe," (Longformer model)"),Uxe.forEach(t),lFr=i(re),t7=n(re,"LI",{});var Jxe=s(t7);Cbe=n(Jxe,"STRONG",{});var $3t=s(Cbe);iFr=r($3t,"mobilebert"),$3t.forEach(t),dFr=r(Jxe," \u2014 "),dQ=n(Jxe,"A",{href:!0});var I3t=s(dQ);cFr=r(I3t,"TFMobileBertForQuestionAnswering"),I3t.forEach(t),fFr=r(Jxe," (MobileBERT model)"),Jxe.forEach(t),mFr=i(re),a7=n(re,"LI",{});var Yxe=s(a7);wbe=n(Yxe,"STRONG",{});var q3t=s(wbe);gFr=r(q3t,"mpnet"),q3t.forEach(t),hFr=r(Yxe," \u2014 "),cQ=n(Yxe,"A",{href:!0});var N3t=s(cQ);pFr=r(N3t,"TFMPNetForQuestionAnswering"),N3t.forEach(t),_Fr=r(Yxe," (MPNet model)"),Yxe.forEach(t),uFr=i(re),n7=n(re,"LI",{});var Kxe=s(n7);Abe=n(Kxe,"STRONG",{});var j3t=s(Abe);bFr=r(j3t,"rembert"),j3t.forEach(t),FFr=r(Kxe," \u2014 "),fQ=n(Kxe,"A",{href:!0});var D3t=s(fQ);vFr=r(D3t,"TFRemBertForQuestionAnswering"),D3t.forEach(t),TFr=r(Kxe," (RemBERT model)"),Kxe.forEach(t),MFr=i(re),s7=n(re,"LI",{});var Zxe=s(s7);ybe=n(Zxe,"STRONG",{});var G3t=s(ybe);EFr=r(G3t,"roberta"),G3t.forEach(t),CFr=r(Zxe," \u2014 "),mQ=n(Zxe,"A",{href:!0});var O3t=s(mQ);wFr=r(O3t,"TFRobertaForQuestionAnswering"),O3t.forEach(t),AFr=r(Zxe," (RoBERTa model)"),Zxe.forEach(t),yFr=i(re),l7=n(re,"LI",{});var eke=s(l7);Lbe=n(eke,"STRONG",{});var V3t=s(Lbe);LFr=r(V3t,"roformer"),V3t.forEach(t),xFr=r(eke," \u2014 "),gQ=n(eke,"A",{href:!0});var X3t=s(gQ);kFr=r(X3t,"TFRoFormerForQuestionAnswering"),X3t.forEach(t),SFr=r(eke," (RoFormer model)"),eke.forEach(t),RFr=i(re),i7=n(re,"LI",{});var oke=s(i7);xbe=n(oke,"STRONG",{});var z3t=s(xbe);BFr=r(z3t,"xlm"),z3t.forEach(t),PFr=r(oke," \u2014 "),hQ=n(oke,"A",{href:!0});var Q3t=s(hQ);$Fr=r(Q3t,"TFXLMForQuestionAnsweringSimple"),Q3t.forEach(t),IFr=r(oke," (XLM model)"),oke.forEach(t),qFr=i(re),d7=n(re,"LI",{});var rke=s(d7);kbe=n(rke,"STRONG",{});var W3t=s(kbe);NFr=r(W3t,"xlm-roberta"),W3t.forEach(t),jFr=r(rke," \u2014 "),pQ=n(rke,"A",{href:!0});var H3t=s(pQ);DFr=r(H3t,"TFXLMRobertaForQuestionAnswering"),H3t.forEach(t),GFr=r(rke," (XLM-RoBERTa model)"),rke.forEach(t),OFr=i(re),c7=n(re,"LI",{});var tke=s(c7);Sbe=n(tke,"STRONG",{});var U3t=s(Sbe);VFr=r(U3t,"xlnet"),U3t.forEach(t),XFr=r(tke," \u2014 "),_Q=n(tke,"A",{href:!0});var J3t=s(_Q);zFr=r(J3t,"TFXLNetForQuestionAnsweringSimple"),J3t.forEach(t),QFr=r(tke," (XLNet model)"),tke.forEach(t),re.forEach(t),WFr=i(wa),Rbe=n(wa,"P",{});var Y3t=s(Rbe);HFr=r(Y3t,"Examples:"),Y3t.forEach(t),UFr=i(wa),m(My.$$.fragment,wa),wa.forEach(t),ni.forEach(t),ABe=i(c),Qc=n(c,"H2",{class:!0});var q$e=s(Qc);f7=n(q$e,"A",{id:!0,class:!0,href:!0});var K3t=s(f7);Bbe=n(K3t,"SPAN",{});var Z3t=s(Bbe);m(Ey.$$.fragment,Z3t),Z3t.forEach(t),K3t.forEach(t),JFr=i(q$e),Pbe=n(q$e,"SPAN",{});var e2t=s(Pbe);YFr=r(e2t,"TFAutoModelForVision2Seq"),e2t.forEach(t),q$e.forEach(t),yBe=i(c),kr=n(c,"DIV",{class:!0});var li=s(kr);m(Cy.$$.fragment,li),KFr=i(li),Wc=n(li,"P",{});var FJ=s(Wc);ZFr=r(FJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),uQ=n(FJ,"A",{href:!0});var o2t=s(uQ);evr=r(o2t,"from_pretrained()"),o2t.forEach(t),ovr=r(FJ," class method or the "),bQ=n(FJ,"A",{href:!0});var r2t=s(bQ);rvr=r(r2t,"from_config()"),r2t.forEach(t),tvr=r(FJ,` class
method.`),FJ.forEach(t),avr=i(li),wy=n(li,"P",{});var N$e=s(wy);nvr=r(N$e,"This class cannot be instantiated directly using "),$be=n(N$e,"CODE",{});var t2t=s($be);svr=r(t2t,"__init__()"),t2t.forEach(t),lvr=r(N$e," (throws an error)."),N$e.forEach(t),ivr=i(li),Ct=n(li,"DIV",{class:!0});var ii=s(Ct);m(Ay.$$.fragment,ii),dvr=i(ii),Ibe=n(ii,"P",{});var a2t=s(Ibe);cvr=r(a2t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),a2t.forEach(t),fvr=i(ii),Hc=n(ii,"P",{});var vJ=s(Hc);mvr=r(vJ,`Note:
Loading a model from its configuration file does `),qbe=n(vJ,"STRONG",{});var n2t=s(qbe);gvr=r(n2t,"not"),n2t.forEach(t),hvr=r(vJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),FQ=n(vJ,"A",{href:!0});var s2t=s(FQ);pvr=r(s2t,"from_pretrained()"),s2t.forEach(t),_vr=r(vJ," to load the model weights."),vJ.forEach(t),uvr=i(ii),Nbe=n(ii,"P",{});var l2t=s(Nbe);bvr=r(l2t,"Examples:"),l2t.forEach(t),Fvr=i(ii),m(yy.$$.fragment,ii),ii.forEach(t),vvr=i(li),wo=n(li,"DIV",{class:!0});var Aa=s(wo);m(Ly.$$.fragment,Aa),Tvr=i(Aa),jbe=n(Aa,"P",{});var i2t=s(jbe);Mvr=r(i2t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),i2t.forEach(t),Evr=i(Aa),yn=n(Aa,"P",{});var nC=s(yn);Cvr=r(nC,"The model class to instantiate is selected based on the "),Dbe=n(nC,"CODE",{});var d2t=s(Dbe);wvr=r(d2t,"model_type"),d2t.forEach(t),Avr=r(nC,` property of the config object (either
passed as an argument or loaded from `),Gbe=n(nC,"CODE",{});var c2t=s(Gbe);yvr=r(c2t,"pretrained_model_name_or_path"),c2t.forEach(t),Lvr=r(nC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Obe=n(nC,"CODE",{});var f2t=s(Obe);xvr=r(f2t,"pretrained_model_name_or_path"),f2t.forEach(t),kvr=r(nC,":"),nC.forEach(t),Svr=i(Aa),Vbe=n(Aa,"UL",{});var m2t=s(Vbe);m7=n(m2t,"LI",{});var ake=s(m7);Xbe=n(ake,"STRONG",{});var g2t=s(Xbe);Rvr=r(g2t,"vision-encoder-decoder"),g2t.forEach(t),Bvr=r(ake," \u2014 "),vQ=n(ake,"A",{href:!0});var h2t=s(vQ);Pvr=r(h2t,"TFVisionEncoderDecoderModel"),h2t.forEach(t),$vr=r(ake," (Vision Encoder decoder model)"),ake.forEach(t),m2t.forEach(t),Ivr=i(Aa),zbe=n(Aa,"P",{});var p2t=s(zbe);qvr=r(p2t,"Examples:"),p2t.forEach(t),Nvr=i(Aa),m(xy.$$.fragment,Aa),Aa.forEach(t),li.forEach(t),LBe=i(c),Uc=n(c,"H2",{class:!0});var j$e=s(Uc);g7=n(j$e,"A",{id:!0,class:!0,href:!0});var _2t=s(g7);Qbe=n(_2t,"SPAN",{});var u2t=s(Qbe);m(ky.$$.fragment,u2t),u2t.forEach(t),_2t.forEach(t),jvr=i(j$e),Wbe=n(j$e,"SPAN",{});var b2t=s(Wbe);Dvr=r(b2t,"TFAutoModelForSpeechSeq2Seq"),b2t.forEach(t),j$e.forEach(t),xBe=i(c),Sr=n(c,"DIV",{class:!0});var di=s(Sr);m(Sy.$$.fragment,di),Gvr=i(di),Jc=n(di,"P",{});var TJ=s(Jc);Ovr=r(TJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),TQ=n(TJ,"A",{href:!0});var F2t=s(TQ);Vvr=r(F2t,"from_pretrained()"),F2t.forEach(t),Xvr=r(TJ," class method or the "),MQ=n(TJ,"A",{href:!0});var v2t=s(MQ);zvr=r(v2t,"from_config()"),v2t.forEach(t),Qvr=r(TJ,` class
method.`),TJ.forEach(t),Wvr=i(di),Ry=n(di,"P",{});var D$e=s(Ry);Hvr=r(D$e,"This class cannot be instantiated directly using "),Hbe=n(D$e,"CODE",{});var T2t=s(Hbe);Uvr=r(T2t,"__init__()"),T2t.forEach(t),Jvr=r(D$e," (throws an error)."),D$e.forEach(t),Yvr=i(di),wt=n(di,"DIV",{class:!0});var ci=s(wt);m(By.$$.fragment,ci),Kvr=i(ci),Ube=n(ci,"P",{});var M2t=s(Ube);Zvr=r(M2t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),M2t.forEach(t),e6r=i(ci),Yc=n(ci,"P",{});var MJ=s(Yc);o6r=r(MJ,`Note:
Loading a model from its configuration file does `),Jbe=n(MJ,"STRONG",{});var E2t=s(Jbe);r6r=r(E2t,"not"),E2t.forEach(t),t6r=r(MJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),EQ=n(MJ,"A",{href:!0});var C2t=s(EQ);a6r=r(C2t,"from_pretrained()"),C2t.forEach(t),n6r=r(MJ," to load the model weights."),MJ.forEach(t),s6r=i(ci),Ybe=n(ci,"P",{});var w2t=s(Ybe);l6r=r(w2t,"Examples:"),w2t.forEach(t),i6r=i(ci),m(Py.$$.fragment,ci),ci.forEach(t),d6r=i(di),Ao=n(di,"DIV",{class:!0});var ya=s(Ao);m($y.$$.fragment,ya),c6r=i(ya),Kbe=n(ya,"P",{});var A2t=s(Kbe);f6r=r(A2t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),A2t.forEach(t),m6r=i(ya),Ln=n(ya,"P",{});var sC=s(Ln);g6r=r(sC,"The model class to instantiate is selected based on the "),Zbe=n(sC,"CODE",{});var y2t=s(Zbe);h6r=r(y2t,"model_type"),y2t.forEach(t),p6r=r(sC,` property of the config object (either
passed as an argument or loaded from `),e3e=n(sC,"CODE",{});var L2t=s(e3e);_6r=r(L2t,"pretrained_model_name_or_path"),L2t.forEach(t),u6r=r(sC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o3e=n(sC,"CODE",{});var x2t=s(o3e);b6r=r(x2t,"pretrained_model_name_or_path"),x2t.forEach(t),F6r=r(sC,":"),sC.forEach(t),v6r=i(ya),r3e=n(ya,"UL",{});var k2t=s(r3e);h7=n(k2t,"LI",{});var nke=s(h7);t3e=n(nke,"STRONG",{});var S2t=s(t3e);T6r=r(S2t,"speech_to_text"),S2t.forEach(t),M6r=r(nke," \u2014 "),CQ=n(nke,"A",{href:!0});var R2t=s(CQ);E6r=r(R2t,"TFSpeech2TextForConditionalGeneration"),R2t.forEach(t),C6r=r(nke," (Speech2Text model)"),nke.forEach(t),k2t.forEach(t),w6r=i(ya),a3e=n(ya,"P",{});var B2t=s(a3e);A6r=r(B2t,"Examples:"),B2t.forEach(t),y6r=i(ya),m(Iy.$$.fragment,ya),ya.forEach(t),di.forEach(t),kBe=i(c),Kc=n(c,"H2",{class:!0});var G$e=s(Kc);p7=n(G$e,"A",{id:!0,class:!0,href:!0});var P2t=s(p7);n3e=n(P2t,"SPAN",{});var $2t=s(n3e);m(qy.$$.fragment,$2t),$2t.forEach(t),P2t.forEach(t),L6r=i(G$e),s3e=n(G$e,"SPAN",{});var I2t=s(s3e);x6r=r(I2t,"FlaxAutoModel"),I2t.forEach(t),G$e.forEach(t),SBe=i(c),Rr=n(c,"DIV",{class:!0});var fi=s(Rr);m(Ny.$$.fragment,fi),k6r=i(fi),Zc=n(fi,"P",{});var EJ=s(Zc);S6r=r(EJ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),wQ=n(EJ,"A",{href:!0});var q2t=s(wQ);R6r=r(q2t,"from_pretrained()"),q2t.forEach(t),B6r=r(EJ," class method or the "),AQ=n(EJ,"A",{href:!0});var N2t=s(AQ);P6r=r(N2t,"from_config()"),N2t.forEach(t),$6r=r(EJ,` class
method.`),EJ.forEach(t),I6r=i(fi),jy=n(fi,"P",{});var O$e=s(jy);q6r=r(O$e,"This class cannot be instantiated directly using "),l3e=n(O$e,"CODE",{});var j2t=s(l3e);N6r=r(j2t,"__init__()"),j2t.forEach(t),j6r=r(O$e," (throws an error)."),O$e.forEach(t),D6r=i(fi),At=n(fi,"DIV",{class:!0});var mi=s(At);m(Dy.$$.fragment,mi),G6r=i(mi),i3e=n(mi,"P",{});var D2t=s(i3e);O6r=r(D2t,"Instantiates one of the base model classes of the library from a configuration."),D2t.forEach(t),V6r=i(mi),ef=n(mi,"P",{});var CJ=s(ef);X6r=r(CJ,`Note:
Loading a model from its configuration file does `),d3e=n(CJ,"STRONG",{});var G2t=s(d3e);z6r=r(G2t,"not"),G2t.forEach(t),Q6r=r(CJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),yQ=n(CJ,"A",{href:!0});var O2t=s(yQ);W6r=r(O2t,"from_pretrained()"),O2t.forEach(t),H6r=r(CJ," to load the model weights."),CJ.forEach(t),U6r=i(mi),c3e=n(mi,"P",{});var V2t=s(c3e);J6r=r(V2t,"Examples:"),V2t.forEach(t),Y6r=i(mi),m(Gy.$$.fragment,mi),mi.forEach(t),K6r=i(fi),yo=n(fi,"DIV",{class:!0});var La=s(yo);m(Oy.$$.fragment,La),Z6r=i(La),f3e=n(La,"P",{});var X2t=s(f3e);eTr=r(X2t,"Instantiate one of the base model classes of the library from a pretrained model."),X2t.forEach(t),oTr=i(La),xn=n(La,"P",{});var lC=s(xn);rTr=r(lC,"The model class to instantiate is selected based on the "),m3e=n(lC,"CODE",{});var z2t=s(m3e);tTr=r(z2t,"model_type"),z2t.forEach(t),aTr=r(lC,` property of the config object (either
passed as an argument or loaded from `),g3e=n(lC,"CODE",{});var Q2t=s(g3e);nTr=r(Q2t,"pretrained_model_name_or_path"),Q2t.forEach(t),sTr=r(lC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h3e=n(lC,"CODE",{});var W2t=s(h3e);lTr=r(W2t,"pretrained_model_name_or_path"),W2t.forEach(t),iTr=r(lC,":"),lC.forEach(t),dTr=i(La),z=n(La,"UL",{});var W=s(z);_7=n(W,"LI",{});var ske=s(_7);p3e=n(ske,"STRONG",{});var H2t=s(p3e);cTr=r(H2t,"albert"),H2t.forEach(t),fTr=r(ske," \u2014 "),LQ=n(ske,"A",{href:!0});var U2t=s(LQ);mTr=r(U2t,"FlaxAlbertModel"),U2t.forEach(t),gTr=r(ske," (ALBERT model)"),ske.forEach(t),hTr=i(W),u7=n(W,"LI",{});var lke=s(u7);_3e=n(lke,"STRONG",{});var J2t=s(_3e);pTr=r(J2t,"bart"),J2t.forEach(t),_Tr=r(lke," \u2014 "),xQ=n(lke,"A",{href:!0});var Y2t=s(xQ);uTr=r(Y2t,"FlaxBartModel"),Y2t.forEach(t),bTr=r(lke," (BART model)"),lke.forEach(t),FTr=i(W),b7=n(W,"LI",{});var ike=s(b7);u3e=n(ike,"STRONG",{});var K2t=s(u3e);vTr=r(K2t,"beit"),K2t.forEach(t),TTr=r(ike," \u2014 "),kQ=n(ike,"A",{href:!0});var Z2t=s(kQ);MTr=r(Z2t,"FlaxBeitModel"),Z2t.forEach(t),ETr=r(ike," (BEiT model)"),ike.forEach(t),CTr=i(W),F7=n(W,"LI",{});var dke=s(F7);b3e=n(dke,"STRONG",{});var eFt=s(b3e);wTr=r(eFt,"bert"),eFt.forEach(t),ATr=r(dke," \u2014 "),SQ=n(dke,"A",{href:!0});var oFt=s(SQ);yTr=r(oFt,"FlaxBertModel"),oFt.forEach(t),LTr=r(dke," (BERT model)"),dke.forEach(t),xTr=i(W),v7=n(W,"LI",{});var cke=s(v7);F3e=n(cke,"STRONG",{});var rFt=s(F3e);kTr=r(rFt,"big_bird"),rFt.forEach(t),STr=r(cke," \u2014 "),RQ=n(cke,"A",{href:!0});var tFt=s(RQ);RTr=r(tFt,"FlaxBigBirdModel"),tFt.forEach(t),BTr=r(cke," (BigBird model)"),cke.forEach(t),PTr=i(W),T7=n(W,"LI",{});var fke=s(T7);v3e=n(fke,"STRONG",{});var aFt=s(v3e);$Tr=r(aFt,"blenderbot"),aFt.forEach(t),ITr=r(fke," \u2014 "),BQ=n(fke,"A",{href:!0});var nFt=s(BQ);qTr=r(nFt,"FlaxBlenderbotModel"),nFt.forEach(t),NTr=r(fke," (Blenderbot model)"),fke.forEach(t),jTr=i(W),M7=n(W,"LI",{});var mke=s(M7);T3e=n(mke,"STRONG",{});var sFt=s(T3e);DTr=r(sFt,"blenderbot-small"),sFt.forEach(t),GTr=r(mke," \u2014 "),PQ=n(mke,"A",{href:!0});var lFt=s(PQ);OTr=r(lFt,"FlaxBlenderbotSmallModel"),lFt.forEach(t),VTr=r(mke," (BlenderbotSmall model)"),mke.forEach(t),XTr=i(W),E7=n(W,"LI",{});var gke=s(E7);M3e=n(gke,"STRONG",{});var iFt=s(M3e);zTr=r(iFt,"clip"),iFt.forEach(t),QTr=r(gke," \u2014 "),$Q=n(gke,"A",{href:!0});var dFt=s($Q);WTr=r(dFt,"FlaxCLIPModel"),dFt.forEach(t),HTr=r(gke," (CLIP model)"),gke.forEach(t),UTr=i(W),C7=n(W,"LI",{});var hke=s(C7);E3e=n(hke,"STRONG",{});var cFt=s(E3e);JTr=r(cFt,"distilbert"),cFt.forEach(t),YTr=r(hke," \u2014 "),IQ=n(hke,"A",{href:!0});var fFt=s(IQ);KTr=r(fFt,"FlaxDistilBertModel"),fFt.forEach(t),ZTr=r(hke," (DistilBERT model)"),hke.forEach(t),e7r=i(W),w7=n(W,"LI",{});var pke=s(w7);C3e=n(pke,"STRONG",{});var mFt=s(C3e);o7r=r(mFt,"electra"),mFt.forEach(t),r7r=r(pke," \u2014 "),qQ=n(pke,"A",{href:!0});var gFt=s(qQ);t7r=r(gFt,"FlaxElectraModel"),gFt.forEach(t),a7r=r(pke," (ELECTRA model)"),pke.forEach(t),n7r=i(W),A7=n(W,"LI",{});var _ke=s(A7);w3e=n(_ke,"STRONG",{});var hFt=s(w3e);s7r=r(hFt,"gpt2"),hFt.forEach(t),l7r=r(_ke," \u2014 "),NQ=n(_ke,"A",{href:!0});var pFt=s(NQ);i7r=r(pFt,"FlaxGPT2Model"),pFt.forEach(t),d7r=r(_ke," (OpenAI GPT-2 model)"),_ke.forEach(t),c7r=i(W),y7=n(W,"LI",{});var uke=s(y7);A3e=n(uke,"STRONG",{});var _Ft=s(A3e);f7r=r(_Ft,"gpt_neo"),_Ft.forEach(t),m7r=r(uke," \u2014 "),jQ=n(uke,"A",{href:!0});var uFt=s(jQ);g7r=r(uFt,"FlaxGPTNeoModel"),uFt.forEach(t),h7r=r(uke," (GPT Neo model)"),uke.forEach(t),p7r=i(W),L7=n(W,"LI",{});var bke=s(L7);y3e=n(bke,"STRONG",{});var bFt=s(y3e);_7r=r(bFt,"gptj"),bFt.forEach(t),u7r=r(bke," \u2014 "),DQ=n(bke,"A",{href:!0});var FFt=s(DQ);b7r=r(FFt,"FlaxGPTJModel"),FFt.forEach(t),F7r=r(bke," (GPT-J model)"),bke.forEach(t),v7r=i(W),x7=n(W,"LI",{});var Fke=s(x7);L3e=n(Fke,"STRONG",{});var vFt=s(L3e);T7r=r(vFt,"marian"),vFt.forEach(t),M7r=r(Fke," \u2014 "),GQ=n(Fke,"A",{href:!0});var TFt=s(GQ);E7r=r(TFt,"FlaxMarianModel"),TFt.forEach(t),C7r=r(Fke," (Marian model)"),Fke.forEach(t),w7r=i(W),k7=n(W,"LI",{});var vke=s(k7);x3e=n(vke,"STRONG",{});var MFt=s(x3e);A7r=r(MFt,"mbart"),MFt.forEach(t),y7r=r(vke," \u2014 "),OQ=n(vke,"A",{href:!0});var EFt=s(OQ);L7r=r(EFt,"FlaxMBartModel"),EFt.forEach(t),x7r=r(vke," (mBART model)"),vke.forEach(t),k7r=i(W),S7=n(W,"LI",{});var Tke=s(S7);k3e=n(Tke,"STRONG",{});var CFt=s(k3e);S7r=r(CFt,"mt5"),CFt.forEach(t),R7r=r(Tke," \u2014 "),VQ=n(Tke,"A",{href:!0});var wFt=s(VQ);B7r=r(wFt,"FlaxMT5Model"),wFt.forEach(t),P7r=r(Tke," (mT5 model)"),Tke.forEach(t),$7r=i(W),R7=n(W,"LI",{});var Mke=s(R7);S3e=n(Mke,"STRONG",{});var AFt=s(S3e);I7r=r(AFt,"pegasus"),AFt.forEach(t),q7r=r(Mke," \u2014 "),XQ=n(Mke,"A",{href:!0});var yFt=s(XQ);N7r=r(yFt,"FlaxPegasusModel"),yFt.forEach(t),j7r=r(Mke," (Pegasus model)"),Mke.forEach(t),D7r=i(W),B7=n(W,"LI",{});var Eke=s(B7);R3e=n(Eke,"STRONG",{});var LFt=s(R3e);G7r=r(LFt,"roberta"),LFt.forEach(t),O7r=r(Eke," \u2014 "),zQ=n(Eke,"A",{href:!0});var xFt=s(zQ);V7r=r(xFt,"FlaxRobertaModel"),xFt.forEach(t),X7r=r(Eke," (RoBERTa model)"),Eke.forEach(t),z7r=i(W),P7=n(W,"LI",{});var Cke=s(P7);B3e=n(Cke,"STRONG",{});var kFt=s(B3e);Q7r=r(kFt,"roformer"),kFt.forEach(t),W7r=r(Cke," \u2014 "),QQ=n(Cke,"A",{href:!0});var SFt=s(QQ);H7r=r(SFt,"FlaxRoFormerModel"),SFt.forEach(t),U7r=r(Cke," (RoFormer model)"),Cke.forEach(t),J7r=i(W),$7=n(W,"LI",{});var wke=s($7);P3e=n(wke,"STRONG",{});var RFt=s(P3e);Y7r=r(RFt,"t5"),RFt.forEach(t),K7r=r(wke," \u2014 "),WQ=n(wke,"A",{href:!0});var BFt=s(WQ);Z7r=r(BFt,"FlaxT5Model"),BFt.forEach(t),eMr=r(wke," (T5 model)"),wke.forEach(t),oMr=i(W),I7=n(W,"LI",{});var Ake=s(I7);$3e=n(Ake,"STRONG",{});var PFt=s($3e);rMr=r(PFt,"vision-text-dual-encoder"),PFt.forEach(t),tMr=r(Ake," \u2014 "),HQ=n(Ake,"A",{href:!0});var $Ft=s(HQ);aMr=r($Ft,"FlaxVisionTextDualEncoderModel"),$Ft.forEach(t),nMr=r(Ake," (VisionTextDualEncoder model)"),Ake.forEach(t),sMr=i(W),q7=n(W,"LI",{});var yke=s(q7);I3e=n(yke,"STRONG",{});var IFt=s(I3e);lMr=r(IFt,"vit"),IFt.forEach(t),iMr=r(yke," \u2014 "),UQ=n(yke,"A",{href:!0});var qFt=s(UQ);dMr=r(qFt,"FlaxViTModel"),qFt.forEach(t),cMr=r(yke," (ViT model)"),yke.forEach(t),fMr=i(W),N7=n(W,"LI",{});var Lke=s(N7);q3e=n(Lke,"STRONG",{});var NFt=s(q3e);mMr=r(NFt,"wav2vec2"),NFt.forEach(t),gMr=r(Lke," \u2014 "),JQ=n(Lke,"A",{href:!0});var jFt=s(JQ);hMr=r(jFt,"FlaxWav2Vec2Model"),jFt.forEach(t),pMr=r(Lke," (Wav2Vec2 model)"),Lke.forEach(t),_Mr=i(W),j7=n(W,"LI",{});var xke=s(j7);N3e=n(xke,"STRONG",{});var DFt=s(N3e);uMr=r(DFt,"xglm"),DFt.forEach(t),bMr=r(xke," \u2014 "),YQ=n(xke,"A",{href:!0});var GFt=s(YQ);FMr=r(GFt,"FlaxXGLMModel"),GFt.forEach(t),vMr=r(xke," (XGLM model)"),xke.forEach(t),TMr=i(W),D7=n(W,"LI",{});var kke=s(D7);j3e=n(kke,"STRONG",{});var OFt=s(j3e);MMr=r(OFt,"xlm-roberta"),OFt.forEach(t),EMr=r(kke," \u2014 "),KQ=n(kke,"A",{href:!0});var VFt=s(KQ);CMr=r(VFt,"FlaxXLMRobertaModel"),VFt.forEach(t),wMr=r(kke," (XLM-RoBERTa model)"),kke.forEach(t),W.forEach(t),AMr=i(La),D3e=n(La,"P",{});var XFt=s(D3e);yMr=r(XFt,"Examples:"),XFt.forEach(t),LMr=i(La),m(Vy.$$.fragment,La),La.forEach(t),fi.forEach(t),RBe=i(c),of=n(c,"H2",{class:!0});var V$e=s(of);G7=n(V$e,"A",{id:!0,class:!0,href:!0});var zFt=s(G7);G3e=n(zFt,"SPAN",{});var QFt=s(G3e);m(Xy.$$.fragment,QFt),QFt.forEach(t),zFt.forEach(t),xMr=i(V$e),O3e=n(V$e,"SPAN",{});var WFt=s(O3e);kMr=r(WFt,"FlaxAutoModelForCausalLM"),WFt.forEach(t),V$e.forEach(t),BBe=i(c),Br=n(c,"DIV",{class:!0});var gi=s(Br);m(zy.$$.fragment,gi),SMr=i(gi),rf=n(gi,"P",{});var wJ=s(rf);RMr=r(wJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),ZQ=n(wJ,"A",{href:!0});var HFt=s(ZQ);BMr=r(HFt,"from_pretrained()"),HFt.forEach(t),PMr=r(wJ," class method or the "),eW=n(wJ,"A",{href:!0});var UFt=s(eW);$Mr=r(UFt,"from_config()"),UFt.forEach(t),IMr=r(wJ,` class
method.`),wJ.forEach(t),qMr=i(gi),Qy=n(gi,"P",{});var X$e=s(Qy);NMr=r(X$e,"This class cannot be instantiated directly using "),V3e=n(X$e,"CODE",{});var JFt=s(V3e);jMr=r(JFt,"__init__()"),JFt.forEach(t),DMr=r(X$e," (throws an error)."),X$e.forEach(t),GMr=i(gi),yt=n(gi,"DIV",{class:!0});var hi=s(yt);m(Wy.$$.fragment,hi),OMr=i(hi),X3e=n(hi,"P",{});var YFt=s(X3e);VMr=r(YFt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),YFt.forEach(t),XMr=i(hi),tf=n(hi,"P",{});var AJ=s(tf);zMr=r(AJ,`Note:
Loading a model from its configuration file does `),z3e=n(AJ,"STRONG",{});var KFt=s(z3e);QMr=r(KFt,"not"),KFt.forEach(t),WMr=r(AJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),oW=n(AJ,"A",{href:!0});var ZFt=s(oW);HMr=r(ZFt,"from_pretrained()"),ZFt.forEach(t),UMr=r(AJ," to load the model weights."),AJ.forEach(t),JMr=i(hi),Q3e=n(hi,"P",{});var evt=s(Q3e);YMr=r(evt,"Examples:"),evt.forEach(t),KMr=i(hi),m(Hy.$$.fragment,hi),hi.forEach(t),ZMr=i(gi),Lo=n(gi,"DIV",{class:!0});var xa=s(Lo);m(Uy.$$.fragment,xa),eEr=i(xa),W3e=n(xa,"P",{});var ovt=s(W3e);oEr=r(ovt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),ovt.forEach(t),rEr=i(xa),kn=n(xa,"P",{});var iC=s(kn);tEr=r(iC,"The model class to instantiate is selected based on the "),H3e=n(iC,"CODE",{});var rvt=s(H3e);aEr=r(rvt,"model_type"),rvt.forEach(t),nEr=r(iC,` property of the config object (either
passed as an argument or loaded from `),U3e=n(iC,"CODE",{});var tvt=s(U3e);sEr=r(tvt,"pretrained_model_name_or_path"),tvt.forEach(t),lEr=r(iC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J3e=n(iC,"CODE",{});var avt=s(J3e);iEr=r(avt,"pretrained_model_name_or_path"),avt.forEach(t),dEr=r(iC,":"),iC.forEach(t),cEr=i(xa),ca=n(xa,"UL",{});var pi=s(ca);O7=n(pi,"LI",{});var Ske=s(O7);Y3e=n(Ske,"STRONG",{});var nvt=s(Y3e);fEr=r(nvt,"bart"),nvt.forEach(t),mEr=r(Ske," \u2014 "),rW=n(Ske,"A",{href:!0});var svt=s(rW);gEr=r(svt,"FlaxBartForCausalLM"),svt.forEach(t),hEr=r(Ske," (BART model)"),Ske.forEach(t),pEr=i(pi),V7=n(pi,"LI",{});var Rke=s(V7);K3e=n(Rke,"STRONG",{});var lvt=s(K3e);_Er=r(lvt,"gpt2"),lvt.forEach(t),uEr=r(Rke," \u2014 "),tW=n(Rke,"A",{href:!0});var ivt=s(tW);bEr=r(ivt,"FlaxGPT2LMHeadModel"),ivt.forEach(t),FEr=r(Rke," (OpenAI GPT-2 model)"),Rke.forEach(t),vEr=i(pi),X7=n(pi,"LI",{});var Bke=s(X7);Z3e=n(Bke,"STRONG",{});var dvt=s(Z3e);TEr=r(dvt,"gpt_neo"),dvt.forEach(t),MEr=r(Bke," \u2014 "),aW=n(Bke,"A",{href:!0});var cvt=s(aW);EEr=r(cvt,"FlaxGPTNeoForCausalLM"),cvt.forEach(t),CEr=r(Bke," (GPT Neo model)"),Bke.forEach(t),wEr=i(pi),z7=n(pi,"LI",{});var Pke=s(z7);e2e=n(Pke,"STRONG",{});var fvt=s(e2e);AEr=r(fvt,"gptj"),fvt.forEach(t),yEr=r(Pke," \u2014 "),nW=n(Pke,"A",{href:!0});var mvt=s(nW);LEr=r(mvt,"FlaxGPTJForCausalLM"),mvt.forEach(t),xEr=r(Pke," (GPT-J model)"),Pke.forEach(t),kEr=i(pi),Q7=n(pi,"LI",{});var $ke=s(Q7);o2e=n($ke,"STRONG",{});var gvt=s(o2e);SEr=r(gvt,"xglm"),gvt.forEach(t),REr=r($ke," \u2014 "),sW=n($ke,"A",{href:!0});var hvt=s(sW);BEr=r(hvt,"FlaxXGLMForCausalLM"),hvt.forEach(t),PEr=r($ke," (XGLM model)"),$ke.forEach(t),pi.forEach(t),$Er=i(xa),r2e=n(xa,"P",{});var pvt=s(r2e);IEr=r(pvt,"Examples:"),pvt.forEach(t),qEr=i(xa),m(Jy.$$.fragment,xa),xa.forEach(t),gi.forEach(t),PBe=i(c),af=n(c,"H2",{class:!0});var z$e=s(af);W7=n(z$e,"A",{id:!0,class:!0,href:!0});var _vt=s(W7);t2e=n(_vt,"SPAN",{});var uvt=s(t2e);m(Yy.$$.fragment,uvt),uvt.forEach(t),_vt.forEach(t),NEr=i(z$e),a2e=n(z$e,"SPAN",{});var bvt=s(a2e);jEr=r(bvt,"FlaxAutoModelForPreTraining"),bvt.forEach(t),z$e.forEach(t),$Be=i(c),Pr=n(c,"DIV",{class:!0});var _i=s(Pr);m(Ky.$$.fragment,_i),DEr=i(_i),nf=n(_i,"P",{});var yJ=s(nf);GEr=r(yJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),lW=n(yJ,"A",{href:!0});var Fvt=s(lW);OEr=r(Fvt,"from_pretrained()"),Fvt.forEach(t),VEr=r(yJ," class method or the "),iW=n(yJ,"A",{href:!0});var vvt=s(iW);XEr=r(vvt,"from_config()"),vvt.forEach(t),zEr=r(yJ,` class
method.`),yJ.forEach(t),QEr=i(_i),Zy=n(_i,"P",{});var Q$e=s(Zy);WEr=r(Q$e,"This class cannot be instantiated directly using "),n2e=n(Q$e,"CODE",{});var Tvt=s(n2e);HEr=r(Tvt,"__init__()"),Tvt.forEach(t),UEr=r(Q$e," (throws an error)."),Q$e.forEach(t),JEr=i(_i),Lt=n(_i,"DIV",{class:!0});var ui=s(Lt);m(eL.$$.fragment,ui),YEr=i(ui),s2e=n(ui,"P",{});var Mvt=s(s2e);KEr=r(Mvt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Mvt.forEach(t),ZEr=i(ui),sf=n(ui,"P",{});var LJ=s(sf);eCr=r(LJ,`Note:
Loading a model from its configuration file does `),l2e=n(LJ,"STRONG",{});var Evt=s(l2e);oCr=r(Evt,"not"),Evt.forEach(t),rCr=r(LJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),dW=n(LJ,"A",{href:!0});var Cvt=s(dW);tCr=r(Cvt,"from_pretrained()"),Cvt.forEach(t),aCr=r(LJ," to load the model weights."),LJ.forEach(t),nCr=i(ui),i2e=n(ui,"P",{});var wvt=s(i2e);sCr=r(wvt,"Examples:"),wvt.forEach(t),lCr=i(ui),m(oL.$$.fragment,ui),ui.forEach(t),iCr=i(_i),xo=n(_i,"DIV",{class:!0});var ka=s(xo);m(rL.$$.fragment,ka),dCr=i(ka),d2e=n(ka,"P",{});var Avt=s(d2e);cCr=r(Avt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Avt.forEach(t),fCr=i(ka),Sn=n(ka,"P",{});var dC=s(Sn);mCr=r(dC,"The model class to instantiate is selected based on the "),c2e=n(dC,"CODE",{});var yvt=s(c2e);gCr=r(yvt,"model_type"),yvt.forEach(t),hCr=r(dC,` property of the config object (either
passed as an argument or loaded from `),f2e=n(dC,"CODE",{});var Lvt=s(f2e);pCr=r(Lvt,"pretrained_model_name_or_path"),Lvt.forEach(t),_Cr=r(dC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m2e=n(dC,"CODE",{});var xvt=s(m2e);uCr=r(xvt,"pretrained_model_name_or_path"),xvt.forEach(t),bCr=r(dC,":"),dC.forEach(t),FCr=i(ka),fe=n(ka,"UL",{});var pe=s(fe);H7=n(pe,"LI",{});var Ike=s(H7);g2e=n(Ike,"STRONG",{});var kvt=s(g2e);vCr=r(kvt,"albert"),kvt.forEach(t),TCr=r(Ike," \u2014 "),cW=n(Ike,"A",{href:!0});var Svt=s(cW);MCr=r(Svt,"FlaxAlbertForPreTraining"),Svt.forEach(t),ECr=r(Ike," (ALBERT model)"),Ike.forEach(t),CCr=i(pe),U7=n(pe,"LI",{});var qke=s(U7);h2e=n(qke,"STRONG",{});var Rvt=s(h2e);wCr=r(Rvt,"bart"),Rvt.forEach(t),ACr=r(qke," \u2014 "),fW=n(qke,"A",{href:!0});var Bvt=s(fW);yCr=r(Bvt,"FlaxBartForConditionalGeneration"),Bvt.forEach(t),LCr=r(qke," (BART model)"),qke.forEach(t),xCr=i(pe),J7=n(pe,"LI",{});var Nke=s(J7);p2e=n(Nke,"STRONG",{});var Pvt=s(p2e);kCr=r(Pvt,"bert"),Pvt.forEach(t),SCr=r(Nke," \u2014 "),mW=n(Nke,"A",{href:!0});var $vt=s(mW);RCr=r($vt,"FlaxBertForPreTraining"),$vt.forEach(t),BCr=r(Nke," (BERT model)"),Nke.forEach(t),PCr=i(pe),Y7=n(pe,"LI",{});var jke=s(Y7);_2e=n(jke,"STRONG",{});var Ivt=s(_2e);$Cr=r(Ivt,"big_bird"),Ivt.forEach(t),ICr=r(jke," \u2014 "),gW=n(jke,"A",{href:!0});var qvt=s(gW);qCr=r(qvt,"FlaxBigBirdForPreTraining"),qvt.forEach(t),NCr=r(jke," (BigBird model)"),jke.forEach(t),jCr=i(pe),K7=n(pe,"LI",{});var Dke=s(K7);u2e=n(Dke,"STRONG",{});var Nvt=s(u2e);DCr=r(Nvt,"electra"),Nvt.forEach(t),GCr=r(Dke," \u2014 "),hW=n(Dke,"A",{href:!0});var jvt=s(hW);OCr=r(jvt,"FlaxElectraForPreTraining"),jvt.forEach(t),VCr=r(Dke," (ELECTRA model)"),Dke.forEach(t),XCr=i(pe),Z7=n(pe,"LI",{});var Gke=s(Z7);b2e=n(Gke,"STRONG",{});var Dvt=s(b2e);zCr=r(Dvt,"mbart"),Dvt.forEach(t),QCr=r(Gke," \u2014 "),pW=n(Gke,"A",{href:!0});var Gvt=s(pW);WCr=r(Gvt,"FlaxMBartForConditionalGeneration"),Gvt.forEach(t),HCr=r(Gke," (mBART model)"),Gke.forEach(t),UCr=i(pe),eM=n(pe,"LI",{});var Oke=s(eM);F2e=n(Oke,"STRONG",{});var Ovt=s(F2e);JCr=r(Ovt,"mt5"),Ovt.forEach(t),YCr=r(Oke," \u2014 "),_W=n(Oke,"A",{href:!0});var Vvt=s(_W);KCr=r(Vvt,"FlaxMT5ForConditionalGeneration"),Vvt.forEach(t),ZCr=r(Oke," (mT5 model)"),Oke.forEach(t),e5r=i(pe),oM=n(pe,"LI",{});var Vke=s(oM);v2e=n(Vke,"STRONG",{});var Xvt=s(v2e);o5r=r(Xvt,"roberta"),Xvt.forEach(t),r5r=r(Vke," \u2014 "),uW=n(Vke,"A",{href:!0});var zvt=s(uW);t5r=r(zvt,"FlaxRobertaForMaskedLM"),zvt.forEach(t),a5r=r(Vke," (RoBERTa model)"),Vke.forEach(t),n5r=i(pe),rM=n(pe,"LI",{});var Xke=s(rM);T2e=n(Xke,"STRONG",{});var Qvt=s(T2e);s5r=r(Qvt,"roformer"),Qvt.forEach(t),l5r=r(Xke," \u2014 "),bW=n(Xke,"A",{href:!0});var Wvt=s(bW);i5r=r(Wvt,"FlaxRoFormerForMaskedLM"),Wvt.forEach(t),d5r=r(Xke," (RoFormer model)"),Xke.forEach(t),c5r=i(pe),tM=n(pe,"LI",{});var zke=s(tM);M2e=n(zke,"STRONG",{});var Hvt=s(M2e);f5r=r(Hvt,"t5"),Hvt.forEach(t),m5r=r(zke," \u2014 "),FW=n(zke,"A",{href:!0});var Uvt=s(FW);g5r=r(Uvt,"FlaxT5ForConditionalGeneration"),Uvt.forEach(t),h5r=r(zke," (T5 model)"),zke.forEach(t),p5r=i(pe),aM=n(pe,"LI",{});var Qke=s(aM);E2e=n(Qke,"STRONG",{});var Jvt=s(E2e);_5r=r(Jvt,"wav2vec2"),Jvt.forEach(t),u5r=r(Qke," \u2014 "),vW=n(Qke,"A",{href:!0});var Yvt=s(vW);b5r=r(Yvt,"FlaxWav2Vec2ForPreTraining"),Yvt.forEach(t),F5r=r(Qke," (Wav2Vec2 model)"),Qke.forEach(t),v5r=i(pe),nM=n(pe,"LI",{});var Wke=s(nM);C2e=n(Wke,"STRONG",{});var Kvt=s(C2e);T5r=r(Kvt,"xlm-roberta"),Kvt.forEach(t),M5r=r(Wke," \u2014 "),TW=n(Wke,"A",{href:!0});var Zvt=s(TW);E5r=r(Zvt,"FlaxXLMRobertaForMaskedLM"),Zvt.forEach(t),C5r=r(Wke," (XLM-RoBERTa model)"),Wke.forEach(t),pe.forEach(t),w5r=i(ka),w2e=n(ka,"P",{});var e6t=s(w2e);A5r=r(e6t,"Examples:"),e6t.forEach(t),y5r=i(ka),m(tL.$$.fragment,ka),ka.forEach(t),_i.forEach(t),IBe=i(c),lf=n(c,"H2",{class:!0});var W$e=s(lf);sM=n(W$e,"A",{id:!0,class:!0,href:!0});var o6t=s(sM);A2e=n(o6t,"SPAN",{});var r6t=s(A2e);m(aL.$$.fragment,r6t),r6t.forEach(t),o6t.forEach(t),L5r=i(W$e),y2e=n(W$e,"SPAN",{});var t6t=s(y2e);x5r=r(t6t,"FlaxAutoModelForMaskedLM"),t6t.forEach(t),W$e.forEach(t),qBe=i(c),$r=n(c,"DIV",{class:!0});var bi=s($r);m(nL.$$.fragment,bi),k5r=i(bi),df=n(bi,"P",{});var xJ=s(df);S5r=r(xJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),MW=n(xJ,"A",{href:!0});var a6t=s(MW);R5r=r(a6t,"from_pretrained()"),a6t.forEach(t),B5r=r(xJ," class method or the "),EW=n(xJ,"A",{href:!0});var n6t=s(EW);P5r=r(n6t,"from_config()"),n6t.forEach(t),$5r=r(xJ,` class
method.`),xJ.forEach(t),I5r=i(bi),sL=n(bi,"P",{});var H$e=s(sL);q5r=r(H$e,"This class cannot be instantiated directly using "),L2e=n(H$e,"CODE",{});var s6t=s(L2e);N5r=r(s6t,"__init__()"),s6t.forEach(t),j5r=r(H$e," (throws an error)."),H$e.forEach(t),D5r=i(bi),xt=n(bi,"DIV",{class:!0});var Fi=s(xt);m(lL.$$.fragment,Fi),G5r=i(Fi),x2e=n(Fi,"P",{});var l6t=s(x2e);O5r=r(l6t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),l6t.forEach(t),V5r=i(Fi),cf=n(Fi,"P",{});var kJ=s(cf);X5r=r(kJ,`Note:
Loading a model from its configuration file does `),k2e=n(kJ,"STRONG",{});var i6t=s(k2e);z5r=r(i6t,"not"),i6t.forEach(t),Q5r=r(kJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),CW=n(kJ,"A",{href:!0});var d6t=s(CW);W5r=r(d6t,"from_pretrained()"),d6t.forEach(t),H5r=r(kJ," to load the model weights."),kJ.forEach(t),U5r=i(Fi),S2e=n(Fi,"P",{});var c6t=s(S2e);J5r=r(c6t,"Examples:"),c6t.forEach(t),Y5r=i(Fi),m(iL.$$.fragment,Fi),Fi.forEach(t),K5r=i(bi),ko=n(bi,"DIV",{class:!0});var Sa=s(ko);m(dL.$$.fragment,Sa),Z5r=i(Sa),R2e=n(Sa,"P",{});var f6t=s(R2e);ewr=r(f6t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),f6t.forEach(t),owr=i(Sa),Rn=n(Sa,"P",{});var cC=s(Rn);rwr=r(cC,"The model class to instantiate is selected based on the "),B2e=n(cC,"CODE",{});var m6t=s(B2e);twr=r(m6t,"model_type"),m6t.forEach(t),awr=r(cC,` property of the config object (either
passed as an argument or loaded from `),P2e=n(cC,"CODE",{});var g6t=s(P2e);nwr=r(g6t,"pretrained_model_name_or_path"),g6t.forEach(t),swr=r(cC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$2e=n(cC,"CODE",{});var h6t=s($2e);lwr=r(h6t,"pretrained_model_name_or_path"),h6t.forEach(t),iwr=r(cC,":"),cC.forEach(t),dwr=i(Sa),be=n(Sa,"UL",{});var Ae=s(be);lM=n(Ae,"LI",{});var Hke=s(lM);I2e=n(Hke,"STRONG",{});var p6t=s(I2e);cwr=r(p6t,"albert"),p6t.forEach(t),fwr=r(Hke," \u2014 "),wW=n(Hke,"A",{href:!0});var _6t=s(wW);mwr=r(_6t,"FlaxAlbertForMaskedLM"),_6t.forEach(t),gwr=r(Hke," (ALBERT model)"),Hke.forEach(t),hwr=i(Ae),iM=n(Ae,"LI",{});var Uke=s(iM);q2e=n(Uke,"STRONG",{});var u6t=s(q2e);pwr=r(u6t,"bart"),u6t.forEach(t),_wr=r(Uke," \u2014 "),AW=n(Uke,"A",{href:!0});var b6t=s(AW);uwr=r(b6t,"FlaxBartForConditionalGeneration"),b6t.forEach(t),bwr=r(Uke," (BART model)"),Uke.forEach(t),Fwr=i(Ae),dM=n(Ae,"LI",{});var Jke=s(dM);N2e=n(Jke,"STRONG",{});var F6t=s(N2e);vwr=r(F6t,"bert"),F6t.forEach(t),Twr=r(Jke," \u2014 "),yW=n(Jke,"A",{href:!0});var v6t=s(yW);Mwr=r(v6t,"FlaxBertForMaskedLM"),v6t.forEach(t),Ewr=r(Jke," (BERT model)"),Jke.forEach(t),Cwr=i(Ae),cM=n(Ae,"LI",{});var Yke=s(cM);j2e=n(Yke,"STRONG",{});var T6t=s(j2e);wwr=r(T6t,"big_bird"),T6t.forEach(t),Awr=r(Yke," \u2014 "),LW=n(Yke,"A",{href:!0});var M6t=s(LW);ywr=r(M6t,"FlaxBigBirdForMaskedLM"),M6t.forEach(t),Lwr=r(Yke," (BigBird model)"),Yke.forEach(t),xwr=i(Ae),fM=n(Ae,"LI",{});var Kke=s(fM);D2e=n(Kke,"STRONG",{});var E6t=s(D2e);kwr=r(E6t,"distilbert"),E6t.forEach(t),Swr=r(Kke," \u2014 "),xW=n(Kke,"A",{href:!0});var C6t=s(xW);Rwr=r(C6t,"FlaxDistilBertForMaskedLM"),C6t.forEach(t),Bwr=r(Kke," (DistilBERT model)"),Kke.forEach(t),Pwr=i(Ae),mM=n(Ae,"LI",{});var Zke=s(mM);G2e=n(Zke,"STRONG",{});var w6t=s(G2e);$wr=r(w6t,"electra"),w6t.forEach(t),Iwr=r(Zke," \u2014 "),kW=n(Zke,"A",{href:!0});var A6t=s(kW);qwr=r(A6t,"FlaxElectraForMaskedLM"),A6t.forEach(t),Nwr=r(Zke," (ELECTRA model)"),Zke.forEach(t),jwr=i(Ae),gM=n(Ae,"LI",{});var eSe=s(gM);O2e=n(eSe,"STRONG",{});var y6t=s(O2e);Dwr=r(y6t,"mbart"),y6t.forEach(t),Gwr=r(eSe," \u2014 "),SW=n(eSe,"A",{href:!0});var L6t=s(SW);Owr=r(L6t,"FlaxMBartForConditionalGeneration"),L6t.forEach(t),Vwr=r(eSe," (mBART model)"),eSe.forEach(t),Xwr=i(Ae),hM=n(Ae,"LI",{});var oSe=s(hM);V2e=n(oSe,"STRONG",{});var x6t=s(V2e);zwr=r(x6t,"roberta"),x6t.forEach(t),Qwr=r(oSe," \u2014 "),RW=n(oSe,"A",{href:!0});var k6t=s(RW);Wwr=r(k6t,"FlaxRobertaForMaskedLM"),k6t.forEach(t),Hwr=r(oSe," (RoBERTa model)"),oSe.forEach(t),Uwr=i(Ae),pM=n(Ae,"LI",{});var rSe=s(pM);X2e=n(rSe,"STRONG",{});var S6t=s(X2e);Jwr=r(S6t,"roformer"),S6t.forEach(t),Ywr=r(rSe," \u2014 "),BW=n(rSe,"A",{href:!0});var R6t=s(BW);Kwr=r(R6t,"FlaxRoFormerForMaskedLM"),R6t.forEach(t),Zwr=r(rSe," (RoFormer model)"),rSe.forEach(t),eAr=i(Ae),_M=n(Ae,"LI",{});var tSe=s(_M);z2e=n(tSe,"STRONG",{});var B6t=s(z2e);oAr=r(B6t,"xlm-roberta"),B6t.forEach(t),rAr=r(tSe," \u2014 "),PW=n(tSe,"A",{href:!0});var P6t=s(PW);tAr=r(P6t,"FlaxXLMRobertaForMaskedLM"),P6t.forEach(t),aAr=r(tSe," (XLM-RoBERTa model)"),tSe.forEach(t),Ae.forEach(t),nAr=i(Sa),Q2e=n(Sa,"P",{});var $6t=s(Q2e);sAr=r($6t,"Examples:"),$6t.forEach(t),lAr=i(Sa),m(cL.$$.fragment,Sa),Sa.forEach(t),bi.forEach(t),NBe=i(c),ff=n(c,"H2",{class:!0});var U$e=s(ff);uM=n(U$e,"A",{id:!0,class:!0,href:!0});var I6t=s(uM);W2e=n(I6t,"SPAN",{});var q6t=s(W2e);m(fL.$$.fragment,q6t),q6t.forEach(t),I6t.forEach(t),iAr=i(U$e),H2e=n(U$e,"SPAN",{});var N6t=s(H2e);dAr=r(N6t,"FlaxAutoModelForSeq2SeqLM"),N6t.forEach(t),U$e.forEach(t),jBe=i(c),Ir=n(c,"DIV",{class:!0});var vi=s(Ir);m(mL.$$.fragment,vi),cAr=i(vi),mf=n(vi,"P",{});var SJ=s(mf);fAr=r(SJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),$W=n(SJ,"A",{href:!0});var j6t=s($W);mAr=r(j6t,"from_pretrained()"),j6t.forEach(t),gAr=r(SJ," class method or the "),IW=n(SJ,"A",{href:!0});var D6t=s(IW);hAr=r(D6t,"from_config()"),D6t.forEach(t),pAr=r(SJ,` class
method.`),SJ.forEach(t),_Ar=i(vi),gL=n(vi,"P",{});var J$e=s(gL);uAr=r(J$e,"This class cannot be instantiated directly using "),U2e=n(J$e,"CODE",{});var G6t=s(U2e);bAr=r(G6t,"__init__()"),G6t.forEach(t),FAr=r(J$e," (throws an error)."),J$e.forEach(t),vAr=i(vi),kt=n(vi,"DIV",{class:!0});var Ti=s(kt);m(hL.$$.fragment,Ti),TAr=i(Ti),J2e=n(Ti,"P",{});var O6t=s(J2e);MAr=r(O6t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),O6t.forEach(t),EAr=i(Ti),gf=n(Ti,"P",{});var RJ=s(gf);CAr=r(RJ,`Note:
Loading a model from its configuration file does `),Y2e=n(RJ,"STRONG",{});var V6t=s(Y2e);wAr=r(V6t,"not"),V6t.forEach(t),AAr=r(RJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),qW=n(RJ,"A",{href:!0});var X6t=s(qW);yAr=r(X6t,"from_pretrained()"),X6t.forEach(t),LAr=r(RJ," to load the model weights."),RJ.forEach(t),xAr=i(Ti),K2e=n(Ti,"P",{});var z6t=s(K2e);kAr=r(z6t,"Examples:"),z6t.forEach(t),SAr=i(Ti),m(pL.$$.fragment,Ti),Ti.forEach(t),RAr=i(vi),So=n(vi,"DIV",{class:!0});var Ra=s(So);m(_L.$$.fragment,Ra),BAr=i(Ra),Z2e=n(Ra,"P",{});var Q6t=s(Z2e);PAr=r(Q6t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Q6t.forEach(t),$Ar=i(Ra),Bn=n(Ra,"P",{});var fC=s(Bn);IAr=r(fC,"The model class to instantiate is selected based on the "),eFe=n(fC,"CODE",{});var W6t=s(eFe);qAr=r(W6t,"model_type"),W6t.forEach(t),NAr=r(fC,` property of the config object (either
passed as an argument or loaded from `),oFe=n(fC,"CODE",{});var H6t=s(oFe);jAr=r(H6t,"pretrained_model_name_or_path"),H6t.forEach(t),DAr=r(fC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rFe=n(fC,"CODE",{});var U6t=s(rFe);GAr=r(U6t,"pretrained_model_name_or_path"),U6t.forEach(t),OAr=r(fC,":"),fC.forEach(t),VAr=i(Ra),Ee=n(Ra,"UL",{});var so=s(Ee);bM=n(so,"LI",{});var aSe=s(bM);tFe=n(aSe,"STRONG",{});var J6t=s(tFe);XAr=r(J6t,"bart"),J6t.forEach(t),zAr=r(aSe," \u2014 "),NW=n(aSe,"A",{href:!0});var Y6t=s(NW);QAr=r(Y6t,"FlaxBartForConditionalGeneration"),Y6t.forEach(t),WAr=r(aSe," (BART model)"),aSe.forEach(t),HAr=i(so),FM=n(so,"LI",{});var nSe=s(FM);aFe=n(nSe,"STRONG",{});var K6t=s(aFe);UAr=r(K6t,"blenderbot"),K6t.forEach(t),JAr=r(nSe," \u2014 "),jW=n(nSe,"A",{href:!0});var Z6t=s(jW);YAr=r(Z6t,"FlaxBlenderbotForConditionalGeneration"),Z6t.forEach(t),KAr=r(nSe," (Blenderbot model)"),nSe.forEach(t),ZAr=i(so),vM=n(so,"LI",{});var sSe=s(vM);nFe=n(sSe,"STRONG",{});var eTt=s(nFe);e0r=r(eTt,"blenderbot-small"),eTt.forEach(t),o0r=r(sSe," \u2014 "),DW=n(sSe,"A",{href:!0});var oTt=s(DW);r0r=r(oTt,"FlaxBlenderbotSmallForConditionalGeneration"),oTt.forEach(t),t0r=r(sSe," (BlenderbotSmall model)"),sSe.forEach(t),a0r=i(so),TM=n(so,"LI",{});var lSe=s(TM);sFe=n(lSe,"STRONG",{});var rTt=s(sFe);n0r=r(rTt,"encoder-decoder"),rTt.forEach(t),s0r=r(lSe," \u2014 "),GW=n(lSe,"A",{href:!0});var tTt=s(GW);l0r=r(tTt,"FlaxEncoderDecoderModel"),tTt.forEach(t),i0r=r(lSe," (Encoder decoder model)"),lSe.forEach(t),d0r=i(so),MM=n(so,"LI",{});var iSe=s(MM);lFe=n(iSe,"STRONG",{});var aTt=s(lFe);c0r=r(aTt,"marian"),aTt.forEach(t),f0r=r(iSe," \u2014 "),OW=n(iSe,"A",{href:!0});var nTt=s(OW);m0r=r(nTt,"FlaxMarianMTModel"),nTt.forEach(t),g0r=r(iSe," (Marian model)"),iSe.forEach(t),h0r=i(so),EM=n(so,"LI",{});var dSe=s(EM);iFe=n(dSe,"STRONG",{});var sTt=s(iFe);p0r=r(sTt,"mbart"),sTt.forEach(t),_0r=r(dSe," \u2014 "),VW=n(dSe,"A",{href:!0});var lTt=s(VW);u0r=r(lTt,"FlaxMBartForConditionalGeneration"),lTt.forEach(t),b0r=r(dSe," (mBART model)"),dSe.forEach(t),F0r=i(so),CM=n(so,"LI",{});var cSe=s(CM);dFe=n(cSe,"STRONG",{});var iTt=s(dFe);v0r=r(iTt,"mt5"),iTt.forEach(t),T0r=r(cSe," \u2014 "),XW=n(cSe,"A",{href:!0});var dTt=s(XW);M0r=r(dTt,"FlaxMT5ForConditionalGeneration"),dTt.forEach(t),E0r=r(cSe," (mT5 model)"),cSe.forEach(t),C0r=i(so),wM=n(so,"LI",{});var fSe=s(wM);cFe=n(fSe,"STRONG",{});var cTt=s(cFe);w0r=r(cTt,"pegasus"),cTt.forEach(t),A0r=r(fSe," \u2014 "),zW=n(fSe,"A",{href:!0});var fTt=s(zW);y0r=r(fTt,"FlaxPegasusForConditionalGeneration"),fTt.forEach(t),L0r=r(fSe," (Pegasus model)"),fSe.forEach(t),x0r=i(so),AM=n(so,"LI",{});var mSe=s(AM);fFe=n(mSe,"STRONG",{});var mTt=s(fFe);k0r=r(mTt,"t5"),mTt.forEach(t),S0r=r(mSe," \u2014 "),QW=n(mSe,"A",{href:!0});var gTt=s(QW);R0r=r(gTt,"FlaxT5ForConditionalGeneration"),gTt.forEach(t),B0r=r(mSe," (T5 model)"),mSe.forEach(t),so.forEach(t),P0r=i(Ra),mFe=n(Ra,"P",{});var hTt=s(mFe);$0r=r(hTt,"Examples:"),hTt.forEach(t),I0r=i(Ra),m(uL.$$.fragment,Ra),Ra.forEach(t),vi.forEach(t),DBe=i(c),hf=n(c,"H2",{class:!0});var Y$e=s(hf);yM=n(Y$e,"A",{id:!0,class:!0,href:!0});var pTt=s(yM);gFe=n(pTt,"SPAN",{});var _Tt=s(gFe);m(bL.$$.fragment,_Tt),_Tt.forEach(t),pTt.forEach(t),q0r=i(Y$e),hFe=n(Y$e,"SPAN",{});var uTt=s(hFe);N0r=r(uTt,"FlaxAutoModelForSequenceClassification"),uTt.forEach(t),Y$e.forEach(t),GBe=i(c),qr=n(c,"DIV",{class:!0});var Mi=s(qr);m(FL.$$.fragment,Mi),j0r=i(Mi),pf=n(Mi,"P",{});var BJ=s(pf);D0r=r(BJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),WW=n(BJ,"A",{href:!0});var bTt=s(WW);G0r=r(bTt,"from_pretrained()"),bTt.forEach(t),O0r=r(BJ," class method or the "),HW=n(BJ,"A",{href:!0});var FTt=s(HW);V0r=r(FTt,"from_config()"),FTt.forEach(t),X0r=r(BJ,` class
method.`),BJ.forEach(t),z0r=i(Mi),vL=n(Mi,"P",{});var K$e=s(vL);Q0r=r(K$e,"This class cannot be instantiated directly using "),pFe=n(K$e,"CODE",{});var vTt=s(pFe);W0r=r(vTt,"__init__()"),vTt.forEach(t),H0r=r(K$e," (throws an error)."),K$e.forEach(t),U0r=i(Mi),St=n(Mi,"DIV",{class:!0});var Ei=s(St);m(TL.$$.fragment,Ei),J0r=i(Ei),_Fe=n(Ei,"P",{});var TTt=s(_Fe);Y0r=r(TTt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),TTt.forEach(t),K0r=i(Ei),_f=n(Ei,"P",{});var PJ=s(_f);Z0r=r(PJ,`Note:
Loading a model from its configuration file does `),uFe=n(PJ,"STRONG",{});var MTt=s(uFe);eyr=r(MTt,"not"),MTt.forEach(t),oyr=r(PJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),UW=n(PJ,"A",{href:!0});var ETt=s(UW);ryr=r(ETt,"from_pretrained()"),ETt.forEach(t),tyr=r(PJ," to load the model weights."),PJ.forEach(t),ayr=i(Ei),bFe=n(Ei,"P",{});var CTt=s(bFe);nyr=r(CTt,"Examples:"),CTt.forEach(t),syr=i(Ei),m(ML.$$.fragment,Ei),Ei.forEach(t),lyr=i(Mi),Ro=n(Mi,"DIV",{class:!0});var Ba=s(Ro);m(EL.$$.fragment,Ba),iyr=i(Ba),FFe=n(Ba,"P",{});var wTt=s(FFe);dyr=r(wTt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),wTt.forEach(t),cyr=i(Ba),Pn=n(Ba,"P",{});var mC=s(Pn);fyr=r(mC,"The model class to instantiate is selected based on the "),vFe=n(mC,"CODE",{});var ATt=s(vFe);myr=r(ATt,"model_type"),ATt.forEach(t),gyr=r(mC,` property of the config object (either
passed as an argument or loaded from `),TFe=n(mC,"CODE",{});var yTt=s(TFe);hyr=r(yTt,"pretrained_model_name_or_path"),yTt.forEach(t),pyr=r(mC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MFe=n(mC,"CODE",{});var LTt=s(MFe);_yr=r(LTt,"pretrained_model_name_or_path"),LTt.forEach(t),uyr=r(mC,":"),mC.forEach(t),byr=i(Ba),Fe=n(Ba,"UL",{});var ye=s(Fe);LM=n(ye,"LI",{});var gSe=s(LM);EFe=n(gSe,"STRONG",{});var xTt=s(EFe);Fyr=r(xTt,"albert"),xTt.forEach(t),vyr=r(gSe," \u2014 "),JW=n(gSe,"A",{href:!0});var kTt=s(JW);Tyr=r(kTt,"FlaxAlbertForSequenceClassification"),kTt.forEach(t),Myr=r(gSe," (ALBERT model)"),gSe.forEach(t),Eyr=i(ye),xM=n(ye,"LI",{});var hSe=s(xM);CFe=n(hSe,"STRONG",{});var STt=s(CFe);Cyr=r(STt,"bart"),STt.forEach(t),wyr=r(hSe," \u2014 "),YW=n(hSe,"A",{href:!0});var RTt=s(YW);Ayr=r(RTt,"FlaxBartForSequenceClassification"),RTt.forEach(t),yyr=r(hSe," (BART model)"),hSe.forEach(t),Lyr=i(ye),kM=n(ye,"LI",{});var pSe=s(kM);wFe=n(pSe,"STRONG",{});var BTt=s(wFe);xyr=r(BTt,"bert"),BTt.forEach(t),kyr=r(pSe," \u2014 "),KW=n(pSe,"A",{href:!0});var PTt=s(KW);Syr=r(PTt,"FlaxBertForSequenceClassification"),PTt.forEach(t),Ryr=r(pSe," (BERT model)"),pSe.forEach(t),Byr=i(ye),SM=n(ye,"LI",{});var _Se=s(SM);AFe=n(_Se,"STRONG",{});var $Tt=s(AFe);Pyr=r($Tt,"big_bird"),$Tt.forEach(t),$yr=r(_Se," \u2014 "),ZW=n(_Se,"A",{href:!0});var ITt=s(ZW);Iyr=r(ITt,"FlaxBigBirdForSequenceClassification"),ITt.forEach(t),qyr=r(_Se," (BigBird model)"),_Se.forEach(t),Nyr=i(ye),RM=n(ye,"LI",{});var uSe=s(RM);yFe=n(uSe,"STRONG",{});var qTt=s(yFe);jyr=r(qTt,"distilbert"),qTt.forEach(t),Dyr=r(uSe," \u2014 "),eH=n(uSe,"A",{href:!0});var NTt=s(eH);Gyr=r(NTt,"FlaxDistilBertForSequenceClassification"),NTt.forEach(t),Oyr=r(uSe," (DistilBERT model)"),uSe.forEach(t),Vyr=i(ye),BM=n(ye,"LI",{});var bSe=s(BM);LFe=n(bSe,"STRONG",{});var jTt=s(LFe);Xyr=r(jTt,"electra"),jTt.forEach(t),zyr=r(bSe," \u2014 "),oH=n(bSe,"A",{href:!0});var DTt=s(oH);Qyr=r(DTt,"FlaxElectraForSequenceClassification"),DTt.forEach(t),Wyr=r(bSe," (ELECTRA model)"),bSe.forEach(t),Hyr=i(ye),PM=n(ye,"LI",{});var FSe=s(PM);xFe=n(FSe,"STRONG",{});var GTt=s(xFe);Uyr=r(GTt,"mbart"),GTt.forEach(t),Jyr=r(FSe," \u2014 "),rH=n(FSe,"A",{href:!0});var OTt=s(rH);Yyr=r(OTt,"FlaxMBartForSequenceClassification"),OTt.forEach(t),Kyr=r(FSe," (mBART model)"),FSe.forEach(t),Zyr=i(ye),$M=n(ye,"LI",{});var vSe=s($M);kFe=n(vSe,"STRONG",{});var VTt=s(kFe);eLr=r(VTt,"roberta"),VTt.forEach(t),oLr=r(vSe," \u2014 "),tH=n(vSe,"A",{href:!0});var XTt=s(tH);rLr=r(XTt,"FlaxRobertaForSequenceClassification"),XTt.forEach(t),tLr=r(vSe," (RoBERTa model)"),vSe.forEach(t),aLr=i(ye),IM=n(ye,"LI",{});var TSe=s(IM);SFe=n(TSe,"STRONG",{});var zTt=s(SFe);nLr=r(zTt,"roformer"),zTt.forEach(t),sLr=r(TSe," \u2014 "),aH=n(TSe,"A",{href:!0});var QTt=s(aH);lLr=r(QTt,"FlaxRoFormerForSequenceClassification"),QTt.forEach(t),iLr=r(TSe," (RoFormer model)"),TSe.forEach(t),dLr=i(ye),qM=n(ye,"LI",{});var MSe=s(qM);RFe=n(MSe,"STRONG",{});var WTt=s(RFe);cLr=r(WTt,"xlm-roberta"),WTt.forEach(t),fLr=r(MSe," \u2014 "),nH=n(MSe,"A",{href:!0});var HTt=s(nH);mLr=r(HTt,"FlaxXLMRobertaForSequenceClassification"),HTt.forEach(t),gLr=r(MSe," (XLM-RoBERTa model)"),MSe.forEach(t),ye.forEach(t),hLr=i(Ba),BFe=n(Ba,"P",{});var UTt=s(BFe);pLr=r(UTt,"Examples:"),UTt.forEach(t),_Lr=i(Ba),m(CL.$$.fragment,Ba),Ba.forEach(t),Mi.forEach(t),OBe=i(c),uf=n(c,"H2",{class:!0});var Z$e=s(uf);NM=n(Z$e,"A",{id:!0,class:!0,href:!0});var JTt=s(NM);PFe=n(JTt,"SPAN",{});var YTt=s(PFe);m(wL.$$.fragment,YTt),YTt.forEach(t),JTt.forEach(t),uLr=i(Z$e),$Fe=n(Z$e,"SPAN",{});var KTt=s($Fe);bLr=r(KTt,"FlaxAutoModelForQuestionAnswering"),KTt.forEach(t),Z$e.forEach(t),VBe=i(c),Nr=n(c,"DIV",{class:!0});var Ci=s(Nr);m(AL.$$.fragment,Ci),FLr=i(Ci),bf=n(Ci,"P",{});var $J=s(bf);vLr=r($J,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),sH=n($J,"A",{href:!0});var ZTt=s(sH);TLr=r(ZTt,"from_pretrained()"),ZTt.forEach(t),MLr=r($J," class method or the "),lH=n($J,"A",{href:!0});var e7t=s(lH);ELr=r(e7t,"from_config()"),e7t.forEach(t),CLr=r($J,` class
method.`),$J.forEach(t),wLr=i(Ci),yL=n(Ci,"P",{});var eIe=s(yL);ALr=r(eIe,"This class cannot be instantiated directly using "),IFe=n(eIe,"CODE",{});var o7t=s(IFe);yLr=r(o7t,"__init__()"),o7t.forEach(t),LLr=r(eIe," (throws an error)."),eIe.forEach(t),xLr=i(Ci),Rt=n(Ci,"DIV",{class:!0});var wi=s(Rt);m(LL.$$.fragment,wi),kLr=i(wi),qFe=n(wi,"P",{});var r7t=s(qFe);SLr=r(r7t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),r7t.forEach(t),RLr=i(wi),Ff=n(wi,"P",{});var IJ=s(Ff);BLr=r(IJ,`Note:
Loading a model from its configuration file does `),NFe=n(IJ,"STRONG",{});var t7t=s(NFe);PLr=r(t7t,"not"),t7t.forEach(t),$Lr=r(IJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),iH=n(IJ,"A",{href:!0});var a7t=s(iH);ILr=r(a7t,"from_pretrained()"),a7t.forEach(t),qLr=r(IJ," to load the model weights."),IJ.forEach(t),NLr=i(wi),jFe=n(wi,"P",{});var n7t=s(jFe);jLr=r(n7t,"Examples:"),n7t.forEach(t),DLr=i(wi),m(xL.$$.fragment,wi),wi.forEach(t),GLr=i(Ci),Bo=n(Ci,"DIV",{class:!0});var Pa=s(Bo);m(kL.$$.fragment,Pa),OLr=i(Pa),DFe=n(Pa,"P",{});var s7t=s(DFe);VLr=r(s7t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),s7t.forEach(t),XLr=i(Pa),$n=n(Pa,"P",{});var gC=s($n);zLr=r(gC,"The model class to instantiate is selected based on the "),GFe=n(gC,"CODE",{});var l7t=s(GFe);QLr=r(l7t,"model_type"),l7t.forEach(t),WLr=r(gC,` property of the config object (either
passed as an argument or loaded from `),OFe=n(gC,"CODE",{});var i7t=s(OFe);HLr=r(i7t,"pretrained_model_name_or_path"),i7t.forEach(t),ULr=r(gC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VFe=n(gC,"CODE",{});var d7t=s(VFe);JLr=r(d7t,"pretrained_model_name_or_path"),d7t.forEach(t),YLr=r(gC,":"),gC.forEach(t),KLr=i(Pa),ve=n(Pa,"UL",{});var Le=s(ve);jM=n(Le,"LI",{});var ESe=s(jM);XFe=n(ESe,"STRONG",{});var c7t=s(XFe);ZLr=r(c7t,"albert"),c7t.forEach(t),e8r=r(ESe," \u2014 "),dH=n(ESe,"A",{href:!0});var f7t=s(dH);o8r=r(f7t,"FlaxAlbertForQuestionAnswering"),f7t.forEach(t),r8r=r(ESe," (ALBERT model)"),ESe.forEach(t),t8r=i(Le),DM=n(Le,"LI",{});var CSe=s(DM);zFe=n(CSe,"STRONG",{});var m7t=s(zFe);a8r=r(m7t,"bart"),m7t.forEach(t),n8r=r(CSe," \u2014 "),cH=n(CSe,"A",{href:!0});var g7t=s(cH);s8r=r(g7t,"FlaxBartForQuestionAnswering"),g7t.forEach(t),l8r=r(CSe," (BART model)"),CSe.forEach(t),i8r=i(Le),GM=n(Le,"LI",{});var wSe=s(GM);QFe=n(wSe,"STRONG",{});var h7t=s(QFe);d8r=r(h7t,"bert"),h7t.forEach(t),c8r=r(wSe," \u2014 "),fH=n(wSe,"A",{href:!0});var p7t=s(fH);f8r=r(p7t,"FlaxBertForQuestionAnswering"),p7t.forEach(t),m8r=r(wSe," (BERT model)"),wSe.forEach(t),g8r=i(Le),OM=n(Le,"LI",{});var ASe=s(OM);WFe=n(ASe,"STRONG",{});var _7t=s(WFe);h8r=r(_7t,"big_bird"),_7t.forEach(t),p8r=r(ASe," \u2014 "),mH=n(ASe,"A",{href:!0});var u7t=s(mH);_8r=r(u7t,"FlaxBigBirdForQuestionAnswering"),u7t.forEach(t),u8r=r(ASe," (BigBird model)"),ASe.forEach(t),b8r=i(Le),VM=n(Le,"LI",{});var ySe=s(VM);HFe=n(ySe,"STRONG",{});var b7t=s(HFe);F8r=r(b7t,"distilbert"),b7t.forEach(t),v8r=r(ySe," \u2014 "),gH=n(ySe,"A",{href:!0});var F7t=s(gH);T8r=r(F7t,"FlaxDistilBertForQuestionAnswering"),F7t.forEach(t),M8r=r(ySe," (DistilBERT model)"),ySe.forEach(t),E8r=i(Le),XM=n(Le,"LI",{});var LSe=s(XM);UFe=n(LSe,"STRONG",{});var v7t=s(UFe);C8r=r(v7t,"electra"),v7t.forEach(t),w8r=r(LSe," \u2014 "),hH=n(LSe,"A",{href:!0});var T7t=s(hH);A8r=r(T7t,"FlaxElectraForQuestionAnswering"),T7t.forEach(t),y8r=r(LSe," (ELECTRA model)"),LSe.forEach(t),L8r=i(Le),zM=n(Le,"LI",{});var xSe=s(zM);JFe=n(xSe,"STRONG",{});var M7t=s(JFe);x8r=r(M7t,"mbart"),M7t.forEach(t),k8r=r(xSe," \u2014 "),pH=n(xSe,"A",{href:!0});var E7t=s(pH);S8r=r(E7t,"FlaxMBartForQuestionAnswering"),E7t.forEach(t),R8r=r(xSe," (mBART model)"),xSe.forEach(t),B8r=i(Le),QM=n(Le,"LI",{});var kSe=s(QM);YFe=n(kSe,"STRONG",{});var C7t=s(YFe);P8r=r(C7t,"roberta"),C7t.forEach(t),$8r=r(kSe," \u2014 "),_H=n(kSe,"A",{href:!0});var w7t=s(_H);I8r=r(w7t,"FlaxRobertaForQuestionAnswering"),w7t.forEach(t),q8r=r(kSe," (RoBERTa model)"),kSe.forEach(t),N8r=i(Le),WM=n(Le,"LI",{});var SSe=s(WM);KFe=n(SSe,"STRONG",{});var A7t=s(KFe);j8r=r(A7t,"roformer"),A7t.forEach(t),D8r=r(SSe," \u2014 "),uH=n(SSe,"A",{href:!0});var y7t=s(uH);G8r=r(y7t,"FlaxRoFormerForQuestionAnswering"),y7t.forEach(t),O8r=r(SSe," (RoFormer model)"),SSe.forEach(t),V8r=i(Le),HM=n(Le,"LI",{});var RSe=s(HM);ZFe=n(RSe,"STRONG",{});var L7t=s(ZFe);X8r=r(L7t,"xlm-roberta"),L7t.forEach(t),z8r=r(RSe," \u2014 "),bH=n(RSe,"A",{href:!0});var x7t=s(bH);Q8r=r(x7t,"FlaxXLMRobertaForQuestionAnswering"),x7t.forEach(t),W8r=r(RSe," (XLM-RoBERTa model)"),RSe.forEach(t),Le.forEach(t),H8r=i(Pa),eve=n(Pa,"P",{});var k7t=s(eve);U8r=r(k7t,"Examples:"),k7t.forEach(t),J8r=i(Pa),m(SL.$$.fragment,Pa),Pa.forEach(t),Ci.forEach(t),XBe=i(c),vf=n(c,"H2",{class:!0});var oIe=s(vf);UM=n(oIe,"A",{id:!0,class:!0,href:!0});var S7t=s(UM);ove=n(S7t,"SPAN",{});var R7t=s(ove);m(RL.$$.fragment,R7t),R7t.forEach(t),S7t.forEach(t),Y8r=i(oIe),rve=n(oIe,"SPAN",{});var B7t=s(rve);K8r=r(B7t,"FlaxAutoModelForTokenClassification"),B7t.forEach(t),oIe.forEach(t),zBe=i(c),jr=n(c,"DIV",{class:!0});var Ai=s(jr);m(BL.$$.fragment,Ai),Z8r=i(Ai),Tf=n(Ai,"P",{});var qJ=s(Tf);e9r=r(qJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),FH=n(qJ,"A",{href:!0});var P7t=s(FH);o9r=r(P7t,"from_pretrained()"),P7t.forEach(t),r9r=r(qJ," class method or the "),vH=n(qJ,"A",{href:!0});var $7t=s(vH);t9r=r($7t,"from_config()"),$7t.forEach(t),a9r=r(qJ,` class
method.`),qJ.forEach(t),n9r=i(Ai),PL=n(Ai,"P",{});var rIe=s(PL);s9r=r(rIe,"This class cannot be instantiated directly using "),tve=n(rIe,"CODE",{});var I7t=s(tve);l9r=r(I7t,"__init__()"),I7t.forEach(t),i9r=r(rIe," (throws an error)."),rIe.forEach(t),d9r=i(Ai),Bt=n(Ai,"DIV",{class:!0});var yi=s(Bt);m($L.$$.fragment,yi),c9r=i(yi),ave=n(yi,"P",{});var q7t=s(ave);f9r=r(q7t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),q7t.forEach(t),m9r=i(yi),Mf=n(yi,"P",{});var NJ=s(Mf);g9r=r(NJ,`Note:
Loading a model from its configuration file does `),nve=n(NJ,"STRONG",{});var N7t=s(nve);h9r=r(N7t,"not"),N7t.forEach(t),p9r=r(NJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),TH=n(NJ,"A",{href:!0});var j7t=s(TH);_9r=r(j7t,"from_pretrained()"),j7t.forEach(t),u9r=r(NJ," to load the model weights."),NJ.forEach(t),b9r=i(yi),sve=n(yi,"P",{});var D7t=s(sve);F9r=r(D7t,"Examples:"),D7t.forEach(t),v9r=i(yi),m(IL.$$.fragment,yi),yi.forEach(t),T9r=i(Ai),Po=n(Ai,"DIV",{class:!0});var $a=s(Po);m(qL.$$.fragment,$a),M9r=i($a),lve=n($a,"P",{});var G7t=s(lve);E9r=r(G7t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),G7t.forEach(t),C9r=i($a),In=n($a,"P",{});var hC=s(In);w9r=r(hC,"The model class to instantiate is selected based on the "),ive=n(hC,"CODE",{});var O7t=s(ive);A9r=r(O7t,"model_type"),O7t.forEach(t),y9r=r(hC,` property of the config object (either
passed as an argument or loaded from `),dve=n(hC,"CODE",{});var V7t=s(dve);L9r=r(V7t,"pretrained_model_name_or_path"),V7t.forEach(t),x9r=r(hC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cve=n(hC,"CODE",{});var X7t=s(cve);k9r=r(X7t,"pretrained_model_name_or_path"),X7t.forEach(t),S9r=r(hC,":"),hC.forEach(t),R9r=i($a),Be=n($a,"UL",{});var Oo=s(Be);JM=n(Oo,"LI",{});var BSe=s(JM);fve=n(BSe,"STRONG",{});var z7t=s(fve);B9r=r(z7t,"albert"),z7t.forEach(t),P9r=r(BSe," \u2014 "),MH=n(BSe,"A",{href:!0});var Q7t=s(MH);$9r=r(Q7t,"FlaxAlbertForTokenClassification"),Q7t.forEach(t),I9r=r(BSe," (ALBERT model)"),BSe.forEach(t),q9r=i(Oo),YM=n(Oo,"LI",{});var PSe=s(YM);mve=n(PSe,"STRONG",{});var W7t=s(mve);N9r=r(W7t,"bert"),W7t.forEach(t),j9r=r(PSe," \u2014 "),EH=n(PSe,"A",{href:!0});var H7t=s(EH);D9r=r(H7t,"FlaxBertForTokenClassification"),H7t.forEach(t),G9r=r(PSe," (BERT model)"),PSe.forEach(t),O9r=i(Oo),KM=n(Oo,"LI",{});var $Se=s(KM);gve=n($Se,"STRONG",{});var U7t=s(gve);V9r=r(U7t,"big_bird"),U7t.forEach(t),X9r=r($Se," \u2014 "),CH=n($Se,"A",{href:!0});var J7t=s(CH);z9r=r(J7t,"FlaxBigBirdForTokenClassification"),J7t.forEach(t),Q9r=r($Se," (BigBird model)"),$Se.forEach(t),W9r=i(Oo),ZM=n(Oo,"LI",{});var ISe=s(ZM);hve=n(ISe,"STRONG",{});var Y7t=s(hve);H9r=r(Y7t,"distilbert"),Y7t.forEach(t),U9r=r(ISe," \u2014 "),wH=n(ISe,"A",{href:!0});var K7t=s(wH);J9r=r(K7t,"FlaxDistilBertForTokenClassification"),K7t.forEach(t),Y9r=r(ISe," (DistilBERT model)"),ISe.forEach(t),K9r=i(Oo),eE=n(Oo,"LI",{});var qSe=s(eE);pve=n(qSe,"STRONG",{});var Z7t=s(pve);Z9r=r(Z7t,"electra"),Z7t.forEach(t),exr=r(qSe," \u2014 "),AH=n(qSe,"A",{href:!0});var eMt=s(AH);oxr=r(eMt,"FlaxElectraForTokenClassification"),eMt.forEach(t),rxr=r(qSe," (ELECTRA model)"),qSe.forEach(t),txr=i(Oo),oE=n(Oo,"LI",{});var NSe=s(oE);_ve=n(NSe,"STRONG",{});var oMt=s(_ve);axr=r(oMt,"roberta"),oMt.forEach(t),nxr=r(NSe," \u2014 "),yH=n(NSe,"A",{href:!0});var rMt=s(yH);sxr=r(rMt,"FlaxRobertaForTokenClassification"),rMt.forEach(t),lxr=r(NSe," (RoBERTa model)"),NSe.forEach(t),ixr=i(Oo),rE=n(Oo,"LI",{});var jSe=s(rE);uve=n(jSe,"STRONG",{});var tMt=s(uve);dxr=r(tMt,"roformer"),tMt.forEach(t),cxr=r(jSe," \u2014 "),LH=n(jSe,"A",{href:!0});var aMt=s(LH);fxr=r(aMt,"FlaxRoFormerForTokenClassification"),aMt.forEach(t),mxr=r(jSe," (RoFormer model)"),jSe.forEach(t),gxr=i(Oo),tE=n(Oo,"LI",{});var DSe=s(tE);bve=n(DSe,"STRONG",{});var nMt=s(bve);hxr=r(nMt,"xlm-roberta"),nMt.forEach(t),pxr=r(DSe," \u2014 "),xH=n(DSe,"A",{href:!0});var sMt=s(xH);_xr=r(sMt,"FlaxXLMRobertaForTokenClassification"),sMt.forEach(t),uxr=r(DSe," (XLM-RoBERTa model)"),DSe.forEach(t),Oo.forEach(t),bxr=i($a),Fve=n($a,"P",{});var lMt=s(Fve);Fxr=r(lMt,"Examples:"),lMt.forEach(t),vxr=i($a),m(NL.$$.fragment,$a),$a.forEach(t),Ai.forEach(t),QBe=i(c),Ef=n(c,"H2",{class:!0});var tIe=s(Ef);aE=n(tIe,"A",{id:!0,class:!0,href:!0});var iMt=s(aE);vve=n(iMt,"SPAN",{});var dMt=s(vve);m(jL.$$.fragment,dMt),dMt.forEach(t),iMt.forEach(t),Txr=i(tIe),Tve=n(tIe,"SPAN",{});var cMt=s(Tve);Mxr=r(cMt,"FlaxAutoModelForMultipleChoice"),cMt.forEach(t),tIe.forEach(t),WBe=i(c),Dr=n(c,"DIV",{class:!0});var Li=s(Dr);m(DL.$$.fragment,Li),Exr=i(Li),Cf=n(Li,"P",{});var jJ=s(Cf);Cxr=r(jJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),kH=n(jJ,"A",{href:!0});var fMt=s(kH);wxr=r(fMt,"from_pretrained()"),fMt.forEach(t),Axr=r(jJ," class method or the "),SH=n(jJ,"A",{href:!0});var mMt=s(SH);yxr=r(mMt,"from_config()"),mMt.forEach(t),Lxr=r(jJ,` class
method.`),jJ.forEach(t),xxr=i(Li),GL=n(Li,"P",{});var aIe=s(GL);kxr=r(aIe,"This class cannot be instantiated directly using "),Mve=n(aIe,"CODE",{});var gMt=s(Mve);Sxr=r(gMt,"__init__()"),gMt.forEach(t),Rxr=r(aIe," (throws an error)."),aIe.forEach(t),Bxr=i(Li),Pt=n(Li,"DIV",{class:!0});var xi=s(Pt);m(OL.$$.fragment,xi),Pxr=i(xi),Eve=n(xi,"P",{});var hMt=s(Eve);$xr=r(hMt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),hMt.forEach(t),Ixr=i(xi),wf=n(xi,"P",{});var DJ=s(wf);qxr=r(DJ,`Note:
Loading a model from its configuration file does `),Cve=n(DJ,"STRONG",{});var pMt=s(Cve);Nxr=r(pMt,"not"),pMt.forEach(t),jxr=r(DJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),RH=n(DJ,"A",{href:!0});var _Mt=s(RH);Dxr=r(_Mt,"from_pretrained()"),_Mt.forEach(t),Gxr=r(DJ," to load the model weights."),DJ.forEach(t),Oxr=i(xi),wve=n(xi,"P",{});var uMt=s(wve);Vxr=r(uMt,"Examples:"),uMt.forEach(t),Xxr=i(xi),m(VL.$$.fragment,xi),xi.forEach(t),zxr=i(Li),$o=n(Li,"DIV",{class:!0});var Ia=s($o);m(XL.$$.fragment,Ia),Qxr=i(Ia),Ave=n(Ia,"P",{});var bMt=s(Ave);Wxr=r(bMt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),bMt.forEach(t),Hxr=i(Ia),qn=n(Ia,"P",{});var pC=s(qn);Uxr=r(pC,"The model class to instantiate is selected based on the "),yve=n(pC,"CODE",{});var FMt=s(yve);Jxr=r(FMt,"model_type"),FMt.forEach(t),Yxr=r(pC,` property of the config object (either
passed as an argument or loaded from `),Lve=n(pC,"CODE",{});var vMt=s(Lve);Kxr=r(vMt,"pretrained_model_name_or_path"),vMt.forEach(t),Zxr=r(pC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xve=n(pC,"CODE",{});var TMt=s(xve);ekr=r(TMt,"pretrained_model_name_or_path"),TMt.forEach(t),okr=r(pC,":"),pC.forEach(t),rkr=i(Ia),Pe=n(Ia,"UL",{});var Vo=s(Pe);nE=n(Vo,"LI",{});var GSe=s(nE);kve=n(GSe,"STRONG",{});var MMt=s(kve);tkr=r(MMt,"albert"),MMt.forEach(t),akr=r(GSe," \u2014 "),BH=n(GSe,"A",{href:!0});var EMt=s(BH);nkr=r(EMt,"FlaxAlbertForMultipleChoice"),EMt.forEach(t),skr=r(GSe," (ALBERT model)"),GSe.forEach(t),lkr=i(Vo),sE=n(Vo,"LI",{});var OSe=s(sE);Sve=n(OSe,"STRONG",{});var CMt=s(Sve);ikr=r(CMt,"bert"),CMt.forEach(t),dkr=r(OSe," \u2014 "),PH=n(OSe,"A",{href:!0});var wMt=s(PH);ckr=r(wMt,"FlaxBertForMultipleChoice"),wMt.forEach(t),fkr=r(OSe," (BERT model)"),OSe.forEach(t),mkr=i(Vo),lE=n(Vo,"LI",{});var VSe=s(lE);Rve=n(VSe,"STRONG",{});var AMt=s(Rve);gkr=r(AMt,"big_bird"),AMt.forEach(t),hkr=r(VSe," \u2014 "),$H=n(VSe,"A",{href:!0});var yMt=s($H);pkr=r(yMt,"FlaxBigBirdForMultipleChoice"),yMt.forEach(t),_kr=r(VSe," (BigBird model)"),VSe.forEach(t),ukr=i(Vo),iE=n(Vo,"LI",{});var XSe=s(iE);Bve=n(XSe,"STRONG",{});var LMt=s(Bve);bkr=r(LMt,"distilbert"),LMt.forEach(t),Fkr=r(XSe," \u2014 "),IH=n(XSe,"A",{href:!0});var xMt=s(IH);vkr=r(xMt,"FlaxDistilBertForMultipleChoice"),xMt.forEach(t),Tkr=r(XSe," (DistilBERT model)"),XSe.forEach(t),Mkr=i(Vo),dE=n(Vo,"LI",{});var zSe=s(dE);Pve=n(zSe,"STRONG",{});var kMt=s(Pve);Ekr=r(kMt,"electra"),kMt.forEach(t),Ckr=r(zSe," \u2014 "),qH=n(zSe,"A",{href:!0});var SMt=s(qH);wkr=r(SMt,"FlaxElectraForMultipleChoice"),SMt.forEach(t),Akr=r(zSe," (ELECTRA model)"),zSe.forEach(t),ykr=i(Vo),cE=n(Vo,"LI",{});var QSe=s(cE);$ve=n(QSe,"STRONG",{});var RMt=s($ve);Lkr=r(RMt,"roberta"),RMt.forEach(t),xkr=r(QSe," \u2014 "),NH=n(QSe,"A",{href:!0});var BMt=s(NH);kkr=r(BMt,"FlaxRobertaForMultipleChoice"),BMt.forEach(t),Skr=r(QSe," (RoBERTa model)"),QSe.forEach(t),Rkr=i(Vo),fE=n(Vo,"LI",{});var WSe=s(fE);Ive=n(WSe,"STRONG",{});var PMt=s(Ive);Bkr=r(PMt,"roformer"),PMt.forEach(t),Pkr=r(WSe," \u2014 "),jH=n(WSe,"A",{href:!0});var $Mt=s(jH);$kr=r($Mt,"FlaxRoFormerForMultipleChoice"),$Mt.forEach(t),Ikr=r(WSe," (RoFormer model)"),WSe.forEach(t),qkr=i(Vo),mE=n(Vo,"LI",{});var HSe=s(mE);qve=n(HSe,"STRONG",{});var IMt=s(qve);Nkr=r(IMt,"xlm-roberta"),IMt.forEach(t),jkr=r(HSe," \u2014 "),DH=n(HSe,"A",{href:!0});var qMt=s(DH);Dkr=r(qMt,"FlaxXLMRobertaForMultipleChoice"),qMt.forEach(t),Gkr=r(HSe," (XLM-RoBERTa model)"),HSe.forEach(t),Vo.forEach(t),Okr=i(Ia),Nve=n(Ia,"P",{});var NMt=s(Nve);Vkr=r(NMt,"Examples:"),NMt.forEach(t),Xkr=i(Ia),m(zL.$$.fragment,Ia),Ia.forEach(t),Li.forEach(t),HBe=i(c),Af=n(c,"H2",{class:!0});var nIe=s(Af);gE=n(nIe,"A",{id:!0,class:!0,href:!0});var jMt=s(gE);jve=n(jMt,"SPAN",{});var DMt=s(jve);m(QL.$$.fragment,DMt),DMt.forEach(t),jMt.forEach(t),zkr=i(nIe),Dve=n(nIe,"SPAN",{});var GMt=s(Dve);Qkr=r(GMt,"FlaxAutoModelForNextSentencePrediction"),GMt.forEach(t),nIe.forEach(t),UBe=i(c),Gr=n(c,"DIV",{class:!0});var ki=s(Gr);m(WL.$$.fragment,ki),Wkr=i(ki),yf=n(ki,"P",{});var GJ=s(yf);Hkr=r(GJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),GH=n(GJ,"A",{href:!0});var OMt=s(GH);Ukr=r(OMt,"from_pretrained()"),OMt.forEach(t),Jkr=r(GJ," class method or the "),OH=n(GJ,"A",{href:!0});var VMt=s(OH);Ykr=r(VMt,"from_config()"),VMt.forEach(t),Kkr=r(GJ,` class
method.`),GJ.forEach(t),Zkr=i(ki),HL=n(ki,"P",{});var sIe=s(HL);eSr=r(sIe,"This class cannot be instantiated directly using "),Gve=n(sIe,"CODE",{});var XMt=s(Gve);oSr=r(XMt,"__init__()"),XMt.forEach(t),rSr=r(sIe," (throws an error)."),sIe.forEach(t),tSr=i(ki),$t=n(ki,"DIV",{class:!0});var Si=s($t);m(UL.$$.fragment,Si),aSr=i(Si),Ove=n(Si,"P",{});var zMt=s(Ove);nSr=r(zMt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),zMt.forEach(t),sSr=i(Si),Lf=n(Si,"P",{});var OJ=s(Lf);lSr=r(OJ,`Note:
Loading a model from its configuration file does `),Vve=n(OJ,"STRONG",{});var QMt=s(Vve);iSr=r(QMt,"not"),QMt.forEach(t),dSr=r(OJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),VH=n(OJ,"A",{href:!0});var WMt=s(VH);cSr=r(WMt,"from_pretrained()"),WMt.forEach(t),fSr=r(OJ," to load the model weights."),OJ.forEach(t),mSr=i(Si),Xve=n(Si,"P",{});var HMt=s(Xve);gSr=r(HMt,"Examples:"),HMt.forEach(t),hSr=i(Si),m(JL.$$.fragment,Si),Si.forEach(t),pSr=i(ki),Io=n(ki,"DIV",{class:!0});var qa=s(Io);m(YL.$$.fragment,qa),_Sr=i(qa),zve=n(qa,"P",{});var UMt=s(zve);uSr=r(UMt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),UMt.forEach(t),bSr=i(qa),Nn=n(qa,"P",{});var _C=s(Nn);FSr=r(_C,"The model class to instantiate is selected based on the "),Qve=n(_C,"CODE",{});var JMt=s(Qve);vSr=r(JMt,"model_type"),JMt.forEach(t),TSr=r(_C,` property of the config object (either
passed as an argument or loaded from `),Wve=n(_C,"CODE",{});var YMt=s(Wve);MSr=r(YMt,"pretrained_model_name_or_path"),YMt.forEach(t),ESr=r(_C,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hve=n(_C,"CODE",{});var KMt=s(Hve);CSr=r(KMt,"pretrained_model_name_or_path"),KMt.forEach(t),wSr=r(_C,":"),_C.forEach(t),ASr=i(qa),Uve=n(qa,"UL",{});var ZMt=s(Uve);hE=n(ZMt,"LI",{});var USe=s(hE);Jve=n(USe,"STRONG",{});var eEt=s(Jve);ySr=r(eEt,"bert"),eEt.forEach(t),LSr=r(USe," \u2014 "),XH=n(USe,"A",{href:!0});var oEt=s(XH);xSr=r(oEt,"FlaxBertForNextSentencePrediction"),oEt.forEach(t),kSr=r(USe," (BERT model)"),USe.forEach(t),ZMt.forEach(t),SSr=i(qa),Yve=n(qa,"P",{});var rEt=s(Yve);RSr=r(rEt,"Examples:"),rEt.forEach(t),BSr=i(qa),m(KL.$$.fragment,qa),qa.forEach(t),ki.forEach(t),JBe=i(c),xf=n(c,"H2",{class:!0});var lIe=s(xf);pE=n(lIe,"A",{id:!0,class:!0,href:!0});var tEt=s(pE);Kve=n(tEt,"SPAN",{});var aEt=s(Kve);m(ZL.$$.fragment,aEt),aEt.forEach(t),tEt.forEach(t),PSr=i(lIe),Zve=n(lIe,"SPAN",{});var nEt=s(Zve);$Sr=r(nEt,"FlaxAutoModelForImageClassification"),nEt.forEach(t),lIe.forEach(t),YBe=i(c),Or=n(c,"DIV",{class:!0});var Ri=s(Or);m(e8.$$.fragment,Ri),ISr=i(Ri),kf=n(Ri,"P",{});var VJ=s(kf);qSr=r(VJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),zH=n(VJ,"A",{href:!0});var sEt=s(zH);NSr=r(sEt,"from_pretrained()"),sEt.forEach(t),jSr=r(VJ," class method or the "),QH=n(VJ,"A",{href:!0});var lEt=s(QH);DSr=r(lEt,"from_config()"),lEt.forEach(t),GSr=r(VJ,` class
method.`),VJ.forEach(t),OSr=i(Ri),o8=n(Ri,"P",{});var iIe=s(o8);VSr=r(iIe,"This class cannot be instantiated directly using "),e6e=n(iIe,"CODE",{});var iEt=s(e6e);XSr=r(iEt,"__init__()"),iEt.forEach(t),zSr=r(iIe," (throws an error)."),iIe.forEach(t),QSr=i(Ri),It=n(Ri,"DIV",{class:!0});var Bi=s(It);m(r8.$$.fragment,Bi),WSr=i(Bi),o6e=n(Bi,"P",{});var dEt=s(o6e);HSr=r(dEt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),dEt.forEach(t),USr=i(Bi),Sf=n(Bi,"P",{});var XJ=s(Sf);JSr=r(XJ,`Note:
Loading a model from its configuration file does `),r6e=n(XJ,"STRONG",{});var cEt=s(r6e);YSr=r(cEt,"not"),cEt.forEach(t),KSr=r(XJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),WH=n(XJ,"A",{href:!0});var fEt=s(WH);ZSr=r(fEt,"from_pretrained()"),fEt.forEach(t),eRr=r(XJ," to load the model weights."),XJ.forEach(t),oRr=i(Bi),t6e=n(Bi,"P",{});var mEt=s(t6e);rRr=r(mEt,"Examples:"),mEt.forEach(t),tRr=i(Bi),m(t8.$$.fragment,Bi),Bi.forEach(t),aRr=i(Ri),qo=n(Ri,"DIV",{class:!0});var Na=s(qo);m(a8.$$.fragment,Na),nRr=i(Na),a6e=n(Na,"P",{});var gEt=s(a6e);sRr=r(gEt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),gEt.forEach(t),lRr=i(Na),jn=n(Na,"P",{});var uC=s(jn);iRr=r(uC,"The model class to instantiate is selected based on the "),n6e=n(uC,"CODE",{});var hEt=s(n6e);dRr=r(hEt,"model_type"),hEt.forEach(t),cRr=r(uC,` property of the config object (either
passed as an argument or loaded from `),s6e=n(uC,"CODE",{});var pEt=s(s6e);fRr=r(pEt,"pretrained_model_name_or_path"),pEt.forEach(t),mRr=r(uC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l6e=n(uC,"CODE",{});var _Et=s(l6e);gRr=r(_Et,"pretrained_model_name_or_path"),_Et.forEach(t),hRr=r(uC,":"),uC.forEach(t),pRr=i(Na),n8=n(Na,"UL",{});var dIe=s(n8);_E=n(dIe,"LI",{});var JSe=s(_E);i6e=n(JSe,"STRONG",{});var uEt=s(i6e);_Rr=r(uEt,"beit"),uEt.forEach(t),uRr=r(JSe," \u2014 "),HH=n(JSe,"A",{href:!0});var bEt=s(HH);bRr=r(bEt,"FlaxBeitForImageClassification"),bEt.forEach(t),FRr=r(JSe," (BEiT model)"),JSe.forEach(t),vRr=i(dIe),uE=n(dIe,"LI",{});var YSe=s(uE);d6e=n(YSe,"STRONG",{});var FEt=s(d6e);TRr=r(FEt,"vit"),FEt.forEach(t),MRr=r(YSe," \u2014 "),UH=n(YSe,"A",{href:!0});var vEt=s(UH);ERr=r(vEt,"FlaxViTForImageClassification"),vEt.forEach(t),CRr=r(YSe," (ViT model)"),YSe.forEach(t),dIe.forEach(t),wRr=i(Na),c6e=n(Na,"P",{});var TEt=s(c6e);ARr=r(TEt,"Examples:"),TEt.forEach(t),yRr=i(Na),m(s8.$$.fragment,Na),Na.forEach(t),Ri.forEach(t),KBe=i(c),Rf=n(c,"H2",{class:!0});var cIe=s(Rf);bE=n(cIe,"A",{id:!0,class:!0,href:!0});var MEt=s(bE);f6e=n(MEt,"SPAN",{});var EEt=s(f6e);m(l8.$$.fragment,EEt),EEt.forEach(t),MEt.forEach(t),LRr=i(cIe),m6e=n(cIe,"SPAN",{});var CEt=s(m6e);xRr=r(CEt,"FlaxAutoModelForVision2Seq"),CEt.forEach(t),cIe.forEach(t),ZBe=i(c),Vr=n(c,"DIV",{class:!0});var Pi=s(Vr);m(i8.$$.fragment,Pi),kRr=i(Pi),Bf=n(Pi,"P",{});var zJ=s(Bf);SRr=r(zJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),JH=n(zJ,"A",{href:!0});var wEt=s(JH);RRr=r(wEt,"from_pretrained()"),wEt.forEach(t),BRr=r(zJ," class method or the "),YH=n(zJ,"A",{href:!0});var AEt=s(YH);PRr=r(AEt,"from_config()"),AEt.forEach(t),$Rr=r(zJ,` class
method.`),zJ.forEach(t),IRr=i(Pi),d8=n(Pi,"P",{});var fIe=s(d8);qRr=r(fIe,"This class cannot be instantiated directly using "),g6e=n(fIe,"CODE",{});var yEt=s(g6e);NRr=r(yEt,"__init__()"),yEt.forEach(t),jRr=r(fIe," (throws an error)."),fIe.forEach(t),DRr=i(Pi),qt=n(Pi,"DIV",{class:!0});var $i=s(qt);m(c8.$$.fragment,$i),GRr=i($i),h6e=n($i,"P",{});var LEt=s(h6e);ORr=r(LEt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),LEt.forEach(t),VRr=i($i),Pf=n($i,"P",{});var QJ=s(Pf);XRr=r(QJ,`Note:
Loading a model from its configuration file does `),p6e=n(QJ,"STRONG",{});var xEt=s(p6e);zRr=r(xEt,"not"),xEt.forEach(t),QRr=r(QJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),KH=n(QJ,"A",{href:!0});var kEt=s(KH);WRr=r(kEt,"from_pretrained()"),kEt.forEach(t),HRr=r(QJ," to load the model weights."),QJ.forEach(t),URr=i($i),_6e=n($i,"P",{});var SEt=s(_6e);JRr=r(SEt,"Examples:"),SEt.forEach(t),YRr=i($i),m(f8.$$.fragment,$i),$i.forEach(t),KRr=i(Pi),No=n(Pi,"DIV",{class:!0});var ja=s(No);m(m8.$$.fragment,ja),ZRr=i(ja),u6e=n(ja,"P",{});var REt=s(u6e);eBr=r(REt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),REt.forEach(t),oBr=i(ja),Dn=n(ja,"P",{});var bC=s(Dn);rBr=r(bC,"The model class to instantiate is selected based on the "),b6e=n(bC,"CODE",{});var BEt=s(b6e);tBr=r(BEt,"model_type"),BEt.forEach(t),aBr=r(bC,` property of the config object (either
passed as an argument or loaded from `),F6e=n(bC,"CODE",{});var PEt=s(F6e);nBr=r(PEt,"pretrained_model_name_or_path"),PEt.forEach(t),sBr=r(bC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v6e=n(bC,"CODE",{});var $Et=s(v6e);lBr=r($Et,"pretrained_model_name_or_path"),$Et.forEach(t),iBr=r(bC,":"),bC.forEach(t),dBr=i(ja),T6e=n(ja,"UL",{});var IEt=s(T6e);FE=n(IEt,"LI",{});var KSe=s(FE);M6e=n(KSe,"STRONG",{});var qEt=s(M6e);cBr=r(qEt,"vision-encoder-decoder"),qEt.forEach(t),fBr=r(KSe," \u2014 "),ZH=n(KSe,"A",{href:!0});var NEt=s(ZH);mBr=r(NEt,"FlaxVisionEncoderDecoderModel"),NEt.forEach(t),gBr=r(KSe," (Vision Encoder decoder model)"),KSe.forEach(t),IEt.forEach(t),hBr=i(ja),E6e=n(ja,"P",{});var jEt=s(E6e);pBr=r(jEt,"Examples:"),jEt.forEach(t),_Br=i(ja),m(g8.$$.fragment,ja),ja.forEach(t),Pi.forEach(t),this.h()},h(){d(Z,"name","hf:doc:metadata"),d(Z,"content",JSON.stringify(UEt)),d(Ce,"id","auto-classes"),d(Ce,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ce,"href","#auto-classes"),d(de,"class","relative group"),d(Gn,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.AutoConfig"),d(Vn,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.AutoModel"),d(Xn,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.AutoTokenizer"),d(Oi,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertModel"),d(Gf,"id","extending-the-auto-classes"),d(Gf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Gf,"href","#extending-the-auto-classes"),d(Vi,"class","relative group"),d(Vf,"id","transformers.AutoConfig"),d(Vf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Vf,"href","#transformers.AutoConfig"),d(Xi,"class","relative group"),d(u9,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),d(b9,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig"),d(F9,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartConfig"),d(v9,"href","/docs/transformers/pr_16473/en/model_doc/beit#transformers.BeitConfig"),d(T9,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig"),d(M9,"href","/docs/transformers/pr_16473/en/model_doc/bert-generation#transformers.BertGenerationConfig"),d(E9,"href","/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdConfig"),d(C9,"href","/docs/transformers/pr_16473/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),d(w9,"href","/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.BlenderbotConfig"),d(A9,"href","/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),d(y9,"href","/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertConfig"),d(L9,"href","/docs/transformers/pr_16473/en/model_doc/canine#transformers.CanineConfig"),d(x9,"href","/docs/transformers/pr_16473/en/model_doc/clip#transformers.CLIPConfig"),d(k9,"href","/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertConfig"),d(S9,"href","/docs/transformers/pr_16473/en/model_doc/convnext#transformers.ConvNextConfig"),d(R9,"href","/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.CTRLConfig"),d(B9,"href","/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),d(P9,"href","/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextConfig"),d($9,"href","/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaConfig"),d(I9,"href","/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2Config"),d(q9,"href","/docs/transformers/pr_16473/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),d(N9,"href","/docs/transformers/pr_16473/en/model_doc/deit#transformers.DeiTConfig"),d(j9,"href","/docs/transformers/pr_16473/en/model_doc/detr#transformers.DetrConfig"),d(D9,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig"),d(G9,"href","/docs/transformers/pr_16473/en/model_doc/dpr#transformers.DPRConfig"),d(O9,"href","/docs/transformers/pr_16473/en/model_doc/dpt#transformers.DPTConfig"),d(V9,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig"),d(X9,"href","/docs/transformers/pr_16473/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),d(z9,"href","/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertConfig"),d(Q9,"href","/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetConfig"),d(W9,"href","/docs/transformers/pr_16473/en/model_doc/fsmt#transformers.FSMTConfig"),d(H9,"href","/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelConfig"),d(U9,"href","/docs/transformers/pr_16473/en/model_doc/glpn#transformers.GLPNConfig"),d(J9,"href","/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2Config"),d(Y9,"href","/docs/transformers/pr_16473/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),d(K9,"href","/docs/transformers/pr_16473/en/model_doc/gptj#transformers.GPTJConfig"),d(Z9,"href","/docs/transformers/pr_16473/en/model_doc/hubert#transformers.HubertConfig"),d(ex,"href","/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertConfig"),d(ox,"href","/docs/transformers/pr_16473/en/model_doc/imagegpt#transformers.ImageGPTConfig"),d(rx,"href","/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMConfig"),d(tx,"href","/docs/transformers/pr_16473/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),d(ax,"href","/docs/transformers/pr_16473/en/model_doc/led#transformers.LEDConfig"),d(nx,"href","/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerConfig"),d(sx,"href","/docs/transformers/pr_16473/en/model_doc/luke#transformers.LukeConfig"),d(lx,"href","/docs/transformers/pr_16473/en/model_doc/lxmert#transformers.LxmertConfig"),d(ix,"href","/docs/transformers/pr_16473/en/model_doc/m2m_100#transformers.M2M100Config"),d(dx,"href","/docs/transformers/pr_16473/en/model_doc/marian#transformers.MarianConfig"),d(cx,"href","/docs/transformers/pr_16473/en/model_doc/maskformer#transformers.MaskFormerConfig"),d(fx,"href","/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartConfig"),d(mx,"href","/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),d(gx,"href","/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertConfig"),d(hx,"href","/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetConfig"),d(px,"href","/docs/transformers/pr_16473/en/model_doc/mt5#transformers.MT5Config"),d(_x,"href","/docs/transformers/pr_16473/en/model_doc/nystromformer#transformers.NystromformerConfig"),d(ux,"href","/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),d(bx,"href","/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.PegasusConfig"),d(Fx,"href","/docs/transformers/pr_16473/en/model_doc/perceiver#transformers.PerceiverConfig"),d(vx,"href","/docs/transformers/pr_16473/en/model_doc/plbart#transformers.PLBartConfig"),d(Tx,"href","/docs/transformers/pr_16473/en/model_doc/poolformer#transformers.PoolFormerConfig"),d(Mx,"href","/docs/transformers/pr_16473/en/model_doc/prophetnet#transformers.ProphetNetConfig"),d(Ex,"href","/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertConfig"),d(Cx,"href","/docs/transformers/pr_16473/en/model_doc/rag#transformers.RagConfig"),d(wx,"href","/docs/transformers/pr_16473/en/model_doc/realm#transformers.RealmConfig"),d(Ax,"href","/docs/transformers/pr_16473/en/model_doc/reformer#transformers.ReformerConfig"),d(yx,"href","/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertConfig"),d(Lx,"href","/docs/transformers/pr_16473/en/model_doc/resnet#transformers.ResNetConfig"),d(xx,"href","/docs/transformers/pr_16473/en/model_doc/retribert#transformers.RetriBertConfig"),d(kx,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig"),d(Sx,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig"),d(Rx,"href","/docs/transformers/pr_16473/en/model_doc/segformer#transformers.SegformerConfig"),d(Bx,"href","/docs/transformers/pr_16473/en/model_doc/sew#transformers.SEWConfig"),d(Px,"href","/docs/transformers/pr_16473/en/model_doc/sew-d#transformers.SEWDConfig"),d($x,"href","/docs/transformers/pr_16473/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),d(Ix,"href","/docs/transformers/pr_16473/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),d(qx,"href","/docs/transformers/pr_16473/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),d(Nx,"href","/docs/transformers/pr_16473/en/model_doc/splinter#transformers.SplinterConfig"),d(jx,"href","/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),d(Dx,"href","/docs/transformers/pr_16473/en/model_doc/swin#transformers.SwinConfig"),d(Gx,"href","/docs/transformers/pr_16473/en/model_doc/t5#transformers.T5Config"),d(Ox,"href","/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasConfig"),d(Vx,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartConfig"),d(Xx,"href","/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),d(zx,"href","/docs/transformers/pr_16473/en/model_doc/trocr#transformers.TrOCRConfig"),d(Qx,"href","/docs/transformers/pr_16473/en/model_doc/unispeech#transformers.UniSpeechConfig"),d(Wx,"href","/docs/transformers/pr_16473/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),d(Hx,"href","/docs/transformers/pr_16473/en/model_doc/van#transformers.VanConfig"),d(Ux,"href","/docs/transformers/pr_16473/en/model_doc/vilt#transformers.ViltConfig"),d(Jx,"href","/docs/transformers/pr_16473/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),d(Yx,"href","/docs/transformers/pr_16473/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),d(Kx,"href","/docs/transformers/pr_16473/en/model_doc/visual_bert#transformers.VisualBertConfig"),d(Zx,"href","/docs/transformers/pr_16473/en/model_doc/vit#transformers.ViTConfig"),d(ek,"href","/docs/transformers/pr_16473/en/model_doc/vit_mae#transformers.ViTMAEConfig"),d(ok,"href","/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),d(rk,"href","/docs/transformers/pr_16473/en/model_doc/wavlm#transformers.WavLMConfig"),d(tk,"href","/docs/transformers/pr_16473/en/model_doc/xglm#transformers.XGLMConfig"),d(ak,"href","/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMConfig"),d(nk,"href","/docs/transformers/pr_16473/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),d(sk,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),d(lk,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),d(ik,"href","/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetConfig"),d(dk,"href","/docs/transformers/pr_16473/en/model_doc/yoso#transformers.YosoConfig"),d(mo,"class","docstring"),d(Ig,"class","docstring"),d(Qo,"class","docstring"),d(qg,"id","transformers.AutoTokenizer"),d(qg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(qg,"href","#transformers.AutoTokenizer"),d(Qi,"class","relative group"),d(ck,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),d(fk,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertTokenizer"),d(mk,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(gk,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartTokenizer"),d(hk,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartTokenizerFast"),d(pk,"href","/docs/transformers/pr_16473/en/model_doc/barthez#transformers.BarthezTokenizer"),d(_k,"href","/docs/transformers/pr_16473/en/model_doc/barthez#transformers.BarthezTokenizerFast"),d(uk,"href","/docs/transformers/pr_16473/en/model_doc/bartpho#transformers.BartphoTokenizer"),d(bk,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertTokenizer"),d(Fk,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertTokenizerFast"),d(vk,"href","/docs/transformers/pr_16473/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),d(Tk,"href","/docs/transformers/pr_16473/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),d(Mk,"href","/docs/transformers/pr_16473/en/model_doc/bertweet#transformers.BertweetTokenizer"),d(Ek,"href","/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdTokenizer"),d(Ck,"href","/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),d(wk,"href","/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(Ak,"href","/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(yk,"href","/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),d(Lk,"href","/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),d(xk,"href","/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),d(kk,"href","/docs/transformers/pr_16473/en/model_doc/byt5#transformers.ByT5Tokenizer"),d(Sk,"href","/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertTokenizer"),d(Rk,"href","/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertTokenizerFast"),d(Bk,"href","/docs/transformers/pr_16473/en/model_doc/canine#transformers.CanineTokenizer"),d(Pk,"href","/docs/transformers/pr_16473/en/model_doc/clip#transformers.CLIPTokenizer"),d($k,"href","/docs/transformers/pr_16473/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(Ik,"href","/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertTokenizer"),d(qk,"href","/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),d(Nk,"href","/docs/transformers/pr_16473/en/model_doc/cpm#transformers.CpmTokenizer"),d(jk,"href","/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.CTRLTokenizer"),d(Dk,"href","/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaTokenizer"),d(Gk,"href","/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaTokenizerFast"),d(Ok,"href","/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),d(Vk,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertTokenizer"),d(Xk,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),d(zk,"href","/docs/transformers/pr_16473/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),d(Qk,"href","/docs/transformers/pr_16473/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),d(Wk,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraTokenizer"),d(Hk,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraTokenizerFast"),d(Uk,"href","/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertTokenizer"),d(Jk,"href","/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetTokenizer"),d(Yk,"href","/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetTokenizerFast"),d(Kk,"href","/docs/transformers/pr_16473/en/model_doc/fsmt#transformers.FSMTTokenizer"),d(Zk,"href","/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelTokenizer"),d(eS,"href","/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelTokenizerFast"),d(oS,"href","/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(rS,"href","/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(tS,"href","/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(aS,"href","/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(nS,"href","/docs/transformers/pr_16473/en/model_doc/herbert#transformers.HerbertTokenizer"),d(sS,"href","/docs/transformers/pr_16473/en/model_doc/herbert#transformers.HerbertTokenizerFast"),d(lS,"href","/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(iS,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaTokenizer"),d(dS,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(cS,"href","/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),d(fS,"href","/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),d(mS,"href","/docs/transformers/pr_16473/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),d(gS,"href","/docs/transformers/pr_16473/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),d(hS,"href","/docs/transformers/pr_16473/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),d(pS,"href","/docs/transformers/pr_16473/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),d(_S,"href","/docs/transformers/pr_16473/en/model_doc/led#transformers.LEDTokenizer"),d(uS,"href","/docs/transformers/pr_16473/en/model_doc/led#transformers.LEDTokenizerFast"),d(bS,"href","/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerTokenizer"),d(FS,"href","/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerTokenizerFast"),d(vS,"href","/docs/transformers/pr_16473/en/model_doc/luke#transformers.LukeTokenizer"),d(TS,"href","/docs/transformers/pr_16473/en/model_doc/lxmert#transformers.LxmertTokenizer"),d(MS,"href","/docs/transformers/pr_16473/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),d(ES,"href","/docs/transformers/pr_16473/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),d(CS,"href","/docs/transformers/pr_16473/en/model_doc/marian#transformers.MarianTokenizer"),d(wS,"href","/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartTokenizer"),d(AS,"href","/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartTokenizerFast"),d(yS,"href","/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBart50Tokenizer"),d(LS,"href","/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBart50TokenizerFast"),d(xS,"href","/docs/transformers/pr_16473/en/model_doc/mluke#transformers.MLukeTokenizer"),d(kS,"href","/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),d(SS,"href","/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),d(RS,"href","/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetTokenizer"),d(BS,"href","/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),d(PS,"href","/docs/transformers/pr_16473/en/model_doc/t5#transformers.T5Tokenizer"),d($S,"href","/docs/transformers/pr_16473/en/model_doc/t5#transformers.T5TokenizerFast"),d(IS,"href","/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),d(qS,"href","/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),d(NS,"href","/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(jS,"href","/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(DS,"href","/docs/transformers/pr_16473/en/model_doc/perceiver#transformers.PerceiverTokenizer"),d(GS,"href","/docs/transformers/pr_16473/en/model_doc/phobert#transformers.PhobertTokenizer"),d(OS,"href","/docs/transformers/pr_16473/en/model_doc/plbart#transformers.PLBartTokenizer"),d(VS,"href","/docs/transformers/pr_16473/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),d(XS,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertTokenizer"),d(zS,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertTokenizerFast"),d(QS,"href","/docs/transformers/pr_16473/en/model_doc/rag#transformers.RagTokenizer"),d(WS,"href","/docs/transformers/pr_16473/en/model_doc/realm#transformers.RealmTokenizer"),d(HS,"href","/docs/transformers/pr_16473/en/model_doc/realm#transformers.RealmTokenizerFast"),d(US,"href","/docs/transformers/pr_16473/en/model_doc/reformer#transformers.ReformerTokenizer"),d(JS,"href","/docs/transformers/pr_16473/en/model_doc/reformer#transformers.ReformerTokenizerFast"),d(YS,"href","/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertTokenizer"),d(KS,"href","/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertTokenizerFast"),d(ZS,"href","/docs/transformers/pr_16473/en/model_doc/retribert#transformers.RetriBertTokenizer"),d(eR,"href","/docs/transformers/pr_16473/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),d(oR,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaTokenizer"),d(rR,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(tR,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerTokenizer"),d(aR,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),d(nR,"href","/docs/transformers/pr_16473/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),d(sR,"href","/docs/transformers/pr_16473/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),d(lR,"href","/docs/transformers/pr_16473/en/model_doc/splinter#transformers.SplinterTokenizer"),d(iR,"href","/docs/transformers/pr_16473/en/model_doc/splinter#transformers.SplinterTokenizerFast"),d(dR,"href","/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),d(cR,"href","/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),d(fR,"href","/docs/transformers/pr_16473/en/model_doc/t5#transformers.T5Tokenizer"),d(mR,"href","/docs/transformers/pr_16473/en/model_doc/t5#transformers.T5TokenizerFast"),d(gR,"href","/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasTokenizer"),d(hR,"href","/docs/transformers/pr_16473/en/model_doc/tapex#transformers.TapexTokenizer"),d(pR,"href","/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),d(_R,"href","/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(uR,"href","/docs/transformers/pr_16473/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),d(bR,"href","/docs/transformers/pr_16473/en/model_doc/xglm#transformers.XGLMTokenizer"),d(FR,"href","/docs/transformers/pr_16473/en/model_doc/xglm#transformers.XGLMTokenizerFast"),d(vR,"href","/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMTokenizer"),d(TR,"href","/docs/transformers/pr_16473/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),d(MR,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),d(ER,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),d(CR,"href","/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetTokenizer"),d(wR,"href","/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),d(go,"class","docstring"),d(hh,"class","docstring"),d(Wo,"class","docstring"),d(ph,"id","transformers.AutoFeatureExtractor"),d(ph,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ph,"href","#transformers.AutoFeatureExtractor"),d(Wi,"class","relative group"),d(AR,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),d(yR,"href","/docs/transformers/pr_16473/en/model_doc/beit#transformers.BeitFeatureExtractor"),d(LR,"href","/docs/transformers/pr_16473/en/model_doc/clip#transformers.CLIPFeatureExtractor"),d(xR,"href","/docs/transformers/pr_16473/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(kR,"href","/docs/transformers/pr_16473/en/model_doc/deit#transformers.DeiTFeatureExtractor"),d(SR,"href","/docs/transformers/pr_16473/en/model_doc/detr#transformers.DetrFeatureExtractor"),d(RR,"href","/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(BR,"href","/docs/transformers/pr_16473/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),d(PR,"href","/docs/transformers/pr_16473/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),d($R,"href","/docs/transformers/pr_16473/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),d(IR,"href","/docs/transformers/pr_16473/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),d(qR,"href","/docs/transformers/pr_16473/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(NR,"href","/docs/transformers/pr_16473/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),d(jR,"href","/docs/transformers/pr_16473/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),d(DR,"href","/docs/transformers/pr_16473/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(GR,"href","/docs/transformers/pr_16473/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(OR,"href","/docs/transformers/pr_16473/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(VR,"href","/docs/transformers/pr_16473/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(XR,"href","/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d($e,"class","docstring"),d($h,"class","docstring"),d(Ho,"class","docstring"),d(Ih,"id","transformers.AutoProcessor"),d(Ih,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ih,"href","#transformers.AutoProcessor"),d(Hi,"class","relative group"),d(zR,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),d(QR,"href","/docs/transformers/pr_16473/en/model_doc/clip#transformers.CLIPProcessor"),d(WR,"href","/docs/transformers/pr_16473/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),d(HR,"href","/docs/transformers/pr_16473/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),d(UR,"href","/docs/transformers/pr_16473/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),d(JR,"href","/docs/transformers/pr_16473/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),d(YR,"href","/docs/transformers/pr_16473/en/model_doc/trocr#transformers.TrOCRProcessor"),d(KR,"href","/docs/transformers/pr_16473/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),d(ZR,"href","/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(Ie,"class","docstring"),d(Qh,"class","docstring"),d(Uo,"class","docstring"),d(Wh,"id","transformers.AutoModel"),d(Wh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Wh,"href","#transformers.AutoModel"),d(Ji,"class","relative group"),d(eB,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(oB,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(rB,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Xr,"class","docstring"),d(tB,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertModel"),d(aB,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartModel"),d(nB,"href","/docs/transformers/pr_16473/en/model_doc/beit#transformers.BeitModel"),d(sB,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertModel"),d(lB,"href","/docs/transformers/pr_16473/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),d(iB,"href","/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdModel"),d(dB,"href","/docs/transformers/pr_16473/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),d(cB,"href","/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.BlenderbotModel"),d(fB,"href","/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),d(mB,"href","/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertModel"),d(gB,"href","/docs/transformers/pr_16473/en/model_doc/canine#transformers.CanineModel"),d(hB,"href","/docs/transformers/pr_16473/en/model_doc/clip#transformers.CLIPModel"),d(pB,"href","/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertModel"),d(_B,"href","/docs/transformers/pr_16473/en/model_doc/convnext#transformers.ConvNextModel"),d(uB,"href","/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.CTRLModel"),d(bB,"href","/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecAudioModel"),d(FB,"href","/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextModel"),d(vB,"href","/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaModel"),d(TB,"href","/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2Model"),d(MB,"href","/docs/transformers/pr_16473/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),d(EB,"href","/docs/transformers/pr_16473/en/model_doc/deit#transformers.DeiTModel"),d(CB,"href","/docs/transformers/pr_16473/en/model_doc/detr#transformers.DetrModel"),d(wB,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertModel"),d(AB,"href","/docs/transformers/pr_16473/en/model_doc/dpr#transformers.DPRQuestionEncoder"),d(yB,"href","/docs/transformers/pr_16473/en/model_doc/dpt#transformers.DPTModel"),d(LB,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraModel"),d(xB,"href","/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertModel"),d(kB,"href","/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetModel"),d(SB,"href","/docs/transformers/pr_16473/en/model_doc/fsmt#transformers.FSMTModel"),d(RB,"href","/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelModel"),d(BB,"href","/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelBaseModel"),d(PB,"href","/docs/transformers/pr_16473/en/model_doc/glpn#transformers.GLPNModel"),d($B,"href","/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2Model"),d(IB,"href","/docs/transformers/pr_16473/en/model_doc/gpt_neo#transformers.GPTNeoModel"),d(qB,"href","/docs/transformers/pr_16473/en/model_doc/gptj#transformers.GPTJModel"),d(NB,"href","/docs/transformers/pr_16473/en/model_doc/hubert#transformers.HubertModel"),d(jB,"href","/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertModel"),d(DB,"href","/docs/transformers/pr_16473/en/model_doc/imagegpt#transformers.ImageGPTModel"),d(GB,"href","/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMModel"),d(OB,"href","/docs/transformers/pr_16473/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),d(VB,"href","/docs/transformers/pr_16473/en/model_doc/led#transformers.LEDModel"),d(XB,"href","/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerModel"),d(zB,"href","/docs/transformers/pr_16473/en/model_doc/luke#transformers.LukeModel"),d(QB,"href","/docs/transformers/pr_16473/en/model_doc/lxmert#transformers.LxmertModel"),d(WB,"href","/docs/transformers/pr_16473/en/model_doc/m2m_100#transformers.M2M100Model"),d(HB,"href","/docs/transformers/pr_16473/en/model_doc/marian#transformers.MarianModel"),d(UB,"href","/docs/transformers/pr_16473/en/model_doc/maskformer#transformers.MaskFormerModel"),d(JB,"href","/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartModel"),d(YB,"href","/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertModel"),d(KB,"href","/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertModel"),d(ZB,"href","/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetModel"),d(eP,"href","/docs/transformers/pr_16473/en/model_doc/mt5#transformers.MT5Model"),d(oP,"href","/docs/transformers/pr_16473/en/model_doc/nystromformer#transformers.NystromformerModel"),d(rP,"href","/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),d(tP,"href","/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.PegasusModel"),d(aP,"href","/docs/transformers/pr_16473/en/model_doc/perceiver#transformers.PerceiverModel"),d(nP,"href","/docs/transformers/pr_16473/en/model_doc/plbart#transformers.PLBartModel"),d(sP,"href","/docs/transformers/pr_16473/en/model_doc/poolformer#transformers.PoolFormerModel"),d(lP,"href","/docs/transformers/pr_16473/en/model_doc/prophetnet#transformers.ProphetNetModel"),d(iP,"href","/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertModel"),d(dP,"href","/docs/transformers/pr_16473/en/model_doc/reformer#transformers.ReformerModel"),d(cP,"href","/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertModel"),d(fP,"href","/docs/transformers/pr_16473/en/model_doc/resnet#transformers.ResNetModel"),d(mP,"href","/docs/transformers/pr_16473/en/model_doc/retribert#transformers.RetriBertModel"),d(gP,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaModel"),d(hP,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerModel"),d(pP,"href","/docs/transformers/pr_16473/en/model_doc/segformer#transformers.SegformerModel"),d(_P,"href","/docs/transformers/pr_16473/en/model_doc/sew#transformers.SEWModel"),d(uP,"href","/docs/transformers/pr_16473/en/model_doc/sew-d#transformers.SEWDModel"),d(bP,"href","/docs/transformers/pr_16473/en/model_doc/speech_to_text#transformers.Speech2TextModel"),d(FP,"href","/docs/transformers/pr_16473/en/model_doc/splinter#transformers.SplinterModel"),d(vP,"href","/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertModel"),d(TP,"href","/docs/transformers/pr_16473/en/model_doc/swin#transformers.SwinModel"),d(MP,"href","/docs/transformers/pr_16473/en/model_doc/t5#transformers.T5Model"),d(EP,"href","/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasModel"),d(CP,"href","/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TransfoXLModel"),d(wP,"href","/docs/transformers/pr_16473/en/model_doc/unispeech#transformers.UniSpeechModel"),d(AP,"href","/docs/transformers/pr_16473/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),d(yP,"href","/docs/transformers/pr_16473/en/model_doc/van#transformers.VanModel"),d(LP,"href","/docs/transformers/pr_16473/en/model_doc/vilt#transformers.ViltModel"),d(xP,"href","/docs/transformers/pr_16473/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),d(kP,"href","/docs/transformers/pr_16473/en/model_doc/visual_bert#transformers.VisualBertModel"),d(SP,"href","/docs/transformers/pr_16473/en/model_doc/vit#transformers.ViTModel"),d(RP,"href","/docs/transformers/pr_16473/en/model_doc/vit_mae#transformers.ViTMAEModel"),d(BP,"href","/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),d(PP,"href","/docs/transformers/pr_16473/en/model_doc/wavlm#transformers.WavLMModel"),d($P,"href","/docs/transformers/pr_16473/en/model_doc/xglm#transformers.XGLMModel"),d(IP,"href","/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMModel"),d(qP,"href","/docs/transformers/pr_16473/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),d(NP,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),d(jP,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),d(DP,"href","/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetModel"),d(GP,"href","/docs/transformers/pr_16473/en/model_doc/yoso#transformers.YosoModel"),d(qe,"class","docstring"),d(Jo,"class","docstring"),d(R_,"id","transformers.AutoModelForPreTraining"),d(R_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(R_,"href","#transformers.AutoModelForPreTraining"),d(Zi,"class","relative group"),d(OP,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(VP,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(XP,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zr,"class","docstring"),d(zP,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertForPreTraining"),d(QP,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(WP,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertForPreTraining"),d(HP,"href","/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),d(UP,"href","/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(JP,"href","/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(YP,"href","/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(KP,"href","/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(ZP,"href","/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(e$,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(o$,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraForPreTraining"),d(r$,"href","/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(t$,"href","/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetForPreTraining"),d(a$,"href","/docs/transformers/pr_16473/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(n$,"href","/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelForPreTraining"),d(s$,"href","/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(l$,"href","/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(i$,"href","/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(d$,"href","/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(c$,"href","/docs/transformers/pr_16473/en/model_doc/lxmert#transformers.LxmertForPreTraining"),d(f$,"href","/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),d(m$,"href","/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),d(g$,"href","/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(h$,"href","/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(p$,"href","/docs/transformers/pr_16473/en/model_doc/retribert#transformers.RetriBertModel"),d(_$,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(u$,"href","/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(b$,"href","/docs/transformers/pr_16473/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(F$,"href","/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(v$,"href","/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(T$,"href","/docs/transformers/pr_16473/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),d(M$,"href","/docs/transformers/pr_16473/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),d(E$,"href","/docs/transformers/pr_16473/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),d(C$,"href","/docs/transformers/pr_16473/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),d(w$,"href","/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),d(A$,"href","/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(y$,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(L$,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(x$,"href","/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(Ne,"class","docstring"),d(Yo,"class","docstring"),d(Fu,"id","transformers.AutoModelForCausalLM"),d(Fu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Fu,"href","#transformers.AutoModelForCausalLM"),d(rd,"class","relative group"),d(k$,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(S$,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(R$,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Qr,"class","docstring"),d(B$,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartForCausalLM"),d(P$,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertLMHeadModel"),d($$,"href","/docs/transformers/pr_16473/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),d(I$,"href","/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),d(q$,"href","/docs/transformers/pr_16473/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),d(N$,"href","/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),d(j$,"href","/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),d(D$,"href","/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertForCausalLM"),d(G$,"href","/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(O$,"href","/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),d(V$,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraForCausalLM"),d(X$,"href","/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(z$,"href","/docs/transformers/pr_16473/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),d(Q$,"href","/docs/transformers/pr_16473/en/model_doc/gptj#transformers.GPTJForCausalLM"),d(W$,"href","/docs/transformers/pr_16473/en/model_doc/marian#transformers.MarianForCausalLM"),d(H$,"href","/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartForCausalLM"),d(U$,"href","/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),d(J$,"href","/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(Y$,"href","/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.PegasusForCausalLM"),d(K$,"href","/docs/transformers/pr_16473/en/model_doc/plbart#transformers.PLBartForCausalLM"),d(Z$,"href","/docs/transformers/pr_16473/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),d(eI,"href","/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),d(oI,"href","/docs/transformers/pr_16473/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),d(rI,"href","/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertForCausalLM"),d(tI,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaForCausalLM"),d(aI,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerForCausalLM"),d(nI,"href","/docs/transformers/pr_16473/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),d(sI,"href","/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(lI,"href","/docs/transformers/pr_16473/en/model_doc/trocr#transformers.TrOCRForCausalLM"),d(iI,"href","/docs/transformers/pr_16473/en/model_doc/xglm#transformers.XGLMForCausalLM"),d(dI,"href","/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(cI,"href","/docs/transformers/pr_16473/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),d(fI,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),d(mI,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),d(gI,"href","/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(je,"class","docstring"),d(Ko,"class","docstring"),d(r1,"id","transformers.AutoModelForMaskedLM"),d(r1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(r1,"href","#transformers.AutoModelForMaskedLM"),d(nd,"class","relative group"),d(hI,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pI,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(_I,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Wr,"class","docstring"),d(uI,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertForMaskedLM"),d(bI,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(FI,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertForMaskedLM"),d(vI,"href","/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),d(TI,"href","/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(MI,"href","/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),d(EI,"href","/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(CI,"href","/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(wI,"href","/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(AI,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(yI,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraForMaskedLM"),d(LI,"href","/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(xI,"href","/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetForMaskedLM"),d(kI,"href","/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelForMaskedLM"),d(SI,"href","/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(RI,"href","/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(BI,"href","/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(PI,"href","/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d($I,"href","/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),d(II,"href","/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),d(qI,"href","/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(NI,"href","/docs/transformers/pr_16473/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),d(jI,"href","/docs/transformers/pr_16473/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),d(DI,"href","/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),d(GI,"href","/docs/transformers/pr_16473/en/model_doc/reformer#transformers.ReformerForMaskedLM"),d(OI,"href","/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertForMaskedLM"),d(VI,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(XI,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),d(zI,"href","/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(QI,"href","/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(WI,"href","/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(HI,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(UI,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(JI,"href","/docs/transformers/pr_16473/en/model_doc/yoso#transformers.YosoForMaskedLM"),d(De,"class","docstring"),d(Zo,"class","docstring"),d(j1,"id","transformers.AutoModelForSeq2SeqLM"),d(j1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(j1,"href","#transformers.AutoModelForSeq2SeqLM"),d(id,"class","relative group"),d(YI,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(KI,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(ZI,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Hr,"class","docstring"),d(eq,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(oq,"href","/docs/transformers/pr_16473/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),d(rq,"href","/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),d(tq,"href","/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),d(aq,"href","/docs/transformers/pr_16473/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),d(nq,"href","/docs/transformers/pr_16473/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(sq,"href","/docs/transformers/pr_16473/en/model_doc/led#transformers.LEDForConditionalGeneration"),d(lq,"href","/docs/transformers/pr_16473/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),d(iq,"href","/docs/transformers/pr_16473/en/model_doc/marian#transformers.MarianMTModel"),d(dq,"href","/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(cq,"href","/docs/transformers/pr_16473/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),d(fq,"href","/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),d(mq,"href","/docs/transformers/pr_16473/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),d(gq,"href","/docs/transformers/pr_16473/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),d(hq,"href","/docs/transformers/pr_16473/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(pq,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(_q,"href","/docs/transformers/pr_16473/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),d(Ge,"class","docstring"),d(er,"class","docstring"),d(a4,"id","transformers.AutoModelForSequenceClassification"),d(a4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(a4,"href","#transformers.AutoModelForSequenceClassification"),d(fd,"class","relative group"),d(uq,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bq,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Fq,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ur,"class","docstring"),d(vq,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertForSequenceClassification"),d(Tq,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartForSequenceClassification"),d(Mq,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertForSequenceClassification"),d(Eq,"href","/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),d(Cq,"href","/docs/transformers/pr_16473/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),d(wq,"href","/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),d(Aq,"href","/docs/transformers/pr_16473/en/model_doc/canine#transformers.CanineForSequenceClassification"),d(yq,"href","/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),d(Lq,"href","/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),d(xq,"href","/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),d(kq,"href","/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),d(Sq,"href","/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),d(Rq,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),d(Bq,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraForSequenceClassification"),d(Pq,"href","/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),d($q,"href","/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetForSequenceClassification"),d(Iq,"href","/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),d(qq,"href","/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),d(Nq,"href","/docs/transformers/pr_16473/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),d(jq,"href","/docs/transformers/pr_16473/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),d(Dq,"href","/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertForSequenceClassification"),d(Gq,"href","/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),d(Oq,"href","/docs/transformers/pr_16473/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),d(Vq,"href","/docs/transformers/pr_16473/en/model_doc/led#transformers.LEDForSequenceClassification"),d(Xq,"href","/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),d(zq,"href","/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartForSequenceClassification"),d(Qq,"href","/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),d(Wq,"href","/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),d(Hq,"href","/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),d(Uq,"href","/docs/transformers/pr_16473/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),d(Jq,"href","/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),d(Yq,"href","/docs/transformers/pr_16473/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),d(Kq,"href","/docs/transformers/pr_16473/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),d(Zq,"href","/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),d(eN,"href","/docs/transformers/pr_16473/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),d(oN,"href","/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),d(rN,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),d(tN,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),d(aN,"href","/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),d(nN,"href","/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasForSequenceClassification"),d(sN,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartForSequenceClassification"),d(lN,"href","/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),d(iN,"href","/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMForSequenceClassification"),d(dN,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),d(cN,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),d(fN,"href","/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),d(mN,"href","/docs/transformers/pr_16473/en/model_doc/yoso#transformers.YosoForSequenceClassification"),d(Oe,"class","docstring"),d(or,"class","docstring"),d(Z4,"id","transformers.AutoModelForMultipleChoice"),d(Z4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Z4,"href","#transformers.AutoModelForMultipleChoice"),d(hd,"class","relative group"),d(gN,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(hN,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(pN,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Jr,"class","docstring"),d(_N,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertForMultipleChoice"),d(uN,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertForMultipleChoice"),d(bN,"href","/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),d(FN,"href","/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),d(vN,"href","/docs/transformers/pr_16473/en/model_doc/canine#transformers.CanineForMultipleChoice"),d(TN,"href","/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),d(MN,"href","/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),d(EN,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),d(CN,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraForMultipleChoice"),d(wN,"href","/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),d(AN,"href","/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetForMultipleChoice"),d(yN,"href","/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),d(LN,"href","/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertForMultipleChoice"),d(xN,"href","/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),d(kN,"href","/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),d(SN,"href","/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),d(RN,"href","/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),d(BN,"href","/docs/transformers/pr_16473/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),d(PN,"href","/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),d($N,"href","/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),d(IN,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),d(qN,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),d(NN,"href","/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),d(jN,"href","/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMForMultipleChoice"),d(DN,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),d(GN,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),d(ON,"href","/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),d(VN,"href","/docs/transformers/pr_16473/en/model_doc/yoso#transformers.YosoForMultipleChoice"),d(Ve,"class","docstring"),d(rr,"class","docstring"),d(xb,"id","transformers.AutoModelForNextSentencePrediction"),d(xb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(xb,"href","#transformers.AutoModelForNextSentencePrediction"),d(ud,"class","relative group"),d(XN,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zN,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(QN,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Yr,"class","docstring"),d(WN,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertForNextSentencePrediction"),d(HN,"href","/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),d(UN,"href","/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),d(JN,"href","/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),d(YN,"href","/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),d(Xe,"class","docstring"),d(tr,"class","docstring"),d(Ib,"id","transformers.AutoModelForTokenClassification"),d(Ib,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ib,"href","#transformers.AutoModelForTokenClassification"),d(vd,"class","relative group"),d(KN,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ZN,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(ej,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Kr,"class","docstring"),d(oj,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertForTokenClassification"),d(rj,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertForTokenClassification"),d(tj,"href","/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),d(aj,"href","/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertForTokenClassification"),d(nj,"href","/docs/transformers/pr_16473/en/model_doc/canine#transformers.CanineForTokenClassification"),d(sj,"href","/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),d(lj,"href","/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),d(ij,"href","/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaForTokenClassification"),d(dj,"href","/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),d(cj,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),d(fj,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraForTokenClassification"),d(mj,"href","/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),d(gj,"href","/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetForTokenClassification"),d(hj,"href","/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelForTokenClassification"),d(pj,"href","/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),d(_j,"href","/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertForTokenClassification"),d(uj,"href","/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),d(bj,"href","/docs/transformers/pr_16473/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),d(Fj,"href","/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerForTokenClassification"),d(vj,"href","/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),d(Tj,"href","/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),d(Mj,"href","/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),d(Ej,"href","/docs/transformers/pr_16473/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),d(Cj,"href","/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),d(wj,"href","/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertForTokenClassification"),d(Aj,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaForTokenClassification"),d(yj,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),d(Lj,"href","/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),d(xj,"href","/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMForTokenClassification"),d(kj,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),d(Sj,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),d(Rj,"href","/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),d(Bj,"href","/docs/transformers/pr_16473/en/model_doc/yoso#transformers.YosoForTokenClassification"),d(ze,"class","docstring"),d(ar,"class","docstring"),d(u3,"id","transformers.AutoModelForQuestionAnswering"),d(u3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(u3,"href","#transformers.AutoModelForQuestionAnswering"),d(Ed,"class","relative group"),d(Pj,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($j,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Ij,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Zr,"class","docstring"),d(qj,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),d(Nj,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartForQuestionAnswering"),d(jj,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertForQuestionAnswering"),d(Dj,"href","/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),d(Gj,"href","/docs/transformers/pr_16473/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),d(Oj,"href","/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),d(Vj,"href","/docs/transformers/pr_16473/en/model_doc/canine#transformers.CanineForQuestionAnswering"),d(Xj,"href","/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),d(zj,"href","/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),d(Qj,"href","/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),d(Wj,"href","/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),d(Hj,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),d(Uj,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),d(Jj,"href","/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),d(Yj,"href","/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),d(Kj,"href","/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),d(Zj,"href","/docs/transformers/pr_16473/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),d(eD,"href","/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),d(oD,"href","/docs/transformers/pr_16473/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),d(rD,"href","/docs/transformers/pr_16473/en/model_doc/led#transformers.LEDForQuestionAnswering"),d(tD,"href","/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),d(aD,"href","/docs/transformers/pr_16473/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),d(nD,"href","/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),d(sD,"href","/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),d(lD,"href","/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),d(iD,"href","/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),d(dD,"href","/docs/transformers/pr_16473/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),d(cD,"href","/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),d(fD,"href","/docs/transformers/pr_16473/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),d(mD,"href","/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),d(gD,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),d(hD,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),d(pD,"href","/docs/transformers/pr_16473/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),d(_D,"href","/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),d(uD,"href","/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),d(bD,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),d(FD,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),d(vD,"href","/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),d(TD,"href","/docs/transformers/pr_16473/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),d(Qe,"class","docstring"),d(nr,"class","docstring"),d(a2,"id","transformers.AutoModelForTableQuestionAnswering"),d(a2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(a2,"href","#transformers.AutoModelForTableQuestionAnswering"),d(Ad,"class","relative group"),d(MD,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ED,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(CD,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(et,"class","docstring"),d(wD,"href","/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),d(We,"class","docstring"),d(sr,"class","docstring"),d(l2,"id","transformers.AutoModelForImageClassification"),d(l2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(l2,"href","#transformers.AutoModelForImageClassification"),d(xd,"class","relative group"),d(AD,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(yD,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(LD,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ot,"class","docstring"),d(xD,"href","/docs/transformers/pr_16473/en/model_doc/beit#transformers.BeitForImageClassification"),d(kD,"href","/docs/transformers/pr_16473/en/model_doc/convnext#transformers.ConvNextForImageClassification"),d(SD,"href","/docs/transformers/pr_16473/en/model_doc/deit#transformers.DeiTForImageClassification"),d(RD,"href","/docs/transformers/pr_16473/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),d(BD,"href","/docs/transformers/pr_16473/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),d(PD,"href","/docs/transformers/pr_16473/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),d($D,"href","/docs/transformers/pr_16473/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),d(ID,"href","/docs/transformers/pr_16473/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),d(qD,"href","/docs/transformers/pr_16473/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),d(ND,"href","/docs/transformers/pr_16473/en/model_doc/resnet#transformers.ResNetForImageClassification"),d(jD,"href","/docs/transformers/pr_16473/en/model_doc/segformer#transformers.SegformerForImageClassification"),d(DD,"href","/docs/transformers/pr_16473/en/model_doc/swin#transformers.SwinForImageClassification"),d(GD,"href","/docs/transformers/pr_16473/en/model_doc/van#transformers.VanForImageClassification"),d(OD,"href","/docs/transformers/pr_16473/en/model_doc/vit#transformers.ViTForImageClassification"),d(He,"class","docstring"),d(lr,"class","docstring"),d(b2,"id","transformers.AutoModelForVision2Seq"),d(b2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(b2,"href","#transformers.AutoModelForVision2Seq"),d(Rd,"class","relative group"),d(VD,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(XD,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(zD,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(rt,"class","docstring"),d(QD,"href","/docs/transformers/pr_16473/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),d(Ue,"class","docstring"),d(ir,"class","docstring"),d(T2,"id","transformers.AutoModelForAudioClassification"),d(T2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(T2,"href","#transformers.AutoModelForAudioClassification"),d($d,"class","relative group"),d(WD,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(HD,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(UD,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(tt,"class","docstring"),d(JD,"href","/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),d(YD,"href","/docs/transformers/pr_16473/en/model_doc/hubert#transformers.HubertForSequenceClassification"),d(KD,"href","/docs/transformers/pr_16473/en/model_doc/sew#transformers.SEWForSequenceClassification"),d(ZD,"href","/docs/transformers/pr_16473/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),d(eG,"href","/docs/transformers/pr_16473/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),d(oG,"href","/docs/transformers/pr_16473/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),d(rG,"href","/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),d(tG,"href","/docs/transformers/pr_16473/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),d(Je,"class","docstring"),d(dr,"class","docstring"),d(S2,"id","transformers.AutoModelForAudioFrameClassification"),d(S2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(S2,"href","#transformers.AutoModelForAudioFrameClassification"),d(Nd,"class","relative group"),d(aG,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(nG,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(sG,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(at,"class","docstring"),d(lG,"href","/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),d(iG,"href","/docs/transformers/pr_16473/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),d(dG,"href","/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),d(cG,"href","/docs/transformers/pr_16473/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),d(Ye,"class","docstring"),d(cr,"class","docstring"),d(q2,"id","transformers.AutoModelForCTC"),d(q2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(q2,"href","#transformers.AutoModelForCTC"),d(Gd,"class","relative group"),d(fG,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(mG,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(gG,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(nt,"class","docstring"),d(hG,"href","/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),d(pG,"href","/docs/transformers/pr_16473/en/model_doc/hubert#transformers.HubertForCTC"),d(_G,"href","/docs/transformers/pr_16473/en/model_doc/sew#transformers.SEWForCTC"),d(uG,"href","/docs/transformers/pr_16473/en/model_doc/sew-d#transformers.SEWDForCTC"),d(bG,"href","/docs/transformers/pr_16473/en/model_doc/unispeech#transformers.UniSpeechForCTC"),d(FG,"href","/docs/transformers/pr_16473/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),d(vG,"href","/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),d(TG,"href","/docs/transformers/pr_16473/en/model_doc/wavlm#transformers.WavLMForCTC"),d(Ke,"class","docstring"),d(fr,"class","docstring"),d(W2,"id","transformers.AutoModelForSpeechSeq2Seq"),d(W2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(W2,"href","#transformers.AutoModelForSpeechSeq2Seq"),d(Xd,"class","relative group"),d(MG,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(EG,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(CG,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(st,"class","docstring"),d(wG,"href","/docs/transformers/pr_16473/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),d(AG,"href","/docs/transformers/pr_16473/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),d(Ze,"class","docstring"),d(mr,"class","docstring"),d(Y2,"id","transformers.AutoModelForAudioXVector"),d(Y2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Y2,"href","#transformers.AutoModelForAudioXVector"),d(Wd,"class","relative group"),d(yG,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(LG,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(xG,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(lt,"class","docstring"),d(kG,"href","/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),d(SG,"href","/docs/transformers/pr_16473/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),d(RG,"href","/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),d(BG,"href","/docs/transformers/pr_16473/en/model_doc/wavlm#transformers.WavLMForXVector"),d(eo,"class","docstring"),d(gr,"class","docstring"),d(tF,"id","transformers.AutoModelForMaskedImageModeling"),d(tF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(tF,"href","#transformers.AutoModelForMaskedImageModeling"),d(Jd,"class","relative group"),d(PG,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($G,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(IG,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(it,"class","docstring"),d(qG,"href","/docs/transformers/pr_16473/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),d(NG,"href","/docs/transformers/pr_16473/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),d(jG,"href","/docs/transformers/pr_16473/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),d(oo,"class","docstring"),d(hr,"class","docstring"),d(iF,"id","transformers.AutoModelForObjectDetection"),d(iF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(iF,"href","#transformers.AutoModelForObjectDetection"),d(ec,"class","relative group"),d(DG,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(GG,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(OG,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(dt,"class","docstring"),d(VG,"href","/docs/transformers/pr_16473/en/model_doc/detr#transformers.DetrForObjectDetection"),d(ro,"class","docstring"),d(pr,"class","docstring"),d(fF,"id","transformers.AutoModelForImageSegmentation"),d(fF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(fF,"href","#transformers.AutoModelForImageSegmentation"),d(tc,"class","relative group"),d(XG,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zG,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(QG,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ct,"class","docstring"),d(WG,"href","/docs/transformers/pr_16473/en/model_doc/detr#transformers.DetrForSegmentation"),d(to,"class","docstring"),d(_r,"class","docstring"),d(hF,"id","transformers.AutoModelForSemanticSegmentation"),d(hF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(hF,"href","#transformers.AutoModelForSemanticSegmentation"),d(sc,"class","relative group"),d(HG,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(UG,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(JG,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ft,"class","docstring"),d(YG,"href","/docs/transformers/pr_16473/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),d(KG,"href","/docs/transformers/pr_16473/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),d(ZG,"href","/docs/transformers/pr_16473/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),d(ao,"class","docstring"),d(ur,"class","docstring"),d(FF,"id","transformers.AutoModelForInstanceSegmentation"),d(FF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(FF,"href","#transformers.AutoModelForInstanceSegmentation"),d(cc,"class","relative group"),d(eO,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(oO,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(rO,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(mt,"class","docstring"),d(tO,"href","/docs/transformers/pr_16473/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),d(no,"class","docstring"),d(br,"class","docstring"),d(MF,"id","transformers.TFAutoModel"),d(MF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(MF,"href","#transformers.TFAutoModel"),d(gc,"class","relative group"),d(aO,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(nO,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(sO,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(gt,"class","docstring"),d(lO,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.TFAlbertModel"),d(iO,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.TFBartModel"),d(dO,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.TFBertModel"),d(cO,"href","/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),d(fO,"href","/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),d(mO,"href","/docs/transformers/pr_16473/en/model_doc/camembert#transformers.TFCamembertModel"),d(gO,"href","/docs/transformers/pr_16473/en/model_doc/clip#transformers.TFCLIPModel"),d(hO,"href","/docs/transformers/pr_16473/en/model_doc/convbert#transformers.TFConvBertModel"),d(pO,"href","/docs/transformers/pr_16473/en/model_doc/convnext#transformers.TFConvNextModel"),d(_O,"href","/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.TFCTRLModel"),d(uO,"href","/docs/transformers/pr_16473/en/model_doc/deberta#transformers.TFDebertaModel"),d(bO,"href","/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),d(FO,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.TFDistilBertModel"),d(vO,"href","/docs/transformers/pr_16473/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),d(TO,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.TFElectraModel"),d(MO,"href","/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.TFFlaubertModel"),d(EO,"href","/docs/transformers/pr_16473/en/model_doc/funnel#transformers.TFFunnelModel"),d(CO,"href","/docs/transformers/pr_16473/en/model_doc/funnel#transformers.TFFunnelBaseModel"),d(wO,"href","/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.TFGPT2Model"),d(AO,"href","/docs/transformers/pr_16473/en/model_doc/gptj#transformers.TFGPTJModel"),d(yO,"href","/docs/transformers/pr_16473/en/model_doc/hubert#transformers.TFHubertModel"),d(LO,"href","/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),d(xO,"href","/docs/transformers/pr_16473/en/model_doc/led#transformers.TFLEDModel"),d(kO,"href","/docs/transformers/pr_16473/en/model_doc/longformer#transformers.TFLongformerModel"),d(SO,"href","/docs/transformers/pr_16473/en/model_doc/lxmert#transformers.TFLxmertModel"),d(RO,"href","/docs/transformers/pr_16473/en/model_doc/marian#transformers.TFMarianModel"),d(BO,"href","/docs/transformers/pr_16473/en/model_doc/mbart#transformers.TFMBartModel"),d(PO,"href","/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.TFMobileBertModel"),d($O,"href","/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.TFMPNetModel"),d(IO,"href","/docs/transformers/pr_16473/en/model_doc/mt5#transformers.TFMT5Model"),d(qO,"href","/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),d(NO,"href","/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.TFPegasusModel"),d(jO,"href","/docs/transformers/pr_16473/en/model_doc/rembert#transformers.TFRemBertModel"),d(DO,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.TFRobertaModel"),d(GO,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.TFRoFormerModel"),d(OO,"href","/docs/transformers/pr_16473/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),d(VO,"href","/docs/transformers/pr_16473/en/model_doc/t5#transformers.TFT5Model"),d(XO,"href","/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TFTapasModel"),d(zO,"href","/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),d(QO,"href","/docs/transformers/pr_16473/en/model_doc/vit#transformers.TFViTModel"),d(WO,"href","/docs/transformers/pr_16473/en/model_doc/vit_mae#transformers.TFViTMAEModel"),d(HO,"href","/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),d(UO,"href","/docs/transformers/pr_16473/en/model_doc/xlm#transformers.TFXLMModel"),d(JO,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),d(YO,"href","/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.TFXLNetModel"),d(ho,"class","docstring"),d(Fr,"class","docstring"),d(mv,"id","transformers.TFAutoModelForPreTraining"),d(mv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(mv,"href","#transformers.TFAutoModelForPreTraining"),d(_c,"class","relative group"),d(KO,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ZO,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(eV,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ht,"class","docstring"),d(oV,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.TFAlbertForPreTraining"),d(rV,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(tV,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.TFBertForPreTraining"),d(aV,"href","/docs/transformers/pr_16473/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(nV,"href","/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(sV,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(lV,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.TFElectraForPreTraining"),d(iV,"href","/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(dV,"href","/docs/transformers/pr_16473/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),d(cV,"href","/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(fV,"href","/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(mV,"href","/docs/transformers/pr_16473/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),d(gV,"href","/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),d(hV,"href","/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(pV,"href","/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(_V,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(uV,"href","/docs/transformers/pr_16473/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(bV,"href","/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(FV,"href","/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(vV,"href","/docs/transformers/pr_16473/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),d(TV,"href","/docs/transformers/pr_16473/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(MV,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(EV,"href","/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(po,"class","docstring"),d(vr,"class","docstring"),d(Iv,"id","transformers.TFAutoModelForCausalLM"),d(Iv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Iv,"href","#transformers.TFAutoModelForCausalLM"),d(Fc,"class","relative group"),d(CV,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(wV,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(AV,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pt,"class","docstring"),d(yV,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.TFBertLMHeadModel"),d(LV,"href","/docs/transformers/pr_16473/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),d(xV,"href","/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(kV,"href","/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(SV,"href","/docs/transformers/pr_16473/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),d(RV,"href","/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(BV,"href","/docs/transformers/pr_16473/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),d(PV,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),d($V,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),d(IV,"href","/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(qV,"href","/docs/transformers/pr_16473/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(NV,"href","/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(_o,"class","docstring"),d(Tr,"class","docstring"),d(Uv,"id","transformers.TFAutoModelForImageClassification"),d(Uv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Uv,"href","#transformers.TFAutoModelForImageClassification"),d(Mc,"class","relative group"),d(jV,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(DV,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(GV,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_t,"class","docstring"),d(OV,"href","/docs/transformers/pr_16473/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),d(VV,"href","/docs/transformers/pr_16473/en/model_doc/vit#transformers.TFViTForImageClassification"),d(uo,"class","docstring"),d(Mr,"class","docstring"),d(Kv,"id","transformers.TFAutoModelForMaskedLM"),d(Kv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Kv,"href","#transformers.TFAutoModelForMaskedLM"),d(wc,"class","relative group"),d(XV,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zV,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(QV,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ut,"class","docstring"),d(WV,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),d(HV,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.TFBertForMaskedLM"),d(UV,"href","/docs/transformers/pr_16473/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(JV,"href","/docs/transformers/pr_16473/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),d(YV,"href","/docs/transformers/pr_16473/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),d(KV,"href","/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),d(ZV,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(eX,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.TFElectraForMaskedLM"),d(oX,"href","/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(rX,"href","/docs/transformers/pr_16473/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),d(tX,"href","/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(aX,"href","/docs/transformers/pr_16473/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),d(nX,"href","/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),d(sX,"href","/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(lX,"href","/docs/transformers/pr_16473/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),d(iX,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(dX,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),d(cX,"href","/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(fX,"href","/docs/transformers/pr_16473/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(mX,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(bo,"class","docstring"),d(Er,"class","docstring"),d(F6,"id","transformers.TFAutoModelForSeq2SeqLM"),d(F6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(F6,"href","#transformers.TFAutoModelForSeq2SeqLM"),d(Lc,"class","relative group"),d(gX,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(hX,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(pX,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bt,"class","docstring"),d(_X,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(uX,"href","/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),d(bX,"href","/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),d(FX,"href","/docs/transformers/pr_16473/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),d(vX,"href","/docs/transformers/pr_16473/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),d(TX,"href","/docs/transformers/pr_16473/en/model_doc/marian#transformers.TFMarianMTModel"),d(MX,"href","/docs/transformers/pr_16473/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),d(EX,"href","/docs/transformers/pr_16473/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),d(CX,"href","/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),d(wX,"href","/docs/transformers/pr_16473/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(Fo,"class","docstring"),d(Cr,"class","docstring"),d(k6,"id","transformers.TFAutoModelForSequenceClassification"),d(k6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(k6,"href","#transformers.TFAutoModelForSequenceClassification"),d(Sc,"class","relative group"),d(AX,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(yX,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(LX,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ft,"class","docstring"),d(xX,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),d(kX,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.TFBertForSequenceClassification"),d(SX,"href","/docs/transformers/pr_16473/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),d(RX,"href","/docs/transformers/pr_16473/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),d(BX,"href","/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),d(PX,"href","/docs/transformers/pr_16473/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),d($X,"href","/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),d(IX,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),d(qX,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),d(NX,"href","/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),d(jX,"href","/docs/transformers/pr_16473/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),d(DX,"href","/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),d(GX,"href","/docs/transformers/pr_16473/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),d(OX,"href","/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),d(VX,"href","/docs/transformers/pr_16473/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),d(XX,"href","/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),d(zX,"href","/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),d(QX,"href","/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),d(WX,"href","/docs/transformers/pr_16473/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),d(HX,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),d(UX,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),d(JX,"href","/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),d(YX,"href","/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),d(KX,"href","/docs/transformers/pr_16473/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),d(ZX,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),d(ez,"href","/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),d(vo,"class","docstring"),d(wr,"class","docstring"),d(tT,"id","transformers.TFAutoModelForMultipleChoice"),d(tT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(tT,"href","#transformers.TFAutoModelForMultipleChoice"),d(Pc,"class","relative group"),d(oz,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(rz,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(tz,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(vt,"class","docstring"),d(az,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),d(nz,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.TFBertForMultipleChoice"),d(sz,"href","/docs/transformers/pr_16473/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),d(lz,"href","/docs/transformers/pr_16473/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),d(iz,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),d(dz,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),d(cz,"href","/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),d(fz,"href","/docs/transformers/pr_16473/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),d(mz,"href","/docs/transformers/pr_16473/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),d(gz,"href","/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),d(hz,"href","/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),d(pz,"href","/docs/transformers/pr_16473/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),d(_z,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),d(uz,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),d(bz,"href","/docs/transformers/pr_16473/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),d(Fz,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),d(vz,"href","/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),d(To,"class","docstring"),d(Ar,"class","docstring"),d(TT,"id","transformers.TFAutoModelForTableQuestionAnswering"),d(TT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(TT,"href","#transformers.TFAutoModelForTableQuestionAnswering"),d(qc,"class","relative group"),d(Tz,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Mz,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Ez,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Tt,"class","docstring"),d(Cz,"href","/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),d(Mo,"class","docstring"),d(yr,"class","docstring"),d(ET,"id","transformers.TFAutoModelForTokenClassification"),d(ET,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ET,"href","#transformers.TFAutoModelForTokenClassification"),d(Dc,"class","relative group"),d(wz,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Az,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(yz,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Mt,"class","docstring"),d(Lz,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),d(xz,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.TFBertForTokenClassification"),d(kz,"href","/docs/transformers/pr_16473/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),d(Sz,"href","/docs/transformers/pr_16473/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),d(Rz,"href","/docs/transformers/pr_16473/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),d(Bz,"href","/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),d(Pz,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),d($z,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.TFElectraForTokenClassification"),d(Iz,"href","/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),d(qz,"href","/docs/transformers/pr_16473/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),d(Nz,"href","/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),d(jz,"href","/docs/transformers/pr_16473/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),d(Dz,"href","/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),d(Gz,"href","/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),d(Oz,"href","/docs/transformers/pr_16473/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),d(Vz,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),d(Xz,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),d(zz,"href","/docs/transformers/pr_16473/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),d(Qz,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),d(Wz,"href","/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),d(Eo,"class","docstring"),d(Lr,"class","docstring"),d(XT,"id","transformers.TFAutoModelForQuestionAnswering"),d(XT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(XT,"href","#transformers.TFAutoModelForQuestionAnswering"),d(Vc,"class","relative group"),d(Hz,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Uz,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Jz,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Et,"class","docstring"),d(Yz,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),d(Kz,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),d(Zz,"href","/docs/transformers/pr_16473/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),d(eQ,"href","/docs/transformers/pr_16473/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),d(oQ,"href","/docs/transformers/pr_16473/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),d(rQ,"href","/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),d(tQ,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),d(aQ,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),d(nQ,"href","/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),d(sQ,"href","/docs/transformers/pr_16473/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),d(lQ,"href","/docs/transformers/pr_16473/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),d(iQ,"href","/docs/transformers/pr_16473/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),d(dQ,"href","/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),d(cQ,"href","/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),d(fQ,"href","/docs/transformers/pr_16473/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),d(mQ,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),d(gQ,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),d(hQ,"href","/docs/transformers/pr_16473/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),d(pQ,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),d(_Q,"href","/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),d(Co,"class","docstring"),d(xr,"class","docstring"),d(f7,"id","transformers.TFAutoModelForVision2Seq"),d(f7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(f7,"href","#transformers.TFAutoModelForVision2Seq"),d(Qc,"class","relative group"),d(uQ,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bQ,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(FQ,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ct,"class","docstring"),d(vQ,"href","/docs/transformers/pr_16473/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),d(wo,"class","docstring"),d(kr,"class","docstring"),d(g7,"id","transformers.TFAutoModelForSpeechSeq2Seq"),d(g7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(g7,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),d(Uc,"class","relative group"),d(TQ,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(MQ,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(EQ,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(wt,"class","docstring"),d(CQ,"href","/docs/transformers/pr_16473/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),d(Ao,"class","docstring"),d(Sr,"class","docstring"),d(p7,"id","transformers.FlaxAutoModel"),d(p7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(p7,"href","#transformers.FlaxAutoModel"),d(Kc,"class","relative group"),d(wQ,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(AQ,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(yQ,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(At,"class","docstring"),d(LQ,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.FlaxAlbertModel"),d(xQ,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.FlaxBartModel"),d(kQ,"href","/docs/transformers/pr_16473/en/model_doc/beit#transformers.FlaxBeitModel"),d(SQ,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.FlaxBertModel"),d(RQ,"href","/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),d(BQ,"href","/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),d(PQ,"href","/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),d($Q,"href","/docs/transformers/pr_16473/en/model_doc/clip#transformers.FlaxCLIPModel"),d(IQ,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),d(qQ,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.FlaxElectraModel"),d(NQ,"href","/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.FlaxGPT2Model"),d(jQ,"href","/docs/transformers/pr_16473/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),d(DQ,"href","/docs/transformers/pr_16473/en/model_doc/gptj#transformers.FlaxGPTJModel"),d(GQ,"href","/docs/transformers/pr_16473/en/model_doc/marian#transformers.FlaxMarianModel"),d(OQ,"href","/docs/transformers/pr_16473/en/model_doc/mbart#transformers.FlaxMBartModel"),d(VQ,"href","/docs/transformers/pr_16473/en/model_doc/mt5#transformers.FlaxMT5Model"),d(XQ,"href","/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.FlaxPegasusModel"),d(zQ,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.FlaxRobertaModel"),d(QQ,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.FlaxRoFormerModel"),d(WQ,"href","/docs/transformers/pr_16473/en/model_doc/t5#transformers.FlaxT5Model"),d(HQ,"href","/docs/transformers/pr_16473/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),d(UQ,"href","/docs/transformers/pr_16473/en/model_doc/vit#transformers.FlaxViTModel"),d(JQ,"href","/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),d(YQ,"href","/docs/transformers/pr_16473/en/model_doc/xglm#transformers.FlaxXGLMModel"),d(KQ,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),d(yo,"class","docstring"),d(Rr,"class","docstring"),d(G7,"id","transformers.FlaxAutoModelForCausalLM"),d(G7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(G7,"href","#transformers.FlaxAutoModelForCausalLM"),d(of,"class","relative group"),d(ZQ,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(eW,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(oW,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(yt,"class","docstring"),d(rW,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.FlaxBartForCausalLM"),d(tW,"href","/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),d(aW,"href","/docs/transformers/pr_16473/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),d(nW,"href","/docs/transformers/pr_16473/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),d(sW,"href","/docs/transformers/pr_16473/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),d(Lo,"class","docstring"),d(Br,"class","docstring"),d(W7,"id","transformers.FlaxAutoModelForPreTraining"),d(W7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(W7,"href","#transformers.FlaxAutoModelForPreTraining"),d(af,"class","relative group"),d(lW,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(iW,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(dW,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Lt,"class","docstring"),d(cW,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),d(fW,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(mW,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.FlaxBertForPreTraining"),d(gW,"href","/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),d(hW,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),d(pW,"href","/docs/transformers/pr_16473/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(_W,"href","/docs/transformers/pr_16473/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(uW,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(bW,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(FW,"href","/docs/transformers/pr_16473/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(vW,"href","/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),d(TW,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(xo,"class","docstring"),d(Pr,"class","docstring"),d(sM,"id","transformers.FlaxAutoModelForMaskedLM"),d(sM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(sM,"href","#transformers.FlaxAutoModelForMaskedLM"),d(lf,"class","relative group"),d(MW,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(EW,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(CW,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(xt,"class","docstring"),d(wW,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),d(AW,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(yW,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),d(LW,"href","/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),d(xW,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),d(kW,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),d(SW,"href","/docs/transformers/pr_16473/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(RW,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(BW,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(PW,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(ko,"class","docstring"),d($r,"class","docstring"),d(uM,"id","transformers.FlaxAutoModelForSeq2SeqLM"),d(uM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(uM,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),d(ff,"class","relative group"),d($W,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(IW,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(qW,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(kt,"class","docstring"),d(NW,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(jW,"href","/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),d(DW,"href","/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),d(GW,"href","/docs/transformers/pr_16473/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),d(OW,"href","/docs/transformers/pr_16473/en/model_doc/marian#transformers.FlaxMarianMTModel"),d(VW,"href","/docs/transformers/pr_16473/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(XW,"href","/docs/transformers/pr_16473/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(zW,"href","/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),d(QW,"href","/docs/transformers/pr_16473/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(So,"class","docstring"),d(Ir,"class","docstring"),d(yM,"id","transformers.FlaxAutoModelForSequenceClassification"),d(yM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(yM,"href","#transformers.FlaxAutoModelForSequenceClassification"),d(hf,"class","relative group"),d(WW,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(HW,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(UW,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(St,"class","docstring"),d(JW,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),d(YW,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),d(KW,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),d(ZW,"href","/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),d(eH,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),d(oH,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),d(rH,"href","/docs/transformers/pr_16473/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),d(tH,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),d(aH,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),d(nH,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),d(Ro,"class","docstring"),d(qr,"class","docstring"),d(NM,"id","transformers.FlaxAutoModelForQuestionAnswering"),d(NM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(NM,"href","#transformers.FlaxAutoModelForQuestionAnswering"),d(uf,"class","relative group"),d(sH,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(lH,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(iH,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Rt,"class","docstring"),d(dH,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),d(cH,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),d(fH,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),d(mH,"href","/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),d(gH,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),d(hH,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),d(pH,"href","/docs/transformers/pr_16473/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),d(_H,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),d(uH,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),d(bH,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),d(Bo,"class","docstring"),d(Nr,"class","docstring"),d(UM,"id","transformers.FlaxAutoModelForTokenClassification"),d(UM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(UM,"href","#transformers.FlaxAutoModelForTokenClassification"),d(vf,"class","relative group"),d(FH,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(vH,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(TH,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Bt,"class","docstring"),d(MH,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),d(EH,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),d(CH,"href","/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),d(wH,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),d(AH,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),d(yH,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),d(LH,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),d(xH,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),d(Po,"class","docstring"),d(jr,"class","docstring"),d(aE,"id","transformers.FlaxAutoModelForMultipleChoice"),d(aE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(aE,"href","#transformers.FlaxAutoModelForMultipleChoice"),d(Ef,"class","relative group"),d(kH,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(SH,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(RH,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Pt,"class","docstring"),d(BH,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),d(PH,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),d($H,"href","/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),d(IH,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),d(qH,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),d(NH,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),d(jH,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),d(DH,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),d($o,"class","docstring"),d(Dr,"class","docstring"),d(gE,"id","transformers.FlaxAutoModelForNextSentencePrediction"),d(gE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(gE,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),d(Af,"class","relative group"),d(GH,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(OH,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(VH,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($t,"class","docstring"),d(XH,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),d(Io,"class","docstring"),d(Gr,"class","docstring"),d(pE,"id","transformers.FlaxAutoModelForImageClassification"),d(pE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(pE,"href","#transformers.FlaxAutoModelForImageClassification"),d(xf,"class","relative group"),d(zH,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(QH,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(WH,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(It,"class","docstring"),d(HH,"href","/docs/transformers/pr_16473/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),d(UH,"href","/docs/transformers/pr_16473/en/model_doc/vit#transformers.FlaxViTForImageClassification"),d(qo,"class","docstring"),d(Or,"class","docstring"),d(bE,"id","transformers.FlaxAutoModelForVision2Seq"),d(bE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(bE,"href","#transformers.FlaxAutoModelForVision2Seq"),d(Rf,"class","relative group"),d(JH,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(YH,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(KH,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qt,"class","docstring"),d(ZH,"href","/docs/transformers/pr_16473/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),d(No,"class","docstring"),d(Vr,"class","docstring")},m(c,u){e(document.head,Z),b(c,io,u),b(c,de,u),e(de,Ce),e(Ce,lo),g(me,lo,null),e(de,Me),e(de,Xo),e(Xo,Ii),b(c,qf,u),b(c,fa,u),e(fa,qi),e(fa,Ni),e(Ni,FC),e(fa,Nf),b(c,xe,u),b(c,co,u),e(co,ji),e(co,Gn),e(Gn,vC),e(co,On),e(co,Vn),e(Vn,TC),e(co,Di),e(co,Xn),e(Xn,MC),e(co,Gi),b(c,jf,u),g(Da,c,u),b(c,fo,u),b(c,_e,u),e(_e,f9),e(_e,Oi),e(Oi,m9),e(_e,g9),b(c,zo,u),b(c,Ga,u),e(Ga,h9),e(Ga,Df),e(Df,p9),e(Ga,mIe),b(c,ZSe,u),b(c,Vi,u),e(Vi,Gf),e(Gf,WJ),g(EC,WJ,null),e(Vi,gIe),e(Vi,HJ),e(HJ,hIe),b(c,eRe,u),b(c,zn,u),e(zn,pIe),e(zn,UJ),e(UJ,_Ie),e(zn,uIe),e(zn,JJ),e(JJ,bIe),e(zn,FIe),b(c,oRe,u),g(CC,c,u),b(c,rRe,u),b(c,_9,u),e(_9,vIe),b(c,tRe,u),g(Of,c,u),b(c,aRe,u),b(c,Xi,u),e(Xi,Vf),e(Vf,YJ),g(wC,YJ,null),e(Xi,TIe),e(Xi,KJ),e(KJ,MIe),b(c,nRe,u),b(c,Qo,u),g(AC,Qo,null),e(Qo,EIe),e(Qo,yC),e(yC,CIe),e(yC,u9),e(u9,wIe),e(yC,AIe),e(Qo,yIe),e(Qo,LC),e(LC,LIe),e(LC,ZJ),e(ZJ,xIe),e(LC,kIe),e(Qo,SIe),e(Qo,mo),g(xC,mo,null),e(mo,RIe),e(mo,eY),e(eY,BIe),e(mo,PIe),e(mo,zi),e(zi,$Ie),e(zi,oY),e(oY,IIe),e(zi,qIe),e(zi,rY),e(rY,NIe),e(zi,jIe),e(mo,DIe),e(mo,F),e(F,Xf),e(Xf,tY),e(tY,GIe),e(Xf,OIe),e(Xf,b9),e(b9,VIe),e(Xf,XIe),e(F,zIe),e(F,zf),e(zf,aY),e(aY,QIe),e(zf,WIe),e(zf,F9),e(F9,HIe),e(zf,UIe),e(F,JIe),e(F,Qf),e(Qf,nY),e(nY,YIe),e(Qf,KIe),e(Qf,v9),e(v9,ZIe),e(Qf,eqe),e(F,oqe),e(F,Wf),e(Wf,sY),e(sY,rqe),e(Wf,tqe),e(Wf,T9),e(T9,aqe),e(Wf,nqe),e(F,sqe),e(F,Hf),e(Hf,lY),e(lY,lqe),e(Hf,iqe),e(Hf,M9),e(M9,dqe),e(Hf,cqe),e(F,fqe),e(F,Uf),e(Uf,iY),e(iY,mqe),e(Uf,gqe),e(Uf,E9),e(E9,hqe),e(Uf,pqe),e(F,_qe),e(F,Jf),e(Jf,dY),e(dY,uqe),e(Jf,bqe),e(Jf,C9),e(C9,Fqe),e(Jf,vqe),e(F,Tqe),e(F,Yf),e(Yf,cY),e(cY,Mqe),e(Yf,Eqe),e(Yf,w9),e(w9,Cqe),e(Yf,wqe),e(F,Aqe),e(F,Kf),e(Kf,fY),e(fY,yqe),e(Kf,Lqe),e(Kf,A9),e(A9,xqe),e(Kf,kqe),e(F,Sqe),e(F,Zf),e(Zf,mY),e(mY,Rqe),e(Zf,Bqe),e(Zf,y9),e(y9,Pqe),e(Zf,$qe),e(F,Iqe),e(F,em),e(em,gY),e(gY,qqe),e(em,Nqe),e(em,L9),e(L9,jqe),e(em,Dqe),e(F,Gqe),e(F,om),e(om,hY),e(hY,Oqe),e(om,Vqe),e(om,x9),e(x9,Xqe),e(om,zqe),e(F,Qqe),e(F,rm),e(rm,pY),e(pY,Wqe),e(rm,Hqe),e(rm,k9),e(k9,Uqe),e(rm,Jqe),e(F,Yqe),e(F,tm),e(tm,_Y),e(_Y,Kqe),e(tm,Zqe),e(tm,S9),e(S9,eNe),e(tm,oNe),e(F,rNe),e(F,am),e(am,uY),e(uY,tNe),e(am,aNe),e(am,R9),e(R9,nNe),e(am,sNe),e(F,lNe),e(F,nm),e(nm,bY),e(bY,iNe),e(nm,dNe),e(nm,B9),e(B9,cNe),e(nm,fNe),e(F,mNe),e(F,sm),e(sm,FY),e(FY,gNe),e(sm,hNe),e(sm,P9),e(P9,pNe),e(sm,_Ne),e(F,uNe),e(F,lm),e(lm,vY),e(vY,bNe),e(lm,FNe),e(lm,$9),e($9,vNe),e(lm,TNe),e(F,MNe),e(F,im),e(im,TY),e(TY,ENe),e(im,CNe),e(im,I9),e(I9,wNe),e(im,ANe),e(F,yNe),e(F,dm),e(dm,MY),e(MY,LNe),e(dm,xNe),e(dm,q9),e(q9,kNe),e(dm,SNe),e(F,RNe),e(F,cm),e(cm,EY),e(EY,BNe),e(cm,PNe),e(cm,N9),e(N9,$Ne),e(cm,INe),e(F,qNe),e(F,fm),e(fm,CY),e(CY,NNe),e(fm,jNe),e(fm,j9),e(j9,DNe),e(fm,GNe),e(F,ONe),e(F,mm),e(mm,wY),e(wY,VNe),e(mm,XNe),e(mm,D9),e(D9,zNe),e(mm,QNe),e(F,WNe),e(F,gm),e(gm,AY),e(AY,HNe),e(gm,UNe),e(gm,G9),e(G9,JNe),e(gm,YNe),e(F,KNe),e(F,hm),e(hm,yY),e(yY,ZNe),e(hm,eje),e(hm,O9),e(O9,oje),e(hm,rje),e(F,tje),e(F,pm),e(pm,LY),e(LY,aje),e(pm,nje),e(pm,V9),e(V9,sje),e(pm,lje),e(F,ije),e(F,_m),e(_m,xY),e(xY,dje),e(_m,cje),e(_m,X9),e(X9,fje),e(_m,mje),e(F,gje),e(F,um),e(um,kY),e(kY,hje),e(um,pje),e(um,z9),e(z9,_je),e(um,uje),e(F,bje),e(F,bm),e(bm,SY),e(SY,Fje),e(bm,vje),e(bm,Q9),e(Q9,Tje),e(bm,Mje),e(F,Eje),e(F,Fm),e(Fm,RY),e(RY,Cje),e(Fm,wje),e(Fm,W9),e(W9,Aje),e(Fm,yje),e(F,Lje),e(F,vm),e(vm,BY),e(BY,xje),e(vm,kje),e(vm,H9),e(H9,Sje),e(vm,Rje),e(F,Bje),e(F,Tm),e(Tm,PY),e(PY,Pje),e(Tm,$je),e(Tm,U9),e(U9,Ije),e(Tm,qje),e(F,Nje),e(F,Mm),e(Mm,$Y),e($Y,jje),e(Mm,Dje),e(Mm,J9),e(J9,Gje),e(Mm,Oje),e(F,Vje),e(F,Em),e(Em,IY),e(IY,Xje),e(Em,zje),e(Em,Y9),e(Y9,Qje),e(Em,Wje),e(F,Hje),e(F,Cm),e(Cm,qY),e(qY,Uje),e(Cm,Jje),e(Cm,K9),e(K9,Yje),e(Cm,Kje),e(F,Zje),e(F,wm),e(wm,NY),e(NY,eDe),e(wm,oDe),e(wm,Z9),e(Z9,rDe),e(wm,tDe),e(F,aDe),e(F,Am),e(Am,jY),e(jY,nDe),e(Am,sDe),e(Am,ex),e(ex,lDe),e(Am,iDe),e(F,dDe),e(F,ym),e(ym,DY),e(DY,cDe),e(ym,fDe),e(ym,ox),e(ox,mDe),e(ym,gDe),e(F,hDe),e(F,Lm),e(Lm,GY),e(GY,pDe),e(Lm,_De),e(Lm,rx),e(rx,uDe),e(Lm,bDe),e(F,FDe),e(F,xm),e(xm,OY),e(OY,vDe),e(xm,TDe),e(xm,tx),e(tx,MDe),e(xm,EDe),e(F,CDe),e(F,km),e(km,VY),e(VY,wDe),e(km,ADe),e(km,ax),e(ax,yDe),e(km,LDe),e(F,xDe),e(F,Sm),e(Sm,XY),e(XY,kDe),e(Sm,SDe),e(Sm,nx),e(nx,RDe),e(Sm,BDe),e(F,PDe),e(F,Rm),e(Rm,zY),e(zY,$De),e(Rm,IDe),e(Rm,sx),e(sx,qDe),e(Rm,NDe),e(F,jDe),e(F,Bm),e(Bm,QY),e(QY,DDe),e(Bm,GDe),e(Bm,lx),e(lx,ODe),e(Bm,VDe),e(F,XDe),e(F,Pm),e(Pm,WY),e(WY,zDe),e(Pm,QDe),e(Pm,ix),e(ix,WDe),e(Pm,HDe),e(F,UDe),e(F,$m),e($m,HY),e(HY,JDe),e($m,YDe),e($m,dx),e(dx,KDe),e($m,ZDe),e(F,eGe),e(F,Im),e(Im,UY),e(UY,oGe),e(Im,rGe),e(Im,cx),e(cx,tGe),e(Im,aGe),e(F,nGe),e(F,qm),e(qm,JY),e(JY,sGe),e(qm,lGe),e(qm,fx),e(fx,iGe),e(qm,dGe),e(F,cGe),e(F,Nm),e(Nm,YY),e(YY,fGe),e(Nm,mGe),e(Nm,mx),e(mx,gGe),e(Nm,hGe),e(F,pGe),e(F,jm),e(jm,KY),e(KY,_Ge),e(jm,uGe),e(jm,gx),e(gx,bGe),e(jm,FGe),e(F,vGe),e(F,Dm),e(Dm,ZY),e(ZY,TGe),e(Dm,MGe),e(Dm,hx),e(hx,EGe),e(Dm,CGe),e(F,wGe),e(F,Gm),e(Gm,eK),e(eK,AGe),e(Gm,yGe),e(Gm,px),e(px,LGe),e(Gm,xGe),e(F,kGe),e(F,Om),e(Om,oK),e(oK,SGe),e(Om,RGe),e(Om,_x),e(_x,BGe),e(Om,PGe),e(F,$Ge),e(F,Vm),e(Vm,rK),e(rK,IGe),e(Vm,qGe),e(Vm,ux),e(ux,NGe),e(Vm,jGe),e(F,DGe),e(F,Xm),e(Xm,tK),e(tK,GGe),e(Xm,OGe),e(Xm,bx),e(bx,VGe),e(Xm,XGe),e(F,zGe),e(F,zm),e(zm,aK),e(aK,QGe),e(zm,WGe),e(zm,Fx),e(Fx,HGe),e(zm,UGe),e(F,JGe),e(F,Qm),e(Qm,nK),e(nK,YGe),e(Qm,KGe),e(Qm,vx),e(vx,ZGe),e(Qm,eOe),e(F,oOe),e(F,Wm),e(Wm,sK),e(sK,rOe),e(Wm,tOe),e(Wm,Tx),e(Tx,aOe),e(Wm,nOe),e(F,sOe),e(F,Hm),e(Hm,lK),e(lK,lOe),e(Hm,iOe),e(Hm,Mx),e(Mx,dOe),e(Hm,cOe),e(F,fOe),e(F,Um),e(Um,iK),e(iK,mOe),e(Um,gOe),e(Um,Ex),e(Ex,hOe),e(Um,pOe),e(F,_Oe),e(F,Jm),e(Jm,dK),e(dK,uOe),e(Jm,bOe),e(Jm,Cx),e(Cx,FOe),e(Jm,vOe),e(F,TOe),e(F,Ym),e(Ym,cK),e(cK,MOe),e(Ym,EOe),e(Ym,wx),e(wx,COe),e(Ym,wOe),e(F,AOe),e(F,Km),e(Km,fK),e(fK,yOe),e(Km,LOe),e(Km,Ax),e(Ax,xOe),e(Km,kOe),e(F,SOe),e(F,Zm),e(Zm,mK),e(mK,ROe),e(Zm,BOe),e(Zm,yx),e(yx,POe),e(Zm,$Oe),e(F,IOe),e(F,eg),e(eg,gK),e(gK,qOe),e(eg,NOe),e(eg,Lx),e(Lx,jOe),e(eg,DOe),e(F,GOe),e(F,og),e(og,hK),e(hK,OOe),e(og,VOe),e(og,xx),e(xx,XOe),e(og,zOe),e(F,QOe),e(F,rg),e(rg,pK),e(pK,WOe),e(rg,HOe),e(rg,kx),e(kx,UOe),e(rg,JOe),e(F,YOe),e(F,tg),e(tg,_K),e(_K,KOe),e(tg,ZOe),e(tg,Sx),e(Sx,eVe),e(tg,oVe),e(F,rVe),e(F,ag),e(ag,uK),e(uK,tVe),e(ag,aVe),e(ag,Rx),e(Rx,nVe),e(ag,sVe),e(F,lVe),e(F,ng),e(ng,bK),e(bK,iVe),e(ng,dVe),e(ng,Bx),e(Bx,cVe),e(ng,fVe),e(F,mVe),e(F,sg),e(sg,FK),e(FK,gVe),e(sg,hVe),e(sg,Px),e(Px,pVe),e(sg,_Ve),e(F,uVe),e(F,lg),e(lg,vK),e(vK,bVe),e(lg,FVe),e(lg,$x),e($x,vVe),e(lg,TVe),e(F,MVe),e(F,ig),e(ig,TK),e(TK,EVe),e(ig,CVe),e(ig,Ix),e(Ix,wVe),e(ig,AVe),e(F,yVe),e(F,dg),e(dg,MK),e(MK,LVe),e(dg,xVe),e(dg,qx),e(qx,kVe),e(dg,SVe),e(F,RVe),e(F,cg),e(cg,EK),e(EK,BVe),e(cg,PVe),e(cg,Nx),e(Nx,$Ve),e(cg,IVe),e(F,qVe),e(F,fg),e(fg,CK),e(CK,NVe),e(fg,jVe),e(fg,jx),e(jx,DVe),e(fg,GVe),e(F,OVe),e(F,mg),e(mg,wK),e(wK,VVe),e(mg,XVe),e(mg,Dx),e(Dx,zVe),e(mg,QVe),e(F,WVe),e(F,gg),e(gg,AK),e(AK,HVe),e(gg,UVe),e(gg,Gx),e(Gx,JVe),e(gg,YVe),e(F,KVe),e(F,hg),e(hg,yK),e(yK,ZVe),e(hg,eXe),e(hg,Ox),e(Ox,oXe),e(hg,rXe),e(F,tXe),e(F,pg),e(pg,LK),e(LK,aXe),e(pg,nXe),e(pg,Vx),e(Vx,sXe),e(pg,lXe),e(F,iXe),e(F,_g),e(_g,xK),e(xK,dXe),e(_g,cXe),e(_g,Xx),e(Xx,fXe),e(_g,mXe),e(F,gXe),e(F,ug),e(ug,kK),e(kK,hXe),e(ug,pXe),e(ug,zx),e(zx,_Xe),e(ug,uXe),e(F,bXe),e(F,bg),e(bg,SK),e(SK,FXe),e(bg,vXe),e(bg,Qx),e(Qx,TXe),e(bg,MXe),e(F,EXe),e(F,Fg),e(Fg,RK),e(RK,CXe),e(Fg,wXe),e(Fg,Wx),e(Wx,AXe),e(Fg,yXe),e(F,LXe),e(F,vg),e(vg,BK),e(BK,xXe),e(vg,kXe),e(vg,Hx),e(Hx,SXe),e(vg,RXe),e(F,BXe),e(F,Tg),e(Tg,PK),e(PK,PXe),e(Tg,$Xe),e(Tg,Ux),e(Ux,IXe),e(Tg,qXe),e(F,NXe),e(F,Mg),e(Mg,$K),e($K,jXe),e(Mg,DXe),e(Mg,Jx),e(Jx,GXe),e(Mg,OXe),e(F,VXe),e(F,Eg),e(Eg,IK),e(IK,XXe),e(Eg,zXe),e(Eg,Yx),e(Yx,QXe),e(Eg,WXe),e(F,HXe),e(F,Cg),e(Cg,qK),e(qK,UXe),e(Cg,JXe),e(Cg,Kx),e(Kx,YXe),e(Cg,KXe),e(F,ZXe),e(F,wg),e(wg,NK),e(NK,eze),e(wg,oze),e(wg,Zx),e(Zx,rze),e(wg,tze),e(F,aze),e(F,Ag),e(Ag,jK),e(jK,nze),e(Ag,sze),e(Ag,ek),e(ek,lze),e(Ag,ize),e(F,dze),e(F,yg),e(yg,DK),e(DK,cze),e(yg,fze),e(yg,ok),e(ok,mze),e(yg,gze),e(F,hze),e(F,Lg),e(Lg,GK),e(GK,pze),e(Lg,_ze),e(Lg,rk),e(rk,uze),e(Lg,bze),e(F,Fze),e(F,xg),e(xg,OK),e(OK,vze),e(xg,Tze),e(xg,tk),e(tk,Mze),e(xg,Eze),e(F,Cze),e(F,kg),e(kg,VK),e(VK,wze),e(kg,Aze),e(kg,ak),e(ak,yze),e(kg,Lze),e(F,xze),e(F,Sg),e(Sg,XK),e(XK,kze),e(Sg,Sze),e(Sg,nk),e(nk,Rze),e(Sg,Bze),e(F,Pze),e(F,Rg),e(Rg,zK),e(zK,$ze),e(Rg,Ize),e(Rg,sk),e(sk,qze),e(Rg,Nze),e(F,jze),e(F,Bg),e(Bg,QK),e(QK,Dze),e(Bg,Gze),e(Bg,lk),e(lk,Oze),e(Bg,Vze),e(F,Xze),e(F,Pg),e(Pg,WK),e(WK,zze),e(Pg,Qze),e(Pg,ik),e(ik,Wze),e(Pg,Hze),e(F,Uze),e(F,$g),e($g,HK),e(HK,Jze),e($g,Yze),e($g,dk),e(dk,Kze),e($g,Zze),e(mo,eQe),e(mo,UK),e(UK,oQe),e(mo,rQe),g(kC,mo,null),e(Qo,tQe),e(Qo,Ig),g(SC,Ig,null),e(Ig,aQe),e(Ig,JK),e(JK,nQe),b(c,sRe,u),b(c,Qi,u),e(Qi,qg),e(qg,YK),g(RC,YK,null),e(Qi,sQe),e(Qi,KK),e(KK,lQe),b(c,lRe,u),b(c,Wo,u),g(BC,Wo,null),e(Wo,iQe),e(Wo,PC),e(PC,dQe),e(PC,ck),e(ck,cQe),e(PC,fQe),e(Wo,mQe),e(Wo,$C),e($C,gQe),e($C,ZK),e(ZK,hQe),e($C,pQe),e(Wo,_Qe),e(Wo,go),g(IC,go,null),e(go,uQe),e(go,eZ),e(eZ,bQe),e(go,FQe),e(go,Oa),e(Oa,vQe),e(Oa,oZ),e(oZ,TQe),e(Oa,MQe),e(Oa,rZ),e(rZ,EQe),e(Oa,CQe),e(Oa,tZ),e(tZ,wQe),e(Oa,AQe),e(go,yQe),e(go,E),e(E,Qn),e(Qn,aZ),e(aZ,LQe),e(Qn,xQe),e(Qn,fk),e(fk,kQe),e(Qn,SQe),e(Qn,mk),e(mk,RQe),e(Qn,BQe),e(E,PQe),e(E,Wn),e(Wn,nZ),e(nZ,$Qe),e(Wn,IQe),e(Wn,gk),e(gk,qQe),e(Wn,NQe),e(Wn,hk),e(hk,jQe),e(Wn,DQe),e(E,GQe),e(E,Hn),e(Hn,sZ),e(sZ,OQe),e(Hn,VQe),e(Hn,pk),e(pk,XQe),e(Hn,zQe),e(Hn,_k),e(_k,QQe),e(Hn,WQe),e(E,HQe),e(E,Ng),e(Ng,lZ),e(lZ,UQe),e(Ng,JQe),e(Ng,uk),e(uk,YQe),e(Ng,KQe),e(E,ZQe),e(E,Un),e(Un,iZ),e(iZ,eWe),e(Un,oWe),e(Un,bk),e(bk,rWe),e(Un,tWe),e(Un,Fk),e(Fk,aWe),e(Un,nWe),e(E,sWe),e(E,jg),e(jg,dZ),e(dZ,lWe),e(jg,iWe),e(jg,vk),e(vk,dWe),e(jg,cWe),e(E,fWe),e(E,Dg),e(Dg,cZ),e(cZ,mWe),e(Dg,gWe),e(Dg,Tk),e(Tk,hWe),e(Dg,pWe),e(E,_We),e(E,Gg),e(Gg,fZ),e(fZ,uWe),e(Gg,bWe),e(Gg,Mk),e(Mk,FWe),e(Gg,vWe),e(E,TWe),e(E,Jn),e(Jn,mZ),e(mZ,MWe),e(Jn,EWe),e(Jn,Ek),e(Ek,CWe),e(Jn,wWe),e(Jn,Ck),e(Ck,AWe),e(Jn,yWe),e(E,LWe),e(E,Yn),e(Yn,gZ),e(gZ,xWe),e(Yn,kWe),e(Yn,wk),e(wk,SWe),e(Yn,RWe),e(Yn,Ak),e(Ak,BWe),e(Yn,PWe),e(E,$We),e(E,Kn),e(Kn,hZ),e(hZ,IWe),e(Kn,qWe),e(Kn,yk),e(yk,NWe),e(Kn,jWe),e(Kn,Lk),e(Lk,DWe),e(Kn,GWe),e(E,OWe),e(E,Og),e(Og,pZ),e(pZ,VWe),e(Og,XWe),e(Og,xk),e(xk,zWe),e(Og,QWe),e(E,WWe),e(E,Vg),e(Vg,_Z),e(_Z,HWe),e(Vg,UWe),e(Vg,kk),e(kk,JWe),e(Vg,YWe),e(E,KWe),e(E,Zn),e(Zn,uZ),e(uZ,ZWe),e(Zn,eHe),e(Zn,Sk),e(Sk,oHe),e(Zn,rHe),e(Zn,Rk),e(Rk,tHe),e(Zn,aHe),e(E,nHe),e(E,Xg),e(Xg,bZ),e(bZ,sHe),e(Xg,lHe),e(Xg,Bk),e(Bk,iHe),e(Xg,dHe),e(E,cHe),e(E,es),e(es,FZ),e(FZ,fHe),e(es,mHe),e(es,Pk),e(Pk,gHe),e(es,hHe),e(es,$k),e($k,pHe),e(es,_He),e(E,uHe),e(E,os),e(os,vZ),e(vZ,bHe),e(os,FHe),e(os,Ik),e(Ik,vHe),e(os,THe),e(os,qk),e(qk,MHe),e(os,EHe),e(E,CHe),e(E,rs),e(rs,TZ),e(TZ,wHe),e(rs,AHe),e(rs,Nk),e(Nk,yHe),e(rs,LHe),e(rs,MZ),e(MZ,xHe),e(rs,kHe),e(E,SHe),e(E,zg),e(zg,EZ),e(EZ,RHe),e(zg,BHe),e(zg,jk),e(jk,PHe),e(zg,$He),e(E,IHe),e(E,ts),e(ts,CZ),e(CZ,qHe),e(ts,NHe),e(ts,Dk),e(Dk,jHe),e(ts,DHe),e(ts,Gk),e(Gk,GHe),e(ts,OHe),e(E,VHe),e(E,Qg),e(Qg,wZ),e(wZ,XHe),e(Qg,zHe),e(Qg,Ok),e(Ok,QHe),e(Qg,WHe),e(E,HHe),e(E,as),e(as,AZ),e(AZ,UHe),e(as,JHe),e(as,Vk),e(Vk,YHe),e(as,KHe),e(as,Xk),e(Xk,ZHe),e(as,eUe),e(E,oUe),e(E,ns),e(ns,yZ),e(yZ,rUe),e(ns,tUe),e(ns,zk),e(zk,aUe),e(ns,nUe),e(ns,Qk),e(Qk,sUe),e(ns,lUe),e(E,iUe),e(E,ss),e(ss,LZ),e(LZ,dUe),e(ss,cUe),e(ss,Wk),e(Wk,fUe),e(ss,mUe),e(ss,Hk),e(Hk,gUe),e(ss,hUe),e(E,pUe),e(E,Wg),e(Wg,xZ),e(xZ,_Ue),e(Wg,uUe),e(Wg,Uk),e(Uk,bUe),e(Wg,FUe),e(E,vUe),e(E,ls),e(ls,kZ),e(kZ,TUe),e(ls,MUe),e(ls,Jk),e(Jk,EUe),e(ls,CUe),e(ls,Yk),e(Yk,wUe),e(ls,AUe),e(E,yUe),e(E,Hg),e(Hg,SZ),e(SZ,LUe),e(Hg,xUe),e(Hg,Kk),e(Kk,kUe),e(Hg,SUe),e(E,RUe),e(E,is),e(is,RZ),e(RZ,BUe),e(is,PUe),e(is,Zk),e(Zk,$Ue),e(is,IUe),e(is,eS),e(eS,qUe),e(is,NUe),e(E,jUe),e(E,ds),e(ds,BZ),e(BZ,DUe),e(ds,GUe),e(ds,oS),e(oS,OUe),e(ds,VUe),e(ds,rS),e(rS,XUe),e(ds,zUe),e(E,QUe),e(E,cs),e(cs,PZ),e(PZ,WUe),e(cs,HUe),e(cs,tS),e(tS,UUe),e(cs,JUe),e(cs,aS),e(aS,YUe),e(cs,KUe),e(E,ZUe),e(E,fs),e(fs,$Z),e($Z,eJe),e(fs,oJe),e(fs,nS),e(nS,rJe),e(fs,tJe),e(fs,sS),e(sS,aJe),e(fs,nJe),e(E,sJe),e(E,Ug),e(Ug,IZ),e(IZ,lJe),e(Ug,iJe),e(Ug,lS),e(lS,dJe),e(Ug,cJe),e(E,fJe),e(E,ms),e(ms,qZ),e(qZ,mJe),e(ms,gJe),e(ms,iS),e(iS,hJe),e(ms,pJe),e(ms,dS),e(dS,_Je),e(ms,uJe),e(E,bJe),e(E,gs),e(gs,NZ),e(NZ,FJe),e(gs,vJe),e(gs,cS),e(cS,TJe),e(gs,MJe),e(gs,fS),e(fS,EJe),e(gs,CJe),e(E,wJe),e(E,hs),e(hs,jZ),e(jZ,AJe),e(hs,yJe),e(hs,mS),e(mS,LJe),e(hs,xJe),e(hs,gS),e(gS,kJe),e(hs,SJe),e(E,RJe),e(E,ps),e(ps,DZ),e(DZ,BJe),e(ps,PJe),e(ps,hS),e(hS,$Je),e(ps,IJe),e(ps,pS),e(pS,qJe),e(ps,NJe),e(E,jJe),e(E,_s),e(_s,GZ),e(GZ,DJe),e(_s,GJe),e(_s,_S),e(_S,OJe),e(_s,VJe),e(_s,uS),e(uS,XJe),e(_s,zJe),e(E,QJe),e(E,us),e(us,OZ),e(OZ,WJe),e(us,HJe),e(us,bS),e(bS,UJe),e(us,JJe),e(us,FS),e(FS,YJe),e(us,KJe),e(E,ZJe),e(E,Jg),e(Jg,VZ),e(VZ,eYe),e(Jg,oYe),e(Jg,vS),e(vS,rYe),e(Jg,tYe),e(E,aYe),e(E,bs),e(bs,XZ),e(XZ,nYe),e(bs,sYe),e(bs,TS),e(TS,lYe),e(bs,iYe),e(bs,MS),e(MS,dYe),e(bs,cYe),e(E,fYe),e(E,Yg),e(Yg,zZ),e(zZ,mYe),e(Yg,gYe),e(Yg,ES),e(ES,hYe),e(Yg,pYe),e(E,_Ye),e(E,Kg),e(Kg,QZ),e(QZ,uYe),e(Kg,bYe),e(Kg,CS),e(CS,FYe),e(Kg,vYe),e(E,TYe),e(E,Fs),e(Fs,WZ),e(WZ,MYe),e(Fs,EYe),e(Fs,wS),e(wS,CYe),e(Fs,wYe),e(Fs,AS),e(AS,AYe),e(Fs,yYe),e(E,LYe),e(E,vs),e(vs,HZ),e(HZ,xYe),e(vs,kYe),e(vs,yS),e(yS,SYe),e(vs,RYe),e(vs,LS),e(LS,BYe),e(vs,PYe),e(E,$Ye),e(E,Zg),e(Zg,UZ),e(UZ,IYe),e(Zg,qYe),e(Zg,xS),e(xS,NYe),e(Zg,jYe),e(E,DYe),e(E,Ts),e(Ts,JZ),e(JZ,GYe),e(Ts,OYe),e(Ts,kS),e(kS,VYe),e(Ts,XYe),e(Ts,SS),e(SS,zYe),e(Ts,QYe),e(E,WYe),e(E,Ms),e(Ms,YZ),e(YZ,HYe),e(Ms,UYe),e(Ms,RS),e(RS,JYe),e(Ms,YYe),e(Ms,BS),e(BS,KYe),e(Ms,ZYe),e(E,eKe),e(E,Es),e(Es,KZ),e(KZ,oKe),e(Es,rKe),e(Es,PS),e(PS,tKe),e(Es,aKe),e(Es,$S),e($S,nKe),e(Es,sKe),e(E,lKe),e(E,Cs),e(Cs,ZZ),e(ZZ,iKe),e(Cs,dKe),e(Cs,IS),e(IS,cKe),e(Cs,fKe),e(Cs,qS),e(qS,mKe),e(Cs,gKe),e(E,hKe),e(E,ws),e(ws,eee),e(eee,pKe),e(ws,_Ke),e(ws,NS),e(NS,uKe),e(ws,bKe),e(ws,jS),e(jS,FKe),e(ws,vKe),e(E,TKe),e(E,eh),e(eh,oee),e(oee,MKe),e(eh,EKe),e(eh,DS),e(DS,CKe),e(eh,wKe),e(E,AKe),e(E,oh),e(oh,ree),e(ree,yKe),e(oh,LKe),e(oh,GS),e(GS,xKe),e(oh,kKe),e(E,SKe),e(E,rh),e(rh,tee),e(tee,RKe),e(rh,BKe),e(rh,OS),e(OS,PKe),e(rh,$Ke),e(E,IKe),e(E,th),e(th,aee),e(aee,qKe),e(th,NKe),e(th,VS),e(VS,jKe),e(th,DKe),e(E,GKe),e(E,As),e(As,nee),e(nee,OKe),e(As,VKe),e(As,XS),e(XS,XKe),e(As,zKe),e(As,zS),e(zS,QKe),e(As,WKe),e(E,HKe),e(E,ah),e(ah,see),e(see,UKe),e(ah,JKe),e(ah,QS),e(QS,YKe),e(ah,KKe),e(E,ZKe),e(E,ys),e(ys,lee),e(lee,eZe),e(ys,oZe),e(ys,WS),e(WS,rZe),e(ys,tZe),e(ys,HS),e(HS,aZe),e(ys,nZe),e(E,sZe),e(E,Ls),e(Ls,iee),e(iee,lZe),e(Ls,iZe),e(Ls,US),e(US,dZe),e(Ls,cZe),e(Ls,JS),e(JS,fZe),e(Ls,mZe),e(E,gZe),e(E,xs),e(xs,dee),e(dee,hZe),e(xs,pZe),e(xs,YS),e(YS,_Ze),e(xs,uZe),e(xs,KS),e(KS,bZe),e(xs,FZe),e(E,vZe),e(E,ks),e(ks,cee),e(cee,TZe),e(ks,MZe),e(ks,ZS),e(ZS,EZe),e(ks,CZe),e(ks,eR),e(eR,wZe),e(ks,AZe),e(E,yZe),e(E,Ss),e(Ss,fee),e(fee,LZe),e(Ss,xZe),e(Ss,oR),e(oR,kZe),e(Ss,SZe),e(Ss,rR),e(rR,RZe),e(Ss,BZe),e(E,PZe),e(E,Rs),e(Rs,mee),e(mee,$Ze),e(Rs,IZe),e(Rs,tR),e(tR,qZe),e(Rs,NZe),e(Rs,aR),e(aR,jZe),e(Rs,DZe),e(E,GZe),e(E,nh),e(nh,gee),e(gee,OZe),e(nh,VZe),e(nh,nR),e(nR,XZe),e(nh,zZe),e(E,QZe),e(E,sh),e(sh,hee),e(hee,WZe),e(sh,HZe),e(sh,sR),e(sR,UZe),e(sh,JZe),e(E,YZe),e(E,Bs),e(Bs,pee),e(pee,KZe),e(Bs,ZZe),e(Bs,lR),e(lR,eeo),e(Bs,oeo),e(Bs,iR),e(iR,reo),e(Bs,teo),e(E,aeo),e(E,Ps),e(Ps,_ee),e(_ee,neo),e(Ps,seo),e(Ps,dR),e(dR,leo),e(Ps,ieo),e(Ps,cR),e(cR,deo),e(Ps,ceo),e(E,feo),e(E,$s),e($s,uee),e(uee,meo),e($s,geo),e($s,fR),e(fR,heo),e($s,peo),e($s,mR),e(mR,_eo),e($s,ueo),e(E,beo),e(E,lh),e(lh,bee),e(bee,Feo),e(lh,veo),e(lh,gR),e(gR,Teo),e(lh,Meo),e(E,Eeo),e(E,ih),e(ih,Fee),e(Fee,Ceo),e(ih,weo),e(ih,hR),e(hR,Aeo),e(ih,yeo),e(E,Leo),e(E,dh),e(dh,vee),e(vee,xeo),e(dh,keo),e(dh,pR),e(pR,Seo),e(dh,Reo),e(E,Beo),e(E,ch),e(ch,Tee),e(Tee,Peo),e(ch,$eo),e(ch,_R),e(_R,Ieo),e(ch,qeo),e(E,Neo),e(E,fh),e(fh,Mee),e(Mee,jeo),e(fh,Deo),e(fh,uR),e(uR,Geo),e(fh,Oeo),e(E,Veo),e(E,Is),e(Is,Eee),e(Eee,Xeo),e(Is,zeo),e(Is,bR),e(bR,Qeo),e(Is,Weo),e(Is,FR),e(FR,Heo),e(Is,Ueo),e(E,Jeo),e(E,mh),e(mh,Cee),e(Cee,Yeo),e(mh,Keo),e(mh,vR),e(vR,Zeo),e(mh,eoo),e(E,ooo),e(E,gh),e(gh,wee),e(wee,roo),e(gh,too),e(gh,TR),e(TR,aoo),e(gh,noo),e(E,soo),e(E,qs),e(qs,Aee),e(Aee,loo),e(qs,ioo),e(qs,MR),e(MR,doo),e(qs,coo),e(qs,ER),e(ER,foo),e(qs,moo),e(E,goo),e(E,Ns),e(Ns,yee),e(yee,hoo),e(Ns,poo),e(Ns,CR),e(CR,_oo),e(Ns,uoo),e(Ns,wR),e(wR,boo),e(Ns,Foo),e(go,voo),e(go,Lee),e(Lee,Too),e(go,Moo),g(qC,go,null),e(Wo,Eoo),e(Wo,hh),g(NC,hh,null),e(hh,Coo),e(hh,xee),e(xee,woo),b(c,iRe,u),b(c,Wi,u),e(Wi,ph),e(ph,kee),g(jC,kee,null),e(Wi,Aoo),e(Wi,See),e(See,yoo),b(c,dRe,u),b(c,Ho,u),g(DC,Ho,null),e(Ho,Loo),e(Ho,GC),e(GC,xoo),e(GC,AR),e(AR,koo),e(GC,Soo),e(Ho,Roo),e(Ho,OC),e(OC,Boo),e(OC,Ree),e(Ree,Poo),e(OC,$oo),e(Ho,Ioo),e(Ho,$e),g(VC,$e,null),e($e,qoo),e($e,Bee),e(Bee,Noo),e($e,joo),e($e,Va),e(Va,Doo),e(Va,Pee),e(Pee,Goo),e(Va,Ooo),e(Va,$ee),e($ee,Voo),e(Va,Xoo),e(Va,Iee),e(Iee,zoo),e(Va,Qoo),e($e,Woo),e($e,te),e(te,_h),e(_h,qee),e(qee,Hoo),e(_h,Uoo),e(_h,yR),e(yR,Joo),e(_h,Yoo),e(te,Koo),e(te,uh),e(uh,Nee),e(Nee,Zoo),e(uh,ero),e(uh,LR),e(LR,oro),e(uh,rro),e(te,tro),e(te,bh),e(bh,jee),e(jee,aro),e(bh,nro),e(bh,xR),e(xR,sro),e(bh,lro),e(te,iro),e(te,Fh),e(Fh,Dee),e(Dee,dro),e(Fh,cro),e(Fh,kR),e(kR,fro),e(Fh,mro),e(te,gro),e(te,vh),e(vh,Gee),e(Gee,hro),e(vh,pro),e(vh,SR),e(SR,_ro),e(vh,uro),e(te,bro),e(te,Th),e(Th,Oee),e(Oee,Fro),e(Th,vro),e(Th,RR),e(RR,Tro),e(Th,Mro),e(te,Ero),e(te,Mh),e(Mh,Vee),e(Vee,Cro),e(Mh,wro),e(Mh,BR),e(BR,Aro),e(Mh,yro),e(te,Lro),e(te,Eh),e(Eh,Xee),e(Xee,xro),e(Eh,kro),e(Eh,PR),e(PR,Sro),e(Eh,Rro),e(te,Bro),e(te,Ch),e(Ch,zee),e(zee,Pro),e(Ch,$ro),e(Ch,$R),e($R,Iro),e(Ch,qro),e(te,Nro),e(te,wh),e(wh,Qee),e(Qee,jro),e(wh,Dro),e(wh,IR),e(IR,Gro),e(wh,Oro),e(te,Vro),e(te,Ah),e(Ah,Wee),e(Wee,Xro),e(Ah,zro),e(Ah,qR),e(qR,Qro),e(Ah,Wro),e(te,Hro),e(te,yh),e(yh,Hee),e(Hee,Uro),e(yh,Jro),e(yh,NR),e(NR,Yro),e(yh,Kro),e(te,Zro),e(te,Lh),e(Lh,Uee),e(Uee,eto),e(Lh,oto),e(Lh,jR),e(jR,rto),e(Lh,tto),e(te,ato),e(te,xh),e(xh,Jee),e(Jee,nto),e(xh,sto),e(xh,DR),e(DR,lto),e(xh,ito),e(te,dto),e(te,kh),e(kh,Yee),e(Yee,cto),e(kh,fto),e(kh,GR),e(GR,mto),e(kh,gto),e(te,hto),e(te,Sh),e(Sh,Kee),e(Kee,pto),e(Sh,_to),e(Sh,OR),e(OR,uto),e(Sh,bto),e(te,Fto),e(te,Rh),e(Rh,Zee),e(Zee,vto),e(Rh,Tto),e(Rh,VR),e(VR,Mto),e(Rh,Eto),e(te,Cto),e(te,Bh),e(Bh,eoe),e(eoe,wto),e(Bh,Ato),e(Bh,XR),e(XR,yto),e(Bh,Lto),e($e,xto),g(Ph,$e,null),e($e,kto),e($e,ooe),e(ooe,Sto),e($e,Rto),g(XC,$e,null),e(Ho,Bto),e(Ho,$h),g(zC,$h,null),e($h,Pto),e($h,roe),e(roe,$to),b(c,cRe,u),b(c,Hi,u),e(Hi,Ih),e(Ih,toe),g(QC,toe,null),e(Hi,Ito),e(Hi,aoe),e(aoe,qto),b(c,fRe,u),b(c,Uo,u),g(WC,Uo,null),e(Uo,Nto),e(Uo,HC),e(HC,jto),e(HC,zR),e(zR,Dto),e(HC,Gto),e(Uo,Oto),e(Uo,UC),e(UC,Vto),e(UC,noe),e(noe,Xto),e(UC,zto),e(Uo,Qto),e(Uo,Ie),g(JC,Ie,null),e(Ie,Wto),e(Ie,soe),e(soe,Hto),e(Ie,Uto),e(Ie,Ui),e(Ui,Jto),e(Ui,loe),e(loe,Yto),e(Ui,Kto),e(Ui,ioe),e(ioe,Zto),e(Ui,eao),e(Ie,oao),e(Ie,ke),e(ke,qh),e(qh,doe),e(doe,rao),e(qh,tao),e(qh,QR),e(QR,aao),e(qh,nao),e(ke,sao),e(ke,Nh),e(Nh,coe),e(coe,lao),e(Nh,iao),e(Nh,WR),e(WR,dao),e(Nh,cao),e(ke,fao),e(ke,jh),e(jh,foe),e(foe,mao),e(jh,gao),e(jh,HR),e(HR,hao),e(jh,pao),e(ke,_ao),e(ke,Dh),e(Dh,moe),e(moe,uao),e(Dh,bao),e(Dh,UR),e(UR,Fao),e(Dh,vao),e(ke,Tao),e(ke,Gh),e(Gh,goe),e(goe,Mao),e(Gh,Eao),e(Gh,JR),e(JR,Cao),e(Gh,wao),e(ke,Aao),e(ke,Oh),e(Oh,hoe),e(hoe,yao),e(Oh,Lao),e(Oh,YR),e(YR,xao),e(Oh,kao),e(ke,Sao),e(ke,Vh),e(Vh,poe),e(poe,Rao),e(Vh,Bao),e(Vh,KR),e(KR,Pao),e(Vh,$ao),e(ke,Iao),e(ke,Xh),e(Xh,_oe),e(_oe,qao),e(Xh,Nao),e(Xh,ZR),e(ZR,jao),e(Xh,Dao),e(Ie,Gao),g(zh,Ie,null),e(Ie,Oao),e(Ie,uoe),e(uoe,Vao),e(Ie,Xao),g(YC,Ie,null),e(Uo,zao),e(Uo,Qh),g(KC,Qh,null),e(Qh,Qao),e(Qh,boe),e(boe,Wao),b(c,mRe,u),b(c,Ji,u),e(Ji,Wh),e(Wh,Foe),g(ZC,Foe,null),e(Ji,Hao),e(Ji,voe),e(voe,Uao),b(c,gRe,u),b(c,Jo,u),g(e5,Jo,null),e(Jo,Jao),e(Jo,Yi),e(Yi,Yao),e(Yi,eB),e(eB,Kao),e(Yi,Zao),e(Yi,oB),e(oB,eno),e(Yi,ono),e(Jo,rno),e(Jo,o5),e(o5,tno),e(o5,Toe),e(Toe,ano),e(o5,nno),e(Jo,sno),e(Jo,Xr),g(r5,Xr,null),e(Xr,lno),e(Xr,Moe),e(Moe,ino),e(Xr,dno),e(Xr,Ki),e(Ki,cno),e(Ki,Eoe),e(Eoe,fno),e(Ki,mno),e(Ki,rB),e(rB,gno),e(Ki,hno),e(Xr,pno),e(Xr,Coe),e(Coe,_no),e(Xr,uno),g(t5,Xr,null),e(Jo,bno),e(Jo,qe),g(a5,qe,null),e(qe,Fno),e(qe,woe),e(woe,vno),e(qe,Tno),e(qe,Xa),e(Xa,Mno),e(Xa,Aoe),e(Aoe,Eno),e(Xa,Cno),e(Xa,yoe),e(yoe,wno),e(Xa,Ano),e(Xa,Loe),e(Loe,yno),e(Xa,Lno),e(qe,xno),e(qe,T),e(T,Hh),e(Hh,xoe),e(xoe,kno),e(Hh,Sno),e(Hh,tB),e(tB,Rno),e(Hh,Bno),e(T,Pno),e(T,Uh),e(Uh,koe),e(koe,$no),e(Uh,Ino),e(Uh,aB),e(aB,qno),e(Uh,Nno),e(T,jno),e(T,Jh),e(Jh,Soe),e(Soe,Dno),e(Jh,Gno),e(Jh,nB),e(nB,Ono),e(Jh,Vno),e(T,Xno),e(T,Yh),e(Yh,Roe),e(Roe,zno),e(Yh,Qno),e(Yh,sB),e(sB,Wno),e(Yh,Hno),e(T,Uno),e(T,Kh),e(Kh,Boe),e(Boe,Jno),e(Kh,Yno),e(Kh,lB),e(lB,Kno),e(Kh,Zno),e(T,eso),e(T,Zh),e(Zh,Poe),e(Poe,oso),e(Zh,rso),e(Zh,iB),e(iB,tso),e(Zh,aso),e(T,nso),e(T,ep),e(ep,$oe),e($oe,sso),e(ep,lso),e(ep,dB),e(dB,iso),e(ep,dso),e(T,cso),e(T,op),e(op,Ioe),e(Ioe,fso),e(op,mso),e(op,cB),e(cB,gso),e(op,hso),e(T,pso),e(T,rp),e(rp,qoe),e(qoe,_so),e(rp,uso),e(rp,fB),e(fB,bso),e(rp,Fso),e(T,vso),e(T,tp),e(tp,Noe),e(Noe,Tso),e(tp,Mso),e(tp,mB),e(mB,Eso),e(tp,Cso),e(T,wso),e(T,ap),e(ap,joe),e(joe,Aso),e(ap,yso),e(ap,gB),e(gB,Lso),e(ap,xso),e(T,kso),e(T,np),e(np,Doe),e(Doe,Sso),e(np,Rso),e(np,hB),e(hB,Bso),e(np,Pso),e(T,$so),e(T,sp),e(sp,Goe),e(Goe,Iso),e(sp,qso),e(sp,pB),e(pB,Nso),e(sp,jso),e(T,Dso),e(T,lp),e(lp,Ooe),e(Ooe,Gso),e(lp,Oso),e(lp,_B),e(_B,Vso),e(lp,Xso),e(T,zso),e(T,ip),e(ip,Voe),e(Voe,Qso),e(ip,Wso),e(ip,uB),e(uB,Hso),e(ip,Uso),e(T,Jso),e(T,dp),e(dp,Xoe),e(Xoe,Yso),e(dp,Kso),e(dp,bB),e(bB,Zso),e(dp,elo),e(T,olo),e(T,cp),e(cp,zoe),e(zoe,rlo),e(cp,tlo),e(cp,FB),e(FB,alo),e(cp,nlo),e(T,slo),e(T,fp),e(fp,Qoe),e(Qoe,llo),e(fp,ilo),e(fp,vB),e(vB,dlo),e(fp,clo),e(T,flo),e(T,mp),e(mp,Woe),e(Woe,mlo),e(mp,glo),e(mp,TB),e(TB,hlo),e(mp,plo),e(T,_lo),e(T,gp),e(gp,Hoe),e(Hoe,ulo),e(gp,blo),e(gp,MB),e(MB,Flo),e(gp,vlo),e(T,Tlo),e(T,hp),e(hp,Uoe),e(Uoe,Mlo),e(hp,Elo),e(hp,EB),e(EB,Clo),e(hp,wlo),e(T,Alo),e(T,pp),e(pp,Joe),e(Joe,ylo),e(pp,Llo),e(pp,CB),e(CB,xlo),e(pp,klo),e(T,Slo),e(T,_p),e(_p,Yoe),e(Yoe,Rlo),e(_p,Blo),e(_p,wB),e(wB,Plo),e(_p,$lo),e(T,Ilo),e(T,up),e(up,Koe),e(Koe,qlo),e(up,Nlo),e(up,AB),e(AB,jlo),e(up,Dlo),e(T,Glo),e(T,bp),e(bp,Zoe),e(Zoe,Olo),e(bp,Vlo),e(bp,yB),e(yB,Xlo),e(bp,zlo),e(T,Qlo),e(T,Fp),e(Fp,ere),e(ere,Wlo),e(Fp,Hlo),e(Fp,LB),e(LB,Ulo),e(Fp,Jlo),e(T,Ylo),e(T,vp),e(vp,ore),e(ore,Klo),e(vp,Zlo),e(vp,xB),e(xB,eio),e(vp,oio),e(T,rio),e(T,Tp),e(Tp,rre),e(rre,tio),e(Tp,aio),e(Tp,kB),e(kB,nio),e(Tp,sio),e(T,lio),e(T,Mp),e(Mp,tre),e(tre,iio),e(Mp,dio),e(Mp,SB),e(SB,cio),e(Mp,fio),e(T,mio),e(T,js),e(js,are),e(are,gio),e(js,hio),e(js,RB),e(RB,pio),e(js,_io),e(js,BB),e(BB,uio),e(js,bio),e(T,Fio),e(T,Ep),e(Ep,nre),e(nre,vio),e(Ep,Tio),e(Ep,PB),e(PB,Mio),e(Ep,Eio),e(T,Cio),e(T,Cp),e(Cp,sre),e(sre,wio),e(Cp,Aio),e(Cp,$B),e($B,yio),e(Cp,Lio),e(T,xio),e(T,wp),e(wp,lre),e(lre,kio),e(wp,Sio),e(wp,IB),e(IB,Rio),e(wp,Bio),e(T,Pio),e(T,Ap),e(Ap,ire),e(ire,$io),e(Ap,Iio),e(Ap,qB),e(qB,qio),e(Ap,Nio),e(T,jio),e(T,yp),e(yp,dre),e(dre,Dio),e(yp,Gio),e(yp,NB),e(NB,Oio),e(yp,Vio),e(T,Xio),e(T,Lp),e(Lp,cre),e(cre,zio),e(Lp,Qio),e(Lp,jB),e(jB,Wio),e(Lp,Hio),e(T,Uio),e(T,xp),e(xp,fre),e(fre,Jio),e(xp,Yio),e(xp,DB),e(DB,Kio),e(xp,Zio),e(T,edo),e(T,kp),e(kp,mre),e(mre,odo),e(kp,rdo),e(kp,GB),e(GB,tdo),e(kp,ado),e(T,ndo),e(T,Sp),e(Sp,gre),e(gre,sdo),e(Sp,ldo),e(Sp,OB),e(OB,ido),e(Sp,ddo),e(T,cdo),e(T,Rp),e(Rp,hre),e(hre,fdo),e(Rp,mdo),e(Rp,VB),e(VB,gdo),e(Rp,hdo),e(T,pdo),e(T,Bp),e(Bp,pre),e(pre,_do),e(Bp,udo),e(Bp,XB),e(XB,bdo),e(Bp,Fdo),e(T,vdo),e(T,Pp),e(Pp,_re),e(_re,Tdo),e(Pp,Mdo),e(Pp,zB),e(zB,Edo),e(Pp,Cdo),e(T,wdo),e(T,$p),e($p,ure),e(ure,Ado),e($p,ydo),e($p,QB),e(QB,Ldo),e($p,xdo),e(T,kdo),e(T,Ip),e(Ip,bre),e(bre,Sdo),e(Ip,Rdo),e(Ip,WB),e(WB,Bdo),e(Ip,Pdo),e(T,$do),e(T,qp),e(qp,Fre),e(Fre,Ido),e(qp,qdo),e(qp,HB),e(HB,Ndo),e(qp,jdo),e(T,Ddo),e(T,Np),e(Np,vre),e(vre,Gdo),e(Np,Odo),e(Np,UB),e(UB,Vdo),e(Np,Xdo),e(T,zdo),e(T,jp),e(jp,Tre),e(Tre,Qdo),e(jp,Wdo),e(jp,JB),e(JB,Hdo),e(jp,Udo),e(T,Jdo),e(T,Dp),e(Dp,Mre),e(Mre,Ydo),e(Dp,Kdo),e(Dp,YB),e(YB,Zdo),e(Dp,eco),e(T,oco),e(T,Gp),e(Gp,Ere),e(Ere,rco),e(Gp,tco),e(Gp,KB),e(KB,aco),e(Gp,nco),e(T,sco),e(T,Op),e(Op,Cre),e(Cre,lco),e(Op,ico),e(Op,ZB),e(ZB,dco),e(Op,cco),e(T,fco),e(T,Vp),e(Vp,wre),e(wre,mco),e(Vp,gco),e(Vp,eP),e(eP,hco),e(Vp,pco),e(T,_co),e(T,Xp),e(Xp,Are),e(Are,uco),e(Xp,bco),e(Xp,oP),e(oP,Fco),e(Xp,vco),e(T,Tco),e(T,zp),e(zp,yre),e(yre,Mco),e(zp,Eco),e(zp,rP),e(rP,Cco),e(zp,wco),e(T,Aco),e(T,Qp),e(Qp,Lre),e(Lre,yco),e(Qp,Lco),e(Qp,tP),e(tP,xco),e(Qp,kco),e(T,Sco),e(T,Wp),e(Wp,xre),e(xre,Rco),e(Wp,Bco),e(Wp,aP),e(aP,Pco),e(Wp,$co),e(T,Ico),e(T,Hp),e(Hp,kre),e(kre,qco),e(Hp,Nco),e(Hp,nP),e(nP,jco),e(Hp,Dco),e(T,Gco),e(T,Up),e(Up,Sre),e(Sre,Oco),e(Up,Vco),e(Up,sP),e(sP,Xco),e(Up,zco),e(T,Qco),e(T,Jp),e(Jp,Rre),e(Rre,Wco),e(Jp,Hco),e(Jp,lP),e(lP,Uco),e(Jp,Jco),e(T,Yco),e(T,Yp),e(Yp,Bre),e(Bre,Kco),e(Yp,Zco),e(Yp,iP),e(iP,efo),e(Yp,ofo),e(T,rfo),e(T,Kp),e(Kp,Pre),e(Pre,tfo),e(Kp,afo),e(Kp,dP),e(dP,nfo),e(Kp,sfo),e(T,lfo),e(T,Zp),e(Zp,$re),e($re,ifo),e(Zp,dfo),e(Zp,cP),e(cP,cfo),e(Zp,ffo),e(T,mfo),e(T,e_),e(e_,Ire),e(Ire,gfo),e(e_,hfo),e(e_,fP),e(fP,pfo),e(e_,_fo),e(T,ufo),e(T,o_),e(o_,qre),e(qre,bfo),e(o_,Ffo),e(o_,mP),e(mP,vfo),e(o_,Tfo),e(T,Mfo),e(T,r_),e(r_,Nre),e(Nre,Efo),e(r_,Cfo),e(r_,gP),e(gP,wfo),e(r_,Afo),e(T,yfo),e(T,t_),e(t_,jre),e(jre,Lfo),e(t_,xfo),e(t_,hP),e(hP,kfo),e(t_,Sfo),e(T,Rfo),e(T,a_),e(a_,Dre),e(Dre,Bfo),e(a_,Pfo),e(a_,pP),e(pP,$fo),e(a_,Ifo),e(T,qfo),e(T,n_),e(n_,Gre),e(Gre,Nfo),e(n_,jfo),e(n_,_P),e(_P,Dfo),e(n_,Gfo),e(T,Ofo),e(T,s_),e(s_,Ore),e(Ore,Vfo),e(s_,Xfo),e(s_,uP),e(uP,zfo),e(s_,Qfo),e(T,Wfo),e(T,l_),e(l_,Vre),e(Vre,Hfo),e(l_,Ufo),e(l_,bP),e(bP,Jfo),e(l_,Yfo),e(T,Kfo),e(T,i_),e(i_,Xre),e(Xre,Zfo),e(i_,emo),e(i_,FP),e(FP,omo),e(i_,rmo),e(T,tmo),e(T,d_),e(d_,zre),e(zre,amo),e(d_,nmo),e(d_,vP),e(vP,smo),e(d_,lmo),e(T,imo),e(T,c_),e(c_,Qre),e(Qre,dmo),e(c_,cmo),e(c_,TP),e(TP,fmo),e(c_,mmo),e(T,gmo),e(T,f_),e(f_,Wre),e(Wre,hmo),e(f_,pmo),e(f_,MP),e(MP,_mo),e(f_,umo),e(T,bmo),e(T,m_),e(m_,Hre),e(Hre,Fmo),e(m_,vmo),e(m_,EP),e(EP,Tmo),e(m_,Mmo),e(T,Emo),e(T,g_),e(g_,Ure),e(Ure,Cmo),e(g_,wmo),e(g_,CP),e(CP,Amo),e(g_,ymo),e(T,Lmo),e(T,h_),e(h_,Jre),e(Jre,xmo),e(h_,kmo),e(h_,wP),e(wP,Smo),e(h_,Rmo),e(T,Bmo),e(T,p_),e(p_,Yre),e(Yre,Pmo),e(p_,$mo),e(p_,AP),e(AP,Imo),e(p_,qmo),e(T,Nmo),e(T,__),e(__,Kre),e(Kre,jmo),e(__,Dmo),e(__,yP),e(yP,Gmo),e(__,Omo),e(T,Vmo),e(T,u_),e(u_,Zre),e(Zre,Xmo),e(u_,zmo),e(u_,LP),e(LP,Qmo),e(u_,Wmo),e(T,Hmo),e(T,b_),e(b_,ete),e(ete,Umo),e(b_,Jmo),e(b_,xP),e(xP,Ymo),e(b_,Kmo),e(T,Zmo),e(T,F_),e(F_,ote),e(ote,ego),e(F_,ogo),e(F_,kP),e(kP,rgo),e(F_,tgo),e(T,ago),e(T,v_),e(v_,rte),e(rte,ngo),e(v_,sgo),e(v_,SP),e(SP,lgo),e(v_,igo),e(T,dgo),e(T,T_),e(T_,tte),e(tte,cgo),e(T_,fgo),e(T_,RP),e(RP,mgo),e(T_,ggo),e(T,hgo),e(T,M_),e(M_,ate),e(ate,pgo),e(M_,_go),e(M_,BP),e(BP,ugo),e(M_,bgo),e(T,Fgo),e(T,E_),e(E_,nte),e(nte,vgo),e(E_,Tgo),e(E_,PP),e(PP,Mgo),e(E_,Ego),e(T,Cgo),e(T,C_),e(C_,ste),e(ste,wgo),e(C_,Ago),e(C_,$P),e($P,ygo),e(C_,Lgo),e(T,xgo),e(T,w_),e(w_,lte),e(lte,kgo),e(w_,Sgo),e(w_,IP),e(IP,Rgo),e(w_,Bgo),e(T,Pgo),e(T,A_),e(A_,ite),e(ite,$go),e(A_,Igo),e(A_,qP),e(qP,qgo),e(A_,Ngo),e(T,jgo),e(T,y_),e(y_,dte),e(dte,Dgo),e(y_,Ggo),e(y_,NP),e(NP,Ogo),e(y_,Vgo),e(T,Xgo),e(T,L_),e(L_,cte),e(cte,zgo),e(L_,Qgo),e(L_,jP),e(jP,Wgo),e(L_,Hgo),e(T,Ugo),e(T,x_),e(x_,fte),e(fte,Jgo),e(x_,Ygo),e(x_,DP),e(DP,Kgo),e(x_,Zgo),e(T,eho),e(T,k_),e(k_,mte),e(mte,oho),e(k_,rho),e(k_,GP),e(GP,tho),e(k_,aho),e(qe,nho),e(qe,S_),e(S_,sho),e(S_,gte),e(gte,lho),e(S_,iho),e(S_,hte),e(hte,dho),e(qe,cho),e(qe,pte),e(pte,fho),e(qe,mho),g(n5,qe,null),b(c,hRe,u),b(c,Zi,u),e(Zi,R_),e(R_,_te),g(s5,_te,null),e(Zi,gho),e(Zi,ute),e(ute,hho),b(c,pRe,u),b(c,Yo,u),g(l5,Yo,null),e(Yo,pho),e(Yo,ed),e(ed,_ho),e(ed,OP),e(OP,uho),e(ed,bho),e(ed,VP),e(VP,Fho),e(ed,vho),e(Yo,Tho),e(Yo,i5),e(i5,Mho),e(i5,bte),e(bte,Eho),e(i5,Cho),e(Yo,who),e(Yo,zr),g(d5,zr,null),e(zr,Aho),e(zr,Fte),e(Fte,yho),e(zr,Lho),e(zr,od),e(od,xho),e(od,vte),e(vte,kho),e(od,Sho),e(od,XP),e(XP,Rho),e(od,Bho),e(zr,Pho),e(zr,Tte),e(Tte,$ho),e(zr,Iho),g(c5,zr,null),e(Yo,qho),e(Yo,Ne),g(f5,Ne,null),e(Ne,Nho),e(Ne,Mte),e(Mte,jho),e(Ne,Dho),e(Ne,za),e(za,Gho),e(za,Ete),e(Ete,Oho),e(za,Vho),e(za,Cte),e(Cte,Xho),e(za,zho),e(za,wte),e(wte,Qho),e(za,Who),e(Ne,Hho),e(Ne,S),e(S,B_),e(B_,Ate),e(Ate,Uho),e(B_,Jho),e(B_,zP),e(zP,Yho),e(B_,Kho),e(S,Zho),e(S,P_),e(P_,yte),e(yte,epo),e(P_,opo),e(P_,QP),e(QP,rpo),e(P_,tpo),e(S,apo),e(S,$_),e($_,Lte),e(Lte,npo),e($_,spo),e($_,WP),e(WP,lpo),e($_,ipo),e(S,dpo),e(S,I_),e(I_,xte),e(xte,cpo),e(I_,fpo),e(I_,HP),e(HP,mpo),e(I_,gpo),e(S,hpo),e(S,q_),e(q_,kte),e(kte,ppo),e(q_,_po),e(q_,UP),e(UP,upo),e(q_,bpo),e(S,Fpo),e(S,N_),e(N_,Ste),e(Ste,vpo),e(N_,Tpo),e(N_,JP),e(JP,Mpo),e(N_,Epo),e(S,Cpo),e(S,j_),e(j_,Rte),e(Rte,wpo),e(j_,Apo),e(j_,YP),e(YP,ypo),e(j_,Lpo),e(S,xpo),e(S,D_),e(D_,Bte),e(Bte,kpo),e(D_,Spo),e(D_,KP),e(KP,Rpo),e(D_,Bpo),e(S,Ppo),e(S,G_),e(G_,Pte),e(Pte,$po),e(G_,Ipo),e(G_,ZP),e(ZP,qpo),e(G_,Npo),e(S,jpo),e(S,O_),e(O_,$te),e($te,Dpo),e(O_,Gpo),e(O_,e$),e(e$,Opo),e(O_,Vpo),e(S,Xpo),e(S,V_),e(V_,Ite),e(Ite,zpo),e(V_,Qpo),e(V_,o$),e(o$,Wpo),e(V_,Hpo),e(S,Upo),e(S,X_),e(X_,qte),e(qte,Jpo),e(X_,Ypo),e(X_,r$),e(r$,Kpo),e(X_,Zpo),e(S,e_o),e(S,z_),e(z_,Nte),e(Nte,o_o),e(z_,r_o),e(z_,t$),e(t$,t_o),e(z_,a_o),e(S,n_o),e(S,Q_),e(Q_,jte),e(jte,s_o),e(Q_,l_o),e(Q_,a$),e(a$,i_o),e(Q_,d_o),e(S,c_o),e(S,W_),e(W_,Dte),e(Dte,f_o),e(W_,m_o),e(W_,n$),e(n$,g_o),e(W_,h_o),e(S,p_o),e(S,H_),e(H_,Gte),e(Gte,__o),e(H_,u_o),e(H_,s$),e(s$,b_o),e(H_,F_o),e(S,v_o),e(S,U_),e(U_,Ote),e(Ote,T_o),e(U_,M_o),e(U_,l$),e(l$,E_o),e(U_,C_o),e(S,w_o),e(S,J_),e(J_,Vte),e(Vte,A_o),e(J_,y_o),e(J_,i$),e(i$,L_o),e(J_,x_o),e(S,k_o),e(S,Y_),e(Y_,Xte),e(Xte,S_o),e(Y_,R_o),e(Y_,d$),e(d$,B_o),e(Y_,P_o),e(S,$_o),e(S,K_),e(K_,zte),e(zte,I_o),e(K_,q_o),e(K_,c$),e(c$,N_o),e(K_,j_o),e(S,D_o),e(S,Z_),e(Z_,Qte),e(Qte,G_o),e(Z_,O_o),e(Z_,f$),e(f$,V_o),e(Z_,X_o),e(S,z_o),e(S,eu),e(eu,Wte),e(Wte,Q_o),e(eu,W_o),e(eu,m$),e(m$,H_o),e(eu,U_o),e(S,J_o),e(S,ou),e(ou,Hte),e(Hte,Y_o),e(ou,K_o),e(ou,g$),e(g$,Z_o),e(ou,euo),e(S,ouo),e(S,ru),e(ru,Ute),e(Ute,ruo),e(ru,tuo),e(ru,h$),e(h$,auo),e(ru,nuo),e(S,suo),e(S,tu),e(tu,Jte),e(Jte,luo),e(tu,iuo),e(tu,p$),e(p$,duo),e(tu,cuo),e(S,fuo),e(S,au),e(au,Yte),e(Yte,muo),e(au,guo),e(au,_$),e(_$,huo),e(au,puo),e(S,_uo),e(S,nu),e(nu,Kte),e(Kte,uuo),e(nu,buo),e(nu,u$),e(u$,Fuo),e(nu,vuo),e(S,Tuo),e(S,su),e(su,Zte),e(Zte,Muo),e(su,Euo),e(su,b$),e(b$,Cuo),e(su,wuo),e(S,Auo),e(S,lu),e(lu,eae),e(eae,yuo),e(lu,Luo),e(lu,F$),e(F$,xuo),e(lu,kuo),e(S,Suo),e(S,iu),e(iu,oae),e(oae,Ruo),e(iu,Buo),e(iu,v$),e(v$,Puo),e(iu,$uo),e(S,Iuo),e(S,du),e(du,rae),e(rae,quo),e(du,Nuo),e(du,T$),e(T$,juo),e(du,Duo),e(S,Guo),e(S,cu),e(cu,tae),e(tae,Ouo),e(cu,Vuo),e(cu,M$),e(M$,Xuo),e(cu,zuo),e(S,Quo),e(S,fu),e(fu,aae),e(aae,Wuo),e(fu,Huo),e(fu,E$),e(E$,Uuo),e(fu,Juo),e(S,Yuo),e(S,mu),e(mu,nae),e(nae,Kuo),e(mu,Zuo),e(mu,C$),e(C$,e1o),e(mu,o1o),e(S,r1o),e(S,gu),e(gu,sae),e(sae,t1o),e(gu,a1o),e(gu,w$),e(w$,n1o),e(gu,s1o),e(S,l1o),e(S,hu),e(hu,lae),e(lae,i1o),e(hu,d1o),e(hu,A$),e(A$,c1o),e(hu,f1o),e(S,m1o),e(S,pu),e(pu,iae),e(iae,g1o),e(pu,h1o),e(pu,y$),e(y$,p1o),e(pu,_1o),e(S,u1o),e(S,_u),e(_u,dae),e(dae,b1o),e(_u,F1o),e(_u,L$),e(L$,v1o),e(_u,T1o),e(S,M1o),e(S,uu),e(uu,cae),e(cae,E1o),e(uu,C1o),e(uu,x$),e(x$,w1o),e(uu,A1o),e(Ne,y1o),e(Ne,bu),e(bu,L1o),e(bu,fae),e(fae,x1o),e(bu,k1o),e(bu,mae),e(mae,S1o),e(Ne,R1o),e(Ne,gae),e(gae,B1o),e(Ne,P1o),g(m5,Ne,null),b(c,_Re,u),b(c,rd,u),e(rd,Fu),e(Fu,hae),g(g5,hae,null),e(rd,$1o),e(rd,pae),e(pae,I1o),b(c,uRe,u),b(c,Ko,u),g(h5,Ko,null),e(Ko,q1o),e(Ko,td),e(td,N1o),e(td,k$),e(k$,j1o),e(td,D1o),e(td,S$),e(S$,G1o),e(td,O1o),e(Ko,V1o),e(Ko,p5),e(p5,X1o),e(p5,_ae),e(_ae,z1o),e(p5,Q1o),e(Ko,W1o),e(Ko,Qr),g(_5,Qr,null),e(Qr,H1o),e(Qr,uae),e(uae,U1o),e(Qr,J1o),e(Qr,ad),e(ad,Y1o),e(ad,bae),e(bae,K1o),e(ad,Z1o),e(ad,R$),e(R$,e4o),e(ad,o4o),e(Qr,r4o),e(Qr,Fae),e(Fae,t4o),e(Qr,a4o),g(u5,Qr,null),e(Ko,n4o),e(Ko,je),g(b5,je,null),e(je,s4o),e(je,vae),e(vae,l4o),e(je,i4o),e(je,Qa),e(Qa,d4o),e(Qa,Tae),e(Tae,c4o),e(Qa,f4o),e(Qa,Mae),e(Mae,m4o),e(Qa,g4o),e(Qa,Eae),e(Eae,h4o),e(Qa,p4o),e(je,_4o),e(je,$),e($,vu),e(vu,Cae),e(Cae,u4o),e(vu,b4o),e(vu,B$),e(B$,F4o),e(vu,v4o),e($,T4o),e($,Tu),e(Tu,wae),e(wae,M4o),e(Tu,E4o),e(Tu,P$),e(P$,C4o),e(Tu,w4o),e($,A4o),e($,Mu),e(Mu,Aae),e(Aae,y4o),e(Mu,L4o),e(Mu,$$),e($$,x4o),e(Mu,k4o),e($,S4o),e($,Eu),e(Eu,yae),e(yae,R4o),e(Eu,B4o),e(Eu,I$),e(I$,P4o),e(Eu,$4o),e($,I4o),e($,Cu),e(Cu,Lae),e(Lae,q4o),e(Cu,N4o),e(Cu,q$),e(q$,j4o),e(Cu,D4o),e($,G4o),e($,wu),e(wu,xae),e(xae,O4o),e(wu,V4o),e(wu,N$),e(N$,X4o),e(wu,z4o),e($,Q4o),e($,Au),e(Au,kae),e(kae,W4o),e(Au,H4o),e(Au,j$),e(j$,U4o),e(Au,J4o),e($,Y4o),e($,yu),e(yu,Sae),e(Sae,K4o),e(yu,Z4o),e(yu,D$),e(D$,ebo),e(yu,obo),e($,rbo),e($,Lu),e(Lu,Rae),e(Rae,tbo),e(Lu,abo),e(Lu,G$),e(G$,nbo),e(Lu,sbo),e($,lbo),e($,xu),e(xu,Bae),e(Bae,ibo),e(xu,dbo),e(xu,O$),e(O$,cbo),e(xu,fbo),e($,mbo),e($,ku),e(ku,Pae),e(Pae,gbo),e(ku,hbo),e(ku,V$),e(V$,pbo),e(ku,_bo),e($,ubo),e($,Su),e(Su,$ae),e($ae,bbo),e(Su,Fbo),e(Su,X$),e(X$,vbo),e(Su,Tbo),e($,Mbo),e($,Ru),e(Ru,Iae),e(Iae,Ebo),e(Ru,Cbo),e(Ru,z$),e(z$,wbo),e(Ru,Abo),e($,ybo),e($,Bu),e(Bu,qae),e(qae,Lbo),e(Bu,xbo),e(Bu,Q$),e(Q$,kbo),e(Bu,Sbo),e($,Rbo),e($,Pu),e(Pu,Nae),e(Nae,Bbo),e(Pu,Pbo),e(Pu,W$),e(W$,$bo),e(Pu,Ibo),e($,qbo),e($,$u),e($u,jae),e(jae,Nbo),e($u,jbo),e($u,H$),e(H$,Dbo),e($u,Gbo),e($,Obo),e($,Iu),e(Iu,Dae),e(Dae,Vbo),e(Iu,Xbo),e(Iu,U$),e(U$,zbo),e(Iu,Qbo),e($,Wbo),e($,qu),e(qu,Gae),e(Gae,Hbo),e(qu,Ubo),e(qu,J$),e(J$,Jbo),e(qu,Ybo),e($,Kbo),e($,Nu),e(Nu,Oae),e(Oae,Zbo),e(Nu,e3o),e(Nu,Y$),e(Y$,o3o),e(Nu,r3o),e($,t3o),e($,ju),e(ju,Vae),e(Vae,a3o),e(ju,n3o),e(ju,K$),e(K$,s3o),e(ju,l3o),e($,i3o),e($,Du),e(Du,Xae),e(Xae,d3o),e(Du,c3o),e(Du,Z$),e(Z$,f3o),e(Du,m3o),e($,g3o),e($,Gu),e(Gu,zae),e(zae,h3o),e(Gu,p3o),e(Gu,eI),e(eI,_3o),e(Gu,u3o),e($,b3o),e($,Ou),e(Ou,Qae),e(Qae,F3o),e(Ou,v3o),e(Ou,oI),e(oI,T3o),e(Ou,M3o),e($,E3o),e($,Vu),e(Vu,Wae),e(Wae,C3o),e(Vu,w3o),e(Vu,rI),e(rI,A3o),e(Vu,y3o),e($,L3o),e($,Xu),e(Xu,Hae),e(Hae,x3o),e(Xu,k3o),e(Xu,tI),e(tI,S3o),e(Xu,R3o),e($,B3o),e($,zu),e(zu,Uae),e(Uae,P3o),e(zu,$3o),e(zu,aI),e(aI,I3o),e(zu,q3o),e($,N3o),e($,Qu),e(Qu,Jae),e(Jae,j3o),e(Qu,D3o),e(Qu,nI),e(nI,G3o),e(Qu,O3o),e($,V3o),e($,Wu),e(Wu,Yae),e(Yae,X3o),e(Wu,z3o),e(Wu,sI),e(sI,Q3o),e(Wu,W3o),e($,H3o),e($,Hu),e(Hu,Kae),e(Kae,U3o),e(Hu,J3o),e(Hu,lI),e(lI,Y3o),e(Hu,K3o),e($,Z3o),e($,Uu),e(Uu,Zae),e(Zae,e2o),e(Uu,o2o),e(Uu,iI),e(iI,r2o),e(Uu,t2o),e($,a2o),e($,Ju),e(Ju,ene),e(ene,n2o),e(Ju,s2o),e(Ju,dI),e(dI,l2o),e(Ju,i2o),e($,d2o),e($,Yu),e(Yu,one),e(one,c2o),e(Yu,f2o),e(Yu,cI),e(cI,m2o),e(Yu,g2o),e($,h2o),e($,Ku),e(Ku,rne),e(rne,p2o),e(Ku,_2o),e(Ku,fI),e(fI,u2o),e(Ku,b2o),e($,F2o),e($,Zu),e(Zu,tne),e(tne,v2o),e(Zu,T2o),e(Zu,mI),e(mI,M2o),e(Zu,E2o),e($,C2o),e($,e1),e(e1,ane),e(ane,w2o),e(e1,A2o),e(e1,gI),e(gI,y2o),e(e1,L2o),e(je,x2o),e(je,o1),e(o1,k2o),e(o1,nne),e(nne,S2o),e(o1,R2o),e(o1,sne),e(sne,B2o),e(je,P2o),e(je,lne),e(lne,$2o),e(je,I2o),g(F5,je,null),b(c,bRe,u),b(c,nd,u),e(nd,r1),e(r1,ine),g(v5,ine,null),e(nd,q2o),e(nd,dne),e(dne,N2o),b(c,FRe,u),b(c,Zo,u),g(T5,Zo,null),e(Zo,j2o),e(Zo,sd),e(sd,D2o),e(sd,hI),e(hI,G2o),e(sd,O2o),e(sd,pI),e(pI,V2o),e(sd,X2o),e(Zo,z2o),e(Zo,M5),e(M5,Q2o),e(M5,cne),e(cne,W2o),e(M5,H2o),e(Zo,U2o),e(Zo,Wr),g(E5,Wr,null),e(Wr,J2o),e(Wr,fne),e(fne,Y2o),e(Wr,K2o),e(Wr,ld),e(ld,Z2o),e(ld,mne),e(mne,eFo),e(ld,oFo),e(ld,_I),e(_I,rFo),e(ld,tFo),e(Wr,aFo),e(Wr,gne),e(gne,nFo),e(Wr,sFo),g(C5,Wr,null),e(Zo,lFo),e(Zo,De),g(w5,De,null),e(De,iFo),e(De,hne),e(hne,dFo),e(De,cFo),e(De,Wa),e(Wa,fFo),e(Wa,pne),e(pne,mFo),e(Wa,gFo),e(Wa,_ne),e(_ne,hFo),e(Wa,pFo),e(Wa,une),e(une,_Fo),e(Wa,uFo),e(De,bFo),e(De,I),e(I,t1),e(t1,bne),e(bne,FFo),e(t1,vFo),e(t1,uI),e(uI,TFo),e(t1,MFo),e(I,EFo),e(I,a1),e(a1,Fne),e(Fne,CFo),e(a1,wFo),e(a1,bI),e(bI,AFo),e(a1,yFo),e(I,LFo),e(I,n1),e(n1,vne),e(vne,xFo),e(n1,kFo),e(n1,FI),e(FI,SFo),e(n1,RFo),e(I,BFo),e(I,s1),e(s1,Tne),e(Tne,PFo),e(s1,$Fo),e(s1,vI),e(vI,IFo),e(s1,qFo),e(I,NFo),e(I,l1),e(l1,Mne),e(Mne,jFo),e(l1,DFo),e(l1,TI),e(TI,GFo),e(l1,OFo),e(I,VFo),e(I,i1),e(i1,Ene),e(Ene,XFo),e(i1,zFo),e(i1,MI),e(MI,QFo),e(i1,WFo),e(I,HFo),e(I,d1),e(d1,Cne),e(Cne,UFo),e(d1,JFo),e(d1,EI),e(EI,YFo),e(d1,KFo),e(I,ZFo),e(I,c1),e(c1,wne),e(wne,evo),e(c1,ovo),e(c1,CI),e(CI,rvo),e(c1,tvo),e(I,avo),e(I,f1),e(f1,Ane),e(Ane,nvo),e(f1,svo),e(f1,wI),e(wI,lvo),e(f1,ivo),e(I,dvo),e(I,m1),e(m1,yne),e(yne,cvo),e(m1,fvo),e(m1,AI),e(AI,mvo),e(m1,gvo),e(I,hvo),e(I,g1),e(g1,Lne),e(Lne,pvo),e(g1,_vo),e(g1,yI),e(yI,uvo),e(g1,bvo),e(I,Fvo),e(I,h1),e(h1,xne),e(xne,vvo),e(h1,Tvo),e(h1,LI),e(LI,Mvo),e(h1,Evo),e(I,Cvo),e(I,p1),e(p1,kne),e(kne,wvo),e(p1,Avo),e(p1,xI),e(xI,yvo),e(p1,Lvo),e(I,xvo),e(I,_1),e(_1,Sne),e(Sne,kvo),e(_1,Svo),e(_1,kI),e(kI,Rvo),e(_1,Bvo),e(I,Pvo),e(I,u1),e(u1,Rne),e(Rne,$vo),e(u1,Ivo),e(u1,SI),e(SI,qvo),e(u1,Nvo),e(I,jvo),e(I,b1),e(b1,Bne),e(Bne,Dvo),e(b1,Gvo),e(b1,RI),e(RI,Ovo),e(b1,Vvo),e(I,Xvo),e(I,F1),e(F1,Pne),e(Pne,zvo),e(F1,Qvo),e(F1,BI),e(BI,Wvo),e(F1,Hvo),e(I,Uvo),e(I,v1),e(v1,$ne),e($ne,Jvo),e(v1,Yvo),e(v1,PI),e(PI,Kvo),e(v1,Zvo),e(I,e6o),e(I,T1),e(T1,Ine),e(Ine,o6o),e(T1,r6o),e(T1,$I),e($I,t6o),e(T1,a6o),e(I,n6o),e(I,M1),e(M1,qne),e(qne,s6o),e(M1,l6o),e(M1,II),e(II,i6o),e(M1,d6o),e(I,c6o),e(I,E1),e(E1,Nne),e(Nne,f6o),e(E1,m6o),e(E1,qI),e(qI,g6o),e(E1,h6o),e(I,p6o),e(I,C1),e(C1,jne),e(jne,_6o),e(C1,u6o),e(C1,NI),e(NI,b6o),e(C1,F6o),e(I,v6o),e(I,w1),e(w1,Dne),e(Dne,T6o),e(w1,M6o),e(w1,jI),e(jI,E6o),e(w1,C6o),e(I,w6o),e(I,A1),e(A1,Gne),e(Gne,A6o),e(A1,y6o),e(A1,DI),e(DI,L6o),e(A1,x6o),e(I,k6o),e(I,y1),e(y1,One),e(One,S6o),e(y1,R6o),e(y1,GI),e(GI,B6o),e(y1,P6o),e(I,$6o),e(I,L1),e(L1,Vne),e(Vne,I6o),e(L1,q6o),e(L1,OI),e(OI,N6o),e(L1,j6o),e(I,D6o),e(I,x1),e(x1,Xne),e(Xne,G6o),e(x1,O6o),e(x1,VI),e(VI,V6o),e(x1,X6o),e(I,z6o),e(I,k1),e(k1,zne),e(zne,Q6o),e(k1,W6o),e(k1,XI),e(XI,H6o),e(k1,U6o),e(I,J6o),e(I,S1),e(S1,Qne),e(Qne,Y6o),e(S1,K6o),e(S1,zI),e(zI,Z6o),e(S1,eTo),e(I,oTo),e(I,R1),e(R1,Wne),e(Wne,rTo),e(R1,tTo),e(R1,QI),e(QI,aTo),e(R1,nTo),e(I,sTo),e(I,B1),e(B1,Hne),e(Hne,lTo),e(B1,iTo),e(B1,Une),e(Une,dTo),e(B1,cTo),e(I,fTo),e(I,P1),e(P1,Jne),e(Jne,mTo),e(P1,gTo),e(P1,WI),e(WI,hTo),e(P1,pTo),e(I,_To),e(I,$1),e($1,Yne),e(Yne,uTo),e($1,bTo),e($1,HI),e(HI,FTo),e($1,vTo),e(I,TTo),e(I,I1),e(I1,Kne),e(Kne,MTo),e(I1,ETo),e(I1,UI),e(UI,CTo),e(I1,wTo),e(I,ATo),e(I,q1),e(q1,Zne),e(Zne,yTo),e(q1,LTo),e(q1,JI),e(JI,xTo),e(q1,kTo),e(De,STo),e(De,N1),e(N1,RTo),e(N1,ese),e(ese,BTo),e(N1,PTo),e(N1,ose),e(ose,$To),e(De,ITo),e(De,rse),e(rse,qTo),e(De,NTo),g(A5,De,null),b(c,vRe,u),b(c,id,u),e(id,j1),e(j1,tse),g(y5,tse,null),e(id,jTo),e(id,ase),e(ase,DTo),b(c,TRe,u),b(c,er,u),g(L5,er,null),e(er,GTo),e(er,dd),e(dd,OTo),e(dd,YI),e(YI,VTo),e(dd,XTo),e(dd,KI),e(KI,zTo),e(dd,QTo),e(er,WTo),e(er,x5),e(x5,HTo),e(x5,nse),e(nse,UTo),e(x5,JTo),e(er,YTo),e(er,Hr),g(k5,Hr,null),e(Hr,KTo),e(Hr,sse),e(sse,ZTo),e(Hr,e7o),e(Hr,cd),e(cd,o7o),e(cd,lse),e(lse,r7o),e(cd,t7o),e(cd,ZI),e(ZI,a7o),e(cd,n7o),e(Hr,s7o),e(Hr,ise),e(ise,l7o),e(Hr,i7o),g(S5,Hr,null),e(er,d7o),e(er,Ge),g(R5,Ge,null),e(Ge,c7o),e(Ge,dse),e(dse,f7o),e(Ge,m7o),e(Ge,Ha),e(Ha,g7o),e(Ha,cse),e(cse,h7o),e(Ha,p7o),e(Ha,fse),e(fse,_7o),e(Ha,u7o),e(Ha,mse),e(mse,b7o),e(Ha,F7o),e(Ge,v7o),e(Ge,ae),e(ae,D1),e(D1,gse),e(gse,T7o),e(D1,M7o),e(D1,eq),e(eq,E7o),e(D1,C7o),e(ae,w7o),e(ae,G1),e(G1,hse),e(hse,A7o),e(G1,y7o),e(G1,oq),e(oq,L7o),e(G1,x7o),e(ae,k7o),e(ae,O1),e(O1,pse),e(pse,S7o),e(O1,R7o),e(O1,rq),e(rq,B7o),e(O1,P7o),e(ae,$7o),e(ae,V1),e(V1,_se),e(_se,I7o),e(V1,q7o),e(V1,tq),e(tq,N7o),e(V1,j7o),e(ae,D7o),e(ae,X1),e(X1,use),e(use,G7o),e(X1,O7o),e(X1,aq),e(aq,V7o),e(X1,X7o),e(ae,z7o),e(ae,z1),e(z1,bse),e(bse,Q7o),e(z1,W7o),e(z1,nq),e(nq,H7o),e(z1,U7o),e(ae,J7o),e(ae,Q1),e(Q1,Fse),e(Fse,Y7o),e(Q1,K7o),e(Q1,sq),e(sq,Z7o),e(Q1,eMo),e(ae,oMo),e(ae,W1),e(W1,vse),e(vse,rMo),e(W1,tMo),e(W1,lq),e(lq,aMo),e(W1,nMo),e(ae,sMo),e(ae,H1),e(H1,Tse),e(Tse,lMo),e(H1,iMo),e(H1,iq),e(iq,dMo),e(H1,cMo),e(ae,fMo),e(ae,U1),e(U1,Mse),e(Mse,mMo),e(U1,gMo),e(U1,dq),e(dq,hMo),e(U1,pMo),e(ae,_Mo),e(ae,J1),e(J1,Ese),e(Ese,uMo),e(J1,bMo),e(J1,cq),e(cq,FMo),e(J1,vMo),e(ae,TMo),e(ae,Y1),e(Y1,Cse),e(Cse,MMo),e(Y1,EMo),e(Y1,fq),e(fq,CMo),e(Y1,wMo),e(ae,AMo),e(ae,K1),e(K1,wse),e(wse,yMo),e(K1,LMo),e(K1,mq),e(mq,xMo),e(K1,kMo),e(ae,SMo),e(ae,Z1),e(Z1,Ase),e(Ase,RMo),e(Z1,BMo),e(Z1,gq),e(gq,PMo),e(Z1,$Mo),e(ae,IMo),e(ae,e4),e(e4,yse),e(yse,qMo),e(e4,NMo),e(e4,hq),e(hq,jMo),e(e4,DMo),e(ae,GMo),e(ae,o4),e(o4,Lse),e(Lse,OMo),e(o4,VMo),e(o4,pq),e(pq,XMo),e(o4,zMo),e(ae,QMo),e(ae,r4),e(r4,xse),e(xse,WMo),e(r4,HMo),e(r4,_q),e(_q,UMo),e(r4,JMo),e(Ge,YMo),e(Ge,t4),e(t4,KMo),e(t4,kse),e(kse,ZMo),e(t4,eEo),e(t4,Sse),e(Sse,oEo),e(Ge,rEo),e(Ge,Rse),e(Rse,tEo),e(Ge,aEo),g(B5,Ge,null),b(c,MRe,u),b(c,fd,u),e(fd,a4),e(a4,Bse),g(P5,Bse,null),e(fd,nEo),e(fd,Pse),e(Pse,sEo),b(c,ERe,u),b(c,or,u),g($5,or,null),e(or,lEo),e(or,md),e(md,iEo),e(md,uq),e(uq,dEo),e(md,cEo),e(md,bq),e(bq,fEo),e(md,mEo),e(or,gEo),e(or,I5),e(I5,hEo),e(I5,$se),e($se,pEo),e(I5,_Eo),e(or,uEo),e(or,Ur),g(q5,Ur,null),e(Ur,bEo),e(Ur,Ise),e(Ise,FEo),e(Ur,vEo),e(Ur,gd),e(gd,TEo),e(gd,qse),e(qse,MEo),e(gd,EEo),e(gd,Fq),e(Fq,CEo),e(gd,wEo),e(Ur,AEo),e(Ur,Nse),e(Nse,yEo),e(Ur,LEo),g(N5,Ur,null),e(or,xEo),e(or,Oe),g(j5,Oe,null),e(Oe,kEo),e(Oe,jse),e(jse,SEo),e(Oe,REo),e(Oe,Ua),e(Ua,BEo),e(Ua,Dse),e(Dse,PEo),e(Ua,$Eo),e(Ua,Gse),e(Gse,IEo),e(Ua,qEo),e(Ua,Ose),e(Ose,NEo),e(Ua,jEo),e(Oe,DEo),e(Oe,y),e(y,n4),e(n4,Vse),e(Vse,GEo),e(n4,OEo),e(n4,vq),e(vq,VEo),e(n4,XEo),e(y,zEo),e(y,s4),e(s4,Xse),e(Xse,QEo),e(s4,WEo),e(s4,Tq),e(Tq,HEo),e(s4,UEo),e(y,JEo),e(y,l4),e(l4,zse),e(zse,YEo),e(l4,KEo),e(l4,Mq),e(Mq,ZEo),e(l4,eCo),e(y,oCo),e(y,i4),e(i4,Qse),e(Qse,rCo),e(i4,tCo),e(i4,Eq),e(Eq,aCo),e(i4,nCo),e(y,sCo),e(y,d4),e(d4,Wse),e(Wse,lCo),e(d4,iCo),e(d4,Cq),e(Cq,dCo),e(d4,cCo),e(y,fCo),e(y,c4),e(c4,Hse),e(Hse,mCo),e(c4,gCo),e(c4,wq),e(wq,hCo),e(c4,pCo),e(y,_Co),e(y,f4),e(f4,Use),e(Use,uCo),e(f4,bCo),e(f4,Aq),e(Aq,FCo),e(f4,vCo),e(y,TCo),e(y,m4),e(m4,Jse),e(Jse,MCo),e(m4,ECo),e(m4,yq),e(yq,CCo),e(m4,wCo),e(y,ACo),e(y,g4),e(g4,Yse),e(Yse,yCo),e(g4,LCo),e(g4,Lq),e(Lq,xCo),e(g4,kCo),e(y,SCo),e(y,h4),e(h4,Kse),e(Kse,RCo),e(h4,BCo),e(h4,xq),e(xq,PCo),e(h4,$Co),e(y,ICo),e(y,p4),e(p4,Zse),e(Zse,qCo),e(p4,NCo),e(p4,kq),e(kq,jCo),e(p4,DCo),e(y,GCo),e(y,_4),e(_4,ele),e(ele,OCo),e(_4,VCo),e(_4,Sq),e(Sq,XCo),e(_4,zCo),e(y,QCo),e(y,u4),e(u4,ole),e(ole,WCo),e(u4,HCo),e(u4,Rq),e(Rq,UCo),e(u4,JCo),e(y,YCo),e(y,b4),e(b4,rle),e(rle,KCo),e(b4,ZCo),e(b4,Bq),e(Bq,e5o),e(b4,o5o),e(y,r5o),e(y,F4),e(F4,tle),e(tle,t5o),e(F4,a5o),e(F4,Pq),e(Pq,n5o),e(F4,s5o),e(y,l5o),e(y,v4),e(v4,ale),e(ale,i5o),e(v4,d5o),e(v4,$q),e($q,c5o),e(v4,f5o),e(y,m5o),e(y,T4),e(T4,nle),e(nle,g5o),e(T4,h5o),e(T4,Iq),e(Iq,p5o),e(T4,_5o),e(y,u5o),e(y,M4),e(M4,sle),e(sle,b5o),e(M4,F5o),e(M4,qq),e(qq,v5o),e(M4,T5o),e(y,M5o),e(y,E4),e(E4,lle),e(lle,E5o),e(E4,C5o),e(E4,Nq),e(Nq,w5o),e(E4,A5o),e(y,y5o),e(y,C4),e(C4,ile),e(ile,L5o),e(C4,x5o),e(C4,jq),e(jq,k5o),e(C4,S5o),e(y,R5o),e(y,w4),e(w4,dle),e(dle,B5o),e(w4,P5o),e(w4,Dq),e(Dq,$5o),e(w4,I5o),e(y,q5o),e(y,A4),e(A4,cle),e(cle,N5o),e(A4,j5o),e(A4,Gq),e(Gq,D5o),e(A4,G5o),e(y,O5o),e(y,y4),e(y4,fle),e(fle,V5o),e(y4,X5o),e(y4,Oq),e(Oq,z5o),e(y4,Q5o),e(y,W5o),e(y,L4),e(L4,mle),e(mle,H5o),e(L4,U5o),e(L4,Vq),e(Vq,J5o),e(L4,Y5o),e(y,K5o),e(y,x4),e(x4,gle),e(gle,Z5o),e(x4,ewo),e(x4,Xq),e(Xq,owo),e(x4,rwo),e(y,two),e(y,k4),e(k4,hle),e(hle,awo),e(k4,nwo),e(k4,zq),e(zq,swo),e(k4,lwo),e(y,iwo),e(y,S4),e(S4,ple),e(ple,dwo),e(S4,cwo),e(S4,Qq),e(Qq,fwo),e(S4,mwo),e(y,gwo),e(y,R4),e(R4,_le),e(_le,hwo),e(R4,pwo),e(R4,Wq),e(Wq,_wo),e(R4,uwo),e(y,bwo),e(y,B4),e(B4,ule),e(ule,Fwo),e(B4,vwo),e(B4,Hq),e(Hq,Two),e(B4,Mwo),e(y,Ewo),e(y,P4),e(P4,ble),e(ble,Cwo),e(P4,wwo),e(P4,Uq),e(Uq,Awo),e(P4,ywo),e(y,Lwo),e(y,$4),e($4,Fle),e(Fle,xwo),e($4,kwo),e($4,Jq),e(Jq,Swo),e($4,Rwo),e(y,Bwo),e(y,I4),e(I4,vle),e(vle,Pwo),e(I4,$wo),e(I4,Yq),e(Yq,Iwo),e(I4,qwo),e(y,Nwo),e(y,q4),e(q4,Tle),e(Tle,jwo),e(q4,Dwo),e(q4,Kq),e(Kq,Gwo),e(q4,Owo),e(y,Vwo),e(y,N4),e(N4,Mle),e(Mle,Xwo),e(N4,zwo),e(N4,Zq),e(Zq,Qwo),e(N4,Wwo),e(y,Hwo),e(y,j4),e(j4,Ele),e(Ele,Uwo),e(j4,Jwo),e(j4,eN),e(eN,Ywo),e(j4,Kwo),e(y,Zwo),e(y,D4),e(D4,Cle),e(Cle,eAo),e(D4,oAo),e(D4,oN),e(oN,rAo),e(D4,tAo),e(y,aAo),e(y,G4),e(G4,wle),e(wle,nAo),e(G4,sAo),e(G4,rN),e(rN,lAo),e(G4,iAo),e(y,dAo),e(y,O4),e(O4,Ale),e(Ale,cAo),e(O4,fAo),e(O4,tN),e(tN,mAo),e(O4,gAo),e(y,hAo),e(y,V4),e(V4,yle),e(yle,pAo),e(V4,_Ao),e(V4,aN),e(aN,uAo),e(V4,bAo),e(y,FAo),e(y,X4),e(X4,Lle),e(Lle,vAo),e(X4,TAo),e(X4,nN),e(nN,MAo),e(X4,EAo),e(y,CAo),e(y,z4),e(z4,xle),e(xle,wAo),e(z4,AAo),e(z4,sN),e(sN,yAo),e(z4,LAo),e(y,xAo),e(y,Q4),e(Q4,kle),e(kle,kAo),e(Q4,SAo),e(Q4,lN),e(lN,RAo),e(Q4,BAo),e(y,PAo),e(y,W4),e(W4,Sle),e(Sle,$Ao),e(W4,IAo),e(W4,iN),e(iN,qAo),e(W4,NAo),e(y,jAo),e(y,H4),e(H4,Rle),e(Rle,DAo),e(H4,GAo),e(H4,dN),e(dN,OAo),e(H4,VAo),e(y,XAo),e(y,U4),e(U4,Ble),e(Ble,zAo),e(U4,QAo),e(U4,cN),e(cN,WAo),e(U4,HAo),e(y,UAo),e(y,J4),e(J4,Ple),e(Ple,JAo),e(J4,YAo),e(J4,fN),e(fN,KAo),e(J4,ZAo),e(y,e0o),e(y,Y4),e(Y4,$le),e($le,o0o),e(Y4,r0o),e(Y4,mN),e(mN,t0o),e(Y4,a0o),e(Oe,n0o),e(Oe,K4),e(K4,s0o),e(K4,Ile),e(Ile,l0o),e(K4,i0o),e(K4,qle),e(qle,d0o),e(Oe,c0o),e(Oe,Nle),e(Nle,f0o),e(Oe,m0o),g(D5,Oe,null),b(c,CRe,u),b(c,hd,u),e(hd,Z4),e(Z4,jle),g(G5,jle,null),e(hd,g0o),e(hd,Dle),e(Dle,h0o),b(c,wRe,u),b(c,rr,u),g(O5,rr,null),e(rr,p0o),e(rr,pd),e(pd,_0o),e(pd,gN),e(gN,u0o),e(pd,b0o),e(pd,hN),e(hN,F0o),e(pd,v0o),e(rr,T0o),e(rr,V5),e(V5,M0o),e(V5,Gle),e(Gle,E0o),e(V5,C0o),e(rr,w0o),e(rr,Jr),g(X5,Jr,null),e(Jr,A0o),e(Jr,Ole),e(Ole,y0o),e(Jr,L0o),e(Jr,_d),e(_d,x0o),e(_d,Vle),e(Vle,k0o),e(_d,S0o),e(_d,pN),e(pN,R0o),e(_d,B0o),e(Jr,P0o),e(Jr,Xle),e(Xle,$0o),e(Jr,I0o),g(z5,Jr,null),e(rr,q0o),e(rr,Ve),g(Q5,Ve,null),e(Ve,N0o),e(Ve,zle),e(zle,j0o),e(Ve,D0o),e(Ve,Ja),e(Ja,G0o),e(Ja,Qle),e(Qle,O0o),e(Ja,V0o),e(Ja,Wle),e(Wle,X0o),e(Ja,z0o),e(Ja,Hle),e(Hle,Q0o),e(Ja,W0o),e(Ve,H0o),e(Ve,G),e(G,eb),e(eb,Ule),e(Ule,U0o),e(eb,J0o),e(eb,_N),e(_N,Y0o),e(eb,K0o),e(G,Z0o),e(G,ob),e(ob,Jle),e(Jle,eyo),e(ob,oyo),e(ob,uN),e(uN,ryo),e(ob,tyo),e(G,ayo),e(G,rb),e(rb,Yle),e(Yle,nyo),e(rb,syo),e(rb,bN),e(bN,lyo),e(rb,iyo),e(G,dyo),e(G,tb),e(tb,Kle),e(Kle,cyo),e(tb,fyo),e(tb,FN),e(FN,myo),e(tb,gyo),e(G,hyo),e(G,ab),e(ab,Zle),e(Zle,pyo),e(ab,_yo),e(ab,vN),e(vN,uyo),e(ab,byo),e(G,Fyo),e(G,nb),e(nb,eie),e(eie,vyo),e(nb,Tyo),e(nb,TN),e(TN,Myo),e(nb,Eyo),e(G,Cyo),e(G,sb),e(sb,oie),e(oie,wyo),e(sb,Ayo),e(sb,MN),e(MN,yyo),e(sb,Lyo),e(G,xyo),e(G,lb),e(lb,rie),e(rie,kyo),e(lb,Syo),e(lb,EN),e(EN,Ryo),e(lb,Byo),e(G,Pyo),e(G,ib),e(ib,tie),e(tie,$yo),e(ib,Iyo),e(ib,CN),e(CN,qyo),e(ib,Nyo),e(G,jyo),e(G,db),e(db,aie),e(aie,Dyo),e(db,Gyo),e(db,wN),e(wN,Oyo),e(db,Vyo),e(G,Xyo),e(G,cb),e(cb,nie),e(nie,zyo),e(cb,Qyo),e(cb,AN),e(AN,Wyo),e(cb,Hyo),e(G,Uyo),e(G,fb),e(fb,sie),e(sie,Jyo),e(fb,Yyo),e(fb,yN),e(yN,Kyo),e(fb,Zyo),e(G,eLo),e(G,mb),e(mb,lie),e(lie,oLo),e(mb,rLo),e(mb,LN),e(LN,tLo),e(mb,aLo),e(G,nLo),e(G,gb),e(gb,iie),e(iie,sLo),e(gb,lLo),e(gb,xN),e(xN,iLo),e(gb,dLo),e(G,cLo),e(G,hb),e(hb,die),e(die,fLo),e(hb,mLo),e(hb,kN),e(kN,gLo),e(hb,hLo),e(G,pLo),e(G,pb),e(pb,cie),e(cie,_Lo),e(pb,uLo),e(pb,SN),e(SN,bLo),e(pb,FLo),e(G,vLo),e(G,_b),e(_b,fie),e(fie,TLo),e(_b,MLo),e(_b,RN),e(RN,ELo),e(_b,CLo),e(G,wLo),e(G,ub),e(ub,mie),e(mie,ALo),e(ub,yLo),e(ub,BN),e(BN,LLo),e(ub,xLo),e(G,kLo),e(G,bb),e(bb,gie),e(gie,SLo),e(bb,RLo),e(bb,PN),e(PN,BLo),e(bb,PLo),e(G,$Lo),e(G,Fb),e(Fb,hie),e(hie,ILo),e(Fb,qLo),e(Fb,$N),e($N,NLo),e(Fb,jLo),e(G,DLo),e(G,vb),e(vb,pie),e(pie,GLo),e(vb,OLo),e(vb,IN),e(IN,VLo),e(vb,XLo),e(G,zLo),e(G,Tb),e(Tb,_ie),e(_ie,QLo),e(Tb,WLo),e(Tb,qN),e(qN,HLo),e(Tb,ULo),e(G,JLo),e(G,Mb),e(Mb,uie),e(uie,YLo),e(Mb,KLo),e(Mb,NN),e(NN,ZLo),e(Mb,e8o),e(G,o8o),e(G,Eb),e(Eb,bie),e(bie,r8o),e(Eb,t8o),e(Eb,jN),e(jN,a8o),e(Eb,n8o),e(G,s8o),e(G,Cb),e(Cb,Fie),e(Fie,l8o),e(Cb,i8o),e(Cb,DN),e(DN,d8o),e(Cb,c8o),e(G,f8o),e(G,wb),e(wb,vie),e(vie,m8o),e(wb,g8o),e(wb,GN),e(GN,h8o),e(wb,p8o),e(G,_8o),e(G,Ab),e(Ab,Tie),e(Tie,u8o),e(Ab,b8o),e(Ab,ON),e(ON,F8o),e(Ab,v8o),e(G,T8o),e(G,yb),e(yb,Mie),e(Mie,M8o),e(yb,E8o),e(yb,VN),e(VN,C8o),e(yb,w8o),e(Ve,A8o),e(Ve,Lb),e(Lb,y8o),e(Lb,Eie),e(Eie,L8o),e(Lb,x8o),e(Lb,Cie),e(Cie,k8o),e(Ve,S8o),e(Ve,wie),e(wie,R8o),e(Ve,B8o),g(W5,Ve,null),b(c,ARe,u),b(c,ud,u),e(ud,xb),e(xb,Aie),g(H5,Aie,null),e(ud,P8o),e(ud,yie),e(yie,$8o),b(c,yRe,u),b(c,tr,u),g(U5,tr,null),e(tr,I8o),e(tr,bd),e(bd,q8o),e(bd,XN),e(XN,N8o),e(bd,j8o),e(bd,zN),e(zN,D8o),e(bd,G8o),e(tr,O8o),e(tr,J5),e(J5,V8o),e(J5,Lie),e(Lie,X8o),e(J5,z8o),e(tr,Q8o),e(tr,Yr),g(Y5,Yr,null),e(Yr,W8o),e(Yr,xie),e(xie,H8o),e(Yr,U8o),e(Yr,Fd),e(Fd,J8o),e(Fd,kie),e(kie,Y8o),e(Fd,K8o),e(Fd,QN),e(QN,Z8o),e(Fd,e9o),e(Yr,o9o),e(Yr,Sie),e(Sie,r9o),e(Yr,t9o),g(K5,Yr,null),e(tr,a9o),e(tr,Xe),g(Z5,Xe,null),e(Xe,n9o),e(Xe,Rie),e(Rie,s9o),e(Xe,l9o),e(Xe,Ya),e(Ya,i9o),e(Ya,Bie),e(Bie,d9o),e(Ya,c9o),e(Ya,Pie),e(Pie,f9o),e(Ya,m9o),e(Ya,$ie),e($ie,g9o),e(Ya,h9o),e(Xe,p9o),e(Xe,da),e(da,kb),e(kb,Iie),e(Iie,_9o),e(kb,u9o),e(kb,WN),e(WN,b9o),e(kb,F9o),e(da,v9o),e(da,Sb),e(Sb,qie),e(qie,T9o),e(Sb,M9o),e(Sb,HN),e(HN,E9o),e(Sb,C9o),e(da,w9o),e(da,Rb),e(Rb,Nie),e(Nie,A9o),e(Rb,y9o),e(Rb,UN),e(UN,L9o),e(Rb,x9o),e(da,k9o),e(da,Bb),e(Bb,jie),e(jie,S9o),e(Bb,R9o),e(Bb,JN),e(JN,B9o),e(Bb,P9o),e(da,$9o),e(da,Pb),e(Pb,Die),e(Die,I9o),e(Pb,q9o),e(Pb,YN),e(YN,N9o),e(Pb,j9o),e(Xe,D9o),e(Xe,$b),e($b,G9o),e($b,Gie),e(Gie,O9o),e($b,V9o),e($b,Oie),e(Oie,X9o),e(Xe,z9o),e(Xe,Vie),e(Vie,Q9o),e(Xe,W9o),g(ew,Xe,null),b(c,LRe,u),b(c,vd,u),e(vd,Ib),e(Ib,Xie),g(ow,Xie,null),e(vd,H9o),e(vd,zie),e(zie,U9o),b(c,xRe,u),b(c,ar,u),g(rw,ar,null),e(ar,J9o),e(ar,Td),e(Td,Y9o),e(Td,KN),e(KN,K9o),e(Td,Z9o),e(Td,ZN),e(ZN,exo),e(Td,oxo),e(ar,rxo),e(ar,tw),e(tw,txo),e(tw,Qie),e(Qie,axo),e(tw,nxo),e(ar,sxo),e(ar,Kr),g(aw,Kr,null),e(Kr,lxo),e(Kr,Wie),e(Wie,ixo),e(Kr,dxo),e(Kr,Md),e(Md,cxo),e(Md,Hie),e(Hie,fxo),e(Md,mxo),e(Md,ej),e(ej,gxo),e(Md,hxo),e(Kr,pxo),e(Kr,Uie),e(Uie,_xo),e(Kr,uxo),g(nw,Kr,null),e(ar,bxo),e(ar,ze),g(sw,ze,null),e(ze,Fxo),e(ze,Jie),e(Jie,vxo),e(ze,Txo),e(ze,Ka),e(Ka,Mxo),e(Ka,Yie),e(Yie,Exo),e(Ka,Cxo),e(Ka,Kie),e(Kie,wxo),e(Ka,Axo),e(Ka,Zie),e(Zie,yxo),e(Ka,Lxo),e(ze,xxo),e(ze,j),e(j,qb),e(qb,ede),e(ede,kxo),e(qb,Sxo),e(qb,oj),e(oj,Rxo),e(qb,Bxo),e(j,Pxo),e(j,Nb),e(Nb,ode),e(ode,$xo),e(Nb,Ixo),e(Nb,rj),e(rj,qxo),e(Nb,Nxo),e(j,jxo),e(j,jb),e(jb,rde),e(rde,Dxo),e(jb,Gxo),e(jb,tj),e(tj,Oxo),e(jb,Vxo),e(j,Xxo),e(j,Db),e(Db,tde),e(tde,zxo),e(Db,Qxo),e(Db,aj),e(aj,Wxo),e(Db,Hxo),e(j,Uxo),e(j,Gb),e(Gb,ade),e(ade,Jxo),e(Gb,Yxo),e(Gb,nj),e(nj,Kxo),e(Gb,Zxo),e(j,eko),e(j,Ob),e(Ob,nde),e(nde,oko),e(Ob,rko),e(Ob,sj),e(sj,tko),e(Ob,ako),e(j,nko),e(j,Vb),e(Vb,sde),e(sde,sko),e(Vb,lko),e(Vb,lj),e(lj,iko),e(Vb,dko),e(j,cko),e(j,Xb),e(Xb,lde),e(lde,fko),e(Xb,mko),e(Xb,ij),e(ij,gko),e(Xb,hko),e(j,pko),e(j,zb),e(zb,ide),e(ide,_ko),e(zb,uko),e(zb,dj),e(dj,bko),e(zb,Fko),e(j,vko),e(j,Qb),e(Qb,dde),e(dde,Tko),e(Qb,Mko),e(Qb,cj),e(cj,Eko),e(Qb,Cko),e(j,wko),e(j,Wb),e(Wb,cde),e(cde,Ako),e(Wb,yko),e(Wb,fj),e(fj,Lko),e(Wb,xko),e(j,kko),e(j,Hb),e(Hb,fde),e(fde,Sko),e(Hb,Rko),e(Hb,mj),e(mj,Bko),e(Hb,Pko),e(j,$ko),e(j,Ub),e(Ub,mde),e(mde,Iko),e(Ub,qko),e(Ub,gj),e(gj,Nko),e(Ub,jko),e(j,Dko),e(j,Jb),e(Jb,gde),e(gde,Gko),e(Jb,Oko),e(Jb,hj),e(hj,Vko),e(Jb,Xko),e(j,zko),e(j,Yb),e(Yb,hde),e(hde,Qko),e(Yb,Wko),e(Yb,pj),e(pj,Hko),e(Yb,Uko),e(j,Jko),e(j,Kb),e(Kb,pde),e(pde,Yko),e(Kb,Kko),e(Kb,_j),e(_j,Zko),e(Kb,eSo),e(j,oSo),e(j,Zb),e(Zb,_de),e(_de,rSo),e(Zb,tSo),e(Zb,uj),e(uj,aSo),e(Zb,nSo),e(j,sSo),e(j,e3),e(e3,ude),e(ude,lSo),e(e3,iSo),e(e3,bj),e(bj,dSo),e(e3,cSo),e(j,fSo),e(j,o3),e(o3,bde),e(bde,mSo),e(o3,gSo),e(o3,Fj),e(Fj,hSo),e(o3,pSo),e(j,_So),e(j,r3),e(r3,Fde),e(Fde,uSo),e(r3,bSo),e(r3,vj),e(vj,FSo),e(r3,vSo),e(j,TSo),e(j,t3),e(t3,vde),e(vde,MSo),e(t3,ESo),e(t3,Tj),e(Tj,CSo),e(t3,wSo),e(j,ASo),e(j,a3),e(a3,Tde),e(Tde,ySo),e(a3,LSo),e(a3,Mj),e(Mj,xSo),e(a3,kSo),e(j,SSo),e(j,n3),e(n3,Mde),e(Mde,RSo),e(n3,BSo),e(n3,Ej),e(Ej,PSo),e(n3,$So),e(j,ISo),e(j,s3),e(s3,Ede),e(Ede,qSo),e(s3,NSo),e(s3,Cj),e(Cj,jSo),e(s3,DSo),e(j,GSo),e(j,l3),e(l3,Cde),e(Cde,OSo),e(l3,VSo),e(l3,wj),e(wj,XSo),e(l3,zSo),e(j,QSo),e(j,i3),e(i3,wde),e(wde,WSo),e(i3,HSo),e(i3,Aj),e(Aj,USo),e(i3,JSo),e(j,YSo),e(j,d3),e(d3,Ade),e(Ade,KSo),e(d3,ZSo),e(d3,yj),e(yj,eRo),e(d3,oRo),e(j,rRo),e(j,c3),e(c3,yde),e(yde,tRo),e(c3,aRo),e(c3,Lj),e(Lj,nRo),e(c3,sRo),e(j,lRo),e(j,f3),e(f3,Lde),e(Lde,iRo),e(f3,dRo),e(f3,xj),e(xj,cRo),e(f3,fRo),e(j,mRo),e(j,m3),e(m3,xde),e(xde,gRo),e(m3,hRo),e(m3,kj),e(kj,pRo),e(m3,_Ro),e(j,uRo),e(j,g3),e(g3,kde),e(kde,bRo),e(g3,FRo),e(g3,Sj),e(Sj,vRo),e(g3,TRo),e(j,MRo),e(j,h3),e(h3,Sde),e(Sde,ERo),e(h3,CRo),e(h3,Rj),e(Rj,wRo),e(h3,ARo),e(j,yRo),e(j,p3),e(p3,Rde),e(Rde,LRo),e(p3,xRo),e(p3,Bj),e(Bj,kRo),e(p3,SRo),e(ze,RRo),e(ze,_3),e(_3,BRo),e(_3,Bde),e(Bde,PRo),e(_3,$Ro),e(_3,Pde),e(Pde,IRo),e(ze,qRo),e(ze,$de),e($de,NRo),e(ze,jRo),g(lw,ze,null),b(c,kRe,u),b(c,Ed,u),e(Ed,u3),e(u3,Ide),g(iw,Ide,null),e(Ed,DRo),e(Ed,qde),e(qde,GRo),b(c,SRe,u),b(c,nr,u),g(dw,nr,null),e(nr,ORo),e(nr,Cd),e(Cd,VRo),e(Cd,Pj),e(Pj,XRo),e(Cd,zRo),e(Cd,$j),e($j,QRo),e(Cd,WRo),e(nr,HRo),e(nr,cw),e(cw,URo),e(cw,Nde),e(Nde,JRo),e(cw,YRo),e(nr,KRo),e(nr,Zr),g(fw,Zr,null),e(Zr,ZRo),e(Zr,jde),e(jde,eBo),e(Zr,oBo),e(Zr,wd),e(wd,rBo),e(wd,Dde),e(Dde,tBo),e(wd,aBo),e(wd,Ij),e(Ij,nBo),e(wd,sBo),e(Zr,lBo),e(Zr,Gde),e(Gde,iBo),e(Zr,dBo),g(mw,Zr,null),e(nr,cBo),e(nr,Qe),g(gw,Qe,null),e(Qe,fBo),e(Qe,Ode),e(Ode,mBo),e(Qe,gBo),e(Qe,Za),e(Za,hBo),e(Za,Vde),e(Vde,pBo),e(Za,_Bo),e(Za,Xde),e(Xde,uBo),e(Za,bBo),e(Za,zde),e(zde,FBo),e(Za,vBo),e(Qe,TBo),e(Qe,R),e(R,b3),e(b3,Qde),e(Qde,MBo),e(b3,EBo),e(b3,qj),e(qj,CBo),e(b3,wBo),e(R,ABo),e(R,F3),e(F3,Wde),e(Wde,yBo),e(F3,LBo),e(F3,Nj),e(Nj,xBo),e(F3,kBo),e(R,SBo),e(R,v3),e(v3,Hde),e(Hde,RBo),e(v3,BBo),e(v3,jj),e(jj,PBo),e(v3,$Bo),e(R,IBo),e(R,T3),e(T3,Ude),e(Ude,qBo),e(T3,NBo),e(T3,Dj),e(Dj,jBo),e(T3,DBo),e(R,GBo),e(R,M3),e(M3,Jde),e(Jde,OBo),e(M3,VBo),e(M3,Gj),e(Gj,XBo),e(M3,zBo),e(R,QBo),e(R,E3),e(E3,Yde),e(Yde,WBo),e(E3,HBo),e(E3,Oj),e(Oj,UBo),e(E3,JBo),e(R,YBo),e(R,C3),e(C3,Kde),e(Kde,KBo),e(C3,ZBo),e(C3,Vj),e(Vj,ePo),e(C3,oPo),e(R,rPo),e(R,w3),e(w3,Zde),e(Zde,tPo),e(w3,aPo),e(w3,Xj),e(Xj,nPo),e(w3,sPo),e(R,lPo),e(R,A3),e(A3,ece),e(ece,iPo),e(A3,dPo),e(A3,zj),e(zj,cPo),e(A3,fPo),e(R,mPo),e(R,y3),e(y3,oce),e(oce,gPo),e(y3,hPo),e(y3,Qj),e(Qj,pPo),e(y3,_Po),e(R,uPo),e(R,L3),e(L3,rce),e(rce,bPo),e(L3,FPo),e(L3,Wj),e(Wj,vPo),e(L3,TPo),e(R,MPo),e(R,x3),e(x3,tce),e(tce,EPo),e(x3,CPo),e(x3,Hj),e(Hj,wPo),e(x3,APo),e(R,yPo),e(R,k3),e(k3,ace),e(ace,LPo),e(k3,xPo),e(k3,Uj),e(Uj,kPo),e(k3,SPo),e(R,RPo),e(R,S3),e(S3,nce),e(nce,BPo),e(S3,PPo),e(S3,Jj),e(Jj,$Po),e(S3,IPo),e(R,qPo),e(R,R3),e(R3,sce),e(sce,NPo),e(R3,jPo),e(R3,Yj),e(Yj,DPo),e(R3,GPo),e(R,OPo),e(R,B3),e(B3,lce),e(lce,VPo),e(B3,XPo),e(B3,Kj),e(Kj,zPo),e(B3,QPo),e(R,WPo),e(R,P3),e(P3,ice),e(ice,HPo),e(P3,UPo),e(P3,Zj),e(Zj,JPo),e(P3,YPo),e(R,KPo),e(R,$3),e($3,dce),e(dce,ZPo),e($3,e$o),e($3,eD),e(eD,o$o),e($3,r$o),e(R,t$o),e(R,I3),e(I3,cce),e(cce,a$o),e(I3,n$o),e(I3,oD),e(oD,s$o),e(I3,l$o),e(R,i$o),e(R,q3),e(q3,fce),e(fce,d$o),e(q3,c$o),e(q3,rD),e(rD,f$o),e(q3,m$o),e(R,g$o),e(R,N3),e(N3,mce),e(mce,h$o),e(N3,p$o),e(N3,tD),e(tD,_$o),e(N3,u$o),e(R,b$o),e(R,j3),e(j3,gce),e(gce,F$o),e(j3,v$o),e(j3,aD),e(aD,T$o),e(j3,M$o),e(R,E$o),e(R,D3),e(D3,hce),e(hce,C$o),e(D3,w$o),e(D3,nD),e(nD,A$o),e(D3,y$o),e(R,L$o),e(R,G3),e(G3,pce),e(pce,x$o),e(G3,k$o),e(G3,sD),e(sD,S$o),e(G3,R$o),e(R,B$o),e(R,O3),e(O3,_ce),e(_ce,P$o),e(O3,$$o),e(O3,lD),e(lD,I$o),e(O3,q$o),e(R,N$o),e(R,V3),e(V3,uce),e(uce,j$o),e(V3,D$o),e(V3,iD),e(iD,G$o),e(V3,O$o),e(R,V$o),e(R,X3),e(X3,bce),e(bce,X$o),e(X3,z$o),e(X3,dD),e(dD,Q$o),e(X3,W$o),e(R,H$o),e(R,z3),e(z3,Fce),e(Fce,U$o),e(z3,J$o),e(z3,cD),e(cD,Y$o),e(z3,K$o),e(R,Z$o),e(R,Q3),e(Q3,vce),e(vce,eIo),e(Q3,oIo),e(Q3,fD),e(fD,rIo),e(Q3,tIo),e(R,aIo),e(R,W3),e(W3,Tce),e(Tce,nIo),e(W3,sIo),e(W3,mD),e(mD,lIo),e(W3,iIo),e(R,dIo),e(R,H3),e(H3,Mce),e(Mce,cIo),e(H3,fIo),e(H3,gD),e(gD,mIo),e(H3,gIo),e(R,hIo),e(R,U3),e(U3,Ece),e(Ece,pIo),e(U3,_Io),e(U3,hD),e(hD,uIo),e(U3,bIo),e(R,FIo),e(R,J3),e(J3,Cce),e(Cce,vIo),e(J3,TIo),e(J3,pD),e(pD,MIo),e(J3,EIo),e(R,CIo),e(R,Y3),e(Y3,wce),e(wce,wIo),e(Y3,AIo),e(Y3,_D),e(_D,yIo),e(Y3,LIo),e(R,xIo),e(R,K3),e(K3,Ace),e(Ace,kIo),e(K3,SIo),e(K3,uD),e(uD,RIo),e(K3,BIo),e(R,PIo),e(R,Z3),e(Z3,yce),e(yce,$Io),e(Z3,IIo),e(Z3,bD),e(bD,qIo),e(Z3,NIo),e(R,jIo),e(R,e2),e(e2,Lce),e(Lce,DIo),e(e2,GIo),e(e2,FD),e(FD,OIo),e(e2,VIo),e(R,XIo),e(R,o2),e(o2,xce),e(xce,zIo),e(o2,QIo),e(o2,vD),e(vD,WIo),e(o2,HIo),e(R,UIo),e(R,r2),e(r2,kce),e(kce,JIo),e(r2,YIo),e(r2,TD),e(TD,KIo),e(r2,ZIo),e(Qe,eqo),e(Qe,t2),e(t2,oqo),e(t2,Sce),e(Sce,rqo),e(t2,tqo),e(t2,Rce),e(Rce,aqo),e(Qe,nqo),e(Qe,Bce),e(Bce,sqo),e(Qe,lqo),g(hw,Qe,null),b(c,RRe,u),b(c,Ad,u),e(Ad,a2),e(a2,Pce),g(pw,Pce,null),e(Ad,iqo),e(Ad,$ce),e($ce,dqo),b(c,BRe,u),b(c,sr,u),g(_w,sr,null),e(sr,cqo),e(sr,yd),e(yd,fqo),e(yd,MD),e(MD,mqo),e(yd,gqo),e(yd,ED),e(ED,hqo),e(yd,pqo),e(sr,_qo),e(sr,uw),e(uw,uqo),e(uw,Ice),e(Ice,bqo),e(uw,Fqo),e(sr,vqo),e(sr,et),g(bw,et,null),e(et,Tqo),e(et,qce),e(qce,Mqo),e(et,Eqo),e(et,Ld),e(Ld,Cqo),e(Ld,Nce),e(Nce,wqo),e(Ld,Aqo),e(Ld,CD),e(CD,yqo),e(Ld,Lqo),e(et,xqo),e(et,jce),e(jce,kqo),e(et,Sqo),g(Fw,et,null),e(sr,Rqo),e(sr,We),g(vw,We,null),e(We,Bqo),e(We,Dce),e(Dce,Pqo),e(We,$qo),e(We,en),e(en,Iqo),e(en,Gce),e(Gce,qqo),e(en,Nqo),e(en,Oce),e(Oce,jqo),e(en,Dqo),e(en,Vce),e(Vce,Gqo),e(en,Oqo),e(We,Vqo),e(We,Xce),e(Xce,n2),e(n2,zce),e(zce,Xqo),e(n2,zqo),e(n2,wD),e(wD,Qqo),e(n2,Wqo),e(We,Hqo),e(We,s2),e(s2,Uqo),e(s2,Qce),e(Qce,Jqo),e(s2,Yqo),e(s2,Wce),e(Wce,Kqo),e(We,Zqo),e(We,Hce),e(Hce,eNo),e(We,oNo),g(Tw,We,null),b(c,PRe,u),b(c,xd,u),e(xd,l2),e(l2,Uce),g(Mw,Uce,null),e(xd,rNo),e(xd,Jce),e(Jce,tNo),b(c,$Re,u),b(c,lr,u),g(Ew,lr,null),e(lr,aNo),e(lr,kd),e(kd,nNo),e(kd,AD),e(AD,sNo),e(kd,lNo),e(kd,yD),e(yD,iNo),e(kd,dNo),e(lr,cNo),e(lr,Cw),e(Cw,fNo),e(Cw,Yce),e(Yce,mNo),e(Cw,gNo),e(lr,hNo),e(lr,ot),g(ww,ot,null),e(ot,pNo),e(ot,Kce),e(Kce,_No),e(ot,uNo),e(ot,Sd),e(Sd,bNo),e(Sd,Zce),e(Zce,FNo),e(Sd,vNo),e(Sd,LD),e(LD,TNo),e(Sd,MNo),e(ot,ENo),e(ot,efe),e(efe,CNo),e(ot,wNo),g(Aw,ot,null),e(lr,ANo),e(lr,He),g(yw,He,null),e(He,yNo),e(He,ofe),e(ofe,LNo),e(He,xNo),e(He,on),e(on,kNo),e(on,rfe),e(rfe,SNo),e(on,RNo),e(on,tfe),e(tfe,BNo),e(on,PNo),e(on,afe),e(afe,$No),e(on,INo),e(He,qNo),e(He,ge),e(ge,i2),e(i2,nfe),e(nfe,NNo),e(i2,jNo),e(i2,xD),e(xD,DNo),e(i2,GNo),e(ge,ONo),e(ge,d2),e(d2,sfe),e(sfe,VNo),e(d2,XNo),e(d2,kD),e(kD,zNo),e(d2,QNo),e(ge,WNo),e(ge,Ds),e(Ds,lfe),e(lfe,HNo),e(Ds,UNo),e(Ds,SD),e(SD,JNo),e(Ds,YNo),e(Ds,RD),e(RD,KNo),e(Ds,ZNo),e(ge,ejo),e(ge,c2),e(c2,ife),e(ife,ojo),e(c2,rjo),e(c2,BD),e(BD,tjo),e(c2,ajo),e(ge,njo),e(ge,ma),e(ma,dfe),e(dfe,sjo),e(ma,ljo),e(ma,PD),e(PD,ijo),e(ma,djo),e(ma,$D),e($D,cjo),e(ma,fjo),e(ma,ID),e(ID,mjo),e(ma,gjo),e(ge,hjo),e(ge,f2),e(f2,cfe),e(cfe,pjo),e(f2,_jo),e(f2,qD),e(qD,ujo),e(f2,bjo),e(ge,Fjo),e(ge,m2),e(m2,ffe),e(ffe,vjo),e(m2,Tjo),e(m2,ND),e(ND,Mjo),e(m2,Ejo),e(ge,Cjo),e(ge,g2),e(g2,mfe),e(mfe,wjo),e(g2,Ajo),e(g2,jD),e(jD,yjo),e(g2,Ljo),e(ge,xjo),e(ge,h2),e(h2,gfe),e(gfe,kjo),e(h2,Sjo),e(h2,DD),e(DD,Rjo),e(h2,Bjo),e(ge,Pjo),e(ge,p2),e(p2,hfe),e(hfe,$jo),e(p2,Ijo),e(p2,GD),e(GD,qjo),e(p2,Njo),e(ge,jjo),e(ge,_2),e(_2,pfe),e(pfe,Djo),e(_2,Gjo),e(_2,OD),e(OD,Ojo),e(_2,Vjo),e(He,Xjo),e(He,u2),e(u2,zjo),e(u2,_fe),e(_fe,Qjo),e(u2,Wjo),e(u2,ufe),e(ufe,Hjo),e(He,Ujo),e(He,bfe),e(bfe,Jjo),e(He,Yjo),g(Lw,He,null),b(c,IRe,u),b(c,Rd,u),e(Rd,b2),e(b2,Ffe),g(xw,Ffe,null),e(Rd,Kjo),e(Rd,vfe),e(vfe,Zjo),b(c,qRe,u),b(c,ir,u),g(kw,ir,null),e(ir,eDo),e(ir,Bd),e(Bd,oDo),e(Bd,VD),e(VD,rDo),e(Bd,tDo),e(Bd,XD),e(XD,aDo),e(Bd,nDo),e(ir,sDo),e(ir,Sw),e(Sw,lDo),e(Sw,Tfe),e(Tfe,iDo),e(Sw,dDo),e(ir,cDo),e(ir,rt),g(Rw,rt,null),e(rt,fDo),e(rt,Mfe),e(Mfe,mDo),e(rt,gDo),e(rt,Pd),e(Pd,hDo),e(Pd,Efe),e(Efe,pDo),e(Pd,_Do),e(Pd,zD),e(zD,uDo),e(Pd,bDo),e(rt,FDo),e(rt,Cfe),e(Cfe,vDo),e(rt,TDo),g(Bw,rt,null),e(ir,MDo),e(ir,Ue),g(Pw,Ue,null),e(Ue,EDo),e(Ue,wfe),e(wfe,CDo),e(Ue,wDo),e(Ue,rn),e(rn,ADo),e(rn,Afe),e(Afe,yDo),e(rn,LDo),e(rn,yfe),e(yfe,xDo),e(rn,kDo),e(rn,Lfe),e(Lfe,SDo),e(rn,RDo),e(Ue,BDo),e(Ue,xfe),e(xfe,F2),e(F2,kfe),e(kfe,PDo),e(F2,$Do),e(F2,QD),e(QD,IDo),e(F2,qDo),e(Ue,NDo),e(Ue,v2),e(v2,jDo),e(v2,Sfe),e(Sfe,DDo),e(v2,GDo),e(v2,Rfe),e(Rfe,ODo),e(Ue,VDo),e(Ue,Bfe),e(Bfe,XDo),e(Ue,zDo),g($w,Ue,null),b(c,NRe,u),b(c,$d,u),e($d,T2),e(T2,Pfe),g(Iw,Pfe,null),e($d,QDo),e($d,$fe),e($fe,WDo),b(c,jRe,u),b(c,dr,u),g(qw,dr,null),e(dr,HDo),e(dr,Id),e(Id,UDo),e(Id,WD),e(WD,JDo),e(Id,YDo),e(Id,HD),e(HD,KDo),e(Id,ZDo),e(dr,eGo),e(dr,Nw),e(Nw,oGo),e(Nw,Ife),e(Ife,rGo),e(Nw,tGo),e(dr,aGo),e(dr,tt),g(jw,tt,null),e(tt,nGo),e(tt,qfe),e(qfe,sGo),e(tt,lGo),e(tt,qd),e(qd,iGo),e(qd,Nfe),e(Nfe,dGo),e(qd,cGo),e(qd,UD),e(UD,fGo),e(qd,mGo),e(tt,gGo),e(tt,jfe),e(jfe,hGo),e(tt,pGo),g(Dw,tt,null),e(dr,_Go),e(dr,Je),g(Gw,Je,null),e(Je,uGo),e(Je,Dfe),e(Dfe,bGo),e(Je,FGo),e(Je,tn),e(tn,vGo),e(tn,Gfe),e(Gfe,TGo),e(tn,MGo),e(tn,Ofe),e(Ofe,EGo),e(tn,CGo),e(tn,Vfe),e(Vfe,wGo),e(tn,AGo),e(Je,yGo),e(Je,Se),e(Se,M2),e(M2,Xfe),e(Xfe,LGo),e(M2,xGo),e(M2,JD),e(JD,kGo),e(M2,SGo),e(Se,RGo),e(Se,E2),e(E2,zfe),e(zfe,BGo),e(E2,PGo),e(E2,YD),e(YD,$Go),e(E2,IGo),e(Se,qGo),e(Se,C2),e(C2,Qfe),e(Qfe,NGo),e(C2,jGo),e(C2,KD),e(KD,DGo),e(C2,GGo),e(Se,OGo),e(Se,w2),e(w2,Wfe),e(Wfe,VGo),e(w2,XGo),e(w2,ZD),e(ZD,zGo),e(w2,QGo),e(Se,WGo),e(Se,A2),e(A2,Hfe),e(Hfe,HGo),e(A2,UGo),e(A2,eG),e(eG,JGo),e(A2,YGo),e(Se,KGo),e(Se,y2),e(y2,Ufe),e(Ufe,ZGo),e(y2,eOo),e(y2,oG),e(oG,oOo),e(y2,rOo),e(Se,tOo),e(Se,L2),e(L2,Jfe),e(Jfe,aOo),e(L2,nOo),e(L2,rG),e(rG,sOo),e(L2,lOo),e(Se,iOo),e(Se,x2),e(x2,Yfe),e(Yfe,dOo),e(x2,cOo),e(x2,tG),e(tG,fOo),e(x2,mOo),e(Je,gOo),e(Je,k2),e(k2,hOo),e(k2,Kfe),e(Kfe,pOo),e(k2,_Oo),e(k2,Zfe),e(Zfe,uOo),e(Je,bOo),e(Je,eme),e(eme,FOo),e(Je,vOo),g(Ow,Je,null),b(c,DRe,u),b(c,Nd,u),e(Nd,S2),e(S2,ome),g(Vw,ome,null),e(Nd,TOo),e(Nd,rme),e(rme,MOo),b(c,GRe,u),b(c,cr,u),g(Xw,cr,null),e(cr,EOo),e(cr,jd),e(jd,COo),e(jd,aG),e(aG,wOo),e(jd,AOo),e(jd,nG),e(nG,yOo),e(jd,LOo),e(cr,xOo),e(cr,zw),e(zw,kOo),e(zw,tme),e(tme,SOo),e(zw,ROo),e(cr,BOo),e(cr,at),g(Qw,at,null),e(at,POo),e(at,ame),e(ame,$Oo),e(at,IOo),e(at,Dd),e(Dd,qOo),e(Dd,nme),e(nme,NOo),e(Dd,jOo),e(Dd,sG),e(sG,DOo),e(Dd,GOo),e(at,OOo),e(at,sme),e(sme,VOo),e(at,XOo),g(Ww,at,null),e(cr,zOo),e(cr,Ye),g(Hw,Ye,null),e(Ye,QOo),e(Ye,lme),e(lme,WOo),e(Ye,HOo),e(Ye,an),e(an,UOo),e(an,ime),e(ime,JOo),e(an,YOo),e(an,dme),e(dme,KOo),e(an,ZOo),e(an,cme),e(cme,eVo),e(an,oVo),e(Ye,rVo),e(Ye,nn),e(nn,R2),e(R2,fme),e(fme,tVo),e(R2,aVo),e(R2,lG),e(lG,nVo),e(R2,sVo),e(nn,lVo),e(nn,B2),e(B2,mme),e(mme,iVo),e(B2,dVo),e(B2,iG),e(iG,cVo),e(B2,fVo),e(nn,mVo),e(nn,P2),e(P2,gme),e(gme,gVo),e(P2,hVo),e(P2,dG),e(dG,pVo),e(P2,_Vo),e(nn,uVo),e(nn,$2),e($2,hme),e(hme,bVo),e($2,FVo),e($2,cG),e(cG,vVo),e($2,TVo),e(Ye,MVo),e(Ye,I2),e(I2,EVo),e(I2,pme),e(pme,CVo),e(I2,wVo),e(I2,_me),e(_me,AVo),e(Ye,yVo),e(Ye,ume),e(ume,LVo),e(Ye,xVo),g(Uw,Ye,null),b(c,ORe,u),b(c,Gd,u),e(Gd,q2),e(q2,bme),g(Jw,bme,null),e(Gd,kVo),e(Gd,Fme),e(Fme,SVo),b(c,VRe,u),b(c,fr,u),g(Yw,fr,null),e(fr,RVo),e(fr,Od),e(Od,BVo),e(Od,fG),e(fG,PVo),e(Od,$Vo),e(Od,mG),e(mG,IVo),e(Od,qVo),e(fr,NVo),e(fr,Kw),e(Kw,jVo),e(Kw,vme),e(vme,DVo),e(Kw,GVo),e(fr,OVo),e(fr,nt),g(Zw,nt,null),e(nt,VVo),e(nt,Tme),e(Tme,XVo),e(nt,zVo),e(nt,Vd),e(Vd,QVo),e(Vd,Mme),e(Mme,WVo),e(Vd,HVo),e(Vd,gG),e(gG,UVo),e(Vd,JVo),e(nt,YVo),e(nt,Eme),e(Eme,KVo),e(nt,ZVo),g(eA,nt,null),e(fr,eXo),e(fr,Ke),g(oA,Ke,null),e(Ke,oXo),e(Ke,Cme),e(Cme,rXo),e(Ke,tXo),e(Ke,sn),e(sn,aXo),e(sn,wme),e(wme,nXo),e(sn,sXo),e(sn,Ame),e(Ame,lXo),e(sn,iXo),e(sn,yme),e(yme,dXo),e(sn,cXo),e(Ke,fXo),e(Ke,Re),e(Re,N2),e(N2,Lme),e(Lme,mXo),e(N2,gXo),e(N2,hG),e(hG,hXo),e(N2,pXo),e(Re,_Xo),e(Re,j2),e(j2,xme),e(xme,uXo),e(j2,bXo),e(j2,pG),e(pG,FXo),e(j2,vXo),e(Re,TXo),e(Re,D2),e(D2,kme),e(kme,MXo),e(D2,EXo),e(D2,_G),e(_G,CXo),e(D2,wXo),e(Re,AXo),e(Re,G2),e(G2,Sme),e(Sme,yXo),e(G2,LXo),e(G2,uG),e(uG,xXo),e(G2,kXo),e(Re,SXo),e(Re,O2),e(O2,Rme),e(Rme,RXo),e(O2,BXo),e(O2,bG),e(bG,PXo),e(O2,$Xo),e(Re,IXo),e(Re,V2),e(V2,Bme),e(Bme,qXo),e(V2,NXo),e(V2,FG),e(FG,jXo),e(V2,DXo),e(Re,GXo),e(Re,X2),e(X2,Pme),e(Pme,OXo),e(X2,VXo),e(X2,vG),e(vG,XXo),e(X2,zXo),e(Re,QXo),e(Re,z2),e(z2,$me),e($me,WXo),e(z2,HXo),e(z2,TG),e(TG,UXo),e(z2,JXo),e(Ke,YXo),e(Ke,Q2),e(Q2,KXo),e(Q2,Ime),e(Ime,ZXo),e(Q2,ezo),e(Q2,qme),e(qme,ozo),e(Ke,rzo),e(Ke,Nme),e(Nme,tzo),e(Ke,azo),g(rA,Ke,null),b(c,XRe,u),b(c,Xd,u),e(Xd,W2),e(W2,jme),g(tA,jme,null),e(Xd,nzo),e(Xd,Dme),e(Dme,szo),b(c,zRe,u),b(c,mr,u),g(aA,mr,null),e(mr,lzo),e(mr,zd),e(zd,izo),e(zd,MG),e(MG,dzo),e(zd,czo),e(zd,EG),e(EG,fzo),e(zd,mzo),e(mr,gzo),e(mr,nA),e(nA,hzo),e(nA,Gme),e(Gme,pzo),e(nA,_zo),e(mr,uzo),e(mr,st),g(sA,st,null),e(st,bzo),e(st,Ome),e(Ome,Fzo),e(st,vzo),e(st,Qd),e(Qd,Tzo),e(Qd,Vme),e(Vme,Mzo),e(Qd,Ezo),e(Qd,CG),e(CG,Czo),e(Qd,wzo),e(st,Azo),e(st,Xme),e(Xme,yzo),e(st,Lzo),g(lA,st,null),e(mr,xzo),e(mr,Ze),g(iA,Ze,null),e(Ze,kzo),e(Ze,zme),e(zme,Szo),e(Ze,Rzo),e(Ze,ln),e(ln,Bzo),e(ln,Qme),e(Qme,Pzo),e(ln,$zo),e(ln,Wme),e(Wme,Izo),e(ln,qzo),e(ln,Hme),e(Hme,Nzo),e(ln,jzo),e(Ze,Dzo),e(Ze,dA),e(dA,H2),e(H2,Ume),e(Ume,Gzo),e(H2,Ozo),e(H2,wG),e(wG,Vzo),e(H2,Xzo),e(dA,zzo),e(dA,U2),e(U2,Jme),e(Jme,Qzo),e(U2,Wzo),e(U2,AG),e(AG,Hzo),e(U2,Uzo),e(Ze,Jzo),e(Ze,J2),e(J2,Yzo),e(J2,Yme),e(Yme,Kzo),e(J2,Zzo),e(J2,Kme),e(Kme,eQo),e(Ze,oQo),e(Ze,Zme),e(Zme,rQo),e(Ze,tQo),g(cA,Ze,null),b(c,QRe,u),b(c,Wd,u),e(Wd,Y2),e(Y2,ege),g(fA,ege,null),e(Wd,aQo),e(Wd,oge),e(oge,nQo),b(c,WRe,u),b(c,gr,u),g(mA,gr,null),e(gr,sQo),e(gr,Hd),e(Hd,lQo),e(Hd,yG),e(yG,iQo),e(Hd,dQo),e(Hd,LG),e(LG,cQo),e(Hd,fQo),e(gr,mQo),e(gr,gA),e(gA,gQo),e(gA,rge),e(rge,hQo),e(gA,pQo),e(gr,_Qo),e(gr,lt),g(hA,lt,null),e(lt,uQo),e(lt,tge),e(tge,bQo),e(lt,FQo),e(lt,Ud),e(Ud,vQo),e(Ud,age),e(age,TQo),e(Ud,MQo),e(Ud,xG),e(xG,EQo),e(Ud,CQo),e(lt,wQo),e(lt,nge),e(nge,AQo),e(lt,yQo),g(pA,lt,null),e(gr,LQo),e(gr,eo),g(_A,eo,null),e(eo,xQo),e(eo,sge),e(sge,kQo),e(eo,SQo),e(eo,dn),e(dn,RQo),e(dn,lge),e(lge,BQo),e(dn,PQo),e(dn,ige),e(ige,$Qo),e(dn,IQo),e(dn,dge),e(dge,qQo),e(dn,NQo),e(eo,jQo),e(eo,cn),e(cn,K2),e(K2,cge),e(cge,DQo),e(K2,GQo),e(K2,kG),e(kG,OQo),e(K2,VQo),e(cn,XQo),e(cn,Z2),e(Z2,fge),e(fge,zQo),e(Z2,QQo),e(Z2,SG),e(SG,WQo),e(Z2,HQo),e(cn,UQo),e(cn,eF),e(eF,mge),e(mge,JQo),e(eF,YQo),e(eF,RG),e(RG,KQo),e(eF,ZQo),e(cn,eWo),e(cn,oF),e(oF,gge),e(gge,oWo),e(oF,rWo),e(oF,BG),e(BG,tWo),e(oF,aWo),e(eo,nWo),e(eo,rF),e(rF,sWo),e(rF,hge),e(hge,lWo),e(rF,iWo),e(rF,pge),e(pge,dWo),e(eo,cWo),e(eo,_ge),e(_ge,fWo),e(eo,mWo),g(uA,eo,null),b(c,HRe,u),b(c,Jd,u),e(Jd,tF),e(tF,uge),g(bA,uge,null),e(Jd,gWo),e(Jd,bge),e(bge,hWo),b(c,URe,u),b(c,hr,u),g(FA,hr,null),e(hr,pWo),e(hr,Yd),e(Yd,_Wo),e(Yd,PG),e(PG,uWo),e(Yd,bWo),e(Yd,$G),e($G,FWo),e(Yd,vWo),e(hr,TWo),e(hr,vA),e(vA,MWo),e(vA,Fge),e(Fge,EWo),e(vA,CWo),e(hr,wWo),e(hr,it),g(TA,it,null),e(it,AWo),e(it,vge),e(vge,yWo),e(it,LWo),e(it,Kd),e(Kd,xWo),e(Kd,Tge),e(Tge,kWo),e(Kd,SWo),e(Kd,IG),e(IG,RWo),e(Kd,BWo),e(it,PWo),e(it,Mge),e(Mge,$Wo),e(it,IWo),g(MA,it,null),e(hr,qWo),e(hr,oo),g(EA,oo,null),e(oo,NWo),e(oo,Ege),e(Ege,jWo),e(oo,DWo),e(oo,fn),e(fn,GWo),e(fn,Cge),e(Cge,OWo),e(fn,VWo),e(fn,wge),e(wge,XWo),e(fn,zWo),e(fn,Age),e(Age,QWo),e(fn,WWo),e(oo,HWo),e(oo,Zd),e(Zd,aF),e(aF,yge),e(yge,UWo),e(aF,JWo),e(aF,qG),e(qG,YWo),e(aF,KWo),e(Zd,ZWo),e(Zd,nF),e(nF,Lge),e(Lge,eHo),e(nF,oHo),e(nF,NG),e(NG,rHo),e(nF,tHo),e(Zd,aHo),e(Zd,sF),e(sF,xge),e(xge,nHo),e(sF,sHo),e(sF,jG),e(jG,lHo),e(sF,iHo),e(oo,dHo),e(oo,lF),e(lF,cHo),e(lF,kge),e(kge,fHo),e(lF,mHo),e(lF,Sge),e(Sge,gHo),e(oo,hHo),e(oo,Rge),e(Rge,pHo),e(oo,_Ho),g(CA,oo,null),b(c,JRe,u),b(c,ec,u),e(ec,iF),e(iF,Bge),g(wA,Bge,null),e(ec,uHo),e(ec,Pge),e(Pge,bHo),b(c,YRe,u),b(c,pr,u),g(AA,pr,null),e(pr,FHo),e(pr,oc),e(oc,vHo),e(oc,DG),e(DG,THo),e(oc,MHo),e(oc,GG),e(GG,EHo),e(oc,CHo),e(pr,wHo),e(pr,yA),e(yA,AHo),e(yA,$ge),e($ge,yHo),e(yA,LHo),e(pr,xHo),e(pr,dt),g(LA,dt,null),e(dt,kHo),e(dt,Ige),e(Ige,SHo),e(dt,RHo),e(dt,rc),e(rc,BHo),e(rc,qge),e(qge,PHo),e(rc,$Ho),e(rc,OG),e(OG,IHo),e(rc,qHo),e(dt,NHo),e(dt,Nge),e(Nge,jHo),e(dt,DHo),g(xA,dt,null),e(pr,GHo),e(pr,ro),g(kA,ro,null),e(ro,OHo),e(ro,jge),e(jge,VHo),e(ro,XHo),e(ro,mn),e(mn,zHo),e(mn,Dge),e(Dge,QHo),e(mn,WHo),e(mn,Gge),e(Gge,HHo),e(mn,UHo),e(mn,Oge),e(Oge,JHo),e(mn,YHo),e(ro,KHo),e(ro,Vge),e(Vge,dF),e(dF,Xge),e(Xge,ZHo),e(dF,eUo),e(dF,VG),e(VG,oUo),e(dF,rUo),e(ro,tUo),e(ro,cF),e(cF,aUo),e(cF,zge),e(zge,nUo),e(cF,sUo),e(cF,Qge),e(Qge,lUo),e(ro,iUo),e(ro,Wge),e(Wge,dUo),e(ro,cUo),g(SA,ro,null),b(c,KRe,u),b(c,tc,u),e(tc,fF),e(fF,Hge),g(RA,Hge,null),e(tc,fUo),e(tc,Uge),e(Uge,mUo),b(c,ZRe,u),b(c,_r,u),g(BA,_r,null),e(_r,gUo),e(_r,ac),e(ac,hUo),e(ac,XG),e(XG,pUo),e(ac,_Uo),e(ac,zG),e(zG,uUo),e(ac,bUo),e(_r,FUo),e(_r,PA),e(PA,vUo),e(PA,Jge),e(Jge,TUo),e(PA,MUo),e(_r,EUo),e(_r,ct),g($A,ct,null),e(ct,CUo),e(ct,Yge),e(Yge,wUo),e(ct,AUo),e(ct,nc),e(nc,yUo),e(nc,Kge),e(Kge,LUo),e(nc,xUo),e(nc,QG),e(QG,kUo),e(nc,SUo),e(ct,RUo),e(ct,Zge),e(Zge,BUo),e(ct,PUo),g(IA,ct,null),e(_r,$Uo),e(_r,to),g(qA,to,null),e(to,IUo),e(to,ehe),e(ehe,qUo),e(to,NUo),e(to,gn),e(gn,jUo),e(gn,ohe),e(ohe,DUo),e(gn,GUo),e(gn,rhe),e(rhe,OUo),e(gn,VUo),e(gn,the),e(the,XUo),e(gn,zUo),e(to,QUo),e(to,ahe),e(ahe,mF),e(mF,nhe),e(nhe,WUo),e(mF,HUo),e(mF,WG),e(WG,UUo),e(mF,JUo),e(to,YUo),e(to,gF),e(gF,KUo),e(gF,she),e(she,ZUo),e(gF,eJo),e(gF,lhe),e(lhe,oJo),e(to,rJo),e(to,ihe),e(ihe,tJo),e(to,aJo),g(NA,to,null),b(c,eBe,u),b(c,sc,u),e(sc,hF),e(hF,dhe),g(jA,dhe,null),e(sc,nJo),e(sc,che),e(che,sJo),b(c,oBe,u),b(c,ur,u),g(DA,ur,null),e(ur,lJo),e(ur,lc),e(lc,iJo),e(lc,HG),e(HG,dJo),e(lc,cJo),e(lc,UG),e(UG,fJo),e(lc,mJo),e(ur,gJo),e(ur,GA),e(GA,hJo),e(GA,fhe),e(fhe,pJo),e(GA,_Jo),e(ur,uJo),e(ur,ft),g(OA,ft,null),e(ft,bJo),e(ft,mhe),e(mhe,FJo),e(ft,vJo),e(ft,ic),e(ic,TJo),e(ic,ghe),e(ghe,MJo),e(ic,EJo),e(ic,JG),e(JG,CJo),e(ic,wJo),e(ft,AJo),e(ft,hhe),e(hhe,yJo),e(ft,LJo),g(VA,ft,null),e(ur,xJo),e(ur,ao),g(XA,ao,null),e(ao,kJo),e(ao,phe),e(phe,SJo),e(ao,RJo),e(ao,hn),e(hn,BJo),e(hn,_he),e(_he,PJo),e(hn,$Jo),e(hn,uhe),e(uhe,IJo),e(hn,qJo),e(hn,bhe),e(bhe,NJo),e(hn,jJo),e(ao,DJo),e(ao,dc),e(dc,pF),e(pF,Fhe),e(Fhe,GJo),e(pF,OJo),e(pF,YG),e(YG,VJo),e(pF,XJo),e(dc,zJo),e(dc,_F),e(_F,vhe),e(vhe,QJo),e(_F,WJo),e(_F,KG),e(KG,HJo),e(_F,UJo),e(dc,JJo),e(dc,uF),e(uF,The),e(The,YJo),e(uF,KJo),e(uF,ZG),e(ZG,ZJo),e(uF,eYo),e(ao,oYo),e(ao,bF),e(bF,rYo),e(bF,Mhe),e(Mhe,tYo),e(bF,aYo),e(bF,Ehe),e(Ehe,nYo),e(ao,sYo),e(ao,Che),e(Che,lYo),e(ao,iYo),g(zA,ao,null),b(c,rBe,u),b(c,cc,u),e(cc,FF),e(FF,whe),g(QA,whe,null),e(cc,dYo),e(cc,Ahe),e(Ahe,cYo),b(c,tBe,u),b(c,br,u),g(WA,br,null),e(br,fYo),e(br,fc),e(fc,mYo),e(fc,eO),e(eO,gYo),e(fc,hYo),e(fc,oO),e(oO,pYo),e(fc,_Yo),e(br,uYo),e(br,HA),e(HA,bYo),e(HA,yhe),e(yhe,FYo),e(HA,vYo),e(br,TYo),e(br,mt),g(UA,mt,null),e(mt,MYo),e(mt,Lhe),e(Lhe,EYo),e(mt,CYo),e(mt,mc),e(mc,wYo),e(mc,xhe),e(xhe,AYo),e(mc,yYo),e(mc,rO),e(rO,LYo),e(mc,xYo),e(mt,kYo),e(mt,khe),e(khe,SYo),e(mt,RYo),g(JA,mt,null),e(br,BYo),e(br,no),g(YA,no,null),e(no,PYo),e(no,She),e(She,$Yo),e(no,IYo),e(no,pn),e(pn,qYo),e(pn,Rhe),e(Rhe,NYo),e(pn,jYo),e(pn,Bhe),e(Bhe,DYo),e(pn,GYo),e(pn,Phe),e(Phe,OYo),e(pn,VYo),e(no,XYo),e(no,$he),e($he,vF),e(vF,Ihe),e(Ihe,zYo),e(vF,QYo),e(vF,tO),e(tO,WYo),e(vF,HYo),e(no,UYo),e(no,TF),e(TF,JYo),e(TF,qhe),e(qhe,YYo),e(TF,KYo),e(TF,Nhe),e(Nhe,ZYo),e(no,eKo),e(no,jhe),e(jhe,oKo),e(no,rKo),g(KA,no,null),b(c,aBe,u),b(c,gc,u),e(gc,MF),e(MF,Dhe),g(ZA,Dhe,null),e(gc,tKo),e(gc,Ghe),e(Ghe,aKo),b(c,nBe,u),b(c,Fr,u),g(e0,Fr,null),e(Fr,nKo),e(Fr,hc),e(hc,sKo),e(hc,aO),e(aO,lKo),e(hc,iKo),e(hc,nO),e(nO,dKo),e(hc,cKo),e(Fr,fKo),e(Fr,o0),e(o0,mKo),e(o0,Ohe),e(Ohe,gKo),e(o0,hKo),e(Fr,pKo),e(Fr,gt),g(r0,gt,null),e(gt,_Ko),e(gt,Vhe),e(Vhe,uKo),e(gt,bKo),e(gt,pc),e(pc,FKo),e(pc,Xhe),e(Xhe,vKo),e(pc,TKo),e(pc,sO),e(sO,MKo),e(pc,EKo),e(gt,CKo),e(gt,zhe),e(zhe,wKo),e(gt,AKo),g(t0,gt,null),e(Fr,yKo),e(Fr,ho),g(a0,ho,null),e(ho,LKo),e(ho,Qhe),e(Qhe,xKo),e(ho,kKo),e(ho,_n),e(_n,SKo),e(_n,Whe),e(Whe,RKo),e(_n,BKo),e(_n,Hhe),e(Hhe,PKo),e(_n,$Ko),e(_n,Uhe),e(Uhe,IKo),e(_n,qKo),e(ho,NKo),e(ho,x),e(x,EF),e(EF,Jhe),e(Jhe,jKo),e(EF,DKo),e(EF,lO),e(lO,GKo),e(EF,OKo),e(x,VKo),e(x,CF),e(CF,Yhe),e(Yhe,XKo),e(CF,zKo),e(CF,iO),e(iO,QKo),e(CF,WKo),e(x,HKo),e(x,wF),e(wF,Khe),e(Khe,UKo),e(wF,JKo),e(wF,dO),e(dO,YKo),e(wF,KKo),e(x,ZKo),e(x,AF),e(AF,Zhe),e(Zhe,eZo),e(AF,oZo),e(AF,cO),e(cO,rZo),e(AF,tZo),e(x,aZo),e(x,yF),e(yF,epe),e(epe,nZo),e(yF,sZo),e(yF,fO),e(fO,lZo),e(yF,iZo),e(x,dZo),e(x,LF),e(LF,ope),e(ope,cZo),e(LF,fZo),e(LF,mO),e(mO,mZo),e(LF,gZo),e(x,hZo),e(x,xF),e(xF,rpe),e(rpe,pZo),e(xF,_Zo),e(xF,gO),e(gO,uZo),e(xF,bZo),e(x,FZo),e(x,kF),e(kF,tpe),e(tpe,vZo),e(kF,TZo),e(kF,hO),e(hO,MZo),e(kF,EZo),e(x,CZo),e(x,SF),e(SF,ape),e(ape,wZo),e(SF,AZo),e(SF,pO),e(pO,yZo),e(SF,LZo),e(x,xZo),e(x,RF),e(RF,npe),e(npe,kZo),e(RF,SZo),e(RF,_O),e(_O,RZo),e(RF,BZo),e(x,PZo),e(x,BF),e(BF,spe),e(spe,$Zo),e(BF,IZo),e(BF,uO),e(uO,qZo),e(BF,NZo),e(x,jZo),e(x,PF),e(PF,lpe),e(lpe,DZo),e(PF,GZo),e(PF,bO),e(bO,OZo),e(PF,VZo),e(x,XZo),e(x,$F),e($F,ipe),e(ipe,zZo),e($F,QZo),e($F,FO),e(FO,WZo),e($F,HZo),e(x,UZo),e(x,IF),e(IF,dpe),e(dpe,JZo),e(IF,YZo),e(IF,vO),e(vO,KZo),e(IF,ZZo),e(x,eer),e(x,qF),e(qF,cpe),e(cpe,oer),e(qF,rer),e(qF,TO),e(TO,ter),e(qF,aer),e(x,ner),e(x,NF),e(NF,fpe),e(fpe,ser),e(NF,ler),e(NF,MO),e(MO,ier),e(NF,der),e(x,cer),e(x,Gs),e(Gs,mpe),e(mpe,fer),e(Gs,mer),e(Gs,EO),e(EO,ger),e(Gs,her),e(Gs,CO),e(CO,per),e(Gs,_er),e(x,uer),e(x,jF),e(jF,gpe),e(gpe,ber),e(jF,Fer),e(jF,wO),e(wO,ver),e(jF,Ter),e(x,Mer),e(x,DF),e(DF,hpe),e(hpe,Eer),e(DF,Cer),e(DF,AO),e(AO,wer),e(DF,Aer),e(x,yer),e(x,GF),e(GF,ppe),e(ppe,Ler),e(GF,xer),e(GF,yO),e(yO,ker),e(GF,Ser),e(x,Rer),e(x,OF),e(OF,_pe),e(_pe,Ber),e(OF,Per),e(OF,LO),e(LO,$er),e(OF,Ier),e(x,qer),e(x,VF),e(VF,upe),e(upe,Ner),e(VF,jer),e(VF,xO),e(xO,Der),e(VF,Ger),e(x,Oer),e(x,XF),e(XF,bpe),e(bpe,Ver),e(XF,Xer),e(XF,kO),e(kO,zer),e(XF,Qer),e(x,Wer),e(x,zF),e(zF,Fpe),e(Fpe,Her),e(zF,Uer),e(zF,SO),e(SO,Jer),e(zF,Yer),e(x,Ker),e(x,QF),e(QF,vpe),e(vpe,Zer),e(QF,eor),e(QF,RO),e(RO,oor),e(QF,ror),e(x,tor),e(x,WF),e(WF,Tpe),e(Tpe,aor),e(WF,nor),e(WF,BO),e(BO,sor),e(WF,lor),e(x,ior),e(x,HF),e(HF,Mpe),e(Mpe,dor),e(HF,cor),e(HF,PO),e(PO,mor),e(HF,gor),e(x,hor),e(x,UF),e(UF,Epe),e(Epe,por),e(UF,_or),e(UF,$O),e($O,uor),e(UF,bor),e(x,For),e(x,JF),e(JF,Cpe),e(Cpe,vor),e(JF,Tor),e(JF,IO),e(IO,Mor),e(JF,Eor),e(x,Cor),e(x,YF),e(YF,wpe),e(wpe,wor),e(YF,Aor),e(YF,qO),e(qO,yor),e(YF,Lor),e(x,xor),e(x,KF),e(KF,Ape),e(Ape,kor),e(KF,Sor),e(KF,NO),e(NO,Ror),e(KF,Bor),e(x,Por),e(x,ZF),e(ZF,ype),e(ype,$or),e(ZF,Ior),e(ZF,jO),e(jO,qor),e(ZF,Nor),e(x,jor),e(x,ev),e(ev,Lpe),e(Lpe,Dor),e(ev,Gor),e(ev,DO),e(DO,Oor),e(ev,Vor),e(x,Xor),e(x,ov),e(ov,xpe),e(xpe,zor),e(ov,Qor),e(ov,GO),e(GO,Wor),e(ov,Hor),e(x,Uor),e(x,rv),e(rv,kpe),e(kpe,Jor),e(rv,Yor),e(rv,OO),e(OO,Kor),e(rv,Zor),e(x,err),e(x,tv),e(tv,Spe),e(Spe,orr),e(tv,rrr),e(tv,VO),e(VO,trr),e(tv,arr),e(x,nrr),e(x,av),e(av,Rpe),e(Rpe,srr),e(av,lrr),e(av,XO),e(XO,irr),e(av,drr),e(x,crr),e(x,nv),e(nv,Bpe),e(Bpe,frr),e(nv,mrr),e(nv,zO),e(zO,grr),e(nv,hrr),e(x,prr),e(x,sv),e(sv,Ppe),e(Ppe,_rr),e(sv,urr),e(sv,QO),e(QO,brr),e(sv,Frr),e(x,vrr),e(x,lv),e(lv,$pe),e($pe,Trr),e(lv,Mrr),e(lv,WO),e(WO,Err),e(lv,Crr),e(x,wrr),e(x,iv),e(iv,Ipe),e(Ipe,Arr),e(iv,yrr),e(iv,HO),e(HO,Lrr),e(iv,xrr),e(x,krr),e(x,dv),e(dv,qpe),e(qpe,Srr),e(dv,Rrr),e(dv,UO),e(UO,Brr),e(dv,Prr),e(x,$rr),e(x,cv),e(cv,Npe),e(Npe,Irr),e(cv,qrr),e(cv,JO),e(JO,Nrr),e(cv,jrr),e(x,Drr),e(x,fv),e(fv,jpe),e(jpe,Grr),e(fv,Orr),e(fv,YO),e(YO,Vrr),e(fv,Xrr),e(ho,zrr),e(ho,Dpe),e(Dpe,Qrr),e(ho,Wrr),g(n0,ho,null),b(c,sBe,u),b(c,_c,u),e(_c,mv),e(mv,Gpe),g(s0,Gpe,null),e(_c,Hrr),e(_c,Ope),e(Ope,Urr),b(c,lBe,u),b(c,vr,u),g(l0,vr,null),e(vr,Jrr),e(vr,uc),e(uc,Yrr),e(uc,KO),e(KO,Krr),e(uc,Zrr),e(uc,ZO),e(ZO,etr),e(uc,otr),e(vr,rtr),e(vr,i0),e(i0,ttr),e(i0,Vpe),e(Vpe,atr),e(i0,ntr),e(vr,str),e(vr,ht),g(d0,ht,null),e(ht,ltr),e(ht,Xpe),e(Xpe,itr),e(ht,dtr),e(ht,bc),e(bc,ctr),e(bc,zpe),e(zpe,ftr),e(bc,mtr),e(bc,eV),e(eV,gtr),e(bc,htr),e(ht,ptr),e(ht,Qpe),e(Qpe,_tr),e(ht,utr),g(c0,ht,null),e(vr,btr),e(vr,po),g(f0,po,null),e(po,Ftr),e(po,Wpe),e(Wpe,vtr),e(po,Ttr),e(po,un),e(un,Mtr),e(un,Hpe),e(Hpe,Etr),e(un,Ctr),e(un,Upe),e(Upe,wtr),e(un,Atr),e(un,Jpe),e(Jpe,ytr),e(un,Ltr),e(po,xtr),e(po,H),e(H,gv),e(gv,Ype),e(Ype,ktr),e(gv,Str),e(gv,oV),e(oV,Rtr),e(gv,Btr),e(H,Ptr),e(H,hv),e(hv,Kpe),e(Kpe,$tr),e(hv,Itr),e(hv,rV),e(rV,qtr),e(hv,Ntr),e(H,jtr),e(H,pv),e(pv,Zpe),e(Zpe,Dtr),e(pv,Gtr),e(pv,tV),e(tV,Otr),e(pv,Vtr),e(H,Xtr),e(H,_v),e(_v,e_e),e(e_e,ztr),e(_v,Qtr),e(_v,aV),e(aV,Wtr),e(_v,Htr),e(H,Utr),e(H,uv),e(uv,o_e),e(o_e,Jtr),e(uv,Ytr),e(uv,nV),e(nV,Ktr),e(uv,Ztr),e(H,ear),e(H,bv),e(bv,r_e),e(r_e,oar),e(bv,rar),e(bv,sV),e(sV,tar),e(bv,aar),e(H,nar),e(H,Fv),e(Fv,t_e),e(t_e,sar),e(Fv,lar),e(Fv,lV),e(lV,iar),e(Fv,dar),e(H,car),e(H,vv),e(vv,a_e),e(a_e,far),e(vv,mar),e(vv,iV),e(iV,gar),e(vv,har),e(H,par),e(H,Tv),e(Tv,n_e),e(n_e,_ar),e(Tv,uar),e(Tv,dV),e(dV,bar),e(Tv,Far),e(H,Tar),e(H,Mv),e(Mv,s_e),e(s_e,Mar),e(Mv,Ear),e(Mv,cV),e(cV,Car),e(Mv,war),e(H,Aar),e(H,Ev),e(Ev,l_e),e(l_e,yar),e(Ev,Lar),e(Ev,fV),e(fV,xar),e(Ev,kar),e(H,Sar),e(H,Cv),e(Cv,i_e),e(i_e,Rar),e(Cv,Bar),e(Cv,mV),e(mV,Par),e(Cv,$ar),e(H,Iar),e(H,wv),e(wv,d_e),e(d_e,qar),e(wv,Nar),e(wv,gV),e(gV,jar),e(wv,Dar),e(H,Gar),e(H,Av),e(Av,c_e),e(c_e,Oar),e(Av,Var),e(Av,hV),e(hV,Xar),e(Av,zar),e(H,Qar),e(H,yv),e(yv,f_e),e(f_e,War),e(yv,Har),e(yv,pV),e(pV,Uar),e(yv,Jar),e(H,Yar),e(H,Lv),e(Lv,m_e),e(m_e,Kar),e(Lv,Zar),e(Lv,_V),e(_V,enr),e(Lv,onr),e(H,rnr),e(H,xv),e(xv,g_e),e(g_e,tnr),e(xv,anr),e(xv,uV),e(uV,nnr),e(xv,snr),e(H,lnr),e(H,kv),e(kv,h_e),e(h_e,inr),e(kv,dnr),e(kv,bV),e(bV,cnr),e(kv,fnr),e(H,mnr),e(H,Sv),e(Sv,p_e),e(p_e,gnr),e(Sv,hnr),e(Sv,FV),e(FV,pnr),e(Sv,_nr),e(H,unr),e(H,Rv),e(Rv,__e),e(__e,bnr),e(Rv,Fnr),e(Rv,vV),e(vV,vnr),e(Rv,Tnr),e(H,Mnr),e(H,Bv),e(Bv,u_e),e(u_e,Enr),e(Bv,Cnr),e(Bv,TV),e(TV,wnr),e(Bv,Anr),e(H,ynr),e(H,Pv),e(Pv,b_e),e(b_e,Lnr),e(Pv,xnr),e(Pv,MV),e(MV,knr),e(Pv,Snr),e(H,Rnr),e(H,$v),e($v,F_e),e(F_e,Bnr),e($v,Pnr),e($v,EV),e(EV,$nr),e($v,Inr),e(po,qnr),e(po,v_e),e(v_e,Nnr),e(po,jnr),g(m0,po,null),b(c,iBe,u),b(c,Fc,u),e(Fc,Iv),e(Iv,T_e),g(g0,T_e,null),e(Fc,Dnr),e(Fc,M_e),e(M_e,Gnr),b(c,dBe,u),b(c,Tr,u),g(h0,Tr,null),e(Tr,Onr),e(Tr,vc),e(vc,Vnr),e(vc,CV),e(CV,Xnr),e(vc,znr),e(vc,wV),e(wV,Qnr),e(vc,Wnr),e(Tr,Hnr),e(Tr,p0),e(p0,Unr),e(p0,E_e),e(E_e,Jnr),e(p0,Ynr),e(Tr,Knr),e(Tr,pt),g(_0,pt,null),e(pt,Znr),e(pt,C_e),e(C_e,esr),e(pt,osr),e(pt,Tc),e(Tc,rsr),e(Tc,w_e),e(w_e,tsr),e(Tc,asr),e(Tc,AV),e(AV,nsr),e(Tc,ssr),e(pt,lsr),e(pt,A_e),e(A_e,isr),e(pt,dsr),g(u0,pt,null),e(Tr,csr),e(Tr,_o),g(b0,_o,null),e(_o,fsr),e(_o,y_e),e(y_e,msr),e(_o,gsr),e(_o,bn),e(bn,hsr),e(bn,L_e),e(L_e,psr),e(bn,_sr),e(bn,x_e),e(x_e,usr),e(bn,bsr),e(bn,k_e),e(k_e,Fsr),e(bn,vsr),e(_o,Tsr),e(_o,ce),e(ce,qv),e(qv,S_e),e(S_e,Msr),e(qv,Esr),e(qv,yV),e(yV,Csr),e(qv,wsr),e(ce,Asr),e(ce,Nv),e(Nv,R_e),e(R_e,ysr),e(Nv,Lsr),e(Nv,LV),e(LV,xsr),e(Nv,ksr),e(ce,Ssr),e(ce,jv),e(jv,B_e),e(B_e,Rsr),e(jv,Bsr),e(jv,xV),e(xV,Psr),e(jv,$sr),e(ce,Isr),e(ce,Dv),e(Dv,P_e),e(P_e,qsr),e(Dv,Nsr),e(Dv,kV),e(kV,jsr),e(Dv,Dsr),e(ce,Gsr),e(ce,Gv),e(Gv,$_e),e($_e,Osr),e(Gv,Vsr),e(Gv,SV),e(SV,Xsr),e(Gv,zsr),e(ce,Qsr),e(ce,Ov),e(Ov,I_e),e(I_e,Wsr),e(Ov,Hsr),e(Ov,RV),e(RV,Usr),e(Ov,Jsr),e(ce,Ysr),e(ce,Vv),e(Vv,q_e),e(q_e,Ksr),e(Vv,Zsr),e(Vv,BV),e(BV,elr),e(Vv,olr),e(ce,rlr),e(ce,Xv),e(Xv,N_e),e(N_e,tlr),e(Xv,alr),e(Xv,PV),e(PV,nlr),e(Xv,slr),e(ce,llr),e(ce,zv),e(zv,j_e),e(j_e,ilr),e(zv,dlr),e(zv,$V),e($V,clr),e(zv,flr),e(ce,mlr),e(ce,Qv),e(Qv,D_e),e(D_e,glr),e(Qv,hlr),e(Qv,IV),e(IV,plr),e(Qv,_lr),e(ce,ulr),e(ce,Wv),e(Wv,G_e),e(G_e,blr),e(Wv,Flr),e(Wv,qV),e(qV,vlr),e(Wv,Tlr),e(ce,Mlr),e(ce,Hv),e(Hv,O_e),e(O_e,Elr),e(Hv,Clr),e(Hv,NV),e(NV,wlr),e(Hv,Alr),e(_o,ylr),e(_o,V_e),e(V_e,Llr),e(_o,xlr),g(F0,_o,null),b(c,cBe,u),b(c,Mc,u),e(Mc,Uv),e(Uv,X_e),g(v0,X_e,null),e(Mc,klr),e(Mc,z_e),e(z_e,Slr),b(c,fBe,u),b(c,Mr,u),g(T0,Mr,null),e(Mr,Rlr),e(Mr,Ec),e(Ec,Blr),e(Ec,jV),e(jV,Plr),e(Ec,$lr),e(Ec,DV),e(DV,Ilr),e(Ec,qlr),e(Mr,Nlr),e(Mr,M0),e(M0,jlr),e(M0,Q_e),e(Q_e,Dlr),e(M0,Glr),e(Mr,Olr),e(Mr,_t),g(E0,_t,null),e(_t,Vlr),e(_t,W_e),e(W_e,Xlr),e(_t,zlr),e(_t,Cc),e(Cc,Qlr),e(Cc,H_e),e(H_e,Wlr),e(Cc,Hlr),e(Cc,GV),e(GV,Ulr),e(Cc,Jlr),e(_t,Ylr),e(_t,U_e),e(U_e,Klr),e(_t,Zlr),g(C0,_t,null),e(Mr,eir),e(Mr,uo),g(w0,uo,null),e(uo,oir),e(uo,J_e),e(J_e,rir),e(uo,tir),e(uo,Fn),e(Fn,air),e(Fn,Y_e),e(Y_e,nir),e(Fn,sir),e(Fn,K_e),e(K_e,lir),e(Fn,iir),e(Fn,Z_e),e(Z_e,dir),e(Fn,cir),e(uo,fir),e(uo,A0),e(A0,Jv),e(Jv,eue),e(eue,mir),e(Jv,gir),e(Jv,OV),e(OV,hir),e(Jv,pir),e(A0,_ir),e(A0,Yv),e(Yv,oue),e(oue,uir),e(Yv,bir),e(Yv,VV),e(VV,Fir),e(Yv,vir),e(uo,Tir),e(uo,rue),e(rue,Mir),e(uo,Eir),g(y0,uo,null),b(c,mBe,u),b(c,wc,u),e(wc,Kv),e(Kv,tue),g(L0,tue,null),e(wc,Cir),e(wc,aue),e(aue,wir),b(c,gBe,u),b(c,Er,u),g(x0,Er,null),e(Er,Air),e(Er,Ac),e(Ac,yir),e(Ac,XV),e(XV,Lir),e(Ac,xir),e(Ac,zV),e(zV,kir),e(Ac,Sir),e(Er,Rir),e(Er,k0),e(k0,Bir),e(k0,nue),e(nue,Pir),e(k0,$ir),e(Er,Iir),e(Er,ut),g(S0,ut,null),e(ut,qir),e(ut,sue),e(sue,Nir),e(ut,jir),e(ut,yc),e(yc,Dir),e(yc,lue),e(lue,Gir),e(yc,Oir),e(yc,QV),e(QV,Vir),e(yc,Xir),e(ut,zir),e(ut,iue),e(iue,Qir),e(ut,Wir),g(R0,ut,null),e(Er,Hir),e(Er,bo),g(B0,bo,null),e(bo,Uir),e(bo,due),e(due,Jir),e(bo,Yir),e(bo,vn),e(vn,Kir),e(vn,cue),e(cue,Zir),e(vn,edr),e(vn,fue),e(fue,odr),e(vn,rdr),e(vn,mue),e(mue,tdr),e(vn,adr),e(bo,ndr),e(bo,J),e(J,Zv),e(Zv,gue),e(gue,sdr),e(Zv,ldr),e(Zv,WV),e(WV,idr),e(Zv,ddr),e(J,cdr),e(J,e6),e(e6,hue),e(hue,fdr),e(e6,mdr),e(e6,HV),e(HV,gdr),e(e6,hdr),e(J,pdr),e(J,o6),e(o6,pue),e(pue,_dr),e(o6,udr),e(o6,UV),e(UV,bdr),e(o6,Fdr),e(J,vdr),e(J,r6),e(r6,_ue),e(_ue,Tdr),e(r6,Mdr),e(r6,JV),e(JV,Edr),e(r6,Cdr),e(J,wdr),e(J,t6),e(t6,uue),e(uue,Adr),e(t6,ydr),e(t6,YV),e(YV,Ldr),e(t6,xdr),e(J,kdr),e(J,a6),e(a6,bue),e(bue,Sdr),e(a6,Rdr),e(a6,KV),e(KV,Bdr),e(a6,Pdr),e(J,$dr),e(J,n6),e(n6,Fue),e(Fue,Idr),e(n6,qdr),e(n6,ZV),e(ZV,Ndr),e(n6,jdr),e(J,Ddr),e(J,s6),e(s6,vue),e(vue,Gdr),e(s6,Odr),e(s6,eX),e(eX,Vdr),e(s6,Xdr),e(J,zdr),e(J,l6),e(l6,Tue),e(Tue,Qdr),e(l6,Wdr),e(l6,oX),e(oX,Hdr),e(l6,Udr),e(J,Jdr),e(J,i6),e(i6,Mue),e(Mue,Ydr),e(i6,Kdr),e(i6,rX),e(rX,Zdr),e(i6,ecr),e(J,ocr),e(J,d6),e(d6,Eue),e(Eue,rcr),e(d6,tcr),e(d6,tX),e(tX,acr),e(d6,ncr),e(J,scr),e(J,c6),e(c6,Cue),e(Cue,lcr),e(c6,icr),e(c6,aX),e(aX,dcr),e(c6,ccr),e(J,fcr),e(J,f6),e(f6,wue),e(wue,mcr),e(f6,gcr),e(f6,nX),e(nX,hcr),e(f6,pcr),e(J,_cr),e(J,m6),e(m6,Aue),e(Aue,ucr),e(m6,bcr),e(m6,sX),e(sX,Fcr),e(m6,vcr),e(J,Tcr),e(J,g6),e(g6,yue),e(yue,Mcr),e(g6,Ecr),e(g6,lX),e(lX,Ccr),e(g6,wcr),e(J,Acr),e(J,h6),e(h6,Lue),e(Lue,ycr),e(h6,Lcr),e(h6,iX),e(iX,xcr),e(h6,kcr),e(J,Scr),e(J,p6),e(p6,xue),e(xue,Rcr),e(p6,Bcr),e(p6,dX),e(dX,Pcr),e(p6,$cr),e(J,Icr),e(J,_6),e(_6,kue),e(kue,qcr),e(_6,Ncr),e(_6,cX),e(cX,jcr),e(_6,Dcr),e(J,Gcr),e(J,u6),e(u6,Sue),e(Sue,Ocr),e(u6,Vcr),e(u6,fX),e(fX,Xcr),e(u6,zcr),e(J,Qcr),e(J,b6),e(b6,Rue),e(Rue,Wcr),e(b6,Hcr),e(b6,mX),e(mX,Ucr),e(b6,Jcr),e(bo,Ycr),e(bo,Bue),e(Bue,Kcr),e(bo,Zcr),g(P0,bo,null),b(c,hBe,u),b(c,Lc,u),e(Lc,F6),e(F6,Pue),g($0,Pue,null),e(Lc,efr),e(Lc,$ue),e($ue,ofr),b(c,pBe,u),b(c,Cr,u),g(I0,Cr,null),e(Cr,rfr),e(Cr,xc),e(xc,tfr),e(xc,gX),e(gX,afr),e(xc,nfr),e(xc,hX),e(hX,sfr),e(xc,lfr),e(Cr,ifr),e(Cr,q0),e(q0,dfr),e(q0,Iue),e(Iue,cfr),e(q0,ffr),e(Cr,mfr),e(Cr,bt),g(N0,bt,null),e(bt,gfr),e(bt,que),e(que,hfr),e(bt,pfr),e(bt,kc),e(kc,_fr),e(kc,Nue),e(Nue,ufr),e(kc,bfr),e(kc,pX),e(pX,Ffr),e(kc,vfr),e(bt,Tfr),e(bt,jue),e(jue,Mfr),e(bt,Efr),g(j0,bt,null),e(Cr,Cfr),e(Cr,Fo),g(D0,Fo,null),e(Fo,wfr),e(Fo,Due),e(Due,Afr),e(Fo,yfr),e(Fo,Tn),e(Tn,Lfr),e(Tn,Gue),e(Gue,xfr),e(Tn,kfr),e(Tn,Oue),e(Oue,Sfr),e(Tn,Rfr),e(Tn,Vue),e(Vue,Bfr),e(Tn,Pfr),e(Fo,$fr),e(Fo,ue),e(ue,v6),e(v6,Xue),e(Xue,Ifr),e(v6,qfr),e(v6,_X),e(_X,Nfr),e(v6,jfr),e(ue,Dfr),e(ue,T6),e(T6,zue),e(zue,Gfr),e(T6,Ofr),e(T6,uX),e(uX,Vfr),e(T6,Xfr),e(ue,zfr),e(ue,M6),e(M6,Que),e(Que,Qfr),e(M6,Wfr),e(M6,bX),e(bX,Hfr),e(M6,Ufr),e(ue,Jfr),e(ue,E6),e(E6,Wue),e(Wue,Yfr),e(E6,Kfr),e(E6,FX),e(FX,Zfr),e(E6,emr),e(ue,omr),e(ue,C6),e(C6,Hue),e(Hue,rmr),e(C6,tmr),e(C6,vX),e(vX,amr),e(C6,nmr),e(ue,smr),e(ue,w6),e(w6,Uue),e(Uue,lmr),e(w6,imr),e(w6,TX),e(TX,dmr),e(w6,cmr),e(ue,fmr),e(ue,A6),e(A6,Jue),e(Jue,mmr),e(A6,gmr),e(A6,MX),e(MX,hmr),e(A6,pmr),e(ue,_mr),e(ue,y6),e(y6,Yue),e(Yue,umr),e(y6,bmr),e(y6,EX),e(EX,Fmr),e(y6,vmr),e(ue,Tmr),e(ue,L6),e(L6,Kue),e(Kue,Mmr),e(L6,Emr),e(L6,CX),e(CX,Cmr),e(L6,wmr),e(ue,Amr),e(ue,x6),e(x6,Zue),e(Zue,ymr),e(x6,Lmr),e(x6,wX),e(wX,xmr),e(x6,kmr),e(Fo,Smr),e(Fo,e1e),e(e1e,Rmr),e(Fo,Bmr),g(G0,Fo,null),b(c,_Be,u),b(c,Sc,u),e(Sc,k6),e(k6,o1e),g(O0,o1e,null),e(Sc,Pmr),e(Sc,r1e),e(r1e,$mr),b(c,uBe,u),b(c,wr,u),g(V0,wr,null),e(wr,Imr),e(wr,Rc),e(Rc,qmr),e(Rc,AX),e(AX,Nmr),e(Rc,jmr),e(Rc,yX),e(yX,Dmr),e(Rc,Gmr),e(wr,Omr),e(wr,X0),e(X0,Vmr),e(X0,t1e),e(t1e,Xmr),e(X0,zmr),e(wr,Qmr),e(wr,Ft),g(z0,Ft,null),e(Ft,Wmr),e(Ft,a1e),e(a1e,Hmr),e(Ft,Umr),e(Ft,Bc),e(Bc,Jmr),e(Bc,n1e),e(n1e,Ymr),e(Bc,Kmr),e(Bc,LX),e(LX,Zmr),e(Bc,egr),e(Ft,ogr),e(Ft,s1e),e(s1e,rgr),e(Ft,tgr),g(Q0,Ft,null),e(wr,agr),e(wr,vo),g(W0,vo,null),e(vo,ngr),e(vo,l1e),e(l1e,sgr),e(vo,lgr),e(vo,Mn),e(Mn,igr),e(Mn,i1e),e(i1e,dgr),e(Mn,cgr),e(Mn,d1e),e(d1e,fgr),e(Mn,mgr),e(Mn,c1e),e(c1e,ggr),e(Mn,hgr),e(vo,pgr),e(vo,V),e(V,S6),e(S6,f1e),e(f1e,_gr),e(S6,ugr),e(S6,xX),e(xX,bgr),e(S6,Fgr),e(V,vgr),e(V,R6),e(R6,m1e),e(m1e,Tgr),e(R6,Mgr),e(R6,kX),e(kX,Egr),e(R6,Cgr),e(V,wgr),e(V,B6),e(B6,g1e),e(g1e,Agr),e(B6,ygr),e(B6,SX),e(SX,Lgr),e(B6,xgr),e(V,kgr),e(V,P6),e(P6,h1e),e(h1e,Sgr),e(P6,Rgr),e(P6,RX),e(RX,Bgr),e(P6,Pgr),e(V,$gr),e(V,$6),e($6,p1e),e(p1e,Igr),e($6,qgr),e($6,BX),e(BX,Ngr),e($6,jgr),e(V,Dgr),e(V,I6),e(I6,_1e),e(_1e,Ggr),e(I6,Ogr),e(I6,PX),e(PX,Vgr),e(I6,Xgr),e(V,zgr),e(V,q6),e(q6,u1e),e(u1e,Qgr),e(q6,Wgr),e(q6,$X),e($X,Hgr),e(q6,Ugr),e(V,Jgr),e(V,N6),e(N6,b1e),e(b1e,Ygr),e(N6,Kgr),e(N6,IX),e(IX,Zgr),e(N6,ehr),e(V,ohr),e(V,j6),e(j6,F1e),e(F1e,rhr),e(j6,thr),e(j6,qX),e(qX,ahr),e(j6,nhr),e(V,shr),e(V,D6),e(D6,v1e),e(v1e,lhr),e(D6,ihr),e(D6,NX),e(NX,dhr),e(D6,chr),e(V,fhr),e(V,G6),e(G6,T1e),e(T1e,mhr),e(G6,ghr),e(G6,jX),e(jX,hhr),e(G6,phr),e(V,_hr),e(V,O6),e(O6,M1e),e(M1e,uhr),e(O6,bhr),e(O6,DX),e(DX,Fhr),e(O6,vhr),e(V,Thr),e(V,V6),e(V6,E1e),e(E1e,Mhr),e(V6,Ehr),e(V6,GX),e(GX,Chr),e(V6,whr),e(V,Ahr),e(V,X6),e(X6,C1e),e(C1e,yhr),e(X6,Lhr),e(X6,OX),e(OX,xhr),e(X6,khr),e(V,Shr),e(V,z6),e(z6,w1e),e(w1e,Rhr),e(z6,Bhr),e(z6,VX),e(VX,Phr),e(z6,$hr),e(V,Ihr),e(V,Q6),e(Q6,A1e),e(A1e,qhr),e(Q6,Nhr),e(Q6,XX),e(XX,jhr),e(Q6,Dhr),e(V,Ghr),e(V,W6),e(W6,y1e),e(y1e,Ohr),e(W6,Vhr),e(W6,zX),e(zX,Xhr),e(W6,zhr),e(V,Qhr),e(V,H6),e(H6,L1e),e(L1e,Whr),e(H6,Hhr),e(H6,QX),e(QX,Uhr),e(H6,Jhr),e(V,Yhr),e(V,U6),e(U6,x1e),e(x1e,Khr),e(U6,Zhr),e(U6,WX),e(WX,epr),e(U6,opr),e(V,rpr),e(V,J6),e(J6,k1e),e(k1e,tpr),e(J6,apr),e(J6,HX),e(HX,npr),e(J6,spr),e(V,lpr),e(V,Y6),e(Y6,S1e),e(S1e,ipr),e(Y6,dpr),e(Y6,UX),e(UX,cpr),e(Y6,fpr),e(V,mpr),e(V,K6),e(K6,R1e),e(R1e,gpr),e(K6,hpr),e(K6,JX),e(JX,ppr),e(K6,_pr),e(V,upr),e(V,Z6),e(Z6,B1e),e(B1e,bpr),e(Z6,Fpr),e(Z6,YX),e(YX,vpr),e(Z6,Tpr),e(V,Mpr),e(V,eT),e(eT,P1e),e(P1e,Epr),e(eT,Cpr),e(eT,KX),e(KX,wpr),e(eT,Apr),e(V,ypr),e(V,oT),e(oT,$1e),e($1e,Lpr),e(oT,xpr),e(oT,ZX),e(ZX,kpr),e(oT,Spr),e(V,Rpr),e(V,rT),e(rT,I1e),e(I1e,Bpr),e(rT,Ppr),e(rT,ez),e(ez,$pr),e(rT,Ipr),e(vo,qpr),e(vo,q1e),e(q1e,Npr),e(vo,jpr),g(H0,vo,null),b(c,bBe,u),b(c,Pc,u),e(Pc,tT),e(tT,N1e),g(U0,N1e,null),e(Pc,Dpr),e(Pc,j1e),e(j1e,Gpr),b(c,FBe,u),b(c,Ar,u),g(J0,Ar,null),e(Ar,Opr),e(Ar,$c),e($c,Vpr),e($c,oz),e(oz,Xpr),e($c,zpr),e($c,rz),e(rz,Qpr),e($c,Wpr),e(Ar,Hpr),e(Ar,Y0),e(Y0,Upr),e(Y0,D1e),e(D1e,Jpr),e(Y0,Ypr),e(Ar,Kpr),e(Ar,vt),g(K0,vt,null),e(vt,Zpr),e(vt,G1e),e(G1e,e_r),e(vt,o_r),e(vt,Ic),e(Ic,r_r),e(Ic,O1e),e(O1e,t_r),e(Ic,a_r),e(Ic,tz),e(tz,n_r),e(Ic,s_r),e(vt,l_r),e(vt,V1e),e(V1e,i_r),e(vt,d_r),g(Z0,vt,null),e(Ar,c_r),e(Ar,To),g(ey,To,null),e(To,f_r),e(To,X1e),e(X1e,m_r),e(To,g_r),e(To,En),e(En,h_r),e(En,z1e),e(z1e,p_r),e(En,__r),e(En,Q1e),e(Q1e,u_r),e(En,b_r),e(En,W1e),e(W1e,F_r),e(En,v_r),e(To,T_r),e(To,ne),e(ne,aT),e(aT,H1e),e(H1e,M_r),e(aT,E_r),e(aT,az),e(az,C_r),e(aT,w_r),e(ne,A_r),e(ne,nT),e(nT,U1e),e(U1e,y_r),e(nT,L_r),e(nT,nz),e(nz,x_r),e(nT,k_r),e(ne,S_r),e(ne,sT),e(sT,J1e),e(J1e,R_r),e(sT,B_r),e(sT,sz),e(sz,P_r),e(sT,$_r),e(ne,I_r),e(ne,lT),e(lT,Y1e),e(Y1e,q_r),e(lT,N_r),e(lT,lz),e(lz,j_r),e(lT,D_r),e(ne,G_r),e(ne,iT),e(iT,K1e),e(K1e,O_r),e(iT,V_r),e(iT,iz),e(iz,X_r),e(iT,z_r),e(ne,Q_r),e(ne,dT),e(dT,Z1e),e(Z1e,W_r),e(dT,H_r),e(dT,dz),e(dz,U_r),e(dT,J_r),e(ne,Y_r),e(ne,cT),e(cT,e4e),e(e4e,K_r),e(cT,Z_r),e(cT,cz),e(cz,eur),e(cT,our),e(ne,rur),e(ne,fT),e(fT,o4e),e(o4e,tur),e(fT,aur),e(fT,fz),e(fz,nur),e(fT,sur),e(ne,lur),e(ne,mT),e(mT,r4e),e(r4e,iur),e(mT,dur),e(mT,mz),e(mz,cur),e(mT,fur),e(ne,mur),e(ne,gT),e(gT,t4e),e(t4e,gur),e(gT,hur),e(gT,gz),e(gz,pur),e(gT,_ur),e(ne,uur),e(ne,hT),e(hT,a4e),e(a4e,bur),e(hT,Fur),e(hT,hz),e(hz,vur),e(hT,Tur),e(ne,Mur),e(ne,pT),e(pT,n4e),e(n4e,Eur),e(pT,Cur),e(pT,pz),e(pz,wur),e(pT,Aur),e(ne,yur),e(ne,_T),e(_T,s4e),e(s4e,Lur),e(_T,xur),e(_T,_z),e(_z,kur),e(_T,Sur),e(ne,Rur),e(ne,uT),e(uT,l4e),e(l4e,Bur),e(uT,Pur),e(uT,uz),e(uz,$ur),e(uT,Iur),e(ne,qur),e(ne,bT),e(bT,i4e),e(i4e,Nur),e(bT,jur),e(bT,bz),e(bz,Dur),e(bT,Gur),e(ne,Our),e(ne,FT),e(FT,d4e),e(d4e,Vur),e(FT,Xur),e(FT,Fz),e(Fz,zur),e(FT,Qur),e(ne,Wur),e(ne,vT),e(vT,c4e),e(c4e,Hur),e(vT,Uur),e(vT,vz),e(vz,Jur),e(vT,Yur),e(To,Kur),e(To,f4e),e(f4e,Zur),e(To,e1r),g(oy,To,null),b(c,vBe,u),b(c,qc,u),e(qc,TT),e(TT,m4e),g(ry,m4e,null),e(qc,o1r),e(qc,g4e),e(g4e,r1r),b(c,TBe,u),b(c,yr,u),g(ty,yr,null),e(yr,t1r),e(yr,Nc),e(Nc,a1r),e(Nc,Tz),e(Tz,n1r),e(Nc,s1r),e(Nc,Mz),e(Mz,l1r),e(Nc,i1r),e(yr,d1r),e(yr,ay),e(ay,c1r),e(ay,h4e),e(h4e,f1r),e(ay,m1r),e(yr,g1r),e(yr,Tt),g(ny,Tt,null),e(Tt,h1r),e(Tt,p4e),e(p4e,p1r),e(Tt,_1r),e(Tt,jc),e(jc,u1r),e(jc,_4e),e(_4e,b1r),e(jc,F1r),e(jc,Ez),e(Ez,v1r),e(jc,T1r),e(Tt,M1r),e(Tt,u4e),e(u4e,E1r),e(Tt,C1r),g(sy,Tt,null),e(yr,w1r),e(yr,Mo),g(ly,Mo,null),e(Mo,A1r),e(Mo,b4e),e(b4e,y1r),e(Mo,L1r),e(Mo,Cn),e(Cn,x1r),e(Cn,F4e),e(F4e,k1r),e(Cn,S1r),e(Cn,v4e),e(v4e,R1r),e(Cn,B1r),e(Cn,T4e),e(T4e,P1r),e(Cn,$1r),e(Mo,I1r),e(Mo,M4e),e(M4e,MT),e(MT,E4e),e(E4e,q1r),e(MT,N1r),e(MT,Cz),e(Cz,j1r),e(MT,D1r),e(Mo,G1r),e(Mo,C4e),e(C4e,O1r),e(Mo,V1r),g(iy,Mo,null),b(c,MBe,u),b(c,Dc,u),e(Dc,ET),e(ET,w4e),g(dy,w4e,null),e(Dc,X1r),e(Dc,A4e),e(A4e,z1r),b(c,EBe,u),b(c,Lr,u),g(cy,Lr,null),e(Lr,Q1r),e(Lr,Gc),e(Gc,W1r),e(Gc,wz),e(wz,H1r),e(Gc,U1r),e(Gc,Az),e(Az,J1r),e(Gc,Y1r),e(Lr,K1r),e(Lr,fy),e(fy,Z1r),e(fy,y4e),e(y4e,e4r),e(fy,o4r),e(Lr,r4r),e(Lr,Mt),g(my,Mt,null),e(Mt,t4r),e(Mt,L4e),e(L4e,a4r),e(Mt,n4r),e(Mt,Oc),e(Oc,s4r),e(Oc,x4e),e(x4e,l4r),e(Oc,i4r),e(Oc,yz),e(yz,d4r),e(Oc,c4r),e(Mt,f4r),e(Mt,k4e),e(k4e,m4r),e(Mt,g4r),g(gy,Mt,null),e(Lr,h4r),e(Lr,Eo),g(hy,Eo,null),e(Eo,p4r),e(Eo,S4e),e(S4e,_4r),e(Eo,u4r),e(Eo,wn),e(wn,b4r),e(wn,R4e),e(R4e,F4r),e(wn,v4r),e(wn,B4e),e(B4e,T4r),e(wn,M4r),e(wn,P4e),e(P4e,E4r),e(wn,C4r),e(Eo,w4r),e(Eo,Y),e(Y,CT),e(CT,$4e),e($4e,A4r),e(CT,y4r),e(CT,Lz),e(Lz,L4r),e(CT,x4r),e(Y,k4r),e(Y,wT),e(wT,I4e),e(I4e,S4r),e(wT,R4r),e(wT,xz),e(xz,B4r),e(wT,P4r),e(Y,$4r),e(Y,AT),e(AT,q4e),e(q4e,I4r),e(AT,q4r),e(AT,kz),e(kz,N4r),e(AT,j4r),e(Y,D4r),e(Y,yT),e(yT,N4e),e(N4e,G4r),e(yT,O4r),e(yT,Sz),e(Sz,V4r),e(yT,X4r),e(Y,z4r),e(Y,LT),e(LT,j4e),e(j4e,Q4r),e(LT,W4r),e(LT,Rz),e(Rz,H4r),e(LT,U4r),e(Y,J4r),e(Y,xT),e(xT,D4e),e(D4e,Y4r),e(xT,K4r),e(xT,Bz),e(Bz,Z4r),e(xT,ebr),e(Y,obr),e(Y,kT),e(kT,G4e),e(G4e,rbr),e(kT,tbr),e(kT,Pz),e(Pz,abr),e(kT,nbr),e(Y,sbr),e(Y,ST),e(ST,O4e),e(O4e,lbr),e(ST,ibr),e(ST,$z),e($z,dbr),e(ST,cbr),e(Y,fbr),e(Y,RT),e(RT,V4e),e(V4e,mbr),e(RT,gbr),e(RT,Iz),e(Iz,hbr),e(RT,pbr),e(Y,_br),e(Y,BT),e(BT,X4e),e(X4e,ubr),e(BT,bbr),e(BT,qz),e(qz,Fbr),e(BT,vbr),e(Y,Tbr),e(Y,PT),e(PT,z4e),e(z4e,Mbr),e(PT,Ebr),e(PT,Nz),e(Nz,Cbr),e(PT,wbr),e(Y,Abr),e(Y,$T),e($T,Q4e),e(Q4e,ybr),e($T,Lbr),e($T,jz),e(jz,xbr),e($T,kbr),e(Y,Sbr),e(Y,IT),e(IT,W4e),e(W4e,Rbr),e(IT,Bbr),e(IT,Dz),e(Dz,Pbr),e(IT,$br),e(Y,Ibr),e(Y,qT),e(qT,H4e),e(H4e,qbr),e(qT,Nbr),e(qT,Gz),e(Gz,jbr),e(qT,Dbr),e(Y,Gbr),e(Y,NT),e(NT,U4e),e(U4e,Obr),e(NT,Vbr),e(NT,Oz),e(Oz,Xbr),e(NT,zbr),e(Y,Qbr),e(Y,jT),e(jT,J4e),e(J4e,Wbr),e(jT,Hbr),e(jT,Vz),e(Vz,Ubr),e(jT,Jbr),e(Y,Ybr),e(Y,DT),e(DT,Y4e),e(Y4e,Kbr),e(DT,Zbr),e(DT,Xz),e(Xz,e3r),e(DT,o3r),e(Y,r3r),e(Y,GT),e(GT,K4e),e(K4e,t3r),e(GT,a3r),e(GT,zz),e(zz,n3r),e(GT,s3r),e(Y,l3r),e(Y,OT),e(OT,Z4e),e(Z4e,i3r),e(OT,d3r),e(OT,Qz),e(Qz,c3r),e(OT,f3r),e(Y,m3r),e(Y,VT),e(VT,ebe),e(ebe,g3r),e(VT,h3r),e(VT,Wz),e(Wz,p3r),e(VT,_3r),e(Eo,u3r),e(Eo,obe),e(obe,b3r),e(Eo,F3r),g(py,Eo,null),b(c,CBe,u),b(c,Vc,u),e(Vc,XT),e(XT,rbe),g(_y,rbe,null),e(Vc,v3r),e(Vc,tbe),e(tbe,T3r),b(c,wBe,u),b(c,xr,u),g(uy,xr,null),e(xr,M3r),e(xr,Xc),e(Xc,E3r),e(Xc,Hz),e(Hz,C3r),e(Xc,w3r),e(Xc,Uz),e(Uz,A3r),e(Xc,y3r),e(xr,L3r),e(xr,by),e(by,x3r),e(by,abe),e(abe,k3r),e(by,S3r),e(xr,R3r),e(xr,Et),g(Fy,Et,null),e(Et,B3r),e(Et,nbe),e(nbe,P3r),e(Et,$3r),e(Et,zc),e(zc,I3r),e(zc,sbe),e(sbe,q3r),e(zc,N3r),e(zc,Jz),e(Jz,j3r),e(zc,D3r),e(Et,G3r),e(Et,lbe),e(lbe,O3r),e(Et,V3r),g(vy,Et,null),e(xr,X3r),e(xr,Co),g(Ty,Co,null),e(Co,z3r),e(Co,ibe),e(ibe,Q3r),e(Co,W3r),e(Co,An),e(An,H3r),e(An,dbe),e(dbe,U3r),e(An,J3r),e(An,cbe),e(cbe,Y3r),e(An,K3r),e(An,fbe),e(fbe,Z3r),e(An,e2r),e(Co,o2r),e(Co,K),e(K,zT),e(zT,mbe),e(mbe,r2r),e(zT,t2r),e(zT,Yz),e(Yz,a2r),e(zT,n2r),e(K,s2r),e(K,QT),e(QT,gbe),e(gbe,l2r),e(QT,i2r),e(QT,Kz),e(Kz,d2r),e(QT,c2r),e(K,f2r),e(K,WT),e(WT,hbe),e(hbe,m2r),e(WT,g2r),e(WT,Zz),e(Zz,h2r),e(WT,p2r),e(K,_2r),e(K,HT),e(HT,pbe),e(pbe,u2r),e(HT,b2r),e(HT,eQ),e(eQ,F2r),e(HT,v2r),e(K,T2r),e(K,UT),e(UT,_be),e(_be,M2r),e(UT,E2r),e(UT,oQ),e(oQ,C2r),e(UT,w2r),e(K,A2r),e(K,JT),e(JT,ube),e(ube,y2r),e(JT,L2r),e(JT,rQ),e(rQ,x2r),e(JT,k2r),e(K,S2r),e(K,YT),e(YT,bbe),e(bbe,R2r),e(YT,B2r),e(YT,tQ),e(tQ,P2r),e(YT,$2r),e(K,I2r),e(K,KT),e(KT,Fbe),e(Fbe,q2r),e(KT,N2r),e(KT,aQ),e(aQ,j2r),e(KT,D2r),e(K,G2r),e(K,ZT),e(ZT,vbe),e(vbe,O2r),e(ZT,V2r),e(ZT,nQ),e(nQ,X2r),e(ZT,z2r),e(K,Q2r),e(K,e7),e(e7,Tbe),e(Tbe,W2r),e(e7,H2r),e(e7,sQ),e(sQ,U2r),e(e7,J2r),e(K,Y2r),e(K,o7),e(o7,Mbe),e(Mbe,K2r),e(o7,Z2r),e(o7,lQ),e(lQ,eFr),e(o7,oFr),e(K,rFr),e(K,r7),e(r7,Ebe),e(Ebe,tFr),e(r7,aFr),e(r7,iQ),e(iQ,nFr),e(r7,sFr),e(K,lFr),e(K,t7),e(t7,Cbe),e(Cbe,iFr),e(t7,dFr),e(t7,dQ),e(dQ,cFr),e(t7,fFr),e(K,mFr),e(K,a7),e(a7,wbe),e(wbe,gFr),e(a7,hFr),e(a7,cQ),e(cQ,pFr),e(a7,_Fr),e(K,uFr),e(K,n7),e(n7,Abe),e(Abe,bFr),e(n7,FFr),e(n7,fQ),e(fQ,vFr),e(n7,TFr),e(K,MFr),e(K,s7),e(s7,ybe),e(ybe,EFr),e(s7,CFr),e(s7,mQ),e(mQ,wFr),e(s7,AFr),e(K,yFr),e(K,l7),e(l7,Lbe),e(Lbe,LFr),e(l7,xFr),e(l7,gQ),e(gQ,kFr),e(l7,SFr),e(K,RFr),e(K,i7),e(i7,xbe),e(xbe,BFr),e(i7,PFr),e(i7,hQ),e(hQ,$Fr),e(i7,IFr),e(K,qFr),e(K,d7),e(d7,kbe),e(kbe,NFr),e(d7,jFr),e(d7,pQ),e(pQ,DFr),e(d7,GFr),e(K,OFr),e(K,c7),e(c7,Sbe),e(Sbe,VFr),e(c7,XFr),e(c7,_Q),e(_Q,zFr),e(c7,QFr),e(Co,WFr),e(Co,Rbe),e(Rbe,HFr),e(Co,UFr),g(My,Co,null),b(c,ABe,u),b(c,Qc,u),e(Qc,f7),e(f7,Bbe),g(Ey,Bbe,null),e(Qc,JFr),e(Qc,Pbe),e(Pbe,YFr),b(c,yBe,u),b(c,kr,u),g(Cy,kr,null),e(kr,KFr),e(kr,Wc),e(Wc,ZFr),e(Wc,uQ),e(uQ,evr),e(Wc,ovr),e(Wc,bQ),e(bQ,rvr),e(Wc,tvr),e(kr,avr),e(kr,wy),e(wy,nvr),e(wy,$be),e($be,svr),e(wy,lvr),e(kr,ivr),e(kr,Ct),g(Ay,Ct,null),e(Ct,dvr),e(Ct,Ibe),e(Ibe,cvr),e(Ct,fvr),e(Ct,Hc),e(Hc,mvr),e(Hc,qbe),e(qbe,gvr),e(Hc,hvr),e(Hc,FQ),e(FQ,pvr),e(Hc,_vr),e(Ct,uvr),e(Ct,Nbe),e(Nbe,bvr),e(Ct,Fvr),g(yy,Ct,null),e(kr,vvr),e(kr,wo),g(Ly,wo,null),e(wo,Tvr),e(wo,jbe),e(jbe,Mvr),e(wo,Evr),e(wo,yn),e(yn,Cvr),e(yn,Dbe),e(Dbe,wvr),e(yn,Avr),e(yn,Gbe),e(Gbe,yvr),e(yn,Lvr),e(yn,Obe),e(Obe,xvr),e(yn,kvr),e(wo,Svr),e(wo,Vbe),e(Vbe,m7),e(m7,Xbe),e(Xbe,Rvr),e(m7,Bvr),e(m7,vQ),e(vQ,Pvr),e(m7,$vr),e(wo,Ivr),e(wo,zbe),e(zbe,qvr),e(wo,Nvr),g(xy,wo,null),b(c,LBe,u),b(c,Uc,u),e(Uc,g7),e(g7,Qbe),g(ky,Qbe,null),e(Uc,jvr),e(Uc,Wbe),e(Wbe,Dvr),b(c,xBe,u),b(c,Sr,u),g(Sy,Sr,null),e(Sr,Gvr),e(Sr,Jc),e(Jc,Ovr),e(Jc,TQ),e(TQ,Vvr),e(Jc,Xvr),e(Jc,MQ),e(MQ,zvr),e(Jc,Qvr),e(Sr,Wvr),e(Sr,Ry),e(Ry,Hvr),e(Ry,Hbe),e(Hbe,Uvr),e(Ry,Jvr),e(Sr,Yvr),e(Sr,wt),g(By,wt,null),e(wt,Kvr),e(wt,Ube),e(Ube,Zvr),e(wt,e6r),e(wt,Yc),e(Yc,o6r),e(Yc,Jbe),e(Jbe,r6r),e(Yc,t6r),e(Yc,EQ),e(EQ,a6r),e(Yc,n6r),e(wt,s6r),e(wt,Ybe),e(Ybe,l6r),e(wt,i6r),g(Py,wt,null),e(Sr,d6r),e(Sr,Ao),g($y,Ao,null),e(Ao,c6r),e(Ao,Kbe),e(Kbe,f6r),e(Ao,m6r),e(Ao,Ln),e(Ln,g6r),e(Ln,Zbe),e(Zbe,h6r),e(Ln,p6r),e(Ln,e3e),e(e3e,_6r),e(Ln,u6r),e(Ln,o3e),e(o3e,b6r),e(Ln,F6r),e(Ao,v6r),e(Ao,r3e),e(r3e,h7),e(h7,t3e),e(t3e,T6r),e(h7,M6r),e(h7,CQ),e(CQ,E6r),e(h7,C6r),e(Ao,w6r),e(Ao,a3e),e(a3e,A6r),e(Ao,y6r),g(Iy,Ao,null),b(c,kBe,u),b(c,Kc,u),e(Kc,p7),e(p7,n3e),g(qy,n3e,null),e(Kc,L6r),e(Kc,s3e),e(s3e,x6r),b(c,SBe,u),b(c,Rr,u),g(Ny,Rr,null),e(Rr,k6r),e(Rr,Zc),e(Zc,S6r),e(Zc,wQ),e(wQ,R6r),e(Zc,B6r),e(Zc,AQ),e(AQ,P6r),e(Zc,$6r),e(Rr,I6r),e(Rr,jy),e(jy,q6r),e(jy,l3e),e(l3e,N6r),e(jy,j6r),e(Rr,D6r),e(Rr,At),g(Dy,At,null),e(At,G6r),e(At,i3e),e(i3e,O6r),e(At,V6r),e(At,ef),e(ef,X6r),e(ef,d3e),e(d3e,z6r),e(ef,Q6r),e(ef,yQ),e(yQ,W6r),e(ef,H6r),e(At,U6r),e(At,c3e),e(c3e,J6r),e(At,Y6r),g(Gy,At,null),e(Rr,K6r),e(Rr,yo),g(Oy,yo,null),e(yo,Z6r),e(yo,f3e),e(f3e,eTr),e(yo,oTr),e(yo,xn),e(xn,rTr),e(xn,m3e),e(m3e,tTr),e(xn,aTr),e(xn,g3e),e(g3e,nTr),e(xn,sTr),e(xn,h3e),e(h3e,lTr),e(xn,iTr),e(yo,dTr),e(yo,z),e(z,_7),e(_7,p3e),e(p3e,cTr),e(_7,fTr),e(_7,LQ),e(LQ,mTr),e(_7,gTr),e(z,hTr),e(z,u7),e(u7,_3e),e(_3e,pTr),e(u7,_Tr),e(u7,xQ),e(xQ,uTr),e(u7,bTr),e(z,FTr),e(z,b7),e(b7,u3e),e(u3e,vTr),e(b7,TTr),e(b7,kQ),e(kQ,MTr),e(b7,ETr),e(z,CTr),e(z,F7),e(F7,b3e),e(b3e,wTr),e(F7,ATr),e(F7,SQ),e(SQ,yTr),e(F7,LTr),e(z,xTr),e(z,v7),e(v7,F3e),e(F3e,kTr),e(v7,STr),e(v7,RQ),e(RQ,RTr),e(v7,BTr),e(z,PTr),e(z,T7),e(T7,v3e),e(v3e,$Tr),e(T7,ITr),e(T7,BQ),e(BQ,qTr),e(T7,NTr),e(z,jTr),e(z,M7),e(M7,T3e),e(T3e,DTr),e(M7,GTr),e(M7,PQ),e(PQ,OTr),e(M7,VTr),e(z,XTr),e(z,E7),e(E7,M3e),e(M3e,zTr),e(E7,QTr),e(E7,$Q),e($Q,WTr),e(E7,HTr),e(z,UTr),e(z,C7),e(C7,E3e),e(E3e,JTr),e(C7,YTr),e(C7,IQ),e(IQ,KTr),e(C7,ZTr),e(z,e7r),e(z,w7),e(w7,C3e),e(C3e,o7r),e(w7,r7r),e(w7,qQ),e(qQ,t7r),e(w7,a7r),e(z,n7r),e(z,A7),e(A7,w3e),e(w3e,s7r),e(A7,l7r),e(A7,NQ),e(NQ,i7r),e(A7,d7r),e(z,c7r),e(z,y7),e(y7,A3e),e(A3e,f7r),e(y7,m7r),e(y7,jQ),e(jQ,g7r),e(y7,h7r),e(z,p7r),e(z,L7),e(L7,y3e),e(y3e,_7r),e(L7,u7r),e(L7,DQ),e(DQ,b7r),e(L7,F7r),e(z,v7r),e(z,x7),e(x7,L3e),e(L3e,T7r),e(x7,M7r),e(x7,GQ),e(GQ,E7r),e(x7,C7r),e(z,w7r),e(z,k7),e(k7,x3e),e(x3e,A7r),e(k7,y7r),e(k7,OQ),e(OQ,L7r),e(k7,x7r),e(z,k7r),e(z,S7),e(S7,k3e),e(k3e,S7r),e(S7,R7r),e(S7,VQ),e(VQ,B7r),e(S7,P7r),e(z,$7r),e(z,R7),e(R7,S3e),e(S3e,I7r),e(R7,q7r),e(R7,XQ),e(XQ,N7r),e(R7,j7r),e(z,D7r),e(z,B7),e(B7,R3e),e(R3e,G7r),e(B7,O7r),e(B7,zQ),e(zQ,V7r),e(B7,X7r),e(z,z7r),e(z,P7),e(P7,B3e),e(B3e,Q7r),e(P7,W7r),e(P7,QQ),e(QQ,H7r),e(P7,U7r),e(z,J7r),e(z,$7),e($7,P3e),e(P3e,Y7r),e($7,K7r),e($7,WQ),e(WQ,Z7r),e($7,eMr),e(z,oMr),e(z,I7),e(I7,$3e),e($3e,rMr),e(I7,tMr),e(I7,HQ),e(HQ,aMr),e(I7,nMr),e(z,sMr),e(z,q7),e(q7,I3e),e(I3e,lMr),e(q7,iMr),e(q7,UQ),e(UQ,dMr),e(q7,cMr),e(z,fMr),e(z,N7),e(N7,q3e),e(q3e,mMr),e(N7,gMr),e(N7,JQ),e(JQ,hMr),e(N7,pMr),e(z,_Mr),e(z,j7),e(j7,N3e),e(N3e,uMr),e(j7,bMr),e(j7,YQ),e(YQ,FMr),e(j7,vMr),e(z,TMr),e(z,D7),e(D7,j3e),e(j3e,MMr),e(D7,EMr),e(D7,KQ),e(KQ,CMr),e(D7,wMr),e(yo,AMr),e(yo,D3e),e(D3e,yMr),e(yo,LMr),g(Vy,yo,null),b(c,RBe,u),b(c,of,u),e(of,G7),e(G7,G3e),g(Xy,G3e,null),e(of,xMr),e(of,O3e),e(O3e,kMr),b(c,BBe,u),b(c,Br,u),g(zy,Br,null),e(Br,SMr),e(Br,rf),e(rf,RMr),e(rf,ZQ),e(ZQ,BMr),e(rf,PMr),e(rf,eW),e(eW,$Mr),e(rf,IMr),e(Br,qMr),e(Br,Qy),e(Qy,NMr),e(Qy,V3e),e(V3e,jMr),e(Qy,DMr),e(Br,GMr),e(Br,yt),g(Wy,yt,null),e(yt,OMr),e(yt,X3e),e(X3e,VMr),e(yt,XMr),e(yt,tf),e(tf,zMr),e(tf,z3e),e(z3e,QMr),e(tf,WMr),e(tf,oW),e(oW,HMr),e(tf,UMr),e(yt,JMr),e(yt,Q3e),e(Q3e,YMr),e(yt,KMr),g(Hy,yt,null),e(Br,ZMr),e(Br,Lo),g(Uy,Lo,null),e(Lo,eEr),e(Lo,W3e),e(W3e,oEr),e(Lo,rEr),e(Lo,kn),e(kn,tEr),e(kn,H3e),e(H3e,aEr),e(kn,nEr),e(kn,U3e),e(U3e,sEr),e(kn,lEr),e(kn,J3e),e(J3e,iEr),e(kn,dEr),e(Lo,cEr),e(Lo,ca),e(ca,O7),e(O7,Y3e),e(Y3e,fEr),e(O7,mEr),e(O7,rW),e(rW,gEr),e(O7,hEr),e(ca,pEr),e(ca,V7),e(V7,K3e),e(K3e,_Er),e(V7,uEr),e(V7,tW),e(tW,bEr),e(V7,FEr),e(ca,vEr),e(ca,X7),e(X7,Z3e),e(Z3e,TEr),e(X7,MEr),e(X7,aW),e(aW,EEr),e(X7,CEr),e(ca,wEr),e(ca,z7),e(z7,e2e),e(e2e,AEr),e(z7,yEr),e(z7,nW),e(nW,LEr),e(z7,xEr),e(ca,kEr),e(ca,Q7),e(Q7,o2e),e(o2e,SEr),e(Q7,REr),e(Q7,sW),e(sW,BEr),e(Q7,PEr),e(Lo,$Er),e(Lo,r2e),e(r2e,IEr),e(Lo,qEr),g(Jy,Lo,null),b(c,PBe,u),b(c,af,u),e(af,W7),e(W7,t2e),g(Yy,t2e,null),e(af,NEr),e(af,a2e),e(a2e,jEr),b(c,$Be,u),b(c,Pr,u),g(Ky,Pr,null),e(Pr,DEr),e(Pr,nf),e(nf,GEr),e(nf,lW),e(lW,OEr),e(nf,VEr),e(nf,iW),e(iW,XEr),e(nf,zEr),e(Pr,QEr),e(Pr,Zy),e(Zy,WEr),e(Zy,n2e),e(n2e,HEr),e(Zy,UEr),e(Pr,JEr),e(Pr,Lt),g(eL,Lt,null),e(Lt,YEr),e(Lt,s2e),e(s2e,KEr),e(Lt,ZEr),e(Lt,sf),e(sf,eCr),e(sf,l2e),e(l2e,oCr),e(sf,rCr),e(sf,dW),e(dW,tCr),e(sf,aCr),e(Lt,nCr),e(Lt,i2e),e(i2e,sCr),e(Lt,lCr),g(oL,Lt,null),e(Pr,iCr),e(Pr,xo),g(rL,xo,null),e(xo,dCr),e(xo,d2e),e(d2e,cCr),e(xo,fCr),e(xo,Sn),e(Sn,mCr),e(Sn,c2e),e(c2e,gCr),e(Sn,hCr),e(Sn,f2e),e(f2e,pCr),e(Sn,_Cr),e(Sn,m2e),e(m2e,uCr),e(Sn,bCr),e(xo,FCr),e(xo,fe),e(fe,H7),e(H7,g2e),e(g2e,vCr),e(H7,TCr),e(H7,cW),e(cW,MCr),e(H7,ECr),e(fe,CCr),e(fe,U7),e(U7,h2e),e(h2e,wCr),e(U7,ACr),e(U7,fW),e(fW,yCr),e(U7,LCr),e(fe,xCr),e(fe,J7),e(J7,p2e),e(p2e,kCr),e(J7,SCr),e(J7,mW),e(mW,RCr),e(J7,BCr),e(fe,PCr),e(fe,Y7),e(Y7,_2e),e(_2e,$Cr),e(Y7,ICr),e(Y7,gW),e(gW,qCr),e(Y7,NCr),e(fe,jCr),e(fe,K7),e(K7,u2e),e(u2e,DCr),e(K7,GCr),e(K7,hW),e(hW,OCr),e(K7,VCr),e(fe,XCr),e(fe,Z7),e(Z7,b2e),e(b2e,zCr),e(Z7,QCr),e(Z7,pW),e(pW,WCr),e(Z7,HCr),e(fe,UCr),e(fe,eM),e(eM,F2e),e(F2e,JCr),e(eM,YCr),e(eM,_W),e(_W,KCr),e(eM,ZCr),e(fe,e5r),e(fe,oM),e(oM,v2e),e(v2e,o5r),e(oM,r5r),e(oM,uW),e(uW,t5r),e(oM,a5r),e(fe,n5r),e(fe,rM),e(rM,T2e),e(T2e,s5r),e(rM,l5r),e(rM,bW),e(bW,i5r),e(rM,d5r),e(fe,c5r),e(fe,tM),e(tM,M2e),e(M2e,f5r),e(tM,m5r),e(tM,FW),e(FW,g5r),e(tM,h5r),e(fe,p5r),e(fe,aM),e(aM,E2e),e(E2e,_5r),e(aM,u5r),e(aM,vW),e(vW,b5r),e(aM,F5r),e(fe,v5r),e(fe,nM),e(nM,C2e),e(C2e,T5r),e(nM,M5r),e(nM,TW),e(TW,E5r),e(nM,C5r),e(xo,w5r),e(xo,w2e),e(w2e,A5r),e(xo,y5r),g(tL,xo,null),b(c,IBe,u),b(c,lf,u),e(lf,sM),e(sM,A2e),g(aL,A2e,null),e(lf,L5r),e(lf,y2e),e(y2e,x5r),b(c,qBe,u),b(c,$r,u),g(nL,$r,null),e($r,k5r),e($r,df),e(df,S5r),e(df,MW),e(MW,R5r),e(df,B5r),e(df,EW),e(EW,P5r),e(df,$5r),e($r,I5r),e($r,sL),e(sL,q5r),e(sL,L2e),e(L2e,N5r),e(sL,j5r),e($r,D5r),e($r,xt),g(lL,xt,null),e(xt,G5r),e(xt,x2e),e(x2e,O5r),e(xt,V5r),e(xt,cf),e(cf,X5r),e(cf,k2e),e(k2e,z5r),e(cf,Q5r),e(cf,CW),e(CW,W5r),e(cf,H5r),e(xt,U5r),e(xt,S2e),e(S2e,J5r),e(xt,Y5r),g(iL,xt,null),e($r,K5r),e($r,ko),g(dL,ko,null),e(ko,Z5r),e(ko,R2e),e(R2e,ewr),e(ko,owr),e(ko,Rn),e(Rn,rwr),e(Rn,B2e),e(B2e,twr),e(Rn,awr),e(Rn,P2e),e(P2e,nwr),e(Rn,swr),e(Rn,$2e),e($2e,lwr),e(Rn,iwr),e(ko,dwr),e(ko,be),e(be,lM),e(lM,I2e),e(I2e,cwr),e(lM,fwr),e(lM,wW),e(wW,mwr),e(lM,gwr),e(be,hwr),e(be,iM),e(iM,q2e),e(q2e,pwr),e(iM,_wr),e(iM,AW),e(AW,uwr),e(iM,bwr),e(be,Fwr),e(be,dM),e(dM,N2e),e(N2e,vwr),e(dM,Twr),e(dM,yW),e(yW,Mwr),e(dM,Ewr),e(be,Cwr),e(be,cM),e(cM,j2e),e(j2e,wwr),e(cM,Awr),e(cM,LW),e(LW,ywr),e(cM,Lwr),e(be,xwr),e(be,fM),e(fM,D2e),e(D2e,kwr),e(fM,Swr),e(fM,xW),e(xW,Rwr),e(fM,Bwr),e(be,Pwr),e(be,mM),e(mM,G2e),e(G2e,$wr),e(mM,Iwr),e(mM,kW),e(kW,qwr),e(mM,Nwr),e(be,jwr),e(be,gM),e(gM,O2e),e(O2e,Dwr),e(gM,Gwr),e(gM,SW),e(SW,Owr),e(gM,Vwr),e(be,Xwr),e(be,hM),e(hM,V2e),e(V2e,zwr),e(hM,Qwr),e(hM,RW),e(RW,Wwr),e(hM,Hwr),e(be,Uwr),e(be,pM),e(pM,X2e),e(X2e,Jwr),e(pM,Ywr),e(pM,BW),e(BW,Kwr),e(pM,Zwr),e(be,eAr),e(be,_M),e(_M,z2e),e(z2e,oAr),e(_M,rAr),e(_M,PW),e(PW,tAr),e(_M,aAr),e(ko,nAr),e(ko,Q2e),e(Q2e,sAr),e(ko,lAr),g(cL,ko,null),b(c,NBe,u),b(c,ff,u),e(ff,uM),e(uM,W2e),g(fL,W2e,null),e(ff,iAr),e(ff,H2e),e(H2e,dAr),b(c,jBe,u),b(c,Ir,u),g(mL,Ir,null),e(Ir,cAr),e(Ir,mf),e(mf,fAr),e(mf,$W),e($W,mAr),e(mf,gAr),e(mf,IW),e(IW,hAr),e(mf,pAr),e(Ir,_Ar),e(Ir,gL),e(gL,uAr),e(gL,U2e),e(U2e,bAr),e(gL,FAr),e(Ir,vAr),e(Ir,kt),g(hL,kt,null),e(kt,TAr),e(kt,J2e),e(J2e,MAr),e(kt,EAr),e(kt,gf),e(gf,CAr),e(gf,Y2e),e(Y2e,wAr),e(gf,AAr),e(gf,qW),e(qW,yAr),e(gf,LAr),e(kt,xAr),e(kt,K2e),e(K2e,kAr),e(kt,SAr),g(pL,kt,null),e(Ir,RAr),e(Ir,So),g(_L,So,null),e(So,BAr),e(So,Z2e),e(Z2e,PAr),e(So,$Ar),e(So,Bn),e(Bn,IAr),e(Bn,eFe),e(eFe,qAr),e(Bn,NAr),e(Bn,oFe),e(oFe,jAr),e(Bn,DAr),e(Bn,rFe),e(rFe,GAr),e(Bn,OAr),e(So,VAr),e(So,Ee),e(Ee,bM),e(bM,tFe),e(tFe,XAr),e(bM,zAr),e(bM,NW),e(NW,QAr),e(bM,WAr),e(Ee,HAr),e(Ee,FM),e(FM,aFe),e(aFe,UAr),e(FM,JAr),e(FM,jW),e(jW,YAr),e(FM,KAr),e(Ee,ZAr),e(Ee,vM),e(vM,nFe),e(nFe,e0r),e(vM,o0r),e(vM,DW),e(DW,r0r),e(vM,t0r),e(Ee,a0r),e(Ee,TM),e(TM,sFe),e(sFe,n0r),e(TM,s0r),e(TM,GW),e(GW,l0r),e(TM,i0r),e(Ee,d0r),e(Ee,MM),e(MM,lFe),e(lFe,c0r),e(MM,f0r),e(MM,OW),e(OW,m0r),e(MM,g0r),e(Ee,h0r),e(Ee,EM),e(EM,iFe),e(iFe,p0r),e(EM,_0r),e(EM,VW),e(VW,u0r),e(EM,b0r),e(Ee,F0r),e(Ee,CM),e(CM,dFe),e(dFe,v0r),e(CM,T0r),e(CM,XW),e(XW,M0r),e(CM,E0r),e(Ee,C0r),e(Ee,wM),e(wM,cFe),e(cFe,w0r),e(wM,A0r),e(wM,zW),e(zW,y0r),e(wM,L0r),e(Ee,x0r),e(Ee,AM),e(AM,fFe),e(fFe,k0r),e(AM,S0r),e(AM,QW),e(QW,R0r),e(AM,B0r),e(So,P0r),e(So,mFe),e(mFe,$0r),e(So,I0r),g(uL,So,null),b(c,DBe,u),b(c,hf,u),e(hf,yM),e(yM,gFe),g(bL,gFe,null),e(hf,q0r),e(hf,hFe),e(hFe,N0r),b(c,GBe,u),b(c,qr,u),g(FL,qr,null),e(qr,j0r),e(qr,pf),e(pf,D0r),e(pf,WW),e(WW,G0r),e(pf,O0r),e(pf,HW),e(HW,V0r),e(pf,X0r),e(qr,z0r),e(qr,vL),e(vL,Q0r),e(vL,pFe),e(pFe,W0r),e(vL,H0r),e(qr,U0r),e(qr,St),g(TL,St,null),e(St,J0r),e(St,_Fe),e(_Fe,Y0r),e(St,K0r),e(St,_f),e(_f,Z0r),e(_f,uFe),e(uFe,eyr),e(_f,oyr),e(_f,UW),e(UW,ryr),e(_f,tyr),e(St,ayr),e(St,bFe),e(bFe,nyr),e(St,syr),g(ML,St,null),e(qr,lyr),e(qr,Ro),g(EL,Ro,null),e(Ro,iyr),e(Ro,FFe),e(FFe,dyr),e(Ro,cyr),e(Ro,Pn),e(Pn,fyr),e(Pn,vFe),e(vFe,myr),e(Pn,gyr),e(Pn,TFe),e(TFe,hyr),e(Pn,pyr),e(Pn,MFe),e(MFe,_yr),e(Pn,uyr),e(Ro,byr),e(Ro,Fe),e(Fe,LM),e(LM,EFe),e(EFe,Fyr),e(LM,vyr),e(LM,JW),e(JW,Tyr),e(LM,Myr),e(Fe,Eyr),e(Fe,xM),e(xM,CFe),e(CFe,Cyr),e(xM,wyr),e(xM,YW),e(YW,Ayr),e(xM,yyr),e(Fe,Lyr),e(Fe,kM),e(kM,wFe),e(wFe,xyr),e(kM,kyr),e(kM,KW),e(KW,Syr),e(kM,Ryr),e(Fe,Byr),e(Fe,SM),e(SM,AFe),e(AFe,Pyr),e(SM,$yr),e(SM,ZW),e(ZW,Iyr),e(SM,qyr),e(Fe,Nyr),e(Fe,RM),e(RM,yFe),e(yFe,jyr),e(RM,Dyr),e(RM,eH),e(eH,Gyr),e(RM,Oyr),e(Fe,Vyr),e(Fe,BM),e(BM,LFe),e(LFe,Xyr),e(BM,zyr),e(BM,oH),e(oH,Qyr),e(BM,Wyr),e(Fe,Hyr),e(Fe,PM),e(PM,xFe),e(xFe,Uyr),e(PM,Jyr),e(PM,rH),e(rH,Yyr),e(PM,Kyr),e(Fe,Zyr),e(Fe,$M),e($M,kFe),e(kFe,eLr),e($M,oLr),e($M,tH),e(tH,rLr),e($M,tLr),e(Fe,aLr),e(Fe,IM),e(IM,SFe),e(SFe,nLr),e(IM,sLr),e(IM,aH),e(aH,lLr),e(IM,iLr),e(Fe,dLr),e(Fe,qM),e(qM,RFe),e(RFe,cLr),e(qM,fLr),e(qM,nH),e(nH,mLr),e(qM,gLr),e(Ro,hLr),e(Ro,BFe),e(BFe,pLr),e(Ro,_Lr),g(CL,Ro,null),b(c,OBe,u),b(c,uf,u),e(uf,NM),e(NM,PFe),g(wL,PFe,null),e(uf,uLr),e(uf,$Fe),e($Fe,bLr),b(c,VBe,u),b(c,Nr,u),g(AL,Nr,null),e(Nr,FLr),e(Nr,bf),e(bf,vLr),e(bf,sH),e(sH,TLr),e(bf,MLr),e(bf,lH),e(lH,ELr),e(bf,CLr),e(Nr,wLr),e(Nr,yL),e(yL,ALr),e(yL,IFe),e(IFe,yLr),e(yL,LLr),e(Nr,xLr),e(Nr,Rt),g(LL,Rt,null),e(Rt,kLr),e(Rt,qFe),e(qFe,SLr),e(Rt,RLr),e(Rt,Ff),e(Ff,BLr),e(Ff,NFe),e(NFe,PLr),e(Ff,$Lr),e(Ff,iH),e(iH,ILr),e(Ff,qLr),e(Rt,NLr),e(Rt,jFe),e(jFe,jLr),e(Rt,DLr),g(xL,Rt,null),e(Nr,GLr),e(Nr,Bo),g(kL,Bo,null),e(Bo,OLr),e(Bo,DFe),e(DFe,VLr),e(Bo,XLr),e(Bo,$n),e($n,zLr),e($n,GFe),e(GFe,QLr),e($n,WLr),e($n,OFe),e(OFe,HLr),e($n,ULr),e($n,VFe),e(VFe,JLr),e($n,YLr),e(Bo,KLr),e(Bo,ve),e(ve,jM),e(jM,XFe),e(XFe,ZLr),e(jM,e8r),e(jM,dH),e(dH,o8r),e(jM,r8r),e(ve,t8r),e(ve,DM),e(DM,zFe),e(zFe,a8r),e(DM,n8r),e(DM,cH),e(cH,s8r),e(DM,l8r),e(ve,i8r),e(ve,GM),e(GM,QFe),e(QFe,d8r),e(GM,c8r),e(GM,fH),e(fH,f8r),e(GM,m8r),e(ve,g8r),e(ve,OM),e(OM,WFe),e(WFe,h8r),e(OM,p8r),e(OM,mH),e(mH,_8r),e(OM,u8r),e(ve,b8r),e(ve,VM),e(VM,HFe),e(HFe,F8r),e(VM,v8r),e(VM,gH),e(gH,T8r),e(VM,M8r),e(ve,E8r),e(ve,XM),e(XM,UFe),e(UFe,C8r),e(XM,w8r),e(XM,hH),e(hH,A8r),e(XM,y8r),e(ve,L8r),e(ve,zM),e(zM,JFe),e(JFe,x8r),e(zM,k8r),e(zM,pH),e(pH,S8r),e(zM,R8r),e(ve,B8r),e(ve,QM),e(QM,YFe),e(YFe,P8r),e(QM,$8r),e(QM,_H),e(_H,I8r),e(QM,q8r),e(ve,N8r),e(ve,WM),e(WM,KFe),e(KFe,j8r),e(WM,D8r),e(WM,uH),e(uH,G8r),e(WM,O8r),e(ve,V8r),e(ve,HM),e(HM,ZFe),e(ZFe,X8r),e(HM,z8r),e(HM,bH),e(bH,Q8r),e(HM,W8r),e(Bo,H8r),e(Bo,eve),e(eve,U8r),e(Bo,J8r),g(SL,Bo,null),b(c,XBe,u),b(c,vf,u),e(vf,UM),e(UM,ove),g(RL,ove,null),e(vf,Y8r),e(vf,rve),e(rve,K8r),b(c,zBe,u),b(c,jr,u),g(BL,jr,null),e(jr,Z8r),e(jr,Tf),e(Tf,e9r),e(Tf,FH),e(FH,o9r),e(Tf,r9r),e(Tf,vH),e(vH,t9r),e(Tf,a9r),e(jr,n9r),e(jr,PL),e(PL,s9r),e(PL,tve),e(tve,l9r),e(PL,i9r),e(jr,d9r),e(jr,Bt),g($L,Bt,null),e(Bt,c9r),e(Bt,ave),e(ave,f9r),e(Bt,m9r),e(Bt,Mf),e(Mf,g9r),e(Mf,nve),e(nve,h9r),e(Mf,p9r),e(Mf,TH),e(TH,_9r),e(Mf,u9r),e(Bt,b9r),e(Bt,sve),e(sve,F9r),e(Bt,v9r),g(IL,Bt,null),e(jr,T9r),e(jr,Po),g(qL,Po,null),e(Po,M9r),e(Po,lve),e(lve,E9r),e(Po,C9r),e(Po,In),e(In,w9r),e(In,ive),e(ive,A9r),e(In,y9r),e(In,dve),e(dve,L9r),e(In,x9r),e(In,cve),e(cve,k9r),e(In,S9r),e(Po,R9r),e(Po,Be),e(Be,JM),e(JM,fve),e(fve,B9r),e(JM,P9r),e(JM,MH),e(MH,$9r),e(JM,I9r),e(Be,q9r),e(Be,YM),e(YM,mve),e(mve,N9r),e(YM,j9r),e(YM,EH),e(EH,D9r),e(YM,G9r),e(Be,O9r),e(Be,KM),e(KM,gve),e(gve,V9r),e(KM,X9r),e(KM,CH),e(CH,z9r),e(KM,Q9r),e(Be,W9r),e(Be,ZM),e(ZM,hve),e(hve,H9r),e(ZM,U9r),e(ZM,wH),e(wH,J9r),e(ZM,Y9r),e(Be,K9r),e(Be,eE),e(eE,pve),e(pve,Z9r),e(eE,exr),e(eE,AH),e(AH,oxr),e(eE,rxr),e(Be,txr),e(Be,oE),e(oE,_ve),e(_ve,axr),e(oE,nxr),e(oE,yH),e(yH,sxr),e(oE,lxr),e(Be,ixr),e(Be,rE),e(rE,uve),e(uve,dxr),e(rE,cxr),e(rE,LH),e(LH,fxr),e(rE,mxr),e(Be,gxr),e(Be,tE),e(tE,bve),e(bve,hxr),e(tE,pxr),e(tE,xH),e(xH,_xr),e(tE,uxr),e(Po,bxr),e(Po,Fve),e(Fve,Fxr),e(Po,vxr),g(NL,Po,null),b(c,QBe,u),b(c,Ef,u),e(Ef,aE),e(aE,vve),g(jL,vve,null),e(Ef,Txr),e(Ef,Tve),e(Tve,Mxr),b(c,WBe,u),b(c,Dr,u),g(DL,Dr,null),e(Dr,Exr),e(Dr,Cf),e(Cf,Cxr),e(Cf,kH),e(kH,wxr),e(Cf,Axr),e(Cf,SH),e(SH,yxr),e(Cf,Lxr),e(Dr,xxr),e(Dr,GL),e(GL,kxr),e(GL,Mve),e(Mve,Sxr),e(GL,Rxr),e(Dr,Bxr),e(Dr,Pt),g(OL,Pt,null),e(Pt,Pxr),e(Pt,Eve),e(Eve,$xr),e(Pt,Ixr),e(Pt,wf),e(wf,qxr),e(wf,Cve),e(Cve,Nxr),e(wf,jxr),e(wf,RH),e(RH,Dxr),e(wf,Gxr),e(Pt,Oxr),e(Pt,wve),e(wve,Vxr),e(Pt,Xxr),g(VL,Pt,null),e(Dr,zxr),e(Dr,$o),g(XL,$o,null),e($o,Qxr),e($o,Ave),e(Ave,Wxr),e($o,Hxr),e($o,qn),e(qn,Uxr),e(qn,yve),e(yve,Jxr),e(qn,Yxr),e(qn,Lve),e(Lve,Kxr),e(qn,Zxr),e(qn,xve),e(xve,ekr),e(qn,okr),e($o,rkr),e($o,Pe),e(Pe,nE),e(nE,kve),e(kve,tkr),e(nE,akr),e(nE,BH),e(BH,nkr),e(nE,skr),e(Pe,lkr),e(Pe,sE),e(sE,Sve),e(Sve,ikr),e(sE,dkr),e(sE,PH),e(PH,ckr),e(sE,fkr),e(Pe,mkr),e(Pe,lE),e(lE,Rve),e(Rve,gkr),e(lE,hkr),e(lE,$H),e($H,pkr),e(lE,_kr),e(Pe,ukr),e(Pe,iE),e(iE,Bve),e(Bve,bkr),e(iE,Fkr),e(iE,IH),e(IH,vkr),e(iE,Tkr),e(Pe,Mkr),e(Pe,dE),e(dE,Pve),e(Pve,Ekr),e(dE,Ckr),e(dE,qH),e(qH,wkr),e(dE,Akr),e(Pe,ykr),e(Pe,cE),e(cE,$ve),e($ve,Lkr),e(cE,xkr),e(cE,NH),e(NH,kkr),e(cE,Skr),e(Pe,Rkr),e(Pe,fE),e(fE,Ive),e(Ive,Bkr),e(fE,Pkr),e(fE,jH),e(jH,$kr),e(fE,Ikr),e(Pe,qkr),e(Pe,mE),e(mE,qve),e(qve,Nkr),e(mE,jkr),e(mE,DH),e(DH,Dkr),e(mE,Gkr),e($o,Okr),e($o,Nve),e(Nve,Vkr),e($o,Xkr),g(zL,$o,null),b(c,HBe,u),b(c,Af,u),e(Af,gE),e(gE,jve),g(QL,jve,null),e(Af,zkr),e(Af,Dve),e(Dve,Qkr),b(c,UBe,u),b(c,Gr,u),g(WL,Gr,null),e(Gr,Wkr),e(Gr,yf),e(yf,Hkr),e(yf,GH),e(GH,Ukr),e(yf,Jkr),e(yf,OH),e(OH,Ykr),e(yf,Kkr),e(Gr,Zkr),e(Gr,HL),e(HL,eSr),e(HL,Gve),e(Gve,oSr),e(HL,rSr),e(Gr,tSr),e(Gr,$t),g(UL,$t,null),e($t,aSr),e($t,Ove),e(Ove,nSr),e($t,sSr),e($t,Lf),e(Lf,lSr),e(Lf,Vve),e(Vve,iSr),e(Lf,dSr),e(Lf,VH),e(VH,cSr),e(Lf,fSr),e($t,mSr),e($t,Xve),e(Xve,gSr),e($t,hSr),g(JL,$t,null),e(Gr,pSr),e(Gr,Io),g(YL,Io,null),e(Io,_Sr),e(Io,zve),e(zve,uSr),e(Io,bSr),e(Io,Nn),e(Nn,FSr),e(Nn,Qve),e(Qve,vSr),e(Nn,TSr),e(Nn,Wve),e(Wve,MSr),e(Nn,ESr),e(Nn,Hve),e(Hve,CSr),e(Nn,wSr),e(Io,ASr),e(Io,Uve),e(Uve,hE),e(hE,Jve),e(Jve,ySr),e(hE,LSr),e(hE,XH),e(XH,xSr),e(hE,kSr),e(Io,SSr),e(Io,Yve),e(Yve,RSr),e(Io,BSr),g(KL,Io,null),b(c,JBe,u),b(c,xf,u),e(xf,pE),e(pE,Kve),g(ZL,Kve,null),e(xf,PSr),e(xf,Zve),e(Zve,$Sr),b(c,YBe,u),b(c,Or,u),g(e8,Or,null),e(Or,ISr),e(Or,kf),e(kf,qSr),e(kf,zH),e(zH,NSr),e(kf,jSr),e(kf,QH),e(QH,DSr),e(kf,GSr),e(Or,OSr),e(Or,o8),e(o8,VSr),e(o8,e6e),e(e6e,XSr),e(o8,zSr),e(Or,QSr),e(Or,It),g(r8,It,null),e(It,WSr),e(It,o6e),e(o6e,HSr),e(It,USr),e(It,Sf),e(Sf,JSr),e(Sf,r6e),e(r6e,YSr),e(Sf,KSr),e(Sf,WH),e(WH,ZSr),e(Sf,eRr),e(It,oRr),e(It,t6e),e(t6e,rRr),e(It,tRr),g(t8,It,null),e(Or,aRr),e(Or,qo),g(a8,qo,null),e(qo,nRr),e(qo,a6e),e(a6e,sRr),e(qo,lRr),e(qo,jn),e(jn,iRr),e(jn,n6e),e(n6e,dRr),e(jn,cRr),e(jn,s6e),e(s6e,fRr),e(jn,mRr),e(jn,l6e),e(l6e,gRr),e(jn,hRr),e(qo,pRr),e(qo,n8),e(n8,_E),e(_E,i6e),e(i6e,_Rr),e(_E,uRr),e(_E,HH),e(HH,bRr),e(_E,FRr),e(n8,vRr),e(n8,uE),e(uE,d6e),e(d6e,TRr),e(uE,MRr),e(uE,UH),e(UH,ERr),e(uE,CRr),e(qo,wRr),e(qo,c6e),e(c6e,ARr),e(qo,yRr),g(s8,qo,null),b(c,KBe,u),b(c,Rf,u),e(Rf,bE),e(bE,f6e),g(l8,f6e,null),e(Rf,LRr),e(Rf,m6e),e(m6e,xRr),b(c,ZBe,u),b(c,Vr,u),g(i8,Vr,null),e(Vr,kRr),e(Vr,Bf),e(Bf,SRr),e(Bf,JH),e(JH,RRr),e(Bf,BRr),e(Bf,YH),e(YH,PRr),e(Bf,$Rr),e(Vr,IRr),e(Vr,d8),e(d8,qRr),e(d8,g6e),e(g6e,NRr),e(d8,jRr),e(Vr,DRr),e(Vr,qt),g(c8,qt,null),e(qt,GRr),e(qt,h6e),e(h6e,ORr),e(qt,VRr),e(qt,Pf),e(Pf,XRr),e(Pf,p6e),e(p6e,zRr),e(Pf,QRr),e(Pf,KH),e(KH,WRr),e(Pf,HRr),e(qt,URr),e(qt,_6e),e(_6e,JRr),e(qt,YRr),g(f8,qt,null),e(Vr,KRr),e(Vr,No),g(m8,No,null),e(No,ZRr),e(No,u6e),e(u6e,eBr),e(No,oBr),e(No,Dn),e(Dn,rBr),e(Dn,b6e),e(b6e,tBr),e(Dn,aBr),e(Dn,F6e),e(F6e,nBr),e(Dn,sBr),e(Dn,v6e),e(v6e,lBr),e(Dn,iBr),e(No,dBr),e(No,T6e),e(T6e,FE),e(FE,M6e),e(M6e,cBr),e(FE,fBr),e(FE,ZH),e(ZH,mBr),e(FE,gBr),e(No,hBr),e(No,E6e),e(E6e,pBr),e(No,_Br),g(g8,No,null),ePe=!0},p(c,[u]){const h8={};u&2&&(h8.$$scope={dirty:u,ctx:c}),Of.$set(h8);const C6e={};u&2&&(C6e.$$scope={dirty:u,ctx:c}),Ph.$set(C6e);const w6e={};u&2&&(w6e.$$scope={dirty:u,ctx:c}),zh.$set(w6e)},i(c){ePe||(h(me.$$.fragment,c),h(Da.$$.fragment,c),h(EC.$$.fragment,c),h(CC.$$.fragment,c),h(Of.$$.fragment,c),h(wC.$$.fragment,c),h(AC.$$.fragment,c),h(xC.$$.fragment,c),h(kC.$$.fragment,c),h(SC.$$.fragment,c),h(RC.$$.fragment,c),h(BC.$$.fragment,c),h(IC.$$.fragment,c),h(qC.$$.fragment,c),h(NC.$$.fragment,c),h(jC.$$.fragment,c),h(DC.$$.fragment,c),h(VC.$$.fragment,c),h(Ph.$$.fragment,c),h(XC.$$.fragment,c),h(zC.$$.fragment,c),h(QC.$$.fragment,c),h(WC.$$.fragment,c),h(JC.$$.fragment,c),h(zh.$$.fragment,c),h(YC.$$.fragment,c),h(KC.$$.fragment,c),h(ZC.$$.fragment,c),h(e5.$$.fragment,c),h(r5.$$.fragment,c),h(t5.$$.fragment,c),h(a5.$$.fragment,c),h(n5.$$.fragment,c),h(s5.$$.fragment,c),h(l5.$$.fragment,c),h(d5.$$.fragment,c),h(c5.$$.fragment,c),h(f5.$$.fragment,c),h(m5.$$.fragment,c),h(g5.$$.fragment,c),h(h5.$$.fragment,c),h(_5.$$.fragment,c),h(u5.$$.fragment,c),h(b5.$$.fragment,c),h(F5.$$.fragment,c),h(v5.$$.fragment,c),h(T5.$$.fragment,c),h(E5.$$.fragment,c),h(C5.$$.fragment,c),h(w5.$$.fragment,c),h(A5.$$.fragment,c),h(y5.$$.fragment,c),h(L5.$$.fragment,c),h(k5.$$.fragment,c),h(S5.$$.fragment,c),h(R5.$$.fragment,c),h(B5.$$.fragment,c),h(P5.$$.fragment,c),h($5.$$.fragment,c),h(q5.$$.fragment,c),h(N5.$$.fragment,c),h(j5.$$.fragment,c),h(D5.$$.fragment,c),h(G5.$$.fragment,c),h(O5.$$.fragment,c),h(X5.$$.fragment,c),h(z5.$$.fragment,c),h(Q5.$$.fragment,c),h(W5.$$.fragment,c),h(H5.$$.fragment,c),h(U5.$$.fragment,c),h(Y5.$$.fragment,c),h(K5.$$.fragment,c),h(Z5.$$.fragment,c),h(ew.$$.fragment,c),h(ow.$$.fragment,c),h(rw.$$.fragment,c),h(aw.$$.fragment,c),h(nw.$$.fragment,c),h(sw.$$.fragment,c),h(lw.$$.fragment,c),h(iw.$$.fragment,c),h(dw.$$.fragment,c),h(fw.$$.fragment,c),h(mw.$$.fragment,c),h(gw.$$.fragment,c),h(hw.$$.fragment,c),h(pw.$$.fragment,c),h(_w.$$.fragment,c),h(bw.$$.fragment,c),h(Fw.$$.fragment,c),h(vw.$$.fragment,c),h(Tw.$$.fragment,c),h(Mw.$$.fragment,c),h(Ew.$$.fragment,c),h(ww.$$.fragment,c),h(Aw.$$.fragment,c),h(yw.$$.fragment,c),h(Lw.$$.fragment,c),h(xw.$$.fragment,c),h(kw.$$.fragment,c),h(Rw.$$.fragment,c),h(Bw.$$.fragment,c),h(Pw.$$.fragment,c),h($w.$$.fragment,c),h(Iw.$$.fragment,c),h(qw.$$.fragment,c),h(jw.$$.fragment,c),h(Dw.$$.fragment,c),h(Gw.$$.fragment,c),h(Ow.$$.fragment,c),h(Vw.$$.fragment,c),h(Xw.$$.fragment,c),h(Qw.$$.fragment,c),h(Ww.$$.fragment,c),h(Hw.$$.fragment,c),h(Uw.$$.fragment,c),h(Jw.$$.fragment,c),h(Yw.$$.fragment,c),h(Zw.$$.fragment,c),h(eA.$$.fragment,c),h(oA.$$.fragment,c),h(rA.$$.fragment,c),h(tA.$$.fragment,c),h(aA.$$.fragment,c),h(sA.$$.fragment,c),h(lA.$$.fragment,c),h(iA.$$.fragment,c),h(cA.$$.fragment,c),h(fA.$$.fragment,c),h(mA.$$.fragment,c),h(hA.$$.fragment,c),h(pA.$$.fragment,c),h(_A.$$.fragment,c),h(uA.$$.fragment,c),h(bA.$$.fragment,c),h(FA.$$.fragment,c),h(TA.$$.fragment,c),h(MA.$$.fragment,c),h(EA.$$.fragment,c),h(CA.$$.fragment,c),h(wA.$$.fragment,c),h(AA.$$.fragment,c),h(LA.$$.fragment,c),h(xA.$$.fragment,c),h(kA.$$.fragment,c),h(SA.$$.fragment,c),h(RA.$$.fragment,c),h(BA.$$.fragment,c),h($A.$$.fragment,c),h(IA.$$.fragment,c),h(qA.$$.fragment,c),h(NA.$$.fragment,c),h(jA.$$.fragment,c),h(DA.$$.fragment,c),h(OA.$$.fragment,c),h(VA.$$.fragment,c),h(XA.$$.fragment,c),h(zA.$$.fragment,c),h(QA.$$.fragment,c),h(WA.$$.fragment,c),h(UA.$$.fragment,c),h(JA.$$.fragment,c),h(YA.$$.fragment,c),h(KA.$$.fragment,c),h(ZA.$$.fragment,c),h(e0.$$.fragment,c),h(r0.$$.fragment,c),h(t0.$$.fragment,c),h(a0.$$.fragment,c),h(n0.$$.fragment,c),h(s0.$$.fragment,c),h(l0.$$.fragment,c),h(d0.$$.fragment,c),h(c0.$$.fragment,c),h(f0.$$.fragment,c),h(m0.$$.fragment,c),h(g0.$$.fragment,c),h(h0.$$.fragment,c),h(_0.$$.fragment,c),h(u0.$$.fragment,c),h(b0.$$.fragment,c),h(F0.$$.fragment,c),h(v0.$$.fragment,c),h(T0.$$.fragment,c),h(E0.$$.fragment,c),h(C0.$$.fragment,c),h(w0.$$.fragment,c),h(y0.$$.fragment,c),h(L0.$$.fragment,c),h(x0.$$.fragment,c),h(S0.$$.fragment,c),h(R0.$$.fragment,c),h(B0.$$.fragment,c),h(P0.$$.fragment,c),h($0.$$.fragment,c),h(I0.$$.fragment,c),h(N0.$$.fragment,c),h(j0.$$.fragment,c),h(D0.$$.fragment,c),h(G0.$$.fragment,c),h(O0.$$.fragment,c),h(V0.$$.fragment,c),h(z0.$$.fragment,c),h(Q0.$$.fragment,c),h(W0.$$.fragment,c),h(H0.$$.fragment,c),h(U0.$$.fragment,c),h(J0.$$.fragment,c),h(K0.$$.fragment,c),h(Z0.$$.fragment,c),h(ey.$$.fragment,c),h(oy.$$.fragment,c),h(ry.$$.fragment,c),h(ty.$$.fragment,c),h(ny.$$.fragment,c),h(sy.$$.fragment,c),h(ly.$$.fragment,c),h(iy.$$.fragment,c),h(dy.$$.fragment,c),h(cy.$$.fragment,c),h(my.$$.fragment,c),h(gy.$$.fragment,c),h(hy.$$.fragment,c),h(py.$$.fragment,c),h(_y.$$.fragment,c),h(uy.$$.fragment,c),h(Fy.$$.fragment,c),h(vy.$$.fragment,c),h(Ty.$$.fragment,c),h(My.$$.fragment,c),h(Ey.$$.fragment,c),h(Cy.$$.fragment,c),h(Ay.$$.fragment,c),h(yy.$$.fragment,c),h(Ly.$$.fragment,c),h(xy.$$.fragment,c),h(ky.$$.fragment,c),h(Sy.$$.fragment,c),h(By.$$.fragment,c),h(Py.$$.fragment,c),h($y.$$.fragment,c),h(Iy.$$.fragment,c),h(qy.$$.fragment,c),h(Ny.$$.fragment,c),h(Dy.$$.fragment,c),h(Gy.$$.fragment,c),h(Oy.$$.fragment,c),h(Vy.$$.fragment,c),h(Xy.$$.fragment,c),h(zy.$$.fragment,c),h(Wy.$$.fragment,c),h(Hy.$$.fragment,c),h(Uy.$$.fragment,c),h(Jy.$$.fragment,c),h(Yy.$$.fragment,c),h(Ky.$$.fragment,c),h(eL.$$.fragment,c),h(oL.$$.fragment,c),h(rL.$$.fragment,c),h(tL.$$.fragment,c),h(aL.$$.fragment,c),h(nL.$$.fragment,c),h(lL.$$.fragment,c),h(iL.$$.fragment,c),h(dL.$$.fragment,c),h(cL.$$.fragment,c),h(fL.$$.fragment,c),h(mL.$$.fragment,c),h(hL.$$.fragment,c),h(pL.$$.fragment,c),h(_L.$$.fragment,c),h(uL.$$.fragment,c),h(bL.$$.fragment,c),h(FL.$$.fragment,c),h(TL.$$.fragment,c),h(ML.$$.fragment,c),h(EL.$$.fragment,c),h(CL.$$.fragment,c),h(wL.$$.fragment,c),h(AL.$$.fragment,c),h(LL.$$.fragment,c),h(xL.$$.fragment,c),h(kL.$$.fragment,c),h(SL.$$.fragment,c),h(RL.$$.fragment,c),h(BL.$$.fragment,c),h($L.$$.fragment,c),h(IL.$$.fragment,c),h(qL.$$.fragment,c),h(NL.$$.fragment,c),h(jL.$$.fragment,c),h(DL.$$.fragment,c),h(OL.$$.fragment,c),h(VL.$$.fragment,c),h(XL.$$.fragment,c),h(zL.$$.fragment,c),h(QL.$$.fragment,c),h(WL.$$.fragment,c),h(UL.$$.fragment,c),h(JL.$$.fragment,c),h(YL.$$.fragment,c),h(KL.$$.fragment,c),h(ZL.$$.fragment,c),h(e8.$$.fragment,c),h(r8.$$.fragment,c),h(t8.$$.fragment,c),h(a8.$$.fragment,c),h(s8.$$.fragment,c),h(l8.$$.fragment,c),h(i8.$$.fragment,c),h(c8.$$.fragment,c),h(f8.$$.fragment,c),h(m8.$$.fragment,c),h(g8.$$.fragment,c),ePe=!0)},o(c){p(me.$$.fragment,c),p(Da.$$.fragment,c),p(EC.$$.fragment,c),p(CC.$$.fragment,c),p(Of.$$.fragment,c),p(wC.$$.fragment,c),p(AC.$$.fragment,c),p(xC.$$.fragment,c),p(kC.$$.fragment,c),p(SC.$$.fragment,c),p(RC.$$.fragment,c),p(BC.$$.fragment,c),p(IC.$$.fragment,c),p(qC.$$.fragment,c),p(NC.$$.fragment,c),p(jC.$$.fragment,c),p(DC.$$.fragment,c),p(VC.$$.fragment,c),p(Ph.$$.fragment,c),p(XC.$$.fragment,c),p(zC.$$.fragment,c),p(QC.$$.fragment,c),p(WC.$$.fragment,c),p(JC.$$.fragment,c),p(zh.$$.fragment,c),p(YC.$$.fragment,c),p(KC.$$.fragment,c),p(ZC.$$.fragment,c),p(e5.$$.fragment,c),p(r5.$$.fragment,c),p(t5.$$.fragment,c),p(a5.$$.fragment,c),p(n5.$$.fragment,c),p(s5.$$.fragment,c),p(l5.$$.fragment,c),p(d5.$$.fragment,c),p(c5.$$.fragment,c),p(f5.$$.fragment,c),p(m5.$$.fragment,c),p(g5.$$.fragment,c),p(h5.$$.fragment,c),p(_5.$$.fragment,c),p(u5.$$.fragment,c),p(b5.$$.fragment,c),p(F5.$$.fragment,c),p(v5.$$.fragment,c),p(T5.$$.fragment,c),p(E5.$$.fragment,c),p(C5.$$.fragment,c),p(w5.$$.fragment,c),p(A5.$$.fragment,c),p(y5.$$.fragment,c),p(L5.$$.fragment,c),p(k5.$$.fragment,c),p(S5.$$.fragment,c),p(R5.$$.fragment,c),p(B5.$$.fragment,c),p(P5.$$.fragment,c),p($5.$$.fragment,c),p(q5.$$.fragment,c),p(N5.$$.fragment,c),p(j5.$$.fragment,c),p(D5.$$.fragment,c),p(G5.$$.fragment,c),p(O5.$$.fragment,c),p(X5.$$.fragment,c),p(z5.$$.fragment,c),p(Q5.$$.fragment,c),p(W5.$$.fragment,c),p(H5.$$.fragment,c),p(U5.$$.fragment,c),p(Y5.$$.fragment,c),p(K5.$$.fragment,c),p(Z5.$$.fragment,c),p(ew.$$.fragment,c),p(ow.$$.fragment,c),p(rw.$$.fragment,c),p(aw.$$.fragment,c),p(nw.$$.fragment,c),p(sw.$$.fragment,c),p(lw.$$.fragment,c),p(iw.$$.fragment,c),p(dw.$$.fragment,c),p(fw.$$.fragment,c),p(mw.$$.fragment,c),p(gw.$$.fragment,c),p(hw.$$.fragment,c),p(pw.$$.fragment,c),p(_w.$$.fragment,c),p(bw.$$.fragment,c),p(Fw.$$.fragment,c),p(vw.$$.fragment,c),p(Tw.$$.fragment,c),p(Mw.$$.fragment,c),p(Ew.$$.fragment,c),p(ww.$$.fragment,c),p(Aw.$$.fragment,c),p(yw.$$.fragment,c),p(Lw.$$.fragment,c),p(xw.$$.fragment,c),p(kw.$$.fragment,c),p(Rw.$$.fragment,c),p(Bw.$$.fragment,c),p(Pw.$$.fragment,c),p($w.$$.fragment,c),p(Iw.$$.fragment,c),p(qw.$$.fragment,c),p(jw.$$.fragment,c),p(Dw.$$.fragment,c),p(Gw.$$.fragment,c),p(Ow.$$.fragment,c),p(Vw.$$.fragment,c),p(Xw.$$.fragment,c),p(Qw.$$.fragment,c),p(Ww.$$.fragment,c),p(Hw.$$.fragment,c),p(Uw.$$.fragment,c),p(Jw.$$.fragment,c),p(Yw.$$.fragment,c),p(Zw.$$.fragment,c),p(eA.$$.fragment,c),p(oA.$$.fragment,c),p(rA.$$.fragment,c),p(tA.$$.fragment,c),p(aA.$$.fragment,c),p(sA.$$.fragment,c),p(lA.$$.fragment,c),p(iA.$$.fragment,c),p(cA.$$.fragment,c),p(fA.$$.fragment,c),p(mA.$$.fragment,c),p(hA.$$.fragment,c),p(pA.$$.fragment,c),p(_A.$$.fragment,c),p(uA.$$.fragment,c),p(bA.$$.fragment,c),p(FA.$$.fragment,c),p(TA.$$.fragment,c),p(MA.$$.fragment,c),p(EA.$$.fragment,c),p(CA.$$.fragment,c),p(wA.$$.fragment,c),p(AA.$$.fragment,c),p(LA.$$.fragment,c),p(xA.$$.fragment,c),p(kA.$$.fragment,c),p(SA.$$.fragment,c),p(RA.$$.fragment,c),p(BA.$$.fragment,c),p($A.$$.fragment,c),p(IA.$$.fragment,c),p(qA.$$.fragment,c),p(NA.$$.fragment,c),p(jA.$$.fragment,c),p(DA.$$.fragment,c),p(OA.$$.fragment,c),p(VA.$$.fragment,c),p(XA.$$.fragment,c),p(zA.$$.fragment,c),p(QA.$$.fragment,c),p(WA.$$.fragment,c),p(UA.$$.fragment,c),p(JA.$$.fragment,c),p(YA.$$.fragment,c),p(KA.$$.fragment,c),p(ZA.$$.fragment,c),p(e0.$$.fragment,c),p(r0.$$.fragment,c),p(t0.$$.fragment,c),p(a0.$$.fragment,c),p(n0.$$.fragment,c),p(s0.$$.fragment,c),p(l0.$$.fragment,c),p(d0.$$.fragment,c),p(c0.$$.fragment,c),p(f0.$$.fragment,c),p(m0.$$.fragment,c),p(g0.$$.fragment,c),p(h0.$$.fragment,c),p(_0.$$.fragment,c),p(u0.$$.fragment,c),p(b0.$$.fragment,c),p(F0.$$.fragment,c),p(v0.$$.fragment,c),p(T0.$$.fragment,c),p(E0.$$.fragment,c),p(C0.$$.fragment,c),p(w0.$$.fragment,c),p(y0.$$.fragment,c),p(L0.$$.fragment,c),p(x0.$$.fragment,c),p(S0.$$.fragment,c),p(R0.$$.fragment,c),p(B0.$$.fragment,c),p(P0.$$.fragment,c),p($0.$$.fragment,c),p(I0.$$.fragment,c),p(N0.$$.fragment,c),p(j0.$$.fragment,c),p(D0.$$.fragment,c),p(G0.$$.fragment,c),p(O0.$$.fragment,c),p(V0.$$.fragment,c),p(z0.$$.fragment,c),p(Q0.$$.fragment,c),p(W0.$$.fragment,c),p(H0.$$.fragment,c),p(U0.$$.fragment,c),p(J0.$$.fragment,c),p(K0.$$.fragment,c),p(Z0.$$.fragment,c),p(ey.$$.fragment,c),p(oy.$$.fragment,c),p(ry.$$.fragment,c),p(ty.$$.fragment,c),p(ny.$$.fragment,c),p(sy.$$.fragment,c),p(ly.$$.fragment,c),p(iy.$$.fragment,c),p(dy.$$.fragment,c),p(cy.$$.fragment,c),p(my.$$.fragment,c),p(gy.$$.fragment,c),p(hy.$$.fragment,c),p(py.$$.fragment,c),p(_y.$$.fragment,c),p(uy.$$.fragment,c),p(Fy.$$.fragment,c),p(vy.$$.fragment,c),p(Ty.$$.fragment,c),p(My.$$.fragment,c),p(Ey.$$.fragment,c),p(Cy.$$.fragment,c),p(Ay.$$.fragment,c),p(yy.$$.fragment,c),p(Ly.$$.fragment,c),p(xy.$$.fragment,c),p(ky.$$.fragment,c),p(Sy.$$.fragment,c),p(By.$$.fragment,c),p(Py.$$.fragment,c),p($y.$$.fragment,c),p(Iy.$$.fragment,c),p(qy.$$.fragment,c),p(Ny.$$.fragment,c),p(Dy.$$.fragment,c),p(Gy.$$.fragment,c),p(Oy.$$.fragment,c),p(Vy.$$.fragment,c),p(Xy.$$.fragment,c),p(zy.$$.fragment,c),p(Wy.$$.fragment,c),p(Hy.$$.fragment,c),p(Uy.$$.fragment,c),p(Jy.$$.fragment,c),p(Yy.$$.fragment,c),p(Ky.$$.fragment,c),p(eL.$$.fragment,c),p(oL.$$.fragment,c),p(rL.$$.fragment,c),p(tL.$$.fragment,c),p(aL.$$.fragment,c),p(nL.$$.fragment,c),p(lL.$$.fragment,c),p(iL.$$.fragment,c),p(dL.$$.fragment,c),p(cL.$$.fragment,c),p(fL.$$.fragment,c),p(mL.$$.fragment,c),p(hL.$$.fragment,c),p(pL.$$.fragment,c),p(_L.$$.fragment,c),p(uL.$$.fragment,c),p(bL.$$.fragment,c),p(FL.$$.fragment,c),p(TL.$$.fragment,c),p(ML.$$.fragment,c),p(EL.$$.fragment,c),p(CL.$$.fragment,c),p(wL.$$.fragment,c),p(AL.$$.fragment,c),p(LL.$$.fragment,c),p(xL.$$.fragment,c),p(kL.$$.fragment,c),p(SL.$$.fragment,c),p(RL.$$.fragment,c),p(BL.$$.fragment,c),p($L.$$.fragment,c),p(IL.$$.fragment,c),p(qL.$$.fragment,c),p(NL.$$.fragment,c),p(jL.$$.fragment,c),p(DL.$$.fragment,c),p(OL.$$.fragment,c),p(VL.$$.fragment,c),p(XL.$$.fragment,c),p(zL.$$.fragment,c),p(QL.$$.fragment,c),p(WL.$$.fragment,c),p(UL.$$.fragment,c),p(JL.$$.fragment,c),p(YL.$$.fragment,c),p(KL.$$.fragment,c),p(ZL.$$.fragment,c),p(e8.$$.fragment,c),p(r8.$$.fragment,c),p(t8.$$.fragment,c),p(a8.$$.fragment,c),p(s8.$$.fragment,c),p(l8.$$.fragment,c),p(i8.$$.fragment,c),p(c8.$$.fragment,c),p(f8.$$.fragment,c),p(m8.$$.fragment,c),p(g8.$$.fragment,c),ePe=!1},d(c){t(Z),c&&t(io),c&&t(de),_(me),c&&t(qf),c&&t(fa),c&&t(xe),c&&t(co),c&&t(jf),_(Da,c),c&&t(fo),c&&t(_e),c&&t(zo),c&&t(Ga),c&&t(ZSe),c&&t(Vi),_(EC),c&&t(eRe),c&&t(zn),c&&t(oRe),_(CC,c),c&&t(rRe),c&&t(_9),c&&t(tRe),_(Of,c),c&&t(aRe),c&&t(Xi),_(wC),c&&t(nRe),c&&t(Qo),_(AC),_(xC),_(kC),_(SC),c&&t(sRe),c&&t(Qi),_(RC),c&&t(lRe),c&&t(Wo),_(BC),_(IC),_(qC),_(NC),c&&t(iRe),c&&t(Wi),_(jC),c&&t(dRe),c&&t(Ho),_(DC),_(VC),_(Ph),_(XC),_(zC),c&&t(cRe),c&&t(Hi),_(QC),c&&t(fRe),c&&t(Uo),_(WC),_(JC),_(zh),_(YC),_(KC),c&&t(mRe),c&&t(Ji),_(ZC),c&&t(gRe),c&&t(Jo),_(e5),_(r5),_(t5),_(a5),_(n5),c&&t(hRe),c&&t(Zi),_(s5),c&&t(pRe),c&&t(Yo),_(l5),_(d5),_(c5),_(f5),_(m5),c&&t(_Re),c&&t(rd),_(g5),c&&t(uRe),c&&t(Ko),_(h5),_(_5),_(u5),_(b5),_(F5),c&&t(bRe),c&&t(nd),_(v5),c&&t(FRe),c&&t(Zo),_(T5),_(E5),_(C5),_(w5),_(A5),c&&t(vRe),c&&t(id),_(y5),c&&t(TRe),c&&t(er),_(L5),_(k5),_(S5),_(R5),_(B5),c&&t(MRe),c&&t(fd),_(P5),c&&t(ERe),c&&t(or),_($5),_(q5),_(N5),_(j5),_(D5),c&&t(CRe),c&&t(hd),_(G5),c&&t(wRe),c&&t(rr),_(O5),_(X5),_(z5),_(Q5),_(W5),c&&t(ARe),c&&t(ud),_(H5),c&&t(yRe),c&&t(tr),_(U5),_(Y5),_(K5),_(Z5),_(ew),c&&t(LRe),c&&t(vd),_(ow),c&&t(xRe),c&&t(ar),_(rw),_(aw),_(nw),_(sw),_(lw),c&&t(kRe),c&&t(Ed),_(iw),c&&t(SRe),c&&t(nr),_(dw),_(fw),_(mw),_(gw),_(hw),c&&t(RRe),c&&t(Ad),_(pw),c&&t(BRe),c&&t(sr),_(_w),_(bw),_(Fw),_(vw),_(Tw),c&&t(PRe),c&&t(xd),_(Mw),c&&t($Re),c&&t(lr),_(Ew),_(ww),_(Aw),_(yw),_(Lw),c&&t(IRe),c&&t(Rd),_(xw),c&&t(qRe),c&&t(ir),_(kw),_(Rw),_(Bw),_(Pw),_($w),c&&t(NRe),c&&t($d),_(Iw),c&&t(jRe),c&&t(dr),_(qw),_(jw),_(Dw),_(Gw),_(Ow),c&&t(DRe),c&&t(Nd),_(Vw),c&&t(GRe),c&&t(cr),_(Xw),_(Qw),_(Ww),_(Hw),_(Uw),c&&t(ORe),c&&t(Gd),_(Jw),c&&t(VRe),c&&t(fr),_(Yw),_(Zw),_(eA),_(oA),_(rA),c&&t(XRe),c&&t(Xd),_(tA),c&&t(zRe),c&&t(mr),_(aA),_(sA),_(lA),_(iA),_(cA),c&&t(QRe),c&&t(Wd),_(fA),c&&t(WRe),c&&t(gr),_(mA),_(hA),_(pA),_(_A),_(uA),c&&t(HRe),c&&t(Jd),_(bA),c&&t(URe),c&&t(hr),_(FA),_(TA),_(MA),_(EA),_(CA),c&&t(JRe),c&&t(ec),_(wA),c&&t(YRe),c&&t(pr),_(AA),_(LA),_(xA),_(kA),_(SA),c&&t(KRe),c&&t(tc),_(RA),c&&t(ZRe),c&&t(_r),_(BA),_($A),_(IA),_(qA),_(NA),c&&t(eBe),c&&t(sc),_(jA),c&&t(oBe),c&&t(ur),_(DA),_(OA),_(VA),_(XA),_(zA),c&&t(rBe),c&&t(cc),_(QA),c&&t(tBe),c&&t(br),_(WA),_(UA),_(JA),_(YA),_(KA),c&&t(aBe),c&&t(gc),_(ZA),c&&t(nBe),c&&t(Fr),_(e0),_(r0),_(t0),_(a0),_(n0),c&&t(sBe),c&&t(_c),_(s0),c&&t(lBe),c&&t(vr),_(l0),_(d0),_(c0),_(f0),_(m0),c&&t(iBe),c&&t(Fc),_(g0),c&&t(dBe),c&&t(Tr),_(h0),_(_0),_(u0),_(b0),_(F0),c&&t(cBe),c&&t(Mc),_(v0),c&&t(fBe),c&&t(Mr),_(T0),_(E0),_(C0),_(w0),_(y0),c&&t(mBe),c&&t(wc),_(L0),c&&t(gBe),c&&t(Er),_(x0),_(S0),_(R0),_(B0),_(P0),c&&t(hBe),c&&t(Lc),_($0),c&&t(pBe),c&&t(Cr),_(I0),_(N0),_(j0),_(D0),_(G0),c&&t(_Be),c&&t(Sc),_(O0),c&&t(uBe),c&&t(wr),_(V0),_(z0),_(Q0),_(W0),_(H0),c&&t(bBe),c&&t(Pc),_(U0),c&&t(FBe),c&&t(Ar),_(J0),_(K0),_(Z0),_(ey),_(oy),c&&t(vBe),c&&t(qc),_(ry),c&&t(TBe),c&&t(yr),_(ty),_(ny),_(sy),_(ly),_(iy),c&&t(MBe),c&&t(Dc),_(dy),c&&t(EBe),c&&t(Lr),_(cy),_(my),_(gy),_(hy),_(py),c&&t(CBe),c&&t(Vc),_(_y),c&&t(wBe),c&&t(xr),_(uy),_(Fy),_(vy),_(Ty),_(My),c&&t(ABe),c&&t(Qc),_(Ey),c&&t(yBe),c&&t(kr),_(Cy),_(Ay),_(yy),_(Ly),_(xy),c&&t(LBe),c&&t(Uc),_(ky),c&&t(xBe),c&&t(Sr),_(Sy),_(By),_(Py),_($y),_(Iy),c&&t(kBe),c&&t(Kc),_(qy),c&&t(SBe),c&&t(Rr),_(Ny),_(Dy),_(Gy),_(Oy),_(Vy),c&&t(RBe),c&&t(of),_(Xy),c&&t(BBe),c&&t(Br),_(zy),_(Wy),_(Hy),_(Uy),_(Jy),c&&t(PBe),c&&t(af),_(Yy),c&&t($Be),c&&t(Pr),_(Ky),_(eL),_(oL),_(rL),_(tL),c&&t(IBe),c&&t(lf),_(aL),c&&t(qBe),c&&t($r),_(nL),_(lL),_(iL),_(dL),_(cL),c&&t(NBe),c&&t(ff),_(fL),c&&t(jBe),c&&t(Ir),_(mL),_(hL),_(pL),_(_L),_(uL),c&&t(DBe),c&&t(hf),_(bL),c&&t(GBe),c&&t(qr),_(FL),_(TL),_(ML),_(EL),_(CL),c&&t(OBe),c&&t(uf),_(wL),c&&t(VBe),c&&t(Nr),_(AL),_(LL),_(xL),_(kL),_(SL),c&&t(XBe),c&&t(vf),_(RL),c&&t(zBe),c&&t(jr),_(BL),_($L),_(IL),_(qL),_(NL),c&&t(QBe),c&&t(Ef),_(jL),c&&t(WBe),c&&t(Dr),_(DL),_(OL),_(VL),_(XL),_(zL),c&&t(HBe),c&&t(Af),_(QL),c&&t(UBe),c&&t(Gr),_(WL),_(UL),_(JL),_(YL),_(KL),c&&t(JBe),c&&t(xf),_(ZL),c&&t(YBe),c&&t(Or),_(e8),_(r8),_(t8),_(a8),_(s8),c&&t(KBe),c&&t(Rf),_(l8),c&&t(ZBe),c&&t(Vr),_(i8),_(c8),_(f8),_(m8),_(g8)}}}const UEt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function JEt(If){return XEt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class rCt extends DEt{constructor(Z){super();GEt(this,Z,JEt,HEt,OEt,{})}}export{rCt as default,UEt as metadata};
