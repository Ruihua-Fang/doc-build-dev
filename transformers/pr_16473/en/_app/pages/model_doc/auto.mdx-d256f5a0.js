import{S as jMt,i as DMt,s as GMt,e as a,k as l,w as f,t as o,M as OMt,c as n,d as t,m as i,a as s,x as m,h as r,b as d,F as e,g as b,y as g,q as h,o as p,B as _,v as VMt}from"../../chunks/vendor-6b77c823.js";import{T as ARr}from"../../chunks/Tip-39098574.js";import{D as C}from"../../chunks/Docstring-abef54e3.js";import{C as A}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as X}from"../../chunks/IconCopyLink-7a11ce68.js";function XMt(If){let Z,io,de,Ce,lo,me,Me,Xo,Ii,qf,fa,qi,Ni,hC,Nf,xe,co,ji,Gn,pC,On,Vn,_C,Di,Xn,uC,Gi,jf,Da;return{c(){Z=a("p"),io=o("If your "),de=a("code"),Ce=o("NewModelConfig"),lo=o(" is a subclass of "),me=a("code"),Me=o("PretrainedConfig"),Xo=o(`, make sure its
`),Ii=a("code"),qf=o("model_type"),fa=o(" attribute is set to the same key you use when registering the config (here "),qi=a("code"),Ni=o('"new-model"'),hC=o(")."),Nf=l(),xe=a("p"),co=o("Likewise, if your "),ji=a("code"),Gn=o("NewModel"),pC=o(" is a subclass of "),On=a("a"),Vn=o("PreTrainedModel"),_C=o(`, make sure its
`),Di=a("code"),Xn=o("config_class"),uC=o(` attribute is set to the same class you use when registering the model (here
`),Gi=a("code"),jf=o("NewModelConfig"),Da=o(")."),this.h()},l(fo){Z=n(fo,"P",{});var _e=s(Z);io=r(_e,"If your "),de=n(_e,"CODE",{});var s9=s(de);Ce=r(s9,"NewModelConfig"),s9.forEach(t),lo=r(_e," is a subclass of "),me=n(_e,"CODE",{});var Oi=s(me);Me=r(Oi,"PretrainedConfig"),Oi.forEach(t),Xo=r(_e,`, make sure its
`),Ii=n(_e,"CODE",{});var l9=s(Ii);qf=r(l9,"model_type"),l9.forEach(t),fa=r(_e," attribute is set to the same key you use when registering the config (here "),qi=n(_e,"CODE",{});var i9=s(qi);Ni=r(i9,'"new-model"'),i9.forEach(t),hC=r(_e,")."),_e.forEach(t),Nf=i(fo),xe=n(fo,"P",{});var zo=s(xe);co=r(zo,"Likewise, if your "),ji=n(zo,"CODE",{});var Ga=s(ji);Gn=r(Ga,"NewModel"),Ga.forEach(t),pC=r(zo," is a subclass of "),On=n(zo,"A",{href:!0});var d9=s(On);Vn=r(d9,"PreTrainedModel"),d9.forEach(t),_C=r(zo,`, make sure its
`),Di=n(zo,"CODE",{});var Df=s(Di);Xn=r(Df,"config_class"),Df.forEach(t),uC=r(zo,` attribute is set to the same class you use when registering the model (here
`),Gi=n(zo,"CODE",{});var c9=s(Gi);jf=r(c9,"NewModelConfig"),c9.forEach(t),Da=r(zo,")."),zo.forEach(t),this.h()},h(){d(On,"href","/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel")},m(fo,_e){b(fo,Z,_e),e(Z,io),e(Z,de),e(de,Ce),e(Z,lo),e(Z,me),e(me,Me),e(Z,Xo),e(Z,Ii),e(Ii,qf),e(Z,fa),e(Z,qi),e(qi,Ni),e(Z,hC),b(fo,Nf,_e),b(fo,xe,_e),e(xe,co),e(xe,ji),e(ji,Gn),e(xe,pC),e(xe,On),e(On,Vn),e(xe,_C),e(xe,Di),e(Di,Xn),e(xe,uC),e(xe,Gi),e(Gi,jf),e(xe,Da)},d(fo){fo&&t(Z),fo&&t(Nf),fo&&t(xe)}}}function zMt(If){let Z,io,de,Ce,lo;return{c(){Z=a("p"),io=o("Passing "),de=a("code"),Ce=o("use_auth_token=True"),lo=o(" is required when you want to use a private model.")},l(me){Z=n(me,"P",{});var Me=s(Z);io=r(Me,"Passing "),de=n(Me,"CODE",{});var Xo=s(de);Ce=r(Xo,"use_auth_token=True"),Xo.forEach(t),lo=r(Me," is required when you want to use a private model."),Me.forEach(t)},m(me,Me){b(me,Z,Me),e(Z,io),e(Z,de),e(de,Ce),e(Z,lo)},d(me){me&&t(Z)}}}function QMt(If){let Z,io,de,Ce,lo;return{c(){Z=a("p"),io=o("Passing "),de=a("code"),Ce=o("use_auth_token=True"),lo=o(" is required when you want to use a private model.")},l(me){Z=n(me,"P",{});var Me=s(Z);io=r(Me,"Passing "),de=n(Me,"CODE",{});var Xo=s(de);Ce=r(Xo,"use_auth_token=True"),Xo.forEach(t),lo=r(Me," is required when you want to use a private model."),Me.forEach(t)},m(me,Me){b(me,Z,Me),e(Z,io),e(Z,de),e(de,Ce),e(Z,lo)},d(me){me&&t(Z)}}}function WMt(If){let Z,io,de,Ce,lo,me,Me,Xo,Ii,qf,fa,qi,Ni,hC,Nf,xe,co,ji,Gn,pC,On,Vn,_C,Di,Xn,uC,Gi,jf,Da,fo,_e,s9,Oi,l9,i9,zo,Ga,d9,Df,c9,Q$e,BSe,Vi,Gf,qJ,bC,W$e,NJ,H$e,PSe,zn,U$e,jJ,J$e,Y$e,DJ,K$e,Z$e,$Se,FC,ISe,f9,eIe,qSe,Of,NSe,Xi,Vf,GJ,vC,oIe,OJ,rIe,jSe,Qo,TC,tIe,MC,aIe,m9,nIe,sIe,lIe,EC,iIe,VJ,dIe,cIe,fIe,mo,CC,mIe,XJ,gIe,hIe,zi,pIe,zJ,_Ie,uIe,QJ,bIe,FIe,vIe,F,Xf,WJ,TIe,MIe,g9,EIe,CIe,wIe,zf,HJ,AIe,yIe,h9,LIe,xIe,kIe,Qf,UJ,SIe,RIe,p9,BIe,PIe,$Ie,Wf,JJ,IIe,qIe,_9,NIe,jIe,DIe,Hf,YJ,GIe,OIe,u9,VIe,XIe,zIe,Uf,KJ,QIe,WIe,b9,HIe,UIe,JIe,Jf,ZJ,YIe,KIe,F9,ZIe,eqe,oqe,Yf,eY,rqe,tqe,v9,aqe,nqe,sqe,Kf,oY,lqe,iqe,T9,dqe,cqe,fqe,Zf,rY,mqe,gqe,M9,hqe,pqe,_qe,em,tY,uqe,bqe,E9,Fqe,vqe,Tqe,om,aY,Mqe,Eqe,C9,Cqe,wqe,Aqe,rm,nY,yqe,Lqe,w9,xqe,kqe,Sqe,tm,sY,Rqe,Bqe,A9,Pqe,$qe,Iqe,am,lY,qqe,Nqe,y9,jqe,Dqe,Gqe,nm,iY,Oqe,Vqe,L9,Xqe,zqe,Qqe,sm,dY,Wqe,Hqe,x9,Uqe,Jqe,Yqe,lm,cY,Kqe,Zqe,k9,eNe,oNe,rNe,im,fY,tNe,aNe,S9,nNe,sNe,lNe,dm,mY,iNe,dNe,R9,cNe,fNe,mNe,cm,gY,gNe,hNe,B9,pNe,_Ne,uNe,fm,hY,bNe,FNe,P9,vNe,TNe,MNe,mm,pY,ENe,CNe,$9,wNe,ANe,yNe,gm,_Y,LNe,xNe,I9,kNe,SNe,RNe,hm,uY,BNe,PNe,q9,$Ne,INe,qNe,pm,bY,NNe,jNe,N9,DNe,GNe,ONe,_m,FY,VNe,XNe,j9,zNe,QNe,WNe,um,vY,HNe,UNe,D9,JNe,YNe,KNe,bm,TY,ZNe,eje,G9,oje,rje,tje,Fm,MY,aje,nje,O9,sje,lje,ije,vm,EY,dje,cje,V9,fje,mje,gje,Tm,CY,hje,pje,X9,_je,uje,bje,Mm,wY,Fje,vje,z9,Tje,Mje,Eje,Em,AY,Cje,wje,Q9,Aje,yje,Lje,Cm,yY,xje,kje,W9,Sje,Rje,Bje,wm,LY,Pje,$je,H9,Ije,qje,Nje,Am,xY,jje,Dje,U9,Gje,Oje,Vje,ym,kY,Xje,zje,J9,Qje,Wje,Hje,Lm,SY,Uje,Jje,Y9,Yje,Kje,Zje,xm,RY,eDe,oDe,K9,rDe,tDe,aDe,km,BY,nDe,sDe,Z9,lDe,iDe,dDe,Sm,PY,cDe,fDe,ex,mDe,gDe,hDe,Rm,$Y,pDe,_De,ox,uDe,bDe,FDe,Bm,IY,vDe,TDe,rx,MDe,EDe,CDe,Pm,qY,wDe,ADe,tx,yDe,LDe,xDe,$m,NY,kDe,SDe,ax,RDe,BDe,PDe,Im,jY,$De,IDe,nx,qDe,NDe,jDe,qm,DY,DDe,GDe,sx,ODe,VDe,XDe,Nm,GY,zDe,QDe,lx,WDe,HDe,UDe,jm,OY,JDe,YDe,ix,KDe,ZDe,eGe,Dm,VY,oGe,rGe,dx,tGe,aGe,nGe,Gm,XY,sGe,lGe,cx,iGe,dGe,cGe,Om,zY,fGe,mGe,fx,gGe,hGe,pGe,Vm,QY,_Ge,uGe,mx,bGe,FGe,vGe,Xm,WY,TGe,MGe,gx,EGe,CGe,wGe,zm,HY,AGe,yGe,hx,LGe,xGe,kGe,Qm,UY,SGe,RGe,px,BGe,PGe,$Ge,Wm,JY,IGe,qGe,_x,NGe,jGe,DGe,Hm,YY,GGe,OGe,ux,VGe,XGe,zGe,Um,KY,QGe,WGe,bx,HGe,UGe,JGe,Jm,ZY,YGe,KGe,Fx,ZGe,eOe,oOe,Ym,eK,rOe,tOe,vx,aOe,nOe,sOe,Km,oK,lOe,iOe,Tx,dOe,cOe,fOe,Zm,rK,mOe,gOe,Mx,hOe,pOe,_Oe,eg,tK,uOe,bOe,Ex,FOe,vOe,TOe,og,aK,MOe,EOe,Cx,COe,wOe,AOe,rg,nK,yOe,LOe,wx,xOe,kOe,SOe,tg,sK,ROe,BOe,Ax,POe,$Oe,IOe,ag,lK,qOe,NOe,yx,jOe,DOe,GOe,ng,iK,OOe,VOe,Lx,XOe,zOe,QOe,sg,dK,WOe,HOe,xx,UOe,JOe,YOe,lg,cK,KOe,ZOe,kx,eVe,oVe,rVe,ig,fK,tVe,aVe,Sx,nVe,sVe,lVe,dg,mK,iVe,dVe,Rx,cVe,fVe,mVe,cg,gK,gVe,hVe,Bx,pVe,_Ve,uVe,fg,hK,bVe,FVe,Px,vVe,TVe,MVe,mg,pK,EVe,CVe,$x,wVe,AVe,yVe,gg,_K,LVe,xVe,Ix,kVe,SVe,RVe,hg,uK,BVe,PVe,qx,$Ve,IVe,qVe,pg,bK,NVe,jVe,Nx,DVe,GVe,OVe,_g,FK,VVe,XVe,jx,zVe,QVe,WVe,ug,vK,HVe,UVe,Dx,JVe,YVe,KVe,bg,TK,ZVe,eXe,Gx,oXe,rXe,tXe,Fg,MK,aXe,nXe,Ox,sXe,lXe,iXe,vg,EK,dXe,cXe,Vx,fXe,mXe,gXe,Tg,CK,hXe,pXe,Xx,_Xe,uXe,bXe,Mg,wK,FXe,vXe,zx,TXe,MXe,EXe,Eg,AK,CXe,wXe,Qx,AXe,yXe,LXe,Cg,yK,xXe,kXe,Wx,SXe,RXe,BXe,wg,LK,PXe,$Xe,Hx,IXe,qXe,NXe,Ag,xK,jXe,DXe,Ux,GXe,OXe,VXe,yg,kK,XXe,zXe,Jx,QXe,WXe,HXe,Lg,SK,UXe,JXe,Yx,YXe,KXe,ZXe,xg,RK,eze,oze,Kx,rze,tze,aze,kg,BK,nze,sze,Zx,lze,ize,dze,Sg,PK,cze,fze,ek,mze,gze,hze,Rg,$K,pze,_ze,ok,uze,bze,Fze,Bg,IK,vze,Tze,rk,Mze,Eze,Cze,Pg,qK,wze,Aze,tk,yze,Lze,xze,NK,kze,Sze,wC,Rze,$g,AC,Bze,jK,Pze,DSe,Qi,Ig,DK,yC,$ze,GK,Ize,GSe,Wo,LC,qze,xC,Nze,ak,jze,Dze,Gze,kC,Oze,OK,Vze,Xze,zze,go,SC,Qze,VK,Wze,Hze,Oa,Uze,XK,Jze,Yze,zK,Kze,Zze,QK,eQe,oQe,rQe,E,Qn,WK,tQe,aQe,nk,nQe,sQe,sk,lQe,iQe,dQe,Wn,HK,cQe,fQe,lk,mQe,gQe,ik,hQe,pQe,_Qe,Hn,UK,uQe,bQe,dk,FQe,vQe,ck,TQe,MQe,EQe,qg,JK,CQe,wQe,fk,AQe,yQe,LQe,Un,YK,xQe,kQe,mk,SQe,RQe,gk,BQe,PQe,$Qe,Ng,KK,IQe,qQe,hk,NQe,jQe,DQe,jg,ZK,GQe,OQe,pk,VQe,XQe,zQe,Dg,eZ,QQe,WQe,_k,HQe,UQe,JQe,Jn,oZ,YQe,KQe,uk,ZQe,eWe,bk,oWe,rWe,tWe,Yn,rZ,aWe,nWe,Fk,sWe,lWe,vk,iWe,dWe,cWe,Kn,tZ,fWe,mWe,Tk,gWe,hWe,Mk,pWe,_We,uWe,Gg,aZ,bWe,FWe,Ek,vWe,TWe,MWe,Og,nZ,EWe,CWe,Ck,wWe,AWe,yWe,Zn,sZ,LWe,xWe,wk,kWe,SWe,Ak,RWe,BWe,PWe,Vg,lZ,$We,IWe,yk,qWe,NWe,jWe,es,iZ,DWe,GWe,Lk,OWe,VWe,xk,XWe,zWe,QWe,os,dZ,WWe,HWe,kk,UWe,JWe,Sk,YWe,KWe,ZWe,rs,cZ,eHe,oHe,Rk,rHe,tHe,fZ,aHe,nHe,sHe,Xg,mZ,lHe,iHe,Bk,dHe,cHe,fHe,ts,gZ,mHe,gHe,Pk,hHe,pHe,$k,_He,uHe,bHe,zg,hZ,FHe,vHe,Ik,THe,MHe,EHe,as,pZ,CHe,wHe,qk,AHe,yHe,Nk,LHe,xHe,kHe,ns,_Z,SHe,RHe,jk,BHe,PHe,Dk,$He,IHe,qHe,ss,uZ,NHe,jHe,Gk,DHe,GHe,Ok,OHe,VHe,XHe,Qg,bZ,zHe,QHe,Vk,WHe,HHe,UHe,ls,FZ,JHe,YHe,Xk,KHe,ZHe,zk,eUe,oUe,rUe,Wg,vZ,tUe,aUe,Qk,nUe,sUe,lUe,is,TZ,iUe,dUe,Wk,cUe,fUe,Hk,mUe,gUe,hUe,ds,MZ,pUe,_Ue,Uk,uUe,bUe,Jk,FUe,vUe,TUe,cs,EZ,MUe,EUe,Yk,CUe,wUe,Kk,AUe,yUe,LUe,fs,CZ,xUe,kUe,Zk,SUe,RUe,eS,BUe,PUe,$Ue,Hg,wZ,IUe,qUe,oS,NUe,jUe,DUe,ms,AZ,GUe,OUe,rS,VUe,XUe,tS,zUe,QUe,WUe,gs,yZ,HUe,UUe,aS,JUe,YUe,nS,KUe,ZUe,eJe,hs,LZ,oJe,rJe,sS,tJe,aJe,lS,nJe,sJe,lJe,ps,xZ,iJe,dJe,iS,cJe,fJe,dS,mJe,gJe,hJe,_s,kZ,pJe,_Je,cS,uJe,bJe,fS,FJe,vJe,TJe,us,SZ,MJe,EJe,mS,CJe,wJe,gS,AJe,yJe,LJe,Ug,RZ,xJe,kJe,hS,SJe,RJe,BJe,bs,BZ,PJe,$Je,pS,IJe,qJe,_S,NJe,jJe,DJe,Jg,PZ,GJe,OJe,uS,VJe,XJe,zJe,Yg,$Z,QJe,WJe,bS,HJe,UJe,JJe,Fs,IZ,YJe,KJe,FS,ZJe,eYe,vS,oYe,rYe,tYe,vs,qZ,aYe,nYe,TS,sYe,lYe,MS,iYe,dYe,cYe,Kg,NZ,fYe,mYe,ES,gYe,hYe,pYe,Ts,jZ,_Ye,uYe,CS,bYe,FYe,wS,vYe,TYe,MYe,Ms,DZ,EYe,CYe,AS,wYe,AYe,yS,yYe,LYe,xYe,Es,GZ,kYe,SYe,LS,RYe,BYe,xS,PYe,$Ye,IYe,Cs,OZ,qYe,NYe,kS,jYe,DYe,SS,GYe,OYe,VYe,ws,VZ,XYe,zYe,RS,QYe,WYe,BS,HYe,UYe,JYe,Zg,XZ,YYe,KYe,PS,ZYe,eKe,oKe,eh,zZ,rKe,tKe,$S,aKe,nKe,sKe,oh,QZ,lKe,iKe,IS,dKe,cKe,fKe,rh,WZ,mKe,gKe,qS,hKe,pKe,_Ke,As,HZ,uKe,bKe,NS,FKe,vKe,jS,TKe,MKe,EKe,th,UZ,CKe,wKe,DS,AKe,yKe,LKe,ys,JZ,xKe,kKe,GS,SKe,RKe,OS,BKe,PKe,$Ke,Ls,YZ,IKe,qKe,VS,NKe,jKe,XS,DKe,GKe,OKe,xs,KZ,VKe,XKe,zS,zKe,QKe,QS,WKe,HKe,UKe,ks,ZZ,JKe,YKe,WS,KKe,ZKe,HS,eZe,oZe,rZe,Ss,eee,tZe,aZe,US,nZe,sZe,JS,lZe,iZe,dZe,Rs,oee,cZe,fZe,YS,mZe,gZe,KS,hZe,pZe,_Ze,ah,ree,uZe,bZe,ZS,FZe,vZe,TZe,nh,tee,MZe,EZe,eR,CZe,wZe,AZe,Bs,aee,yZe,LZe,oR,xZe,kZe,rR,SZe,RZe,BZe,Ps,nee,PZe,$Ze,tR,IZe,qZe,aR,NZe,jZe,DZe,$s,see,GZe,OZe,nR,VZe,XZe,sR,zZe,QZe,WZe,sh,lee,HZe,UZe,lR,JZe,YZe,KZe,lh,iee,ZZe,eeo,iR,oeo,reo,teo,ih,dee,aeo,neo,dR,seo,leo,ieo,dh,cee,deo,ceo,cR,feo,meo,geo,ch,fee,heo,peo,fR,_eo,ueo,beo,Is,mee,Feo,veo,mR,Teo,Meo,gR,Eeo,Ceo,weo,fh,gee,Aeo,yeo,hR,Leo,xeo,keo,mh,hee,Seo,Reo,pR,Beo,Peo,$eo,qs,pee,Ieo,qeo,_R,Neo,jeo,uR,Deo,Geo,Oeo,Ns,_ee,Veo,Xeo,bR,zeo,Qeo,FR,Weo,Heo,Ueo,uee,Jeo,Yeo,RC,Keo,gh,BC,Zeo,bee,eoo,OSe,Wi,hh,Fee,PC,ooo,vee,roo,VSe,Ho,$C,too,IC,aoo,vR,noo,soo,loo,qC,ioo,Tee,doo,coo,foo,$e,NC,moo,Mee,goo,hoo,Va,poo,Eee,_oo,uoo,Cee,boo,Foo,wee,voo,Too,Moo,te,ph,Aee,Eoo,Coo,TR,woo,Aoo,yoo,_h,yee,Loo,xoo,MR,koo,Soo,Roo,uh,Lee,Boo,Poo,ER,$oo,Ioo,qoo,bh,xee,Noo,joo,CR,Doo,Goo,Ooo,Fh,kee,Voo,Xoo,wR,zoo,Qoo,Woo,vh,See,Hoo,Uoo,AR,Joo,Yoo,Koo,Th,Ree,Zoo,ero,yR,oro,rro,tro,Mh,Bee,aro,nro,LR,sro,lro,iro,Eh,Pee,dro,cro,xR,fro,mro,gro,Ch,$ee,hro,pro,kR,_ro,uro,bro,wh,Iee,Fro,vro,SR,Tro,Mro,Ero,Ah,qee,Cro,wro,RR,Aro,yro,Lro,yh,Nee,xro,kro,BR,Sro,Rro,Bro,Lh,jee,Pro,$ro,PR,Iro,qro,Nro,xh,Dee,jro,Dro,$R,Gro,Oro,Vro,kh,Gee,Xro,zro,IR,Qro,Wro,Hro,Sh,Oee,Uro,Jro,qR,Yro,Kro,Zro,Rh,Vee,eto,oto,NR,rto,tto,ato,Bh,nto,Xee,sto,lto,jC,ito,Ph,DC,dto,zee,cto,XSe,Hi,$h,Qee,GC,fto,Wee,mto,zSe,Uo,OC,gto,VC,hto,jR,pto,_to,uto,XC,bto,Hee,Fto,vto,Tto,Ie,zC,Mto,Uee,Eto,Cto,Ui,wto,Jee,Ato,yto,Yee,Lto,xto,kto,ke,Ih,Kee,Sto,Rto,DR,Bto,Pto,$to,qh,Zee,Ito,qto,GR,Nto,jto,Dto,Nh,eoe,Gto,Oto,OR,Vto,Xto,zto,jh,ooe,Qto,Wto,VR,Hto,Uto,Jto,Dh,roe,Yto,Kto,XR,Zto,eao,oao,Gh,toe,rao,tao,zR,aao,nao,sao,Oh,aoe,lao,iao,QR,dao,cao,fao,Vh,noe,mao,gao,WR,hao,pao,_ao,Xh,uao,soe,bao,Fao,QC,vao,zh,WC,Tao,loe,Mao,QSe,Ji,Qh,ioe,HC,Eao,doe,Cao,WSe,Jo,UC,wao,Yi,Aao,HR,yao,Lao,UR,xao,kao,Sao,JC,Rao,coe,Bao,Pao,$ao,Xr,YC,Iao,foe,qao,Nao,Ki,jao,moe,Dao,Gao,JR,Oao,Vao,Xao,goe,zao,Qao,KC,Wao,qe,ZC,Hao,hoe,Uao,Jao,Xa,Yao,poe,Kao,Zao,_oe,eno,ono,uoe,rno,tno,ano,T,Wh,boe,nno,sno,YR,lno,ino,dno,Hh,Foe,cno,fno,KR,mno,gno,hno,Uh,voe,pno,_no,ZR,uno,bno,Fno,Jh,Toe,vno,Tno,eB,Mno,Eno,Cno,Yh,Moe,wno,Ano,oB,yno,Lno,xno,Kh,Eoe,kno,Sno,rB,Rno,Bno,Pno,Zh,Coe,$no,Ino,tB,qno,Nno,jno,ep,woe,Dno,Gno,aB,Ono,Vno,Xno,op,Aoe,zno,Qno,nB,Wno,Hno,Uno,rp,yoe,Jno,Yno,sB,Kno,Zno,eso,tp,Loe,oso,rso,lB,tso,aso,nso,ap,xoe,sso,lso,iB,iso,dso,cso,np,koe,fso,mso,dB,gso,hso,pso,sp,Soe,_so,uso,cB,bso,Fso,vso,lp,Roe,Tso,Mso,fB,Eso,Cso,wso,ip,Boe,Aso,yso,mB,Lso,xso,kso,dp,Poe,Sso,Rso,gB,Bso,Pso,$so,cp,$oe,Iso,qso,hB,Nso,jso,Dso,fp,Ioe,Gso,Oso,pB,Vso,Xso,zso,mp,qoe,Qso,Wso,_B,Hso,Uso,Jso,gp,Noe,Yso,Kso,uB,Zso,elo,olo,hp,joe,rlo,tlo,bB,alo,nlo,slo,pp,Doe,llo,ilo,FB,dlo,clo,flo,_p,Goe,mlo,glo,vB,hlo,plo,_lo,up,Ooe,ulo,blo,TB,Flo,vlo,Tlo,bp,Voe,Mlo,Elo,MB,Clo,wlo,Alo,Fp,Xoe,ylo,Llo,EB,xlo,klo,Slo,vp,zoe,Rlo,Blo,CB,Plo,$lo,Ilo,Tp,Qoe,qlo,Nlo,wB,jlo,Dlo,Glo,js,Woe,Olo,Vlo,AB,Xlo,zlo,yB,Qlo,Wlo,Hlo,Mp,Hoe,Ulo,Jlo,LB,Ylo,Klo,Zlo,Ep,Uoe,eio,oio,xB,rio,tio,aio,Cp,Joe,nio,sio,kB,lio,iio,dio,wp,Yoe,cio,fio,SB,mio,gio,hio,Ap,Koe,pio,_io,RB,uio,bio,Fio,yp,Zoe,vio,Tio,BB,Mio,Eio,Cio,Lp,ere,wio,Aio,PB,yio,Lio,xio,xp,ore,kio,Sio,$B,Rio,Bio,Pio,kp,rre,$io,Iio,IB,qio,Nio,jio,Sp,tre,Dio,Gio,qB,Oio,Vio,Xio,Rp,are,zio,Qio,NB,Wio,Hio,Uio,Bp,nre,Jio,Yio,jB,Kio,Zio,edo,Pp,sre,odo,rdo,DB,tdo,ado,ndo,$p,lre,sdo,ldo,GB,ido,ddo,cdo,Ip,ire,fdo,mdo,OB,gdo,hdo,pdo,qp,dre,_do,udo,VB,bdo,Fdo,vdo,Np,cre,Tdo,Mdo,XB,Edo,Cdo,wdo,jp,fre,Ado,ydo,zB,Ldo,xdo,kdo,Dp,mre,Sdo,Rdo,QB,Bdo,Pdo,$do,Gp,gre,Ido,qdo,WB,Ndo,jdo,Ddo,Op,hre,Gdo,Odo,HB,Vdo,Xdo,zdo,Vp,pre,Qdo,Wdo,UB,Hdo,Udo,Jdo,Xp,_re,Ydo,Kdo,JB,Zdo,eco,oco,zp,ure,rco,tco,YB,aco,nco,sco,Qp,bre,lco,ico,KB,dco,cco,fco,Wp,Fre,mco,gco,ZB,hco,pco,_co,Hp,vre,uco,bco,eP,Fco,vco,Tco,Up,Tre,Mco,Eco,oP,Cco,wco,Aco,Jp,Mre,yco,Lco,rP,xco,kco,Sco,Yp,Ere,Rco,Bco,tP,Pco,$co,Ico,Kp,Cre,qco,Nco,aP,jco,Dco,Gco,Zp,wre,Oco,Vco,nP,Xco,zco,Qco,e_,Are,Wco,Hco,sP,Uco,Jco,Yco,o_,yre,Kco,Zco,lP,efo,ofo,rfo,r_,Lre,tfo,afo,iP,nfo,sfo,lfo,t_,xre,ifo,dfo,dP,cfo,ffo,mfo,a_,kre,gfo,hfo,cP,pfo,_fo,ufo,n_,Sre,bfo,Ffo,fP,vfo,Tfo,Mfo,s_,Rre,Efo,Cfo,mP,wfo,Afo,yfo,l_,Bre,Lfo,xfo,gP,kfo,Sfo,Rfo,i_,Pre,Bfo,Pfo,hP,$fo,Ifo,qfo,d_,$re,Nfo,jfo,pP,Dfo,Gfo,Ofo,c_,Ire,Vfo,Xfo,_P,zfo,Qfo,Wfo,f_,qre,Hfo,Ufo,uP,Jfo,Yfo,Kfo,m_,Nre,Zfo,emo,bP,omo,rmo,tmo,g_,jre,amo,nmo,FP,smo,lmo,imo,h_,Dre,dmo,cmo,vP,fmo,mmo,gmo,p_,Gre,hmo,pmo,TP,_mo,umo,bmo,__,Ore,Fmo,vmo,MP,Tmo,Mmo,Emo,u_,Vre,Cmo,wmo,EP,Amo,ymo,Lmo,b_,Xre,xmo,kmo,CP,Smo,Rmo,Bmo,F_,zre,Pmo,$mo,wP,Imo,qmo,Nmo,v_,Qre,jmo,Dmo,AP,Gmo,Omo,Vmo,T_,Wre,Xmo,zmo,yP,Qmo,Wmo,Hmo,M_,Hre,Umo,Jmo,LP,Ymo,Kmo,Zmo,E_,Ure,ego,ogo,xP,rgo,tgo,ago,C_,Jre,ngo,sgo,kP,lgo,igo,dgo,w_,Yre,cgo,fgo,SP,mgo,ggo,hgo,A_,Kre,pgo,_go,RP,ugo,bgo,Fgo,y_,Zre,vgo,Tgo,BP,Mgo,Ego,Cgo,L_,ete,wgo,Ago,PP,ygo,Lgo,xgo,x_,ote,kgo,Sgo,$P,Rgo,Bgo,Pgo,k_,$go,rte,Igo,qgo,tte,Ngo,jgo,ate,Dgo,Ggo,e5,HSe,Zi,S_,nte,o5,Ogo,ste,Vgo,USe,Yo,r5,Xgo,ed,zgo,IP,Qgo,Wgo,qP,Hgo,Ugo,Jgo,t5,Ygo,lte,Kgo,Zgo,eho,zr,a5,oho,ite,rho,tho,od,aho,dte,nho,sho,NP,lho,iho,dho,cte,cho,fho,n5,mho,Ne,s5,gho,fte,hho,pho,za,_ho,mte,uho,bho,gte,Fho,vho,hte,Tho,Mho,Eho,S,R_,pte,Cho,who,jP,Aho,yho,Lho,B_,_te,xho,kho,DP,Sho,Rho,Bho,P_,ute,Pho,$ho,GP,Iho,qho,Nho,$_,bte,jho,Dho,OP,Gho,Oho,Vho,I_,Fte,Xho,zho,VP,Qho,Who,Hho,q_,vte,Uho,Jho,XP,Yho,Kho,Zho,N_,Tte,epo,opo,zP,rpo,tpo,apo,j_,Mte,npo,spo,QP,lpo,ipo,dpo,D_,Ete,cpo,fpo,WP,mpo,gpo,hpo,G_,Cte,ppo,_po,HP,upo,bpo,Fpo,O_,wte,vpo,Tpo,UP,Mpo,Epo,Cpo,V_,Ate,wpo,Apo,JP,ypo,Lpo,xpo,X_,yte,kpo,Spo,YP,Rpo,Bpo,Ppo,z_,Lte,$po,Ipo,KP,qpo,Npo,jpo,Q_,xte,Dpo,Gpo,ZP,Opo,Vpo,Xpo,W_,kte,zpo,Qpo,e$,Wpo,Hpo,Upo,H_,Ste,Jpo,Ypo,o$,Kpo,Zpo,e_o,U_,Rte,o_o,r_o,r$,t_o,a_o,n_o,J_,Bte,s_o,l_o,t$,i_o,d_o,c_o,Y_,Pte,f_o,m_o,a$,g_o,h_o,p_o,K_,$te,__o,u_o,n$,b_o,F_o,v_o,Z_,Ite,T_o,M_o,s$,E_o,C_o,w_o,eu,qte,A_o,y_o,l$,L_o,x_o,k_o,ou,Nte,S_o,R_o,i$,B_o,P_o,$_o,ru,jte,I_o,q_o,d$,N_o,j_o,D_o,tu,Dte,G_o,O_o,c$,V_o,X_o,z_o,au,Gte,Q_o,W_o,f$,H_o,U_o,J_o,nu,Ote,Y_o,K_o,m$,Z_o,euo,ouo,su,Vte,ruo,tuo,g$,auo,nuo,suo,lu,Xte,luo,iuo,h$,duo,cuo,fuo,iu,zte,muo,guo,p$,huo,puo,_uo,du,Qte,uuo,buo,_$,Fuo,vuo,Tuo,cu,Wte,Muo,Euo,u$,Cuo,wuo,Auo,fu,Hte,yuo,Luo,b$,xuo,kuo,Suo,mu,Ute,Ruo,Buo,F$,Puo,$uo,Iuo,gu,Jte,quo,Nuo,v$,juo,Duo,Guo,hu,Yte,Ouo,Vuo,T$,Xuo,zuo,Quo,pu,Kte,Wuo,Huo,M$,Uuo,Juo,Yuo,_u,Zte,Kuo,Zuo,E$,e1o,o1o,r1o,uu,t1o,eae,a1o,n1o,oae,s1o,l1o,rae,i1o,d1o,l5,JSe,rd,bu,tae,i5,c1o,aae,f1o,YSe,Ko,d5,m1o,td,g1o,C$,h1o,p1o,w$,_1o,u1o,b1o,c5,F1o,nae,v1o,T1o,M1o,Qr,f5,E1o,sae,C1o,w1o,ad,A1o,lae,y1o,L1o,A$,x1o,k1o,S1o,iae,R1o,B1o,m5,P1o,je,g5,$1o,dae,I1o,q1o,Qa,N1o,cae,j1o,D1o,fae,G1o,O1o,mae,V1o,X1o,z1o,$,Fu,gae,Q1o,W1o,y$,H1o,U1o,J1o,vu,hae,Y1o,K1o,L$,Z1o,e4o,o4o,Tu,pae,r4o,t4o,x$,a4o,n4o,s4o,Mu,_ae,l4o,i4o,k$,d4o,c4o,f4o,Eu,uae,m4o,g4o,S$,h4o,p4o,_4o,Cu,bae,u4o,b4o,R$,F4o,v4o,T4o,wu,Fae,M4o,E4o,B$,C4o,w4o,A4o,Au,vae,y4o,L4o,P$,x4o,k4o,S4o,yu,Tae,R4o,B4o,$$,P4o,$4o,I4o,Lu,Mae,q4o,N4o,I$,j4o,D4o,G4o,xu,Eae,O4o,V4o,q$,X4o,z4o,Q4o,ku,Cae,W4o,H4o,N$,U4o,J4o,Y4o,Su,wae,K4o,Z4o,j$,ebo,obo,rbo,Ru,Aae,tbo,abo,D$,nbo,sbo,lbo,Bu,yae,ibo,dbo,G$,cbo,fbo,mbo,Pu,Lae,gbo,hbo,O$,pbo,_bo,ubo,$u,xae,bbo,Fbo,V$,vbo,Tbo,Mbo,Iu,kae,Ebo,Cbo,X$,wbo,Abo,ybo,qu,Sae,Lbo,xbo,z$,kbo,Sbo,Rbo,Nu,Rae,Bbo,Pbo,Q$,$bo,Ibo,qbo,ju,Bae,Nbo,jbo,W$,Dbo,Gbo,Obo,Du,Pae,Vbo,Xbo,H$,zbo,Qbo,Wbo,Gu,$ae,Hbo,Ubo,U$,Jbo,Ybo,Kbo,Ou,Iae,Zbo,e3o,J$,o3o,r3o,t3o,Vu,qae,a3o,n3o,Y$,s3o,l3o,i3o,Xu,Nae,d3o,c3o,K$,f3o,m3o,g3o,zu,jae,h3o,p3o,Z$,_3o,u3o,b3o,Qu,Dae,F3o,v3o,eI,T3o,M3o,E3o,Wu,Gae,C3o,w3o,oI,A3o,y3o,L3o,Hu,Oae,x3o,k3o,rI,S3o,R3o,B3o,Uu,Vae,P3o,$3o,tI,I3o,q3o,N3o,Ju,Xae,j3o,D3o,aI,G3o,O3o,V3o,Yu,zae,X3o,z3o,nI,Q3o,W3o,H3o,Ku,Qae,U3o,J3o,sI,Y3o,K3o,Z3o,Zu,Wae,e2o,o2o,lI,r2o,t2o,a2o,e1,n2o,Hae,s2o,l2o,Uae,i2o,d2o,Jae,c2o,f2o,h5,KSe,nd,o1,Yae,p5,m2o,Kae,g2o,ZSe,Zo,_5,h2o,sd,p2o,iI,_2o,u2o,dI,b2o,F2o,v2o,u5,T2o,Zae,M2o,E2o,C2o,Wr,b5,w2o,ene,A2o,y2o,ld,L2o,one,x2o,k2o,cI,S2o,R2o,B2o,rne,P2o,$2o,F5,I2o,De,v5,q2o,tne,N2o,j2o,Wa,D2o,ane,G2o,O2o,nne,V2o,X2o,sne,z2o,Q2o,W2o,I,r1,lne,H2o,U2o,fI,J2o,Y2o,K2o,t1,ine,Z2o,eFo,mI,oFo,rFo,tFo,a1,dne,aFo,nFo,gI,sFo,lFo,iFo,n1,cne,dFo,cFo,hI,fFo,mFo,gFo,s1,fne,hFo,pFo,pI,_Fo,uFo,bFo,l1,mne,FFo,vFo,_I,TFo,MFo,EFo,i1,gne,CFo,wFo,uI,AFo,yFo,LFo,d1,hne,xFo,kFo,bI,SFo,RFo,BFo,c1,pne,PFo,$Fo,FI,IFo,qFo,NFo,f1,_ne,jFo,DFo,vI,GFo,OFo,VFo,m1,une,XFo,zFo,TI,QFo,WFo,HFo,g1,bne,UFo,JFo,MI,YFo,KFo,ZFo,h1,Fne,evo,ovo,EI,rvo,tvo,avo,p1,vne,nvo,svo,CI,lvo,ivo,dvo,_1,Tne,cvo,fvo,wI,mvo,gvo,hvo,u1,Mne,pvo,_vo,AI,uvo,bvo,Fvo,b1,Ene,vvo,Tvo,yI,Mvo,Evo,Cvo,F1,Cne,wvo,Avo,LI,yvo,Lvo,xvo,v1,wne,kvo,Svo,xI,Rvo,Bvo,Pvo,T1,Ane,$vo,Ivo,kI,qvo,Nvo,jvo,M1,yne,Dvo,Gvo,SI,Ovo,Vvo,Xvo,E1,Lne,zvo,Qvo,RI,Wvo,Hvo,Uvo,C1,xne,Jvo,Yvo,BI,Kvo,Zvo,e6o,w1,kne,o6o,r6o,PI,t6o,a6o,n6o,A1,Sne,s6o,l6o,$I,i6o,d6o,c6o,y1,Rne,f6o,m6o,II,g6o,h6o,p6o,L1,Bne,_6o,u6o,qI,b6o,F6o,v6o,x1,Pne,T6o,M6o,NI,E6o,C6o,w6o,k1,$ne,A6o,y6o,jI,L6o,x6o,k6o,S1,Ine,S6o,R6o,DI,B6o,P6o,$6o,R1,qne,I6o,q6o,Nne,N6o,j6o,D6o,B1,jne,G6o,O6o,GI,V6o,X6o,z6o,P1,Dne,Q6o,W6o,OI,H6o,U6o,J6o,$1,Gne,Y6o,K6o,VI,Z6o,eTo,oTo,I1,One,rTo,tTo,XI,aTo,nTo,sTo,q1,lTo,Vne,iTo,dTo,Xne,cTo,fTo,zne,mTo,gTo,T5,eRe,id,N1,Qne,M5,hTo,Wne,pTo,oRe,er,E5,_To,dd,uTo,zI,bTo,FTo,QI,vTo,TTo,MTo,C5,ETo,Hne,CTo,wTo,ATo,Hr,w5,yTo,Une,LTo,xTo,cd,kTo,Jne,STo,RTo,WI,BTo,PTo,$To,Yne,ITo,qTo,A5,NTo,Ge,y5,jTo,Kne,DTo,GTo,Ha,OTo,Zne,VTo,XTo,ese,zTo,QTo,ose,WTo,HTo,UTo,se,j1,rse,JTo,YTo,HI,KTo,ZTo,e7o,D1,tse,o7o,r7o,UI,t7o,a7o,n7o,G1,ase,s7o,l7o,JI,i7o,d7o,c7o,O1,nse,f7o,m7o,YI,g7o,h7o,p7o,V1,sse,_7o,u7o,KI,b7o,F7o,v7o,X1,lse,T7o,M7o,ZI,E7o,C7o,w7o,z1,ise,A7o,y7o,eq,L7o,x7o,k7o,Q1,dse,S7o,R7o,oq,B7o,P7o,$7o,W1,cse,I7o,q7o,rq,N7o,j7o,D7o,H1,fse,G7o,O7o,tq,V7o,X7o,z7o,U1,mse,Q7o,W7o,aq,H7o,U7o,J7o,J1,gse,Y7o,K7o,nq,Z7o,eMo,oMo,Y1,hse,rMo,tMo,sq,aMo,nMo,sMo,K1,pse,lMo,iMo,lq,dMo,cMo,fMo,Z1,_se,mMo,gMo,iq,hMo,pMo,_Mo,e4,use,uMo,bMo,dq,FMo,vMo,TMo,o4,MMo,bse,EMo,CMo,Fse,wMo,AMo,vse,yMo,LMo,L5,rRe,fd,r4,Tse,x5,xMo,Mse,kMo,tRe,or,k5,SMo,md,RMo,cq,BMo,PMo,fq,$Mo,IMo,qMo,S5,NMo,Ese,jMo,DMo,GMo,Ur,R5,OMo,Cse,VMo,XMo,gd,zMo,wse,QMo,WMo,mq,HMo,UMo,JMo,Ase,YMo,KMo,B5,ZMo,Oe,P5,eEo,yse,oEo,rEo,Ua,tEo,Lse,aEo,nEo,xse,sEo,lEo,kse,iEo,dEo,cEo,y,t4,Sse,fEo,mEo,gq,gEo,hEo,pEo,a4,Rse,_Eo,uEo,hq,bEo,FEo,vEo,n4,Bse,TEo,MEo,pq,EEo,CEo,wEo,s4,Pse,AEo,yEo,_q,LEo,xEo,kEo,l4,$se,SEo,REo,uq,BEo,PEo,$Eo,i4,Ise,IEo,qEo,bq,NEo,jEo,DEo,d4,qse,GEo,OEo,Fq,VEo,XEo,zEo,c4,Nse,QEo,WEo,vq,HEo,UEo,JEo,f4,jse,YEo,KEo,Tq,ZEo,eCo,oCo,m4,Dse,rCo,tCo,Mq,aCo,nCo,sCo,g4,Gse,lCo,iCo,Eq,dCo,cCo,fCo,h4,Ose,mCo,gCo,Cq,hCo,pCo,_Co,p4,Vse,uCo,bCo,wq,FCo,vCo,TCo,_4,Xse,MCo,ECo,Aq,CCo,wCo,ACo,u4,zse,yCo,LCo,yq,xCo,kCo,SCo,b4,Qse,RCo,BCo,Lq,PCo,$Co,ICo,F4,Wse,qCo,NCo,xq,jCo,DCo,GCo,v4,Hse,OCo,VCo,kq,XCo,zCo,QCo,T4,Use,WCo,HCo,Sq,UCo,JCo,YCo,M4,Jse,KCo,ZCo,Rq,e5o,o5o,r5o,E4,Yse,t5o,a5o,Bq,n5o,s5o,l5o,C4,Kse,i5o,d5o,Pq,c5o,f5o,m5o,w4,Zse,g5o,h5o,$q,p5o,_5o,u5o,A4,ele,b5o,F5o,Iq,v5o,T5o,M5o,y4,ole,E5o,C5o,qq,w5o,A5o,y5o,L4,rle,L5o,x5o,Nq,k5o,S5o,R5o,x4,tle,B5o,P5o,jq,$5o,I5o,q5o,k4,ale,N5o,j5o,Dq,D5o,G5o,O5o,S4,nle,V5o,X5o,Gq,z5o,Q5o,W5o,R4,sle,H5o,U5o,Oq,J5o,Y5o,K5o,B4,lle,Z5o,ewo,Vq,owo,rwo,two,P4,ile,awo,nwo,Xq,swo,lwo,iwo,$4,dle,dwo,cwo,zq,fwo,mwo,gwo,I4,cle,hwo,pwo,Qq,_wo,uwo,bwo,q4,fle,Fwo,vwo,Wq,Two,Mwo,Ewo,N4,mle,Cwo,wwo,Hq,Awo,ywo,Lwo,j4,gle,xwo,kwo,Uq,Swo,Rwo,Bwo,D4,hle,Pwo,$wo,Jq,Iwo,qwo,Nwo,G4,ple,jwo,Dwo,Yq,Gwo,Owo,Vwo,O4,_le,Xwo,zwo,Kq,Qwo,Wwo,Hwo,V4,ule,Uwo,Jwo,Zq,Ywo,Kwo,Zwo,X4,ble,eAo,oAo,eN,rAo,tAo,aAo,z4,Fle,nAo,sAo,oN,lAo,iAo,dAo,Q4,vle,cAo,fAo,rN,mAo,gAo,hAo,W4,Tle,pAo,_Ao,tN,uAo,bAo,FAo,H4,Mle,vAo,TAo,aN,MAo,EAo,CAo,U4,wAo,Ele,AAo,yAo,Cle,LAo,xAo,wle,kAo,SAo,$5,aRe,hd,J4,Ale,I5,RAo,yle,BAo,nRe,rr,q5,PAo,pd,$Ao,nN,IAo,qAo,sN,NAo,jAo,DAo,N5,GAo,Lle,OAo,VAo,XAo,Jr,j5,zAo,xle,QAo,WAo,_d,HAo,kle,UAo,JAo,lN,YAo,KAo,ZAo,Sle,e0o,o0o,D5,r0o,Ve,G5,t0o,Rle,a0o,n0o,Ja,s0o,Ble,l0o,i0o,Ple,d0o,c0o,$le,f0o,m0o,g0o,G,Y4,Ile,h0o,p0o,iN,_0o,u0o,b0o,K4,qle,F0o,v0o,dN,T0o,M0o,E0o,Z4,Nle,C0o,w0o,cN,A0o,y0o,L0o,eb,jle,x0o,k0o,fN,S0o,R0o,B0o,ob,Dle,P0o,$0o,mN,I0o,q0o,N0o,rb,Gle,j0o,D0o,gN,G0o,O0o,V0o,tb,Ole,X0o,z0o,hN,Q0o,W0o,H0o,ab,Vle,U0o,J0o,pN,Y0o,K0o,Z0o,nb,Xle,eyo,oyo,_N,ryo,tyo,ayo,sb,zle,nyo,syo,uN,lyo,iyo,dyo,lb,Qle,cyo,fyo,bN,myo,gyo,hyo,ib,Wle,pyo,_yo,FN,uyo,byo,Fyo,db,Hle,vyo,Tyo,vN,Myo,Eyo,Cyo,cb,Ule,wyo,Ayo,TN,yyo,Lyo,xyo,fb,Jle,kyo,Syo,MN,Ryo,Byo,Pyo,mb,Yle,$yo,Iyo,EN,qyo,Nyo,jyo,gb,Kle,Dyo,Gyo,CN,Oyo,Vyo,Xyo,hb,Zle,zyo,Qyo,wN,Wyo,Hyo,Uyo,pb,eie,Jyo,Yyo,AN,Kyo,Zyo,eLo,_b,oie,oLo,rLo,yN,tLo,aLo,nLo,ub,rie,sLo,lLo,LN,iLo,dLo,cLo,bb,tie,fLo,mLo,xN,gLo,hLo,pLo,Fb,aie,_Lo,uLo,kN,bLo,FLo,vLo,vb,nie,TLo,MLo,SN,ELo,CLo,wLo,Tb,sie,ALo,yLo,RN,LLo,xLo,kLo,Mb,lie,SLo,RLo,BN,BLo,PLo,$Lo,Eb,iie,ILo,qLo,PN,NLo,jLo,DLo,Cb,die,GLo,OLo,$N,VLo,XLo,zLo,wb,QLo,cie,WLo,HLo,fie,ULo,JLo,mie,YLo,KLo,O5,sRe,ud,Ab,gie,V5,ZLo,hie,e8o,lRe,tr,X5,o8o,bd,r8o,IN,t8o,a8o,qN,n8o,s8o,l8o,z5,i8o,pie,d8o,c8o,f8o,Yr,Q5,m8o,_ie,g8o,h8o,Fd,p8o,uie,_8o,u8o,NN,b8o,F8o,v8o,bie,T8o,M8o,W5,E8o,Xe,H5,C8o,Fie,w8o,A8o,Ya,y8o,vie,L8o,x8o,Tie,k8o,S8o,Mie,R8o,B8o,P8o,da,yb,Eie,$8o,I8o,jN,q8o,N8o,j8o,Lb,Cie,D8o,G8o,DN,O8o,V8o,X8o,xb,wie,z8o,Q8o,GN,W8o,H8o,U8o,kb,Aie,J8o,Y8o,ON,K8o,Z8o,e9o,Sb,yie,o9o,r9o,VN,t9o,a9o,n9o,Rb,s9o,Lie,l9o,i9o,xie,d9o,c9o,kie,f9o,m9o,U5,iRe,vd,Bb,Sie,J5,g9o,Rie,h9o,dRe,ar,Y5,p9o,Td,_9o,XN,u9o,b9o,zN,F9o,v9o,T9o,K5,M9o,Bie,E9o,C9o,w9o,Kr,Z5,A9o,Pie,y9o,L9o,Md,x9o,$ie,k9o,S9o,QN,R9o,B9o,P9o,Iie,$9o,I9o,ew,q9o,ze,ow,N9o,qie,j9o,D9o,Ka,G9o,Nie,O9o,V9o,jie,X9o,z9o,Die,Q9o,W9o,H9o,j,Pb,Gie,U9o,J9o,WN,Y9o,K9o,Z9o,$b,Oie,exo,oxo,HN,rxo,txo,axo,Ib,Vie,nxo,sxo,UN,lxo,ixo,dxo,qb,Xie,cxo,fxo,JN,mxo,gxo,hxo,Nb,zie,pxo,_xo,YN,uxo,bxo,Fxo,jb,Qie,vxo,Txo,KN,Mxo,Exo,Cxo,Db,Wie,wxo,Axo,ZN,yxo,Lxo,xxo,Gb,Hie,kxo,Sxo,ej,Rxo,Bxo,Pxo,Ob,Uie,$xo,Ixo,oj,qxo,Nxo,jxo,Vb,Jie,Dxo,Gxo,rj,Oxo,Vxo,Xxo,Xb,Yie,zxo,Qxo,tj,Wxo,Hxo,Uxo,zb,Kie,Jxo,Yxo,aj,Kxo,Zxo,eko,Qb,Zie,oko,rko,nj,tko,ako,nko,Wb,ede,sko,lko,sj,iko,dko,cko,Hb,ode,fko,mko,lj,gko,hko,pko,Ub,rde,_ko,uko,ij,bko,Fko,vko,Jb,tde,Tko,Mko,dj,Eko,Cko,wko,Yb,ade,Ako,yko,cj,Lko,xko,kko,Kb,nde,Sko,Rko,fj,Bko,Pko,$ko,Zb,sde,Iko,qko,mj,Nko,jko,Dko,e3,lde,Gko,Oko,gj,Vko,Xko,zko,o3,ide,Qko,Wko,hj,Hko,Uko,Jko,r3,dde,Yko,Kko,pj,Zko,eSo,oSo,t3,cde,rSo,tSo,_j,aSo,nSo,sSo,a3,fde,lSo,iSo,uj,dSo,cSo,fSo,n3,mde,mSo,gSo,bj,hSo,pSo,_So,s3,gde,uSo,bSo,Fj,FSo,vSo,TSo,l3,hde,MSo,ESo,vj,CSo,wSo,ASo,i3,pde,ySo,LSo,Tj,xSo,kSo,SSo,d3,_de,RSo,BSo,Mj,PSo,$So,ISo,c3,ude,qSo,NSo,Ej,jSo,DSo,GSo,f3,bde,OSo,VSo,Cj,XSo,zSo,QSo,m3,Fde,WSo,HSo,wj,USo,JSo,YSo,g3,KSo,vde,ZSo,eRo,Tde,oRo,rRo,Mde,tRo,aRo,rw,cRe,Ed,h3,Ede,tw,nRo,Cde,sRo,fRe,nr,aw,lRo,Cd,iRo,Aj,dRo,cRo,yj,fRo,mRo,gRo,nw,hRo,wde,pRo,_Ro,uRo,Zr,sw,bRo,Ade,FRo,vRo,wd,TRo,yde,MRo,ERo,Lj,CRo,wRo,ARo,Lde,yRo,LRo,lw,xRo,Qe,iw,kRo,xde,SRo,RRo,Za,BRo,kde,PRo,$Ro,Sde,IRo,qRo,Rde,NRo,jRo,DRo,R,p3,Bde,GRo,ORo,xj,VRo,XRo,zRo,_3,Pde,QRo,WRo,kj,HRo,URo,JRo,u3,$de,YRo,KRo,Sj,ZRo,eBo,oBo,b3,Ide,rBo,tBo,Rj,aBo,nBo,sBo,F3,qde,lBo,iBo,Bj,dBo,cBo,fBo,v3,Nde,mBo,gBo,Pj,hBo,pBo,_Bo,T3,jde,uBo,bBo,$j,FBo,vBo,TBo,M3,Dde,MBo,EBo,Ij,CBo,wBo,ABo,E3,Gde,yBo,LBo,qj,xBo,kBo,SBo,C3,Ode,RBo,BBo,Nj,PBo,$Bo,IBo,w3,Vde,qBo,NBo,jj,jBo,DBo,GBo,A3,Xde,OBo,VBo,Dj,XBo,zBo,QBo,y3,zde,WBo,HBo,Gj,UBo,JBo,YBo,L3,Qde,KBo,ZBo,Oj,ePo,oPo,rPo,x3,Wde,tPo,aPo,Vj,nPo,sPo,lPo,k3,Hde,iPo,dPo,Xj,cPo,fPo,mPo,S3,Ude,gPo,hPo,zj,pPo,_Po,uPo,R3,Jde,bPo,FPo,Qj,vPo,TPo,MPo,B3,Yde,EPo,CPo,Wj,wPo,APo,yPo,P3,Kde,LPo,xPo,Hj,kPo,SPo,RPo,$3,Zde,BPo,PPo,Uj,$Po,IPo,qPo,I3,ece,NPo,jPo,Jj,DPo,GPo,OPo,q3,oce,VPo,XPo,Yj,zPo,QPo,WPo,N3,rce,HPo,UPo,Kj,JPo,YPo,KPo,j3,tce,ZPo,e$o,Zj,o$o,r$o,t$o,D3,ace,a$o,n$o,eD,s$o,l$o,i$o,G3,nce,d$o,c$o,oD,f$o,m$o,g$o,O3,sce,h$o,p$o,rD,_$o,u$o,b$o,V3,lce,F$o,v$o,tD,T$o,M$o,E$o,X3,ice,C$o,w$o,aD,A$o,y$o,L$o,z3,dce,x$o,k$o,nD,S$o,R$o,B$o,Q3,cce,P$o,$$o,sD,I$o,q$o,N$o,W3,fce,j$o,D$o,lD,G$o,O$o,V$o,H3,mce,X$o,z$o,iD,Q$o,W$o,H$o,U3,gce,U$o,J$o,dD,Y$o,K$o,Z$o,J3,hce,eIo,oIo,cD,rIo,tIo,aIo,Y3,pce,nIo,sIo,fD,lIo,iIo,dIo,K3,_ce,cIo,fIo,mD,mIo,gIo,hIo,Z3,uce,pIo,_Io,gD,uIo,bIo,FIo,e2,vIo,bce,TIo,MIo,Fce,EIo,CIo,vce,wIo,AIo,dw,mRe,Ad,o2,Tce,cw,yIo,Mce,LIo,gRe,sr,fw,xIo,yd,kIo,hD,SIo,RIo,pD,BIo,PIo,$Io,mw,IIo,Ece,qIo,NIo,jIo,et,gw,DIo,Cce,GIo,OIo,Ld,VIo,wce,XIo,zIo,_D,QIo,WIo,HIo,Ace,UIo,JIo,hw,YIo,We,pw,KIo,yce,ZIo,eqo,en,oqo,Lce,rqo,tqo,xce,aqo,nqo,kce,sqo,lqo,iqo,Sce,r2,Rce,dqo,cqo,uD,fqo,mqo,gqo,t2,hqo,Bce,pqo,_qo,Pce,uqo,bqo,$ce,Fqo,vqo,_w,hRe,xd,a2,Ice,uw,Tqo,qce,Mqo,pRe,lr,bw,Eqo,kd,Cqo,bD,wqo,Aqo,FD,yqo,Lqo,xqo,Fw,kqo,Nce,Sqo,Rqo,Bqo,ot,vw,Pqo,jce,$qo,Iqo,Sd,qqo,Dce,Nqo,jqo,vD,Dqo,Gqo,Oqo,Gce,Vqo,Xqo,Tw,zqo,He,Mw,Qqo,Oce,Wqo,Hqo,on,Uqo,Vce,Jqo,Yqo,Xce,Kqo,Zqo,zce,eNo,oNo,rNo,ge,n2,Qce,tNo,aNo,TD,nNo,sNo,lNo,s2,Wce,iNo,dNo,MD,cNo,fNo,mNo,Ds,Hce,gNo,hNo,ED,pNo,_No,CD,uNo,bNo,FNo,l2,Uce,vNo,TNo,wD,MNo,ENo,CNo,ma,Jce,wNo,ANo,AD,yNo,LNo,yD,xNo,kNo,LD,SNo,RNo,BNo,i2,Yce,PNo,$No,xD,INo,qNo,NNo,d2,Kce,jNo,DNo,kD,GNo,ONo,VNo,c2,Zce,XNo,zNo,SD,QNo,WNo,HNo,f2,efe,UNo,JNo,RD,YNo,KNo,ZNo,m2,ofe,ejo,ojo,BD,rjo,tjo,ajo,g2,rfe,njo,sjo,PD,ljo,ijo,djo,h2,cjo,tfe,fjo,mjo,afe,gjo,hjo,nfe,pjo,_jo,Ew,_Re,Rd,p2,sfe,Cw,ujo,lfe,bjo,uRe,ir,ww,Fjo,Bd,vjo,$D,Tjo,Mjo,ID,Ejo,Cjo,wjo,Aw,Ajo,ife,yjo,Ljo,xjo,rt,yw,kjo,dfe,Sjo,Rjo,Pd,Bjo,cfe,Pjo,$jo,qD,Ijo,qjo,Njo,ffe,jjo,Djo,Lw,Gjo,Ue,xw,Ojo,mfe,Vjo,Xjo,rn,zjo,gfe,Qjo,Wjo,hfe,Hjo,Ujo,pfe,Jjo,Yjo,Kjo,_fe,_2,ufe,Zjo,eDo,ND,oDo,rDo,tDo,u2,aDo,bfe,nDo,sDo,Ffe,lDo,iDo,vfe,dDo,cDo,kw,bRe,$d,b2,Tfe,Sw,fDo,Mfe,mDo,FRe,dr,Rw,gDo,Id,hDo,jD,pDo,_Do,DD,uDo,bDo,FDo,Bw,vDo,Efe,TDo,MDo,EDo,tt,Pw,CDo,Cfe,wDo,ADo,qd,yDo,wfe,LDo,xDo,GD,kDo,SDo,RDo,Afe,BDo,PDo,$w,$Do,Je,Iw,IDo,yfe,qDo,NDo,tn,jDo,Lfe,DDo,GDo,xfe,ODo,VDo,kfe,XDo,zDo,QDo,Se,F2,Sfe,WDo,HDo,OD,UDo,JDo,YDo,v2,Rfe,KDo,ZDo,VD,eGo,oGo,rGo,T2,Bfe,tGo,aGo,XD,nGo,sGo,lGo,M2,Pfe,iGo,dGo,zD,cGo,fGo,mGo,E2,$fe,gGo,hGo,QD,pGo,_Go,uGo,C2,Ife,bGo,FGo,WD,vGo,TGo,MGo,w2,qfe,EGo,CGo,HD,wGo,AGo,yGo,A2,Nfe,LGo,xGo,UD,kGo,SGo,RGo,y2,BGo,jfe,PGo,$Go,Dfe,IGo,qGo,Gfe,NGo,jGo,qw,vRe,Nd,L2,Ofe,Nw,DGo,Vfe,GGo,TRe,cr,jw,OGo,jd,VGo,JD,XGo,zGo,YD,QGo,WGo,HGo,Dw,UGo,Xfe,JGo,YGo,KGo,at,Gw,ZGo,zfe,eOo,oOo,Dd,rOo,Qfe,tOo,aOo,KD,nOo,sOo,lOo,Wfe,iOo,dOo,Ow,cOo,Ye,Vw,fOo,Hfe,mOo,gOo,an,hOo,Ufe,pOo,_Oo,Jfe,uOo,bOo,Yfe,FOo,vOo,TOo,nn,x2,Kfe,MOo,EOo,ZD,COo,wOo,AOo,k2,Zfe,yOo,LOo,eG,xOo,kOo,SOo,S2,eme,ROo,BOo,oG,POo,$Oo,IOo,R2,ome,qOo,NOo,rG,jOo,DOo,GOo,B2,OOo,rme,VOo,XOo,tme,zOo,QOo,ame,WOo,HOo,Xw,MRe,Gd,P2,nme,zw,UOo,sme,JOo,ERe,fr,Qw,YOo,Od,KOo,tG,ZOo,eVo,aG,oVo,rVo,tVo,Ww,aVo,lme,nVo,sVo,lVo,nt,Hw,iVo,ime,dVo,cVo,Vd,fVo,dme,mVo,gVo,nG,hVo,pVo,_Vo,cme,uVo,bVo,Uw,FVo,Ke,Jw,vVo,fme,TVo,MVo,sn,EVo,mme,CVo,wVo,gme,AVo,yVo,hme,LVo,xVo,kVo,Re,$2,pme,SVo,RVo,sG,BVo,PVo,$Vo,I2,_me,IVo,qVo,lG,NVo,jVo,DVo,q2,ume,GVo,OVo,iG,VVo,XVo,zVo,N2,bme,QVo,WVo,dG,HVo,UVo,JVo,j2,Fme,YVo,KVo,cG,ZVo,eXo,oXo,D2,vme,rXo,tXo,fG,aXo,nXo,sXo,G2,Tme,lXo,iXo,mG,dXo,cXo,fXo,O2,Mme,mXo,gXo,gG,hXo,pXo,_Xo,V2,uXo,Eme,bXo,FXo,Cme,vXo,TXo,wme,MXo,EXo,Yw,CRe,Xd,X2,Ame,Kw,CXo,yme,wXo,wRe,mr,Zw,AXo,zd,yXo,hG,LXo,xXo,pG,kXo,SXo,RXo,eA,BXo,Lme,PXo,$Xo,IXo,st,oA,qXo,xme,NXo,jXo,Qd,DXo,kme,GXo,OXo,_G,VXo,XXo,zXo,Sme,QXo,WXo,rA,HXo,Ze,tA,UXo,Rme,JXo,YXo,ln,KXo,Bme,ZXo,ezo,Pme,ozo,rzo,$me,tzo,azo,nzo,aA,z2,Ime,szo,lzo,uG,izo,dzo,czo,Q2,qme,fzo,mzo,bG,gzo,hzo,pzo,W2,_zo,Nme,uzo,bzo,jme,Fzo,vzo,Dme,Tzo,Mzo,nA,ARe,Wd,H2,Gme,sA,Ezo,Ome,Czo,yRe,gr,lA,wzo,Hd,Azo,FG,yzo,Lzo,vG,xzo,kzo,Szo,iA,Rzo,Vme,Bzo,Pzo,$zo,lt,dA,Izo,Xme,qzo,Nzo,Ud,jzo,zme,Dzo,Gzo,TG,Ozo,Vzo,Xzo,Qme,zzo,Qzo,cA,Wzo,eo,fA,Hzo,Wme,Uzo,Jzo,dn,Yzo,Hme,Kzo,Zzo,Ume,eQo,oQo,Jme,rQo,tQo,aQo,cn,U2,Yme,nQo,sQo,MG,lQo,iQo,dQo,J2,Kme,cQo,fQo,EG,mQo,gQo,hQo,Y2,Zme,pQo,_Qo,CG,uQo,bQo,FQo,K2,ege,vQo,TQo,wG,MQo,EQo,CQo,Z2,wQo,oge,AQo,yQo,rge,LQo,xQo,tge,kQo,SQo,mA,LRe,Jd,eF,age,gA,RQo,nge,BQo,xRe,hr,hA,PQo,Yd,$Qo,AG,IQo,qQo,yG,NQo,jQo,DQo,pA,GQo,sge,OQo,VQo,XQo,it,_A,zQo,lge,QQo,WQo,Kd,HQo,ige,UQo,JQo,LG,YQo,KQo,ZQo,dge,eWo,oWo,uA,rWo,oo,bA,tWo,cge,aWo,nWo,fn,sWo,fge,lWo,iWo,mge,dWo,cWo,gge,fWo,mWo,gWo,Zd,oF,hge,hWo,pWo,xG,_Wo,uWo,bWo,rF,pge,FWo,vWo,kG,TWo,MWo,EWo,tF,_ge,CWo,wWo,SG,AWo,yWo,LWo,aF,xWo,uge,kWo,SWo,bge,RWo,BWo,Fge,PWo,$Wo,FA,kRe,ec,nF,vge,vA,IWo,Tge,qWo,SRe,pr,TA,NWo,oc,jWo,RG,DWo,GWo,BG,OWo,VWo,XWo,MA,zWo,Mge,QWo,WWo,HWo,dt,EA,UWo,Ege,JWo,YWo,rc,KWo,Cge,ZWo,eHo,PG,oHo,rHo,tHo,wge,aHo,nHo,CA,sHo,ro,wA,lHo,Age,iHo,dHo,mn,cHo,yge,fHo,mHo,Lge,gHo,hHo,xge,pHo,_Ho,uHo,kge,sF,Sge,bHo,FHo,$G,vHo,THo,MHo,lF,EHo,Rge,CHo,wHo,Bge,AHo,yHo,Pge,LHo,xHo,AA,RRe,tc,iF,$ge,yA,kHo,Ige,SHo,BRe,_r,LA,RHo,ac,BHo,IG,PHo,$Ho,qG,IHo,qHo,NHo,xA,jHo,qge,DHo,GHo,OHo,ct,kA,VHo,Nge,XHo,zHo,nc,QHo,jge,WHo,HHo,NG,UHo,JHo,YHo,Dge,KHo,ZHo,SA,eUo,to,RA,oUo,Gge,rUo,tUo,gn,aUo,Oge,nUo,sUo,Vge,lUo,iUo,Xge,dUo,cUo,fUo,zge,dF,Qge,mUo,gUo,jG,hUo,pUo,_Uo,cF,uUo,Wge,bUo,FUo,Hge,vUo,TUo,Uge,MUo,EUo,BA,PRe,sc,fF,Jge,PA,CUo,Yge,wUo,$Re,ur,$A,AUo,lc,yUo,DG,LUo,xUo,GG,kUo,SUo,RUo,IA,BUo,Kge,PUo,$Uo,IUo,ft,qA,qUo,Zge,NUo,jUo,ic,DUo,ehe,GUo,OUo,OG,VUo,XUo,zUo,ohe,QUo,WUo,NA,HUo,ao,jA,UUo,rhe,JUo,YUo,hn,KUo,the,ZUo,eJo,ahe,oJo,rJo,nhe,tJo,aJo,nJo,dc,mF,she,sJo,lJo,VG,iJo,dJo,cJo,gF,lhe,fJo,mJo,XG,gJo,hJo,pJo,hF,ihe,_Jo,uJo,zG,bJo,FJo,vJo,pF,TJo,dhe,MJo,EJo,che,CJo,wJo,fhe,AJo,yJo,DA,IRe,cc,_F,mhe,GA,LJo,ghe,xJo,qRe,br,OA,kJo,fc,SJo,QG,RJo,BJo,WG,PJo,$Jo,IJo,VA,qJo,hhe,NJo,jJo,DJo,mt,XA,GJo,phe,OJo,VJo,mc,XJo,_he,zJo,QJo,HG,WJo,HJo,UJo,uhe,JJo,YJo,zA,KJo,no,QA,ZJo,bhe,eYo,oYo,pn,rYo,Fhe,tYo,aYo,vhe,nYo,sYo,The,lYo,iYo,dYo,Mhe,uF,Ehe,cYo,fYo,UG,mYo,gYo,hYo,bF,pYo,Che,_Yo,uYo,whe,bYo,FYo,Ahe,vYo,TYo,WA,NRe,gc,FF,yhe,HA,MYo,Lhe,EYo,jRe,Fr,UA,CYo,hc,wYo,JG,AYo,yYo,YG,LYo,xYo,kYo,JA,SYo,xhe,RYo,BYo,PYo,gt,YA,$Yo,khe,IYo,qYo,pc,NYo,She,jYo,DYo,KG,GYo,OYo,VYo,Rhe,XYo,zYo,KA,QYo,ho,ZA,WYo,Bhe,HYo,UYo,_n,JYo,Phe,YYo,KYo,$he,ZYo,eKo,Ihe,oKo,rKo,tKo,x,vF,qhe,aKo,nKo,ZG,sKo,lKo,iKo,TF,Nhe,dKo,cKo,eO,fKo,mKo,gKo,MF,jhe,hKo,pKo,oO,_Ko,uKo,bKo,EF,Dhe,FKo,vKo,rO,TKo,MKo,EKo,CF,Ghe,CKo,wKo,tO,AKo,yKo,LKo,wF,Ohe,xKo,kKo,aO,SKo,RKo,BKo,AF,Vhe,PKo,$Ko,nO,IKo,qKo,NKo,yF,Xhe,jKo,DKo,sO,GKo,OKo,VKo,LF,zhe,XKo,zKo,lO,QKo,WKo,HKo,xF,Qhe,UKo,JKo,iO,YKo,KKo,ZKo,kF,Whe,eZo,oZo,dO,rZo,tZo,aZo,SF,Hhe,nZo,sZo,cO,lZo,iZo,dZo,RF,Uhe,cZo,fZo,fO,mZo,gZo,hZo,BF,Jhe,pZo,_Zo,mO,uZo,bZo,FZo,PF,Yhe,vZo,TZo,gO,MZo,EZo,CZo,$F,Khe,wZo,AZo,hO,yZo,LZo,xZo,Gs,Zhe,kZo,SZo,pO,RZo,BZo,_O,PZo,$Zo,IZo,IF,epe,qZo,NZo,uO,jZo,DZo,GZo,qF,ope,OZo,VZo,bO,XZo,zZo,QZo,NF,rpe,WZo,HZo,FO,UZo,JZo,YZo,jF,tpe,KZo,ZZo,vO,eer,oer,rer,DF,ape,ter,aer,TO,ner,ser,ler,GF,npe,ier,der,MO,cer,fer,mer,OF,spe,ger,her,EO,per,_er,uer,VF,lpe,ber,Fer,CO,ver,Ter,Mer,XF,ipe,Eer,Cer,wO,wer,Aer,yer,zF,dpe,Ler,xer,AO,ker,Ser,Rer,QF,cpe,Ber,Per,yO,$er,Ier,qer,WF,fpe,Ner,jer,LO,Der,Ger,Oer,HF,mpe,Ver,Xer,xO,zer,Qer,Wer,UF,gpe,Her,Uer,kO,Jer,Yer,Ker,JF,hpe,Zer,eor,SO,oor,ror,tor,YF,ppe,aor,nor,RO,sor,lor,ior,KF,_pe,dor,cor,BO,mor,gor,hor,ZF,upe,por,_or,PO,uor,bor,For,ev,bpe,vor,Tor,$O,Mor,Eor,Cor,ov,Fpe,wor,Aor,IO,yor,Lor,xor,rv,vpe,kor,Sor,qO,Ror,Bor,Por,tv,Tpe,$or,Ior,NO,qor,Nor,jor,av,Mpe,Dor,Gor,jO,Oor,Vor,Xor,nv,Epe,zor,Qor,DO,Wor,Hor,Uor,sv,Cpe,Jor,Yor,GO,Kor,Zor,err,lv,wpe,orr,rrr,OO,trr,arr,nrr,Ape,srr,lrr,e0,DRe,_c,iv,ype,o0,irr,Lpe,drr,GRe,vr,r0,crr,uc,frr,VO,mrr,grr,XO,hrr,prr,_rr,t0,urr,xpe,brr,Frr,vrr,ht,a0,Trr,kpe,Mrr,Err,bc,Crr,Spe,wrr,Arr,zO,yrr,Lrr,xrr,Rpe,krr,Srr,n0,Rrr,po,s0,Brr,Bpe,Prr,$rr,un,Irr,Ppe,qrr,Nrr,$pe,jrr,Drr,Ipe,Grr,Orr,Vrr,H,dv,qpe,Xrr,zrr,QO,Qrr,Wrr,Hrr,cv,Npe,Urr,Jrr,WO,Yrr,Krr,Zrr,fv,jpe,etr,otr,HO,rtr,ttr,atr,mv,Dpe,ntr,str,UO,ltr,itr,dtr,gv,Gpe,ctr,ftr,JO,mtr,gtr,htr,hv,Ope,ptr,_tr,YO,utr,btr,Ftr,pv,Vpe,vtr,Ttr,KO,Mtr,Etr,Ctr,_v,Xpe,wtr,Atr,ZO,ytr,Ltr,xtr,uv,zpe,ktr,Str,eV,Rtr,Btr,Ptr,bv,Qpe,$tr,Itr,oV,qtr,Ntr,jtr,Fv,Wpe,Dtr,Gtr,rV,Otr,Vtr,Xtr,vv,Hpe,ztr,Qtr,tV,Wtr,Htr,Utr,Tv,Upe,Jtr,Ytr,aV,Ktr,Ztr,ear,Mv,Jpe,oar,rar,nV,tar,aar,nar,Ev,Ype,sar,lar,sV,iar,dar,car,Cv,Kpe,far,mar,lV,gar,har,par,wv,Zpe,_ar,uar,iV,bar,Far,Tar,Av,e_e,Mar,Ear,dV,Car,war,Aar,yv,o_e,yar,Lar,cV,xar,kar,Sar,Lv,r_e,Rar,Bar,fV,Par,$ar,Iar,xv,t_e,qar,Nar,mV,jar,Dar,Gar,kv,a_e,Oar,Var,gV,Xar,zar,Qar,n_e,War,Har,l0,ORe,Fc,Sv,s_e,i0,Uar,l_e,Jar,VRe,Tr,d0,Yar,vc,Kar,hV,Zar,enr,pV,onr,rnr,tnr,c0,anr,i_e,nnr,snr,lnr,pt,f0,inr,d_e,dnr,cnr,Tc,fnr,c_e,mnr,gnr,_V,hnr,pnr,_nr,f_e,unr,bnr,m0,Fnr,_o,g0,vnr,m_e,Tnr,Mnr,bn,Enr,g_e,Cnr,wnr,h_e,Anr,ynr,p_e,Lnr,xnr,knr,ce,Rv,__e,Snr,Rnr,uV,Bnr,Pnr,$nr,Bv,u_e,Inr,qnr,bV,Nnr,jnr,Dnr,Pv,b_e,Gnr,Onr,FV,Vnr,Xnr,znr,$v,F_e,Qnr,Wnr,vV,Hnr,Unr,Jnr,Iv,v_e,Ynr,Knr,TV,Znr,esr,osr,qv,T_e,rsr,tsr,MV,asr,nsr,ssr,Nv,M_e,lsr,isr,EV,dsr,csr,fsr,jv,E_e,msr,gsr,CV,hsr,psr,_sr,Dv,C_e,usr,bsr,wV,Fsr,vsr,Tsr,Gv,w_e,Msr,Esr,AV,Csr,wsr,Asr,Ov,A_e,ysr,Lsr,yV,xsr,ksr,Ssr,Vv,y_e,Rsr,Bsr,LV,Psr,$sr,Isr,L_e,qsr,Nsr,h0,XRe,Mc,Xv,x_e,p0,jsr,k_e,Dsr,zRe,Mr,_0,Gsr,Ec,Osr,xV,Vsr,Xsr,kV,zsr,Qsr,Wsr,u0,Hsr,S_e,Usr,Jsr,Ysr,_t,b0,Ksr,R_e,Zsr,elr,Cc,olr,B_e,rlr,tlr,SV,alr,nlr,slr,P_e,llr,ilr,F0,dlr,uo,v0,clr,$_e,flr,mlr,Fn,glr,I_e,hlr,plr,q_e,_lr,ulr,N_e,blr,Flr,vlr,T0,zv,j_e,Tlr,Mlr,RV,Elr,Clr,wlr,Qv,D_e,Alr,ylr,BV,Llr,xlr,klr,G_e,Slr,Rlr,M0,QRe,wc,Wv,O_e,E0,Blr,V_e,Plr,WRe,Er,C0,$lr,Ac,Ilr,PV,qlr,Nlr,$V,jlr,Dlr,Glr,w0,Olr,X_e,Vlr,Xlr,zlr,ut,A0,Qlr,z_e,Wlr,Hlr,yc,Ulr,Q_e,Jlr,Ylr,IV,Klr,Zlr,eir,W_e,oir,rir,y0,tir,bo,L0,air,H_e,nir,sir,vn,lir,U_e,iir,dir,J_e,cir,fir,Y_e,mir,gir,hir,J,Hv,K_e,pir,_ir,qV,uir,bir,Fir,Uv,Z_e,vir,Tir,NV,Mir,Eir,Cir,Jv,eue,wir,Air,jV,yir,Lir,xir,Yv,oue,kir,Sir,DV,Rir,Bir,Pir,Kv,rue,$ir,Iir,GV,qir,Nir,jir,Zv,tue,Dir,Gir,OV,Oir,Vir,Xir,e6,aue,zir,Qir,VV,Wir,Hir,Uir,o6,nue,Jir,Yir,XV,Kir,Zir,edr,r6,sue,odr,rdr,zV,tdr,adr,ndr,t6,lue,sdr,ldr,QV,idr,ddr,cdr,a6,iue,fdr,mdr,WV,gdr,hdr,pdr,n6,due,_dr,udr,HV,bdr,Fdr,vdr,s6,cue,Tdr,Mdr,UV,Edr,Cdr,wdr,l6,fue,Adr,ydr,JV,Ldr,xdr,kdr,i6,mue,Sdr,Rdr,YV,Bdr,Pdr,$dr,d6,gue,Idr,qdr,KV,Ndr,jdr,Ddr,c6,hue,Gdr,Odr,ZV,Vdr,Xdr,zdr,f6,pue,Qdr,Wdr,eX,Hdr,Udr,Jdr,m6,_ue,Ydr,Kdr,oX,Zdr,ecr,ocr,g6,uue,rcr,tcr,rX,acr,ncr,scr,bue,lcr,icr,x0,HRe,Lc,h6,Fue,k0,dcr,vue,ccr,URe,Cr,S0,fcr,xc,mcr,tX,gcr,hcr,aX,pcr,_cr,ucr,R0,bcr,Tue,Fcr,vcr,Tcr,bt,B0,Mcr,Mue,Ecr,Ccr,kc,wcr,Eue,Acr,ycr,nX,Lcr,xcr,kcr,Cue,Scr,Rcr,P0,Bcr,Fo,$0,Pcr,wue,$cr,Icr,Tn,qcr,Aue,Ncr,jcr,yue,Dcr,Gcr,Lue,Ocr,Vcr,Xcr,ue,p6,xue,zcr,Qcr,sX,Wcr,Hcr,Ucr,_6,kue,Jcr,Ycr,lX,Kcr,Zcr,efr,u6,Sue,ofr,rfr,iX,tfr,afr,nfr,b6,Rue,sfr,lfr,dX,ifr,dfr,cfr,F6,Bue,ffr,mfr,cX,gfr,hfr,pfr,v6,Pue,_fr,ufr,fX,bfr,Ffr,vfr,T6,$ue,Tfr,Mfr,mX,Efr,Cfr,wfr,M6,Iue,Afr,yfr,gX,Lfr,xfr,kfr,E6,que,Sfr,Rfr,hX,Bfr,Pfr,$fr,C6,Nue,Ifr,qfr,pX,Nfr,jfr,Dfr,jue,Gfr,Ofr,I0,JRe,Sc,w6,Due,q0,Vfr,Gue,Xfr,YRe,wr,N0,zfr,Rc,Qfr,_X,Wfr,Hfr,uX,Ufr,Jfr,Yfr,j0,Kfr,Oue,Zfr,emr,omr,Ft,D0,rmr,Vue,tmr,amr,Bc,nmr,Xue,smr,lmr,bX,imr,dmr,cmr,zue,fmr,mmr,G0,gmr,vo,O0,hmr,Que,pmr,_mr,Mn,umr,Wue,bmr,Fmr,Hue,vmr,Tmr,Uue,Mmr,Emr,Cmr,V,A6,Jue,wmr,Amr,FX,ymr,Lmr,xmr,y6,Yue,kmr,Smr,vX,Rmr,Bmr,Pmr,L6,Kue,$mr,Imr,TX,qmr,Nmr,jmr,x6,Zue,Dmr,Gmr,MX,Omr,Vmr,Xmr,k6,e1e,zmr,Qmr,EX,Wmr,Hmr,Umr,S6,o1e,Jmr,Ymr,CX,Kmr,Zmr,egr,R6,r1e,ogr,rgr,wX,tgr,agr,ngr,B6,t1e,sgr,lgr,AX,igr,dgr,cgr,P6,a1e,fgr,mgr,yX,ggr,hgr,pgr,$6,n1e,_gr,ugr,LX,bgr,Fgr,vgr,I6,s1e,Tgr,Mgr,xX,Egr,Cgr,wgr,q6,l1e,Agr,ygr,kX,Lgr,xgr,kgr,N6,i1e,Sgr,Rgr,SX,Bgr,Pgr,$gr,j6,d1e,Igr,qgr,RX,Ngr,jgr,Dgr,D6,c1e,Ggr,Ogr,BX,Vgr,Xgr,zgr,G6,f1e,Qgr,Wgr,PX,Hgr,Ugr,Jgr,O6,m1e,Ygr,Kgr,$X,Zgr,ehr,ohr,V6,g1e,rhr,thr,IX,ahr,nhr,shr,X6,h1e,lhr,ihr,qX,dhr,chr,fhr,z6,p1e,mhr,ghr,NX,hhr,phr,_hr,Q6,_1e,uhr,bhr,jX,Fhr,vhr,Thr,W6,u1e,Mhr,Ehr,DX,Chr,whr,Ahr,H6,b1e,yhr,Lhr,GX,xhr,khr,Shr,U6,F1e,Rhr,Bhr,OX,Phr,$hr,Ihr,J6,v1e,qhr,Nhr,VX,jhr,Dhr,Ghr,Y6,T1e,Ohr,Vhr,XX,Xhr,zhr,Qhr,M1e,Whr,Hhr,V0,KRe,Pc,K6,E1e,X0,Uhr,C1e,Jhr,ZRe,Ar,z0,Yhr,$c,Khr,zX,Zhr,epr,QX,opr,rpr,tpr,Q0,apr,w1e,npr,spr,lpr,vt,W0,ipr,A1e,dpr,cpr,Ic,fpr,y1e,mpr,gpr,WX,hpr,ppr,_pr,L1e,upr,bpr,H0,Fpr,To,U0,vpr,x1e,Tpr,Mpr,En,Epr,k1e,Cpr,wpr,S1e,Apr,ypr,R1e,Lpr,xpr,kpr,ae,Z6,B1e,Spr,Rpr,HX,Bpr,Ppr,$pr,eT,P1e,Ipr,qpr,UX,Npr,jpr,Dpr,oT,$1e,Gpr,Opr,JX,Vpr,Xpr,zpr,rT,I1e,Qpr,Wpr,YX,Hpr,Upr,Jpr,tT,q1e,Ypr,Kpr,KX,Zpr,e_r,o_r,aT,N1e,r_r,t_r,ZX,a_r,n_r,s_r,nT,j1e,l_r,i_r,ez,d_r,c_r,f_r,sT,D1e,m_r,g_r,oz,h_r,p_r,__r,lT,G1e,u_r,b_r,rz,F_r,v_r,T_r,iT,O1e,M_r,E_r,tz,C_r,w_r,A_r,dT,V1e,y_r,L_r,az,x_r,k_r,S_r,cT,X1e,R_r,B_r,nz,P_r,$_r,I_r,fT,z1e,q_r,N_r,sz,j_r,D_r,G_r,mT,Q1e,O_r,V_r,lz,X_r,z_r,Q_r,gT,W1e,W_r,H_r,iz,U_r,J_r,Y_r,hT,H1e,K_r,Z_r,dz,eur,our,rur,pT,U1e,tur,aur,cz,nur,sur,lur,J1e,iur,dur,J0,eBe,qc,_T,Y1e,Y0,cur,K1e,fur,oBe,yr,K0,mur,Nc,gur,fz,hur,pur,mz,_ur,uur,bur,Z0,Fur,Z1e,vur,Tur,Mur,Tt,ey,Eur,e4e,Cur,wur,jc,Aur,o4e,yur,Lur,gz,xur,kur,Sur,r4e,Rur,Bur,oy,Pur,Mo,ry,$ur,t4e,Iur,qur,Cn,Nur,a4e,jur,Dur,n4e,Gur,Our,s4e,Vur,Xur,zur,l4e,uT,i4e,Qur,Wur,hz,Hur,Uur,Jur,d4e,Yur,Kur,ty,rBe,Dc,bT,c4e,ay,Zur,f4e,e1r,tBe,Lr,ny,o1r,Gc,r1r,pz,t1r,a1r,_z,n1r,s1r,l1r,sy,i1r,m4e,d1r,c1r,f1r,Mt,ly,m1r,g4e,g1r,h1r,Oc,p1r,h4e,_1r,u1r,uz,b1r,F1r,v1r,p4e,T1r,M1r,iy,E1r,Eo,dy,C1r,_4e,w1r,A1r,wn,y1r,u4e,L1r,x1r,b4e,k1r,S1r,F4e,R1r,B1r,P1r,Y,FT,v4e,$1r,I1r,bz,q1r,N1r,j1r,vT,T4e,D1r,G1r,Fz,O1r,V1r,X1r,TT,M4e,z1r,Q1r,vz,W1r,H1r,U1r,MT,E4e,J1r,Y1r,Tz,K1r,Z1r,e4r,ET,C4e,o4r,r4r,Mz,t4r,a4r,n4r,CT,w4e,s4r,l4r,Ez,i4r,d4r,c4r,wT,A4e,f4r,m4r,Cz,g4r,h4r,p4r,AT,y4e,_4r,u4r,wz,b4r,F4r,v4r,yT,L4e,T4r,M4r,Az,E4r,C4r,w4r,LT,x4e,A4r,y4r,yz,L4r,x4r,k4r,xT,k4e,S4r,R4r,Lz,B4r,P4r,$4r,kT,S4e,I4r,q4r,xz,N4r,j4r,D4r,ST,R4e,G4r,O4r,kz,V4r,X4r,z4r,RT,B4e,Q4r,W4r,Sz,H4r,U4r,J4r,BT,P4e,Y4r,K4r,Rz,Z4r,ebr,obr,PT,$4e,rbr,tbr,Bz,abr,nbr,sbr,$T,I4e,lbr,ibr,Pz,dbr,cbr,fbr,IT,q4e,mbr,gbr,$z,hbr,pbr,_br,qT,N4e,ubr,bbr,Iz,Fbr,vbr,Tbr,NT,j4e,Mbr,Ebr,qz,Cbr,wbr,Abr,D4e,ybr,Lbr,cy,aBe,Vc,jT,G4e,fy,xbr,O4e,kbr,nBe,xr,my,Sbr,Xc,Rbr,Nz,Bbr,Pbr,jz,$br,Ibr,qbr,gy,Nbr,V4e,jbr,Dbr,Gbr,Et,hy,Obr,X4e,Vbr,Xbr,zc,zbr,z4e,Qbr,Wbr,Dz,Hbr,Ubr,Jbr,Q4e,Ybr,Kbr,py,Zbr,Co,_y,e3r,W4e,o3r,r3r,An,t3r,H4e,a3r,n3r,U4e,s3r,l3r,J4e,i3r,d3r,c3r,K,DT,Y4e,f3r,m3r,Gz,g3r,h3r,p3r,GT,K4e,_3r,u3r,Oz,b3r,F3r,v3r,OT,Z4e,T3r,M3r,Vz,E3r,C3r,w3r,VT,ebe,A3r,y3r,Xz,L3r,x3r,k3r,XT,obe,S3r,R3r,zz,B3r,P3r,$3r,zT,rbe,I3r,q3r,Qz,N3r,j3r,D3r,QT,tbe,G3r,O3r,Wz,V3r,X3r,z3r,WT,abe,Q3r,W3r,Hz,H3r,U3r,J3r,HT,nbe,Y3r,K3r,Uz,Z3r,e2r,o2r,UT,sbe,r2r,t2r,Jz,a2r,n2r,s2r,JT,lbe,l2r,i2r,Yz,d2r,c2r,f2r,YT,ibe,m2r,g2r,Kz,h2r,p2r,_2r,KT,dbe,u2r,b2r,Zz,F2r,v2r,T2r,ZT,cbe,M2r,E2r,eQ,C2r,w2r,A2r,e7,fbe,y2r,L2r,oQ,x2r,k2r,S2r,o7,mbe,R2r,B2r,rQ,P2r,$2r,I2r,r7,gbe,q2r,N2r,tQ,j2r,D2r,G2r,t7,hbe,O2r,V2r,aQ,X2r,z2r,Q2r,a7,pbe,W2r,H2r,nQ,U2r,J2r,Y2r,n7,_be,K2r,Z2r,sQ,eFr,oFr,rFr,ube,tFr,aFr,uy,sBe,Qc,s7,bbe,by,nFr,Fbe,sFr,lBe,kr,Fy,lFr,Wc,iFr,lQ,dFr,cFr,iQ,fFr,mFr,gFr,vy,hFr,vbe,pFr,_Fr,uFr,Ct,Ty,bFr,Tbe,FFr,vFr,Hc,TFr,Mbe,MFr,EFr,dQ,CFr,wFr,AFr,Ebe,yFr,LFr,My,xFr,wo,Ey,kFr,Cbe,SFr,RFr,yn,BFr,wbe,PFr,$Fr,Abe,IFr,qFr,ybe,NFr,jFr,DFr,Lbe,l7,xbe,GFr,OFr,cQ,VFr,XFr,zFr,kbe,QFr,WFr,Cy,iBe,Uc,i7,Sbe,wy,HFr,Rbe,UFr,dBe,Sr,Ay,JFr,Jc,YFr,fQ,KFr,ZFr,mQ,evr,ovr,rvr,yy,tvr,Bbe,avr,nvr,svr,wt,Ly,lvr,Pbe,ivr,dvr,Yc,cvr,$be,fvr,mvr,gQ,gvr,hvr,pvr,Ibe,_vr,uvr,xy,bvr,Ao,ky,Fvr,qbe,vvr,Tvr,Ln,Mvr,Nbe,Evr,Cvr,jbe,wvr,Avr,Dbe,yvr,Lvr,xvr,Gbe,d7,Obe,kvr,Svr,hQ,Rvr,Bvr,Pvr,Vbe,$vr,Ivr,Sy,cBe,Kc,c7,Xbe,Ry,qvr,zbe,Nvr,fBe,Rr,By,jvr,Zc,Dvr,pQ,Gvr,Ovr,_Q,Vvr,Xvr,zvr,Py,Qvr,Qbe,Wvr,Hvr,Uvr,At,$y,Jvr,Wbe,Yvr,Kvr,ef,Zvr,Hbe,e6r,o6r,uQ,r6r,t6r,a6r,Ube,n6r,s6r,Iy,l6r,yo,qy,i6r,Jbe,d6r,c6r,xn,f6r,Ybe,m6r,g6r,Kbe,h6r,p6r,Zbe,_6r,u6r,b6r,z,f7,e3e,F6r,v6r,bQ,T6r,M6r,E6r,m7,o3e,C6r,w6r,FQ,A6r,y6r,L6r,g7,r3e,x6r,k6r,vQ,S6r,R6r,B6r,h7,t3e,P6r,$6r,TQ,I6r,q6r,N6r,p7,a3e,j6r,D6r,MQ,G6r,O6r,V6r,_7,n3e,X6r,z6r,EQ,Q6r,W6r,H6r,u7,s3e,U6r,J6r,CQ,Y6r,K6r,Z6r,b7,l3e,eTr,oTr,wQ,rTr,tTr,aTr,F7,i3e,nTr,sTr,AQ,lTr,iTr,dTr,v7,d3e,cTr,fTr,yQ,mTr,gTr,hTr,T7,c3e,pTr,_Tr,LQ,uTr,bTr,FTr,M7,f3e,vTr,TTr,xQ,MTr,ETr,CTr,E7,m3e,wTr,ATr,kQ,yTr,LTr,xTr,C7,g3e,kTr,STr,SQ,RTr,BTr,PTr,w7,h3e,$Tr,ITr,RQ,qTr,NTr,jTr,A7,p3e,DTr,GTr,BQ,OTr,VTr,XTr,y7,_3e,zTr,QTr,PQ,WTr,HTr,UTr,L7,u3e,JTr,YTr,$Q,KTr,ZTr,e7r,x7,b3e,o7r,r7r,IQ,t7r,a7r,n7r,k7,F3e,s7r,l7r,qQ,i7r,d7r,c7r,S7,v3e,f7r,m7r,NQ,g7r,h7r,p7r,R7,T3e,_7r,u7r,jQ,b7r,F7r,v7r,B7,M3e,T7r,M7r,DQ,E7r,C7r,w7r,P7,E3e,A7r,y7r,GQ,L7r,x7r,k7r,$7,C3e,S7r,R7r,OQ,B7r,P7r,$7r,w3e,I7r,q7r,Ny,mBe,of,I7,A3e,jy,N7r,y3e,j7r,gBe,Br,Dy,D7r,rf,G7r,VQ,O7r,V7r,XQ,X7r,z7r,Q7r,Gy,W7r,L3e,H7r,U7r,J7r,yt,Oy,Y7r,x3e,K7r,Z7r,tf,eMr,k3e,oMr,rMr,zQ,tMr,aMr,nMr,S3e,sMr,lMr,Vy,iMr,Lo,Xy,dMr,R3e,cMr,fMr,kn,mMr,B3e,gMr,hMr,P3e,pMr,_Mr,$3e,uMr,bMr,FMr,ca,q7,I3e,vMr,TMr,QQ,MMr,EMr,CMr,N7,q3e,wMr,AMr,WQ,yMr,LMr,xMr,j7,N3e,kMr,SMr,HQ,RMr,BMr,PMr,D7,j3e,$Mr,IMr,UQ,qMr,NMr,jMr,G7,D3e,DMr,GMr,JQ,OMr,VMr,XMr,G3e,zMr,QMr,zy,hBe,af,O7,O3e,Qy,WMr,V3e,HMr,pBe,Pr,Wy,UMr,nf,JMr,YQ,YMr,KMr,KQ,ZMr,eEr,oEr,Hy,rEr,X3e,tEr,aEr,nEr,Lt,Uy,sEr,z3e,lEr,iEr,sf,dEr,Q3e,cEr,fEr,ZQ,mEr,gEr,hEr,W3e,pEr,_Er,Jy,uEr,xo,Yy,bEr,H3e,FEr,vEr,Sn,TEr,U3e,MEr,EEr,J3e,CEr,wEr,Y3e,AEr,yEr,LEr,fe,V7,K3e,xEr,kEr,eW,SEr,REr,BEr,X7,Z3e,PEr,$Er,oW,IEr,qEr,NEr,z7,e2e,jEr,DEr,rW,GEr,OEr,VEr,Q7,o2e,XEr,zEr,tW,QEr,WEr,HEr,W7,r2e,UEr,JEr,aW,YEr,KEr,ZEr,H7,t2e,eCr,oCr,nW,rCr,tCr,aCr,U7,a2e,nCr,sCr,sW,lCr,iCr,dCr,J7,n2e,cCr,fCr,lW,mCr,gCr,hCr,Y7,s2e,pCr,_Cr,iW,uCr,bCr,FCr,K7,l2e,vCr,TCr,dW,MCr,ECr,CCr,Z7,i2e,wCr,ACr,cW,yCr,LCr,xCr,eM,d2e,kCr,SCr,fW,RCr,BCr,PCr,c2e,$Cr,ICr,Ky,_Be,lf,oM,f2e,Zy,qCr,m2e,NCr,uBe,$r,eL,jCr,df,DCr,mW,GCr,OCr,gW,VCr,XCr,zCr,oL,QCr,g2e,WCr,HCr,UCr,xt,rL,JCr,h2e,YCr,KCr,cf,ZCr,p2e,e5r,o5r,hW,r5r,t5r,a5r,_2e,n5r,s5r,tL,l5r,ko,aL,i5r,u2e,d5r,c5r,Rn,f5r,b2e,m5r,g5r,F2e,h5r,p5r,v2e,_5r,u5r,b5r,be,rM,T2e,F5r,v5r,pW,T5r,M5r,E5r,tM,M2e,C5r,w5r,_W,A5r,y5r,L5r,aM,E2e,x5r,k5r,uW,S5r,R5r,B5r,nM,C2e,P5r,$5r,bW,I5r,q5r,N5r,sM,w2e,j5r,D5r,FW,G5r,O5r,V5r,lM,A2e,X5r,z5r,vW,Q5r,W5r,H5r,iM,y2e,U5r,J5r,TW,Y5r,K5r,Z5r,dM,L2e,ewr,owr,MW,rwr,twr,awr,cM,x2e,nwr,swr,EW,lwr,iwr,dwr,fM,k2e,cwr,fwr,CW,mwr,gwr,hwr,S2e,pwr,_wr,nL,bBe,ff,mM,R2e,sL,uwr,B2e,bwr,FBe,Ir,lL,Fwr,mf,vwr,wW,Twr,Mwr,AW,Ewr,Cwr,wwr,iL,Awr,P2e,ywr,Lwr,xwr,kt,dL,kwr,$2e,Swr,Rwr,gf,Bwr,I2e,Pwr,$wr,yW,Iwr,qwr,Nwr,q2e,jwr,Dwr,cL,Gwr,So,fL,Owr,N2e,Vwr,Xwr,Bn,zwr,j2e,Qwr,Wwr,D2e,Hwr,Uwr,G2e,Jwr,Ywr,Kwr,Ee,gM,O2e,Zwr,eAr,LW,oAr,rAr,tAr,hM,V2e,aAr,nAr,xW,sAr,lAr,iAr,pM,X2e,dAr,cAr,kW,fAr,mAr,gAr,_M,z2e,hAr,pAr,SW,_Ar,uAr,bAr,uM,Q2e,FAr,vAr,RW,TAr,MAr,EAr,bM,W2e,CAr,wAr,BW,AAr,yAr,LAr,FM,H2e,xAr,kAr,PW,SAr,RAr,BAr,vM,U2e,PAr,$Ar,$W,IAr,qAr,NAr,TM,J2e,jAr,DAr,IW,GAr,OAr,VAr,Y2e,XAr,zAr,mL,vBe,hf,MM,K2e,gL,QAr,Z2e,WAr,TBe,qr,hL,HAr,pf,UAr,qW,JAr,YAr,NW,KAr,ZAr,e0r,pL,o0r,eFe,r0r,t0r,a0r,St,_L,n0r,oFe,s0r,l0r,_f,i0r,rFe,d0r,c0r,jW,f0r,m0r,g0r,tFe,h0r,p0r,uL,_0r,Ro,bL,u0r,aFe,b0r,F0r,Pn,v0r,nFe,T0r,M0r,sFe,E0r,C0r,lFe,w0r,A0r,y0r,Fe,EM,iFe,L0r,x0r,DW,k0r,S0r,R0r,CM,dFe,B0r,P0r,GW,$0r,I0r,q0r,wM,cFe,N0r,j0r,OW,D0r,G0r,O0r,AM,fFe,V0r,X0r,VW,z0r,Q0r,W0r,yM,mFe,H0r,U0r,XW,J0r,Y0r,K0r,LM,gFe,Z0r,eyr,zW,oyr,ryr,tyr,xM,hFe,ayr,nyr,QW,syr,lyr,iyr,kM,pFe,dyr,cyr,WW,fyr,myr,gyr,SM,_Fe,hyr,pyr,HW,_yr,uyr,byr,RM,uFe,Fyr,vyr,UW,Tyr,Myr,Eyr,bFe,Cyr,wyr,FL,MBe,uf,BM,FFe,vL,Ayr,vFe,yyr,EBe,Nr,TL,Lyr,bf,xyr,JW,kyr,Syr,YW,Ryr,Byr,Pyr,ML,$yr,TFe,Iyr,qyr,Nyr,Rt,EL,jyr,MFe,Dyr,Gyr,Ff,Oyr,EFe,Vyr,Xyr,KW,zyr,Qyr,Wyr,CFe,Hyr,Uyr,CL,Jyr,Bo,wL,Yyr,wFe,Kyr,Zyr,$n,eLr,AFe,oLr,rLr,yFe,tLr,aLr,LFe,nLr,sLr,lLr,ve,PM,xFe,iLr,dLr,ZW,cLr,fLr,mLr,$M,kFe,gLr,hLr,eH,pLr,_Lr,uLr,IM,SFe,bLr,FLr,oH,vLr,TLr,MLr,qM,RFe,ELr,CLr,rH,wLr,ALr,yLr,NM,BFe,LLr,xLr,tH,kLr,SLr,RLr,jM,PFe,BLr,PLr,aH,$Lr,ILr,qLr,DM,$Fe,NLr,jLr,nH,DLr,GLr,OLr,GM,IFe,VLr,XLr,sH,zLr,QLr,WLr,OM,qFe,HLr,ULr,lH,JLr,YLr,KLr,VM,NFe,ZLr,e8r,iH,o8r,r8r,t8r,jFe,a8r,n8r,AL,CBe,vf,XM,DFe,yL,s8r,GFe,l8r,wBe,jr,LL,i8r,Tf,d8r,dH,c8r,f8r,cH,m8r,g8r,h8r,xL,p8r,OFe,_8r,u8r,b8r,Bt,kL,F8r,VFe,v8r,T8r,Mf,M8r,XFe,E8r,C8r,fH,w8r,A8r,y8r,zFe,L8r,x8r,SL,k8r,Po,RL,S8r,QFe,R8r,B8r,In,P8r,WFe,$8r,I8r,HFe,q8r,N8r,UFe,j8r,D8r,G8r,Be,zM,JFe,O8r,V8r,mH,X8r,z8r,Q8r,QM,YFe,W8r,H8r,gH,U8r,J8r,Y8r,WM,KFe,K8r,Z8r,hH,e9r,o9r,r9r,HM,ZFe,t9r,a9r,pH,n9r,s9r,l9r,UM,eve,i9r,d9r,_H,c9r,f9r,m9r,JM,ove,g9r,h9r,uH,p9r,_9r,u9r,YM,rve,b9r,F9r,bH,v9r,T9r,M9r,KM,tve,E9r,C9r,FH,w9r,A9r,y9r,ave,L9r,x9r,BL,ABe,Ef,ZM,nve,PL,k9r,sve,S9r,yBe,Dr,$L,R9r,Cf,B9r,vH,P9r,$9r,TH,I9r,q9r,N9r,IL,j9r,lve,D9r,G9r,O9r,Pt,qL,V9r,ive,X9r,z9r,wf,Q9r,dve,W9r,H9r,MH,U9r,J9r,Y9r,cve,K9r,Z9r,NL,exr,$o,jL,oxr,fve,rxr,txr,qn,axr,mve,nxr,sxr,gve,lxr,ixr,hve,dxr,cxr,fxr,Pe,eE,pve,mxr,gxr,EH,hxr,pxr,_xr,oE,_ve,uxr,bxr,CH,Fxr,vxr,Txr,rE,uve,Mxr,Exr,wH,Cxr,wxr,Axr,tE,bve,yxr,Lxr,AH,xxr,kxr,Sxr,aE,Fve,Rxr,Bxr,yH,Pxr,$xr,Ixr,nE,vve,qxr,Nxr,LH,jxr,Dxr,Gxr,sE,Tve,Oxr,Vxr,xH,Xxr,zxr,Qxr,lE,Mve,Wxr,Hxr,kH,Uxr,Jxr,Yxr,Eve,Kxr,Zxr,DL,LBe,Af,iE,Cve,GL,ekr,wve,okr,xBe,Gr,OL,rkr,yf,tkr,SH,akr,nkr,RH,skr,lkr,ikr,VL,dkr,Ave,ckr,fkr,mkr,$t,XL,gkr,yve,hkr,pkr,Lf,_kr,Lve,ukr,bkr,BH,Fkr,vkr,Tkr,xve,Mkr,Ekr,zL,Ckr,Io,QL,wkr,kve,Akr,ykr,Nn,Lkr,Sve,xkr,kkr,Rve,Skr,Rkr,Bve,Bkr,Pkr,$kr,Pve,dE,$ve,Ikr,qkr,PH,Nkr,jkr,Dkr,Ive,Gkr,Okr,WL,kBe,xf,cE,qve,HL,Vkr,Nve,Xkr,SBe,Or,UL,zkr,kf,Qkr,$H,Wkr,Hkr,IH,Ukr,Jkr,Ykr,JL,Kkr,jve,Zkr,eSr,oSr,It,YL,rSr,Dve,tSr,aSr,Sf,nSr,Gve,sSr,lSr,qH,iSr,dSr,cSr,Ove,fSr,mSr,KL,gSr,qo,ZL,hSr,Vve,pSr,_Sr,jn,uSr,Xve,bSr,FSr,zve,vSr,TSr,Qve,MSr,ESr,CSr,e8,fE,Wve,wSr,ASr,NH,ySr,LSr,xSr,mE,Hve,kSr,SSr,jH,RSr,BSr,PSr,Uve,$Sr,ISr,o8,RBe,Rf,gE,Jve,r8,qSr,Yve,NSr,BBe,Vr,t8,jSr,Bf,DSr,DH,GSr,OSr,GH,VSr,XSr,zSr,a8,QSr,Kve,WSr,HSr,USr,qt,n8,JSr,Zve,YSr,KSr,Pf,ZSr,e6e,eRr,oRr,OH,rRr,tRr,aRr,o6e,nRr,sRr,s8,lRr,No,l8,iRr,r6e,dRr,cRr,Dn,fRr,t6e,mRr,gRr,a6e,hRr,pRr,n6e,_Rr,uRr,bRr,s6e,hE,l6e,FRr,vRr,VH,TRr,MRr,ERr,i6e,CRr,wRr,i8,PBe;return me=new X({}),Da=new A({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),bC=new X({}),FC=new A({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Of=new ARr({props:{warning:!0,$$slots:{default:[XMt]},$$scope:{ctx:If}}}),vC=new X({}),TC=new C({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/configuration_auto.py#L542"}}),CC=new C({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/configuration_auto.py#L565",parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}]}}),wC=new A({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),AC=new C({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/configuration_auto.py#L687",parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}]}}),yC=new X({}),LC=new C({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/tokenization_auto.py#L358"}}),SC=new C({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/tokenization_auto.py#L372",parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_16473/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}]}}),RC=new A({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),BC=new C({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/tokenization_auto.py#L568",parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}]}}),PC=new X({}),$C=new C({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/feature_extraction_auto.py#L171"}}),NC=new C({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/feature_extraction_auto.py#L185",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_16473/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),Bh=new ARr({props:{$$slots:{default:[zMt]},$$scope:{ctx:If}}}),jC=new A({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),DC=new C({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/feature_extraction_auto.py#L312",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}]}}),GC=new X({}),OC=new C({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/processing_auto.py#L70"}}),zC=new C({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/processing_auto.py#L84",parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),Xh=new ARr({props:{$$slots:{default:[QMt]},$$scope:{ctx:If}}}),QC=new A({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),WC=new C({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/processing_auto.py#L237",parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}]}}),HC=new X({}),UC=new C({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L707"}}),YC=new C({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),KC=new A({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),ZC=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),e5=new A({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),o5=new X({}),r5=new C({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L714"}}),a5=new C({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),n5=new A({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),s5=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),l5=new A({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),i5=new X({}),d5=new C({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L729"}}),f5=new C({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),m5=new A({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),g5=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),h5=new A({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),p5=new X({}),_5=new C({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L736"}}),b5=new C({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code>(Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),F5=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),v5=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),T5=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),M5=new X({}),E5=new C({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L743"}}),w5=new C({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}]}}),A5=new A({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),y5=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),L5=new A({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),x5=new X({}),k5=new C({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L752"}}),R5=new C({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),B5=new A({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),P5=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),$5=new A({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),I5=new X({}),q5=new C({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L786"}}),j5=new C({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),D5=new A({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),G5=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),O5=new A({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),V5=new X({}),X5=new C({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L793"}}),Q5=new C({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}]}}),W5=new A({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),H5=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),U5=new A({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),J5=new X({}),Y5=new C({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L779"}}),Z5=new C({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),ew=new A({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),ow=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),rw=new A({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),tw=new X({}),aw=new C({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L761"}}),sw=new C({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),lw=new A({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),iw=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),dw=new A({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),cw=new X({}),fw=new C({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L768"}}),gw=new C({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),hw=new A({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),pw=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),_w=new A({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),uw=new X({}),bw=new C({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L802"}}),vw=new C({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_16473/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_16473/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_16473/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),Tw=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),Mw=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Ew=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Cw=new X({}),ww=new C({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L841"}}),yw=new C({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),Lw=new A({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),xw=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),kw=new A({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Sw=new X({}),Rw=new C({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L848"}}),Pw=new C({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),$w=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),Iw=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),qw=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Nw=new X({}),jw=new C({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L871"}}),Gw=new C({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),Ow=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),Vw=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Xw=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),zw=new X({}),Qw=new C({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L855"}}),Hw=new C({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),Uw=new A({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),Jw=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Yw=new A({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Kw=new X({}),Zw=new C({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L862"}}),oA=new C({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}]}}),rA=new A({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),tA=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),nA=new A({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),sA=new X({}),lA=new C({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L880"}}),dA=new C({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),cA=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),fA=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),mA=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),gA=new X({}),hA=new C({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L887"}}),_A=new C({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}]}}),uA=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),bA=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),FA=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),vA=new X({}),TA=new C({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L834"}}),EA=new C({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
</ul>`,name:"config"}]}}),CA=new A({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),wA=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),AA=new A({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),yA=new X({}),LA=new C({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L809"}}),kA=new C({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}]}}),SA=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),RA=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),BA=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),PA=new X({}),$A=new C({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L816"}}),qA=new C({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}]}}),NA=new A({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),jA=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),DA=new A({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),GA=new X({}),OA=new C({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L825"}}),XA=new C({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}]}}),zA=new A({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),QA=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),WA=new A({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),HA=new X({}),UA=new C({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_tf_auto.py#L379"}}),YA=new C({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),KA=new A({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),ZA=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),e0=new A({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),o0=new X({}),r0=new C({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_tf_auto.py#L386"}}),a0=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),n0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),s0=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),l0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),i0=new X({}),d0=new C({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_tf_auto.py#L401"}}),f0=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),m0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),g0=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),h0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),p0=new X({}),_0=new C({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_tf_auto.py#L408"}}),b0=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),F0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),v0=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),M0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),E0=new X({}),C0=new C({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_tf_auto.py#L422"}}),A0=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),y0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),L0=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),x0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),k0=new X({}),S0=new C({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_tf_auto.py#L429"}}),B0=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),P0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),$0=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),I0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),q0=new X({}),N0=new C({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_tf_auto.py#L438"}}),D0=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),G0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),O0=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),V0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),X0=new X({}),z0=new C({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_tf_auto.py#L474"}}),W0=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),H0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),U0=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),J0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Y0=new X({}),K0=new C({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_tf_auto.py#L454"}}),ey=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),oy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),ry=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ty=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ay=new X({}),ny=new C({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_tf_auto.py#L465"}}),ly=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),iy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),dy=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),cy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),fy=new X({}),my=new C({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_tf_auto.py#L447"}}),hy=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),py=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),_y=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),uy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),by=new X({}),Fy=new C({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_tf_auto.py#L415"}}),Ty=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),My=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),Ey=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Cy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),wy=new X({}),Ay=new C({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_tf_auto.py#L490"}}),Ly=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}]}}),xy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),ky=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Sy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ry=new X({}),By=new C({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_flax_auto.py#L237"}}),$y=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),Iy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),qy=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Ny=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),jy=new X({}),Dy=new C({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_flax_auto.py#L251"}}),Oy=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}]}}),Vy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),Xy=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),zy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Qy=new X({}),Wy=new C({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_flax_auto.py#L244"}}),Uy=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),Jy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),Yy=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Ky=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Zy=new X({}),eL=new C({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_flax_auto.py#L258"}}),rL=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),tL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),aL=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),nL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),sL=new X({}),lL=new C({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_flax_auto.py#L265"}}),dL=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),cL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),fL=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),mL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),gL=new X({}),hL=new C({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),_L=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),uL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),bL=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),FL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),vL=new X({}),TL=new C({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),EL=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),CL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),wL=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),AL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),yL=new X({}),LL=new C({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_flax_auto.py#L290"}}),kL=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),SL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),RL=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),BL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),PL=new X({}),$L=new C({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),qL=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),NL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),jL=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),DL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),GL=new X({}),OL=new C({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_flax_auto.py#L306"}}),XL=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}]}}),zL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),QL=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),WL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),HL=new X({}),UL=new C({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),YL=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),KL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),ZL=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),o8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),r8=new X({}),t8=new C({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),n8=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),s8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),l8=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),i8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){Z=a("meta"),io=l(),de=a("h1"),Ce=a("a"),lo=a("span"),f(me.$$.fragment),Me=l(),Xo=a("span"),Ii=o("Auto Classes"),qf=l(),fa=a("p"),qi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ni=a("code"),hC=o("from_pretrained()"),Nf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),xe=l(),co=a("p"),ji=o("Instantiating one of "),Gn=a("a"),pC=o("AutoConfig"),On=o(", "),Vn=a("a"),_C=o("AutoModel"),Di=o(`, and
`),Xn=a("a"),uC=o("AutoTokenizer"),Gi=o(" will directly create a class of the relevant architecture. For instance"),jf=l(),f(Da.$$.fragment),fo=l(),_e=a("p"),s9=o("will create a model that is an instance of "),Oi=a("a"),l9=o("BertModel"),i9=o("."),zo=l(),Ga=a("p"),d9=o("There is one class of "),Df=a("code"),c9=o("AutoModel"),Q$e=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),BSe=l(),Vi=a("h2"),Gf=a("a"),qJ=a("span"),f(bC.$$.fragment),W$e=l(),NJ=a("span"),H$e=o("Extending the Auto Classes"),PSe=l(),zn=a("p"),U$e=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),jJ=a("code"),J$e=o("NewModel"),Y$e=o(", make sure you have a "),DJ=a("code"),K$e=o("NewModelConfig"),Z$e=o(` then you can add those to the auto
classes like this:`),$Se=l(),f(FC.$$.fragment),ISe=l(),f9=a("p"),eIe=o("You will then be able to use the auto classes like you would usually do!"),qSe=l(),f(Of.$$.fragment),NSe=l(),Xi=a("h2"),Vf=a("a"),GJ=a("span"),f(vC.$$.fragment),oIe=l(),OJ=a("span"),rIe=o("AutoConfig"),jSe=l(),Qo=a("div"),f(TC.$$.fragment),tIe=l(),MC=a("p"),aIe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),m9=a("a"),nIe=o("from_pretrained()"),sIe=o(" class method."),lIe=l(),EC=a("p"),iIe=o("This class cannot be instantiated directly using "),VJ=a("code"),dIe=o("__init__()"),cIe=o(" (throws an error)."),fIe=l(),mo=a("div"),f(CC.$$.fragment),mIe=l(),XJ=a("p"),gIe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),hIe=l(),zi=a("p"),pIe=o("The configuration class to instantiate is selected based on the "),zJ=a("code"),_Ie=o("model_type"),uIe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),QJ=a("code"),bIe=o("pretrained_model_name_or_path"),FIe=o(":"),vIe=l(),F=a("ul"),Xf=a("li"),WJ=a("strong"),TIe=o("albert"),MIe=o(" \u2014 "),g9=a("a"),EIe=o("AlbertConfig"),CIe=o(" (ALBERT model)"),wIe=l(),zf=a("li"),HJ=a("strong"),AIe=o("bart"),yIe=o(" \u2014 "),h9=a("a"),LIe=o("BartConfig"),xIe=o(" (BART model)"),kIe=l(),Qf=a("li"),UJ=a("strong"),SIe=o("beit"),RIe=o(" \u2014 "),p9=a("a"),BIe=o("BeitConfig"),PIe=o(" (BEiT model)"),$Ie=l(),Wf=a("li"),JJ=a("strong"),IIe=o("bert"),qIe=o(" \u2014 "),_9=a("a"),NIe=o("BertConfig"),jIe=o(" (BERT model)"),DIe=l(),Hf=a("li"),YJ=a("strong"),GIe=o("bert-generation"),OIe=o(" \u2014 "),u9=a("a"),VIe=o("BertGenerationConfig"),XIe=o(" (Bert Generation model)"),zIe=l(),Uf=a("li"),KJ=a("strong"),QIe=o("big_bird"),WIe=o(" \u2014 "),b9=a("a"),HIe=o("BigBirdConfig"),UIe=o(" (BigBird model)"),JIe=l(),Jf=a("li"),ZJ=a("strong"),YIe=o("bigbird_pegasus"),KIe=o(" \u2014 "),F9=a("a"),ZIe=o("BigBirdPegasusConfig"),eqe=o(" (BigBirdPegasus model)"),oqe=l(),Yf=a("li"),eY=a("strong"),rqe=o("blenderbot"),tqe=o(" \u2014 "),v9=a("a"),aqe=o("BlenderbotConfig"),nqe=o(" (Blenderbot model)"),sqe=l(),Kf=a("li"),oY=a("strong"),lqe=o("blenderbot-small"),iqe=o(" \u2014 "),T9=a("a"),dqe=o("BlenderbotSmallConfig"),cqe=o(" (BlenderbotSmall model)"),fqe=l(),Zf=a("li"),rY=a("strong"),mqe=o("camembert"),gqe=o(" \u2014 "),M9=a("a"),hqe=o("CamembertConfig"),pqe=o(" (CamemBERT model)"),_qe=l(),em=a("li"),tY=a("strong"),uqe=o("canine"),bqe=o(" \u2014 "),E9=a("a"),Fqe=o("CanineConfig"),vqe=o(" (Canine model)"),Tqe=l(),om=a("li"),aY=a("strong"),Mqe=o("clip"),Eqe=o(" \u2014 "),C9=a("a"),Cqe=o("CLIPConfig"),wqe=o(" (CLIP model)"),Aqe=l(),rm=a("li"),nY=a("strong"),yqe=o("convbert"),Lqe=o(" \u2014 "),w9=a("a"),xqe=o("ConvBertConfig"),kqe=o(" (ConvBERT model)"),Sqe=l(),tm=a("li"),sY=a("strong"),Rqe=o("convnext"),Bqe=o(" \u2014 "),A9=a("a"),Pqe=o("ConvNextConfig"),$qe=o(" (ConvNext model)"),Iqe=l(),am=a("li"),lY=a("strong"),qqe=o("ctrl"),Nqe=o(" \u2014 "),y9=a("a"),jqe=o("CTRLConfig"),Dqe=o(" (CTRL model)"),Gqe=l(),nm=a("li"),iY=a("strong"),Oqe=o("data2vec-audio"),Vqe=o(" \u2014 "),L9=a("a"),Xqe=o("Data2VecAudioConfig"),zqe=o(" (Data2VecAudio model)"),Qqe=l(),sm=a("li"),dY=a("strong"),Wqe=o("data2vec-text"),Hqe=o(" \u2014 "),x9=a("a"),Uqe=o("Data2VecTextConfig"),Jqe=o(" (Data2VecText model)"),Yqe=l(),lm=a("li"),cY=a("strong"),Kqe=o("deberta"),Zqe=o(" \u2014 "),k9=a("a"),eNe=o("DebertaConfig"),oNe=o(" (DeBERTa model)"),rNe=l(),im=a("li"),fY=a("strong"),tNe=o("deberta-v2"),aNe=o(" \u2014 "),S9=a("a"),nNe=o("DebertaV2Config"),sNe=o(" (DeBERTa-v2 model)"),lNe=l(),dm=a("li"),mY=a("strong"),iNe=o("decision_transformer"),dNe=o(" \u2014 "),R9=a("a"),cNe=o("DecisionTransformerConfig"),fNe=o(" (Decision Transformer model)"),mNe=l(),cm=a("li"),gY=a("strong"),gNe=o("deit"),hNe=o(" \u2014 "),B9=a("a"),pNe=o("DeiTConfig"),_Ne=o(" (DeiT model)"),uNe=l(),fm=a("li"),hY=a("strong"),bNe=o("detr"),FNe=o(" \u2014 "),P9=a("a"),vNe=o("DetrConfig"),TNe=o(" (DETR model)"),MNe=l(),mm=a("li"),pY=a("strong"),ENe=o("distilbert"),CNe=o(" \u2014 "),$9=a("a"),wNe=o("DistilBertConfig"),ANe=o(" (DistilBERT model)"),yNe=l(),gm=a("li"),_Y=a("strong"),LNe=o("dpr"),xNe=o(" \u2014 "),I9=a("a"),kNe=o("DPRConfig"),SNe=o(" (DPR model)"),RNe=l(),hm=a("li"),uY=a("strong"),BNe=o("dpt"),PNe=o(" \u2014 "),q9=a("a"),$Ne=o("DPTConfig"),INe=o(" (DPT model)"),qNe=l(),pm=a("li"),bY=a("strong"),NNe=o("electra"),jNe=o(" \u2014 "),N9=a("a"),DNe=o("ElectraConfig"),GNe=o(" (ELECTRA model)"),ONe=l(),_m=a("li"),FY=a("strong"),VNe=o("encoder-decoder"),XNe=o(" \u2014 "),j9=a("a"),zNe=o("EncoderDecoderConfig"),QNe=o(" (Encoder decoder model)"),WNe=l(),um=a("li"),vY=a("strong"),HNe=o("flaubert"),UNe=o(" \u2014 "),D9=a("a"),JNe=o("FlaubertConfig"),YNe=o(" (FlauBERT model)"),KNe=l(),bm=a("li"),TY=a("strong"),ZNe=o("fnet"),eje=o(" \u2014 "),G9=a("a"),oje=o("FNetConfig"),rje=o(" (FNet model)"),tje=l(),Fm=a("li"),MY=a("strong"),aje=o("fsmt"),nje=o(" \u2014 "),O9=a("a"),sje=o("FSMTConfig"),lje=o(" (FairSeq Machine-Translation model)"),ije=l(),vm=a("li"),EY=a("strong"),dje=o("funnel"),cje=o(" \u2014 "),V9=a("a"),fje=o("FunnelConfig"),mje=o(" (Funnel Transformer model)"),gje=l(),Tm=a("li"),CY=a("strong"),hje=o("glpn"),pje=o(" \u2014 "),X9=a("a"),_je=o("GLPNConfig"),uje=o(" (GLPN model)"),bje=l(),Mm=a("li"),wY=a("strong"),Fje=o("gpt2"),vje=o(" \u2014 "),z9=a("a"),Tje=o("GPT2Config"),Mje=o(" (OpenAI GPT-2 model)"),Eje=l(),Em=a("li"),AY=a("strong"),Cje=o("gpt_neo"),wje=o(" \u2014 "),Q9=a("a"),Aje=o("GPTNeoConfig"),yje=o(" (GPT Neo model)"),Lje=l(),Cm=a("li"),yY=a("strong"),xje=o("gptj"),kje=o(" \u2014 "),W9=a("a"),Sje=o("GPTJConfig"),Rje=o(" (GPT-J model)"),Bje=l(),wm=a("li"),LY=a("strong"),Pje=o("hubert"),$je=o(" \u2014 "),H9=a("a"),Ije=o("HubertConfig"),qje=o(" (Hubert model)"),Nje=l(),Am=a("li"),xY=a("strong"),jje=o("ibert"),Dje=o(" \u2014 "),U9=a("a"),Gje=o("IBertConfig"),Oje=o(" (I-BERT model)"),Vje=l(),ym=a("li"),kY=a("strong"),Xje=o("imagegpt"),zje=o(" \u2014 "),J9=a("a"),Qje=o("ImageGPTConfig"),Wje=o(" (ImageGPT model)"),Hje=l(),Lm=a("li"),SY=a("strong"),Uje=o("layoutlm"),Jje=o(" \u2014 "),Y9=a("a"),Yje=o("LayoutLMConfig"),Kje=o(" (LayoutLM model)"),Zje=l(),xm=a("li"),RY=a("strong"),eDe=o("layoutlmv2"),oDe=o(" \u2014 "),K9=a("a"),rDe=o("LayoutLMv2Config"),tDe=o(" (LayoutLMv2 model)"),aDe=l(),km=a("li"),BY=a("strong"),nDe=o("led"),sDe=o(" \u2014 "),Z9=a("a"),lDe=o("LEDConfig"),iDe=o(" (LED model)"),dDe=l(),Sm=a("li"),PY=a("strong"),cDe=o("longformer"),fDe=o(" \u2014 "),ex=a("a"),mDe=o("LongformerConfig"),gDe=o(" (Longformer model)"),hDe=l(),Rm=a("li"),$Y=a("strong"),pDe=o("luke"),_De=o(" \u2014 "),ox=a("a"),uDe=o("LukeConfig"),bDe=o(" (LUKE model)"),FDe=l(),Bm=a("li"),IY=a("strong"),vDe=o("lxmert"),TDe=o(" \u2014 "),rx=a("a"),MDe=o("LxmertConfig"),EDe=o(" (LXMERT model)"),CDe=l(),Pm=a("li"),qY=a("strong"),wDe=o("m2m_100"),ADe=o(" \u2014 "),tx=a("a"),yDe=o("M2M100Config"),LDe=o(" (M2M100 model)"),xDe=l(),$m=a("li"),NY=a("strong"),kDe=o("marian"),SDe=o(" \u2014 "),ax=a("a"),RDe=o("MarianConfig"),BDe=o(" (Marian model)"),PDe=l(),Im=a("li"),jY=a("strong"),$De=o("maskformer"),IDe=o(" \u2014 "),nx=a("a"),qDe=o("MaskFormerConfig"),NDe=o(" (MaskFormer model)"),jDe=l(),qm=a("li"),DY=a("strong"),DDe=o("mbart"),GDe=o(" \u2014 "),sx=a("a"),ODe=o("MBartConfig"),VDe=o(" (mBART model)"),XDe=l(),Nm=a("li"),GY=a("strong"),zDe=o("megatron-bert"),QDe=o(" \u2014 "),lx=a("a"),WDe=o("MegatronBertConfig"),HDe=o(" (MegatronBert model)"),UDe=l(),jm=a("li"),OY=a("strong"),JDe=o("mobilebert"),YDe=o(" \u2014 "),ix=a("a"),KDe=o("MobileBertConfig"),ZDe=o(" (MobileBERT model)"),eGe=l(),Dm=a("li"),VY=a("strong"),oGe=o("mpnet"),rGe=o(" \u2014 "),dx=a("a"),tGe=o("MPNetConfig"),aGe=o(" (MPNet model)"),nGe=l(),Gm=a("li"),XY=a("strong"),sGe=o("mt5"),lGe=o(" \u2014 "),cx=a("a"),iGe=o("MT5Config"),dGe=o(" (mT5 model)"),cGe=l(),Om=a("li"),zY=a("strong"),fGe=o("nystromformer"),mGe=o(" \u2014 "),fx=a("a"),gGe=o("NystromformerConfig"),hGe=o(" (Nystromformer model)"),pGe=l(),Vm=a("li"),QY=a("strong"),_Ge=o("openai-gpt"),uGe=o(" \u2014 "),mx=a("a"),bGe=o("OpenAIGPTConfig"),FGe=o(" (OpenAI GPT model)"),vGe=l(),Xm=a("li"),WY=a("strong"),TGe=o("pegasus"),MGe=o(" \u2014 "),gx=a("a"),EGe=o("PegasusConfig"),CGe=o(" (Pegasus model)"),wGe=l(),zm=a("li"),HY=a("strong"),AGe=o("perceiver"),yGe=o(" \u2014 "),hx=a("a"),LGe=o("PerceiverConfig"),xGe=o(" (Perceiver model)"),kGe=l(),Qm=a("li"),UY=a("strong"),SGe=o("plbart"),RGe=o(" \u2014 "),px=a("a"),BGe=o("PLBartConfig"),PGe=o(" (PLBart model)"),$Ge=l(),Wm=a("li"),JY=a("strong"),IGe=o("poolformer"),qGe=o(" \u2014 "),_x=a("a"),NGe=o("PoolFormerConfig"),jGe=o(" (PoolFormer model)"),DGe=l(),Hm=a("li"),YY=a("strong"),GGe=o("prophetnet"),OGe=o(" \u2014 "),ux=a("a"),VGe=o("ProphetNetConfig"),XGe=o(" (ProphetNet model)"),zGe=l(),Um=a("li"),KY=a("strong"),QGe=o("qdqbert"),WGe=o(" \u2014 "),bx=a("a"),HGe=o("QDQBertConfig"),UGe=o(" (QDQBert model)"),JGe=l(),Jm=a("li"),ZY=a("strong"),YGe=o("rag"),KGe=o(" \u2014 "),Fx=a("a"),ZGe=o("RagConfig"),eOe=o(" (RAG model)"),oOe=l(),Ym=a("li"),eK=a("strong"),rOe=o("realm"),tOe=o(" \u2014 "),vx=a("a"),aOe=o("RealmConfig"),nOe=o(" (Realm model)"),sOe=l(),Km=a("li"),oK=a("strong"),lOe=o("reformer"),iOe=o(" \u2014 "),Tx=a("a"),dOe=o("ReformerConfig"),cOe=o(" (Reformer model)"),fOe=l(),Zm=a("li"),rK=a("strong"),mOe=o("rembert"),gOe=o(" \u2014 "),Mx=a("a"),hOe=o("RemBertConfig"),pOe=o(" (RemBERT model)"),_Oe=l(),eg=a("li"),tK=a("strong"),uOe=o("resnet"),bOe=o(" \u2014 "),Ex=a("a"),FOe=o("ResNetConfig"),vOe=o(" (ResNet model)"),TOe=l(),og=a("li"),aK=a("strong"),MOe=o("retribert"),EOe=o(" \u2014 "),Cx=a("a"),COe=o("RetriBertConfig"),wOe=o(" (RetriBERT model)"),AOe=l(),rg=a("li"),nK=a("strong"),yOe=o("roberta"),LOe=o(" \u2014 "),wx=a("a"),xOe=o("RobertaConfig"),kOe=o(" (RoBERTa model)"),SOe=l(),tg=a("li"),sK=a("strong"),ROe=o("roformer"),BOe=o(" \u2014 "),Ax=a("a"),POe=o("RoFormerConfig"),$Oe=o(" (RoFormer model)"),IOe=l(),ag=a("li"),lK=a("strong"),qOe=o("segformer"),NOe=o(" \u2014 "),yx=a("a"),jOe=o("SegformerConfig"),DOe=o(" (SegFormer model)"),GOe=l(),ng=a("li"),iK=a("strong"),OOe=o("sew"),VOe=o(" \u2014 "),Lx=a("a"),XOe=o("SEWConfig"),zOe=o(" (SEW model)"),QOe=l(),sg=a("li"),dK=a("strong"),WOe=o("sew-d"),HOe=o(" \u2014 "),xx=a("a"),UOe=o("SEWDConfig"),JOe=o(" (SEW-D model)"),YOe=l(),lg=a("li"),cK=a("strong"),KOe=o("speech-encoder-decoder"),ZOe=o(" \u2014 "),kx=a("a"),eVe=o("SpeechEncoderDecoderConfig"),oVe=o(" (Speech Encoder decoder model)"),rVe=l(),ig=a("li"),fK=a("strong"),tVe=o("speech_to_text"),aVe=o(" \u2014 "),Sx=a("a"),nVe=o("Speech2TextConfig"),sVe=o(" (Speech2Text model)"),lVe=l(),dg=a("li"),mK=a("strong"),iVe=o("speech_to_text_2"),dVe=o(" \u2014 "),Rx=a("a"),cVe=o("Speech2Text2Config"),fVe=o(" (Speech2Text2 model)"),mVe=l(),cg=a("li"),gK=a("strong"),gVe=o("splinter"),hVe=o(" \u2014 "),Bx=a("a"),pVe=o("SplinterConfig"),_Ve=o(" (Splinter model)"),uVe=l(),fg=a("li"),hK=a("strong"),bVe=o("squeezebert"),FVe=o(" \u2014 "),Px=a("a"),vVe=o("SqueezeBertConfig"),TVe=o(" (SqueezeBERT model)"),MVe=l(),mg=a("li"),pK=a("strong"),EVe=o("swin"),CVe=o(" \u2014 "),$x=a("a"),wVe=o("SwinConfig"),AVe=o(" (Swin model)"),yVe=l(),gg=a("li"),_K=a("strong"),LVe=o("t5"),xVe=o(" \u2014 "),Ix=a("a"),kVe=o("T5Config"),SVe=o(" (T5 model)"),RVe=l(),hg=a("li"),uK=a("strong"),BVe=o("tapas"),PVe=o(" \u2014 "),qx=a("a"),$Ve=o("TapasConfig"),IVe=o(" (TAPAS model)"),qVe=l(),pg=a("li"),bK=a("strong"),NVe=o("transfo-xl"),jVe=o(" \u2014 "),Nx=a("a"),DVe=o("TransfoXLConfig"),GVe=o(" (Transformer-XL model)"),OVe=l(),_g=a("li"),FK=a("strong"),VVe=o("trocr"),XVe=o(" \u2014 "),jx=a("a"),zVe=o("TrOCRConfig"),QVe=o(" (TrOCR model)"),WVe=l(),ug=a("li"),vK=a("strong"),HVe=o("unispeech"),UVe=o(" \u2014 "),Dx=a("a"),JVe=o("UniSpeechConfig"),YVe=o(" (UniSpeech model)"),KVe=l(),bg=a("li"),TK=a("strong"),ZVe=o("unispeech-sat"),eXe=o(" \u2014 "),Gx=a("a"),oXe=o("UniSpeechSatConfig"),rXe=o(" (UniSpeechSat model)"),tXe=l(),Fg=a("li"),MK=a("strong"),aXe=o("van"),nXe=o(" \u2014 "),Ox=a("a"),sXe=o("VanConfig"),lXe=o(" (VAN model)"),iXe=l(),vg=a("li"),EK=a("strong"),dXe=o("vilt"),cXe=o(" \u2014 "),Vx=a("a"),fXe=o("ViltConfig"),mXe=o(" (ViLT model)"),gXe=l(),Tg=a("li"),CK=a("strong"),hXe=o("vision-encoder-decoder"),pXe=o(" \u2014 "),Xx=a("a"),_Xe=o("VisionEncoderDecoderConfig"),uXe=o(" (Vision Encoder decoder model)"),bXe=l(),Mg=a("li"),wK=a("strong"),FXe=o("vision-text-dual-encoder"),vXe=o(" \u2014 "),zx=a("a"),TXe=o("VisionTextDualEncoderConfig"),MXe=o(" (VisionTextDualEncoder model)"),EXe=l(),Eg=a("li"),AK=a("strong"),CXe=o("visual_bert"),wXe=o(" \u2014 "),Qx=a("a"),AXe=o("VisualBertConfig"),yXe=o(" (VisualBert model)"),LXe=l(),Cg=a("li"),yK=a("strong"),xXe=o("vit"),kXe=o(" \u2014 "),Wx=a("a"),SXe=o("ViTConfig"),RXe=o(" (ViT model)"),BXe=l(),wg=a("li"),LK=a("strong"),PXe=o("vit_mae"),$Xe=o(" \u2014 "),Hx=a("a"),IXe=o("ViTMAEConfig"),qXe=o(" (ViTMAE model)"),NXe=l(),Ag=a("li"),xK=a("strong"),jXe=o("wav2vec2"),DXe=o(" \u2014 "),Ux=a("a"),GXe=o("Wav2Vec2Config"),OXe=o(" (Wav2Vec2 model)"),VXe=l(),yg=a("li"),kK=a("strong"),XXe=o("wavlm"),zXe=o(" \u2014 "),Jx=a("a"),QXe=o("WavLMConfig"),WXe=o(" (WavLM model)"),HXe=l(),Lg=a("li"),SK=a("strong"),UXe=o("xglm"),JXe=o(" \u2014 "),Yx=a("a"),YXe=o("XGLMConfig"),KXe=o(" (XGLM model)"),ZXe=l(),xg=a("li"),RK=a("strong"),eze=o("xlm"),oze=o(" \u2014 "),Kx=a("a"),rze=o("XLMConfig"),tze=o(" (XLM model)"),aze=l(),kg=a("li"),BK=a("strong"),nze=o("xlm-prophetnet"),sze=o(" \u2014 "),Zx=a("a"),lze=o("XLMProphetNetConfig"),ize=o(" (XLMProphetNet model)"),dze=l(),Sg=a("li"),PK=a("strong"),cze=o("xlm-roberta"),fze=o(" \u2014 "),ek=a("a"),mze=o("XLMRobertaConfig"),gze=o(" (XLM-RoBERTa model)"),hze=l(),Rg=a("li"),$K=a("strong"),pze=o("xlm-roberta-xl"),_ze=o(" \u2014 "),ok=a("a"),uze=o("XLMRobertaXLConfig"),bze=o(" (XLM-RoBERTa-XL model)"),Fze=l(),Bg=a("li"),IK=a("strong"),vze=o("xlnet"),Tze=o(" \u2014 "),rk=a("a"),Mze=o("XLNetConfig"),Eze=o(" (XLNet model)"),Cze=l(),Pg=a("li"),qK=a("strong"),wze=o("yoso"),Aze=o(" \u2014 "),tk=a("a"),yze=o("YosoConfig"),Lze=o(" (YOSO model)"),xze=l(),NK=a("p"),kze=o("Examples:"),Sze=l(),f(wC.$$.fragment),Rze=l(),$g=a("div"),f(AC.$$.fragment),Bze=l(),jK=a("p"),Pze=o("Register a new configuration for this class."),DSe=l(),Qi=a("h2"),Ig=a("a"),DK=a("span"),f(yC.$$.fragment),$ze=l(),GK=a("span"),Ize=o("AutoTokenizer"),GSe=l(),Wo=a("div"),f(LC.$$.fragment),qze=l(),xC=a("p"),Nze=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),ak=a("a"),jze=o("AutoTokenizer.from_pretrained()"),Dze=o(" class method."),Gze=l(),kC=a("p"),Oze=o("This class cannot be instantiated directly using "),OK=a("code"),Vze=o("__init__()"),Xze=o(" (throws an error)."),zze=l(),go=a("div"),f(SC.$$.fragment),Qze=l(),VK=a("p"),Wze=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Hze=l(),Oa=a("p"),Uze=o("The tokenizer class to instantiate is selected based on the "),XK=a("code"),Jze=o("model_type"),Yze=o(` property of the config object (either
passed as an argument or loaded from `),zK=a("code"),Kze=o("pretrained_model_name_or_path"),Zze=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QK=a("code"),eQe=o("pretrained_model_name_or_path"),oQe=o(":"),rQe=l(),E=a("ul"),Qn=a("li"),WK=a("strong"),tQe=o("albert"),aQe=o(" \u2014 "),nk=a("a"),nQe=o("AlbertTokenizer"),sQe=o(" or "),sk=a("a"),lQe=o("AlbertTokenizerFast"),iQe=o(" (ALBERT model)"),dQe=l(),Wn=a("li"),HK=a("strong"),cQe=o("bart"),fQe=o(" \u2014 "),lk=a("a"),mQe=o("BartTokenizer"),gQe=o(" or "),ik=a("a"),hQe=o("BartTokenizerFast"),pQe=o(" (BART model)"),_Qe=l(),Hn=a("li"),UK=a("strong"),uQe=o("barthez"),bQe=o(" \u2014 "),dk=a("a"),FQe=o("BarthezTokenizer"),vQe=o(" or "),ck=a("a"),TQe=o("BarthezTokenizerFast"),MQe=o(" (BARThez model)"),EQe=l(),qg=a("li"),JK=a("strong"),CQe=o("bartpho"),wQe=o(" \u2014 "),fk=a("a"),AQe=o("BartphoTokenizer"),yQe=o(" (BARTpho model)"),LQe=l(),Un=a("li"),YK=a("strong"),xQe=o("bert"),kQe=o(" \u2014 "),mk=a("a"),SQe=o("BertTokenizer"),RQe=o(" or "),gk=a("a"),BQe=o("BertTokenizerFast"),PQe=o(" (BERT model)"),$Qe=l(),Ng=a("li"),KK=a("strong"),IQe=o("bert-generation"),qQe=o(" \u2014 "),hk=a("a"),NQe=o("BertGenerationTokenizer"),jQe=o(" (Bert Generation model)"),DQe=l(),jg=a("li"),ZK=a("strong"),GQe=o("bert-japanese"),OQe=o(" \u2014 "),pk=a("a"),VQe=o("BertJapaneseTokenizer"),XQe=o(" (BertJapanese model)"),zQe=l(),Dg=a("li"),eZ=a("strong"),QQe=o("bertweet"),WQe=o(" \u2014 "),_k=a("a"),HQe=o("BertweetTokenizer"),UQe=o(" (Bertweet model)"),JQe=l(),Jn=a("li"),oZ=a("strong"),YQe=o("big_bird"),KQe=o(" \u2014 "),uk=a("a"),ZQe=o("BigBirdTokenizer"),eWe=o(" or "),bk=a("a"),oWe=o("BigBirdTokenizerFast"),rWe=o(" (BigBird model)"),tWe=l(),Yn=a("li"),rZ=a("strong"),aWe=o("bigbird_pegasus"),nWe=o(" \u2014 "),Fk=a("a"),sWe=o("PegasusTokenizer"),lWe=o(" or "),vk=a("a"),iWe=o("PegasusTokenizerFast"),dWe=o(" (BigBirdPegasus model)"),cWe=l(),Kn=a("li"),tZ=a("strong"),fWe=o("blenderbot"),mWe=o(" \u2014 "),Tk=a("a"),gWe=o("BlenderbotTokenizer"),hWe=o(" or "),Mk=a("a"),pWe=o("BlenderbotTokenizerFast"),_We=o(" (Blenderbot model)"),uWe=l(),Gg=a("li"),aZ=a("strong"),bWe=o("blenderbot-small"),FWe=o(" \u2014 "),Ek=a("a"),vWe=o("BlenderbotSmallTokenizer"),TWe=o(" (BlenderbotSmall model)"),MWe=l(),Og=a("li"),nZ=a("strong"),EWe=o("byt5"),CWe=o(" \u2014 "),Ck=a("a"),wWe=o("ByT5Tokenizer"),AWe=o(" (ByT5 model)"),yWe=l(),Zn=a("li"),sZ=a("strong"),LWe=o("camembert"),xWe=o(" \u2014 "),wk=a("a"),kWe=o("CamembertTokenizer"),SWe=o(" or "),Ak=a("a"),RWe=o("CamembertTokenizerFast"),BWe=o(" (CamemBERT model)"),PWe=l(),Vg=a("li"),lZ=a("strong"),$We=o("canine"),IWe=o(" \u2014 "),yk=a("a"),qWe=o("CanineTokenizer"),NWe=o(" (Canine model)"),jWe=l(),es=a("li"),iZ=a("strong"),DWe=o("clip"),GWe=o(" \u2014 "),Lk=a("a"),OWe=o("CLIPTokenizer"),VWe=o(" or "),xk=a("a"),XWe=o("CLIPTokenizerFast"),zWe=o(" (CLIP model)"),QWe=l(),os=a("li"),dZ=a("strong"),WWe=o("convbert"),HWe=o(" \u2014 "),kk=a("a"),UWe=o("ConvBertTokenizer"),JWe=o(" or "),Sk=a("a"),YWe=o("ConvBertTokenizerFast"),KWe=o(" (ConvBERT model)"),ZWe=l(),rs=a("li"),cZ=a("strong"),eHe=o("cpm"),oHe=o(" \u2014 "),Rk=a("a"),rHe=o("CpmTokenizer"),tHe=o(" or "),fZ=a("code"),aHe=o("CpmTokenizerFast"),nHe=o(" (CPM model)"),sHe=l(),Xg=a("li"),mZ=a("strong"),lHe=o("ctrl"),iHe=o(" \u2014 "),Bk=a("a"),dHe=o("CTRLTokenizer"),cHe=o(" (CTRL model)"),fHe=l(),ts=a("li"),gZ=a("strong"),mHe=o("deberta"),gHe=o(" \u2014 "),Pk=a("a"),hHe=o("DebertaTokenizer"),pHe=o(" or "),$k=a("a"),_He=o("DebertaTokenizerFast"),uHe=o(" (DeBERTa model)"),bHe=l(),zg=a("li"),hZ=a("strong"),FHe=o("deberta-v2"),vHe=o(" \u2014 "),Ik=a("a"),THe=o("DebertaV2Tokenizer"),MHe=o(" (DeBERTa-v2 model)"),EHe=l(),as=a("li"),pZ=a("strong"),CHe=o("distilbert"),wHe=o(" \u2014 "),qk=a("a"),AHe=o("DistilBertTokenizer"),yHe=o(" or "),Nk=a("a"),LHe=o("DistilBertTokenizerFast"),xHe=o(" (DistilBERT model)"),kHe=l(),ns=a("li"),_Z=a("strong"),SHe=o("dpr"),RHe=o(" \u2014 "),jk=a("a"),BHe=o("DPRQuestionEncoderTokenizer"),PHe=o(" or "),Dk=a("a"),$He=o("DPRQuestionEncoderTokenizerFast"),IHe=o(" (DPR model)"),qHe=l(),ss=a("li"),uZ=a("strong"),NHe=o("electra"),jHe=o(" \u2014 "),Gk=a("a"),DHe=o("ElectraTokenizer"),GHe=o(" or "),Ok=a("a"),OHe=o("ElectraTokenizerFast"),VHe=o(" (ELECTRA model)"),XHe=l(),Qg=a("li"),bZ=a("strong"),zHe=o("flaubert"),QHe=o(" \u2014 "),Vk=a("a"),WHe=o("FlaubertTokenizer"),HHe=o(" (FlauBERT model)"),UHe=l(),ls=a("li"),FZ=a("strong"),JHe=o("fnet"),YHe=o(" \u2014 "),Xk=a("a"),KHe=o("FNetTokenizer"),ZHe=o(" or "),zk=a("a"),eUe=o("FNetTokenizerFast"),oUe=o(" (FNet model)"),rUe=l(),Wg=a("li"),vZ=a("strong"),tUe=o("fsmt"),aUe=o(" \u2014 "),Qk=a("a"),nUe=o("FSMTTokenizer"),sUe=o(" (FairSeq Machine-Translation model)"),lUe=l(),is=a("li"),TZ=a("strong"),iUe=o("funnel"),dUe=o(" \u2014 "),Wk=a("a"),cUe=o("FunnelTokenizer"),fUe=o(" or "),Hk=a("a"),mUe=o("FunnelTokenizerFast"),gUe=o(" (Funnel Transformer model)"),hUe=l(),ds=a("li"),MZ=a("strong"),pUe=o("gpt2"),_Ue=o(" \u2014 "),Uk=a("a"),uUe=o("GPT2Tokenizer"),bUe=o(" or "),Jk=a("a"),FUe=o("GPT2TokenizerFast"),vUe=o(" (OpenAI GPT-2 model)"),TUe=l(),cs=a("li"),EZ=a("strong"),MUe=o("gpt_neo"),EUe=o(" \u2014 "),Yk=a("a"),CUe=o("GPT2Tokenizer"),wUe=o(" or "),Kk=a("a"),AUe=o("GPT2TokenizerFast"),yUe=o(" (GPT Neo model)"),LUe=l(),fs=a("li"),CZ=a("strong"),xUe=o("herbert"),kUe=o(" \u2014 "),Zk=a("a"),SUe=o("HerbertTokenizer"),RUe=o(" or "),eS=a("a"),BUe=o("HerbertTokenizerFast"),PUe=o(" (HerBERT model)"),$Ue=l(),Hg=a("li"),wZ=a("strong"),IUe=o("hubert"),qUe=o(" \u2014 "),oS=a("a"),NUe=o("Wav2Vec2CTCTokenizer"),jUe=o(" (Hubert model)"),DUe=l(),ms=a("li"),AZ=a("strong"),GUe=o("ibert"),OUe=o(" \u2014 "),rS=a("a"),VUe=o("RobertaTokenizer"),XUe=o(" or "),tS=a("a"),zUe=o("RobertaTokenizerFast"),QUe=o(" (I-BERT model)"),WUe=l(),gs=a("li"),yZ=a("strong"),HUe=o("layoutlm"),UUe=o(" \u2014 "),aS=a("a"),JUe=o("LayoutLMTokenizer"),YUe=o(" or "),nS=a("a"),KUe=o("LayoutLMTokenizerFast"),ZUe=o(" (LayoutLM model)"),eJe=l(),hs=a("li"),LZ=a("strong"),oJe=o("layoutlmv2"),rJe=o(" \u2014 "),sS=a("a"),tJe=o("LayoutLMv2Tokenizer"),aJe=o(" or "),lS=a("a"),nJe=o("LayoutLMv2TokenizerFast"),sJe=o(" (LayoutLMv2 model)"),lJe=l(),ps=a("li"),xZ=a("strong"),iJe=o("layoutxlm"),dJe=o(" \u2014 "),iS=a("a"),cJe=o("LayoutXLMTokenizer"),fJe=o(" or "),dS=a("a"),mJe=o("LayoutXLMTokenizerFast"),gJe=o(" (LayoutXLM model)"),hJe=l(),_s=a("li"),kZ=a("strong"),pJe=o("led"),_Je=o(" \u2014 "),cS=a("a"),uJe=o("LEDTokenizer"),bJe=o(" or "),fS=a("a"),FJe=o("LEDTokenizerFast"),vJe=o(" (LED model)"),TJe=l(),us=a("li"),SZ=a("strong"),MJe=o("longformer"),EJe=o(" \u2014 "),mS=a("a"),CJe=o("LongformerTokenizer"),wJe=o(" or "),gS=a("a"),AJe=o("LongformerTokenizerFast"),yJe=o(" (Longformer model)"),LJe=l(),Ug=a("li"),RZ=a("strong"),xJe=o("luke"),kJe=o(" \u2014 "),hS=a("a"),SJe=o("LukeTokenizer"),RJe=o(" (LUKE model)"),BJe=l(),bs=a("li"),BZ=a("strong"),PJe=o("lxmert"),$Je=o(" \u2014 "),pS=a("a"),IJe=o("LxmertTokenizer"),qJe=o(" or "),_S=a("a"),NJe=o("LxmertTokenizerFast"),jJe=o(" (LXMERT model)"),DJe=l(),Jg=a("li"),PZ=a("strong"),GJe=o("m2m_100"),OJe=o(" \u2014 "),uS=a("a"),VJe=o("M2M100Tokenizer"),XJe=o(" (M2M100 model)"),zJe=l(),Yg=a("li"),$Z=a("strong"),QJe=o("marian"),WJe=o(" \u2014 "),bS=a("a"),HJe=o("MarianTokenizer"),UJe=o(" (Marian model)"),JJe=l(),Fs=a("li"),IZ=a("strong"),YJe=o("mbart"),KJe=o(" \u2014 "),FS=a("a"),ZJe=o("MBartTokenizer"),eYe=o(" or "),vS=a("a"),oYe=o("MBartTokenizerFast"),rYe=o(" (mBART model)"),tYe=l(),vs=a("li"),qZ=a("strong"),aYe=o("mbart50"),nYe=o(" \u2014 "),TS=a("a"),sYe=o("MBart50Tokenizer"),lYe=o(" or "),MS=a("a"),iYe=o("MBart50TokenizerFast"),dYe=o(" (mBART-50 model)"),cYe=l(),Kg=a("li"),NZ=a("strong"),fYe=o("mluke"),mYe=o(" \u2014 "),ES=a("a"),gYe=o("MLukeTokenizer"),hYe=o(" (mLUKE model)"),pYe=l(),Ts=a("li"),jZ=a("strong"),_Ye=o("mobilebert"),uYe=o(" \u2014 "),CS=a("a"),bYe=o("MobileBertTokenizer"),FYe=o(" or "),wS=a("a"),vYe=o("MobileBertTokenizerFast"),TYe=o(" (MobileBERT model)"),MYe=l(),Ms=a("li"),DZ=a("strong"),EYe=o("mpnet"),CYe=o(" \u2014 "),AS=a("a"),wYe=o("MPNetTokenizer"),AYe=o(" or "),yS=a("a"),yYe=o("MPNetTokenizerFast"),LYe=o(" (MPNet model)"),xYe=l(),Es=a("li"),GZ=a("strong"),kYe=o("mt5"),SYe=o(" \u2014 "),LS=a("a"),RYe=o("MT5Tokenizer"),BYe=o(" or "),xS=a("a"),PYe=o("MT5TokenizerFast"),$Ye=o(" (mT5 model)"),IYe=l(),Cs=a("li"),OZ=a("strong"),qYe=o("openai-gpt"),NYe=o(" \u2014 "),kS=a("a"),jYe=o("OpenAIGPTTokenizer"),DYe=o(" or "),SS=a("a"),GYe=o("OpenAIGPTTokenizerFast"),OYe=o(" (OpenAI GPT model)"),VYe=l(),ws=a("li"),VZ=a("strong"),XYe=o("pegasus"),zYe=o(" \u2014 "),RS=a("a"),QYe=o("PegasusTokenizer"),WYe=o(" or "),BS=a("a"),HYe=o("PegasusTokenizerFast"),UYe=o(" (Pegasus model)"),JYe=l(),Zg=a("li"),XZ=a("strong"),YYe=o("perceiver"),KYe=o(" \u2014 "),PS=a("a"),ZYe=o("PerceiverTokenizer"),eKe=o(" (Perceiver model)"),oKe=l(),eh=a("li"),zZ=a("strong"),rKe=o("phobert"),tKe=o(" \u2014 "),$S=a("a"),aKe=o("PhobertTokenizer"),nKe=o(" (PhoBERT model)"),sKe=l(),oh=a("li"),QZ=a("strong"),lKe=o("plbart"),iKe=o(" \u2014 "),IS=a("a"),dKe=o("PLBartTokenizer"),cKe=o(" (PLBart model)"),fKe=l(),rh=a("li"),WZ=a("strong"),mKe=o("prophetnet"),gKe=o(" \u2014 "),qS=a("a"),hKe=o("ProphetNetTokenizer"),pKe=o(" (ProphetNet model)"),_Ke=l(),As=a("li"),HZ=a("strong"),uKe=o("qdqbert"),bKe=o(" \u2014 "),NS=a("a"),FKe=o("BertTokenizer"),vKe=o(" or "),jS=a("a"),TKe=o("BertTokenizerFast"),MKe=o(" (QDQBert model)"),EKe=l(),th=a("li"),UZ=a("strong"),CKe=o("rag"),wKe=o(" \u2014 "),DS=a("a"),AKe=o("RagTokenizer"),yKe=o(" (RAG model)"),LKe=l(),ys=a("li"),JZ=a("strong"),xKe=o("realm"),kKe=o(" \u2014 "),GS=a("a"),SKe=o("RealmTokenizer"),RKe=o(" or "),OS=a("a"),BKe=o("RealmTokenizerFast"),PKe=o(" (Realm model)"),$Ke=l(),Ls=a("li"),YZ=a("strong"),IKe=o("reformer"),qKe=o(" \u2014 "),VS=a("a"),NKe=o("ReformerTokenizer"),jKe=o(" or "),XS=a("a"),DKe=o("ReformerTokenizerFast"),GKe=o(" (Reformer model)"),OKe=l(),xs=a("li"),KZ=a("strong"),VKe=o("rembert"),XKe=o(" \u2014 "),zS=a("a"),zKe=o("RemBertTokenizer"),QKe=o(" or "),QS=a("a"),WKe=o("RemBertTokenizerFast"),HKe=o(" (RemBERT model)"),UKe=l(),ks=a("li"),ZZ=a("strong"),JKe=o("retribert"),YKe=o(" \u2014 "),WS=a("a"),KKe=o("RetriBertTokenizer"),ZKe=o(" or "),HS=a("a"),eZe=o("RetriBertTokenizerFast"),oZe=o(" (RetriBERT model)"),rZe=l(),Ss=a("li"),eee=a("strong"),tZe=o("roberta"),aZe=o(" \u2014 "),US=a("a"),nZe=o("RobertaTokenizer"),sZe=o(" or "),JS=a("a"),lZe=o("RobertaTokenizerFast"),iZe=o(" (RoBERTa model)"),dZe=l(),Rs=a("li"),oee=a("strong"),cZe=o("roformer"),fZe=o(" \u2014 "),YS=a("a"),mZe=o("RoFormerTokenizer"),gZe=o(" or "),KS=a("a"),hZe=o("RoFormerTokenizerFast"),pZe=o(" (RoFormer model)"),_Ze=l(),ah=a("li"),ree=a("strong"),uZe=o("speech_to_text"),bZe=o(" \u2014 "),ZS=a("a"),FZe=o("Speech2TextTokenizer"),vZe=o(" (Speech2Text model)"),TZe=l(),nh=a("li"),tee=a("strong"),MZe=o("speech_to_text_2"),EZe=o(" \u2014 "),eR=a("a"),CZe=o("Speech2Text2Tokenizer"),wZe=o(" (Speech2Text2 model)"),AZe=l(),Bs=a("li"),aee=a("strong"),yZe=o("splinter"),LZe=o(" \u2014 "),oR=a("a"),xZe=o("SplinterTokenizer"),kZe=o(" or "),rR=a("a"),SZe=o("SplinterTokenizerFast"),RZe=o(" (Splinter model)"),BZe=l(),Ps=a("li"),nee=a("strong"),PZe=o("squeezebert"),$Ze=o(" \u2014 "),tR=a("a"),IZe=o("SqueezeBertTokenizer"),qZe=o(" or "),aR=a("a"),NZe=o("SqueezeBertTokenizerFast"),jZe=o(" (SqueezeBERT model)"),DZe=l(),$s=a("li"),see=a("strong"),GZe=o("t5"),OZe=o(" \u2014 "),nR=a("a"),VZe=o("T5Tokenizer"),XZe=o(" or "),sR=a("a"),zZe=o("T5TokenizerFast"),QZe=o(" (T5 model)"),WZe=l(),sh=a("li"),lee=a("strong"),HZe=o("tapas"),UZe=o(" \u2014 "),lR=a("a"),JZe=o("TapasTokenizer"),YZe=o(" (TAPAS model)"),KZe=l(),lh=a("li"),iee=a("strong"),ZZe=o("tapex"),eeo=o(" \u2014 "),iR=a("a"),oeo=o("TapexTokenizer"),reo=o(" (TAPEX model)"),teo=l(),ih=a("li"),dee=a("strong"),aeo=o("transfo-xl"),neo=o(" \u2014 "),dR=a("a"),seo=o("TransfoXLTokenizer"),leo=o(" (Transformer-XL model)"),ieo=l(),dh=a("li"),cee=a("strong"),deo=o("wav2vec2"),ceo=o(" \u2014 "),cR=a("a"),feo=o("Wav2Vec2CTCTokenizer"),meo=o(" (Wav2Vec2 model)"),geo=l(),ch=a("li"),fee=a("strong"),heo=o("wav2vec2_phoneme"),peo=o(" \u2014 "),fR=a("a"),_eo=o("Wav2Vec2PhonemeCTCTokenizer"),ueo=o(" (Wav2Vec2Phoneme model)"),beo=l(),Is=a("li"),mee=a("strong"),Feo=o("xglm"),veo=o(" \u2014 "),mR=a("a"),Teo=o("XGLMTokenizer"),Meo=o(" or "),gR=a("a"),Eeo=o("XGLMTokenizerFast"),Ceo=o(" (XGLM model)"),weo=l(),fh=a("li"),gee=a("strong"),Aeo=o("xlm"),yeo=o(" \u2014 "),hR=a("a"),Leo=o("XLMTokenizer"),xeo=o(" (XLM model)"),keo=l(),mh=a("li"),hee=a("strong"),Seo=o("xlm-prophetnet"),Reo=o(" \u2014 "),pR=a("a"),Beo=o("XLMProphetNetTokenizer"),Peo=o(" (XLMProphetNet model)"),$eo=l(),qs=a("li"),pee=a("strong"),Ieo=o("xlm-roberta"),qeo=o(" \u2014 "),_R=a("a"),Neo=o("XLMRobertaTokenizer"),jeo=o(" or "),uR=a("a"),Deo=o("XLMRobertaTokenizerFast"),Geo=o(" (XLM-RoBERTa model)"),Oeo=l(),Ns=a("li"),_ee=a("strong"),Veo=o("xlnet"),Xeo=o(" \u2014 "),bR=a("a"),zeo=o("XLNetTokenizer"),Qeo=o(" or "),FR=a("a"),Weo=o("XLNetTokenizerFast"),Heo=o(" (XLNet model)"),Ueo=l(),uee=a("p"),Jeo=o("Examples:"),Yeo=l(),f(RC.$$.fragment),Keo=l(),gh=a("div"),f(BC.$$.fragment),Zeo=l(),bee=a("p"),eoo=o("Register a new tokenizer in this mapping."),OSe=l(),Wi=a("h2"),hh=a("a"),Fee=a("span"),f(PC.$$.fragment),ooo=l(),vee=a("span"),roo=o("AutoFeatureExtractor"),VSe=l(),Ho=a("div"),f($C.$$.fragment),too=l(),IC=a("p"),aoo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),vR=a("a"),noo=o("AutoFeatureExtractor.from_pretrained()"),soo=o(" class method."),loo=l(),qC=a("p"),ioo=o("This class cannot be instantiated directly using "),Tee=a("code"),doo=o("__init__()"),coo=o(" (throws an error)."),foo=l(),$e=a("div"),f(NC.$$.fragment),moo=l(),Mee=a("p"),goo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),hoo=l(),Va=a("p"),poo=o("The feature extractor class to instantiate is selected based on the "),Eee=a("code"),_oo=o("model_type"),uoo=o(` property of the config object
(either passed as an argument or loaded from `),Cee=a("code"),boo=o("pretrained_model_name_or_path"),Foo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),wee=a("code"),voo=o("pretrained_model_name_or_path"),Too=o(":"),Moo=l(),te=a("ul"),ph=a("li"),Aee=a("strong"),Eoo=o("beit"),Coo=o(" \u2014 "),TR=a("a"),woo=o("BeitFeatureExtractor"),Aoo=o(" (BEiT model)"),yoo=l(),_h=a("li"),yee=a("strong"),Loo=o("clip"),xoo=o(" \u2014 "),MR=a("a"),koo=o("CLIPFeatureExtractor"),Soo=o(" (CLIP model)"),Roo=l(),uh=a("li"),Lee=a("strong"),Boo=o("convnext"),Poo=o(" \u2014 "),ER=a("a"),$oo=o("ConvNextFeatureExtractor"),Ioo=o(" (ConvNext model)"),qoo=l(),bh=a("li"),xee=a("strong"),Noo=o("deit"),joo=o(" \u2014 "),CR=a("a"),Doo=o("DeiTFeatureExtractor"),Goo=o(" (DeiT model)"),Ooo=l(),Fh=a("li"),kee=a("strong"),Voo=o("detr"),Xoo=o(" \u2014 "),wR=a("a"),zoo=o("DetrFeatureExtractor"),Qoo=o(" (DETR model)"),Woo=l(),vh=a("li"),See=a("strong"),Hoo=o("hubert"),Uoo=o(" \u2014 "),AR=a("a"),Joo=o("Wav2Vec2FeatureExtractor"),Yoo=o(" (Hubert model)"),Koo=l(),Th=a("li"),Ree=a("strong"),Zoo=o("layoutlmv2"),ero=o(" \u2014 "),yR=a("a"),oro=o("LayoutLMv2FeatureExtractor"),rro=o(" (LayoutLMv2 model)"),tro=l(),Mh=a("li"),Bee=a("strong"),aro=o("maskformer"),nro=o(" \u2014 "),LR=a("a"),sro=o("MaskFormerFeatureExtractor"),lro=o(" (MaskFormer model)"),iro=l(),Eh=a("li"),Pee=a("strong"),dro=o("perceiver"),cro=o(" \u2014 "),xR=a("a"),fro=o("PerceiverFeatureExtractor"),mro=o(" (Perceiver model)"),gro=l(),Ch=a("li"),$ee=a("strong"),hro=o("poolformer"),pro=o(" \u2014 "),kR=a("a"),_ro=o("PoolFormerFeatureExtractor"),uro=o(" (PoolFormer model)"),bro=l(),wh=a("li"),Iee=a("strong"),Fro=o("resnet"),vro=o(" \u2014 "),SR=a("a"),Tro=o("ConvNextFeatureExtractor"),Mro=o(" (ResNet model)"),Ero=l(),Ah=a("li"),qee=a("strong"),Cro=o("segformer"),wro=o(" \u2014 "),RR=a("a"),Aro=o("SegformerFeatureExtractor"),yro=o(" (SegFormer model)"),Lro=l(),yh=a("li"),Nee=a("strong"),xro=o("speech_to_text"),kro=o(" \u2014 "),BR=a("a"),Sro=o("Speech2TextFeatureExtractor"),Rro=o(" (Speech2Text model)"),Bro=l(),Lh=a("li"),jee=a("strong"),Pro=o("swin"),$ro=o(" \u2014 "),PR=a("a"),Iro=o("ViTFeatureExtractor"),qro=o(" (Swin model)"),Nro=l(),xh=a("li"),Dee=a("strong"),jro=o("van"),Dro=o(" \u2014 "),$R=a("a"),Gro=o("ConvNextFeatureExtractor"),Oro=o(" (VAN model)"),Vro=l(),kh=a("li"),Gee=a("strong"),Xro=o("vit"),zro=o(" \u2014 "),IR=a("a"),Qro=o("ViTFeatureExtractor"),Wro=o(" (ViT model)"),Hro=l(),Sh=a("li"),Oee=a("strong"),Uro=o("vit_mae"),Jro=o(" \u2014 "),qR=a("a"),Yro=o("ViTFeatureExtractor"),Kro=o(" (ViTMAE model)"),Zro=l(),Rh=a("li"),Vee=a("strong"),eto=o("wav2vec2"),oto=o(" \u2014 "),NR=a("a"),rto=o("Wav2Vec2FeatureExtractor"),tto=o(" (Wav2Vec2 model)"),ato=l(),f(Bh.$$.fragment),nto=l(),Xee=a("p"),sto=o("Examples:"),lto=l(),f(jC.$$.fragment),ito=l(),Ph=a("div"),f(DC.$$.fragment),dto=l(),zee=a("p"),cto=o("Register a new feature extractor for this class."),XSe=l(),Hi=a("h2"),$h=a("a"),Qee=a("span"),f(GC.$$.fragment),fto=l(),Wee=a("span"),mto=o("AutoProcessor"),zSe=l(),Uo=a("div"),f(OC.$$.fragment),gto=l(),VC=a("p"),hto=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),jR=a("a"),pto=o("AutoProcessor.from_pretrained()"),_to=o(" class method."),uto=l(),XC=a("p"),bto=o("This class cannot be instantiated directly using "),Hee=a("code"),Fto=o("__init__()"),vto=o(" (throws an error)."),Tto=l(),Ie=a("div"),f(zC.$$.fragment),Mto=l(),Uee=a("p"),Eto=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Cto=l(),Ui=a("p"),wto=o("The processor class to instantiate is selected based on the "),Jee=a("code"),Ato=o("model_type"),yto=o(` property of the config object (either
passed as an argument or loaded from `),Yee=a("code"),Lto=o("pretrained_model_name_or_path"),xto=o(" if possible):"),kto=l(),ke=a("ul"),Ih=a("li"),Kee=a("strong"),Sto=o("clip"),Rto=o(" \u2014 "),DR=a("a"),Bto=o("CLIPProcessor"),Pto=o(" (CLIP model)"),$to=l(),qh=a("li"),Zee=a("strong"),Ito=o("layoutlmv2"),qto=o(" \u2014 "),GR=a("a"),Nto=o("LayoutLMv2Processor"),jto=o(" (LayoutLMv2 model)"),Dto=l(),Nh=a("li"),eoe=a("strong"),Gto=o("layoutxlm"),Oto=o(" \u2014 "),OR=a("a"),Vto=o("LayoutXLMProcessor"),Xto=o(" (LayoutXLM model)"),zto=l(),jh=a("li"),ooe=a("strong"),Qto=o("speech_to_text"),Wto=o(" \u2014 "),VR=a("a"),Hto=o("Speech2TextProcessor"),Uto=o(" (Speech2Text model)"),Jto=l(),Dh=a("li"),roe=a("strong"),Yto=o("speech_to_text_2"),Kto=o(" \u2014 "),XR=a("a"),Zto=o("Speech2Text2Processor"),eao=o(" (Speech2Text2 model)"),oao=l(),Gh=a("li"),toe=a("strong"),rao=o("trocr"),tao=o(" \u2014 "),zR=a("a"),aao=o("TrOCRProcessor"),nao=o(" (TrOCR model)"),sao=l(),Oh=a("li"),aoe=a("strong"),lao=o("vision-text-dual-encoder"),iao=o(" \u2014 "),QR=a("a"),dao=o("VisionTextDualEncoderProcessor"),cao=o(" (VisionTextDualEncoder model)"),fao=l(),Vh=a("li"),noe=a("strong"),mao=o("wav2vec2"),gao=o(" \u2014 "),WR=a("a"),hao=o("Wav2Vec2Processor"),pao=o(" (Wav2Vec2 model)"),_ao=l(),f(Xh.$$.fragment),uao=l(),soe=a("p"),bao=o("Examples:"),Fao=l(),f(QC.$$.fragment),vao=l(),zh=a("div"),f(WC.$$.fragment),Tao=l(),loe=a("p"),Mao=o("Register a new processor for this class."),QSe=l(),Ji=a("h2"),Qh=a("a"),ioe=a("span"),f(HC.$$.fragment),Eao=l(),doe=a("span"),Cao=o("AutoModel"),WSe=l(),Jo=a("div"),f(UC.$$.fragment),wao=l(),Yi=a("p"),Aao=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),HR=a("a"),yao=o("from_pretrained()"),Lao=o(" class method or the "),UR=a("a"),xao=o("from_config()"),kao=o(` class
method.`),Sao=l(),JC=a("p"),Rao=o("This class cannot be instantiated directly using "),coe=a("code"),Bao=o("__init__()"),Pao=o(" (throws an error)."),$ao=l(),Xr=a("div"),f(YC.$$.fragment),Iao=l(),foe=a("p"),qao=o("Instantiates one of the base model classes of the library from a configuration."),Nao=l(),Ki=a("p"),jao=o(`Note:
Loading a model from its configuration file does `),moe=a("strong"),Dao=o("not"),Gao=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JR=a("a"),Oao=o("from_pretrained()"),Vao=o(" to load the model weights."),Xao=l(),goe=a("p"),zao=o("Examples:"),Qao=l(),f(KC.$$.fragment),Wao=l(),qe=a("div"),f(ZC.$$.fragment),Hao=l(),hoe=a("p"),Uao=o("Instantiate one of the base model classes of the library from a pretrained model."),Jao=l(),Xa=a("p"),Yao=o("The model class to instantiate is selected based on the "),poe=a("code"),Kao=o("model_type"),Zao=o(` property of the config object (either
passed as an argument or loaded from `),_oe=a("code"),eno=o("pretrained_model_name_or_path"),ono=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uoe=a("code"),rno=o("pretrained_model_name_or_path"),tno=o(":"),ano=l(),T=a("ul"),Wh=a("li"),boe=a("strong"),nno=o("albert"),sno=o(" \u2014 "),YR=a("a"),lno=o("AlbertModel"),ino=o(" (ALBERT model)"),dno=l(),Hh=a("li"),Foe=a("strong"),cno=o("bart"),fno=o(" \u2014 "),KR=a("a"),mno=o("BartModel"),gno=o(" (BART model)"),hno=l(),Uh=a("li"),voe=a("strong"),pno=o("beit"),_no=o(" \u2014 "),ZR=a("a"),uno=o("BeitModel"),bno=o(" (BEiT model)"),Fno=l(),Jh=a("li"),Toe=a("strong"),vno=o("bert"),Tno=o(" \u2014 "),eB=a("a"),Mno=o("BertModel"),Eno=o(" (BERT model)"),Cno=l(),Yh=a("li"),Moe=a("strong"),wno=o("bert-generation"),Ano=o(" \u2014 "),oB=a("a"),yno=o("BertGenerationEncoder"),Lno=o(" (Bert Generation model)"),xno=l(),Kh=a("li"),Eoe=a("strong"),kno=o("big_bird"),Sno=o(" \u2014 "),rB=a("a"),Rno=o("BigBirdModel"),Bno=o(" (BigBird model)"),Pno=l(),Zh=a("li"),Coe=a("strong"),$no=o("bigbird_pegasus"),Ino=o(" \u2014 "),tB=a("a"),qno=o("BigBirdPegasusModel"),Nno=o(" (BigBirdPegasus model)"),jno=l(),ep=a("li"),woe=a("strong"),Dno=o("blenderbot"),Gno=o(" \u2014 "),aB=a("a"),Ono=o("BlenderbotModel"),Vno=o(" (Blenderbot model)"),Xno=l(),op=a("li"),Aoe=a("strong"),zno=o("blenderbot-small"),Qno=o(" \u2014 "),nB=a("a"),Wno=o("BlenderbotSmallModel"),Hno=o(" (BlenderbotSmall model)"),Uno=l(),rp=a("li"),yoe=a("strong"),Jno=o("camembert"),Yno=o(" \u2014 "),sB=a("a"),Kno=o("CamembertModel"),Zno=o(" (CamemBERT model)"),eso=l(),tp=a("li"),Loe=a("strong"),oso=o("canine"),rso=o(" \u2014 "),lB=a("a"),tso=o("CanineModel"),aso=o(" (Canine model)"),nso=l(),ap=a("li"),xoe=a("strong"),sso=o("clip"),lso=o(" \u2014 "),iB=a("a"),iso=o("CLIPModel"),dso=o(" (CLIP model)"),cso=l(),np=a("li"),koe=a("strong"),fso=o("convbert"),mso=o(" \u2014 "),dB=a("a"),gso=o("ConvBertModel"),hso=o(" (ConvBERT model)"),pso=l(),sp=a("li"),Soe=a("strong"),_so=o("convnext"),uso=o(" \u2014 "),cB=a("a"),bso=o("ConvNextModel"),Fso=o(" (ConvNext model)"),vso=l(),lp=a("li"),Roe=a("strong"),Tso=o("ctrl"),Mso=o(" \u2014 "),fB=a("a"),Eso=o("CTRLModel"),Cso=o(" (CTRL model)"),wso=l(),ip=a("li"),Boe=a("strong"),Aso=o("data2vec-audio"),yso=o(" \u2014 "),mB=a("a"),Lso=o("Data2VecAudioModel"),xso=o(" (Data2VecAudio model)"),kso=l(),dp=a("li"),Poe=a("strong"),Sso=o("data2vec-text"),Rso=o(" \u2014 "),gB=a("a"),Bso=o("Data2VecTextModel"),Pso=o(" (Data2VecText model)"),$so=l(),cp=a("li"),$oe=a("strong"),Iso=o("deberta"),qso=o(" \u2014 "),hB=a("a"),Nso=o("DebertaModel"),jso=o(" (DeBERTa model)"),Dso=l(),fp=a("li"),Ioe=a("strong"),Gso=o("deberta-v2"),Oso=o(" \u2014 "),pB=a("a"),Vso=o("DebertaV2Model"),Xso=o(" (DeBERTa-v2 model)"),zso=l(),mp=a("li"),qoe=a("strong"),Qso=o("decision_transformer"),Wso=o(" \u2014 "),_B=a("a"),Hso=o("DecisionTransformerModel"),Uso=o(" (Decision Transformer model)"),Jso=l(),gp=a("li"),Noe=a("strong"),Yso=o("deit"),Kso=o(" \u2014 "),uB=a("a"),Zso=o("DeiTModel"),elo=o(" (DeiT model)"),olo=l(),hp=a("li"),joe=a("strong"),rlo=o("detr"),tlo=o(" \u2014 "),bB=a("a"),alo=o("DetrModel"),nlo=o(" (DETR model)"),slo=l(),pp=a("li"),Doe=a("strong"),llo=o("distilbert"),ilo=o(" \u2014 "),FB=a("a"),dlo=o("DistilBertModel"),clo=o(" (DistilBERT model)"),flo=l(),_p=a("li"),Goe=a("strong"),mlo=o("dpr"),glo=o(" \u2014 "),vB=a("a"),hlo=o("DPRQuestionEncoder"),plo=o(" (DPR model)"),_lo=l(),up=a("li"),Ooe=a("strong"),ulo=o("dpt"),blo=o(" \u2014 "),TB=a("a"),Flo=o("DPTModel"),vlo=o(" (DPT model)"),Tlo=l(),bp=a("li"),Voe=a("strong"),Mlo=o("electra"),Elo=o(" \u2014 "),MB=a("a"),Clo=o("ElectraModel"),wlo=o(" (ELECTRA model)"),Alo=l(),Fp=a("li"),Xoe=a("strong"),ylo=o("flaubert"),Llo=o(" \u2014 "),EB=a("a"),xlo=o("FlaubertModel"),klo=o(" (FlauBERT model)"),Slo=l(),vp=a("li"),zoe=a("strong"),Rlo=o("fnet"),Blo=o(" \u2014 "),CB=a("a"),Plo=o("FNetModel"),$lo=o(" (FNet model)"),Ilo=l(),Tp=a("li"),Qoe=a("strong"),qlo=o("fsmt"),Nlo=o(" \u2014 "),wB=a("a"),jlo=o("FSMTModel"),Dlo=o(" (FairSeq Machine-Translation model)"),Glo=l(),js=a("li"),Woe=a("strong"),Olo=o("funnel"),Vlo=o(" \u2014 "),AB=a("a"),Xlo=o("FunnelModel"),zlo=o(" or "),yB=a("a"),Qlo=o("FunnelBaseModel"),Wlo=o(" (Funnel Transformer model)"),Hlo=l(),Mp=a("li"),Hoe=a("strong"),Ulo=o("glpn"),Jlo=o(" \u2014 "),LB=a("a"),Ylo=o("GLPNModel"),Klo=o(" (GLPN model)"),Zlo=l(),Ep=a("li"),Uoe=a("strong"),eio=o("gpt2"),oio=o(" \u2014 "),xB=a("a"),rio=o("GPT2Model"),tio=o(" (OpenAI GPT-2 model)"),aio=l(),Cp=a("li"),Joe=a("strong"),nio=o("gpt_neo"),sio=o(" \u2014 "),kB=a("a"),lio=o("GPTNeoModel"),iio=o(" (GPT Neo model)"),dio=l(),wp=a("li"),Yoe=a("strong"),cio=o("gptj"),fio=o(" \u2014 "),SB=a("a"),mio=o("GPTJModel"),gio=o(" (GPT-J model)"),hio=l(),Ap=a("li"),Koe=a("strong"),pio=o("hubert"),_io=o(" \u2014 "),RB=a("a"),uio=o("HubertModel"),bio=o(" (Hubert model)"),Fio=l(),yp=a("li"),Zoe=a("strong"),vio=o("ibert"),Tio=o(" \u2014 "),BB=a("a"),Mio=o("IBertModel"),Eio=o(" (I-BERT model)"),Cio=l(),Lp=a("li"),ere=a("strong"),wio=o("imagegpt"),Aio=o(" \u2014 "),PB=a("a"),yio=o("ImageGPTModel"),Lio=o(" (ImageGPT model)"),xio=l(),xp=a("li"),ore=a("strong"),kio=o("layoutlm"),Sio=o(" \u2014 "),$B=a("a"),Rio=o("LayoutLMModel"),Bio=o(" (LayoutLM model)"),Pio=l(),kp=a("li"),rre=a("strong"),$io=o("layoutlmv2"),Iio=o(" \u2014 "),IB=a("a"),qio=o("LayoutLMv2Model"),Nio=o(" (LayoutLMv2 model)"),jio=l(),Sp=a("li"),tre=a("strong"),Dio=o("led"),Gio=o(" \u2014 "),qB=a("a"),Oio=o("LEDModel"),Vio=o(" (LED model)"),Xio=l(),Rp=a("li"),are=a("strong"),zio=o("longformer"),Qio=o(" \u2014 "),NB=a("a"),Wio=o("LongformerModel"),Hio=o(" (Longformer model)"),Uio=l(),Bp=a("li"),nre=a("strong"),Jio=o("luke"),Yio=o(" \u2014 "),jB=a("a"),Kio=o("LukeModel"),Zio=o(" (LUKE model)"),edo=l(),Pp=a("li"),sre=a("strong"),odo=o("lxmert"),rdo=o(" \u2014 "),DB=a("a"),tdo=o("LxmertModel"),ado=o(" (LXMERT model)"),ndo=l(),$p=a("li"),lre=a("strong"),sdo=o("m2m_100"),ldo=o(" \u2014 "),GB=a("a"),ido=o("M2M100Model"),ddo=o(" (M2M100 model)"),cdo=l(),Ip=a("li"),ire=a("strong"),fdo=o("marian"),mdo=o(" \u2014 "),OB=a("a"),gdo=o("MarianModel"),hdo=o(" (Marian model)"),pdo=l(),qp=a("li"),dre=a("strong"),_do=o("maskformer"),udo=o(" \u2014 "),VB=a("a"),bdo=o("MaskFormerModel"),Fdo=o(" (MaskFormer model)"),vdo=l(),Np=a("li"),cre=a("strong"),Tdo=o("mbart"),Mdo=o(" \u2014 "),XB=a("a"),Edo=o("MBartModel"),Cdo=o(" (mBART model)"),wdo=l(),jp=a("li"),fre=a("strong"),Ado=o("megatron-bert"),ydo=o(" \u2014 "),zB=a("a"),Ldo=o("MegatronBertModel"),xdo=o(" (MegatronBert model)"),kdo=l(),Dp=a("li"),mre=a("strong"),Sdo=o("mobilebert"),Rdo=o(" \u2014 "),QB=a("a"),Bdo=o("MobileBertModel"),Pdo=o(" (MobileBERT model)"),$do=l(),Gp=a("li"),gre=a("strong"),Ido=o("mpnet"),qdo=o(" \u2014 "),WB=a("a"),Ndo=o("MPNetModel"),jdo=o(" (MPNet model)"),Ddo=l(),Op=a("li"),hre=a("strong"),Gdo=o("mt5"),Odo=o(" \u2014 "),HB=a("a"),Vdo=o("MT5Model"),Xdo=o(" (mT5 model)"),zdo=l(),Vp=a("li"),pre=a("strong"),Qdo=o("nystromformer"),Wdo=o(" \u2014 "),UB=a("a"),Hdo=o("NystromformerModel"),Udo=o(" (Nystromformer model)"),Jdo=l(),Xp=a("li"),_re=a("strong"),Ydo=o("openai-gpt"),Kdo=o(" \u2014 "),JB=a("a"),Zdo=o("OpenAIGPTModel"),eco=o(" (OpenAI GPT model)"),oco=l(),zp=a("li"),ure=a("strong"),rco=o("pegasus"),tco=o(" \u2014 "),YB=a("a"),aco=o("PegasusModel"),nco=o(" (Pegasus model)"),sco=l(),Qp=a("li"),bre=a("strong"),lco=o("perceiver"),ico=o(" \u2014 "),KB=a("a"),dco=o("PerceiverModel"),cco=o(" (Perceiver model)"),fco=l(),Wp=a("li"),Fre=a("strong"),mco=o("plbart"),gco=o(" \u2014 "),ZB=a("a"),hco=o("PLBartModel"),pco=o(" (PLBart model)"),_co=l(),Hp=a("li"),vre=a("strong"),uco=o("poolformer"),bco=o(" \u2014 "),eP=a("a"),Fco=o("PoolFormerModel"),vco=o(" (PoolFormer model)"),Tco=l(),Up=a("li"),Tre=a("strong"),Mco=o("prophetnet"),Eco=o(" \u2014 "),oP=a("a"),Cco=o("ProphetNetModel"),wco=o(" (ProphetNet model)"),Aco=l(),Jp=a("li"),Mre=a("strong"),yco=o("qdqbert"),Lco=o(" \u2014 "),rP=a("a"),xco=o("QDQBertModel"),kco=o(" (QDQBert model)"),Sco=l(),Yp=a("li"),Ere=a("strong"),Rco=o("reformer"),Bco=o(" \u2014 "),tP=a("a"),Pco=o("ReformerModel"),$co=o(" (Reformer model)"),Ico=l(),Kp=a("li"),Cre=a("strong"),qco=o("rembert"),Nco=o(" \u2014 "),aP=a("a"),jco=o("RemBertModel"),Dco=o(" (RemBERT model)"),Gco=l(),Zp=a("li"),wre=a("strong"),Oco=o("resnet"),Vco=o(" \u2014 "),nP=a("a"),Xco=o("ResNetModel"),zco=o(" (ResNet model)"),Qco=l(),e_=a("li"),Are=a("strong"),Wco=o("retribert"),Hco=o(" \u2014 "),sP=a("a"),Uco=o("RetriBertModel"),Jco=o(" (RetriBERT model)"),Yco=l(),o_=a("li"),yre=a("strong"),Kco=o("roberta"),Zco=o(" \u2014 "),lP=a("a"),efo=o("RobertaModel"),ofo=o(" (RoBERTa model)"),rfo=l(),r_=a("li"),Lre=a("strong"),tfo=o("roformer"),afo=o(" \u2014 "),iP=a("a"),nfo=o("RoFormerModel"),sfo=o(" (RoFormer model)"),lfo=l(),t_=a("li"),xre=a("strong"),ifo=o("segformer"),dfo=o(" \u2014 "),dP=a("a"),cfo=o("SegformerModel"),ffo=o(" (SegFormer model)"),mfo=l(),a_=a("li"),kre=a("strong"),gfo=o("sew"),hfo=o(" \u2014 "),cP=a("a"),pfo=o("SEWModel"),_fo=o(" (SEW model)"),ufo=l(),n_=a("li"),Sre=a("strong"),bfo=o("sew-d"),Ffo=o(" \u2014 "),fP=a("a"),vfo=o("SEWDModel"),Tfo=o(" (SEW-D model)"),Mfo=l(),s_=a("li"),Rre=a("strong"),Efo=o("speech_to_text"),Cfo=o(" \u2014 "),mP=a("a"),wfo=o("Speech2TextModel"),Afo=o(" (Speech2Text model)"),yfo=l(),l_=a("li"),Bre=a("strong"),Lfo=o("splinter"),xfo=o(" \u2014 "),gP=a("a"),kfo=o("SplinterModel"),Sfo=o(" (Splinter model)"),Rfo=l(),i_=a("li"),Pre=a("strong"),Bfo=o("squeezebert"),Pfo=o(" \u2014 "),hP=a("a"),$fo=o("SqueezeBertModel"),Ifo=o(" (SqueezeBERT model)"),qfo=l(),d_=a("li"),$re=a("strong"),Nfo=o("swin"),jfo=o(" \u2014 "),pP=a("a"),Dfo=o("SwinModel"),Gfo=o(" (Swin model)"),Ofo=l(),c_=a("li"),Ire=a("strong"),Vfo=o("t5"),Xfo=o(" \u2014 "),_P=a("a"),zfo=o("T5Model"),Qfo=o(" (T5 model)"),Wfo=l(),f_=a("li"),qre=a("strong"),Hfo=o("tapas"),Ufo=o(" \u2014 "),uP=a("a"),Jfo=o("TapasModel"),Yfo=o(" (TAPAS model)"),Kfo=l(),m_=a("li"),Nre=a("strong"),Zfo=o("transfo-xl"),emo=o(" \u2014 "),bP=a("a"),omo=o("TransfoXLModel"),rmo=o(" (Transformer-XL model)"),tmo=l(),g_=a("li"),jre=a("strong"),amo=o("unispeech"),nmo=o(" \u2014 "),FP=a("a"),smo=o("UniSpeechModel"),lmo=o(" (UniSpeech model)"),imo=l(),h_=a("li"),Dre=a("strong"),dmo=o("unispeech-sat"),cmo=o(" \u2014 "),vP=a("a"),fmo=o("UniSpeechSatModel"),mmo=o(" (UniSpeechSat model)"),gmo=l(),p_=a("li"),Gre=a("strong"),hmo=o("van"),pmo=o(" \u2014 "),TP=a("a"),_mo=o("VanModel"),umo=o(" (VAN model)"),bmo=l(),__=a("li"),Ore=a("strong"),Fmo=o("vilt"),vmo=o(" \u2014 "),MP=a("a"),Tmo=o("ViltModel"),Mmo=o(" (ViLT model)"),Emo=l(),u_=a("li"),Vre=a("strong"),Cmo=o("vision-text-dual-encoder"),wmo=o(" \u2014 "),EP=a("a"),Amo=o("VisionTextDualEncoderModel"),ymo=o(" (VisionTextDualEncoder model)"),Lmo=l(),b_=a("li"),Xre=a("strong"),xmo=o("visual_bert"),kmo=o(" \u2014 "),CP=a("a"),Smo=o("VisualBertModel"),Rmo=o(" (VisualBert model)"),Bmo=l(),F_=a("li"),zre=a("strong"),Pmo=o("vit"),$mo=o(" \u2014 "),wP=a("a"),Imo=o("ViTModel"),qmo=o(" (ViT model)"),Nmo=l(),v_=a("li"),Qre=a("strong"),jmo=o("vit_mae"),Dmo=o(" \u2014 "),AP=a("a"),Gmo=o("ViTMAEModel"),Omo=o(" (ViTMAE model)"),Vmo=l(),T_=a("li"),Wre=a("strong"),Xmo=o("wav2vec2"),zmo=o(" \u2014 "),yP=a("a"),Qmo=o("Wav2Vec2Model"),Wmo=o(" (Wav2Vec2 model)"),Hmo=l(),M_=a("li"),Hre=a("strong"),Umo=o("wavlm"),Jmo=o(" \u2014 "),LP=a("a"),Ymo=o("WavLMModel"),Kmo=o(" (WavLM model)"),Zmo=l(),E_=a("li"),Ure=a("strong"),ego=o("xglm"),ogo=o(" \u2014 "),xP=a("a"),rgo=o("XGLMModel"),tgo=o(" (XGLM model)"),ago=l(),C_=a("li"),Jre=a("strong"),ngo=o("xlm"),sgo=o(" \u2014 "),kP=a("a"),lgo=o("XLMModel"),igo=o(" (XLM model)"),dgo=l(),w_=a("li"),Yre=a("strong"),cgo=o("xlm-prophetnet"),fgo=o(" \u2014 "),SP=a("a"),mgo=o("XLMProphetNetModel"),ggo=o(" (XLMProphetNet model)"),hgo=l(),A_=a("li"),Kre=a("strong"),pgo=o("xlm-roberta"),_go=o(" \u2014 "),RP=a("a"),ugo=o("XLMRobertaModel"),bgo=o(" (XLM-RoBERTa model)"),Fgo=l(),y_=a("li"),Zre=a("strong"),vgo=o("xlm-roberta-xl"),Tgo=o(" \u2014 "),BP=a("a"),Mgo=o("XLMRobertaXLModel"),Ego=o(" (XLM-RoBERTa-XL model)"),Cgo=l(),L_=a("li"),ete=a("strong"),wgo=o("xlnet"),Ago=o(" \u2014 "),PP=a("a"),ygo=o("XLNetModel"),Lgo=o(" (XLNet model)"),xgo=l(),x_=a("li"),ote=a("strong"),kgo=o("yoso"),Sgo=o(" \u2014 "),$P=a("a"),Rgo=o("YosoModel"),Bgo=o(" (YOSO model)"),Pgo=l(),k_=a("p"),$go=o("The model is set in evaluation mode by default using "),rte=a("code"),Igo=o("model.eval()"),qgo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tte=a("code"),Ngo=o("model.train()"),jgo=l(),ate=a("p"),Dgo=o("Examples:"),Ggo=l(),f(e5.$$.fragment),HSe=l(),Zi=a("h2"),S_=a("a"),nte=a("span"),f(o5.$$.fragment),Ogo=l(),ste=a("span"),Vgo=o("AutoModelForPreTraining"),USe=l(),Yo=a("div"),f(r5.$$.fragment),Xgo=l(),ed=a("p"),zgo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),IP=a("a"),Qgo=o("from_pretrained()"),Wgo=o(" class method or the "),qP=a("a"),Hgo=o("from_config()"),Ugo=o(` class
method.`),Jgo=l(),t5=a("p"),Ygo=o("This class cannot be instantiated directly using "),lte=a("code"),Kgo=o("__init__()"),Zgo=o(" (throws an error)."),eho=l(),zr=a("div"),f(a5.$$.fragment),oho=l(),ite=a("p"),rho=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),tho=l(),od=a("p"),aho=o(`Note:
Loading a model from its configuration file does `),dte=a("strong"),nho=o("not"),sho=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NP=a("a"),lho=o("from_pretrained()"),iho=o(" to load the model weights."),dho=l(),cte=a("p"),cho=o("Examples:"),fho=l(),f(n5.$$.fragment),mho=l(),Ne=a("div"),f(s5.$$.fragment),gho=l(),fte=a("p"),hho=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),pho=l(),za=a("p"),_ho=o("The model class to instantiate is selected based on the "),mte=a("code"),uho=o("model_type"),bho=o(` property of the config object (either
passed as an argument or loaded from `),gte=a("code"),Fho=o("pretrained_model_name_or_path"),vho=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hte=a("code"),Tho=o("pretrained_model_name_or_path"),Mho=o(":"),Eho=l(),S=a("ul"),R_=a("li"),pte=a("strong"),Cho=o("albert"),who=o(" \u2014 "),jP=a("a"),Aho=o("AlbertForPreTraining"),yho=o(" (ALBERT model)"),Lho=l(),B_=a("li"),_te=a("strong"),xho=o("bart"),kho=o(" \u2014 "),DP=a("a"),Sho=o("BartForConditionalGeneration"),Rho=o(" (BART model)"),Bho=l(),P_=a("li"),ute=a("strong"),Pho=o("bert"),$ho=o(" \u2014 "),GP=a("a"),Iho=o("BertForPreTraining"),qho=o(" (BERT model)"),Nho=l(),$_=a("li"),bte=a("strong"),jho=o("big_bird"),Dho=o(" \u2014 "),OP=a("a"),Gho=o("BigBirdForPreTraining"),Oho=o(" (BigBird model)"),Vho=l(),I_=a("li"),Fte=a("strong"),Xho=o("camembert"),zho=o(" \u2014 "),VP=a("a"),Qho=o("CamembertForMaskedLM"),Who=o(" (CamemBERT model)"),Hho=l(),q_=a("li"),vte=a("strong"),Uho=o("ctrl"),Jho=o(" \u2014 "),XP=a("a"),Yho=o("CTRLLMHeadModel"),Kho=o(" (CTRL model)"),Zho=l(),N_=a("li"),Tte=a("strong"),epo=o("data2vec-text"),opo=o(" \u2014 "),zP=a("a"),rpo=o("Data2VecTextForMaskedLM"),tpo=o(" (Data2VecText model)"),apo=l(),j_=a("li"),Mte=a("strong"),npo=o("deberta"),spo=o(" \u2014 "),QP=a("a"),lpo=o("DebertaForMaskedLM"),ipo=o(" (DeBERTa model)"),dpo=l(),D_=a("li"),Ete=a("strong"),cpo=o("deberta-v2"),fpo=o(" \u2014 "),WP=a("a"),mpo=o("DebertaV2ForMaskedLM"),gpo=o(" (DeBERTa-v2 model)"),hpo=l(),G_=a("li"),Cte=a("strong"),ppo=o("distilbert"),_po=o(" \u2014 "),HP=a("a"),upo=o("DistilBertForMaskedLM"),bpo=o(" (DistilBERT model)"),Fpo=l(),O_=a("li"),wte=a("strong"),vpo=o("electra"),Tpo=o(" \u2014 "),UP=a("a"),Mpo=o("ElectraForPreTraining"),Epo=o(" (ELECTRA model)"),Cpo=l(),V_=a("li"),Ate=a("strong"),wpo=o("flaubert"),Apo=o(" \u2014 "),JP=a("a"),ypo=o("FlaubertWithLMHeadModel"),Lpo=o(" (FlauBERT model)"),xpo=l(),X_=a("li"),yte=a("strong"),kpo=o("fnet"),Spo=o(" \u2014 "),YP=a("a"),Rpo=o("FNetForPreTraining"),Bpo=o(" (FNet model)"),Ppo=l(),z_=a("li"),Lte=a("strong"),$po=o("fsmt"),Ipo=o(" \u2014 "),KP=a("a"),qpo=o("FSMTForConditionalGeneration"),Npo=o(" (FairSeq Machine-Translation model)"),jpo=l(),Q_=a("li"),xte=a("strong"),Dpo=o("funnel"),Gpo=o(" \u2014 "),ZP=a("a"),Opo=o("FunnelForPreTraining"),Vpo=o(" (Funnel Transformer model)"),Xpo=l(),W_=a("li"),kte=a("strong"),zpo=o("gpt2"),Qpo=o(" \u2014 "),e$=a("a"),Wpo=o("GPT2LMHeadModel"),Hpo=o(" (OpenAI GPT-2 model)"),Upo=l(),H_=a("li"),Ste=a("strong"),Jpo=o("ibert"),Ypo=o(" \u2014 "),o$=a("a"),Kpo=o("IBertForMaskedLM"),Zpo=o(" (I-BERT model)"),e_o=l(),U_=a("li"),Rte=a("strong"),o_o=o("layoutlm"),r_o=o(" \u2014 "),r$=a("a"),t_o=o("LayoutLMForMaskedLM"),a_o=o(" (LayoutLM model)"),n_o=l(),J_=a("li"),Bte=a("strong"),s_o=o("longformer"),l_o=o(" \u2014 "),t$=a("a"),i_o=o("LongformerForMaskedLM"),d_o=o(" (Longformer model)"),c_o=l(),Y_=a("li"),Pte=a("strong"),f_o=o("lxmert"),m_o=o(" \u2014 "),a$=a("a"),g_o=o("LxmertForPreTraining"),h_o=o(" (LXMERT model)"),p_o=l(),K_=a("li"),$te=a("strong"),__o=o("megatron-bert"),u_o=o(" \u2014 "),n$=a("a"),b_o=o("MegatronBertForPreTraining"),F_o=o(" (MegatronBert model)"),v_o=l(),Z_=a("li"),Ite=a("strong"),T_o=o("mobilebert"),M_o=o(" \u2014 "),s$=a("a"),E_o=o("MobileBertForPreTraining"),C_o=o(" (MobileBERT model)"),w_o=l(),eu=a("li"),qte=a("strong"),A_o=o("mpnet"),y_o=o(" \u2014 "),l$=a("a"),L_o=o("MPNetForMaskedLM"),x_o=o(" (MPNet model)"),k_o=l(),ou=a("li"),Nte=a("strong"),S_o=o("openai-gpt"),R_o=o(" \u2014 "),i$=a("a"),B_o=o("OpenAIGPTLMHeadModel"),P_o=o(" (OpenAI GPT model)"),$_o=l(),ru=a("li"),jte=a("strong"),I_o=o("retribert"),q_o=o(" \u2014 "),d$=a("a"),N_o=o("RetriBertModel"),j_o=o(" (RetriBERT model)"),D_o=l(),tu=a("li"),Dte=a("strong"),G_o=o("roberta"),O_o=o(" \u2014 "),c$=a("a"),V_o=o("RobertaForMaskedLM"),X_o=o(" (RoBERTa model)"),z_o=l(),au=a("li"),Gte=a("strong"),Q_o=o("squeezebert"),W_o=o(" \u2014 "),f$=a("a"),H_o=o("SqueezeBertForMaskedLM"),U_o=o(" (SqueezeBERT model)"),J_o=l(),nu=a("li"),Ote=a("strong"),Y_o=o("t5"),K_o=o(" \u2014 "),m$=a("a"),Z_o=o("T5ForConditionalGeneration"),euo=o(" (T5 model)"),ouo=l(),su=a("li"),Vte=a("strong"),ruo=o("tapas"),tuo=o(" \u2014 "),g$=a("a"),auo=o("TapasForMaskedLM"),nuo=o(" (TAPAS model)"),suo=l(),lu=a("li"),Xte=a("strong"),luo=o("transfo-xl"),iuo=o(" \u2014 "),h$=a("a"),duo=o("TransfoXLLMHeadModel"),cuo=o(" (Transformer-XL model)"),fuo=l(),iu=a("li"),zte=a("strong"),muo=o("unispeech"),guo=o(" \u2014 "),p$=a("a"),huo=o("UniSpeechForPreTraining"),puo=o(" (UniSpeech model)"),_uo=l(),du=a("li"),Qte=a("strong"),uuo=o("unispeech-sat"),buo=o(" \u2014 "),_$=a("a"),Fuo=o("UniSpeechSatForPreTraining"),vuo=o(" (UniSpeechSat model)"),Tuo=l(),cu=a("li"),Wte=a("strong"),Muo=o("visual_bert"),Euo=o(" \u2014 "),u$=a("a"),Cuo=o("VisualBertForPreTraining"),wuo=o(" (VisualBert model)"),Auo=l(),fu=a("li"),Hte=a("strong"),yuo=o("vit_mae"),Luo=o(" \u2014 "),b$=a("a"),xuo=o("ViTMAEForPreTraining"),kuo=o(" (ViTMAE model)"),Suo=l(),mu=a("li"),Ute=a("strong"),Ruo=o("wav2vec2"),Buo=o(" \u2014 "),F$=a("a"),Puo=o("Wav2Vec2ForPreTraining"),$uo=o(" (Wav2Vec2 model)"),Iuo=l(),gu=a("li"),Jte=a("strong"),quo=o("xlm"),Nuo=o(" \u2014 "),v$=a("a"),juo=o("XLMWithLMHeadModel"),Duo=o(" (XLM model)"),Guo=l(),hu=a("li"),Yte=a("strong"),Ouo=o("xlm-roberta"),Vuo=o(" \u2014 "),T$=a("a"),Xuo=o("XLMRobertaForMaskedLM"),zuo=o(" (XLM-RoBERTa model)"),Quo=l(),pu=a("li"),Kte=a("strong"),Wuo=o("xlm-roberta-xl"),Huo=o(" \u2014 "),M$=a("a"),Uuo=o("XLMRobertaXLForMaskedLM"),Juo=o(" (XLM-RoBERTa-XL model)"),Yuo=l(),_u=a("li"),Zte=a("strong"),Kuo=o("xlnet"),Zuo=o(" \u2014 "),E$=a("a"),e1o=o("XLNetLMHeadModel"),o1o=o(" (XLNet model)"),r1o=l(),uu=a("p"),t1o=o("The model is set in evaluation mode by default using "),eae=a("code"),a1o=o("model.eval()"),n1o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),oae=a("code"),s1o=o("model.train()"),l1o=l(),rae=a("p"),i1o=o("Examples:"),d1o=l(),f(l5.$$.fragment),JSe=l(),rd=a("h2"),bu=a("a"),tae=a("span"),f(i5.$$.fragment),c1o=l(),aae=a("span"),f1o=o("AutoModelForCausalLM"),YSe=l(),Ko=a("div"),f(d5.$$.fragment),m1o=l(),td=a("p"),g1o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),C$=a("a"),h1o=o("from_pretrained()"),p1o=o(" class method or the "),w$=a("a"),_1o=o("from_config()"),u1o=o(` class
method.`),b1o=l(),c5=a("p"),F1o=o("This class cannot be instantiated directly using "),nae=a("code"),v1o=o("__init__()"),T1o=o(" (throws an error)."),M1o=l(),Qr=a("div"),f(f5.$$.fragment),E1o=l(),sae=a("p"),C1o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),w1o=l(),ad=a("p"),A1o=o(`Note:
Loading a model from its configuration file does `),lae=a("strong"),y1o=o("not"),L1o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),A$=a("a"),x1o=o("from_pretrained()"),k1o=o(" to load the model weights."),S1o=l(),iae=a("p"),R1o=o("Examples:"),B1o=l(),f(m5.$$.fragment),P1o=l(),je=a("div"),f(g5.$$.fragment),$1o=l(),dae=a("p"),I1o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),q1o=l(),Qa=a("p"),N1o=o("The model class to instantiate is selected based on the "),cae=a("code"),j1o=o("model_type"),D1o=o(` property of the config object (either
passed as an argument or loaded from `),fae=a("code"),G1o=o("pretrained_model_name_or_path"),O1o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mae=a("code"),V1o=o("pretrained_model_name_or_path"),X1o=o(":"),z1o=l(),$=a("ul"),Fu=a("li"),gae=a("strong"),Q1o=o("bart"),W1o=o(" \u2014 "),y$=a("a"),H1o=o("BartForCausalLM"),U1o=o(" (BART model)"),J1o=l(),vu=a("li"),hae=a("strong"),Y1o=o("bert"),K1o=o(" \u2014 "),L$=a("a"),Z1o=o("BertLMHeadModel"),e4o=o(" (BERT model)"),o4o=l(),Tu=a("li"),pae=a("strong"),r4o=o("bert-generation"),t4o=o(" \u2014 "),x$=a("a"),a4o=o("BertGenerationDecoder"),n4o=o(" (Bert Generation model)"),s4o=l(),Mu=a("li"),_ae=a("strong"),l4o=o("big_bird"),i4o=o(" \u2014 "),k$=a("a"),d4o=o("BigBirdForCausalLM"),c4o=o(" (BigBird model)"),f4o=l(),Eu=a("li"),uae=a("strong"),m4o=o("bigbird_pegasus"),g4o=o(" \u2014 "),S$=a("a"),h4o=o("BigBirdPegasusForCausalLM"),p4o=o(" (BigBirdPegasus model)"),_4o=l(),Cu=a("li"),bae=a("strong"),u4o=o("blenderbot"),b4o=o(" \u2014 "),R$=a("a"),F4o=o("BlenderbotForCausalLM"),v4o=o(" (Blenderbot model)"),T4o=l(),wu=a("li"),Fae=a("strong"),M4o=o("blenderbot-small"),E4o=o(" \u2014 "),B$=a("a"),C4o=o("BlenderbotSmallForCausalLM"),w4o=o(" (BlenderbotSmall model)"),A4o=l(),Au=a("li"),vae=a("strong"),y4o=o("camembert"),L4o=o(" \u2014 "),P$=a("a"),x4o=o("CamembertForCausalLM"),k4o=o(" (CamemBERT model)"),S4o=l(),yu=a("li"),Tae=a("strong"),R4o=o("ctrl"),B4o=o(" \u2014 "),$$=a("a"),P4o=o("CTRLLMHeadModel"),$4o=o(" (CTRL model)"),I4o=l(),Lu=a("li"),Mae=a("strong"),q4o=o("data2vec-text"),N4o=o(" \u2014 "),I$=a("a"),j4o=o("Data2VecTextForCausalLM"),D4o=o(" (Data2VecText model)"),G4o=l(),xu=a("li"),Eae=a("strong"),O4o=o("electra"),V4o=o(" \u2014 "),q$=a("a"),X4o=o("ElectraForCausalLM"),z4o=o(" (ELECTRA model)"),Q4o=l(),ku=a("li"),Cae=a("strong"),W4o=o("gpt2"),H4o=o(" \u2014 "),N$=a("a"),U4o=o("GPT2LMHeadModel"),J4o=o(" (OpenAI GPT-2 model)"),Y4o=l(),Su=a("li"),wae=a("strong"),K4o=o("gpt_neo"),Z4o=o(" \u2014 "),j$=a("a"),ebo=o("GPTNeoForCausalLM"),obo=o(" (GPT Neo model)"),rbo=l(),Ru=a("li"),Aae=a("strong"),tbo=o("gptj"),abo=o(" \u2014 "),D$=a("a"),nbo=o("GPTJForCausalLM"),sbo=o(" (GPT-J model)"),lbo=l(),Bu=a("li"),yae=a("strong"),ibo=o("marian"),dbo=o(" \u2014 "),G$=a("a"),cbo=o("MarianForCausalLM"),fbo=o(" (Marian model)"),mbo=l(),Pu=a("li"),Lae=a("strong"),gbo=o("mbart"),hbo=o(" \u2014 "),O$=a("a"),pbo=o("MBartForCausalLM"),_bo=o(" (mBART model)"),ubo=l(),$u=a("li"),xae=a("strong"),bbo=o("megatron-bert"),Fbo=o(" \u2014 "),V$=a("a"),vbo=o("MegatronBertForCausalLM"),Tbo=o(" (MegatronBert model)"),Mbo=l(),Iu=a("li"),kae=a("strong"),Ebo=o("openai-gpt"),Cbo=o(" \u2014 "),X$=a("a"),wbo=o("OpenAIGPTLMHeadModel"),Abo=o(" (OpenAI GPT model)"),ybo=l(),qu=a("li"),Sae=a("strong"),Lbo=o("pegasus"),xbo=o(" \u2014 "),z$=a("a"),kbo=o("PegasusForCausalLM"),Sbo=o(" (Pegasus model)"),Rbo=l(),Nu=a("li"),Rae=a("strong"),Bbo=o("plbart"),Pbo=o(" \u2014 "),Q$=a("a"),$bo=o("PLBartForCausalLM"),Ibo=o(" (PLBart model)"),qbo=l(),ju=a("li"),Bae=a("strong"),Nbo=o("prophetnet"),jbo=o(" \u2014 "),W$=a("a"),Dbo=o("ProphetNetForCausalLM"),Gbo=o(" (ProphetNet model)"),Obo=l(),Du=a("li"),Pae=a("strong"),Vbo=o("qdqbert"),Xbo=o(" \u2014 "),H$=a("a"),zbo=o("QDQBertLMHeadModel"),Qbo=o(" (QDQBert model)"),Wbo=l(),Gu=a("li"),$ae=a("strong"),Hbo=o("reformer"),Ubo=o(" \u2014 "),U$=a("a"),Jbo=o("ReformerModelWithLMHead"),Ybo=o(" (Reformer model)"),Kbo=l(),Ou=a("li"),Iae=a("strong"),Zbo=o("rembert"),e3o=o(" \u2014 "),J$=a("a"),o3o=o("RemBertForCausalLM"),r3o=o(" (RemBERT model)"),t3o=l(),Vu=a("li"),qae=a("strong"),a3o=o("roberta"),n3o=o(" \u2014 "),Y$=a("a"),s3o=o("RobertaForCausalLM"),l3o=o(" (RoBERTa model)"),i3o=l(),Xu=a("li"),Nae=a("strong"),d3o=o("roformer"),c3o=o(" \u2014 "),K$=a("a"),f3o=o("RoFormerForCausalLM"),m3o=o(" (RoFormer model)"),g3o=l(),zu=a("li"),jae=a("strong"),h3o=o("speech_to_text_2"),p3o=o(" \u2014 "),Z$=a("a"),_3o=o("Speech2Text2ForCausalLM"),u3o=o(" (Speech2Text2 model)"),b3o=l(),Qu=a("li"),Dae=a("strong"),F3o=o("transfo-xl"),v3o=o(" \u2014 "),eI=a("a"),T3o=o("TransfoXLLMHeadModel"),M3o=o(" (Transformer-XL model)"),E3o=l(),Wu=a("li"),Gae=a("strong"),C3o=o("trocr"),w3o=o(" \u2014 "),oI=a("a"),A3o=o("TrOCRForCausalLM"),y3o=o(" (TrOCR model)"),L3o=l(),Hu=a("li"),Oae=a("strong"),x3o=o("xglm"),k3o=o(" \u2014 "),rI=a("a"),S3o=o("XGLMForCausalLM"),R3o=o(" (XGLM model)"),B3o=l(),Uu=a("li"),Vae=a("strong"),P3o=o("xlm"),$3o=o(" \u2014 "),tI=a("a"),I3o=o("XLMWithLMHeadModel"),q3o=o(" (XLM model)"),N3o=l(),Ju=a("li"),Xae=a("strong"),j3o=o("xlm-prophetnet"),D3o=o(" \u2014 "),aI=a("a"),G3o=o("XLMProphetNetForCausalLM"),O3o=o(" (XLMProphetNet model)"),V3o=l(),Yu=a("li"),zae=a("strong"),X3o=o("xlm-roberta"),z3o=o(" \u2014 "),nI=a("a"),Q3o=o("XLMRobertaForCausalLM"),W3o=o(" (XLM-RoBERTa model)"),H3o=l(),Ku=a("li"),Qae=a("strong"),U3o=o("xlm-roberta-xl"),J3o=o(" \u2014 "),sI=a("a"),Y3o=o("XLMRobertaXLForCausalLM"),K3o=o(" (XLM-RoBERTa-XL model)"),Z3o=l(),Zu=a("li"),Wae=a("strong"),e2o=o("xlnet"),o2o=o(" \u2014 "),lI=a("a"),r2o=o("XLNetLMHeadModel"),t2o=o(" (XLNet model)"),a2o=l(),e1=a("p"),n2o=o("The model is set in evaluation mode by default using "),Hae=a("code"),s2o=o("model.eval()"),l2o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Uae=a("code"),i2o=o("model.train()"),d2o=l(),Jae=a("p"),c2o=o("Examples:"),f2o=l(),f(h5.$$.fragment),KSe=l(),nd=a("h2"),o1=a("a"),Yae=a("span"),f(p5.$$.fragment),m2o=l(),Kae=a("span"),g2o=o("AutoModelForMaskedLM"),ZSe=l(),Zo=a("div"),f(_5.$$.fragment),h2o=l(),sd=a("p"),p2o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),iI=a("a"),_2o=o("from_pretrained()"),u2o=o(" class method or the "),dI=a("a"),b2o=o("from_config()"),F2o=o(` class
method.`),v2o=l(),u5=a("p"),T2o=o("This class cannot be instantiated directly using "),Zae=a("code"),M2o=o("__init__()"),E2o=o(" (throws an error)."),C2o=l(),Wr=a("div"),f(b5.$$.fragment),w2o=l(),ene=a("p"),A2o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),y2o=l(),ld=a("p"),L2o=o(`Note:
Loading a model from its configuration file does `),one=a("strong"),x2o=o("not"),k2o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cI=a("a"),S2o=o("from_pretrained()"),R2o=o(" to load the model weights."),B2o=l(),rne=a("p"),P2o=o("Examples:"),$2o=l(),f(F5.$$.fragment),I2o=l(),De=a("div"),f(v5.$$.fragment),q2o=l(),tne=a("p"),N2o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),j2o=l(),Wa=a("p"),D2o=o("The model class to instantiate is selected based on the "),ane=a("code"),G2o=o("model_type"),O2o=o(` property of the config object (either
passed as an argument or loaded from `),nne=a("code"),V2o=o("pretrained_model_name_or_path"),X2o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sne=a("code"),z2o=o("pretrained_model_name_or_path"),Q2o=o(":"),W2o=l(),I=a("ul"),r1=a("li"),lne=a("strong"),H2o=o("albert"),U2o=o(" \u2014 "),fI=a("a"),J2o=o("AlbertForMaskedLM"),Y2o=o(" (ALBERT model)"),K2o=l(),t1=a("li"),ine=a("strong"),Z2o=o("bart"),eFo=o(" \u2014 "),mI=a("a"),oFo=o("BartForConditionalGeneration"),rFo=o(" (BART model)"),tFo=l(),a1=a("li"),dne=a("strong"),aFo=o("bert"),nFo=o(" \u2014 "),gI=a("a"),sFo=o("BertForMaskedLM"),lFo=o(" (BERT model)"),iFo=l(),n1=a("li"),cne=a("strong"),dFo=o("big_bird"),cFo=o(" \u2014 "),hI=a("a"),fFo=o("BigBirdForMaskedLM"),mFo=o(" (BigBird model)"),gFo=l(),s1=a("li"),fne=a("strong"),hFo=o("camembert"),pFo=o(" \u2014 "),pI=a("a"),_Fo=o("CamembertForMaskedLM"),uFo=o(" (CamemBERT model)"),bFo=l(),l1=a("li"),mne=a("strong"),FFo=o("convbert"),vFo=o(" \u2014 "),_I=a("a"),TFo=o("ConvBertForMaskedLM"),MFo=o(" (ConvBERT model)"),EFo=l(),i1=a("li"),gne=a("strong"),CFo=o("data2vec-text"),wFo=o(" \u2014 "),uI=a("a"),AFo=o("Data2VecTextForMaskedLM"),yFo=o(" (Data2VecText model)"),LFo=l(),d1=a("li"),hne=a("strong"),xFo=o("deberta"),kFo=o(" \u2014 "),bI=a("a"),SFo=o("DebertaForMaskedLM"),RFo=o(" (DeBERTa model)"),BFo=l(),c1=a("li"),pne=a("strong"),PFo=o("deberta-v2"),$Fo=o(" \u2014 "),FI=a("a"),IFo=o("DebertaV2ForMaskedLM"),qFo=o(" (DeBERTa-v2 model)"),NFo=l(),f1=a("li"),_ne=a("strong"),jFo=o("distilbert"),DFo=o(" \u2014 "),vI=a("a"),GFo=o("DistilBertForMaskedLM"),OFo=o(" (DistilBERT model)"),VFo=l(),m1=a("li"),une=a("strong"),XFo=o("electra"),zFo=o(" \u2014 "),TI=a("a"),QFo=o("ElectraForMaskedLM"),WFo=o(" (ELECTRA model)"),HFo=l(),g1=a("li"),bne=a("strong"),UFo=o("flaubert"),JFo=o(" \u2014 "),MI=a("a"),YFo=o("FlaubertWithLMHeadModel"),KFo=o(" (FlauBERT model)"),ZFo=l(),h1=a("li"),Fne=a("strong"),evo=o("fnet"),ovo=o(" \u2014 "),EI=a("a"),rvo=o("FNetForMaskedLM"),tvo=o(" (FNet model)"),avo=l(),p1=a("li"),vne=a("strong"),nvo=o("funnel"),svo=o(" \u2014 "),CI=a("a"),lvo=o("FunnelForMaskedLM"),ivo=o(" (Funnel Transformer model)"),dvo=l(),_1=a("li"),Tne=a("strong"),cvo=o("ibert"),fvo=o(" \u2014 "),wI=a("a"),mvo=o("IBertForMaskedLM"),gvo=o(" (I-BERT model)"),hvo=l(),u1=a("li"),Mne=a("strong"),pvo=o("layoutlm"),_vo=o(" \u2014 "),AI=a("a"),uvo=o("LayoutLMForMaskedLM"),bvo=o(" (LayoutLM model)"),Fvo=l(),b1=a("li"),Ene=a("strong"),vvo=o("longformer"),Tvo=o(" \u2014 "),yI=a("a"),Mvo=o("LongformerForMaskedLM"),Evo=o(" (Longformer model)"),Cvo=l(),F1=a("li"),Cne=a("strong"),wvo=o("mbart"),Avo=o(" \u2014 "),LI=a("a"),yvo=o("MBartForConditionalGeneration"),Lvo=o(" (mBART model)"),xvo=l(),v1=a("li"),wne=a("strong"),kvo=o("megatron-bert"),Svo=o(" \u2014 "),xI=a("a"),Rvo=o("MegatronBertForMaskedLM"),Bvo=o(" (MegatronBert model)"),Pvo=l(),T1=a("li"),Ane=a("strong"),$vo=o("mobilebert"),Ivo=o(" \u2014 "),kI=a("a"),qvo=o("MobileBertForMaskedLM"),Nvo=o(" (MobileBERT model)"),jvo=l(),M1=a("li"),yne=a("strong"),Dvo=o("mpnet"),Gvo=o(" \u2014 "),SI=a("a"),Ovo=o("MPNetForMaskedLM"),Vvo=o(" (MPNet model)"),Xvo=l(),E1=a("li"),Lne=a("strong"),zvo=o("nystromformer"),Qvo=o(" \u2014 "),RI=a("a"),Wvo=o("NystromformerForMaskedLM"),Hvo=o(" (Nystromformer model)"),Uvo=l(),C1=a("li"),xne=a("strong"),Jvo=o("perceiver"),Yvo=o(" \u2014 "),BI=a("a"),Kvo=o("PerceiverForMaskedLM"),Zvo=o(" (Perceiver model)"),e6o=l(),w1=a("li"),kne=a("strong"),o6o=o("qdqbert"),r6o=o(" \u2014 "),PI=a("a"),t6o=o("QDQBertForMaskedLM"),a6o=o(" (QDQBert model)"),n6o=l(),A1=a("li"),Sne=a("strong"),s6o=o("reformer"),l6o=o(" \u2014 "),$I=a("a"),i6o=o("ReformerForMaskedLM"),d6o=o(" (Reformer model)"),c6o=l(),y1=a("li"),Rne=a("strong"),f6o=o("rembert"),m6o=o(" \u2014 "),II=a("a"),g6o=o("RemBertForMaskedLM"),h6o=o(" (RemBERT model)"),p6o=l(),L1=a("li"),Bne=a("strong"),_6o=o("roberta"),u6o=o(" \u2014 "),qI=a("a"),b6o=o("RobertaForMaskedLM"),F6o=o(" (RoBERTa model)"),v6o=l(),x1=a("li"),Pne=a("strong"),T6o=o("roformer"),M6o=o(" \u2014 "),NI=a("a"),E6o=o("RoFormerForMaskedLM"),C6o=o(" (RoFormer model)"),w6o=l(),k1=a("li"),$ne=a("strong"),A6o=o("squeezebert"),y6o=o(" \u2014 "),jI=a("a"),L6o=o("SqueezeBertForMaskedLM"),x6o=o(" (SqueezeBERT model)"),k6o=l(),S1=a("li"),Ine=a("strong"),S6o=o("tapas"),R6o=o(" \u2014 "),DI=a("a"),B6o=o("TapasForMaskedLM"),P6o=o(" (TAPAS model)"),$6o=l(),R1=a("li"),qne=a("strong"),I6o=o("wav2vec2"),q6o=o(" \u2014 "),Nne=a("code"),N6o=o("Wav2Vec2ForMaskedLM"),j6o=o("(Wav2Vec2 model)"),D6o=l(),B1=a("li"),jne=a("strong"),G6o=o("xlm"),O6o=o(" \u2014 "),GI=a("a"),V6o=o("XLMWithLMHeadModel"),X6o=o(" (XLM model)"),z6o=l(),P1=a("li"),Dne=a("strong"),Q6o=o("xlm-roberta"),W6o=o(" \u2014 "),OI=a("a"),H6o=o("XLMRobertaForMaskedLM"),U6o=o(" (XLM-RoBERTa model)"),J6o=l(),$1=a("li"),Gne=a("strong"),Y6o=o("xlm-roberta-xl"),K6o=o(" \u2014 "),VI=a("a"),Z6o=o("XLMRobertaXLForMaskedLM"),eTo=o(" (XLM-RoBERTa-XL model)"),oTo=l(),I1=a("li"),One=a("strong"),rTo=o("yoso"),tTo=o(" \u2014 "),XI=a("a"),aTo=o("YosoForMaskedLM"),nTo=o(" (YOSO model)"),sTo=l(),q1=a("p"),lTo=o("The model is set in evaluation mode by default using "),Vne=a("code"),iTo=o("model.eval()"),dTo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xne=a("code"),cTo=o("model.train()"),fTo=l(),zne=a("p"),mTo=o("Examples:"),gTo=l(),f(T5.$$.fragment),eRe=l(),id=a("h2"),N1=a("a"),Qne=a("span"),f(M5.$$.fragment),hTo=l(),Wne=a("span"),pTo=o("AutoModelForSeq2SeqLM"),oRe=l(),er=a("div"),f(E5.$$.fragment),_To=l(),dd=a("p"),uTo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),zI=a("a"),bTo=o("from_pretrained()"),FTo=o(" class method or the "),QI=a("a"),vTo=o("from_config()"),TTo=o(` class
method.`),MTo=l(),C5=a("p"),ETo=o("This class cannot be instantiated directly using "),Hne=a("code"),CTo=o("__init__()"),wTo=o(" (throws an error)."),ATo=l(),Hr=a("div"),f(w5.$$.fragment),yTo=l(),Une=a("p"),LTo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),xTo=l(),cd=a("p"),kTo=o(`Note:
Loading a model from its configuration file does `),Jne=a("strong"),STo=o("not"),RTo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WI=a("a"),BTo=o("from_pretrained()"),PTo=o(" to load the model weights."),$To=l(),Yne=a("p"),ITo=o("Examples:"),qTo=l(),f(A5.$$.fragment),NTo=l(),Ge=a("div"),f(y5.$$.fragment),jTo=l(),Kne=a("p"),DTo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),GTo=l(),Ha=a("p"),OTo=o("The model class to instantiate is selected based on the "),Zne=a("code"),VTo=o("model_type"),XTo=o(` property of the config object (either
passed as an argument or loaded from `),ese=a("code"),zTo=o("pretrained_model_name_or_path"),QTo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ose=a("code"),WTo=o("pretrained_model_name_or_path"),HTo=o(":"),UTo=l(),se=a("ul"),j1=a("li"),rse=a("strong"),JTo=o("bart"),YTo=o(" \u2014 "),HI=a("a"),KTo=o("BartForConditionalGeneration"),ZTo=o(" (BART model)"),e7o=l(),D1=a("li"),tse=a("strong"),o7o=o("bigbird_pegasus"),r7o=o(" \u2014 "),UI=a("a"),t7o=o("BigBirdPegasusForConditionalGeneration"),a7o=o(" (BigBirdPegasus model)"),n7o=l(),G1=a("li"),ase=a("strong"),s7o=o("blenderbot"),l7o=o(" \u2014 "),JI=a("a"),i7o=o("BlenderbotForConditionalGeneration"),d7o=o(" (Blenderbot model)"),c7o=l(),O1=a("li"),nse=a("strong"),f7o=o("blenderbot-small"),m7o=o(" \u2014 "),YI=a("a"),g7o=o("BlenderbotSmallForConditionalGeneration"),h7o=o(" (BlenderbotSmall model)"),p7o=l(),V1=a("li"),sse=a("strong"),_7o=o("encoder-decoder"),u7o=o(" \u2014 "),KI=a("a"),b7o=o("EncoderDecoderModel"),F7o=o(" (Encoder decoder model)"),v7o=l(),X1=a("li"),lse=a("strong"),T7o=o("fsmt"),M7o=o(" \u2014 "),ZI=a("a"),E7o=o("FSMTForConditionalGeneration"),C7o=o(" (FairSeq Machine-Translation model)"),w7o=l(),z1=a("li"),ise=a("strong"),A7o=o("led"),y7o=o(" \u2014 "),eq=a("a"),L7o=o("LEDForConditionalGeneration"),x7o=o(" (LED model)"),k7o=l(),Q1=a("li"),dse=a("strong"),S7o=o("m2m_100"),R7o=o(" \u2014 "),oq=a("a"),B7o=o("M2M100ForConditionalGeneration"),P7o=o(" (M2M100 model)"),$7o=l(),W1=a("li"),cse=a("strong"),I7o=o("marian"),q7o=o(" \u2014 "),rq=a("a"),N7o=o("MarianMTModel"),j7o=o(" (Marian model)"),D7o=l(),H1=a("li"),fse=a("strong"),G7o=o("mbart"),O7o=o(" \u2014 "),tq=a("a"),V7o=o("MBartForConditionalGeneration"),X7o=o(" (mBART model)"),z7o=l(),U1=a("li"),mse=a("strong"),Q7o=o("mt5"),W7o=o(" \u2014 "),aq=a("a"),H7o=o("MT5ForConditionalGeneration"),U7o=o(" (mT5 model)"),J7o=l(),J1=a("li"),gse=a("strong"),Y7o=o("pegasus"),K7o=o(" \u2014 "),nq=a("a"),Z7o=o("PegasusForConditionalGeneration"),eMo=o(" (Pegasus model)"),oMo=l(),Y1=a("li"),hse=a("strong"),rMo=o("plbart"),tMo=o(" \u2014 "),sq=a("a"),aMo=o("PLBartForConditionalGeneration"),nMo=o(" (PLBart model)"),sMo=l(),K1=a("li"),pse=a("strong"),lMo=o("prophetnet"),iMo=o(" \u2014 "),lq=a("a"),dMo=o("ProphetNetForConditionalGeneration"),cMo=o(" (ProphetNet model)"),fMo=l(),Z1=a("li"),_se=a("strong"),mMo=o("t5"),gMo=o(" \u2014 "),iq=a("a"),hMo=o("T5ForConditionalGeneration"),pMo=o(" (T5 model)"),_Mo=l(),e4=a("li"),use=a("strong"),uMo=o("xlm-prophetnet"),bMo=o(" \u2014 "),dq=a("a"),FMo=o("XLMProphetNetForConditionalGeneration"),vMo=o(" (XLMProphetNet model)"),TMo=l(),o4=a("p"),MMo=o("The model is set in evaluation mode by default using "),bse=a("code"),EMo=o("model.eval()"),CMo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fse=a("code"),wMo=o("model.train()"),AMo=l(),vse=a("p"),yMo=o("Examples:"),LMo=l(),f(L5.$$.fragment),rRe=l(),fd=a("h2"),r4=a("a"),Tse=a("span"),f(x5.$$.fragment),xMo=l(),Mse=a("span"),kMo=o("AutoModelForSequenceClassification"),tRe=l(),or=a("div"),f(k5.$$.fragment),SMo=l(),md=a("p"),RMo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),cq=a("a"),BMo=o("from_pretrained()"),PMo=o(" class method or the "),fq=a("a"),$Mo=o("from_config()"),IMo=o(` class
method.`),qMo=l(),S5=a("p"),NMo=o("This class cannot be instantiated directly using "),Ese=a("code"),jMo=o("__init__()"),DMo=o(" (throws an error)."),GMo=l(),Ur=a("div"),f(R5.$$.fragment),OMo=l(),Cse=a("p"),VMo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),XMo=l(),gd=a("p"),zMo=o(`Note:
Loading a model from its configuration file does `),wse=a("strong"),QMo=o("not"),WMo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mq=a("a"),HMo=o("from_pretrained()"),UMo=o(" to load the model weights."),JMo=l(),Ase=a("p"),YMo=o("Examples:"),KMo=l(),f(B5.$$.fragment),ZMo=l(),Oe=a("div"),f(P5.$$.fragment),eEo=l(),yse=a("p"),oEo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),rEo=l(),Ua=a("p"),tEo=o("The model class to instantiate is selected based on the "),Lse=a("code"),aEo=o("model_type"),nEo=o(` property of the config object (either
passed as an argument or loaded from `),xse=a("code"),sEo=o("pretrained_model_name_or_path"),lEo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kse=a("code"),iEo=o("pretrained_model_name_or_path"),dEo=o(":"),cEo=l(),y=a("ul"),t4=a("li"),Sse=a("strong"),fEo=o("albert"),mEo=o(" \u2014 "),gq=a("a"),gEo=o("AlbertForSequenceClassification"),hEo=o(" (ALBERT model)"),pEo=l(),a4=a("li"),Rse=a("strong"),_Eo=o("bart"),uEo=o(" \u2014 "),hq=a("a"),bEo=o("BartForSequenceClassification"),FEo=o(" (BART model)"),vEo=l(),n4=a("li"),Bse=a("strong"),TEo=o("bert"),MEo=o(" \u2014 "),pq=a("a"),EEo=o("BertForSequenceClassification"),CEo=o(" (BERT model)"),wEo=l(),s4=a("li"),Pse=a("strong"),AEo=o("big_bird"),yEo=o(" \u2014 "),_q=a("a"),LEo=o("BigBirdForSequenceClassification"),xEo=o(" (BigBird model)"),kEo=l(),l4=a("li"),$se=a("strong"),SEo=o("bigbird_pegasus"),REo=o(" \u2014 "),uq=a("a"),BEo=o("BigBirdPegasusForSequenceClassification"),PEo=o(" (BigBirdPegasus model)"),$Eo=l(),i4=a("li"),Ise=a("strong"),IEo=o("camembert"),qEo=o(" \u2014 "),bq=a("a"),NEo=o("CamembertForSequenceClassification"),jEo=o(" (CamemBERT model)"),DEo=l(),d4=a("li"),qse=a("strong"),GEo=o("canine"),OEo=o(" \u2014 "),Fq=a("a"),VEo=o("CanineForSequenceClassification"),XEo=o(" (Canine model)"),zEo=l(),c4=a("li"),Nse=a("strong"),QEo=o("convbert"),WEo=o(" \u2014 "),vq=a("a"),HEo=o("ConvBertForSequenceClassification"),UEo=o(" (ConvBERT model)"),JEo=l(),f4=a("li"),jse=a("strong"),YEo=o("ctrl"),KEo=o(" \u2014 "),Tq=a("a"),ZEo=o("CTRLForSequenceClassification"),eCo=o(" (CTRL model)"),oCo=l(),m4=a("li"),Dse=a("strong"),rCo=o("data2vec-text"),tCo=o(" \u2014 "),Mq=a("a"),aCo=o("Data2VecTextForSequenceClassification"),nCo=o(" (Data2VecText model)"),sCo=l(),g4=a("li"),Gse=a("strong"),lCo=o("deberta"),iCo=o(" \u2014 "),Eq=a("a"),dCo=o("DebertaForSequenceClassification"),cCo=o(" (DeBERTa model)"),fCo=l(),h4=a("li"),Ose=a("strong"),mCo=o("deberta-v2"),gCo=o(" \u2014 "),Cq=a("a"),hCo=o("DebertaV2ForSequenceClassification"),pCo=o(" (DeBERTa-v2 model)"),_Co=l(),p4=a("li"),Vse=a("strong"),uCo=o("distilbert"),bCo=o(" \u2014 "),wq=a("a"),FCo=o("DistilBertForSequenceClassification"),vCo=o(" (DistilBERT model)"),TCo=l(),_4=a("li"),Xse=a("strong"),MCo=o("electra"),ECo=o(" \u2014 "),Aq=a("a"),CCo=o("ElectraForSequenceClassification"),wCo=o(" (ELECTRA model)"),ACo=l(),u4=a("li"),zse=a("strong"),yCo=o("flaubert"),LCo=o(" \u2014 "),yq=a("a"),xCo=o("FlaubertForSequenceClassification"),kCo=o(" (FlauBERT model)"),SCo=l(),b4=a("li"),Qse=a("strong"),RCo=o("fnet"),BCo=o(" \u2014 "),Lq=a("a"),PCo=o("FNetForSequenceClassification"),$Co=o(" (FNet model)"),ICo=l(),F4=a("li"),Wse=a("strong"),qCo=o("funnel"),NCo=o(" \u2014 "),xq=a("a"),jCo=o("FunnelForSequenceClassification"),DCo=o(" (Funnel Transformer model)"),GCo=l(),v4=a("li"),Hse=a("strong"),OCo=o("gpt2"),VCo=o(" \u2014 "),kq=a("a"),XCo=o("GPT2ForSequenceClassification"),zCo=o(" (OpenAI GPT-2 model)"),QCo=l(),T4=a("li"),Use=a("strong"),WCo=o("gpt_neo"),HCo=o(" \u2014 "),Sq=a("a"),UCo=o("GPTNeoForSequenceClassification"),JCo=o(" (GPT Neo model)"),YCo=l(),M4=a("li"),Jse=a("strong"),KCo=o("gptj"),ZCo=o(" \u2014 "),Rq=a("a"),e5o=o("GPTJForSequenceClassification"),o5o=o(" (GPT-J model)"),r5o=l(),E4=a("li"),Yse=a("strong"),t5o=o("ibert"),a5o=o(" \u2014 "),Bq=a("a"),n5o=o("IBertForSequenceClassification"),s5o=o(" (I-BERT model)"),l5o=l(),C4=a("li"),Kse=a("strong"),i5o=o("layoutlm"),d5o=o(" \u2014 "),Pq=a("a"),c5o=o("LayoutLMForSequenceClassification"),f5o=o(" (LayoutLM model)"),m5o=l(),w4=a("li"),Zse=a("strong"),g5o=o("layoutlmv2"),h5o=o(" \u2014 "),$q=a("a"),p5o=o("LayoutLMv2ForSequenceClassification"),_5o=o(" (LayoutLMv2 model)"),u5o=l(),A4=a("li"),ele=a("strong"),b5o=o("led"),F5o=o(" \u2014 "),Iq=a("a"),v5o=o("LEDForSequenceClassification"),T5o=o(" (LED model)"),M5o=l(),y4=a("li"),ole=a("strong"),E5o=o("longformer"),C5o=o(" \u2014 "),qq=a("a"),w5o=o("LongformerForSequenceClassification"),A5o=o(" (Longformer model)"),y5o=l(),L4=a("li"),rle=a("strong"),L5o=o("mbart"),x5o=o(" \u2014 "),Nq=a("a"),k5o=o("MBartForSequenceClassification"),S5o=o(" (mBART model)"),R5o=l(),x4=a("li"),tle=a("strong"),B5o=o("megatron-bert"),P5o=o(" \u2014 "),jq=a("a"),$5o=o("MegatronBertForSequenceClassification"),I5o=o(" (MegatronBert model)"),q5o=l(),k4=a("li"),ale=a("strong"),N5o=o("mobilebert"),j5o=o(" \u2014 "),Dq=a("a"),D5o=o("MobileBertForSequenceClassification"),G5o=o(" (MobileBERT model)"),O5o=l(),S4=a("li"),nle=a("strong"),V5o=o("mpnet"),X5o=o(" \u2014 "),Gq=a("a"),z5o=o("MPNetForSequenceClassification"),Q5o=o(" (MPNet model)"),W5o=l(),R4=a("li"),sle=a("strong"),H5o=o("nystromformer"),U5o=o(" \u2014 "),Oq=a("a"),J5o=o("NystromformerForSequenceClassification"),Y5o=o(" (Nystromformer model)"),K5o=l(),B4=a("li"),lle=a("strong"),Z5o=o("openai-gpt"),ewo=o(" \u2014 "),Vq=a("a"),owo=o("OpenAIGPTForSequenceClassification"),rwo=o(" (OpenAI GPT model)"),two=l(),P4=a("li"),ile=a("strong"),awo=o("perceiver"),nwo=o(" \u2014 "),Xq=a("a"),swo=o("PerceiverForSequenceClassification"),lwo=o(" (Perceiver model)"),iwo=l(),$4=a("li"),dle=a("strong"),dwo=o("plbart"),cwo=o(" \u2014 "),zq=a("a"),fwo=o("PLBartForSequenceClassification"),mwo=o(" (PLBart model)"),gwo=l(),I4=a("li"),cle=a("strong"),hwo=o("qdqbert"),pwo=o(" \u2014 "),Qq=a("a"),_wo=o("QDQBertForSequenceClassification"),uwo=o(" (QDQBert model)"),bwo=l(),q4=a("li"),fle=a("strong"),Fwo=o("reformer"),vwo=o(" \u2014 "),Wq=a("a"),Two=o("ReformerForSequenceClassification"),Mwo=o(" (Reformer model)"),Ewo=l(),N4=a("li"),mle=a("strong"),Cwo=o("rembert"),wwo=o(" \u2014 "),Hq=a("a"),Awo=o("RemBertForSequenceClassification"),ywo=o(" (RemBERT model)"),Lwo=l(),j4=a("li"),gle=a("strong"),xwo=o("roberta"),kwo=o(" \u2014 "),Uq=a("a"),Swo=o("RobertaForSequenceClassification"),Rwo=o(" (RoBERTa model)"),Bwo=l(),D4=a("li"),hle=a("strong"),Pwo=o("roformer"),$wo=o(" \u2014 "),Jq=a("a"),Iwo=o("RoFormerForSequenceClassification"),qwo=o(" (RoFormer model)"),Nwo=l(),G4=a("li"),ple=a("strong"),jwo=o("squeezebert"),Dwo=o(" \u2014 "),Yq=a("a"),Gwo=o("SqueezeBertForSequenceClassification"),Owo=o(" (SqueezeBERT model)"),Vwo=l(),O4=a("li"),_le=a("strong"),Xwo=o("tapas"),zwo=o(" \u2014 "),Kq=a("a"),Qwo=o("TapasForSequenceClassification"),Wwo=o(" (TAPAS model)"),Hwo=l(),V4=a("li"),ule=a("strong"),Uwo=o("transfo-xl"),Jwo=o(" \u2014 "),Zq=a("a"),Ywo=o("TransfoXLForSequenceClassification"),Kwo=o(" (Transformer-XL model)"),Zwo=l(),X4=a("li"),ble=a("strong"),eAo=o("xlm"),oAo=o(" \u2014 "),eN=a("a"),rAo=o("XLMForSequenceClassification"),tAo=o(" (XLM model)"),aAo=l(),z4=a("li"),Fle=a("strong"),nAo=o("xlm-roberta"),sAo=o(" \u2014 "),oN=a("a"),lAo=o("XLMRobertaForSequenceClassification"),iAo=o(" (XLM-RoBERTa model)"),dAo=l(),Q4=a("li"),vle=a("strong"),cAo=o("xlm-roberta-xl"),fAo=o(" \u2014 "),rN=a("a"),mAo=o("XLMRobertaXLForSequenceClassification"),gAo=o(" (XLM-RoBERTa-XL model)"),hAo=l(),W4=a("li"),Tle=a("strong"),pAo=o("xlnet"),_Ao=o(" \u2014 "),tN=a("a"),uAo=o("XLNetForSequenceClassification"),bAo=o(" (XLNet model)"),FAo=l(),H4=a("li"),Mle=a("strong"),vAo=o("yoso"),TAo=o(" \u2014 "),aN=a("a"),MAo=o("YosoForSequenceClassification"),EAo=o(" (YOSO model)"),CAo=l(),U4=a("p"),wAo=o("The model is set in evaluation mode by default using "),Ele=a("code"),AAo=o("model.eval()"),yAo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cle=a("code"),LAo=o("model.train()"),xAo=l(),wle=a("p"),kAo=o("Examples:"),SAo=l(),f($5.$$.fragment),aRe=l(),hd=a("h2"),J4=a("a"),Ale=a("span"),f(I5.$$.fragment),RAo=l(),yle=a("span"),BAo=o("AutoModelForMultipleChoice"),nRe=l(),rr=a("div"),f(q5.$$.fragment),PAo=l(),pd=a("p"),$Ao=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),nN=a("a"),IAo=o("from_pretrained()"),qAo=o(" class method or the "),sN=a("a"),NAo=o("from_config()"),jAo=o(` class
method.`),DAo=l(),N5=a("p"),GAo=o("This class cannot be instantiated directly using "),Lle=a("code"),OAo=o("__init__()"),VAo=o(" (throws an error)."),XAo=l(),Jr=a("div"),f(j5.$$.fragment),zAo=l(),xle=a("p"),QAo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),WAo=l(),_d=a("p"),HAo=o(`Note:
Loading a model from its configuration file does `),kle=a("strong"),UAo=o("not"),JAo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lN=a("a"),YAo=o("from_pretrained()"),KAo=o(" to load the model weights."),ZAo=l(),Sle=a("p"),e0o=o("Examples:"),o0o=l(),f(D5.$$.fragment),r0o=l(),Ve=a("div"),f(G5.$$.fragment),t0o=l(),Rle=a("p"),a0o=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),n0o=l(),Ja=a("p"),s0o=o("The model class to instantiate is selected based on the "),Ble=a("code"),l0o=o("model_type"),i0o=o(` property of the config object (either
passed as an argument or loaded from `),Ple=a("code"),d0o=o("pretrained_model_name_or_path"),c0o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$le=a("code"),f0o=o("pretrained_model_name_or_path"),m0o=o(":"),g0o=l(),G=a("ul"),Y4=a("li"),Ile=a("strong"),h0o=o("albert"),p0o=o(" \u2014 "),iN=a("a"),_0o=o("AlbertForMultipleChoice"),u0o=o(" (ALBERT model)"),b0o=l(),K4=a("li"),qle=a("strong"),F0o=o("bert"),v0o=o(" \u2014 "),dN=a("a"),T0o=o("BertForMultipleChoice"),M0o=o(" (BERT model)"),E0o=l(),Z4=a("li"),Nle=a("strong"),C0o=o("big_bird"),w0o=o(" \u2014 "),cN=a("a"),A0o=o("BigBirdForMultipleChoice"),y0o=o(" (BigBird model)"),L0o=l(),eb=a("li"),jle=a("strong"),x0o=o("camembert"),k0o=o(" \u2014 "),fN=a("a"),S0o=o("CamembertForMultipleChoice"),R0o=o(" (CamemBERT model)"),B0o=l(),ob=a("li"),Dle=a("strong"),P0o=o("canine"),$0o=o(" \u2014 "),mN=a("a"),I0o=o("CanineForMultipleChoice"),q0o=o(" (Canine model)"),N0o=l(),rb=a("li"),Gle=a("strong"),j0o=o("convbert"),D0o=o(" \u2014 "),gN=a("a"),G0o=o("ConvBertForMultipleChoice"),O0o=o(" (ConvBERT model)"),V0o=l(),tb=a("li"),Ole=a("strong"),X0o=o("data2vec-text"),z0o=o(" \u2014 "),hN=a("a"),Q0o=o("Data2VecTextForMultipleChoice"),W0o=o(" (Data2VecText model)"),H0o=l(),ab=a("li"),Vle=a("strong"),U0o=o("distilbert"),J0o=o(" \u2014 "),pN=a("a"),Y0o=o("DistilBertForMultipleChoice"),K0o=o(" (DistilBERT model)"),Z0o=l(),nb=a("li"),Xle=a("strong"),eyo=o("electra"),oyo=o(" \u2014 "),_N=a("a"),ryo=o("ElectraForMultipleChoice"),tyo=o(" (ELECTRA model)"),ayo=l(),sb=a("li"),zle=a("strong"),nyo=o("flaubert"),syo=o(" \u2014 "),uN=a("a"),lyo=o("FlaubertForMultipleChoice"),iyo=o(" (FlauBERT model)"),dyo=l(),lb=a("li"),Qle=a("strong"),cyo=o("fnet"),fyo=o(" \u2014 "),bN=a("a"),myo=o("FNetForMultipleChoice"),gyo=o(" (FNet model)"),hyo=l(),ib=a("li"),Wle=a("strong"),pyo=o("funnel"),_yo=o(" \u2014 "),FN=a("a"),uyo=o("FunnelForMultipleChoice"),byo=o(" (Funnel Transformer model)"),Fyo=l(),db=a("li"),Hle=a("strong"),vyo=o("ibert"),Tyo=o(" \u2014 "),vN=a("a"),Myo=o("IBertForMultipleChoice"),Eyo=o(" (I-BERT model)"),Cyo=l(),cb=a("li"),Ule=a("strong"),wyo=o("longformer"),Ayo=o(" \u2014 "),TN=a("a"),yyo=o("LongformerForMultipleChoice"),Lyo=o(" (Longformer model)"),xyo=l(),fb=a("li"),Jle=a("strong"),kyo=o("megatron-bert"),Syo=o(" \u2014 "),MN=a("a"),Ryo=o("MegatronBertForMultipleChoice"),Byo=o(" (MegatronBert model)"),Pyo=l(),mb=a("li"),Yle=a("strong"),$yo=o("mobilebert"),Iyo=o(" \u2014 "),EN=a("a"),qyo=o("MobileBertForMultipleChoice"),Nyo=o(" (MobileBERT model)"),jyo=l(),gb=a("li"),Kle=a("strong"),Dyo=o("mpnet"),Gyo=o(" \u2014 "),CN=a("a"),Oyo=o("MPNetForMultipleChoice"),Vyo=o(" (MPNet model)"),Xyo=l(),hb=a("li"),Zle=a("strong"),zyo=o("nystromformer"),Qyo=o(" \u2014 "),wN=a("a"),Wyo=o("NystromformerForMultipleChoice"),Hyo=o(" (Nystromformer model)"),Uyo=l(),pb=a("li"),eie=a("strong"),Jyo=o("qdqbert"),Yyo=o(" \u2014 "),AN=a("a"),Kyo=o("QDQBertForMultipleChoice"),Zyo=o(" (QDQBert model)"),eLo=l(),_b=a("li"),oie=a("strong"),oLo=o("rembert"),rLo=o(" \u2014 "),yN=a("a"),tLo=o("RemBertForMultipleChoice"),aLo=o(" (RemBERT model)"),nLo=l(),ub=a("li"),rie=a("strong"),sLo=o("roberta"),lLo=o(" \u2014 "),LN=a("a"),iLo=o("RobertaForMultipleChoice"),dLo=o(" (RoBERTa model)"),cLo=l(),bb=a("li"),tie=a("strong"),fLo=o("roformer"),mLo=o(" \u2014 "),xN=a("a"),gLo=o("RoFormerForMultipleChoice"),hLo=o(" (RoFormer model)"),pLo=l(),Fb=a("li"),aie=a("strong"),_Lo=o("squeezebert"),uLo=o(" \u2014 "),kN=a("a"),bLo=o("SqueezeBertForMultipleChoice"),FLo=o(" (SqueezeBERT model)"),vLo=l(),vb=a("li"),nie=a("strong"),TLo=o("xlm"),MLo=o(" \u2014 "),SN=a("a"),ELo=o("XLMForMultipleChoice"),CLo=o(" (XLM model)"),wLo=l(),Tb=a("li"),sie=a("strong"),ALo=o("xlm-roberta"),yLo=o(" \u2014 "),RN=a("a"),LLo=o("XLMRobertaForMultipleChoice"),xLo=o(" (XLM-RoBERTa model)"),kLo=l(),Mb=a("li"),lie=a("strong"),SLo=o("xlm-roberta-xl"),RLo=o(" \u2014 "),BN=a("a"),BLo=o("XLMRobertaXLForMultipleChoice"),PLo=o(" (XLM-RoBERTa-XL model)"),$Lo=l(),Eb=a("li"),iie=a("strong"),ILo=o("xlnet"),qLo=o(" \u2014 "),PN=a("a"),NLo=o("XLNetForMultipleChoice"),jLo=o(" (XLNet model)"),DLo=l(),Cb=a("li"),die=a("strong"),GLo=o("yoso"),OLo=o(" \u2014 "),$N=a("a"),VLo=o("YosoForMultipleChoice"),XLo=o(" (YOSO model)"),zLo=l(),wb=a("p"),QLo=o("The model is set in evaluation mode by default using "),cie=a("code"),WLo=o("model.eval()"),HLo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fie=a("code"),ULo=o("model.train()"),JLo=l(),mie=a("p"),YLo=o("Examples:"),KLo=l(),f(O5.$$.fragment),sRe=l(),ud=a("h2"),Ab=a("a"),gie=a("span"),f(V5.$$.fragment),ZLo=l(),hie=a("span"),e8o=o("AutoModelForNextSentencePrediction"),lRe=l(),tr=a("div"),f(X5.$$.fragment),o8o=l(),bd=a("p"),r8o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),IN=a("a"),t8o=o("from_pretrained()"),a8o=o(" class method or the "),qN=a("a"),n8o=o("from_config()"),s8o=o(` class
method.`),l8o=l(),z5=a("p"),i8o=o("This class cannot be instantiated directly using "),pie=a("code"),d8o=o("__init__()"),c8o=o(" (throws an error)."),f8o=l(),Yr=a("div"),f(Q5.$$.fragment),m8o=l(),_ie=a("p"),g8o=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),h8o=l(),Fd=a("p"),p8o=o(`Note:
Loading a model from its configuration file does `),uie=a("strong"),_8o=o("not"),u8o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NN=a("a"),b8o=o("from_pretrained()"),F8o=o(" to load the model weights."),v8o=l(),bie=a("p"),T8o=o("Examples:"),M8o=l(),f(W5.$$.fragment),E8o=l(),Xe=a("div"),f(H5.$$.fragment),C8o=l(),Fie=a("p"),w8o=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),A8o=l(),Ya=a("p"),y8o=o("The model class to instantiate is selected based on the "),vie=a("code"),L8o=o("model_type"),x8o=o(` property of the config object (either
passed as an argument or loaded from `),Tie=a("code"),k8o=o("pretrained_model_name_or_path"),S8o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mie=a("code"),R8o=o("pretrained_model_name_or_path"),B8o=o(":"),P8o=l(),da=a("ul"),yb=a("li"),Eie=a("strong"),$8o=o("bert"),I8o=o(" \u2014 "),jN=a("a"),q8o=o("BertForNextSentencePrediction"),N8o=o(" (BERT model)"),j8o=l(),Lb=a("li"),Cie=a("strong"),D8o=o("fnet"),G8o=o(" \u2014 "),DN=a("a"),O8o=o("FNetForNextSentencePrediction"),V8o=o(" (FNet model)"),X8o=l(),xb=a("li"),wie=a("strong"),z8o=o("megatron-bert"),Q8o=o(" \u2014 "),GN=a("a"),W8o=o("MegatronBertForNextSentencePrediction"),H8o=o(" (MegatronBert model)"),U8o=l(),kb=a("li"),Aie=a("strong"),J8o=o("mobilebert"),Y8o=o(" \u2014 "),ON=a("a"),K8o=o("MobileBertForNextSentencePrediction"),Z8o=o(" (MobileBERT model)"),e9o=l(),Sb=a("li"),yie=a("strong"),o9o=o("qdqbert"),r9o=o(" \u2014 "),VN=a("a"),t9o=o("QDQBertForNextSentencePrediction"),a9o=o(" (QDQBert model)"),n9o=l(),Rb=a("p"),s9o=o("The model is set in evaluation mode by default using "),Lie=a("code"),l9o=o("model.eval()"),i9o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xie=a("code"),d9o=o("model.train()"),c9o=l(),kie=a("p"),f9o=o("Examples:"),m9o=l(),f(U5.$$.fragment),iRe=l(),vd=a("h2"),Bb=a("a"),Sie=a("span"),f(J5.$$.fragment),g9o=l(),Rie=a("span"),h9o=o("AutoModelForTokenClassification"),dRe=l(),ar=a("div"),f(Y5.$$.fragment),p9o=l(),Td=a("p"),_9o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),XN=a("a"),u9o=o("from_pretrained()"),b9o=o(" class method or the "),zN=a("a"),F9o=o("from_config()"),v9o=o(` class
method.`),T9o=l(),K5=a("p"),M9o=o("This class cannot be instantiated directly using "),Bie=a("code"),E9o=o("__init__()"),C9o=o(" (throws an error)."),w9o=l(),Kr=a("div"),f(Z5.$$.fragment),A9o=l(),Pie=a("p"),y9o=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),L9o=l(),Md=a("p"),x9o=o(`Note:
Loading a model from its configuration file does `),$ie=a("strong"),k9o=o("not"),S9o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QN=a("a"),R9o=o("from_pretrained()"),B9o=o(" to load the model weights."),P9o=l(),Iie=a("p"),$9o=o("Examples:"),I9o=l(),f(ew.$$.fragment),q9o=l(),ze=a("div"),f(ow.$$.fragment),N9o=l(),qie=a("p"),j9o=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),D9o=l(),Ka=a("p"),G9o=o("The model class to instantiate is selected based on the "),Nie=a("code"),O9o=o("model_type"),V9o=o(` property of the config object (either
passed as an argument or loaded from `),jie=a("code"),X9o=o("pretrained_model_name_or_path"),z9o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Die=a("code"),Q9o=o("pretrained_model_name_or_path"),W9o=o(":"),H9o=l(),j=a("ul"),Pb=a("li"),Gie=a("strong"),U9o=o("albert"),J9o=o(" \u2014 "),WN=a("a"),Y9o=o("AlbertForTokenClassification"),K9o=o(" (ALBERT model)"),Z9o=l(),$b=a("li"),Oie=a("strong"),exo=o("bert"),oxo=o(" \u2014 "),HN=a("a"),rxo=o("BertForTokenClassification"),txo=o(" (BERT model)"),axo=l(),Ib=a("li"),Vie=a("strong"),nxo=o("big_bird"),sxo=o(" \u2014 "),UN=a("a"),lxo=o("BigBirdForTokenClassification"),ixo=o(" (BigBird model)"),dxo=l(),qb=a("li"),Xie=a("strong"),cxo=o("camembert"),fxo=o(" \u2014 "),JN=a("a"),mxo=o("CamembertForTokenClassification"),gxo=o(" (CamemBERT model)"),hxo=l(),Nb=a("li"),zie=a("strong"),pxo=o("canine"),_xo=o(" \u2014 "),YN=a("a"),uxo=o("CanineForTokenClassification"),bxo=o(" (Canine model)"),Fxo=l(),jb=a("li"),Qie=a("strong"),vxo=o("convbert"),Txo=o(" \u2014 "),KN=a("a"),Mxo=o("ConvBertForTokenClassification"),Exo=o(" (ConvBERT model)"),Cxo=l(),Db=a("li"),Wie=a("strong"),wxo=o("data2vec-text"),Axo=o(" \u2014 "),ZN=a("a"),yxo=o("Data2VecTextForTokenClassification"),Lxo=o(" (Data2VecText model)"),xxo=l(),Gb=a("li"),Hie=a("strong"),kxo=o("deberta"),Sxo=o(" \u2014 "),ej=a("a"),Rxo=o("DebertaForTokenClassification"),Bxo=o(" (DeBERTa model)"),Pxo=l(),Ob=a("li"),Uie=a("strong"),$xo=o("deberta-v2"),Ixo=o(" \u2014 "),oj=a("a"),qxo=o("DebertaV2ForTokenClassification"),Nxo=o(" (DeBERTa-v2 model)"),jxo=l(),Vb=a("li"),Jie=a("strong"),Dxo=o("distilbert"),Gxo=o(" \u2014 "),rj=a("a"),Oxo=o("DistilBertForTokenClassification"),Vxo=o(" (DistilBERT model)"),Xxo=l(),Xb=a("li"),Yie=a("strong"),zxo=o("electra"),Qxo=o(" \u2014 "),tj=a("a"),Wxo=o("ElectraForTokenClassification"),Hxo=o(" (ELECTRA model)"),Uxo=l(),zb=a("li"),Kie=a("strong"),Jxo=o("flaubert"),Yxo=o(" \u2014 "),aj=a("a"),Kxo=o("FlaubertForTokenClassification"),Zxo=o(" (FlauBERT model)"),eko=l(),Qb=a("li"),Zie=a("strong"),oko=o("fnet"),rko=o(" \u2014 "),nj=a("a"),tko=o("FNetForTokenClassification"),ako=o(" (FNet model)"),nko=l(),Wb=a("li"),ede=a("strong"),sko=o("funnel"),lko=o(" \u2014 "),sj=a("a"),iko=o("FunnelForTokenClassification"),dko=o(" (Funnel Transformer model)"),cko=l(),Hb=a("li"),ode=a("strong"),fko=o("gpt2"),mko=o(" \u2014 "),lj=a("a"),gko=o("GPT2ForTokenClassification"),hko=o(" (OpenAI GPT-2 model)"),pko=l(),Ub=a("li"),rde=a("strong"),_ko=o("ibert"),uko=o(" \u2014 "),ij=a("a"),bko=o("IBertForTokenClassification"),Fko=o(" (I-BERT model)"),vko=l(),Jb=a("li"),tde=a("strong"),Tko=o("layoutlm"),Mko=o(" \u2014 "),dj=a("a"),Eko=o("LayoutLMForTokenClassification"),Cko=o(" (LayoutLM model)"),wko=l(),Yb=a("li"),ade=a("strong"),Ako=o("layoutlmv2"),yko=o(" \u2014 "),cj=a("a"),Lko=o("LayoutLMv2ForTokenClassification"),xko=o(" (LayoutLMv2 model)"),kko=l(),Kb=a("li"),nde=a("strong"),Sko=o("longformer"),Rko=o(" \u2014 "),fj=a("a"),Bko=o("LongformerForTokenClassification"),Pko=o(" (Longformer model)"),$ko=l(),Zb=a("li"),sde=a("strong"),Iko=o("megatron-bert"),qko=o(" \u2014 "),mj=a("a"),Nko=o("MegatronBertForTokenClassification"),jko=o(" (MegatronBert model)"),Dko=l(),e3=a("li"),lde=a("strong"),Gko=o("mobilebert"),Oko=o(" \u2014 "),gj=a("a"),Vko=o("MobileBertForTokenClassification"),Xko=o(" (MobileBERT model)"),zko=l(),o3=a("li"),ide=a("strong"),Qko=o("mpnet"),Wko=o(" \u2014 "),hj=a("a"),Hko=o("MPNetForTokenClassification"),Uko=o(" (MPNet model)"),Jko=l(),r3=a("li"),dde=a("strong"),Yko=o("nystromformer"),Kko=o(" \u2014 "),pj=a("a"),Zko=o("NystromformerForTokenClassification"),eSo=o(" (Nystromformer model)"),oSo=l(),t3=a("li"),cde=a("strong"),rSo=o("qdqbert"),tSo=o(" \u2014 "),_j=a("a"),aSo=o("QDQBertForTokenClassification"),nSo=o(" (QDQBert model)"),sSo=l(),a3=a("li"),fde=a("strong"),lSo=o("rembert"),iSo=o(" \u2014 "),uj=a("a"),dSo=o("RemBertForTokenClassification"),cSo=o(" (RemBERT model)"),fSo=l(),n3=a("li"),mde=a("strong"),mSo=o("roberta"),gSo=o(" \u2014 "),bj=a("a"),hSo=o("RobertaForTokenClassification"),pSo=o(" (RoBERTa model)"),_So=l(),s3=a("li"),gde=a("strong"),uSo=o("roformer"),bSo=o(" \u2014 "),Fj=a("a"),FSo=o("RoFormerForTokenClassification"),vSo=o(" (RoFormer model)"),TSo=l(),l3=a("li"),hde=a("strong"),MSo=o("squeezebert"),ESo=o(" \u2014 "),vj=a("a"),CSo=o("SqueezeBertForTokenClassification"),wSo=o(" (SqueezeBERT model)"),ASo=l(),i3=a("li"),pde=a("strong"),ySo=o("xlm"),LSo=o(" \u2014 "),Tj=a("a"),xSo=o("XLMForTokenClassification"),kSo=o(" (XLM model)"),SSo=l(),d3=a("li"),_de=a("strong"),RSo=o("xlm-roberta"),BSo=o(" \u2014 "),Mj=a("a"),PSo=o("XLMRobertaForTokenClassification"),$So=o(" (XLM-RoBERTa model)"),ISo=l(),c3=a("li"),ude=a("strong"),qSo=o("xlm-roberta-xl"),NSo=o(" \u2014 "),Ej=a("a"),jSo=o("XLMRobertaXLForTokenClassification"),DSo=o(" (XLM-RoBERTa-XL model)"),GSo=l(),f3=a("li"),bde=a("strong"),OSo=o("xlnet"),VSo=o(" \u2014 "),Cj=a("a"),XSo=o("XLNetForTokenClassification"),zSo=o(" (XLNet model)"),QSo=l(),m3=a("li"),Fde=a("strong"),WSo=o("yoso"),HSo=o(" \u2014 "),wj=a("a"),USo=o("YosoForTokenClassification"),JSo=o(" (YOSO model)"),YSo=l(),g3=a("p"),KSo=o("The model is set in evaluation mode by default using "),vde=a("code"),ZSo=o("model.eval()"),eRo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tde=a("code"),oRo=o("model.train()"),rRo=l(),Mde=a("p"),tRo=o("Examples:"),aRo=l(),f(rw.$$.fragment),cRe=l(),Ed=a("h2"),h3=a("a"),Ede=a("span"),f(tw.$$.fragment),nRo=l(),Cde=a("span"),sRo=o("AutoModelForQuestionAnswering"),fRe=l(),nr=a("div"),f(aw.$$.fragment),lRo=l(),Cd=a("p"),iRo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Aj=a("a"),dRo=o("from_pretrained()"),cRo=o(" class method or the "),yj=a("a"),fRo=o("from_config()"),mRo=o(` class
method.`),gRo=l(),nw=a("p"),hRo=o("This class cannot be instantiated directly using "),wde=a("code"),pRo=o("__init__()"),_Ro=o(" (throws an error)."),uRo=l(),Zr=a("div"),f(sw.$$.fragment),bRo=l(),Ade=a("p"),FRo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),vRo=l(),wd=a("p"),TRo=o(`Note:
Loading a model from its configuration file does `),yde=a("strong"),MRo=o("not"),ERo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Lj=a("a"),CRo=o("from_pretrained()"),wRo=o(" to load the model weights."),ARo=l(),Lde=a("p"),yRo=o("Examples:"),LRo=l(),f(lw.$$.fragment),xRo=l(),Qe=a("div"),f(iw.$$.fragment),kRo=l(),xde=a("p"),SRo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),RRo=l(),Za=a("p"),BRo=o("The model class to instantiate is selected based on the "),kde=a("code"),PRo=o("model_type"),$Ro=o(` property of the config object (either
passed as an argument or loaded from `),Sde=a("code"),IRo=o("pretrained_model_name_or_path"),qRo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rde=a("code"),NRo=o("pretrained_model_name_or_path"),jRo=o(":"),DRo=l(),R=a("ul"),p3=a("li"),Bde=a("strong"),GRo=o("albert"),ORo=o(" \u2014 "),xj=a("a"),VRo=o("AlbertForQuestionAnswering"),XRo=o(" (ALBERT model)"),zRo=l(),_3=a("li"),Pde=a("strong"),QRo=o("bart"),WRo=o(" \u2014 "),kj=a("a"),HRo=o("BartForQuestionAnswering"),URo=o(" (BART model)"),JRo=l(),u3=a("li"),$de=a("strong"),YRo=o("bert"),KRo=o(" \u2014 "),Sj=a("a"),ZRo=o("BertForQuestionAnswering"),eBo=o(" (BERT model)"),oBo=l(),b3=a("li"),Ide=a("strong"),rBo=o("big_bird"),tBo=o(" \u2014 "),Rj=a("a"),aBo=o("BigBirdForQuestionAnswering"),nBo=o(" (BigBird model)"),sBo=l(),F3=a("li"),qde=a("strong"),lBo=o("bigbird_pegasus"),iBo=o(" \u2014 "),Bj=a("a"),dBo=o("BigBirdPegasusForQuestionAnswering"),cBo=o(" (BigBirdPegasus model)"),fBo=l(),v3=a("li"),Nde=a("strong"),mBo=o("camembert"),gBo=o(" \u2014 "),Pj=a("a"),hBo=o("CamembertForQuestionAnswering"),pBo=o(" (CamemBERT model)"),_Bo=l(),T3=a("li"),jde=a("strong"),uBo=o("canine"),bBo=o(" \u2014 "),$j=a("a"),FBo=o("CanineForQuestionAnswering"),vBo=o(" (Canine model)"),TBo=l(),M3=a("li"),Dde=a("strong"),MBo=o("convbert"),EBo=o(" \u2014 "),Ij=a("a"),CBo=o("ConvBertForQuestionAnswering"),wBo=o(" (ConvBERT model)"),ABo=l(),E3=a("li"),Gde=a("strong"),yBo=o("data2vec-text"),LBo=o(" \u2014 "),qj=a("a"),xBo=o("Data2VecTextForQuestionAnswering"),kBo=o(" (Data2VecText model)"),SBo=l(),C3=a("li"),Ode=a("strong"),RBo=o("deberta"),BBo=o(" \u2014 "),Nj=a("a"),PBo=o("DebertaForQuestionAnswering"),$Bo=o(" (DeBERTa model)"),IBo=l(),w3=a("li"),Vde=a("strong"),qBo=o("deberta-v2"),NBo=o(" \u2014 "),jj=a("a"),jBo=o("DebertaV2ForQuestionAnswering"),DBo=o(" (DeBERTa-v2 model)"),GBo=l(),A3=a("li"),Xde=a("strong"),OBo=o("distilbert"),VBo=o(" \u2014 "),Dj=a("a"),XBo=o("DistilBertForQuestionAnswering"),zBo=o(" (DistilBERT model)"),QBo=l(),y3=a("li"),zde=a("strong"),WBo=o("electra"),HBo=o(" \u2014 "),Gj=a("a"),UBo=o("ElectraForQuestionAnswering"),JBo=o(" (ELECTRA model)"),YBo=l(),L3=a("li"),Qde=a("strong"),KBo=o("flaubert"),ZBo=o(" \u2014 "),Oj=a("a"),ePo=o("FlaubertForQuestionAnsweringSimple"),oPo=o(" (FlauBERT model)"),rPo=l(),x3=a("li"),Wde=a("strong"),tPo=o("fnet"),aPo=o(" \u2014 "),Vj=a("a"),nPo=o("FNetForQuestionAnswering"),sPo=o(" (FNet model)"),lPo=l(),k3=a("li"),Hde=a("strong"),iPo=o("funnel"),dPo=o(" \u2014 "),Xj=a("a"),cPo=o("FunnelForQuestionAnswering"),fPo=o(" (Funnel Transformer model)"),mPo=l(),S3=a("li"),Ude=a("strong"),gPo=o("gptj"),hPo=o(" \u2014 "),zj=a("a"),pPo=o("GPTJForQuestionAnswering"),_Po=o(" (GPT-J model)"),uPo=l(),R3=a("li"),Jde=a("strong"),bPo=o("ibert"),FPo=o(" \u2014 "),Qj=a("a"),vPo=o("IBertForQuestionAnswering"),TPo=o(" (I-BERT model)"),MPo=l(),B3=a("li"),Yde=a("strong"),EPo=o("layoutlmv2"),CPo=o(" \u2014 "),Wj=a("a"),wPo=o("LayoutLMv2ForQuestionAnswering"),APo=o(" (LayoutLMv2 model)"),yPo=l(),P3=a("li"),Kde=a("strong"),LPo=o("led"),xPo=o(" \u2014 "),Hj=a("a"),kPo=o("LEDForQuestionAnswering"),SPo=o(" (LED model)"),RPo=l(),$3=a("li"),Zde=a("strong"),BPo=o("longformer"),PPo=o(" \u2014 "),Uj=a("a"),$Po=o("LongformerForQuestionAnswering"),IPo=o(" (Longformer model)"),qPo=l(),I3=a("li"),ece=a("strong"),NPo=o("lxmert"),jPo=o(" \u2014 "),Jj=a("a"),DPo=o("LxmertForQuestionAnswering"),GPo=o(" (LXMERT model)"),OPo=l(),q3=a("li"),oce=a("strong"),VPo=o("mbart"),XPo=o(" \u2014 "),Yj=a("a"),zPo=o("MBartForQuestionAnswering"),QPo=o(" (mBART model)"),WPo=l(),N3=a("li"),rce=a("strong"),HPo=o("megatron-bert"),UPo=o(" \u2014 "),Kj=a("a"),JPo=o("MegatronBertForQuestionAnswering"),YPo=o(" (MegatronBert model)"),KPo=l(),j3=a("li"),tce=a("strong"),ZPo=o("mobilebert"),e$o=o(" \u2014 "),Zj=a("a"),o$o=o("MobileBertForQuestionAnswering"),r$o=o(" (MobileBERT model)"),t$o=l(),D3=a("li"),ace=a("strong"),a$o=o("mpnet"),n$o=o(" \u2014 "),eD=a("a"),s$o=o("MPNetForQuestionAnswering"),l$o=o(" (MPNet model)"),i$o=l(),G3=a("li"),nce=a("strong"),d$o=o("nystromformer"),c$o=o(" \u2014 "),oD=a("a"),f$o=o("NystromformerForQuestionAnswering"),m$o=o(" (Nystromformer model)"),g$o=l(),O3=a("li"),sce=a("strong"),h$o=o("qdqbert"),p$o=o(" \u2014 "),rD=a("a"),_$o=o("QDQBertForQuestionAnswering"),u$o=o(" (QDQBert model)"),b$o=l(),V3=a("li"),lce=a("strong"),F$o=o("reformer"),v$o=o(" \u2014 "),tD=a("a"),T$o=o("ReformerForQuestionAnswering"),M$o=o(" (Reformer model)"),E$o=l(),X3=a("li"),ice=a("strong"),C$o=o("rembert"),w$o=o(" \u2014 "),aD=a("a"),A$o=o("RemBertForQuestionAnswering"),y$o=o(" (RemBERT model)"),L$o=l(),z3=a("li"),dce=a("strong"),x$o=o("roberta"),k$o=o(" \u2014 "),nD=a("a"),S$o=o("RobertaForQuestionAnswering"),R$o=o(" (RoBERTa model)"),B$o=l(),Q3=a("li"),cce=a("strong"),P$o=o("roformer"),$$o=o(" \u2014 "),sD=a("a"),I$o=o("RoFormerForQuestionAnswering"),q$o=o(" (RoFormer model)"),N$o=l(),W3=a("li"),fce=a("strong"),j$o=o("splinter"),D$o=o(" \u2014 "),lD=a("a"),G$o=o("SplinterForQuestionAnswering"),O$o=o(" (Splinter model)"),V$o=l(),H3=a("li"),mce=a("strong"),X$o=o("squeezebert"),z$o=o(" \u2014 "),iD=a("a"),Q$o=o("SqueezeBertForQuestionAnswering"),W$o=o(" (SqueezeBERT model)"),H$o=l(),U3=a("li"),gce=a("strong"),U$o=o("xlm"),J$o=o(" \u2014 "),dD=a("a"),Y$o=o("XLMForQuestionAnsweringSimple"),K$o=o(" (XLM model)"),Z$o=l(),J3=a("li"),hce=a("strong"),eIo=o("xlm-roberta"),oIo=o(" \u2014 "),cD=a("a"),rIo=o("XLMRobertaForQuestionAnswering"),tIo=o(" (XLM-RoBERTa model)"),aIo=l(),Y3=a("li"),pce=a("strong"),nIo=o("xlm-roberta-xl"),sIo=o(" \u2014 "),fD=a("a"),lIo=o("XLMRobertaXLForQuestionAnswering"),iIo=o(" (XLM-RoBERTa-XL model)"),dIo=l(),K3=a("li"),_ce=a("strong"),cIo=o("xlnet"),fIo=o(" \u2014 "),mD=a("a"),mIo=o("XLNetForQuestionAnsweringSimple"),gIo=o(" (XLNet model)"),hIo=l(),Z3=a("li"),uce=a("strong"),pIo=o("yoso"),_Io=o(" \u2014 "),gD=a("a"),uIo=o("YosoForQuestionAnswering"),bIo=o(" (YOSO model)"),FIo=l(),e2=a("p"),vIo=o("The model is set in evaluation mode by default using "),bce=a("code"),TIo=o("model.eval()"),MIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fce=a("code"),EIo=o("model.train()"),CIo=l(),vce=a("p"),wIo=o("Examples:"),AIo=l(),f(dw.$$.fragment),mRe=l(),Ad=a("h2"),o2=a("a"),Tce=a("span"),f(cw.$$.fragment),yIo=l(),Mce=a("span"),LIo=o("AutoModelForTableQuestionAnswering"),gRe=l(),sr=a("div"),f(fw.$$.fragment),xIo=l(),yd=a("p"),kIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),hD=a("a"),SIo=o("from_pretrained()"),RIo=o(" class method or the "),pD=a("a"),BIo=o("from_config()"),PIo=o(` class
method.`),$Io=l(),mw=a("p"),IIo=o("This class cannot be instantiated directly using "),Ece=a("code"),qIo=o("__init__()"),NIo=o(" (throws an error)."),jIo=l(),et=a("div"),f(gw.$$.fragment),DIo=l(),Cce=a("p"),GIo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),OIo=l(),Ld=a("p"),VIo=o(`Note:
Loading a model from its configuration file does `),wce=a("strong"),XIo=o("not"),zIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_D=a("a"),QIo=o("from_pretrained()"),WIo=o(" to load the model weights."),HIo=l(),Ace=a("p"),UIo=o("Examples:"),JIo=l(),f(hw.$$.fragment),YIo=l(),We=a("div"),f(pw.$$.fragment),KIo=l(),yce=a("p"),ZIo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),eqo=l(),en=a("p"),oqo=o("The model class to instantiate is selected based on the "),Lce=a("code"),rqo=o("model_type"),tqo=o(` property of the config object (either
passed as an argument or loaded from `),xce=a("code"),aqo=o("pretrained_model_name_or_path"),nqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kce=a("code"),sqo=o("pretrained_model_name_or_path"),lqo=o(":"),iqo=l(),Sce=a("ul"),r2=a("li"),Rce=a("strong"),dqo=o("tapas"),cqo=o(" \u2014 "),uD=a("a"),fqo=o("TapasForQuestionAnswering"),mqo=o(" (TAPAS model)"),gqo=l(),t2=a("p"),hqo=o("The model is set in evaluation mode by default using "),Bce=a("code"),pqo=o("model.eval()"),_qo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pce=a("code"),uqo=o("model.train()"),bqo=l(),$ce=a("p"),Fqo=o("Examples:"),vqo=l(),f(_w.$$.fragment),hRe=l(),xd=a("h2"),a2=a("a"),Ice=a("span"),f(uw.$$.fragment),Tqo=l(),qce=a("span"),Mqo=o("AutoModelForImageClassification"),pRe=l(),lr=a("div"),f(bw.$$.fragment),Eqo=l(),kd=a("p"),Cqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),bD=a("a"),wqo=o("from_pretrained()"),Aqo=o(" class method or the "),FD=a("a"),yqo=o("from_config()"),Lqo=o(` class
method.`),xqo=l(),Fw=a("p"),kqo=o("This class cannot be instantiated directly using "),Nce=a("code"),Sqo=o("__init__()"),Rqo=o(" (throws an error)."),Bqo=l(),ot=a("div"),f(vw.$$.fragment),Pqo=l(),jce=a("p"),$qo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Iqo=l(),Sd=a("p"),qqo=o(`Note:
Loading a model from its configuration file does `),Dce=a("strong"),Nqo=o("not"),jqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vD=a("a"),Dqo=o("from_pretrained()"),Gqo=o(" to load the model weights."),Oqo=l(),Gce=a("p"),Vqo=o("Examples:"),Xqo=l(),f(Tw.$$.fragment),zqo=l(),He=a("div"),f(Mw.$$.fragment),Qqo=l(),Oce=a("p"),Wqo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Hqo=l(),on=a("p"),Uqo=o("The model class to instantiate is selected based on the "),Vce=a("code"),Jqo=o("model_type"),Yqo=o(` property of the config object (either
passed as an argument or loaded from `),Xce=a("code"),Kqo=o("pretrained_model_name_or_path"),Zqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zce=a("code"),eNo=o("pretrained_model_name_or_path"),oNo=o(":"),rNo=l(),ge=a("ul"),n2=a("li"),Qce=a("strong"),tNo=o("beit"),aNo=o(" \u2014 "),TD=a("a"),nNo=o("BeitForImageClassification"),sNo=o(" (BEiT model)"),lNo=l(),s2=a("li"),Wce=a("strong"),iNo=o("convnext"),dNo=o(" \u2014 "),MD=a("a"),cNo=o("ConvNextForImageClassification"),fNo=o(" (ConvNext model)"),mNo=l(),Ds=a("li"),Hce=a("strong"),gNo=o("deit"),hNo=o(" \u2014 "),ED=a("a"),pNo=o("DeiTForImageClassification"),_No=o(" or "),CD=a("a"),uNo=o("DeiTForImageClassificationWithTeacher"),bNo=o(" (DeiT model)"),FNo=l(),l2=a("li"),Uce=a("strong"),vNo=o("imagegpt"),TNo=o(" \u2014 "),wD=a("a"),MNo=o("ImageGPTForImageClassification"),ENo=o(" (ImageGPT model)"),CNo=l(),ma=a("li"),Jce=a("strong"),wNo=o("perceiver"),ANo=o(" \u2014 "),AD=a("a"),yNo=o("PerceiverForImageClassificationLearned"),LNo=o(" or "),yD=a("a"),xNo=o("PerceiverForImageClassificationFourier"),kNo=o(" or "),LD=a("a"),SNo=o("PerceiverForImageClassificationConvProcessing"),RNo=o(" (Perceiver model)"),BNo=l(),i2=a("li"),Yce=a("strong"),PNo=o("poolformer"),$No=o(" \u2014 "),xD=a("a"),INo=o("PoolFormerForImageClassification"),qNo=o(" (PoolFormer model)"),NNo=l(),d2=a("li"),Kce=a("strong"),jNo=o("resnet"),DNo=o(" \u2014 "),kD=a("a"),GNo=o("ResNetForImageClassification"),ONo=o(" (ResNet model)"),VNo=l(),c2=a("li"),Zce=a("strong"),XNo=o("segformer"),zNo=o(" \u2014 "),SD=a("a"),QNo=o("SegformerForImageClassification"),WNo=o(" (SegFormer model)"),HNo=l(),f2=a("li"),efe=a("strong"),UNo=o("swin"),JNo=o(" \u2014 "),RD=a("a"),YNo=o("SwinForImageClassification"),KNo=o(" (Swin model)"),ZNo=l(),m2=a("li"),ofe=a("strong"),ejo=o("van"),ojo=o(" \u2014 "),BD=a("a"),rjo=o("VanForImageClassification"),tjo=o(" (VAN model)"),ajo=l(),g2=a("li"),rfe=a("strong"),njo=o("vit"),sjo=o(" \u2014 "),PD=a("a"),ljo=o("ViTForImageClassification"),ijo=o(" (ViT model)"),djo=l(),h2=a("p"),cjo=o("The model is set in evaluation mode by default using "),tfe=a("code"),fjo=o("model.eval()"),mjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),afe=a("code"),gjo=o("model.train()"),hjo=l(),nfe=a("p"),pjo=o("Examples:"),_jo=l(),f(Ew.$$.fragment),_Re=l(),Rd=a("h2"),p2=a("a"),sfe=a("span"),f(Cw.$$.fragment),ujo=l(),lfe=a("span"),bjo=o("AutoModelForVision2Seq"),uRe=l(),ir=a("div"),f(ww.$$.fragment),Fjo=l(),Bd=a("p"),vjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),$D=a("a"),Tjo=o("from_pretrained()"),Mjo=o(" class method or the "),ID=a("a"),Ejo=o("from_config()"),Cjo=o(` class
method.`),wjo=l(),Aw=a("p"),Ajo=o("This class cannot be instantiated directly using "),ife=a("code"),yjo=o("__init__()"),Ljo=o(" (throws an error)."),xjo=l(),rt=a("div"),f(yw.$$.fragment),kjo=l(),dfe=a("p"),Sjo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Rjo=l(),Pd=a("p"),Bjo=o(`Note:
Loading a model from its configuration file does `),cfe=a("strong"),Pjo=o("not"),$jo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qD=a("a"),Ijo=o("from_pretrained()"),qjo=o(" to load the model weights."),Njo=l(),ffe=a("p"),jjo=o("Examples:"),Djo=l(),f(Lw.$$.fragment),Gjo=l(),Ue=a("div"),f(xw.$$.fragment),Ojo=l(),mfe=a("p"),Vjo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Xjo=l(),rn=a("p"),zjo=o("The model class to instantiate is selected based on the "),gfe=a("code"),Qjo=o("model_type"),Wjo=o(` property of the config object (either
passed as an argument or loaded from `),hfe=a("code"),Hjo=o("pretrained_model_name_or_path"),Ujo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pfe=a("code"),Jjo=o("pretrained_model_name_or_path"),Yjo=o(":"),Kjo=l(),_fe=a("ul"),_2=a("li"),ufe=a("strong"),Zjo=o("vision-encoder-decoder"),eDo=o(" \u2014 "),ND=a("a"),oDo=o("VisionEncoderDecoderModel"),rDo=o(" (Vision Encoder decoder model)"),tDo=l(),u2=a("p"),aDo=o("The model is set in evaluation mode by default using "),bfe=a("code"),nDo=o("model.eval()"),sDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ffe=a("code"),lDo=o("model.train()"),iDo=l(),vfe=a("p"),dDo=o("Examples:"),cDo=l(),f(kw.$$.fragment),bRe=l(),$d=a("h2"),b2=a("a"),Tfe=a("span"),f(Sw.$$.fragment),fDo=l(),Mfe=a("span"),mDo=o("AutoModelForAudioClassification"),FRe=l(),dr=a("div"),f(Rw.$$.fragment),gDo=l(),Id=a("p"),hDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),jD=a("a"),pDo=o("from_pretrained()"),_Do=o(" class method or the "),DD=a("a"),uDo=o("from_config()"),bDo=o(` class
method.`),FDo=l(),Bw=a("p"),vDo=o("This class cannot be instantiated directly using "),Efe=a("code"),TDo=o("__init__()"),MDo=o(" (throws an error)."),EDo=l(),tt=a("div"),f(Pw.$$.fragment),CDo=l(),Cfe=a("p"),wDo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),ADo=l(),qd=a("p"),yDo=o(`Note:
Loading a model from its configuration file does `),wfe=a("strong"),LDo=o("not"),xDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GD=a("a"),kDo=o("from_pretrained()"),SDo=o(" to load the model weights."),RDo=l(),Afe=a("p"),BDo=o("Examples:"),PDo=l(),f($w.$$.fragment),$Do=l(),Je=a("div"),f(Iw.$$.fragment),IDo=l(),yfe=a("p"),qDo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),NDo=l(),tn=a("p"),jDo=o("The model class to instantiate is selected based on the "),Lfe=a("code"),DDo=o("model_type"),GDo=o(` property of the config object (either
passed as an argument or loaded from `),xfe=a("code"),ODo=o("pretrained_model_name_or_path"),VDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kfe=a("code"),XDo=o("pretrained_model_name_or_path"),zDo=o(":"),QDo=l(),Se=a("ul"),F2=a("li"),Sfe=a("strong"),WDo=o("data2vec-audio"),HDo=o(" \u2014 "),OD=a("a"),UDo=o("Data2VecAudioForSequenceClassification"),JDo=o(" (Data2VecAudio model)"),YDo=l(),v2=a("li"),Rfe=a("strong"),KDo=o("hubert"),ZDo=o(" \u2014 "),VD=a("a"),eGo=o("HubertForSequenceClassification"),oGo=o(" (Hubert model)"),rGo=l(),T2=a("li"),Bfe=a("strong"),tGo=o("sew"),aGo=o(" \u2014 "),XD=a("a"),nGo=o("SEWForSequenceClassification"),sGo=o(" (SEW model)"),lGo=l(),M2=a("li"),Pfe=a("strong"),iGo=o("sew-d"),dGo=o(" \u2014 "),zD=a("a"),cGo=o("SEWDForSequenceClassification"),fGo=o(" (SEW-D model)"),mGo=l(),E2=a("li"),$fe=a("strong"),gGo=o("unispeech"),hGo=o(" \u2014 "),QD=a("a"),pGo=o("UniSpeechForSequenceClassification"),_Go=o(" (UniSpeech model)"),uGo=l(),C2=a("li"),Ife=a("strong"),bGo=o("unispeech-sat"),FGo=o(" \u2014 "),WD=a("a"),vGo=o("UniSpeechSatForSequenceClassification"),TGo=o(" (UniSpeechSat model)"),MGo=l(),w2=a("li"),qfe=a("strong"),EGo=o("wav2vec2"),CGo=o(" \u2014 "),HD=a("a"),wGo=o("Wav2Vec2ForSequenceClassification"),AGo=o(" (Wav2Vec2 model)"),yGo=l(),A2=a("li"),Nfe=a("strong"),LGo=o("wavlm"),xGo=o(" \u2014 "),UD=a("a"),kGo=o("WavLMForSequenceClassification"),SGo=o(" (WavLM model)"),RGo=l(),y2=a("p"),BGo=o("The model is set in evaluation mode by default using "),jfe=a("code"),PGo=o("model.eval()"),$Go=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dfe=a("code"),IGo=o("model.train()"),qGo=l(),Gfe=a("p"),NGo=o("Examples:"),jGo=l(),f(qw.$$.fragment),vRe=l(),Nd=a("h2"),L2=a("a"),Ofe=a("span"),f(Nw.$$.fragment),DGo=l(),Vfe=a("span"),GGo=o("AutoModelForAudioFrameClassification"),TRe=l(),cr=a("div"),f(jw.$$.fragment),OGo=l(),jd=a("p"),VGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),JD=a("a"),XGo=o("from_pretrained()"),zGo=o(" class method or the "),YD=a("a"),QGo=o("from_config()"),WGo=o(` class
method.`),HGo=l(),Dw=a("p"),UGo=o("This class cannot be instantiated directly using "),Xfe=a("code"),JGo=o("__init__()"),YGo=o(" (throws an error)."),KGo=l(),at=a("div"),f(Gw.$$.fragment),ZGo=l(),zfe=a("p"),eOo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),oOo=l(),Dd=a("p"),rOo=o(`Note:
Loading a model from its configuration file does `),Qfe=a("strong"),tOo=o("not"),aOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KD=a("a"),nOo=o("from_pretrained()"),sOo=o(" to load the model weights."),lOo=l(),Wfe=a("p"),iOo=o("Examples:"),dOo=l(),f(Ow.$$.fragment),cOo=l(),Ye=a("div"),f(Vw.$$.fragment),fOo=l(),Hfe=a("p"),mOo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),gOo=l(),an=a("p"),hOo=o("The model class to instantiate is selected based on the "),Ufe=a("code"),pOo=o("model_type"),_Oo=o(` property of the config object (either
passed as an argument or loaded from `),Jfe=a("code"),uOo=o("pretrained_model_name_or_path"),bOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yfe=a("code"),FOo=o("pretrained_model_name_or_path"),vOo=o(":"),TOo=l(),nn=a("ul"),x2=a("li"),Kfe=a("strong"),MOo=o("data2vec-audio"),EOo=o(" \u2014 "),ZD=a("a"),COo=o("Data2VecAudioForAudioFrameClassification"),wOo=o(" (Data2VecAudio model)"),AOo=l(),k2=a("li"),Zfe=a("strong"),yOo=o("unispeech-sat"),LOo=o(" \u2014 "),eG=a("a"),xOo=o("UniSpeechSatForAudioFrameClassification"),kOo=o(" (UniSpeechSat model)"),SOo=l(),S2=a("li"),eme=a("strong"),ROo=o("wav2vec2"),BOo=o(" \u2014 "),oG=a("a"),POo=o("Wav2Vec2ForAudioFrameClassification"),$Oo=o(" (Wav2Vec2 model)"),IOo=l(),R2=a("li"),ome=a("strong"),qOo=o("wavlm"),NOo=o(" \u2014 "),rG=a("a"),jOo=o("WavLMForAudioFrameClassification"),DOo=o(" (WavLM model)"),GOo=l(),B2=a("p"),OOo=o("The model is set in evaluation mode by default using "),rme=a("code"),VOo=o("model.eval()"),XOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tme=a("code"),zOo=o("model.train()"),QOo=l(),ame=a("p"),WOo=o("Examples:"),HOo=l(),f(Xw.$$.fragment),MRe=l(),Gd=a("h2"),P2=a("a"),nme=a("span"),f(zw.$$.fragment),UOo=l(),sme=a("span"),JOo=o("AutoModelForCTC"),ERe=l(),fr=a("div"),f(Qw.$$.fragment),YOo=l(),Od=a("p"),KOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),tG=a("a"),ZOo=o("from_pretrained()"),eVo=o(" class method or the "),aG=a("a"),oVo=o("from_config()"),rVo=o(` class
method.`),tVo=l(),Ww=a("p"),aVo=o("This class cannot be instantiated directly using "),lme=a("code"),nVo=o("__init__()"),sVo=o(" (throws an error)."),lVo=l(),nt=a("div"),f(Hw.$$.fragment),iVo=l(),ime=a("p"),dVo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),cVo=l(),Vd=a("p"),fVo=o(`Note:
Loading a model from its configuration file does `),dme=a("strong"),mVo=o("not"),gVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nG=a("a"),hVo=o("from_pretrained()"),pVo=o(" to load the model weights."),_Vo=l(),cme=a("p"),uVo=o("Examples:"),bVo=l(),f(Uw.$$.fragment),FVo=l(),Ke=a("div"),f(Jw.$$.fragment),vVo=l(),fme=a("p"),TVo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),MVo=l(),sn=a("p"),EVo=o("The model class to instantiate is selected based on the "),mme=a("code"),CVo=o("model_type"),wVo=o(` property of the config object (either
passed as an argument or loaded from `),gme=a("code"),AVo=o("pretrained_model_name_or_path"),yVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hme=a("code"),LVo=o("pretrained_model_name_or_path"),xVo=o(":"),kVo=l(),Re=a("ul"),$2=a("li"),pme=a("strong"),SVo=o("data2vec-audio"),RVo=o(" \u2014 "),sG=a("a"),BVo=o("Data2VecAudioForCTC"),PVo=o(" (Data2VecAudio model)"),$Vo=l(),I2=a("li"),_me=a("strong"),IVo=o("hubert"),qVo=o(" \u2014 "),lG=a("a"),NVo=o("HubertForCTC"),jVo=o(" (Hubert model)"),DVo=l(),q2=a("li"),ume=a("strong"),GVo=o("sew"),OVo=o(" \u2014 "),iG=a("a"),VVo=o("SEWForCTC"),XVo=o(" (SEW model)"),zVo=l(),N2=a("li"),bme=a("strong"),QVo=o("sew-d"),WVo=o(" \u2014 "),dG=a("a"),HVo=o("SEWDForCTC"),UVo=o(" (SEW-D model)"),JVo=l(),j2=a("li"),Fme=a("strong"),YVo=o("unispeech"),KVo=o(" \u2014 "),cG=a("a"),ZVo=o("UniSpeechForCTC"),eXo=o(" (UniSpeech model)"),oXo=l(),D2=a("li"),vme=a("strong"),rXo=o("unispeech-sat"),tXo=o(" \u2014 "),fG=a("a"),aXo=o("UniSpeechSatForCTC"),nXo=o(" (UniSpeechSat model)"),sXo=l(),G2=a("li"),Tme=a("strong"),lXo=o("wav2vec2"),iXo=o(" \u2014 "),mG=a("a"),dXo=o("Wav2Vec2ForCTC"),cXo=o(" (Wav2Vec2 model)"),fXo=l(),O2=a("li"),Mme=a("strong"),mXo=o("wavlm"),gXo=o(" \u2014 "),gG=a("a"),hXo=o("WavLMForCTC"),pXo=o(" (WavLM model)"),_Xo=l(),V2=a("p"),uXo=o("The model is set in evaluation mode by default using "),Eme=a("code"),bXo=o("model.eval()"),FXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cme=a("code"),vXo=o("model.train()"),TXo=l(),wme=a("p"),MXo=o("Examples:"),EXo=l(),f(Yw.$$.fragment),CRe=l(),Xd=a("h2"),X2=a("a"),Ame=a("span"),f(Kw.$$.fragment),CXo=l(),yme=a("span"),wXo=o("AutoModelForSpeechSeq2Seq"),wRe=l(),mr=a("div"),f(Zw.$$.fragment),AXo=l(),zd=a("p"),yXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),hG=a("a"),LXo=o("from_pretrained()"),xXo=o(" class method or the "),pG=a("a"),kXo=o("from_config()"),SXo=o(` class
method.`),RXo=l(),eA=a("p"),BXo=o("This class cannot be instantiated directly using "),Lme=a("code"),PXo=o("__init__()"),$Xo=o(" (throws an error)."),IXo=l(),st=a("div"),f(oA.$$.fragment),qXo=l(),xme=a("p"),NXo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),jXo=l(),Qd=a("p"),DXo=o(`Note:
Loading a model from its configuration file does `),kme=a("strong"),GXo=o("not"),OXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_G=a("a"),VXo=o("from_pretrained()"),XXo=o(" to load the model weights."),zXo=l(),Sme=a("p"),QXo=o("Examples:"),WXo=l(),f(rA.$$.fragment),HXo=l(),Ze=a("div"),f(tA.$$.fragment),UXo=l(),Rme=a("p"),JXo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),YXo=l(),ln=a("p"),KXo=o("The model class to instantiate is selected based on the "),Bme=a("code"),ZXo=o("model_type"),ezo=o(` property of the config object (either
passed as an argument or loaded from `),Pme=a("code"),ozo=o("pretrained_model_name_or_path"),rzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$me=a("code"),tzo=o("pretrained_model_name_or_path"),azo=o(":"),nzo=l(),aA=a("ul"),z2=a("li"),Ime=a("strong"),szo=o("speech-encoder-decoder"),lzo=o(" \u2014 "),uG=a("a"),izo=o("SpeechEncoderDecoderModel"),dzo=o(" (Speech Encoder decoder model)"),czo=l(),Q2=a("li"),qme=a("strong"),fzo=o("speech_to_text"),mzo=o(" \u2014 "),bG=a("a"),gzo=o("Speech2TextForConditionalGeneration"),hzo=o(" (Speech2Text model)"),pzo=l(),W2=a("p"),_zo=o("The model is set in evaluation mode by default using "),Nme=a("code"),uzo=o("model.eval()"),bzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jme=a("code"),Fzo=o("model.train()"),vzo=l(),Dme=a("p"),Tzo=o("Examples:"),Mzo=l(),f(nA.$$.fragment),ARe=l(),Wd=a("h2"),H2=a("a"),Gme=a("span"),f(sA.$$.fragment),Ezo=l(),Ome=a("span"),Czo=o("AutoModelForAudioXVector"),yRe=l(),gr=a("div"),f(lA.$$.fragment),wzo=l(),Hd=a("p"),Azo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),FG=a("a"),yzo=o("from_pretrained()"),Lzo=o(" class method or the "),vG=a("a"),xzo=o("from_config()"),kzo=o(` class
method.`),Szo=l(),iA=a("p"),Rzo=o("This class cannot be instantiated directly using "),Vme=a("code"),Bzo=o("__init__()"),Pzo=o(" (throws an error)."),$zo=l(),lt=a("div"),f(dA.$$.fragment),Izo=l(),Xme=a("p"),qzo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Nzo=l(),Ud=a("p"),jzo=o(`Note:
Loading a model from its configuration file does `),zme=a("strong"),Dzo=o("not"),Gzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TG=a("a"),Ozo=o("from_pretrained()"),Vzo=o(" to load the model weights."),Xzo=l(),Qme=a("p"),zzo=o("Examples:"),Qzo=l(),f(cA.$$.fragment),Wzo=l(),eo=a("div"),f(fA.$$.fragment),Hzo=l(),Wme=a("p"),Uzo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Jzo=l(),dn=a("p"),Yzo=o("The model class to instantiate is selected based on the "),Hme=a("code"),Kzo=o("model_type"),Zzo=o(` property of the config object (either
passed as an argument or loaded from `),Ume=a("code"),eQo=o("pretrained_model_name_or_path"),oQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jme=a("code"),rQo=o("pretrained_model_name_or_path"),tQo=o(":"),aQo=l(),cn=a("ul"),U2=a("li"),Yme=a("strong"),nQo=o("data2vec-audio"),sQo=o(" \u2014 "),MG=a("a"),lQo=o("Data2VecAudioForXVector"),iQo=o(" (Data2VecAudio model)"),dQo=l(),J2=a("li"),Kme=a("strong"),cQo=o("unispeech-sat"),fQo=o(" \u2014 "),EG=a("a"),mQo=o("UniSpeechSatForXVector"),gQo=o(" (UniSpeechSat model)"),hQo=l(),Y2=a("li"),Zme=a("strong"),pQo=o("wav2vec2"),_Qo=o(" \u2014 "),CG=a("a"),uQo=o("Wav2Vec2ForXVector"),bQo=o(" (Wav2Vec2 model)"),FQo=l(),K2=a("li"),ege=a("strong"),vQo=o("wavlm"),TQo=o(" \u2014 "),wG=a("a"),MQo=o("WavLMForXVector"),EQo=o(" (WavLM model)"),CQo=l(),Z2=a("p"),wQo=o("The model is set in evaluation mode by default using "),oge=a("code"),AQo=o("model.eval()"),yQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rge=a("code"),LQo=o("model.train()"),xQo=l(),tge=a("p"),kQo=o("Examples:"),SQo=l(),f(mA.$$.fragment),LRe=l(),Jd=a("h2"),eF=a("a"),age=a("span"),f(gA.$$.fragment),RQo=l(),nge=a("span"),BQo=o("AutoModelForMaskedImageModeling"),xRe=l(),hr=a("div"),f(hA.$$.fragment),PQo=l(),Yd=a("p"),$Qo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),AG=a("a"),IQo=o("from_pretrained()"),qQo=o(" class method or the "),yG=a("a"),NQo=o("from_config()"),jQo=o(` class
method.`),DQo=l(),pA=a("p"),GQo=o("This class cannot be instantiated directly using "),sge=a("code"),OQo=o("__init__()"),VQo=o(" (throws an error)."),XQo=l(),it=a("div"),f(_A.$$.fragment),zQo=l(),lge=a("p"),QQo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),WQo=l(),Kd=a("p"),HQo=o(`Note:
Loading a model from its configuration file does `),ige=a("strong"),UQo=o("not"),JQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LG=a("a"),YQo=o("from_pretrained()"),KQo=o(" to load the model weights."),ZQo=l(),dge=a("p"),eWo=o("Examples:"),oWo=l(),f(uA.$$.fragment),rWo=l(),oo=a("div"),f(bA.$$.fragment),tWo=l(),cge=a("p"),aWo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),nWo=l(),fn=a("p"),sWo=o("The model class to instantiate is selected based on the "),fge=a("code"),lWo=o("model_type"),iWo=o(` property of the config object (either
passed as an argument or loaded from `),mge=a("code"),dWo=o("pretrained_model_name_or_path"),cWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gge=a("code"),fWo=o("pretrained_model_name_or_path"),mWo=o(":"),gWo=l(),Zd=a("ul"),oF=a("li"),hge=a("strong"),hWo=o("deit"),pWo=o(" \u2014 "),xG=a("a"),_Wo=o("DeiTForMaskedImageModeling"),uWo=o(" (DeiT model)"),bWo=l(),rF=a("li"),pge=a("strong"),FWo=o("swin"),vWo=o(" \u2014 "),kG=a("a"),TWo=o("SwinForMaskedImageModeling"),MWo=o(" (Swin model)"),EWo=l(),tF=a("li"),_ge=a("strong"),CWo=o("vit"),wWo=o(" \u2014 "),SG=a("a"),AWo=o("ViTForMaskedImageModeling"),yWo=o(" (ViT model)"),LWo=l(),aF=a("p"),xWo=o("The model is set in evaluation mode by default using "),uge=a("code"),kWo=o("model.eval()"),SWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bge=a("code"),RWo=o("model.train()"),BWo=l(),Fge=a("p"),PWo=o("Examples:"),$Wo=l(),f(FA.$$.fragment),kRe=l(),ec=a("h2"),nF=a("a"),vge=a("span"),f(vA.$$.fragment),IWo=l(),Tge=a("span"),qWo=o("AutoModelForObjectDetection"),SRe=l(),pr=a("div"),f(TA.$$.fragment),NWo=l(),oc=a("p"),jWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),RG=a("a"),DWo=o("from_pretrained()"),GWo=o(" class method or the "),BG=a("a"),OWo=o("from_config()"),VWo=o(` class
method.`),XWo=l(),MA=a("p"),zWo=o("This class cannot be instantiated directly using "),Mge=a("code"),QWo=o("__init__()"),WWo=o(" (throws an error)."),HWo=l(),dt=a("div"),f(EA.$$.fragment),UWo=l(),Ege=a("p"),JWo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),YWo=l(),rc=a("p"),KWo=o(`Note:
Loading a model from its configuration file does `),Cge=a("strong"),ZWo=o("not"),eHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PG=a("a"),oHo=o("from_pretrained()"),rHo=o(" to load the model weights."),tHo=l(),wge=a("p"),aHo=o("Examples:"),nHo=l(),f(CA.$$.fragment),sHo=l(),ro=a("div"),f(wA.$$.fragment),lHo=l(),Age=a("p"),iHo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),dHo=l(),mn=a("p"),cHo=o("The model class to instantiate is selected based on the "),yge=a("code"),fHo=o("model_type"),mHo=o(` property of the config object (either
passed as an argument or loaded from `),Lge=a("code"),gHo=o("pretrained_model_name_or_path"),hHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xge=a("code"),pHo=o("pretrained_model_name_or_path"),_Ho=o(":"),uHo=l(),kge=a("ul"),sF=a("li"),Sge=a("strong"),bHo=o("detr"),FHo=o(" \u2014 "),$G=a("a"),vHo=o("DetrForObjectDetection"),THo=o(" (DETR model)"),MHo=l(),lF=a("p"),EHo=o("The model is set in evaluation mode by default using "),Rge=a("code"),CHo=o("model.eval()"),wHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bge=a("code"),AHo=o("model.train()"),yHo=l(),Pge=a("p"),LHo=o("Examples:"),xHo=l(),f(AA.$$.fragment),RRe=l(),tc=a("h2"),iF=a("a"),$ge=a("span"),f(yA.$$.fragment),kHo=l(),Ige=a("span"),SHo=o("AutoModelForImageSegmentation"),BRe=l(),_r=a("div"),f(LA.$$.fragment),RHo=l(),ac=a("p"),BHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),IG=a("a"),PHo=o("from_pretrained()"),$Ho=o(" class method or the "),qG=a("a"),IHo=o("from_config()"),qHo=o(` class
method.`),NHo=l(),xA=a("p"),jHo=o("This class cannot be instantiated directly using "),qge=a("code"),DHo=o("__init__()"),GHo=o(" (throws an error)."),OHo=l(),ct=a("div"),f(kA.$$.fragment),VHo=l(),Nge=a("p"),XHo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),zHo=l(),nc=a("p"),QHo=o(`Note:
Loading a model from its configuration file does `),jge=a("strong"),WHo=o("not"),HHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NG=a("a"),UHo=o("from_pretrained()"),JHo=o(" to load the model weights."),YHo=l(),Dge=a("p"),KHo=o("Examples:"),ZHo=l(),f(SA.$$.fragment),eUo=l(),to=a("div"),f(RA.$$.fragment),oUo=l(),Gge=a("p"),rUo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),tUo=l(),gn=a("p"),aUo=o("The model class to instantiate is selected based on the "),Oge=a("code"),nUo=o("model_type"),sUo=o(` property of the config object (either
passed as an argument or loaded from `),Vge=a("code"),lUo=o("pretrained_model_name_or_path"),iUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xge=a("code"),dUo=o("pretrained_model_name_or_path"),cUo=o(":"),fUo=l(),zge=a("ul"),dF=a("li"),Qge=a("strong"),mUo=o("detr"),gUo=o(" \u2014 "),jG=a("a"),hUo=o("DetrForSegmentation"),pUo=o(" (DETR model)"),_Uo=l(),cF=a("p"),uUo=o("The model is set in evaluation mode by default using "),Wge=a("code"),bUo=o("model.eval()"),FUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hge=a("code"),vUo=o("model.train()"),TUo=l(),Uge=a("p"),MUo=o("Examples:"),EUo=l(),f(BA.$$.fragment),PRe=l(),sc=a("h2"),fF=a("a"),Jge=a("span"),f(PA.$$.fragment),CUo=l(),Yge=a("span"),wUo=o("AutoModelForSemanticSegmentation"),$Re=l(),ur=a("div"),f($A.$$.fragment),AUo=l(),lc=a("p"),yUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),DG=a("a"),LUo=o("from_pretrained()"),xUo=o(" class method or the "),GG=a("a"),kUo=o("from_config()"),SUo=o(` class
method.`),RUo=l(),IA=a("p"),BUo=o("This class cannot be instantiated directly using "),Kge=a("code"),PUo=o("__init__()"),$Uo=o(" (throws an error)."),IUo=l(),ft=a("div"),f(qA.$$.fragment),qUo=l(),Zge=a("p"),NUo=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),jUo=l(),ic=a("p"),DUo=o(`Note:
Loading a model from its configuration file does `),ehe=a("strong"),GUo=o("not"),OUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OG=a("a"),VUo=o("from_pretrained()"),XUo=o(" to load the model weights."),zUo=l(),ohe=a("p"),QUo=o("Examples:"),WUo=l(),f(NA.$$.fragment),HUo=l(),ao=a("div"),f(jA.$$.fragment),UUo=l(),rhe=a("p"),JUo=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),YUo=l(),hn=a("p"),KUo=o("The model class to instantiate is selected based on the "),the=a("code"),ZUo=o("model_type"),eJo=o(` property of the config object (either
passed as an argument or loaded from `),ahe=a("code"),oJo=o("pretrained_model_name_or_path"),rJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nhe=a("code"),tJo=o("pretrained_model_name_or_path"),aJo=o(":"),nJo=l(),dc=a("ul"),mF=a("li"),she=a("strong"),sJo=o("beit"),lJo=o(" \u2014 "),VG=a("a"),iJo=o("BeitForSemanticSegmentation"),dJo=o(" (BEiT model)"),cJo=l(),gF=a("li"),lhe=a("strong"),fJo=o("dpt"),mJo=o(" \u2014 "),XG=a("a"),gJo=o("DPTForSemanticSegmentation"),hJo=o(" (DPT model)"),pJo=l(),hF=a("li"),ihe=a("strong"),_Jo=o("segformer"),uJo=o(" \u2014 "),zG=a("a"),bJo=o("SegformerForSemanticSegmentation"),FJo=o(" (SegFormer model)"),vJo=l(),pF=a("p"),TJo=o("The model is set in evaluation mode by default using "),dhe=a("code"),MJo=o("model.eval()"),EJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),che=a("code"),CJo=o("model.train()"),wJo=l(),fhe=a("p"),AJo=o("Examples:"),yJo=l(),f(DA.$$.fragment),IRe=l(),cc=a("h2"),_F=a("a"),mhe=a("span"),f(GA.$$.fragment),LJo=l(),ghe=a("span"),xJo=o("AutoModelForInstanceSegmentation"),qRe=l(),br=a("div"),f(OA.$$.fragment),kJo=l(),fc=a("p"),SJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),QG=a("a"),RJo=o("from_pretrained()"),BJo=o(" class method or the "),WG=a("a"),PJo=o("from_config()"),$Jo=o(` class
method.`),IJo=l(),VA=a("p"),qJo=o("This class cannot be instantiated directly using "),hhe=a("code"),NJo=o("__init__()"),jJo=o(" (throws an error)."),DJo=l(),mt=a("div"),f(XA.$$.fragment),GJo=l(),phe=a("p"),OJo=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),VJo=l(),mc=a("p"),XJo=o(`Note:
Loading a model from its configuration file does `),_he=a("strong"),zJo=o("not"),QJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HG=a("a"),WJo=o("from_pretrained()"),HJo=o(" to load the model weights."),UJo=l(),uhe=a("p"),JJo=o("Examples:"),YJo=l(),f(zA.$$.fragment),KJo=l(),no=a("div"),f(QA.$$.fragment),ZJo=l(),bhe=a("p"),eYo=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),oYo=l(),pn=a("p"),rYo=o("The model class to instantiate is selected based on the "),Fhe=a("code"),tYo=o("model_type"),aYo=o(` property of the config object (either
passed as an argument or loaded from `),vhe=a("code"),nYo=o("pretrained_model_name_or_path"),sYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),The=a("code"),lYo=o("pretrained_model_name_or_path"),iYo=o(":"),dYo=l(),Mhe=a("ul"),uF=a("li"),Ehe=a("strong"),cYo=o("maskformer"),fYo=o(" \u2014 "),UG=a("a"),mYo=o("MaskFormerForInstanceSegmentation"),gYo=o(" (MaskFormer model)"),hYo=l(),bF=a("p"),pYo=o("The model is set in evaluation mode by default using "),Che=a("code"),_Yo=o("model.eval()"),uYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),whe=a("code"),bYo=o("model.train()"),FYo=l(),Ahe=a("p"),vYo=o("Examples:"),TYo=l(),f(WA.$$.fragment),NRe=l(),gc=a("h2"),FF=a("a"),yhe=a("span"),f(HA.$$.fragment),MYo=l(),Lhe=a("span"),EYo=o("TFAutoModel"),jRe=l(),Fr=a("div"),f(UA.$$.fragment),CYo=l(),hc=a("p"),wYo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),JG=a("a"),AYo=o("from_pretrained()"),yYo=o(" class method or the "),YG=a("a"),LYo=o("from_config()"),xYo=o(` class
method.`),kYo=l(),JA=a("p"),SYo=o("This class cannot be instantiated directly using "),xhe=a("code"),RYo=o("__init__()"),BYo=o(" (throws an error)."),PYo=l(),gt=a("div"),f(YA.$$.fragment),$Yo=l(),khe=a("p"),IYo=o("Instantiates one of the base model classes of the library from a configuration."),qYo=l(),pc=a("p"),NYo=o(`Note:
Loading a model from its configuration file does `),She=a("strong"),jYo=o("not"),DYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KG=a("a"),GYo=o("from_pretrained()"),OYo=o(" to load the model weights."),VYo=l(),Rhe=a("p"),XYo=o("Examples:"),zYo=l(),f(KA.$$.fragment),QYo=l(),ho=a("div"),f(ZA.$$.fragment),WYo=l(),Bhe=a("p"),HYo=o("Instantiate one of the base model classes of the library from a pretrained model."),UYo=l(),_n=a("p"),JYo=o("The model class to instantiate is selected based on the "),Phe=a("code"),YYo=o("model_type"),KYo=o(` property of the config object (either
passed as an argument or loaded from `),$he=a("code"),ZYo=o("pretrained_model_name_or_path"),eKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ihe=a("code"),oKo=o("pretrained_model_name_or_path"),rKo=o(":"),tKo=l(),x=a("ul"),vF=a("li"),qhe=a("strong"),aKo=o("albert"),nKo=o(" \u2014 "),ZG=a("a"),sKo=o("TFAlbertModel"),lKo=o(" (ALBERT model)"),iKo=l(),TF=a("li"),Nhe=a("strong"),dKo=o("bart"),cKo=o(" \u2014 "),eO=a("a"),fKo=o("TFBartModel"),mKo=o(" (BART model)"),gKo=l(),MF=a("li"),jhe=a("strong"),hKo=o("bert"),pKo=o(" \u2014 "),oO=a("a"),_Ko=o("TFBertModel"),uKo=o(" (BERT model)"),bKo=l(),EF=a("li"),Dhe=a("strong"),FKo=o("blenderbot"),vKo=o(" \u2014 "),rO=a("a"),TKo=o("TFBlenderbotModel"),MKo=o(" (Blenderbot model)"),EKo=l(),CF=a("li"),Ghe=a("strong"),CKo=o("blenderbot-small"),wKo=o(" \u2014 "),tO=a("a"),AKo=o("TFBlenderbotSmallModel"),yKo=o(" (BlenderbotSmall model)"),LKo=l(),wF=a("li"),Ohe=a("strong"),xKo=o("camembert"),kKo=o(" \u2014 "),aO=a("a"),SKo=o("TFCamembertModel"),RKo=o(" (CamemBERT model)"),BKo=l(),AF=a("li"),Vhe=a("strong"),PKo=o("clip"),$Ko=o(" \u2014 "),nO=a("a"),IKo=o("TFCLIPModel"),qKo=o(" (CLIP model)"),NKo=l(),yF=a("li"),Xhe=a("strong"),jKo=o("convbert"),DKo=o(" \u2014 "),sO=a("a"),GKo=o("TFConvBertModel"),OKo=o(" (ConvBERT model)"),VKo=l(),LF=a("li"),zhe=a("strong"),XKo=o("convnext"),zKo=o(" \u2014 "),lO=a("a"),QKo=o("TFConvNextModel"),WKo=o(" (ConvNext model)"),HKo=l(),xF=a("li"),Qhe=a("strong"),UKo=o("ctrl"),JKo=o(" \u2014 "),iO=a("a"),YKo=o("TFCTRLModel"),KKo=o(" (CTRL model)"),ZKo=l(),kF=a("li"),Whe=a("strong"),eZo=o("deberta"),oZo=o(" \u2014 "),dO=a("a"),rZo=o("TFDebertaModel"),tZo=o(" (DeBERTa model)"),aZo=l(),SF=a("li"),Hhe=a("strong"),nZo=o("deberta-v2"),sZo=o(" \u2014 "),cO=a("a"),lZo=o("TFDebertaV2Model"),iZo=o(" (DeBERTa-v2 model)"),dZo=l(),RF=a("li"),Uhe=a("strong"),cZo=o("distilbert"),fZo=o(" \u2014 "),fO=a("a"),mZo=o("TFDistilBertModel"),gZo=o(" (DistilBERT model)"),hZo=l(),BF=a("li"),Jhe=a("strong"),pZo=o("dpr"),_Zo=o(" \u2014 "),mO=a("a"),uZo=o("TFDPRQuestionEncoder"),bZo=o(" (DPR model)"),FZo=l(),PF=a("li"),Yhe=a("strong"),vZo=o("electra"),TZo=o(" \u2014 "),gO=a("a"),MZo=o("TFElectraModel"),EZo=o(" (ELECTRA model)"),CZo=l(),$F=a("li"),Khe=a("strong"),wZo=o("flaubert"),AZo=o(" \u2014 "),hO=a("a"),yZo=o("TFFlaubertModel"),LZo=o(" (FlauBERT model)"),xZo=l(),Gs=a("li"),Zhe=a("strong"),kZo=o("funnel"),SZo=o(" \u2014 "),pO=a("a"),RZo=o("TFFunnelModel"),BZo=o(" or "),_O=a("a"),PZo=o("TFFunnelBaseModel"),$Zo=o(" (Funnel Transformer model)"),IZo=l(),IF=a("li"),epe=a("strong"),qZo=o("gpt2"),NZo=o(" \u2014 "),uO=a("a"),jZo=o("TFGPT2Model"),DZo=o(" (OpenAI GPT-2 model)"),GZo=l(),qF=a("li"),ope=a("strong"),OZo=o("gptj"),VZo=o(" \u2014 "),bO=a("a"),XZo=o("TFGPTJModel"),zZo=o(" (GPT-J model)"),QZo=l(),NF=a("li"),rpe=a("strong"),WZo=o("hubert"),HZo=o(" \u2014 "),FO=a("a"),UZo=o("TFHubertModel"),JZo=o(" (Hubert model)"),YZo=l(),jF=a("li"),tpe=a("strong"),KZo=o("layoutlm"),ZZo=o(" \u2014 "),vO=a("a"),eer=o("TFLayoutLMModel"),oer=o(" (LayoutLM model)"),rer=l(),DF=a("li"),ape=a("strong"),ter=o("led"),aer=o(" \u2014 "),TO=a("a"),ner=o("TFLEDModel"),ser=o(" (LED model)"),ler=l(),GF=a("li"),npe=a("strong"),ier=o("longformer"),der=o(" \u2014 "),MO=a("a"),cer=o("TFLongformerModel"),fer=o(" (Longformer model)"),mer=l(),OF=a("li"),spe=a("strong"),ger=o("lxmert"),her=o(" \u2014 "),EO=a("a"),per=o("TFLxmertModel"),_er=o(" (LXMERT model)"),uer=l(),VF=a("li"),lpe=a("strong"),ber=o("marian"),Fer=o(" \u2014 "),CO=a("a"),ver=o("TFMarianModel"),Ter=o(" (Marian model)"),Mer=l(),XF=a("li"),ipe=a("strong"),Eer=o("mbart"),Cer=o(" \u2014 "),wO=a("a"),wer=o("TFMBartModel"),Aer=o(" (mBART model)"),yer=l(),zF=a("li"),dpe=a("strong"),Ler=o("mobilebert"),xer=o(" \u2014 "),AO=a("a"),ker=o("TFMobileBertModel"),Ser=o(" (MobileBERT model)"),Rer=l(),QF=a("li"),cpe=a("strong"),Ber=o("mpnet"),Per=o(" \u2014 "),yO=a("a"),$er=o("TFMPNetModel"),Ier=o(" (MPNet model)"),qer=l(),WF=a("li"),fpe=a("strong"),Ner=o("mt5"),jer=o(" \u2014 "),LO=a("a"),Der=o("TFMT5Model"),Ger=o(" (mT5 model)"),Oer=l(),HF=a("li"),mpe=a("strong"),Ver=o("openai-gpt"),Xer=o(" \u2014 "),xO=a("a"),zer=o("TFOpenAIGPTModel"),Qer=o(" (OpenAI GPT model)"),Wer=l(),UF=a("li"),gpe=a("strong"),Her=o("pegasus"),Uer=o(" \u2014 "),kO=a("a"),Jer=o("TFPegasusModel"),Yer=o(" (Pegasus model)"),Ker=l(),JF=a("li"),hpe=a("strong"),Zer=o("rembert"),eor=o(" \u2014 "),SO=a("a"),oor=o("TFRemBertModel"),ror=o(" (RemBERT model)"),tor=l(),YF=a("li"),ppe=a("strong"),aor=o("roberta"),nor=o(" \u2014 "),RO=a("a"),sor=o("TFRobertaModel"),lor=o(" (RoBERTa model)"),ior=l(),KF=a("li"),_pe=a("strong"),dor=o("roformer"),cor=o(" \u2014 "),BO=a("a"),mor=o("TFRoFormerModel"),gor=o(" (RoFormer model)"),hor=l(),ZF=a("li"),upe=a("strong"),por=o("speech_to_text"),_or=o(" \u2014 "),PO=a("a"),uor=o("TFSpeech2TextModel"),bor=o(" (Speech2Text model)"),For=l(),ev=a("li"),bpe=a("strong"),vor=o("t5"),Tor=o(" \u2014 "),$O=a("a"),Mor=o("TFT5Model"),Eor=o(" (T5 model)"),Cor=l(),ov=a("li"),Fpe=a("strong"),wor=o("tapas"),Aor=o(" \u2014 "),IO=a("a"),yor=o("TFTapasModel"),Lor=o(" (TAPAS model)"),xor=l(),rv=a("li"),vpe=a("strong"),kor=o("transfo-xl"),Sor=o(" \u2014 "),qO=a("a"),Ror=o("TFTransfoXLModel"),Bor=o(" (Transformer-XL model)"),Por=l(),tv=a("li"),Tpe=a("strong"),$or=o("vit"),Ior=o(" \u2014 "),NO=a("a"),qor=o("TFViTModel"),Nor=o(" (ViT model)"),jor=l(),av=a("li"),Mpe=a("strong"),Dor=o("wav2vec2"),Gor=o(" \u2014 "),jO=a("a"),Oor=o("TFWav2Vec2Model"),Vor=o(" (Wav2Vec2 model)"),Xor=l(),nv=a("li"),Epe=a("strong"),zor=o("xlm"),Qor=o(" \u2014 "),DO=a("a"),Wor=o("TFXLMModel"),Hor=o(" (XLM model)"),Uor=l(),sv=a("li"),Cpe=a("strong"),Jor=o("xlm-roberta"),Yor=o(" \u2014 "),GO=a("a"),Kor=o("TFXLMRobertaModel"),Zor=o(" (XLM-RoBERTa model)"),err=l(),lv=a("li"),wpe=a("strong"),orr=o("xlnet"),rrr=o(" \u2014 "),OO=a("a"),trr=o("TFXLNetModel"),arr=o(" (XLNet model)"),nrr=l(),Ape=a("p"),srr=o("Examples:"),lrr=l(),f(e0.$$.fragment),DRe=l(),_c=a("h2"),iv=a("a"),ype=a("span"),f(o0.$$.fragment),irr=l(),Lpe=a("span"),drr=o("TFAutoModelForPreTraining"),GRe=l(),vr=a("div"),f(r0.$$.fragment),crr=l(),uc=a("p"),frr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),VO=a("a"),mrr=o("from_pretrained()"),grr=o(" class method or the "),XO=a("a"),hrr=o("from_config()"),prr=o(` class
method.`),_rr=l(),t0=a("p"),urr=o("This class cannot be instantiated directly using "),xpe=a("code"),brr=o("__init__()"),Frr=o(" (throws an error)."),vrr=l(),ht=a("div"),f(a0.$$.fragment),Trr=l(),kpe=a("p"),Mrr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Err=l(),bc=a("p"),Crr=o(`Note:
Loading a model from its configuration file does `),Spe=a("strong"),wrr=o("not"),Arr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zO=a("a"),yrr=o("from_pretrained()"),Lrr=o(" to load the model weights."),xrr=l(),Rpe=a("p"),krr=o("Examples:"),Srr=l(),f(n0.$$.fragment),Rrr=l(),po=a("div"),f(s0.$$.fragment),Brr=l(),Bpe=a("p"),Prr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),$rr=l(),un=a("p"),Irr=o("The model class to instantiate is selected based on the "),Ppe=a("code"),qrr=o("model_type"),Nrr=o(` property of the config object (either
passed as an argument or loaded from `),$pe=a("code"),jrr=o("pretrained_model_name_or_path"),Drr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ipe=a("code"),Grr=o("pretrained_model_name_or_path"),Orr=o(":"),Vrr=l(),H=a("ul"),dv=a("li"),qpe=a("strong"),Xrr=o("albert"),zrr=o(" \u2014 "),QO=a("a"),Qrr=o("TFAlbertForPreTraining"),Wrr=o(" (ALBERT model)"),Hrr=l(),cv=a("li"),Npe=a("strong"),Urr=o("bart"),Jrr=o(" \u2014 "),WO=a("a"),Yrr=o("TFBartForConditionalGeneration"),Krr=o(" (BART model)"),Zrr=l(),fv=a("li"),jpe=a("strong"),etr=o("bert"),otr=o(" \u2014 "),HO=a("a"),rtr=o("TFBertForPreTraining"),ttr=o(" (BERT model)"),atr=l(),mv=a("li"),Dpe=a("strong"),ntr=o("camembert"),str=o(" \u2014 "),UO=a("a"),ltr=o("TFCamembertForMaskedLM"),itr=o(" (CamemBERT model)"),dtr=l(),gv=a("li"),Gpe=a("strong"),ctr=o("ctrl"),ftr=o(" \u2014 "),JO=a("a"),mtr=o("TFCTRLLMHeadModel"),gtr=o(" (CTRL model)"),htr=l(),hv=a("li"),Ope=a("strong"),ptr=o("distilbert"),_tr=o(" \u2014 "),YO=a("a"),utr=o("TFDistilBertForMaskedLM"),btr=o(" (DistilBERT model)"),Ftr=l(),pv=a("li"),Vpe=a("strong"),vtr=o("electra"),Ttr=o(" \u2014 "),KO=a("a"),Mtr=o("TFElectraForPreTraining"),Etr=o(" (ELECTRA model)"),Ctr=l(),_v=a("li"),Xpe=a("strong"),wtr=o("flaubert"),Atr=o(" \u2014 "),ZO=a("a"),ytr=o("TFFlaubertWithLMHeadModel"),Ltr=o(" (FlauBERT model)"),xtr=l(),uv=a("li"),zpe=a("strong"),ktr=o("funnel"),Str=o(" \u2014 "),eV=a("a"),Rtr=o("TFFunnelForPreTraining"),Btr=o(" (Funnel Transformer model)"),Ptr=l(),bv=a("li"),Qpe=a("strong"),$tr=o("gpt2"),Itr=o(" \u2014 "),oV=a("a"),qtr=o("TFGPT2LMHeadModel"),Ntr=o(" (OpenAI GPT-2 model)"),jtr=l(),Fv=a("li"),Wpe=a("strong"),Dtr=o("layoutlm"),Gtr=o(" \u2014 "),rV=a("a"),Otr=o("TFLayoutLMForMaskedLM"),Vtr=o(" (LayoutLM model)"),Xtr=l(),vv=a("li"),Hpe=a("strong"),ztr=o("lxmert"),Qtr=o(" \u2014 "),tV=a("a"),Wtr=o("TFLxmertForPreTraining"),Htr=o(" (LXMERT model)"),Utr=l(),Tv=a("li"),Upe=a("strong"),Jtr=o("mobilebert"),Ytr=o(" \u2014 "),aV=a("a"),Ktr=o("TFMobileBertForPreTraining"),Ztr=o(" (MobileBERT model)"),ear=l(),Mv=a("li"),Jpe=a("strong"),oar=o("mpnet"),rar=o(" \u2014 "),nV=a("a"),tar=o("TFMPNetForMaskedLM"),aar=o(" (MPNet model)"),nar=l(),Ev=a("li"),Ype=a("strong"),sar=o("openai-gpt"),lar=o(" \u2014 "),sV=a("a"),iar=o("TFOpenAIGPTLMHeadModel"),dar=o(" (OpenAI GPT model)"),car=l(),Cv=a("li"),Kpe=a("strong"),far=o("roberta"),mar=o(" \u2014 "),lV=a("a"),gar=o("TFRobertaForMaskedLM"),har=o(" (RoBERTa model)"),par=l(),wv=a("li"),Zpe=a("strong"),_ar=o("t5"),uar=o(" \u2014 "),iV=a("a"),bar=o("TFT5ForConditionalGeneration"),Far=o(" (T5 model)"),Tar=l(),Av=a("li"),e_e=a("strong"),Mar=o("tapas"),Ear=o(" \u2014 "),dV=a("a"),Car=o("TFTapasForMaskedLM"),war=o(" (TAPAS model)"),Aar=l(),yv=a("li"),o_e=a("strong"),yar=o("transfo-xl"),Lar=o(" \u2014 "),cV=a("a"),xar=o("TFTransfoXLLMHeadModel"),kar=o(" (Transformer-XL model)"),Sar=l(),Lv=a("li"),r_e=a("strong"),Rar=o("xlm"),Bar=o(" \u2014 "),fV=a("a"),Par=o("TFXLMWithLMHeadModel"),$ar=o(" (XLM model)"),Iar=l(),xv=a("li"),t_e=a("strong"),qar=o("xlm-roberta"),Nar=o(" \u2014 "),mV=a("a"),jar=o("TFXLMRobertaForMaskedLM"),Dar=o(" (XLM-RoBERTa model)"),Gar=l(),kv=a("li"),a_e=a("strong"),Oar=o("xlnet"),Var=o(" \u2014 "),gV=a("a"),Xar=o("TFXLNetLMHeadModel"),zar=o(" (XLNet model)"),Qar=l(),n_e=a("p"),War=o("Examples:"),Har=l(),f(l0.$$.fragment),ORe=l(),Fc=a("h2"),Sv=a("a"),s_e=a("span"),f(i0.$$.fragment),Uar=l(),l_e=a("span"),Jar=o("TFAutoModelForCausalLM"),VRe=l(),Tr=a("div"),f(d0.$$.fragment),Yar=l(),vc=a("p"),Kar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),hV=a("a"),Zar=o("from_pretrained()"),enr=o(" class method or the "),pV=a("a"),onr=o("from_config()"),rnr=o(` class
method.`),tnr=l(),c0=a("p"),anr=o("This class cannot be instantiated directly using "),i_e=a("code"),nnr=o("__init__()"),snr=o(" (throws an error)."),lnr=l(),pt=a("div"),f(f0.$$.fragment),inr=l(),d_e=a("p"),dnr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),cnr=l(),Tc=a("p"),fnr=o(`Note:
Loading a model from its configuration file does `),c_e=a("strong"),mnr=o("not"),gnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_V=a("a"),hnr=o("from_pretrained()"),pnr=o(" to load the model weights."),_nr=l(),f_e=a("p"),unr=o("Examples:"),bnr=l(),f(m0.$$.fragment),Fnr=l(),_o=a("div"),f(g0.$$.fragment),vnr=l(),m_e=a("p"),Tnr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Mnr=l(),bn=a("p"),Enr=o("The model class to instantiate is selected based on the "),g_e=a("code"),Cnr=o("model_type"),wnr=o(` property of the config object (either
passed as an argument or loaded from `),h_e=a("code"),Anr=o("pretrained_model_name_or_path"),ynr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p_e=a("code"),Lnr=o("pretrained_model_name_or_path"),xnr=o(":"),knr=l(),ce=a("ul"),Rv=a("li"),__e=a("strong"),Snr=o("bert"),Rnr=o(" \u2014 "),uV=a("a"),Bnr=o("TFBertLMHeadModel"),Pnr=o(" (BERT model)"),$nr=l(),Bv=a("li"),u_e=a("strong"),Inr=o("camembert"),qnr=o(" \u2014 "),bV=a("a"),Nnr=o("TFCamembertForCausalLM"),jnr=o(" (CamemBERT model)"),Dnr=l(),Pv=a("li"),b_e=a("strong"),Gnr=o("ctrl"),Onr=o(" \u2014 "),FV=a("a"),Vnr=o("TFCTRLLMHeadModel"),Xnr=o(" (CTRL model)"),znr=l(),$v=a("li"),F_e=a("strong"),Qnr=o("gpt2"),Wnr=o(" \u2014 "),vV=a("a"),Hnr=o("TFGPT2LMHeadModel"),Unr=o(" (OpenAI GPT-2 model)"),Jnr=l(),Iv=a("li"),v_e=a("strong"),Ynr=o("gptj"),Knr=o(" \u2014 "),TV=a("a"),Znr=o("TFGPTJForCausalLM"),esr=o(" (GPT-J model)"),osr=l(),qv=a("li"),T_e=a("strong"),rsr=o("openai-gpt"),tsr=o(" \u2014 "),MV=a("a"),asr=o("TFOpenAIGPTLMHeadModel"),nsr=o(" (OpenAI GPT model)"),ssr=l(),Nv=a("li"),M_e=a("strong"),lsr=o("rembert"),isr=o(" \u2014 "),EV=a("a"),dsr=o("TFRemBertForCausalLM"),csr=o(" (RemBERT model)"),fsr=l(),jv=a("li"),E_e=a("strong"),msr=o("roberta"),gsr=o(" \u2014 "),CV=a("a"),hsr=o("TFRobertaForCausalLM"),psr=o(" (RoBERTa model)"),_sr=l(),Dv=a("li"),C_e=a("strong"),usr=o("roformer"),bsr=o(" \u2014 "),wV=a("a"),Fsr=o("TFRoFormerForCausalLM"),vsr=o(" (RoFormer model)"),Tsr=l(),Gv=a("li"),w_e=a("strong"),Msr=o("transfo-xl"),Esr=o(" \u2014 "),AV=a("a"),Csr=o("TFTransfoXLLMHeadModel"),wsr=o(" (Transformer-XL model)"),Asr=l(),Ov=a("li"),A_e=a("strong"),ysr=o("xlm"),Lsr=o(" \u2014 "),yV=a("a"),xsr=o("TFXLMWithLMHeadModel"),ksr=o(" (XLM model)"),Ssr=l(),Vv=a("li"),y_e=a("strong"),Rsr=o("xlnet"),Bsr=o(" \u2014 "),LV=a("a"),Psr=o("TFXLNetLMHeadModel"),$sr=o(" (XLNet model)"),Isr=l(),L_e=a("p"),qsr=o("Examples:"),Nsr=l(),f(h0.$$.fragment),XRe=l(),Mc=a("h2"),Xv=a("a"),x_e=a("span"),f(p0.$$.fragment),jsr=l(),k_e=a("span"),Dsr=o("TFAutoModelForImageClassification"),zRe=l(),Mr=a("div"),f(_0.$$.fragment),Gsr=l(),Ec=a("p"),Osr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),xV=a("a"),Vsr=o("from_pretrained()"),Xsr=o(" class method or the "),kV=a("a"),zsr=o("from_config()"),Qsr=o(` class
method.`),Wsr=l(),u0=a("p"),Hsr=o("This class cannot be instantiated directly using "),S_e=a("code"),Usr=o("__init__()"),Jsr=o(" (throws an error)."),Ysr=l(),_t=a("div"),f(b0.$$.fragment),Ksr=l(),R_e=a("p"),Zsr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),elr=l(),Cc=a("p"),olr=o(`Note:
Loading a model from its configuration file does `),B_e=a("strong"),rlr=o("not"),tlr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SV=a("a"),alr=o("from_pretrained()"),nlr=o(" to load the model weights."),slr=l(),P_e=a("p"),llr=o("Examples:"),ilr=l(),f(F0.$$.fragment),dlr=l(),uo=a("div"),f(v0.$$.fragment),clr=l(),$_e=a("p"),flr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),mlr=l(),Fn=a("p"),glr=o("The model class to instantiate is selected based on the "),I_e=a("code"),hlr=o("model_type"),plr=o(` property of the config object (either
passed as an argument or loaded from `),q_e=a("code"),_lr=o("pretrained_model_name_or_path"),ulr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N_e=a("code"),blr=o("pretrained_model_name_or_path"),Flr=o(":"),vlr=l(),T0=a("ul"),zv=a("li"),j_e=a("strong"),Tlr=o("convnext"),Mlr=o(" \u2014 "),RV=a("a"),Elr=o("TFConvNextForImageClassification"),Clr=o(" (ConvNext model)"),wlr=l(),Qv=a("li"),D_e=a("strong"),Alr=o("vit"),ylr=o(" \u2014 "),BV=a("a"),Llr=o("TFViTForImageClassification"),xlr=o(" (ViT model)"),klr=l(),G_e=a("p"),Slr=o("Examples:"),Rlr=l(),f(M0.$$.fragment),QRe=l(),wc=a("h2"),Wv=a("a"),O_e=a("span"),f(E0.$$.fragment),Blr=l(),V_e=a("span"),Plr=o("TFAutoModelForMaskedLM"),WRe=l(),Er=a("div"),f(C0.$$.fragment),$lr=l(),Ac=a("p"),Ilr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),PV=a("a"),qlr=o("from_pretrained()"),Nlr=o(" class method or the "),$V=a("a"),jlr=o("from_config()"),Dlr=o(` class
method.`),Glr=l(),w0=a("p"),Olr=o("This class cannot be instantiated directly using "),X_e=a("code"),Vlr=o("__init__()"),Xlr=o(" (throws an error)."),zlr=l(),ut=a("div"),f(A0.$$.fragment),Qlr=l(),z_e=a("p"),Wlr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Hlr=l(),yc=a("p"),Ulr=o(`Note:
Loading a model from its configuration file does `),Q_e=a("strong"),Jlr=o("not"),Ylr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IV=a("a"),Klr=o("from_pretrained()"),Zlr=o(" to load the model weights."),eir=l(),W_e=a("p"),oir=o("Examples:"),rir=l(),f(y0.$$.fragment),tir=l(),bo=a("div"),f(L0.$$.fragment),air=l(),H_e=a("p"),nir=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),sir=l(),vn=a("p"),lir=o("The model class to instantiate is selected based on the "),U_e=a("code"),iir=o("model_type"),dir=o(` property of the config object (either
passed as an argument or loaded from `),J_e=a("code"),cir=o("pretrained_model_name_or_path"),fir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y_e=a("code"),mir=o("pretrained_model_name_or_path"),gir=o(":"),hir=l(),J=a("ul"),Hv=a("li"),K_e=a("strong"),pir=o("albert"),_ir=o(" \u2014 "),qV=a("a"),uir=o("TFAlbertForMaskedLM"),bir=o(" (ALBERT model)"),Fir=l(),Uv=a("li"),Z_e=a("strong"),vir=o("bert"),Tir=o(" \u2014 "),NV=a("a"),Mir=o("TFBertForMaskedLM"),Eir=o(" (BERT model)"),Cir=l(),Jv=a("li"),eue=a("strong"),wir=o("camembert"),Air=o(" \u2014 "),jV=a("a"),yir=o("TFCamembertForMaskedLM"),Lir=o(" (CamemBERT model)"),xir=l(),Yv=a("li"),oue=a("strong"),kir=o("convbert"),Sir=o(" \u2014 "),DV=a("a"),Rir=o("TFConvBertForMaskedLM"),Bir=o(" (ConvBERT model)"),Pir=l(),Kv=a("li"),rue=a("strong"),$ir=o("deberta"),Iir=o(" \u2014 "),GV=a("a"),qir=o("TFDebertaForMaskedLM"),Nir=o(" (DeBERTa model)"),jir=l(),Zv=a("li"),tue=a("strong"),Dir=o("deberta-v2"),Gir=o(" \u2014 "),OV=a("a"),Oir=o("TFDebertaV2ForMaskedLM"),Vir=o(" (DeBERTa-v2 model)"),Xir=l(),e6=a("li"),aue=a("strong"),zir=o("distilbert"),Qir=o(" \u2014 "),VV=a("a"),Wir=o("TFDistilBertForMaskedLM"),Hir=o(" (DistilBERT model)"),Uir=l(),o6=a("li"),nue=a("strong"),Jir=o("electra"),Yir=o(" \u2014 "),XV=a("a"),Kir=o("TFElectraForMaskedLM"),Zir=o(" (ELECTRA model)"),edr=l(),r6=a("li"),sue=a("strong"),odr=o("flaubert"),rdr=o(" \u2014 "),zV=a("a"),tdr=o("TFFlaubertWithLMHeadModel"),adr=o(" (FlauBERT model)"),ndr=l(),t6=a("li"),lue=a("strong"),sdr=o("funnel"),ldr=o(" \u2014 "),QV=a("a"),idr=o("TFFunnelForMaskedLM"),ddr=o(" (Funnel Transformer model)"),cdr=l(),a6=a("li"),iue=a("strong"),fdr=o("layoutlm"),mdr=o(" \u2014 "),WV=a("a"),gdr=o("TFLayoutLMForMaskedLM"),hdr=o(" (LayoutLM model)"),pdr=l(),n6=a("li"),due=a("strong"),_dr=o("longformer"),udr=o(" \u2014 "),HV=a("a"),bdr=o("TFLongformerForMaskedLM"),Fdr=o(" (Longformer model)"),vdr=l(),s6=a("li"),cue=a("strong"),Tdr=o("mobilebert"),Mdr=o(" \u2014 "),UV=a("a"),Edr=o("TFMobileBertForMaskedLM"),Cdr=o(" (MobileBERT model)"),wdr=l(),l6=a("li"),fue=a("strong"),Adr=o("mpnet"),ydr=o(" \u2014 "),JV=a("a"),Ldr=o("TFMPNetForMaskedLM"),xdr=o(" (MPNet model)"),kdr=l(),i6=a("li"),mue=a("strong"),Sdr=o("rembert"),Rdr=o(" \u2014 "),YV=a("a"),Bdr=o("TFRemBertForMaskedLM"),Pdr=o(" (RemBERT model)"),$dr=l(),d6=a("li"),gue=a("strong"),Idr=o("roberta"),qdr=o(" \u2014 "),KV=a("a"),Ndr=o("TFRobertaForMaskedLM"),jdr=o(" (RoBERTa model)"),Ddr=l(),c6=a("li"),hue=a("strong"),Gdr=o("roformer"),Odr=o(" \u2014 "),ZV=a("a"),Vdr=o("TFRoFormerForMaskedLM"),Xdr=o(" (RoFormer model)"),zdr=l(),f6=a("li"),pue=a("strong"),Qdr=o("tapas"),Wdr=o(" \u2014 "),eX=a("a"),Hdr=o("TFTapasForMaskedLM"),Udr=o(" (TAPAS model)"),Jdr=l(),m6=a("li"),_ue=a("strong"),Ydr=o("xlm"),Kdr=o(" \u2014 "),oX=a("a"),Zdr=o("TFXLMWithLMHeadModel"),ecr=o(" (XLM model)"),ocr=l(),g6=a("li"),uue=a("strong"),rcr=o("xlm-roberta"),tcr=o(" \u2014 "),rX=a("a"),acr=o("TFXLMRobertaForMaskedLM"),ncr=o(" (XLM-RoBERTa model)"),scr=l(),bue=a("p"),lcr=o("Examples:"),icr=l(),f(x0.$$.fragment),HRe=l(),Lc=a("h2"),h6=a("a"),Fue=a("span"),f(k0.$$.fragment),dcr=l(),vue=a("span"),ccr=o("TFAutoModelForSeq2SeqLM"),URe=l(),Cr=a("div"),f(S0.$$.fragment),fcr=l(),xc=a("p"),mcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),tX=a("a"),gcr=o("from_pretrained()"),hcr=o(" class method or the "),aX=a("a"),pcr=o("from_config()"),_cr=o(` class
method.`),ucr=l(),R0=a("p"),bcr=o("This class cannot be instantiated directly using "),Tue=a("code"),Fcr=o("__init__()"),vcr=o(" (throws an error)."),Tcr=l(),bt=a("div"),f(B0.$$.fragment),Mcr=l(),Mue=a("p"),Ecr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Ccr=l(),kc=a("p"),wcr=o(`Note:
Loading a model from its configuration file does `),Eue=a("strong"),Acr=o("not"),ycr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nX=a("a"),Lcr=o("from_pretrained()"),xcr=o(" to load the model weights."),kcr=l(),Cue=a("p"),Scr=o("Examples:"),Rcr=l(),f(P0.$$.fragment),Bcr=l(),Fo=a("div"),f($0.$$.fragment),Pcr=l(),wue=a("p"),$cr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Icr=l(),Tn=a("p"),qcr=o("The model class to instantiate is selected based on the "),Aue=a("code"),Ncr=o("model_type"),jcr=o(` property of the config object (either
passed as an argument or loaded from `),yue=a("code"),Dcr=o("pretrained_model_name_or_path"),Gcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lue=a("code"),Ocr=o("pretrained_model_name_or_path"),Vcr=o(":"),Xcr=l(),ue=a("ul"),p6=a("li"),xue=a("strong"),zcr=o("bart"),Qcr=o(" \u2014 "),sX=a("a"),Wcr=o("TFBartForConditionalGeneration"),Hcr=o(" (BART model)"),Ucr=l(),_6=a("li"),kue=a("strong"),Jcr=o("blenderbot"),Ycr=o(" \u2014 "),lX=a("a"),Kcr=o("TFBlenderbotForConditionalGeneration"),Zcr=o(" (Blenderbot model)"),efr=l(),u6=a("li"),Sue=a("strong"),ofr=o("blenderbot-small"),rfr=o(" \u2014 "),iX=a("a"),tfr=o("TFBlenderbotSmallForConditionalGeneration"),afr=o(" (BlenderbotSmall model)"),nfr=l(),b6=a("li"),Rue=a("strong"),sfr=o("encoder-decoder"),lfr=o(" \u2014 "),dX=a("a"),ifr=o("TFEncoderDecoderModel"),dfr=o(" (Encoder decoder model)"),cfr=l(),F6=a("li"),Bue=a("strong"),ffr=o("led"),mfr=o(" \u2014 "),cX=a("a"),gfr=o("TFLEDForConditionalGeneration"),hfr=o(" (LED model)"),pfr=l(),v6=a("li"),Pue=a("strong"),_fr=o("marian"),ufr=o(" \u2014 "),fX=a("a"),bfr=o("TFMarianMTModel"),Ffr=o(" (Marian model)"),vfr=l(),T6=a("li"),$ue=a("strong"),Tfr=o("mbart"),Mfr=o(" \u2014 "),mX=a("a"),Efr=o("TFMBartForConditionalGeneration"),Cfr=o(" (mBART model)"),wfr=l(),M6=a("li"),Iue=a("strong"),Afr=o("mt5"),yfr=o(" \u2014 "),gX=a("a"),Lfr=o("TFMT5ForConditionalGeneration"),xfr=o(" (mT5 model)"),kfr=l(),E6=a("li"),que=a("strong"),Sfr=o("pegasus"),Rfr=o(" \u2014 "),hX=a("a"),Bfr=o("TFPegasusForConditionalGeneration"),Pfr=o(" (Pegasus model)"),$fr=l(),C6=a("li"),Nue=a("strong"),Ifr=o("t5"),qfr=o(" \u2014 "),pX=a("a"),Nfr=o("TFT5ForConditionalGeneration"),jfr=o(" (T5 model)"),Dfr=l(),jue=a("p"),Gfr=o("Examples:"),Ofr=l(),f(I0.$$.fragment),JRe=l(),Sc=a("h2"),w6=a("a"),Due=a("span"),f(q0.$$.fragment),Vfr=l(),Gue=a("span"),Xfr=o("TFAutoModelForSequenceClassification"),YRe=l(),wr=a("div"),f(N0.$$.fragment),zfr=l(),Rc=a("p"),Qfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),_X=a("a"),Wfr=o("from_pretrained()"),Hfr=o(" class method or the "),uX=a("a"),Ufr=o("from_config()"),Jfr=o(` class
method.`),Yfr=l(),j0=a("p"),Kfr=o("This class cannot be instantiated directly using "),Oue=a("code"),Zfr=o("__init__()"),emr=o(" (throws an error)."),omr=l(),Ft=a("div"),f(D0.$$.fragment),rmr=l(),Vue=a("p"),tmr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),amr=l(),Bc=a("p"),nmr=o(`Note:
Loading a model from its configuration file does `),Xue=a("strong"),smr=o("not"),lmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bX=a("a"),imr=o("from_pretrained()"),dmr=o(" to load the model weights."),cmr=l(),zue=a("p"),fmr=o("Examples:"),mmr=l(),f(G0.$$.fragment),gmr=l(),vo=a("div"),f(O0.$$.fragment),hmr=l(),Que=a("p"),pmr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),_mr=l(),Mn=a("p"),umr=o("The model class to instantiate is selected based on the "),Wue=a("code"),bmr=o("model_type"),Fmr=o(` property of the config object (either
passed as an argument or loaded from `),Hue=a("code"),vmr=o("pretrained_model_name_or_path"),Tmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uue=a("code"),Mmr=o("pretrained_model_name_or_path"),Emr=o(":"),Cmr=l(),V=a("ul"),A6=a("li"),Jue=a("strong"),wmr=o("albert"),Amr=o(" \u2014 "),FX=a("a"),ymr=o("TFAlbertForSequenceClassification"),Lmr=o(" (ALBERT model)"),xmr=l(),y6=a("li"),Yue=a("strong"),kmr=o("bert"),Smr=o(" \u2014 "),vX=a("a"),Rmr=o("TFBertForSequenceClassification"),Bmr=o(" (BERT model)"),Pmr=l(),L6=a("li"),Kue=a("strong"),$mr=o("camembert"),Imr=o(" \u2014 "),TX=a("a"),qmr=o("TFCamembertForSequenceClassification"),Nmr=o(" (CamemBERT model)"),jmr=l(),x6=a("li"),Zue=a("strong"),Dmr=o("convbert"),Gmr=o(" \u2014 "),MX=a("a"),Omr=o("TFConvBertForSequenceClassification"),Vmr=o(" (ConvBERT model)"),Xmr=l(),k6=a("li"),e1e=a("strong"),zmr=o("ctrl"),Qmr=o(" \u2014 "),EX=a("a"),Wmr=o("TFCTRLForSequenceClassification"),Hmr=o(" (CTRL model)"),Umr=l(),S6=a("li"),o1e=a("strong"),Jmr=o("deberta"),Ymr=o(" \u2014 "),CX=a("a"),Kmr=o("TFDebertaForSequenceClassification"),Zmr=o(" (DeBERTa model)"),egr=l(),R6=a("li"),r1e=a("strong"),ogr=o("deberta-v2"),rgr=o(" \u2014 "),wX=a("a"),tgr=o("TFDebertaV2ForSequenceClassification"),agr=o(" (DeBERTa-v2 model)"),ngr=l(),B6=a("li"),t1e=a("strong"),sgr=o("distilbert"),lgr=o(" \u2014 "),AX=a("a"),igr=o("TFDistilBertForSequenceClassification"),dgr=o(" (DistilBERT model)"),cgr=l(),P6=a("li"),a1e=a("strong"),fgr=o("electra"),mgr=o(" \u2014 "),yX=a("a"),ggr=o("TFElectraForSequenceClassification"),hgr=o(" (ELECTRA model)"),pgr=l(),$6=a("li"),n1e=a("strong"),_gr=o("flaubert"),ugr=o(" \u2014 "),LX=a("a"),bgr=o("TFFlaubertForSequenceClassification"),Fgr=o(" (FlauBERT model)"),vgr=l(),I6=a("li"),s1e=a("strong"),Tgr=o("funnel"),Mgr=o(" \u2014 "),xX=a("a"),Egr=o("TFFunnelForSequenceClassification"),Cgr=o(" (Funnel Transformer model)"),wgr=l(),q6=a("li"),l1e=a("strong"),Agr=o("gpt2"),ygr=o(" \u2014 "),kX=a("a"),Lgr=o("TFGPT2ForSequenceClassification"),xgr=o(" (OpenAI GPT-2 model)"),kgr=l(),N6=a("li"),i1e=a("strong"),Sgr=o("gptj"),Rgr=o(" \u2014 "),SX=a("a"),Bgr=o("TFGPTJForSequenceClassification"),Pgr=o(" (GPT-J model)"),$gr=l(),j6=a("li"),d1e=a("strong"),Igr=o("layoutlm"),qgr=o(" \u2014 "),RX=a("a"),Ngr=o("TFLayoutLMForSequenceClassification"),jgr=o(" (LayoutLM model)"),Dgr=l(),D6=a("li"),c1e=a("strong"),Ggr=o("longformer"),Ogr=o(" \u2014 "),BX=a("a"),Vgr=o("TFLongformerForSequenceClassification"),Xgr=o(" (Longformer model)"),zgr=l(),G6=a("li"),f1e=a("strong"),Qgr=o("mobilebert"),Wgr=o(" \u2014 "),PX=a("a"),Hgr=o("TFMobileBertForSequenceClassification"),Ugr=o(" (MobileBERT model)"),Jgr=l(),O6=a("li"),m1e=a("strong"),Ygr=o("mpnet"),Kgr=o(" \u2014 "),$X=a("a"),Zgr=o("TFMPNetForSequenceClassification"),ehr=o(" (MPNet model)"),ohr=l(),V6=a("li"),g1e=a("strong"),rhr=o("openai-gpt"),thr=o(" \u2014 "),IX=a("a"),ahr=o("TFOpenAIGPTForSequenceClassification"),nhr=o(" (OpenAI GPT model)"),shr=l(),X6=a("li"),h1e=a("strong"),lhr=o("rembert"),ihr=o(" \u2014 "),qX=a("a"),dhr=o("TFRemBertForSequenceClassification"),chr=o(" (RemBERT model)"),fhr=l(),z6=a("li"),p1e=a("strong"),mhr=o("roberta"),ghr=o(" \u2014 "),NX=a("a"),hhr=o("TFRobertaForSequenceClassification"),phr=o(" (RoBERTa model)"),_hr=l(),Q6=a("li"),_1e=a("strong"),uhr=o("roformer"),bhr=o(" \u2014 "),jX=a("a"),Fhr=o("TFRoFormerForSequenceClassification"),vhr=o(" (RoFormer model)"),Thr=l(),W6=a("li"),u1e=a("strong"),Mhr=o("tapas"),Ehr=o(" \u2014 "),DX=a("a"),Chr=o("TFTapasForSequenceClassification"),whr=o(" (TAPAS model)"),Ahr=l(),H6=a("li"),b1e=a("strong"),yhr=o("transfo-xl"),Lhr=o(" \u2014 "),GX=a("a"),xhr=o("TFTransfoXLForSequenceClassification"),khr=o(" (Transformer-XL model)"),Shr=l(),U6=a("li"),F1e=a("strong"),Rhr=o("xlm"),Bhr=o(" \u2014 "),OX=a("a"),Phr=o("TFXLMForSequenceClassification"),$hr=o(" (XLM model)"),Ihr=l(),J6=a("li"),v1e=a("strong"),qhr=o("xlm-roberta"),Nhr=o(" \u2014 "),VX=a("a"),jhr=o("TFXLMRobertaForSequenceClassification"),Dhr=o(" (XLM-RoBERTa model)"),Ghr=l(),Y6=a("li"),T1e=a("strong"),Ohr=o("xlnet"),Vhr=o(" \u2014 "),XX=a("a"),Xhr=o("TFXLNetForSequenceClassification"),zhr=o(" (XLNet model)"),Qhr=l(),M1e=a("p"),Whr=o("Examples:"),Hhr=l(),f(V0.$$.fragment),KRe=l(),Pc=a("h2"),K6=a("a"),E1e=a("span"),f(X0.$$.fragment),Uhr=l(),C1e=a("span"),Jhr=o("TFAutoModelForMultipleChoice"),ZRe=l(),Ar=a("div"),f(z0.$$.fragment),Yhr=l(),$c=a("p"),Khr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),zX=a("a"),Zhr=o("from_pretrained()"),epr=o(" class method or the "),QX=a("a"),opr=o("from_config()"),rpr=o(` class
method.`),tpr=l(),Q0=a("p"),apr=o("This class cannot be instantiated directly using "),w1e=a("code"),npr=o("__init__()"),spr=o(" (throws an error)."),lpr=l(),vt=a("div"),f(W0.$$.fragment),ipr=l(),A1e=a("p"),dpr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),cpr=l(),Ic=a("p"),fpr=o(`Note:
Loading a model from its configuration file does `),y1e=a("strong"),mpr=o("not"),gpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WX=a("a"),hpr=o("from_pretrained()"),ppr=o(" to load the model weights."),_pr=l(),L1e=a("p"),upr=o("Examples:"),bpr=l(),f(H0.$$.fragment),Fpr=l(),To=a("div"),f(U0.$$.fragment),vpr=l(),x1e=a("p"),Tpr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Mpr=l(),En=a("p"),Epr=o("The model class to instantiate is selected based on the "),k1e=a("code"),Cpr=o("model_type"),wpr=o(` property of the config object (either
passed as an argument or loaded from `),S1e=a("code"),Apr=o("pretrained_model_name_or_path"),ypr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R1e=a("code"),Lpr=o("pretrained_model_name_or_path"),xpr=o(":"),kpr=l(),ae=a("ul"),Z6=a("li"),B1e=a("strong"),Spr=o("albert"),Rpr=o(" \u2014 "),HX=a("a"),Bpr=o("TFAlbertForMultipleChoice"),Ppr=o(" (ALBERT model)"),$pr=l(),eT=a("li"),P1e=a("strong"),Ipr=o("bert"),qpr=o(" \u2014 "),UX=a("a"),Npr=o("TFBertForMultipleChoice"),jpr=o(" (BERT model)"),Dpr=l(),oT=a("li"),$1e=a("strong"),Gpr=o("camembert"),Opr=o(" \u2014 "),JX=a("a"),Vpr=o("TFCamembertForMultipleChoice"),Xpr=o(" (CamemBERT model)"),zpr=l(),rT=a("li"),I1e=a("strong"),Qpr=o("convbert"),Wpr=o(" \u2014 "),YX=a("a"),Hpr=o("TFConvBertForMultipleChoice"),Upr=o(" (ConvBERT model)"),Jpr=l(),tT=a("li"),q1e=a("strong"),Ypr=o("distilbert"),Kpr=o(" \u2014 "),KX=a("a"),Zpr=o("TFDistilBertForMultipleChoice"),e_r=o(" (DistilBERT model)"),o_r=l(),aT=a("li"),N1e=a("strong"),r_r=o("electra"),t_r=o(" \u2014 "),ZX=a("a"),a_r=o("TFElectraForMultipleChoice"),n_r=o(" (ELECTRA model)"),s_r=l(),nT=a("li"),j1e=a("strong"),l_r=o("flaubert"),i_r=o(" \u2014 "),ez=a("a"),d_r=o("TFFlaubertForMultipleChoice"),c_r=o(" (FlauBERT model)"),f_r=l(),sT=a("li"),D1e=a("strong"),m_r=o("funnel"),g_r=o(" \u2014 "),oz=a("a"),h_r=o("TFFunnelForMultipleChoice"),p_r=o(" (Funnel Transformer model)"),__r=l(),lT=a("li"),G1e=a("strong"),u_r=o("longformer"),b_r=o(" \u2014 "),rz=a("a"),F_r=o("TFLongformerForMultipleChoice"),v_r=o(" (Longformer model)"),T_r=l(),iT=a("li"),O1e=a("strong"),M_r=o("mobilebert"),E_r=o(" \u2014 "),tz=a("a"),C_r=o("TFMobileBertForMultipleChoice"),w_r=o(" (MobileBERT model)"),A_r=l(),dT=a("li"),V1e=a("strong"),y_r=o("mpnet"),L_r=o(" \u2014 "),az=a("a"),x_r=o("TFMPNetForMultipleChoice"),k_r=o(" (MPNet model)"),S_r=l(),cT=a("li"),X1e=a("strong"),R_r=o("rembert"),B_r=o(" \u2014 "),nz=a("a"),P_r=o("TFRemBertForMultipleChoice"),$_r=o(" (RemBERT model)"),I_r=l(),fT=a("li"),z1e=a("strong"),q_r=o("roberta"),N_r=o(" \u2014 "),sz=a("a"),j_r=o("TFRobertaForMultipleChoice"),D_r=o(" (RoBERTa model)"),G_r=l(),mT=a("li"),Q1e=a("strong"),O_r=o("roformer"),V_r=o(" \u2014 "),lz=a("a"),X_r=o("TFRoFormerForMultipleChoice"),z_r=o(" (RoFormer model)"),Q_r=l(),gT=a("li"),W1e=a("strong"),W_r=o("xlm"),H_r=o(" \u2014 "),iz=a("a"),U_r=o("TFXLMForMultipleChoice"),J_r=o(" (XLM model)"),Y_r=l(),hT=a("li"),H1e=a("strong"),K_r=o("xlm-roberta"),Z_r=o(" \u2014 "),dz=a("a"),eur=o("TFXLMRobertaForMultipleChoice"),our=o(" (XLM-RoBERTa model)"),rur=l(),pT=a("li"),U1e=a("strong"),tur=o("xlnet"),aur=o(" \u2014 "),cz=a("a"),nur=o("TFXLNetForMultipleChoice"),sur=o(" (XLNet model)"),lur=l(),J1e=a("p"),iur=o("Examples:"),dur=l(),f(J0.$$.fragment),eBe=l(),qc=a("h2"),_T=a("a"),Y1e=a("span"),f(Y0.$$.fragment),cur=l(),K1e=a("span"),fur=o("TFAutoModelForTableQuestionAnswering"),oBe=l(),yr=a("div"),f(K0.$$.fragment),mur=l(),Nc=a("p"),gur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),fz=a("a"),hur=o("from_pretrained()"),pur=o(" class method or the "),mz=a("a"),_ur=o("from_config()"),uur=o(` class
method.`),bur=l(),Z0=a("p"),Fur=o("This class cannot be instantiated directly using "),Z1e=a("code"),vur=o("__init__()"),Tur=o(" (throws an error)."),Mur=l(),Tt=a("div"),f(ey.$$.fragment),Eur=l(),e4e=a("p"),Cur=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),wur=l(),jc=a("p"),Aur=o(`Note:
Loading a model from its configuration file does `),o4e=a("strong"),yur=o("not"),Lur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gz=a("a"),xur=o("from_pretrained()"),kur=o(" to load the model weights."),Sur=l(),r4e=a("p"),Rur=o("Examples:"),Bur=l(),f(oy.$$.fragment),Pur=l(),Mo=a("div"),f(ry.$$.fragment),$ur=l(),t4e=a("p"),Iur=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),qur=l(),Cn=a("p"),Nur=o("The model class to instantiate is selected based on the "),a4e=a("code"),jur=o("model_type"),Dur=o(` property of the config object (either
passed as an argument or loaded from `),n4e=a("code"),Gur=o("pretrained_model_name_or_path"),Our=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s4e=a("code"),Vur=o("pretrained_model_name_or_path"),Xur=o(":"),zur=l(),l4e=a("ul"),uT=a("li"),i4e=a("strong"),Qur=o("tapas"),Wur=o(" \u2014 "),hz=a("a"),Hur=o("TFTapasForQuestionAnswering"),Uur=o(" (TAPAS model)"),Jur=l(),d4e=a("p"),Yur=o("Examples:"),Kur=l(),f(ty.$$.fragment),rBe=l(),Dc=a("h2"),bT=a("a"),c4e=a("span"),f(ay.$$.fragment),Zur=l(),f4e=a("span"),e1r=o("TFAutoModelForTokenClassification"),tBe=l(),Lr=a("div"),f(ny.$$.fragment),o1r=l(),Gc=a("p"),r1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),pz=a("a"),t1r=o("from_pretrained()"),a1r=o(" class method or the "),_z=a("a"),n1r=o("from_config()"),s1r=o(` class
method.`),l1r=l(),sy=a("p"),i1r=o("This class cannot be instantiated directly using "),m4e=a("code"),d1r=o("__init__()"),c1r=o(" (throws an error)."),f1r=l(),Mt=a("div"),f(ly.$$.fragment),m1r=l(),g4e=a("p"),g1r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),h1r=l(),Oc=a("p"),p1r=o(`Note:
Loading a model from its configuration file does `),h4e=a("strong"),_1r=o("not"),u1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uz=a("a"),b1r=o("from_pretrained()"),F1r=o(" to load the model weights."),v1r=l(),p4e=a("p"),T1r=o("Examples:"),M1r=l(),f(iy.$$.fragment),E1r=l(),Eo=a("div"),f(dy.$$.fragment),C1r=l(),_4e=a("p"),w1r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),A1r=l(),wn=a("p"),y1r=o("The model class to instantiate is selected based on the "),u4e=a("code"),L1r=o("model_type"),x1r=o(` property of the config object (either
passed as an argument or loaded from `),b4e=a("code"),k1r=o("pretrained_model_name_or_path"),S1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F4e=a("code"),R1r=o("pretrained_model_name_or_path"),B1r=o(":"),P1r=l(),Y=a("ul"),FT=a("li"),v4e=a("strong"),$1r=o("albert"),I1r=o(" \u2014 "),bz=a("a"),q1r=o("TFAlbertForTokenClassification"),N1r=o(" (ALBERT model)"),j1r=l(),vT=a("li"),T4e=a("strong"),D1r=o("bert"),G1r=o(" \u2014 "),Fz=a("a"),O1r=o("TFBertForTokenClassification"),V1r=o(" (BERT model)"),X1r=l(),TT=a("li"),M4e=a("strong"),z1r=o("camembert"),Q1r=o(" \u2014 "),vz=a("a"),W1r=o("TFCamembertForTokenClassification"),H1r=o(" (CamemBERT model)"),U1r=l(),MT=a("li"),E4e=a("strong"),J1r=o("convbert"),Y1r=o(" \u2014 "),Tz=a("a"),K1r=o("TFConvBertForTokenClassification"),Z1r=o(" (ConvBERT model)"),e4r=l(),ET=a("li"),C4e=a("strong"),o4r=o("deberta"),r4r=o(" \u2014 "),Mz=a("a"),t4r=o("TFDebertaForTokenClassification"),a4r=o(" (DeBERTa model)"),n4r=l(),CT=a("li"),w4e=a("strong"),s4r=o("deberta-v2"),l4r=o(" \u2014 "),Ez=a("a"),i4r=o("TFDebertaV2ForTokenClassification"),d4r=o(" (DeBERTa-v2 model)"),c4r=l(),wT=a("li"),A4e=a("strong"),f4r=o("distilbert"),m4r=o(" \u2014 "),Cz=a("a"),g4r=o("TFDistilBertForTokenClassification"),h4r=o(" (DistilBERT model)"),p4r=l(),AT=a("li"),y4e=a("strong"),_4r=o("electra"),u4r=o(" \u2014 "),wz=a("a"),b4r=o("TFElectraForTokenClassification"),F4r=o(" (ELECTRA model)"),v4r=l(),yT=a("li"),L4e=a("strong"),T4r=o("flaubert"),M4r=o(" \u2014 "),Az=a("a"),E4r=o("TFFlaubertForTokenClassification"),C4r=o(" (FlauBERT model)"),w4r=l(),LT=a("li"),x4e=a("strong"),A4r=o("funnel"),y4r=o(" \u2014 "),yz=a("a"),L4r=o("TFFunnelForTokenClassification"),x4r=o(" (Funnel Transformer model)"),k4r=l(),xT=a("li"),k4e=a("strong"),S4r=o("layoutlm"),R4r=o(" \u2014 "),Lz=a("a"),B4r=o("TFLayoutLMForTokenClassification"),P4r=o(" (LayoutLM model)"),$4r=l(),kT=a("li"),S4e=a("strong"),I4r=o("longformer"),q4r=o(" \u2014 "),xz=a("a"),N4r=o("TFLongformerForTokenClassification"),j4r=o(" (Longformer model)"),D4r=l(),ST=a("li"),R4e=a("strong"),G4r=o("mobilebert"),O4r=o(" \u2014 "),kz=a("a"),V4r=o("TFMobileBertForTokenClassification"),X4r=o(" (MobileBERT model)"),z4r=l(),RT=a("li"),B4e=a("strong"),Q4r=o("mpnet"),W4r=o(" \u2014 "),Sz=a("a"),H4r=o("TFMPNetForTokenClassification"),U4r=o(" (MPNet model)"),J4r=l(),BT=a("li"),P4e=a("strong"),Y4r=o("rembert"),K4r=o(" \u2014 "),Rz=a("a"),Z4r=o("TFRemBertForTokenClassification"),ebr=o(" (RemBERT model)"),obr=l(),PT=a("li"),$4e=a("strong"),rbr=o("roberta"),tbr=o(" \u2014 "),Bz=a("a"),abr=o("TFRobertaForTokenClassification"),nbr=o(" (RoBERTa model)"),sbr=l(),$T=a("li"),I4e=a("strong"),lbr=o("roformer"),ibr=o(" \u2014 "),Pz=a("a"),dbr=o("TFRoFormerForTokenClassification"),cbr=o(" (RoFormer model)"),fbr=l(),IT=a("li"),q4e=a("strong"),mbr=o("xlm"),gbr=o(" \u2014 "),$z=a("a"),hbr=o("TFXLMForTokenClassification"),pbr=o(" (XLM model)"),_br=l(),qT=a("li"),N4e=a("strong"),ubr=o("xlm-roberta"),bbr=o(" \u2014 "),Iz=a("a"),Fbr=o("TFXLMRobertaForTokenClassification"),vbr=o(" (XLM-RoBERTa model)"),Tbr=l(),NT=a("li"),j4e=a("strong"),Mbr=o("xlnet"),Ebr=o(" \u2014 "),qz=a("a"),Cbr=o("TFXLNetForTokenClassification"),wbr=o(" (XLNet model)"),Abr=l(),D4e=a("p"),ybr=o("Examples:"),Lbr=l(),f(cy.$$.fragment),aBe=l(),Vc=a("h2"),jT=a("a"),G4e=a("span"),f(fy.$$.fragment),xbr=l(),O4e=a("span"),kbr=o("TFAutoModelForQuestionAnswering"),nBe=l(),xr=a("div"),f(my.$$.fragment),Sbr=l(),Xc=a("p"),Rbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Nz=a("a"),Bbr=o("from_pretrained()"),Pbr=o(" class method or the "),jz=a("a"),$br=o("from_config()"),Ibr=o(` class
method.`),qbr=l(),gy=a("p"),Nbr=o("This class cannot be instantiated directly using "),V4e=a("code"),jbr=o("__init__()"),Dbr=o(" (throws an error)."),Gbr=l(),Et=a("div"),f(hy.$$.fragment),Obr=l(),X4e=a("p"),Vbr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Xbr=l(),zc=a("p"),zbr=o(`Note:
Loading a model from its configuration file does `),z4e=a("strong"),Qbr=o("not"),Wbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Dz=a("a"),Hbr=o("from_pretrained()"),Ubr=o(" to load the model weights."),Jbr=l(),Q4e=a("p"),Ybr=o("Examples:"),Kbr=l(),f(py.$$.fragment),Zbr=l(),Co=a("div"),f(_y.$$.fragment),e3r=l(),W4e=a("p"),o3r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),r3r=l(),An=a("p"),t3r=o("The model class to instantiate is selected based on the "),H4e=a("code"),a3r=o("model_type"),n3r=o(` property of the config object (either
passed as an argument or loaded from `),U4e=a("code"),s3r=o("pretrained_model_name_or_path"),l3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J4e=a("code"),i3r=o("pretrained_model_name_or_path"),d3r=o(":"),c3r=l(),K=a("ul"),DT=a("li"),Y4e=a("strong"),f3r=o("albert"),m3r=o(" \u2014 "),Gz=a("a"),g3r=o("TFAlbertForQuestionAnswering"),h3r=o(" (ALBERT model)"),p3r=l(),GT=a("li"),K4e=a("strong"),_3r=o("bert"),u3r=o(" \u2014 "),Oz=a("a"),b3r=o("TFBertForQuestionAnswering"),F3r=o(" (BERT model)"),v3r=l(),OT=a("li"),Z4e=a("strong"),T3r=o("camembert"),M3r=o(" \u2014 "),Vz=a("a"),E3r=o("TFCamembertForQuestionAnswering"),C3r=o(" (CamemBERT model)"),w3r=l(),VT=a("li"),ebe=a("strong"),A3r=o("convbert"),y3r=o(" \u2014 "),Xz=a("a"),L3r=o("TFConvBertForQuestionAnswering"),x3r=o(" (ConvBERT model)"),k3r=l(),XT=a("li"),obe=a("strong"),S3r=o("deberta"),R3r=o(" \u2014 "),zz=a("a"),B3r=o("TFDebertaForQuestionAnswering"),P3r=o(" (DeBERTa model)"),$3r=l(),zT=a("li"),rbe=a("strong"),I3r=o("deberta-v2"),q3r=o(" \u2014 "),Qz=a("a"),N3r=o("TFDebertaV2ForQuestionAnswering"),j3r=o(" (DeBERTa-v2 model)"),D3r=l(),QT=a("li"),tbe=a("strong"),G3r=o("distilbert"),O3r=o(" \u2014 "),Wz=a("a"),V3r=o("TFDistilBertForQuestionAnswering"),X3r=o(" (DistilBERT model)"),z3r=l(),WT=a("li"),abe=a("strong"),Q3r=o("electra"),W3r=o(" \u2014 "),Hz=a("a"),H3r=o("TFElectraForQuestionAnswering"),U3r=o(" (ELECTRA model)"),J3r=l(),HT=a("li"),nbe=a("strong"),Y3r=o("flaubert"),K3r=o(" \u2014 "),Uz=a("a"),Z3r=o("TFFlaubertForQuestionAnsweringSimple"),e2r=o(" (FlauBERT model)"),o2r=l(),UT=a("li"),sbe=a("strong"),r2r=o("funnel"),t2r=o(" \u2014 "),Jz=a("a"),a2r=o("TFFunnelForQuestionAnswering"),n2r=o(" (Funnel Transformer model)"),s2r=l(),JT=a("li"),lbe=a("strong"),l2r=o("gptj"),i2r=o(" \u2014 "),Yz=a("a"),d2r=o("TFGPTJForQuestionAnswering"),c2r=o(" (GPT-J model)"),f2r=l(),YT=a("li"),ibe=a("strong"),m2r=o("longformer"),g2r=o(" \u2014 "),Kz=a("a"),h2r=o("TFLongformerForQuestionAnswering"),p2r=o(" (Longformer model)"),_2r=l(),KT=a("li"),dbe=a("strong"),u2r=o("mobilebert"),b2r=o(" \u2014 "),Zz=a("a"),F2r=o("TFMobileBertForQuestionAnswering"),v2r=o(" (MobileBERT model)"),T2r=l(),ZT=a("li"),cbe=a("strong"),M2r=o("mpnet"),E2r=o(" \u2014 "),eQ=a("a"),C2r=o("TFMPNetForQuestionAnswering"),w2r=o(" (MPNet model)"),A2r=l(),e7=a("li"),fbe=a("strong"),y2r=o("rembert"),L2r=o(" \u2014 "),oQ=a("a"),x2r=o("TFRemBertForQuestionAnswering"),k2r=o(" (RemBERT model)"),S2r=l(),o7=a("li"),mbe=a("strong"),R2r=o("roberta"),B2r=o(" \u2014 "),rQ=a("a"),P2r=o("TFRobertaForQuestionAnswering"),$2r=o(" (RoBERTa model)"),I2r=l(),r7=a("li"),gbe=a("strong"),q2r=o("roformer"),N2r=o(" \u2014 "),tQ=a("a"),j2r=o("TFRoFormerForQuestionAnswering"),D2r=o(" (RoFormer model)"),G2r=l(),t7=a("li"),hbe=a("strong"),O2r=o("xlm"),V2r=o(" \u2014 "),aQ=a("a"),X2r=o("TFXLMForQuestionAnsweringSimple"),z2r=o(" (XLM model)"),Q2r=l(),a7=a("li"),pbe=a("strong"),W2r=o("xlm-roberta"),H2r=o(" \u2014 "),nQ=a("a"),U2r=o("TFXLMRobertaForQuestionAnswering"),J2r=o(" (XLM-RoBERTa model)"),Y2r=l(),n7=a("li"),_be=a("strong"),K2r=o("xlnet"),Z2r=o(" \u2014 "),sQ=a("a"),eFr=o("TFXLNetForQuestionAnsweringSimple"),oFr=o(" (XLNet model)"),rFr=l(),ube=a("p"),tFr=o("Examples:"),aFr=l(),f(uy.$$.fragment),sBe=l(),Qc=a("h2"),s7=a("a"),bbe=a("span"),f(by.$$.fragment),nFr=l(),Fbe=a("span"),sFr=o("TFAutoModelForVision2Seq"),lBe=l(),kr=a("div"),f(Fy.$$.fragment),lFr=l(),Wc=a("p"),iFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),lQ=a("a"),dFr=o("from_pretrained()"),cFr=o(" class method or the "),iQ=a("a"),fFr=o("from_config()"),mFr=o(` class
method.`),gFr=l(),vy=a("p"),hFr=o("This class cannot be instantiated directly using "),vbe=a("code"),pFr=o("__init__()"),_Fr=o(" (throws an error)."),uFr=l(),Ct=a("div"),f(Ty.$$.fragment),bFr=l(),Tbe=a("p"),FFr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),vFr=l(),Hc=a("p"),TFr=o(`Note:
Loading a model from its configuration file does `),Mbe=a("strong"),MFr=o("not"),EFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dQ=a("a"),CFr=o("from_pretrained()"),wFr=o(" to load the model weights."),AFr=l(),Ebe=a("p"),yFr=o("Examples:"),LFr=l(),f(My.$$.fragment),xFr=l(),wo=a("div"),f(Ey.$$.fragment),kFr=l(),Cbe=a("p"),SFr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),RFr=l(),yn=a("p"),BFr=o("The model class to instantiate is selected based on the "),wbe=a("code"),PFr=o("model_type"),$Fr=o(` property of the config object (either
passed as an argument or loaded from `),Abe=a("code"),IFr=o("pretrained_model_name_or_path"),qFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ybe=a("code"),NFr=o("pretrained_model_name_or_path"),jFr=o(":"),DFr=l(),Lbe=a("ul"),l7=a("li"),xbe=a("strong"),GFr=o("vision-encoder-decoder"),OFr=o(" \u2014 "),cQ=a("a"),VFr=o("TFVisionEncoderDecoderModel"),XFr=o(" (Vision Encoder decoder model)"),zFr=l(),kbe=a("p"),QFr=o("Examples:"),WFr=l(),f(Cy.$$.fragment),iBe=l(),Uc=a("h2"),i7=a("a"),Sbe=a("span"),f(wy.$$.fragment),HFr=l(),Rbe=a("span"),UFr=o("TFAutoModelForSpeechSeq2Seq"),dBe=l(),Sr=a("div"),f(Ay.$$.fragment),JFr=l(),Jc=a("p"),YFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),fQ=a("a"),KFr=o("from_pretrained()"),ZFr=o(" class method or the "),mQ=a("a"),evr=o("from_config()"),ovr=o(` class
method.`),rvr=l(),yy=a("p"),tvr=o("This class cannot be instantiated directly using "),Bbe=a("code"),avr=o("__init__()"),nvr=o(" (throws an error)."),svr=l(),wt=a("div"),f(Ly.$$.fragment),lvr=l(),Pbe=a("p"),ivr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),dvr=l(),Yc=a("p"),cvr=o(`Note:
Loading a model from its configuration file does `),$be=a("strong"),fvr=o("not"),mvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gQ=a("a"),gvr=o("from_pretrained()"),hvr=o(" to load the model weights."),pvr=l(),Ibe=a("p"),_vr=o("Examples:"),uvr=l(),f(xy.$$.fragment),bvr=l(),Ao=a("div"),f(ky.$$.fragment),Fvr=l(),qbe=a("p"),vvr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Tvr=l(),Ln=a("p"),Mvr=o("The model class to instantiate is selected based on the "),Nbe=a("code"),Evr=o("model_type"),Cvr=o(` property of the config object (either
passed as an argument or loaded from `),jbe=a("code"),wvr=o("pretrained_model_name_or_path"),Avr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dbe=a("code"),yvr=o("pretrained_model_name_or_path"),Lvr=o(":"),xvr=l(),Gbe=a("ul"),d7=a("li"),Obe=a("strong"),kvr=o("speech_to_text"),Svr=o(" \u2014 "),hQ=a("a"),Rvr=o("TFSpeech2TextForConditionalGeneration"),Bvr=o(" (Speech2Text model)"),Pvr=l(),Vbe=a("p"),$vr=o("Examples:"),Ivr=l(),f(Sy.$$.fragment),cBe=l(),Kc=a("h2"),c7=a("a"),Xbe=a("span"),f(Ry.$$.fragment),qvr=l(),zbe=a("span"),Nvr=o("FlaxAutoModel"),fBe=l(),Rr=a("div"),f(By.$$.fragment),jvr=l(),Zc=a("p"),Dvr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),pQ=a("a"),Gvr=o("from_pretrained()"),Ovr=o(" class method or the "),_Q=a("a"),Vvr=o("from_config()"),Xvr=o(` class
method.`),zvr=l(),Py=a("p"),Qvr=o("This class cannot be instantiated directly using "),Qbe=a("code"),Wvr=o("__init__()"),Hvr=o(" (throws an error)."),Uvr=l(),At=a("div"),f($y.$$.fragment),Jvr=l(),Wbe=a("p"),Yvr=o("Instantiates one of the base model classes of the library from a configuration."),Kvr=l(),ef=a("p"),Zvr=o(`Note:
Loading a model from its configuration file does `),Hbe=a("strong"),e6r=o("not"),o6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uQ=a("a"),r6r=o("from_pretrained()"),t6r=o(" to load the model weights."),a6r=l(),Ube=a("p"),n6r=o("Examples:"),s6r=l(),f(Iy.$$.fragment),l6r=l(),yo=a("div"),f(qy.$$.fragment),i6r=l(),Jbe=a("p"),d6r=o("Instantiate one of the base model classes of the library from a pretrained model."),c6r=l(),xn=a("p"),f6r=o("The model class to instantiate is selected based on the "),Ybe=a("code"),m6r=o("model_type"),g6r=o(` property of the config object (either
passed as an argument or loaded from `),Kbe=a("code"),h6r=o("pretrained_model_name_or_path"),p6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zbe=a("code"),_6r=o("pretrained_model_name_or_path"),u6r=o(":"),b6r=l(),z=a("ul"),f7=a("li"),e3e=a("strong"),F6r=o("albert"),v6r=o(" \u2014 "),bQ=a("a"),T6r=o("FlaxAlbertModel"),M6r=o(" (ALBERT model)"),E6r=l(),m7=a("li"),o3e=a("strong"),C6r=o("bart"),w6r=o(" \u2014 "),FQ=a("a"),A6r=o("FlaxBartModel"),y6r=o(" (BART model)"),L6r=l(),g7=a("li"),r3e=a("strong"),x6r=o("beit"),k6r=o(" \u2014 "),vQ=a("a"),S6r=o("FlaxBeitModel"),R6r=o(" (BEiT model)"),B6r=l(),h7=a("li"),t3e=a("strong"),P6r=o("bert"),$6r=o(" \u2014 "),TQ=a("a"),I6r=o("FlaxBertModel"),q6r=o(" (BERT model)"),N6r=l(),p7=a("li"),a3e=a("strong"),j6r=o("big_bird"),D6r=o(" \u2014 "),MQ=a("a"),G6r=o("FlaxBigBirdModel"),O6r=o(" (BigBird model)"),V6r=l(),_7=a("li"),n3e=a("strong"),X6r=o("blenderbot"),z6r=o(" \u2014 "),EQ=a("a"),Q6r=o("FlaxBlenderbotModel"),W6r=o(" (Blenderbot model)"),H6r=l(),u7=a("li"),s3e=a("strong"),U6r=o("blenderbot-small"),J6r=o(" \u2014 "),CQ=a("a"),Y6r=o("FlaxBlenderbotSmallModel"),K6r=o(" (BlenderbotSmall model)"),Z6r=l(),b7=a("li"),l3e=a("strong"),eTr=o("clip"),oTr=o(" \u2014 "),wQ=a("a"),rTr=o("FlaxCLIPModel"),tTr=o(" (CLIP model)"),aTr=l(),F7=a("li"),i3e=a("strong"),nTr=o("distilbert"),sTr=o(" \u2014 "),AQ=a("a"),lTr=o("FlaxDistilBertModel"),iTr=o(" (DistilBERT model)"),dTr=l(),v7=a("li"),d3e=a("strong"),cTr=o("electra"),fTr=o(" \u2014 "),yQ=a("a"),mTr=o("FlaxElectraModel"),gTr=o(" (ELECTRA model)"),hTr=l(),T7=a("li"),c3e=a("strong"),pTr=o("gpt2"),_Tr=o(" \u2014 "),LQ=a("a"),uTr=o("FlaxGPT2Model"),bTr=o(" (OpenAI GPT-2 model)"),FTr=l(),M7=a("li"),f3e=a("strong"),vTr=o("gpt_neo"),TTr=o(" \u2014 "),xQ=a("a"),MTr=o("FlaxGPTNeoModel"),ETr=o(" (GPT Neo model)"),CTr=l(),E7=a("li"),m3e=a("strong"),wTr=o("gptj"),ATr=o(" \u2014 "),kQ=a("a"),yTr=o("FlaxGPTJModel"),LTr=o(" (GPT-J model)"),xTr=l(),C7=a("li"),g3e=a("strong"),kTr=o("marian"),STr=o(" \u2014 "),SQ=a("a"),RTr=o("FlaxMarianModel"),BTr=o(" (Marian model)"),PTr=l(),w7=a("li"),h3e=a("strong"),$Tr=o("mbart"),ITr=o(" \u2014 "),RQ=a("a"),qTr=o("FlaxMBartModel"),NTr=o(" (mBART model)"),jTr=l(),A7=a("li"),p3e=a("strong"),DTr=o("mt5"),GTr=o(" \u2014 "),BQ=a("a"),OTr=o("FlaxMT5Model"),VTr=o(" (mT5 model)"),XTr=l(),y7=a("li"),_3e=a("strong"),zTr=o("pegasus"),QTr=o(" \u2014 "),PQ=a("a"),WTr=o("FlaxPegasusModel"),HTr=o(" (Pegasus model)"),UTr=l(),L7=a("li"),u3e=a("strong"),JTr=o("roberta"),YTr=o(" \u2014 "),$Q=a("a"),KTr=o("FlaxRobertaModel"),ZTr=o(" (RoBERTa model)"),e7r=l(),x7=a("li"),b3e=a("strong"),o7r=o("roformer"),r7r=o(" \u2014 "),IQ=a("a"),t7r=o("FlaxRoFormerModel"),a7r=o(" (RoFormer model)"),n7r=l(),k7=a("li"),F3e=a("strong"),s7r=o("t5"),l7r=o(" \u2014 "),qQ=a("a"),i7r=o("FlaxT5Model"),d7r=o(" (T5 model)"),c7r=l(),S7=a("li"),v3e=a("strong"),f7r=o("vision-text-dual-encoder"),m7r=o(" \u2014 "),NQ=a("a"),g7r=o("FlaxVisionTextDualEncoderModel"),h7r=o(" (VisionTextDualEncoder model)"),p7r=l(),R7=a("li"),T3e=a("strong"),_7r=o("vit"),u7r=o(" \u2014 "),jQ=a("a"),b7r=o("FlaxViTModel"),F7r=o(" (ViT model)"),v7r=l(),B7=a("li"),M3e=a("strong"),T7r=o("wav2vec2"),M7r=o(" \u2014 "),DQ=a("a"),E7r=o("FlaxWav2Vec2Model"),C7r=o(" (Wav2Vec2 model)"),w7r=l(),P7=a("li"),E3e=a("strong"),A7r=o("xglm"),y7r=o(" \u2014 "),GQ=a("a"),L7r=o("FlaxXGLMModel"),x7r=o(" (XGLM model)"),k7r=l(),$7=a("li"),C3e=a("strong"),S7r=o("xlm-roberta"),R7r=o(" \u2014 "),OQ=a("a"),B7r=o("FlaxXLMRobertaModel"),P7r=o(" (XLM-RoBERTa model)"),$7r=l(),w3e=a("p"),I7r=o("Examples:"),q7r=l(),f(Ny.$$.fragment),mBe=l(),of=a("h2"),I7=a("a"),A3e=a("span"),f(jy.$$.fragment),N7r=l(),y3e=a("span"),j7r=o("FlaxAutoModelForCausalLM"),gBe=l(),Br=a("div"),f(Dy.$$.fragment),D7r=l(),rf=a("p"),G7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),VQ=a("a"),O7r=o("from_pretrained()"),V7r=o(" class method or the "),XQ=a("a"),X7r=o("from_config()"),z7r=o(` class
method.`),Q7r=l(),Gy=a("p"),W7r=o("This class cannot be instantiated directly using "),L3e=a("code"),H7r=o("__init__()"),U7r=o(" (throws an error)."),J7r=l(),yt=a("div"),f(Oy.$$.fragment),Y7r=l(),x3e=a("p"),K7r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Z7r=l(),tf=a("p"),eMr=o(`Note:
Loading a model from its configuration file does `),k3e=a("strong"),oMr=o("not"),rMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zQ=a("a"),tMr=o("from_pretrained()"),aMr=o(" to load the model weights."),nMr=l(),S3e=a("p"),sMr=o("Examples:"),lMr=l(),f(Vy.$$.fragment),iMr=l(),Lo=a("div"),f(Xy.$$.fragment),dMr=l(),R3e=a("p"),cMr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),fMr=l(),kn=a("p"),mMr=o("The model class to instantiate is selected based on the "),B3e=a("code"),gMr=o("model_type"),hMr=o(` property of the config object (either
passed as an argument or loaded from `),P3e=a("code"),pMr=o("pretrained_model_name_or_path"),_Mr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$3e=a("code"),uMr=o("pretrained_model_name_or_path"),bMr=o(":"),FMr=l(),ca=a("ul"),q7=a("li"),I3e=a("strong"),vMr=o("bart"),TMr=o(" \u2014 "),QQ=a("a"),MMr=o("FlaxBartForCausalLM"),EMr=o(" (BART model)"),CMr=l(),N7=a("li"),q3e=a("strong"),wMr=o("gpt2"),AMr=o(" \u2014 "),WQ=a("a"),yMr=o("FlaxGPT2LMHeadModel"),LMr=o(" (OpenAI GPT-2 model)"),xMr=l(),j7=a("li"),N3e=a("strong"),kMr=o("gpt_neo"),SMr=o(" \u2014 "),HQ=a("a"),RMr=o("FlaxGPTNeoForCausalLM"),BMr=o(" (GPT Neo model)"),PMr=l(),D7=a("li"),j3e=a("strong"),$Mr=o("gptj"),IMr=o(" \u2014 "),UQ=a("a"),qMr=o("FlaxGPTJForCausalLM"),NMr=o(" (GPT-J model)"),jMr=l(),G7=a("li"),D3e=a("strong"),DMr=o("xglm"),GMr=o(" \u2014 "),JQ=a("a"),OMr=o("FlaxXGLMForCausalLM"),VMr=o(" (XGLM model)"),XMr=l(),G3e=a("p"),zMr=o("Examples:"),QMr=l(),f(zy.$$.fragment),hBe=l(),af=a("h2"),O7=a("a"),O3e=a("span"),f(Qy.$$.fragment),WMr=l(),V3e=a("span"),HMr=o("FlaxAutoModelForPreTraining"),pBe=l(),Pr=a("div"),f(Wy.$$.fragment),UMr=l(),nf=a("p"),JMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),YQ=a("a"),YMr=o("from_pretrained()"),KMr=o(" class method or the "),KQ=a("a"),ZMr=o("from_config()"),eEr=o(` class
method.`),oEr=l(),Hy=a("p"),rEr=o("This class cannot be instantiated directly using "),X3e=a("code"),tEr=o("__init__()"),aEr=o(" (throws an error)."),nEr=l(),Lt=a("div"),f(Uy.$$.fragment),sEr=l(),z3e=a("p"),lEr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),iEr=l(),sf=a("p"),dEr=o(`Note:
Loading a model from its configuration file does `),Q3e=a("strong"),cEr=o("not"),fEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZQ=a("a"),mEr=o("from_pretrained()"),gEr=o(" to load the model weights."),hEr=l(),W3e=a("p"),pEr=o("Examples:"),_Er=l(),f(Jy.$$.fragment),uEr=l(),xo=a("div"),f(Yy.$$.fragment),bEr=l(),H3e=a("p"),FEr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),vEr=l(),Sn=a("p"),TEr=o("The model class to instantiate is selected based on the "),U3e=a("code"),MEr=o("model_type"),EEr=o(` property of the config object (either
passed as an argument or loaded from `),J3e=a("code"),CEr=o("pretrained_model_name_or_path"),wEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y3e=a("code"),AEr=o("pretrained_model_name_or_path"),yEr=o(":"),LEr=l(),fe=a("ul"),V7=a("li"),K3e=a("strong"),xEr=o("albert"),kEr=o(" \u2014 "),eW=a("a"),SEr=o("FlaxAlbertForPreTraining"),REr=o(" (ALBERT model)"),BEr=l(),X7=a("li"),Z3e=a("strong"),PEr=o("bart"),$Er=o(" \u2014 "),oW=a("a"),IEr=o("FlaxBartForConditionalGeneration"),qEr=o(" (BART model)"),NEr=l(),z7=a("li"),e2e=a("strong"),jEr=o("bert"),DEr=o(" \u2014 "),rW=a("a"),GEr=o("FlaxBertForPreTraining"),OEr=o(" (BERT model)"),VEr=l(),Q7=a("li"),o2e=a("strong"),XEr=o("big_bird"),zEr=o(" \u2014 "),tW=a("a"),QEr=o("FlaxBigBirdForPreTraining"),WEr=o(" (BigBird model)"),HEr=l(),W7=a("li"),r2e=a("strong"),UEr=o("electra"),JEr=o(" \u2014 "),aW=a("a"),YEr=o("FlaxElectraForPreTraining"),KEr=o(" (ELECTRA model)"),ZEr=l(),H7=a("li"),t2e=a("strong"),eCr=o("mbart"),oCr=o(" \u2014 "),nW=a("a"),rCr=o("FlaxMBartForConditionalGeneration"),tCr=o(" (mBART model)"),aCr=l(),U7=a("li"),a2e=a("strong"),nCr=o("mt5"),sCr=o(" \u2014 "),sW=a("a"),lCr=o("FlaxMT5ForConditionalGeneration"),iCr=o(" (mT5 model)"),dCr=l(),J7=a("li"),n2e=a("strong"),cCr=o("roberta"),fCr=o(" \u2014 "),lW=a("a"),mCr=o("FlaxRobertaForMaskedLM"),gCr=o(" (RoBERTa model)"),hCr=l(),Y7=a("li"),s2e=a("strong"),pCr=o("roformer"),_Cr=o(" \u2014 "),iW=a("a"),uCr=o("FlaxRoFormerForMaskedLM"),bCr=o(" (RoFormer model)"),FCr=l(),K7=a("li"),l2e=a("strong"),vCr=o("t5"),TCr=o(" \u2014 "),dW=a("a"),MCr=o("FlaxT5ForConditionalGeneration"),ECr=o(" (T5 model)"),CCr=l(),Z7=a("li"),i2e=a("strong"),wCr=o("wav2vec2"),ACr=o(" \u2014 "),cW=a("a"),yCr=o("FlaxWav2Vec2ForPreTraining"),LCr=o(" (Wav2Vec2 model)"),xCr=l(),eM=a("li"),d2e=a("strong"),kCr=o("xlm-roberta"),SCr=o(" \u2014 "),fW=a("a"),RCr=o("FlaxXLMRobertaForMaskedLM"),BCr=o(" (XLM-RoBERTa model)"),PCr=l(),c2e=a("p"),$Cr=o("Examples:"),ICr=l(),f(Ky.$$.fragment),_Be=l(),lf=a("h2"),oM=a("a"),f2e=a("span"),f(Zy.$$.fragment),qCr=l(),m2e=a("span"),NCr=o("FlaxAutoModelForMaskedLM"),uBe=l(),$r=a("div"),f(eL.$$.fragment),jCr=l(),df=a("p"),DCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),mW=a("a"),GCr=o("from_pretrained()"),OCr=o(" class method or the "),gW=a("a"),VCr=o("from_config()"),XCr=o(` class
method.`),zCr=l(),oL=a("p"),QCr=o("This class cannot be instantiated directly using "),g2e=a("code"),WCr=o("__init__()"),HCr=o(" (throws an error)."),UCr=l(),xt=a("div"),f(rL.$$.fragment),JCr=l(),h2e=a("p"),YCr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),KCr=l(),cf=a("p"),ZCr=o(`Note:
Loading a model from its configuration file does `),p2e=a("strong"),e5r=o("not"),o5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hW=a("a"),r5r=o("from_pretrained()"),t5r=o(" to load the model weights."),a5r=l(),_2e=a("p"),n5r=o("Examples:"),s5r=l(),f(tL.$$.fragment),l5r=l(),ko=a("div"),f(aL.$$.fragment),i5r=l(),u2e=a("p"),d5r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),c5r=l(),Rn=a("p"),f5r=o("The model class to instantiate is selected based on the "),b2e=a("code"),m5r=o("model_type"),g5r=o(` property of the config object (either
passed as an argument or loaded from `),F2e=a("code"),h5r=o("pretrained_model_name_or_path"),p5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v2e=a("code"),_5r=o("pretrained_model_name_or_path"),u5r=o(":"),b5r=l(),be=a("ul"),rM=a("li"),T2e=a("strong"),F5r=o("albert"),v5r=o(" \u2014 "),pW=a("a"),T5r=o("FlaxAlbertForMaskedLM"),M5r=o(" (ALBERT model)"),E5r=l(),tM=a("li"),M2e=a("strong"),C5r=o("bart"),w5r=o(" \u2014 "),_W=a("a"),A5r=o("FlaxBartForConditionalGeneration"),y5r=o(" (BART model)"),L5r=l(),aM=a("li"),E2e=a("strong"),x5r=o("bert"),k5r=o(" \u2014 "),uW=a("a"),S5r=o("FlaxBertForMaskedLM"),R5r=o(" (BERT model)"),B5r=l(),nM=a("li"),C2e=a("strong"),P5r=o("big_bird"),$5r=o(" \u2014 "),bW=a("a"),I5r=o("FlaxBigBirdForMaskedLM"),q5r=o(" (BigBird model)"),N5r=l(),sM=a("li"),w2e=a("strong"),j5r=o("distilbert"),D5r=o(" \u2014 "),FW=a("a"),G5r=o("FlaxDistilBertForMaskedLM"),O5r=o(" (DistilBERT model)"),V5r=l(),lM=a("li"),A2e=a("strong"),X5r=o("electra"),z5r=o(" \u2014 "),vW=a("a"),Q5r=o("FlaxElectraForMaskedLM"),W5r=o(" (ELECTRA model)"),H5r=l(),iM=a("li"),y2e=a("strong"),U5r=o("mbart"),J5r=o(" \u2014 "),TW=a("a"),Y5r=o("FlaxMBartForConditionalGeneration"),K5r=o(" (mBART model)"),Z5r=l(),dM=a("li"),L2e=a("strong"),ewr=o("roberta"),owr=o(" \u2014 "),MW=a("a"),rwr=o("FlaxRobertaForMaskedLM"),twr=o(" (RoBERTa model)"),awr=l(),cM=a("li"),x2e=a("strong"),nwr=o("roformer"),swr=o(" \u2014 "),EW=a("a"),lwr=o("FlaxRoFormerForMaskedLM"),iwr=o(" (RoFormer model)"),dwr=l(),fM=a("li"),k2e=a("strong"),cwr=o("xlm-roberta"),fwr=o(" \u2014 "),CW=a("a"),mwr=o("FlaxXLMRobertaForMaskedLM"),gwr=o(" (XLM-RoBERTa model)"),hwr=l(),S2e=a("p"),pwr=o("Examples:"),_wr=l(),f(nL.$$.fragment),bBe=l(),ff=a("h2"),mM=a("a"),R2e=a("span"),f(sL.$$.fragment),uwr=l(),B2e=a("span"),bwr=o("FlaxAutoModelForSeq2SeqLM"),FBe=l(),Ir=a("div"),f(lL.$$.fragment),Fwr=l(),mf=a("p"),vwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),wW=a("a"),Twr=o("from_pretrained()"),Mwr=o(" class method or the "),AW=a("a"),Ewr=o("from_config()"),Cwr=o(` class
method.`),wwr=l(),iL=a("p"),Awr=o("This class cannot be instantiated directly using "),P2e=a("code"),ywr=o("__init__()"),Lwr=o(" (throws an error)."),xwr=l(),kt=a("div"),f(dL.$$.fragment),kwr=l(),$2e=a("p"),Swr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Rwr=l(),gf=a("p"),Bwr=o(`Note:
Loading a model from its configuration file does `),I2e=a("strong"),Pwr=o("not"),$wr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yW=a("a"),Iwr=o("from_pretrained()"),qwr=o(" to load the model weights."),Nwr=l(),q2e=a("p"),jwr=o("Examples:"),Dwr=l(),f(cL.$$.fragment),Gwr=l(),So=a("div"),f(fL.$$.fragment),Owr=l(),N2e=a("p"),Vwr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Xwr=l(),Bn=a("p"),zwr=o("The model class to instantiate is selected based on the "),j2e=a("code"),Qwr=o("model_type"),Wwr=o(` property of the config object (either
passed as an argument or loaded from `),D2e=a("code"),Hwr=o("pretrained_model_name_or_path"),Uwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G2e=a("code"),Jwr=o("pretrained_model_name_or_path"),Ywr=o(":"),Kwr=l(),Ee=a("ul"),gM=a("li"),O2e=a("strong"),Zwr=o("bart"),eAr=o(" \u2014 "),LW=a("a"),oAr=o("FlaxBartForConditionalGeneration"),rAr=o(" (BART model)"),tAr=l(),hM=a("li"),V2e=a("strong"),aAr=o("blenderbot"),nAr=o(" \u2014 "),xW=a("a"),sAr=o("FlaxBlenderbotForConditionalGeneration"),lAr=o(" (Blenderbot model)"),iAr=l(),pM=a("li"),X2e=a("strong"),dAr=o("blenderbot-small"),cAr=o(" \u2014 "),kW=a("a"),fAr=o("FlaxBlenderbotSmallForConditionalGeneration"),mAr=o(" (BlenderbotSmall model)"),gAr=l(),_M=a("li"),z2e=a("strong"),hAr=o("encoder-decoder"),pAr=o(" \u2014 "),SW=a("a"),_Ar=o("FlaxEncoderDecoderModel"),uAr=o(" (Encoder decoder model)"),bAr=l(),uM=a("li"),Q2e=a("strong"),FAr=o("marian"),vAr=o(" \u2014 "),RW=a("a"),TAr=o("FlaxMarianMTModel"),MAr=o(" (Marian model)"),EAr=l(),bM=a("li"),W2e=a("strong"),CAr=o("mbart"),wAr=o(" \u2014 "),BW=a("a"),AAr=o("FlaxMBartForConditionalGeneration"),yAr=o(" (mBART model)"),LAr=l(),FM=a("li"),H2e=a("strong"),xAr=o("mt5"),kAr=o(" \u2014 "),PW=a("a"),SAr=o("FlaxMT5ForConditionalGeneration"),RAr=o(" (mT5 model)"),BAr=l(),vM=a("li"),U2e=a("strong"),PAr=o("pegasus"),$Ar=o(" \u2014 "),$W=a("a"),IAr=o("FlaxPegasusForConditionalGeneration"),qAr=o(" (Pegasus model)"),NAr=l(),TM=a("li"),J2e=a("strong"),jAr=o("t5"),DAr=o(" \u2014 "),IW=a("a"),GAr=o("FlaxT5ForConditionalGeneration"),OAr=o(" (T5 model)"),VAr=l(),Y2e=a("p"),XAr=o("Examples:"),zAr=l(),f(mL.$$.fragment),vBe=l(),hf=a("h2"),MM=a("a"),K2e=a("span"),f(gL.$$.fragment),QAr=l(),Z2e=a("span"),WAr=o("FlaxAutoModelForSequenceClassification"),TBe=l(),qr=a("div"),f(hL.$$.fragment),HAr=l(),pf=a("p"),UAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),qW=a("a"),JAr=o("from_pretrained()"),YAr=o(" class method or the "),NW=a("a"),KAr=o("from_config()"),ZAr=o(` class
method.`),e0r=l(),pL=a("p"),o0r=o("This class cannot be instantiated directly using "),eFe=a("code"),r0r=o("__init__()"),t0r=o(" (throws an error)."),a0r=l(),St=a("div"),f(_L.$$.fragment),n0r=l(),oFe=a("p"),s0r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),l0r=l(),_f=a("p"),i0r=o(`Note:
Loading a model from its configuration file does `),rFe=a("strong"),d0r=o("not"),c0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jW=a("a"),f0r=o("from_pretrained()"),m0r=o(" to load the model weights."),g0r=l(),tFe=a("p"),h0r=o("Examples:"),p0r=l(),f(uL.$$.fragment),_0r=l(),Ro=a("div"),f(bL.$$.fragment),u0r=l(),aFe=a("p"),b0r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),F0r=l(),Pn=a("p"),v0r=o("The model class to instantiate is selected based on the "),nFe=a("code"),T0r=o("model_type"),M0r=o(` property of the config object (either
passed as an argument or loaded from `),sFe=a("code"),E0r=o("pretrained_model_name_or_path"),C0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lFe=a("code"),w0r=o("pretrained_model_name_or_path"),A0r=o(":"),y0r=l(),Fe=a("ul"),EM=a("li"),iFe=a("strong"),L0r=o("albert"),x0r=o(" \u2014 "),DW=a("a"),k0r=o("FlaxAlbertForSequenceClassification"),S0r=o(" (ALBERT model)"),R0r=l(),CM=a("li"),dFe=a("strong"),B0r=o("bart"),P0r=o(" \u2014 "),GW=a("a"),$0r=o("FlaxBartForSequenceClassification"),I0r=o(" (BART model)"),q0r=l(),wM=a("li"),cFe=a("strong"),N0r=o("bert"),j0r=o(" \u2014 "),OW=a("a"),D0r=o("FlaxBertForSequenceClassification"),G0r=o(" (BERT model)"),O0r=l(),AM=a("li"),fFe=a("strong"),V0r=o("big_bird"),X0r=o(" \u2014 "),VW=a("a"),z0r=o("FlaxBigBirdForSequenceClassification"),Q0r=o(" (BigBird model)"),W0r=l(),yM=a("li"),mFe=a("strong"),H0r=o("distilbert"),U0r=o(" \u2014 "),XW=a("a"),J0r=o("FlaxDistilBertForSequenceClassification"),Y0r=o(" (DistilBERT model)"),K0r=l(),LM=a("li"),gFe=a("strong"),Z0r=o("electra"),eyr=o(" \u2014 "),zW=a("a"),oyr=o("FlaxElectraForSequenceClassification"),ryr=o(" (ELECTRA model)"),tyr=l(),xM=a("li"),hFe=a("strong"),ayr=o("mbart"),nyr=o(" \u2014 "),QW=a("a"),syr=o("FlaxMBartForSequenceClassification"),lyr=o(" (mBART model)"),iyr=l(),kM=a("li"),pFe=a("strong"),dyr=o("roberta"),cyr=o(" \u2014 "),WW=a("a"),fyr=o("FlaxRobertaForSequenceClassification"),myr=o(" (RoBERTa model)"),gyr=l(),SM=a("li"),_Fe=a("strong"),hyr=o("roformer"),pyr=o(" \u2014 "),HW=a("a"),_yr=o("FlaxRoFormerForSequenceClassification"),uyr=o(" (RoFormer model)"),byr=l(),RM=a("li"),uFe=a("strong"),Fyr=o("xlm-roberta"),vyr=o(" \u2014 "),UW=a("a"),Tyr=o("FlaxXLMRobertaForSequenceClassification"),Myr=o(" (XLM-RoBERTa model)"),Eyr=l(),bFe=a("p"),Cyr=o("Examples:"),wyr=l(),f(FL.$$.fragment),MBe=l(),uf=a("h2"),BM=a("a"),FFe=a("span"),f(vL.$$.fragment),Ayr=l(),vFe=a("span"),yyr=o("FlaxAutoModelForQuestionAnswering"),EBe=l(),Nr=a("div"),f(TL.$$.fragment),Lyr=l(),bf=a("p"),xyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),JW=a("a"),kyr=o("from_pretrained()"),Syr=o(" class method or the "),YW=a("a"),Ryr=o("from_config()"),Byr=o(` class
method.`),Pyr=l(),ML=a("p"),$yr=o("This class cannot be instantiated directly using "),TFe=a("code"),Iyr=o("__init__()"),qyr=o(" (throws an error)."),Nyr=l(),Rt=a("div"),f(EL.$$.fragment),jyr=l(),MFe=a("p"),Dyr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Gyr=l(),Ff=a("p"),Oyr=o(`Note:
Loading a model from its configuration file does `),EFe=a("strong"),Vyr=o("not"),Xyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KW=a("a"),zyr=o("from_pretrained()"),Qyr=o(" to load the model weights."),Wyr=l(),CFe=a("p"),Hyr=o("Examples:"),Uyr=l(),f(CL.$$.fragment),Jyr=l(),Bo=a("div"),f(wL.$$.fragment),Yyr=l(),wFe=a("p"),Kyr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Zyr=l(),$n=a("p"),eLr=o("The model class to instantiate is selected based on the "),AFe=a("code"),oLr=o("model_type"),rLr=o(` property of the config object (either
passed as an argument or loaded from `),yFe=a("code"),tLr=o("pretrained_model_name_or_path"),aLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LFe=a("code"),nLr=o("pretrained_model_name_or_path"),sLr=o(":"),lLr=l(),ve=a("ul"),PM=a("li"),xFe=a("strong"),iLr=o("albert"),dLr=o(" \u2014 "),ZW=a("a"),cLr=o("FlaxAlbertForQuestionAnswering"),fLr=o(" (ALBERT model)"),mLr=l(),$M=a("li"),kFe=a("strong"),gLr=o("bart"),hLr=o(" \u2014 "),eH=a("a"),pLr=o("FlaxBartForQuestionAnswering"),_Lr=o(" (BART model)"),uLr=l(),IM=a("li"),SFe=a("strong"),bLr=o("bert"),FLr=o(" \u2014 "),oH=a("a"),vLr=o("FlaxBertForQuestionAnswering"),TLr=o(" (BERT model)"),MLr=l(),qM=a("li"),RFe=a("strong"),ELr=o("big_bird"),CLr=o(" \u2014 "),rH=a("a"),wLr=o("FlaxBigBirdForQuestionAnswering"),ALr=o(" (BigBird model)"),yLr=l(),NM=a("li"),BFe=a("strong"),LLr=o("distilbert"),xLr=o(" \u2014 "),tH=a("a"),kLr=o("FlaxDistilBertForQuestionAnswering"),SLr=o(" (DistilBERT model)"),RLr=l(),jM=a("li"),PFe=a("strong"),BLr=o("electra"),PLr=o(" \u2014 "),aH=a("a"),$Lr=o("FlaxElectraForQuestionAnswering"),ILr=o(" (ELECTRA model)"),qLr=l(),DM=a("li"),$Fe=a("strong"),NLr=o("mbart"),jLr=o(" \u2014 "),nH=a("a"),DLr=o("FlaxMBartForQuestionAnswering"),GLr=o(" (mBART model)"),OLr=l(),GM=a("li"),IFe=a("strong"),VLr=o("roberta"),XLr=o(" \u2014 "),sH=a("a"),zLr=o("FlaxRobertaForQuestionAnswering"),QLr=o(" (RoBERTa model)"),WLr=l(),OM=a("li"),qFe=a("strong"),HLr=o("roformer"),ULr=o(" \u2014 "),lH=a("a"),JLr=o("FlaxRoFormerForQuestionAnswering"),YLr=o(" (RoFormer model)"),KLr=l(),VM=a("li"),NFe=a("strong"),ZLr=o("xlm-roberta"),e8r=o(" \u2014 "),iH=a("a"),o8r=o("FlaxXLMRobertaForQuestionAnswering"),r8r=o(" (XLM-RoBERTa model)"),t8r=l(),jFe=a("p"),a8r=o("Examples:"),n8r=l(),f(AL.$$.fragment),CBe=l(),vf=a("h2"),XM=a("a"),DFe=a("span"),f(yL.$$.fragment),s8r=l(),GFe=a("span"),l8r=o("FlaxAutoModelForTokenClassification"),wBe=l(),jr=a("div"),f(LL.$$.fragment),i8r=l(),Tf=a("p"),d8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),dH=a("a"),c8r=o("from_pretrained()"),f8r=o(" class method or the "),cH=a("a"),m8r=o("from_config()"),g8r=o(` class
method.`),h8r=l(),xL=a("p"),p8r=o("This class cannot be instantiated directly using "),OFe=a("code"),_8r=o("__init__()"),u8r=o(" (throws an error)."),b8r=l(),Bt=a("div"),f(kL.$$.fragment),F8r=l(),VFe=a("p"),v8r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),T8r=l(),Mf=a("p"),M8r=o(`Note:
Loading a model from its configuration file does `),XFe=a("strong"),E8r=o("not"),C8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fH=a("a"),w8r=o("from_pretrained()"),A8r=o(" to load the model weights."),y8r=l(),zFe=a("p"),L8r=o("Examples:"),x8r=l(),f(SL.$$.fragment),k8r=l(),Po=a("div"),f(RL.$$.fragment),S8r=l(),QFe=a("p"),R8r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),B8r=l(),In=a("p"),P8r=o("The model class to instantiate is selected based on the "),WFe=a("code"),$8r=o("model_type"),I8r=o(` property of the config object (either
passed as an argument or loaded from `),HFe=a("code"),q8r=o("pretrained_model_name_or_path"),N8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UFe=a("code"),j8r=o("pretrained_model_name_or_path"),D8r=o(":"),G8r=l(),Be=a("ul"),zM=a("li"),JFe=a("strong"),O8r=o("albert"),V8r=o(" \u2014 "),mH=a("a"),X8r=o("FlaxAlbertForTokenClassification"),z8r=o(" (ALBERT model)"),Q8r=l(),QM=a("li"),YFe=a("strong"),W8r=o("bert"),H8r=o(" \u2014 "),gH=a("a"),U8r=o("FlaxBertForTokenClassification"),J8r=o(" (BERT model)"),Y8r=l(),WM=a("li"),KFe=a("strong"),K8r=o("big_bird"),Z8r=o(" \u2014 "),hH=a("a"),e9r=o("FlaxBigBirdForTokenClassification"),o9r=o(" (BigBird model)"),r9r=l(),HM=a("li"),ZFe=a("strong"),t9r=o("distilbert"),a9r=o(" \u2014 "),pH=a("a"),n9r=o("FlaxDistilBertForTokenClassification"),s9r=o(" (DistilBERT model)"),l9r=l(),UM=a("li"),eve=a("strong"),i9r=o("electra"),d9r=o(" \u2014 "),_H=a("a"),c9r=o("FlaxElectraForTokenClassification"),f9r=o(" (ELECTRA model)"),m9r=l(),JM=a("li"),ove=a("strong"),g9r=o("roberta"),h9r=o(" \u2014 "),uH=a("a"),p9r=o("FlaxRobertaForTokenClassification"),_9r=o(" (RoBERTa model)"),u9r=l(),YM=a("li"),rve=a("strong"),b9r=o("roformer"),F9r=o(" \u2014 "),bH=a("a"),v9r=o("FlaxRoFormerForTokenClassification"),T9r=o(" (RoFormer model)"),M9r=l(),KM=a("li"),tve=a("strong"),E9r=o("xlm-roberta"),C9r=o(" \u2014 "),FH=a("a"),w9r=o("FlaxXLMRobertaForTokenClassification"),A9r=o(" (XLM-RoBERTa model)"),y9r=l(),ave=a("p"),L9r=o("Examples:"),x9r=l(),f(BL.$$.fragment),ABe=l(),Ef=a("h2"),ZM=a("a"),nve=a("span"),f(PL.$$.fragment),k9r=l(),sve=a("span"),S9r=o("FlaxAutoModelForMultipleChoice"),yBe=l(),Dr=a("div"),f($L.$$.fragment),R9r=l(),Cf=a("p"),B9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),vH=a("a"),P9r=o("from_pretrained()"),$9r=o(" class method or the "),TH=a("a"),I9r=o("from_config()"),q9r=o(` class
method.`),N9r=l(),IL=a("p"),j9r=o("This class cannot be instantiated directly using "),lve=a("code"),D9r=o("__init__()"),G9r=o(" (throws an error)."),O9r=l(),Pt=a("div"),f(qL.$$.fragment),V9r=l(),ive=a("p"),X9r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),z9r=l(),wf=a("p"),Q9r=o(`Note:
Loading a model from its configuration file does `),dve=a("strong"),W9r=o("not"),H9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MH=a("a"),U9r=o("from_pretrained()"),J9r=o(" to load the model weights."),Y9r=l(),cve=a("p"),K9r=o("Examples:"),Z9r=l(),f(NL.$$.fragment),exr=l(),$o=a("div"),f(jL.$$.fragment),oxr=l(),fve=a("p"),rxr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),txr=l(),qn=a("p"),axr=o("The model class to instantiate is selected based on the "),mve=a("code"),nxr=o("model_type"),sxr=o(` property of the config object (either
passed as an argument or loaded from `),gve=a("code"),lxr=o("pretrained_model_name_or_path"),ixr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hve=a("code"),dxr=o("pretrained_model_name_or_path"),cxr=o(":"),fxr=l(),Pe=a("ul"),eE=a("li"),pve=a("strong"),mxr=o("albert"),gxr=o(" \u2014 "),EH=a("a"),hxr=o("FlaxAlbertForMultipleChoice"),pxr=o(" (ALBERT model)"),_xr=l(),oE=a("li"),_ve=a("strong"),uxr=o("bert"),bxr=o(" \u2014 "),CH=a("a"),Fxr=o("FlaxBertForMultipleChoice"),vxr=o(" (BERT model)"),Txr=l(),rE=a("li"),uve=a("strong"),Mxr=o("big_bird"),Exr=o(" \u2014 "),wH=a("a"),Cxr=o("FlaxBigBirdForMultipleChoice"),wxr=o(" (BigBird model)"),Axr=l(),tE=a("li"),bve=a("strong"),yxr=o("distilbert"),Lxr=o(" \u2014 "),AH=a("a"),xxr=o("FlaxDistilBertForMultipleChoice"),kxr=o(" (DistilBERT model)"),Sxr=l(),aE=a("li"),Fve=a("strong"),Rxr=o("electra"),Bxr=o(" \u2014 "),yH=a("a"),Pxr=o("FlaxElectraForMultipleChoice"),$xr=o(" (ELECTRA model)"),Ixr=l(),nE=a("li"),vve=a("strong"),qxr=o("roberta"),Nxr=o(" \u2014 "),LH=a("a"),jxr=o("FlaxRobertaForMultipleChoice"),Dxr=o(" (RoBERTa model)"),Gxr=l(),sE=a("li"),Tve=a("strong"),Oxr=o("roformer"),Vxr=o(" \u2014 "),xH=a("a"),Xxr=o("FlaxRoFormerForMultipleChoice"),zxr=o(" (RoFormer model)"),Qxr=l(),lE=a("li"),Mve=a("strong"),Wxr=o("xlm-roberta"),Hxr=o(" \u2014 "),kH=a("a"),Uxr=o("FlaxXLMRobertaForMultipleChoice"),Jxr=o(" (XLM-RoBERTa model)"),Yxr=l(),Eve=a("p"),Kxr=o("Examples:"),Zxr=l(),f(DL.$$.fragment),LBe=l(),Af=a("h2"),iE=a("a"),Cve=a("span"),f(GL.$$.fragment),ekr=l(),wve=a("span"),okr=o("FlaxAutoModelForNextSentencePrediction"),xBe=l(),Gr=a("div"),f(OL.$$.fragment),rkr=l(),yf=a("p"),tkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),SH=a("a"),akr=o("from_pretrained()"),nkr=o(" class method or the "),RH=a("a"),skr=o("from_config()"),lkr=o(` class
method.`),ikr=l(),VL=a("p"),dkr=o("This class cannot be instantiated directly using "),Ave=a("code"),ckr=o("__init__()"),fkr=o(" (throws an error)."),mkr=l(),$t=a("div"),f(XL.$$.fragment),gkr=l(),yve=a("p"),hkr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),pkr=l(),Lf=a("p"),_kr=o(`Note:
Loading a model from its configuration file does `),Lve=a("strong"),ukr=o("not"),bkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BH=a("a"),Fkr=o("from_pretrained()"),vkr=o(" to load the model weights."),Tkr=l(),xve=a("p"),Mkr=o("Examples:"),Ekr=l(),f(zL.$$.fragment),Ckr=l(),Io=a("div"),f(QL.$$.fragment),wkr=l(),kve=a("p"),Akr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),ykr=l(),Nn=a("p"),Lkr=o("The model class to instantiate is selected based on the "),Sve=a("code"),xkr=o("model_type"),kkr=o(` property of the config object (either
passed as an argument or loaded from `),Rve=a("code"),Skr=o("pretrained_model_name_or_path"),Rkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bve=a("code"),Bkr=o("pretrained_model_name_or_path"),Pkr=o(":"),$kr=l(),Pve=a("ul"),dE=a("li"),$ve=a("strong"),Ikr=o("bert"),qkr=o(" \u2014 "),PH=a("a"),Nkr=o("FlaxBertForNextSentencePrediction"),jkr=o(" (BERT model)"),Dkr=l(),Ive=a("p"),Gkr=o("Examples:"),Okr=l(),f(WL.$$.fragment),kBe=l(),xf=a("h2"),cE=a("a"),qve=a("span"),f(HL.$$.fragment),Vkr=l(),Nve=a("span"),Xkr=o("FlaxAutoModelForImageClassification"),SBe=l(),Or=a("div"),f(UL.$$.fragment),zkr=l(),kf=a("p"),Qkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),$H=a("a"),Wkr=o("from_pretrained()"),Hkr=o(" class method or the "),IH=a("a"),Ukr=o("from_config()"),Jkr=o(` class
method.`),Ykr=l(),JL=a("p"),Kkr=o("This class cannot be instantiated directly using "),jve=a("code"),Zkr=o("__init__()"),eSr=o(" (throws an error)."),oSr=l(),It=a("div"),f(YL.$$.fragment),rSr=l(),Dve=a("p"),tSr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),aSr=l(),Sf=a("p"),nSr=o(`Note:
Loading a model from its configuration file does `),Gve=a("strong"),sSr=o("not"),lSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qH=a("a"),iSr=o("from_pretrained()"),dSr=o(" to load the model weights."),cSr=l(),Ove=a("p"),fSr=o("Examples:"),mSr=l(),f(KL.$$.fragment),gSr=l(),qo=a("div"),f(ZL.$$.fragment),hSr=l(),Vve=a("p"),pSr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),_Sr=l(),jn=a("p"),uSr=o("The model class to instantiate is selected based on the "),Xve=a("code"),bSr=o("model_type"),FSr=o(` property of the config object (either
passed as an argument or loaded from `),zve=a("code"),vSr=o("pretrained_model_name_or_path"),TSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qve=a("code"),MSr=o("pretrained_model_name_or_path"),ESr=o(":"),CSr=l(),e8=a("ul"),fE=a("li"),Wve=a("strong"),wSr=o("beit"),ASr=o(" \u2014 "),NH=a("a"),ySr=o("FlaxBeitForImageClassification"),LSr=o(" (BEiT model)"),xSr=l(),mE=a("li"),Hve=a("strong"),kSr=o("vit"),SSr=o(" \u2014 "),jH=a("a"),RSr=o("FlaxViTForImageClassification"),BSr=o(" (ViT model)"),PSr=l(),Uve=a("p"),$Sr=o("Examples:"),ISr=l(),f(o8.$$.fragment),RBe=l(),Rf=a("h2"),gE=a("a"),Jve=a("span"),f(r8.$$.fragment),qSr=l(),Yve=a("span"),NSr=o("FlaxAutoModelForVision2Seq"),BBe=l(),Vr=a("div"),f(t8.$$.fragment),jSr=l(),Bf=a("p"),DSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),DH=a("a"),GSr=o("from_pretrained()"),OSr=o(" class method or the "),GH=a("a"),VSr=o("from_config()"),XSr=o(` class
method.`),zSr=l(),a8=a("p"),QSr=o("This class cannot be instantiated directly using "),Kve=a("code"),WSr=o("__init__()"),HSr=o(" (throws an error)."),USr=l(),qt=a("div"),f(n8.$$.fragment),JSr=l(),Zve=a("p"),YSr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),KSr=l(),Pf=a("p"),ZSr=o(`Note:
Loading a model from its configuration file does `),e6e=a("strong"),eRr=o("not"),oRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OH=a("a"),rRr=o("from_pretrained()"),tRr=o(" to load the model weights."),aRr=l(),o6e=a("p"),nRr=o("Examples:"),sRr=l(),f(s8.$$.fragment),lRr=l(),No=a("div"),f(l8.$$.fragment),iRr=l(),r6e=a("p"),dRr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),cRr=l(),Dn=a("p"),fRr=o("The model class to instantiate is selected based on the "),t6e=a("code"),mRr=o("model_type"),gRr=o(` property of the config object (either
passed as an argument or loaded from `),a6e=a("code"),hRr=o("pretrained_model_name_or_path"),pRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n6e=a("code"),_Rr=o("pretrained_model_name_or_path"),uRr=o(":"),bRr=l(),s6e=a("ul"),hE=a("li"),l6e=a("strong"),FRr=o("vision-encoder-decoder"),vRr=o(" \u2014 "),VH=a("a"),TRr=o("FlaxVisionEncoderDecoderModel"),MRr=o(" (Vision Encoder decoder model)"),ERr=l(),i6e=a("p"),CRr=o("Examples:"),wRr=l(),f(i8.$$.fragment),this.h()},l(c){const u=OMt('[data-svelte="svelte-1phssyn"]',document.head);Z=n(u,"META",{name:!0,content:!0}),u.forEach(t),io=i(c),de=n(c,"H1",{class:!0});var d8=s(de);Ce=n(d8,"A",{id:!0,class:!0,href:!0});var d6e=s(Ce);lo=n(d6e,"SPAN",{});var c6e=s(lo);m(me.$$.fragment,c6e),c6e.forEach(t),d6e.forEach(t),Me=i(d8),Xo=n(d8,"SPAN",{});var yRr=s(Xo);Ii=r(yRr,"Auto Classes"),yRr.forEach(t),d8.forEach(t),qf=i(c),fa=n(c,"P",{});var $Be=s(fa);qi=r($Be,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ni=n($Be,"CODE",{});var LRr=s(Ni);hC=r(LRr,"from_pretrained()"),LRr.forEach(t),Nf=r($Be,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),$Be.forEach(t),xe=i(c),co=n(c,"P",{});var pE=s(co);ji=r(pE,"Instantiating one of "),Gn=n(pE,"A",{href:!0});var xRr=s(Gn);pC=r(xRr,"AutoConfig"),xRr.forEach(t),On=r(pE,", "),Vn=n(pE,"A",{href:!0});var kRr=s(Vn);_C=r(kRr,"AutoModel"),kRr.forEach(t),Di=r(pE,`, and
`),Xn=n(pE,"A",{href:!0});var SRr=s(Xn);uC=r(SRr,"AutoTokenizer"),SRr.forEach(t),Gi=r(pE," will directly create a class of the relevant architecture. For instance"),pE.forEach(t),jf=i(c),m(Da.$$.fragment,c),fo=i(c),_e=n(c,"P",{});var IBe=s(_e);s9=r(IBe,"will create a model that is an instance of "),Oi=n(IBe,"A",{href:!0});var RRr=s(Oi);l9=r(RRr,"BertModel"),RRr.forEach(t),i9=r(IBe,"."),IBe.forEach(t),zo=i(c),Ga=n(c,"P",{});var qBe=s(Ga);d9=r(qBe,"There is one class of "),Df=n(qBe,"CODE",{});var BRr=s(Df);c9=r(BRr,"AutoModel"),BRr.forEach(t),Q$e=r(qBe," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),qBe.forEach(t),BSe=i(c),Vi=n(c,"H2",{class:!0});var NBe=s(Vi);Gf=n(NBe,"A",{id:!0,class:!0,href:!0});var PRr=s(Gf);qJ=n(PRr,"SPAN",{});var $Rr=s(qJ);m(bC.$$.fragment,$Rr),$Rr.forEach(t),PRr.forEach(t),W$e=i(NBe),NJ=n(NBe,"SPAN",{});var IRr=s(NJ);H$e=r(IRr,"Extending the Auto Classes"),IRr.forEach(t),NBe.forEach(t),PSe=i(c),zn=n(c,"P",{});var XH=s(zn);U$e=r(XH,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),jJ=n(XH,"CODE",{});var qRr=s(jJ);J$e=r(qRr,"NewModel"),qRr.forEach(t),Y$e=r(XH,", make sure you have a "),DJ=n(XH,"CODE",{});var NRr=s(DJ);K$e=r(NRr,"NewModelConfig"),NRr.forEach(t),Z$e=r(XH,` then you can add those to the auto
classes like this:`),XH.forEach(t),$Se=i(c),m(FC.$$.fragment,c),ISe=i(c),f9=n(c,"P",{});var jRr=s(f9);eIe=r(jRr,"You will then be able to use the auto classes like you would usually do!"),jRr.forEach(t),qSe=i(c),m(Of.$$.fragment,c),NSe=i(c),Xi=n(c,"H2",{class:!0});var jBe=s(Xi);Vf=n(jBe,"A",{id:!0,class:!0,href:!0});var DRr=s(Vf);GJ=n(DRr,"SPAN",{});var GRr=s(GJ);m(vC.$$.fragment,GRr),GRr.forEach(t),DRr.forEach(t),oIe=i(jBe),OJ=n(jBe,"SPAN",{});var ORr=s(OJ);rIe=r(ORr,"AutoConfig"),ORr.forEach(t),jBe.forEach(t),jSe=i(c),Qo=n(c,"DIV",{class:!0});var Os=s(Qo);m(TC.$$.fragment,Os),tIe=i(Os),MC=n(Os,"P",{});var DBe=s(MC);aIe=r(DBe,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),m9=n(DBe,"A",{href:!0});var VRr=s(m9);nIe=r(VRr,"from_pretrained()"),VRr.forEach(t),sIe=r(DBe," class method."),DBe.forEach(t),lIe=i(Os),EC=n(Os,"P",{});var GBe=s(EC);iIe=r(GBe,"This class cannot be instantiated directly using "),VJ=n(GBe,"CODE",{});var XRr=s(VJ);dIe=r(XRr,"__init__()"),XRr.forEach(t),cIe=r(GBe," (throws an error)."),GBe.forEach(t),fIe=i(Os),mo=n(Os,"DIV",{class:!0});var ga=s(mo);m(CC.$$.fragment,ga),mIe=i(ga),XJ=n(ga,"P",{});var zRr=s(XJ);gIe=r(zRr,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),zRr.forEach(t),hIe=i(ga),zi=n(ga,"P",{});var zH=s(zi);pIe=r(zH,"The configuration class to instantiate is selected based on the "),zJ=n(zH,"CODE",{});var QRr=s(zJ);_Ie=r(QRr,"model_type"),QRr.forEach(t),uIe=r(zH,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),QJ=n(zH,"CODE",{});var WRr=s(QJ);bIe=r(WRr,"pretrained_model_name_or_path"),WRr.forEach(t),FIe=r(zH,":"),zH.forEach(t),vIe=i(ga),F=n(ga,"UL",{});var v=s(F);Xf=n(v,"LI",{});var f6e=s(Xf);WJ=n(f6e,"STRONG",{});var HRr=s(WJ);TIe=r(HRr,"albert"),HRr.forEach(t),MIe=r(f6e," \u2014 "),g9=n(f6e,"A",{href:!0});var URr=s(g9);EIe=r(URr,"AlbertConfig"),URr.forEach(t),CIe=r(f6e," (ALBERT model)"),f6e.forEach(t),wIe=i(v),zf=n(v,"LI",{});var m6e=s(zf);HJ=n(m6e,"STRONG",{});var JRr=s(HJ);AIe=r(JRr,"bart"),JRr.forEach(t),yIe=r(m6e," \u2014 "),h9=n(m6e,"A",{href:!0});var YRr=s(h9);LIe=r(YRr,"BartConfig"),YRr.forEach(t),xIe=r(m6e," (BART model)"),m6e.forEach(t),kIe=i(v),Qf=n(v,"LI",{});var g6e=s(Qf);UJ=n(g6e,"STRONG",{});var KRr=s(UJ);SIe=r(KRr,"beit"),KRr.forEach(t),RIe=r(g6e," \u2014 "),p9=n(g6e,"A",{href:!0});var ZRr=s(p9);BIe=r(ZRr,"BeitConfig"),ZRr.forEach(t),PIe=r(g6e," (BEiT model)"),g6e.forEach(t),$Ie=i(v),Wf=n(v,"LI",{});var h6e=s(Wf);JJ=n(h6e,"STRONG",{});var eBr=s(JJ);IIe=r(eBr,"bert"),eBr.forEach(t),qIe=r(h6e," \u2014 "),_9=n(h6e,"A",{href:!0});var oBr=s(_9);NIe=r(oBr,"BertConfig"),oBr.forEach(t),jIe=r(h6e," (BERT model)"),h6e.forEach(t),DIe=i(v),Hf=n(v,"LI",{});var p6e=s(Hf);YJ=n(p6e,"STRONG",{});var rBr=s(YJ);GIe=r(rBr,"bert-generation"),rBr.forEach(t),OIe=r(p6e," \u2014 "),u9=n(p6e,"A",{href:!0});var tBr=s(u9);VIe=r(tBr,"BertGenerationConfig"),tBr.forEach(t),XIe=r(p6e," (Bert Generation model)"),p6e.forEach(t),zIe=i(v),Uf=n(v,"LI",{});var _6e=s(Uf);KJ=n(_6e,"STRONG",{});var aBr=s(KJ);QIe=r(aBr,"big_bird"),aBr.forEach(t),WIe=r(_6e," \u2014 "),b9=n(_6e,"A",{href:!0});var nBr=s(b9);HIe=r(nBr,"BigBirdConfig"),nBr.forEach(t),UIe=r(_6e," (BigBird model)"),_6e.forEach(t),JIe=i(v),Jf=n(v,"LI",{});var u6e=s(Jf);ZJ=n(u6e,"STRONG",{});var sBr=s(ZJ);YIe=r(sBr,"bigbird_pegasus"),sBr.forEach(t),KIe=r(u6e," \u2014 "),F9=n(u6e,"A",{href:!0});var lBr=s(F9);ZIe=r(lBr,"BigBirdPegasusConfig"),lBr.forEach(t),eqe=r(u6e," (BigBirdPegasus model)"),u6e.forEach(t),oqe=i(v),Yf=n(v,"LI",{});var b6e=s(Yf);eY=n(b6e,"STRONG",{});var iBr=s(eY);rqe=r(iBr,"blenderbot"),iBr.forEach(t),tqe=r(b6e," \u2014 "),v9=n(b6e,"A",{href:!0});var dBr=s(v9);aqe=r(dBr,"BlenderbotConfig"),dBr.forEach(t),nqe=r(b6e," (Blenderbot model)"),b6e.forEach(t),sqe=i(v),Kf=n(v,"LI",{});var F6e=s(Kf);oY=n(F6e,"STRONG",{});var cBr=s(oY);lqe=r(cBr,"blenderbot-small"),cBr.forEach(t),iqe=r(F6e," \u2014 "),T9=n(F6e,"A",{href:!0});var fBr=s(T9);dqe=r(fBr,"BlenderbotSmallConfig"),fBr.forEach(t),cqe=r(F6e," (BlenderbotSmall model)"),F6e.forEach(t),fqe=i(v),Zf=n(v,"LI",{});var v6e=s(Zf);rY=n(v6e,"STRONG",{});var mBr=s(rY);mqe=r(mBr,"camembert"),mBr.forEach(t),gqe=r(v6e," \u2014 "),M9=n(v6e,"A",{href:!0});var gBr=s(M9);hqe=r(gBr,"CamembertConfig"),gBr.forEach(t),pqe=r(v6e," (CamemBERT model)"),v6e.forEach(t),_qe=i(v),em=n(v,"LI",{});var T6e=s(em);tY=n(T6e,"STRONG",{});var hBr=s(tY);uqe=r(hBr,"canine"),hBr.forEach(t),bqe=r(T6e," \u2014 "),E9=n(T6e,"A",{href:!0});var pBr=s(E9);Fqe=r(pBr,"CanineConfig"),pBr.forEach(t),vqe=r(T6e," (Canine model)"),T6e.forEach(t),Tqe=i(v),om=n(v,"LI",{});var M6e=s(om);aY=n(M6e,"STRONG",{});var _Br=s(aY);Mqe=r(_Br,"clip"),_Br.forEach(t),Eqe=r(M6e," \u2014 "),C9=n(M6e,"A",{href:!0});var uBr=s(C9);Cqe=r(uBr,"CLIPConfig"),uBr.forEach(t),wqe=r(M6e," (CLIP model)"),M6e.forEach(t),Aqe=i(v),rm=n(v,"LI",{});var E6e=s(rm);nY=n(E6e,"STRONG",{});var bBr=s(nY);yqe=r(bBr,"convbert"),bBr.forEach(t),Lqe=r(E6e," \u2014 "),w9=n(E6e,"A",{href:!0});var FBr=s(w9);xqe=r(FBr,"ConvBertConfig"),FBr.forEach(t),kqe=r(E6e," (ConvBERT model)"),E6e.forEach(t),Sqe=i(v),tm=n(v,"LI",{});var C6e=s(tm);sY=n(C6e,"STRONG",{});var vBr=s(sY);Rqe=r(vBr,"convnext"),vBr.forEach(t),Bqe=r(C6e," \u2014 "),A9=n(C6e,"A",{href:!0});var TBr=s(A9);Pqe=r(TBr,"ConvNextConfig"),TBr.forEach(t),$qe=r(C6e," (ConvNext model)"),C6e.forEach(t),Iqe=i(v),am=n(v,"LI",{});var w6e=s(am);lY=n(w6e,"STRONG",{});var MBr=s(lY);qqe=r(MBr,"ctrl"),MBr.forEach(t),Nqe=r(w6e," \u2014 "),y9=n(w6e,"A",{href:!0});var EBr=s(y9);jqe=r(EBr,"CTRLConfig"),EBr.forEach(t),Dqe=r(w6e," (CTRL model)"),w6e.forEach(t),Gqe=i(v),nm=n(v,"LI",{});var A6e=s(nm);iY=n(A6e,"STRONG",{});var CBr=s(iY);Oqe=r(CBr,"data2vec-audio"),CBr.forEach(t),Vqe=r(A6e," \u2014 "),L9=n(A6e,"A",{href:!0});var wBr=s(L9);Xqe=r(wBr,"Data2VecAudioConfig"),wBr.forEach(t),zqe=r(A6e," (Data2VecAudio model)"),A6e.forEach(t),Qqe=i(v),sm=n(v,"LI",{});var y6e=s(sm);dY=n(y6e,"STRONG",{});var ABr=s(dY);Wqe=r(ABr,"data2vec-text"),ABr.forEach(t),Hqe=r(y6e," \u2014 "),x9=n(y6e,"A",{href:!0});var yBr=s(x9);Uqe=r(yBr,"Data2VecTextConfig"),yBr.forEach(t),Jqe=r(y6e," (Data2VecText model)"),y6e.forEach(t),Yqe=i(v),lm=n(v,"LI",{});var L6e=s(lm);cY=n(L6e,"STRONG",{});var LBr=s(cY);Kqe=r(LBr,"deberta"),LBr.forEach(t),Zqe=r(L6e," \u2014 "),k9=n(L6e,"A",{href:!0});var xBr=s(k9);eNe=r(xBr,"DebertaConfig"),xBr.forEach(t),oNe=r(L6e," (DeBERTa model)"),L6e.forEach(t),rNe=i(v),im=n(v,"LI",{});var x6e=s(im);fY=n(x6e,"STRONG",{});var kBr=s(fY);tNe=r(kBr,"deberta-v2"),kBr.forEach(t),aNe=r(x6e," \u2014 "),S9=n(x6e,"A",{href:!0});var SBr=s(S9);nNe=r(SBr,"DebertaV2Config"),SBr.forEach(t),sNe=r(x6e," (DeBERTa-v2 model)"),x6e.forEach(t),lNe=i(v),dm=n(v,"LI",{});var k6e=s(dm);mY=n(k6e,"STRONG",{});var RBr=s(mY);iNe=r(RBr,"decision_transformer"),RBr.forEach(t),dNe=r(k6e," \u2014 "),R9=n(k6e,"A",{href:!0});var BBr=s(R9);cNe=r(BBr,"DecisionTransformerConfig"),BBr.forEach(t),fNe=r(k6e," (Decision Transformer model)"),k6e.forEach(t),mNe=i(v),cm=n(v,"LI",{});var S6e=s(cm);gY=n(S6e,"STRONG",{});var PBr=s(gY);gNe=r(PBr,"deit"),PBr.forEach(t),hNe=r(S6e," \u2014 "),B9=n(S6e,"A",{href:!0});var $Br=s(B9);pNe=r($Br,"DeiTConfig"),$Br.forEach(t),_Ne=r(S6e," (DeiT model)"),S6e.forEach(t),uNe=i(v),fm=n(v,"LI",{});var R6e=s(fm);hY=n(R6e,"STRONG",{});var IBr=s(hY);bNe=r(IBr,"detr"),IBr.forEach(t),FNe=r(R6e," \u2014 "),P9=n(R6e,"A",{href:!0});var qBr=s(P9);vNe=r(qBr,"DetrConfig"),qBr.forEach(t),TNe=r(R6e," (DETR model)"),R6e.forEach(t),MNe=i(v),mm=n(v,"LI",{});var B6e=s(mm);pY=n(B6e,"STRONG",{});var NBr=s(pY);ENe=r(NBr,"distilbert"),NBr.forEach(t),CNe=r(B6e," \u2014 "),$9=n(B6e,"A",{href:!0});var jBr=s($9);wNe=r(jBr,"DistilBertConfig"),jBr.forEach(t),ANe=r(B6e," (DistilBERT model)"),B6e.forEach(t),yNe=i(v),gm=n(v,"LI",{});var P6e=s(gm);_Y=n(P6e,"STRONG",{});var DBr=s(_Y);LNe=r(DBr,"dpr"),DBr.forEach(t),xNe=r(P6e," \u2014 "),I9=n(P6e,"A",{href:!0});var GBr=s(I9);kNe=r(GBr,"DPRConfig"),GBr.forEach(t),SNe=r(P6e," (DPR model)"),P6e.forEach(t),RNe=i(v),hm=n(v,"LI",{});var $6e=s(hm);uY=n($6e,"STRONG",{});var OBr=s(uY);BNe=r(OBr,"dpt"),OBr.forEach(t),PNe=r($6e," \u2014 "),q9=n($6e,"A",{href:!0});var VBr=s(q9);$Ne=r(VBr,"DPTConfig"),VBr.forEach(t),INe=r($6e," (DPT model)"),$6e.forEach(t),qNe=i(v),pm=n(v,"LI",{});var I6e=s(pm);bY=n(I6e,"STRONG",{});var XBr=s(bY);NNe=r(XBr,"electra"),XBr.forEach(t),jNe=r(I6e," \u2014 "),N9=n(I6e,"A",{href:!0});var zBr=s(N9);DNe=r(zBr,"ElectraConfig"),zBr.forEach(t),GNe=r(I6e," (ELECTRA model)"),I6e.forEach(t),ONe=i(v),_m=n(v,"LI",{});var q6e=s(_m);FY=n(q6e,"STRONG",{});var QBr=s(FY);VNe=r(QBr,"encoder-decoder"),QBr.forEach(t),XNe=r(q6e," \u2014 "),j9=n(q6e,"A",{href:!0});var WBr=s(j9);zNe=r(WBr,"EncoderDecoderConfig"),WBr.forEach(t),QNe=r(q6e," (Encoder decoder model)"),q6e.forEach(t),WNe=i(v),um=n(v,"LI",{});var N6e=s(um);vY=n(N6e,"STRONG",{});var HBr=s(vY);HNe=r(HBr,"flaubert"),HBr.forEach(t),UNe=r(N6e," \u2014 "),D9=n(N6e,"A",{href:!0});var UBr=s(D9);JNe=r(UBr,"FlaubertConfig"),UBr.forEach(t),YNe=r(N6e," (FlauBERT model)"),N6e.forEach(t),KNe=i(v),bm=n(v,"LI",{});var j6e=s(bm);TY=n(j6e,"STRONG",{});var JBr=s(TY);ZNe=r(JBr,"fnet"),JBr.forEach(t),eje=r(j6e," \u2014 "),G9=n(j6e,"A",{href:!0});var YBr=s(G9);oje=r(YBr,"FNetConfig"),YBr.forEach(t),rje=r(j6e," (FNet model)"),j6e.forEach(t),tje=i(v),Fm=n(v,"LI",{});var D6e=s(Fm);MY=n(D6e,"STRONG",{});var KBr=s(MY);aje=r(KBr,"fsmt"),KBr.forEach(t),nje=r(D6e," \u2014 "),O9=n(D6e,"A",{href:!0});var ZBr=s(O9);sje=r(ZBr,"FSMTConfig"),ZBr.forEach(t),lje=r(D6e," (FairSeq Machine-Translation model)"),D6e.forEach(t),ije=i(v),vm=n(v,"LI",{});var G6e=s(vm);EY=n(G6e,"STRONG",{});var ePr=s(EY);dje=r(ePr,"funnel"),ePr.forEach(t),cje=r(G6e," \u2014 "),V9=n(G6e,"A",{href:!0});var oPr=s(V9);fje=r(oPr,"FunnelConfig"),oPr.forEach(t),mje=r(G6e," (Funnel Transformer model)"),G6e.forEach(t),gje=i(v),Tm=n(v,"LI",{});var O6e=s(Tm);CY=n(O6e,"STRONG",{});var rPr=s(CY);hje=r(rPr,"glpn"),rPr.forEach(t),pje=r(O6e," \u2014 "),X9=n(O6e,"A",{href:!0});var tPr=s(X9);_je=r(tPr,"GLPNConfig"),tPr.forEach(t),uje=r(O6e," (GLPN model)"),O6e.forEach(t),bje=i(v),Mm=n(v,"LI",{});var V6e=s(Mm);wY=n(V6e,"STRONG",{});var aPr=s(wY);Fje=r(aPr,"gpt2"),aPr.forEach(t),vje=r(V6e," \u2014 "),z9=n(V6e,"A",{href:!0});var nPr=s(z9);Tje=r(nPr,"GPT2Config"),nPr.forEach(t),Mje=r(V6e," (OpenAI GPT-2 model)"),V6e.forEach(t),Eje=i(v),Em=n(v,"LI",{});var X6e=s(Em);AY=n(X6e,"STRONG",{});var sPr=s(AY);Cje=r(sPr,"gpt_neo"),sPr.forEach(t),wje=r(X6e," \u2014 "),Q9=n(X6e,"A",{href:!0});var lPr=s(Q9);Aje=r(lPr,"GPTNeoConfig"),lPr.forEach(t),yje=r(X6e," (GPT Neo model)"),X6e.forEach(t),Lje=i(v),Cm=n(v,"LI",{});var z6e=s(Cm);yY=n(z6e,"STRONG",{});var iPr=s(yY);xje=r(iPr,"gptj"),iPr.forEach(t),kje=r(z6e," \u2014 "),W9=n(z6e,"A",{href:!0});var dPr=s(W9);Sje=r(dPr,"GPTJConfig"),dPr.forEach(t),Rje=r(z6e," (GPT-J model)"),z6e.forEach(t),Bje=i(v),wm=n(v,"LI",{});var Q6e=s(wm);LY=n(Q6e,"STRONG",{});var cPr=s(LY);Pje=r(cPr,"hubert"),cPr.forEach(t),$je=r(Q6e," \u2014 "),H9=n(Q6e,"A",{href:!0});var fPr=s(H9);Ije=r(fPr,"HubertConfig"),fPr.forEach(t),qje=r(Q6e," (Hubert model)"),Q6e.forEach(t),Nje=i(v),Am=n(v,"LI",{});var W6e=s(Am);xY=n(W6e,"STRONG",{});var mPr=s(xY);jje=r(mPr,"ibert"),mPr.forEach(t),Dje=r(W6e," \u2014 "),U9=n(W6e,"A",{href:!0});var gPr=s(U9);Gje=r(gPr,"IBertConfig"),gPr.forEach(t),Oje=r(W6e," (I-BERT model)"),W6e.forEach(t),Vje=i(v),ym=n(v,"LI",{});var H6e=s(ym);kY=n(H6e,"STRONG",{});var hPr=s(kY);Xje=r(hPr,"imagegpt"),hPr.forEach(t),zje=r(H6e," \u2014 "),J9=n(H6e,"A",{href:!0});var pPr=s(J9);Qje=r(pPr,"ImageGPTConfig"),pPr.forEach(t),Wje=r(H6e," (ImageGPT model)"),H6e.forEach(t),Hje=i(v),Lm=n(v,"LI",{});var U6e=s(Lm);SY=n(U6e,"STRONG",{});var _Pr=s(SY);Uje=r(_Pr,"layoutlm"),_Pr.forEach(t),Jje=r(U6e," \u2014 "),Y9=n(U6e,"A",{href:!0});var uPr=s(Y9);Yje=r(uPr,"LayoutLMConfig"),uPr.forEach(t),Kje=r(U6e," (LayoutLM model)"),U6e.forEach(t),Zje=i(v),xm=n(v,"LI",{});var J6e=s(xm);RY=n(J6e,"STRONG",{});var bPr=s(RY);eDe=r(bPr,"layoutlmv2"),bPr.forEach(t),oDe=r(J6e," \u2014 "),K9=n(J6e,"A",{href:!0});var FPr=s(K9);rDe=r(FPr,"LayoutLMv2Config"),FPr.forEach(t),tDe=r(J6e," (LayoutLMv2 model)"),J6e.forEach(t),aDe=i(v),km=n(v,"LI",{});var Y6e=s(km);BY=n(Y6e,"STRONG",{});var vPr=s(BY);nDe=r(vPr,"led"),vPr.forEach(t),sDe=r(Y6e," \u2014 "),Z9=n(Y6e,"A",{href:!0});var TPr=s(Z9);lDe=r(TPr,"LEDConfig"),TPr.forEach(t),iDe=r(Y6e," (LED model)"),Y6e.forEach(t),dDe=i(v),Sm=n(v,"LI",{});var K6e=s(Sm);PY=n(K6e,"STRONG",{});var MPr=s(PY);cDe=r(MPr,"longformer"),MPr.forEach(t),fDe=r(K6e," \u2014 "),ex=n(K6e,"A",{href:!0});var EPr=s(ex);mDe=r(EPr,"LongformerConfig"),EPr.forEach(t),gDe=r(K6e," (Longformer model)"),K6e.forEach(t),hDe=i(v),Rm=n(v,"LI",{});var Z6e=s(Rm);$Y=n(Z6e,"STRONG",{});var CPr=s($Y);pDe=r(CPr,"luke"),CPr.forEach(t),_De=r(Z6e," \u2014 "),ox=n(Z6e,"A",{href:!0});var wPr=s(ox);uDe=r(wPr,"LukeConfig"),wPr.forEach(t),bDe=r(Z6e," (LUKE model)"),Z6e.forEach(t),FDe=i(v),Bm=n(v,"LI",{});var eTe=s(Bm);IY=n(eTe,"STRONG",{});var APr=s(IY);vDe=r(APr,"lxmert"),APr.forEach(t),TDe=r(eTe," \u2014 "),rx=n(eTe,"A",{href:!0});var yPr=s(rx);MDe=r(yPr,"LxmertConfig"),yPr.forEach(t),EDe=r(eTe," (LXMERT model)"),eTe.forEach(t),CDe=i(v),Pm=n(v,"LI",{});var oTe=s(Pm);qY=n(oTe,"STRONG",{});var LPr=s(qY);wDe=r(LPr,"m2m_100"),LPr.forEach(t),ADe=r(oTe," \u2014 "),tx=n(oTe,"A",{href:!0});var xPr=s(tx);yDe=r(xPr,"M2M100Config"),xPr.forEach(t),LDe=r(oTe," (M2M100 model)"),oTe.forEach(t),xDe=i(v),$m=n(v,"LI",{});var rTe=s($m);NY=n(rTe,"STRONG",{});var kPr=s(NY);kDe=r(kPr,"marian"),kPr.forEach(t),SDe=r(rTe," \u2014 "),ax=n(rTe,"A",{href:!0});var SPr=s(ax);RDe=r(SPr,"MarianConfig"),SPr.forEach(t),BDe=r(rTe," (Marian model)"),rTe.forEach(t),PDe=i(v),Im=n(v,"LI",{});var tTe=s(Im);jY=n(tTe,"STRONG",{});var RPr=s(jY);$De=r(RPr,"maskformer"),RPr.forEach(t),IDe=r(tTe," \u2014 "),nx=n(tTe,"A",{href:!0});var BPr=s(nx);qDe=r(BPr,"MaskFormerConfig"),BPr.forEach(t),NDe=r(tTe," (MaskFormer model)"),tTe.forEach(t),jDe=i(v),qm=n(v,"LI",{});var aTe=s(qm);DY=n(aTe,"STRONG",{});var PPr=s(DY);DDe=r(PPr,"mbart"),PPr.forEach(t),GDe=r(aTe," \u2014 "),sx=n(aTe,"A",{href:!0});var $Pr=s(sx);ODe=r($Pr,"MBartConfig"),$Pr.forEach(t),VDe=r(aTe," (mBART model)"),aTe.forEach(t),XDe=i(v),Nm=n(v,"LI",{});var nTe=s(Nm);GY=n(nTe,"STRONG",{});var IPr=s(GY);zDe=r(IPr,"megatron-bert"),IPr.forEach(t),QDe=r(nTe," \u2014 "),lx=n(nTe,"A",{href:!0});var qPr=s(lx);WDe=r(qPr,"MegatronBertConfig"),qPr.forEach(t),HDe=r(nTe," (MegatronBert model)"),nTe.forEach(t),UDe=i(v),jm=n(v,"LI",{});var sTe=s(jm);OY=n(sTe,"STRONG",{});var NPr=s(OY);JDe=r(NPr,"mobilebert"),NPr.forEach(t),YDe=r(sTe," \u2014 "),ix=n(sTe,"A",{href:!0});var jPr=s(ix);KDe=r(jPr,"MobileBertConfig"),jPr.forEach(t),ZDe=r(sTe," (MobileBERT model)"),sTe.forEach(t),eGe=i(v),Dm=n(v,"LI",{});var lTe=s(Dm);VY=n(lTe,"STRONG",{});var DPr=s(VY);oGe=r(DPr,"mpnet"),DPr.forEach(t),rGe=r(lTe," \u2014 "),dx=n(lTe,"A",{href:!0});var GPr=s(dx);tGe=r(GPr,"MPNetConfig"),GPr.forEach(t),aGe=r(lTe," (MPNet model)"),lTe.forEach(t),nGe=i(v),Gm=n(v,"LI",{});var iTe=s(Gm);XY=n(iTe,"STRONG",{});var OPr=s(XY);sGe=r(OPr,"mt5"),OPr.forEach(t),lGe=r(iTe," \u2014 "),cx=n(iTe,"A",{href:!0});var VPr=s(cx);iGe=r(VPr,"MT5Config"),VPr.forEach(t),dGe=r(iTe," (mT5 model)"),iTe.forEach(t),cGe=i(v),Om=n(v,"LI",{});var dTe=s(Om);zY=n(dTe,"STRONG",{});var XPr=s(zY);fGe=r(XPr,"nystromformer"),XPr.forEach(t),mGe=r(dTe," \u2014 "),fx=n(dTe,"A",{href:!0});var zPr=s(fx);gGe=r(zPr,"NystromformerConfig"),zPr.forEach(t),hGe=r(dTe," (Nystromformer model)"),dTe.forEach(t),pGe=i(v),Vm=n(v,"LI",{});var cTe=s(Vm);QY=n(cTe,"STRONG",{});var QPr=s(QY);_Ge=r(QPr,"openai-gpt"),QPr.forEach(t),uGe=r(cTe," \u2014 "),mx=n(cTe,"A",{href:!0});var WPr=s(mx);bGe=r(WPr,"OpenAIGPTConfig"),WPr.forEach(t),FGe=r(cTe," (OpenAI GPT model)"),cTe.forEach(t),vGe=i(v),Xm=n(v,"LI",{});var fTe=s(Xm);WY=n(fTe,"STRONG",{});var HPr=s(WY);TGe=r(HPr,"pegasus"),HPr.forEach(t),MGe=r(fTe," \u2014 "),gx=n(fTe,"A",{href:!0});var UPr=s(gx);EGe=r(UPr,"PegasusConfig"),UPr.forEach(t),CGe=r(fTe," (Pegasus model)"),fTe.forEach(t),wGe=i(v),zm=n(v,"LI",{});var mTe=s(zm);HY=n(mTe,"STRONG",{});var JPr=s(HY);AGe=r(JPr,"perceiver"),JPr.forEach(t),yGe=r(mTe," \u2014 "),hx=n(mTe,"A",{href:!0});var YPr=s(hx);LGe=r(YPr,"PerceiverConfig"),YPr.forEach(t),xGe=r(mTe," (Perceiver model)"),mTe.forEach(t),kGe=i(v),Qm=n(v,"LI",{});var gTe=s(Qm);UY=n(gTe,"STRONG",{});var KPr=s(UY);SGe=r(KPr,"plbart"),KPr.forEach(t),RGe=r(gTe," \u2014 "),px=n(gTe,"A",{href:!0});var ZPr=s(px);BGe=r(ZPr,"PLBartConfig"),ZPr.forEach(t),PGe=r(gTe," (PLBart model)"),gTe.forEach(t),$Ge=i(v),Wm=n(v,"LI",{});var hTe=s(Wm);JY=n(hTe,"STRONG",{});var e$r=s(JY);IGe=r(e$r,"poolformer"),e$r.forEach(t),qGe=r(hTe," \u2014 "),_x=n(hTe,"A",{href:!0});var o$r=s(_x);NGe=r(o$r,"PoolFormerConfig"),o$r.forEach(t),jGe=r(hTe," (PoolFormer model)"),hTe.forEach(t),DGe=i(v),Hm=n(v,"LI",{});var pTe=s(Hm);YY=n(pTe,"STRONG",{});var r$r=s(YY);GGe=r(r$r,"prophetnet"),r$r.forEach(t),OGe=r(pTe," \u2014 "),ux=n(pTe,"A",{href:!0});var t$r=s(ux);VGe=r(t$r,"ProphetNetConfig"),t$r.forEach(t),XGe=r(pTe," (ProphetNet model)"),pTe.forEach(t),zGe=i(v),Um=n(v,"LI",{});var _Te=s(Um);KY=n(_Te,"STRONG",{});var a$r=s(KY);QGe=r(a$r,"qdqbert"),a$r.forEach(t),WGe=r(_Te," \u2014 "),bx=n(_Te,"A",{href:!0});var n$r=s(bx);HGe=r(n$r,"QDQBertConfig"),n$r.forEach(t),UGe=r(_Te," (QDQBert model)"),_Te.forEach(t),JGe=i(v),Jm=n(v,"LI",{});var uTe=s(Jm);ZY=n(uTe,"STRONG",{});var s$r=s(ZY);YGe=r(s$r,"rag"),s$r.forEach(t),KGe=r(uTe," \u2014 "),Fx=n(uTe,"A",{href:!0});var l$r=s(Fx);ZGe=r(l$r,"RagConfig"),l$r.forEach(t),eOe=r(uTe," (RAG model)"),uTe.forEach(t),oOe=i(v),Ym=n(v,"LI",{});var bTe=s(Ym);eK=n(bTe,"STRONG",{});var i$r=s(eK);rOe=r(i$r,"realm"),i$r.forEach(t),tOe=r(bTe," \u2014 "),vx=n(bTe,"A",{href:!0});var d$r=s(vx);aOe=r(d$r,"RealmConfig"),d$r.forEach(t),nOe=r(bTe," (Realm model)"),bTe.forEach(t),sOe=i(v),Km=n(v,"LI",{});var FTe=s(Km);oK=n(FTe,"STRONG",{});var c$r=s(oK);lOe=r(c$r,"reformer"),c$r.forEach(t),iOe=r(FTe," \u2014 "),Tx=n(FTe,"A",{href:!0});var f$r=s(Tx);dOe=r(f$r,"ReformerConfig"),f$r.forEach(t),cOe=r(FTe," (Reformer model)"),FTe.forEach(t),fOe=i(v),Zm=n(v,"LI",{});var vTe=s(Zm);rK=n(vTe,"STRONG",{});var m$r=s(rK);mOe=r(m$r,"rembert"),m$r.forEach(t),gOe=r(vTe," \u2014 "),Mx=n(vTe,"A",{href:!0});var g$r=s(Mx);hOe=r(g$r,"RemBertConfig"),g$r.forEach(t),pOe=r(vTe," (RemBERT model)"),vTe.forEach(t),_Oe=i(v),eg=n(v,"LI",{});var TTe=s(eg);tK=n(TTe,"STRONG",{});var h$r=s(tK);uOe=r(h$r,"resnet"),h$r.forEach(t),bOe=r(TTe," \u2014 "),Ex=n(TTe,"A",{href:!0});var p$r=s(Ex);FOe=r(p$r,"ResNetConfig"),p$r.forEach(t),vOe=r(TTe," (ResNet model)"),TTe.forEach(t),TOe=i(v),og=n(v,"LI",{});var MTe=s(og);aK=n(MTe,"STRONG",{});var _$r=s(aK);MOe=r(_$r,"retribert"),_$r.forEach(t),EOe=r(MTe," \u2014 "),Cx=n(MTe,"A",{href:!0});var u$r=s(Cx);COe=r(u$r,"RetriBertConfig"),u$r.forEach(t),wOe=r(MTe," (RetriBERT model)"),MTe.forEach(t),AOe=i(v),rg=n(v,"LI",{});var ETe=s(rg);nK=n(ETe,"STRONG",{});var b$r=s(nK);yOe=r(b$r,"roberta"),b$r.forEach(t),LOe=r(ETe," \u2014 "),wx=n(ETe,"A",{href:!0});var F$r=s(wx);xOe=r(F$r,"RobertaConfig"),F$r.forEach(t),kOe=r(ETe," (RoBERTa model)"),ETe.forEach(t),SOe=i(v),tg=n(v,"LI",{});var CTe=s(tg);sK=n(CTe,"STRONG",{});var v$r=s(sK);ROe=r(v$r,"roformer"),v$r.forEach(t),BOe=r(CTe," \u2014 "),Ax=n(CTe,"A",{href:!0});var T$r=s(Ax);POe=r(T$r,"RoFormerConfig"),T$r.forEach(t),$Oe=r(CTe," (RoFormer model)"),CTe.forEach(t),IOe=i(v),ag=n(v,"LI",{});var wTe=s(ag);lK=n(wTe,"STRONG",{});var M$r=s(lK);qOe=r(M$r,"segformer"),M$r.forEach(t),NOe=r(wTe," \u2014 "),yx=n(wTe,"A",{href:!0});var E$r=s(yx);jOe=r(E$r,"SegformerConfig"),E$r.forEach(t),DOe=r(wTe," (SegFormer model)"),wTe.forEach(t),GOe=i(v),ng=n(v,"LI",{});var ATe=s(ng);iK=n(ATe,"STRONG",{});var C$r=s(iK);OOe=r(C$r,"sew"),C$r.forEach(t),VOe=r(ATe," \u2014 "),Lx=n(ATe,"A",{href:!0});var w$r=s(Lx);XOe=r(w$r,"SEWConfig"),w$r.forEach(t),zOe=r(ATe," (SEW model)"),ATe.forEach(t),QOe=i(v),sg=n(v,"LI",{});var yTe=s(sg);dK=n(yTe,"STRONG",{});var A$r=s(dK);WOe=r(A$r,"sew-d"),A$r.forEach(t),HOe=r(yTe," \u2014 "),xx=n(yTe,"A",{href:!0});var y$r=s(xx);UOe=r(y$r,"SEWDConfig"),y$r.forEach(t),JOe=r(yTe," (SEW-D model)"),yTe.forEach(t),YOe=i(v),lg=n(v,"LI",{});var LTe=s(lg);cK=n(LTe,"STRONG",{});var L$r=s(cK);KOe=r(L$r,"speech-encoder-decoder"),L$r.forEach(t),ZOe=r(LTe," \u2014 "),kx=n(LTe,"A",{href:!0});var x$r=s(kx);eVe=r(x$r,"SpeechEncoderDecoderConfig"),x$r.forEach(t),oVe=r(LTe," (Speech Encoder decoder model)"),LTe.forEach(t),rVe=i(v),ig=n(v,"LI",{});var xTe=s(ig);fK=n(xTe,"STRONG",{});var k$r=s(fK);tVe=r(k$r,"speech_to_text"),k$r.forEach(t),aVe=r(xTe," \u2014 "),Sx=n(xTe,"A",{href:!0});var S$r=s(Sx);nVe=r(S$r,"Speech2TextConfig"),S$r.forEach(t),sVe=r(xTe," (Speech2Text model)"),xTe.forEach(t),lVe=i(v),dg=n(v,"LI",{});var kTe=s(dg);mK=n(kTe,"STRONG",{});var R$r=s(mK);iVe=r(R$r,"speech_to_text_2"),R$r.forEach(t),dVe=r(kTe," \u2014 "),Rx=n(kTe,"A",{href:!0});var B$r=s(Rx);cVe=r(B$r,"Speech2Text2Config"),B$r.forEach(t),fVe=r(kTe," (Speech2Text2 model)"),kTe.forEach(t),mVe=i(v),cg=n(v,"LI",{});var STe=s(cg);gK=n(STe,"STRONG",{});var P$r=s(gK);gVe=r(P$r,"splinter"),P$r.forEach(t),hVe=r(STe," \u2014 "),Bx=n(STe,"A",{href:!0});var $$r=s(Bx);pVe=r($$r,"SplinterConfig"),$$r.forEach(t),_Ve=r(STe," (Splinter model)"),STe.forEach(t),uVe=i(v),fg=n(v,"LI",{});var RTe=s(fg);hK=n(RTe,"STRONG",{});var I$r=s(hK);bVe=r(I$r,"squeezebert"),I$r.forEach(t),FVe=r(RTe," \u2014 "),Px=n(RTe,"A",{href:!0});var q$r=s(Px);vVe=r(q$r,"SqueezeBertConfig"),q$r.forEach(t),TVe=r(RTe," (SqueezeBERT model)"),RTe.forEach(t),MVe=i(v),mg=n(v,"LI",{});var BTe=s(mg);pK=n(BTe,"STRONG",{});var N$r=s(pK);EVe=r(N$r,"swin"),N$r.forEach(t),CVe=r(BTe," \u2014 "),$x=n(BTe,"A",{href:!0});var j$r=s($x);wVe=r(j$r,"SwinConfig"),j$r.forEach(t),AVe=r(BTe," (Swin model)"),BTe.forEach(t),yVe=i(v),gg=n(v,"LI",{});var PTe=s(gg);_K=n(PTe,"STRONG",{});var D$r=s(_K);LVe=r(D$r,"t5"),D$r.forEach(t),xVe=r(PTe," \u2014 "),Ix=n(PTe,"A",{href:!0});var G$r=s(Ix);kVe=r(G$r,"T5Config"),G$r.forEach(t),SVe=r(PTe," (T5 model)"),PTe.forEach(t),RVe=i(v),hg=n(v,"LI",{});var $Te=s(hg);uK=n($Te,"STRONG",{});var O$r=s(uK);BVe=r(O$r,"tapas"),O$r.forEach(t),PVe=r($Te," \u2014 "),qx=n($Te,"A",{href:!0});var V$r=s(qx);$Ve=r(V$r,"TapasConfig"),V$r.forEach(t),IVe=r($Te," (TAPAS model)"),$Te.forEach(t),qVe=i(v),pg=n(v,"LI",{});var ITe=s(pg);bK=n(ITe,"STRONG",{});var X$r=s(bK);NVe=r(X$r,"transfo-xl"),X$r.forEach(t),jVe=r(ITe," \u2014 "),Nx=n(ITe,"A",{href:!0});var z$r=s(Nx);DVe=r(z$r,"TransfoXLConfig"),z$r.forEach(t),GVe=r(ITe," (Transformer-XL model)"),ITe.forEach(t),OVe=i(v),_g=n(v,"LI",{});var qTe=s(_g);FK=n(qTe,"STRONG",{});var Q$r=s(FK);VVe=r(Q$r,"trocr"),Q$r.forEach(t),XVe=r(qTe," \u2014 "),jx=n(qTe,"A",{href:!0});var W$r=s(jx);zVe=r(W$r,"TrOCRConfig"),W$r.forEach(t),QVe=r(qTe," (TrOCR model)"),qTe.forEach(t),WVe=i(v),ug=n(v,"LI",{});var NTe=s(ug);vK=n(NTe,"STRONG",{});var H$r=s(vK);HVe=r(H$r,"unispeech"),H$r.forEach(t),UVe=r(NTe," \u2014 "),Dx=n(NTe,"A",{href:!0});var U$r=s(Dx);JVe=r(U$r,"UniSpeechConfig"),U$r.forEach(t),YVe=r(NTe," (UniSpeech model)"),NTe.forEach(t),KVe=i(v),bg=n(v,"LI",{});var jTe=s(bg);TK=n(jTe,"STRONG",{});var J$r=s(TK);ZVe=r(J$r,"unispeech-sat"),J$r.forEach(t),eXe=r(jTe," \u2014 "),Gx=n(jTe,"A",{href:!0});var Y$r=s(Gx);oXe=r(Y$r,"UniSpeechSatConfig"),Y$r.forEach(t),rXe=r(jTe," (UniSpeechSat model)"),jTe.forEach(t),tXe=i(v),Fg=n(v,"LI",{});var DTe=s(Fg);MK=n(DTe,"STRONG",{});var K$r=s(MK);aXe=r(K$r,"van"),K$r.forEach(t),nXe=r(DTe," \u2014 "),Ox=n(DTe,"A",{href:!0});var Z$r=s(Ox);sXe=r(Z$r,"VanConfig"),Z$r.forEach(t),lXe=r(DTe," (VAN model)"),DTe.forEach(t),iXe=i(v),vg=n(v,"LI",{});var GTe=s(vg);EK=n(GTe,"STRONG",{});var eIr=s(EK);dXe=r(eIr,"vilt"),eIr.forEach(t),cXe=r(GTe," \u2014 "),Vx=n(GTe,"A",{href:!0});var oIr=s(Vx);fXe=r(oIr,"ViltConfig"),oIr.forEach(t),mXe=r(GTe," (ViLT model)"),GTe.forEach(t),gXe=i(v),Tg=n(v,"LI",{});var OTe=s(Tg);CK=n(OTe,"STRONG",{});var rIr=s(CK);hXe=r(rIr,"vision-encoder-decoder"),rIr.forEach(t),pXe=r(OTe," \u2014 "),Xx=n(OTe,"A",{href:!0});var tIr=s(Xx);_Xe=r(tIr,"VisionEncoderDecoderConfig"),tIr.forEach(t),uXe=r(OTe," (Vision Encoder decoder model)"),OTe.forEach(t),bXe=i(v),Mg=n(v,"LI",{});var VTe=s(Mg);wK=n(VTe,"STRONG",{});var aIr=s(wK);FXe=r(aIr,"vision-text-dual-encoder"),aIr.forEach(t),vXe=r(VTe," \u2014 "),zx=n(VTe,"A",{href:!0});var nIr=s(zx);TXe=r(nIr,"VisionTextDualEncoderConfig"),nIr.forEach(t),MXe=r(VTe," (VisionTextDualEncoder model)"),VTe.forEach(t),EXe=i(v),Eg=n(v,"LI",{});var XTe=s(Eg);AK=n(XTe,"STRONG",{});var sIr=s(AK);CXe=r(sIr,"visual_bert"),sIr.forEach(t),wXe=r(XTe," \u2014 "),Qx=n(XTe,"A",{href:!0});var lIr=s(Qx);AXe=r(lIr,"VisualBertConfig"),lIr.forEach(t),yXe=r(XTe," (VisualBert model)"),XTe.forEach(t),LXe=i(v),Cg=n(v,"LI",{});var zTe=s(Cg);yK=n(zTe,"STRONG",{});var iIr=s(yK);xXe=r(iIr,"vit"),iIr.forEach(t),kXe=r(zTe," \u2014 "),Wx=n(zTe,"A",{href:!0});var dIr=s(Wx);SXe=r(dIr,"ViTConfig"),dIr.forEach(t),RXe=r(zTe," (ViT model)"),zTe.forEach(t),BXe=i(v),wg=n(v,"LI",{});var QTe=s(wg);LK=n(QTe,"STRONG",{});var cIr=s(LK);PXe=r(cIr,"vit_mae"),cIr.forEach(t),$Xe=r(QTe," \u2014 "),Hx=n(QTe,"A",{href:!0});var fIr=s(Hx);IXe=r(fIr,"ViTMAEConfig"),fIr.forEach(t),qXe=r(QTe," (ViTMAE model)"),QTe.forEach(t),NXe=i(v),Ag=n(v,"LI",{});var WTe=s(Ag);xK=n(WTe,"STRONG",{});var mIr=s(xK);jXe=r(mIr,"wav2vec2"),mIr.forEach(t),DXe=r(WTe," \u2014 "),Ux=n(WTe,"A",{href:!0});var gIr=s(Ux);GXe=r(gIr,"Wav2Vec2Config"),gIr.forEach(t),OXe=r(WTe," (Wav2Vec2 model)"),WTe.forEach(t),VXe=i(v),yg=n(v,"LI",{});var HTe=s(yg);kK=n(HTe,"STRONG",{});var hIr=s(kK);XXe=r(hIr,"wavlm"),hIr.forEach(t),zXe=r(HTe," \u2014 "),Jx=n(HTe,"A",{href:!0});var pIr=s(Jx);QXe=r(pIr,"WavLMConfig"),pIr.forEach(t),WXe=r(HTe," (WavLM model)"),HTe.forEach(t),HXe=i(v),Lg=n(v,"LI",{});var UTe=s(Lg);SK=n(UTe,"STRONG",{});var _Ir=s(SK);UXe=r(_Ir,"xglm"),_Ir.forEach(t),JXe=r(UTe," \u2014 "),Yx=n(UTe,"A",{href:!0});var uIr=s(Yx);YXe=r(uIr,"XGLMConfig"),uIr.forEach(t),KXe=r(UTe," (XGLM model)"),UTe.forEach(t),ZXe=i(v),xg=n(v,"LI",{});var JTe=s(xg);RK=n(JTe,"STRONG",{});var bIr=s(RK);eze=r(bIr,"xlm"),bIr.forEach(t),oze=r(JTe," \u2014 "),Kx=n(JTe,"A",{href:!0});var FIr=s(Kx);rze=r(FIr,"XLMConfig"),FIr.forEach(t),tze=r(JTe," (XLM model)"),JTe.forEach(t),aze=i(v),kg=n(v,"LI",{});var YTe=s(kg);BK=n(YTe,"STRONG",{});var vIr=s(BK);nze=r(vIr,"xlm-prophetnet"),vIr.forEach(t),sze=r(YTe," \u2014 "),Zx=n(YTe,"A",{href:!0});var TIr=s(Zx);lze=r(TIr,"XLMProphetNetConfig"),TIr.forEach(t),ize=r(YTe," (XLMProphetNet model)"),YTe.forEach(t),dze=i(v),Sg=n(v,"LI",{});var KTe=s(Sg);PK=n(KTe,"STRONG",{});var MIr=s(PK);cze=r(MIr,"xlm-roberta"),MIr.forEach(t),fze=r(KTe," \u2014 "),ek=n(KTe,"A",{href:!0});var EIr=s(ek);mze=r(EIr,"XLMRobertaConfig"),EIr.forEach(t),gze=r(KTe," (XLM-RoBERTa model)"),KTe.forEach(t),hze=i(v),Rg=n(v,"LI",{});var ZTe=s(Rg);$K=n(ZTe,"STRONG",{});var CIr=s($K);pze=r(CIr,"xlm-roberta-xl"),CIr.forEach(t),_ze=r(ZTe," \u2014 "),ok=n(ZTe,"A",{href:!0});var wIr=s(ok);uze=r(wIr,"XLMRobertaXLConfig"),wIr.forEach(t),bze=r(ZTe," (XLM-RoBERTa-XL model)"),ZTe.forEach(t),Fze=i(v),Bg=n(v,"LI",{});var e7e=s(Bg);IK=n(e7e,"STRONG",{});var AIr=s(IK);vze=r(AIr,"xlnet"),AIr.forEach(t),Tze=r(e7e," \u2014 "),rk=n(e7e,"A",{href:!0});var yIr=s(rk);Mze=r(yIr,"XLNetConfig"),yIr.forEach(t),Eze=r(e7e," (XLNet model)"),e7e.forEach(t),Cze=i(v),Pg=n(v,"LI",{});var o7e=s(Pg);qK=n(o7e,"STRONG",{});var LIr=s(qK);wze=r(LIr,"yoso"),LIr.forEach(t),Aze=r(o7e," \u2014 "),tk=n(o7e,"A",{href:!0});var xIr=s(tk);yze=r(xIr,"YosoConfig"),xIr.forEach(t),Lze=r(o7e," (YOSO model)"),o7e.forEach(t),v.forEach(t),xze=i(ga),NK=n(ga,"P",{});var kIr=s(NK);kze=r(kIr,"Examples:"),kIr.forEach(t),Sze=i(ga),m(wC.$$.fragment,ga),ga.forEach(t),Rze=i(Os),$g=n(Os,"DIV",{class:!0});var OBe=s($g);m(AC.$$.fragment,OBe),Bze=i(OBe),jK=n(OBe,"P",{});var SIr=s(jK);Pze=r(SIr,"Register a new configuration for this class."),SIr.forEach(t),OBe.forEach(t),Os.forEach(t),DSe=i(c),Qi=n(c,"H2",{class:!0});var VBe=s(Qi);Ig=n(VBe,"A",{id:!0,class:!0,href:!0});var RIr=s(Ig);DK=n(RIr,"SPAN",{});var BIr=s(DK);m(yC.$$.fragment,BIr),BIr.forEach(t),RIr.forEach(t),$ze=i(VBe),GK=n(VBe,"SPAN",{});var PIr=s(GK);Ize=r(PIr,"AutoTokenizer"),PIr.forEach(t),VBe.forEach(t),GSe=i(c),Wo=n(c,"DIV",{class:!0});var Vs=s(Wo);m(LC.$$.fragment,Vs),qze=i(Vs),xC=n(Vs,"P",{});var XBe=s(xC);Nze=r(XBe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),ak=n(XBe,"A",{href:!0});var $Ir=s(ak);jze=r($Ir,"AutoTokenizer.from_pretrained()"),$Ir.forEach(t),Dze=r(XBe," class method."),XBe.forEach(t),Gze=i(Vs),kC=n(Vs,"P",{});var zBe=s(kC);Oze=r(zBe,"This class cannot be instantiated directly using "),OK=n(zBe,"CODE",{});var IIr=s(OK);Vze=r(IIr,"__init__()"),IIr.forEach(t),Xze=r(zBe," (throws an error)."),zBe.forEach(t),zze=i(Vs),go=n(Vs,"DIV",{class:!0});var ha=s(go);m(SC.$$.fragment,ha),Qze=i(ha),VK=n(ha,"P",{});var qIr=s(VK);Wze=r(qIr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),qIr.forEach(t),Hze=i(ha),Oa=n(ha,"P",{});var _E=s(Oa);Uze=r(_E,"The tokenizer class to instantiate is selected based on the "),XK=n(_E,"CODE",{});var NIr=s(XK);Jze=r(NIr,"model_type"),NIr.forEach(t),Yze=r(_E,` property of the config object (either
passed as an argument or loaded from `),zK=n(_E,"CODE",{});var jIr=s(zK);Kze=r(jIr,"pretrained_model_name_or_path"),jIr.forEach(t),Zze=r(_E,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QK=n(_E,"CODE",{});var DIr=s(QK);eQe=r(DIr,"pretrained_model_name_or_path"),DIr.forEach(t),oQe=r(_E,":"),_E.forEach(t),rQe=i(ha),E=n(ha,"UL",{});var w=s(E);Qn=n(w,"LI",{});var c8=s(Qn);WK=n(c8,"STRONG",{});var GIr=s(WK);tQe=r(GIr,"albert"),GIr.forEach(t),aQe=r(c8," \u2014 "),nk=n(c8,"A",{href:!0});var OIr=s(nk);nQe=r(OIr,"AlbertTokenizer"),OIr.forEach(t),sQe=r(c8," or "),sk=n(c8,"A",{href:!0});var VIr=s(sk);lQe=r(VIr,"AlbertTokenizerFast"),VIr.forEach(t),iQe=r(c8," (ALBERT model)"),c8.forEach(t),dQe=i(w),Wn=n(w,"LI",{});var f8=s(Wn);HK=n(f8,"STRONG",{});var XIr=s(HK);cQe=r(XIr,"bart"),XIr.forEach(t),fQe=r(f8," \u2014 "),lk=n(f8,"A",{href:!0});var zIr=s(lk);mQe=r(zIr,"BartTokenizer"),zIr.forEach(t),gQe=r(f8," or "),ik=n(f8,"A",{href:!0});var QIr=s(ik);hQe=r(QIr,"BartTokenizerFast"),QIr.forEach(t),pQe=r(f8," (BART model)"),f8.forEach(t),_Qe=i(w),Hn=n(w,"LI",{});var m8=s(Hn);UK=n(m8,"STRONG",{});var WIr=s(UK);uQe=r(WIr,"barthez"),WIr.forEach(t),bQe=r(m8," \u2014 "),dk=n(m8,"A",{href:!0});var HIr=s(dk);FQe=r(HIr,"BarthezTokenizer"),HIr.forEach(t),vQe=r(m8," or "),ck=n(m8,"A",{href:!0});var UIr=s(ck);TQe=r(UIr,"BarthezTokenizerFast"),UIr.forEach(t),MQe=r(m8," (BARThez model)"),m8.forEach(t),EQe=i(w),qg=n(w,"LI",{});var r7e=s(qg);JK=n(r7e,"STRONG",{});var JIr=s(JK);CQe=r(JIr,"bartpho"),JIr.forEach(t),wQe=r(r7e," \u2014 "),fk=n(r7e,"A",{href:!0});var YIr=s(fk);AQe=r(YIr,"BartphoTokenizer"),YIr.forEach(t),yQe=r(r7e," (BARTpho model)"),r7e.forEach(t),LQe=i(w),Un=n(w,"LI",{});var g8=s(Un);YK=n(g8,"STRONG",{});var KIr=s(YK);xQe=r(KIr,"bert"),KIr.forEach(t),kQe=r(g8," \u2014 "),mk=n(g8,"A",{href:!0});var ZIr=s(mk);SQe=r(ZIr,"BertTokenizer"),ZIr.forEach(t),RQe=r(g8," or "),gk=n(g8,"A",{href:!0});var eqr=s(gk);BQe=r(eqr,"BertTokenizerFast"),eqr.forEach(t),PQe=r(g8," (BERT model)"),g8.forEach(t),$Qe=i(w),Ng=n(w,"LI",{});var t7e=s(Ng);KK=n(t7e,"STRONG",{});var oqr=s(KK);IQe=r(oqr,"bert-generation"),oqr.forEach(t),qQe=r(t7e," \u2014 "),hk=n(t7e,"A",{href:!0});var rqr=s(hk);NQe=r(rqr,"BertGenerationTokenizer"),rqr.forEach(t),jQe=r(t7e," (Bert Generation model)"),t7e.forEach(t),DQe=i(w),jg=n(w,"LI",{});var a7e=s(jg);ZK=n(a7e,"STRONG",{});var tqr=s(ZK);GQe=r(tqr,"bert-japanese"),tqr.forEach(t),OQe=r(a7e," \u2014 "),pk=n(a7e,"A",{href:!0});var aqr=s(pk);VQe=r(aqr,"BertJapaneseTokenizer"),aqr.forEach(t),XQe=r(a7e," (BertJapanese model)"),a7e.forEach(t),zQe=i(w),Dg=n(w,"LI",{});var n7e=s(Dg);eZ=n(n7e,"STRONG",{});var nqr=s(eZ);QQe=r(nqr,"bertweet"),nqr.forEach(t),WQe=r(n7e," \u2014 "),_k=n(n7e,"A",{href:!0});var sqr=s(_k);HQe=r(sqr,"BertweetTokenizer"),sqr.forEach(t),UQe=r(n7e," (Bertweet model)"),n7e.forEach(t),JQe=i(w),Jn=n(w,"LI",{});var h8=s(Jn);oZ=n(h8,"STRONG",{});var lqr=s(oZ);YQe=r(lqr,"big_bird"),lqr.forEach(t),KQe=r(h8," \u2014 "),uk=n(h8,"A",{href:!0});var iqr=s(uk);ZQe=r(iqr,"BigBirdTokenizer"),iqr.forEach(t),eWe=r(h8," or "),bk=n(h8,"A",{href:!0});var dqr=s(bk);oWe=r(dqr,"BigBirdTokenizerFast"),dqr.forEach(t),rWe=r(h8," (BigBird model)"),h8.forEach(t),tWe=i(w),Yn=n(w,"LI",{});var p8=s(Yn);rZ=n(p8,"STRONG",{});var cqr=s(rZ);aWe=r(cqr,"bigbird_pegasus"),cqr.forEach(t),nWe=r(p8," \u2014 "),Fk=n(p8,"A",{href:!0});var fqr=s(Fk);sWe=r(fqr,"PegasusTokenizer"),fqr.forEach(t),lWe=r(p8," or "),vk=n(p8,"A",{href:!0});var mqr=s(vk);iWe=r(mqr,"PegasusTokenizerFast"),mqr.forEach(t),dWe=r(p8," (BigBirdPegasus model)"),p8.forEach(t),cWe=i(w),Kn=n(w,"LI",{});var _8=s(Kn);tZ=n(_8,"STRONG",{});var gqr=s(tZ);fWe=r(gqr,"blenderbot"),gqr.forEach(t),mWe=r(_8," \u2014 "),Tk=n(_8,"A",{href:!0});var hqr=s(Tk);gWe=r(hqr,"BlenderbotTokenizer"),hqr.forEach(t),hWe=r(_8," or "),Mk=n(_8,"A",{href:!0});var pqr=s(Mk);pWe=r(pqr,"BlenderbotTokenizerFast"),pqr.forEach(t),_We=r(_8," (Blenderbot model)"),_8.forEach(t),uWe=i(w),Gg=n(w,"LI",{});var s7e=s(Gg);aZ=n(s7e,"STRONG",{});var _qr=s(aZ);bWe=r(_qr,"blenderbot-small"),_qr.forEach(t),FWe=r(s7e," \u2014 "),Ek=n(s7e,"A",{href:!0});var uqr=s(Ek);vWe=r(uqr,"BlenderbotSmallTokenizer"),uqr.forEach(t),TWe=r(s7e," (BlenderbotSmall model)"),s7e.forEach(t),MWe=i(w),Og=n(w,"LI",{});var l7e=s(Og);nZ=n(l7e,"STRONG",{});var bqr=s(nZ);EWe=r(bqr,"byt5"),bqr.forEach(t),CWe=r(l7e," \u2014 "),Ck=n(l7e,"A",{href:!0});var Fqr=s(Ck);wWe=r(Fqr,"ByT5Tokenizer"),Fqr.forEach(t),AWe=r(l7e," (ByT5 model)"),l7e.forEach(t),yWe=i(w),Zn=n(w,"LI",{});var u8=s(Zn);sZ=n(u8,"STRONG",{});var vqr=s(sZ);LWe=r(vqr,"camembert"),vqr.forEach(t),xWe=r(u8," \u2014 "),wk=n(u8,"A",{href:!0});var Tqr=s(wk);kWe=r(Tqr,"CamembertTokenizer"),Tqr.forEach(t),SWe=r(u8," or "),Ak=n(u8,"A",{href:!0});var Mqr=s(Ak);RWe=r(Mqr,"CamembertTokenizerFast"),Mqr.forEach(t),BWe=r(u8," (CamemBERT model)"),u8.forEach(t),PWe=i(w),Vg=n(w,"LI",{});var i7e=s(Vg);lZ=n(i7e,"STRONG",{});var Eqr=s(lZ);$We=r(Eqr,"canine"),Eqr.forEach(t),IWe=r(i7e," \u2014 "),yk=n(i7e,"A",{href:!0});var Cqr=s(yk);qWe=r(Cqr,"CanineTokenizer"),Cqr.forEach(t),NWe=r(i7e," (Canine model)"),i7e.forEach(t),jWe=i(w),es=n(w,"LI",{});var b8=s(es);iZ=n(b8,"STRONG",{});var wqr=s(iZ);DWe=r(wqr,"clip"),wqr.forEach(t),GWe=r(b8," \u2014 "),Lk=n(b8,"A",{href:!0});var Aqr=s(Lk);OWe=r(Aqr,"CLIPTokenizer"),Aqr.forEach(t),VWe=r(b8," or "),xk=n(b8,"A",{href:!0});var yqr=s(xk);XWe=r(yqr,"CLIPTokenizerFast"),yqr.forEach(t),zWe=r(b8," (CLIP model)"),b8.forEach(t),QWe=i(w),os=n(w,"LI",{});var F8=s(os);dZ=n(F8,"STRONG",{});var Lqr=s(dZ);WWe=r(Lqr,"convbert"),Lqr.forEach(t),HWe=r(F8," \u2014 "),kk=n(F8,"A",{href:!0});var xqr=s(kk);UWe=r(xqr,"ConvBertTokenizer"),xqr.forEach(t),JWe=r(F8," or "),Sk=n(F8,"A",{href:!0});var kqr=s(Sk);YWe=r(kqr,"ConvBertTokenizerFast"),kqr.forEach(t),KWe=r(F8," (ConvBERT model)"),F8.forEach(t),ZWe=i(w),rs=n(w,"LI",{});var v8=s(rs);cZ=n(v8,"STRONG",{});var Sqr=s(cZ);eHe=r(Sqr,"cpm"),Sqr.forEach(t),oHe=r(v8," \u2014 "),Rk=n(v8,"A",{href:!0});var Rqr=s(Rk);rHe=r(Rqr,"CpmTokenizer"),Rqr.forEach(t),tHe=r(v8," or "),fZ=n(v8,"CODE",{});var Bqr=s(fZ);aHe=r(Bqr,"CpmTokenizerFast"),Bqr.forEach(t),nHe=r(v8," (CPM model)"),v8.forEach(t),sHe=i(w),Xg=n(w,"LI",{});var d7e=s(Xg);mZ=n(d7e,"STRONG",{});var Pqr=s(mZ);lHe=r(Pqr,"ctrl"),Pqr.forEach(t),iHe=r(d7e," \u2014 "),Bk=n(d7e,"A",{href:!0});var $qr=s(Bk);dHe=r($qr,"CTRLTokenizer"),$qr.forEach(t),cHe=r(d7e," (CTRL model)"),d7e.forEach(t),fHe=i(w),ts=n(w,"LI",{});var T8=s(ts);gZ=n(T8,"STRONG",{});var Iqr=s(gZ);mHe=r(Iqr,"deberta"),Iqr.forEach(t),gHe=r(T8," \u2014 "),Pk=n(T8,"A",{href:!0});var qqr=s(Pk);hHe=r(qqr,"DebertaTokenizer"),qqr.forEach(t),pHe=r(T8," or "),$k=n(T8,"A",{href:!0});var Nqr=s($k);_He=r(Nqr,"DebertaTokenizerFast"),Nqr.forEach(t),uHe=r(T8," (DeBERTa model)"),T8.forEach(t),bHe=i(w),zg=n(w,"LI",{});var c7e=s(zg);hZ=n(c7e,"STRONG",{});var jqr=s(hZ);FHe=r(jqr,"deberta-v2"),jqr.forEach(t),vHe=r(c7e," \u2014 "),Ik=n(c7e,"A",{href:!0});var Dqr=s(Ik);THe=r(Dqr,"DebertaV2Tokenizer"),Dqr.forEach(t),MHe=r(c7e," (DeBERTa-v2 model)"),c7e.forEach(t),EHe=i(w),as=n(w,"LI",{});var M8=s(as);pZ=n(M8,"STRONG",{});var Gqr=s(pZ);CHe=r(Gqr,"distilbert"),Gqr.forEach(t),wHe=r(M8," \u2014 "),qk=n(M8,"A",{href:!0});var Oqr=s(qk);AHe=r(Oqr,"DistilBertTokenizer"),Oqr.forEach(t),yHe=r(M8," or "),Nk=n(M8,"A",{href:!0});var Vqr=s(Nk);LHe=r(Vqr,"DistilBertTokenizerFast"),Vqr.forEach(t),xHe=r(M8," (DistilBERT model)"),M8.forEach(t),kHe=i(w),ns=n(w,"LI",{});var E8=s(ns);_Z=n(E8,"STRONG",{});var Xqr=s(_Z);SHe=r(Xqr,"dpr"),Xqr.forEach(t),RHe=r(E8," \u2014 "),jk=n(E8,"A",{href:!0});var zqr=s(jk);BHe=r(zqr,"DPRQuestionEncoderTokenizer"),zqr.forEach(t),PHe=r(E8," or "),Dk=n(E8,"A",{href:!0});var Qqr=s(Dk);$He=r(Qqr,"DPRQuestionEncoderTokenizerFast"),Qqr.forEach(t),IHe=r(E8," (DPR model)"),E8.forEach(t),qHe=i(w),ss=n(w,"LI",{});var C8=s(ss);uZ=n(C8,"STRONG",{});var Wqr=s(uZ);NHe=r(Wqr,"electra"),Wqr.forEach(t),jHe=r(C8," \u2014 "),Gk=n(C8,"A",{href:!0});var Hqr=s(Gk);DHe=r(Hqr,"ElectraTokenizer"),Hqr.forEach(t),GHe=r(C8," or "),Ok=n(C8,"A",{href:!0});var Uqr=s(Ok);OHe=r(Uqr,"ElectraTokenizerFast"),Uqr.forEach(t),VHe=r(C8," (ELECTRA model)"),C8.forEach(t),XHe=i(w),Qg=n(w,"LI",{});var f7e=s(Qg);bZ=n(f7e,"STRONG",{});var Jqr=s(bZ);zHe=r(Jqr,"flaubert"),Jqr.forEach(t),QHe=r(f7e," \u2014 "),Vk=n(f7e,"A",{href:!0});var Yqr=s(Vk);WHe=r(Yqr,"FlaubertTokenizer"),Yqr.forEach(t),HHe=r(f7e," (FlauBERT model)"),f7e.forEach(t),UHe=i(w),ls=n(w,"LI",{});var w8=s(ls);FZ=n(w8,"STRONG",{});var Kqr=s(FZ);JHe=r(Kqr,"fnet"),Kqr.forEach(t),YHe=r(w8," \u2014 "),Xk=n(w8,"A",{href:!0});var Zqr=s(Xk);KHe=r(Zqr,"FNetTokenizer"),Zqr.forEach(t),ZHe=r(w8," or "),zk=n(w8,"A",{href:!0});var eNr=s(zk);eUe=r(eNr,"FNetTokenizerFast"),eNr.forEach(t),oUe=r(w8," (FNet model)"),w8.forEach(t),rUe=i(w),Wg=n(w,"LI",{});var m7e=s(Wg);vZ=n(m7e,"STRONG",{});var oNr=s(vZ);tUe=r(oNr,"fsmt"),oNr.forEach(t),aUe=r(m7e," \u2014 "),Qk=n(m7e,"A",{href:!0});var rNr=s(Qk);nUe=r(rNr,"FSMTTokenizer"),rNr.forEach(t),sUe=r(m7e," (FairSeq Machine-Translation model)"),m7e.forEach(t),lUe=i(w),is=n(w,"LI",{});var A8=s(is);TZ=n(A8,"STRONG",{});var tNr=s(TZ);iUe=r(tNr,"funnel"),tNr.forEach(t),dUe=r(A8," \u2014 "),Wk=n(A8,"A",{href:!0});var aNr=s(Wk);cUe=r(aNr,"FunnelTokenizer"),aNr.forEach(t),fUe=r(A8," or "),Hk=n(A8,"A",{href:!0});var nNr=s(Hk);mUe=r(nNr,"FunnelTokenizerFast"),nNr.forEach(t),gUe=r(A8," (Funnel Transformer model)"),A8.forEach(t),hUe=i(w),ds=n(w,"LI",{});var y8=s(ds);MZ=n(y8,"STRONG",{});var sNr=s(MZ);pUe=r(sNr,"gpt2"),sNr.forEach(t),_Ue=r(y8," \u2014 "),Uk=n(y8,"A",{href:!0});var lNr=s(Uk);uUe=r(lNr,"GPT2Tokenizer"),lNr.forEach(t),bUe=r(y8," or "),Jk=n(y8,"A",{href:!0});var iNr=s(Jk);FUe=r(iNr,"GPT2TokenizerFast"),iNr.forEach(t),vUe=r(y8," (OpenAI GPT-2 model)"),y8.forEach(t),TUe=i(w),cs=n(w,"LI",{});var L8=s(cs);EZ=n(L8,"STRONG",{});var dNr=s(EZ);MUe=r(dNr,"gpt_neo"),dNr.forEach(t),EUe=r(L8," \u2014 "),Yk=n(L8,"A",{href:!0});var cNr=s(Yk);CUe=r(cNr,"GPT2Tokenizer"),cNr.forEach(t),wUe=r(L8," or "),Kk=n(L8,"A",{href:!0});var fNr=s(Kk);AUe=r(fNr,"GPT2TokenizerFast"),fNr.forEach(t),yUe=r(L8," (GPT Neo model)"),L8.forEach(t),LUe=i(w),fs=n(w,"LI",{});var x8=s(fs);CZ=n(x8,"STRONG",{});var mNr=s(CZ);xUe=r(mNr,"herbert"),mNr.forEach(t),kUe=r(x8," \u2014 "),Zk=n(x8,"A",{href:!0});var gNr=s(Zk);SUe=r(gNr,"HerbertTokenizer"),gNr.forEach(t),RUe=r(x8," or "),eS=n(x8,"A",{href:!0});var hNr=s(eS);BUe=r(hNr,"HerbertTokenizerFast"),hNr.forEach(t),PUe=r(x8," (HerBERT model)"),x8.forEach(t),$Ue=i(w),Hg=n(w,"LI",{});var g7e=s(Hg);wZ=n(g7e,"STRONG",{});var pNr=s(wZ);IUe=r(pNr,"hubert"),pNr.forEach(t),qUe=r(g7e," \u2014 "),oS=n(g7e,"A",{href:!0});var _Nr=s(oS);NUe=r(_Nr,"Wav2Vec2CTCTokenizer"),_Nr.forEach(t),jUe=r(g7e," (Hubert model)"),g7e.forEach(t),DUe=i(w),ms=n(w,"LI",{});var k8=s(ms);AZ=n(k8,"STRONG",{});var uNr=s(AZ);GUe=r(uNr,"ibert"),uNr.forEach(t),OUe=r(k8," \u2014 "),rS=n(k8,"A",{href:!0});var bNr=s(rS);VUe=r(bNr,"RobertaTokenizer"),bNr.forEach(t),XUe=r(k8," or "),tS=n(k8,"A",{href:!0});var FNr=s(tS);zUe=r(FNr,"RobertaTokenizerFast"),FNr.forEach(t),QUe=r(k8," (I-BERT model)"),k8.forEach(t),WUe=i(w),gs=n(w,"LI",{});var S8=s(gs);yZ=n(S8,"STRONG",{});var vNr=s(yZ);HUe=r(vNr,"layoutlm"),vNr.forEach(t),UUe=r(S8," \u2014 "),aS=n(S8,"A",{href:!0});var TNr=s(aS);JUe=r(TNr,"LayoutLMTokenizer"),TNr.forEach(t),YUe=r(S8," or "),nS=n(S8,"A",{href:!0});var MNr=s(nS);KUe=r(MNr,"LayoutLMTokenizerFast"),MNr.forEach(t),ZUe=r(S8," (LayoutLM model)"),S8.forEach(t),eJe=i(w),hs=n(w,"LI",{});var R8=s(hs);LZ=n(R8,"STRONG",{});var ENr=s(LZ);oJe=r(ENr,"layoutlmv2"),ENr.forEach(t),rJe=r(R8," \u2014 "),sS=n(R8,"A",{href:!0});var CNr=s(sS);tJe=r(CNr,"LayoutLMv2Tokenizer"),CNr.forEach(t),aJe=r(R8," or "),lS=n(R8,"A",{href:!0});var wNr=s(lS);nJe=r(wNr,"LayoutLMv2TokenizerFast"),wNr.forEach(t),sJe=r(R8," (LayoutLMv2 model)"),R8.forEach(t),lJe=i(w),ps=n(w,"LI",{});var B8=s(ps);xZ=n(B8,"STRONG",{});var ANr=s(xZ);iJe=r(ANr,"layoutxlm"),ANr.forEach(t),dJe=r(B8," \u2014 "),iS=n(B8,"A",{href:!0});var yNr=s(iS);cJe=r(yNr,"LayoutXLMTokenizer"),yNr.forEach(t),fJe=r(B8," or "),dS=n(B8,"A",{href:!0});var LNr=s(dS);mJe=r(LNr,"LayoutXLMTokenizerFast"),LNr.forEach(t),gJe=r(B8," (LayoutXLM model)"),B8.forEach(t),hJe=i(w),_s=n(w,"LI",{});var P8=s(_s);kZ=n(P8,"STRONG",{});var xNr=s(kZ);pJe=r(xNr,"led"),xNr.forEach(t),_Je=r(P8," \u2014 "),cS=n(P8,"A",{href:!0});var kNr=s(cS);uJe=r(kNr,"LEDTokenizer"),kNr.forEach(t),bJe=r(P8," or "),fS=n(P8,"A",{href:!0});var SNr=s(fS);FJe=r(SNr,"LEDTokenizerFast"),SNr.forEach(t),vJe=r(P8," (LED model)"),P8.forEach(t),TJe=i(w),us=n(w,"LI",{});var $8=s(us);SZ=n($8,"STRONG",{});var RNr=s(SZ);MJe=r(RNr,"longformer"),RNr.forEach(t),EJe=r($8," \u2014 "),mS=n($8,"A",{href:!0});var BNr=s(mS);CJe=r(BNr,"LongformerTokenizer"),BNr.forEach(t),wJe=r($8," or "),gS=n($8,"A",{href:!0});var PNr=s(gS);AJe=r(PNr,"LongformerTokenizerFast"),PNr.forEach(t),yJe=r($8," (Longformer model)"),$8.forEach(t),LJe=i(w),Ug=n(w,"LI",{});var h7e=s(Ug);RZ=n(h7e,"STRONG",{});var $Nr=s(RZ);xJe=r($Nr,"luke"),$Nr.forEach(t),kJe=r(h7e," \u2014 "),hS=n(h7e,"A",{href:!0});var INr=s(hS);SJe=r(INr,"LukeTokenizer"),INr.forEach(t),RJe=r(h7e," (LUKE model)"),h7e.forEach(t),BJe=i(w),bs=n(w,"LI",{});var I8=s(bs);BZ=n(I8,"STRONG",{});var qNr=s(BZ);PJe=r(qNr,"lxmert"),qNr.forEach(t),$Je=r(I8," \u2014 "),pS=n(I8,"A",{href:!0});var NNr=s(pS);IJe=r(NNr,"LxmertTokenizer"),NNr.forEach(t),qJe=r(I8," or "),_S=n(I8,"A",{href:!0});var jNr=s(_S);NJe=r(jNr,"LxmertTokenizerFast"),jNr.forEach(t),jJe=r(I8," (LXMERT model)"),I8.forEach(t),DJe=i(w),Jg=n(w,"LI",{});var p7e=s(Jg);PZ=n(p7e,"STRONG",{});var DNr=s(PZ);GJe=r(DNr,"m2m_100"),DNr.forEach(t),OJe=r(p7e," \u2014 "),uS=n(p7e,"A",{href:!0});var GNr=s(uS);VJe=r(GNr,"M2M100Tokenizer"),GNr.forEach(t),XJe=r(p7e," (M2M100 model)"),p7e.forEach(t),zJe=i(w),Yg=n(w,"LI",{});var _7e=s(Yg);$Z=n(_7e,"STRONG",{});var ONr=s($Z);QJe=r(ONr,"marian"),ONr.forEach(t),WJe=r(_7e," \u2014 "),bS=n(_7e,"A",{href:!0});var VNr=s(bS);HJe=r(VNr,"MarianTokenizer"),VNr.forEach(t),UJe=r(_7e," (Marian model)"),_7e.forEach(t),JJe=i(w),Fs=n(w,"LI",{});var q8=s(Fs);IZ=n(q8,"STRONG",{});var XNr=s(IZ);YJe=r(XNr,"mbart"),XNr.forEach(t),KJe=r(q8," \u2014 "),FS=n(q8,"A",{href:!0});var zNr=s(FS);ZJe=r(zNr,"MBartTokenizer"),zNr.forEach(t),eYe=r(q8," or "),vS=n(q8,"A",{href:!0});var QNr=s(vS);oYe=r(QNr,"MBartTokenizerFast"),QNr.forEach(t),rYe=r(q8," (mBART model)"),q8.forEach(t),tYe=i(w),vs=n(w,"LI",{});var N8=s(vs);qZ=n(N8,"STRONG",{});var WNr=s(qZ);aYe=r(WNr,"mbart50"),WNr.forEach(t),nYe=r(N8," \u2014 "),TS=n(N8,"A",{href:!0});var HNr=s(TS);sYe=r(HNr,"MBart50Tokenizer"),HNr.forEach(t),lYe=r(N8," or "),MS=n(N8,"A",{href:!0});var UNr=s(MS);iYe=r(UNr,"MBart50TokenizerFast"),UNr.forEach(t),dYe=r(N8," (mBART-50 model)"),N8.forEach(t),cYe=i(w),Kg=n(w,"LI",{});var u7e=s(Kg);NZ=n(u7e,"STRONG",{});var JNr=s(NZ);fYe=r(JNr,"mluke"),JNr.forEach(t),mYe=r(u7e," \u2014 "),ES=n(u7e,"A",{href:!0});var YNr=s(ES);gYe=r(YNr,"MLukeTokenizer"),YNr.forEach(t),hYe=r(u7e," (mLUKE model)"),u7e.forEach(t),pYe=i(w),Ts=n(w,"LI",{});var j8=s(Ts);jZ=n(j8,"STRONG",{});var KNr=s(jZ);_Ye=r(KNr,"mobilebert"),KNr.forEach(t),uYe=r(j8," \u2014 "),CS=n(j8,"A",{href:!0});var ZNr=s(CS);bYe=r(ZNr,"MobileBertTokenizer"),ZNr.forEach(t),FYe=r(j8," or "),wS=n(j8,"A",{href:!0});var ejr=s(wS);vYe=r(ejr,"MobileBertTokenizerFast"),ejr.forEach(t),TYe=r(j8," (MobileBERT model)"),j8.forEach(t),MYe=i(w),Ms=n(w,"LI",{});var D8=s(Ms);DZ=n(D8,"STRONG",{});var ojr=s(DZ);EYe=r(ojr,"mpnet"),ojr.forEach(t),CYe=r(D8," \u2014 "),AS=n(D8,"A",{href:!0});var rjr=s(AS);wYe=r(rjr,"MPNetTokenizer"),rjr.forEach(t),AYe=r(D8," or "),yS=n(D8,"A",{href:!0});var tjr=s(yS);yYe=r(tjr,"MPNetTokenizerFast"),tjr.forEach(t),LYe=r(D8," (MPNet model)"),D8.forEach(t),xYe=i(w),Es=n(w,"LI",{});var G8=s(Es);GZ=n(G8,"STRONG",{});var ajr=s(GZ);kYe=r(ajr,"mt5"),ajr.forEach(t),SYe=r(G8," \u2014 "),LS=n(G8,"A",{href:!0});var njr=s(LS);RYe=r(njr,"MT5Tokenizer"),njr.forEach(t),BYe=r(G8," or "),xS=n(G8,"A",{href:!0});var sjr=s(xS);PYe=r(sjr,"MT5TokenizerFast"),sjr.forEach(t),$Ye=r(G8," (mT5 model)"),G8.forEach(t),IYe=i(w),Cs=n(w,"LI",{});var O8=s(Cs);OZ=n(O8,"STRONG",{});var ljr=s(OZ);qYe=r(ljr,"openai-gpt"),ljr.forEach(t),NYe=r(O8," \u2014 "),kS=n(O8,"A",{href:!0});var ijr=s(kS);jYe=r(ijr,"OpenAIGPTTokenizer"),ijr.forEach(t),DYe=r(O8," or "),SS=n(O8,"A",{href:!0});var djr=s(SS);GYe=r(djr,"OpenAIGPTTokenizerFast"),djr.forEach(t),OYe=r(O8," (OpenAI GPT model)"),O8.forEach(t),VYe=i(w),ws=n(w,"LI",{});var V8=s(ws);VZ=n(V8,"STRONG",{});var cjr=s(VZ);XYe=r(cjr,"pegasus"),cjr.forEach(t),zYe=r(V8," \u2014 "),RS=n(V8,"A",{href:!0});var fjr=s(RS);QYe=r(fjr,"PegasusTokenizer"),fjr.forEach(t),WYe=r(V8," or "),BS=n(V8,"A",{href:!0});var mjr=s(BS);HYe=r(mjr,"PegasusTokenizerFast"),mjr.forEach(t),UYe=r(V8," (Pegasus model)"),V8.forEach(t),JYe=i(w),Zg=n(w,"LI",{});var b7e=s(Zg);XZ=n(b7e,"STRONG",{});var gjr=s(XZ);YYe=r(gjr,"perceiver"),gjr.forEach(t),KYe=r(b7e," \u2014 "),PS=n(b7e,"A",{href:!0});var hjr=s(PS);ZYe=r(hjr,"PerceiverTokenizer"),hjr.forEach(t),eKe=r(b7e," (Perceiver model)"),b7e.forEach(t),oKe=i(w),eh=n(w,"LI",{});var F7e=s(eh);zZ=n(F7e,"STRONG",{});var pjr=s(zZ);rKe=r(pjr,"phobert"),pjr.forEach(t),tKe=r(F7e," \u2014 "),$S=n(F7e,"A",{href:!0});var _jr=s($S);aKe=r(_jr,"PhobertTokenizer"),_jr.forEach(t),nKe=r(F7e," (PhoBERT model)"),F7e.forEach(t),sKe=i(w),oh=n(w,"LI",{});var v7e=s(oh);QZ=n(v7e,"STRONG",{});var ujr=s(QZ);lKe=r(ujr,"plbart"),ujr.forEach(t),iKe=r(v7e," \u2014 "),IS=n(v7e,"A",{href:!0});var bjr=s(IS);dKe=r(bjr,"PLBartTokenizer"),bjr.forEach(t),cKe=r(v7e," (PLBart model)"),v7e.forEach(t),fKe=i(w),rh=n(w,"LI",{});var T7e=s(rh);WZ=n(T7e,"STRONG",{});var Fjr=s(WZ);mKe=r(Fjr,"prophetnet"),Fjr.forEach(t),gKe=r(T7e," \u2014 "),qS=n(T7e,"A",{href:!0});var vjr=s(qS);hKe=r(vjr,"ProphetNetTokenizer"),vjr.forEach(t),pKe=r(T7e," (ProphetNet model)"),T7e.forEach(t),_Ke=i(w),As=n(w,"LI",{});var X8=s(As);HZ=n(X8,"STRONG",{});var Tjr=s(HZ);uKe=r(Tjr,"qdqbert"),Tjr.forEach(t),bKe=r(X8," \u2014 "),NS=n(X8,"A",{href:!0});var Mjr=s(NS);FKe=r(Mjr,"BertTokenizer"),Mjr.forEach(t),vKe=r(X8," or "),jS=n(X8,"A",{href:!0});var Ejr=s(jS);TKe=r(Ejr,"BertTokenizerFast"),Ejr.forEach(t),MKe=r(X8," (QDQBert model)"),X8.forEach(t),EKe=i(w),th=n(w,"LI",{});var M7e=s(th);UZ=n(M7e,"STRONG",{});var Cjr=s(UZ);CKe=r(Cjr,"rag"),Cjr.forEach(t),wKe=r(M7e," \u2014 "),DS=n(M7e,"A",{href:!0});var wjr=s(DS);AKe=r(wjr,"RagTokenizer"),wjr.forEach(t),yKe=r(M7e," (RAG model)"),M7e.forEach(t),LKe=i(w),ys=n(w,"LI",{});var z8=s(ys);JZ=n(z8,"STRONG",{});var Ajr=s(JZ);xKe=r(Ajr,"realm"),Ajr.forEach(t),kKe=r(z8," \u2014 "),GS=n(z8,"A",{href:!0});var yjr=s(GS);SKe=r(yjr,"RealmTokenizer"),yjr.forEach(t),RKe=r(z8," or "),OS=n(z8,"A",{href:!0});var Ljr=s(OS);BKe=r(Ljr,"RealmTokenizerFast"),Ljr.forEach(t),PKe=r(z8," (Realm model)"),z8.forEach(t),$Ke=i(w),Ls=n(w,"LI",{});var Q8=s(Ls);YZ=n(Q8,"STRONG",{});var xjr=s(YZ);IKe=r(xjr,"reformer"),xjr.forEach(t),qKe=r(Q8," \u2014 "),VS=n(Q8,"A",{href:!0});var kjr=s(VS);NKe=r(kjr,"ReformerTokenizer"),kjr.forEach(t),jKe=r(Q8," or "),XS=n(Q8,"A",{href:!0});var Sjr=s(XS);DKe=r(Sjr,"ReformerTokenizerFast"),Sjr.forEach(t),GKe=r(Q8," (Reformer model)"),Q8.forEach(t),OKe=i(w),xs=n(w,"LI",{});var W8=s(xs);KZ=n(W8,"STRONG",{});var Rjr=s(KZ);VKe=r(Rjr,"rembert"),Rjr.forEach(t),XKe=r(W8," \u2014 "),zS=n(W8,"A",{href:!0});var Bjr=s(zS);zKe=r(Bjr,"RemBertTokenizer"),Bjr.forEach(t),QKe=r(W8," or "),QS=n(W8,"A",{href:!0});var Pjr=s(QS);WKe=r(Pjr,"RemBertTokenizerFast"),Pjr.forEach(t),HKe=r(W8," (RemBERT model)"),W8.forEach(t),UKe=i(w),ks=n(w,"LI",{});var H8=s(ks);ZZ=n(H8,"STRONG",{});var $jr=s(ZZ);JKe=r($jr,"retribert"),$jr.forEach(t),YKe=r(H8," \u2014 "),WS=n(H8,"A",{href:!0});var Ijr=s(WS);KKe=r(Ijr,"RetriBertTokenizer"),Ijr.forEach(t),ZKe=r(H8," or "),HS=n(H8,"A",{href:!0});var qjr=s(HS);eZe=r(qjr,"RetriBertTokenizerFast"),qjr.forEach(t),oZe=r(H8," (RetriBERT model)"),H8.forEach(t),rZe=i(w),Ss=n(w,"LI",{});var U8=s(Ss);eee=n(U8,"STRONG",{});var Njr=s(eee);tZe=r(Njr,"roberta"),Njr.forEach(t),aZe=r(U8," \u2014 "),US=n(U8,"A",{href:!0});var jjr=s(US);nZe=r(jjr,"RobertaTokenizer"),jjr.forEach(t),sZe=r(U8," or "),JS=n(U8,"A",{href:!0});var Djr=s(JS);lZe=r(Djr,"RobertaTokenizerFast"),Djr.forEach(t),iZe=r(U8," (RoBERTa model)"),U8.forEach(t),dZe=i(w),Rs=n(w,"LI",{});var J8=s(Rs);oee=n(J8,"STRONG",{});var Gjr=s(oee);cZe=r(Gjr,"roformer"),Gjr.forEach(t),fZe=r(J8," \u2014 "),YS=n(J8,"A",{href:!0});var Ojr=s(YS);mZe=r(Ojr,"RoFormerTokenizer"),Ojr.forEach(t),gZe=r(J8," or "),KS=n(J8,"A",{href:!0});var Vjr=s(KS);hZe=r(Vjr,"RoFormerTokenizerFast"),Vjr.forEach(t),pZe=r(J8," (RoFormer model)"),J8.forEach(t),_Ze=i(w),ah=n(w,"LI",{});var E7e=s(ah);ree=n(E7e,"STRONG",{});var Xjr=s(ree);uZe=r(Xjr,"speech_to_text"),Xjr.forEach(t),bZe=r(E7e," \u2014 "),ZS=n(E7e,"A",{href:!0});var zjr=s(ZS);FZe=r(zjr,"Speech2TextTokenizer"),zjr.forEach(t),vZe=r(E7e," (Speech2Text model)"),E7e.forEach(t),TZe=i(w),nh=n(w,"LI",{});var C7e=s(nh);tee=n(C7e,"STRONG",{});var Qjr=s(tee);MZe=r(Qjr,"speech_to_text_2"),Qjr.forEach(t),EZe=r(C7e," \u2014 "),eR=n(C7e,"A",{href:!0});var Wjr=s(eR);CZe=r(Wjr,"Speech2Text2Tokenizer"),Wjr.forEach(t),wZe=r(C7e," (Speech2Text2 model)"),C7e.forEach(t),AZe=i(w),Bs=n(w,"LI",{});var Y8=s(Bs);aee=n(Y8,"STRONG",{});var Hjr=s(aee);yZe=r(Hjr,"splinter"),Hjr.forEach(t),LZe=r(Y8," \u2014 "),oR=n(Y8,"A",{href:!0});var Ujr=s(oR);xZe=r(Ujr,"SplinterTokenizer"),Ujr.forEach(t),kZe=r(Y8," or "),rR=n(Y8,"A",{href:!0});var Jjr=s(rR);SZe=r(Jjr,"SplinterTokenizerFast"),Jjr.forEach(t),RZe=r(Y8," (Splinter model)"),Y8.forEach(t),BZe=i(w),Ps=n(w,"LI",{});var K8=s(Ps);nee=n(K8,"STRONG",{});var Yjr=s(nee);PZe=r(Yjr,"squeezebert"),Yjr.forEach(t),$Ze=r(K8," \u2014 "),tR=n(K8,"A",{href:!0});var Kjr=s(tR);IZe=r(Kjr,"SqueezeBertTokenizer"),Kjr.forEach(t),qZe=r(K8," or "),aR=n(K8,"A",{href:!0});var Zjr=s(aR);NZe=r(Zjr,"SqueezeBertTokenizerFast"),Zjr.forEach(t),jZe=r(K8," (SqueezeBERT model)"),K8.forEach(t),DZe=i(w),$s=n(w,"LI",{});var Z8=s($s);see=n(Z8,"STRONG",{});var eDr=s(see);GZe=r(eDr,"t5"),eDr.forEach(t),OZe=r(Z8," \u2014 "),nR=n(Z8,"A",{href:!0});var oDr=s(nR);VZe=r(oDr,"T5Tokenizer"),oDr.forEach(t),XZe=r(Z8," or "),sR=n(Z8,"A",{href:!0});var rDr=s(sR);zZe=r(rDr,"T5TokenizerFast"),rDr.forEach(t),QZe=r(Z8," (T5 model)"),Z8.forEach(t),WZe=i(w),sh=n(w,"LI",{});var w7e=s(sh);lee=n(w7e,"STRONG",{});var tDr=s(lee);HZe=r(tDr,"tapas"),tDr.forEach(t),UZe=r(w7e," \u2014 "),lR=n(w7e,"A",{href:!0});var aDr=s(lR);JZe=r(aDr,"TapasTokenizer"),aDr.forEach(t),YZe=r(w7e," (TAPAS model)"),w7e.forEach(t),KZe=i(w),lh=n(w,"LI",{});var A7e=s(lh);iee=n(A7e,"STRONG",{});var nDr=s(iee);ZZe=r(nDr,"tapex"),nDr.forEach(t),eeo=r(A7e," \u2014 "),iR=n(A7e,"A",{href:!0});var sDr=s(iR);oeo=r(sDr,"TapexTokenizer"),sDr.forEach(t),reo=r(A7e," (TAPEX model)"),A7e.forEach(t),teo=i(w),ih=n(w,"LI",{});var y7e=s(ih);dee=n(y7e,"STRONG",{});var lDr=s(dee);aeo=r(lDr,"transfo-xl"),lDr.forEach(t),neo=r(y7e," \u2014 "),dR=n(y7e,"A",{href:!0});var iDr=s(dR);seo=r(iDr,"TransfoXLTokenizer"),iDr.forEach(t),leo=r(y7e," (Transformer-XL model)"),y7e.forEach(t),ieo=i(w),dh=n(w,"LI",{});var L7e=s(dh);cee=n(L7e,"STRONG",{});var dDr=s(cee);deo=r(dDr,"wav2vec2"),dDr.forEach(t),ceo=r(L7e," \u2014 "),cR=n(L7e,"A",{href:!0});var cDr=s(cR);feo=r(cDr,"Wav2Vec2CTCTokenizer"),cDr.forEach(t),meo=r(L7e," (Wav2Vec2 model)"),L7e.forEach(t),geo=i(w),ch=n(w,"LI",{});var x7e=s(ch);fee=n(x7e,"STRONG",{});var fDr=s(fee);heo=r(fDr,"wav2vec2_phoneme"),fDr.forEach(t),peo=r(x7e," \u2014 "),fR=n(x7e,"A",{href:!0});var mDr=s(fR);_eo=r(mDr,"Wav2Vec2PhonemeCTCTokenizer"),mDr.forEach(t),ueo=r(x7e," (Wav2Vec2Phoneme model)"),x7e.forEach(t),beo=i(w),Is=n(w,"LI",{});var e9=s(Is);mee=n(e9,"STRONG",{});var gDr=s(mee);Feo=r(gDr,"xglm"),gDr.forEach(t),veo=r(e9," \u2014 "),mR=n(e9,"A",{href:!0});var hDr=s(mR);Teo=r(hDr,"XGLMTokenizer"),hDr.forEach(t),Meo=r(e9," or "),gR=n(e9,"A",{href:!0});var pDr=s(gR);Eeo=r(pDr,"XGLMTokenizerFast"),pDr.forEach(t),Ceo=r(e9," (XGLM model)"),e9.forEach(t),weo=i(w),fh=n(w,"LI",{});var k7e=s(fh);gee=n(k7e,"STRONG",{});var _Dr=s(gee);Aeo=r(_Dr,"xlm"),_Dr.forEach(t),yeo=r(k7e," \u2014 "),hR=n(k7e,"A",{href:!0});var uDr=s(hR);Leo=r(uDr,"XLMTokenizer"),uDr.forEach(t),xeo=r(k7e," (XLM model)"),k7e.forEach(t),keo=i(w),mh=n(w,"LI",{});var S7e=s(mh);hee=n(S7e,"STRONG",{});var bDr=s(hee);Seo=r(bDr,"xlm-prophetnet"),bDr.forEach(t),Reo=r(S7e," \u2014 "),pR=n(S7e,"A",{href:!0});var FDr=s(pR);Beo=r(FDr,"XLMProphetNetTokenizer"),FDr.forEach(t),Peo=r(S7e," (XLMProphetNet model)"),S7e.forEach(t),$eo=i(w),qs=n(w,"LI",{});var o9=s(qs);pee=n(o9,"STRONG",{});var vDr=s(pee);Ieo=r(vDr,"xlm-roberta"),vDr.forEach(t),qeo=r(o9," \u2014 "),_R=n(o9,"A",{href:!0});var TDr=s(_R);Neo=r(TDr,"XLMRobertaTokenizer"),TDr.forEach(t),jeo=r(o9," or "),uR=n(o9,"A",{href:!0});var MDr=s(uR);Deo=r(MDr,"XLMRobertaTokenizerFast"),MDr.forEach(t),Geo=r(o9," (XLM-RoBERTa model)"),o9.forEach(t),Oeo=i(w),Ns=n(w,"LI",{});var r9=s(Ns);_ee=n(r9,"STRONG",{});var EDr=s(_ee);Veo=r(EDr,"xlnet"),EDr.forEach(t),Xeo=r(r9," \u2014 "),bR=n(r9,"A",{href:!0});var CDr=s(bR);zeo=r(CDr,"XLNetTokenizer"),CDr.forEach(t),Qeo=r(r9," or "),FR=n(r9,"A",{href:!0});var wDr=s(FR);Weo=r(wDr,"XLNetTokenizerFast"),wDr.forEach(t),Heo=r(r9," (XLNet model)"),r9.forEach(t),w.forEach(t),Ueo=i(ha),uee=n(ha,"P",{});var ADr=s(uee);Jeo=r(ADr,"Examples:"),ADr.forEach(t),Yeo=i(ha),m(RC.$$.fragment,ha),ha.forEach(t),Keo=i(Vs),gh=n(Vs,"DIV",{class:!0});var QBe=s(gh);m(BC.$$.fragment,QBe),Zeo=i(QBe),bee=n(QBe,"P",{});var yDr=s(bee);eoo=r(yDr,"Register a new tokenizer in this mapping."),yDr.forEach(t),QBe.forEach(t),Vs.forEach(t),OSe=i(c),Wi=n(c,"H2",{class:!0});var WBe=s(Wi);hh=n(WBe,"A",{id:!0,class:!0,href:!0});var LDr=s(hh);Fee=n(LDr,"SPAN",{});var xDr=s(Fee);m(PC.$$.fragment,xDr),xDr.forEach(t),LDr.forEach(t),ooo=i(WBe),vee=n(WBe,"SPAN",{});var kDr=s(vee);roo=r(kDr,"AutoFeatureExtractor"),kDr.forEach(t),WBe.forEach(t),VSe=i(c),Ho=n(c,"DIV",{class:!0});var Xs=s(Ho);m($C.$$.fragment,Xs),too=i(Xs),IC=n(Xs,"P",{});var HBe=s(IC);aoo=r(HBe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),vR=n(HBe,"A",{href:!0});var SDr=s(vR);noo=r(SDr,"AutoFeatureExtractor.from_pretrained()"),SDr.forEach(t),soo=r(HBe," class method."),HBe.forEach(t),loo=i(Xs),qC=n(Xs,"P",{});var UBe=s(qC);ioo=r(UBe,"This class cannot be instantiated directly using "),Tee=n(UBe,"CODE",{});var RDr=s(Tee);doo=r(RDr,"__init__()"),RDr.forEach(t),coo=r(UBe," (throws an error)."),UBe.forEach(t),foo=i(Xs),$e=n(Xs,"DIV",{class:!0});var Nt=s($e);m(NC.$$.fragment,Nt),moo=i(Nt),Mee=n(Nt,"P",{});var BDr=s(Mee);goo=r(BDr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),BDr.forEach(t),hoo=i(Nt),Va=n(Nt,"P",{});var uE=s(Va);poo=r(uE,"The feature extractor class to instantiate is selected based on the "),Eee=n(uE,"CODE",{});var PDr=s(Eee);_oo=r(PDr,"model_type"),PDr.forEach(t),uoo=r(uE,` property of the config object
(either passed as an argument or loaded from `),Cee=n(uE,"CODE",{});var $Dr=s(Cee);boo=r($Dr,"pretrained_model_name_or_path"),$Dr.forEach(t),Foo=r(uE,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),wee=n(uE,"CODE",{});var IDr=s(wee);voo=r(IDr,"pretrained_model_name_or_path"),IDr.forEach(t),Too=r(uE,":"),uE.forEach(t),Moo=i(Nt),te=n(Nt,"UL",{});var ne=s(te);ph=n(ne,"LI",{});var R7e=s(ph);Aee=n(R7e,"STRONG",{});var qDr=s(Aee);Eoo=r(qDr,"beit"),qDr.forEach(t),Coo=r(R7e," \u2014 "),TR=n(R7e,"A",{href:!0});var NDr=s(TR);woo=r(NDr,"BeitFeatureExtractor"),NDr.forEach(t),Aoo=r(R7e," (BEiT model)"),R7e.forEach(t),yoo=i(ne),_h=n(ne,"LI",{});var B7e=s(_h);yee=n(B7e,"STRONG",{});var jDr=s(yee);Loo=r(jDr,"clip"),jDr.forEach(t),xoo=r(B7e," \u2014 "),MR=n(B7e,"A",{href:!0});var DDr=s(MR);koo=r(DDr,"CLIPFeatureExtractor"),DDr.forEach(t),Soo=r(B7e," (CLIP model)"),B7e.forEach(t),Roo=i(ne),uh=n(ne,"LI",{});var P7e=s(uh);Lee=n(P7e,"STRONG",{});var GDr=s(Lee);Boo=r(GDr,"convnext"),GDr.forEach(t),Poo=r(P7e," \u2014 "),ER=n(P7e,"A",{href:!0});var ODr=s(ER);$oo=r(ODr,"ConvNextFeatureExtractor"),ODr.forEach(t),Ioo=r(P7e," (ConvNext model)"),P7e.forEach(t),qoo=i(ne),bh=n(ne,"LI",{});var $7e=s(bh);xee=n($7e,"STRONG",{});var VDr=s(xee);Noo=r(VDr,"deit"),VDr.forEach(t),joo=r($7e," \u2014 "),CR=n($7e,"A",{href:!0});var XDr=s(CR);Doo=r(XDr,"DeiTFeatureExtractor"),XDr.forEach(t),Goo=r($7e," (DeiT model)"),$7e.forEach(t),Ooo=i(ne),Fh=n(ne,"LI",{});var I7e=s(Fh);kee=n(I7e,"STRONG",{});var zDr=s(kee);Voo=r(zDr,"detr"),zDr.forEach(t),Xoo=r(I7e," \u2014 "),wR=n(I7e,"A",{href:!0});var QDr=s(wR);zoo=r(QDr,"DetrFeatureExtractor"),QDr.forEach(t),Qoo=r(I7e," (DETR model)"),I7e.forEach(t),Woo=i(ne),vh=n(ne,"LI",{});var q7e=s(vh);See=n(q7e,"STRONG",{});var WDr=s(See);Hoo=r(WDr,"hubert"),WDr.forEach(t),Uoo=r(q7e," \u2014 "),AR=n(q7e,"A",{href:!0});var HDr=s(AR);Joo=r(HDr,"Wav2Vec2FeatureExtractor"),HDr.forEach(t),Yoo=r(q7e," (Hubert model)"),q7e.forEach(t),Koo=i(ne),Th=n(ne,"LI",{});var N7e=s(Th);Ree=n(N7e,"STRONG",{});var UDr=s(Ree);Zoo=r(UDr,"layoutlmv2"),UDr.forEach(t),ero=r(N7e," \u2014 "),yR=n(N7e,"A",{href:!0});var JDr=s(yR);oro=r(JDr,"LayoutLMv2FeatureExtractor"),JDr.forEach(t),rro=r(N7e," (LayoutLMv2 model)"),N7e.forEach(t),tro=i(ne),Mh=n(ne,"LI",{});var j7e=s(Mh);Bee=n(j7e,"STRONG",{});var YDr=s(Bee);aro=r(YDr,"maskformer"),YDr.forEach(t),nro=r(j7e," \u2014 "),LR=n(j7e,"A",{href:!0});var KDr=s(LR);sro=r(KDr,"MaskFormerFeatureExtractor"),KDr.forEach(t),lro=r(j7e," (MaskFormer model)"),j7e.forEach(t),iro=i(ne),Eh=n(ne,"LI",{});var D7e=s(Eh);Pee=n(D7e,"STRONG",{});var ZDr=s(Pee);dro=r(ZDr,"perceiver"),ZDr.forEach(t),cro=r(D7e," \u2014 "),xR=n(D7e,"A",{href:!0});var eGr=s(xR);fro=r(eGr,"PerceiverFeatureExtractor"),eGr.forEach(t),mro=r(D7e," (Perceiver model)"),D7e.forEach(t),gro=i(ne),Ch=n(ne,"LI",{});var G7e=s(Ch);$ee=n(G7e,"STRONG",{});var oGr=s($ee);hro=r(oGr,"poolformer"),oGr.forEach(t),pro=r(G7e," \u2014 "),kR=n(G7e,"A",{href:!0});var rGr=s(kR);_ro=r(rGr,"PoolFormerFeatureExtractor"),rGr.forEach(t),uro=r(G7e," (PoolFormer model)"),G7e.forEach(t),bro=i(ne),wh=n(ne,"LI",{});var O7e=s(wh);Iee=n(O7e,"STRONG",{});var tGr=s(Iee);Fro=r(tGr,"resnet"),tGr.forEach(t),vro=r(O7e," \u2014 "),SR=n(O7e,"A",{href:!0});var aGr=s(SR);Tro=r(aGr,"ConvNextFeatureExtractor"),aGr.forEach(t),Mro=r(O7e," (ResNet model)"),O7e.forEach(t),Ero=i(ne),Ah=n(ne,"LI",{});var V7e=s(Ah);qee=n(V7e,"STRONG",{});var nGr=s(qee);Cro=r(nGr,"segformer"),nGr.forEach(t),wro=r(V7e," \u2014 "),RR=n(V7e,"A",{href:!0});var sGr=s(RR);Aro=r(sGr,"SegformerFeatureExtractor"),sGr.forEach(t),yro=r(V7e," (SegFormer model)"),V7e.forEach(t),Lro=i(ne),yh=n(ne,"LI",{});var X7e=s(yh);Nee=n(X7e,"STRONG",{});var lGr=s(Nee);xro=r(lGr,"speech_to_text"),lGr.forEach(t),kro=r(X7e," \u2014 "),BR=n(X7e,"A",{href:!0});var iGr=s(BR);Sro=r(iGr,"Speech2TextFeatureExtractor"),iGr.forEach(t),Rro=r(X7e," (Speech2Text model)"),X7e.forEach(t),Bro=i(ne),Lh=n(ne,"LI",{});var z7e=s(Lh);jee=n(z7e,"STRONG",{});var dGr=s(jee);Pro=r(dGr,"swin"),dGr.forEach(t),$ro=r(z7e," \u2014 "),PR=n(z7e,"A",{href:!0});var cGr=s(PR);Iro=r(cGr,"ViTFeatureExtractor"),cGr.forEach(t),qro=r(z7e," (Swin model)"),z7e.forEach(t),Nro=i(ne),xh=n(ne,"LI",{});var Q7e=s(xh);Dee=n(Q7e,"STRONG",{});var fGr=s(Dee);jro=r(fGr,"van"),fGr.forEach(t),Dro=r(Q7e," \u2014 "),$R=n(Q7e,"A",{href:!0});var mGr=s($R);Gro=r(mGr,"ConvNextFeatureExtractor"),mGr.forEach(t),Oro=r(Q7e," (VAN model)"),Q7e.forEach(t),Vro=i(ne),kh=n(ne,"LI",{});var W7e=s(kh);Gee=n(W7e,"STRONG",{});var gGr=s(Gee);Xro=r(gGr,"vit"),gGr.forEach(t),zro=r(W7e," \u2014 "),IR=n(W7e,"A",{href:!0});var hGr=s(IR);Qro=r(hGr,"ViTFeatureExtractor"),hGr.forEach(t),Wro=r(W7e," (ViT model)"),W7e.forEach(t),Hro=i(ne),Sh=n(ne,"LI",{});var H7e=s(Sh);Oee=n(H7e,"STRONG",{});var pGr=s(Oee);Uro=r(pGr,"vit_mae"),pGr.forEach(t),Jro=r(H7e," \u2014 "),qR=n(H7e,"A",{href:!0});var _Gr=s(qR);Yro=r(_Gr,"ViTFeatureExtractor"),_Gr.forEach(t),Kro=r(H7e," (ViTMAE model)"),H7e.forEach(t),Zro=i(ne),Rh=n(ne,"LI",{});var U7e=s(Rh);Vee=n(U7e,"STRONG",{});var uGr=s(Vee);eto=r(uGr,"wav2vec2"),uGr.forEach(t),oto=r(U7e," \u2014 "),NR=n(U7e,"A",{href:!0});var bGr=s(NR);rto=r(bGr,"Wav2Vec2FeatureExtractor"),bGr.forEach(t),tto=r(U7e," (Wav2Vec2 model)"),U7e.forEach(t),ne.forEach(t),ato=i(Nt),m(Bh.$$.fragment,Nt),nto=i(Nt),Xee=n(Nt,"P",{});var FGr=s(Xee);sto=r(FGr,"Examples:"),FGr.forEach(t),lto=i(Nt),m(jC.$$.fragment,Nt),Nt.forEach(t),ito=i(Xs),Ph=n(Xs,"DIV",{class:!0});var JBe=s(Ph);m(DC.$$.fragment,JBe),dto=i(JBe),zee=n(JBe,"P",{});var vGr=s(zee);cto=r(vGr,"Register a new feature extractor for this class."),vGr.forEach(t),JBe.forEach(t),Xs.forEach(t),XSe=i(c),Hi=n(c,"H2",{class:!0});var YBe=s(Hi);$h=n(YBe,"A",{id:!0,class:!0,href:!0});var TGr=s($h);Qee=n(TGr,"SPAN",{});var MGr=s(Qee);m(GC.$$.fragment,MGr),MGr.forEach(t),TGr.forEach(t),fto=i(YBe),Wee=n(YBe,"SPAN",{});var EGr=s(Wee);mto=r(EGr,"AutoProcessor"),EGr.forEach(t),YBe.forEach(t),zSe=i(c),Uo=n(c,"DIV",{class:!0});var zs=s(Uo);m(OC.$$.fragment,zs),gto=i(zs),VC=n(zs,"P",{});var KBe=s(VC);hto=r(KBe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),jR=n(KBe,"A",{href:!0});var CGr=s(jR);pto=r(CGr,"AutoProcessor.from_pretrained()"),CGr.forEach(t),_to=r(KBe," class method."),KBe.forEach(t),uto=i(zs),XC=n(zs,"P",{});var ZBe=s(XC);bto=r(ZBe,"This class cannot be instantiated directly using "),Hee=n(ZBe,"CODE",{});var wGr=s(Hee);Fto=r(wGr,"__init__()"),wGr.forEach(t),vto=r(ZBe," (throws an error)."),ZBe.forEach(t),Tto=i(zs),Ie=n(zs,"DIV",{class:!0});var jt=s(Ie);m(zC.$$.fragment,jt),Mto=i(jt),Uee=n(jt,"P",{});var AGr=s(Uee);Eto=r(AGr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),AGr.forEach(t),Cto=i(jt),Ui=n(jt,"P",{});var QH=s(Ui);wto=r(QH,"The processor class to instantiate is selected based on the "),Jee=n(QH,"CODE",{});var yGr=s(Jee);Ato=r(yGr,"model_type"),yGr.forEach(t),yto=r(QH,` property of the config object (either
passed as an argument or loaded from `),Yee=n(QH,"CODE",{});var LGr=s(Yee);Lto=r(LGr,"pretrained_model_name_or_path"),LGr.forEach(t),xto=r(QH," if possible):"),QH.forEach(t),kto=i(jt),ke=n(jt,"UL",{});var jo=s(ke);Ih=n(jo,"LI",{});var J7e=s(Ih);Kee=n(J7e,"STRONG",{});var xGr=s(Kee);Sto=r(xGr,"clip"),xGr.forEach(t),Rto=r(J7e," \u2014 "),DR=n(J7e,"A",{href:!0});var kGr=s(DR);Bto=r(kGr,"CLIPProcessor"),kGr.forEach(t),Pto=r(J7e," (CLIP model)"),J7e.forEach(t),$to=i(jo),qh=n(jo,"LI",{});var Y7e=s(qh);Zee=n(Y7e,"STRONG",{});var SGr=s(Zee);Ito=r(SGr,"layoutlmv2"),SGr.forEach(t),qto=r(Y7e," \u2014 "),GR=n(Y7e,"A",{href:!0});var RGr=s(GR);Nto=r(RGr,"LayoutLMv2Processor"),RGr.forEach(t),jto=r(Y7e," (LayoutLMv2 model)"),Y7e.forEach(t),Dto=i(jo),Nh=n(jo,"LI",{});var K7e=s(Nh);eoe=n(K7e,"STRONG",{});var BGr=s(eoe);Gto=r(BGr,"layoutxlm"),BGr.forEach(t),Oto=r(K7e," \u2014 "),OR=n(K7e,"A",{href:!0});var PGr=s(OR);Vto=r(PGr,"LayoutXLMProcessor"),PGr.forEach(t),Xto=r(K7e," (LayoutXLM model)"),K7e.forEach(t),zto=i(jo),jh=n(jo,"LI",{});var Z7e=s(jh);ooe=n(Z7e,"STRONG",{});var $Gr=s(ooe);Qto=r($Gr,"speech_to_text"),$Gr.forEach(t),Wto=r(Z7e," \u2014 "),VR=n(Z7e,"A",{href:!0});var IGr=s(VR);Hto=r(IGr,"Speech2TextProcessor"),IGr.forEach(t),Uto=r(Z7e," (Speech2Text model)"),Z7e.forEach(t),Jto=i(jo),Dh=n(jo,"LI",{});var eMe=s(Dh);roe=n(eMe,"STRONG",{});var qGr=s(roe);Yto=r(qGr,"speech_to_text_2"),qGr.forEach(t),Kto=r(eMe," \u2014 "),XR=n(eMe,"A",{href:!0});var NGr=s(XR);Zto=r(NGr,"Speech2Text2Processor"),NGr.forEach(t),eao=r(eMe," (Speech2Text2 model)"),eMe.forEach(t),oao=i(jo),Gh=n(jo,"LI",{});var oMe=s(Gh);toe=n(oMe,"STRONG",{});var jGr=s(toe);rao=r(jGr,"trocr"),jGr.forEach(t),tao=r(oMe," \u2014 "),zR=n(oMe,"A",{href:!0});var DGr=s(zR);aao=r(DGr,"TrOCRProcessor"),DGr.forEach(t),nao=r(oMe," (TrOCR model)"),oMe.forEach(t),sao=i(jo),Oh=n(jo,"LI",{});var rMe=s(Oh);aoe=n(rMe,"STRONG",{});var GGr=s(aoe);lao=r(GGr,"vision-text-dual-encoder"),GGr.forEach(t),iao=r(rMe," \u2014 "),QR=n(rMe,"A",{href:!0});var OGr=s(QR);dao=r(OGr,"VisionTextDualEncoderProcessor"),OGr.forEach(t),cao=r(rMe," (VisionTextDualEncoder model)"),rMe.forEach(t),fao=i(jo),Vh=n(jo,"LI",{});var tMe=s(Vh);noe=n(tMe,"STRONG",{});var VGr=s(noe);mao=r(VGr,"wav2vec2"),VGr.forEach(t),gao=r(tMe," \u2014 "),WR=n(tMe,"A",{href:!0});var XGr=s(WR);hao=r(XGr,"Wav2Vec2Processor"),XGr.forEach(t),pao=r(tMe," (Wav2Vec2 model)"),tMe.forEach(t),jo.forEach(t),_ao=i(jt),m(Xh.$$.fragment,jt),uao=i(jt),soe=n(jt,"P",{});var zGr=s(soe);bao=r(zGr,"Examples:"),zGr.forEach(t),Fao=i(jt),m(QC.$$.fragment,jt),jt.forEach(t),vao=i(zs),zh=n(zs,"DIV",{class:!0});var ePe=s(zh);m(WC.$$.fragment,ePe),Tao=i(ePe),loe=n(ePe,"P",{});var QGr=s(loe);Mao=r(QGr,"Register a new processor for this class."),QGr.forEach(t),ePe.forEach(t),zs.forEach(t),QSe=i(c),Ji=n(c,"H2",{class:!0});var oPe=s(Ji);Qh=n(oPe,"A",{id:!0,class:!0,href:!0});var WGr=s(Qh);ioe=n(WGr,"SPAN",{});var HGr=s(ioe);m(HC.$$.fragment,HGr),HGr.forEach(t),WGr.forEach(t),Eao=i(oPe),doe=n(oPe,"SPAN",{});var UGr=s(doe);Cao=r(UGr,"AutoModel"),UGr.forEach(t),oPe.forEach(t),WSe=i(c),Jo=n(c,"DIV",{class:!0});var Qs=s(Jo);m(UC.$$.fragment,Qs),wao=i(Qs),Yi=n(Qs,"P",{});var WH=s(Yi);Aao=r(WH,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),HR=n(WH,"A",{href:!0});var JGr=s(HR);yao=r(JGr,"from_pretrained()"),JGr.forEach(t),Lao=r(WH," class method or the "),UR=n(WH,"A",{href:!0});var YGr=s(UR);xao=r(YGr,"from_config()"),YGr.forEach(t),kao=r(WH,` class
method.`),WH.forEach(t),Sao=i(Qs),JC=n(Qs,"P",{});var rPe=s(JC);Rao=r(rPe,"This class cannot be instantiated directly using "),coe=n(rPe,"CODE",{});var KGr=s(coe);Bao=r(KGr,"__init__()"),KGr.forEach(t),Pao=r(rPe," (throws an error)."),rPe.forEach(t),$ao=i(Qs),Xr=n(Qs,"DIV",{class:!0});var Ws=s(Xr);m(YC.$$.fragment,Ws),Iao=i(Ws),foe=n(Ws,"P",{});var ZGr=s(foe);qao=r(ZGr,"Instantiates one of the base model classes of the library from a configuration."),ZGr.forEach(t),Nao=i(Ws),Ki=n(Ws,"P",{});var HH=s(Ki);jao=r(HH,`Note:
Loading a model from its configuration file does `),moe=n(HH,"STRONG",{});var eOr=s(moe);Dao=r(eOr,"not"),eOr.forEach(t),Gao=r(HH,` load the model weights. It only affects the
model\u2019s configuration. Use `),JR=n(HH,"A",{href:!0});var oOr=s(JR);Oao=r(oOr,"from_pretrained()"),oOr.forEach(t),Vao=r(HH," to load the model weights."),HH.forEach(t),Xao=i(Ws),goe=n(Ws,"P",{});var rOr=s(goe);zao=r(rOr,"Examples:"),rOr.forEach(t),Qao=i(Ws),m(KC.$$.fragment,Ws),Ws.forEach(t),Wao=i(Qs),qe=n(Qs,"DIV",{class:!0});var Dt=s(qe);m(ZC.$$.fragment,Dt),Hao=i(Dt),hoe=n(Dt,"P",{});var tOr=s(hoe);Uao=r(tOr,"Instantiate one of the base model classes of the library from a pretrained model."),tOr.forEach(t),Jao=i(Dt),Xa=n(Dt,"P",{});var bE=s(Xa);Yao=r(bE,"The model class to instantiate is selected based on the "),poe=n(bE,"CODE",{});var aOr=s(poe);Kao=r(aOr,"model_type"),aOr.forEach(t),Zao=r(bE,` property of the config object (either
passed as an argument or loaded from `),_oe=n(bE,"CODE",{});var nOr=s(_oe);eno=r(nOr,"pretrained_model_name_or_path"),nOr.forEach(t),ono=r(bE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uoe=n(bE,"CODE",{});var sOr=s(uoe);rno=r(sOr,"pretrained_model_name_or_path"),sOr.forEach(t),tno=r(bE,":"),bE.forEach(t),ano=i(Dt),T=n(Dt,"UL",{});var M=s(T);Wh=n(M,"LI",{});var aMe=s(Wh);boe=n(aMe,"STRONG",{});var lOr=s(boe);nno=r(lOr,"albert"),lOr.forEach(t),sno=r(aMe," \u2014 "),YR=n(aMe,"A",{href:!0});var iOr=s(YR);lno=r(iOr,"AlbertModel"),iOr.forEach(t),ino=r(aMe," (ALBERT model)"),aMe.forEach(t),dno=i(M),Hh=n(M,"LI",{});var nMe=s(Hh);Foe=n(nMe,"STRONG",{});var dOr=s(Foe);cno=r(dOr,"bart"),dOr.forEach(t),fno=r(nMe," \u2014 "),KR=n(nMe,"A",{href:!0});var cOr=s(KR);mno=r(cOr,"BartModel"),cOr.forEach(t),gno=r(nMe," (BART model)"),nMe.forEach(t),hno=i(M),Uh=n(M,"LI",{});var sMe=s(Uh);voe=n(sMe,"STRONG",{});var fOr=s(voe);pno=r(fOr,"beit"),fOr.forEach(t),_no=r(sMe," \u2014 "),ZR=n(sMe,"A",{href:!0});var mOr=s(ZR);uno=r(mOr,"BeitModel"),mOr.forEach(t),bno=r(sMe," (BEiT model)"),sMe.forEach(t),Fno=i(M),Jh=n(M,"LI",{});var lMe=s(Jh);Toe=n(lMe,"STRONG",{});var gOr=s(Toe);vno=r(gOr,"bert"),gOr.forEach(t),Tno=r(lMe," \u2014 "),eB=n(lMe,"A",{href:!0});var hOr=s(eB);Mno=r(hOr,"BertModel"),hOr.forEach(t),Eno=r(lMe," (BERT model)"),lMe.forEach(t),Cno=i(M),Yh=n(M,"LI",{});var iMe=s(Yh);Moe=n(iMe,"STRONG",{});var pOr=s(Moe);wno=r(pOr,"bert-generation"),pOr.forEach(t),Ano=r(iMe," \u2014 "),oB=n(iMe,"A",{href:!0});var _Or=s(oB);yno=r(_Or,"BertGenerationEncoder"),_Or.forEach(t),Lno=r(iMe," (Bert Generation model)"),iMe.forEach(t),xno=i(M),Kh=n(M,"LI",{});var dMe=s(Kh);Eoe=n(dMe,"STRONG",{});var uOr=s(Eoe);kno=r(uOr,"big_bird"),uOr.forEach(t),Sno=r(dMe," \u2014 "),rB=n(dMe,"A",{href:!0});var bOr=s(rB);Rno=r(bOr,"BigBirdModel"),bOr.forEach(t),Bno=r(dMe," (BigBird model)"),dMe.forEach(t),Pno=i(M),Zh=n(M,"LI",{});var cMe=s(Zh);Coe=n(cMe,"STRONG",{});var FOr=s(Coe);$no=r(FOr,"bigbird_pegasus"),FOr.forEach(t),Ino=r(cMe," \u2014 "),tB=n(cMe,"A",{href:!0});var vOr=s(tB);qno=r(vOr,"BigBirdPegasusModel"),vOr.forEach(t),Nno=r(cMe," (BigBirdPegasus model)"),cMe.forEach(t),jno=i(M),ep=n(M,"LI",{});var fMe=s(ep);woe=n(fMe,"STRONG",{});var TOr=s(woe);Dno=r(TOr,"blenderbot"),TOr.forEach(t),Gno=r(fMe," \u2014 "),aB=n(fMe,"A",{href:!0});var MOr=s(aB);Ono=r(MOr,"BlenderbotModel"),MOr.forEach(t),Vno=r(fMe," (Blenderbot model)"),fMe.forEach(t),Xno=i(M),op=n(M,"LI",{});var mMe=s(op);Aoe=n(mMe,"STRONG",{});var EOr=s(Aoe);zno=r(EOr,"blenderbot-small"),EOr.forEach(t),Qno=r(mMe," \u2014 "),nB=n(mMe,"A",{href:!0});var COr=s(nB);Wno=r(COr,"BlenderbotSmallModel"),COr.forEach(t),Hno=r(mMe," (BlenderbotSmall model)"),mMe.forEach(t),Uno=i(M),rp=n(M,"LI",{});var gMe=s(rp);yoe=n(gMe,"STRONG",{});var wOr=s(yoe);Jno=r(wOr,"camembert"),wOr.forEach(t),Yno=r(gMe," \u2014 "),sB=n(gMe,"A",{href:!0});var AOr=s(sB);Kno=r(AOr,"CamembertModel"),AOr.forEach(t),Zno=r(gMe," (CamemBERT model)"),gMe.forEach(t),eso=i(M),tp=n(M,"LI",{});var hMe=s(tp);Loe=n(hMe,"STRONG",{});var yOr=s(Loe);oso=r(yOr,"canine"),yOr.forEach(t),rso=r(hMe," \u2014 "),lB=n(hMe,"A",{href:!0});var LOr=s(lB);tso=r(LOr,"CanineModel"),LOr.forEach(t),aso=r(hMe," (Canine model)"),hMe.forEach(t),nso=i(M),ap=n(M,"LI",{});var pMe=s(ap);xoe=n(pMe,"STRONG",{});var xOr=s(xoe);sso=r(xOr,"clip"),xOr.forEach(t),lso=r(pMe," \u2014 "),iB=n(pMe,"A",{href:!0});var kOr=s(iB);iso=r(kOr,"CLIPModel"),kOr.forEach(t),dso=r(pMe," (CLIP model)"),pMe.forEach(t),cso=i(M),np=n(M,"LI",{});var _Me=s(np);koe=n(_Me,"STRONG",{});var SOr=s(koe);fso=r(SOr,"convbert"),SOr.forEach(t),mso=r(_Me," \u2014 "),dB=n(_Me,"A",{href:!0});var ROr=s(dB);gso=r(ROr,"ConvBertModel"),ROr.forEach(t),hso=r(_Me," (ConvBERT model)"),_Me.forEach(t),pso=i(M),sp=n(M,"LI",{});var uMe=s(sp);Soe=n(uMe,"STRONG",{});var BOr=s(Soe);_so=r(BOr,"convnext"),BOr.forEach(t),uso=r(uMe," \u2014 "),cB=n(uMe,"A",{href:!0});var POr=s(cB);bso=r(POr,"ConvNextModel"),POr.forEach(t),Fso=r(uMe," (ConvNext model)"),uMe.forEach(t),vso=i(M),lp=n(M,"LI",{});var bMe=s(lp);Roe=n(bMe,"STRONG",{});var $Or=s(Roe);Tso=r($Or,"ctrl"),$Or.forEach(t),Mso=r(bMe," \u2014 "),fB=n(bMe,"A",{href:!0});var IOr=s(fB);Eso=r(IOr,"CTRLModel"),IOr.forEach(t),Cso=r(bMe," (CTRL model)"),bMe.forEach(t),wso=i(M),ip=n(M,"LI",{});var FMe=s(ip);Boe=n(FMe,"STRONG",{});var qOr=s(Boe);Aso=r(qOr,"data2vec-audio"),qOr.forEach(t),yso=r(FMe," \u2014 "),mB=n(FMe,"A",{href:!0});var NOr=s(mB);Lso=r(NOr,"Data2VecAudioModel"),NOr.forEach(t),xso=r(FMe," (Data2VecAudio model)"),FMe.forEach(t),kso=i(M),dp=n(M,"LI",{});var vMe=s(dp);Poe=n(vMe,"STRONG",{});var jOr=s(Poe);Sso=r(jOr,"data2vec-text"),jOr.forEach(t),Rso=r(vMe," \u2014 "),gB=n(vMe,"A",{href:!0});var DOr=s(gB);Bso=r(DOr,"Data2VecTextModel"),DOr.forEach(t),Pso=r(vMe," (Data2VecText model)"),vMe.forEach(t),$so=i(M),cp=n(M,"LI",{});var TMe=s(cp);$oe=n(TMe,"STRONG",{});var GOr=s($oe);Iso=r(GOr,"deberta"),GOr.forEach(t),qso=r(TMe," \u2014 "),hB=n(TMe,"A",{href:!0});var OOr=s(hB);Nso=r(OOr,"DebertaModel"),OOr.forEach(t),jso=r(TMe," (DeBERTa model)"),TMe.forEach(t),Dso=i(M),fp=n(M,"LI",{});var MMe=s(fp);Ioe=n(MMe,"STRONG",{});var VOr=s(Ioe);Gso=r(VOr,"deberta-v2"),VOr.forEach(t),Oso=r(MMe," \u2014 "),pB=n(MMe,"A",{href:!0});var XOr=s(pB);Vso=r(XOr,"DebertaV2Model"),XOr.forEach(t),Xso=r(MMe," (DeBERTa-v2 model)"),MMe.forEach(t),zso=i(M),mp=n(M,"LI",{});var EMe=s(mp);qoe=n(EMe,"STRONG",{});var zOr=s(qoe);Qso=r(zOr,"decision_transformer"),zOr.forEach(t),Wso=r(EMe," \u2014 "),_B=n(EMe,"A",{href:!0});var QOr=s(_B);Hso=r(QOr,"DecisionTransformerModel"),QOr.forEach(t),Uso=r(EMe," (Decision Transformer model)"),EMe.forEach(t),Jso=i(M),gp=n(M,"LI",{});var CMe=s(gp);Noe=n(CMe,"STRONG",{});var WOr=s(Noe);Yso=r(WOr,"deit"),WOr.forEach(t),Kso=r(CMe," \u2014 "),uB=n(CMe,"A",{href:!0});var HOr=s(uB);Zso=r(HOr,"DeiTModel"),HOr.forEach(t),elo=r(CMe," (DeiT model)"),CMe.forEach(t),olo=i(M),hp=n(M,"LI",{});var wMe=s(hp);joe=n(wMe,"STRONG",{});var UOr=s(joe);rlo=r(UOr,"detr"),UOr.forEach(t),tlo=r(wMe," \u2014 "),bB=n(wMe,"A",{href:!0});var JOr=s(bB);alo=r(JOr,"DetrModel"),JOr.forEach(t),nlo=r(wMe," (DETR model)"),wMe.forEach(t),slo=i(M),pp=n(M,"LI",{});var AMe=s(pp);Doe=n(AMe,"STRONG",{});var YOr=s(Doe);llo=r(YOr,"distilbert"),YOr.forEach(t),ilo=r(AMe," \u2014 "),FB=n(AMe,"A",{href:!0});var KOr=s(FB);dlo=r(KOr,"DistilBertModel"),KOr.forEach(t),clo=r(AMe," (DistilBERT model)"),AMe.forEach(t),flo=i(M),_p=n(M,"LI",{});var yMe=s(_p);Goe=n(yMe,"STRONG",{});var ZOr=s(Goe);mlo=r(ZOr,"dpr"),ZOr.forEach(t),glo=r(yMe," \u2014 "),vB=n(yMe,"A",{href:!0});var eVr=s(vB);hlo=r(eVr,"DPRQuestionEncoder"),eVr.forEach(t),plo=r(yMe," (DPR model)"),yMe.forEach(t),_lo=i(M),up=n(M,"LI",{});var LMe=s(up);Ooe=n(LMe,"STRONG",{});var oVr=s(Ooe);ulo=r(oVr,"dpt"),oVr.forEach(t),blo=r(LMe," \u2014 "),TB=n(LMe,"A",{href:!0});var rVr=s(TB);Flo=r(rVr,"DPTModel"),rVr.forEach(t),vlo=r(LMe," (DPT model)"),LMe.forEach(t),Tlo=i(M),bp=n(M,"LI",{});var xMe=s(bp);Voe=n(xMe,"STRONG",{});var tVr=s(Voe);Mlo=r(tVr,"electra"),tVr.forEach(t),Elo=r(xMe," \u2014 "),MB=n(xMe,"A",{href:!0});var aVr=s(MB);Clo=r(aVr,"ElectraModel"),aVr.forEach(t),wlo=r(xMe," (ELECTRA model)"),xMe.forEach(t),Alo=i(M),Fp=n(M,"LI",{});var kMe=s(Fp);Xoe=n(kMe,"STRONG",{});var nVr=s(Xoe);ylo=r(nVr,"flaubert"),nVr.forEach(t),Llo=r(kMe," \u2014 "),EB=n(kMe,"A",{href:!0});var sVr=s(EB);xlo=r(sVr,"FlaubertModel"),sVr.forEach(t),klo=r(kMe," (FlauBERT model)"),kMe.forEach(t),Slo=i(M),vp=n(M,"LI",{});var SMe=s(vp);zoe=n(SMe,"STRONG",{});var lVr=s(zoe);Rlo=r(lVr,"fnet"),lVr.forEach(t),Blo=r(SMe," \u2014 "),CB=n(SMe,"A",{href:!0});var iVr=s(CB);Plo=r(iVr,"FNetModel"),iVr.forEach(t),$lo=r(SMe," (FNet model)"),SMe.forEach(t),Ilo=i(M),Tp=n(M,"LI",{});var RMe=s(Tp);Qoe=n(RMe,"STRONG",{});var dVr=s(Qoe);qlo=r(dVr,"fsmt"),dVr.forEach(t),Nlo=r(RMe," \u2014 "),wB=n(RMe,"A",{href:!0});var cVr=s(wB);jlo=r(cVr,"FSMTModel"),cVr.forEach(t),Dlo=r(RMe," (FairSeq Machine-Translation model)"),RMe.forEach(t),Glo=i(M),js=n(M,"LI",{});var t9=s(js);Woe=n(t9,"STRONG",{});var fVr=s(Woe);Olo=r(fVr,"funnel"),fVr.forEach(t),Vlo=r(t9," \u2014 "),AB=n(t9,"A",{href:!0});var mVr=s(AB);Xlo=r(mVr,"FunnelModel"),mVr.forEach(t),zlo=r(t9," or "),yB=n(t9,"A",{href:!0});var gVr=s(yB);Qlo=r(gVr,"FunnelBaseModel"),gVr.forEach(t),Wlo=r(t9," (Funnel Transformer model)"),t9.forEach(t),Hlo=i(M),Mp=n(M,"LI",{});var BMe=s(Mp);Hoe=n(BMe,"STRONG",{});var hVr=s(Hoe);Ulo=r(hVr,"glpn"),hVr.forEach(t),Jlo=r(BMe," \u2014 "),LB=n(BMe,"A",{href:!0});var pVr=s(LB);Ylo=r(pVr,"GLPNModel"),pVr.forEach(t),Klo=r(BMe," (GLPN model)"),BMe.forEach(t),Zlo=i(M),Ep=n(M,"LI",{});var PMe=s(Ep);Uoe=n(PMe,"STRONG",{});var _Vr=s(Uoe);eio=r(_Vr,"gpt2"),_Vr.forEach(t),oio=r(PMe," \u2014 "),xB=n(PMe,"A",{href:!0});var uVr=s(xB);rio=r(uVr,"GPT2Model"),uVr.forEach(t),tio=r(PMe," (OpenAI GPT-2 model)"),PMe.forEach(t),aio=i(M),Cp=n(M,"LI",{});var $Me=s(Cp);Joe=n($Me,"STRONG",{});var bVr=s(Joe);nio=r(bVr,"gpt_neo"),bVr.forEach(t),sio=r($Me," \u2014 "),kB=n($Me,"A",{href:!0});var FVr=s(kB);lio=r(FVr,"GPTNeoModel"),FVr.forEach(t),iio=r($Me," (GPT Neo model)"),$Me.forEach(t),dio=i(M),wp=n(M,"LI",{});var IMe=s(wp);Yoe=n(IMe,"STRONG",{});var vVr=s(Yoe);cio=r(vVr,"gptj"),vVr.forEach(t),fio=r(IMe," \u2014 "),SB=n(IMe,"A",{href:!0});var TVr=s(SB);mio=r(TVr,"GPTJModel"),TVr.forEach(t),gio=r(IMe," (GPT-J model)"),IMe.forEach(t),hio=i(M),Ap=n(M,"LI",{});var qMe=s(Ap);Koe=n(qMe,"STRONG",{});var MVr=s(Koe);pio=r(MVr,"hubert"),MVr.forEach(t),_io=r(qMe," \u2014 "),RB=n(qMe,"A",{href:!0});var EVr=s(RB);uio=r(EVr,"HubertModel"),EVr.forEach(t),bio=r(qMe," (Hubert model)"),qMe.forEach(t),Fio=i(M),yp=n(M,"LI",{});var NMe=s(yp);Zoe=n(NMe,"STRONG",{});var CVr=s(Zoe);vio=r(CVr,"ibert"),CVr.forEach(t),Tio=r(NMe," \u2014 "),BB=n(NMe,"A",{href:!0});var wVr=s(BB);Mio=r(wVr,"IBertModel"),wVr.forEach(t),Eio=r(NMe," (I-BERT model)"),NMe.forEach(t),Cio=i(M),Lp=n(M,"LI",{});var jMe=s(Lp);ere=n(jMe,"STRONG",{});var AVr=s(ere);wio=r(AVr,"imagegpt"),AVr.forEach(t),Aio=r(jMe," \u2014 "),PB=n(jMe,"A",{href:!0});var yVr=s(PB);yio=r(yVr,"ImageGPTModel"),yVr.forEach(t),Lio=r(jMe," (ImageGPT model)"),jMe.forEach(t),xio=i(M),xp=n(M,"LI",{});var DMe=s(xp);ore=n(DMe,"STRONG",{});var LVr=s(ore);kio=r(LVr,"layoutlm"),LVr.forEach(t),Sio=r(DMe," \u2014 "),$B=n(DMe,"A",{href:!0});var xVr=s($B);Rio=r(xVr,"LayoutLMModel"),xVr.forEach(t),Bio=r(DMe," (LayoutLM model)"),DMe.forEach(t),Pio=i(M),kp=n(M,"LI",{});var GMe=s(kp);rre=n(GMe,"STRONG",{});var kVr=s(rre);$io=r(kVr,"layoutlmv2"),kVr.forEach(t),Iio=r(GMe," \u2014 "),IB=n(GMe,"A",{href:!0});var SVr=s(IB);qio=r(SVr,"LayoutLMv2Model"),SVr.forEach(t),Nio=r(GMe," (LayoutLMv2 model)"),GMe.forEach(t),jio=i(M),Sp=n(M,"LI",{});var OMe=s(Sp);tre=n(OMe,"STRONG",{});var RVr=s(tre);Dio=r(RVr,"led"),RVr.forEach(t),Gio=r(OMe," \u2014 "),qB=n(OMe,"A",{href:!0});var BVr=s(qB);Oio=r(BVr,"LEDModel"),BVr.forEach(t),Vio=r(OMe," (LED model)"),OMe.forEach(t),Xio=i(M),Rp=n(M,"LI",{});var VMe=s(Rp);are=n(VMe,"STRONG",{});var PVr=s(are);zio=r(PVr,"longformer"),PVr.forEach(t),Qio=r(VMe," \u2014 "),NB=n(VMe,"A",{href:!0});var $Vr=s(NB);Wio=r($Vr,"LongformerModel"),$Vr.forEach(t),Hio=r(VMe," (Longformer model)"),VMe.forEach(t),Uio=i(M),Bp=n(M,"LI",{});var XMe=s(Bp);nre=n(XMe,"STRONG",{});var IVr=s(nre);Jio=r(IVr,"luke"),IVr.forEach(t),Yio=r(XMe," \u2014 "),jB=n(XMe,"A",{href:!0});var qVr=s(jB);Kio=r(qVr,"LukeModel"),qVr.forEach(t),Zio=r(XMe," (LUKE model)"),XMe.forEach(t),edo=i(M),Pp=n(M,"LI",{});var zMe=s(Pp);sre=n(zMe,"STRONG",{});var NVr=s(sre);odo=r(NVr,"lxmert"),NVr.forEach(t),rdo=r(zMe," \u2014 "),DB=n(zMe,"A",{href:!0});var jVr=s(DB);tdo=r(jVr,"LxmertModel"),jVr.forEach(t),ado=r(zMe," (LXMERT model)"),zMe.forEach(t),ndo=i(M),$p=n(M,"LI",{});var QMe=s($p);lre=n(QMe,"STRONG",{});var DVr=s(lre);sdo=r(DVr,"m2m_100"),DVr.forEach(t),ldo=r(QMe," \u2014 "),GB=n(QMe,"A",{href:!0});var GVr=s(GB);ido=r(GVr,"M2M100Model"),GVr.forEach(t),ddo=r(QMe," (M2M100 model)"),QMe.forEach(t),cdo=i(M),Ip=n(M,"LI",{});var WMe=s(Ip);ire=n(WMe,"STRONG",{});var OVr=s(ire);fdo=r(OVr,"marian"),OVr.forEach(t),mdo=r(WMe," \u2014 "),OB=n(WMe,"A",{href:!0});var VVr=s(OB);gdo=r(VVr,"MarianModel"),VVr.forEach(t),hdo=r(WMe," (Marian model)"),WMe.forEach(t),pdo=i(M),qp=n(M,"LI",{});var HMe=s(qp);dre=n(HMe,"STRONG",{});var XVr=s(dre);_do=r(XVr,"maskformer"),XVr.forEach(t),udo=r(HMe," \u2014 "),VB=n(HMe,"A",{href:!0});var zVr=s(VB);bdo=r(zVr,"MaskFormerModel"),zVr.forEach(t),Fdo=r(HMe," (MaskFormer model)"),HMe.forEach(t),vdo=i(M),Np=n(M,"LI",{});var UMe=s(Np);cre=n(UMe,"STRONG",{});var QVr=s(cre);Tdo=r(QVr,"mbart"),QVr.forEach(t),Mdo=r(UMe," \u2014 "),XB=n(UMe,"A",{href:!0});var WVr=s(XB);Edo=r(WVr,"MBartModel"),WVr.forEach(t),Cdo=r(UMe," (mBART model)"),UMe.forEach(t),wdo=i(M),jp=n(M,"LI",{});var JMe=s(jp);fre=n(JMe,"STRONG",{});var HVr=s(fre);Ado=r(HVr,"megatron-bert"),HVr.forEach(t),ydo=r(JMe," \u2014 "),zB=n(JMe,"A",{href:!0});var UVr=s(zB);Ldo=r(UVr,"MegatronBertModel"),UVr.forEach(t),xdo=r(JMe," (MegatronBert model)"),JMe.forEach(t),kdo=i(M),Dp=n(M,"LI",{});var YMe=s(Dp);mre=n(YMe,"STRONG",{});var JVr=s(mre);Sdo=r(JVr,"mobilebert"),JVr.forEach(t),Rdo=r(YMe," \u2014 "),QB=n(YMe,"A",{href:!0});var YVr=s(QB);Bdo=r(YVr,"MobileBertModel"),YVr.forEach(t),Pdo=r(YMe," (MobileBERT model)"),YMe.forEach(t),$do=i(M),Gp=n(M,"LI",{});var KMe=s(Gp);gre=n(KMe,"STRONG",{});var KVr=s(gre);Ido=r(KVr,"mpnet"),KVr.forEach(t),qdo=r(KMe," \u2014 "),WB=n(KMe,"A",{href:!0});var ZVr=s(WB);Ndo=r(ZVr,"MPNetModel"),ZVr.forEach(t),jdo=r(KMe," (MPNet model)"),KMe.forEach(t),Ddo=i(M),Op=n(M,"LI",{});var ZMe=s(Op);hre=n(ZMe,"STRONG",{});var eXr=s(hre);Gdo=r(eXr,"mt5"),eXr.forEach(t),Odo=r(ZMe," \u2014 "),HB=n(ZMe,"A",{href:!0});var oXr=s(HB);Vdo=r(oXr,"MT5Model"),oXr.forEach(t),Xdo=r(ZMe," (mT5 model)"),ZMe.forEach(t),zdo=i(M),Vp=n(M,"LI",{});var eEe=s(Vp);pre=n(eEe,"STRONG",{});var rXr=s(pre);Qdo=r(rXr,"nystromformer"),rXr.forEach(t),Wdo=r(eEe," \u2014 "),UB=n(eEe,"A",{href:!0});var tXr=s(UB);Hdo=r(tXr,"NystromformerModel"),tXr.forEach(t),Udo=r(eEe," (Nystromformer model)"),eEe.forEach(t),Jdo=i(M),Xp=n(M,"LI",{});var oEe=s(Xp);_re=n(oEe,"STRONG",{});var aXr=s(_re);Ydo=r(aXr,"openai-gpt"),aXr.forEach(t),Kdo=r(oEe," \u2014 "),JB=n(oEe,"A",{href:!0});var nXr=s(JB);Zdo=r(nXr,"OpenAIGPTModel"),nXr.forEach(t),eco=r(oEe," (OpenAI GPT model)"),oEe.forEach(t),oco=i(M),zp=n(M,"LI",{});var rEe=s(zp);ure=n(rEe,"STRONG",{});var sXr=s(ure);rco=r(sXr,"pegasus"),sXr.forEach(t),tco=r(rEe," \u2014 "),YB=n(rEe,"A",{href:!0});var lXr=s(YB);aco=r(lXr,"PegasusModel"),lXr.forEach(t),nco=r(rEe," (Pegasus model)"),rEe.forEach(t),sco=i(M),Qp=n(M,"LI",{});var tEe=s(Qp);bre=n(tEe,"STRONG",{});var iXr=s(bre);lco=r(iXr,"perceiver"),iXr.forEach(t),ico=r(tEe," \u2014 "),KB=n(tEe,"A",{href:!0});var dXr=s(KB);dco=r(dXr,"PerceiverModel"),dXr.forEach(t),cco=r(tEe," (Perceiver model)"),tEe.forEach(t),fco=i(M),Wp=n(M,"LI",{});var aEe=s(Wp);Fre=n(aEe,"STRONG",{});var cXr=s(Fre);mco=r(cXr,"plbart"),cXr.forEach(t),gco=r(aEe," \u2014 "),ZB=n(aEe,"A",{href:!0});var fXr=s(ZB);hco=r(fXr,"PLBartModel"),fXr.forEach(t),pco=r(aEe," (PLBart model)"),aEe.forEach(t),_co=i(M),Hp=n(M,"LI",{});var nEe=s(Hp);vre=n(nEe,"STRONG",{});var mXr=s(vre);uco=r(mXr,"poolformer"),mXr.forEach(t),bco=r(nEe," \u2014 "),eP=n(nEe,"A",{href:!0});var gXr=s(eP);Fco=r(gXr,"PoolFormerModel"),gXr.forEach(t),vco=r(nEe," (PoolFormer model)"),nEe.forEach(t),Tco=i(M),Up=n(M,"LI",{});var sEe=s(Up);Tre=n(sEe,"STRONG",{});var hXr=s(Tre);Mco=r(hXr,"prophetnet"),hXr.forEach(t),Eco=r(sEe," \u2014 "),oP=n(sEe,"A",{href:!0});var pXr=s(oP);Cco=r(pXr,"ProphetNetModel"),pXr.forEach(t),wco=r(sEe," (ProphetNet model)"),sEe.forEach(t),Aco=i(M),Jp=n(M,"LI",{});var lEe=s(Jp);Mre=n(lEe,"STRONG",{});var _Xr=s(Mre);yco=r(_Xr,"qdqbert"),_Xr.forEach(t),Lco=r(lEe," \u2014 "),rP=n(lEe,"A",{href:!0});var uXr=s(rP);xco=r(uXr,"QDQBertModel"),uXr.forEach(t),kco=r(lEe," (QDQBert model)"),lEe.forEach(t),Sco=i(M),Yp=n(M,"LI",{});var iEe=s(Yp);Ere=n(iEe,"STRONG",{});var bXr=s(Ere);Rco=r(bXr,"reformer"),bXr.forEach(t),Bco=r(iEe," \u2014 "),tP=n(iEe,"A",{href:!0});var FXr=s(tP);Pco=r(FXr,"ReformerModel"),FXr.forEach(t),$co=r(iEe," (Reformer model)"),iEe.forEach(t),Ico=i(M),Kp=n(M,"LI",{});var dEe=s(Kp);Cre=n(dEe,"STRONG",{});var vXr=s(Cre);qco=r(vXr,"rembert"),vXr.forEach(t),Nco=r(dEe," \u2014 "),aP=n(dEe,"A",{href:!0});var TXr=s(aP);jco=r(TXr,"RemBertModel"),TXr.forEach(t),Dco=r(dEe," (RemBERT model)"),dEe.forEach(t),Gco=i(M),Zp=n(M,"LI",{});var cEe=s(Zp);wre=n(cEe,"STRONG",{});var MXr=s(wre);Oco=r(MXr,"resnet"),MXr.forEach(t),Vco=r(cEe," \u2014 "),nP=n(cEe,"A",{href:!0});var EXr=s(nP);Xco=r(EXr,"ResNetModel"),EXr.forEach(t),zco=r(cEe," (ResNet model)"),cEe.forEach(t),Qco=i(M),e_=n(M,"LI",{});var fEe=s(e_);Are=n(fEe,"STRONG",{});var CXr=s(Are);Wco=r(CXr,"retribert"),CXr.forEach(t),Hco=r(fEe," \u2014 "),sP=n(fEe,"A",{href:!0});var wXr=s(sP);Uco=r(wXr,"RetriBertModel"),wXr.forEach(t),Jco=r(fEe," (RetriBERT model)"),fEe.forEach(t),Yco=i(M),o_=n(M,"LI",{});var mEe=s(o_);yre=n(mEe,"STRONG",{});var AXr=s(yre);Kco=r(AXr,"roberta"),AXr.forEach(t),Zco=r(mEe," \u2014 "),lP=n(mEe,"A",{href:!0});var yXr=s(lP);efo=r(yXr,"RobertaModel"),yXr.forEach(t),ofo=r(mEe," (RoBERTa model)"),mEe.forEach(t),rfo=i(M),r_=n(M,"LI",{});var gEe=s(r_);Lre=n(gEe,"STRONG",{});var LXr=s(Lre);tfo=r(LXr,"roformer"),LXr.forEach(t),afo=r(gEe," \u2014 "),iP=n(gEe,"A",{href:!0});var xXr=s(iP);nfo=r(xXr,"RoFormerModel"),xXr.forEach(t),sfo=r(gEe," (RoFormer model)"),gEe.forEach(t),lfo=i(M),t_=n(M,"LI",{});var hEe=s(t_);xre=n(hEe,"STRONG",{});var kXr=s(xre);ifo=r(kXr,"segformer"),kXr.forEach(t),dfo=r(hEe," \u2014 "),dP=n(hEe,"A",{href:!0});var SXr=s(dP);cfo=r(SXr,"SegformerModel"),SXr.forEach(t),ffo=r(hEe," (SegFormer model)"),hEe.forEach(t),mfo=i(M),a_=n(M,"LI",{});var pEe=s(a_);kre=n(pEe,"STRONG",{});var RXr=s(kre);gfo=r(RXr,"sew"),RXr.forEach(t),hfo=r(pEe," \u2014 "),cP=n(pEe,"A",{href:!0});var BXr=s(cP);pfo=r(BXr,"SEWModel"),BXr.forEach(t),_fo=r(pEe," (SEW model)"),pEe.forEach(t),ufo=i(M),n_=n(M,"LI",{});var _Ee=s(n_);Sre=n(_Ee,"STRONG",{});var PXr=s(Sre);bfo=r(PXr,"sew-d"),PXr.forEach(t),Ffo=r(_Ee," \u2014 "),fP=n(_Ee,"A",{href:!0});var $Xr=s(fP);vfo=r($Xr,"SEWDModel"),$Xr.forEach(t),Tfo=r(_Ee," (SEW-D model)"),_Ee.forEach(t),Mfo=i(M),s_=n(M,"LI",{});var uEe=s(s_);Rre=n(uEe,"STRONG",{});var IXr=s(Rre);Efo=r(IXr,"speech_to_text"),IXr.forEach(t),Cfo=r(uEe," \u2014 "),mP=n(uEe,"A",{href:!0});var qXr=s(mP);wfo=r(qXr,"Speech2TextModel"),qXr.forEach(t),Afo=r(uEe," (Speech2Text model)"),uEe.forEach(t),yfo=i(M),l_=n(M,"LI",{});var bEe=s(l_);Bre=n(bEe,"STRONG",{});var NXr=s(Bre);Lfo=r(NXr,"splinter"),NXr.forEach(t),xfo=r(bEe," \u2014 "),gP=n(bEe,"A",{href:!0});var jXr=s(gP);kfo=r(jXr,"SplinterModel"),jXr.forEach(t),Sfo=r(bEe," (Splinter model)"),bEe.forEach(t),Rfo=i(M),i_=n(M,"LI",{});var FEe=s(i_);Pre=n(FEe,"STRONG",{});var DXr=s(Pre);Bfo=r(DXr,"squeezebert"),DXr.forEach(t),Pfo=r(FEe," \u2014 "),hP=n(FEe,"A",{href:!0});var GXr=s(hP);$fo=r(GXr,"SqueezeBertModel"),GXr.forEach(t),Ifo=r(FEe," (SqueezeBERT model)"),FEe.forEach(t),qfo=i(M),d_=n(M,"LI",{});var vEe=s(d_);$re=n(vEe,"STRONG",{});var OXr=s($re);Nfo=r(OXr,"swin"),OXr.forEach(t),jfo=r(vEe," \u2014 "),pP=n(vEe,"A",{href:!0});var VXr=s(pP);Dfo=r(VXr,"SwinModel"),VXr.forEach(t),Gfo=r(vEe," (Swin model)"),vEe.forEach(t),Ofo=i(M),c_=n(M,"LI",{});var TEe=s(c_);Ire=n(TEe,"STRONG",{});var XXr=s(Ire);Vfo=r(XXr,"t5"),XXr.forEach(t),Xfo=r(TEe," \u2014 "),_P=n(TEe,"A",{href:!0});var zXr=s(_P);zfo=r(zXr,"T5Model"),zXr.forEach(t),Qfo=r(TEe," (T5 model)"),TEe.forEach(t),Wfo=i(M),f_=n(M,"LI",{});var MEe=s(f_);qre=n(MEe,"STRONG",{});var QXr=s(qre);Hfo=r(QXr,"tapas"),QXr.forEach(t),Ufo=r(MEe," \u2014 "),uP=n(MEe,"A",{href:!0});var WXr=s(uP);Jfo=r(WXr,"TapasModel"),WXr.forEach(t),Yfo=r(MEe," (TAPAS model)"),MEe.forEach(t),Kfo=i(M),m_=n(M,"LI",{});var EEe=s(m_);Nre=n(EEe,"STRONG",{});var HXr=s(Nre);Zfo=r(HXr,"transfo-xl"),HXr.forEach(t),emo=r(EEe," \u2014 "),bP=n(EEe,"A",{href:!0});var UXr=s(bP);omo=r(UXr,"TransfoXLModel"),UXr.forEach(t),rmo=r(EEe," (Transformer-XL model)"),EEe.forEach(t),tmo=i(M),g_=n(M,"LI",{});var CEe=s(g_);jre=n(CEe,"STRONG",{});var JXr=s(jre);amo=r(JXr,"unispeech"),JXr.forEach(t),nmo=r(CEe," \u2014 "),FP=n(CEe,"A",{href:!0});var YXr=s(FP);smo=r(YXr,"UniSpeechModel"),YXr.forEach(t),lmo=r(CEe," (UniSpeech model)"),CEe.forEach(t),imo=i(M),h_=n(M,"LI",{});var wEe=s(h_);Dre=n(wEe,"STRONG",{});var KXr=s(Dre);dmo=r(KXr,"unispeech-sat"),KXr.forEach(t),cmo=r(wEe," \u2014 "),vP=n(wEe,"A",{href:!0});var ZXr=s(vP);fmo=r(ZXr,"UniSpeechSatModel"),ZXr.forEach(t),mmo=r(wEe," (UniSpeechSat model)"),wEe.forEach(t),gmo=i(M),p_=n(M,"LI",{});var AEe=s(p_);Gre=n(AEe,"STRONG",{});var ezr=s(Gre);hmo=r(ezr,"van"),ezr.forEach(t),pmo=r(AEe," \u2014 "),TP=n(AEe,"A",{href:!0});var ozr=s(TP);_mo=r(ozr,"VanModel"),ozr.forEach(t),umo=r(AEe," (VAN model)"),AEe.forEach(t),bmo=i(M),__=n(M,"LI",{});var yEe=s(__);Ore=n(yEe,"STRONG",{});var rzr=s(Ore);Fmo=r(rzr,"vilt"),rzr.forEach(t),vmo=r(yEe," \u2014 "),MP=n(yEe,"A",{href:!0});var tzr=s(MP);Tmo=r(tzr,"ViltModel"),tzr.forEach(t),Mmo=r(yEe," (ViLT model)"),yEe.forEach(t),Emo=i(M),u_=n(M,"LI",{});var LEe=s(u_);Vre=n(LEe,"STRONG",{});var azr=s(Vre);Cmo=r(azr,"vision-text-dual-encoder"),azr.forEach(t),wmo=r(LEe," \u2014 "),EP=n(LEe,"A",{href:!0});var nzr=s(EP);Amo=r(nzr,"VisionTextDualEncoderModel"),nzr.forEach(t),ymo=r(LEe," (VisionTextDualEncoder model)"),LEe.forEach(t),Lmo=i(M),b_=n(M,"LI",{});var xEe=s(b_);Xre=n(xEe,"STRONG",{});var szr=s(Xre);xmo=r(szr,"visual_bert"),szr.forEach(t),kmo=r(xEe," \u2014 "),CP=n(xEe,"A",{href:!0});var lzr=s(CP);Smo=r(lzr,"VisualBertModel"),lzr.forEach(t),Rmo=r(xEe," (VisualBert model)"),xEe.forEach(t),Bmo=i(M),F_=n(M,"LI",{});var kEe=s(F_);zre=n(kEe,"STRONG",{});var izr=s(zre);Pmo=r(izr,"vit"),izr.forEach(t),$mo=r(kEe," \u2014 "),wP=n(kEe,"A",{href:!0});var dzr=s(wP);Imo=r(dzr,"ViTModel"),dzr.forEach(t),qmo=r(kEe," (ViT model)"),kEe.forEach(t),Nmo=i(M),v_=n(M,"LI",{});var SEe=s(v_);Qre=n(SEe,"STRONG",{});var czr=s(Qre);jmo=r(czr,"vit_mae"),czr.forEach(t),Dmo=r(SEe," \u2014 "),AP=n(SEe,"A",{href:!0});var fzr=s(AP);Gmo=r(fzr,"ViTMAEModel"),fzr.forEach(t),Omo=r(SEe," (ViTMAE model)"),SEe.forEach(t),Vmo=i(M),T_=n(M,"LI",{});var REe=s(T_);Wre=n(REe,"STRONG",{});var mzr=s(Wre);Xmo=r(mzr,"wav2vec2"),mzr.forEach(t),zmo=r(REe," \u2014 "),yP=n(REe,"A",{href:!0});var gzr=s(yP);Qmo=r(gzr,"Wav2Vec2Model"),gzr.forEach(t),Wmo=r(REe," (Wav2Vec2 model)"),REe.forEach(t),Hmo=i(M),M_=n(M,"LI",{});var BEe=s(M_);Hre=n(BEe,"STRONG",{});var hzr=s(Hre);Umo=r(hzr,"wavlm"),hzr.forEach(t),Jmo=r(BEe," \u2014 "),LP=n(BEe,"A",{href:!0});var pzr=s(LP);Ymo=r(pzr,"WavLMModel"),pzr.forEach(t),Kmo=r(BEe," (WavLM model)"),BEe.forEach(t),Zmo=i(M),E_=n(M,"LI",{});var PEe=s(E_);Ure=n(PEe,"STRONG",{});var _zr=s(Ure);ego=r(_zr,"xglm"),_zr.forEach(t),ogo=r(PEe," \u2014 "),xP=n(PEe,"A",{href:!0});var uzr=s(xP);rgo=r(uzr,"XGLMModel"),uzr.forEach(t),tgo=r(PEe," (XGLM model)"),PEe.forEach(t),ago=i(M),C_=n(M,"LI",{});var $Ee=s(C_);Jre=n($Ee,"STRONG",{});var bzr=s(Jre);ngo=r(bzr,"xlm"),bzr.forEach(t),sgo=r($Ee," \u2014 "),kP=n($Ee,"A",{href:!0});var Fzr=s(kP);lgo=r(Fzr,"XLMModel"),Fzr.forEach(t),igo=r($Ee," (XLM model)"),$Ee.forEach(t),dgo=i(M),w_=n(M,"LI",{});var IEe=s(w_);Yre=n(IEe,"STRONG",{});var vzr=s(Yre);cgo=r(vzr,"xlm-prophetnet"),vzr.forEach(t),fgo=r(IEe," \u2014 "),SP=n(IEe,"A",{href:!0});var Tzr=s(SP);mgo=r(Tzr,"XLMProphetNetModel"),Tzr.forEach(t),ggo=r(IEe," (XLMProphetNet model)"),IEe.forEach(t),hgo=i(M),A_=n(M,"LI",{});var qEe=s(A_);Kre=n(qEe,"STRONG",{});var Mzr=s(Kre);pgo=r(Mzr,"xlm-roberta"),Mzr.forEach(t),_go=r(qEe," \u2014 "),RP=n(qEe,"A",{href:!0});var Ezr=s(RP);ugo=r(Ezr,"XLMRobertaModel"),Ezr.forEach(t),bgo=r(qEe," (XLM-RoBERTa model)"),qEe.forEach(t),Fgo=i(M),y_=n(M,"LI",{});var NEe=s(y_);Zre=n(NEe,"STRONG",{});var Czr=s(Zre);vgo=r(Czr,"xlm-roberta-xl"),Czr.forEach(t),Tgo=r(NEe," \u2014 "),BP=n(NEe,"A",{href:!0});var wzr=s(BP);Mgo=r(wzr,"XLMRobertaXLModel"),wzr.forEach(t),Ego=r(NEe," (XLM-RoBERTa-XL model)"),NEe.forEach(t),Cgo=i(M),L_=n(M,"LI",{});var jEe=s(L_);ete=n(jEe,"STRONG",{});var Azr=s(ete);wgo=r(Azr,"xlnet"),Azr.forEach(t),Ago=r(jEe," \u2014 "),PP=n(jEe,"A",{href:!0});var yzr=s(PP);ygo=r(yzr,"XLNetModel"),yzr.forEach(t),Lgo=r(jEe," (XLNet model)"),jEe.forEach(t),xgo=i(M),x_=n(M,"LI",{});var DEe=s(x_);ote=n(DEe,"STRONG",{});var Lzr=s(ote);kgo=r(Lzr,"yoso"),Lzr.forEach(t),Sgo=r(DEe," \u2014 "),$P=n(DEe,"A",{href:!0});var xzr=s($P);Rgo=r(xzr,"YosoModel"),xzr.forEach(t),Bgo=r(DEe," (YOSO model)"),DEe.forEach(t),M.forEach(t),Pgo=i(Dt),k_=n(Dt,"P",{});var GEe=s(k_);$go=r(GEe,"The model is set in evaluation mode by default using "),rte=n(GEe,"CODE",{});var kzr=s(rte);Igo=r(kzr,"model.eval()"),kzr.forEach(t),qgo=r(GEe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tte=n(GEe,"CODE",{});var Szr=s(tte);Ngo=r(Szr,"model.train()"),Szr.forEach(t),GEe.forEach(t),jgo=i(Dt),ate=n(Dt,"P",{});var Rzr=s(ate);Dgo=r(Rzr,"Examples:"),Rzr.forEach(t),Ggo=i(Dt),m(e5.$$.fragment,Dt),Dt.forEach(t),Qs.forEach(t),HSe=i(c),Zi=n(c,"H2",{class:!0});var tPe=s(Zi);S_=n(tPe,"A",{id:!0,class:!0,href:!0});var Bzr=s(S_);nte=n(Bzr,"SPAN",{});var Pzr=s(nte);m(o5.$$.fragment,Pzr),Pzr.forEach(t),Bzr.forEach(t),Ogo=i(tPe),ste=n(tPe,"SPAN",{});var $zr=s(ste);Vgo=r($zr,"AutoModelForPreTraining"),$zr.forEach(t),tPe.forEach(t),USe=i(c),Yo=n(c,"DIV",{class:!0});var Hs=s(Yo);m(r5.$$.fragment,Hs),Xgo=i(Hs),ed=n(Hs,"P",{});var UH=s(ed);zgo=r(UH,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),IP=n(UH,"A",{href:!0});var Izr=s(IP);Qgo=r(Izr,"from_pretrained()"),Izr.forEach(t),Wgo=r(UH," class method or the "),qP=n(UH,"A",{href:!0});var qzr=s(qP);Hgo=r(qzr,"from_config()"),qzr.forEach(t),Ugo=r(UH,` class
method.`),UH.forEach(t),Jgo=i(Hs),t5=n(Hs,"P",{});var aPe=s(t5);Ygo=r(aPe,"This class cannot be instantiated directly using "),lte=n(aPe,"CODE",{});var Nzr=s(lte);Kgo=r(Nzr,"__init__()"),Nzr.forEach(t),Zgo=r(aPe," (throws an error)."),aPe.forEach(t),eho=i(Hs),zr=n(Hs,"DIV",{class:!0});var Us=s(zr);m(a5.$$.fragment,Us),oho=i(Us),ite=n(Us,"P",{});var jzr=s(ite);rho=r(jzr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),jzr.forEach(t),tho=i(Us),od=n(Us,"P",{});var JH=s(od);aho=r(JH,`Note:
Loading a model from its configuration file does `),dte=n(JH,"STRONG",{});var Dzr=s(dte);nho=r(Dzr,"not"),Dzr.forEach(t),sho=r(JH,` load the model weights. It only affects the
model\u2019s configuration. Use `),NP=n(JH,"A",{href:!0});var Gzr=s(NP);lho=r(Gzr,"from_pretrained()"),Gzr.forEach(t),iho=r(JH," to load the model weights."),JH.forEach(t),dho=i(Us),cte=n(Us,"P",{});var Ozr=s(cte);cho=r(Ozr,"Examples:"),Ozr.forEach(t),fho=i(Us),m(n5.$$.fragment,Us),Us.forEach(t),mho=i(Hs),Ne=n(Hs,"DIV",{class:!0});var Gt=s(Ne);m(s5.$$.fragment,Gt),gho=i(Gt),fte=n(Gt,"P",{});var Vzr=s(fte);hho=r(Vzr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Vzr.forEach(t),pho=i(Gt),za=n(Gt,"P",{});var FE=s(za);_ho=r(FE,"The model class to instantiate is selected based on the "),mte=n(FE,"CODE",{});var Xzr=s(mte);uho=r(Xzr,"model_type"),Xzr.forEach(t),bho=r(FE,` property of the config object (either
passed as an argument or loaded from `),gte=n(FE,"CODE",{});var zzr=s(gte);Fho=r(zzr,"pretrained_model_name_or_path"),zzr.forEach(t),vho=r(FE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hte=n(FE,"CODE",{});var Qzr=s(hte);Tho=r(Qzr,"pretrained_model_name_or_path"),Qzr.forEach(t),Mho=r(FE,":"),FE.forEach(t),Eho=i(Gt),S=n(Gt,"UL",{});var B=s(S);R_=n(B,"LI",{});var OEe=s(R_);pte=n(OEe,"STRONG",{});var Wzr=s(pte);Cho=r(Wzr,"albert"),Wzr.forEach(t),who=r(OEe," \u2014 "),jP=n(OEe,"A",{href:!0});var Hzr=s(jP);Aho=r(Hzr,"AlbertForPreTraining"),Hzr.forEach(t),yho=r(OEe," (ALBERT model)"),OEe.forEach(t),Lho=i(B),B_=n(B,"LI",{});var VEe=s(B_);_te=n(VEe,"STRONG",{});var Uzr=s(_te);xho=r(Uzr,"bart"),Uzr.forEach(t),kho=r(VEe," \u2014 "),DP=n(VEe,"A",{href:!0});var Jzr=s(DP);Sho=r(Jzr,"BartForConditionalGeneration"),Jzr.forEach(t),Rho=r(VEe," (BART model)"),VEe.forEach(t),Bho=i(B),P_=n(B,"LI",{});var XEe=s(P_);ute=n(XEe,"STRONG",{});var Yzr=s(ute);Pho=r(Yzr,"bert"),Yzr.forEach(t),$ho=r(XEe," \u2014 "),GP=n(XEe,"A",{href:!0});var Kzr=s(GP);Iho=r(Kzr,"BertForPreTraining"),Kzr.forEach(t),qho=r(XEe," (BERT model)"),XEe.forEach(t),Nho=i(B),$_=n(B,"LI",{});var zEe=s($_);bte=n(zEe,"STRONG",{});var Zzr=s(bte);jho=r(Zzr,"big_bird"),Zzr.forEach(t),Dho=r(zEe," \u2014 "),OP=n(zEe,"A",{href:!0});var eQr=s(OP);Gho=r(eQr,"BigBirdForPreTraining"),eQr.forEach(t),Oho=r(zEe," (BigBird model)"),zEe.forEach(t),Vho=i(B),I_=n(B,"LI",{});var QEe=s(I_);Fte=n(QEe,"STRONG",{});var oQr=s(Fte);Xho=r(oQr,"camembert"),oQr.forEach(t),zho=r(QEe," \u2014 "),VP=n(QEe,"A",{href:!0});var rQr=s(VP);Qho=r(rQr,"CamembertForMaskedLM"),rQr.forEach(t),Who=r(QEe," (CamemBERT model)"),QEe.forEach(t),Hho=i(B),q_=n(B,"LI",{});var WEe=s(q_);vte=n(WEe,"STRONG",{});var tQr=s(vte);Uho=r(tQr,"ctrl"),tQr.forEach(t),Jho=r(WEe," \u2014 "),XP=n(WEe,"A",{href:!0});var aQr=s(XP);Yho=r(aQr,"CTRLLMHeadModel"),aQr.forEach(t),Kho=r(WEe," (CTRL model)"),WEe.forEach(t),Zho=i(B),N_=n(B,"LI",{});var HEe=s(N_);Tte=n(HEe,"STRONG",{});var nQr=s(Tte);epo=r(nQr,"data2vec-text"),nQr.forEach(t),opo=r(HEe," \u2014 "),zP=n(HEe,"A",{href:!0});var sQr=s(zP);rpo=r(sQr,"Data2VecTextForMaskedLM"),sQr.forEach(t),tpo=r(HEe," (Data2VecText model)"),HEe.forEach(t),apo=i(B),j_=n(B,"LI",{});var UEe=s(j_);Mte=n(UEe,"STRONG",{});var lQr=s(Mte);npo=r(lQr,"deberta"),lQr.forEach(t),spo=r(UEe," \u2014 "),QP=n(UEe,"A",{href:!0});var iQr=s(QP);lpo=r(iQr,"DebertaForMaskedLM"),iQr.forEach(t),ipo=r(UEe," (DeBERTa model)"),UEe.forEach(t),dpo=i(B),D_=n(B,"LI",{});var JEe=s(D_);Ete=n(JEe,"STRONG",{});var dQr=s(Ete);cpo=r(dQr,"deberta-v2"),dQr.forEach(t),fpo=r(JEe," \u2014 "),WP=n(JEe,"A",{href:!0});var cQr=s(WP);mpo=r(cQr,"DebertaV2ForMaskedLM"),cQr.forEach(t),gpo=r(JEe," (DeBERTa-v2 model)"),JEe.forEach(t),hpo=i(B),G_=n(B,"LI",{});var YEe=s(G_);Cte=n(YEe,"STRONG",{});var fQr=s(Cte);ppo=r(fQr,"distilbert"),fQr.forEach(t),_po=r(YEe," \u2014 "),HP=n(YEe,"A",{href:!0});var mQr=s(HP);upo=r(mQr,"DistilBertForMaskedLM"),mQr.forEach(t),bpo=r(YEe," (DistilBERT model)"),YEe.forEach(t),Fpo=i(B),O_=n(B,"LI",{});var KEe=s(O_);wte=n(KEe,"STRONG",{});var gQr=s(wte);vpo=r(gQr,"electra"),gQr.forEach(t),Tpo=r(KEe," \u2014 "),UP=n(KEe,"A",{href:!0});var hQr=s(UP);Mpo=r(hQr,"ElectraForPreTraining"),hQr.forEach(t),Epo=r(KEe," (ELECTRA model)"),KEe.forEach(t),Cpo=i(B),V_=n(B,"LI",{});var ZEe=s(V_);Ate=n(ZEe,"STRONG",{});var pQr=s(Ate);wpo=r(pQr,"flaubert"),pQr.forEach(t),Apo=r(ZEe," \u2014 "),JP=n(ZEe,"A",{href:!0});var _Qr=s(JP);ypo=r(_Qr,"FlaubertWithLMHeadModel"),_Qr.forEach(t),Lpo=r(ZEe," (FlauBERT model)"),ZEe.forEach(t),xpo=i(B),X_=n(B,"LI",{});var eCe=s(X_);yte=n(eCe,"STRONG",{});var uQr=s(yte);kpo=r(uQr,"fnet"),uQr.forEach(t),Spo=r(eCe," \u2014 "),YP=n(eCe,"A",{href:!0});var bQr=s(YP);Rpo=r(bQr,"FNetForPreTraining"),bQr.forEach(t),Bpo=r(eCe," (FNet model)"),eCe.forEach(t),Ppo=i(B),z_=n(B,"LI",{});var oCe=s(z_);Lte=n(oCe,"STRONG",{});var FQr=s(Lte);$po=r(FQr,"fsmt"),FQr.forEach(t),Ipo=r(oCe," \u2014 "),KP=n(oCe,"A",{href:!0});var vQr=s(KP);qpo=r(vQr,"FSMTForConditionalGeneration"),vQr.forEach(t),Npo=r(oCe," (FairSeq Machine-Translation model)"),oCe.forEach(t),jpo=i(B),Q_=n(B,"LI",{});var rCe=s(Q_);xte=n(rCe,"STRONG",{});var TQr=s(xte);Dpo=r(TQr,"funnel"),TQr.forEach(t),Gpo=r(rCe," \u2014 "),ZP=n(rCe,"A",{href:!0});var MQr=s(ZP);Opo=r(MQr,"FunnelForPreTraining"),MQr.forEach(t),Vpo=r(rCe," (Funnel Transformer model)"),rCe.forEach(t),Xpo=i(B),W_=n(B,"LI",{});var tCe=s(W_);kte=n(tCe,"STRONG",{});var EQr=s(kte);zpo=r(EQr,"gpt2"),EQr.forEach(t),Qpo=r(tCe," \u2014 "),e$=n(tCe,"A",{href:!0});var CQr=s(e$);Wpo=r(CQr,"GPT2LMHeadModel"),CQr.forEach(t),Hpo=r(tCe," (OpenAI GPT-2 model)"),tCe.forEach(t),Upo=i(B),H_=n(B,"LI",{});var aCe=s(H_);Ste=n(aCe,"STRONG",{});var wQr=s(Ste);Jpo=r(wQr,"ibert"),wQr.forEach(t),Ypo=r(aCe," \u2014 "),o$=n(aCe,"A",{href:!0});var AQr=s(o$);Kpo=r(AQr,"IBertForMaskedLM"),AQr.forEach(t),Zpo=r(aCe," (I-BERT model)"),aCe.forEach(t),e_o=i(B),U_=n(B,"LI",{});var nCe=s(U_);Rte=n(nCe,"STRONG",{});var yQr=s(Rte);o_o=r(yQr,"layoutlm"),yQr.forEach(t),r_o=r(nCe," \u2014 "),r$=n(nCe,"A",{href:!0});var LQr=s(r$);t_o=r(LQr,"LayoutLMForMaskedLM"),LQr.forEach(t),a_o=r(nCe," (LayoutLM model)"),nCe.forEach(t),n_o=i(B),J_=n(B,"LI",{});var sCe=s(J_);Bte=n(sCe,"STRONG",{});var xQr=s(Bte);s_o=r(xQr,"longformer"),xQr.forEach(t),l_o=r(sCe," \u2014 "),t$=n(sCe,"A",{href:!0});var kQr=s(t$);i_o=r(kQr,"LongformerForMaskedLM"),kQr.forEach(t),d_o=r(sCe," (Longformer model)"),sCe.forEach(t),c_o=i(B),Y_=n(B,"LI",{});var lCe=s(Y_);Pte=n(lCe,"STRONG",{});var SQr=s(Pte);f_o=r(SQr,"lxmert"),SQr.forEach(t),m_o=r(lCe," \u2014 "),a$=n(lCe,"A",{href:!0});var RQr=s(a$);g_o=r(RQr,"LxmertForPreTraining"),RQr.forEach(t),h_o=r(lCe," (LXMERT model)"),lCe.forEach(t),p_o=i(B),K_=n(B,"LI",{});var iCe=s(K_);$te=n(iCe,"STRONG",{});var BQr=s($te);__o=r(BQr,"megatron-bert"),BQr.forEach(t),u_o=r(iCe," \u2014 "),n$=n(iCe,"A",{href:!0});var PQr=s(n$);b_o=r(PQr,"MegatronBertForPreTraining"),PQr.forEach(t),F_o=r(iCe," (MegatronBert model)"),iCe.forEach(t),v_o=i(B),Z_=n(B,"LI",{});var dCe=s(Z_);Ite=n(dCe,"STRONG",{});var $Qr=s(Ite);T_o=r($Qr,"mobilebert"),$Qr.forEach(t),M_o=r(dCe," \u2014 "),s$=n(dCe,"A",{href:!0});var IQr=s(s$);E_o=r(IQr,"MobileBertForPreTraining"),IQr.forEach(t),C_o=r(dCe," (MobileBERT model)"),dCe.forEach(t),w_o=i(B),eu=n(B,"LI",{});var cCe=s(eu);qte=n(cCe,"STRONG",{});var qQr=s(qte);A_o=r(qQr,"mpnet"),qQr.forEach(t),y_o=r(cCe," \u2014 "),l$=n(cCe,"A",{href:!0});var NQr=s(l$);L_o=r(NQr,"MPNetForMaskedLM"),NQr.forEach(t),x_o=r(cCe," (MPNet model)"),cCe.forEach(t),k_o=i(B),ou=n(B,"LI",{});var fCe=s(ou);Nte=n(fCe,"STRONG",{});var jQr=s(Nte);S_o=r(jQr,"openai-gpt"),jQr.forEach(t),R_o=r(fCe," \u2014 "),i$=n(fCe,"A",{href:!0});var DQr=s(i$);B_o=r(DQr,"OpenAIGPTLMHeadModel"),DQr.forEach(t),P_o=r(fCe," (OpenAI GPT model)"),fCe.forEach(t),$_o=i(B),ru=n(B,"LI",{});var mCe=s(ru);jte=n(mCe,"STRONG",{});var GQr=s(jte);I_o=r(GQr,"retribert"),GQr.forEach(t),q_o=r(mCe," \u2014 "),d$=n(mCe,"A",{href:!0});var OQr=s(d$);N_o=r(OQr,"RetriBertModel"),OQr.forEach(t),j_o=r(mCe," (RetriBERT model)"),mCe.forEach(t),D_o=i(B),tu=n(B,"LI",{});var gCe=s(tu);Dte=n(gCe,"STRONG",{});var VQr=s(Dte);G_o=r(VQr,"roberta"),VQr.forEach(t),O_o=r(gCe," \u2014 "),c$=n(gCe,"A",{href:!0});var XQr=s(c$);V_o=r(XQr,"RobertaForMaskedLM"),XQr.forEach(t),X_o=r(gCe," (RoBERTa model)"),gCe.forEach(t),z_o=i(B),au=n(B,"LI",{});var hCe=s(au);Gte=n(hCe,"STRONG",{});var zQr=s(Gte);Q_o=r(zQr,"squeezebert"),zQr.forEach(t),W_o=r(hCe," \u2014 "),f$=n(hCe,"A",{href:!0});var QQr=s(f$);H_o=r(QQr,"SqueezeBertForMaskedLM"),QQr.forEach(t),U_o=r(hCe," (SqueezeBERT model)"),hCe.forEach(t),J_o=i(B),nu=n(B,"LI",{});var pCe=s(nu);Ote=n(pCe,"STRONG",{});var WQr=s(Ote);Y_o=r(WQr,"t5"),WQr.forEach(t),K_o=r(pCe," \u2014 "),m$=n(pCe,"A",{href:!0});var HQr=s(m$);Z_o=r(HQr,"T5ForConditionalGeneration"),HQr.forEach(t),euo=r(pCe," (T5 model)"),pCe.forEach(t),ouo=i(B),su=n(B,"LI",{});var _Ce=s(su);Vte=n(_Ce,"STRONG",{});var UQr=s(Vte);ruo=r(UQr,"tapas"),UQr.forEach(t),tuo=r(_Ce," \u2014 "),g$=n(_Ce,"A",{href:!0});var JQr=s(g$);auo=r(JQr,"TapasForMaskedLM"),JQr.forEach(t),nuo=r(_Ce," (TAPAS model)"),_Ce.forEach(t),suo=i(B),lu=n(B,"LI",{});var uCe=s(lu);Xte=n(uCe,"STRONG",{});var YQr=s(Xte);luo=r(YQr,"transfo-xl"),YQr.forEach(t),iuo=r(uCe," \u2014 "),h$=n(uCe,"A",{href:!0});var KQr=s(h$);duo=r(KQr,"TransfoXLLMHeadModel"),KQr.forEach(t),cuo=r(uCe," (Transformer-XL model)"),uCe.forEach(t),fuo=i(B),iu=n(B,"LI",{});var bCe=s(iu);zte=n(bCe,"STRONG",{});var ZQr=s(zte);muo=r(ZQr,"unispeech"),ZQr.forEach(t),guo=r(bCe," \u2014 "),p$=n(bCe,"A",{href:!0});var eWr=s(p$);huo=r(eWr,"UniSpeechForPreTraining"),eWr.forEach(t),puo=r(bCe," (UniSpeech model)"),bCe.forEach(t),_uo=i(B),du=n(B,"LI",{});var FCe=s(du);Qte=n(FCe,"STRONG",{});var oWr=s(Qte);uuo=r(oWr,"unispeech-sat"),oWr.forEach(t),buo=r(FCe," \u2014 "),_$=n(FCe,"A",{href:!0});var rWr=s(_$);Fuo=r(rWr,"UniSpeechSatForPreTraining"),rWr.forEach(t),vuo=r(FCe," (UniSpeechSat model)"),FCe.forEach(t),Tuo=i(B),cu=n(B,"LI",{});var vCe=s(cu);Wte=n(vCe,"STRONG",{});var tWr=s(Wte);Muo=r(tWr,"visual_bert"),tWr.forEach(t),Euo=r(vCe," \u2014 "),u$=n(vCe,"A",{href:!0});var aWr=s(u$);Cuo=r(aWr,"VisualBertForPreTraining"),aWr.forEach(t),wuo=r(vCe," (VisualBert model)"),vCe.forEach(t),Auo=i(B),fu=n(B,"LI",{});var TCe=s(fu);Hte=n(TCe,"STRONG",{});var nWr=s(Hte);yuo=r(nWr,"vit_mae"),nWr.forEach(t),Luo=r(TCe," \u2014 "),b$=n(TCe,"A",{href:!0});var sWr=s(b$);xuo=r(sWr,"ViTMAEForPreTraining"),sWr.forEach(t),kuo=r(TCe," (ViTMAE model)"),TCe.forEach(t),Suo=i(B),mu=n(B,"LI",{});var MCe=s(mu);Ute=n(MCe,"STRONG",{});var lWr=s(Ute);Ruo=r(lWr,"wav2vec2"),lWr.forEach(t),Buo=r(MCe," \u2014 "),F$=n(MCe,"A",{href:!0});var iWr=s(F$);Puo=r(iWr,"Wav2Vec2ForPreTraining"),iWr.forEach(t),$uo=r(MCe," (Wav2Vec2 model)"),MCe.forEach(t),Iuo=i(B),gu=n(B,"LI",{});var ECe=s(gu);Jte=n(ECe,"STRONG",{});var dWr=s(Jte);quo=r(dWr,"xlm"),dWr.forEach(t),Nuo=r(ECe," \u2014 "),v$=n(ECe,"A",{href:!0});var cWr=s(v$);juo=r(cWr,"XLMWithLMHeadModel"),cWr.forEach(t),Duo=r(ECe," (XLM model)"),ECe.forEach(t),Guo=i(B),hu=n(B,"LI",{});var CCe=s(hu);Yte=n(CCe,"STRONG",{});var fWr=s(Yte);Ouo=r(fWr,"xlm-roberta"),fWr.forEach(t),Vuo=r(CCe," \u2014 "),T$=n(CCe,"A",{href:!0});var mWr=s(T$);Xuo=r(mWr,"XLMRobertaForMaskedLM"),mWr.forEach(t),zuo=r(CCe," (XLM-RoBERTa model)"),CCe.forEach(t),Quo=i(B),pu=n(B,"LI",{});var wCe=s(pu);Kte=n(wCe,"STRONG",{});var gWr=s(Kte);Wuo=r(gWr,"xlm-roberta-xl"),gWr.forEach(t),Huo=r(wCe," \u2014 "),M$=n(wCe,"A",{href:!0});var hWr=s(M$);Uuo=r(hWr,"XLMRobertaXLForMaskedLM"),hWr.forEach(t),Juo=r(wCe," (XLM-RoBERTa-XL model)"),wCe.forEach(t),Yuo=i(B),_u=n(B,"LI",{});var ACe=s(_u);Zte=n(ACe,"STRONG",{});var pWr=s(Zte);Kuo=r(pWr,"xlnet"),pWr.forEach(t),Zuo=r(ACe," \u2014 "),E$=n(ACe,"A",{href:!0});var _Wr=s(E$);e1o=r(_Wr,"XLNetLMHeadModel"),_Wr.forEach(t),o1o=r(ACe," (XLNet model)"),ACe.forEach(t),B.forEach(t),r1o=i(Gt),uu=n(Gt,"P",{});var yCe=s(uu);t1o=r(yCe,"The model is set in evaluation mode by default using "),eae=n(yCe,"CODE",{});var uWr=s(eae);a1o=r(uWr,"model.eval()"),uWr.forEach(t),n1o=r(yCe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),oae=n(yCe,"CODE",{});var bWr=s(oae);s1o=r(bWr,"model.train()"),bWr.forEach(t),yCe.forEach(t),l1o=i(Gt),rae=n(Gt,"P",{});var FWr=s(rae);i1o=r(FWr,"Examples:"),FWr.forEach(t),d1o=i(Gt),m(l5.$$.fragment,Gt),Gt.forEach(t),Hs.forEach(t),JSe=i(c),rd=n(c,"H2",{class:!0});var nPe=s(rd);bu=n(nPe,"A",{id:!0,class:!0,href:!0});var vWr=s(bu);tae=n(vWr,"SPAN",{});var TWr=s(tae);m(i5.$$.fragment,TWr),TWr.forEach(t),vWr.forEach(t),c1o=i(nPe),aae=n(nPe,"SPAN",{});var MWr=s(aae);f1o=r(MWr,"AutoModelForCausalLM"),MWr.forEach(t),nPe.forEach(t),YSe=i(c),Ko=n(c,"DIV",{class:!0});var Js=s(Ko);m(d5.$$.fragment,Js),m1o=i(Js),td=n(Js,"P",{});var YH=s(td);g1o=r(YH,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),C$=n(YH,"A",{href:!0});var EWr=s(C$);h1o=r(EWr,"from_pretrained()"),EWr.forEach(t),p1o=r(YH," class method or the "),w$=n(YH,"A",{href:!0});var CWr=s(w$);_1o=r(CWr,"from_config()"),CWr.forEach(t),u1o=r(YH,` class
method.`),YH.forEach(t),b1o=i(Js),c5=n(Js,"P",{});var sPe=s(c5);F1o=r(sPe,"This class cannot be instantiated directly using "),nae=n(sPe,"CODE",{});var wWr=s(nae);v1o=r(wWr,"__init__()"),wWr.forEach(t),T1o=r(sPe," (throws an error)."),sPe.forEach(t),M1o=i(Js),Qr=n(Js,"DIV",{class:!0});var Ys=s(Qr);m(f5.$$.fragment,Ys),E1o=i(Ys),sae=n(Ys,"P",{});var AWr=s(sae);C1o=r(AWr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),AWr.forEach(t),w1o=i(Ys),ad=n(Ys,"P",{});var KH=s(ad);A1o=r(KH,`Note:
Loading a model from its configuration file does `),lae=n(KH,"STRONG",{});var yWr=s(lae);y1o=r(yWr,"not"),yWr.forEach(t),L1o=r(KH,` load the model weights. It only affects the
model\u2019s configuration. Use `),A$=n(KH,"A",{href:!0});var LWr=s(A$);x1o=r(LWr,"from_pretrained()"),LWr.forEach(t),k1o=r(KH," to load the model weights."),KH.forEach(t),S1o=i(Ys),iae=n(Ys,"P",{});var xWr=s(iae);R1o=r(xWr,"Examples:"),xWr.forEach(t),B1o=i(Ys),m(m5.$$.fragment,Ys),Ys.forEach(t),P1o=i(Js),je=n(Js,"DIV",{class:!0});var Ot=s(je);m(g5.$$.fragment,Ot),$1o=i(Ot),dae=n(Ot,"P",{});var kWr=s(dae);I1o=r(kWr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),kWr.forEach(t),q1o=i(Ot),Qa=n(Ot,"P",{});var vE=s(Qa);N1o=r(vE,"The model class to instantiate is selected based on the "),cae=n(vE,"CODE",{});var SWr=s(cae);j1o=r(SWr,"model_type"),SWr.forEach(t),D1o=r(vE,` property of the config object (either
passed as an argument or loaded from `),fae=n(vE,"CODE",{});var RWr=s(fae);G1o=r(RWr,"pretrained_model_name_or_path"),RWr.forEach(t),O1o=r(vE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mae=n(vE,"CODE",{});var BWr=s(mae);V1o=r(BWr,"pretrained_model_name_or_path"),BWr.forEach(t),X1o=r(vE,":"),vE.forEach(t),z1o=i(Ot),$=n(Ot,"UL",{});var q=s($);Fu=n(q,"LI",{});var LCe=s(Fu);gae=n(LCe,"STRONG",{});var PWr=s(gae);Q1o=r(PWr,"bart"),PWr.forEach(t),W1o=r(LCe," \u2014 "),y$=n(LCe,"A",{href:!0});var $Wr=s(y$);H1o=r($Wr,"BartForCausalLM"),$Wr.forEach(t),U1o=r(LCe," (BART model)"),LCe.forEach(t),J1o=i(q),vu=n(q,"LI",{});var xCe=s(vu);hae=n(xCe,"STRONG",{});var IWr=s(hae);Y1o=r(IWr,"bert"),IWr.forEach(t),K1o=r(xCe," \u2014 "),L$=n(xCe,"A",{href:!0});var qWr=s(L$);Z1o=r(qWr,"BertLMHeadModel"),qWr.forEach(t),e4o=r(xCe," (BERT model)"),xCe.forEach(t),o4o=i(q),Tu=n(q,"LI",{});var kCe=s(Tu);pae=n(kCe,"STRONG",{});var NWr=s(pae);r4o=r(NWr,"bert-generation"),NWr.forEach(t),t4o=r(kCe," \u2014 "),x$=n(kCe,"A",{href:!0});var jWr=s(x$);a4o=r(jWr,"BertGenerationDecoder"),jWr.forEach(t),n4o=r(kCe," (Bert Generation model)"),kCe.forEach(t),s4o=i(q),Mu=n(q,"LI",{});var SCe=s(Mu);_ae=n(SCe,"STRONG",{});var DWr=s(_ae);l4o=r(DWr,"big_bird"),DWr.forEach(t),i4o=r(SCe," \u2014 "),k$=n(SCe,"A",{href:!0});var GWr=s(k$);d4o=r(GWr,"BigBirdForCausalLM"),GWr.forEach(t),c4o=r(SCe," (BigBird model)"),SCe.forEach(t),f4o=i(q),Eu=n(q,"LI",{});var RCe=s(Eu);uae=n(RCe,"STRONG",{});var OWr=s(uae);m4o=r(OWr,"bigbird_pegasus"),OWr.forEach(t),g4o=r(RCe," \u2014 "),S$=n(RCe,"A",{href:!0});var VWr=s(S$);h4o=r(VWr,"BigBirdPegasusForCausalLM"),VWr.forEach(t),p4o=r(RCe," (BigBirdPegasus model)"),RCe.forEach(t),_4o=i(q),Cu=n(q,"LI",{});var BCe=s(Cu);bae=n(BCe,"STRONG",{});var XWr=s(bae);u4o=r(XWr,"blenderbot"),XWr.forEach(t),b4o=r(BCe," \u2014 "),R$=n(BCe,"A",{href:!0});var zWr=s(R$);F4o=r(zWr,"BlenderbotForCausalLM"),zWr.forEach(t),v4o=r(BCe," (Blenderbot model)"),BCe.forEach(t),T4o=i(q),wu=n(q,"LI",{});var PCe=s(wu);Fae=n(PCe,"STRONG",{});var QWr=s(Fae);M4o=r(QWr,"blenderbot-small"),QWr.forEach(t),E4o=r(PCe," \u2014 "),B$=n(PCe,"A",{href:!0});var WWr=s(B$);C4o=r(WWr,"BlenderbotSmallForCausalLM"),WWr.forEach(t),w4o=r(PCe," (BlenderbotSmall model)"),PCe.forEach(t),A4o=i(q),Au=n(q,"LI",{});var $Ce=s(Au);vae=n($Ce,"STRONG",{});var HWr=s(vae);y4o=r(HWr,"camembert"),HWr.forEach(t),L4o=r($Ce," \u2014 "),P$=n($Ce,"A",{href:!0});var UWr=s(P$);x4o=r(UWr,"CamembertForCausalLM"),UWr.forEach(t),k4o=r($Ce," (CamemBERT model)"),$Ce.forEach(t),S4o=i(q),yu=n(q,"LI",{});var ICe=s(yu);Tae=n(ICe,"STRONG",{});var JWr=s(Tae);R4o=r(JWr,"ctrl"),JWr.forEach(t),B4o=r(ICe," \u2014 "),$$=n(ICe,"A",{href:!0});var YWr=s($$);P4o=r(YWr,"CTRLLMHeadModel"),YWr.forEach(t),$4o=r(ICe," (CTRL model)"),ICe.forEach(t),I4o=i(q),Lu=n(q,"LI",{});var qCe=s(Lu);Mae=n(qCe,"STRONG",{});var KWr=s(Mae);q4o=r(KWr,"data2vec-text"),KWr.forEach(t),N4o=r(qCe," \u2014 "),I$=n(qCe,"A",{href:!0});var ZWr=s(I$);j4o=r(ZWr,"Data2VecTextForCausalLM"),ZWr.forEach(t),D4o=r(qCe," (Data2VecText model)"),qCe.forEach(t),G4o=i(q),xu=n(q,"LI",{});var NCe=s(xu);Eae=n(NCe,"STRONG",{});var eHr=s(Eae);O4o=r(eHr,"electra"),eHr.forEach(t),V4o=r(NCe," \u2014 "),q$=n(NCe,"A",{href:!0});var oHr=s(q$);X4o=r(oHr,"ElectraForCausalLM"),oHr.forEach(t),z4o=r(NCe," (ELECTRA model)"),NCe.forEach(t),Q4o=i(q),ku=n(q,"LI",{});var jCe=s(ku);Cae=n(jCe,"STRONG",{});var rHr=s(Cae);W4o=r(rHr,"gpt2"),rHr.forEach(t),H4o=r(jCe," \u2014 "),N$=n(jCe,"A",{href:!0});var tHr=s(N$);U4o=r(tHr,"GPT2LMHeadModel"),tHr.forEach(t),J4o=r(jCe," (OpenAI GPT-2 model)"),jCe.forEach(t),Y4o=i(q),Su=n(q,"LI",{});var DCe=s(Su);wae=n(DCe,"STRONG",{});var aHr=s(wae);K4o=r(aHr,"gpt_neo"),aHr.forEach(t),Z4o=r(DCe," \u2014 "),j$=n(DCe,"A",{href:!0});var nHr=s(j$);ebo=r(nHr,"GPTNeoForCausalLM"),nHr.forEach(t),obo=r(DCe," (GPT Neo model)"),DCe.forEach(t),rbo=i(q),Ru=n(q,"LI",{});var GCe=s(Ru);Aae=n(GCe,"STRONG",{});var sHr=s(Aae);tbo=r(sHr,"gptj"),sHr.forEach(t),abo=r(GCe," \u2014 "),D$=n(GCe,"A",{href:!0});var lHr=s(D$);nbo=r(lHr,"GPTJForCausalLM"),lHr.forEach(t),sbo=r(GCe," (GPT-J model)"),GCe.forEach(t),lbo=i(q),Bu=n(q,"LI",{});var OCe=s(Bu);yae=n(OCe,"STRONG",{});var iHr=s(yae);ibo=r(iHr,"marian"),iHr.forEach(t),dbo=r(OCe," \u2014 "),G$=n(OCe,"A",{href:!0});var dHr=s(G$);cbo=r(dHr,"MarianForCausalLM"),dHr.forEach(t),fbo=r(OCe," (Marian model)"),OCe.forEach(t),mbo=i(q),Pu=n(q,"LI",{});var VCe=s(Pu);Lae=n(VCe,"STRONG",{});var cHr=s(Lae);gbo=r(cHr,"mbart"),cHr.forEach(t),hbo=r(VCe," \u2014 "),O$=n(VCe,"A",{href:!0});var fHr=s(O$);pbo=r(fHr,"MBartForCausalLM"),fHr.forEach(t),_bo=r(VCe," (mBART model)"),VCe.forEach(t),ubo=i(q),$u=n(q,"LI",{});var XCe=s($u);xae=n(XCe,"STRONG",{});var mHr=s(xae);bbo=r(mHr,"megatron-bert"),mHr.forEach(t),Fbo=r(XCe," \u2014 "),V$=n(XCe,"A",{href:!0});var gHr=s(V$);vbo=r(gHr,"MegatronBertForCausalLM"),gHr.forEach(t),Tbo=r(XCe," (MegatronBert model)"),XCe.forEach(t),Mbo=i(q),Iu=n(q,"LI",{});var zCe=s(Iu);kae=n(zCe,"STRONG",{});var hHr=s(kae);Ebo=r(hHr,"openai-gpt"),hHr.forEach(t),Cbo=r(zCe," \u2014 "),X$=n(zCe,"A",{href:!0});var pHr=s(X$);wbo=r(pHr,"OpenAIGPTLMHeadModel"),pHr.forEach(t),Abo=r(zCe," (OpenAI GPT model)"),zCe.forEach(t),ybo=i(q),qu=n(q,"LI",{});var QCe=s(qu);Sae=n(QCe,"STRONG",{});var _Hr=s(Sae);Lbo=r(_Hr,"pegasus"),_Hr.forEach(t),xbo=r(QCe," \u2014 "),z$=n(QCe,"A",{href:!0});var uHr=s(z$);kbo=r(uHr,"PegasusForCausalLM"),uHr.forEach(t),Sbo=r(QCe," (Pegasus model)"),QCe.forEach(t),Rbo=i(q),Nu=n(q,"LI",{});var WCe=s(Nu);Rae=n(WCe,"STRONG",{});var bHr=s(Rae);Bbo=r(bHr,"plbart"),bHr.forEach(t),Pbo=r(WCe," \u2014 "),Q$=n(WCe,"A",{href:!0});var FHr=s(Q$);$bo=r(FHr,"PLBartForCausalLM"),FHr.forEach(t),Ibo=r(WCe," (PLBart model)"),WCe.forEach(t),qbo=i(q),ju=n(q,"LI",{});var HCe=s(ju);Bae=n(HCe,"STRONG",{});var vHr=s(Bae);Nbo=r(vHr,"prophetnet"),vHr.forEach(t),jbo=r(HCe," \u2014 "),W$=n(HCe,"A",{href:!0});var THr=s(W$);Dbo=r(THr,"ProphetNetForCausalLM"),THr.forEach(t),Gbo=r(HCe," (ProphetNet model)"),HCe.forEach(t),Obo=i(q),Du=n(q,"LI",{});var UCe=s(Du);Pae=n(UCe,"STRONG",{});var MHr=s(Pae);Vbo=r(MHr,"qdqbert"),MHr.forEach(t),Xbo=r(UCe," \u2014 "),H$=n(UCe,"A",{href:!0});var EHr=s(H$);zbo=r(EHr,"QDQBertLMHeadModel"),EHr.forEach(t),Qbo=r(UCe," (QDQBert model)"),UCe.forEach(t),Wbo=i(q),Gu=n(q,"LI",{});var JCe=s(Gu);$ae=n(JCe,"STRONG",{});var CHr=s($ae);Hbo=r(CHr,"reformer"),CHr.forEach(t),Ubo=r(JCe," \u2014 "),U$=n(JCe,"A",{href:!0});var wHr=s(U$);Jbo=r(wHr,"ReformerModelWithLMHead"),wHr.forEach(t),Ybo=r(JCe," (Reformer model)"),JCe.forEach(t),Kbo=i(q),Ou=n(q,"LI",{});var YCe=s(Ou);Iae=n(YCe,"STRONG",{});var AHr=s(Iae);Zbo=r(AHr,"rembert"),AHr.forEach(t),e3o=r(YCe," \u2014 "),J$=n(YCe,"A",{href:!0});var yHr=s(J$);o3o=r(yHr,"RemBertForCausalLM"),yHr.forEach(t),r3o=r(YCe," (RemBERT model)"),YCe.forEach(t),t3o=i(q),Vu=n(q,"LI",{});var KCe=s(Vu);qae=n(KCe,"STRONG",{});var LHr=s(qae);a3o=r(LHr,"roberta"),LHr.forEach(t),n3o=r(KCe," \u2014 "),Y$=n(KCe,"A",{href:!0});var xHr=s(Y$);s3o=r(xHr,"RobertaForCausalLM"),xHr.forEach(t),l3o=r(KCe," (RoBERTa model)"),KCe.forEach(t),i3o=i(q),Xu=n(q,"LI",{});var ZCe=s(Xu);Nae=n(ZCe,"STRONG",{});var kHr=s(Nae);d3o=r(kHr,"roformer"),kHr.forEach(t),c3o=r(ZCe," \u2014 "),K$=n(ZCe,"A",{href:!0});var SHr=s(K$);f3o=r(SHr,"RoFormerForCausalLM"),SHr.forEach(t),m3o=r(ZCe," (RoFormer model)"),ZCe.forEach(t),g3o=i(q),zu=n(q,"LI",{});var e5e=s(zu);jae=n(e5e,"STRONG",{});var RHr=s(jae);h3o=r(RHr,"speech_to_text_2"),RHr.forEach(t),p3o=r(e5e," \u2014 "),Z$=n(e5e,"A",{href:!0});var BHr=s(Z$);_3o=r(BHr,"Speech2Text2ForCausalLM"),BHr.forEach(t),u3o=r(e5e," (Speech2Text2 model)"),e5e.forEach(t),b3o=i(q),Qu=n(q,"LI",{});var o5e=s(Qu);Dae=n(o5e,"STRONG",{});var PHr=s(Dae);F3o=r(PHr,"transfo-xl"),PHr.forEach(t),v3o=r(o5e," \u2014 "),eI=n(o5e,"A",{href:!0});var $Hr=s(eI);T3o=r($Hr,"TransfoXLLMHeadModel"),$Hr.forEach(t),M3o=r(o5e," (Transformer-XL model)"),o5e.forEach(t),E3o=i(q),Wu=n(q,"LI",{});var r5e=s(Wu);Gae=n(r5e,"STRONG",{});var IHr=s(Gae);C3o=r(IHr,"trocr"),IHr.forEach(t),w3o=r(r5e," \u2014 "),oI=n(r5e,"A",{href:!0});var qHr=s(oI);A3o=r(qHr,"TrOCRForCausalLM"),qHr.forEach(t),y3o=r(r5e," (TrOCR model)"),r5e.forEach(t),L3o=i(q),Hu=n(q,"LI",{});var t5e=s(Hu);Oae=n(t5e,"STRONG",{});var NHr=s(Oae);x3o=r(NHr,"xglm"),NHr.forEach(t),k3o=r(t5e," \u2014 "),rI=n(t5e,"A",{href:!0});var jHr=s(rI);S3o=r(jHr,"XGLMForCausalLM"),jHr.forEach(t),R3o=r(t5e," (XGLM model)"),t5e.forEach(t),B3o=i(q),Uu=n(q,"LI",{});var a5e=s(Uu);Vae=n(a5e,"STRONG",{});var DHr=s(Vae);P3o=r(DHr,"xlm"),DHr.forEach(t),$3o=r(a5e," \u2014 "),tI=n(a5e,"A",{href:!0});var GHr=s(tI);I3o=r(GHr,"XLMWithLMHeadModel"),GHr.forEach(t),q3o=r(a5e," (XLM model)"),a5e.forEach(t),N3o=i(q),Ju=n(q,"LI",{});var n5e=s(Ju);Xae=n(n5e,"STRONG",{});var OHr=s(Xae);j3o=r(OHr,"xlm-prophetnet"),OHr.forEach(t),D3o=r(n5e," \u2014 "),aI=n(n5e,"A",{href:!0});var VHr=s(aI);G3o=r(VHr,"XLMProphetNetForCausalLM"),VHr.forEach(t),O3o=r(n5e," (XLMProphetNet model)"),n5e.forEach(t),V3o=i(q),Yu=n(q,"LI",{});var s5e=s(Yu);zae=n(s5e,"STRONG",{});var XHr=s(zae);X3o=r(XHr,"xlm-roberta"),XHr.forEach(t),z3o=r(s5e," \u2014 "),nI=n(s5e,"A",{href:!0});var zHr=s(nI);Q3o=r(zHr,"XLMRobertaForCausalLM"),zHr.forEach(t),W3o=r(s5e," (XLM-RoBERTa model)"),s5e.forEach(t),H3o=i(q),Ku=n(q,"LI",{});var l5e=s(Ku);Qae=n(l5e,"STRONG",{});var QHr=s(Qae);U3o=r(QHr,"xlm-roberta-xl"),QHr.forEach(t),J3o=r(l5e," \u2014 "),sI=n(l5e,"A",{href:!0});var WHr=s(sI);Y3o=r(WHr,"XLMRobertaXLForCausalLM"),WHr.forEach(t),K3o=r(l5e," (XLM-RoBERTa-XL model)"),l5e.forEach(t),Z3o=i(q),Zu=n(q,"LI",{});var i5e=s(Zu);Wae=n(i5e,"STRONG",{});var HHr=s(Wae);e2o=r(HHr,"xlnet"),HHr.forEach(t),o2o=r(i5e," \u2014 "),lI=n(i5e,"A",{href:!0});var UHr=s(lI);r2o=r(UHr,"XLNetLMHeadModel"),UHr.forEach(t),t2o=r(i5e," (XLNet model)"),i5e.forEach(t),q.forEach(t),a2o=i(Ot),e1=n(Ot,"P",{});var d5e=s(e1);n2o=r(d5e,"The model is set in evaluation mode by default using "),Hae=n(d5e,"CODE",{});var JHr=s(Hae);s2o=r(JHr,"model.eval()"),JHr.forEach(t),l2o=r(d5e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Uae=n(d5e,"CODE",{});var YHr=s(Uae);i2o=r(YHr,"model.train()"),YHr.forEach(t),d5e.forEach(t),d2o=i(Ot),Jae=n(Ot,"P",{});var KHr=s(Jae);c2o=r(KHr,"Examples:"),KHr.forEach(t),f2o=i(Ot),m(h5.$$.fragment,Ot),Ot.forEach(t),Js.forEach(t),KSe=i(c),nd=n(c,"H2",{class:!0});var lPe=s(nd);o1=n(lPe,"A",{id:!0,class:!0,href:!0});var ZHr=s(o1);Yae=n(ZHr,"SPAN",{});var eUr=s(Yae);m(p5.$$.fragment,eUr),eUr.forEach(t),ZHr.forEach(t),m2o=i(lPe),Kae=n(lPe,"SPAN",{});var oUr=s(Kae);g2o=r(oUr,"AutoModelForMaskedLM"),oUr.forEach(t),lPe.forEach(t),ZSe=i(c),Zo=n(c,"DIV",{class:!0});var Ks=s(Zo);m(_5.$$.fragment,Ks),h2o=i(Ks),sd=n(Ks,"P",{});var ZH=s(sd);p2o=r(ZH,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),iI=n(ZH,"A",{href:!0});var rUr=s(iI);_2o=r(rUr,"from_pretrained()"),rUr.forEach(t),u2o=r(ZH," class method or the "),dI=n(ZH,"A",{href:!0});var tUr=s(dI);b2o=r(tUr,"from_config()"),tUr.forEach(t),F2o=r(ZH,` class
method.`),ZH.forEach(t),v2o=i(Ks),u5=n(Ks,"P",{});var iPe=s(u5);T2o=r(iPe,"This class cannot be instantiated directly using "),Zae=n(iPe,"CODE",{});var aUr=s(Zae);M2o=r(aUr,"__init__()"),aUr.forEach(t),E2o=r(iPe," (throws an error)."),iPe.forEach(t),C2o=i(Ks),Wr=n(Ks,"DIV",{class:!0});var Zs=s(Wr);m(b5.$$.fragment,Zs),w2o=i(Zs),ene=n(Zs,"P",{});var nUr=s(ene);A2o=r(nUr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),nUr.forEach(t),y2o=i(Zs),ld=n(Zs,"P",{});var eU=s(ld);L2o=r(eU,`Note:
Loading a model from its configuration file does `),one=n(eU,"STRONG",{});var sUr=s(one);x2o=r(sUr,"not"),sUr.forEach(t),k2o=r(eU,` load the model weights. It only affects the
model\u2019s configuration. Use `),cI=n(eU,"A",{href:!0});var lUr=s(cI);S2o=r(lUr,"from_pretrained()"),lUr.forEach(t),R2o=r(eU," to load the model weights."),eU.forEach(t),B2o=i(Zs),rne=n(Zs,"P",{});var iUr=s(rne);P2o=r(iUr,"Examples:"),iUr.forEach(t),$2o=i(Zs),m(F5.$$.fragment,Zs),Zs.forEach(t),I2o=i(Ks),De=n(Ks,"DIV",{class:!0});var Vt=s(De);m(v5.$$.fragment,Vt),q2o=i(Vt),tne=n(Vt,"P",{});var dUr=s(tne);N2o=r(dUr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),dUr.forEach(t),j2o=i(Vt),Wa=n(Vt,"P",{});var TE=s(Wa);D2o=r(TE,"The model class to instantiate is selected based on the "),ane=n(TE,"CODE",{});var cUr=s(ane);G2o=r(cUr,"model_type"),cUr.forEach(t),O2o=r(TE,` property of the config object (either
passed as an argument or loaded from `),nne=n(TE,"CODE",{});var fUr=s(nne);V2o=r(fUr,"pretrained_model_name_or_path"),fUr.forEach(t),X2o=r(TE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sne=n(TE,"CODE",{});var mUr=s(sne);z2o=r(mUr,"pretrained_model_name_or_path"),mUr.forEach(t),Q2o=r(TE,":"),TE.forEach(t),W2o=i(Vt),I=n(Vt,"UL",{});var N=s(I);r1=n(N,"LI",{});var c5e=s(r1);lne=n(c5e,"STRONG",{});var gUr=s(lne);H2o=r(gUr,"albert"),gUr.forEach(t),U2o=r(c5e," \u2014 "),fI=n(c5e,"A",{href:!0});var hUr=s(fI);J2o=r(hUr,"AlbertForMaskedLM"),hUr.forEach(t),Y2o=r(c5e," (ALBERT model)"),c5e.forEach(t),K2o=i(N),t1=n(N,"LI",{});var f5e=s(t1);ine=n(f5e,"STRONG",{});var pUr=s(ine);Z2o=r(pUr,"bart"),pUr.forEach(t),eFo=r(f5e," \u2014 "),mI=n(f5e,"A",{href:!0});var _Ur=s(mI);oFo=r(_Ur,"BartForConditionalGeneration"),_Ur.forEach(t),rFo=r(f5e," (BART model)"),f5e.forEach(t),tFo=i(N),a1=n(N,"LI",{});var m5e=s(a1);dne=n(m5e,"STRONG",{});var uUr=s(dne);aFo=r(uUr,"bert"),uUr.forEach(t),nFo=r(m5e," \u2014 "),gI=n(m5e,"A",{href:!0});var bUr=s(gI);sFo=r(bUr,"BertForMaskedLM"),bUr.forEach(t),lFo=r(m5e," (BERT model)"),m5e.forEach(t),iFo=i(N),n1=n(N,"LI",{});var g5e=s(n1);cne=n(g5e,"STRONG",{});var FUr=s(cne);dFo=r(FUr,"big_bird"),FUr.forEach(t),cFo=r(g5e," \u2014 "),hI=n(g5e,"A",{href:!0});var vUr=s(hI);fFo=r(vUr,"BigBirdForMaskedLM"),vUr.forEach(t),mFo=r(g5e," (BigBird model)"),g5e.forEach(t),gFo=i(N),s1=n(N,"LI",{});var h5e=s(s1);fne=n(h5e,"STRONG",{});var TUr=s(fne);hFo=r(TUr,"camembert"),TUr.forEach(t),pFo=r(h5e," \u2014 "),pI=n(h5e,"A",{href:!0});var MUr=s(pI);_Fo=r(MUr,"CamembertForMaskedLM"),MUr.forEach(t),uFo=r(h5e," (CamemBERT model)"),h5e.forEach(t),bFo=i(N),l1=n(N,"LI",{});var p5e=s(l1);mne=n(p5e,"STRONG",{});var EUr=s(mne);FFo=r(EUr,"convbert"),EUr.forEach(t),vFo=r(p5e," \u2014 "),_I=n(p5e,"A",{href:!0});var CUr=s(_I);TFo=r(CUr,"ConvBertForMaskedLM"),CUr.forEach(t),MFo=r(p5e," (ConvBERT model)"),p5e.forEach(t),EFo=i(N),i1=n(N,"LI",{});var _5e=s(i1);gne=n(_5e,"STRONG",{});var wUr=s(gne);CFo=r(wUr,"data2vec-text"),wUr.forEach(t),wFo=r(_5e," \u2014 "),uI=n(_5e,"A",{href:!0});var AUr=s(uI);AFo=r(AUr,"Data2VecTextForMaskedLM"),AUr.forEach(t),yFo=r(_5e," (Data2VecText model)"),_5e.forEach(t),LFo=i(N),d1=n(N,"LI",{});var u5e=s(d1);hne=n(u5e,"STRONG",{});var yUr=s(hne);xFo=r(yUr,"deberta"),yUr.forEach(t),kFo=r(u5e," \u2014 "),bI=n(u5e,"A",{href:!0});var LUr=s(bI);SFo=r(LUr,"DebertaForMaskedLM"),LUr.forEach(t),RFo=r(u5e," (DeBERTa model)"),u5e.forEach(t),BFo=i(N),c1=n(N,"LI",{});var b5e=s(c1);pne=n(b5e,"STRONG",{});var xUr=s(pne);PFo=r(xUr,"deberta-v2"),xUr.forEach(t),$Fo=r(b5e," \u2014 "),FI=n(b5e,"A",{href:!0});var kUr=s(FI);IFo=r(kUr,"DebertaV2ForMaskedLM"),kUr.forEach(t),qFo=r(b5e," (DeBERTa-v2 model)"),b5e.forEach(t),NFo=i(N),f1=n(N,"LI",{});var F5e=s(f1);_ne=n(F5e,"STRONG",{});var SUr=s(_ne);jFo=r(SUr,"distilbert"),SUr.forEach(t),DFo=r(F5e," \u2014 "),vI=n(F5e,"A",{href:!0});var RUr=s(vI);GFo=r(RUr,"DistilBertForMaskedLM"),RUr.forEach(t),OFo=r(F5e," (DistilBERT model)"),F5e.forEach(t),VFo=i(N),m1=n(N,"LI",{});var v5e=s(m1);une=n(v5e,"STRONG",{});var BUr=s(une);XFo=r(BUr,"electra"),BUr.forEach(t),zFo=r(v5e," \u2014 "),TI=n(v5e,"A",{href:!0});var PUr=s(TI);QFo=r(PUr,"ElectraForMaskedLM"),PUr.forEach(t),WFo=r(v5e," (ELECTRA model)"),v5e.forEach(t),HFo=i(N),g1=n(N,"LI",{});var T5e=s(g1);bne=n(T5e,"STRONG",{});var $Ur=s(bne);UFo=r($Ur,"flaubert"),$Ur.forEach(t),JFo=r(T5e," \u2014 "),MI=n(T5e,"A",{href:!0});var IUr=s(MI);YFo=r(IUr,"FlaubertWithLMHeadModel"),IUr.forEach(t),KFo=r(T5e," (FlauBERT model)"),T5e.forEach(t),ZFo=i(N),h1=n(N,"LI",{});var M5e=s(h1);Fne=n(M5e,"STRONG",{});var qUr=s(Fne);evo=r(qUr,"fnet"),qUr.forEach(t),ovo=r(M5e," \u2014 "),EI=n(M5e,"A",{href:!0});var NUr=s(EI);rvo=r(NUr,"FNetForMaskedLM"),NUr.forEach(t),tvo=r(M5e," (FNet model)"),M5e.forEach(t),avo=i(N),p1=n(N,"LI",{});var E5e=s(p1);vne=n(E5e,"STRONG",{});var jUr=s(vne);nvo=r(jUr,"funnel"),jUr.forEach(t),svo=r(E5e," \u2014 "),CI=n(E5e,"A",{href:!0});var DUr=s(CI);lvo=r(DUr,"FunnelForMaskedLM"),DUr.forEach(t),ivo=r(E5e," (Funnel Transformer model)"),E5e.forEach(t),dvo=i(N),_1=n(N,"LI",{});var C5e=s(_1);Tne=n(C5e,"STRONG",{});var GUr=s(Tne);cvo=r(GUr,"ibert"),GUr.forEach(t),fvo=r(C5e," \u2014 "),wI=n(C5e,"A",{href:!0});var OUr=s(wI);mvo=r(OUr,"IBertForMaskedLM"),OUr.forEach(t),gvo=r(C5e," (I-BERT model)"),C5e.forEach(t),hvo=i(N),u1=n(N,"LI",{});var w5e=s(u1);Mne=n(w5e,"STRONG",{});var VUr=s(Mne);pvo=r(VUr,"layoutlm"),VUr.forEach(t),_vo=r(w5e," \u2014 "),AI=n(w5e,"A",{href:!0});var XUr=s(AI);uvo=r(XUr,"LayoutLMForMaskedLM"),XUr.forEach(t),bvo=r(w5e," (LayoutLM model)"),w5e.forEach(t),Fvo=i(N),b1=n(N,"LI",{});var A5e=s(b1);Ene=n(A5e,"STRONG",{});var zUr=s(Ene);vvo=r(zUr,"longformer"),zUr.forEach(t),Tvo=r(A5e," \u2014 "),yI=n(A5e,"A",{href:!0});var QUr=s(yI);Mvo=r(QUr,"LongformerForMaskedLM"),QUr.forEach(t),Evo=r(A5e," (Longformer model)"),A5e.forEach(t),Cvo=i(N),F1=n(N,"LI",{});var y5e=s(F1);Cne=n(y5e,"STRONG",{});var WUr=s(Cne);wvo=r(WUr,"mbart"),WUr.forEach(t),Avo=r(y5e," \u2014 "),LI=n(y5e,"A",{href:!0});var HUr=s(LI);yvo=r(HUr,"MBartForConditionalGeneration"),HUr.forEach(t),Lvo=r(y5e," (mBART model)"),y5e.forEach(t),xvo=i(N),v1=n(N,"LI",{});var L5e=s(v1);wne=n(L5e,"STRONG",{});var UUr=s(wne);kvo=r(UUr,"megatron-bert"),UUr.forEach(t),Svo=r(L5e," \u2014 "),xI=n(L5e,"A",{href:!0});var JUr=s(xI);Rvo=r(JUr,"MegatronBertForMaskedLM"),JUr.forEach(t),Bvo=r(L5e," (MegatronBert model)"),L5e.forEach(t),Pvo=i(N),T1=n(N,"LI",{});var x5e=s(T1);Ane=n(x5e,"STRONG",{});var YUr=s(Ane);$vo=r(YUr,"mobilebert"),YUr.forEach(t),Ivo=r(x5e," \u2014 "),kI=n(x5e,"A",{href:!0});var KUr=s(kI);qvo=r(KUr,"MobileBertForMaskedLM"),KUr.forEach(t),Nvo=r(x5e," (MobileBERT model)"),x5e.forEach(t),jvo=i(N),M1=n(N,"LI",{});var k5e=s(M1);yne=n(k5e,"STRONG",{});var ZUr=s(yne);Dvo=r(ZUr,"mpnet"),ZUr.forEach(t),Gvo=r(k5e," \u2014 "),SI=n(k5e,"A",{href:!0});var eJr=s(SI);Ovo=r(eJr,"MPNetForMaskedLM"),eJr.forEach(t),Vvo=r(k5e," (MPNet model)"),k5e.forEach(t),Xvo=i(N),E1=n(N,"LI",{});var S5e=s(E1);Lne=n(S5e,"STRONG",{});var oJr=s(Lne);zvo=r(oJr,"nystromformer"),oJr.forEach(t),Qvo=r(S5e," \u2014 "),RI=n(S5e,"A",{href:!0});var rJr=s(RI);Wvo=r(rJr,"NystromformerForMaskedLM"),rJr.forEach(t),Hvo=r(S5e," (Nystromformer model)"),S5e.forEach(t),Uvo=i(N),C1=n(N,"LI",{});var R5e=s(C1);xne=n(R5e,"STRONG",{});var tJr=s(xne);Jvo=r(tJr,"perceiver"),tJr.forEach(t),Yvo=r(R5e," \u2014 "),BI=n(R5e,"A",{href:!0});var aJr=s(BI);Kvo=r(aJr,"PerceiverForMaskedLM"),aJr.forEach(t),Zvo=r(R5e," (Perceiver model)"),R5e.forEach(t),e6o=i(N),w1=n(N,"LI",{});var B5e=s(w1);kne=n(B5e,"STRONG",{});var nJr=s(kne);o6o=r(nJr,"qdqbert"),nJr.forEach(t),r6o=r(B5e," \u2014 "),PI=n(B5e,"A",{href:!0});var sJr=s(PI);t6o=r(sJr,"QDQBertForMaskedLM"),sJr.forEach(t),a6o=r(B5e," (QDQBert model)"),B5e.forEach(t),n6o=i(N),A1=n(N,"LI",{});var P5e=s(A1);Sne=n(P5e,"STRONG",{});var lJr=s(Sne);s6o=r(lJr,"reformer"),lJr.forEach(t),l6o=r(P5e," \u2014 "),$I=n(P5e,"A",{href:!0});var iJr=s($I);i6o=r(iJr,"ReformerForMaskedLM"),iJr.forEach(t),d6o=r(P5e," (Reformer model)"),P5e.forEach(t),c6o=i(N),y1=n(N,"LI",{});var $5e=s(y1);Rne=n($5e,"STRONG",{});var dJr=s(Rne);f6o=r(dJr,"rembert"),dJr.forEach(t),m6o=r($5e," \u2014 "),II=n($5e,"A",{href:!0});var cJr=s(II);g6o=r(cJr,"RemBertForMaskedLM"),cJr.forEach(t),h6o=r($5e," (RemBERT model)"),$5e.forEach(t),p6o=i(N),L1=n(N,"LI",{});var I5e=s(L1);Bne=n(I5e,"STRONG",{});var fJr=s(Bne);_6o=r(fJr,"roberta"),fJr.forEach(t),u6o=r(I5e," \u2014 "),qI=n(I5e,"A",{href:!0});var mJr=s(qI);b6o=r(mJr,"RobertaForMaskedLM"),mJr.forEach(t),F6o=r(I5e," (RoBERTa model)"),I5e.forEach(t),v6o=i(N),x1=n(N,"LI",{});var q5e=s(x1);Pne=n(q5e,"STRONG",{});var gJr=s(Pne);T6o=r(gJr,"roformer"),gJr.forEach(t),M6o=r(q5e," \u2014 "),NI=n(q5e,"A",{href:!0});var hJr=s(NI);E6o=r(hJr,"RoFormerForMaskedLM"),hJr.forEach(t),C6o=r(q5e," (RoFormer model)"),q5e.forEach(t),w6o=i(N),k1=n(N,"LI",{});var N5e=s(k1);$ne=n(N5e,"STRONG",{});var pJr=s($ne);A6o=r(pJr,"squeezebert"),pJr.forEach(t),y6o=r(N5e," \u2014 "),jI=n(N5e,"A",{href:!0});var _Jr=s(jI);L6o=r(_Jr,"SqueezeBertForMaskedLM"),_Jr.forEach(t),x6o=r(N5e," (SqueezeBERT model)"),N5e.forEach(t),k6o=i(N),S1=n(N,"LI",{});var j5e=s(S1);Ine=n(j5e,"STRONG",{});var uJr=s(Ine);S6o=r(uJr,"tapas"),uJr.forEach(t),R6o=r(j5e," \u2014 "),DI=n(j5e,"A",{href:!0});var bJr=s(DI);B6o=r(bJr,"TapasForMaskedLM"),bJr.forEach(t),P6o=r(j5e," (TAPAS model)"),j5e.forEach(t),$6o=i(N),R1=n(N,"LI",{});var D5e=s(R1);qne=n(D5e,"STRONG",{});var FJr=s(qne);I6o=r(FJr,"wav2vec2"),FJr.forEach(t),q6o=r(D5e," \u2014 "),Nne=n(D5e,"CODE",{});var vJr=s(Nne);N6o=r(vJr,"Wav2Vec2ForMaskedLM"),vJr.forEach(t),j6o=r(D5e,"(Wav2Vec2 model)"),D5e.forEach(t),D6o=i(N),B1=n(N,"LI",{});var G5e=s(B1);jne=n(G5e,"STRONG",{});var TJr=s(jne);G6o=r(TJr,"xlm"),TJr.forEach(t),O6o=r(G5e," \u2014 "),GI=n(G5e,"A",{href:!0});var MJr=s(GI);V6o=r(MJr,"XLMWithLMHeadModel"),MJr.forEach(t),X6o=r(G5e," (XLM model)"),G5e.forEach(t),z6o=i(N),P1=n(N,"LI",{});var O5e=s(P1);Dne=n(O5e,"STRONG",{});var EJr=s(Dne);Q6o=r(EJr,"xlm-roberta"),EJr.forEach(t),W6o=r(O5e," \u2014 "),OI=n(O5e,"A",{href:!0});var CJr=s(OI);H6o=r(CJr,"XLMRobertaForMaskedLM"),CJr.forEach(t),U6o=r(O5e," (XLM-RoBERTa model)"),O5e.forEach(t),J6o=i(N),$1=n(N,"LI",{});var V5e=s($1);Gne=n(V5e,"STRONG",{});var wJr=s(Gne);Y6o=r(wJr,"xlm-roberta-xl"),wJr.forEach(t),K6o=r(V5e," \u2014 "),VI=n(V5e,"A",{href:!0});var AJr=s(VI);Z6o=r(AJr,"XLMRobertaXLForMaskedLM"),AJr.forEach(t),eTo=r(V5e," (XLM-RoBERTa-XL model)"),V5e.forEach(t),oTo=i(N),I1=n(N,"LI",{});var X5e=s(I1);One=n(X5e,"STRONG",{});var yJr=s(One);rTo=r(yJr,"yoso"),yJr.forEach(t),tTo=r(X5e," \u2014 "),XI=n(X5e,"A",{href:!0});var LJr=s(XI);aTo=r(LJr,"YosoForMaskedLM"),LJr.forEach(t),nTo=r(X5e," (YOSO model)"),X5e.forEach(t),N.forEach(t),sTo=i(Vt),q1=n(Vt,"P",{});var z5e=s(q1);lTo=r(z5e,"The model is set in evaluation mode by default using "),Vne=n(z5e,"CODE",{});var xJr=s(Vne);iTo=r(xJr,"model.eval()"),xJr.forEach(t),dTo=r(z5e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xne=n(z5e,"CODE",{});var kJr=s(Xne);cTo=r(kJr,"model.train()"),kJr.forEach(t),z5e.forEach(t),fTo=i(Vt),zne=n(Vt,"P",{});var SJr=s(zne);mTo=r(SJr,"Examples:"),SJr.forEach(t),gTo=i(Vt),m(T5.$$.fragment,Vt),Vt.forEach(t),Ks.forEach(t),eRe=i(c),id=n(c,"H2",{class:!0});var dPe=s(id);N1=n(dPe,"A",{id:!0,class:!0,href:!0});var RJr=s(N1);Qne=n(RJr,"SPAN",{});var BJr=s(Qne);m(M5.$$.fragment,BJr),BJr.forEach(t),RJr.forEach(t),hTo=i(dPe),Wne=n(dPe,"SPAN",{});var PJr=s(Wne);pTo=r(PJr,"AutoModelForSeq2SeqLM"),PJr.forEach(t),dPe.forEach(t),oRe=i(c),er=n(c,"DIV",{class:!0});var el=s(er);m(E5.$$.fragment,el),_To=i(el),dd=n(el,"P",{});var oU=s(dd);uTo=r(oU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),zI=n(oU,"A",{href:!0});var $Jr=s(zI);bTo=r($Jr,"from_pretrained()"),$Jr.forEach(t),FTo=r(oU," class method or the "),QI=n(oU,"A",{href:!0});var IJr=s(QI);vTo=r(IJr,"from_config()"),IJr.forEach(t),TTo=r(oU,` class
method.`),oU.forEach(t),MTo=i(el),C5=n(el,"P",{});var cPe=s(C5);ETo=r(cPe,"This class cannot be instantiated directly using "),Hne=n(cPe,"CODE",{});var qJr=s(Hne);CTo=r(qJr,"__init__()"),qJr.forEach(t),wTo=r(cPe," (throws an error)."),cPe.forEach(t),ATo=i(el),Hr=n(el,"DIV",{class:!0});var ol=s(Hr);m(w5.$$.fragment,ol),yTo=i(ol),Une=n(ol,"P",{});var NJr=s(Une);LTo=r(NJr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),NJr.forEach(t),xTo=i(ol),cd=n(ol,"P",{});var rU=s(cd);kTo=r(rU,`Note:
Loading a model from its configuration file does `),Jne=n(rU,"STRONG",{});var jJr=s(Jne);STo=r(jJr,"not"),jJr.forEach(t),RTo=r(rU,` load the model weights. It only affects the
model\u2019s configuration. Use `),WI=n(rU,"A",{href:!0});var DJr=s(WI);BTo=r(DJr,"from_pretrained()"),DJr.forEach(t),PTo=r(rU," to load the model weights."),rU.forEach(t),$To=i(ol),Yne=n(ol,"P",{});var GJr=s(Yne);ITo=r(GJr,"Examples:"),GJr.forEach(t),qTo=i(ol),m(A5.$$.fragment,ol),ol.forEach(t),NTo=i(el),Ge=n(el,"DIV",{class:!0});var Xt=s(Ge);m(y5.$$.fragment,Xt),jTo=i(Xt),Kne=n(Xt,"P",{});var OJr=s(Kne);DTo=r(OJr,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),OJr.forEach(t),GTo=i(Xt),Ha=n(Xt,"P",{});var ME=s(Ha);OTo=r(ME,"The model class to instantiate is selected based on the "),Zne=n(ME,"CODE",{});var VJr=s(Zne);VTo=r(VJr,"model_type"),VJr.forEach(t),XTo=r(ME,` property of the config object (either
passed as an argument or loaded from `),ese=n(ME,"CODE",{});var XJr=s(ese);zTo=r(XJr,"pretrained_model_name_or_path"),XJr.forEach(t),QTo=r(ME,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ose=n(ME,"CODE",{});var zJr=s(ose);WTo=r(zJr,"pretrained_model_name_or_path"),zJr.forEach(t),HTo=r(ME,":"),ME.forEach(t),UTo=i(Xt),se=n(Xt,"UL",{});var ie=s(se);j1=n(ie,"LI",{});var Q5e=s(j1);rse=n(Q5e,"STRONG",{});var QJr=s(rse);JTo=r(QJr,"bart"),QJr.forEach(t),YTo=r(Q5e," \u2014 "),HI=n(Q5e,"A",{href:!0});var WJr=s(HI);KTo=r(WJr,"BartForConditionalGeneration"),WJr.forEach(t),ZTo=r(Q5e," (BART model)"),Q5e.forEach(t),e7o=i(ie),D1=n(ie,"LI",{});var W5e=s(D1);tse=n(W5e,"STRONG",{});var HJr=s(tse);o7o=r(HJr,"bigbird_pegasus"),HJr.forEach(t),r7o=r(W5e," \u2014 "),UI=n(W5e,"A",{href:!0});var UJr=s(UI);t7o=r(UJr,"BigBirdPegasusForConditionalGeneration"),UJr.forEach(t),a7o=r(W5e," (BigBirdPegasus model)"),W5e.forEach(t),n7o=i(ie),G1=n(ie,"LI",{});var H5e=s(G1);ase=n(H5e,"STRONG",{});var JJr=s(ase);s7o=r(JJr,"blenderbot"),JJr.forEach(t),l7o=r(H5e," \u2014 "),JI=n(H5e,"A",{href:!0});var YJr=s(JI);i7o=r(YJr,"BlenderbotForConditionalGeneration"),YJr.forEach(t),d7o=r(H5e," (Blenderbot model)"),H5e.forEach(t),c7o=i(ie),O1=n(ie,"LI",{});var U5e=s(O1);nse=n(U5e,"STRONG",{});var KJr=s(nse);f7o=r(KJr,"blenderbot-small"),KJr.forEach(t),m7o=r(U5e," \u2014 "),YI=n(U5e,"A",{href:!0});var ZJr=s(YI);g7o=r(ZJr,"BlenderbotSmallForConditionalGeneration"),ZJr.forEach(t),h7o=r(U5e," (BlenderbotSmall model)"),U5e.forEach(t),p7o=i(ie),V1=n(ie,"LI",{});var J5e=s(V1);sse=n(J5e,"STRONG",{});var eYr=s(sse);_7o=r(eYr,"encoder-decoder"),eYr.forEach(t),u7o=r(J5e," \u2014 "),KI=n(J5e,"A",{href:!0});var oYr=s(KI);b7o=r(oYr,"EncoderDecoderModel"),oYr.forEach(t),F7o=r(J5e," (Encoder decoder model)"),J5e.forEach(t),v7o=i(ie),X1=n(ie,"LI",{});var Y5e=s(X1);lse=n(Y5e,"STRONG",{});var rYr=s(lse);T7o=r(rYr,"fsmt"),rYr.forEach(t),M7o=r(Y5e," \u2014 "),ZI=n(Y5e,"A",{href:!0});var tYr=s(ZI);E7o=r(tYr,"FSMTForConditionalGeneration"),tYr.forEach(t),C7o=r(Y5e," (FairSeq Machine-Translation model)"),Y5e.forEach(t),w7o=i(ie),z1=n(ie,"LI",{});var K5e=s(z1);ise=n(K5e,"STRONG",{});var aYr=s(ise);A7o=r(aYr,"led"),aYr.forEach(t),y7o=r(K5e," \u2014 "),eq=n(K5e,"A",{href:!0});var nYr=s(eq);L7o=r(nYr,"LEDForConditionalGeneration"),nYr.forEach(t),x7o=r(K5e," (LED model)"),K5e.forEach(t),k7o=i(ie),Q1=n(ie,"LI",{});var Z5e=s(Q1);dse=n(Z5e,"STRONG",{});var sYr=s(dse);S7o=r(sYr,"m2m_100"),sYr.forEach(t),R7o=r(Z5e," \u2014 "),oq=n(Z5e,"A",{href:!0});var lYr=s(oq);B7o=r(lYr,"M2M100ForConditionalGeneration"),lYr.forEach(t),P7o=r(Z5e," (M2M100 model)"),Z5e.forEach(t),$7o=i(ie),W1=n(ie,"LI",{});var ewe=s(W1);cse=n(ewe,"STRONG",{});var iYr=s(cse);I7o=r(iYr,"marian"),iYr.forEach(t),q7o=r(ewe," \u2014 "),rq=n(ewe,"A",{href:!0});var dYr=s(rq);N7o=r(dYr,"MarianMTModel"),dYr.forEach(t),j7o=r(ewe," (Marian model)"),ewe.forEach(t),D7o=i(ie),H1=n(ie,"LI",{});var owe=s(H1);fse=n(owe,"STRONG",{});var cYr=s(fse);G7o=r(cYr,"mbart"),cYr.forEach(t),O7o=r(owe," \u2014 "),tq=n(owe,"A",{href:!0});var fYr=s(tq);V7o=r(fYr,"MBartForConditionalGeneration"),fYr.forEach(t),X7o=r(owe," (mBART model)"),owe.forEach(t),z7o=i(ie),U1=n(ie,"LI",{});var rwe=s(U1);mse=n(rwe,"STRONG",{});var mYr=s(mse);Q7o=r(mYr,"mt5"),mYr.forEach(t),W7o=r(rwe," \u2014 "),aq=n(rwe,"A",{href:!0});var gYr=s(aq);H7o=r(gYr,"MT5ForConditionalGeneration"),gYr.forEach(t),U7o=r(rwe," (mT5 model)"),rwe.forEach(t),J7o=i(ie),J1=n(ie,"LI",{});var twe=s(J1);gse=n(twe,"STRONG",{});var hYr=s(gse);Y7o=r(hYr,"pegasus"),hYr.forEach(t),K7o=r(twe," \u2014 "),nq=n(twe,"A",{href:!0});var pYr=s(nq);Z7o=r(pYr,"PegasusForConditionalGeneration"),pYr.forEach(t),eMo=r(twe," (Pegasus model)"),twe.forEach(t),oMo=i(ie),Y1=n(ie,"LI",{});var awe=s(Y1);hse=n(awe,"STRONG",{});var _Yr=s(hse);rMo=r(_Yr,"plbart"),_Yr.forEach(t),tMo=r(awe," \u2014 "),sq=n(awe,"A",{href:!0});var uYr=s(sq);aMo=r(uYr,"PLBartForConditionalGeneration"),uYr.forEach(t),nMo=r(awe," (PLBart model)"),awe.forEach(t),sMo=i(ie),K1=n(ie,"LI",{});var nwe=s(K1);pse=n(nwe,"STRONG",{});var bYr=s(pse);lMo=r(bYr,"prophetnet"),bYr.forEach(t),iMo=r(nwe," \u2014 "),lq=n(nwe,"A",{href:!0});var FYr=s(lq);dMo=r(FYr,"ProphetNetForConditionalGeneration"),FYr.forEach(t),cMo=r(nwe," (ProphetNet model)"),nwe.forEach(t),fMo=i(ie),Z1=n(ie,"LI",{});var swe=s(Z1);_se=n(swe,"STRONG",{});var vYr=s(_se);mMo=r(vYr,"t5"),vYr.forEach(t),gMo=r(swe," \u2014 "),iq=n(swe,"A",{href:!0});var TYr=s(iq);hMo=r(TYr,"T5ForConditionalGeneration"),TYr.forEach(t),pMo=r(swe," (T5 model)"),swe.forEach(t),_Mo=i(ie),e4=n(ie,"LI",{});var lwe=s(e4);use=n(lwe,"STRONG",{});var MYr=s(use);uMo=r(MYr,"xlm-prophetnet"),MYr.forEach(t),bMo=r(lwe," \u2014 "),dq=n(lwe,"A",{href:!0});var EYr=s(dq);FMo=r(EYr,"XLMProphetNetForConditionalGeneration"),EYr.forEach(t),vMo=r(lwe," (XLMProphetNet model)"),lwe.forEach(t),ie.forEach(t),TMo=i(Xt),o4=n(Xt,"P",{});var iwe=s(o4);MMo=r(iwe,"The model is set in evaluation mode by default using "),bse=n(iwe,"CODE",{});var CYr=s(bse);EMo=r(CYr,"model.eval()"),CYr.forEach(t),CMo=r(iwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fse=n(iwe,"CODE",{});var wYr=s(Fse);wMo=r(wYr,"model.train()"),wYr.forEach(t),iwe.forEach(t),AMo=i(Xt),vse=n(Xt,"P",{});var AYr=s(vse);yMo=r(AYr,"Examples:"),AYr.forEach(t),LMo=i(Xt),m(L5.$$.fragment,Xt),Xt.forEach(t),el.forEach(t),rRe=i(c),fd=n(c,"H2",{class:!0});var fPe=s(fd);r4=n(fPe,"A",{id:!0,class:!0,href:!0});var yYr=s(r4);Tse=n(yYr,"SPAN",{});var LYr=s(Tse);m(x5.$$.fragment,LYr),LYr.forEach(t),yYr.forEach(t),xMo=i(fPe),Mse=n(fPe,"SPAN",{});var xYr=s(Mse);kMo=r(xYr,"AutoModelForSequenceClassification"),xYr.forEach(t),fPe.forEach(t),tRe=i(c),or=n(c,"DIV",{class:!0});var rl=s(or);m(k5.$$.fragment,rl),SMo=i(rl),md=n(rl,"P",{});var tU=s(md);RMo=r(tU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),cq=n(tU,"A",{href:!0});var kYr=s(cq);BMo=r(kYr,"from_pretrained()"),kYr.forEach(t),PMo=r(tU," class method or the "),fq=n(tU,"A",{href:!0});var SYr=s(fq);$Mo=r(SYr,"from_config()"),SYr.forEach(t),IMo=r(tU,` class
method.`),tU.forEach(t),qMo=i(rl),S5=n(rl,"P",{});var mPe=s(S5);NMo=r(mPe,"This class cannot be instantiated directly using "),Ese=n(mPe,"CODE",{});var RYr=s(Ese);jMo=r(RYr,"__init__()"),RYr.forEach(t),DMo=r(mPe," (throws an error)."),mPe.forEach(t),GMo=i(rl),Ur=n(rl,"DIV",{class:!0});var tl=s(Ur);m(R5.$$.fragment,tl),OMo=i(tl),Cse=n(tl,"P",{});var BYr=s(Cse);VMo=r(BYr,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),BYr.forEach(t),XMo=i(tl),gd=n(tl,"P",{});var aU=s(gd);zMo=r(aU,`Note:
Loading a model from its configuration file does `),wse=n(aU,"STRONG",{});var PYr=s(wse);QMo=r(PYr,"not"),PYr.forEach(t),WMo=r(aU,` load the model weights. It only affects the
model\u2019s configuration. Use `),mq=n(aU,"A",{href:!0});var $Yr=s(mq);HMo=r($Yr,"from_pretrained()"),$Yr.forEach(t),UMo=r(aU," to load the model weights."),aU.forEach(t),JMo=i(tl),Ase=n(tl,"P",{});var IYr=s(Ase);YMo=r(IYr,"Examples:"),IYr.forEach(t),KMo=i(tl),m(B5.$$.fragment,tl),tl.forEach(t),ZMo=i(rl),Oe=n(rl,"DIV",{class:!0});var zt=s(Oe);m(P5.$$.fragment,zt),eEo=i(zt),yse=n(zt,"P",{});var qYr=s(yse);oEo=r(qYr,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),qYr.forEach(t),rEo=i(zt),Ua=n(zt,"P",{});var EE=s(Ua);tEo=r(EE,"The model class to instantiate is selected based on the "),Lse=n(EE,"CODE",{});var NYr=s(Lse);aEo=r(NYr,"model_type"),NYr.forEach(t),nEo=r(EE,` property of the config object (either
passed as an argument or loaded from `),xse=n(EE,"CODE",{});var jYr=s(xse);sEo=r(jYr,"pretrained_model_name_or_path"),jYr.forEach(t),lEo=r(EE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kse=n(EE,"CODE",{});var DYr=s(kse);iEo=r(DYr,"pretrained_model_name_or_path"),DYr.forEach(t),dEo=r(EE,":"),EE.forEach(t),cEo=i(zt),y=n(zt,"UL",{});var L=s(y);t4=n(L,"LI",{});var dwe=s(t4);Sse=n(dwe,"STRONG",{});var GYr=s(Sse);fEo=r(GYr,"albert"),GYr.forEach(t),mEo=r(dwe," \u2014 "),gq=n(dwe,"A",{href:!0});var OYr=s(gq);gEo=r(OYr,"AlbertForSequenceClassification"),OYr.forEach(t),hEo=r(dwe," (ALBERT model)"),dwe.forEach(t),pEo=i(L),a4=n(L,"LI",{});var cwe=s(a4);Rse=n(cwe,"STRONG",{});var VYr=s(Rse);_Eo=r(VYr,"bart"),VYr.forEach(t),uEo=r(cwe," \u2014 "),hq=n(cwe,"A",{href:!0});var XYr=s(hq);bEo=r(XYr,"BartForSequenceClassification"),XYr.forEach(t),FEo=r(cwe," (BART model)"),cwe.forEach(t),vEo=i(L),n4=n(L,"LI",{});var fwe=s(n4);Bse=n(fwe,"STRONG",{});var zYr=s(Bse);TEo=r(zYr,"bert"),zYr.forEach(t),MEo=r(fwe," \u2014 "),pq=n(fwe,"A",{href:!0});var QYr=s(pq);EEo=r(QYr,"BertForSequenceClassification"),QYr.forEach(t),CEo=r(fwe," (BERT model)"),fwe.forEach(t),wEo=i(L),s4=n(L,"LI",{});var mwe=s(s4);Pse=n(mwe,"STRONG",{});var WYr=s(Pse);AEo=r(WYr,"big_bird"),WYr.forEach(t),yEo=r(mwe," \u2014 "),_q=n(mwe,"A",{href:!0});var HYr=s(_q);LEo=r(HYr,"BigBirdForSequenceClassification"),HYr.forEach(t),xEo=r(mwe," (BigBird model)"),mwe.forEach(t),kEo=i(L),l4=n(L,"LI",{});var gwe=s(l4);$se=n(gwe,"STRONG",{});var UYr=s($se);SEo=r(UYr,"bigbird_pegasus"),UYr.forEach(t),REo=r(gwe," \u2014 "),uq=n(gwe,"A",{href:!0});var JYr=s(uq);BEo=r(JYr,"BigBirdPegasusForSequenceClassification"),JYr.forEach(t),PEo=r(gwe," (BigBirdPegasus model)"),gwe.forEach(t),$Eo=i(L),i4=n(L,"LI",{});var hwe=s(i4);Ise=n(hwe,"STRONG",{});var YYr=s(Ise);IEo=r(YYr,"camembert"),YYr.forEach(t),qEo=r(hwe," \u2014 "),bq=n(hwe,"A",{href:!0});var KYr=s(bq);NEo=r(KYr,"CamembertForSequenceClassification"),KYr.forEach(t),jEo=r(hwe," (CamemBERT model)"),hwe.forEach(t),DEo=i(L),d4=n(L,"LI",{});var pwe=s(d4);qse=n(pwe,"STRONG",{});var ZYr=s(qse);GEo=r(ZYr,"canine"),ZYr.forEach(t),OEo=r(pwe," \u2014 "),Fq=n(pwe,"A",{href:!0});var eKr=s(Fq);VEo=r(eKr,"CanineForSequenceClassification"),eKr.forEach(t),XEo=r(pwe," (Canine model)"),pwe.forEach(t),zEo=i(L),c4=n(L,"LI",{});var _we=s(c4);Nse=n(_we,"STRONG",{});var oKr=s(Nse);QEo=r(oKr,"convbert"),oKr.forEach(t),WEo=r(_we," \u2014 "),vq=n(_we,"A",{href:!0});var rKr=s(vq);HEo=r(rKr,"ConvBertForSequenceClassification"),rKr.forEach(t),UEo=r(_we," (ConvBERT model)"),_we.forEach(t),JEo=i(L),f4=n(L,"LI",{});var uwe=s(f4);jse=n(uwe,"STRONG",{});var tKr=s(jse);YEo=r(tKr,"ctrl"),tKr.forEach(t),KEo=r(uwe," \u2014 "),Tq=n(uwe,"A",{href:!0});var aKr=s(Tq);ZEo=r(aKr,"CTRLForSequenceClassification"),aKr.forEach(t),eCo=r(uwe," (CTRL model)"),uwe.forEach(t),oCo=i(L),m4=n(L,"LI",{});var bwe=s(m4);Dse=n(bwe,"STRONG",{});var nKr=s(Dse);rCo=r(nKr,"data2vec-text"),nKr.forEach(t),tCo=r(bwe," \u2014 "),Mq=n(bwe,"A",{href:!0});var sKr=s(Mq);aCo=r(sKr,"Data2VecTextForSequenceClassification"),sKr.forEach(t),nCo=r(bwe," (Data2VecText model)"),bwe.forEach(t),sCo=i(L),g4=n(L,"LI",{});var Fwe=s(g4);Gse=n(Fwe,"STRONG",{});var lKr=s(Gse);lCo=r(lKr,"deberta"),lKr.forEach(t),iCo=r(Fwe," \u2014 "),Eq=n(Fwe,"A",{href:!0});var iKr=s(Eq);dCo=r(iKr,"DebertaForSequenceClassification"),iKr.forEach(t),cCo=r(Fwe," (DeBERTa model)"),Fwe.forEach(t),fCo=i(L),h4=n(L,"LI",{});var vwe=s(h4);Ose=n(vwe,"STRONG",{});var dKr=s(Ose);mCo=r(dKr,"deberta-v2"),dKr.forEach(t),gCo=r(vwe," \u2014 "),Cq=n(vwe,"A",{href:!0});var cKr=s(Cq);hCo=r(cKr,"DebertaV2ForSequenceClassification"),cKr.forEach(t),pCo=r(vwe," (DeBERTa-v2 model)"),vwe.forEach(t),_Co=i(L),p4=n(L,"LI",{});var Twe=s(p4);Vse=n(Twe,"STRONG",{});var fKr=s(Vse);uCo=r(fKr,"distilbert"),fKr.forEach(t),bCo=r(Twe," \u2014 "),wq=n(Twe,"A",{href:!0});var mKr=s(wq);FCo=r(mKr,"DistilBertForSequenceClassification"),mKr.forEach(t),vCo=r(Twe," (DistilBERT model)"),Twe.forEach(t),TCo=i(L),_4=n(L,"LI",{});var Mwe=s(_4);Xse=n(Mwe,"STRONG",{});var gKr=s(Xse);MCo=r(gKr,"electra"),gKr.forEach(t),ECo=r(Mwe," \u2014 "),Aq=n(Mwe,"A",{href:!0});var hKr=s(Aq);CCo=r(hKr,"ElectraForSequenceClassification"),hKr.forEach(t),wCo=r(Mwe," (ELECTRA model)"),Mwe.forEach(t),ACo=i(L),u4=n(L,"LI",{});var Ewe=s(u4);zse=n(Ewe,"STRONG",{});var pKr=s(zse);yCo=r(pKr,"flaubert"),pKr.forEach(t),LCo=r(Ewe," \u2014 "),yq=n(Ewe,"A",{href:!0});var _Kr=s(yq);xCo=r(_Kr,"FlaubertForSequenceClassification"),_Kr.forEach(t),kCo=r(Ewe," (FlauBERT model)"),Ewe.forEach(t),SCo=i(L),b4=n(L,"LI",{});var Cwe=s(b4);Qse=n(Cwe,"STRONG",{});var uKr=s(Qse);RCo=r(uKr,"fnet"),uKr.forEach(t),BCo=r(Cwe," \u2014 "),Lq=n(Cwe,"A",{href:!0});var bKr=s(Lq);PCo=r(bKr,"FNetForSequenceClassification"),bKr.forEach(t),$Co=r(Cwe," (FNet model)"),Cwe.forEach(t),ICo=i(L),F4=n(L,"LI",{});var wwe=s(F4);Wse=n(wwe,"STRONG",{});var FKr=s(Wse);qCo=r(FKr,"funnel"),FKr.forEach(t),NCo=r(wwe," \u2014 "),xq=n(wwe,"A",{href:!0});var vKr=s(xq);jCo=r(vKr,"FunnelForSequenceClassification"),vKr.forEach(t),DCo=r(wwe," (Funnel Transformer model)"),wwe.forEach(t),GCo=i(L),v4=n(L,"LI",{});var Awe=s(v4);Hse=n(Awe,"STRONG",{});var TKr=s(Hse);OCo=r(TKr,"gpt2"),TKr.forEach(t),VCo=r(Awe," \u2014 "),kq=n(Awe,"A",{href:!0});var MKr=s(kq);XCo=r(MKr,"GPT2ForSequenceClassification"),MKr.forEach(t),zCo=r(Awe," (OpenAI GPT-2 model)"),Awe.forEach(t),QCo=i(L),T4=n(L,"LI",{});var ywe=s(T4);Use=n(ywe,"STRONG",{});var EKr=s(Use);WCo=r(EKr,"gpt_neo"),EKr.forEach(t),HCo=r(ywe," \u2014 "),Sq=n(ywe,"A",{href:!0});var CKr=s(Sq);UCo=r(CKr,"GPTNeoForSequenceClassification"),CKr.forEach(t),JCo=r(ywe," (GPT Neo model)"),ywe.forEach(t),YCo=i(L),M4=n(L,"LI",{});var Lwe=s(M4);Jse=n(Lwe,"STRONG",{});var wKr=s(Jse);KCo=r(wKr,"gptj"),wKr.forEach(t),ZCo=r(Lwe," \u2014 "),Rq=n(Lwe,"A",{href:!0});var AKr=s(Rq);e5o=r(AKr,"GPTJForSequenceClassification"),AKr.forEach(t),o5o=r(Lwe," (GPT-J model)"),Lwe.forEach(t),r5o=i(L),E4=n(L,"LI",{});var xwe=s(E4);Yse=n(xwe,"STRONG",{});var yKr=s(Yse);t5o=r(yKr,"ibert"),yKr.forEach(t),a5o=r(xwe," \u2014 "),Bq=n(xwe,"A",{href:!0});var LKr=s(Bq);n5o=r(LKr,"IBertForSequenceClassification"),LKr.forEach(t),s5o=r(xwe," (I-BERT model)"),xwe.forEach(t),l5o=i(L),C4=n(L,"LI",{});var kwe=s(C4);Kse=n(kwe,"STRONG",{});var xKr=s(Kse);i5o=r(xKr,"layoutlm"),xKr.forEach(t),d5o=r(kwe," \u2014 "),Pq=n(kwe,"A",{href:!0});var kKr=s(Pq);c5o=r(kKr,"LayoutLMForSequenceClassification"),kKr.forEach(t),f5o=r(kwe," (LayoutLM model)"),kwe.forEach(t),m5o=i(L),w4=n(L,"LI",{});var Swe=s(w4);Zse=n(Swe,"STRONG",{});var SKr=s(Zse);g5o=r(SKr,"layoutlmv2"),SKr.forEach(t),h5o=r(Swe," \u2014 "),$q=n(Swe,"A",{href:!0});var RKr=s($q);p5o=r(RKr,"LayoutLMv2ForSequenceClassification"),RKr.forEach(t),_5o=r(Swe," (LayoutLMv2 model)"),Swe.forEach(t),u5o=i(L),A4=n(L,"LI",{});var Rwe=s(A4);ele=n(Rwe,"STRONG",{});var BKr=s(ele);b5o=r(BKr,"led"),BKr.forEach(t),F5o=r(Rwe," \u2014 "),Iq=n(Rwe,"A",{href:!0});var PKr=s(Iq);v5o=r(PKr,"LEDForSequenceClassification"),PKr.forEach(t),T5o=r(Rwe," (LED model)"),Rwe.forEach(t),M5o=i(L),y4=n(L,"LI",{});var Bwe=s(y4);ole=n(Bwe,"STRONG",{});var $Kr=s(ole);E5o=r($Kr,"longformer"),$Kr.forEach(t),C5o=r(Bwe," \u2014 "),qq=n(Bwe,"A",{href:!0});var IKr=s(qq);w5o=r(IKr,"LongformerForSequenceClassification"),IKr.forEach(t),A5o=r(Bwe," (Longformer model)"),Bwe.forEach(t),y5o=i(L),L4=n(L,"LI",{});var Pwe=s(L4);rle=n(Pwe,"STRONG",{});var qKr=s(rle);L5o=r(qKr,"mbart"),qKr.forEach(t),x5o=r(Pwe," \u2014 "),Nq=n(Pwe,"A",{href:!0});var NKr=s(Nq);k5o=r(NKr,"MBartForSequenceClassification"),NKr.forEach(t),S5o=r(Pwe," (mBART model)"),Pwe.forEach(t),R5o=i(L),x4=n(L,"LI",{});var $we=s(x4);tle=n($we,"STRONG",{});var jKr=s(tle);B5o=r(jKr,"megatron-bert"),jKr.forEach(t),P5o=r($we," \u2014 "),jq=n($we,"A",{href:!0});var DKr=s(jq);$5o=r(DKr,"MegatronBertForSequenceClassification"),DKr.forEach(t),I5o=r($we," (MegatronBert model)"),$we.forEach(t),q5o=i(L),k4=n(L,"LI",{});var Iwe=s(k4);ale=n(Iwe,"STRONG",{});var GKr=s(ale);N5o=r(GKr,"mobilebert"),GKr.forEach(t),j5o=r(Iwe," \u2014 "),Dq=n(Iwe,"A",{href:!0});var OKr=s(Dq);D5o=r(OKr,"MobileBertForSequenceClassification"),OKr.forEach(t),G5o=r(Iwe," (MobileBERT model)"),Iwe.forEach(t),O5o=i(L),S4=n(L,"LI",{});var qwe=s(S4);nle=n(qwe,"STRONG",{});var VKr=s(nle);V5o=r(VKr,"mpnet"),VKr.forEach(t),X5o=r(qwe," \u2014 "),Gq=n(qwe,"A",{href:!0});var XKr=s(Gq);z5o=r(XKr,"MPNetForSequenceClassification"),XKr.forEach(t),Q5o=r(qwe," (MPNet model)"),qwe.forEach(t),W5o=i(L),R4=n(L,"LI",{});var Nwe=s(R4);sle=n(Nwe,"STRONG",{});var zKr=s(sle);H5o=r(zKr,"nystromformer"),zKr.forEach(t),U5o=r(Nwe," \u2014 "),Oq=n(Nwe,"A",{href:!0});var QKr=s(Oq);J5o=r(QKr,"NystromformerForSequenceClassification"),QKr.forEach(t),Y5o=r(Nwe," (Nystromformer model)"),Nwe.forEach(t),K5o=i(L),B4=n(L,"LI",{});var jwe=s(B4);lle=n(jwe,"STRONG",{});var WKr=s(lle);Z5o=r(WKr,"openai-gpt"),WKr.forEach(t),ewo=r(jwe," \u2014 "),Vq=n(jwe,"A",{href:!0});var HKr=s(Vq);owo=r(HKr,"OpenAIGPTForSequenceClassification"),HKr.forEach(t),rwo=r(jwe," (OpenAI GPT model)"),jwe.forEach(t),two=i(L),P4=n(L,"LI",{});var Dwe=s(P4);ile=n(Dwe,"STRONG",{});var UKr=s(ile);awo=r(UKr,"perceiver"),UKr.forEach(t),nwo=r(Dwe," \u2014 "),Xq=n(Dwe,"A",{href:!0});var JKr=s(Xq);swo=r(JKr,"PerceiverForSequenceClassification"),JKr.forEach(t),lwo=r(Dwe," (Perceiver model)"),Dwe.forEach(t),iwo=i(L),$4=n(L,"LI",{});var Gwe=s($4);dle=n(Gwe,"STRONG",{});var YKr=s(dle);dwo=r(YKr,"plbart"),YKr.forEach(t),cwo=r(Gwe," \u2014 "),zq=n(Gwe,"A",{href:!0});var KKr=s(zq);fwo=r(KKr,"PLBartForSequenceClassification"),KKr.forEach(t),mwo=r(Gwe," (PLBart model)"),Gwe.forEach(t),gwo=i(L),I4=n(L,"LI",{});var Owe=s(I4);cle=n(Owe,"STRONG",{});var ZKr=s(cle);hwo=r(ZKr,"qdqbert"),ZKr.forEach(t),pwo=r(Owe," \u2014 "),Qq=n(Owe,"A",{href:!0});var eZr=s(Qq);_wo=r(eZr,"QDQBertForSequenceClassification"),eZr.forEach(t),uwo=r(Owe," (QDQBert model)"),Owe.forEach(t),bwo=i(L),q4=n(L,"LI",{});var Vwe=s(q4);fle=n(Vwe,"STRONG",{});var oZr=s(fle);Fwo=r(oZr,"reformer"),oZr.forEach(t),vwo=r(Vwe," \u2014 "),Wq=n(Vwe,"A",{href:!0});var rZr=s(Wq);Two=r(rZr,"ReformerForSequenceClassification"),rZr.forEach(t),Mwo=r(Vwe," (Reformer model)"),Vwe.forEach(t),Ewo=i(L),N4=n(L,"LI",{});var Xwe=s(N4);mle=n(Xwe,"STRONG",{});var tZr=s(mle);Cwo=r(tZr,"rembert"),tZr.forEach(t),wwo=r(Xwe," \u2014 "),Hq=n(Xwe,"A",{href:!0});var aZr=s(Hq);Awo=r(aZr,"RemBertForSequenceClassification"),aZr.forEach(t),ywo=r(Xwe," (RemBERT model)"),Xwe.forEach(t),Lwo=i(L),j4=n(L,"LI",{});var zwe=s(j4);gle=n(zwe,"STRONG",{});var nZr=s(gle);xwo=r(nZr,"roberta"),nZr.forEach(t),kwo=r(zwe," \u2014 "),Uq=n(zwe,"A",{href:!0});var sZr=s(Uq);Swo=r(sZr,"RobertaForSequenceClassification"),sZr.forEach(t),Rwo=r(zwe," (RoBERTa model)"),zwe.forEach(t),Bwo=i(L),D4=n(L,"LI",{});var Qwe=s(D4);hle=n(Qwe,"STRONG",{});var lZr=s(hle);Pwo=r(lZr,"roformer"),lZr.forEach(t),$wo=r(Qwe," \u2014 "),Jq=n(Qwe,"A",{href:!0});var iZr=s(Jq);Iwo=r(iZr,"RoFormerForSequenceClassification"),iZr.forEach(t),qwo=r(Qwe," (RoFormer model)"),Qwe.forEach(t),Nwo=i(L),G4=n(L,"LI",{});var Wwe=s(G4);ple=n(Wwe,"STRONG",{});var dZr=s(ple);jwo=r(dZr,"squeezebert"),dZr.forEach(t),Dwo=r(Wwe," \u2014 "),Yq=n(Wwe,"A",{href:!0});var cZr=s(Yq);Gwo=r(cZr,"SqueezeBertForSequenceClassification"),cZr.forEach(t),Owo=r(Wwe," (SqueezeBERT model)"),Wwe.forEach(t),Vwo=i(L),O4=n(L,"LI",{});var Hwe=s(O4);_le=n(Hwe,"STRONG",{});var fZr=s(_le);Xwo=r(fZr,"tapas"),fZr.forEach(t),zwo=r(Hwe," \u2014 "),Kq=n(Hwe,"A",{href:!0});var mZr=s(Kq);Qwo=r(mZr,"TapasForSequenceClassification"),mZr.forEach(t),Wwo=r(Hwe," (TAPAS model)"),Hwe.forEach(t),Hwo=i(L),V4=n(L,"LI",{});var Uwe=s(V4);ule=n(Uwe,"STRONG",{});var gZr=s(ule);Uwo=r(gZr,"transfo-xl"),gZr.forEach(t),Jwo=r(Uwe," \u2014 "),Zq=n(Uwe,"A",{href:!0});var hZr=s(Zq);Ywo=r(hZr,"TransfoXLForSequenceClassification"),hZr.forEach(t),Kwo=r(Uwe," (Transformer-XL model)"),Uwe.forEach(t),Zwo=i(L),X4=n(L,"LI",{});var Jwe=s(X4);ble=n(Jwe,"STRONG",{});var pZr=s(ble);eAo=r(pZr,"xlm"),pZr.forEach(t),oAo=r(Jwe," \u2014 "),eN=n(Jwe,"A",{href:!0});var _Zr=s(eN);rAo=r(_Zr,"XLMForSequenceClassification"),_Zr.forEach(t),tAo=r(Jwe," (XLM model)"),Jwe.forEach(t),aAo=i(L),z4=n(L,"LI",{});var Ywe=s(z4);Fle=n(Ywe,"STRONG",{});var uZr=s(Fle);nAo=r(uZr,"xlm-roberta"),uZr.forEach(t),sAo=r(Ywe," \u2014 "),oN=n(Ywe,"A",{href:!0});var bZr=s(oN);lAo=r(bZr,"XLMRobertaForSequenceClassification"),bZr.forEach(t),iAo=r(Ywe," (XLM-RoBERTa model)"),Ywe.forEach(t),dAo=i(L),Q4=n(L,"LI",{});var Kwe=s(Q4);vle=n(Kwe,"STRONG",{});var FZr=s(vle);cAo=r(FZr,"xlm-roberta-xl"),FZr.forEach(t),fAo=r(Kwe," \u2014 "),rN=n(Kwe,"A",{href:!0});var vZr=s(rN);mAo=r(vZr,"XLMRobertaXLForSequenceClassification"),vZr.forEach(t),gAo=r(Kwe," (XLM-RoBERTa-XL model)"),Kwe.forEach(t),hAo=i(L),W4=n(L,"LI",{});var Zwe=s(W4);Tle=n(Zwe,"STRONG",{});var TZr=s(Tle);pAo=r(TZr,"xlnet"),TZr.forEach(t),_Ao=r(Zwe," \u2014 "),tN=n(Zwe,"A",{href:!0});var MZr=s(tN);uAo=r(MZr,"XLNetForSequenceClassification"),MZr.forEach(t),bAo=r(Zwe," (XLNet model)"),Zwe.forEach(t),FAo=i(L),H4=n(L,"LI",{});var eAe=s(H4);Mle=n(eAe,"STRONG",{});var EZr=s(Mle);vAo=r(EZr,"yoso"),EZr.forEach(t),TAo=r(eAe," \u2014 "),aN=n(eAe,"A",{href:!0});var CZr=s(aN);MAo=r(CZr,"YosoForSequenceClassification"),CZr.forEach(t),EAo=r(eAe," (YOSO model)"),eAe.forEach(t),L.forEach(t),CAo=i(zt),U4=n(zt,"P",{});var oAe=s(U4);wAo=r(oAe,"The model is set in evaluation mode by default using "),Ele=n(oAe,"CODE",{});var wZr=s(Ele);AAo=r(wZr,"model.eval()"),wZr.forEach(t),yAo=r(oAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cle=n(oAe,"CODE",{});var AZr=s(Cle);LAo=r(AZr,"model.train()"),AZr.forEach(t),oAe.forEach(t),xAo=i(zt),wle=n(zt,"P",{});var yZr=s(wle);kAo=r(yZr,"Examples:"),yZr.forEach(t),SAo=i(zt),m($5.$$.fragment,zt),zt.forEach(t),rl.forEach(t),aRe=i(c),hd=n(c,"H2",{class:!0});var gPe=s(hd);J4=n(gPe,"A",{id:!0,class:!0,href:!0});var LZr=s(J4);Ale=n(LZr,"SPAN",{});var xZr=s(Ale);m(I5.$$.fragment,xZr),xZr.forEach(t),LZr.forEach(t),RAo=i(gPe),yle=n(gPe,"SPAN",{});var kZr=s(yle);BAo=r(kZr,"AutoModelForMultipleChoice"),kZr.forEach(t),gPe.forEach(t),nRe=i(c),rr=n(c,"DIV",{class:!0});var al=s(rr);m(q5.$$.fragment,al),PAo=i(al),pd=n(al,"P",{});var nU=s(pd);$Ao=r(nU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),nN=n(nU,"A",{href:!0});var SZr=s(nN);IAo=r(SZr,"from_pretrained()"),SZr.forEach(t),qAo=r(nU," class method or the "),sN=n(nU,"A",{href:!0});var RZr=s(sN);NAo=r(RZr,"from_config()"),RZr.forEach(t),jAo=r(nU,` class
method.`),nU.forEach(t),DAo=i(al),N5=n(al,"P",{});var hPe=s(N5);GAo=r(hPe,"This class cannot be instantiated directly using "),Lle=n(hPe,"CODE",{});var BZr=s(Lle);OAo=r(BZr,"__init__()"),BZr.forEach(t),VAo=r(hPe," (throws an error)."),hPe.forEach(t),XAo=i(al),Jr=n(al,"DIV",{class:!0});var nl=s(Jr);m(j5.$$.fragment,nl),zAo=i(nl),xle=n(nl,"P",{});var PZr=s(xle);QAo=r(PZr,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),PZr.forEach(t),WAo=i(nl),_d=n(nl,"P",{});var sU=s(_d);HAo=r(sU,`Note:
Loading a model from its configuration file does `),kle=n(sU,"STRONG",{});var $Zr=s(kle);UAo=r($Zr,"not"),$Zr.forEach(t),JAo=r(sU,` load the model weights. It only affects the
model\u2019s configuration. Use `),lN=n(sU,"A",{href:!0});var IZr=s(lN);YAo=r(IZr,"from_pretrained()"),IZr.forEach(t),KAo=r(sU," to load the model weights."),sU.forEach(t),ZAo=i(nl),Sle=n(nl,"P",{});var qZr=s(Sle);e0o=r(qZr,"Examples:"),qZr.forEach(t),o0o=i(nl),m(D5.$$.fragment,nl),nl.forEach(t),r0o=i(al),Ve=n(al,"DIV",{class:!0});var Qt=s(Ve);m(G5.$$.fragment,Qt),t0o=i(Qt),Rle=n(Qt,"P",{});var NZr=s(Rle);a0o=r(NZr,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),NZr.forEach(t),n0o=i(Qt),Ja=n(Qt,"P",{});var CE=s(Ja);s0o=r(CE,"The model class to instantiate is selected based on the "),Ble=n(CE,"CODE",{});var jZr=s(Ble);l0o=r(jZr,"model_type"),jZr.forEach(t),i0o=r(CE,` property of the config object (either
passed as an argument or loaded from `),Ple=n(CE,"CODE",{});var DZr=s(Ple);d0o=r(DZr,"pretrained_model_name_or_path"),DZr.forEach(t),c0o=r(CE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$le=n(CE,"CODE",{});var GZr=s($le);f0o=r(GZr,"pretrained_model_name_or_path"),GZr.forEach(t),m0o=r(CE,":"),CE.forEach(t),g0o=i(Qt),G=n(Qt,"UL",{});var O=s(G);Y4=n(O,"LI",{});var rAe=s(Y4);Ile=n(rAe,"STRONG",{});var OZr=s(Ile);h0o=r(OZr,"albert"),OZr.forEach(t),p0o=r(rAe," \u2014 "),iN=n(rAe,"A",{href:!0});var VZr=s(iN);_0o=r(VZr,"AlbertForMultipleChoice"),VZr.forEach(t),u0o=r(rAe," (ALBERT model)"),rAe.forEach(t),b0o=i(O),K4=n(O,"LI",{});var tAe=s(K4);qle=n(tAe,"STRONG",{});var XZr=s(qle);F0o=r(XZr,"bert"),XZr.forEach(t),v0o=r(tAe," \u2014 "),dN=n(tAe,"A",{href:!0});var zZr=s(dN);T0o=r(zZr,"BertForMultipleChoice"),zZr.forEach(t),M0o=r(tAe," (BERT model)"),tAe.forEach(t),E0o=i(O),Z4=n(O,"LI",{});var aAe=s(Z4);Nle=n(aAe,"STRONG",{});var QZr=s(Nle);C0o=r(QZr,"big_bird"),QZr.forEach(t),w0o=r(aAe," \u2014 "),cN=n(aAe,"A",{href:!0});var WZr=s(cN);A0o=r(WZr,"BigBirdForMultipleChoice"),WZr.forEach(t),y0o=r(aAe," (BigBird model)"),aAe.forEach(t),L0o=i(O),eb=n(O,"LI",{});var nAe=s(eb);jle=n(nAe,"STRONG",{});var HZr=s(jle);x0o=r(HZr,"camembert"),HZr.forEach(t),k0o=r(nAe," \u2014 "),fN=n(nAe,"A",{href:!0});var UZr=s(fN);S0o=r(UZr,"CamembertForMultipleChoice"),UZr.forEach(t),R0o=r(nAe," (CamemBERT model)"),nAe.forEach(t),B0o=i(O),ob=n(O,"LI",{});var sAe=s(ob);Dle=n(sAe,"STRONG",{});var JZr=s(Dle);P0o=r(JZr,"canine"),JZr.forEach(t),$0o=r(sAe," \u2014 "),mN=n(sAe,"A",{href:!0});var YZr=s(mN);I0o=r(YZr,"CanineForMultipleChoice"),YZr.forEach(t),q0o=r(sAe," (Canine model)"),sAe.forEach(t),N0o=i(O),rb=n(O,"LI",{});var lAe=s(rb);Gle=n(lAe,"STRONG",{});var KZr=s(Gle);j0o=r(KZr,"convbert"),KZr.forEach(t),D0o=r(lAe," \u2014 "),gN=n(lAe,"A",{href:!0});var ZZr=s(gN);G0o=r(ZZr,"ConvBertForMultipleChoice"),ZZr.forEach(t),O0o=r(lAe," (ConvBERT model)"),lAe.forEach(t),V0o=i(O),tb=n(O,"LI",{});var iAe=s(tb);Ole=n(iAe,"STRONG",{});var eet=s(Ole);X0o=r(eet,"data2vec-text"),eet.forEach(t),z0o=r(iAe," \u2014 "),hN=n(iAe,"A",{href:!0});var oet=s(hN);Q0o=r(oet,"Data2VecTextForMultipleChoice"),oet.forEach(t),W0o=r(iAe," (Data2VecText model)"),iAe.forEach(t),H0o=i(O),ab=n(O,"LI",{});var dAe=s(ab);Vle=n(dAe,"STRONG",{});var ret=s(Vle);U0o=r(ret,"distilbert"),ret.forEach(t),J0o=r(dAe," \u2014 "),pN=n(dAe,"A",{href:!0});var tet=s(pN);Y0o=r(tet,"DistilBertForMultipleChoice"),tet.forEach(t),K0o=r(dAe," (DistilBERT model)"),dAe.forEach(t),Z0o=i(O),nb=n(O,"LI",{});var cAe=s(nb);Xle=n(cAe,"STRONG",{});var aet=s(Xle);eyo=r(aet,"electra"),aet.forEach(t),oyo=r(cAe," \u2014 "),_N=n(cAe,"A",{href:!0});var net=s(_N);ryo=r(net,"ElectraForMultipleChoice"),net.forEach(t),tyo=r(cAe," (ELECTRA model)"),cAe.forEach(t),ayo=i(O),sb=n(O,"LI",{});var fAe=s(sb);zle=n(fAe,"STRONG",{});var set=s(zle);nyo=r(set,"flaubert"),set.forEach(t),syo=r(fAe," \u2014 "),uN=n(fAe,"A",{href:!0});var iet=s(uN);lyo=r(iet,"FlaubertForMultipleChoice"),iet.forEach(t),iyo=r(fAe," (FlauBERT model)"),fAe.forEach(t),dyo=i(O),lb=n(O,"LI",{});var mAe=s(lb);Qle=n(mAe,"STRONG",{});var det=s(Qle);cyo=r(det,"fnet"),det.forEach(t),fyo=r(mAe," \u2014 "),bN=n(mAe,"A",{href:!0});var cet=s(bN);myo=r(cet,"FNetForMultipleChoice"),cet.forEach(t),gyo=r(mAe," (FNet model)"),mAe.forEach(t),hyo=i(O),ib=n(O,"LI",{});var gAe=s(ib);Wle=n(gAe,"STRONG",{});var fet=s(Wle);pyo=r(fet,"funnel"),fet.forEach(t),_yo=r(gAe," \u2014 "),FN=n(gAe,"A",{href:!0});var met=s(FN);uyo=r(met,"FunnelForMultipleChoice"),met.forEach(t),byo=r(gAe," (Funnel Transformer model)"),gAe.forEach(t),Fyo=i(O),db=n(O,"LI",{});var hAe=s(db);Hle=n(hAe,"STRONG",{});var get=s(Hle);vyo=r(get,"ibert"),get.forEach(t),Tyo=r(hAe," \u2014 "),vN=n(hAe,"A",{href:!0});var het=s(vN);Myo=r(het,"IBertForMultipleChoice"),het.forEach(t),Eyo=r(hAe," (I-BERT model)"),hAe.forEach(t),Cyo=i(O),cb=n(O,"LI",{});var pAe=s(cb);Ule=n(pAe,"STRONG",{});var pet=s(Ule);wyo=r(pet,"longformer"),pet.forEach(t),Ayo=r(pAe," \u2014 "),TN=n(pAe,"A",{href:!0});var _et=s(TN);yyo=r(_et,"LongformerForMultipleChoice"),_et.forEach(t),Lyo=r(pAe," (Longformer model)"),pAe.forEach(t),xyo=i(O),fb=n(O,"LI",{});var _Ae=s(fb);Jle=n(_Ae,"STRONG",{});var uet=s(Jle);kyo=r(uet,"megatron-bert"),uet.forEach(t),Syo=r(_Ae," \u2014 "),MN=n(_Ae,"A",{href:!0});var bet=s(MN);Ryo=r(bet,"MegatronBertForMultipleChoice"),bet.forEach(t),Byo=r(_Ae," (MegatronBert model)"),_Ae.forEach(t),Pyo=i(O),mb=n(O,"LI",{});var uAe=s(mb);Yle=n(uAe,"STRONG",{});var Fet=s(Yle);$yo=r(Fet,"mobilebert"),Fet.forEach(t),Iyo=r(uAe," \u2014 "),EN=n(uAe,"A",{href:!0});var vet=s(EN);qyo=r(vet,"MobileBertForMultipleChoice"),vet.forEach(t),Nyo=r(uAe," (MobileBERT model)"),uAe.forEach(t),jyo=i(O),gb=n(O,"LI",{});var bAe=s(gb);Kle=n(bAe,"STRONG",{});var Tet=s(Kle);Dyo=r(Tet,"mpnet"),Tet.forEach(t),Gyo=r(bAe," \u2014 "),CN=n(bAe,"A",{href:!0});var Met=s(CN);Oyo=r(Met,"MPNetForMultipleChoice"),Met.forEach(t),Vyo=r(bAe," (MPNet model)"),bAe.forEach(t),Xyo=i(O),hb=n(O,"LI",{});var FAe=s(hb);Zle=n(FAe,"STRONG",{});var Eet=s(Zle);zyo=r(Eet,"nystromformer"),Eet.forEach(t),Qyo=r(FAe," \u2014 "),wN=n(FAe,"A",{href:!0});var Cet=s(wN);Wyo=r(Cet,"NystromformerForMultipleChoice"),Cet.forEach(t),Hyo=r(FAe," (Nystromformer model)"),FAe.forEach(t),Uyo=i(O),pb=n(O,"LI",{});var vAe=s(pb);eie=n(vAe,"STRONG",{});var wet=s(eie);Jyo=r(wet,"qdqbert"),wet.forEach(t),Yyo=r(vAe," \u2014 "),AN=n(vAe,"A",{href:!0});var Aet=s(AN);Kyo=r(Aet,"QDQBertForMultipleChoice"),Aet.forEach(t),Zyo=r(vAe," (QDQBert model)"),vAe.forEach(t),eLo=i(O),_b=n(O,"LI",{});var TAe=s(_b);oie=n(TAe,"STRONG",{});var yet=s(oie);oLo=r(yet,"rembert"),yet.forEach(t),rLo=r(TAe," \u2014 "),yN=n(TAe,"A",{href:!0});var Let=s(yN);tLo=r(Let,"RemBertForMultipleChoice"),Let.forEach(t),aLo=r(TAe," (RemBERT model)"),TAe.forEach(t),nLo=i(O),ub=n(O,"LI",{});var MAe=s(ub);rie=n(MAe,"STRONG",{});var xet=s(rie);sLo=r(xet,"roberta"),xet.forEach(t),lLo=r(MAe," \u2014 "),LN=n(MAe,"A",{href:!0});var ket=s(LN);iLo=r(ket,"RobertaForMultipleChoice"),ket.forEach(t),dLo=r(MAe," (RoBERTa model)"),MAe.forEach(t),cLo=i(O),bb=n(O,"LI",{});var EAe=s(bb);tie=n(EAe,"STRONG",{});var Set=s(tie);fLo=r(Set,"roformer"),Set.forEach(t),mLo=r(EAe," \u2014 "),xN=n(EAe,"A",{href:!0});var Ret=s(xN);gLo=r(Ret,"RoFormerForMultipleChoice"),Ret.forEach(t),hLo=r(EAe," (RoFormer model)"),EAe.forEach(t),pLo=i(O),Fb=n(O,"LI",{});var CAe=s(Fb);aie=n(CAe,"STRONG",{});var Bet=s(aie);_Lo=r(Bet,"squeezebert"),Bet.forEach(t),uLo=r(CAe," \u2014 "),kN=n(CAe,"A",{href:!0});var Pet=s(kN);bLo=r(Pet,"SqueezeBertForMultipleChoice"),Pet.forEach(t),FLo=r(CAe," (SqueezeBERT model)"),CAe.forEach(t),vLo=i(O),vb=n(O,"LI",{});var wAe=s(vb);nie=n(wAe,"STRONG",{});var $et=s(nie);TLo=r($et,"xlm"),$et.forEach(t),MLo=r(wAe," \u2014 "),SN=n(wAe,"A",{href:!0});var Iet=s(SN);ELo=r(Iet,"XLMForMultipleChoice"),Iet.forEach(t),CLo=r(wAe," (XLM model)"),wAe.forEach(t),wLo=i(O),Tb=n(O,"LI",{});var AAe=s(Tb);sie=n(AAe,"STRONG",{});var qet=s(sie);ALo=r(qet,"xlm-roberta"),qet.forEach(t),yLo=r(AAe," \u2014 "),RN=n(AAe,"A",{href:!0});var Net=s(RN);LLo=r(Net,"XLMRobertaForMultipleChoice"),Net.forEach(t),xLo=r(AAe," (XLM-RoBERTa model)"),AAe.forEach(t),kLo=i(O),Mb=n(O,"LI",{});var yAe=s(Mb);lie=n(yAe,"STRONG",{});var jet=s(lie);SLo=r(jet,"xlm-roberta-xl"),jet.forEach(t),RLo=r(yAe," \u2014 "),BN=n(yAe,"A",{href:!0});var Det=s(BN);BLo=r(Det,"XLMRobertaXLForMultipleChoice"),Det.forEach(t),PLo=r(yAe," (XLM-RoBERTa-XL model)"),yAe.forEach(t),$Lo=i(O),Eb=n(O,"LI",{});var LAe=s(Eb);iie=n(LAe,"STRONG",{});var Get=s(iie);ILo=r(Get,"xlnet"),Get.forEach(t),qLo=r(LAe," \u2014 "),PN=n(LAe,"A",{href:!0});var Oet=s(PN);NLo=r(Oet,"XLNetForMultipleChoice"),Oet.forEach(t),jLo=r(LAe," (XLNet model)"),LAe.forEach(t),DLo=i(O),Cb=n(O,"LI",{});var xAe=s(Cb);die=n(xAe,"STRONG",{});var Vet=s(die);GLo=r(Vet,"yoso"),Vet.forEach(t),OLo=r(xAe," \u2014 "),$N=n(xAe,"A",{href:!0});var Xet=s($N);VLo=r(Xet,"YosoForMultipleChoice"),Xet.forEach(t),XLo=r(xAe," (YOSO model)"),xAe.forEach(t),O.forEach(t),zLo=i(Qt),wb=n(Qt,"P",{});var kAe=s(wb);QLo=r(kAe,"The model is set in evaluation mode by default using "),cie=n(kAe,"CODE",{});var zet=s(cie);WLo=r(zet,"model.eval()"),zet.forEach(t),HLo=r(kAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fie=n(kAe,"CODE",{});var Qet=s(fie);ULo=r(Qet,"model.train()"),Qet.forEach(t),kAe.forEach(t),JLo=i(Qt),mie=n(Qt,"P",{});var Wet=s(mie);YLo=r(Wet,"Examples:"),Wet.forEach(t),KLo=i(Qt),m(O5.$$.fragment,Qt),Qt.forEach(t),al.forEach(t),sRe=i(c),ud=n(c,"H2",{class:!0});var pPe=s(ud);Ab=n(pPe,"A",{id:!0,class:!0,href:!0});var Het=s(Ab);gie=n(Het,"SPAN",{});var Uet=s(gie);m(V5.$$.fragment,Uet),Uet.forEach(t),Het.forEach(t),ZLo=i(pPe),hie=n(pPe,"SPAN",{});var Jet=s(hie);e8o=r(Jet,"AutoModelForNextSentencePrediction"),Jet.forEach(t),pPe.forEach(t),lRe=i(c),tr=n(c,"DIV",{class:!0});var sl=s(tr);m(X5.$$.fragment,sl),o8o=i(sl),bd=n(sl,"P",{});var lU=s(bd);r8o=r(lU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),IN=n(lU,"A",{href:!0});var Yet=s(IN);t8o=r(Yet,"from_pretrained()"),Yet.forEach(t),a8o=r(lU," class method or the "),qN=n(lU,"A",{href:!0});var Ket=s(qN);n8o=r(Ket,"from_config()"),Ket.forEach(t),s8o=r(lU,` class
method.`),lU.forEach(t),l8o=i(sl),z5=n(sl,"P",{});var _Pe=s(z5);i8o=r(_Pe,"This class cannot be instantiated directly using "),pie=n(_Pe,"CODE",{});var Zet=s(pie);d8o=r(Zet,"__init__()"),Zet.forEach(t),c8o=r(_Pe," (throws an error)."),_Pe.forEach(t),f8o=i(sl),Yr=n(sl,"DIV",{class:!0});var ll=s(Yr);m(Q5.$$.fragment,ll),m8o=i(ll),_ie=n(ll,"P",{});var eot=s(_ie);g8o=r(eot,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),eot.forEach(t),h8o=i(ll),Fd=n(ll,"P",{});var iU=s(Fd);p8o=r(iU,`Note:
Loading a model from its configuration file does `),uie=n(iU,"STRONG",{});var oot=s(uie);_8o=r(oot,"not"),oot.forEach(t),u8o=r(iU,` load the model weights. It only affects the
model\u2019s configuration. Use `),NN=n(iU,"A",{href:!0});var rot=s(NN);b8o=r(rot,"from_pretrained()"),rot.forEach(t),F8o=r(iU," to load the model weights."),iU.forEach(t),v8o=i(ll),bie=n(ll,"P",{});var tot=s(bie);T8o=r(tot,"Examples:"),tot.forEach(t),M8o=i(ll),m(W5.$$.fragment,ll),ll.forEach(t),E8o=i(sl),Xe=n(sl,"DIV",{class:!0});var Wt=s(Xe);m(H5.$$.fragment,Wt),C8o=i(Wt),Fie=n(Wt,"P",{});var aot=s(Fie);w8o=r(aot,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),aot.forEach(t),A8o=i(Wt),Ya=n(Wt,"P",{});var wE=s(Ya);y8o=r(wE,"The model class to instantiate is selected based on the "),vie=n(wE,"CODE",{});var not=s(vie);L8o=r(not,"model_type"),not.forEach(t),x8o=r(wE,` property of the config object (either
passed as an argument or loaded from `),Tie=n(wE,"CODE",{});var sot=s(Tie);k8o=r(sot,"pretrained_model_name_or_path"),sot.forEach(t),S8o=r(wE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mie=n(wE,"CODE",{});var lot=s(Mie);R8o=r(lot,"pretrained_model_name_or_path"),lot.forEach(t),B8o=r(wE,":"),wE.forEach(t),P8o=i(Wt),da=n(Wt,"UL",{});var il=s(da);yb=n(il,"LI",{});var SAe=s(yb);Eie=n(SAe,"STRONG",{});var iot=s(Eie);$8o=r(iot,"bert"),iot.forEach(t),I8o=r(SAe," \u2014 "),jN=n(SAe,"A",{href:!0});var dot=s(jN);q8o=r(dot,"BertForNextSentencePrediction"),dot.forEach(t),N8o=r(SAe," (BERT model)"),SAe.forEach(t),j8o=i(il),Lb=n(il,"LI",{});var RAe=s(Lb);Cie=n(RAe,"STRONG",{});var cot=s(Cie);D8o=r(cot,"fnet"),cot.forEach(t),G8o=r(RAe," \u2014 "),DN=n(RAe,"A",{href:!0});var fot=s(DN);O8o=r(fot,"FNetForNextSentencePrediction"),fot.forEach(t),V8o=r(RAe," (FNet model)"),RAe.forEach(t),X8o=i(il),xb=n(il,"LI",{});var BAe=s(xb);wie=n(BAe,"STRONG",{});var mot=s(wie);z8o=r(mot,"megatron-bert"),mot.forEach(t),Q8o=r(BAe," \u2014 "),GN=n(BAe,"A",{href:!0});var got=s(GN);W8o=r(got,"MegatronBertForNextSentencePrediction"),got.forEach(t),H8o=r(BAe," (MegatronBert model)"),BAe.forEach(t),U8o=i(il),kb=n(il,"LI",{});var PAe=s(kb);Aie=n(PAe,"STRONG",{});var hot=s(Aie);J8o=r(hot,"mobilebert"),hot.forEach(t),Y8o=r(PAe," \u2014 "),ON=n(PAe,"A",{href:!0});var pot=s(ON);K8o=r(pot,"MobileBertForNextSentencePrediction"),pot.forEach(t),Z8o=r(PAe," (MobileBERT model)"),PAe.forEach(t),e9o=i(il),Sb=n(il,"LI",{});var $Ae=s(Sb);yie=n($Ae,"STRONG",{});var _ot=s(yie);o9o=r(_ot,"qdqbert"),_ot.forEach(t),r9o=r($Ae," \u2014 "),VN=n($Ae,"A",{href:!0});var uot=s(VN);t9o=r(uot,"QDQBertForNextSentencePrediction"),uot.forEach(t),a9o=r($Ae," (QDQBert model)"),$Ae.forEach(t),il.forEach(t),n9o=i(Wt),Rb=n(Wt,"P",{});var IAe=s(Rb);s9o=r(IAe,"The model is set in evaluation mode by default using "),Lie=n(IAe,"CODE",{});var bot=s(Lie);l9o=r(bot,"model.eval()"),bot.forEach(t),i9o=r(IAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xie=n(IAe,"CODE",{});var Fot=s(xie);d9o=r(Fot,"model.train()"),Fot.forEach(t),IAe.forEach(t),c9o=i(Wt),kie=n(Wt,"P",{});var vot=s(kie);f9o=r(vot,"Examples:"),vot.forEach(t),m9o=i(Wt),m(U5.$$.fragment,Wt),Wt.forEach(t),sl.forEach(t),iRe=i(c),vd=n(c,"H2",{class:!0});var uPe=s(vd);Bb=n(uPe,"A",{id:!0,class:!0,href:!0});var Tot=s(Bb);Sie=n(Tot,"SPAN",{});var Mot=s(Sie);m(J5.$$.fragment,Mot),Mot.forEach(t),Tot.forEach(t),g9o=i(uPe),Rie=n(uPe,"SPAN",{});var Eot=s(Rie);h9o=r(Eot,"AutoModelForTokenClassification"),Eot.forEach(t),uPe.forEach(t),dRe=i(c),ar=n(c,"DIV",{class:!0});var dl=s(ar);m(Y5.$$.fragment,dl),p9o=i(dl),Td=n(dl,"P",{});var dU=s(Td);_9o=r(dU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),XN=n(dU,"A",{href:!0});var Cot=s(XN);u9o=r(Cot,"from_pretrained()"),Cot.forEach(t),b9o=r(dU," class method or the "),zN=n(dU,"A",{href:!0});var wot=s(zN);F9o=r(wot,"from_config()"),wot.forEach(t),v9o=r(dU,` class
method.`),dU.forEach(t),T9o=i(dl),K5=n(dl,"P",{});var bPe=s(K5);M9o=r(bPe,"This class cannot be instantiated directly using "),Bie=n(bPe,"CODE",{});var Aot=s(Bie);E9o=r(Aot,"__init__()"),Aot.forEach(t),C9o=r(bPe," (throws an error)."),bPe.forEach(t),w9o=i(dl),Kr=n(dl,"DIV",{class:!0});var cl=s(Kr);m(Z5.$$.fragment,cl),A9o=i(cl),Pie=n(cl,"P",{});var yot=s(Pie);y9o=r(yot,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),yot.forEach(t),L9o=i(cl),Md=n(cl,"P",{});var cU=s(Md);x9o=r(cU,`Note:
Loading a model from its configuration file does `),$ie=n(cU,"STRONG",{});var Lot=s($ie);k9o=r(Lot,"not"),Lot.forEach(t),S9o=r(cU,` load the model weights. It only affects the
model\u2019s configuration. Use `),QN=n(cU,"A",{href:!0});var xot=s(QN);R9o=r(xot,"from_pretrained()"),xot.forEach(t),B9o=r(cU," to load the model weights."),cU.forEach(t),P9o=i(cl),Iie=n(cl,"P",{});var kot=s(Iie);$9o=r(kot,"Examples:"),kot.forEach(t),I9o=i(cl),m(ew.$$.fragment,cl),cl.forEach(t),q9o=i(dl),ze=n(dl,"DIV",{class:!0});var Ht=s(ze);m(ow.$$.fragment,Ht),N9o=i(Ht),qie=n(Ht,"P",{});var Sot=s(qie);j9o=r(Sot,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Sot.forEach(t),D9o=i(Ht),Ka=n(Ht,"P",{});var AE=s(Ka);G9o=r(AE,"The model class to instantiate is selected based on the "),Nie=n(AE,"CODE",{});var Rot=s(Nie);O9o=r(Rot,"model_type"),Rot.forEach(t),V9o=r(AE,` property of the config object (either
passed as an argument or loaded from `),jie=n(AE,"CODE",{});var Bot=s(jie);X9o=r(Bot,"pretrained_model_name_or_path"),Bot.forEach(t),z9o=r(AE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Die=n(AE,"CODE",{});var Pot=s(Die);Q9o=r(Pot,"pretrained_model_name_or_path"),Pot.forEach(t),W9o=r(AE,":"),AE.forEach(t),H9o=i(Ht),j=n(Ht,"UL",{});var D=s(j);Pb=n(D,"LI",{});var qAe=s(Pb);Gie=n(qAe,"STRONG",{});var $ot=s(Gie);U9o=r($ot,"albert"),$ot.forEach(t),J9o=r(qAe," \u2014 "),WN=n(qAe,"A",{href:!0});var Iot=s(WN);Y9o=r(Iot,"AlbertForTokenClassification"),Iot.forEach(t),K9o=r(qAe," (ALBERT model)"),qAe.forEach(t),Z9o=i(D),$b=n(D,"LI",{});var NAe=s($b);Oie=n(NAe,"STRONG",{});var qot=s(Oie);exo=r(qot,"bert"),qot.forEach(t),oxo=r(NAe," \u2014 "),HN=n(NAe,"A",{href:!0});var Not=s(HN);rxo=r(Not,"BertForTokenClassification"),Not.forEach(t),txo=r(NAe," (BERT model)"),NAe.forEach(t),axo=i(D),Ib=n(D,"LI",{});var jAe=s(Ib);Vie=n(jAe,"STRONG",{});var jot=s(Vie);nxo=r(jot,"big_bird"),jot.forEach(t),sxo=r(jAe," \u2014 "),UN=n(jAe,"A",{href:!0});var Dot=s(UN);lxo=r(Dot,"BigBirdForTokenClassification"),Dot.forEach(t),ixo=r(jAe," (BigBird model)"),jAe.forEach(t),dxo=i(D),qb=n(D,"LI",{});var DAe=s(qb);Xie=n(DAe,"STRONG",{});var Got=s(Xie);cxo=r(Got,"camembert"),Got.forEach(t),fxo=r(DAe," \u2014 "),JN=n(DAe,"A",{href:!0});var Oot=s(JN);mxo=r(Oot,"CamembertForTokenClassification"),Oot.forEach(t),gxo=r(DAe," (CamemBERT model)"),DAe.forEach(t),hxo=i(D),Nb=n(D,"LI",{});var GAe=s(Nb);zie=n(GAe,"STRONG",{});var Vot=s(zie);pxo=r(Vot,"canine"),Vot.forEach(t),_xo=r(GAe," \u2014 "),YN=n(GAe,"A",{href:!0});var Xot=s(YN);uxo=r(Xot,"CanineForTokenClassification"),Xot.forEach(t),bxo=r(GAe," (Canine model)"),GAe.forEach(t),Fxo=i(D),jb=n(D,"LI",{});var OAe=s(jb);Qie=n(OAe,"STRONG",{});var zot=s(Qie);vxo=r(zot,"convbert"),zot.forEach(t),Txo=r(OAe," \u2014 "),KN=n(OAe,"A",{href:!0});var Qot=s(KN);Mxo=r(Qot,"ConvBertForTokenClassification"),Qot.forEach(t),Exo=r(OAe," (ConvBERT model)"),OAe.forEach(t),Cxo=i(D),Db=n(D,"LI",{});var VAe=s(Db);Wie=n(VAe,"STRONG",{});var Wot=s(Wie);wxo=r(Wot,"data2vec-text"),Wot.forEach(t),Axo=r(VAe," \u2014 "),ZN=n(VAe,"A",{href:!0});var Hot=s(ZN);yxo=r(Hot,"Data2VecTextForTokenClassification"),Hot.forEach(t),Lxo=r(VAe," (Data2VecText model)"),VAe.forEach(t),xxo=i(D),Gb=n(D,"LI",{});var XAe=s(Gb);Hie=n(XAe,"STRONG",{});var Uot=s(Hie);kxo=r(Uot,"deberta"),Uot.forEach(t),Sxo=r(XAe," \u2014 "),ej=n(XAe,"A",{href:!0});var Jot=s(ej);Rxo=r(Jot,"DebertaForTokenClassification"),Jot.forEach(t),Bxo=r(XAe," (DeBERTa model)"),XAe.forEach(t),Pxo=i(D),Ob=n(D,"LI",{});var zAe=s(Ob);Uie=n(zAe,"STRONG",{});var Yot=s(Uie);$xo=r(Yot,"deberta-v2"),Yot.forEach(t),Ixo=r(zAe," \u2014 "),oj=n(zAe,"A",{href:!0});var Kot=s(oj);qxo=r(Kot,"DebertaV2ForTokenClassification"),Kot.forEach(t),Nxo=r(zAe," (DeBERTa-v2 model)"),zAe.forEach(t),jxo=i(D),Vb=n(D,"LI",{});var QAe=s(Vb);Jie=n(QAe,"STRONG",{});var Zot=s(Jie);Dxo=r(Zot,"distilbert"),Zot.forEach(t),Gxo=r(QAe," \u2014 "),rj=n(QAe,"A",{href:!0});var ert=s(rj);Oxo=r(ert,"DistilBertForTokenClassification"),ert.forEach(t),Vxo=r(QAe," (DistilBERT model)"),QAe.forEach(t),Xxo=i(D),Xb=n(D,"LI",{});var WAe=s(Xb);Yie=n(WAe,"STRONG",{});var ort=s(Yie);zxo=r(ort,"electra"),ort.forEach(t),Qxo=r(WAe," \u2014 "),tj=n(WAe,"A",{href:!0});var rrt=s(tj);Wxo=r(rrt,"ElectraForTokenClassification"),rrt.forEach(t),Hxo=r(WAe," (ELECTRA model)"),WAe.forEach(t),Uxo=i(D),zb=n(D,"LI",{});var HAe=s(zb);Kie=n(HAe,"STRONG",{});var trt=s(Kie);Jxo=r(trt,"flaubert"),trt.forEach(t),Yxo=r(HAe," \u2014 "),aj=n(HAe,"A",{href:!0});var art=s(aj);Kxo=r(art,"FlaubertForTokenClassification"),art.forEach(t),Zxo=r(HAe," (FlauBERT model)"),HAe.forEach(t),eko=i(D),Qb=n(D,"LI",{});var UAe=s(Qb);Zie=n(UAe,"STRONG",{});var nrt=s(Zie);oko=r(nrt,"fnet"),nrt.forEach(t),rko=r(UAe," \u2014 "),nj=n(UAe,"A",{href:!0});var srt=s(nj);tko=r(srt,"FNetForTokenClassification"),srt.forEach(t),ako=r(UAe," (FNet model)"),UAe.forEach(t),nko=i(D),Wb=n(D,"LI",{});var JAe=s(Wb);ede=n(JAe,"STRONG",{});var lrt=s(ede);sko=r(lrt,"funnel"),lrt.forEach(t),lko=r(JAe," \u2014 "),sj=n(JAe,"A",{href:!0});var irt=s(sj);iko=r(irt,"FunnelForTokenClassification"),irt.forEach(t),dko=r(JAe," (Funnel Transformer model)"),JAe.forEach(t),cko=i(D),Hb=n(D,"LI",{});var YAe=s(Hb);ode=n(YAe,"STRONG",{});var drt=s(ode);fko=r(drt,"gpt2"),drt.forEach(t),mko=r(YAe," \u2014 "),lj=n(YAe,"A",{href:!0});var crt=s(lj);gko=r(crt,"GPT2ForTokenClassification"),crt.forEach(t),hko=r(YAe," (OpenAI GPT-2 model)"),YAe.forEach(t),pko=i(D),Ub=n(D,"LI",{});var KAe=s(Ub);rde=n(KAe,"STRONG",{});var frt=s(rde);_ko=r(frt,"ibert"),frt.forEach(t),uko=r(KAe," \u2014 "),ij=n(KAe,"A",{href:!0});var mrt=s(ij);bko=r(mrt,"IBertForTokenClassification"),mrt.forEach(t),Fko=r(KAe," (I-BERT model)"),KAe.forEach(t),vko=i(D),Jb=n(D,"LI",{});var ZAe=s(Jb);tde=n(ZAe,"STRONG",{});var grt=s(tde);Tko=r(grt,"layoutlm"),grt.forEach(t),Mko=r(ZAe," \u2014 "),dj=n(ZAe,"A",{href:!0});var hrt=s(dj);Eko=r(hrt,"LayoutLMForTokenClassification"),hrt.forEach(t),Cko=r(ZAe," (LayoutLM model)"),ZAe.forEach(t),wko=i(D),Yb=n(D,"LI",{});var e0e=s(Yb);ade=n(e0e,"STRONG",{});var prt=s(ade);Ako=r(prt,"layoutlmv2"),prt.forEach(t),yko=r(e0e," \u2014 "),cj=n(e0e,"A",{href:!0});var _rt=s(cj);Lko=r(_rt,"LayoutLMv2ForTokenClassification"),_rt.forEach(t),xko=r(e0e," (LayoutLMv2 model)"),e0e.forEach(t),kko=i(D),Kb=n(D,"LI",{});var o0e=s(Kb);nde=n(o0e,"STRONG",{});var urt=s(nde);Sko=r(urt,"longformer"),urt.forEach(t),Rko=r(o0e," \u2014 "),fj=n(o0e,"A",{href:!0});var brt=s(fj);Bko=r(brt,"LongformerForTokenClassification"),brt.forEach(t),Pko=r(o0e," (Longformer model)"),o0e.forEach(t),$ko=i(D),Zb=n(D,"LI",{});var r0e=s(Zb);sde=n(r0e,"STRONG",{});var Frt=s(sde);Iko=r(Frt,"megatron-bert"),Frt.forEach(t),qko=r(r0e," \u2014 "),mj=n(r0e,"A",{href:!0});var vrt=s(mj);Nko=r(vrt,"MegatronBertForTokenClassification"),vrt.forEach(t),jko=r(r0e," (MegatronBert model)"),r0e.forEach(t),Dko=i(D),e3=n(D,"LI",{});var t0e=s(e3);lde=n(t0e,"STRONG",{});var Trt=s(lde);Gko=r(Trt,"mobilebert"),Trt.forEach(t),Oko=r(t0e," \u2014 "),gj=n(t0e,"A",{href:!0});var Mrt=s(gj);Vko=r(Mrt,"MobileBertForTokenClassification"),Mrt.forEach(t),Xko=r(t0e," (MobileBERT model)"),t0e.forEach(t),zko=i(D),o3=n(D,"LI",{});var a0e=s(o3);ide=n(a0e,"STRONG",{});var Ert=s(ide);Qko=r(Ert,"mpnet"),Ert.forEach(t),Wko=r(a0e," \u2014 "),hj=n(a0e,"A",{href:!0});var Crt=s(hj);Hko=r(Crt,"MPNetForTokenClassification"),Crt.forEach(t),Uko=r(a0e," (MPNet model)"),a0e.forEach(t),Jko=i(D),r3=n(D,"LI",{});var n0e=s(r3);dde=n(n0e,"STRONG",{});var wrt=s(dde);Yko=r(wrt,"nystromformer"),wrt.forEach(t),Kko=r(n0e," \u2014 "),pj=n(n0e,"A",{href:!0});var Art=s(pj);Zko=r(Art,"NystromformerForTokenClassification"),Art.forEach(t),eSo=r(n0e," (Nystromformer model)"),n0e.forEach(t),oSo=i(D),t3=n(D,"LI",{});var s0e=s(t3);cde=n(s0e,"STRONG",{});var yrt=s(cde);rSo=r(yrt,"qdqbert"),yrt.forEach(t),tSo=r(s0e," \u2014 "),_j=n(s0e,"A",{href:!0});var Lrt=s(_j);aSo=r(Lrt,"QDQBertForTokenClassification"),Lrt.forEach(t),nSo=r(s0e," (QDQBert model)"),s0e.forEach(t),sSo=i(D),a3=n(D,"LI",{});var l0e=s(a3);fde=n(l0e,"STRONG",{});var xrt=s(fde);lSo=r(xrt,"rembert"),xrt.forEach(t),iSo=r(l0e," \u2014 "),uj=n(l0e,"A",{href:!0});var krt=s(uj);dSo=r(krt,"RemBertForTokenClassification"),krt.forEach(t),cSo=r(l0e," (RemBERT model)"),l0e.forEach(t),fSo=i(D),n3=n(D,"LI",{});var i0e=s(n3);mde=n(i0e,"STRONG",{});var Srt=s(mde);mSo=r(Srt,"roberta"),Srt.forEach(t),gSo=r(i0e," \u2014 "),bj=n(i0e,"A",{href:!0});var Rrt=s(bj);hSo=r(Rrt,"RobertaForTokenClassification"),Rrt.forEach(t),pSo=r(i0e," (RoBERTa model)"),i0e.forEach(t),_So=i(D),s3=n(D,"LI",{});var d0e=s(s3);gde=n(d0e,"STRONG",{});var Brt=s(gde);uSo=r(Brt,"roformer"),Brt.forEach(t),bSo=r(d0e," \u2014 "),Fj=n(d0e,"A",{href:!0});var Prt=s(Fj);FSo=r(Prt,"RoFormerForTokenClassification"),Prt.forEach(t),vSo=r(d0e," (RoFormer model)"),d0e.forEach(t),TSo=i(D),l3=n(D,"LI",{});var c0e=s(l3);hde=n(c0e,"STRONG",{});var $rt=s(hde);MSo=r($rt,"squeezebert"),$rt.forEach(t),ESo=r(c0e," \u2014 "),vj=n(c0e,"A",{href:!0});var Irt=s(vj);CSo=r(Irt,"SqueezeBertForTokenClassification"),Irt.forEach(t),wSo=r(c0e," (SqueezeBERT model)"),c0e.forEach(t),ASo=i(D),i3=n(D,"LI",{});var f0e=s(i3);pde=n(f0e,"STRONG",{});var qrt=s(pde);ySo=r(qrt,"xlm"),qrt.forEach(t),LSo=r(f0e," \u2014 "),Tj=n(f0e,"A",{href:!0});var Nrt=s(Tj);xSo=r(Nrt,"XLMForTokenClassification"),Nrt.forEach(t),kSo=r(f0e," (XLM model)"),f0e.forEach(t),SSo=i(D),d3=n(D,"LI",{});var m0e=s(d3);_de=n(m0e,"STRONG",{});var jrt=s(_de);RSo=r(jrt,"xlm-roberta"),jrt.forEach(t),BSo=r(m0e," \u2014 "),Mj=n(m0e,"A",{href:!0});var Drt=s(Mj);PSo=r(Drt,"XLMRobertaForTokenClassification"),Drt.forEach(t),$So=r(m0e," (XLM-RoBERTa model)"),m0e.forEach(t),ISo=i(D),c3=n(D,"LI",{});var g0e=s(c3);ude=n(g0e,"STRONG",{});var Grt=s(ude);qSo=r(Grt,"xlm-roberta-xl"),Grt.forEach(t),NSo=r(g0e," \u2014 "),Ej=n(g0e,"A",{href:!0});var Ort=s(Ej);jSo=r(Ort,"XLMRobertaXLForTokenClassification"),Ort.forEach(t),DSo=r(g0e," (XLM-RoBERTa-XL model)"),g0e.forEach(t),GSo=i(D),f3=n(D,"LI",{});var h0e=s(f3);bde=n(h0e,"STRONG",{});var Vrt=s(bde);OSo=r(Vrt,"xlnet"),Vrt.forEach(t),VSo=r(h0e," \u2014 "),Cj=n(h0e,"A",{href:!0});var Xrt=s(Cj);XSo=r(Xrt,"XLNetForTokenClassification"),Xrt.forEach(t),zSo=r(h0e," (XLNet model)"),h0e.forEach(t),QSo=i(D),m3=n(D,"LI",{});var p0e=s(m3);Fde=n(p0e,"STRONG",{});var zrt=s(Fde);WSo=r(zrt,"yoso"),zrt.forEach(t),HSo=r(p0e," \u2014 "),wj=n(p0e,"A",{href:!0});var Qrt=s(wj);USo=r(Qrt,"YosoForTokenClassification"),Qrt.forEach(t),JSo=r(p0e," (YOSO model)"),p0e.forEach(t),D.forEach(t),YSo=i(Ht),g3=n(Ht,"P",{});var _0e=s(g3);KSo=r(_0e,"The model is set in evaluation mode by default using "),vde=n(_0e,"CODE",{});var Wrt=s(vde);ZSo=r(Wrt,"model.eval()"),Wrt.forEach(t),eRo=r(_0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tde=n(_0e,"CODE",{});var Hrt=s(Tde);oRo=r(Hrt,"model.train()"),Hrt.forEach(t),_0e.forEach(t),rRo=i(Ht),Mde=n(Ht,"P",{});var Urt=s(Mde);tRo=r(Urt,"Examples:"),Urt.forEach(t),aRo=i(Ht),m(rw.$$.fragment,Ht),Ht.forEach(t),dl.forEach(t),cRe=i(c),Ed=n(c,"H2",{class:!0});var FPe=s(Ed);h3=n(FPe,"A",{id:!0,class:!0,href:!0});var Jrt=s(h3);Ede=n(Jrt,"SPAN",{});var Yrt=s(Ede);m(tw.$$.fragment,Yrt),Yrt.forEach(t),Jrt.forEach(t),nRo=i(FPe),Cde=n(FPe,"SPAN",{});var Krt=s(Cde);sRo=r(Krt,"AutoModelForQuestionAnswering"),Krt.forEach(t),FPe.forEach(t),fRe=i(c),nr=n(c,"DIV",{class:!0});var fl=s(nr);m(aw.$$.fragment,fl),lRo=i(fl),Cd=n(fl,"P",{});var fU=s(Cd);iRo=r(fU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Aj=n(fU,"A",{href:!0});var Zrt=s(Aj);dRo=r(Zrt,"from_pretrained()"),Zrt.forEach(t),cRo=r(fU," class method or the "),yj=n(fU,"A",{href:!0});var ett=s(yj);fRo=r(ett,"from_config()"),ett.forEach(t),mRo=r(fU,` class
method.`),fU.forEach(t),gRo=i(fl),nw=n(fl,"P",{});var vPe=s(nw);hRo=r(vPe,"This class cannot be instantiated directly using "),wde=n(vPe,"CODE",{});var ott=s(wde);pRo=r(ott,"__init__()"),ott.forEach(t),_Ro=r(vPe," (throws an error)."),vPe.forEach(t),uRo=i(fl),Zr=n(fl,"DIV",{class:!0});var ml=s(Zr);m(sw.$$.fragment,ml),bRo=i(ml),Ade=n(ml,"P",{});var rtt=s(Ade);FRo=r(rtt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),rtt.forEach(t),vRo=i(ml),wd=n(ml,"P",{});var mU=s(wd);TRo=r(mU,`Note:
Loading a model from its configuration file does `),yde=n(mU,"STRONG",{});var ttt=s(yde);MRo=r(ttt,"not"),ttt.forEach(t),ERo=r(mU,` load the model weights. It only affects the
model\u2019s configuration. Use `),Lj=n(mU,"A",{href:!0});var att=s(Lj);CRo=r(att,"from_pretrained()"),att.forEach(t),wRo=r(mU," to load the model weights."),mU.forEach(t),ARo=i(ml),Lde=n(ml,"P",{});var ntt=s(Lde);yRo=r(ntt,"Examples:"),ntt.forEach(t),LRo=i(ml),m(lw.$$.fragment,ml),ml.forEach(t),xRo=i(fl),Qe=n(fl,"DIV",{class:!0});var Ut=s(Qe);m(iw.$$.fragment,Ut),kRo=i(Ut),xde=n(Ut,"P",{});var stt=s(xde);SRo=r(stt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),stt.forEach(t),RRo=i(Ut),Za=n(Ut,"P",{});var yE=s(Za);BRo=r(yE,"The model class to instantiate is selected based on the "),kde=n(yE,"CODE",{});var ltt=s(kde);PRo=r(ltt,"model_type"),ltt.forEach(t),$Ro=r(yE,` property of the config object (either
passed as an argument or loaded from `),Sde=n(yE,"CODE",{});var itt=s(Sde);IRo=r(itt,"pretrained_model_name_or_path"),itt.forEach(t),qRo=r(yE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rde=n(yE,"CODE",{});var dtt=s(Rde);NRo=r(dtt,"pretrained_model_name_or_path"),dtt.forEach(t),jRo=r(yE,":"),yE.forEach(t),DRo=i(Ut),R=n(Ut,"UL",{});var P=s(R);p3=n(P,"LI",{});var u0e=s(p3);Bde=n(u0e,"STRONG",{});var ctt=s(Bde);GRo=r(ctt,"albert"),ctt.forEach(t),ORo=r(u0e," \u2014 "),xj=n(u0e,"A",{href:!0});var ftt=s(xj);VRo=r(ftt,"AlbertForQuestionAnswering"),ftt.forEach(t),XRo=r(u0e," (ALBERT model)"),u0e.forEach(t),zRo=i(P),_3=n(P,"LI",{});var b0e=s(_3);Pde=n(b0e,"STRONG",{});var mtt=s(Pde);QRo=r(mtt,"bart"),mtt.forEach(t),WRo=r(b0e," \u2014 "),kj=n(b0e,"A",{href:!0});var gtt=s(kj);HRo=r(gtt,"BartForQuestionAnswering"),gtt.forEach(t),URo=r(b0e," (BART model)"),b0e.forEach(t),JRo=i(P),u3=n(P,"LI",{});var F0e=s(u3);$de=n(F0e,"STRONG",{});var htt=s($de);YRo=r(htt,"bert"),htt.forEach(t),KRo=r(F0e," \u2014 "),Sj=n(F0e,"A",{href:!0});var ptt=s(Sj);ZRo=r(ptt,"BertForQuestionAnswering"),ptt.forEach(t),eBo=r(F0e," (BERT model)"),F0e.forEach(t),oBo=i(P),b3=n(P,"LI",{});var v0e=s(b3);Ide=n(v0e,"STRONG",{});var _tt=s(Ide);rBo=r(_tt,"big_bird"),_tt.forEach(t),tBo=r(v0e," \u2014 "),Rj=n(v0e,"A",{href:!0});var utt=s(Rj);aBo=r(utt,"BigBirdForQuestionAnswering"),utt.forEach(t),nBo=r(v0e," (BigBird model)"),v0e.forEach(t),sBo=i(P),F3=n(P,"LI",{});var T0e=s(F3);qde=n(T0e,"STRONG",{});var btt=s(qde);lBo=r(btt,"bigbird_pegasus"),btt.forEach(t),iBo=r(T0e," \u2014 "),Bj=n(T0e,"A",{href:!0});var Ftt=s(Bj);dBo=r(Ftt,"BigBirdPegasusForQuestionAnswering"),Ftt.forEach(t),cBo=r(T0e," (BigBirdPegasus model)"),T0e.forEach(t),fBo=i(P),v3=n(P,"LI",{});var M0e=s(v3);Nde=n(M0e,"STRONG",{});var vtt=s(Nde);mBo=r(vtt,"camembert"),vtt.forEach(t),gBo=r(M0e," \u2014 "),Pj=n(M0e,"A",{href:!0});var Ttt=s(Pj);hBo=r(Ttt,"CamembertForQuestionAnswering"),Ttt.forEach(t),pBo=r(M0e," (CamemBERT model)"),M0e.forEach(t),_Bo=i(P),T3=n(P,"LI",{});var E0e=s(T3);jde=n(E0e,"STRONG",{});var Mtt=s(jde);uBo=r(Mtt,"canine"),Mtt.forEach(t),bBo=r(E0e," \u2014 "),$j=n(E0e,"A",{href:!0});var Ett=s($j);FBo=r(Ett,"CanineForQuestionAnswering"),Ett.forEach(t),vBo=r(E0e," (Canine model)"),E0e.forEach(t),TBo=i(P),M3=n(P,"LI",{});var C0e=s(M3);Dde=n(C0e,"STRONG",{});var Ctt=s(Dde);MBo=r(Ctt,"convbert"),Ctt.forEach(t),EBo=r(C0e," \u2014 "),Ij=n(C0e,"A",{href:!0});var wtt=s(Ij);CBo=r(wtt,"ConvBertForQuestionAnswering"),wtt.forEach(t),wBo=r(C0e," (ConvBERT model)"),C0e.forEach(t),ABo=i(P),E3=n(P,"LI",{});var w0e=s(E3);Gde=n(w0e,"STRONG",{});var Att=s(Gde);yBo=r(Att,"data2vec-text"),Att.forEach(t),LBo=r(w0e," \u2014 "),qj=n(w0e,"A",{href:!0});var ytt=s(qj);xBo=r(ytt,"Data2VecTextForQuestionAnswering"),ytt.forEach(t),kBo=r(w0e," (Data2VecText model)"),w0e.forEach(t),SBo=i(P),C3=n(P,"LI",{});var A0e=s(C3);Ode=n(A0e,"STRONG",{});var Ltt=s(Ode);RBo=r(Ltt,"deberta"),Ltt.forEach(t),BBo=r(A0e," \u2014 "),Nj=n(A0e,"A",{href:!0});var xtt=s(Nj);PBo=r(xtt,"DebertaForQuestionAnswering"),xtt.forEach(t),$Bo=r(A0e," (DeBERTa model)"),A0e.forEach(t),IBo=i(P),w3=n(P,"LI",{});var y0e=s(w3);Vde=n(y0e,"STRONG",{});var ktt=s(Vde);qBo=r(ktt,"deberta-v2"),ktt.forEach(t),NBo=r(y0e," \u2014 "),jj=n(y0e,"A",{href:!0});var Stt=s(jj);jBo=r(Stt,"DebertaV2ForQuestionAnswering"),Stt.forEach(t),DBo=r(y0e," (DeBERTa-v2 model)"),y0e.forEach(t),GBo=i(P),A3=n(P,"LI",{});var L0e=s(A3);Xde=n(L0e,"STRONG",{});var Rtt=s(Xde);OBo=r(Rtt,"distilbert"),Rtt.forEach(t),VBo=r(L0e," \u2014 "),Dj=n(L0e,"A",{href:!0});var Btt=s(Dj);XBo=r(Btt,"DistilBertForQuestionAnswering"),Btt.forEach(t),zBo=r(L0e," (DistilBERT model)"),L0e.forEach(t),QBo=i(P),y3=n(P,"LI",{});var x0e=s(y3);zde=n(x0e,"STRONG",{});var Ptt=s(zde);WBo=r(Ptt,"electra"),Ptt.forEach(t),HBo=r(x0e," \u2014 "),Gj=n(x0e,"A",{href:!0});var $tt=s(Gj);UBo=r($tt,"ElectraForQuestionAnswering"),$tt.forEach(t),JBo=r(x0e," (ELECTRA model)"),x0e.forEach(t),YBo=i(P),L3=n(P,"LI",{});var k0e=s(L3);Qde=n(k0e,"STRONG",{});var Itt=s(Qde);KBo=r(Itt,"flaubert"),Itt.forEach(t),ZBo=r(k0e," \u2014 "),Oj=n(k0e,"A",{href:!0});var qtt=s(Oj);ePo=r(qtt,"FlaubertForQuestionAnsweringSimple"),qtt.forEach(t),oPo=r(k0e," (FlauBERT model)"),k0e.forEach(t),rPo=i(P),x3=n(P,"LI",{});var S0e=s(x3);Wde=n(S0e,"STRONG",{});var Ntt=s(Wde);tPo=r(Ntt,"fnet"),Ntt.forEach(t),aPo=r(S0e," \u2014 "),Vj=n(S0e,"A",{href:!0});var jtt=s(Vj);nPo=r(jtt,"FNetForQuestionAnswering"),jtt.forEach(t),sPo=r(S0e," (FNet model)"),S0e.forEach(t),lPo=i(P),k3=n(P,"LI",{});var R0e=s(k3);Hde=n(R0e,"STRONG",{});var Dtt=s(Hde);iPo=r(Dtt,"funnel"),Dtt.forEach(t),dPo=r(R0e," \u2014 "),Xj=n(R0e,"A",{href:!0});var Gtt=s(Xj);cPo=r(Gtt,"FunnelForQuestionAnswering"),Gtt.forEach(t),fPo=r(R0e," (Funnel Transformer model)"),R0e.forEach(t),mPo=i(P),S3=n(P,"LI",{});var B0e=s(S3);Ude=n(B0e,"STRONG",{});var Ott=s(Ude);gPo=r(Ott,"gptj"),Ott.forEach(t),hPo=r(B0e," \u2014 "),zj=n(B0e,"A",{href:!0});var Vtt=s(zj);pPo=r(Vtt,"GPTJForQuestionAnswering"),Vtt.forEach(t),_Po=r(B0e," (GPT-J model)"),B0e.forEach(t),uPo=i(P),R3=n(P,"LI",{});var P0e=s(R3);Jde=n(P0e,"STRONG",{});var Xtt=s(Jde);bPo=r(Xtt,"ibert"),Xtt.forEach(t),FPo=r(P0e," \u2014 "),Qj=n(P0e,"A",{href:!0});var ztt=s(Qj);vPo=r(ztt,"IBertForQuestionAnswering"),ztt.forEach(t),TPo=r(P0e," (I-BERT model)"),P0e.forEach(t),MPo=i(P),B3=n(P,"LI",{});var $0e=s(B3);Yde=n($0e,"STRONG",{});var Qtt=s(Yde);EPo=r(Qtt,"layoutlmv2"),Qtt.forEach(t),CPo=r($0e," \u2014 "),Wj=n($0e,"A",{href:!0});var Wtt=s(Wj);wPo=r(Wtt,"LayoutLMv2ForQuestionAnswering"),Wtt.forEach(t),APo=r($0e," (LayoutLMv2 model)"),$0e.forEach(t),yPo=i(P),P3=n(P,"LI",{});var I0e=s(P3);Kde=n(I0e,"STRONG",{});var Htt=s(Kde);LPo=r(Htt,"led"),Htt.forEach(t),xPo=r(I0e," \u2014 "),Hj=n(I0e,"A",{href:!0});var Utt=s(Hj);kPo=r(Utt,"LEDForQuestionAnswering"),Utt.forEach(t),SPo=r(I0e," (LED model)"),I0e.forEach(t),RPo=i(P),$3=n(P,"LI",{});var q0e=s($3);Zde=n(q0e,"STRONG",{});var Jtt=s(Zde);BPo=r(Jtt,"longformer"),Jtt.forEach(t),PPo=r(q0e," \u2014 "),Uj=n(q0e,"A",{href:!0});var Ytt=s(Uj);$Po=r(Ytt,"LongformerForQuestionAnswering"),Ytt.forEach(t),IPo=r(q0e," (Longformer model)"),q0e.forEach(t),qPo=i(P),I3=n(P,"LI",{});var N0e=s(I3);ece=n(N0e,"STRONG",{});var Ktt=s(ece);NPo=r(Ktt,"lxmert"),Ktt.forEach(t),jPo=r(N0e," \u2014 "),Jj=n(N0e,"A",{href:!0});var Ztt=s(Jj);DPo=r(Ztt,"LxmertForQuestionAnswering"),Ztt.forEach(t),GPo=r(N0e," (LXMERT model)"),N0e.forEach(t),OPo=i(P),q3=n(P,"LI",{});var j0e=s(q3);oce=n(j0e,"STRONG",{});var eat=s(oce);VPo=r(eat,"mbart"),eat.forEach(t),XPo=r(j0e," \u2014 "),Yj=n(j0e,"A",{href:!0});var oat=s(Yj);zPo=r(oat,"MBartForQuestionAnswering"),oat.forEach(t),QPo=r(j0e," (mBART model)"),j0e.forEach(t),WPo=i(P),N3=n(P,"LI",{});var D0e=s(N3);rce=n(D0e,"STRONG",{});var rat=s(rce);HPo=r(rat,"megatron-bert"),rat.forEach(t),UPo=r(D0e," \u2014 "),Kj=n(D0e,"A",{href:!0});var tat=s(Kj);JPo=r(tat,"MegatronBertForQuestionAnswering"),tat.forEach(t),YPo=r(D0e," (MegatronBert model)"),D0e.forEach(t),KPo=i(P),j3=n(P,"LI",{});var G0e=s(j3);tce=n(G0e,"STRONG",{});var aat=s(tce);ZPo=r(aat,"mobilebert"),aat.forEach(t),e$o=r(G0e," \u2014 "),Zj=n(G0e,"A",{href:!0});var nat=s(Zj);o$o=r(nat,"MobileBertForQuestionAnswering"),nat.forEach(t),r$o=r(G0e," (MobileBERT model)"),G0e.forEach(t),t$o=i(P),D3=n(P,"LI",{});var O0e=s(D3);ace=n(O0e,"STRONG",{});var sat=s(ace);a$o=r(sat,"mpnet"),sat.forEach(t),n$o=r(O0e," \u2014 "),eD=n(O0e,"A",{href:!0});var lat=s(eD);s$o=r(lat,"MPNetForQuestionAnswering"),lat.forEach(t),l$o=r(O0e," (MPNet model)"),O0e.forEach(t),i$o=i(P),G3=n(P,"LI",{});var V0e=s(G3);nce=n(V0e,"STRONG",{});var iat=s(nce);d$o=r(iat,"nystromformer"),iat.forEach(t),c$o=r(V0e," \u2014 "),oD=n(V0e,"A",{href:!0});var dat=s(oD);f$o=r(dat,"NystromformerForQuestionAnswering"),dat.forEach(t),m$o=r(V0e," (Nystromformer model)"),V0e.forEach(t),g$o=i(P),O3=n(P,"LI",{});var X0e=s(O3);sce=n(X0e,"STRONG",{});var cat=s(sce);h$o=r(cat,"qdqbert"),cat.forEach(t),p$o=r(X0e," \u2014 "),rD=n(X0e,"A",{href:!0});var fat=s(rD);_$o=r(fat,"QDQBertForQuestionAnswering"),fat.forEach(t),u$o=r(X0e," (QDQBert model)"),X0e.forEach(t),b$o=i(P),V3=n(P,"LI",{});var z0e=s(V3);lce=n(z0e,"STRONG",{});var mat=s(lce);F$o=r(mat,"reformer"),mat.forEach(t),v$o=r(z0e," \u2014 "),tD=n(z0e,"A",{href:!0});var gat=s(tD);T$o=r(gat,"ReformerForQuestionAnswering"),gat.forEach(t),M$o=r(z0e," (Reformer model)"),z0e.forEach(t),E$o=i(P),X3=n(P,"LI",{});var Q0e=s(X3);ice=n(Q0e,"STRONG",{});var hat=s(ice);C$o=r(hat,"rembert"),hat.forEach(t),w$o=r(Q0e," \u2014 "),aD=n(Q0e,"A",{href:!0});var pat=s(aD);A$o=r(pat,"RemBertForQuestionAnswering"),pat.forEach(t),y$o=r(Q0e," (RemBERT model)"),Q0e.forEach(t),L$o=i(P),z3=n(P,"LI",{});var W0e=s(z3);dce=n(W0e,"STRONG",{});var _at=s(dce);x$o=r(_at,"roberta"),_at.forEach(t),k$o=r(W0e," \u2014 "),nD=n(W0e,"A",{href:!0});var uat=s(nD);S$o=r(uat,"RobertaForQuestionAnswering"),uat.forEach(t),R$o=r(W0e," (RoBERTa model)"),W0e.forEach(t),B$o=i(P),Q3=n(P,"LI",{});var H0e=s(Q3);cce=n(H0e,"STRONG",{});var bat=s(cce);P$o=r(bat,"roformer"),bat.forEach(t),$$o=r(H0e," \u2014 "),sD=n(H0e,"A",{href:!0});var Fat=s(sD);I$o=r(Fat,"RoFormerForQuestionAnswering"),Fat.forEach(t),q$o=r(H0e," (RoFormer model)"),H0e.forEach(t),N$o=i(P),W3=n(P,"LI",{});var U0e=s(W3);fce=n(U0e,"STRONG",{});var vat=s(fce);j$o=r(vat,"splinter"),vat.forEach(t),D$o=r(U0e," \u2014 "),lD=n(U0e,"A",{href:!0});var Tat=s(lD);G$o=r(Tat,"SplinterForQuestionAnswering"),Tat.forEach(t),O$o=r(U0e," (Splinter model)"),U0e.forEach(t),V$o=i(P),H3=n(P,"LI",{});var J0e=s(H3);mce=n(J0e,"STRONG",{});var Mat=s(mce);X$o=r(Mat,"squeezebert"),Mat.forEach(t),z$o=r(J0e," \u2014 "),iD=n(J0e,"A",{href:!0});var Eat=s(iD);Q$o=r(Eat,"SqueezeBertForQuestionAnswering"),Eat.forEach(t),W$o=r(J0e," (SqueezeBERT model)"),J0e.forEach(t),H$o=i(P),U3=n(P,"LI",{});var Y0e=s(U3);gce=n(Y0e,"STRONG",{});var Cat=s(gce);U$o=r(Cat,"xlm"),Cat.forEach(t),J$o=r(Y0e," \u2014 "),dD=n(Y0e,"A",{href:!0});var wat=s(dD);Y$o=r(wat,"XLMForQuestionAnsweringSimple"),wat.forEach(t),K$o=r(Y0e," (XLM model)"),Y0e.forEach(t),Z$o=i(P),J3=n(P,"LI",{});var K0e=s(J3);hce=n(K0e,"STRONG",{});var Aat=s(hce);eIo=r(Aat,"xlm-roberta"),Aat.forEach(t),oIo=r(K0e," \u2014 "),cD=n(K0e,"A",{href:!0});var yat=s(cD);rIo=r(yat,"XLMRobertaForQuestionAnswering"),yat.forEach(t),tIo=r(K0e," (XLM-RoBERTa model)"),K0e.forEach(t),aIo=i(P),Y3=n(P,"LI",{});var Z0e=s(Y3);pce=n(Z0e,"STRONG",{});var Lat=s(pce);nIo=r(Lat,"xlm-roberta-xl"),Lat.forEach(t),sIo=r(Z0e," \u2014 "),fD=n(Z0e,"A",{href:!0});var xat=s(fD);lIo=r(xat,"XLMRobertaXLForQuestionAnswering"),xat.forEach(t),iIo=r(Z0e," (XLM-RoBERTa-XL model)"),Z0e.forEach(t),dIo=i(P),K3=n(P,"LI",{});var eye=s(K3);_ce=n(eye,"STRONG",{});var kat=s(_ce);cIo=r(kat,"xlnet"),kat.forEach(t),fIo=r(eye," \u2014 "),mD=n(eye,"A",{href:!0});var Sat=s(mD);mIo=r(Sat,"XLNetForQuestionAnsweringSimple"),Sat.forEach(t),gIo=r(eye," (XLNet model)"),eye.forEach(t),hIo=i(P),Z3=n(P,"LI",{});var oye=s(Z3);uce=n(oye,"STRONG",{});var Rat=s(uce);pIo=r(Rat,"yoso"),Rat.forEach(t),_Io=r(oye," \u2014 "),gD=n(oye,"A",{href:!0});var Bat=s(gD);uIo=r(Bat,"YosoForQuestionAnswering"),Bat.forEach(t),bIo=r(oye," (YOSO model)"),oye.forEach(t),P.forEach(t),FIo=i(Ut),e2=n(Ut,"P",{});var rye=s(e2);vIo=r(rye,"The model is set in evaluation mode by default using "),bce=n(rye,"CODE",{});var Pat=s(bce);TIo=r(Pat,"model.eval()"),Pat.forEach(t),MIo=r(rye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fce=n(rye,"CODE",{});var $at=s(Fce);EIo=r($at,"model.train()"),$at.forEach(t),rye.forEach(t),CIo=i(Ut),vce=n(Ut,"P",{});var Iat=s(vce);wIo=r(Iat,"Examples:"),Iat.forEach(t),AIo=i(Ut),m(dw.$$.fragment,Ut),Ut.forEach(t),fl.forEach(t),mRe=i(c),Ad=n(c,"H2",{class:!0});var TPe=s(Ad);o2=n(TPe,"A",{id:!0,class:!0,href:!0});var qat=s(o2);Tce=n(qat,"SPAN",{});var Nat=s(Tce);m(cw.$$.fragment,Nat),Nat.forEach(t),qat.forEach(t),yIo=i(TPe),Mce=n(TPe,"SPAN",{});var jat=s(Mce);LIo=r(jat,"AutoModelForTableQuestionAnswering"),jat.forEach(t),TPe.forEach(t),gRe=i(c),sr=n(c,"DIV",{class:!0});var gl=s(sr);m(fw.$$.fragment,gl),xIo=i(gl),yd=n(gl,"P",{});var gU=s(yd);kIo=r(gU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),hD=n(gU,"A",{href:!0});var Dat=s(hD);SIo=r(Dat,"from_pretrained()"),Dat.forEach(t),RIo=r(gU," class method or the "),pD=n(gU,"A",{href:!0});var Gat=s(pD);BIo=r(Gat,"from_config()"),Gat.forEach(t),PIo=r(gU,` class
method.`),gU.forEach(t),$Io=i(gl),mw=n(gl,"P",{});var MPe=s(mw);IIo=r(MPe,"This class cannot be instantiated directly using "),Ece=n(MPe,"CODE",{});var Oat=s(Ece);qIo=r(Oat,"__init__()"),Oat.forEach(t),NIo=r(MPe," (throws an error)."),MPe.forEach(t),jIo=i(gl),et=n(gl,"DIV",{class:!0});var hl=s(et);m(gw.$$.fragment,hl),DIo=i(hl),Cce=n(hl,"P",{});var Vat=s(Cce);GIo=r(Vat,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Vat.forEach(t),OIo=i(hl),Ld=n(hl,"P",{});var hU=s(Ld);VIo=r(hU,`Note:
Loading a model from its configuration file does `),wce=n(hU,"STRONG",{});var Xat=s(wce);XIo=r(Xat,"not"),Xat.forEach(t),zIo=r(hU,` load the model weights. It only affects the
model\u2019s configuration. Use `),_D=n(hU,"A",{href:!0});var zat=s(_D);QIo=r(zat,"from_pretrained()"),zat.forEach(t),WIo=r(hU," to load the model weights."),hU.forEach(t),HIo=i(hl),Ace=n(hl,"P",{});var Qat=s(Ace);UIo=r(Qat,"Examples:"),Qat.forEach(t),JIo=i(hl),m(hw.$$.fragment,hl),hl.forEach(t),YIo=i(gl),We=n(gl,"DIV",{class:!0});var Jt=s(We);m(pw.$$.fragment,Jt),KIo=i(Jt),yce=n(Jt,"P",{});var Wat=s(yce);ZIo=r(Wat,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Wat.forEach(t),eqo=i(Jt),en=n(Jt,"P",{});var LE=s(en);oqo=r(LE,"The model class to instantiate is selected based on the "),Lce=n(LE,"CODE",{});var Hat=s(Lce);rqo=r(Hat,"model_type"),Hat.forEach(t),tqo=r(LE,` property of the config object (either
passed as an argument or loaded from `),xce=n(LE,"CODE",{});var Uat=s(xce);aqo=r(Uat,"pretrained_model_name_or_path"),Uat.forEach(t),nqo=r(LE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kce=n(LE,"CODE",{});var Jat=s(kce);sqo=r(Jat,"pretrained_model_name_or_path"),Jat.forEach(t),lqo=r(LE,":"),LE.forEach(t),iqo=i(Jt),Sce=n(Jt,"UL",{});var Yat=s(Sce);r2=n(Yat,"LI",{});var tye=s(r2);Rce=n(tye,"STRONG",{});var Kat=s(Rce);dqo=r(Kat,"tapas"),Kat.forEach(t),cqo=r(tye," \u2014 "),uD=n(tye,"A",{href:!0});var Zat=s(uD);fqo=r(Zat,"TapasForQuestionAnswering"),Zat.forEach(t),mqo=r(tye," (TAPAS model)"),tye.forEach(t),Yat.forEach(t),gqo=i(Jt),t2=n(Jt,"P",{});var aye=s(t2);hqo=r(aye,"The model is set in evaluation mode by default using "),Bce=n(aye,"CODE",{});var ent=s(Bce);pqo=r(ent,"model.eval()"),ent.forEach(t),_qo=r(aye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pce=n(aye,"CODE",{});var ont=s(Pce);uqo=r(ont,"model.train()"),ont.forEach(t),aye.forEach(t),bqo=i(Jt),$ce=n(Jt,"P",{});var rnt=s($ce);Fqo=r(rnt,"Examples:"),rnt.forEach(t),vqo=i(Jt),m(_w.$$.fragment,Jt),Jt.forEach(t),gl.forEach(t),hRe=i(c),xd=n(c,"H2",{class:!0});var EPe=s(xd);a2=n(EPe,"A",{id:!0,class:!0,href:!0});var tnt=s(a2);Ice=n(tnt,"SPAN",{});var ant=s(Ice);m(uw.$$.fragment,ant),ant.forEach(t),tnt.forEach(t),Tqo=i(EPe),qce=n(EPe,"SPAN",{});var nnt=s(qce);Mqo=r(nnt,"AutoModelForImageClassification"),nnt.forEach(t),EPe.forEach(t),pRe=i(c),lr=n(c,"DIV",{class:!0});var pl=s(lr);m(bw.$$.fragment,pl),Eqo=i(pl),kd=n(pl,"P",{});var pU=s(kd);Cqo=r(pU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),bD=n(pU,"A",{href:!0});var snt=s(bD);wqo=r(snt,"from_pretrained()"),snt.forEach(t),Aqo=r(pU," class method or the "),FD=n(pU,"A",{href:!0});var lnt=s(FD);yqo=r(lnt,"from_config()"),lnt.forEach(t),Lqo=r(pU,` class
method.`),pU.forEach(t),xqo=i(pl),Fw=n(pl,"P",{});var CPe=s(Fw);kqo=r(CPe,"This class cannot be instantiated directly using "),Nce=n(CPe,"CODE",{});var int=s(Nce);Sqo=r(int,"__init__()"),int.forEach(t),Rqo=r(CPe," (throws an error)."),CPe.forEach(t),Bqo=i(pl),ot=n(pl,"DIV",{class:!0});var _l=s(ot);m(vw.$$.fragment,_l),Pqo=i(_l),jce=n(_l,"P",{});var dnt=s(jce);$qo=r(dnt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),dnt.forEach(t),Iqo=i(_l),Sd=n(_l,"P",{});var _U=s(Sd);qqo=r(_U,`Note:
Loading a model from its configuration file does `),Dce=n(_U,"STRONG",{});var cnt=s(Dce);Nqo=r(cnt,"not"),cnt.forEach(t),jqo=r(_U,` load the model weights. It only affects the
model\u2019s configuration. Use `),vD=n(_U,"A",{href:!0});var fnt=s(vD);Dqo=r(fnt,"from_pretrained()"),fnt.forEach(t),Gqo=r(_U," to load the model weights."),_U.forEach(t),Oqo=i(_l),Gce=n(_l,"P",{});var mnt=s(Gce);Vqo=r(mnt,"Examples:"),mnt.forEach(t),Xqo=i(_l),m(Tw.$$.fragment,_l),_l.forEach(t),zqo=i(pl),He=n(pl,"DIV",{class:!0});var Yt=s(He);m(Mw.$$.fragment,Yt),Qqo=i(Yt),Oce=n(Yt,"P",{});var gnt=s(Oce);Wqo=r(gnt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),gnt.forEach(t),Hqo=i(Yt),on=n(Yt,"P",{});var xE=s(on);Uqo=r(xE,"The model class to instantiate is selected based on the "),Vce=n(xE,"CODE",{});var hnt=s(Vce);Jqo=r(hnt,"model_type"),hnt.forEach(t),Yqo=r(xE,` property of the config object (either
passed as an argument or loaded from `),Xce=n(xE,"CODE",{});var pnt=s(Xce);Kqo=r(pnt,"pretrained_model_name_or_path"),pnt.forEach(t),Zqo=r(xE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zce=n(xE,"CODE",{});var _nt=s(zce);eNo=r(_nt,"pretrained_model_name_or_path"),_nt.forEach(t),oNo=r(xE,":"),xE.forEach(t),rNo=i(Yt),ge=n(Yt,"UL",{});var Te=s(ge);n2=n(Te,"LI",{});var nye=s(n2);Qce=n(nye,"STRONG",{});var unt=s(Qce);tNo=r(unt,"beit"),unt.forEach(t),aNo=r(nye," \u2014 "),TD=n(nye,"A",{href:!0});var bnt=s(TD);nNo=r(bnt,"BeitForImageClassification"),bnt.forEach(t),sNo=r(nye," (BEiT model)"),nye.forEach(t),lNo=i(Te),s2=n(Te,"LI",{});var sye=s(s2);Wce=n(sye,"STRONG",{});var Fnt=s(Wce);iNo=r(Fnt,"convnext"),Fnt.forEach(t),dNo=r(sye," \u2014 "),MD=n(sye,"A",{href:!0});var vnt=s(MD);cNo=r(vnt,"ConvNextForImageClassification"),vnt.forEach(t),fNo=r(sye," (ConvNext model)"),sye.forEach(t),mNo=i(Te),Ds=n(Te,"LI",{});var a9=s(Ds);Hce=n(a9,"STRONG",{});var Tnt=s(Hce);gNo=r(Tnt,"deit"),Tnt.forEach(t),hNo=r(a9," \u2014 "),ED=n(a9,"A",{href:!0});var Mnt=s(ED);pNo=r(Mnt,"DeiTForImageClassification"),Mnt.forEach(t),_No=r(a9," or "),CD=n(a9,"A",{href:!0});var Ent=s(CD);uNo=r(Ent,"DeiTForImageClassificationWithTeacher"),Ent.forEach(t),bNo=r(a9," (DeiT model)"),a9.forEach(t),FNo=i(Te),l2=n(Te,"LI",{});var lye=s(l2);Uce=n(lye,"STRONG",{});var Cnt=s(Uce);vNo=r(Cnt,"imagegpt"),Cnt.forEach(t),TNo=r(lye," \u2014 "),wD=n(lye,"A",{href:!0});var wnt=s(wD);MNo=r(wnt,"ImageGPTForImageClassification"),wnt.forEach(t),ENo=r(lye," (ImageGPT model)"),lye.forEach(t),CNo=i(Te),ma=n(Te,"LI",{});var $f=s(ma);Jce=n($f,"STRONG",{});var Ant=s(Jce);wNo=r(Ant,"perceiver"),Ant.forEach(t),ANo=r($f," \u2014 "),AD=n($f,"A",{href:!0});var ynt=s(AD);yNo=r(ynt,"PerceiverForImageClassificationLearned"),ynt.forEach(t),LNo=r($f," or "),yD=n($f,"A",{href:!0});var Lnt=s(yD);xNo=r(Lnt,"PerceiverForImageClassificationFourier"),Lnt.forEach(t),kNo=r($f," or "),LD=n($f,"A",{href:!0});var xnt=s(LD);SNo=r(xnt,"PerceiverForImageClassificationConvProcessing"),xnt.forEach(t),RNo=r($f," (Perceiver model)"),$f.forEach(t),BNo=i(Te),i2=n(Te,"LI",{});var iye=s(i2);Yce=n(iye,"STRONG",{});var knt=s(Yce);PNo=r(knt,"poolformer"),knt.forEach(t),$No=r(iye," \u2014 "),xD=n(iye,"A",{href:!0});var Snt=s(xD);INo=r(Snt,"PoolFormerForImageClassification"),Snt.forEach(t),qNo=r(iye," (PoolFormer model)"),iye.forEach(t),NNo=i(Te),d2=n(Te,"LI",{});var dye=s(d2);Kce=n(dye,"STRONG",{});var Rnt=s(Kce);jNo=r(Rnt,"resnet"),Rnt.forEach(t),DNo=r(dye," \u2014 "),kD=n(dye,"A",{href:!0});var Bnt=s(kD);GNo=r(Bnt,"ResNetForImageClassification"),Bnt.forEach(t),ONo=r(dye," (ResNet model)"),dye.forEach(t),VNo=i(Te),c2=n(Te,"LI",{});var cye=s(c2);Zce=n(cye,"STRONG",{});var Pnt=s(Zce);XNo=r(Pnt,"segformer"),Pnt.forEach(t),zNo=r(cye," \u2014 "),SD=n(cye,"A",{href:!0});var $nt=s(SD);QNo=r($nt,"SegformerForImageClassification"),$nt.forEach(t),WNo=r(cye," (SegFormer model)"),cye.forEach(t),HNo=i(Te),f2=n(Te,"LI",{});var fye=s(f2);efe=n(fye,"STRONG",{});var Int=s(efe);UNo=r(Int,"swin"),Int.forEach(t),JNo=r(fye," \u2014 "),RD=n(fye,"A",{href:!0});var qnt=s(RD);YNo=r(qnt,"SwinForImageClassification"),qnt.forEach(t),KNo=r(fye," (Swin model)"),fye.forEach(t),ZNo=i(Te),m2=n(Te,"LI",{});var mye=s(m2);ofe=n(mye,"STRONG",{});var Nnt=s(ofe);ejo=r(Nnt,"van"),Nnt.forEach(t),ojo=r(mye," \u2014 "),BD=n(mye,"A",{href:!0});var jnt=s(BD);rjo=r(jnt,"VanForImageClassification"),jnt.forEach(t),tjo=r(mye," (VAN model)"),mye.forEach(t),ajo=i(Te),g2=n(Te,"LI",{});var gye=s(g2);rfe=n(gye,"STRONG",{});var Dnt=s(rfe);njo=r(Dnt,"vit"),Dnt.forEach(t),sjo=r(gye," \u2014 "),PD=n(gye,"A",{href:!0});var Gnt=s(PD);ljo=r(Gnt,"ViTForImageClassification"),Gnt.forEach(t),ijo=r(gye," (ViT model)"),gye.forEach(t),Te.forEach(t),djo=i(Yt),h2=n(Yt,"P",{});var hye=s(h2);cjo=r(hye,"The model is set in evaluation mode by default using "),tfe=n(hye,"CODE",{});var Ont=s(tfe);fjo=r(Ont,"model.eval()"),Ont.forEach(t),mjo=r(hye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),afe=n(hye,"CODE",{});var Vnt=s(afe);gjo=r(Vnt,"model.train()"),Vnt.forEach(t),hye.forEach(t),hjo=i(Yt),nfe=n(Yt,"P",{});var Xnt=s(nfe);pjo=r(Xnt,"Examples:"),Xnt.forEach(t),_jo=i(Yt),m(Ew.$$.fragment,Yt),Yt.forEach(t),pl.forEach(t),_Re=i(c),Rd=n(c,"H2",{class:!0});var wPe=s(Rd);p2=n(wPe,"A",{id:!0,class:!0,href:!0});var znt=s(p2);sfe=n(znt,"SPAN",{});var Qnt=s(sfe);m(Cw.$$.fragment,Qnt),Qnt.forEach(t),znt.forEach(t),ujo=i(wPe),lfe=n(wPe,"SPAN",{});var Wnt=s(lfe);bjo=r(Wnt,"AutoModelForVision2Seq"),Wnt.forEach(t),wPe.forEach(t),uRe=i(c),ir=n(c,"DIV",{class:!0});var ul=s(ir);m(ww.$$.fragment,ul),Fjo=i(ul),Bd=n(ul,"P",{});var uU=s(Bd);vjo=r(uU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),$D=n(uU,"A",{href:!0});var Hnt=s($D);Tjo=r(Hnt,"from_pretrained()"),Hnt.forEach(t),Mjo=r(uU," class method or the "),ID=n(uU,"A",{href:!0});var Unt=s(ID);Ejo=r(Unt,"from_config()"),Unt.forEach(t),Cjo=r(uU,` class
method.`),uU.forEach(t),wjo=i(ul),Aw=n(ul,"P",{});var APe=s(Aw);Ajo=r(APe,"This class cannot be instantiated directly using "),ife=n(APe,"CODE",{});var Jnt=s(ife);yjo=r(Jnt,"__init__()"),Jnt.forEach(t),Ljo=r(APe," (throws an error)."),APe.forEach(t),xjo=i(ul),rt=n(ul,"DIV",{class:!0});var bl=s(rt);m(yw.$$.fragment,bl),kjo=i(bl),dfe=n(bl,"P",{});var Ynt=s(dfe);Sjo=r(Ynt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Ynt.forEach(t),Rjo=i(bl),Pd=n(bl,"P",{});var bU=s(Pd);Bjo=r(bU,`Note:
Loading a model from its configuration file does `),cfe=n(bU,"STRONG",{});var Knt=s(cfe);Pjo=r(Knt,"not"),Knt.forEach(t),$jo=r(bU,` load the model weights. It only affects the
model\u2019s configuration. Use `),qD=n(bU,"A",{href:!0});var Znt=s(qD);Ijo=r(Znt,"from_pretrained()"),Znt.forEach(t),qjo=r(bU," to load the model weights."),bU.forEach(t),Njo=i(bl),ffe=n(bl,"P",{});var est=s(ffe);jjo=r(est,"Examples:"),est.forEach(t),Djo=i(bl),m(Lw.$$.fragment,bl),bl.forEach(t),Gjo=i(ul),Ue=n(ul,"DIV",{class:!0});var Kt=s(Ue);m(xw.$$.fragment,Kt),Ojo=i(Kt),mfe=n(Kt,"P",{});var ost=s(mfe);Vjo=r(ost,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),ost.forEach(t),Xjo=i(Kt),rn=n(Kt,"P",{});var kE=s(rn);zjo=r(kE,"The model class to instantiate is selected based on the "),gfe=n(kE,"CODE",{});var rst=s(gfe);Qjo=r(rst,"model_type"),rst.forEach(t),Wjo=r(kE,` property of the config object (either
passed as an argument or loaded from `),hfe=n(kE,"CODE",{});var tst=s(hfe);Hjo=r(tst,"pretrained_model_name_or_path"),tst.forEach(t),Ujo=r(kE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pfe=n(kE,"CODE",{});var ast=s(pfe);Jjo=r(ast,"pretrained_model_name_or_path"),ast.forEach(t),Yjo=r(kE,":"),kE.forEach(t),Kjo=i(Kt),_fe=n(Kt,"UL",{});var nst=s(_fe);_2=n(nst,"LI",{});var pye=s(_2);ufe=n(pye,"STRONG",{});var sst=s(ufe);Zjo=r(sst,"vision-encoder-decoder"),sst.forEach(t),eDo=r(pye," \u2014 "),ND=n(pye,"A",{href:!0});var lst=s(ND);oDo=r(lst,"VisionEncoderDecoderModel"),lst.forEach(t),rDo=r(pye," (Vision Encoder decoder model)"),pye.forEach(t),nst.forEach(t),tDo=i(Kt),u2=n(Kt,"P",{});var _ye=s(u2);aDo=r(_ye,"The model is set in evaluation mode by default using "),bfe=n(_ye,"CODE",{});var ist=s(bfe);nDo=r(ist,"model.eval()"),ist.forEach(t),sDo=r(_ye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ffe=n(_ye,"CODE",{});var dst=s(Ffe);lDo=r(dst,"model.train()"),dst.forEach(t),_ye.forEach(t),iDo=i(Kt),vfe=n(Kt,"P",{});var cst=s(vfe);dDo=r(cst,"Examples:"),cst.forEach(t),cDo=i(Kt),m(kw.$$.fragment,Kt),Kt.forEach(t),ul.forEach(t),bRe=i(c),$d=n(c,"H2",{class:!0});var yPe=s($d);b2=n(yPe,"A",{id:!0,class:!0,href:!0});var fst=s(b2);Tfe=n(fst,"SPAN",{});var mst=s(Tfe);m(Sw.$$.fragment,mst),mst.forEach(t),fst.forEach(t),fDo=i(yPe),Mfe=n(yPe,"SPAN",{});var gst=s(Mfe);mDo=r(gst,"AutoModelForAudioClassification"),gst.forEach(t),yPe.forEach(t),FRe=i(c),dr=n(c,"DIV",{class:!0});var Fl=s(dr);m(Rw.$$.fragment,Fl),gDo=i(Fl),Id=n(Fl,"P",{});var FU=s(Id);hDo=r(FU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),jD=n(FU,"A",{href:!0});var hst=s(jD);pDo=r(hst,"from_pretrained()"),hst.forEach(t),_Do=r(FU," class method or the "),DD=n(FU,"A",{href:!0});var pst=s(DD);uDo=r(pst,"from_config()"),pst.forEach(t),bDo=r(FU,` class
method.`),FU.forEach(t),FDo=i(Fl),Bw=n(Fl,"P",{});var LPe=s(Bw);vDo=r(LPe,"This class cannot be instantiated directly using "),Efe=n(LPe,"CODE",{});var _st=s(Efe);TDo=r(_st,"__init__()"),_st.forEach(t),MDo=r(LPe," (throws an error)."),LPe.forEach(t),EDo=i(Fl),tt=n(Fl,"DIV",{class:!0});var vl=s(tt);m(Pw.$$.fragment,vl),CDo=i(vl),Cfe=n(vl,"P",{});var ust=s(Cfe);wDo=r(ust,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),ust.forEach(t),ADo=i(vl),qd=n(vl,"P",{});var vU=s(qd);yDo=r(vU,`Note:
Loading a model from its configuration file does `),wfe=n(vU,"STRONG",{});var bst=s(wfe);LDo=r(bst,"not"),bst.forEach(t),xDo=r(vU,` load the model weights. It only affects the
model\u2019s configuration. Use `),GD=n(vU,"A",{href:!0});var Fst=s(GD);kDo=r(Fst,"from_pretrained()"),Fst.forEach(t),SDo=r(vU," to load the model weights."),vU.forEach(t),RDo=i(vl),Afe=n(vl,"P",{});var vst=s(Afe);BDo=r(vst,"Examples:"),vst.forEach(t),PDo=i(vl),m($w.$$.fragment,vl),vl.forEach(t),$Do=i(Fl),Je=n(Fl,"DIV",{class:!0});var Zt=s(Je);m(Iw.$$.fragment,Zt),IDo=i(Zt),yfe=n(Zt,"P",{});var Tst=s(yfe);qDo=r(Tst,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Tst.forEach(t),NDo=i(Zt),tn=n(Zt,"P",{});var SE=s(tn);jDo=r(SE,"The model class to instantiate is selected based on the "),Lfe=n(SE,"CODE",{});var Mst=s(Lfe);DDo=r(Mst,"model_type"),Mst.forEach(t),GDo=r(SE,` property of the config object (either
passed as an argument or loaded from `),xfe=n(SE,"CODE",{});var Est=s(xfe);ODo=r(Est,"pretrained_model_name_or_path"),Est.forEach(t),VDo=r(SE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kfe=n(SE,"CODE",{});var Cst=s(kfe);XDo=r(Cst,"pretrained_model_name_or_path"),Cst.forEach(t),zDo=r(SE,":"),SE.forEach(t),QDo=i(Zt),Se=n(Zt,"UL",{});var Do=s(Se);F2=n(Do,"LI",{});var uye=s(F2);Sfe=n(uye,"STRONG",{});var wst=s(Sfe);WDo=r(wst,"data2vec-audio"),wst.forEach(t),HDo=r(uye," \u2014 "),OD=n(uye,"A",{href:!0});var Ast=s(OD);UDo=r(Ast,"Data2VecAudioForSequenceClassification"),Ast.forEach(t),JDo=r(uye," (Data2VecAudio model)"),uye.forEach(t),YDo=i(Do),v2=n(Do,"LI",{});var bye=s(v2);Rfe=n(bye,"STRONG",{});var yst=s(Rfe);KDo=r(yst,"hubert"),yst.forEach(t),ZDo=r(bye," \u2014 "),VD=n(bye,"A",{href:!0});var Lst=s(VD);eGo=r(Lst,"HubertForSequenceClassification"),Lst.forEach(t),oGo=r(bye," (Hubert model)"),bye.forEach(t),rGo=i(Do),T2=n(Do,"LI",{});var Fye=s(T2);Bfe=n(Fye,"STRONG",{});var xst=s(Bfe);tGo=r(xst,"sew"),xst.forEach(t),aGo=r(Fye," \u2014 "),XD=n(Fye,"A",{href:!0});var kst=s(XD);nGo=r(kst,"SEWForSequenceClassification"),kst.forEach(t),sGo=r(Fye," (SEW model)"),Fye.forEach(t),lGo=i(Do),M2=n(Do,"LI",{});var vye=s(M2);Pfe=n(vye,"STRONG",{});var Sst=s(Pfe);iGo=r(Sst,"sew-d"),Sst.forEach(t),dGo=r(vye," \u2014 "),zD=n(vye,"A",{href:!0});var Rst=s(zD);cGo=r(Rst,"SEWDForSequenceClassification"),Rst.forEach(t),fGo=r(vye," (SEW-D model)"),vye.forEach(t),mGo=i(Do),E2=n(Do,"LI",{});var Tye=s(E2);$fe=n(Tye,"STRONG",{});var Bst=s($fe);gGo=r(Bst,"unispeech"),Bst.forEach(t),hGo=r(Tye," \u2014 "),QD=n(Tye,"A",{href:!0});var Pst=s(QD);pGo=r(Pst,"UniSpeechForSequenceClassification"),Pst.forEach(t),_Go=r(Tye," (UniSpeech model)"),Tye.forEach(t),uGo=i(Do),C2=n(Do,"LI",{});var Mye=s(C2);Ife=n(Mye,"STRONG",{});var $st=s(Ife);bGo=r($st,"unispeech-sat"),$st.forEach(t),FGo=r(Mye," \u2014 "),WD=n(Mye,"A",{href:!0});var Ist=s(WD);vGo=r(Ist,"UniSpeechSatForSequenceClassification"),Ist.forEach(t),TGo=r(Mye," (UniSpeechSat model)"),Mye.forEach(t),MGo=i(Do),w2=n(Do,"LI",{});var Eye=s(w2);qfe=n(Eye,"STRONG",{});var qst=s(qfe);EGo=r(qst,"wav2vec2"),qst.forEach(t),CGo=r(Eye," \u2014 "),HD=n(Eye,"A",{href:!0});var Nst=s(HD);wGo=r(Nst,"Wav2Vec2ForSequenceClassification"),Nst.forEach(t),AGo=r(Eye," (Wav2Vec2 model)"),Eye.forEach(t),yGo=i(Do),A2=n(Do,"LI",{});var Cye=s(A2);Nfe=n(Cye,"STRONG",{});var jst=s(Nfe);LGo=r(jst,"wavlm"),jst.forEach(t),xGo=r(Cye," \u2014 "),UD=n(Cye,"A",{href:!0});var Dst=s(UD);kGo=r(Dst,"WavLMForSequenceClassification"),Dst.forEach(t),SGo=r(Cye," (WavLM model)"),Cye.forEach(t),Do.forEach(t),RGo=i(Zt),y2=n(Zt,"P",{});var wye=s(y2);BGo=r(wye,"The model is set in evaluation mode by default using "),jfe=n(wye,"CODE",{});var Gst=s(jfe);PGo=r(Gst,"model.eval()"),Gst.forEach(t),$Go=r(wye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dfe=n(wye,"CODE",{});var Ost=s(Dfe);IGo=r(Ost,"model.train()"),Ost.forEach(t),wye.forEach(t),qGo=i(Zt),Gfe=n(Zt,"P",{});var Vst=s(Gfe);NGo=r(Vst,"Examples:"),Vst.forEach(t),jGo=i(Zt),m(qw.$$.fragment,Zt),Zt.forEach(t),Fl.forEach(t),vRe=i(c),Nd=n(c,"H2",{class:!0});var xPe=s(Nd);L2=n(xPe,"A",{id:!0,class:!0,href:!0});var Xst=s(L2);Ofe=n(Xst,"SPAN",{});var zst=s(Ofe);m(Nw.$$.fragment,zst),zst.forEach(t),Xst.forEach(t),DGo=i(xPe),Vfe=n(xPe,"SPAN",{});var Qst=s(Vfe);GGo=r(Qst,"AutoModelForAudioFrameClassification"),Qst.forEach(t),xPe.forEach(t),TRe=i(c),cr=n(c,"DIV",{class:!0});var Tl=s(cr);m(jw.$$.fragment,Tl),OGo=i(Tl),jd=n(Tl,"P",{});var TU=s(jd);VGo=r(TU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),JD=n(TU,"A",{href:!0});var Wst=s(JD);XGo=r(Wst,"from_pretrained()"),Wst.forEach(t),zGo=r(TU," class method or the "),YD=n(TU,"A",{href:!0});var Hst=s(YD);QGo=r(Hst,"from_config()"),Hst.forEach(t),WGo=r(TU,` class
method.`),TU.forEach(t),HGo=i(Tl),Dw=n(Tl,"P",{});var kPe=s(Dw);UGo=r(kPe,"This class cannot be instantiated directly using "),Xfe=n(kPe,"CODE",{});var Ust=s(Xfe);JGo=r(Ust,"__init__()"),Ust.forEach(t),YGo=r(kPe," (throws an error)."),kPe.forEach(t),KGo=i(Tl),at=n(Tl,"DIV",{class:!0});var Ml=s(at);m(Gw.$$.fragment,Ml),ZGo=i(Ml),zfe=n(Ml,"P",{});var Jst=s(zfe);eOo=r(Jst,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Jst.forEach(t),oOo=i(Ml),Dd=n(Ml,"P",{});var MU=s(Dd);rOo=r(MU,`Note:
Loading a model from its configuration file does `),Qfe=n(MU,"STRONG",{});var Yst=s(Qfe);tOo=r(Yst,"not"),Yst.forEach(t),aOo=r(MU,` load the model weights. It only affects the
model\u2019s configuration. Use `),KD=n(MU,"A",{href:!0});var Kst=s(KD);nOo=r(Kst,"from_pretrained()"),Kst.forEach(t),sOo=r(MU," to load the model weights."),MU.forEach(t),lOo=i(Ml),Wfe=n(Ml,"P",{});var Zst=s(Wfe);iOo=r(Zst,"Examples:"),Zst.forEach(t),dOo=i(Ml),m(Ow.$$.fragment,Ml),Ml.forEach(t),cOo=i(Tl),Ye=n(Tl,"DIV",{class:!0});var ea=s(Ye);m(Vw.$$.fragment,ea),fOo=i(ea),Hfe=n(ea,"P",{});var elt=s(Hfe);mOo=r(elt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),elt.forEach(t),gOo=i(ea),an=n(ea,"P",{});var RE=s(an);hOo=r(RE,"The model class to instantiate is selected based on the "),Ufe=n(RE,"CODE",{});var olt=s(Ufe);pOo=r(olt,"model_type"),olt.forEach(t),_Oo=r(RE,` property of the config object (either
passed as an argument or loaded from `),Jfe=n(RE,"CODE",{});var rlt=s(Jfe);uOo=r(rlt,"pretrained_model_name_or_path"),rlt.forEach(t),bOo=r(RE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yfe=n(RE,"CODE",{});var tlt=s(Yfe);FOo=r(tlt,"pretrained_model_name_or_path"),tlt.forEach(t),vOo=r(RE,":"),RE.forEach(t),TOo=i(ea),nn=n(ea,"UL",{});var BE=s(nn);x2=n(BE,"LI",{});var Aye=s(x2);Kfe=n(Aye,"STRONG",{});var alt=s(Kfe);MOo=r(alt,"data2vec-audio"),alt.forEach(t),EOo=r(Aye," \u2014 "),ZD=n(Aye,"A",{href:!0});var nlt=s(ZD);COo=r(nlt,"Data2VecAudioForAudioFrameClassification"),nlt.forEach(t),wOo=r(Aye," (Data2VecAudio model)"),Aye.forEach(t),AOo=i(BE),k2=n(BE,"LI",{});var yye=s(k2);Zfe=n(yye,"STRONG",{});var slt=s(Zfe);yOo=r(slt,"unispeech-sat"),slt.forEach(t),LOo=r(yye," \u2014 "),eG=n(yye,"A",{href:!0});var llt=s(eG);xOo=r(llt,"UniSpeechSatForAudioFrameClassification"),llt.forEach(t),kOo=r(yye," (UniSpeechSat model)"),yye.forEach(t),SOo=i(BE),S2=n(BE,"LI",{});var Lye=s(S2);eme=n(Lye,"STRONG",{});var ilt=s(eme);ROo=r(ilt,"wav2vec2"),ilt.forEach(t),BOo=r(Lye," \u2014 "),oG=n(Lye,"A",{href:!0});var dlt=s(oG);POo=r(dlt,"Wav2Vec2ForAudioFrameClassification"),dlt.forEach(t),$Oo=r(Lye," (Wav2Vec2 model)"),Lye.forEach(t),IOo=i(BE),R2=n(BE,"LI",{});var xye=s(R2);ome=n(xye,"STRONG",{});var clt=s(ome);qOo=r(clt,"wavlm"),clt.forEach(t),NOo=r(xye," \u2014 "),rG=n(xye,"A",{href:!0});var flt=s(rG);jOo=r(flt,"WavLMForAudioFrameClassification"),flt.forEach(t),DOo=r(xye," (WavLM model)"),xye.forEach(t),BE.forEach(t),GOo=i(ea),B2=n(ea,"P",{});var kye=s(B2);OOo=r(kye,"The model is set in evaluation mode by default using "),rme=n(kye,"CODE",{});var mlt=s(rme);VOo=r(mlt,"model.eval()"),mlt.forEach(t),XOo=r(kye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tme=n(kye,"CODE",{});var glt=s(tme);zOo=r(glt,"model.train()"),glt.forEach(t),kye.forEach(t),QOo=i(ea),ame=n(ea,"P",{});var hlt=s(ame);WOo=r(hlt,"Examples:"),hlt.forEach(t),HOo=i(ea),m(Xw.$$.fragment,ea),ea.forEach(t),Tl.forEach(t),MRe=i(c),Gd=n(c,"H2",{class:!0});var SPe=s(Gd);P2=n(SPe,"A",{id:!0,class:!0,href:!0});var plt=s(P2);nme=n(plt,"SPAN",{});var _lt=s(nme);m(zw.$$.fragment,_lt),_lt.forEach(t),plt.forEach(t),UOo=i(SPe),sme=n(SPe,"SPAN",{});var ult=s(sme);JOo=r(ult,"AutoModelForCTC"),ult.forEach(t),SPe.forEach(t),ERe=i(c),fr=n(c,"DIV",{class:!0});var El=s(fr);m(Qw.$$.fragment,El),YOo=i(El),Od=n(El,"P",{});var EU=s(Od);KOo=r(EU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),tG=n(EU,"A",{href:!0});var blt=s(tG);ZOo=r(blt,"from_pretrained()"),blt.forEach(t),eVo=r(EU," class method or the "),aG=n(EU,"A",{href:!0});var Flt=s(aG);oVo=r(Flt,"from_config()"),Flt.forEach(t),rVo=r(EU,` class
method.`),EU.forEach(t),tVo=i(El),Ww=n(El,"P",{});var RPe=s(Ww);aVo=r(RPe,"This class cannot be instantiated directly using "),lme=n(RPe,"CODE",{});var vlt=s(lme);nVo=r(vlt,"__init__()"),vlt.forEach(t),sVo=r(RPe," (throws an error)."),RPe.forEach(t),lVo=i(El),nt=n(El,"DIV",{class:!0});var Cl=s(nt);m(Hw.$$.fragment,Cl),iVo=i(Cl),ime=n(Cl,"P",{});var Tlt=s(ime);dVo=r(Tlt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Tlt.forEach(t),cVo=i(Cl),Vd=n(Cl,"P",{});var CU=s(Vd);fVo=r(CU,`Note:
Loading a model from its configuration file does `),dme=n(CU,"STRONG",{});var Mlt=s(dme);mVo=r(Mlt,"not"),Mlt.forEach(t),gVo=r(CU,` load the model weights. It only affects the
model\u2019s configuration. Use `),nG=n(CU,"A",{href:!0});var Elt=s(nG);hVo=r(Elt,"from_pretrained()"),Elt.forEach(t),pVo=r(CU," to load the model weights."),CU.forEach(t),_Vo=i(Cl),cme=n(Cl,"P",{});var Clt=s(cme);uVo=r(Clt,"Examples:"),Clt.forEach(t),bVo=i(Cl),m(Uw.$$.fragment,Cl),Cl.forEach(t),FVo=i(El),Ke=n(El,"DIV",{class:!0});var oa=s(Ke);m(Jw.$$.fragment,oa),vVo=i(oa),fme=n(oa,"P",{});var wlt=s(fme);TVo=r(wlt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),wlt.forEach(t),MVo=i(oa),sn=n(oa,"P",{});var PE=s(sn);EVo=r(PE,"The model class to instantiate is selected based on the "),mme=n(PE,"CODE",{});var Alt=s(mme);CVo=r(Alt,"model_type"),Alt.forEach(t),wVo=r(PE,` property of the config object (either
passed as an argument or loaded from `),gme=n(PE,"CODE",{});var ylt=s(gme);AVo=r(ylt,"pretrained_model_name_or_path"),ylt.forEach(t),yVo=r(PE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hme=n(PE,"CODE",{});var Llt=s(hme);LVo=r(Llt,"pretrained_model_name_or_path"),Llt.forEach(t),xVo=r(PE,":"),PE.forEach(t),kVo=i(oa),Re=n(oa,"UL",{});var Go=s(Re);$2=n(Go,"LI",{});var Sye=s($2);pme=n(Sye,"STRONG",{});var xlt=s(pme);SVo=r(xlt,"data2vec-audio"),xlt.forEach(t),RVo=r(Sye," \u2014 "),sG=n(Sye,"A",{href:!0});var klt=s(sG);BVo=r(klt,"Data2VecAudioForCTC"),klt.forEach(t),PVo=r(Sye," (Data2VecAudio model)"),Sye.forEach(t),$Vo=i(Go),I2=n(Go,"LI",{});var Rye=s(I2);_me=n(Rye,"STRONG",{});var Slt=s(_me);IVo=r(Slt,"hubert"),Slt.forEach(t),qVo=r(Rye," \u2014 "),lG=n(Rye,"A",{href:!0});var Rlt=s(lG);NVo=r(Rlt,"HubertForCTC"),Rlt.forEach(t),jVo=r(Rye," (Hubert model)"),Rye.forEach(t),DVo=i(Go),q2=n(Go,"LI",{});var Bye=s(q2);ume=n(Bye,"STRONG",{});var Blt=s(ume);GVo=r(Blt,"sew"),Blt.forEach(t),OVo=r(Bye," \u2014 "),iG=n(Bye,"A",{href:!0});var Plt=s(iG);VVo=r(Plt,"SEWForCTC"),Plt.forEach(t),XVo=r(Bye," (SEW model)"),Bye.forEach(t),zVo=i(Go),N2=n(Go,"LI",{});var Pye=s(N2);bme=n(Pye,"STRONG",{});var $lt=s(bme);QVo=r($lt,"sew-d"),$lt.forEach(t),WVo=r(Pye," \u2014 "),dG=n(Pye,"A",{href:!0});var Ilt=s(dG);HVo=r(Ilt,"SEWDForCTC"),Ilt.forEach(t),UVo=r(Pye," (SEW-D model)"),Pye.forEach(t),JVo=i(Go),j2=n(Go,"LI",{});var $ye=s(j2);Fme=n($ye,"STRONG",{});var qlt=s(Fme);YVo=r(qlt,"unispeech"),qlt.forEach(t),KVo=r($ye," \u2014 "),cG=n($ye,"A",{href:!0});var Nlt=s(cG);ZVo=r(Nlt,"UniSpeechForCTC"),Nlt.forEach(t),eXo=r($ye," (UniSpeech model)"),$ye.forEach(t),oXo=i(Go),D2=n(Go,"LI",{});var Iye=s(D2);vme=n(Iye,"STRONG",{});var jlt=s(vme);rXo=r(jlt,"unispeech-sat"),jlt.forEach(t),tXo=r(Iye," \u2014 "),fG=n(Iye,"A",{href:!0});var Dlt=s(fG);aXo=r(Dlt,"UniSpeechSatForCTC"),Dlt.forEach(t),nXo=r(Iye," (UniSpeechSat model)"),Iye.forEach(t),sXo=i(Go),G2=n(Go,"LI",{});var qye=s(G2);Tme=n(qye,"STRONG",{});var Glt=s(Tme);lXo=r(Glt,"wav2vec2"),Glt.forEach(t),iXo=r(qye," \u2014 "),mG=n(qye,"A",{href:!0});var Olt=s(mG);dXo=r(Olt,"Wav2Vec2ForCTC"),Olt.forEach(t),cXo=r(qye," (Wav2Vec2 model)"),qye.forEach(t),fXo=i(Go),O2=n(Go,"LI",{});var Nye=s(O2);Mme=n(Nye,"STRONG",{});var Vlt=s(Mme);mXo=r(Vlt,"wavlm"),Vlt.forEach(t),gXo=r(Nye," \u2014 "),gG=n(Nye,"A",{href:!0});var Xlt=s(gG);hXo=r(Xlt,"WavLMForCTC"),Xlt.forEach(t),pXo=r(Nye," (WavLM model)"),Nye.forEach(t),Go.forEach(t),_Xo=i(oa),V2=n(oa,"P",{});var jye=s(V2);uXo=r(jye,"The model is set in evaluation mode by default using "),Eme=n(jye,"CODE",{});var zlt=s(Eme);bXo=r(zlt,"model.eval()"),zlt.forEach(t),FXo=r(jye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cme=n(jye,"CODE",{});var Qlt=s(Cme);vXo=r(Qlt,"model.train()"),Qlt.forEach(t),jye.forEach(t),TXo=i(oa),wme=n(oa,"P",{});var Wlt=s(wme);MXo=r(Wlt,"Examples:"),Wlt.forEach(t),EXo=i(oa),m(Yw.$$.fragment,oa),oa.forEach(t),El.forEach(t),CRe=i(c),Xd=n(c,"H2",{class:!0});var BPe=s(Xd);X2=n(BPe,"A",{id:!0,class:!0,href:!0});var Hlt=s(X2);Ame=n(Hlt,"SPAN",{});var Ult=s(Ame);m(Kw.$$.fragment,Ult),Ult.forEach(t),Hlt.forEach(t),CXo=i(BPe),yme=n(BPe,"SPAN",{});var Jlt=s(yme);wXo=r(Jlt,"AutoModelForSpeechSeq2Seq"),Jlt.forEach(t),BPe.forEach(t),wRe=i(c),mr=n(c,"DIV",{class:!0});var wl=s(mr);m(Zw.$$.fragment,wl),AXo=i(wl),zd=n(wl,"P",{});var wU=s(zd);yXo=r(wU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),hG=n(wU,"A",{href:!0});var Ylt=s(hG);LXo=r(Ylt,"from_pretrained()"),Ylt.forEach(t),xXo=r(wU," class method or the "),pG=n(wU,"A",{href:!0});var Klt=s(pG);kXo=r(Klt,"from_config()"),Klt.forEach(t),SXo=r(wU,` class
method.`),wU.forEach(t),RXo=i(wl),eA=n(wl,"P",{});var PPe=s(eA);BXo=r(PPe,"This class cannot be instantiated directly using "),Lme=n(PPe,"CODE",{});var Zlt=s(Lme);PXo=r(Zlt,"__init__()"),Zlt.forEach(t),$Xo=r(PPe," (throws an error)."),PPe.forEach(t),IXo=i(wl),st=n(wl,"DIV",{class:!0});var Al=s(st);m(oA.$$.fragment,Al),qXo=i(Al),xme=n(Al,"P",{});var eit=s(xme);NXo=r(eit,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),eit.forEach(t),jXo=i(Al),Qd=n(Al,"P",{});var AU=s(Qd);DXo=r(AU,`Note:
Loading a model from its configuration file does `),kme=n(AU,"STRONG",{});var oit=s(kme);GXo=r(oit,"not"),oit.forEach(t),OXo=r(AU,` load the model weights. It only affects the
model\u2019s configuration. Use `),_G=n(AU,"A",{href:!0});var rit=s(_G);VXo=r(rit,"from_pretrained()"),rit.forEach(t),XXo=r(AU," to load the model weights."),AU.forEach(t),zXo=i(Al),Sme=n(Al,"P",{});var tit=s(Sme);QXo=r(tit,"Examples:"),tit.forEach(t),WXo=i(Al),m(rA.$$.fragment,Al),Al.forEach(t),HXo=i(wl),Ze=n(wl,"DIV",{class:!0});var ra=s(Ze);m(tA.$$.fragment,ra),UXo=i(ra),Rme=n(ra,"P",{});var ait=s(Rme);JXo=r(ait,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),ait.forEach(t),YXo=i(ra),ln=n(ra,"P",{});var $E=s(ln);KXo=r($E,"The model class to instantiate is selected based on the "),Bme=n($E,"CODE",{});var nit=s(Bme);ZXo=r(nit,"model_type"),nit.forEach(t),ezo=r($E,` property of the config object (either
passed as an argument or loaded from `),Pme=n($E,"CODE",{});var sit=s(Pme);ozo=r(sit,"pretrained_model_name_or_path"),sit.forEach(t),rzo=r($E,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$me=n($E,"CODE",{});var lit=s($me);tzo=r(lit,"pretrained_model_name_or_path"),lit.forEach(t),azo=r($E,":"),$E.forEach(t),nzo=i(ra),aA=n(ra,"UL",{});var $Pe=s(aA);z2=n($Pe,"LI",{});var Dye=s(z2);Ime=n(Dye,"STRONG",{});var iit=s(Ime);szo=r(iit,"speech-encoder-decoder"),iit.forEach(t),lzo=r(Dye," \u2014 "),uG=n(Dye,"A",{href:!0});var dit=s(uG);izo=r(dit,"SpeechEncoderDecoderModel"),dit.forEach(t),dzo=r(Dye," (Speech Encoder decoder model)"),Dye.forEach(t),czo=i($Pe),Q2=n($Pe,"LI",{});var Gye=s(Q2);qme=n(Gye,"STRONG",{});var cit=s(qme);fzo=r(cit,"speech_to_text"),cit.forEach(t),mzo=r(Gye," \u2014 "),bG=n(Gye,"A",{href:!0});var fit=s(bG);gzo=r(fit,"Speech2TextForConditionalGeneration"),fit.forEach(t),hzo=r(Gye," (Speech2Text model)"),Gye.forEach(t),$Pe.forEach(t),pzo=i(ra),W2=n(ra,"P",{});var Oye=s(W2);_zo=r(Oye,"The model is set in evaluation mode by default using "),Nme=n(Oye,"CODE",{});var mit=s(Nme);uzo=r(mit,"model.eval()"),mit.forEach(t),bzo=r(Oye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jme=n(Oye,"CODE",{});var git=s(jme);Fzo=r(git,"model.train()"),git.forEach(t),Oye.forEach(t),vzo=i(ra),Dme=n(ra,"P",{});var hit=s(Dme);Tzo=r(hit,"Examples:"),hit.forEach(t),Mzo=i(ra),m(nA.$$.fragment,ra),ra.forEach(t),wl.forEach(t),ARe=i(c),Wd=n(c,"H2",{class:!0});var IPe=s(Wd);H2=n(IPe,"A",{id:!0,class:!0,href:!0});var pit=s(H2);Gme=n(pit,"SPAN",{});var _it=s(Gme);m(sA.$$.fragment,_it),_it.forEach(t),pit.forEach(t),Ezo=i(IPe),Ome=n(IPe,"SPAN",{});var uit=s(Ome);Czo=r(uit,"AutoModelForAudioXVector"),uit.forEach(t),IPe.forEach(t),yRe=i(c),gr=n(c,"DIV",{class:!0});var yl=s(gr);m(lA.$$.fragment,yl),wzo=i(yl),Hd=n(yl,"P",{});var yU=s(Hd);Azo=r(yU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),FG=n(yU,"A",{href:!0});var bit=s(FG);yzo=r(bit,"from_pretrained()"),bit.forEach(t),Lzo=r(yU," class method or the "),vG=n(yU,"A",{href:!0});var Fit=s(vG);xzo=r(Fit,"from_config()"),Fit.forEach(t),kzo=r(yU,` class
method.`),yU.forEach(t),Szo=i(yl),iA=n(yl,"P",{});var qPe=s(iA);Rzo=r(qPe,"This class cannot be instantiated directly using "),Vme=n(qPe,"CODE",{});var vit=s(Vme);Bzo=r(vit,"__init__()"),vit.forEach(t),Pzo=r(qPe," (throws an error)."),qPe.forEach(t),$zo=i(yl),lt=n(yl,"DIV",{class:!0});var Ll=s(lt);m(dA.$$.fragment,Ll),Izo=i(Ll),Xme=n(Ll,"P",{});var Tit=s(Xme);qzo=r(Tit,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Tit.forEach(t),Nzo=i(Ll),Ud=n(Ll,"P",{});var LU=s(Ud);jzo=r(LU,`Note:
Loading a model from its configuration file does `),zme=n(LU,"STRONG",{});var Mit=s(zme);Dzo=r(Mit,"not"),Mit.forEach(t),Gzo=r(LU,` load the model weights. It only affects the
model\u2019s configuration. Use `),TG=n(LU,"A",{href:!0});var Eit=s(TG);Ozo=r(Eit,"from_pretrained()"),Eit.forEach(t),Vzo=r(LU," to load the model weights."),LU.forEach(t),Xzo=i(Ll),Qme=n(Ll,"P",{});var Cit=s(Qme);zzo=r(Cit,"Examples:"),Cit.forEach(t),Qzo=i(Ll),m(cA.$$.fragment,Ll),Ll.forEach(t),Wzo=i(yl),eo=n(yl,"DIV",{class:!0});var ta=s(eo);m(fA.$$.fragment,ta),Hzo=i(ta),Wme=n(ta,"P",{});var wit=s(Wme);Uzo=r(wit,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),wit.forEach(t),Jzo=i(ta),dn=n(ta,"P",{});var IE=s(dn);Yzo=r(IE,"The model class to instantiate is selected based on the "),Hme=n(IE,"CODE",{});var Ait=s(Hme);Kzo=r(Ait,"model_type"),Ait.forEach(t),Zzo=r(IE,` property of the config object (either
passed as an argument or loaded from `),Ume=n(IE,"CODE",{});var yit=s(Ume);eQo=r(yit,"pretrained_model_name_or_path"),yit.forEach(t),oQo=r(IE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jme=n(IE,"CODE",{});var Lit=s(Jme);rQo=r(Lit,"pretrained_model_name_or_path"),Lit.forEach(t),tQo=r(IE,":"),IE.forEach(t),aQo=i(ta),cn=n(ta,"UL",{});var qE=s(cn);U2=n(qE,"LI",{});var Vye=s(U2);Yme=n(Vye,"STRONG",{});var xit=s(Yme);nQo=r(xit,"data2vec-audio"),xit.forEach(t),sQo=r(Vye," \u2014 "),MG=n(Vye,"A",{href:!0});var kit=s(MG);lQo=r(kit,"Data2VecAudioForXVector"),kit.forEach(t),iQo=r(Vye," (Data2VecAudio model)"),Vye.forEach(t),dQo=i(qE),J2=n(qE,"LI",{});var Xye=s(J2);Kme=n(Xye,"STRONG",{});var Sit=s(Kme);cQo=r(Sit,"unispeech-sat"),Sit.forEach(t),fQo=r(Xye," \u2014 "),EG=n(Xye,"A",{href:!0});var Rit=s(EG);mQo=r(Rit,"UniSpeechSatForXVector"),Rit.forEach(t),gQo=r(Xye," (UniSpeechSat model)"),Xye.forEach(t),hQo=i(qE),Y2=n(qE,"LI",{});var zye=s(Y2);Zme=n(zye,"STRONG",{});var Bit=s(Zme);pQo=r(Bit,"wav2vec2"),Bit.forEach(t),_Qo=r(zye," \u2014 "),CG=n(zye,"A",{href:!0});var Pit=s(CG);uQo=r(Pit,"Wav2Vec2ForXVector"),Pit.forEach(t),bQo=r(zye," (Wav2Vec2 model)"),zye.forEach(t),FQo=i(qE),K2=n(qE,"LI",{});var Qye=s(K2);ege=n(Qye,"STRONG",{});var $it=s(ege);vQo=r($it,"wavlm"),$it.forEach(t),TQo=r(Qye," \u2014 "),wG=n(Qye,"A",{href:!0});var Iit=s(wG);MQo=r(Iit,"WavLMForXVector"),Iit.forEach(t),EQo=r(Qye," (WavLM model)"),Qye.forEach(t),qE.forEach(t),CQo=i(ta),Z2=n(ta,"P",{});var Wye=s(Z2);wQo=r(Wye,"The model is set in evaluation mode by default using "),oge=n(Wye,"CODE",{});var qit=s(oge);AQo=r(qit,"model.eval()"),qit.forEach(t),yQo=r(Wye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rge=n(Wye,"CODE",{});var Nit=s(rge);LQo=r(Nit,"model.train()"),Nit.forEach(t),Wye.forEach(t),xQo=i(ta),tge=n(ta,"P",{});var jit=s(tge);kQo=r(jit,"Examples:"),jit.forEach(t),SQo=i(ta),m(mA.$$.fragment,ta),ta.forEach(t),yl.forEach(t),LRe=i(c),Jd=n(c,"H2",{class:!0});var NPe=s(Jd);eF=n(NPe,"A",{id:!0,class:!0,href:!0});var Dit=s(eF);age=n(Dit,"SPAN",{});var Git=s(age);m(gA.$$.fragment,Git),Git.forEach(t),Dit.forEach(t),RQo=i(NPe),nge=n(NPe,"SPAN",{});var Oit=s(nge);BQo=r(Oit,"AutoModelForMaskedImageModeling"),Oit.forEach(t),NPe.forEach(t),xRe=i(c),hr=n(c,"DIV",{class:!0});var xl=s(hr);m(hA.$$.fragment,xl),PQo=i(xl),Yd=n(xl,"P",{});var xU=s(Yd);$Qo=r(xU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),AG=n(xU,"A",{href:!0});var Vit=s(AG);IQo=r(Vit,"from_pretrained()"),Vit.forEach(t),qQo=r(xU," class method or the "),yG=n(xU,"A",{href:!0});var Xit=s(yG);NQo=r(Xit,"from_config()"),Xit.forEach(t),jQo=r(xU,` class
method.`),xU.forEach(t),DQo=i(xl),pA=n(xl,"P",{});var jPe=s(pA);GQo=r(jPe,"This class cannot be instantiated directly using "),sge=n(jPe,"CODE",{});var zit=s(sge);OQo=r(zit,"__init__()"),zit.forEach(t),VQo=r(jPe," (throws an error)."),jPe.forEach(t),XQo=i(xl),it=n(xl,"DIV",{class:!0});var kl=s(it);m(_A.$$.fragment,kl),zQo=i(kl),lge=n(kl,"P",{});var Qit=s(lge);QQo=r(Qit,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Qit.forEach(t),WQo=i(kl),Kd=n(kl,"P",{});var kU=s(Kd);HQo=r(kU,`Note:
Loading a model from its configuration file does `),ige=n(kU,"STRONG",{});var Wit=s(ige);UQo=r(Wit,"not"),Wit.forEach(t),JQo=r(kU,` load the model weights. It only affects the
model\u2019s configuration. Use `),LG=n(kU,"A",{href:!0});var Hit=s(LG);YQo=r(Hit,"from_pretrained()"),Hit.forEach(t),KQo=r(kU," to load the model weights."),kU.forEach(t),ZQo=i(kl),dge=n(kl,"P",{});var Uit=s(dge);eWo=r(Uit,"Examples:"),Uit.forEach(t),oWo=i(kl),m(uA.$$.fragment,kl),kl.forEach(t),rWo=i(xl),oo=n(xl,"DIV",{class:!0});var aa=s(oo);m(bA.$$.fragment,aa),tWo=i(aa),cge=n(aa,"P",{});var Jit=s(cge);aWo=r(Jit,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Jit.forEach(t),nWo=i(aa),fn=n(aa,"P",{});var NE=s(fn);sWo=r(NE,"The model class to instantiate is selected based on the "),fge=n(NE,"CODE",{});var Yit=s(fge);lWo=r(Yit,"model_type"),Yit.forEach(t),iWo=r(NE,` property of the config object (either
passed as an argument or loaded from `),mge=n(NE,"CODE",{});var Kit=s(mge);dWo=r(Kit,"pretrained_model_name_or_path"),Kit.forEach(t),cWo=r(NE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gge=n(NE,"CODE",{});var Zit=s(gge);fWo=r(Zit,"pretrained_model_name_or_path"),Zit.forEach(t),mWo=r(NE,":"),NE.forEach(t),gWo=i(aa),Zd=n(aa,"UL",{});var SU=s(Zd);oF=n(SU,"LI",{});var Hye=s(oF);hge=n(Hye,"STRONG",{});var edt=s(hge);hWo=r(edt,"deit"),edt.forEach(t),pWo=r(Hye," \u2014 "),xG=n(Hye,"A",{href:!0});var odt=s(xG);_Wo=r(odt,"DeiTForMaskedImageModeling"),odt.forEach(t),uWo=r(Hye," (DeiT model)"),Hye.forEach(t),bWo=i(SU),rF=n(SU,"LI",{});var Uye=s(rF);pge=n(Uye,"STRONG",{});var rdt=s(pge);FWo=r(rdt,"swin"),rdt.forEach(t),vWo=r(Uye," \u2014 "),kG=n(Uye,"A",{href:!0});var tdt=s(kG);TWo=r(tdt,"SwinForMaskedImageModeling"),tdt.forEach(t),MWo=r(Uye," (Swin model)"),Uye.forEach(t),EWo=i(SU),tF=n(SU,"LI",{});var Jye=s(tF);_ge=n(Jye,"STRONG",{});var adt=s(_ge);CWo=r(adt,"vit"),adt.forEach(t),wWo=r(Jye," \u2014 "),SG=n(Jye,"A",{href:!0});var ndt=s(SG);AWo=r(ndt,"ViTForMaskedImageModeling"),ndt.forEach(t),yWo=r(Jye," (ViT model)"),Jye.forEach(t),SU.forEach(t),LWo=i(aa),aF=n(aa,"P",{});var Yye=s(aF);xWo=r(Yye,"The model is set in evaluation mode by default using "),uge=n(Yye,"CODE",{});var sdt=s(uge);kWo=r(sdt,"model.eval()"),sdt.forEach(t),SWo=r(Yye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bge=n(Yye,"CODE",{});var ldt=s(bge);RWo=r(ldt,"model.train()"),ldt.forEach(t),Yye.forEach(t),BWo=i(aa),Fge=n(aa,"P",{});var idt=s(Fge);PWo=r(idt,"Examples:"),idt.forEach(t),$Wo=i(aa),m(FA.$$.fragment,aa),aa.forEach(t),xl.forEach(t),kRe=i(c),ec=n(c,"H2",{class:!0});var DPe=s(ec);nF=n(DPe,"A",{id:!0,class:!0,href:!0});var ddt=s(nF);vge=n(ddt,"SPAN",{});var cdt=s(vge);m(vA.$$.fragment,cdt),cdt.forEach(t),ddt.forEach(t),IWo=i(DPe),Tge=n(DPe,"SPAN",{});var fdt=s(Tge);qWo=r(fdt,"AutoModelForObjectDetection"),fdt.forEach(t),DPe.forEach(t),SRe=i(c),pr=n(c,"DIV",{class:!0});var Sl=s(pr);m(TA.$$.fragment,Sl),NWo=i(Sl),oc=n(Sl,"P",{});var RU=s(oc);jWo=r(RU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),RG=n(RU,"A",{href:!0});var mdt=s(RG);DWo=r(mdt,"from_pretrained()"),mdt.forEach(t),GWo=r(RU," class method or the "),BG=n(RU,"A",{href:!0});var gdt=s(BG);OWo=r(gdt,"from_config()"),gdt.forEach(t),VWo=r(RU,` class
method.`),RU.forEach(t),XWo=i(Sl),MA=n(Sl,"P",{});var GPe=s(MA);zWo=r(GPe,"This class cannot be instantiated directly using "),Mge=n(GPe,"CODE",{});var hdt=s(Mge);QWo=r(hdt,"__init__()"),hdt.forEach(t),WWo=r(GPe," (throws an error)."),GPe.forEach(t),HWo=i(Sl),dt=n(Sl,"DIV",{class:!0});var Rl=s(dt);m(EA.$$.fragment,Rl),UWo=i(Rl),Ege=n(Rl,"P",{});var pdt=s(Ege);JWo=r(pdt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),pdt.forEach(t),YWo=i(Rl),rc=n(Rl,"P",{});var BU=s(rc);KWo=r(BU,`Note:
Loading a model from its configuration file does `),Cge=n(BU,"STRONG",{});var _dt=s(Cge);ZWo=r(_dt,"not"),_dt.forEach(t),eHo=r(BU,` load the model weights. It only affects the
model\u2019s configuration. Use `),PG=n(BU,"A",{href:!0});var udt=s(PG);oHo=r(udt,"from_pretrained()"),udt.forEach(t),rHo=r(BU," to load the model weights."),BU.forEach(t),tHo=i(Rl),wge=n(Rl,"P",{});var bdt=s(wge);aHo=r(bdt,"Examples:"),bdt.forEach(t),nHo=i(Rl),m(CA.$$.fragment,Rl),Rl.forEach(t),sHo=i(Sl),ro=n(Sl,"DIV",{class:!0});var na=s(ro);m(wA.$$.fragment,na),lHo=i(na),Age=n(na,"P",{});var Fdt=s(Age);iHo=r(Fdt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Fdt.forEach(t),dHo=i(na),mn=n(na,"P",{});var jE=s(mn);cHo=r(jE,"The model class to instantiate is selected based on the "),yge=n(jE,"CODE",{});var vdt=s(yge);fHo=r(vdt,"model_type"),vdt.forEach(t),mHo=r(jE,` property of the config object (either
passed as an argument or loaded from `),Lge=n(jE,"CODE",{});var Tdt=s(Lge);gHo=r(Tdt,"pretrained_model_name_or_path"),Tdt.forEach(t),hHo=r(jE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xge=n(jE,"CODE",{});var Mdt=s(xge);pHo=r(Mdt,"pretrained_model_name_or_path"),Mdt.forEach(t),_Ho=r(jE,":"),jE.forEach(t),uHo=i(na),kge=n(na,"UL",{});var Edt=s(kge);sF=n(Edt,"LI",{});var Kye=s(sF);Sge=n(Kye,"STRONG",{});var Cdt=s(Sge);bHo=r(Cdt,"detr"),Cdt.forEach(t),FHo=r(Kye," \u2014 "),$G=n(Kye,"A",{href:!0});var wdt=s($G);vHo=r(wdt,"DetrForObjectDetection"),wdt.forEach(t),THo=r(Kye," (DETR model)"),Kye.forEach(t),Edt.forEach(t),MHo=i(na),lF=n(na,"P",{});var Zye=s(lF);EHo=r(Zye,"The model is set in evaluation mode by default using "),Rge=n(Zye,"CODE",{});var Adt=s(Rge);CHo=r(Adt,"model.eval()"),Adt.forEach(t),wHo=r(Zye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bge=n(Zye,"CODE",{});var ydt=s(Bge);AHo=r(ydt,"model.train()"),ydt.forEach(t),Zye.forEach(t),yHo=i(na),Pge=n(na,"P",{});var Ldt=s(Pge);LHo=r(Ldt,"Examples:"),Ldt.forEach(t),xHo=i(na),m(AA.$$.fragment,na),na.forEach(t),Sl.forEach(t),RRe=i(c),tc=n(c,"H2",{class:!0});var OPe=s(tc);iF=n(OPe,"A",{id:!0,class:!0,href:!0});var xdt=s(iF);$ge=n(xdt,"SPAN",{});var kdt=s($ge);m(yA.$$.fragment,kdt),kdt.forEach(t),xdt.forEach(t),kHo=i(OPe),Ige=n(OPe,"SPAN",{});var Sdt=s(Ige);SHo=r(Sdt,"AutoModelForImageSegmentation"),Sdt.forEach(t),OPe.forEach(t),BRe=i(c),_r=n(c,"DIV",{class:!0});var Bl=s(_r);m(LA.$$.fragment,Bl),RHo=i(Bl),ac=n(Bl,"P",{});var PU=s(ac);BHo=r(PU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),IG=n(PU,"A",{href:!0});var Rdt=s(IG);PHo=r(Rdt,"from_pretrained()"),Rdt.forEach(t),$Ho=r(PU," class method or the "),qG=n(PU,"A",{href:!0});var Bdt=s(qG);IHo=r(Bdt,"from_config()"),Bdt.forEach(t),qHo=r(PU,` class
method.`),PU.forEach(t),NHo=i(Bl),xA=n(Bl,"P",{});var VPe=s(xA);jHo=r(VPe,"This class cannot be instantiated directly using "),qge=n(VPe,"CODE",{});var Pdt=s(qge);DHo=r(Pdt,"__init__()"),Pdt.forEach(t),GHo=r(VPe," (throws an error)."),VPe.forEach(t),OHo=i(Bl),ct=n(Bl,"DIV",{class:!0});var Pl=s(ct);m(kA.$$.fragment,Pl),VHo=i(Pl),Nge=n(Pl,"P",{});var $dt=s(Nge);XHo=r($dt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),$dt.forEach(t),zHo=i(Pl),nc=n(Pl,"P",{});var $U=s(nc);QHo=r($U,`Note:
Loading a model from its configuration file does `),jge=n($U,"STRONG",{});var Idt=s(jge);WHo=r(Idt,"not"),Idt.forEach(t),HHo=r($U,` load the model weights. It only affects the
model\u2019s configuration. Use `),NG=n($U,"A",{href:!0});var qdt=s(NG);UHo=r(qdt,"from_pretrained()"),qdt.forEach(t),JHo=r($U," to load the model weights."),$U.forEach(t),YHo=i(Pl),Dge=n(Pl,"P",{});var Ndt=s(Dge);KHo=r(Ndt,"Examples:"),Ndt.forEach(t),ZHo=i(Pl),m(SA.$$.fragment,Pl),Pl.forEach(t),eUo=i(Bl),to=n(Bl,"DIV",{class:!0});var sa=s(to);m(RA.$$.fragment,sa),oUo=i(sa),Gge=n(sa,"P",{});var jdt=s(Gge);rUo=r(jdt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),jdt.forEach(t),tUo=i(sa),gn=n(sa,"P",{});var DE=s(gn);aUo=r(DE,"The model class to instantiate is selected based on the "),Oge=n(DE,"CODE",{});var Ddt=s(Oge);nUo=r(Ddt,"model_type"),Ddt.forEach(t),sUo=r(DE,` property of the config object (either
passed as an argument or loaded from `),Vge=n(DE,"CODE",{});var Gdt=s(Vge);lUo=r(Gdt,"pretrained_model_name_or_path"),Gdt.forEach(t),iUo=r(DE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xge=n(DE,"CODE",{});var Odt=s(Xge);dUo=r(Odt,"pretrained_model_name_or_path"),Odt.forEach(t),cUo=r(DE,":"),DE.forEach(t),fUo=i(sa),zge=n(sa,"UL",{});var Vdt=s(zge);dF=n(Vdt,"LI",{});var eLe=s(dF);Qge=n(eLe,"STRONG",{});var Xdt=s(Qge);mUo=r(Xdt,"detr"),Xdt.forEach(t),gUo=r(eLe," \u2014 "),jG=n(eLe,"A",{href:!0});var zdt=s(jG);hUo=r(zdt,"DetrForSegmentation"),zdt.forEach(t),pUo=r(eLe," (DETR model)"),eLe.forEach(t),Vdt.forEach(t),_Uo=i(sa),cF=n(sa,"P",{});var oLe=s(cF);uUo=r(oLe,"The model is set in evaluation mode by default using "),Wge=n(oLe,"CODE",{});var Qdt=s(Wge);bUo=r(Qdt,"model.eval()"),Qdt.forEach(t),FUo=r(oLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hge=n(oLe,"CODE",{});var Wdt=s(Hge);vUo=r(Wdt,"model.train()"),Wdt.forEach(t),oLe.forEach(t),TUo=i(sa),Uge=n(sa,"P",{});var Hdt=s(Uge);MUo=r(Hdt,"Examples:"),Hdt.forEach(t),EUo=i(sa),m(BA.$$.fragment,sa),sa.forEach(t),Bl.forEach(t),PRe=i(c),sc=n(c,"H2",{class:!0});var XPe=s(sc);fF=n(XPe,"A",{id:!0,class:!0,href:!0});var Udt=s(fF);Jge=n(Udt,"SPAN",{});var Jdt=s(Jge);m(PA.$$.fragment,Jdt),Jdt.forEach(t),Udt.forEach(t),CUo=i(XPe),Yge=n(XPe,"SPAN",{});var Ydt=s(Yge);wUo=r(Ydt,"AutoModelForSemanticSegmentation"),Ydt.forEach(t),XPe.forEach(t),$Re=i(c),ur=n(c,"DIV",{class:!0});var $l=s(ur);m($A.$$.fragment,$l),AUo=i($l),lc=n($l,"P",{});var IU=s(lc);yUo=r(IU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),DG=n(IU,"A",{href:!0});var Kdt=s(DG);LUo=r(Kdt,"from_pretrained()"),Kdt.forEach(t),xUo=r(IU," class method or the "),GG=n(IU,"A",{href:!0});var Zdt=s(GG);kUo=r(Zdt,"from_config()"),Zdt.forEach(t),SUo=r(IU,` class
method.`),IU.forEach(t),RUo=i($l),IA=n($l,"P",{});var zPe=s(IA);BUo=r(zPe,"This class cannot be instantiated directly using "),Kge=n(zPe,"CODE",{});var ect=s(Kge);PUo=r(ect,"__init__()"),ect.forEach(t),$Uo=r(zPe," (throws an error)."),zPe.forEach(t),IUo=i($l),ft=n($l,"DIV",{class:!0});var Il=s(ft);m(qA.$$.fragment,Il),qUo=i(Il),Zge=n(Il,"P",{});var oct=s(Zge);NUo=r(oct,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),oct.forEach(t),jUo=i(Il),ic=n(Il,"P",{});var qU=s(ic);DUo=r(qU,`Note:
Loading a model from its configuration file does `),ehe=n(qU,"STRONG",{});var rct=s(ehe);GUo=r(rct,"not"),rct.forEach(t),OUo=r(qU,` load the model weights. It only affects the
model\u2019s configuration. Use `),OG=n(qU,"A",{href:!0});var tct=s(OG);VUo=r(tct,"from_pretrained()"),tct.forEach(t),XUo=r(qU," to load the model weights."),qU.forEach(t),zUo=i(Il),ohe=n(Il,"P",{});var act=s(ohe);QUo=r(act,"Examples:"),act.forEach(t),WUo=i(Il),m(NA.$$.fragment,Il),Il.forEach(t),HUo=i($l),ao=n($l,"DIV",{class:!0});var la=s(ao);m(jA.$$.fragment,la),UUo=i(la),rhe=n(la,"P",{});var nct=s(rhe);JUo=r(nct,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),nct.forEach(t),YUo=i(la),hn=n(la,"P",{});var GE=s(hn);KUo=r(GE,"The model class to instantiate is selected based on the "),the=n(GE,"CODE",{});var sct=s(the);ZUo=r(sct,"model_type"),sct.forEach(t),eJo=r(GE,` property of the config object (either
passed as an argument or loaded from `),ahe=n(GE,"CODE",{});var lct=s(ahe);oJo=r(lct,"pretrained_model_name_or_path"),lct.forEach(t),rJo=r(GE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nhe=n(GE,"CODE",{});var ict=s(nhe);tJo=r(ict,"pretrained_model_name_or_path"),ict.forEach(t),aJo=r(GE,":"),GE.forEach(t),nJo=i(la),dc=n(la,"UL",{});var NU=s(dc);mF=n(NU,"LI",{});var rLe=s(mF);she=n(rLe,"STRONG",{});var dct=s(she);sJo=r(dct,"beit"),dct.forEach(t),lJo=r(rLe," \u2014 "),VG=n(rLe,"A",{href:!0});var cct=s(VG);iJo=r(cct,"BeitForSemanticSegmentation"),cct.forEach(t),dJo=r(rLe," (BEiT model)"),rLe.forEach(t),cJo=i(NU),gF=n(NU,"LI",{});var tLe=s(gF);lhe=n(tLe,"STRONG",{});var fct=s(lhe);fJo=r(fct,"dpt"),fct.forEach(t),mJo=r(tLe," \u2014 "),XG=n(tLe,"A",{href:!0});var mct=s(XG);gJo=r(mct,"DPTForSemanticSegmentation"),mct.forEach(t),hJo=r(tLe," (DPT model)"),tLe.forEach(t),pJo=i(NU),hF=n(NU,"LI",{});var aLe=s(hF);ihe=n(aLe,"STRONG",{});var gct=s(ihe);_Jo=r(gct,"segformer"),gct.forEach(t),uJo=r(aLe," \u2014 "),zG=n(aLe,"A",{href:!0});var hct=s(zG);bJo=r(hct,"SegformerForSemanticSegmentation"),hct.forEach(t),FJo=r(aLe," (SegFormer model)"),aLe.forEach(t),NU.forEach(t),vJo=i(la),pF=n(la,"P",{});var nLe=s(pF);TJo=r(nLe,"The model is set in evaluation mode by default using "),dhe=n(nLe,"CODE",{});var pct=s(dhe);MJo=r(pct,"model.eval()"),pct.forEach(t),EJo=r(nLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),che=n(nLe,"CODE",{});var _ct=s(che);CJo=r(_ct,"model.train()"),_ct.forEach(t),nLe.forEach(t),wJo=i(la),fhe=n(la,"P",{});var uct=s(fhe);AJo=r(uct,"Examples:"),uct.forEach(t),yJo=i(la),m(DA.$$.fragment,la),la.forEach(t),$l.forEach(t),IRe=i(c),cc=n(c,"H2",{class:!0});var QPe=s(cc);_F=n(QPe,"A",{id:!0,class:!0,href:!0});var bct=s(_F);mhe=n(bct,"SPAN",{});var Fct=s(mhe);m(GA.$$.fragment,Fct),Fct.forEach(t),bct.forEach(t),LJo=i(QPe),ghe=n(QPe,"SPAN",{});var vct=s(ghe);xJo=r(vct,"AutoModelForInstanceSegmentation"),vct.forEach(t),QPe.forEach(t),qRe=i(c),br=n(c,"DIV",{class:!0});var ql=s(br);m(OA.$$.fragment,ql),kJo=i(ql),fc=n(ql,"P",{});var jU=s(fc);SJo=r(jU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),QG=n(jU,"A",{href:!0});var Tct=s(QG);RJo=r(Tct,"from_pretrained()"),Tct.forEach(t),BJo=r(jU," class method or the "),WG=n(jU,"A",{href:!0});var Mct=s(WG);PJo=r(Mct,"from_config()"),Mct.forEach(t),$Jo=r(jU,` class
method.`),jU.forEach(t),IJo=i(ql),VA=n(ql,"P",{});var WPe=s(VA);qJo=r(WPe,"This class cannot be instantiated directly using "),hhe=n(WPe,"CODE",{});var Ect=s(hhe);NJo=r(Ect,"__init__()"),Ect.forEach(t),jJo=r(WPe," (throws an error)."),WPe.forEach(t),DJo=i(ql),mt=n(ql,"DIV",{class:!0});var Nl=s(mt);m(XA.$$.fragment,Nl),GJo=i(Nl),phe=n(Nl,"P",{});var Cct=s(phe);OJo=r(Cct,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Cct.forEach(t),VJo=i(Nl),mc=n(Nl,"P",{});var DU=s(mc);XJo=r(DU,`Note:
Loading a model from its configuration file does `),_he=n(DU,"STRONG",{});var wct=s(_he);zJo=r(wct,"not"),wct.forEach(t),QJo=r(DU,` load the model weights. It only affects the
model\u2019s configuration. Use `),HG=n(DU,"A",{href:!0});var Act=s(HG);WJo=r(Act,"from_pretrained()"),Act.forEach(t),HJo=r(DU," to load the model weights."),DU.forEach(t),UJo=i(Nl),uhe=n(Nl,"P",{});var yct=s(uhe);JJo=r(yct,"Examples:"),yct.forEach(t),YJo=i(Nl),m(zA.$$.fragment,Nl),Nl.forEach(t),KJo=i(ql),no=n(ql,"DIV",{class:!0});var ia=s(no);m(QA.$$.fragment,ia),ZJo=i(ia),bhe=n(ia,"P",{});var Lct=s(bhe);eYo=r(Lct,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Lct.forEach(t),oYo=i(ia),pn=n(ia,"P",{});var OE=s(pn);rYo=r(OE,"The model class to instantiate is selected based on the "),Fhe=n(OE,"CODE",{});var xct=s(Fhe);tYo=r(xct,"model_type"),xct.forEach(t),aYo=r(OE,` property of the config object (either
passed as an argument or loaded from `),vhe=n(OE,"CODE",{});var kct=s(vhe);nYo=r(kct,"pretrained_model_name_or_path"),kct.forEach(t),sYo=r(OE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),The=n(OE,"CODE",{});var Sct=s(The);lYo=r(Sct,"pretrained_model_name_or_path"),Sct.forEach(t),iYo=r(OE,":"),OE.forEach(t),dYo=i(ia),Mhe=n(ia,"UL",{});var Rct=s(Mhe);uF=n(Rct,"LI",{});var sLe=s(uF);Ehe=n(sLe,"STRONG",{});var Bct=s(Ehe);cYo=r(Bct,"maskformer"),Bct.forEach(t),fYo=r(sLe," \u2014 "),UG=n(sLe,"A",{href:!0});var Pct=s(UG);mYo=r(Pct,"MaskFormerForInstanceSegmentation"),Pct.forEach(t),gYo=r(sLe," (MaskFormer model)"),sLe.forEach(t),Rct.forEach(t),hYo=i(ia),bF=n(ia,"P",{});var lLe=s(bF);pYo=r(lLe,"The model is set in evaluation mode by default using "),Che=n(lLe,"CODE",{});var $ct=s(Che);_Yo=r($ct,"model.eval()"),$ct.forEach(t),uYo=r(lLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),whe=n(lLe,"CODE",{});var Ict=s(whe);bYo=r(Ict,"model.train()"),Ict.forEach(t),lLe.forEach(t),FYo=i(ia),Ahe=n(ia,"P",{});var qct=s(Ahe);vYo=r(qct,"Examples:"),qct.forEach(t),TYo=i(ia),m(WA.$$.fragment,ia),ia.forEach(t),ql.forEach(t),NRe=i(c),gc=n(c,"H2",{class:!0});var HPe=s(gc);FF=n(HPe,"A",{id:!0,class:!0,href:!0});var Nct=s(FF);yhe=n(Nct,"SPAN",{});var jct=s(yhe);m(HA.$$.fragment,jct),jct.forEach(t),Nct.forEach(t),MYo=i(HPe),Lhe=n(HPe,"SPAN",{});var Dct=s(Lhe);EYo=r(Dct,"TFAutoModel"),Dct.forEach(t),HPe.forEach(t),jRe=i(c),Fr=n(c,"DIV",{class:!0});var jl=s(Fr);m(UA.$$.fragment,jl),CYo=i(jl),hc=n(jl,"P",{});var GU=s(hc);wYo=r(GU,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),JG=n(GU,"A",{href:!0});var Gct=s(JG);AYo=r(Gct,"from_pretrained()"),Gct.forEach(t),yYo=r(GU," class method or the "),YG=n(GU,"A",{href:!0});var Oct=s(YG);LYo=r(Oct,"from_config()"),Oct.forEach(t),xYo=r(GU,` class
method.`),GU.forEach(t),kYo=i(jl),JA=n(jl,"P",{});var UPe=s(JA);SYo=r(UPe,"This class cannot be instantiated directly using "),xhe=n(UPe,"CODE",{});var Vct=s(xhe);RYo=r(Vct,"__init__()"),Vct.forEach(t),BYo=r(UPe," (throws an error)."),UPe.forEach(t),PYo=i(jl),gt=n(jl,"DIV",{class:!0});var Dl=s(gt);m(YA.$$.fragment,Dl),$Yo=i(Dl),khe=n(Dl,"P",{});var Xct=s(khe);IYo=r(Xct,"Instantiates one of the base model classes of the library from a configuration."),Xct.forEach(t),qYo=i(Dl),pc=n(Dl,"P",{});var OU=s(pc);NYo=r(OU,`Note:
Loading a model from its configuration file does `),She=n(OU,"STRONG",{});var zct=s(She);jYo=r(zct,"not"),zct.forEach(t),DYo=r(OU,` load the model weights. It only affects the
model\u2019s configuration. Use `),KG=n(OU,"A",{href:!0});var Qct=s(KG);GYo=r(Qct,"from_pretrained()"),Qct.forEach(t),OYo=r(OU," to load the model weights."),OU.forEach(t),VYo=i(Dl),Rhe=n(Dl,"P",{});var Wct=s(Rhe);XYo=r(Wct,"Examples:"),Wct.forEach(t),zYo=i(Dl),m(KA.$$.fragment,Dl),Dl.forEach(t),QYo=i(jl),ho=n(jl,"DIV",{class:!0});var pa=s(ho);m(ZA.$$.fragment,pa),WYo=i(pa),Bhe=n(pa,"P",{});var Hct=s(Bhe);HYo=r(Hct,"Instantiate one of the base model classes of the library from a pretrained model."),Hct.forEach(t),UYo=i(pa),_n=n(pa,"P",{});var VE=s(_n);JYo=r(VE,"The model class to instantiate is selected based on the "),Phe=n(VE,"CODE",{});var Uct=s(Phe);YYo=r(Uct,"model_type"),Uct.forEach(t),KYo=r(VE,` property of the config object (either
passed as an argument or loaded from `),$he=n(VE,"CODE",{});var Jct=s($he);ZYo=r(Jct,"pretrained_model_name_or_path"),Jct.forEach(t),eKo=r(VE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ihe=n(VE,"CODE",{});var Yct=s(Ihe);oKo=r(Yct,"pretrained_model_name_or_path"),Yct.forEach(t),rKo=r(VE,":"),VE.forEach(t),tKo=i(pa),x=n(pa,"UL",{});var k=s(x);vF=n(k,"LI",{});var iLe=s(vF);qhe=n(iLe,"STRONG",{});var Kct=s(qhe);aKo=r(Kct,"albert"),Kct.forEach(t),nKo=r(iLe," \u2014 "),ZG=n(iLe,"A",{href:!0});var Zct=s(ZG);sKo=r(Zct,"TFAlbertModel"),Zct.forEach(t),lKo=r(iLe," (ALBERT model)"),iLe.forEach(t),iKo=i(k),TF=n(k,"LI",{});var dLe=s(TF);Nhe=n(dLe,"STRONG",{});var eft=s(Nhe);dKo=r(eft,"bart"),eft.forEach(t),cKo=r(dLe," \u2014 "),eO=n(dLe,"A",{href:!0});var oft=s(eO);fKo=r(oft,"TFBartModel"),oft.forEach(t),mKo=r(dLe," (BART model)"),dLe.forEach(t),gKo=i(k),MF=n(k,"LI",{});var cLe=s(MF);jhe=n(cLe,"STRONG",{});var rft=s(jhe);hKo=r(rft,"bert"),rft.forEach(t),pKo=r(cLe," \u2014 "),oO=n(cLe,"A",{href:!0});var tft=s(oO);_Ko=r(tft,"TFBertModel"),tft.forEach(t),uKo=r(cLe," (BERT model)"),cLe.forEach(t),bKo=i(k),EF=n(k,"LI",{});var fLe=s(EF);Dhe=n(fLe,"STRONG",{});var aft=s(Dhe);FKo=r(aft,"blenderbot"),aft.forEach(t),vKo=r(fLe," \u2014 "),rO=n(fLe,"A",{href:!0});var nft=s(rO);TKo=r(nft,"TFBlenderbotModel"),nft.forEach(t),MKo=r(fLe," (Blenderbot model)"),fLe.forEach(t),EKo=i(k),CF=n(k,"LI",{});var mLe=s(CF);Ghe=n(mLe,"STRONG",{});var sft=s(Ghe);CKo=r(sft,"blenderbot-small"),sft.forEach(t),wKo=r(mLe," \u2014 "),tO=n(mLe,"A",{href:!0});var lft=s(tO);AKo=r(lft,"TFBlenderbotSmallModel"),lft.forEach(t),yKo=r(mLe," (BlenderbotSmall model)"),mLe.forEach(t),LKo=i(k),wF=n(k,"LI",{});var gLe=s(wF);Ohe=n(gLe,"STRONG",{});var ift=s(Ohe);xKo=r(ift,"camembert"),ift.forEach(t),kKo=r(gLe," \u2014 "),aO=n(gLe,"A",{href:!0});var dft=s(aO);SKo=r(dft,"TFCamembertModel"),dft.forEach(t),RKo=r(gLe," (CamemBERT model)"),gLe.forEach(t),BKo=i(k),AF=n(k,"LI",{});var hLe=s(AF);Vhe=n(hLe,"STRONG",{});var cft=s(Vhe);PKo=r(cft,"clip"),cft.forEach(t),$Ko=r(hLe," \u2014 "),nO=n(hLe,"A",{href:!0});var fft=s(nO);IKo=r(fft,"TFCLIPModel"),fft.forEach(t),qKo=r(hLe," (CLIP model)"),hLe.forEach(t),NKo=i(k),yF=n(k,"LI",{});var pLe=s(yF);Xhe=n(pLe,"STRONG",{});var mft=s(Xhe);jKo=r(mft,"convbert"),mft.forEach(t),DKo=r(pLe," \u2014 "),sO=n(pLe,"A",{href:!0});var gft=s(sO);GKo=r(gft,"TFConvBertModel"),gft.forEach(t),OKo=r(pLe," (ConvBERT model)"),pLe.forEach(t),VKo=i(k),LF=n(k,"LI",{});var _Le=s(LF);zhe=n(_Le,"STRONG",{});var hft=s(zhe);XKo=r(hft,"convnext"),hft.forEach(t),zKo=r(_Le," \u2014 "),lO=n(_Le,"A",{href:!0});var pft=s(lO);QKo=r(pft,"TFConvNextModel"),pft.forEach(t),WKo=r(_Le," (ConvNext model)"),_Le.forEach(t),HKo=i(k),xF=n(k,"LI",{});var uLe=s(xF);Qhe=n(uLe,"STRONG",{});var _ft=s(Qhe);UKo=r(_ft,"ctrl"),_ft.forEach(t),JKo=r(uLe," \u2014 "),iO=n(uLe,"A",{href:!0});var uft=s(iO);YKo=r(uft,"TFCTRLModel"),uft.forEach(t),KKo=r(uLe," (CTRL model)"),uLe.forEach(t),ZKo=i(k),kF=n(k,"LI",{});var bLe=s(kF);Whe=n(bLe,"STRONG",{});var bft=s(Whe);eZo=r(bft,"deberta"),bft.forEach(t),oZo=r(bLe," \u2014 "),dO=n(bLe,"A",{href:!0});var Fft=s(dO);rZo=r(Fft,"TFDebertaModel"),Fft.forEach(t),tZo=r(bLe," (DeBERTa model)"),bLe.forEach(t),aZo=i(k),SF=n(k,"LI",{});var FLe=s(SF);Hhe=n(FLe,"STRONG",{});var vft=s(Hhe);nZo=r(vft,"deberta-v2"),vft.forEach(t),sZo=r(FLe," \u2014 "),cO=n(FLe,"A",{href:!0});var Tft=s(cO);lZo=r(Tft,"TFDebertaV2Model"),Tft.forEach(t),iZo=r(FLe," (DeBERTa-v2 model)"),FLe.forEach(t),dZo=i(k),RF=n(k,"LI",{});var vLe=s(RF);Uhe=n(vLe,"STRONG",{});var Mft=s(Uhe);cZo=r(Mft,"distilbert"),Mft.forEach(t),fZo=r(vLe," \u2014 "),fO=n(vLe,"A",{href:!0});var Eft=s(fO);mZo=r(Eft,"TFDistilBertModel"),Eft.forEach(t),gZo=r(vLe," (DistilBERT model)"),vLe.forEach(t),hZo=i(k),BF=n(k,"LI",{});var TLe=s(BF);Jhe=n(TLe,"STRONG",{});var Cft=s(Jhe);pZo=r(Cft,"dpr"),Cft.forEach(t),_Zo=r(TLe," \u2014 "),mO=n(TLe,"A",{href:!0});var wft=s(mO);uZo=r(wft,"TFDPRQuestionEncoder"),wft.forEach(t),bZo=r(TLe," (DPR model)"),TLe.forEach(t),FZo=i(k),PF=n(k,"LI",{});var MLe=s(PF);Yhe=n(MLe,"STRONG",{});var Aft=s(Yhe);vZo=r(Aft,"electra"),Aft.forEach(t),TZo=r(MLe," \u2014 "),gO=n(MLe,"A",{href:!0});var yft=s(gO);MZo=r(yft,"TFElectraModel"),yft.forEach(t),EZo=r(MLe," (ELECTRA model)"),MLe.forEach(t),CZo=i(k),$F=n(k,"LI",{});var ELe=s($F);Khe=n(ELe,"STRONG",{});var Lft=s(Khe);wZo=r(Lft,"flaubert"),Lft.forEach(t),AZo=r(ELe," \u2014 "),hO=n(ELe,"A",{href:!0});var xft=s(hO);yZo=r(xft,"TFFlaubertModel"),xft.forEach(t),LZo=r(ELe," (FlauBERT model)"),ELe.forEach(t),xZo=i(k),Gs=n(k,"LI",{});var n9=s(Gs);Zhe=n(n9,"STRONG",{});var kft=s(Zhe);kZo=r(kft,"funnel"),kft.forEach(t),SZo=r(n9," \u2014 "),pO=n(n9,"A",{href:!0});var Sft=s(pO);RZo=r(Sft,"TFFunnelModel"),Sft.forEach(t),BZo=r(n9," or "),_O=n(n9,"A",{href:!0});var Rft=s(_O);PZo=r(Rft,"TFFunnelBaseModel"),Rft.forEach(t),$Zo=r(n9," (Funnel Transformer model)"),n9.forEach(t),IZo=i(k),IF=n(k,"LI",{});var CLe=s(IF);epe=n(CLe,"STRONG",{});var Bft=s(epe);qZo=r(Bft,"gpt2"),Bft.forEach(t),NZo=r(CLe," \u2014 "),uO=n(CLe,"A",{href:!0});var Pft=s(uO);jZo=r(Pft,"TFGPT2Model"),Pft.forEach(t),DZo=r(CLe," (OpenAI GPT-2 model)"),CLe.forEach(t),GZo=i(k),qF=n(k,"LI",{});var wLe=s(qF);ope=n(wLe,"STRONG",{});var $ft=s(ope);OZo=r($ft,"gptj"),$ft.forEach(t),VZo=r(wLe," \u2014 "),bO=n(wLe,"A",{href:!0});var Ift=s(bO);XZo=r(Ift,"TFGPTJModel"),Ift.forEach(t),zZo=r(wLe," (GPT-J model)"),wLe.forEach(t),QZo=i(k),NF=n(k,"LI",{});var ALe=s(NF);rpe=n(ALe,"STRONG",{});var qft=s(rpe);WZo=r(qft,"hubert"),qft.forEach(t),HZo=r(ALe," \u2014 "),FO=n(ALe,"A",{href:!0});var Nft=s(FO);UZo=r(Nft,"TFHubertModel"),Nft.forEach(t),JZo=r(ALe," (Hubert model)"),ALe.forEach(t),YZo=i(k),jF=n(k,"LI",{});var yLe=s(jF);tpe=n(yLe,"STRONG",{});var jft=s(tpe);KZo=r(jft,"layoutlm"),jft.forEach(t),ZZo=r(yLe," \u2014 "),vO=n(yLe,"A",{href:!0});var Dft=s(vO);eer=r(Dft,"TFLayoutLMModel"),Dft.forEach(t),oer=r(yLe," (LayoutLM model)"),yLe.forEach(t),rer=i(k),DF=n(k,"LI",{});var LLe=s(DF);ape=n(LLe,"STRONG",{});var Gft=s(ape);ter=r(Gft,"led"),Gft.forEach(t),aer=r(LLe," \u2014 "),TO=n(LLe,"A",{href:!0});var Oft=s(TO);ner=r(Oft,"TFLEDModel"),Oft.forEach(t),ser=r(LLe," (LED model)"),LLe.forEach(t),ler=i(k),GF=n(k,"LI",{});var xLe=s(GF);npe=n(xLe,"STRONG",{});var Vft=s(npe);ier=r(Vft,"longformer"),Vft.forEach(t),der=r(xLe," \u2014 "),MO=n(xLe,"A",{href:!0});var Xft=s(MO);cer=r(Xft,"TFLongformerModel"),Xft.forEach(t),fer=r(xLe," (Longformer model)"),xLe.forEach(t),mer=i(k),OF=n(k,"LI",{});var kLe=s(OF);spe=n(kLe,"STRONG",{});var zft=s(spe);ger=r(zft,"lxmert"),zft.forEach(t),her=r(kLe," \u2014 "),EO=n(kLe,"A",{href:!0});var Qft=s(EO);per=r(Qft,"TFLxmertModel"),Qft.forEach(t),_er=r(kLe," (LXMERT model)"),kLe.forEach(t),uer=i(k),VF=n(k,"LI",{});var SLe=s(VF);lpe=n(SLe,"STRONG",{});var Wft=s(lpe);ber=r(Wft,"marian"),Wft.forEach(t),Fer=r(SLe," \u2014 "),CO=n(SLe,"A",{href:!0});var Hft=s(CO);ver=r(Hft,"TFMarianModel"),Hft.forEach(t),Ter=r(SLe," (Marian model)"),SLe.forEach(t),Mer=i(k),XF=n(k,"LI",{});var RLe=s(XF);ipe=n(RLe,"STRONG",{});var Uft=s(ipe);Eer=r(Uft,"mbart"),Uft.forEach(t),Cer=r(RLe," \u2014 "),wO=n(RLe,"A",{href:!0});var Jft=s(wO);wer=r(Jft,"TFMBartModel"),Jft.forEach(t),Aer=r(RLe," (mBART model)"),RLe.forEach(t),yer=i(k),zF=n(k,"LI",{});var BLe=s(zF);dpe=n(BLe,"STRONG",{});var Yft=s(dpe);Ler=r(Yft,"mobilebert"),Yft.forEach(t),xer=r(BLe," \u2014 "),AO=n(BLe,"A",{href:!0});var Kft=s(AO);ker=r(Kft,"TFMobileBertModel"),Kft.forEach(t),Ser=r(BLe," (MobileBERT model)"),BLe.forEach(t),Rer=i(k),QF=n(k,"LI",{});var PLe=s(QF);cpe=n(PLe,"STRONG",{});var Zft=s(cpe);Ber=r(Zft,"mpnet"),Zft.forEach(t),Per=r(PLe," \u2014 "),yO=n(PLe,"A",{href:!0});var emt=s(yO);$er=r(emt,"TFMPNetModel"),emt.forEach(t),Ier=r(PLe," (MPNet model)"),PLe.forEach(t),qer=i(k),WF=n(k,"LI",{});var $Le=s(WF);fpe=n($Le,"STRONG",{});var omt=s(fpe);Ner=r(omt,"mt5"),omt.forEach(t),jer=r($Le," \u2014 "),LO=n($Le,"A",{href:!0});var rmt=s(LO);Der=r(rmt,"TFMT5Model"),rmt.forEach(t),Ger=r($Le," (mT5 model)"),$Le.forEach(t),Oer=i(k),HF=n(k,"LI",{});var ILe=s(HF);mpe=n(ILe,"STRONG",{});var tmt=s(mpe);Ver=r(tmt,"openai-gpt"),tmt.forEach(t),Xer=r(ILe," \u2014 "),xO=n(ILe,"A",{href:!0});var amt=s(xO);zer=r(amt,"TFOpenAIGPTModel"),amt.forEach(t),Qer=r(ILe," (OpenAI GPT model)"),ILe.forEach(t),Wer=i(k),UF=n(k,"LI",{});var qLe=s(UF);gpe=n(qLe,"STRONG",{});var nmt=s(gpe);Her=r(nmt,"pegasus"),nmt.forEach(t),Uer=r(qLe," \u2014 "),kO=n(qLe,"A",{href:!0});var smt=s(kO);Jer=r(smt,"TFPegasusModel"),smt.forEach(t),Yer=r(qLe," (Pegasus model)"),qLe.forEach(t),Ker=i(k),JF=n(k,"LI",{});var NLe=s(JF);hpe=n(NLe,"STRONG",{});var lmt=s(hpe);Zer=r(lmt,"rembert"),lmt.forEach(t),eor=r(NLe," \u2014 "),SO=n(NLe,"A",{href:!0});var imt=s(SO);oor=r(imt,"TFRemBertModel"),imt.forEach(t),ror=r(NLe," (RemBERT model)"),NLe.forEach(t),tor=i(k),YF=n(k,"LI",{});var jLe=s(YF);ppe=n(jLe,"STRONG",{});var dmt=s(ppe);aor=r(dmt,"roberta"),dmt.forEach(t),nor=r(jLe," \u2014 "),RO=n(jLe,"A",{href:!0});var cmt=s(RO);sor=r(cmt,"TFRobertaModel"),cmt.forEach(t),lor=r(jLe," (RoBERTa model)"),jLe.forEach(t),ior=i(k),KF=n(k,"LI",{});var DLe=s(KF);_pe=n(DLe,"STRONG",{});var fmt=s(_pe);dor=r(fmt,"roformer"),fmt.forEach(t),cor=r(DLe," \u2014 "),BO=n(DLe,"A",{href:!0});var mmt=s(BO);mor=r(mmt,"TFRoFormerModel"),mmt.forEach(t),gor=r(DLe," (RoFormer model)"),DLe.forEach(t),hor=i(k),ZF=n(k,"LI",{});var GLe=s(ZF);upe=n(GLe,"STRONG",{});var gmt=s(upe);por=r(gmt,"speech_to_text"),gmt.forEach(t),_or=r(GLe," \u2014 "),PO=n(GLe,"A",{href:!0});var hmt=s(PO);uor=r(hmt,"TFSpeech2TextModel"),hmt.forEach(t),bor=r(GLe," (Speech2Text model)"),GLe.forEach(t),For=i(k),ev=n(k,"LI",{});var OLe=s(ev);bpe=n(OLe,"STRONG",{});var pmt=s(bpe);vor=r(pmt,"t5"),pmt.forEach(t),Tor=r(OLe," \u2014 "),$O=n(OLe,"A",{href:!0});var _mt=s($O);Mor=r(_mt,"TFT5Model"),_mt.forEach(t),Eor=r(OLe," (T5 model)"),OLe.forEach(t),Cor=i(k),ov=n(k,"LI",{});var VLe=s(ov);Fpe=n(VLe,"STRONG",{});var umt=s(Fpe);wor=r(umt,"tapas"),umt.forEach(t),Aor=r(VLe," \u2014 "),IO=n(VLe,"A",{href:!0});var bmt=s(IO);yor=r(bmt,"TFTapasModel"),bmt.forEach(t),Lor=r(VLe," (TAPAS model)"),VLe.forEach(t),xor=i(k),rv=n(k,"LI",{});var XLe=s(rv);vpe=n(XLe,"STRONG",{});var Fmt=s(vpe);kor=r(Fmt,"transfo-xl"),Fmt.forEach(t),Sor=r(XLe," \u2014 "),qO=n(XLe,"A",{href:!0});var vmt=s(qO);Ror=r(vmt,"TFTransfoXLModel"),vmt.forEach(t),Bor=r(XLe," (Transformer-XL model)"),XLe.forEach(t),Por=i(k),tv=n(k,"LI",{});var zLe=s(tv);Tpe=n(zLe,"STRONG",{});var Tmt=s(Tpe);$or=r(Tmt,"vit"),Tmt.forEach(t),Ior=r(zLe," \u2014 "),NO=n(zLe,"A",{href:!0});var Mmt=s(NO);qor=r(Mmt,"TFViTModel"),Mmt.forEach(t),Nor=r(zLe," (ViT model)"),zLe.forEach(t),jor=i(k),av=n(k,"LI",{});var QLe=s(av);Mpe=n(QLe,"STRONG",{});var Emt=s(Mpe);Dor=r(Emt,"wav2vec2"),Emt.forEach(t),Gor=r(QLe," \u2014 "),jO=n(QLe,"A",{href:!0});var Cmt=s(jO);Oor=r(Cmt,"TFWav2Vec2Model"),Cmt.forEach(t),Vor=r(QLe," (Wav2Vec2 model)"),QLe.forEach(t),Xor=i(k),nv=n(k,"LI",{});var WLe=s(nv);Epe=n(WLe,"STRONG",{});var wmt=s(Epe);zor=r(wmt,"xlm"),wmt.forEach(t),Qor=r(WLe," \u2014 "),DO=n(WLe,"A",{href:!0});var Amt=s(DO);Wor=r(Amt,"TFXLMModel"),Amt.forEach(t),Hor=r(WLe," (XLM model)"),WLe.forEach(t),Uor=i(k),sv=n(k,"LI",{});var HLe=s(sv);Cpe=n(HLe,"STRONG",{});var ymt=s(Cpe);Jor=r(ymt,"xlm-roberta"),ymt.forEach(t),Yor=r(HLe," \u2014 "),GO=n(HLe,"A",{href:!0});var Lmt=s(GO);Kor=r(Lmt,"TFXLMRobertaModel"),Lmt.forEach(t),Zor=r(HLe," (XLM-RoBERTa model)"),HLe.forEach(t),err=i(k),lv=n(k,"LI",{});var ULe=s(lv);wpe=n(ULe,"STRONG",{});var xmt=s(wpe);orr=r(xmt,"xlnet"),xmt.forEach(t),rrr=r(ULe," \u2014 "),OO=n(ULe,"A",{href:!0});var kmt=s(OO);trr=r(kmt,"TFXLNetModel"),kmt.forEach(t),arr=r(ULe," (XLNet model)"),ULe.forEach(t),k.forEach(t),nrr=i(pa),Ape=n(pa,"P",{});var Smt=s(Ape);srr=r(Smt,"Examples:"),Smt.forEach(t),lrr=i(pa),m(e0.$$.fragment,pa),pa.forEach(t),jl.forEach(t),DRe=i(c),_c=n(c,"H2",{class:!0});var JPe=s(_c);iv=n(JPe,"A",{id:!0,class:!0,href:!0});var Rmt=s(iv);ype=n(Rmt,"SPAN",{});var Bmt=s(ype);m(o0.$$.fragment,Bmt),Bmt.forEach(t),Rmt.forEach(t),irr=i(JPe),Lpe=n(JPe,"SPAN",{});var Pmt=s(Lpe);drr=r(Pmt,"TFAutoModelForPreTraining"),Pmt.forEach(t),JPe.forEach(t),GRe=i(c),vr=n(c,"DIV",{class:!0});var Gl=s(vr);m(r0.$$.fragment,Gl),crr=i(Gl),uc=n(Gl,"P",{});var VU=s(uc);frr=r(VU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),VO=n(VU,"A",{href:!0});var $mt=s(VO);mrr=r($mt,"from_pretrained()"),$mt.forEach(t),grr=r(VU," class method or the "),XO=n(VU,"A",{href:!0});var Imt=s(XO);hrr=r(Imt,"from_config()"),Imt.forEach(t),prr=r(VU,` class
method.`),VU.forEach(t),_rr=i(Gl),t0=n(Gl,"P",{});var YPe=s(t0);urr=r(YPe,"This class cannot be instantiated directly using "),xpe=n(YPe,"CODE",{});var qmt=s(xpe);brr=r(qmt,"__init__()"),qmt.forEach(t),Frr=r(YPe," (throws an error)."),YPe.forEach(t),vrr=i(Gl),ht=n(Gl,"DIV",{class:!0});var Ol=s(ht);m(a0.$$.fragment,Ol),Trr=i(Ol),kpe=n(Ol,"P",{});var Nmt=s(kpe);Mrr=r(Nmt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Nmt.forEach(t),Err=i(Ol),bc=n(Ol,"P",{});var XU=s(bc);Crr=r(XU,`Note:
Loading a model from its configuration file does `),Spe=n(XU,"STRONG",{});var jmt=s(Spe);wrr=r(jmt,"not"),jmt.forEach(t),Arr=r(XU,` load the model weights. It only affects the
model\u2019s configuration. Use `),zO=n(XU,"A",{href:!0});var Dmt=s(zO);yrr=r(Dmt,"from_pretrained()"),Dmt.forEach(t),Lrr=r(XU," to load the model weights."),XU.forEach(t),xrr=i(Ol),Rpe=n(Ol,"P",{});var Gmt=s(Rpe);krr=r(Gmt,"Examples:"),Gmt.forEach(t),Srr=i(Ol),m(n0.$$.fragment,Ol),Ol.forEach(t),Rrr=i(Gl),po=n(Gl,"DIV",{class:!0});var _a=s(po);m(s0.$$.fragment,_a),Brr=i(_a),Bpe=n(_a,"P",{});var Omt=s(Bpe);Prr=r(Omt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Omt.forEach(t),$rr=i(_a),un=n(_a,"P",{});var XE=s(un);Irr=r(XE,"The model class to instantiate is selected based on the "),Ppe=n(XE,"CODE",{});var Vmt=s(Ppe);qrr=r(Vmt,"model_type"),Vmt.forEach(t),Nrr=r(XE,` property of the config object (either
passed as an argument or loaded from `),$pe=n(XE,"CODE",{});var Xmt=s($pe);jrr=r(Xmt,"pretrained_model_name_or_path"),Xmt.forEach(t),Drr=r(XE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ipe=n(XE,"CODE",{});var zmt=s(Ipe);Grr=r(zmt,"pretrained_model_name_or_path"),zmt.forEach(t),Orr=r(XE,":"),XE.forEach(t),Vrr=i(_a),H=n(_a,"UL",{});var U=s(H);dv=n(U,"LI",{});var JLe=s(dv);qpe=n(JLe,"STRONG",{});var Qmt=s(qpe);Xrr=r(Qmt,"albert"),Qmt.forEach(t),zrr=r(JLe," \u2014 "),QO=n(JLe,"A",{href:!0});var Wmt=s(QO);Qrr=r(Wmt,"TFAlbertForPreTraining"),Wmt.forEach(t),Wrr=r(JLe," (ALBERT model)"),JLe.forEach(t),Hrr=i(U),cv=n(U,"LI",{});var YLe=s(cv);Npe=n(YLe,"STRONG",{});var Hmt=s(Npe);Urr=r(Hmt,"bart"),Hmt.forEach(t),Jrr=r(YLe," \u2014 "),WO=n(YLe,"A",{href:!0});var Umt=s(WO);Yrr=r(Umt,"TFBartForConditionalGeneration"),Umt.forEach(t),Krr=r(YLe," (BART model)"),YLe.forEach(t),Zrr=i(U),fv=n(U,"LI",{});var KLe=s(fv);jpe=n(KLe,"STRONG",{});var Jmt=s(jpe);etr=r(Jmt,"bert"),Jmt.forEach(t),otr=r(KLe," \u2014 "),HO=n(KLe,"A",{href:!0});var Ymt=s(HO);rtr=r(Ymt,"TFBertForPreTraining"),Ymt.forEach(t),ttr=r(KLe," (BERT model)"),KLe.forEach(t),atr=i(U),mv=n(U,"LI",{});var ZLe=s(mv);Dpe=n(ZLe,"STRONG",{});var Kmt=s(Dpe);ntr=r(Kmt,"camembert"),Kmt.forEach(t),str=r(ZLe," \u2014 "),UO=n(ZLe,"A",{href:!0});var Zmt=s(UO);ltr=r(Zmt,"TFCamembertForMaskedLM"),Zmt.forEach(t),itr=r(ZLe," (CamemBERT model)"),ZLe.forEach(t),dtr=i(U),gv=n(U,"LI",{});var e8e=s(gv);Gpe=n(e8e,"STRONG",{});var egt=s(Gpe);ctr=r(egt,"ctrl"),egt.forEach(t),ftr=r(e8e," \u2014 "),JO=n(e8e,"A",{href:!0});var ogt=s(JO);mtr=r(ogt,"TFCTRLLMHeadModel"),ogt.forEach(t),gtr=r(e8e," (CTRL model)"),e8e.forEach(t),htr=i(U),hv=n(U,"LI",{});var o8e=s(hv);Ope=n(o8e,"STRONG",{});var rgt=s(Ope);ptr=r(rgt,"distilbert"),rgt.forEach(t),_tr=r(o8e," \u2014 "),YO=n(o8e,"A",{href:!0});var tgt=s(YO);utr=r(tgt,"TFDistilBertForMaskedLM"),tgt.forEach(t),btr=r(o8e," (DistilBERT model)"),o8e.forEach(t),Ftr=i(U),pv=n(U,"LI",{});var r8e=s(pv);Vpe=n(r8e,"STRONG",{});var agt=s(Vpe);vtr=r(agt,"electra"),agt.forEach(t),Ttr=r(r8e," \u2014 "),KO=n(r8e,"A",{href:!0});var ngt=s(KO);Mtr=r(ngt,"TFElectraForPreTraining"),ngt.forEach(t),Etr=r(r8e," (ELECTRA model)"),r8e.forEach(t),Ctr=i(U),_v=n(U,"LI",{});var t8e=s(_v);Xpe=n(t8e,"STRONG",{});var sgt=s(Xpe);wtr=r(sgt,"flaubert"),sgt.forEach(t),Atr=r(t8e," \u2014 "),ZO=n(t8e,"A",{href:!0});var lgt=s(ZO);ytr=r(lgt,"TFFlaubertWithLMHeadModel"),lgt.forEach(t),Ltr=r(t8e," (FlauBERT model)"),t8e.forEach(t),xtr=i(U),uv=n(U,"LI",{});var a8e=s(uv);zpe=n(a8e,"STRONG",{});var igt=s(zpe);ktr=r(igt,"funnel"),igt.forEach(t),Str=r(a8e," \u2014 "),eV=n(a8e,"A",{href:!0});var dgt=s(eV);Rtr=r(dgt,"TFFunnelForPreTraining"),dgt.forEach(t),Btr=r(a8e," (Funnel Transformer model)"),a8e.forEach(t),Ptr=i(U),bv=n(U,"LI",{});var n8e=s(bv);Qpe=n(n8e,"STRONG",{});var cgt=s(Qpe);$tr=r(cgt,"gpt2"),cgt.forEach(t),Itr=r(n8e," \u2014 "),oV=n(n8e,"A",{href:!0});var fgt=s(oV);qtr=r(fgt,"TFGPT2LMHeadModel"),fgt.forEach(t),Ntr=r(n8e," (OpenAI GPT-2 model)"),n8e.forEach(t),jtr=i(U),Fv=n(U,"LI",{});var s8e=s(Fv);Wpe=n(s8e,"STRONG",{});var mgt=s(Wpe);Dtr=r(mgt,"layoutlm"),mgt.forEach(t),Gtr=r(s8e," \u2014 "),rV=n(s8e,"A",{href:!0});var ggt=s(rV);Otr=r(ggt,"TFLayoutLMForMaskedLM"),ggt.forEach(t),Vtr=r(s8e," (LayoutLM model)"),s8e.forEach(t),Xtr=i(U),vv=n(U,"LI",{});var l8e=s(vv);Hpe=n(l8e,"STRONG",{});var hgt=s(Hpe);ztr=r(hgt,"lxmert"),hgt.forEach(t),Qtr=r(l8e," \u2014 "),tV=n(l8e,"A",{href:!0});var pgt=s(tV);Wtr=r(pgt,"TFLxmertForPreTraining"),pgt.forEach(t),Htr=r(l8e," (LXMERT model)"),l8e.forEach(t),Utr=i(U),Tv=n(U,"LI",{});var i8e=s(Tv);Upe=n(i8e,"STRONG",{});var _gt=s(Upe);Jtr=r(_gt,"mobilebert"),_gt.forEach(t),Ytr=r(i8e," \u2014 "),aV=n(i8e,"A",{href:!0});var ugt=s(aV);Ktr=r(ugt,"TFMobileBertForPreTraining"),ugt.forEach(t),Ztr=r(i8e," (MobileBERT model)"),i8e.forEach(t),ear=i(U),Mv=n(U,"LI",{});var d8e=s(Mv);Jpe=n(d8e,"STRONG",{});var bgt=s(Jpe);oar=r(bgt,"mpnet"),bgt.forEach(t),rar=r(d8e," \u2014 "),nV=n(d8e,"A",{href:!0});var Fgt=s(nV);tar=r(Fgt,"TFMPNetForMaskedLM"),Fgt.forEach(t),aar=r(d8e," (MPNet model)"),d8e.forEach(t),nar=i(U),Ev=n(U,"LI",{});var c8e=s(Ev);Ype=n(c8e,"STRONG",{});var vgt=s(Ype);sar=r(vgt,"openai-gpt"),vgt.forEach(t),lar=r(c8e," \u2014 "),sV=n(c8e,"A",{href:!0});var Tgt=s(sV);iar=r(Tgt,"TFOpenAIGPTLMHeadModel"),Tgt.forEach(t),dar=r(c8e," (OpenAI GPT model)"),c8e.forEach(t),car=i(U),Cv=n(U,"LI",{});var f8e=s(Cv);Kpe=n(f8e,"STRONG",{});var Mgt=s(Kpe);far=r(Mgt,"roberta"),Mgt.forEach(t),mar=r(f8e," \u2014 "),lV=n(f8e,"A",{href:!0});var Egt=s(lV);gar=r(Egt,"TFRobertaForMaskedLM"),Egt.forEach(t),har=r(f8e," (RoBERTa model)"),f8e.forEach(t),par=i(U),wv=n(U,"LI",{});var m8e=s(wv);Zpe=n(m8e,"STRONG",{});var Cgt=s(Zpe);_ar=r(Cgt,"t5"),Cgt.forEach(t),uar=r(m8e," \u2014 "),iV=n(m8e,"A",{href:!0});var wgt=s(iV);bar=r(wgt,"TFT5ForConditionalGeneration"),wgt.forEach(t),Far=r(m8e," (T5 model)"),m8e.forEach(t),Tar=i(U),Av=n(U,"LI",{});var g8e=s(Av);e_e=n(g8e,"STRONG",{});var Agt=s(e_e);Mar=r(Agt,"tapas"),Agt.forEach(t),Ear=r(g8e," \u2014 "),dV=n(g8e,"A",{href:!0});var ygt=s(dV);Car=r(ygt,"TFTapasForMaskedLM"),ygt.forEach(t),war=r(g8e," (TAPAS model)"),g8e.forEach(t),Aar=i(U),yv=n(U,"LI",{});var h8e=s(yv);o_e=n(h8e,"STRONG",{});var Lgt=s(o_e);yar=r(Lgt,"transfo-xl"),Lgt.forEach(t),Lar=r(h8e," \u2014 "),cV=n(h8e,"A",{href:!0});var xgt=s(cV);xar=r(xgt,"TFTransfoXLLMHeadModel"),xgt.forEach(t),kar=r(h8e," (Transformer-XL model)"),h8e.forEach(t),Sar=i(U),Lv=n(U,"LI",{});var p8e=s(Lv);r_e=n(p8e,"STRONG",{});var kgt=s(r_e);Rar=r(kgt,"xlm"),kgt.forEach(t),Bar=r(p8e," \u2014 "),fV=n(p8e,"A",{href:!0});var Sgt=s(fV);Par=r(Sgt,"TFXLMWithLMHeadModel"),Sgt.forEach(t),$ar=r(p8e," (XLM model)"),p8e.forEach(t),Iar=i(U),xv=n(U,"LI",{});var _8e=s(xv);t_e=n(_8e,"STRONG",{});var Rgt=s(t_e);qar=r(Rgt,"xlm-roberta"),Rgt.forEach(t),Nar=r(_8e," \u2014 "),mV=n(_8e,"A",{href:!0});var Bgt=s(mV);jar=r(Bgt,"TFXLMRobertaForMaskedLM"),Bgt.forEach(t),Dar=r(_8e," (XLM-RoBERTa model)"),_8e.forEach(t),Gar=i(U),kv=n(U,"LI",{});var u8e=s(kv);a_e=n(u8e,"STRONG",{});var Pgt=s(a_e);Oar=r(Pgt,"xlnet"),Pgt.forEach(t),Var=r(u8e," \u2014 "),gV=n(u8e,"A",{href:!0});var $gt=s(gV);Xar=r($gt,"TFXLNetLMHeadModel"),$gt.forEach(t),zar=r(u8e," (XLNet model)"),u8e.forEach(t),U.forEach(t),Qar=i(_a),n_e=n(_a,"P",{});var Igt=s(n_e);War=r(Igt,"Examples:"),Igt.forEach(t),Har=i(_a),m(l0.$$.fragment,_a),_a.forEach(t),Gl.forEach(t),ORe=i(c),Fc=n(c,"H2",{class:!0});var KPe=s(Fc);Sv=n(KPe,"A",{id:!0,class:!0,href:!0});var qgt=s(Sv);s_e=n(qgt,"SPAN",{});var Ngt=s(s_e);m(i0.$$.fragment,Ngt),Ngt.forEach(t),qgt.forEach(t),Uar=i(KPe),l_e=n(KPe,"SPAN",{});var jgt=s(l_e);Jar=r(jgt,"TFAutoModelForCausalLM"),jgt.forEach(t),KPe.forEach(t),VRe=i(c),Tr=n(c,"DIV",{class:!0});var Vl=s(Tr);m(d0.$$.fragment,Vl),Yar=i(Vl),vc=n(Vl,"P",{});var zU=s(vc);Kar=r(zU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),hV=n(zU,"A",{href:!0});var Dgt=s(hV);Zar=r(Dgt,"from_pretrained()"),Dgt.forEach(t),enr=r(zU," class method or the "),pV=n(zU,"A",{href:!0});var Ggt=s(pV);onr=r(Ggt,"from_config()"),Ggt.forEach(t),rnr=r(zU,` class
method.`),zU.forEach(t),tnr=i(Vl),c0=n(Vl,"P",{});var ZPe=s(c0);anr=r(ZPe,"This class cannot be instantiated directly using "),i_e=n(ZPe,"CODE",{});var Ogt=s(i_e);nnr=r(Ogt,"__init__()"),Ogt.forEach(t),snr=r(ZPe," (throws an error)."),ZPe.forEach(t),lnr=i(Vl),pt=n(Vl,"DIV",{class:!0});var Xl=s(pt);m(f0.$$.fragment,Xl),inr=i(Xl),d_e=n(Xl,"P",{});var Vgt=s(d_e);dnr=r(Vgt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Vgt.forEach(t),cnr=i(Xl),Tc=n(Xl,"P",{});var QU=s(Tc);fnr=r(QU,`Note:
Loading a model from its configuration file does `),c_e=n(QU,"STRONG",{});var Xgt=s(c_e);mnr=r(Xgt,"not"),Xgt.forEach(t),gnr=r(QU,` load the model weights. It only affects the
model\u2019s configuration. Use `),_V=n(QU,"A",{href:!0});var zgt=s(_V);hnr=r(zgt,"from_pretrained()"),zgt.forEach(t),pnr=r(QU," to load the model weights."),QU.forEach(t),_nr=i(Xl),f_e=n(Xl,"P",{});var Qgt=s(f_e);unr=r(Qgt,"Examples:"),Qgt.forEach(t),bnr=i(Xl),m(m0.$$.fragment,Xl),Xl.forEach(t),Fnr=i(Vl),_o=n(Vl,"DIV",{class:!0});var ua=s(_o);m(g0.$$.fragment,ua),vnr=i(ua),m_e=n(ua,"P",{});var Wgt=s(m_e);Tnr=r(Wgt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Wgt.forEach(t),Mnr=i(ua),bn=n(ua,"P",{});var zE=s(bn);Enr=r(zE,"The model class to instantiate is selected based on the "),g_e=n(zE,"CODE",{});var Hgt=s(g_e);Cnr=r(Hgt,"model_type"),Hgt.forEach(t),wnr=r(zE,` property of the config object (either
passed as an argument or loaded from `),h_e=n(zE,"CODE",{});var Ugt=s(h_e);Anr=r(Ugt,"pretrained_model_name_or_path"),Ugt.forEach(t),ynr=r(zE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p_e=n(zE,"CODE",{});var Jgt=s(p_e);Lnr=r(Jgt,"pretrained_model_name_or_path"),Jgt.forEach(t),xnr=r(zE,":"),zE.forEach(t),knr=i(ua),ce=n(ua,"UL",{});var he=s(ce);Rv=n(he,"LI",{});var b8e=s(Rv);__e=n(b8e,"STRONG",{});var Ygt=s(__e);Snr=r(Ygt,"bert"),Ygt.forEach(t),Rnr=r(b8e," \u2014 "),uV=n(b8e,"A",{href:!0});var Kgt=s(uV);Bnr=r(Kgt,"TFBertLMHeadModel"),Kgt.forEach(t),Pnr=r(b8e," (BERT model)"),b8e.forEach(t),$nr=i(he),Bv=n(he,"LI",{});var F8e=s(Bv);u_e=n(F8e,"STRONG",{});var Zgt=s(u_e);Inr=r(Zgt,"camembert"),Zgt.forEach(t),qnr=r(F8e," \u2014 "),bV=n(F8e,"A",{href:!0});var eht=s(bV);Nnr=r(eht,"TFCamembertForCausalLM"),eht.forEach(t),jnr=r(F8e," (CamemBERT model)"),F8e.forEach(t),Dnr=i(he),Pv=n(he,"LI",{});var v8e=s(Pv);b_e=n(v8e,"STRONG",{});var oht=s(b_e);Gnr=r(oht,"ctrl"),oht.forEach(t),Onr=r(v8e," \u2014 "),FV=n(v8e,"A",{href:!0});var rht=s(FV);Vnr=r(rht,"TFCTRLLMHeadModel"),rht.forEach(t),Xnr=r(v8e," (CTRL model)"),v8e.forEach(t),znr=i(he),$v=n(he,"LI",{});var T8e=s($v);F_e=n(T8e,"STRONG",{});var tht=s(F_e);Qnr=r(tht,"gpt2"),tht.forEach(t),Wnr=r(T8e," \u2014 "),vV=n(T8e,"A",{href:!0});var aht=s(vV);Hnr=r(aht,"TFGPT2LMHeadModel"),aht.forEach(t),Unr=r(T8e," (OpenAI GPT-2 model)"),T8e.forEach(t),Jnr=i(he),Iv=n(he,"LI",{});var M8e=s(Iv);v_e=n(M8e,"STRONG",{});var nht=s(v_e);Ynr=r(nht,"gptj"),nht.forEach(t),Knr=r(M8e," \u2014 "),TV=n(M8e,"A",{href:!0});var sht=s(TV);Znr=r(sht,"TFGPTJForCausalLM"),sht.forEach(t),esr=r(M8e," (GPT-J model)"),M8e.forEach(t),osr=i(he),qv=n(he,"LI",{});var E8e=s(qv);T_e=n(E8e,"STRONG",{});var lht=s(T_e);rsr=r(lht,"openai-gpt"),lht.forEach(t),tsr=r(E8e," \u2014 "),MV=n(E8e,"A",{href:!0});var iht=s(MV);asr=r(iht,"TFOpenAIGPTLMHeadModel"),iht.forEach(t),nsr=r(E8e," (OpenAI GPT model)"),E8e.forEach(t),ssr=i(he),Nv=n(he,"LI",{});var C8e=s(Nv);M_e=n(C8e,"STRONG",{});var dht=s(M_e);lsr=r(dht,"rembert"),dht.forEach(t),isr=r(C8e," \u2014 "),EV=n(C8e,"A",{href:!0});var cht=s(EV);dsr=r(cht,"TFRemBertForCausalLM"),cht.forEach(t),csr=r(C8e," (RemBERT model)"),C8e.forEach(t),fsr=i(he),jv=n(he,"LI",{});var w8e=s(jv);E_e=n(w8e,"STRONG",{});var fht=s(E_e);msr=r(fht,"roberta"),fht.forEach(t),gsr=r(w8e," \u2014 "),CV=n(w8e,"A",{href:!0});var mht=s(CV);hsr=r(mht,"TFRobertaForCausalLM"),mht.forEach(t),psr=r(w8e," (RoBERTa model)"),w8e.forEach(t),_sr=i(he),Dv=n(he,"LI",{});var A8e=s(Dv);C_e=n(A8e,"STRONG",{});var ght=s(C_e);usr=r(ght,"roformer"),ght.forEach(t),bsr=r(A8e," \u2014 "),wV=n(A8e,"A",{href:!0});var hht=s(wV);Fsr=r(hht,"TFRoFormerForCausalLM"),hht.forEach(t),vsr=r(A8e," (RoFormer model)"),A8e.forEach(t),Tsr=i(he),Gv=n(he,"LI",{});var y8e=s(Gv);w_e=n(y8e,"STRONG",{});var pht=s(w_e);Msr=r(pht,"transfo-xl"),pht.forEach(t),Esr=r(y8e," \u2014 "),AV=n(y8e,"A",{href:!0});var _ht=s(AV);Csr=r(_ht,"TFTransfoXLLMHeadModel"),_ht.forEach(t),wsr=r(y8e," (Transformer-XL model)"),y8e.forEach(t),Asr=i(he),Ov=n(he,"LI",{});var L8e=s(Ov);A_e=n(L8e,"STRONG",{});var uht=s(A_e);ysr=r(uht,"xlm"),uht.forEach(t),Lsr=r(L8e," \u2014 "),yV=n(L8e,"A",{href:!0});var bht=s(yV);xsr=r(bht,"TFXLMWithLMHeadModel"),bht.forEach(t),ksr=r(L8e," (XLM model)"),L8e.forEach(t),Ssr=i(he),Vv=n(he,"LI",{});var x8e=s(Vv);y_e=n(x8e,"STRONG",{});var Fht=s(y_e);Rsr=r(Fht,"xlnet"),Fht.forEach(t),Bsr=r(x8e," \u2014 "),LV=n(x8e,"A",{href:!0});var vht=s(LV);Psr=r(vht,"TFXLNetLMHeadModel"),vht.forEach(t),$sr=r(x8e," (XLNet model)"),x8e.forEach(t),he.forEach(t),Isr=i(ua),L_e=n(ua,"P",{});var Tht=s(L_e);qsr=r(Tht,"Examples:"),Tht.forEach(t),Nsr=i(ua),m(h0.$$.fragment,ua),ua.forEach(t),Vl.forEach(t),XRe=i(c),Mc=n(c,"H2",{class:!0});var e$e=s(Mc);Xv=n(e$e,"A",{id:!0,class:!0,href:!0});var Mht=s(Xv);x_e=n(Mht,"SPAN",{});var Eht=s(x_e);m(p0.$$.fragment,Eht),Eht.forEach(t),Mht.forEach(t),jsr=i(e$e),k_e=n(e$e,"SPAN",{});var Cht=s(k_e);Dsr=r(Cht,"TFAutoModelForImageClassification"),Cht.forEach(t),e$e.forEach(t),zRe=i(c),Mr=n(c,"DIV",{class:!0});var zl=s(Mr);m(_0.$$.fragment,zl),Gsr=i(zl),Ec=n(zl,"P",{});var WU=s(Ec);Osr=r(WU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),xV=n(WU,"A",{href:!0});var wht=s(xV);Vsr=r(wht,"from_pretrained()"),wht.forEach(t),Xsr=r(WU," class method or the "),kV=n(WU,"A",{href:!0});var Aht=s(kV);zsr=r(Aht,"from_config()"),Aht.forEach(t),Qsr=r(WU,` class
method.`),WU.forEach(t),Wsr=i(zl),u0=n(zl,"P",{});var o$e=s(u0);Hsr=r(o$e,"This class cannot be instantiated directly using "),S_e=n(o$e,"CODE",{});var yht=s(S_e);Usr=r(yht,"__init__()"),yht.forEach(t),Jsr=r(o$e," (throws an error)."),o$e.forEach(t),Ysr=i(zl),_t=n(zl,"DIV",{class:!0});var Ql=s(_t);m(b0.$$.fragment,Ql),Ksr=i(Ql),R_e=n(Ql,"P",{});var Lht=s(R_e);Zsr=r(Lht,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Lht.forEach(t),elr=i(Ql),Cc=n(Ql,"P",{});var HU=s(Cc);olr=r(HU,`Note:
Loading a model from its configuration file does `),B_e=n(HU,"STRONG",{});var xht=s(B_e);rlr=r(xht,"not"),xht.forEach(t),tlr=r(HU,` load the model weights. It only affects the
model\u2019s configuration. Use `),SV=n(HU,"A",{href:!0});var kht=s(SV);alr=r(kht,"from_pretrained()"),kht.forEach(t),nlr=r(HU," to load the model weights."),HU.forEach(t),slr=i(Ql),P_e=n(Ql,"P",{});var Sht=s(P_e);llr=r(Sht,"Examples:"),Sht.forEach(t),ilr=i(Ql),m(F0.$$.fragment,Ql),Ql.forEach(t),dlr=i(zl),uo=n(zl,"DIV",{class:!0});var ba=s(uo);m(v0.$$.fragment,ba),clr=i(ba),$_e=n(ba,"P",{});var Rht=s($_e);flr=r(Rht,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Rht.forEach(t),mlr=i(ba),Fn=n(ba,"P",{});var QE=s(Fn);glr=r(QE,"The model class to instantiate is selected based on the "),I_e=n(QE,"CODE",{});var Bht=s(I_e);hlr=r(Bht,"model_type"),Bht.forEach(t),plr=r(QE,` property of the config object (either
passed as an argument or loaded from `),q_e=n(QE,"CODE",{});var Pht=s(q_e);_lr=r(Pht,"pretrained_model_name_or_path"),Pht.forEach(t),ulr=r(QE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N_e=n(QE,"CODE",{});var $ht=s(N_e);blr=r($ht,"pretrained_model_name_or_path"),$ht.forEach(t),Flr=r(QE,":"),QE.forEach(t),vlr=i(ba),T0=n(ba,"UL",{});var r$e=s(T0);zv=n(r$e,"LI",{});var k8e=s(zv);j_e=n(k8e,"STRONG",{});var Iht=s(j_e);Tlr=r(Iht,"convnext"),Iht.forEach(t),Mlr=r(k8e," \u2014 "),RV=n(k8e,"A",{href:!0});var qht=s(RV);Elr=r(qht,"TFConvNextForImageClassification"),qht.forEach(t),Clr=r(k8e," (ConvNext model)"),k8e.forEach(t),wlr=i(r$e),Qv=n(r$e,"LI",{});var S8e=s(Qv);D_e=n(S8e,"STRONG",{});var Nht=s(D_e);Alr=r(Nht,"vit"),Nht.forEach(t),ylr=r(S8e," \u2014 "),BV=n(S8e,"A",{href:!0});var jht=s(BV);Llr=r(jht,"TFViTForImageClassification"),jht.forEach(t),xlr=r(S8e," (ViT model)"),S8e.forEach(t),r$e.forEach(t),klr=i(ba),G_e=n(ba,"P",{});var Dht=s(G_e);Slr=r(Dht,"Examples:"),Dht.forEach(t),Rlr=i(ba),m(M0.$$.fragment,ba),ba.forEach(t),zl.forEach(t),QRe=i(c),wc=n(c,"H2",{class:!0});var t$e=s(wc);Wv=n(t$e,"A",{id:!0,class:!0,href:!0});var Ght=s(Wv);O_e=n(Ght,"SPAN",{});var Oht=s(O_e);m(E0.$$.fragment,Oht),Oht.forEach(t),Ght.forEach(t),Blr=i(t$e),V_e=n(t$e,"SPAN",{});var Vht=s(V_e);Plr=r(Vht,"TFAutoModelForMaskedLM"),Vht.forEach(t),t$e.forEach(t),WRe=i(c),Er=n(c,"DIV",{class:!0});var Wl=s(Er);m(C0.$$.fragment,Wl),$lr=i(Wl),Ac=n(Wl,"P",{});var UU=s(Ac);Ilr=r(UU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),PV=n(UU,"A",{href:!0});var Xht=s(PV);qlr=r(Xht,"from_pretrained()"),Xht.forEach(t),Nlr=r(UU," class method or the "),$V=n(UU,"A",{href:!0});var zht=s($V);jlr=r(zht,"from_config()"),zht.forEach(t),Dlr=r(UU,` class
method.`),UU.forEach(t),Glr=i(Wl),w0=n(Wl,"P",{});var a$e=s(w0);Olr=r(a$e,"This class cannot be instantiated directly using "),X_e=n(a$e,"CODE",{});var Qht=s(X_e);Vlr=r(Qht,"__init__()"),Qht.forEach(t),Xlr=r(a$e," (throws an error)."),a$e.forEach(t),zlr=i(Wl),ut=n(Wl,"DIV",{class:!0});var Hl=s(ut);m(A0.$$.fragment,Hl),Qlr=i(Hl),z_e=n(Hl,"P",{});var Wht=s(z_e);Wlr=r(Wht,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Wht.forEach(t),Hlr=i(Hl),yc=n(Hl,"P",{});var JU=s(yc);Ulr=r(JU,`Note:
Loading a model from its configuration file does `),Q_e=n(JU,"STRONG",{});var Hht=s(Q_e);Jlr=r(Hht,"not"),Hht.forEach(t),Ylr=r(JU,` load the model weights. It only affects the
model\u2019s configuration. Use `),IV=n(JU,"A",{href:!0});var Uht=s(IV);Klr=r(Uht,"from_pretrained()"),Uht.forEach(t),Zlr=r(JU," to load the model weights."),JU.forEach(t),eir=i(Hl),W_e=n(Hl,"P",{});var Jht=s(W_e);oir=r(Jht,"Examples:"),Jht.forEach(t),rir=i(Hl),m(y0.$$.fragment,Hl),Hl.forEach(t),tir=i(Wl),bo=n(Wl,"DIV",{class:!0});var Fa=s(bo);m(L0.$$.fragment,Fa),air=i(Fa),H_e=n(Fa,"P",{});var Yht=s(H_e);nir=r(Yht,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Yht.forEach(t),sir=i(Fa),vn=n(Fa,"P",{});var WE=s(vn);lir=r(WE,"The model class to instantiate is selected based on the "),U_e=n(WE,"CODE",{});var Kht=s(U_e);iir=r(Kht,"model_type"),Kht.forEach(t),dir=r(WE,` property of the config object (either
passed as an argument or loaded from `),J_e=n(WE,"CODE",{});var Zht=s(J_e);cir=r(Zht,"pretrained_model_name_or_path"),Zht.forEach(t),fir=r(WE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y_e=n(WE,"CODE",{});var ept=s(Y_e);mir=r(ept,"pretrained_model_name_or_path"),ept.forEach(t),gir=r(WE,":"),WE.forEach(t),hir=i(Fa),J=n(Fa,"UL",{});var ee=s(J);Hv=n(ee,"LI",{});var R8e=s(Hv);K_e=n(R8e,"STRONG",{});var opt=s(K_e);pir=r(opt,"albert"),opt.forEach(t),_ir=r(R8e," \u2014 "),qV=n(R8e,"A",{href:!0});var rpt=s(qV);uir=r(rpt,"TFAlbertForMaskedLM"),rpt.forEach(t),bir=r(R8e," (ALBERT model)"),R8e.forEach(t),Fir=i(ee),Uv=n(ee,"LI",{});var B8e=s(Uv);Z_e=n(B8e,"STRONG",{});var tpt=s(Z_e);vir=r(tpt,"bert"),tpt.forEach(t),Tir=r(B8e," \u2014 "),NV=n(B8e,"A",{href:!0});var apt=s(NV);Mir=r(apt,"TFBertForMaskedLM"),apt.forEach(t),Eir=r(B8e," (BERT model)"),B8e.forEach(t),Cir=i(ee),Jv=n(ee,"LI",{});var P8e=s(Jv);eue=n(P8e,"STRONG",{});var npt=s(eue);wir=r(npt,"camembert"),npt.forEach(t),Air=r(P8e," \u2014 "),jV=n(P8e,"A",{href:!0});var spt=s(jV);yir=r(spt,"TFCamembertForMaskedLM"),spt.forEach(t),Lir=r(P8e," (CamemBERT model)"),P8e.forEach(t),xir=i(ee),Yv=n(ee,"LI",{});var $8e=s(Yv);oue=n($8e,"STRONG",{});var lpt=s(oue);kir=r(lpt,"convbert"),lpt.forEach(t),Sir=r($8e," \u2014 "),DV=n($8e,"A",{href:!0});var ipt=s(DV);Rir=r(ipt,"TFConvBertForMaskedLM"),ipt.forEach(t),Bir=r($8e," (ConvBERT model)"),$8e.forEach(t),Pir=i(ee),Kv=n(ee,"LI",{});var I8e=s(Kv);rue=n(I8e,"STRONG",{});var dpt=s(rue);$ir=r(dpt,"deberta"),dpt.forEach(t),Iir=r(I8e," \u2014 "),GV=n(I8e,"A",{href:!0});var cpt=s(GV);qir=r(cpt,"TFDebertaForMaskedLM"),cpt.forEach(t),Nir=r(I8e," (DeBERTa model)"),I8e.forEach(t),jir=i(ee),Zv=n(ee,"LI",{});var q8e=s(Zv);tue=n(q8e,"STRONG",{});var fpt=s(tue);Dir=r(fpt,"deberta-v2"),fpt.forEach(t),Gir=r(q8e," \u2014 "),OV=n(q8e,"A",{href:!0});var mpt=s(OV);Oir=r(mpt,"TFDebertaV2ForMaskedLM"),mpt.forEach(t),Vir=r(q8e," (DeBERTa-v2 model)"),q8e.forEach(t),Xir=i(ee),e6=n(ee,"LI",{});var N8e=s(e6);aue=n(N8e,"STRONG",{});var gpt=s(aue);zir=r(gpt,"distilbert"),gpt.forEach(t),Qir=r(N8e," \u2014 "),VV=n(N8e,"A",{href:!0});var hpt=s(VV);Wir=r(hpt,"TFDistilBertForMaskedLM"),hpt.forEach(t),Hir=r(N8e," (DistilBERT model)"),N8e.forEach(t),Uir=i(ee),o6=n(ee,"LI",{});var j8e=s(o6);nue=n(j8e,"STRONG",{});var ppt=s(nue);Jir=r(ppt,"electra"),ppt.forEach(t),Yir=r(j8e," \u2014 "),XV=n(j8e,"A",{href:!0});var _pt=s(XV);Kir=r(_pt,"TFElectraForMaskedLM"),_pt.forEach(t),Zir=r(j8e," (ELECTRA model)"),j8e.forEach(t),edr=i(ee),r6=n(ee,"LI",{});var D8e=s(r6);sue=n(D8e,"STRONG",{});var upt=s(sue);odr=r(upt,"flaubert"),upt.forEach(t),rdr=r(D8e," \u2014 "),zV=n(D8e,"A",{href:!0});var bpt=s(zV);tdr=r(bpt,"TFFlaubertWithLMHeadModel"),bpt.forEach(t),adr=r(D8e," (FlauBERT model)"),D8e.forEach(t),ndr=i(ee),t6=n(ee,"LI",{});var G8e=s(t6);lue=n(G8e,"STRONG",{});var Fpt=s(lue);sdr=r(Fpt,"funnel"),Fpt.forEach(t),ldr=r(G8e," \u2014 "),QV=n(G8e,"A",{href:!0});var vpt=s(QV);idr=r(vpt,"TFFunnelForMaskedLM"),vpt.forEach(t),ddr=r(G8e," (Funnel Transformer model)"),G8e.forEach(t),cdr=i(ee),a6=n(ee,"LI",{});var O8e=s(a6);iue=n(O8e,"STRONG",{});var Tpt=s(iue);fdr=r(Tpt,"layoutlm"),Tpt.forEach(t),mdr=r(O8e," \u2014 "),WV=n(O8e,"A",{href:!0});var Mpt=s(WV);gdr=r(Mpt,"TFLayoutLMForMaskedLM"),Mpt.forEach(t),hdr=r(O8e," (LayoutLM model)"),O8e.forEach(t),pdr=i(ee),n6=n(ee,"LI",{});var V8e=s(n6);due=n(V8e,"STRONG",{});var Ept=s(due);_dr=r(Ept,"longformer"),Ept.forEach(t),udr=r(V8e," \u2014 "),HV=n(V8e,"A",{href:!0});var Cpt=s(HV);bdr=r(Cpt,"TFLongformerForMaskedLM"),Cpt.forEach(t),Fdr=r(V8e," (Longformer model)"),V8e.forEach(t),vdr=i(ee),s6=n(ee,"LI",{});var X8e=s(s6);cue=n(X8e,"STRONG",{});var wpt=s(cue);Tdr=r(wpt,"mobilebert"),wpt.forEach(t),Mdr=r(X8e," \u2014 "),UV=n(X8e,"A",{href:!0});var Apt=s(UV);Edr=r(Apt,"TFMobileBertForMaskedLM"),Apt.forEach(t),Cdr=r(X8e," (MobileBERT model)"),X8e.forEach(t),wdr=i(ee),l6=n(ee,"LI",{});var z8e=s(l6);fue=n(z8e,"STRONG",{});var ypt=s(fue);Adr=r(ypt,"mpnet"),ypt.forEach(t),ydr=r(z8e," \u2014 "),JV=n(z8e,"A",{href:!0});var Lpt=s(JV);Ldr=r(Lpt,"TFMPNetForMaskedLM"),Lpt.forEach(t),xdr=r(z8e," (MPNet model)"),z8e.forEach(t),kdr=i(ee),i6=n(ee,"LI",{});var Q8e=s(i6);mue=n(Q8e,"STRONG",{});var xpt=s(mue);Sdr=r(xpt,"rembert"),xpt.forEach(t),Rdr=r(Q8e," \u2014 "),YV=n(Q8e,"A",{href:!0});var kpt=s(YV);Bdr=r(kpt,"TFRemBertForMaskedLM"),kpt.forEach(t),Pdr=r(Q8e," (RemBERT model)"),Q8e.forEach(t),$dr=i(ee),d6=n(ee,"LI",{});var W8e=s(d6);gue=n(W8e,"STRONG",{});var Spt=s(gue);Idr=r(Spt,"roberta"),Spt.forEach(t),qdr=r(W8e," \u2014 "),KV=n(W8e,"A",{href:!0});var Rpt=s(KV);Ndr=r(Rpt,"TFRobertaForMaskedLM"),Rpt.forEach(t),jdr=r(W8e," (RoBERTa model)"),W8e.forEach(t),Ddr=i(ee),c6=n(ee,"LI",{});var H8e=s(c6);hue=n(H8e,"STRONG",{});var Bpt=s(hue);Gdr=r(Bpt,"roformer"),Bpt.forEach(t),Odr=r(H8e," \u2014 "),ZV=n(H8e,"A",{href:!0});var Ppt=s(ZV);Vdr=r(Ppt,"TFRoFormerForMaskedLM"),Ppt.forEach(t),Xdr=r(H8e," (RoFormer model)"),H8e.forEach(t),zdr=i(ee),f6=n(ee,"LI",{});var U8e=s(f6);pue=n(U8e,"STRONG",{});var $pt=s(pue);Qdr=r($pt,"tapas"),$pt.forEach(t),Wdr=r(U8e," \u2014 "),eX=n(U8e,"A",{href:!0});var Ipt=s(eX);Hdr=r(Ipt,"TFTapasForMaskedLM"),Ipt.forEach(t),Udr=r(U8e," (TAPAS model)"),U8e.forEach(t),Jdr=i(ee),m6=n(ee,"LI",{});var J8e=s(m6);_ue=n(J8e,"STRONG",{});var qpt=s(_ue);Ydr=r(qpt,"xlm"),qpt.forEach(t),Kdr=r(J8e," \u2014 "),oX=n(J8e,"A",{href:!0});var Npt=s(oX);Zdr=r(Npt,"TFXLMWithLMHeadModel"),Npt.forEach(t),ecr=r(J8e," (XLM model)"),J8e.forEach(t),ocr=i(ee),g6=n(ee,"LI",{});var Y8e=s(g6);uue=n(Y8e,"STRONG",{});var jpt=s(uue);rcr=r(jpt,"xlm-roberta"),jpt.forEach(t),tcr=r(Y8e," \u2014 "),rX=n(Y8e,"A",{href:!0});var Dpt=s(rX);acr=r(Dpt,"TFXLMRobertaForMaskedLM"),Dpt.forEach(t),ncr=r(Y8e," (XLM-RoBERTa model)"),Y8e.forEach(t),ee.forEach(t),scr=i(Fa),bue=n(Fa,"P",{});var Gpt=s(bue);lcr=r(Gpt,"Examples:"),Gpt.forEach(t),icr=i(Fa),m(x0.$$.fragment,Fa),Fa.forEach(t),Wl.forEach(t),HRe=i(c),Lc=n(c,"H2",{class:!0});var n$e=s(Lc);h6=n(n$e,"A",{id:!0,class:!0,href:!0});var Opt=s(h6);Fue=n(Opt,"SPAN",{});var Vpt=s(Fue);m(k0.$$.fragment,Vpt),Vpt.forEach(t),Opt.forEach(t),dcr=i(n$e),vue=n(n$e,"SPAN",{});var Xpt=s(vue);ccr=r(Xpt,"TFAutoModelForSeq2SeqLM"),Xpt.forEach(t),n$e.forEach(t),URe=i(c),Cr=n(c,"DIV",{class:!0});var Ul=s(Cr);m(S0.$$.fragment,Ul),fcr=i(Ul),xc=n(Ul,"P",{});var YU=s(xc);mcr=r(YU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),tX=n(YU,"A",{href:!0});var zpt=s(tX);gcr=r(zpt,"from_pretrained()"),zpt.forEach(t),hcr=r(YU," class method or the "),aX=n(YU,"A",{href:!0});var Qpt=s(aX);pcr=r(Qpt,"from_config()"),Qpt.forEach(t),_cr=r(YU,` class
method.`),YU.forEach(t),ucr=i(Ul),R0=n(Ul,"P",{});var s$e=s(R0);bcr=r(s$e,"This class cannot be instantiated directly using "),Tue=n(s$e,"CODE",{});var Wpt=s(Tue);Fcr=r(Wpt,"__init__()"),Wpt.forEach(t),vcr=r(s$e," (throws an error)."),s$e.forEach(t),Tcr=i(Ul),bt=n(Ul,"DIV",{class:!0});var Jl=s(bt);m(B0.$$.fragment,Jl),Mcr=i(Jl),Mue=n(Jl,"P",{});var Hpt=s(Mue);Ecr=r(Hpt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Hpt.forEach(t),Ccr=i(Jl),kc=n(Jl,"P",{});var KU=s(kc);wcr=r(KU,`Note:
Loading a model from its configuration file does `),Eue=n(KU,"STRONG",{});var Upt=s(Eue);Acr=r(Upt,"not"),Upt.forEach(t),ycr=r(KU,` load the model weights. It only affects the
model\u2019s configuration. Use `),nX=n(KU,"A",{href:!0});var Jpt=s(nX);Lcr=r(Jpt,"from_pretrained()"),Jpt.forEach(t),xcr=r(KU," to load the model weights."),KU.forEach(t),kcr=i(Jl),Cue=n(Jl,"P",{});var Ypt=s(Cue);Scr=r(Ypt,"Examples:"),Ypt.forEach(t),Rcr=i(Jl),m(P0.$$.fragment,Jl),Jl.forEach(t),Bcr=i(Ul),Fo=n(Ul,"DIV",{class:!0});var va=s(Fo);m($0.$$.fragment,va),Pcr=i(va),wue=n(va,"P",{});var Kpt=s(wue);$cr=r(Kpt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Kpt.forEach(t),Icr=i(va),Tn=n(va,"P",{});var HE=s(Tn);qcr=r(HE,"The model class to instantiate is selected based on the "),Aue=n(HE,"CODE",{});var Zpt=s(Aue);Ncr=r(Zpt,"model_type"),Zpt.forEach(t),jcr=r(HE,` property of the config object (either
passed as an argument or loaded from `),yue=n(HE,"CODE",{});var e_t=s(yue);Dcr=r(e_t,"pretrained_model_name_or_path"),e_t.forEach(t),Gcr=r(HE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lue=n(HE,"CODE",{});var o_t=s(Lue);Ocr=r(o_t,"pretrained_model_name_or_path"),o_t.forEach(t),Vcr=r(HE,":"),HE.forEach(t),Xcr=i(va),ue=n(va,"UL",{});var we=s(ue);p6=n(we,"LI",{});var K8e=s(p6);xue=n(K8e,"STRONG",{});var r_t=s(xue);zcr=r(r_t,"bart"),r_t.forEach(t),Qcr=r(K8e," \u2014 "),sX=n(K8e,"A",{href:!0});var t_t=s(sX);Wcr=r(t_t,"TFBartForConditionalGeneration"),t_t.forEach(t),Hcr=r(K8e," (BART model)"),K8e.forEach(t),Ucr=i(we),_6=n(we,"LI",{});var Z8e=s(_6);kue=n(Z8e,"STRONG",{});var a_t=s(kue);Jcr=r(a_t,"blenderbot"),a_t.forEach(t),Ycr=r(Z8e," \u2014 "),lX=n(Z8e,"A",{href:!0});var n_t=s(lX);Kcr=r(n_t,"TFBlenderbotForConditionalGeneration"),n_t.forEach(t),Zcr=r(Z8e," (Blenderbot model)"),Z8e.forEach(t),efr=i(we),u6=n(we,"LI",{});var e9e=s(u6);Sue=n(e9e,"STRONG",{});var s_t=s(Sue);ofr=r(s_t,"blenderbot-small"),s_t.forEach(t),rfr=r(e9e," \u2014 "),iX=n(e9e,"A",{href:!0});var l_t=s(iX);tfr=r(l_t,"TFBlenderbotSmallForConditionalGeneration"),l_t.forEach(t),afr=r(e9e," (BlenderbotSmall model)"),e9e.forEach(t),nfr=i(we),b6=n(we,"LI",{});var o9e=s(b6);Rue=n(o9e,"STRONG",{});var i_t=s(Rue);sfr=r(i_t,"encoder-decoder"),i_t.forEach(t),lfr=r(o9e," \u2014 "),dX=n(o9e,"A",{href:!0});var d_t=s(dX);ifr=r(d_t,"TFEncoderDecoderModel"),d_t.forEach(t),dfr=r(o9e," (Encoder decoder model)"),o9e.forEach(t),cfr=i(we),F6=n(we,"LI",{});var r9e=s(F6);Bue=n(r9e,"STRONG",{});var c_t=s(Bue);ffr=r(c_t,"led"),c_t.forEach(t),mfr=r(r9e," \u2014 "),cX=n(r9e,"A",{href:!0});var f_t=s(cX);gfr=r(f_t,"TFLEDForConditionalGeneration"),f_t.forEach(t),hfr=r(r9e," (LED model)"),r9e.forEach(t),pfr=i(we),v6=n(we,"LI",{});var t9e=s(v6);Pue=n(t9e,"STRONG",{});var m_t=s(Pue);_fr=r(m_t,"marian"),m_t.forEach(t),ufr=r(t9e," \u2014 "),fX=n(t9e,"A",{href:!0});var g_t=s(fX);bfr=r(g_t,"TFMarianMTModel"),g_t.forEach(t),Ffr=r(t9e," (Marian model)"),t9e.forEach(t),vfr=i(we),T6=n(we,"LI",{});var a9e=s(T6);$ue=n(a9e,"STRONG",{});var h_t=s($ue);Tfr=r(h_t,"mbart"),h_t.forEach(t),Mfr=r(a9e," \u2014 "),mX=n(a9e,"A",{href:!0});var p_t=s(mX);Efr=r(p_t,"TFMBartForConditionalGeneration"),p_t.forEach(t),Cfr=r(a9e," (mBART model)"),a9e.forEach(t),wfr=i(we),M6=n(we,"LI",{});var n9e=s(M6);Iue=n(n9e,"STRONG",{});var __t=s(Iue);Afr=r(__t,"mt5"),__t.forEach(t),yfr=r(n9e," \u2014 "),gX=n(n9e,"A",{href:!0});var u_t=s(gX);Lfr=r(u_t,"TFMT5ForConditionalGeneration"),u_t.forEach(t),xfr=r(n9e," (mT5 model)"),n9e.forEach(t),kfr=i(we),E6=n(we,"LI",{});var s9e=s(E6);que=n(s9e,"STRONG",{});var b_t=s(que);Sfr=r(b_t,"pegasus"),b_t.forEach(t),Rfr=r(s9e," \u2014 "),hX=n(s9e,"A",{href:!0});var F_t=s(hX);Bfr=r(F_t,"TFPegasusForConditionalGeneration"),F_t.forEach(t),Pfr=r(s9e," (Pegasus model)"),s9e.forEach(t),$fr=i(we),C6=n(we,"LI",{});var l9e=s(C6);Nue=n(l9e,"STRONG",{});var v_t=s(Nue);Ifr=r(v_t,"t5"),v_t.forEach(t),qfr=r(l9e," \u2014 "),pX=n(l9e,"A",{href:!0});var T_t=s(pX);Nfr=r(T_t,"TFT5ForConditionalGeneration"),T_t.forEach(t),jfr=r(l9e," (T5 model)"),l9e.forEach(t),we.forEach(t),Dfr=i(va),jue=n(va,"P",{});var M_t=s(jue);Gfr=r(M_t,"Examples:"),M_t.forEach(t),Ofr=i(va),m(I0.$$.fragment,va),va.forEach(t),Ul.forEach(t),JRe=i(c),Sc=n(c,"H2",{class:!0});var l$e=s(Sc);w6=n(l$e,"A",{id:!0,class:!0,href:!0});var E_t=s(w6);Due=n(E_t,"SPAN",{});var C_t=s(Due);m(q0.$$.fragment,C_t),C_t.forEach(t),E_t.forEach(t),Vfr=i(l$e),Gue=n(l$e,"SPAN",{});var w_t=s(Gue);Xfr=r(w_t,"TFAutoModelForSequenceClassification"),w_t.forEach(t),l$e.forEach(t),YRe=i(c),wr=n(c,"DIV",{class:!0});var Yl=s(wr);m(N0.$$.fragment,Yl),zfr=i(Yl),Rc=n(Yl,"P",{});var ZU=s(Rc);Qfr=r(ZU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),_X=n(ZU,"A",{href:!0});var A_t=s(_X);Wfr=r(A_t,"from_pretrained()"),A_t.forEach(t),Hfr=r(ZU," class method or the "),uX=n(ZU,"A",{href:!0});var y_t=s(uX);Ufr=r(y_t,"from_config()"),y_t.forEach(t),Jfr=r(ZU,` class
method.`),ZU.forEach(t),Yfr=i(Yl),j0=n(Yl,"P",{});var i$e=s(j0);Kfr=r(i$e,"This class cannot be instantiated directly using "),Oue=n(i$e,"CODE",{});var L_t=s(Oue);Zfr=r(L_t,"__init__()"),L_t.forEach(t),emr=r(i$e," (throws an error)."),i$e.forEach(t),omr=i(Yl),Ft=n(Yl,"DIV",{class:!0});var Kl=s(Ft);m(D0.$$.fragment,Kl),rmr=i(Kl),Vue=n(Kl,"P",{});var x_t=s(Vue);tmr=r(x_t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),x_t.forEach(t),amr=i(Kl),Bc=n(Kl,"P",{});var eJ=s(Bc);nmr=r(eJ,`Note:
Loading a model from its configuration file does `),Xue=n(eJ,"STRONG",{});var k_t=s(Xue);smr=r(k_t,"not"),k_t.forEach(t),lmr=r(eJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),bX=n(eJ,"A",{href:!0});var S_t=s(bX);imr=r(S_t,"from_pretrained()"),S_t.forEach(t),dmr=r(eJ," to load the model weights."),eJ.forEach(t),cmr=i(Kl),zue=n(Kl,"P",{});var R_t=s(zue);fmr=r(R_t,"Examples:"),R_t.forEach(t),mmr=i(Kl),m(G0.$$.fragment,Kl),Kl.forEach(t),gmr=i(Yl),vo=n(Yl,"DIV",{class:!0});var Ta=s(vo);m(O0.$$.fragment,Ta),hmr=i(Ta),Que=n(Ta,"P",{});var B_t=s(Que);pmr=r(B_t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),B_t.forEach(t),_mr=i(Ta),Mn=n(Ta,"P",{});var UE=s(Mn);umr=r(UE,"The model class to instantiate is selected based on the "),Wue=n(UE,"CODE",{});var P_t=s(Wue);bmr=r(P_t,"model_type"),P_t.forEach(t),Fmr=r(UE,` property of the config object (either
passed as an argument or loaded from `),Hue=n(UE,"CODE",{});var $_t=s(Hue);vmr=r($_t,"pretrained_model_name_or_path"),$_t.forEach(t),Tmr=r(UE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uue=n(UE,"CODE",{});var I_t=s(Uue);Mmr=r(I_t,"pretrained_model_name_or_path"),I_t.forEach(t),Emr=r(UE,":"),UE.forEach(t),Cmr=i(Ta),V=n(Ta,"UL",{});var Q=s(V);A6=n(Q,"LI",{});var i9e=s(A6);Jue=n(i9e,"STRONG",{});var q_t=s(Jue);wmr=r(q_t,"albert"),q_t.forEach(t),Amr=r(i9e," \u2014 "),FX=n(i9e,"A",{href:!0});var N_t=s(FX);ymr=r(N_t,"TFAlbertForSequenceClassification"),N_t.forEach(t),Lmr=r(i9e," (ALBERT model)"),i9e.forEach(t),xmr=i(Q),y6=n(Q,"LI",{});var d9e=s(y6);Yue=n(d9e,"STRONG",{});var j_t=s(Yue);kmr=r(j_t,"bert"),j_t.forEach(t),Smr=r(d9e," \u2014 "),vX=n(d9e,"A",{href:!0});var D_t=s(vX);Rmr=r(D_t,"TFBertForSequenceClassification"),D_t.forEach(t),Bmr=r(d9e," (BERT model)"),d9e.forEach(t),Pmr=i(Q),L6=n(Q,"LI",{});var c9e=s(L6);Kue=n(c9e,"STRONG",{});var G_t=s(Kue);$mr=r(G_t,"camembert"),G_t.forEach(t),Imr=r(c9e," \u2014 "),TX=n(c9e,"A",{href:!0});var O_t=s(TX);qmr=r(O_t,"TFCamembertForSequenceClassification"),O_t.forEach(t),Nmr=r(c9e," (CamemBERT model)"),c9e.forEach(t),jmr=i(Q),x6=n(Q,"LI",{});var f9e=s(x6);Zue=n(f9e,"STRONG",{});var V_t=s(Zue);Dmr=r(V_t,"convbert"),V_t.forEach(t),Gmr=r(f9e," \u2014 "),MX=n(f9e,"A",{href:!0});var X_t=s(MX);Omr=r(X_t,"TFConvBertForSequenceClassification"),X_t.forEach(t),Vmr=r(f9e," (ConvBERT model)"),f9e.forEach(t),Xmr=i(Q),k6=n(Q,"LI",{});var m9e=s(k6);e1e=n(m9e,"STRONG",{});var z_t=s(e1e);zmr=r(z_t,"ctrl"),z_t.forEach(t),Qmr=r(m9e," \u2014 "),EX=n(m9e,"A",{href:!0});var Q_t=s(EX);Wmr=r(Q_t,"TFCTRLForSequenceClassification"),Q_t.forEach(t),Hmr=r(m9e," (CTRL model)"),m9e.forEach(t),Umr=i(Q),S6=n(Q,"LI",{});var g9e=s(S6);o1e=n(g9e,"STRONG",{});var W_t=s(o1e);Jmr=r(W_t,"deberta"),W_t.forEach(t),Ymr=r(g9e," \u2014 "),CX=n(g9e,"A",{href:!0});var H_t=s(CX);Kmr=r(H_t,"TFDebertaForSequenceClassification"),H_t.forEach(t),Zmr=r(g9e," (DeBERTa model)"),g9e.forEach(t),egr=i(Q),R6=n(Q,"LI",{});var h9e=s(R6);r1e=n(h9e,"STRONG",{});var U_t=s(r1e);ogr=r(U_t,"deberta-v2"),U_t.forEach(t),rgr=r(h9e," \u2014 "),wX=n(h9e,"A",{href:!0});var J_t=s(wX);tgr=r(J_t,"TFDebertaV2ForSequenceClassification"),J_t.forEach(t),agr=r(h9e," (DeBERTa-v2 model)"),h9e.forEach(t),ngr=i(Q),B6=n(Q,"LI",{});var p9e=s(B6);t1e=n(p9e,"STRONG",{});var Y_t=s(t1e);sgr=r(Y_t,"distilbert"),Y_t.forEach(t),lgr=r(p9e," \u2014 "),AX=n(p9e,"A",{href:!0});var K_t=s(AX);igr=r(K_t,"TFDistilBertForSequenceClassification"),K_t.forEach(t),dgr=r(p9e," (DistilBERT model)"),p9e.forEach(t),cgr=i(Q),P6=n(Q,"LI",{});var _9e=s(P6);a1e=n(_9e,"STRONG",{});var Z_t=s(a1e);fgr=r(Z_t,"electra"),Z_t.forEach(t),mgr=r(_9e," \u2014 "),yX=n(_9e,"A",{href:!0});var eut=s(yX);ggr=r(eut,"TFElectraForSequenceClassification"),eut.forEach(t),hgr=r(_9e," (ELECTRA model)"),_9e.forEach(t),pgr=i(Q),$6=n(Q,"LI",{});var u9e=s($6);n1e=n(u9e,"STRONG",{});var out=s(n1e);_gr=r(out,"flaubert"),out.forEach(t),ugr=r(u9e," \u2014 "),LX=n(u9e,"A",{href:!0});var rut=s(LX);bgr=r(rut,"TFFlaubertForSequenceClassification"),rut.forEach(t),Fgr=r(u9e," (FlauBERT model)"),u9e.forEach(t),vgr=i(Q),I6=n(Q,"LI",{});var b9e=s(I6);s1e=n(b9e,"STRONG",{});var tut=s(s1e);Tgr=r(tut,"funnel"),tut.forEach(t),Mgr=r(b9e," \u2014 "),xX=n(b9e,"A",{href:!0});var aut=s(xX);Egr=r(aut,"TFFunnelForSequenceClassification"),aut.forEach(t),Cgr=r(b9e," (Funnel Transformer model)"),b9e.forEach(t),wgr=i(Q),q6=n(Q,"LI",{});var F9e=s(q6);l1e=n(F9e,"STRONG",{});var nut=s(l1e);Agr=r(nut,"gpt2"),nut.forEach(t),ygr=r(F9e," \u2014 "),kX=n(F9e,"A",{href:!0});var sut=s(kX);Lgr=r(sut,"TFGPT2ForSequenceClassification"),sut.forEach(t),xgr=r(F9e," (OpenAI GPT-2 model)"),F9e.forEach(t),kgr=i(Q),N6=n(Q,"LI",{});var v9e=s(N6);i1e=n(v9e,"STRONG",{});var lut=s(i1e);Sgr=r(lut,"gptj"),lut.forEach(t),Rgr=r(v9e," \u2014 "),SX=n(v9e,"A",{href:!0});var iut=s(SX);Bgr=r(iut,"TFGPTJForSequenceClassification"),iut.forEach(t),Pgr=r(v9e," (GPT-J model)"),v9e.forEach(t),$gr=i(Q),j6=n(Q,"LI",{});var T9e=s(j6);d1e=n(T9e,"STRONG",{});var dut=s(d1e);Igr=r(dut,"layoutlm"),dut.forEach(t),qgr=r(T9e," \u2014 "),RX=n(T9e,"A",{href:!0});var cut=s(RX);Ngr=r(cut,"TFLayoutLMForSequenceClassification"),cut.forEach(t),jgr=r(T9e," (LayoutLM model)"),T9e.forEach(t),Dgr=i(Q),D6=n(Q,"LI",{});var M9e=s(D6);c1e=n(M9e,"STRONG",{});var fut=s(c1e);Ggr=r(fut,"longformer"),fut.forEach(t),Ogr=r(M9e," \u2014 "),BX=n(M9e,"A",{href:!0});var mut=s(BX);Vgr=r(mut,"TFLongformerForSequenceClassification"),mut.forEach(t),Xgr=r(M9e," (Longformer model)"),M9e.forEach(t),zgr=i(Q),G6=n(Q,"LI",{});var E9e=s(G6);f1e=n(E9e,"STRONG",{});var gut=s(f1e);Qgr=r(gut,"mobilebert"),gut.forEach(t),Wgr=r(E9e," \u2014 "),PX=n(E9e,"A",{href:!0});var hut=s(PX);Hgr=r(hut,"TFMobileBertForSequenceClassification"),hut.forEach(t),Ugr=r(E9e," (MobileBERT model)"),E9e.forEach(t),Jgr=i(Q),O6=n(Q,"LI",{});var C9e=s(O6);m1e=n(C9e,"STRONG",{});var put=s(m1e);Ygr=r(put,"mpnet"),put.forEach(t),Kgr=r(C9e," \u2014 "),$X=n(C9e,"A",{href:!0});var _ut=s($X);Zgr=r(_ut,"TFMPNetForSequenceClassification"),_ut.forEach(t),ehr=r(C9e," (MPNet model)"),C9e.forEach(t),ohr=i(Q),V6=n(Q,"LI",{});var w9e=s(V6);g1e=n(w9e,"STRONG",{});var uut=s(g1e);rhr=r(uut,"openai-gpt"),uut.forEach(t),thr=r(w9e," \u2014 "),IX=n(w9e,"A",{href:!0});var but=s(IX);ahr=r(but,"TFOpenAIGPTForSequenceClassification"),but.forEach(t),nhr=r(w9e," (OpenAI GPT model)"),w9e.forEach(t),shr=i(Q),X6=n(Q,"LI",{});var A9e=s(X6);h1e=n(A9e,"STRONG",{});var Fut=s(h1e);lhr=r(Fut,"rembert"),Fut.forEach(t),ihr=r(A9e," \u2014 "),qX=n(A9e,"A",{href:!0});var vut=s(qX);dhr=r(vut,"TFRemBertForSequenceClassification"),vut.forEach(t),chr=r(A9e," (RemBERT model)"),A9e.forEach(t),fhr=i(Q),z6=n(Q,"LI",{});var y9e=s(z6);p1e=n(y9e,"STRONG",{});var Tut=s(p1e);mhr=r(Tut,"roberta"),Tut.forEach(t),ghr=r(y9e," \u2014 "),NX=n(y9e,"A",{href:!0});var Mut=s(NX);hhr=r(Mut,"TFRobertaForSequenceClassification"),Mut.forEach(t),phr=r(y9e," (RoBERTa model)"),y9e.forEach(t),_hr=i(Q),Q6=n(Q,"LI",{});var L9e=s(Q6);_1e=n(L9e,"STRONG",{});var Eut=s(_1e);uhr=r(Eut,"roformer"),Eut.forEach(t),bhr=r(L9e," \u2014 "),jX=n(L9e,"A",{href:!0});var Cut=s(jX);Fhr=r(Cut,"TFRoFormerForSequenceClassification"),Cut.forEach(t),vhr=r(L9e," (RoFormer model)"),L9e.forEach(t),Thr=i(Q),W6=n(Q,"LI",{});var x9e=s(W6);u1e=n(x9e,"STRONG",{});var wut=s(u1e);Mhr=r(wut,"tapas"),wut.forEach(t),Ehr=r(x9e," \u2014 "),DX=n(x9e,"A",{href:!0});var Aut=s(DX);Chr=r(Aut,"TFTapasForSequenceClassification"),Aut.forEach(t),whr=r(x9e," (TAPAS model)"),x9e.forEach(t),Ahr=i(Q),H6=n(Q,"LI",{});var k9e=s(H6);b1e=n(k9e,"STRONG",{});var yut=s(b1e);yhr=r(yut,"transfo-xl"),yut.forEach(t),Lhr=r(k9e," \u2014 "),GX=n(k9e,"A",{href:!0});var Lut=s(GX);xhr=r(Lut,"TFTransfoXLForSequenceClassification"),Lut.forEach(t),khr=r(k9e," (Transformer-XL model)"),k9e.forEach(t),Shr=i(Q),U6=n(Q,"LI",{});var S9e=s(U6);F1e=n(S9e,"STRONG",{});var xut=s(F1e);Rhr=r(xut,"xlm"),xut.forEach(t),Bhr=r(S9e," \u2014 "),OX=n(S9e,"A",{href:!0});var kut=s(OX);Phr=r(kut,"TFXLMForSequenceClassification"),kut.forEach(t),$hr=r(S9e," (XLM model)"),S9e.forEach(t),Ihr=i(Q),J6=n(Q,"LI",{});var R9e=s(J6);v1e=n(R9e,"STRONG",{});var Sut=s(v1e);qhr=r(Sut,"xlm-roberta"),Sut.forEach(t),Nhr=r(R9e," \u2014 "),VX=n(R9e,"A",{href:!0});var Rut=s(VX);jhr=r(Rut,"TFXLMRobertaForSequenceClassification"),Rut.forEach(t),Dhr=r(R9e," (XLM-RoBERTa model)"),R9e.forEach(t),Ghr=i(Q),Y6=n(Q,"LI",{});var B9e=s(Y6);T1e=n(B9e,"STRONG",{});var But=s(T1e);Ohr=r(But,"xlnet"),But.forEach(t),Vhr=r(B9e," \u2014 "),XX=n(B9e,"A",{href:!0});var Put=s(XX);Xhr=r(Put,"TFXLNetForSequenceClassification"),Put.forEach(t),zhr=r(B9e," (XLNet model)"),B9e.forEach(t),Q.forEach(t),Qhr=i(Ta),M1e=n(Ta,"P",{});var $ut=s(M1e);Whr=r($ut,"Examples:"),$ut.forEach(t),Hhr=i(Ta),m(V0.$$.fragment,Ta),Ta.forEach(t),Yl.forEach(t),KRe=i(c),Pc=n(c,"H2",{class:!0});var d$e=s(Pc);K6=n(d$e,"A",{id:!0,class:!0,href:!0});var Iut=s(K6);E1e=n(Iut,"SPAN",{});var qut=s(E1e);m(X0.$$.fragment,qut),qut.forEach(t),Iut.forEach(t),Uhr=i(d$e),C1e=n(d$e,"SPAN",{});var Nut=s(C1e);Jhr=r(Nut,"TFAutoModelForMultipleChoice"),Nut.forEach(t),d$e.forEach(t),ZRe=i(c),Ar=n(c,"DIV",{class:!0});var Zl=s(Ar);m(z0.$$.fragment,Zl),Yhr=i(Zl),$c=n(Zl,"P",{});var oJ=s($c);Khr=r(oJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),zX=n(oJ,"A",{href:!0});var jut=s(zX);Zhr=r(jut,"from_pretrained()"),jut.forEach(t),epr=r(oJ," class method or the "),QX=n(oJ,"A",{href:!0});var Dut=s(QX);opr=r(Dut,"from_config()"),Dut.forEach(t),rpr=r(oJ,` class
method.`),oJ.forEach(t),tpr=i(Zl),Q0=n(Zl,"P",{});var c$e=s(Q0);apr=r(c$e,"This class cannot be instantiated directly using "),w1e=n(c$e,"CODE",{});var Gut=s(w1e);npr=r(Gut,"__init__()"),Gut.forEach(t),spr=r(c$e," (throws an error)."),c$e.forEach(t),lpr=i(Zl),vt=n(Zl,"DIV",{class:!0});var ei=s(vt);m(W0.$$.fragment,ei),ipr=i(ei),A1e=n(ei,"P",{});var Out=s(A1e);dpr=r(Out,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Out.forEach(t),cpr=i(ei),Ic=n(ei,"P",{});var rJ=s(Ic);fpr=r(rJ,`Note:
Loading a model from its configuration file does `),y1e=n(rJ,"STRONG",{});var Vut=s(y1e);mpr=r(Vut,"not"),Vut.forEach(t),gpr=r(rJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),WX=n(rJ,"A",{href:!0});var Xut=s(WX);hpr=r(Xut,"from_pretrained()"),Xut.forEach(t),ppr=r(rJ," to load the model weights."),rJ.forEach(t),_pr=i(ei),L1e=n(ei,"P",{});var zut=s(L1e);upr=r(zut,"Examples:"),zut.forEach(t),bpr=i(ei),m(H0.$$.fragment,ei),ei.forEach(t),Fpr=i(Zl),To=n(Zl,"DIV",{class:!0});var Ma=s(To);m(U0.$$.fragment,Ma),vpr=i(Ma),x1e=n(Ma,"P",{});var Qut=s(x1e);Tpr=r(Qut,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Qut.forEach(t),Mpr=i(Ma),En=n(Ma,"P",{});var JE=s(En);Epr=r(JE,"The model class to instantiate is selected based on the "),k1e=n(JE,"CODE",{});var Wut=s(k1e);Cpr=r(Wut,"model_type"),Wut.forEach(t),wpr=r(JE,` property of the config object (either
passed as an argument or loaded from `),S1e=n(JE,"CODE",{});var Hut=s(S1e);Apr=r(Hut,"pretrained_model_name_or_path"),Hut.forEach(t),ypr=r(JE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R1e=n(JE,"CODE",{});var Uut=s(R1e);Lpr=r(Uut,"pretrained_model_name_or_path"),Uut.forEach(t),xpr=r(JE,":"),JE.forEach(t),kpr=i(Ma),ae=n(Ma,"UL",{});var le=s(ae);Z6=n(le,"LI",{});var P9e=s(Z6);B1e=n(P9e,"STRONG",{});var Jut=s(B1e);Spr=r(Jut,"albert"),Jut.forEach(t),Rpr=r(P9e," \u2014 "),HX=n(P9e,"A",{href:!0});var Yut=s(HX);Bpr=r(Yut,"TFAlbertForMultipleChoice"),Yut.forEach(t),Ppr=r(P9e," (ALBERT model)"),P9e.forEach(t),$pr=i(le),eT=n(le,"LI",{});var $9e=s(eT);P1e=n($9e,"STRONG",{});var Kut=s(P1e);Ipr=r(Kut,"bert"),Kut.forEach(t),qpr=r($9e," \u2014 "),UX=n($9e,"A",{href:!0});var Zut=s(UX);Npr=r(Zut,"TFBertForMultipleChoice"),Zut.forEach(t),jpr=r($9e," (BERT model)"),$9e.forEach(t),Dpr=i(le),oT=n(le,"LI",{});var I9e=s(oT);$1e=n(I9e,"STRONG",{});var e1t=s($1e);Gpr=r(e1t,"camembert"),e1t.forEach(t),Opr=r(I9e," \u2014 "),JX=n(I9e,"A",{href:!0});var o1t=s(JX);Vpr=r(o1t,"TFCamembertForMultipleChoice"),o1t.forEach(t),Xpr=r(I9e," (CamemBERT model)"),I9e.forEach(t),zpr=i(le),rT=n(le,"LI",{});var q9e=s(rT);I1e=n(q9e,"STRONG",{});var r1t=s(I1e);Qpr=r(r1t,"convbert"),r1t.forEach(t),Wpr=r(q9e," \u2014 "),YX=n(q9e,"A",{href:!0});var t1t=s(YX);Hpr=r(t1t,"TFConvBertForMultipleChoice"),t1t.forEach(t),Upr=r(q9e," (ConvBERT model)"),q9e.forEach(t),Jpr=i(le),tT=n(le,"LI",{});var N9e=s(tT);q1e=n(N9e,"STRONG",{});var a1t=s(q1e);Ypr=r(a1t,"distilbert"),a1t.forEach(t),Kpr=r(N9e," \u2014 "),KX=n(N9e,"A",{href:!0});var n1t=s(KX);Zpr=r(n1t,"TFDistilBertForMultipleChoice"),n1t.forEach(t),e_r=r(N9e," (DistilBERT model)"),N9e.forEach(t),o_r=i(le),aT=n(le,"LI",{});var j9e=s(aT);N1e=n(j9e,"STRONG",{});var s1t=s(N1e);r_r=r(s1t,"electra"),s1t.forEach(t),t_r=r(j9e," \u2014 "),ZX=n(j9e,"A",{href:!0});var l1t=s(ZX);a_r=r(l1t,"TFElectraForMultipleChoice"),l1t.forEach(t),n_r=r(j9e," (ELECTRA model)"),j9e.forEach(t),s_r=i(le),nT=n(le,"LI",{});var D9e=s(nT);j1e=n(D9e,"STRONG",{});var i1t=s(j1e);l_r=r(i1t,"flaubert"),i1t.forEach(t),i_r=r(D9e," \u2014 "),ez=n(D9e,"A",{href:!0});var d1t=s(ez);d_r=r(d1t,"TFFlaubertForMultipleChoice"),d1t.forEach(t),c_r=r(D9e," (FlauBERT model)"),D9e.forEach(t),f_r=i(le),sT=n(le,"LI",{});var G9e=s(sT);D1e=n(G9e,"STRONG",{});var c1t=s(D1e);m_r=r(c1t,"funnel"),c1t.forEach(t),g_r=r(G9e," \u2014 "),oz=n(G9e,"A",{href:!0});var f1t=s(oz);h_r=r(f1t,"TFFunnelForMultipleChoice"),f1t.forEach(t),p_r=r(G9e," (Funnel Transformer model)"),G9e.forEach(t),__r=i(le),lT=n(le,"LI",{});var O9e=s(lT);G1e=n(O9e,"STRONG",{});var m1t=s(G1e);u_r=r(m1t,"longformer"),m1t.forEach(t),b_r=r(O9e," \u2014 "),rz=n(O9e,"A",{href:!0});var g1t=s(rz);F_r=r(g1t,"TFLongformerForMultipleChoice"),g1t.forEach(t),v_r=r(O9e," (Longformer model)"),O9e.forEach(t),T_r=i(le),iT=n(le,"LI",{});var V9e=s(iT);O1e=n(V9e,"STRONG",{});var h1t=s(O1e);M_r=r(h1t,"mobilebert"),h1t.forEach(t),E_r=r(V9e," \u2014 "),tz=n(V9e,"A",{href:!0});var p1t=s(tz);C_r=r(p1t,"TFMobileBertForMultipleChoice"),p1t.forEach(t),w_r=r(V9e," (MobileBERT model)"),V9e.forEach(t),A_r=i(le),dT=n(le,"LI",{});var X9e=s(dT);V1e=n(X9e,"STRONG",{});var _1t=s(V1e);y_r=r(_1t,"mpnet"),_1t.forEach(t),L_r=r(X9e," \u2014 "),az=n(X9e,"A",{href:!0});var u1t=s(az);x_r=r(u1t,"TFMPNetForMultipleChoice"),u1t.forEach(t),k_r=r(X9e," (MPNet model)"),X9e.forEach(t),S_r=i(le),cT=n(le,"LI",{});var z9e=s(cT);X1e=n(z9e,"STRONG",{});var b1t=s(X1e);R_r=r(b1t,"rembert"),b1t.forEach(t),B_r=r(z9e," \u2014 "),nz=n(z9e,"A",{href:!0});var F1t=s(nz);P_r=r(F1t,"TFRemBertForMultipleChoice"),F1t.forEach(t),$_r=r(z9e," (RemBERT model)"),z9e.forEach(t),I_r=i(le),fT=n(le,"LI",{});var Q9e=s(fT);z1e=n(Q9e,"STRONG",{});var v1t=s(z1e);q_r=r(v1t,"roberta"),v1t.forEach(t),N_r=r(Q9e," \u2014 "),sz=n(Q9e,"A",{href:!0});var T1t=s(sz);j_r=r(T1t,"TFRobertaForMultipleChoice"),T1t.forEach(t),D_r=r(Q9e," (RoBERTa model)"),Q9e.forEach(t),G_r=i(le),mT=n(le,"LI",{});var W9e=s(mT);Q1e=n(W9e,"STRONG",{});var M1t=s(Q1e);O_r=r(M1t,"roformer"),M1t.forEach(t),V_r=r(W9e," \u2014 "),lz=n(W9e,"A",{href:!0});var E1t=s(lz);X_r=r(E1t,"TFRoFormerForMultipleChoice"),E1t.forEach(t),z_r=r(W9e," (RoFormer model)"),W9e.forEach(t),Q_r=i(le),gT=n(le,"LI",{});var H9e=s(gT);W1e=n(H9e,"STRONG",{});var C1t=s(W1e);W_r=r(C1t,"xlm"),C1t.forEach(t),H_r=r(H9e," \u2014 "),iz=n(H9e,"A",{href:!0});var w1t=s(iz);U_r=r(w1t,"TFXLMForMultipleChoice"),w1t.forEach(t),J_r=r(H9e," (XLM model)"),H9e.forEach(t),Y_r=i(le),hT=n(le,"LI",{});var U9e=s(hT);H1e=n(U9e,"STRONG",{});var A1t=s(H1e);K_r=r(A1t,"xlm-roberta"),A1t.forEach(t),Z_r=r(U9e," \u2014 "),dz=n(U9e,"A",{href:!0});var y1t=s(dz);eur=r(y1t,"TFXLMRobertaForMultipleChoice"),y1t.forEach(t),our=r(U9e," (XLM-RoBERTa model)"),U9e.forEach(t),rur=i(le),pT=n(le,"LI",{});var J9e=s(pT);U1e=n(J9e,"STRONG",{});var L1t=s(U1e);tur=r(L1t,"xlnet"),L1t.forEach(t),aur=r(J9e," \u2014 "),cz=n(J9e,"A",{href:!0});var x1t=s(cz);nur=r(x1t,"TFXLNetForMultipleChoice"),x1t.forEach(t),sur=r(J9e," (XLNet model)"),J9e.forEach(t),le.forEach(t),lur=i(Ma),J1e=n(Ma,"P",{});var k1t=s(J1e);iur=r(k1t,"Examples:"),k1t.forEach(t),dur=i(Ma),m(J0.$$.fragment,Ma),Ma.forEach(t),Zl.forEach(t),eBe=i(c),qc=n(c,"H2",{class:!0});var f$e=s(qc);_T=n(f$e,"A",{id:!0,class:!0,href:!0});var S1t=s(_T);Y1e=n(S1t,"SPAN",{});var R1t=s(Y1e);m(Y0.$$.fragment,R1t),R1t.forEach(t),S1t.forEach(t),cur=i(f$e),K1e=n(f$e,"SPAN",{});var B1t=s(K1e);fur=r(B1t,"TFAutoModelForTableQuestionAnswering"),B1t.forEach(t),f$e.forEach(t),oBe=i(c),yr=n(c,"DIV",{class:!0});var oi=s(yr);m(K0.$$.fragment,oi),mur=i(oi),Nc=n(oi,"P",{});var tJ=s(Nc);gur=r(tJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),fz=n(tJ,"A",{href:!0});var P1t=s(fz);hur=r(P1t,"from_pretrained()"),P1t.forEach(t),pur=r(tJ," class method or the "),mz=n(tJ,"A",{href:!0});var $1t=s(mz);_ur=r($1t,"from_config()"),$1t.forEach(t),uur=r(tJ,` class
method.`),tJ.forEach(t),bur=i(oi),Z0=n(oi,"P",{});var m$e=s(Z0);Fur=r(m$e,"This class cannot be instantiated directly using "),Z1e=n(m$e,"CODE",{});var I1t=s(Z1e);vur=r(I1t,"__init__()"),I1t.forEach(t),Tur=r(m$e," (throws an error)."),m$e.forEach(t),Mur=i(oi),Tt=n(oi,"DIV",{class:!0});var ri=s(Tt);m(ey.$$.fragment,ri),Eur=i(ri),e4e=n(ri,"P",{});var q1t=s(e4e);Cur=r(q1t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),q1t.forEach(t),wur=i(ri),jc=n(ri,"P",{});var aJ=s(jc);Aur=r(aJ,`Note:
Loading a model from its configuration file does `),o4e=n(aJ,"STRONG",{});var N1t=s(o4e);yur=r(N1t,"not"),N1t.forEach(t),Lur=r(aJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),gz=n(aJ,"A",{href:!0});var j1t=s(gz);xur=r(j1t,"from_pretrained()"),j1t.forEach(t),kur=r(aJ," to load the model weights."),aJ.forEach(t),Sur=i(ri),r4e=n(ri,"P",{});var D1t=s(r4e);Rur=r(D1t,"Examples:"),D1t.forEach(t),Bur=i(ri),m(oy.$$.fragment,ri),ri.forEach(t),Pur=i(oi),Mo=n(oi,"DIV",{class:!0});var Ea=s(Mo);m(ry.$$.fragment,Ea),$ur=i(Ea),t4e=n(Ea,"P",{});var G1t=s(t4e);Iur=r(G1t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),G1t.forEach(t),qur=i(Ea),Cn=n(Ea,"P",{});var YE=s(Cn);Nur=r(YE,"The model class to instantiate is selected based on the "),a4e=n(YE,"CODE",{});var O1t=s(a4e);jur=r(O1t,"model_type"),O1t.forEach(t),Dur=r(YE,` property of the config object (either
passed as an argument or loaded from `),n4e=n(YE,"CODE",{});var V1t=s(n4e);Gur=r(V1t,"pretrained_model_name_or_path"),V1t.forEach(t),Our=r(YE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s4e=n(YE,"CODE",{});var X1t=s(s4e);Vur=r(X1t,"pretrained_model_name_or_path"),X1t.forEach(t),Xur=r(YE,":"),YE.forEach(t),zur=i(Ea),l4e=n(Ea,"UL",{});var z1t=s(l4e);uT=n(z1t,"LI",{});var Y9e=s(uT);i4e=n(Y9e,"STRONG",{});var Q1t=s(i4e);Qur=r(Q1t,"tapas"),Q1t.forEach(t),Wur=r(Y9e," \u2014 "),hz=n(Y9e,"A",{href:!0});var W1t=s(hz);Hur=r(W1t,"TFTapasForQuestionAnswering"),W1t.forEach(t),Uur=r(Y9e," (TAPAS model)"),Y9e.forEach(t),z1t.forEach(t),Jur=i(Ea),d4e=n(Ea,"P",{});var H1t=s(d4e);Yur=r(H1t,"Examples:"),H1t.forEach(t),Kur=i(Ea),m(ty.$$.fragment,Ea),Ea.forEach(t),oi.forEach(t),rBe=i(c),Dc=n(c,"H2",{class:!0});var g$e=s(Dc);bT=n(g$e,"A",{id:!0,class:!0,href:!0});var U1t=s(bT);c4e=n(U1t,"SPAN",{});var J1t=s(c4e);m(ay.$$.fragment,J1t),J1t.forEach(t),U1t.forEach(t),Zur=i(g$e),f4e=n(g$e,"SPAN",{});var Y1t=s(f4e);e1r=r(Y1t,"TFAutoModelForTokenClassification"),Y1t.forEach(t),g$e.forEach(t),tBe=i(c),Lr=n(c,"DIV",{class:!0});var ti=s(Lr);m(ny.$$.fragment,ti),o1r=i(ti),Gc=n(ti,"P",{});var nJ=s(Gc);r1r=r(nJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),pz=n(nJ,"A",{href:!0});var K1t=s(pz);t1r=r(K1t,"from_pretrained()"),K1t.forEach(t),a1r=r(nJ," class method or the "),_z=n(nJ,"A",{href:!0});var Z1t=s(_z);n1r=r(Z1t,"from_config()"),Z1t.forEach(t),s1r=r(nJ,` class
method.`),nJ.forEach(t),l1r=i(ti),sy=n(ti,"P",{});var h$e=s(sy);i1r=r(h$e,"This class cannot be instantiated directly using "),m4e=n(h$e,"CODE",{});var e4t=s(m4e);d1r=r(e4t,"__init__()"),e4t.forEach(t),c1r=r(h$e," (throws an error)."),h$e.forEach(t),f1r=i(ti),Mt=n(ti,"DIV",{class:!0});var ai=s(Mt);m(ly.$$.fragment,ai),m1r=i(ai),g4e=n(ai,"P",{});var o4t=s(g4e);g1r=r(o4t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),o4t.forEach(t),h1r=i(ai),Oc=n(ai,"P",{});var sJ=s(Oc);p1r=r(sJ,`Note:
Loading a model from its configuration file does `),h4e=n(sJ,"STRONG",{});var r4t=s(h4e);_1r=r(r4t,"not"),r4t.forEach(t),u1r=r(sJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),uz=n(sJ,"A",{href:!0});var t4t=s(uz);b1r=r(t4t,"from_pretrained()"),t4t.forEach(t),F1r=r(sJ," to load the model weights."),sJ.forEach(t),v1r=i(ai),p4e=n(ai,"P",{});var a4t=s(p4e);T1r=r(a4t,"Examples:"),a4t.forEach(t),M1r=i(ai),m(iy.$$.fragment,ai),ai.forEach(t),E1r=i(ti),Eo=n(ti,"DIV",{class:!0});var Ca=s(Eo);m(dy.$$.fragment,Ca),C1r=i(Ca),_4e=n(Ca,"P",{});var n4t=s(_4e);w1r=r(n4t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),n4t.forEach(t),A1r=i(Ca),wn=n(Ca,"P",{});var KE=s(wn);y1r=r(KE,"The model class to instantiate is selected based on the "),u4e=n(KE,"CODE",{});var s4t=s(u4e);L1r=r(s4t,"model_type"),s4t.forEach(t),x1r=r(KE,` property of the config object (either
passed as an argument or loaded from `),b4e=n(KE,"CODE",{});var l4t=s(b4e);k1r=r(l4t,"pretrained_model_name_or_path"),l4t.forEach(t),S1r=r(KE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F4e=n(KE,"CODE",{});var i4t=s(F4e);R1r=r(i4t,"pretrained_model_name_or_path"),i4t.forEach(t),B1r=r(KE,":"),KE.forEach(t),P1r=i(Ca),Y=n(Ca,"UL",{});var oe=s(Y);FT=n(oe,"LI",{});var K9e=s(FT);v4e=n(K9e,"STRONG",{});var d4t=s(v4e);$1r=r(d4t,"albert"),d4t.forEach(t),I1r=r(K9e," \u2014 "),bz=n(K9e,"A",{href:!0});var c4t=s(bz);q1r=r(c4t,"TFAlbertForTokenClassification"),c4t.forEach(t),N1r=r(K9e," (ALBERT model)"),K9e.forEach(t),j1r=i(oe),vT=n(oe,"LI",{});var Z9e=s(vT);T4e=n(Z9e,"STRONG",{});var f4t=s(T4e);D1r=r(f4t,"bert"),f4t.forEach(t),G1r=r(Z9e," \u2014 "),Fz=n(Z9e,"A",{href:!0});var m4t=s(Fz);O1r=r(m4t,"TFBertForTokenClassification"),m4t.forEach(t),V1r=r(Z9e," (BERT model)"),Z9e.forEach(t),X1r=i(oe),TT=n(oe,"LI",{});var exe=s(TT);M4e=n(exe,"STRONG",{});var g4t=s(M4e);z1r=r(g4t,"camembert"),g4t.forEach(t),Q1r=r(exe," \u2014 "),vz=n(exe,"A",{href:!0});var h4t=s(vz);W1r=r(h4t,"TFCamembertForTokenClassification"),h4t.forEach(t),H1r=r(exe," (CamemBERT model)"),exe.forEach(t),U1r=i(oe),MT=n(oe,"LI",{});var oxe=s(MT);E4e=n(oxe,"STRONG",{});var p4t=s(E4e);J1r=r(p4t,"convbert"),p4t.forEach(t),Y1r=r(oxe," \u2014 "),Tz=n(oxe,"A",{href:!0});var _4t=s(Tz);K1r=r(_4t,"TFConvBertForTokenClassification"),_4t.forEach(t),Z1r=r(oxe," (ConvBERT model)"),oxe.forEach(t),e4r=i(oe),ET=n(oe,"LI",{});var rxe=s(ET);C4e=n(rxe,"STRONG",{});var u4t=s(C4e);o4r=r(u4t,"deberta"),u4t.forEach(t),r4r=r(rxe," \u2014 "),Mz=n(rxe,"A",{href:!0});var b4t=s(Mz);t4r=r(b4t,"TFDebertaForTokenClassification"),b4t.forEach(t),a4r=r(rxe," (DeBERTa model)"),rxe.forEach(t),n4r=i(oe),CT=n(oe,"LI",{});var txe=s(CT);w4e=n(txe,"STRONG",{});var F4t=s(w4e);s4r=r(F4t,"deberta-v2"),F4t.forEach(t),l4r=r(txe," \u2014 "),Ez=n(txe,"A",{href:!0});var v4t=s(Ez);i4r=r(v4t,"TFDebertaV2ForTokenClassification"),v4t.forEach(t),d4r=r(txe," (DeBERTa-v2 model)"),txe.forEach(t),c4r=i(oe),wT=n(oe,"LI",{});var axe=s(wT);A4e=n(axe,"STRONG",{});var T4t=s(A4e);f4r=r(T4t,"distilbert"),T4t.forEach(t),m4r=r(axe," \u2014 "),Cz=n(axe,"A",{href:!0});var M4t=s(Cz);g4r=r(M4t,"TFDistilBertForTokenClassification"),M4t.forEach(t),h4r=r(axe," (DistilBERT model)"),axe.forEach(t),p4r=i(oe),AT=n(oe,"LI",{});var nxe=s(AT);y4e=n(nxe,"STRONG",{});var E4t=s(y4e);_4r=r(E4t,"electra"),E4t.forEach(t),u4r=r(nxe," \u2014 "),wz=n(nxe,"A",{href:!0});var C4t=s(wz);b4r=r(C4t,"TFElectraForTokenClassification"),C4t.forEach(t),F4r=r(nxe," (ELECTRA model)"),nxe.forEach(t),v4r=i(oe),yT=n(oe,"LI",{});var sxe=s(yT);L4e=n(sxe,"STRONG",{});var w4t=s(L4e);T4r=r(w4t,"flaubert"),w4t.forEach(t),M4r=r(sxe," \u2014 "),Az=n(sxe,"A",{href:!0});var A4t=s(Az);E4r=r(A4t,"TFFlaubertForTokenClassification"),A4t.forEach(t),C4r=r(sxe," (FlauBERT model)"),sxe.forEach(t),w4r=i(oe),LT=n(oe,"LI",{});var lxe=s(LT);x4e=n(lxe,"STRONG",{});var y4t=s(x4e);A4r=r(y4t,"funnel"),y4t.forEach(t),y4r=r(lxe," \u2014 "),yz=n(lxe,"A",{href:!0});var L4t=s(yz);L4r=r(L4t,"TFFunnelForTokenClassification"),L4t.forEach(t),x4r=r(lxe," (Funnel Transformer model)"),lxe.forEach(t),k4r=i(oe),xT=n(oe,"LI",{});var ixe=s(xT);k4e=n(ixe,"STRONG",{});var x4t=s(k4e);S4r=r(x4t,"layoutlm"),x4t.forEach(t),R4r=r(ixe," \u2014 "),Lz=n(ixe,"A",{href:!0});var k4t=s(Lz);B4r=r(k4t,"TFLayoutLMForTokenClassification"),k4t.forEach(t),P4r=r(ixe," (LayoutLM model)"),ixe.forEach(t),$4r=i(oe),kT=n(oe,"LI",{});var dxe=s(kT);S4e=n(dxe,"STRONG",{});var S4t=s(S4e);I4r=r(S4t,"longformer"),S4t.forEach(t),q4r=r(dxe," \u2014 "),xz=n(dxe,"A",{href:!0});var R4t=s(xz);N4r=r(R4t,"TFLongformerForTokenClassification"),R4t.forEach(t),j4r=r(dxe," (Longformer model)"),dxe.forEach(t),D4r=i(oe),ST=n(oe,"LI",{});var cxe=s(ST);R4e=n(cxe,"STRONG",{});var B4t=s(R4e);G4r=r(B4t,"mobilebert"),B4t.forEach(t),O4r=r(cxe," \u2014 "),kz=n(cxe,"A",{href:!0});var P4t=s(kz);V4r=r(P4t,"TFMobileBertForTokenClassification"),P4t.forEach(t),X4r=r(cxe," (MobileBERT model)"),cxe.forEach(t),z4r=i(oe),RT=n(oe,"LI",{});var fxe=s(RT);B4e=n(fxe,"STRONG",{});var $4t=s(B4e);Q4r=r($4t,"mpnet"),$4t.forEach(t),W4r=r(fxe," \u2014 "),Sz=n(fxe,"A",{href:!0});var I4t=s(Sz);H4r=r(I4t,"TFMPNetForTokenClassification"),I4t.forEach(t),U4r=r(fxe," (MPNet model)"),fxe.forEach(t),J4r=i(oe),BT=n(oe,"LI",{});var mxe=s(BT);P4e=n(mxe,"STRONG",{});var q4t=s(P4e);Y4r=r(q4t,"rembert"),q4t.forEach(t),K4r=r(mxe," \u2014 "),Rz=n(mxe,"A",{href:!0});var N4t=s(Rz);Z4r=r(N4t,"TFRemBertForTokenClassification"),N4t.forEach(t),ebr=r(mxe," (RemBERT model)"),mxe.forEach(t),obr=i(oe),PT=n(oe,"LI",{});var gxe=s(PT);$4e=n(gxe,"STRONG",{});var j4t=s($4e);rbr=r(j4t,"roberta"),j4t.forEach(t),tbr=r(gxe," \u2014 "),Bz=n(gxe,"A",{href:!0});var D4t=s(Bz);abr=r(D4t,"TFRobertaForTokenClassification"),D4t.forEach(t),nbr=r(gxe," (RoBERTa model)"),gxe.forEach(t),sbr=i(oe),$T=n(oe,"LI",{});var hxe=s($T);I4e=n(hxe,"STRONG",{});var G4t=s(I4e);lbr=r(G4t,"roformer"),G4t.forEach(t),ibr=r(hxe," \u2014 "),Pz=n(hxe,"A",{href:!0});var O4t=s(Pz);dbr=r(O4t,"TFRoFormerForTokenClassification"),O4t.forEach(t),cbr=r(hxe," (RoFormer model)"),hxe.forEach(t),fbr=i(oe),IT=n(oe,"LI",{});var pxe=s(IT);q4e=n(pxe,"STRONG",{});var V4t=s(q4e);mbr=r(V4t,"xlm"),V4t.forEach(t),gbr=r(pxe," \u2014 "),$z=n(pxe,"A",{href:!0});var X4t=s($z);hbr=r(X4t,"TFXLMForTokenClassification"),X4t.forEach(t),pbr=r(pxe," (XLM model)"),pxe.forEach(t),_br=i(oe),qT=n(oe,"LI",{});var _xe=s(qT);N4e=n(_xe,"STRONG",{});var z4t=s(N4e);ubr=r(z4t,"xlm-roberta"),z4t.forEach(t),bbr=r(_xe," \u2014 "),Iz=n(_xe,"A",{href:!0});var Q4t=s(Iz);Fbr=r(Q4t,"TFXLMRobertaForTokenClassification"),Q4t.forEach(t),vbr=r(_xe," (XLM-RoBERTa model)"),_xe.forEach(t),Tbr=i(oe),NT=n(oe,"LI",{});var uxe=s(NT);j4e=n(uxe,"STRONG",{});var W4t=s(j4e);Mbr=r(W4t,"xlnet"),W4t.forEach(t),Ebr=r(uxe," \u2014 "),qz=n(uxe,"A",{href:!0});var H4t=s(qz);Cbr=r(H4t,"TFXLNetForTokenClassification"),H4t.forEach(t),wbr=r(uxe," (XLNet model)"),uxe.forEach(t),oe.forEach(t),Abr=i(Ca),D4e=n(Ca,"P",{});var U4t=s(D4e);ybr=r(U4t,"Examples:"),U4t.forEach(t),Lbr=i(Ca),m(cy.$$.fragment,Ca),Ca.forEach(t),ti.forEach(t),aBe=i(c),Vc=n(c,"H2",{class:!0});var p$e=s(Vc);jT=n(p$e,"A",{id:!0,class:!0,href:!0});var J4t=s(jT);G4e=n(J4t,"SPAN",{});var Y4t=s(G4e);m(fy.$$.fragment,Y4t),Y4t.forEach(t),J4t.forEach(t),xbr=i(p$e),O4e=n(p$e,"SPAN",{});var K4t=s(O4e);kbr=r(K4t,"TFAutoModelForQuestionAnswering"),K4t.forEach(t),p$e.forEach(t),nBe=i(c),xr=n(c,"DIV",{class:!0});var ni=s(xr);m(my.$$.fragment,ni),Sbr=i(ni),Xc=n(ni,"P",{});var lJ=s(Xc);Rbr=r(lJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Nz=n(lJ,"A",{href:!0});var Z4t=s(Nz);Bbr=r(Z4t,"from_pretrained()"),Z4t.forEach(t),Pbr=r(lJ," class method or the "),jz=n(lJ,"A",{href:!0});var ebt=s(jz);$br=r(ebt,"from_config()"),ebt.forEach(t),Ibr=r(lJ,` class
method.`),lJ.forEach(t),qbr=i(ni),gy=n(ni,"P",{});var _$e=s(gy);Nbr=r(_$e,"This class cannot be instantiated directly using "),V4e=n(_$e,"CODE",{});var obt=s(V4e);jbr=r(obt,"__init__()"),obt.forEach(t),Dbr=r(_$e," (throws an error)."),_$e.forEach(t),Gbr=i(ni),Et=n(ni,"DIV",{class:!0});var si=s(Et);m(hy.$$.fragment,si),Obr=i(si),X4e=n(si,"P",{});var rbt=s(X4e);Vbr=r(rbt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),rbt.forEach(t),Xbr=i(si),zc=n(si,"P",{});var iJ=s(zc);zbr=r(iJ,`Note:
Loading a model from its configuration file does `),z4e=n(iJ,"STRONG",{});var tbt=s(z4e);Qbr=r(tbt,"not"),tbt.forEach(t),Wbr=r(iJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Dz=n(iJ,"A",{href:!0});var abt=s(Dz);Hbr=r(abt,"from_pretrained()"),abt.forEach(t),Ubr=r(iJ," to load the model weights."),iJ.forEach(t),Jbr=i(si),Q4e=n(si,"P",{});var nbt=s(Q4e);Ybr=r(nbt,"Examples:"),nbt.forEach(t),Kbr=i(si),m(py.$$.fragment,si),si.forEach(t),Zbr=i(ni),Co=n(ni,"DIV",{class:!0});var wa=s(Co);m(_y.$$.fragment,wa),e3r=i(wa),W4e=n(wa,"P",{});var sbt=s(W4e);o3r=r(sbt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),sbt.forEach(t),r3r=i(wa),An=n(wa,"P",{});var ZE=s(An);t3r=r(ZE,"The model class to instantiate is selected based on the "),H4e=n(ZE,"CODE",{});var lbt=s(H4e);a3r=r(lbt,"model_type"),lbt.forEach(t),n3r=r(ZE,` property of the config object (either
passed as an argument or loaded from `),U4e=n(ZE,"CODE",{});var ibt=s(U4e);s3r=r(ibt,"pretrained_model_name_or_path"),ibt.forEach(t),l3r=r(ZE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J4e=n(ZE,"CODE",{});var dbt=s(J4e);i3r=r(dbt,"pretrained_model_name_or_path"),dbt.forEach(t),d3r=r(ZE,":"),ZE.forEach(t),c3r=i(wa),K=n(wa,"UL",{});var re=s(K);DT=n(re,"LI",{});var bxe=s(DT);Y4e=n(bxe,"STRONG",{});var cbt=s(Y4e);f3r=r(cbt,"albert"),cbt.forEach(t),m3r=r(bxe," \u2014 "),Gz=n(bxe,"A",{href:!0});var fbt=s(Gz);g3r=r(fbt,"TFAlbertForQuestionAnswering"),fbt.forEach(t),h3r=r(bxe," (ALBERT model)"),bxe.forEach(t),p3r=i(re),GT=n(re,"LI",{});var Fxe=s(GT);K4e=n(Fxe,"STRONG",{});var mbt=s(K4e);_3r=r(mbt,"bert"),mbt.forEach(t),u3r=r(Fxe," \u2014 "),Oz=n(Fxe,"A",{href:!0});var gbt=s(Oz);b3r=r(gbt,"TFBertForQuestionAnswering"),gbt.forEach(t),F3r=r(Fxe," (BERT model)"),Fxe.forEach(t),v3r=i(re),OT=n(re,"LI",{});var vxe=s(OT);Z4e=n(vxe,"STRONG",{});var hbt=s(Z4e);T3r=r(hbt,"camembert"),hbt.forEach(t),M3r=r(vxe," \u2014 "),Vz=n(vxe,"A",{href:!0});var pbt=s(Vz);E3r=r(pbt,"TFCamembertForQuestionAnswering"),pbt.forEach(t),C3r=r(vxe," (CamemBERT model)"),vxe.forEach(t),w3r=i(re),VT=n(re,"LI",{});var Txe=s(VT);ebe=n(Txe,"STRONG",{});var _bt=s(ebe);A3r=r(_bt,"convbert"),_bt.forEach(t),y3r=r(Txe," \u2014 "),Xz=n(Txe,"A",{href:!0});var ubt=s(Xz);L3r=r(ubt,"TFConvBertForQuestionAnswering"),ubt.forEach(t),x3r=r(Txe," (ConvBERT model)"),Txe.forEach(t),k3r=i(re),XT=n(re,"LI",{});var Mxe=s(XT);obe=n(Mxe,"STRONG",{});var bbt=s(obe);S3r=r(bbt,"deberta"),bbt.forEach(t),R3r=r(Mxe," \u2014 "),zz=n(Mxe,"A",{href:!0});var Fbt=s(zz);B3r=r(Fbt,"TFDebertaForQuestionAnswering"),Fbt.forEach(t),P3r=r(Mxe," (DeBERTa model)"),Mxe.forEach(t),$3r=i(re),zT=n(re,"LI",{});var Exe=s(zT);rbe=n(Exe,"STRONG",{});var vbt=s(rbe);I3r=r(vbt,"deberta-v2"),vbt.forEach(t),q3r=r(Exe," \u2014 "),Qz=n(Exe,"A",{href:!0});var Tbt=s(Qz);N3r=r(Tbt,"TFDebertaV2ForQuestionAnswering"),Tbt.forEach(t),j3r=r(Exe," (DeBERTa-v2 model)"),Exe.forEach(t),D3r=i(re),QT=n(re,"LI",{});var Cxe=s(QT);tbe=n(Cxe,"STRONG",{});var Mbt=s(tbe);G3r=r(Mbt,"distilbert"),Mbt.forEach(t),O3r=r(Cxe," \u2014 "),Wz=n(Cxe,"A",{href:!0});var Ebt=s(Wz);V3r=r(Ebt,"TFDistilBertForQuestionAnswering"),Ebt.forEach(t),X3r=r(Cxe," (DistilBERT model)"),Cxe.forEach(t),z3r=i(re),WT=n(re,"LI",{});var wxe=s(WT);abe=n(wxe,"STRONG",{});var Cbt=s(abe);Q3r=r(Cbt,"electra"),Cbt.forEach(t),W3r=r(wxe," \u2014 "),Hz=n(wxe,"A",{href:!0});var wbt=s(Hz);H3r=r(wbt,"TFElectraForQuestionAnswering"),wbt.forEach(t),U3r=r(wxe," (ELECTRA model)"),wxe.forEach(t),J3r=i(re),HT=n(re,"LI",{});var Axe=s(HT);nbe=n(Axe,"STRONG",{});var Abt=s(nbe);Y3r=r(Abt,"flaubert"),Abt.forEach(t),K3r=r(Axe," \u2014 "),Uz=n(Axe,"A",{href:!0});var ybt=s(Uz);Z3r=r(ybt,"TFFlaubertForQuestionAnsweringSimple"),ybt.forEach(t),e2r=r(Axe," (FlauBERT model)"),Axe.forEach(t),o2r=i(re),UT=n(re,"LI",{});var yxe=s(UT);sbe=n(yxe,"STRONG",{});var Lbt=s(sbe);r2r=r(Lbt,"funnel"),Lbt.forEach(t),t2r=r(yxe," \u2014 "),Jz=n(yxe,"A",{href:!0});var xbt=s(Jz);a2r=r(xbt,"TFFunnelForQuestionAnswering"),xbt.forEach(t),n2r=r(yxe," (Funnel Transformer model)"),yxe.forEach(t),s2r=i(re),JT=n(re,"LI",{});var Lxe=s(JT);lbe=n(Lxe,"STRONG",{});var kbt=s(lbe);l2r=r(kbt,"gptj"),kbt.forEach(t),i2r=r(Lxe," \u2014 "),Yz=n(Lxe,"A",{href:!0});var Sbt=s(Yz);d2r=r(Sbt,"TFGPTJForQuestionAnswering"),Sbt.forEach(t),c2r=r(Lxe," (GPT-J model)"),Lxe.forEach(t),f2r=i(re),YT=n(re,"LI",{});var xxe=s(YT);ibe=n(xxe,"STRONG",{});var Rbt=s(ibe);m2r=r(Rbt,"longformer"),Rbt.forEach(t),g2r=r(xxe," \u2014 "),Kz=n(xxe,"A",{href:!0});var Bbt=s(Kz);h2r=r(Bbt,"TFLongformerForQuestionAnswering"),Bbt.forEach(t),p2r=r(xxe," (Longformer model)"),xxe.forEach(t),_2r=i(re),KT=n(re,"LI",{});var kxe=s(KT);dbe=n(kxe,"STRONG",{});var Pbt=s(dbe);u2r=r(Pbt,"mobilebert"),Pbt.forEach(t),b2r=r(kxe," \u2014 "),Zz=n(kxe,"A",{href:!0});var $bt=s(Zz);F2r=r($bt,"TFMobileBertForQuestionAnswering"),$bt.forEach(t),v2r=r(kxe," (MobileBERT model)"),kxe.forEach(t),T2r=i(re),ZT=n(re,"LI",{});var Sxe=s(ZT);cbe=n(Sxe,"STRONG",{});var Ibt=s(cbe);M2r=r(Ibt,"mpnet"),Ibt.forEach(t),E2r=r(Sxe," \u2014 "),eQ=n(Sxe,"A",{href:!0});var qbt=s(eQ);C2r=r(qbt,"TFMPNetForQuestionAnswering"),qbt.forEach(t),w2r=r(Sxe," (MPNet model)"),Sxe.forEach(t),A2r=i(re),e7=n(re,"LI",{});var Rxe=s(e7);fbe=n(Rxe,"STRONG",{});var Nbt=s(fbe);y2r=r(Nbt,"rembert"),Nbt.forEach(t),L2r=r(Rxe," \u2014 "),oQ=n(Rxe,"A",{href:!0});var jbt=s(oQ);x2r=r(jbt,"TFRemBertForQuestionAnswering"),jbt.forEach(t),k2r=r(Rxe," (RemBERT model)"),Rxe.forEach(t),S2r=i(re),o7=n(re,"LI",{});var Bxe=s(o7);mbe=n(Bxe,"STRONG",{});var Dbt=s(mbe);R2r=r(Dbt,"roberta"),Dbt.forEach(t),B2r=r(Bxe," \u2014 "),rQ=n(Bxe,"A",{href:!0});var Gbt=s(rQ);P2r=r(Gbt,"TFRobertaForQuestionAnswering"),Gbt.forEach(t),$2r=r(Bxe," (RoBERTa model)"),Bxe.forEach(t),I2r=i(re),r7=n(re,"LI",{});var Pxe=s(r7);gbe=n(Pxe,"STRONG",{});var Obt=s(gbe);q2r=r(Obt,"roformer"),Obt.forEach(t),N2r=r(Pxe," \u2014 "),tQ=n(Pxe,"A",{href:!0});var Vbt=s(tQ);j2r=r(Vbt,"TFRoFormerForQuestionAnswering"),Vbt.forEach(t),D2r=r(Pxe," (RoFormer model)"),Pxe.forEach(t),G2r=i(re),t7=n(re,"LI",{});var $xe=s(t7);hbe=n($xe,"STRONG",{});var Xbt=s(hbe);O2r=r(Xbt,"xlm"),Xbt.forEach(t),V2r=r($xe," \u2014 "),aQ=n($xe,"A",{href:!0});var zbt=s(aQ);X2r=r(zbt,"TFXLMForQuestionAnsweringSimple"),zbt.forEach(t),z2r=r($xe," (XLM model)"),$xe.forEach(t),Q2r=i(re),a7=n(re,"LI",{});var Ixe=s(a7);pbe=n(Ixe,"STRONG",{});var Qbt=s(pbe);W2r=r(Qbt,"xlm-roberta"),Qbt.forEach(t),H2r=r(Ixe," \u2014 "),nQ=n(Ixe,"A",{href:!0});var Wbt=s(nQ);U2r=r(Wbt,"TFXLMRobertaForQuestionAnswering"),Wbt.forEach(t),J2r=r(Ixe," (XLM-RoBERTa model)"),Ixe.forEach(t),Y2r=i(re),n7=n(re,"LI",{});var qxe=s(n7);_be=n(qxe,"STRONG",{});var Hbt=s(_be);K2r=r(Hbt,"xlnet"),Hbt.forEach(t),Z2r=r(qxe," \u2014 "),sQ=n(qxe,"A",{href:!0});var Ubt=s(sQ);eFr=r(Ubt,"TFXLNetForQuestionAnsweringSimple"),Ubt.forEach(t),oFr=r(qxe," (XLNet model)"),qxe.forEach(t),re.forEach(t),rFr=i(wa),ube=n(wa,"P",{});var Jbt=s(ube);tFr=r(Jbt,"Examples:"),Jbt.forEach(t),aFr=i(wa),m(uy.$$.fragment,wa),wa.forEach(t),ni.forEach(t),sBe=i(c),Qc=n(c,"H2",{class:!0});var u$e=s(Qc);s7=n(u$e,"A",{id:!0,class:!0,href:!0});var Ybt=s(s7);bbe=n(Ybt,"SPAN",{});var Kbt=s(bbe);m(by.$$.fragment,Kbt),Kbt.forEach(t),Ybt.forEach(t),nFr=i(u$e),Fbe=n(u$e,"SPAN",{});var Zbt=s(Fbe);sFr=r(Zbt,"TFAutoModelForVision2Seq"),Zbt.forEach(t),u$e.forEach(t),lBe=i(c),kr=n(c,"DIV",{class:!0});var li=s(kr);m(Fy.$$.fragment,li),lFr=i(li),Wc=n(li,"P",{});var dJ=s(Wc);iFr=r(dJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),lQ=n(dJ,"A",{href:!0});var e3t=s(lQ);dFr=r(e3t,"from_pretrained()"),e3t.forEach(t),cFr=r(dJ," class method or the "),iQ=n(dJ,"A",{href:!0});var o3t=s(iQ);fFr=r(o3t,"from_config()"),o3t.forEach(t),mFr=r(dJ,` class
method.`),dJ.forEach(t),gFr=i(li),vy=n(li,"P",{});var b$e=s(vy);hFr=r(b$e,"This class cannot be instantiated directly using "),vbe=n(b$e,"CODE",{});var r3t=s(vbe);pFr=r(r3t,"__init__()"),r3t.forEach(t),_Fr=r(b$e," (throws an error)."),b$e.forEach(t),uFr=i(li),Ct=n(li,"DIV",{class:!0});var ii=s(Ct);m(Ty.$$.fragment,ii),bFr=i(ii),Tbe=n(ii,"P",{});var t3t=s(Tbe);FFr=r(t3t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),t3t.forEach(t),vFr=i(ii),Hc=n(ii,"P",{});var cJ=s(Hc);TFr=r(cJ,`Note:
Loading a model from its configuration file does `),Mbe=n(cJ,"STRONG",{});var a3t=s(Mbe);MFr=r(a3t,"not"),a3t.forEach(t),EFr=r(cJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),dQ=n(cJ,"A",{href:!0});var n3t=s(dQ);CFr=r(n3t,"from_pretrained()"),n3t.forEach(t),wFr=r(cJ," to load the model weights."),cJ.forEach(t),AFr=i(ii),Ebe=n(ii,"P",{});var s3t=s(Ebe);yFr=r(s3t,"Examples:"),s3t.forEach(t),LFr=i(ii),m(My.$$.fragment,ii),ii.forEach(t),xFr=i(li),wo=n(li,"DIV",{class:!0});var Aa=s(wo);m(Ey.$$.fragment,Aa),kFr=i(Aa),Cbe=n(Aa,"P",{});var l3t=s(Cbe);SFr=r(l3t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),l3t.forEach(t),RFr=i(Aa),yn=n(Aa,"P",{});var eC=s(yn);BFr=r(eC,"The model class to instantiate is selected based on the "),wbe=n(eC,"CODE",{});var i3t=s(wbe);PFr=r(i3t,"model_type"),i3t.forEach(t),$Fr=r(eC,` property of the config object (either
passed as an argument or loaded from `),Abe=n(eC,"CODE",{});var d3t=s(Abe);IFr=r(d3t,"pretrained_model_name_or_path"),d3t.forEach(t),qFr=r(eC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ybe=n(eC,"CODE",{});var c3t=s(ybe);NFr=r(c3t,"pretrained_model_name_or_path"),c3t.forEach(t),jFr=r(eC,":"),eC.forEach(t),DFr=i(Aa),Lbe=n(Aa,"UL",{});var f3t=s(Lbe);l7=n(f3t,"LI",{});var Nxe=s(l7);xbe=n(Nxe,"STRONG",{});var m3t=s(xbe);GFr=r(m3t,"vision-encoder-decoder"),m3t.forEach(t),OFr=r(Nxe," \u2014 "),cQ=n(Nxe,"A",{href:!0});var g3t=s(cQ);VFr=r(g3t,"TFVisionEncoderDecoderModel"),g3t.forEach(t),XFr=r(Nxe," (Vision Encoder decoder model)"),Nxe.forEach(t),f3t.forEach(t),zFr=i(Aa),kbe=n(Aa,"P",{});var h3t=s(kbe);QFr=r(h3t,"Examples:"),h3t.forEach(t),WFr=i(Aa),m(Cy.$$.fragment,Aa),Aa.forEach(t),li.forEach(t),iBe=i(c),Uc=n(c,"H2",{class:!0});var F$e=s(Uc);i7=n(F$e,"A",{id:!0,class:!0,href:!0});var p3t=s(i7);Sbe=n(p3t,"SPAN",{});var _3t=s(Sbe);m(wy.$$.fragment,_3t),_3t.forEach(t),p3t.forEach(t),HFr=i(F$e),Rbe=n(F$e,"SPAN",{});var u3t=s(Rbe);UFr=r(u3t,"TFAutoModelForSpeechSeq2Seq"),u3t.forEach(t),F$e.forEach(t),dBe=i(c),Sr=n(c,"DIV",{class:!0});var di=s(Sr);m(Ay.$$.fragment,di),JFr=i(di),Jc=n(di,"P",{});var fJ=s(Jc);YFr=r(fJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),fQ=n(fJ,"A",{href:!0});var b3t=s(fQ);KFr=r(b3t,"from_pretrained()"),b3t.forEach(t),ZFr=r(fJ," class method or the "),mQ=n(fJ,"A",{href:!0});var F3t=s(mQ);evr=r(F3t,"from_config()"),F3t.forEach(t),ovr=r(fJ,` class
method.`),fJ.forEach(t),rvr=i(di),yy=n(di,"P",{});var v$e=s(yy);tvr=r(v$e,"This class cannot be instantiated directly using "),Bbe=n(v$e,"CODE",{});var v3t=s(Bbe);avr=r(v3t,"__init__()"),v3t.forEach(t),nvr=r(v$e," (throws an error)."),v$e.forEach(t),svr=i(di),wt=n(di,"DIV",{class:!0});var ci=s(wt);m(Ly.$$.fragment,ci),lvr=i(ci),Pbe=n(ci,"P",{});var T3t=s(Pbe);ivr=r(T3t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),T3t.forEach(t),dvr=i(ci),Yc=n(ci,"P",{});var mJ=s(Yc);cvr=r(mJ,`Note:
Loading a model from its configuration file does `),$be=n(mJ,"STRONG",{});var M3t=s($be);fvr=r(M3t,"not"),M3t.forEach(t),mvr=r(mJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),gQ=n(mJ,"A",{href:!0});var E3t=s(gQ);gvr=r(E3t,"from_pretrained()"),E3t.forEach(t),hvr=r(mJ," to load the model weights."),mJ.forEach(t),pvr=i(ci),Ibe=n(ci,"P",{});var C3t=s(Ibe);_vr=r(C3t,"Examples:"),C3t.forEach(t),uvr=i(ci),m(xy.$$.fragment,ci),ci.forEach(t),bvr=i(di),Ao=n(di,"DIV",{class:!0});var ya=s(Ao);m(ky.$$.fragment,ya),Fvr=i(ya),qbe=n(ya,"P",{});var w3t=s(qbe);vvr=r(w3t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),w3t.forEach(t),Tvr=i(ya),Ln=n(ya,"P",{});var oC=s(Ln);Mvr=r(oC,"The model class to instantiate is selected based on the "),Nbe=n(oC,"CODE",{});var A3t=s(Nbe);Evr=r(A3t,"model_type"),A3t.forEach(t),Cvr=r(oC,` property of the config object (either
passed as an argument or loaded from `),jbe=n(oC,"CODE",{});var y3t=s(jbe);wvr=r(y3t,"pretrained_model_name_or_path"),y3t.forEach(t),Avr=r(oC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dbe=n(oC,"CODE",{});var L3t=s(Dbe);yvr=r(L3t,"pretrained_model_name_or_path"),L3t.forEach(t),Lvr=r(oC,":"),oC.forEach(t),xvr=i(ya),Gbe=n(ya,"UL",{});var x3t=s(Gbe);d7=n(x3t,"LI",{});var jxe=s(d7);Obe=n(jxe,"STRONG",{});var k3t=s(Obe);kvr=r(k3t,"speech_to_text"),k3t.forEach(t),Svr=r(jxe," \u2014 "),hQ=n(jxe,"A",{href:!0});var S3t=s(hQ);Rvr=r(S3t,"TFSpeech2TextForConditionalGeneration"),S3t.forEach(t),Bvr=r(jxe," (Speech2Text model)"),jxe.forEach(t),x3t.forEach(t),Pvr=i(ya),Vbe=n(ya,"P",{});var R3t=s(Vbe);$vr=r(R3t,"Examples:"),R3t.forEach(t),Ivr=i(ya),m(Sy.$$.fragment,ya),ya.forEach(t),di.forEach(t),cBe=i(c),Kc=n(c,"H2",{class:!0});var T$e=s(Kc);c7=n(T$e,"A",{id:!0,class:!0,href:!0});var B3t=s(c7);Xbe=n(B3t,"SPAN",{});var P3t=s(Xbe);m(Ry.$$.fragment,P3t),P3t.forEach(t),B3t.forEach(t),qvr=i(T$e),zbe=n(T$e,"SPAN",{});var $3t=s(zbe);Nvr=r($3t,"FlaxAutoModel"),$3t.forEach(t),T$e.forEach(t),fBe=i(c),Rr=n(c,"DIV",{class:!0});var fi=s(Rr);m(By.$$.fragment,fi),jvr=i(fi),Zc=n(fi,"P",{});var gJ=s(Zc);Dvr=r(gJ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),pQ=n(gJ,"A",{href:!0});var I3t=s(pQ);Gvr=r(I3t,"from_pretrained()"),I3t.forEach(t),Ovr=r(gJ," class method or the "),_Q=n(gJ,"A",{href:!0});var q3t=s(_Q);Vvr=r(q3t,"from_config()"),q3t.forEach(t),Xvr=r(gJ,` class
method.`),gJ.forEach(t),zvr=i(fi),Py=n(fi,"P",{});var M$e=s(Py);Qvr=r(M$e,"This class cannot be instantiated directly using "),Qbe=n(M$e,"CODE",{});var N3t=s(Qbe);Wvr=r(N3t,"__init__()"),N3t.forEach(t),Hvr=r(M$e," (throws an error)."),M$e.forEach(t),Uvr=i(fi),At=n(fi,"DIV",{class:!0});var mi=s(At);m($y.$$.fragment,mi),Jvr=i(mi),Wbe=n(mi,"P",{});var j3t=s(Wbe);Yvr=r(j3t,"Instantiates one of the base model classes of the library from a configuration."),j3t.forEach(t),Kvr=i(mi),ef=n(mi,"P",{});var hJ=s(ef);Zvr=r(hJ,`Note:
Loading a model from its configuration file does `),Hbe=n(hJ,"STRONG",{});var D3t=s(Hbe);e6r=r(D3t,"not"),D3t.forEach(t),o6r=r(hJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),uQ=n(hJ,"A",{href:!0});var G3t=s(uQ);r6r=r(G3t,"from_pretrained()"),G3t.forEach(t),t6r=r(hJ," to load the model weights."),hJ.forEach(t),a6r=i(mi),Ube=n(mi,"P",{});var O3t=s(Ube);n6r=r(O3t,"Examples:"),O3t.forEach(t),s6r=i(mi),m(Iy.$$.fragment,mi),mi.forEach(t),l6r=i(fi),yo=n(fi,"DIV",{class:!0});var La=s(yo);m(qy.$$.fragment,La),i6r=i(La),Jbe=n(La,"P",{});var V3t=s(Jbe);d6r=r(V3t,"Instantiate one of the base model classes of the library from a pretrained model."),V3t.forEach(t),c6r=i(La),xn=n(La,"P",{});var rC=s(xn);f6r=r(rC,"The model class to instantiate is selected based on the "),Ybe=n(rC,"CODE",{});var X3t=s(Ybe);m6r=r(X3t,"model_type"),X3t.forEach(t),g6r=r(rC,` property of the config object (either
passed as an argument or loaded from `),Kbe=n(rC,"CODE",{});var z3t=s(Kbe);h6r=r(z3t,"pretrained_model_name_or_path"),z3t.forEach(t),p6r=r(rC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zbe=n(rC,"CODE",{});var Q3t=s(Zbe);_6r=r(Q3t,"pretrained_model_name_or_path"),Q3t.forEach(t),u6r=r(rC,":"),rC.forEach(t),b6r=i(La),z=n(La,"UL",{});var W=s(z);f7=n(W,"LI",{});var Dxe=s(f7);e3e=n(Dxe,"STRONG",{});var W3t=s(e3e);F6r=r(W3t,"albert"),W3t.forEach(t),v6r=r(Dxe," \u2014 "),bQ=n(Dxe,"A",{href:!0});var H3t=s(bQ);T6r=r(H3t,"FlaxAlbertModel"),H3t.forEach(t),M6r=r(Dxe," (ALBERT model)"),Dxe.forEach(t),E6r=i(W),m7=n(W,"LI",{});var Gxe=s(m7);o3e=n(Gxe,"STRONG",{});var U3t=s(o3e);C6r=r(U3t,"bart"),U3t.forEach(t),w6r=r(Gxe," \u2014 "),FQ=n(Gxe,"A",{href:!0});var J3t=s(FQ);A6r=r(J3t,"FlaxBartModel"),J3t.forEach(t),y6r=r(Gxe," (BART model)"),Gxe.forEach(t),L6r=i(W),g7=n(W,"LI",{});var Oxe=s(g7);r3e=n(Oxe,"STRONG",{});var Y3t=s(r3e);x6r=r(Y3t,"beit"),Y3t.forEach(t),k6r=r(Oxe," \u2014 "),vQ=n(Oxe,"A",{href:!0});var K3t=s(vQ);S6r=r(K3t,"FlaxBeitModel"),K3t.forEach(t),R6r=r(Oxe," (BEiT model)"),Oxe.forEach(t),B6r=i(W),h7=n(W,"LI",{});var Vxe=s(h7);t3e=n(Vxe,"STRONG",{});var Z3t=s(t3e);P6r=r(Z3t,"bert"),Z3t.forEach(t),$6r=r(Vxe," \u2014 "),TQ=n(Vxe,"A",{href:!0});var e2t=s(TQ);I6r=r(e2t,"FlaxBertModel"),e2t.forEach(t),q6r=r(Vxe," (BERT model)"),Vxe.forEach(t),N6r=i(W),p7=n(W,"LI",{});var Xxe=s(p7);a3e=n(Xxe,"STRONG",{});var o2t=s(a3e);j6r=r(o2t,"big_bird"),o2t.forEach(t),D6r=r(Xxe," \u2014 "),MQ=n(Xxe,"A",{href:!0});var r2t=s(MQ);G6r=r(r2t,"FlaxBigBirdModel"),r2t.forEach(t),O6r=r(Xxe," (BigBird model)"),Xxe.forEach(t),V6r=i(W),_7=n(W,"LI",{});var zxe=s(_7);n3e=n(zxe,"STRONG",{});var t2t=s(n3e);X6r=r(t2t,"blenderbot"),t2t.forEach(t),z6r=r(zxe," \u2014 "),EQ=n(zxe,"A",{href:!0});var a2t=s(EQ);Q6r=r(a2t,"FlaxBlenderbotModel"),a2t.forEach(t),W6r=r(zxe," (Blenderbot model)"),zxe.forEach(t),H6r=i(W),u7=n(W,"LI",{});var Qxe=s(u7);s3e=n(Qxe,"STRONG",{});var n2t=s(s3e);U6r=r(n2t,"blenderbot-small"),n2t.forEach(t),J6r=r(Qxe," \u2014 "),CQ=n(Qxe,"A",{href:!0});var s2t=s(CQ);Y6r=r(s2t,"FlaxBlenderbotSmallModel"),s2t.forEach(t),K6r=r(Qxe," (BlenderbotSmall model)"),Qxe.forEach(t),Z6r=i(W),b7=n(W,"LI",{});var Wxe=s(b7);l3e=n(Wxe,"STRONG",{});var l2t=s(l3e);eTr=r(l2t,"clip"),l2t.forEach(t),oTr=r(Wxe," \u2014 "),wQ=n(Wxe,"A",{href:!0});var i2t=s(wQ);rTr=r(i2t,"FlaxCLIPModel"),i2t.forEach(t),tTr=r(Wxe," (CLIP model)"),Wxe.forEach(t),aTr=i(W),F7=n(W,"LI",{});var Hxe=s(F7);i3e=n(Hxe,"STRONG",{});var d2t=s(i3e);nTr=r(d2t,"distilbert"),d2t.forEach(t),sTr=r(Hxe," \u2014 "),AQ=n(Hxe,"A",{href:!0});var c2t=s(AQ);lTr=r(c2t,"FlaxDistilBertModel"),c2t.forEach(t),iTr=r(Hxe," (DistilBERT model)"),Hxe.forEach(t),dTr=i(W),v7=n(W,"LI",{});var Uxe=s(v7);d3e=n(Uxe,"STRONG",{});var f2t=s(d3e);cTr=r(f2t,"electra"),f2t.forEach(t),fTr=r(Uxe," \u2014 "),yQ=n(Uxe,"A",{href:!0});var m2t=s(yQ);mTr=r(m2t,"FlaxElectraModel"),m2t.forEach(t),gTr=r(Uxe," (ELECTRA model)"),Uxe.forEach(t),hTr=i(W),T7=n(W,"LI",{});var Jxe=s(T7);c3e=n(Jxe,"STRONG",{});var g2t=s(c3e);pTr=r(g2t,"gpt2"),g2t.forEach(t),_Tr=r(Jxe," \u2014 "),LQ=n(Jxe,"A",{href:!0});var h2t=s(LQ);uTr=r(h2t,"FlaxGPT2Model"),h2t.forEach(t),bTr=r(Jxe," (OpenAI GPT-2 model)"),Jxe.forEach(t),FTr=i(W),M7=n(W,"LI",{});var Yxe=s(M7);f3e=n(Yxe,"STRONG",{});var p2t=s(f3e);vTr=r(p2t,"gpt_neo"),p2t.forEach(t),TTr=r(Yxe," \u2014 "),xQ=n(Yxe,"A",{href:!0});var _2t=s(xQ);MTr=r(_2t,"FlaxGPTNeoModel"),_2t.forEach(t),ETr=r(Yxe," (GPT Neo model)"),Yxe.forEach(t),CTr=i(W),E7=n(W,"LI",{});var Kxe=s(E7);m3e=n(Kxe,"STRONG",{});var u2t=s(m3e);wTr=r(u2t,"gptj"),u2t.forEach(t),ATr=r(Kxe," \u2014 "),kQ=n(Kxe,"A",{href:!0});var b2t=s(kQ);yTr=r(b2t,"FlaxGPTJModel"),b2t.forEach(t),LTr=r(Kxe," (GPT-J model)"),Kxe.forEach(t),xTr=i(W),C7=n(W,"LI",{});var Zxe=s(C7);g3e=n(Zxe,"STRONG",{});var F2t=s(g3e);kTr=r(F2t,"marian"),F2t.forEach(t),STr=r(Zxe," \u2014 "),SQ=n(Zxe,"A",{href:!0});var v2t=s(SQ);RTr=r(v2t,"FlaxMarianModel"),v2t.forEach(t),BTr=r(Zxe," (Marian model)"),Zxe.forEach(t),PTr=i(W),w7=n(W,"LI",{});var eke=s(w7);h3e=n(eke,"STRONG",{});var T2t=s(h3e);$Tr=r(T2t,"mbart"),T2t.forEach(t),ITr=r(eke," \u2014 "),RQ=n(eke,"A",{href:!0});var M2t=s(RQ);qTr=r(M2t,"FlaxMBartModel"),M2t.forEach(t),NTr=r(eke," (mBART model)"),eke.forEach(t),jTr=i(W),A7=n(W,"LI",{});var oke=s(A7);p3e=n(oke,"STRONG",{});var E2t=s(p3e);DTr=r(E2t,"mt5"),E2t.forEach(t),GTr=r(oke," \u2014 "),BQ=n(oke,"A",{href:!0});var C2t=s(BQ);OTr=r(C2t,"FlaxMT5Model"),C2t.forEach(t),VTr=r(oke," (mT5 model)"),oke.forEach(t),XTr=i(W),y7=n(W,"LI",{});var rke=s(y7);_3e=n(rke,"STRONG",{});var w2t=s(_3e);zTr=r(w2t,"pegasus"),w2t.forEach(t),QTr=r(rke," \u2014 "),PQ=n(rke,"A",{href:!0});var A2t=s(PQ);WTr=r(A2t,"FlaxPegasusModel"),A2t.forEach(t),HTr=r(rke," (Pegasus model)"),rke.forEach(t),UTr=i(W),L7=n(W,"LI",{});var tke=s(L7);u3e=n(tke,"STRONG",{});var y2t=s(u3e);JTr=r(y2t,"roberta"),y2t.forEach(t),YTr=r(tke," \u2014 "),$Q=n(tke,"A",{href:!0});var L2t=s($Q);KTr=r(L2t,"FlaxRobertaModel"),L2t.forEach(t),ZTr=r(tke," (RoBERTa model)"),tke.forEach(t),e7r=i(W),x7=n(W,"LI",{});var ake=s(x7);b3e=n(ake,"STRONG",{});var x2t=s(b3e);o7r=r(x2t,"roformer"),x2t.forEach(t),r7r=r(ake," \u2014 "),IQ=n(ake,"A",{href:!0});var k2t=s(IQ);t7r=r(k2t,"FlaxRoFormerModel"),k2t.forEach(t),a7r=r(ake," (RoFormer model)"),ake.forEach(t),n7r=i(W),k7=n(W,"LI",{});var nke=s(k7);F3e=n(nke,"STRONG",{});var S2t=s(F3e);s7r=r(S2t,"t5"),S2t.forEach(t),l7r=r(nke," \u2014 "),qQ=n(nke,"A",{href:!0});var R2t=s(qQ);i7r=r(R2t,"FlaxT5Model"),R2t.forEach(t),d7r=r(nke," (T5 model)"),nke.forEach(t),c7r=i(W),S7=n(W,"LI",{});var ske=s(S7);v3e=n(ske,"STRONG",{});var B2t=s(v3e);f7r=r(B2t,"vision-text-dual-encoder"),B2t.forEach(t),m7r=r(ske," \u2014 "),NQ=n(ske,"A",{href:!0});var P2t=s(NQ);g7r=r(P2t,"FlaxVisionTextDualEncoderModel"),P2t.forEach(t),h7r=r(ske," (VisionTextDualEncoder model)"),ske.forEach(t),p7r=i(W),R7=n(W,"LI",{});var lke=s(R7);T3e=n(lke,"STRONG",{});var $2t=s(T3e);_7r=r($2t,"vit"),$2t.forEach(t),u7r=r(lke," \u2014 "),jQ=n(lke,"A",{href:!0});var I2t=s(jQ);b7r=r(I2t,"FlaxViTModel"),I2t.forEach(t),F7r=r(lke," (ViT model)"),lke.forEach(t),v7r=i(W),B7=n(W,"LI",{});var ike=s(B7);M3e=n(ike,"STRONG",{});var q2t=s(M3e);T7r=r(q2t,"wav2vec2"),q2t.forEach(t),M7r=r(ike," \u2014 "),DQ=n(ike,"A",{href:!0});var N2t=s(DQ);E7r=r(N2t,"FlaxWav2Vec2Model"),N2t.forEach(t),C7r=r(ike," (Wav2Vec2 model)"),ike.forEach(t),w7r=i(W),P7=n(W,"LI",{});var dke=s(P7);E3e=n(dke,"STRONG",{});var j2t=s(E3e);A7r=r(j2t,"xglm"),j2t.forEach(t),y7r=r(dke," \u2014 "),GQ=n(dke,"A",{href:!0});var D2t=s(GQ);L7r=r(D2t,"FlaxXGLMModel"),D2t.forEach(t),x7r=r(dke," (XGLM model)"),dke.forEach(t),k7r=i(W),$7=n(W,"LI",{});var cke=s($7);C3e=n(cke,"STRONG",{});var G2t=s(C3e);S7r=r(G2t,"xlm-roberta"),G2t.forEach(t),R7r=r(cke," \u2014 "),OQ=n(cke,"A",{href:!0});var O2t=s(OQ);B7r=r(O2t,"FlaxXLMRobertaModel"),O2t.forEach(t),P7r=r(cke," (XLM-RoBERTa model)"),cke.forEach(t),W.forEach(t),$7r=i(La),w3e=n(La,"P",{});var V2t=s(w3e);I7r=r(V2t,"Examples:"),V2t.forEach(t),q7r=i(La),m(Ny.$$.fragment,La),La.forEach(t),fi.forEach(t),mBe=i(c),of=n(c,"H2",{class:!0});var E$e=s(of);I7=n(E$e,"A",{id:!0,class:!0,href:!0});var X2t=s(I7);A3e=n(X2t,"SPAN",{});var z2t=s(A3e);m(jy.$$.fragment,z2t),z2t.forEach(t),X2t.forEach(t),N7r=i(E$e),y3e=n(E$e,"SPAN",{});var Q2t=s(y3e);j7r=r(Q2t,"FlaxAutoModelForCausalLM"),Q2t.forEach(t),E$e.forEach(t),gBe=i(c),Br=n(c,"DIV",{class:!0});var gi=s(Br);m(Dy.$$.fragment,gi),D7r=i(gi),rf=n(gi,"P",{});var pJ=s(rf);G7r=r(pJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),VQ=n(pJ,"A",{href:!0});var W2t=s(VQ);O7r=r(W2t,"from_pretrained()"),W2t.forEach(t),V7r=r(pJ," class method or the "),XQ=n(pJ,"A",{href:!0});var H2t=s(XQ);X7r=r(H2t,"from_config()"),H2t.forEach(t),z7r=r(pJ,` class
method.`),pJ.forEach(t),Q7r=i(gi),Gy=n(gi,"P",{});var C$e=s(Gy);W7r=r(C$e,"This class cannot be instantiated directly using "),L3e=n(C$e,"CODE",{});var U2t=s(L3e);H7r=r(U2t,"__init__()"),U2t.forEach(t),U7r=r(C$e," (throws an error)."),C$e.forEach(t),J7r=i(gi),yt=n(gi,"DIV",{class:!0});var hi=s(yt);m(Oy.$$.fragment,hi),Y7r=i(hi),x3e=n(hi,"P",{});var J2t=s(x3e);K7r=r(J2t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),J2t.forEach(t),Z7r=i(hi),tf=n(hi,"P",{});var _J=s(tf);eMr=r(_J,`Note:
Loading a model from its configuration file does `),k3e=n(_J,"STRONG",{});var Y2t=s(k3e);oMr=r(Y2t,"not"),Y2t.forEach(t),rMr=r(_J,` load the model weights. It only affects the
model\u2019s configuration. Use `),zQ=n(_J,"A",{href:!0});var K2t=s(zQ);tMr=r(K2t,"from_pretrained()"),K2t.forEach(t),aMr=r(_J," to load the model weights."),_J.forEach(t),nMr=i(hi),S3e=n(hi,"P",{});var Z2t=s(S3e);sMr=r(Z2t,"Examples:"),Z2t.forEach(t),lMr=i(hi),m(Vy.$$.fragment,hi),hi.forEach(t),iMr=i(gi),Lo=n(gi,"DIV",{class:!0});var xa=s(Lo);m(Xy.$$.fragment,xa),dMr=i(xa),R3e=n(xa,"P",{});var eFt=s(R3e);cMr=r(eFt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),eFt.forEach(t),fMr=i(xa),kn=n(xa,"P",{});var tC=s(kn);mMr=r(tC,"The model class to instantiate is selected based on the "),B3e=n(tC,"CODE",{});var oFt=s(B3e);gMr=r(oFt,"model_type"),oFt.forEach(t),hMr=r(tC,` property of the config object (either
passed as an argument or loaded from `),P3e=n(tC,"CODE",{});var rFt=s(P3e);pMr=r(rFt,"pretrained_model_name_or_path"),rFt.forEach(t),_Mr=r(tC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$3e=n(tC,"CODE",{});var tFt=s($3e);uMr=r(tFt,"pretrained_model_name_or_path"),tFt.forEach(t),bMr=r(tC,":"),tC.forEach(t),FMr=i(xa),ca=n(xa,"UL",{});var pi=s(ca);q7=n(pi,"LI",{});var fke=s(q7);I3e=n(fke,"STRONG",{});var aFt=s(I3e);vMr=r(aFt,"bart"),aFt.forEach(t),TMr=r(fke," \u2014 "),QQ=n(fke,"A",{href:!0});var nFt=s(QQ);MMr=r(nFt,"FlaxBartForCausalLM"),nFt.forEach(t),EMr=r(fke," (BART model)"),fke.forEach(t),CMr=i(pi),N7=n(pi,"LI",{});var mke=s(N7);q3e=n(mke,"STRONG",{});var sFt=s(q3e);wMr=r(sFt,"gpt2"),sFt.forEach(t),AMr=r(mke," \u2014 "),WQ=n(mke,"A",{href:!0});var lFt=s(WQ);yMr=r(lFt,"FlaxGPT2LMHeadModel"),lFt.forEach(t),LMr=r(mke," (OpenAI GPT-2 model)"),mke.forEach(t),xMr=i(pi),j7=n(pi,"LI",{});var gke=s(j7);N3e=n(gke,"STRONG",{});var iFt=s(N3e);kMr=r(iFt,"gpt_neo"),iFt.forEach(t),SMr=r(gke," \u2014 "),HQ=n(gke,"A",{href:!0});var dFt=s(HQ);RMr=r(dFt,"FlaxGPTNeoForCausalLM"),dFt.forEach(t),BMr=r(gke," (GPT Neo model)"),gke.forEach(t),PMr=i(pi),D7=n(pi,"LI",{});var hke=s(D7);j3e=n(hke,"STRONG",{});var cFt=s(j3e);$Mr=r(cFt,"gptj"),cFt.forEach(t),IMr=r(hke," \u2014 "),UQ=n(hke,"A",{href:!0});var fFt=s(UQ);qMr=r(fFt,"FlaxGPTJForCausalLM"),fFt.forEach(t),NMr=r(hke," (GPT-J model)"),hke.forEach(t),jMr=i(pi),G7=n(pi,"LI",{});var pke=s(G7);D3e=n(pke,"STRONG",{});var mFt=s(D3e);DMr=r(mFt,"xglm"),mFt.forEach(t),GMr=r(pke," \u2014 "),JQ=n(pke,"A",{href:!0});var gFt=s(JQ);OMr=r(gFt,"FlaxXGLMForCausalLM"),gFt.forEach(t),VMr=r(pke," (XGLM model)"),pke.forEach(t),pi.forEach(t),XMr=i(xa),G3e=n(xa,"P",{});var hFt=s(G3e);zMr=r(hFt,"Examples:"),hFt.forEach(t),QMr=i(xa),m(zy.$$.fragment,xa),xa.forEach(t),gi.forEach(t),hBe=i(c),af=n(c,"H2",{class:!0});var w$e=s(af);O7=n(w$e,"A",{id:!0,class:!0,href:!0});var pFt=s(O7);O3e=n(pFt,"SPAN",{});var _Ft=s(O3e);m(Qy.$$.fragment,_Ft),_Ft.forEach(t),pFt.forEach(t),WMr=i(w$e),V3e=n(w$e,"SPAN",{});var uFt=s(V3e);HMr=r(uFt,"FlaxAutoModelForPreTraining"),uFt.forEach(t),w$e.forEach(t),pBe=i(c),Pr=n(c,"DIV",{class:!0});var _i=s(Pr);m(Wy.$$.fragment,_i),UMr=i(_i),nf=n(_i,"P",{});var uJ=s(nf);JMr=r(uJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),YQ=n(uJ,"A",{href:!0});var bFt=s(YQ);YMr=r(bFt,"from_pretrained()"),bFt.forEach(t),KMr=r(uJ," class method or the "),KQ=n(uJ,"A",{href:!0});var FFt=s(KQ);ZMr=r(FFt,"from_config()"),FFt.forEach(t),eEr=r(uJ,` class
method.`),uJ.forEach(t),oEr=i(_i),Hy=n(_i,"P",{});var A$e=s(Hy);rEr=r(A$e,"This class cannot be instantiated directly using "),X3e=n(A$e,"CODE",{});var vFt=s(X3e);tEr=r(vFt,"__init__()"),vFt.forEach(t),aEr=r(A$e," (throws an error)."),A$e.forEach(t),nEr=i(_i),Lt=n(_i,"DIV",{class:!0});var ui=s(Lt);m(Uy.$$.fragment,ui),sEr=i(ui),z3e=n(ui,"P",{});var TFt=s(z3e);lEr=r(TFt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),TFt.forEach(t),iEr=i(ui),sf=n(ui,"P",{});var bJ=s(sf);dEr=r(bJ,`Note:
Loading a model from its configuration file does `),Q3e=n(bJ,"STRONG",{});var MFt=s(Q3e);cEr=r(MFt,"not"),MFt.forEach(t),fEr=r(bJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZQ=n(bJ,"A",{href:!0});var EFt=s(ZQ);mEr=r(EFt,"from_pretrained()"),EFt.forEach(t),gEr=r(bJ," to load the model weights."),bJ.forEach(t),hEr=i(ui),W3e=n(ui,"P",{});var CFt=s(W3e);pEr=r(CFt,"Examples:"),CFt.forEach(t),_Er=i(ui),m(Jy.$$.fragment,ui),ui.forEach(t),uEr=i(_i),xo=n(_i,"DIV",{class:!0});var ka=s(xo);m(Yy.$$.fragment,ka),bEr=i(ka),H3e=n(ka,"P",{});var wFt=s(H3e);FEr=r(wFt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),wFt.forEach(t),vEr=i(ka),Sn=n(ka,"P",{});var aC=s(Sn);TEr=r(aC,"The model class to instantiate is selected based on the "),U3e=n(aC,"CODE",{});var AFt=s(U3e);MEr=r(AFt,"model_type"),AFt.forEach(t),EEr=r(aC,` property of the config object (either
passed as an argument or loaded from `),J3e=n(aC,"CODE",{});var yFt=s(J3e);CEr=r(yFt,"pretrained_model_name_or_path"),yFt.forEach(t),wEr=r(aC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y3e=n(aC,"CODE",{});var LFt=s(Y3e);AEr=r(LFt,"pretrained_model_name_or_path"),LFt.forEach(t),yEr=r(aC,":"),aC.forEach(t),LEr=i(ka),fe=n(ka,"UL",{});var pe=s(fe);V7=n(pe,"LI",{});var _ke=s(V7);K3e=n(_ke,"STRONG",{});var xFt=s(K3e);xEr=r(xFt,"albert"),xFt.forEach(t),kEr=r(_ke," \u2014 "),eW=n(_ke,"A",{href:!0});var kFt=s(eW);SEr=r(kFt,"FlaxAlbertForPreTraining"),kFt.forEach(t),REr=r(_ke," (ALBERT model)"),_ke.forEach(t),BEr=i(pe),X7=n(pe,"LI",{});var uke=s(X7);Z3e=n(uke,"STRONG",{});var SFt=s(Z3e);PEr=r(SFt,"bart"),SFt.forEach(t),$Er=r(uke," \u2014 "),oW=n(uke,"A",{href:!0});var RFt=s(oW);IEr=r(RFt,"FlaxBartForConditionalGeneration"),RFt.forEach(t),qEr=r(uke," (BART model)"),uke.forEach(t),NEr=i(pe),z7=n(pe,"LI",{});var bke=s(z7);e2e=n(bke,"STRONG",{});var BFt=s(e2e);jEr=r(BFt,"bert"),BFt.forEach(t),DEr=r(bke," \u2014 "),rW=n(bke,"A",{href:!0});var PFt=s(rW);GEr=r(PFt,"FlaxBertForPreTraining"),PFt.forEach(t),OEr=r(bke," (BERT model)"),bke.forEach(t),VEr=i(pe),Q7=n(pe,"LI",{});var Fke=s(Q7);o2e=n(Fke,"STRONG",{});var $Ft=s(o2e);XEr=r($Ft,"big_bird"),$Ft.forEach(t),zEr=r(Fke," \u2014 "),tW=n(Fke,"A",{href:!0});var IFt=s(tW);QEr=r(IFt,"FlaxBigBirdForPreTraining"),IFt.forEach(t),WEr=r(Fke," (BigBird model)"),Fke.forEach(t),HEr=i(pe),W7=n(pe,"LI",{});var vke=s(W7);r2e=n(vke,"STRONG",{});var qFt=s(r2e);UEr=r(qFt,"electra"),qFt.forEach(t),JEr=r(vke," \u2014 "),aW=n(vke,"A",{href:!0});var NFt=s(aW);YEr=r(NFt,"FlaxElectraForPreTraining"),NFt.forEach(t),KEr=r(vke," (ELECTRA model)"),vke.forEach(t),ZEr=i(pe),H7=n(pe,"LI",{});var Tke=s(H7);t2e=n(Tke,"STRONG",{});var jFt=s(t2e);eCr=r(jFt,"mbart"),jFt.forEach(t),oCr=r(Tke," \u2014 "),nW=n(Tke,"A",{href:!0});var DFt=s(nW);rCr=r(DFt,"FlaxMBartForConditionalGeneration"),DFt.forEach(t),tCr=r(Tke," (mBART model)"),Tke.forEach(t),aCr=i(pe),U7=n(pe,"LI",{});var Mke=s(U7);a2e=n(Mke,"STRONG",{});var GFt=s(a2e);nCr=r(GFt,"mt5"),GFt.forEach(t),sCr=r(Mke," \u2014 "),sW=n(Mke,"A",{href:!0});var OFt=s(sW);lCr=r(OFt,"FlaxMT5ForConditionalGeneration"),OFt.forEach(t),iCr=r(Mke," (mT5 model)"),Mke.forEach(t),dCr=i(pe),J7=n(pe,"LI",{});var Eke=s(J7);n2e=n(Eke,"STRONG",{});var VFt=s(n2e);cCr=r(VFt,"roberta"),VFt.forEach(t),fCr=r(Eke," \u2014 "),lW=n(Eke,"A",{href:!0});var XFt=s(lW);mCr=r(XFt,"FlaxRobertaForMaskedLM"),XFt.forEach(t),gCr=r(Eke," (RoBERTa model)"),Eke.forEach(t),hCr=i(pe),Y7=n(pe,"LI",{});var Cke=s(Y7);s2e=n(Cke,"STRONG",{});var zFt=s(s2e);pCr=r(zFt,"roformer"),zFt.forEach(t),_Cr=r(Cke," \u2014 "),iW=n(Cke,"A",{href:!0});var QFt=s(iW);uCr=r(QFt,"FlaxRoFormerForMaskedLM"),QFt.forEach(t),bCr=r(Cke," (RoFormer model)"),Cke.forEach(t),FCr=i(pe),K7=n(pe,"LI",{});var wke=s(K7);l2e=n(wke,"STRONG",{});var WFt=s(l2e);vCr=r(WFt,"t5"),WFt.forEach(t),TCr=r(wke," \u2014 "),dW=n(wke,"A",{href:!0});var HFt=s(dW);MCr=r(HFt,"FlaxT5ForConditionalGeneration"),HFt.forEach(t),ECr=r(wke," (T5 model)"),wke.forEach(t),CCr=i(pe),Z7=n(pe,"LI",{});var Ake=s(Z7);i2e=n(Ake,"STRONG",{});var UFt=s(i2e);wCr=r(UFt,"wav2vec2"),UFt.forEach(t),ACr=r(Ake," \u2014 "),cW=n(Ake,"A",{href:!0});var JFt=s(cW);yCr=r(JFt,"FlaxWav2Vec2ForPreTraining"),JFt.forEach(t),LCr=r(Ake," (Wav2Vec2 model)"),Ake.forEach(t),xCr=i(pe),eM=n(pe,"LI",{});var yke=s(eM);d2e=n(yke,"STRONG",{});var YFt=s(d2e);kCr=r(YFt,"xlm-roberta"),YFt.forEach(t),SCr=r(yke," \u2014 "),fW=n(yke,"A",{href:!0});var KFt=s(fW);RCr=r(KFt,"FlaxXLMRobertaForMaskedLM"),KFt.forEach(t),BCr=r(yke," (XLM-RoBERTa model)"),yke.forEach(t),pe.forEach(t),PCr=i(ka),c2e=n(ka,"P",{});var ZFt=s(c2e);$Cr=r(ZFt,"Examples:"),ZFt.forEach(t),ICr=i(ka),m(Ky.$$.fragment,ka),ka.forEach(t),_i.forEach(t),_Be=i(c),lf=n(c,"H2",{class:!0});var y$e=s(lf);oM=n(y$e,"A",{id:!0,class:!0,href:!0});var evt=s(oM);f2e=n(evt,"SPAN",{});var ovt=s(f2e);m(Zy.$$.fragment,ovt),ovt.forEach(t),evt.forEach(t),qCr=i(y$e),m2e=n(y$e,"SPAN",{});var rvt=s(m2e);NCr=r(rvt,"FlaxAutoModelForMaskedLM"),rvt.forEach(t),y$e.forEach(t),uBe=i(c),$r=n(c,"DIV",{class:!0});var bi=s($r);m(eL.$$.fragment,bi),jCr=i(bi),df=n(bi,"P",{});var FJ=s(df);DCr=r(FJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),mW=n(FJ,"A",{href:!0});var tvt=s(mW);GCr=r(tvt,"from_pretrained()"),tvt.forEach(t),OCr=r(FJ," class method or the "),gW=n(FJ,"A",{href:!0});var avt=s(gW);VCr=r(avt,"from_config()"),avt.forEach(t),XCr=r(FJ,` class
method.`),FJ.forEach(t),zCr=i(bi),oL=n(bi,"P",{});var L$e=s(oL);QCr=r(L$e,"This class cannot be instantiated directly using "),g2e=n(L$e,"CODE",{});var nvt=s(g2e);WCr=r(nvt,"__init__()"),nvt.forEach(t),HCr=r(L$e," (throws an error)."),L$e.forEach(t),UCr=i(bi),xt=n(bi,"DIV",{class:!0});var Fi=s(xt);m(rL.$$.fragment,Fi),JCr=i(Fi),h2e=n(Fi,"P",{});var svt=s(h2e);YCr=r(svt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),svt.forEach(t),KCr=i(Fi),cf=n(Fi,"P",{});var vJ=s(cf);ZCr=r(vJ,`Note:
Loading a model from its configuration file does `),p2e=n(vJ,"STRONG",{});var lvt=s(p2e);e5r=r(lvt,"not"),lvt.forEach(t),o5r=r(vJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),hW=n(vJ,"A",{href:!0});var ivt=s(hW);r5r=r(ivt,"from_pretrained()"),ivt.forEach(t),t5r=r(vJ," to load the model weights."),vJ.forEach(t),a5r=i(Fi),_2e=n(Fi,"P",{});var dvt=s(_2e);n5r=r(dvt,"Examples:"),dvt.forEach(t),s5r=i(Fi),m(tL.$$.fragment,Fi),Fi.forEach(t),l5r=i(bi),ko=n(bi,"DIV",{class:!0});var Sa=s(ko);m(aL.$$.fragment,Sa),i5r=i(Sa),u2e=n(Sa,"P",{});var cvt=s(u2e);d5r=r(cvt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),cvt.forEach(t),c5r=i(Sa),Rn=n(Sa,"P",{});var nC=s(Rn);f5r=r(nC,"The model class to instantiate is selected based on the "),b2e=n(nC,"CODE",{});var fvt=s(b2e);m5r=r(fvt,"model_type"),fvt.forEach(t),g5r=r(nC,` property of the config object (either
passed as an argument or loaded from `),F2e=n(nC,"CODE",{});var mvt=s(F2e);h5r=r(mvt,"pretrained_model_name_or_path"),mvt.forEach(t),p5r=r(nC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v2e=n(nC,"CODE",{});var gvt=s(v2e);_5r=r(gvt,"pretrained_model_name_or_path"),gvt.forEach(t),u5r=r(nC,":"),nC.forEach(t),b5r=i(Sa),be=n(Sa,"UL",{});var Ae=s(be);rM=n(Ae,"LI",{});var Lke=s(rM);T2e=n(Lke,"STRONG",{});var hvt=s(T2e);F5r=r(hvt,"albert"),hvt.forEach(t),v5r=r(Lke," \u2014 "),pW=n(Lke,"A",{href:!0});var pvt=s(pW);T5r=r(pvt,"FlaxAlbertForMaskedLM"),pvt.forEach(t),M5r=r(Lke," (ALBERT model)"),Lke.forEach(t),E5r=i(Ae),tM=n(Ae,"LI",{});var xke=s(tM);M2e=n(xke,"STRONG",{});var _vt=s(M2e);C5r=r(_vt,"bart"),_vt.forEach(t),w5r=r(xke," \u2014 "),_W=n(xke,"A",{href:!0});var uvt=s(_W);A5r=r(uvt,"FlaxBartForConditionalGeneration"),uvt.forEach(t),y5r=r(xke," (BART model)"),xke.forEach(t),L5r=i(Ae),aM=n(Ae,"LI",{});var kke=s(aM);E2e=n(kke,"STRONG",{});var bvt=s(E2e);x5r=r(bvt,"bert"),bvt.forEach(t),k5r=r(kke," \u2014 "),uW=n(kke,"A",{href:!0});var Fvt=s(uW);S5r=r(Fvt,"FlaxBertForMaskedLM"),Fvt.forEach(t),R5r=r(kke," (BERT model)"),kke.forEach(t),B5r=i(Ae),nM=n(Ae,"LI",{});var Ske=s(nM);C2e=n(Ske,"STRONG",{});var vvt=s(C2e);P5r=r(vvt,"big_bird"),vvt.forEach(t),$5r=r(Ske," \u2014 "),bW=n(Ske,"A",{href:!0});var Tvt=s(bW);I5r=r(Tvt,"FlaxBigBirdForMaskedLM"),Tvt.forEach(t),q5r=r(Ske," (BigBird model)"),Ske.forEach(t),N5r=i(Ae),sM=n(Ae,"LI",{});var Rke=s(sM);w2e=n(Rke,"STRONG",{});var Mvt=s(w2e);j5r=r(Mvt,"distilbert"),Mvt.forEach(t),D5r=r(Rke," \u2014 "),FW=n(Rke,"A",{href:!0});var Evt=s(FW);G5r=r(Evt,"FlaxDistilBertForMaskedLM"),Evt.forEach(t),O5r=r(Rke," (DistilBERT model)"),Rke.forEach(t),V5r=i(Ae),lM=n(Ae,"LI",{});var Bke=s(lM);A2e=n(Bke,"STRONG",{});var Cvt=s(A2e);X5r=r(Cvt,"electra"),Cvt.forEach(t),z5r=r(Bke," \u2014 "),vW=n(Bke,"A",{href:!0});var wvt=s(vW);Q5r=r(wvt,"FlaxElectraForMaskedLM"),wvt.forEach(t),W5r=r(Bke," (ELECTRA model)"),Bke.forEach(t),H5r=i(Ae),iM=n(Ae,"LI",{});var Pke=s(iM);y2e=n(Pke,"STRONG",{});var Avt=s(y2e);U5r=r(Avt,"mbart"),Avt.forEach(t),J5r=r(Pke," \u2014 "),TW=n(Pke,"A",{href:!0});var yvt=s(TW);Y5r=r(yvt,"FlaxMBartForConditionalGeneration"),yvt.forEach(t),K5r=r(Pke," (mBART model)"),Pke.forEach(t),Z5r=i(Ae),dM=n(Ae,"LI",{});var $ke=s(dM);L2e=n($ke,"STRONG",{});var Lvt=s(L2e);ewr=r(Lvt,"roberta"),Lvt.forEach(t),owr=r($ke," \u2014 "),MW=n($ke,"A",{href:!0});var xvt=s(MW);rwr=r(xvt,"FlaxRobertaForMaskedLM"),xvt.forEach(t),twr=r($ke," (RoBERTa model)"),$ke.forEach(t),awr=i(Ae),cM=n(Ae,"LI",{});var Ike=s(cM);x2e=n(Ike,"STRONG",{});var kvt=s(x2e);nwr=r(kvt,"roformer"),kvt.forEach(t),swr=r(Ike," \u2014 "),EW=n(Ike,"A",{href:!0});var Svt=s(EW);lwr=r(Svt,"FlaxRoFormerForMaskedLM"),Svt.forEach(t),iwr=r(Ike," (RoFormer model)"),Ike.forEach(t),dwr=i(Ae),fM=n(Ae,"LI",{});var qke=s(fM);k2e=n(qke,"STRONG",{});var Rvt=s(k2e);cwr=r(Rvt,"xlm-roberta"),Rvt.forEach(t),fwr=r(qke," \u2014 "),CW=n(qke,"A",{href:!0});var Bvt=s(CW);mwr=r(Bvt,"FlaxXLMRobertaForMaskedLM"),Bvt.forEach(t),gwr=r(qke," (XLM-RoBERTa model)"),qke.forEach(t),Ae.forEach(t),hwr=i(Sa),S2e=n(Sa,"P",{});var Pvt=s(S2e);pwr=r(Pvt,"Examples:"),Pvt.forEach(t),_wr=i(Sa),m(nL.$$.fragment,Sa),Sa.forEach(t),bi.forEach(t),bBe=i(c),ff=n(c,"H2",{class:!0});var x$e=s(ff);mM=n(x$e,"A",{id:!0,class:!0,href:!0});var $vt=s(mM);R2e=n($vt,"SPAN",{});var Ivt=s(R2e);m(sL.$$.fragment,Ivt),Ivt.forEach(t),$vt.forEach(t),uwr=i(x$e),B2e=n(x$e,"SPAN",{});var qvt=s(B2e);bwr=r(qvt,"FlaxAutoModelForSeq2SeqLM"),qvt.forEach(t),x$e.forEach(t),FBe=i(c),Ir=n(c,"DIV",{class:!0});var vi=s(Ir);m(lL.$$.fragment,vi),Fwr=i(vi),mf=n(vi,"P",{});var TJ=s(mf);vwr=r(TJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),wW=n(TJ,"A",{href:!0});var Nvt=s(wW);Twr=r(Nvt,"from_pretrained()"),Nvt.forEach(t),Mwr=r(TJ," class method or the "),AW=n(TJ,"A",{href:!0});var jvt=s(AW);Ewr=r(jvt,"from_config()"),jvt.forEach(t),Cwr=r(TJ,` class
method.`),TJ.forEach(t),wwr=i(vi),iL=n(vi,"P",{});var k$e=s(iL);Awr=r(k$e,"This class cannot be instantiated directly using "),P2e=n(k$e,"CODE",{});var Dvt=s(P2e);ywr=r(Dvt,"__init__()"),Dvt.forEach(t),Lwr=r(k$e," (throws an error)."),k$e.forEach(t),xwr=i(vi),kt=n(vi,"DIV",{class:!0});var Ti=s(kt);m(dL.$$.fragment,Ti),kwr=i(Ti),$2e=n(Ti,"P",{});var Gvt=s($2e);Swr=r(Gvt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Gvt.forEach(t),Rwr=i(Ti),gf=n(Ti,"P",{});var MJ=s(gf);Bwr=r(MJ,`Note:
Loading a model from its configuration file does `),I2e=n(MJ,"STRONG",{});var Ovt=s(I2e);Pwr=r(Ovt,"not"),Ovt.forEach(t),$wr=r(MJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),yW=n(MJ,"A",{href:!0});var Vvt=s(yW);Iwr=r(Vvt,"from_pretrained()"),Vvt.forEach(t),qwr=r(MJ," to load the model weights."),MJ.forEach(t),Nwr=i(Ti),q2e=n(Ti,"P",{});var Xvt=s(q2e);jwr=r(Xvt,"Examples:"),Xvt.forEach(t),Dwr=i(Ti),m(cL.$$.fragment,Ti),Ti.forEach(t),Gwr=i(vi),So=n(vi,"DIV",{class:!0});var Ra=s(So);m(fL.$$.fragment,Ra),Owr=i(Ra),N2e=n(Ra,"P",{});var zvt=s(N2e);Vwr=r(zvt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),zvt.forEach(t),Xwr=i(Ra),Bn=n(Ra,"P",{});var sC=s(Bn);zwr=r(sC,"The model class to instantiate is selected based on the "),j2e=n(sC,"CODE",{});var Qvt=s(j2e);Qwr=r(Qvt,"model_type"),Qvt.forEach(t),Wwr=r(sC,` property of the config object (either
passed as an argument or loaded from `),D2e=n(sC,"CODE",{});var Wvt=s(D2e);Hwr=r(Wvt,"pretrained_model_name_or_path"),Wvt.forEach(t),Uwr=r(sC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G2e=n(sC,"CODE",{});var Hvt=s(G2e);Jwr=r(Hvt,"pretrained_model_name_or_path"),Hvt.forEach(t),Ywr=r(sC,":"),sC.forEach(t),Kwr=i(Ra),Ee=n(Ra,"UL",{});var so=s(Ee);gM=n(so,"LI",{});var Nke=s(gM);O2e=n(Nke,"STRONG",{});var Uvt=s(O2e);Zwr=r(Uvt,"bart"),Uvt.forEach(t),eAr=r(Nke," \u2014 "),LW=n(Nke,"A",{href:!0});var Jvt=s(LW);oAr=r(Jvt,"FlaxBartForConditionalGeneration"),Jvt.forEach(t),rAr=r(Nke," (BART model)"),Nke.forEach(t),tAr=i(so),hM=n(so,"LI",{});var jke=s(hM);V2e=n(jke,"STRONG",{});var Yvt=s(V2e);aAr=r(Yvt,"blenderbot"),Yvt.forEach(t),nAr=r(jke," \u2014 "),xW=n(jke,"A",{href:!0});var Kvt=s(xW);sAr=r(Kvt,"FlaxBlenderbotForConditionalGeneration"),Kvt.forEach(t),lAr=r(jke," (Blenderbot model)"),jke.forEach(t),iAr=i(so),pM=n(so,"LI",{});var Dke=s(pM);X2e=n(Dke,"STRONG",{});var Zvt=s(X2e);dAr=r(Zvt,"blenderbot-small"),Zvt.forEach(t),cAr=r(Dke," \u2014 "),kW=n(Dke,"A",{href:!0});var e6t=s(kW);fAr=r(e6t,"FlaxBlenderbotSmallForConditionalGeneration"),e6t.forEach(t),mAr=r(Dke," (BlenderbotSmall model)"),Dke.forEach(t),gAr=i(so),_M=n(so,"LI",{});var Gke=s(_M);z2e=n(Gke,"STRONG",{});var o6t=s(z2e);hAr=r(o6t,"encoder-decoder"),o6t.forEach(t),pAr=r(Gke," \u2014 "),SW=n(Gke,"A",{href:!0});var r6t=s(SW);_Ar=r(r6t,"FlaxEncoderDecoderModel"),r6t.forEach(t),uAr=r(Gke," (Encoder decoder model)"),Gke.forEach(t),bAr=i(so),uM=n(so,"LI",{});var Oke=s(uM);Q2e=n(Oke,"STRONG",{});var t6t=s(Q2e);FAr=r(t6t,"marian"),t6t.forEach(t),vAr=r(Oke," \u2014 "),RW=n(Oke,"A",{href:!0});var a6t=s(RW);TAr=r(a6t,"FlaxMarianMTModel"),a6t.forEach(t),MAr=r(Oke," (Marian model)"),Oke.forEach(t),EAr=i(so),bM=n(so,"LI",{});var Vke=s(bM);W2e=n(Vke,"STRONG",{});var n6t=s(W2e);CAr=r(n6t,"mbart"),n6t.forEach(t),wAr=r(Vke," \u2014 "),BW=n(Vke,"A",{href:!0});var s6t=s(BW);AAr=r(s6t,"FlaxMBartForConditionalGeneration"),s6t.forEach(t),yAr=r(Vke," (mBART model)"),Vke.forEach(t),LAr=i(so),FM=n(so,"LI",{});var Xke=s(FM);H2e=n(Xke,"STRONG",{});var l6t=s(H2e);xAr=r(l6t,"mt5"),l6t.forEach(t),kAr=r(Xke," \u2014 "),PW=n(Xke,"A",{href:!0});var i6t=s(PW);SAr=r(i6t,"FlaxMT5ForConditionalGeneration"),i6t.forEach(t),RAr=r(Xke," (mT5 model)"),Xke.forEach(t),BAr=i(so),vM=n(so,"LI",{});var zke=s(vM);U2e=n(zke,"STRONG",{});var d6t=s(U2e);PAr=r(d6t,"pegasus"),d6t.forEach(t),$Ar=r(zke," \u2014 "),$W=n(zke,"A",{href:!0});var c6t=s($W);IAr=r(c6t,"FlaxPegasusForConditionalGeneration"),c6t.forEach(t),qAr=r(zke," (Pegasus model)"),zke.forEach(t),NAr=i(so),TM=n(so,"LI",{});var Qke=s(TM);J2e=n(Qke,"STRONG",{});var f6t=s(J2e);jAr=r(f6t,"t5"),f6t.forEach(t),DAr=r(Qke," \u2014 "),IW=n(Qke,"A",{href:!0});var m6t=s(IW);GAr=r(m6t,"FlaxT5ForConditionalGeneration"),m6t.forEach(t),OAr=r(Qke," (T5 model)"),Qke.forEach(t),so.forEach(t),VAr=i(Ra),Y2e=n(Ra,"P",{});var g6t=s(Y2e);XAr=r(g6t,"Examples:"),g6t.forEach(t),zAr=i(Ra),m(mL.$$.fragment,Ra),Ra.forEach(t),vi.forEach(t),vBe=i(c),hf=n(c,"H2",{class:!0});var S$e=s(hf);MM=n(S$e,"A",{id:!0,class:!0,href:!0});var h6t=s(MM);K2e=n(h6t,"SPAN",{});var p6t=s(K2e);m(gL.$$.fragment,p6t),p6t.forEach(t),h6t.forEach(t),QAr=i(S$e),Z2e=n(S$e,"SPAN",{});var _6t=s(Z2e);WAr=r(_6t,"FlaxAutoModelForSequenceClassification"),_6t.forEach(t),S$e.forEach(t),TBe=i(c),qr=n(c,"DIV",{class:!0});var Mi=s(qr);m(hL.$$.fragment,Mi),HAr=i(Mi),pf=n(Mi,"P",{});var EJ=s(pf);UAr=r(EJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),qW=n(EJ,"A",{href:!0});var u6t=s(qW);JAr=r(u6t,"from_pretrained()"),u6t.forEach(t),YAr=r(EJ," class method or the "),NW=n(EJ,"A",{href:!0});var b6t=s(NW);KAr=r(b6t,"from_config()"),b6t.forEach(t),ZAr=r(EJ,` class
method.`),EJ.forEach(t),e0r=i(Mi),pL=n(Mi,"P",{});var R$e=s(pL);o0r=r(R$e,"This class cannot be instantiated directly using "),eFe=n(R$e,"CODE",{});var F6t=s(eFe);r0r=r(F6t,"__init__()"),F6t.forEach(t),t0r=r(R$e," (throws an error)."),R$e.forEach(t),a0r=i(Mi),St=n(Mi,"DIV",{class:!0});var Ei=s(St);m(_L.$$.fragment,Ei),n0r=i(Ei),oFe=n(Ei,"P",{});var v6t=s(oFe);s0r=r(v6t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),v6t.forEach(t),l0r=i(Ei),_f=n(Ei,"P",{});var CJ=s(_f);i0r=r(CJ,`Note:
Loading a model from its configuration file does `),rFe=n(CJ,"STRONG",{});var T6t=s(rFe);d0r=r(T6t,"not"),T6t.forEach(t),c0r=r(CJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),jW=n(CJ,"A",{href:!0});var M6t=s(jW);f0r=r(M6t,"from_pretrained()"),M6t.forEach(t),m0r=r(CJ," to load the model weights."),CJ.forEach(t),g0r=i(Ei),tFe=n(Ei,"P",{});var E6t=s(tFe);h0r=r(E6t,"Examples:"),E6t.forEach(t),p0r=i(Ei),m(uL.$$.fragment,Ei),Ei.forEach(t),_0r=i(Mi),Ro=n(Mi,"DIV",{class:!0});var Ba=s(Ro);m(bL.$$.fragment,Ba),u0r=i(Ba),aFe=n(Ba,"P",{});var C6t=s(aFe);b0r=r(C6t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),C6t.forEach(t),F0r=i(Ba),Pn=n(Ba,"P",{});var lC=s(Pn);v0r=r(lC,"The model class to instantiate is selected based on the "),nFe=n(lC,"CODE",{});var w6t=s(nFe);T0r=r(w6t,"model_type"),w6t.forEach(t),M0r=r(lC,` property of the config object (either
passed as an argument or loaded from `),sFe=n(lC,"CODE",{});var A6t=s(sFe);E0r=r(A6t,"pretrained_model_name_or_path"),A6t.forEach(t),C0r=r(lC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lFe=n(lC,"CODE",{});var y6t=s(lFe);w0r=r(y6t,"pretrained_model_name_or_path"),y6t.forEach(t),A0r=r(lC,":"),lC.forEach(t),y0r=i(Ba),Fe=n(Ba,"UL",{});var ye=s(Fe);EM=n(ye,"LI",{});var Wke=s(EM);iFe=n(Wke,"STRONG",{});var L6t=s(iFe);L0r=r(L6t,"albert"),L6t.forEach(t),x0r=r(Wke," \u2014 "),DW=n(Wke,"A",{href:!0});var x6t=s(DW);k0r=r(x6t,"FlaxAlbertForSequenceClassification"),x6t.forEach(t),S0r=r(Wke," (ALBERT model)"),Wke.forEach(t),R0r=i(ye),CM=n(ye,"LI",{});var Hke=s(CM);dFe=n(Hke,"STRONG",{});var k6t=s(dFe);B0r=r(k6t,"bart"),k6t.forEach(t),P0r=r(Hke," \u2014 "),GW=n(Hke,"A",{href:!0});var S6t=s(GW);$0r=r(S6t,"FlaxBartForSequenceClassification"),S6t.forEach(t),I0r=r(Hke," (BART model)"),Hke.forEach(t),q0r=i(ye),wM=n(ye,"LI",{});var Uke=s(wM);cFe=n(Uke,"STRONG",{});var R6t=s(cFe);N0r=r(R6t,"bert"),R6t.forEach(t),j0r=r(Uke," \u2014 "),OW=n(Uke,"A",{href:!0});var B6t=s(OW);D0r=r(B6t,"FlaxBertForSequenceClassification"),B6t.forEach(t),G0r=r(Uke," (BERT model)"),Uke.forEach(t),O0r=i(ye),AM=n(ye,"LI",{});var Jke=s(AM);fFe=n(Jke,"STRONG",{});var P6t=s(fFe);V0r=r(P6t,"big_bird"),P6t.forEach(t),X0r=r(Jke," \u2014 "),VW=n(Jke,"A",{href:!0});var $6t=s(VW);z0r=r($6t,"FlaxBigBirdForSequenceClassification"),$6t.forEach(t),Q0r=r(Jke," (BigBird model)"),Jke.forEach(t),W0r=i(ye),yM=n(ye,"LI",{});var Yke=s(yM);mFe=n(Yke,"STRONG",{});var I6t=s(mFe);H0r=r(I6t,"distilbert"),I6t.forEach(t),U0r=r(Yke," \u2014 "),XW=n(Yke,"A",{href:!0});var q6t=s(XW);J0r=r(q6t,"FlaxDistilBertForSequenceClassification"),q6t.forEach(t),Y0r=r(Yke," (DistilBERT model)"),Yke.forEach(t),K0r=i(ye),LM=n(ye,"LI",{});var Kke=s(LM);gFe=n(Kke,"STRONG",{});var N6t=s(gFe);Z0r=r(N6t,"electra"),N6t.forEach(t),eyr=r(Kke," \u2014 "),zW=n(Kke,"A",{href:!0});var j6t=s(zW);oyr=r(j6t,"FlaxElectraForSequenceClassification"),j6t.forEach(t),ryr=r(Kke," (ELECTRA model)"),Kke.forEach(t),tyr=i(ye),xM=n(ye,"LI",{});var Zke=s(xM);hFe=n(Zke,"STRONG",{});var D6t=s(hFe);ayr=r(D6t,"mbart"),D6t.forEach(t),nyr=r(Zke," \u2014 "),QW=n(Zke,"A",{href:!0});var G6t=s(QW);syr=r(G6t,"FlaxMBartForSequenceClassification"),G6t.forEach(t),lyr=r(Zke," (mBART model)"),Zke.forEach(t),iyr=i(ye),kM=n(ye,"LI",{});var eSe=s(kM);pFe=n(eSe,"STRONG",{});var O6t=s(pFe);dyr=r(O6t,"roberta"),O6t.forEach(t),cyr=r(eSe," \u2014 "),WW=n(eSe,"A",{href:!0});var V6t=s(WW);fyr=r(V6t,"FlaxRobertaForSequenceClassification"),V6t.forEach(t),myr=r(eSe," (RoBERTa model)"),eSe.forEach(t),gyr=i(ye),SM=n(ye,"LI",{});var oSe=s(SM);_Fe=n(oSe,"STRONG",{});var X6t=s(_Fe);hyr=r(X6t,"roformer"),X6t.forEach(t),pyr=r(oSe," \u2014 "),HW=n(oSe,"A",{href:!0});var z6t=s(HW);_yr=r(z6t,"FlaxRoFormerForSequenceClassification"),z6t.forEach(t),uyr=r(oSe," (RoFormer model)"),oSe.forEach(t),byr=i(ye),RM=n(ye,"LI",{});var rSe=s(RM);uFe=n(rSe,"STRONG",{});var Q6t=s(uFe);Fyr=r(Q6t,"xlm-roberta"),Q6t.forEach(t),vyr=r(rSe," \u2014 "),UW=n(rSe,"A",{href:!0});var W6t=s(UW);Tyr=r(W6t,"FlaxXLMRobertaForSequenceClassification"),W6t.forEach(t),Myr=r(rSe," (XLM-RoBERTa model)"),rSe.forEach(t),ye.forEach(t),Eyr=i(Ba),bFe=n(Ba,"P",{});var H6t=s(bFe);Cyr=r(H6t,"Examples:"),H6t.forEach(t),wyr=i(Ba),m(FL.$$.fragment,Ba),Ba.forEach(t),Mi.forEach(t),MBe=i(c),uf=n(c,"H2",{class:!0});var B$e=s(uf);BM=n(B$e,"A",{id:!0,class:!0,href:!0});var U6t=s(BM);FFe=n(U6t,"SPAN",{});var J6t=s(FFe);m(vL.$$.fragment,J6t),J6t.forEach(t),U6t.forEach(t),Ayr=i(B$e),vFe=n(B$e,"SPAN",{});var Y6t=s(vFe);yyr=r(Y6t,"FlaxAutoModelForQuestionAnswering"),Y6t.forEach(t),B$e.forEach(t),EBe=i(c),Nr=n(c,"DIV",{class:!0});var Ci=s(Nr);m(TL.$$.fragment,Ci),Lyr=i(Ci),bf=n(Ci,"P",{});var wJ=s(bf);xyr=r(wJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),JW=n(wJ,"A",{href:!0});var K6t=s(JW);kyr=r(K6t,"from_pretrained()"),K6t.forEach(t),Syr=r(wJ," class method or the "),YW=n(wJ,"A",{href:!0});var Z6t=s(YW);Ryr=r(Z6t,"from_config()"),Z6t.forEach(t),Byr=r(wJ,` class
method.`),wJ.forEach(t),Pyr=i(Ci),ML=n(Ci,"P",{});var P$e=s(ML);$yr=r(P$e,"This class cannot be instantiated directly using "),TFe=n(P$e,"CODE",{});var eTt=s(TFe);Iyr=r(eTt,"__init__()"),eTt.forEach(t),qyr=r(P$e," (throws an error)."),P$e.forEach(t),Nyr=i(Ci),Rt=n(Ci,"DIV",{class:!0});var wi=s(Rt);m(EL.$$.fragment,wi),jyr=i(wi),MFe=n(wi,"P",{});var oTt=s(MFe);Dyr=r(oTt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),oTt.forEach(t),Gyr=i(wi),Ff=n(wi,"P",{});var AJ=s(Ff);Oyr=r(AJ,`Note:
Loading a model from its configuration file does `),EFe=n(AJ,"STRONG",{});var rTt=s(EFe);Vyr=r(rTt,"not"),rTt.forEach(t),Xyr=r(AJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),KW=n(AJ,"A",{href:!0});var tTt=s(KW);zyr=r(tTt,"from_pretrained()"),tTt.forEach(t),Qyr=r(AJ," to load the model weights."),AJ.forEach(t),Wyr=i(wi),CFe=n(wi,"P",{});var aTt=s(CFe);Hyr=r(aTt,"Examples:"),aTt.forEach(t),Uyr=i(wi),m(CL.$$.fragment,wi),wi.forEach(t),Jyr=i(Ci),Bo=n(Ci,"DIV",{class:!0});var Pa=s(Bo);m(wL.$$.fragment,Pa),Yyr=i(Pa),wFe=n(Pa,"P",{});var nTt=s(wFe);Kyr=r(nTt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),nTt.forEach(t),Zyr=i(Pa),$n=n(Pa,"P",{});var iC=s($n);eLr=r(iC,"The model class to instantiate is selected based on the "),AFe=n(iC,"CODE",{});var sTt=s(AFe);oLr=r(sTt,"model_type"),sTt.forEach(t),rLr=r(iC,` property of the config object (either
passed as an argument or loaded from `),yFe=n(iC,"CODE",{});var lTt=s(yFe);tLr=r(lTt,"pretrained_model_name_or_path"),lTt.forEach(t),aLr=r(iC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LFe=n(iC,"CODE",{});var iTt=s(LFe);nLr=r(iTt,"pretrained_model_name_or_path"),iTt.forEach(t),sLr=r(iC,":"),iC.forEach(t),lLr=i(Pa),ve=n(Pa,"UL",{});var Le=s(ve);PM=n(Le,"LI",{});var tSe=s(PM);xFe=n(tSe,"STRONG",{});var dTt=s(xFe);iLr=r(dTt,"albert"),dTt.forEach(t),dLr=r(tSe," \u2014 "),ZW=n(tSe,"A",{href:!0});var cTt=s(ZW);cLr=r(cTt,"FlaxAlbertForQuestionAnswering"),cTt.forEach(t),fLr=r(tSe," (ALBERT model)"),tSe.forEach(t),mLr=i(Le),$M=n(Le,"LI",{});var aSe=s($M);kFe=n(aSe,"STRONG",{});var fTt=s(kFe);gLr=r(fTt,"bart"),fTt.forEach(t),hLr=r(aSe," \u2014 "),eH=n(aSe,"A",{href:!0});var mTt=s(eH);pLr=r(mTt,"FlaxBartForQuestionAnswering"),mTt.forEach(t),_Lr=r(aSe," (BART model)"),aSe.forEach(t),uLr=i(Le),IM=n(Le,"LI",{});var nSe=s(IM);SFe=n(nSe,"STRONG",{});var gTt=s(SFe);bLr=r(gTt,"bert"),gTt.forEach(t),FLr=r(nSe," \u2014 "),oH=n(nSe,"A",{href:!0});var hTt=s(oH);vLr=r(hTt,"FlaxBertForQuestionAnswering"),hTt.forEach(t),TLr=r(nSe," (BERT model)"),nSe.forEach(t),MLr=i(Le),qM=n(Le,"LI",{});var sSe=s(qM);RFe=n(sSe,"STRONG",{});var pTt=s(RFe);ELr=r(pTt,"big_bird"),pTt.forEach(t),CLr=r(sSe," \u2014 "),rH=n(sSe,"A",{href:!0});var _Tt=s(rH);wLr=r(_Tt,"FlaxBigBirdForQuestionAnswering"),_Tt.forEach(t),ALr=r(sSe," (BigBird model)"),sSe.forEach(t),yLr=i(Le),NM=n(Le,"LI",{});var lSe=s(NM);BFe=n(lSe,"STRONG",{});var uTt=s(BFe);LLr=r(uTt,"distilbert"),uTt.forEach(t),xLr=r(lSe," \u2014 "),tH=n(lSe,"A",{href:!0});var bTt=s(tH);kLr=r(bTt,"FlaxDistilBertForQuestionAnswering"),bTt.forEach(t),SLr=r(lSe," (DistilBERT model)"),lSe.forEach(t),RLr=i(Le),jM=n(Le,"LI",{});var iSe=s(jM);PFe=n(iSe,"STRONG",{});var FTt=s(PFe);BLr=r(FTt,"electra"),FTt.forEach(t),PLr=r(iSe," \u2014 "),aH=n(iSe,"A",{href:!0});var vTt=s(aH);$Lr=r(vTt,"FlaxElectraForQuestionAnswering"),vTt.forEach(t),ILr=r(iSe," (ELECTRA model)"),iSe.forEach(t),qLr=i(Le),DM=n(Le,"LI",{});var dSe=s(DM);$Fe=n(dSe,"STRONG",{});var TTt=s($Fe);NLr=r(TTt,"mbart"),TTt.forEach(t),jLr=r(dSe," \u2014 "),nH=n(dSe,"A",{href:!0});var MTt=s(nH);DLr=r(MTt,"FlaxMBartForQuestionAnswering"),MTt.forEach(t),GLr=r(dSe," (mBART model)"),dSe.forEach(t),OLr=i(Le),GM=n(Le,"LI",{});var cSe=s(GM);IFe=n(cSe,"STRONG",{});var ETt=s(IFe);VLr=r(ETt,"roberta"),ETt.forEach(t),XLr=r(cSe," \u2014 "),sH=n(cSe,"A",{href:!0});var CTt=s(sH);zLr=r(CTt,"FlaxRobertaForQuestionAnswering"),CTt.forEach(t),QLr=r(cSe," (RoBERTa model)"),cSe.forEach(t),WLr=i(Le),OM=n(Le,"LI",{});var fSe=s(OM);qFe=n(fSe,"STRONG",{});var wTt=s(qFe);HLr=r(wTt,"roformer"),wTt.forEach(t),ULr=r(fSe," \u2014 "),lH=n(fSe,"A",{href:!0});var ATt=s(lH);JLr=r(ATt,"FlaxRoFormerForQuestionAnswering"),ATt.forEach(t),YLr=r(fSe," (RoFormer model)"),fSe.forEach(t),KLr=i(Le),VM=n(Le,"LI",{});var mSe=s(VM);NFe=n(mSe,"STRONG",{});var yTt=s(NFe);ZLr=r(yTt,"xlm-roberta"),yTt.forEach(t),e8r=r(mSe," \u2014 "),iH=n(mSe,"A",{href:!0});var LTt=s(iH);o8r=r(LTt,"FlaxXLMRobertaForQuestionAnswering"),LTt.forEach(t),r8r=r(mSe," (XLM-RoBERTa model)"),mSe.forEach(t),Le.forEach(t),t8r=i(Pa),jFe=n(Pa,"P",{});var xTt=s(jFe);a8r=r(xTt,"Examples:"),xTt.forEach(t),n8r=i(Pa),m(AL.$$.fragment,Pa),Pa.forEach(t),Ci.forEach(t),CBe=i(c),vf=n(c,"H2",{class:!0});var $$e=s(vf);XM=n($$e,"A",{id:!0,class:!0,href:!0});var kTt=s(XM);DFe=n(kTt,"SPAN",{});var STt=s(DFe);m(yL.$$.fragment,STt),STt.forEach(t),kTt.forEach(t),s8r=i($$e),GFe=n($$e,"SPAN",{});var RTt=s(GFe);l8r=r(RTt,"FlaxAutoModelForTokenClassification"),RTt.forEach(t),$$e.forEach(t),wBe=i(c),jr=n(c,"DIV",{class:!0});var Ai=s(jr);m(LL.$$.fragment,Ai),i8r=i(Ai),Tf=n(Ai,"P",{});var yJ=s(Tf);d8r=r(yJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),dH=n(yJ,"A",{href:!0});var BTt=s(dH);c8r=r(BTt,"from_pretrained()"),BTt.forEach(t),f8r=r(yJ," class method or the "),cH=n(yJ,"A",{href:!0});var PTt=s(cH);m8r=r(PTt,"from_config()"),PTt.forEach(t),g8r=r(yJ,` class
method.`),yJ.forEach(t),h8r=i(Ai),xL=n(Ai,"P",{});var I$e=s(xL);p8r=r(I$e,"This class cannot be instantiated directly using "),OFe=n(I$e,"CODE",{});var $Tt=s(OFe);_8r=r($Tt,"__init__()"),$Tt.forEach(t),u8r=r(I$e," (throws an error)."),I$e.forEach(t),b8r=i(Ai),Bt=n(Ai,"DIV",{class:!0});var yi=s(Bt);m(kL.$$.fragment,yi),F8r=i(yi),VFe=n(yi,"P",{});var ITt=s(VFe);v8r=r(ITt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),ITt.forEach(t),T8r=i(yi),Mf=n(yi,"P",{});var LJ=s(Mf);M8r=r(LJ,`Note:
Loading a model from its configuration file does `),XFe=n(LJ,"STRONG",{});var qTt=s(XFe);E8r=r(qTt,"not"),qTt.forEach(t),C8r=r(LJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),fH=n(LJ,"A",{href:!0});var NTt=s(fH);w8r=r(NTt,"from_pretrained()"),NTt.forEach(t),A8r=r(LJ," to load the model weights."),LJ.forEach(t),y8r=i(yi),zFe=n(yi,"P",{});var jTt=s(zFe);L8r=r(jTt,"Examples:"),jTt.forEach(t),x8r=i(yi),m(SL.$$.fragment,yi),yi.forEach(t),k8r=i(Ai),Po=n(Ai,"DIV",{class:!0});var $a=s(Po);m(RL.$$.fragment,$a),S8r=i($a),QFe=n($a,"P",{});var DTt=s(QFe);R8r=r(DTt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),DTt.forEach(t),B8r=i($a),In=n($a,"P",{});var dC=s(In);P8r=r(dC,"The model class to instantiate is selected based on the "),WFe=n(dC,"CODE",{});var GTt=s(WFe);$8r=r(GTt,"model_type"),GTt.forEach(t),I8r=r(dC,` property of the config object (either
passed as an argument or loaded from `),HFe=n(dC,"CODE",{});var OTt=s(HFe);q8r=r(OTt,"pretrained_model_name_or_path"),OTt.forEach(t),N8r=r(dC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UFe=n(dC,"CODE",{});var VTt=s(UFe);j8r=r(VTt,"pretrained_model_name_or_path"),VTt.forEach(t),D8r=r(dC,":"),dC.forEach(t),G8r=i($a),Be=n($a,"UL",{});var Oo=s(Be);zM=n(Oo,"LI",{});var gSe=s(zM);JFe=n(gSe,"STRONG",{});var XTt=s(JFe);O8r=r(XTt,"albert"),XTt.forEach(t),V8r=r(gSe," \u2014 "),mH=n(gSe,"A",{href:!0});var zTt=s(mH);X8r=r(zTt,"FlaxAlbertForTokenClassification"),zTt.forEach(t),z8r=r(gSe," (ALBERT model)"),gSe.forEach(t),Q8r=i(Oo),QM=n(Oo,"LI",{});var hSe=s(QM);YFe=n(hSe,"STRONG",{});var QTt=s(YFe);W8r=r(QTt,"bert"),QTt.forEach(t),H8r=r(hSe," \u2014 "),gH=n(hSe,"A",{href:!0});var WTt=s(gH);U8r=r(WTt,"FlaxBertForTokenClassification"),WTt.forEach(t),J8r=r(hSe," (BERT model)"),hSe.forEach(t),Y8r=i(Oo),WM=n(Oo,"LI",{});var pSe=s(WM);KFe=n(pSe,"STRONG",{});var HTt=s(KFe);K8r=r(HTt,"big_bird"),HTt.forEach(t),Z8r=r(pSe," \u2014 "),hH=n(pSe,"A",{href:!0});var UTt=s(hH);e9r=r(UTt,"FlaxBigBirdForTokenClassification"),UTt.forEach(t),o9r=r(pSe," (BigBird model)"),pSe.forEach(t),r9r=i(Oo),HM=n(Oo,"LI",{});var _Se=s(HM);ZFe=n(_Se,"STRONG",{});var JTt=s(ZFe);t9r=r(JTt,"distilbert"),JTt.forEach(t),a9r=r(_Se," \u2014 "),pH=n(_Se,"A",{href:!0});var YTt=s(pH);n9r=r(YTt,"FlaxDistilBertForTokenClassification"),YTt.forEach(t),s9r=r(_Se," (DistilBERT model)"),_Se.forEach(t),l9r=i(Oo),UM=n(Oo,"LI",{});var uSe=s(UM);eve=n(uSe,"STRONG",{});var KTt=s(eve);i9r=r(KTt,"electra"),KTt.forEach(t),d9r=r(uSe," \u2014 "),_H=n(uSe,"A",{href:!0});var ZTt=s(_H);c9r=r(ZTt,"FlaxElectraForTokenClassification"),ZTt.forEach(t),f9r=r(uSe," (ELECTRA model)"),uSe.forEach(t),m9r=i(Oo),JM=n(Oo,"LI",{});var bSe=s(JM);ove=n(bSe,"STRONG",{});var e7t=s(ove);g9r=r(e7t,"roberta"),e7t.forEach(t),h9r=r(bSe," \u2014 "),uH=n(bSe,"A",{href:!0});var o7t=s(uH);p9r=r(o7t,"FlaxRobertaForTokenClassification"),o7t.forEach(t),_9r=r(bSe," (RoBERTa model)"),bSe.forEach(t),u9r=i(Oo),YM=n(Oo,"LI",{});var FSe=s(YM);rve=n(FSe,"STRONG",{});var r7t=s(rve);b9r=r(r7t,"roformer"),r7t.forEach(t),F9r=r(FSe," \u2014 "),bH=n(FSe,"A",{href:!0});var t7t=s(bH);v9r=r(t7t,"FlaxRoFormerForTokenClassification"),t7t.forEach(t),T9r=r(FSe," (RoFormer model)"),FSe.forEach(t),M9r=i(Oo),KM=n(Oo,"LI",{});var vSe=s(KM);tve=n(vSe,"STRONG",{});var a7t=s(tve);E9r=r(a7t,"xlm-roberta"),a7t.forEach(t),C9r=r(vSe," \u2014 "),FH=n(vSe,"A",{href:!0});var n7t=s(FH);w9r=r(n7t,"FlaxXLMRobertaForTokenClassification"),n7t.forEach(t),A9r=r(vSe," (XLM-RoBERTa model)"),vSe.forEach(t),Oo.forEach(t),y9r=i($a),ave=n($a,"P",{});var s7t=s(ave);L9r=r(s7t,"Examples:"),s7t.forEach(t),x9r=i($a),m(BL.$$.fragment,$a),$a.forEach(t),Ai.forEach(t),ABe=i(c),Ef=n(c,"H2",{class:!0});var q$e=s(Ef);ZM=n(q$e,"A",{id:!0,class:!0,href:!0});var l7t=s(ZM);nve=n(l7t,"SPAN",{});var i7t=s(nve);m(PL.$$.fragment,i7t),i7t.forEach(t),l7t.forEach(t),k9r=i(q$e),sve=n(q$e,"SPAN",{});var d7t=s(sve);S9r=r(d7t,"FlaxAutoModelForMultipleChoice"),d7t.forEach(t),q$e.forEach(t),yBe=i(c),Dr=n(c,"DIV",{class:!0});var Li=s(Dr);m($L.$$.fragment,Li),R9r=i(Li),Cf=n(Li,"P",{});var xJ=s(Cf);B9r=r(xJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),vH=n(xJ,"A",{href:!0});var c7t=s(vH);P9r=r(c7t,"from_pretrained()"),c7t.forEach(t),$9r=r(xJ," class method or the "),TH=n(xJ,"A",{href:!0});var f7t=s(TH);I9r=r(f7t,"from_config()"),f7t.forEach(t),q9r=r(xJ,` class
method.`),xJ.forEach(t),N9r=i(Li),IL=n(Li,"P",{});var N$e=s(IL);j9r=r(N$e,"This class cannot be instantiated directly using "),lve=n(N$e,"CODE",{});var m7t=s(lve);D9r=r(m7t,"__init__()"),m7t.forEach(t),G9r=r(N$e," (throws an error)."),N$e.forEach(t),O9r=i(Li),Pt=n(Li,"DIV",{class:!0});var xi=s(Pt);m(qL.$$.fragment,xi),V9r=i(xi),ive=n(xi,"P",{});var g7t=s(ive);X9r=r(g7t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),g7t.forEach(t),z9r=i(xi),wf=n(xi,"P",{});var kJ=s(wf);Q9r=r(kJ,`Note:
Loading a model from its configuration file does `),dve=n(kJ,"STRONG",{});var h7t=s(dve);W9r=r(h7t,"not"),h7t.forEach(t),H9r=r(kJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),MH=n(kJ,"A",{href:!0});var p7t=s(MH);U9r=r(p7t,"from_pretrained()"),p7t.forEach(t),J9r=r(kJ," to load the model weights."),kJ.forEach(t),Y9r=i(xi),cve=n(xi,"P",{});var _7t=s(cve);K9r=r(_7t,"Examples:"),_7t.forEach(t),Z9r=i(xi),m(NL.$$.fragment,xi),xi.forEach(t),exr=i(Li),$o=n(Li,"DIV",{class:!0});var Ia=s($o);m(jL.$$.fragment,Ia),oxr=i(Ia),fve=n(Ia,"P",{});var u7t=s(fve);rxr=r(u7t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),u7t.forEach(t),txr=i(Ia),qn=n(Ia,"P",{});var cC=s(qn);axr=r(cC,"The model class to instantiate is selected based on the "),mve=n(cC,"CODE",{});var b7t=s(mve);nxr=r(b7t,"model_type"),b7t.forEach(t),sxr=r(cC,` property of the config object (either
passed as an argument or loaded from `),gve=n(cC,"CODE",{});var F7t=s(gve);lxr=r(F7t,"pretrained_model_name_or_path"),F7t.forEach(t),ixr=r(cC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hve=n(cC,"CODE",{});var v7t=s(hve);dxr=r(v7t,"pretrained_model_name_or_path"),v7t.forEach(t),cxr=r(cC,":"),cC.forEach(t),fxr=i(Ia),Pe=n(Ia,"UL",{});var Vo=s(Pe);eE=n(Vo,"LI",{});var TSe=s(eE);pve=n(TSe,"STRONG",{});var T7t=s(pve);mxr=r(T7t,"albert"),T7t.forEach(t),gxr=r(TSe," \u2014 "),EH=n(TSe,"A",{href:!0});var M7t=s(EH);hxr=r(M7t,"FlaxAlbertForMultipleChoice"),M7t.forEach(t),pxr=r(TSe," (ALBERT model)"),TSe.forEach(t),_xr=i(Vo),oE=n(Vo,"LI",{});var MSe=s(oE);_ve=n(MSe,"STRONG",{});var E7t=s(_ve);uxr=r(E7t,"bert"),E7t.forEach(t),bxr=r(MSe," \u2014 "),CH=n(MSe,"A",{href:!0});var C7t=s(CH);Fxr=r(C7t,"FlaxBertForMultipleChoice"),C7t.forEach(t),vxr=r(MSe," (BERT model)"),MSe.forEach(t),Txr=i(Vo),rE=n(Vo,"LI",{});var ESe=s(rE);uve=n(ESe,"STRONG",{});var w7t=s(uve);Mxr=r(w7t,"big_bird"),w7t.forEach(t),Exr=r(ESe," \u2014 "),wH=n(ESe,"A",{href:!0});var A7t=s(wH);Cxr=r(A7t,"FlaxBigBirdForMultipleChoice"),A7t.forEach(t),wxr=r(ESe," (BigBird model)"),ESe.forEach(t),Axr=i(Vo),tE=n(Vo,"LI",{});var CSe=s(tE);bve=n(CSe,"STRONG",{});var y7t=s(bve);yxr=r(y7t,"distilbert"),y7t.forEach(t),Lxr=r(CSe," \u2014 "),AH=n(CSe,"A",{href:!0});var L7t=s(AH);xxr=r(L7t,"FlaxDistilBertForMultipleChoice"),L7t.forEach(t),kxr=r(CSe," (DistilBERT model)"),CSe.forEach(t),Sxr=i(Vo),aE=n(Vo,"LI",{});var wSe=s(aE);Fve=n(wSe,"STRONG",{});var x7t=s(Fve);Rxr=r(x7t,"electra"),x7t.forEach(t),Bxr=r(wSe," \u2014 "),yH=n(wSe,"A",{href:!0});var k7t=s(yH);Pxr=r(k7t,"FlaxElectraForMultipleChoice"),k7t.forEach(t),$xr=r(wSe," (ELECTRA model)"),wSe.forEach(t),Ixr=i(Vo),nE=n(Vo,"LI",{});var ASe=s(nE);vve=n(ASe,"STRONG",{});var S7t=s(vve);qxr=r(S7t,"roberta"),S7t.forEach(t),Nxr=r(ASe," \u2014 "),LH=n(ASe,"A",{href:!0});var R7t=s(LH);jxr=r(R7t,"FlaxRobertaForMultipleChoice"),R7t.forEach(t),Dxr=r(ASe," (RoBERTa model)"),ASe.forEach(t),Gxr=i(Vo),sE=n(Vo,"LI",{});var ySe=s(sE);Tve=n(ySe,"STRONG",{});var B7t=s(Tve);Oxr=r(B7t,"roformer"),B7t.forEach(t),Vxr=r(ySe," \u2014 "),xH=n(ySe,"A",{href:!0});var P7t=s(xH);Xxr=r(P7t,"FlaxRoFormerForMultipleChoice"),P7t.forEach(t),zxr=r(ySe," (RoFormer model)"),ySe.forEach(t),Qxr=i(Vo),lE=n(Vo,"LI",{});var LSe=s(lE);Mve=n(LSe,"STRONG",{});var $7t=s(Mve);Wxr=r($7t,"xlm-roberta"),$7t.forEach(t),Hxr=r(LSe," \u2014 "),kH=n(LSe,"A",{href:!0});var I7t=s(kH);Uxr=r(I7t,"FlaxXLMRobertaForMultipleChoice"),I7t.forEach(t),Jxr=r(LSe," (XLM-RoBERTa model)"),LSe.forEach(t),Vo.forEach(t),Yxr=i(Ia),Eve=n(Ia,"P",{});var q7t=s(Eve);Kxr=r(q7t,"Examples:"),q7t.forEach(t),Zxr=i(Ia),m(DL.$$.fragment,Ia),Ia.forEach(t),Li.forEach(t),LBe=i(c),Af=n(c,"H2",{class:!0});var j$e=s(Af);iE=n(j$e,"A",{id:!0,class:!0,href:!0});var N7t=s(iE);Cve=n(N7t,"SPAN",{});var j7t=s(Cve);m(GL.$$.fragment,j7t),j7t.forEach(t),N7t.forEach(t),ekr=i(j$e),wve=n(j$e,"SPAN",{});var D7t=s(wve);okr=r(D7t,"FlaxAutoModelForNextSentencePrediction"),D7t.forEach(t),j$e.forEach(t),xBe=i(c),Gr=n(c,"DIV",{class:!0});var ki=s(Gr);m(OL.$$.fragment,ki),rkr=i(ki),yf=n(ki,"P",{});var SJ=s(yf);tkr=r(SJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),SH=n(SJ,"A",{href:!0});var G7t=s(SH);akr=r(G7t,"from_pretrained()"),G7t.forEach(t),nkr=r(SJ," class method or the "),RH=n(SJ,"A",{href:!0});var O7t=s(RH);skr=r(O7t,"from_config()"),O7t.forEach(t),lkr=r(SJ,` class
method.`),SJ.forEach(t),ikr=i(ki),VL=n(ki,"P",{});var D$e=s(VL);dkr=r(D$e,"This class cannot be instantiated directly using "),Ave=n(D$e,"CODE",{});var V7t=s(Ave);ckr=r(V7t,"__init__()"),V7t.forEach(t),fkr=r(D$e," (throws an error)."),D$e.forEach(t),mkr=i(ki),$t=n(ki,"DIV",{class:!0});var Si=s($t);m(XL.$$.fragment,Si),gkr=i(Si),yve=n(Si,"P",{});var X7t=s(yve);hkr=r(X7t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),X7t.forEach(t),pkr=i(Si),Lf=n(Si,"P",{});var RJ=s(Lf);_kr=r(RJ,`Note:
Loading a model from its configuration file does `),Lve=n(RJ,"STRONG",{});var z7t=s(Lve);ukr=r(z7t,"not"),z7t.forEach(t),bkr=r(RJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),BH=n(RJ,"A",{href:!0});var Q7t=s(BH);Fkr=r(Q7t,"from_pretrained()"),Q7t.forEach(t),vkr=r(RJ," to load the model weights."),RJ.forEach(t),Tkr=i(Si),xve=n(Si,"P",{});var W7t=s(xve);Mkr=r(W7t,"Examples:"),W7t.forEach(t),Ekr=i(Si),m(zL.$$.fragment,Si),Si.forEach(t),Ckr=i(ki),Io=n(ki,"DIV",{class:!0});var qa=s(Io);m(QL.$$.fragment,qa),wkr=i(qa),kve=n(qa,"P",{});var H7t=s(kve);Akr=r(H7t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),H7t.forEach(t),ykr=i(qa),Nn=n(qa,"P",{});var fC=s(Nn);Lkr=r(fC,"The model class to instantiate is selected based on the "),Sve=n(fC,"CODE",{});var U7t=s(Sve);xkr=r(U7t,"model_type"),U7t.forEach(t),kkr=r(fC,` property of the config object (either
passed as an argument or loaded from `),Rve=n(fC,"CODE",{});var J7t=s(Rve);Skr=r(J7t,"pretrained_model_name_or_path"),J7t.forEach(t),Rkr=r(fC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bve=n(fC,"CODE",{});var Y7t=s(Bve);Bkr=r(Y7t,"pretrained_model_name_or_path"),Y7t.forEach(t),Pkr=r(fC,":"),fC.forEach(t),$kr=i(qa),Pve=n(qa,"UL",{});var K7t=s(Pve);dE=n(K7t,"LI",{});var xSe=s(dE);$ve=n(xSe,"STRONG",{});var Z7t=s($ve);Ikr=r(Z7t,"bert"),Z7t.forEach(t),qkr=r(xSe," \u2014 "),PH=n(xSe,"A",{href:!0});var eMt=s(PH);Nkr=r(eMt,"FlaxBertForNextSentencePrediction"),eMt.forEach(t),jkr=r(xSe," (BERT model)"),xSe.forEach(t),K7t.forEach(t),Dkr=i(qa),Ive=n(qa,"P",{});var oMt=s(Ive);Gkr=r(oMt,"Examples:"),oMt.forEach(t),Okr=i(qa),m(WL.$$.fragment,qa),qa.forEach(t),ki.forEach(t),kBe=i(c),xf=n(c,"H2",{class:!0});var G$e=s(xf);cE=n(G$e,"A",{id:!0,class:!0,href:!0});var rMt=s(cE);qve=n(rMt,"SPAN",{});var tMt=s(qve);m(HL.$$.fragment,tMt),tMt.forEach(t),rMt.forEach(t),Vkr=i(G$e),Nve=n(G$e,"SPAN",{});var aMt=s(Nve);Xkr=r(aMt,"FlaxAutoModelForImageClassification"),aMt.forEach(t),G$e.forEach(t),SBe=i(c),Or=n(c,"DIV",{class:!0});var Ri=s(Or);m(UL.$$.fragment,Ri),zkr=i(Ri),kf=n(Ri,"P",{});var BJ=s(kf);Qkr=r(BJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),$H=n(BJ,"A",{href:!0});var nMt=s($H);Wkr=r(nMt,"from_pretrained()"),nMt.forEach(t),Hkr=r(BJ," class method or the "),IH=n(BJ,"A",{href:!0});var sMt=s(IH);Ukr=r(sMt,"from_config()"),sMt.forEach(t),Jkr=r(BJ,` class
method.`),BJ.forEach(t),Ykr=i(Ri),JL=n(Ri,"P",{});var O$e=s(JL);Kkr=r(O$e,"This class cannot be instantiated directly using "),jve=n(O$e,"CODE",{});var lMt=s(jve);Zkr=r(lMt,"__init__()"),lMt.forEach(t),eSr=r(O$e," (throws an error)."),O$e.forEach(t),oSr=i(Ri),It=n(Ri,"DIV",{class:!0});var Bi=s(It);m(YL.$$.fragment,Bi),rSr=i(Bi),Dve=n(Bi,"P",{});var iMt=s(Dve);tSr=r(iMt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),iMt.forEach(t),aSr=i(Bi),Sf=n(Bi,"P",{});var PJ=s(Sf);nSr=r(PJ,`Note:
Loading a model from its configuration file does `),Gve=n(PJ,"STRONG",{});var dMt=s(Gve);sSr=r(dMt,"not"),dMt.forEach(t),lSr=r(PJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),qH=n(PJ,"A",{href:!0});var cMt=s(qH);iSr=r(cMt,"from_pretrained()"),cMt.forEach(t),dSr=r(PJ," to load the model weights."),PJ.forEach(t),cSr=i(Bi),Ove=n(Bi,"P",{});var fMt=s(Ove);fSr=r(fMt,"Examples:"),fMt.forEach(t),mSr=i(Bi),m(KL.$$.fragment,Bi),Bi.forEach(t),gSr=i(Ri),qo=n(Ri,"DIV",{class:!0});var Na=s(qo);m(ZL.$$.fragment,Na),hSr=i(Na),Vve=n(Na,"P",{});var mMt=s(Vve);pSr=r(mMt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),mMt.forEach(t),_Sr=i(Na),jn=n(Na,"P",{});var mC=s(jn);uSr=r(mC,"The model class to instantiate is selected based on the "),Xve=n(mC,"CODE",{});var gMt=s(Xve);bSr=r(gMt,"model_type"),gMt.forEach(t),FSr=r(mC,` property of the config object (either
passed as an argument or loaded from `),zve=n(mC,"CODE",{});var hMt=s(zve);vSr=r(hMt,"pretrained_model_name_or_path"),hMt.forEach(t),TSr=r(mC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qve=n(mC,"CODE",{});var pMt=s(Qve);MSr=r(pMt,"pretrained_model_name_or_path"),pMt.forEach(t),ESr=r(mC,":"),mC.forEach(t),CSr=i(Na),e8=n(Na,"UL",{});var V$e=s(e8);fE=n(V$e,"LI",{});var kSe=s(fE);Wve=n(kSe,"STRONG",{});var _Mt=s(Wve);wSr=r(_Mt,"beit"),_Mt.forEach(t),ASr=r(kSe," \u2014 "),NH=n(kSe,"A",{href:!0});var uMt=s(NH);ySr=r(uMt,"FlaxBeitForImageClassification"),uMt.forEach(t),LSr=r(kSe," (BEiT model)"),kSe.forEach(t),xSr=i(V$e),mE=n(V$e,"LI",{});var SSe=s(mE);Hve=n(SSe,"STRONG",{});var bMt=s(Hve);kSr=r(bMt,"vit"),bMt.forEach(t),SSr=r(SSe," \u2014 "),jH=n(SSe,"A",{href:!0});var FMt=s(jH);RSr=r(FMt,"FlaxViTForImageClassification"),FMt.forEach(t),BSr=r(SSe," (ViT model)"),SSe.forEach(t),V$e.forEach(t),PSr=i(Na),Uve=n(Na,"P",{});var vMt=s(Uve);$Sr=r(vMt,"Examples:"),vMt.forEach(t),ISr=i(Na),m(o8.$$.fragment,Na),Na.forEach(t),Ri.forEach(t),RBe=i(c),Rf=n(c,"H2",{class:!0});var X$e=s(Rf);gE=n(X$e,"A",{id:!0,class:!0,href:!0});var TMt=s(gE);Jve=n(TMt,"SPAN",{});var MMt=s(Jve);m(r8.$$.fragment,MMt),MMt.forEach(t),TMt.forEach(t),qSr=i(X$e),Yve=n(X$e,"SPAN",{});var EMt=s(Yve);NSr=r(EMt,"FlaxAutoModelForVision2Seq"),EMt.forEach(t),X$e.forEach(t),BBe=i(c),Vr=n(c,"DIV",{class:!0});var Pi=s(Vr);m(t8.$$.fragment,Pi),jSr=i(Pi),Bf=n(Pi,"P",{});var $J=s(Bf);DSr=r($J,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),DH=n($J,"A",{href:!0});var CMt=s(DH);GSr=r(CMt,"from_pretrained()"),CMt.forEach(t),OSr=r($J," class method or the "),GH=n($J,"A",{href:!0});var wMt=s(GH);VSr=r(wMt,"from_config()"),wMt.forEach(t),XSr=r($J,` class
method.`),$J.forEach(t),zSr=i(Pi),a8=n(Pi,"P",{});var z$e=s(a8);QSr=r(z$e,"This class cannot be instantiated directly using "),Kve=n(z$e,"CODE",{});var AMt=s(Kve);WSr=r(AMt,"__init__()"),AMt.forEach(t),HSr=r(z$e," (throws an error)."),z$e.forEach(t),USr=i(Pi),qt=n(Pi,"DIV",{class:!0});var $i=s(qt);m(n8.$$.fragment,$i),JSr=i($i),Zve=n($i,"P",{});var yMt=s(Zve);YSr=r(yMt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),yMt.forEach(t),KSr=i($i),Pf=n($i,"P",{});var IJ=s(Pf);ZSr=r(IJ,`Note:
Loading a model from its configuration file does `),e6e=n(IJ,"STRONG",{});var LMt=s(e6e);eRr=r(LMt,"not"),LMt.forEach(t),oRr=r(IJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),OH=n(IJ,"A",{href:!0});var xMt=s(OH);rRr=r(xMt,"from_pretrained()"),xMt.forEach(t),tRr=r(IJ," to load the model weights."),IJ.forEach(t),aRr=i($i),o6e=n($i,"P",{});var kMt=s(o6e);nRr=r(kMt,"Examples:"),kMt.forEach(t),sRr=i($i),m(s8.$$.fragment,$i),$i.forEach(t),lRr=i(Pi),No=n(Pi,"DIV",{class:!0});var ja=s(No);m(l8.$$.fragment,ja),iRr=i(ja),r6e=n(ja,"P",{});var SMt=s(r6e);dRr=r(SMt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),SMt.forEach(t),cRr=i(ja),Dn=n(ja,"P",{});var gC=s(Dn);fRr=r(gC,"The model class to instantiate is selected based on the "),t6e=n(gC,"CODE",{});var RMt=s(t6e);mRr=r(RMt,"model_type"),RMt.forEach(t),gRr=r(gC,` property of the config object (either
passed as an argument or loaded from `),a6e=n(gC,"CODE",{});var BMt=s(a6e);hRr=r(BMt,"pretrained_model_name_or_path"),BMt.forEach(t),pRr=r(gC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n6e=n(gC,"CODE",{});var PMt=s(n6e);_Rr=r(PMt,"pretrained_model_name_or_path"),PMt.forEach(t),uRr=r(gC,":"),gC.forEach(t),bRr=i(ja),s6e=n(ja,"UL",{});var $Mt=s(s6e);hE=n($Mt,"LI",{});var RSe=s(hE);l6e=n(RSe,"STRONG",{});var IMt=s(l6e);FRr=r(IMt,"vision-encoder-decoder"),IMt.forEach(t),vRr=r(RSe," \u2014 "),VH=n(RSe,"A",{href:!0});var qMt=s(VH);TRr=r(qMt,"FlaxVisionEncoderDecoderModel"),qMt.forEach(t),MRr=r(RSe," (Vision Encoder decoder model)"),RSe.forEach(t),$Mt.forEach(t),ERr=i(ja),i6e=n(ja,"P",{});var NMt=s(i6e);CRr=r(NMt,"Examples:"),NMt.forEach(t),wRr=i(ja),m(i8.$$.fragment,ja),ja.forEach(t),Pi.forEach(t),this.h()},h(){d(Z,"name","hf:doc:metadata"),d(Z,"content",JSON.stringify(HMt)),d(Ce,"id","auto-classes"),d(Ce,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ce,"href","#auto-classes"),d(de,"class","relative group"),d(Gn,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.AutoConfig"),d(Vn,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.AutoModel"),d(Xn,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.AutoTokenizer"),d(Oi,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertModel"),d(Gf,"id","extending-the-auto-classes"),d(Gf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Gf,"href","#extending-the-auto-classes"),d(Vi,"class","relative group"),d(Vf,"id","transformers.AutoConfig"),d(Vf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Vf,"href","#transformers.AutoConfig"),d(Xi,"class","relative group"),d(m9,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),d(g9,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig"),d(h9,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartConfig"),d(p9,"href","/docs/transformers/pr_16473/en/model_doc/beit#transformers.BeitConfig"),d(_9,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig"),d(u9,"href","/docs/transformers/pr_16473/en/model_doc/bert-generation#transformers.BertGenerationConfig"),d(b9,"href","/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdConfig"),d(F9,"href","/docs/transformers/pr_16473/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),d(v9,"href","/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.BlenderbotConfig"),d(T9,"href","/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),d(M9,"href","/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertConfig"),d(E9,"href","/docs/transformers/pr_16473/en/model_doc/canine#transformers.CanineConfig"),d(C9,"href","/docs/transformers/pr_16473/en/model_doc/clip#transformers.CLIPConfig"),d(w9,"href","/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertConfig"),d(A9,"href","/docs/transformers/pr_16473/en/model_doc/convnext#transformers.ConvNextConfig"),d(y9,"href","/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.CTRLConfig"),d(L9,"href","/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),d(x9,"href","/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextConfig"),d(k9,"href","/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaConfig"),d(S9,"href","/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2Config"),d(R9,"href","/docs/transformers/pr_16473/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),d(B9,"href","/docs/transformers/pr_16473/en/model_doc/deit#transformers.DeiTConfig"),d(P9,"href","/docs/transformers/pr_16473/en/model_doc/detr#transformers.DetrConfig"),d($9,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig"),d(I9,"href","/docs/transformers/pr_16473/en/model_doc/dpr#transformers.DPRConfig"),d(q9,"href","/docs/transformers/pr_16473/en/model_doc/dpt#transformers.DPTConfig"),d(N9,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig"),d(j9,"href","/docs/transformers/pr_16473/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),d(D9,"href","/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertConfig"),d(G9,"href","/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetConfig"),d(O9,"href","/docs/transformers/pr_16473/en/model_doc/fsmt#transformers.FSMTConfig"),d(V9,"href","/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelConfig"),d(X9,"href","/docs/transformers/pr_16473/en/model_doc/glpn#transformers.GLPNConfig"),d(z9,"href","/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2Config"),d(Q9,"href","/docs/transformers/pr_16473/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),d(W9,"href","/docs/transformers/pr_16473/en/model_doc/gptj#transformers.GPTJConfig"),d(H9,"href","/docs/transformers/pr_16473/en/model_doc/hubert#transformers.HubertConfig"),d(U9,"href","/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertConfig"),d(J9,"href","/docs/transformers/pr_16473/en/model_doc/imagegpt#transformers.ImageGPTConfig"),d(Y9,"href","/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMConfig"),d(K9,"href","/docs/transformers/pr_16473/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),d(Z9,"href","/docs/transformers/pr_16473/en/model_doc/led#transformers.LEDConfig"),d(ex,"href","/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerConfig"),d(ox,"href","/docs/transformers/pr_16473/en/model_doc/luke#transformers.LukeConfig"),d(rx,"href","/docs/transformers/pr_16473/en/model_doc/lxmert#transformers.LxmertConfig"),d(tx,"href","/docs/transformers/pr_16473/en/model_doc/m2m_100#transformers.M2M100Config"),d(ax,"href","/docs/transformers/pr_16473/en/model_doc/marian#transformers.MarianConfig"),d(nx,"href","/docs/transformers/pr_16473/en/model_doc/maskformer#transformers.MaskFormerConfig"),d(sx,"href","/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartConfig"),d(lx,"href","/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),d(ix,"href","/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertConfig"),d(dx,"href","/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetConfig"),d(cx,"href","/docs/transformers/pr_16473/en/model_doc/mt5#transformers.MT5Config"),d(fx,"href","/docs/transformers/pr_16473/en/model_doc/nystromformer#transformers.NystromformerConfig"),d(mx,"href","/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),d(gx,"href","/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.PegasusConfig"),d(hx,"href","/docs/transformers/pr_16473/en/model_doc/perceiver#transformers.PerceiverConfig"),d(px,"href","/docs/transformers/pr_16473/en/model_doc/plbart#transformers.PLBartConfig"),d(_x,"href","/docs/transformers/pr_16473/en/model_doc/poolformer#transformers.PoolFormerConfig"),d(ux,"href","/docs/transformers/pr_16473/en/model_doc/prophetnet#transformers.ProphetNetConfig"),d(bx,"href","/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertConfig"),d(Fx,"href","/docs/transformers/pr_16473/en/model_doc/rag#transformers.RagConfig"),d(vx,"href","/docs/transformers/pr_16473/en/model_doc/realm#transformers.RealmConfig"),d(Tx,"href","/docs/transformers/pr_16473/en/model_doc/reformer#transformers.ReformerConfig"),d(Mx,"href","/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertConfig"),d(Ex,"href","/docs/transformers/pr_16473/en/model_doc/resnet#transformers.ResNetConfig"),d(Cx,"href","/docs/transformers/pr_16473/en/model_doc/retribert#transformers.RetriBertConfig"),d(wx,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig"),d(Ax,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig"),d(yx,"href","/docs/transformers/pr_16473/en/model_doc/segformer#transformers.SegformerConfig"),d(Lx,"href","/docs/transformers/pr_16473/en/model_doc/sew#transformers.SEWConfig"),d(xx,"href","/docs/transformers/pr_16473/en/model_doc/sew-d#transformers.SEWDConfig"),d(kx,"href","/docs/transformers/pr_16473/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),d(Sx,"href","/docs/transformers/pr_16473/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),d(Rx,"href","/docs/transformers/pr_16473/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),d(Bx,"href","/docs/transformers/pr_16473/en/model_doc/splinter#transformers.SplinterConfig"),d(Px,"href","/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),d($x,"href","/docs/transformers/pr_16473/en/model_doc/swin#transformers.SwinConfig"),d(Ix,"href","/docs/transformers/pr_16473/en/model_doc/t5#transformers.T5Config"),d(qx,"href","/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasConfig"),d(Nx,"href","/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),d(jx,"href","/docs/transformers/pr_16473/en/model_doc/trocr#transformers.TrOCRConfig"),d(Dx,"href","/docs/transformers/pr_16473/en/model_doc/unispeech#transformers.UniSpeechConfig"),d(Gx,"href","/docs/transformers/pr_16473/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),d(Ox,"href","/docs/transformers/pr_16473/en/model_doc/van#transformers.VanConfig"),d(Vx,"href","/docs/transformers/pr_16473/en/model_doc/vilt#transformers.ViltConfig"),d(Xx,"href","/docs/transformers/pr_16473/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),d(zx,"href","/docs/transformers/pr_16473/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),d(Qx,"href","/docs/transformers/pr_16473/en/model_doc/visual_bert#transformers.VisualBertConfig"),d(Wx,"href","/docs/transformers/pr_16473/en/model_doc/vit#transformers.ViTConfig"),d(Hx,"href","/docs/transformers/pr_16473/en/model_doc/vit_mae#transformers.ViTMAEConfig"),d(Ux,"href","/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),d(Jx,"href","/docs/transformers/pr_16473/en/model_doc/wavlm#transformers.WavLMConfig"),d(Yx,"href","/docs/transformers/pr_16473/en/model_doc/xglm#transformers.XGLMConfig"),d(Kx,"href","/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMConfig"),d(Zx,"href","/docs/transformers/pr_16473/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),d(ek,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),d(ok,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),d(rk,"href","/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetConfig"),d(tk,"href","/docs/transformers/pr_16473/en/model_doc/yoso#transformers.YosoConfig"),d(mo,"class","docstring"),d($g,"class","docstring"),d(Qo,"class","docstring"),d(Ig,"id","transformers.AutoTokenizer"),d(Ig,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ig,"href","#transformers.AutoTokenizer"),d(Qi,"class","relative group"),d(ak,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),d(nk,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertTokenizer"),d(sk,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(lk,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartTokenizer"),d(ik,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartTokenizerFast"),d(dk,"href","/docs/transformers/pr_16473/en/model_doc/barthez#transformers.BarthezTokenizer"),d(ck,"href","/docs/transformers/pr_16473/en/model_doc/barthez#transformers.BarthezTokenizerFast"),d(fk,"href","/docs/transformers/pr_16473/en/model_doc/bartpho#transformers.BartphoTokenizer"),d(mk,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertTokenizer"),d(gk,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertTokenizerFast"),d(hk,"href","/docs/transformers/pr_16473/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),d(pk,"href","/docs/transformers/pr_16473/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),d(_k,"href","/docs/transformers/pr_16473/en/model_doc/bertweet#transformers.BertweetTokenizer"),d(uk,"href","/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdTokenizer"),d(bk,"href","/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),d(Fk,"href","/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(vk,"href","/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(Tk,"href","/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),d(Mk,"href","/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),d(Ek,"href","/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),d(Ck,"href","/docs/transformers/pr_16473/en/model_doc/byt5#transformers.ByT5Tokenizer"),d(wk,"href","/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertTokenizer"),d(Ak,"href","/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertTokenizerFast"),d(yk,"href","/docs/transformers/pr_16473/en/model_doc/canine#transformers.CanineTokenizer"),d(Lk,"href","/docs/transformers/pr_16473/en/model_doc/clip#transformers.CLIPTokenizer"),d(xk,"href","/docs/transformers/pr_16473/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(kk,"href","/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertTokenizer"),d(Sk,"href","/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),d(Rk,"href","/docs/transformers/pr_16473/en/model_doc/cpm#transformers.CpmTokenizer"),d(Bk,"href","/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.CTRLTokenizer"),d(Pk,"href","/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaTokenizer"),d($k,"href","/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaTokenizerFast"),d(Ik,"href","/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),d(qk,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertTokenizer"),d(Nk,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),d(jk,"href","/docs/transformers/pr_16473/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),d(Dk,"href","/docs/transformers/pr_16473/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),d(Gk,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraTokenizer"),d(Ok,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraTokenizerFast"),d(Vk,"href","/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertTokenizer"),d(Xk,"href","/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetTokenizer"),d(zk,"href","/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetTokenizerFast"),d(Qk,"href","/docs/transformers/pr_16473/en/model_doc/fsmt#transformers.FSMTTokenizer"),d(Wk,"href","/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelTokenizer"),d(Hk,"href","/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelTokenizerFast"),d(Uk,"href","/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(Jk,"href","/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(Yk,"href","/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(Kk,"href","/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(Zk,"href","/docs/transformers/pr_16473/en/model_doc/herbert#transformers.HerbertTokenizer"),d(eS,"href","/docs/transformers/pr_16473/en/model_doc/herbert#transformers.HerbertTokenizerFast"),d(oS,"href","/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(rS,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaTokenizer"),d(tS,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(aS,"href","/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),d(nS,"href","/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),d(sS,"href","/docs/transformers/pr_16473/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),d(lS,"href","/docs/transformers/pr_16473/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),d(iS,"href","/docs/transformers/pr_16473/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),d(dS,"href","/docs/transformers/pr_16473/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),d(cS,"href","/docs/transformers/pr_16473/en/model_doc/led#transformers.LEDTokenizer"),d(fS,"href","/docs/transformers/pr_16473/en/model_doc/led#transformers.LEDTokenizerFast"),d(mS,"href","/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerTokenizer"),d(gS,"href","/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerTokenizerFast"),d(hS,"href","/docs/transformers/pr_16473/en/model_doc/luke#transformers.LukeTokenizer"),d(pS,"href","/docs/transformers/pr_16473/en/model_doc/lxmert#transformers.LxmertTokenizer"),d(_S,"href","/docs/transformers/pr_16473/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),d(uS,"href","/docs/transformers/pr_16473/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),d(bS,"href","/docs/transformers/pr_16473/en/model_doc/marian#transformers.MarianTokenizer"),d(FS,"href","/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartTokenizer"),d(vS,"href","/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartTokenizerFast"),d(TS,"href","/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBart50Tokenizer"),d(MS,"href","/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBart50TokenizerFast"),d(ES,"href","/docs/transformers/pr_16473/en/model_doc/mluke#transformers.MLukeTokenizer"),d(CS,"href","/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),d(wS,"href","/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),d(AS,"href","/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetTokenizer"),d(yS,"href","/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),d(LS,"href","/docs/transformers/pr_16473/en/model_doc/mt5#transformers.T5Tokenizer"),d(xS,"href","/docs/transformers/pr_16473/en/model_doc/mt5#transformers.T5TokenizerFast"),d(kS,"href","/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),d(SS,"href","/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),d(RS,"href","/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(BS,"href","/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(PS,"href","/docs/transformers/pr_16473/en/model_doc/perceiver#transformers.PerceiverTokenizer"),d($S,"href","/docs/transformers/pr_16473/en/model_doc/phobert#transformers.PhobertTokenizer"),d(IS,"href","/docs/transformers/pr_16473/en/model_doc/plbart#transformers.PLBartTokenizer"),d(qS,"href","/docs/transformers/pr_16473/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),d(NS,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertTokenizer"),d(jS,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertTokenizerFast"),d(DS,"href","/docs/transformers/pr_16473/en/model_doc/rag#transformers.RagTokenizer"),d(GS,"href","/docs/transformers/pr_16473/en/model_doc/realm#transformers.RealmTokenizer"),d(OS,"href","/docs/transformers/pr_16473/en/model_doc/realm#transformers.RealmTokenizerFast"),d(VS,"href","/docs/transformers/pr_16473/en/model_doc/reformer#transformers.ReformerTokenizer"),d(XS,"href","/docs/transformers/pr_16473/en/model_doc/reformer#transformers.ReformerTokenizerFast"),d(zS,"href","/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertTokenizer"),d(QS,"href","/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertTokenizerFast"),d(WS,"href","/docs/transformers/pr_16473/en/model_doc/retribert#transformers.RetriBertTokenizer"),d(HS,"href","/docs/transformers/pr_16473/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),d(US,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaTokenizer"),d(JS,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(YS,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerTokenizer"),d(KS,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),d(ZS,"href","/docs/transformers/pr_16473/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),d(eR,"href","/docs/transformers/pr_16473/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),d(oR,"href","/docs/transformers/pr_16473/en/model_doc/splinter#transformers.SplinterTokenizer"),d(rR,"href","/docs/transformers/pr_16473/en/model_doc/splinter#transformers.SplinterTokenizerFast"),d(tR,"href","/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),d(aR,"href","/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),d(nR,"href","/docs/transformers/pr_16473/en/model_doc/mt5#transformers.T5Tokenizer"),d(sR,"href","/docs/transformers/pr_16473/en/model_doc/mt5#transformers.T5TokenizerFast"),d(lR,"href","/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasTokenizer"),d(iR,"href","/docs/transformers/pr_16473/en/model_doc/tapex#transformers.TapexTokenizer"),d(dR,"href","/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),d(cR,"href","/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(fR,"href","/docs/transformers/pr_16473/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),d(mR,"href","/docs/transformers/pr_16473/en/model_doc/xglm#transformers.XGLMTokenizer"),d(gR,"href","/docs/transformers/pr_16473/en/model_doc/xglm#transformers.XGLMTokenizerFast"),d(hR,"href","/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMTokenizer"),d(pR,"href","/docs/transformers/pr_16473/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),d(_R,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),d(uR,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),d(bR,"href","/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetTokenizer"),d(FR,"href","/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),d(go,"class","docstring"),d(gh,"class","docstring"),d(Wo,"class","docstring"),d(hh,"id","transformers.AutoFeatureExtractor"),d(hh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(hh,"href","#transformers.AutoFeatureExtractor"),d(Wi,"class","relative group"),d(vR,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),d(TR,"href","/docs/transformers/pr_16473/en/model_doc/beit#transformers.BeitFeatureExtractor"),d(MR,"href","/docs/transformers/pr_16473/en/model_doc/clip#transformers.CLIPFeatureExtractor"),d(ER,"href","/docs/transformers/pr_16473/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(CR,"href","/docs/transformers/pr_16473/en/model_doc/deit#transformers.DeiTFeatureExtractor"),d(wR,"href","/docs/transformers/pr_16473/en/model_doc/detr#transformers.DetrFeatureExtractor"),d(AR,"href","/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(yR,"href","/docs/transformers/pr_16473/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),d(LR,"href","/docs/transformers/pr_16473/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),d(xR,"href","/docs/transformers/pr_16473/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),d(kR,"href","/docs/transformers/pr_16473/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),d(SR,"href","/docs/transformers/pr_16473/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(RR,"href","/docs/transformers/pr_16473/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),d(BR,"href","/docs/transformers/pr_16473/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),d(PR,"href","/docs/transformers/pr_16473/en/model_doc/vit#transformers.ViTFeatureExtractor"),d($R,"href","/docs/transformers/pr_16473/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(IR,"href","/docs/transformers/pr_16473/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(qR,"href","/docs/transformers/pr_16473/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(NR,"href","/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d($e,"class","docstring"),d(Ph,"class","docstring"),d(Ho,"class","docstring"),d($h,"id","transformers.AutoProcessor"),d($h,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d($h,"href","#transformers.AutoProcessor"),d(Hi,"class","relative group"),d(jR,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),d(DR,"href","/docs/transformers/pr_16473/en/model_doc/clip#transformers.CLIPProcessor"),d(GR,"href","/docs/transformers/pr_16473/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),d(OR,"href","/docs/transformers/pr_16473/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),d(VR,"href","/docs/transformers/pr_16473/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),d(XR,"href","/docs/transformers/pr_16473/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),d(zR,"href","/docs/transformers/pr_16473/en/model_doc/trocr#transformers.TrOCRProcessor"),d(QR,"href","/docs/transformers/pr_16473/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),d(WR,"href","/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(Ie,"class","docstring"),d(zh,"class","docstring"),d(Uo,"class","docstring"),d(Qh,"id","transformers.AutoModel"),d(Qh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Qh,"href","#transformers.AutoModel"),d(Ji,"class","relative group"),d(HR,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(UR,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(JR,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Xr,"class","docstring"),d(YR,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertModel"),d(KR,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartModel"),d(ZR,"href","/docs/transformers/pr_16473/en/model_doc/beit#transformers.BeitModel"),d(eB,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertModel"),d(oB,"href","/docs/transformers/pr_16473/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),d(rB,"href","/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdModel"),d(tB,"href","/docs/transformers/pr_16473/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),d(aB,"href","/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.BlenderbotModel"),d(nB,"href","/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),d(sB,"href","/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertModel"),d(lB,"href","/docs/transformers/pr_16473/en/model_doc/canine#transformers.CanineModel"),d(iB,"href","/docs/transformers/pr_16473/en/model_doc/clip#transformers.CLIPModel"),d(dB,"href","/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertModel"),d(cB,"href","/docs/transformers/pr_16473/en/model_doc/convnext#transformers.ConvNextModel"),d(fB,"href","/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.CTRLModel"),d(mB,"href","/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecAudioModel"),d(gB,"href","/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextModel"),d(hB,"href","/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaModel"),d(pB,"href","/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2Model"),d(_B,"href","/docs/transformers/pr_16473/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),d(uB,"href","/docs/transformers/pr_16473/en/model_doc/deit#transformers.DeiTModel"),d(bB,"href","/docs/transformers/pr_16473/en/model_doc/detr#transformers.DetrModel"),d(FB,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertModel"),d(vB,"href","/docs/transformers/pr_16473/en/model_doc/dpr#transformers.DPRQuestionEncoder"),d(TB,"href","/docs/transformers/pr_16473/en/model_doc/dpt#transformers.DPTModel"),d(MB,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraModel"),d(EB,"href","/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertModel"),d(CB,"href","/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetModel"),d(wB,"href","/docs/transformers/pr_16473/en/model_doc/fsmt#transformers.FSMTModel"),d(AB,"href","/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelModel"),d(yB,"href","/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelBaseModel"),d(LB,"href","/docs/transformers/pr_16473/en/model_doc/glpn#transformers.GLPNModel"),d(xB,"href","/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2Model"),d(kB,"href","/docs/transformers/pr_16473/en/model_doc/gpt_neo#transformers.GPTNeoModel"),d(SB,"href","/docs/transformers/pr_16473/en/model_doc/gptj#transformers.GPTJModel"),d(RB,"href","/docs/transformers/pr_16473/en/model_doc/hubert#transformers.HubertModel"),d(BB,"href","/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertModel"),d(PB,"href","/docs/transformers/pr_16473/en/model_doc/imagegpt#transformers.ImageGPTModel"),d($B,"href","/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMModel"),d(IB,"href","/docs/transformers/pr_16473/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),d(qB,"href","/docs/transformers/pr_16473/en/model_doc/led#transformers.LEDModel"),d(NB,"href","/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerModel"),d(jB,"href","/docs/transformers/pr_16473/en/model_doc/luke#transformers.LukeModel"),d(DB,"href","/docs/transformers/pr_16473/en/model_doc/lxmert#transformers.LxmertModel"),d(GB,"href","/docs/transformers/pr_16473/en/model_doc/m2m_100#transformers.M2M100Model"),d(OB,"href","/docs/transformers/pr_16473/en/model_doc/marian#transformers.MarianModel"),d(VB,"href","/docs/transformers/pr_16473/en/model_doc/maskformer#transformers.MaskFormerModel"),d(XB,"href","/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartModel"),d(zB,"href","/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertModel"),d(QB,"href","/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertModel"),d(WB,"href","/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetModel"),d(HB,"href","/docs/transformers/pr_16473/en/model_doc/mt5#transformers.MT5Model"),d(UB,"href","/docs/transformers/pr_16473/en/model_doc/nystromformer#transformers.NystromformerModel"),d(JB,"href","/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),d(YB,"href","/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.PegasusModel"),d(KB,"href","/docs/transformers/pr_16473/en/model_doc/perceiver#transformers.PerceiverModel"),d(ZB,"href","/docs/transformers/pr_16473/en/model_doc/plbart#transformers.PLBartModel"),d(eP,"href","/docs/transformers/pr_16473/en/model_doc/poolformer#transformers.PoolFormerModel"),d(oP,"href","/docs/transformers/pr_16473/en/model_doc/prophetnet#transformers.ProphetNetModel"),d(rP,"href","/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertModel"),d(tP,"href","/docs/transformers/pr_16473/en/model_doc/reformer#transformers.ReformerModel"),d(aP,"href","/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertModel"),d(nP,"href","/docs/transformers/pr_16473/en/model_doc/resnet#transformers.ResNetModel"),d(sP,"href","/docs/transformers/pr_16473/en/model_doc/retribert#transformers.RetriBertModel"),d(lP,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaModel"),d(iP,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerModel"),d(dP,"href","/docs/transformers/pr_16473/en/model_doc/segformer#transformers.SegformerModel"),d(cP,"href","/docs/transformers/pr_16473/en/model_doc/sew#transformers.SEWModel"),d(fP,"href","/docs/transformers/pr_16473/en/model_doc/sew-d#transformers.SEWDModel"),d(mP,"href","/docs/transformers/pr_16473/en/model_doc/speech_to_text#transformers.Speech2TextModel"),d(gP,"href","/docs/transformers/pr_16473/en/model_doc/splinter#transformers.SplinterModel"),d(hP,"href","/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertModel"),d(pP,"href","/docs/transformers/pr_16473/en/model_doc/swin#transformers.SwinModel"),d(_P,"href","/docs/transformers/pr_16473/en/model_doc/t5#transformers.T5Model"),d(uP,"href","/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasModel"),d(bP,"href","/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TransfoXLModel"),d(FP,"href","/docs/transformers/pr_16473/en/model_doc/unispeech#transformers.UniSpeechModel"),d(vP,"href","/docs/transformers/pr_16473/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),d(TP,"href","/docs/transformers/pr_16473/en/model_doc/van#transformers.VanModel"),d(MP,"href","/docs/transformers/pr_16473/en/model_doc/vilt#transformers.ViltModel"),d(EP,"href","/docs/transformers/pr_16473/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),d(CP,"href","/docs/transformers/pr_16473/en/model_doc/visual_bert#transformers.VisualBertModel"),d(wP,"href","/docs/transformers/pr_16473/en/model_doc/vit#transformers.ViTModel"),d(AP,"href","/docs/transformers/pr_16473/en/model_doc/vit_mae#transformers.ViTMAEModel"),d(yP,"href","/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),d(LP,"href","/docs/transformers/pr_16473/en/model_doc/wavlm#transformers.WavLMModel"),d(xP,"href","/docs/transformers/pr_16473/en/model_doc/xglm#transformers.XGLMModel"),d(kP,"href","/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMModel"),d(SP,"href","/docs/transformers/pr_16473/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),d(RP,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),d(BP,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),d(PP,"href","/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetModel"),d($P,"href","/docs/transformers/pr_16473/en/model_doc/yoso#transformers.YosoModel"),d(qe,"class","docstring"),d(Jo,"class","docstring"),d(S_,"id","transformers.AutoModelForPreTraining"),d(S_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(S_,"href","#transformers.AutoModelForPreTraining"),d(Zi,"class","relative group"),d(IP,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qP,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(NP,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zr,"class","docstring"),d(jP,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertForPreTraining"),d(DP,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(GP,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertForPreTraining"),d(OP,"href","/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),d(VP,"href","/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(XP,"href","/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(zP,"href","/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(QP,"href","/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(WP,"href","/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(HP,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(UP,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraForPreTraining"),d(JP,"href","/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(YP,"href","/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetForPreTraining"),d(KP,"href","/docs/transformers/pr_16473/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(ZP,"href","/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelForPreTraining"),d(e$,"href","/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(o$,"href","/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(r$,"href","/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(t$,"href","/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(a$,"href","/docs/transformers/pr_16473/en/model_doc/lxmert#transformers.LxmertForPreTraining"),d(n$,"href","/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),d(s$,"href","/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),d(l$,"href","/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(i$,"href","/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(d$,"href","/docs/transformers/pr_16473/en/model_doc/retribert#transformers.RetriBertModel"),d(c$,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(f$,"href","/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(m$,"href","/docs/transformers/pr_16473/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(g$,"href","/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(h$,"href","/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(p$,"href","/docs/transformers/pr_16473/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),d(_$,"href","/docs/transformers/pr_16473/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),d(u$,"href","/docs/transformers/pr_16473/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),d(b$,"href","/docs/transformers/pr_16473/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),d(F$,"href","/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),d(v$,"href","/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(T$,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(M$,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(E$,"href","/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(Ne,"class","docstring"),d(Yo,"class","docstring"),d(bu,"id","transformers.AutoModelForCausalLM"),d(bu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(bu,"href","#transformers.AutoModelForCausalLM"),d(rd,"class","relative group"),d(C$,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(w$,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(A$,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Qr,"class","docstring"),d(y$,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartForCausalLM"),d(L$,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertLMHeadModel"),d(x$,"href","/docs/transformers/pr_16473/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),d(k$,"href","/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),d(S$,"href","/docs/transformers/pr_16473/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),d(R$,"href","/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),d(B$,"href","/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),d(P$,"href","/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertForCausalLM"),d($$,"href","/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(I$,"href","/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),d(q$,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraForCausalLM"),d(N$,"href","/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(j$,"href","/docs/transformers/pr_16473/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),d(D$,"href","/docs/transformers/pr_16473/en/model_doc/gptj#transformers.GPTJForCausalLM"),d(G$,"href","/docs/transformers/pr_16473/en/model_doc/marian#transformers.MarianForCausalLM"),d(O$,"href","/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartForCausalLM"),d(V$,"href","/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),d(X$,"href","/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(z$,"href","/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.PegasusForCausalLM"),d(Q$,"href","/docs/transformers/pr_16473/en/model_doc/plbart#transformers.PLBartForCausalLM"),d(W$,"href","/docs/transformers/pr_16473/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),d(H$,"href","/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),d(U$,"href","/docs/transformers/pr_16473/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),d(J$,"href","/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertForCausalLM"),d(Y$,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaForCausalLM"),d(K$,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerForCausalLM"),d(Z$,"href","/docs/transformers/pr_16473/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),d(eI,"href","/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(oI,"href","/docs/transformers/pr_16473/en/model_doc/trocr#transformers.TrOCRForCausalLM"),d(rI,"href","/docs/transformers/pr_16473/en/model_doc/xglm#transformers.XGLMForCausalLM"),d(tI,"href","/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(aI,"href","/docs/transformers/pr_16473/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),d(nI,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),d(sI,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),d(lI,"href","/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(je,"class","docstring"),d(Ko,"class","docstring"),d(o1,"id","transformers.AutoModelForMaskedLM"),d(o1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(o1,"href","#transformers.AutoModelForMaskedLM"),d(nd,"class","relative group"),d(iI,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(dI,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(cI,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Wr,"class","docstring"),d(fI,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertForMaskedLM"),d(mI,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(gI,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertForMaskedLM"),d(hI,"href","/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),d(pI,"href","/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(_I,"href","/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),d(uI,"href","/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(bI,"href","/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(FI,"href","/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(vI,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(TI,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraForMaskedLM"),d(MI,"href","/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(EI,"href","/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetForMaskedLM"),d(CI,"href","/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelForMaskedLM"),d(wI,"href","/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(AI,"href","/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(yI,"href","/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(LI,"href","/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(xI,"href","/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),d(kI,"href","/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),d(SI,"href","/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(RI,"href","/docs/transformers/pr_16473/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),d(BI,"href","/docs/transformers/pr_16473/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),d(PI,"href","/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),d($I,"href","/docs/transformers/pr_16473/en/model_doc/reformer#transformers.ReformerForMaskedLM"),d(II,"href","/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertForMaskedLM"),d(qI,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(NI,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),d(jI,"href","/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(DI,"href","/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(GI,"href","/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(OI,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(VI,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(XI,"href","/docs/transformers/pr_16473/en/model_doc/yoso#transformers.YosoForMaskedLM"),d(De,"class","docstring"),d(Zo,"class","docstring"),d(N1,"id","transformers.AutoModelForSeq2SeqLM"),d(N1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(N1,"href","#transformers.AutoModelForSeq2SeqLM"),d(id,"class","relative group"),d(zI,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(QI,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(WI,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Hr,"class","docstring"),d(HI,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(UI,"href","/docs/transformers/pr_16473/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),d(JI,"href","/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),d(YI,"href","/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),d(KI,"href","/docs/transformers/pr_16473/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),d(ZI,"href","/docs/transformers/pr_16473/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(eq,"href","/docs/transformers/pr_16473/en/model_doc/led#transformers.LEDForConditionalGeneration"),d(oq,"href","/docs/transformers/pr_16473/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),d(rq,"href","/docs/transformers/pr_16473/en/model_doc/marian#transformers.MarianMTModel"),d(tq,"href","/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(aq,"href","/docs/transformers/pr_16473/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),d(nq,"href","/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),d(sq,"href","/docs/transformers/pr_16473/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),d(lq,"href","/docs/transformers/pr_16473/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),d(iq,"href","/docs/transformers/pr_16473/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(dq,"href","/docs/transformers/pr_16473/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),d(Ge,"class","docstring"),d(er,"class","docstring"),d(r4,"id","transformers.AutoModelForSequenceClassification"),d(r4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(r4,"href","#transformers.AutoModelForSequenceClassification"),d(fd,"class","relative group"),d(cq,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(fq,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(mq,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ur,"class","docstring"),d(gq,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertForSequenceClassification"),d(hq,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartForSequenceClassification"),d(pq,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertForSequenceClassification"),d(_q,"href","/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),d(uq,"href","/docs/transformers/pr_16473/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),d(bq,"href","/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),d(Fq,"href","/docs/transformers/pr_16473/en/model_doc/canine#transformers.CanineForSequenceClassification"),d(vq,"href","/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),d(Tq,"href","/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),d(Mq,"href","/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),d(Eq,"href","/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),d(Cq,"href","/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),d(wq,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),d(Aq,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraForSequenceClassification"),d(yq,"href","/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),d(Lq,"href","/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetForSequenceClassification"),d(xq,"href","/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),d(kq,"href","/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),d(Sq,"href","/docs/transformers/pr_16473/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),d(Rq,"href","/docs/transformers/pr_16473/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),d(Bq,"href","/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertForSequenceClassification"),d(Pq,"href","/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),d($q,"href","/docs/transformers/pr_16473/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),d(Iq,"href","/docs/transformers/pr_16473/en/model_doc/led#transformers.LEDForSequenceClassification"),d(qq,"href","/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),d(Nq,"href","/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartForSequenceClassification"),d(jq,"href","/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),d(Dq,"href","/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),d(Gq,"href","/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),d(Oq,"href","/docs/transformers/pr_16473/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),d(Vq,"href","/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),d(Xq,"href","/docs/transformers/pr_16473/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),d(zq,"href","/docs/transformers/pr_16473/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),d(Qq,"href","/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),d(Wq,"href","/docs/transformers/pr_16473/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),d(Hq,"href","/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),d(Uq,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),d(Jq,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),d(Yq,"href","/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),d(Kq,"href","/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasForSequenceClassification"),d(Zq,"href","/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),d(eN,"href","/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMForSequenceClassification"),d(oN,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),d(rN,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),d(tN,"href","/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),d(aN,"href","/docs/transformers/pr_16473/en/model_doc/yoso#transformers.YosoForSequenceClassification"),d(Oe,"class","docstring"),d(or,"class","docstring"),d(J4,"id","transformers.AutoModelForMultipleChoice"),d(J4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(J4,"href","#transformers.AutoModelForMultipleChoice"),d(hd,"class","relative group"),d(nN,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(sN,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(lN,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Jr,"class","docstring"),d(iN,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertForMultipleChoice"),d(dN,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertForMultipleChoice"),d(cN,"href","/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),d(fN,"href","/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),d(mN,"href","/docs/transformers/pr_16473/en/model_doc/canine#transformers.CanineForMultipleChoice"),d(gN,"href","/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),d(hN,"href","/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),d(pN,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),d(_N,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraForMultipleChoice"),d(uN,"href","/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),d(bN,"href","/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetForMultipleChoice"),d(FN,"href","/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),d(vN,"href","/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertForMultipleChoice"),d(TN,"href","/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),d(MN,"href","/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),d(EN,"href","/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),d(CN,"href","/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),d(wN,"href","/docs/transformers/pr_16473/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),d(AN,"href","/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),d(yN,"href","/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),d(LN,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),d(xN,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),d(kN,"href","/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),d(SN,"href","/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMForMultipleChoice"),d(RN,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),d(BN,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),d(PN,"href","/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),d($N,"href","/docs/transformers/pr_16473/en/model_doc/yoso#transformers.YosoForMultipleChoice"),d(Ve,"class","docstring"),d(rr,"class","docstring"),d(Ab,"id","transformers.AutoModelForNextSentencePrediction"),d(Ab,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ab,"href","#transformers.AutoModelForNextSentencePrediction"),d(ud,"class","relative group"),d(IN,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qN,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(NN,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Yr,"class","docstring"),d(jN,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertForNextSentencePrediction"),d(DN,"href","/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),d(GN,"href","/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),d(ON,"href","/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),d(VN,"href","/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),d(Xe,"class","docstring"),d(tr,"class","docstring"),d(Bb,"id","transformers.AutoModelForTokenClassification"),d(Bb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Bb,"href","#transformers.AutoModelForTokenClassification"),d(vd,"class","relative group"),d(XN,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zN,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(QN,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Kr,"class","docstring"),d(WN,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertForTokenClassification"),d(HN,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertForTokenClassification"),d(UN,"href","/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),d(JN,"href","/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertForTokenClassification"),d(YN,"href","/docs/transformers/pr_16473/en/model_doc/canine#transformers.CanineForTokenClassification"),d(KN,"href","/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),d(ZN,"href","/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),d(ej,"href","/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaForTokenClassification"),d(oj,"href","/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),d(rj,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),d(tj,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraForTokenClassification"),d(aj,"href","/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),d(nj,"href","/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetForTokenClassification"),d(sj,"href","/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelForTokenClassification"),d(lj,"href","/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),d(ij,"href","/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertForTokenClassification"),d(dj,"href","/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),d(cj,"href","/docs/transformers/pr_16473/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),d(fj,"href","/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerForTokenClassification"),d(mj,"href","/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),d(gj,"href","/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),d(hj,"href","/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),d(pj,"href","/docs/transformers/pr_16473/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),d(_j,"href","/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),d(uj,"href","/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertForTokenClassification"),d(bj,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaForTokenClassification"),d(Fj,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),d(vj,"href","/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),d(Tj,"href","/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMForTokenClassification"),d(Mj,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),d(Ej,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),d(Cj,"href","/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),d(wj,"href","/docs/transformers/pr_16473/en/model_doc/yoso#transformers.YosoForTokenClassification"),d(ze,"class","docstring"),d(ar,"class","docstring"),d(h3,"id","transformers.AutoModelForQuestionAnswering"),d(h3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(h3,"href","#transformers.AutoModelForQuestionAnswering"),d(Ed,"class","relative group"),d(Aj,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(yj,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Lj,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Zr,"class","docstring"),d(xj,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),d(kj,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartForQuestionAnswering"),d(Sj,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertForQuestionAnswering"),d(Rj,"href","/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),d(Bj,"href","/docs/transformers/pr_16473/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),d(Pj,"href","/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),d($j,"href","/docs/transformers/pr_16473/en/model_doc/canine#transformers.CanineForQuestionAnswering"),d(Ij,"href","/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),d(qj,"href","/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),d(Nj,"href","/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),d(jj,"href","/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),d(Dj,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),d(Gj,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),d(Oj,"href","/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),d(Vj,"href","/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),d(Xj,"href","/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),d(zj,"href","/docs/transformers/pr_16473/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),d(Qj,"href","/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),d(Wj,"href","/docs/transformers/pr_16473/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),d(Hj,"href","/docs/transformers/pr_16473/en/model_doc/led#transformers.LEDForQuestionAnswering"),d(Uj,"href","/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),d(Jj,"href","/docs/transformers/pr_16473/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),d(Yj,"href","/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),d(Kj,"href","/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),d(Zj,"href","/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),d(eD,"href","/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),d(oD,"href","/docs/transformers/pr_16473/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),d(rD,"href","/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),d(tD,"href","/docs/transformers/pr_16473/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),d(aD,"href","/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),d(nD,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),d(sD,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),d(lD,"href","/docs/transformers/pr_16473/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),d(iD,"href","/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),d(dD,"href","/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),d(cD,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),d(fD,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),d(mD,"href","/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),d(gD,"href","/docs/transformers/pr_16473/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),d(Qe,"class","docstring"),d(nr,"class","docstring"),d(o2,"id","transformers.AutoModelForTableQuestionAnswering"),d(o2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(o2,"href","#transformers.AutoModelForTableQuestionAnswering"),d(Ad,"class","relative group"),d(hD,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pD,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(_D,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(et,"class","docstring"),d(uD,"href","/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),d(We,"class","docstring"),d(sr,"class","docstring"),d(a2,"id","transformers.AutoModelForImageClassification"),d(a2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(a2,"href","#transformers.AutoModelForImageClassification"),d(xd,"class","relative group"),d(bD,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(FD,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(vD,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ot,"class","docstring"),d(TD,"href","/docs/transformers/pr_16473/en/model_doc/beit#transformers.BeitForImageClassification"),d(MD,"href","/docs/transformers/pr_16473/en/model_doc/convnext#transformers.ConvNextForImageClassification"),d(ED,"href","/docs/transformers/pr_16473/en/model_doc/deit#transformers.DeiTForImageClassification"),d(CD,"href","/docs/transformers/pr_16473/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),d(wD,"href","/docs/transformers/pr_16473/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),d(AD,"href","/docs/transformers/pr_16473/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),d(yD,"href","/docs/transformers/pr_16473/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),d(LD,"href","/docs/transformers/pr_16473/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),d(xD,"href","/docs/transformers/pr_16473/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),d(kD,"href","/docs/transformers/pr_16473/en/model_doc/resnet#transformers.ResNetForImageClassification"),d(SD,"href","/docs/transformers/pr_16473/en/model_doc/segformer#transformers.SegformerForImageClassification"),d(RD,"href","/docs/transformers/pr_16473/en/model_doc/swin#transformers.SwinForImageClassification"),d(BD,"href","/docs/transformers/pr_16473/en/model_doc/van#transformers.VanForImageClassification"),d(PD,"href","/docs/transformers/pr_16473/en/model_doc/vit#transformers.ViTForImageClassification"),d(He,"class","docstring"),d(lr,"class","docstring"),d(p2,"id","transformers.AutoModelForVision2Seq"),d(p2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(p2,"href","#transformers.AutoModelForVision2Seq"),d(Rd,"class","relative group"),d($D,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ID,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(qD,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(rt,"class","docstring"),d(ND,"href","/docs/transformers/pr_16473/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),d(Ue,"class","docstring"),d(ir,"class","docstring"),d(b2,"id","transformers.AutoModelForAudioClassification"),d(b2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(b2,"href","#transformers.AutoModelForAudioClassification"),d($d,"class","relative group"),d(jD,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(DD,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(GD,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(tt,"class","docstring"),d(OD,"href","/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),d(VD,"href","/docs/transformers/pr_16473/en/model_doc/hubert#transformers.HubertForSequenceClassification"),d(XD,"href","/docs/transformers/pr_16473/en/model_doc/sew#transformers.SEWForSequenceClassification"),d(zD,"href","/docs/transformers/pr_16473/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),d(QD,"href","/docs/transformers/pr_16473/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),d(WD,"href","/docs/transformers/pr_16473/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),d(HD,"href","/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),d(UD,"href","/docs/transformers/pr_16473/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),d(Je,"class","docstring"),d(dr,"class","docstring"),d(L2,"id","transformers.AutoModelForAudioFrameClassification"),d(L2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(L2,"href","#transformers.AutoModelForAudioFrameClassification"),d(Nd,"class","relative group"),d(JD,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(YD,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(KD,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(at,"class","docstring"),d(ZD,"href","/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),d(eG,"href","/docs/transformers/pr_16473/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),d(oG,"href","/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),d(rG,"href","/docs/transformers/pr_16473/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),d(Ye,"class","docstring"),d(cr,"class","docstring"),d(P2,"id","transformers.AutoModelForCTC"),d(P2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(P2,"href","#transformers.AutoModelForCTC"),d(Gd,"class","relative group"),d(tG,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(aG,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(nG,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(nt,"class","docstring"),d(sG,"href","/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),d(lG,"href","/docs/transformers/pr_16473/en/model_doc/hubert#transformers.HubertForCTC"),d(iG,"href","/docs/transformers/pr_16473/en/model_doc/sew#transformers.SEWForCTC"),d(dG,"href","/docs/transformers/pr_16473/en/model_doc/sew-d#transformers.SEWDForCTC"),d(cG,"href","/docs/transformers/pr_16473/en/model_doc/unispeech#transformers.UniSpeechForCTC"),d(fG,"href","/docs/transformers/pr_16473/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),d(mG,"href","/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),d(gG,"href","/docs/transformers/pr_16473/en/model_doc/wavlm#transformers.WavLMForCTC"),d(Ke,"class","docstring"),d(fr,"class","docstring"),d(X2,"id","transformers.AutoModelForSpeechSeq2Seq"),d(X2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(X2,"href","#transformers.AutoModelForSpeechSeq2Seq"),d(Xd,"class","relative group"),d(hG,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pG,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(_G,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(st,"class","docstring"),d(uG,"href","/docs/transformers/pr_16473/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),d(bG,"href","/docs/transformers/pr_16473/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),d(Ze,"class","docstring"),d(mr,"class","docstring"),d(H2,"id","transformers.AutoModelForAudioXVector"),d(H2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(H2,"href","#transformers.AutoModelForAudioXVector"),d(Wd,"class","relative group"),d(FG,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(vG,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(TG,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(lt,"class","docstring"),d(MG,"href","/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),d(EG,"href","/docs/transformers/pr_16473/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),d(CG,"href","/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),d(wG,"href","/docs/transformers/pr_16473/en/model_doc/wavlm#transformers.WavLMForXVector"),d(eo,"class","docstring"),d(gr,"class","docstring"),d(eF,"id","transformers.AutoModelForMaskedImageModeling"),d(eF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(eF,"href","#transformers.AutoModelForMaskedImageModeling"),d(Jd,"class","relative group"),d(AG,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(yG,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(LG,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(it,"class","docstring"),d(xG,"href","/docs/transformers/pr_16473/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),d(kG,"href","/docs/transformers/pr_16473/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),d(SG,"href","/docs/transformers/pr_16473/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),d(oo,"class","docstring"),d(hr,"class","docstring"),d(nF,"id","transformers.AutoModelForObjectDetection"),d(nF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(nF,"href","#transformers.AutoModelForObjectDetection"),d(ec,"class","relative group"),d(RG,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(BG,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(PG,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(dt,"class","docstring"),d($G,"href","/docs/transformers/pr_16473/en/model_doc/detr#transformers.DetrForObjectDetection"),d(ro,"class","docstring"),d(pr,"class","docstring"),d(iF,"id","transformers.AutoModelForImageSegmentation"),d(iF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(iF,"href","#transformers.AutoModelForImageSegmentation"),d(tc,"class","relative group"),d(IG,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qG,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(NG,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ct,"class","docstring"),d(jG,"href","/docs/transformers/pr_16473/en/model_doc/detr#transformers.DetrForSegmentation"),d(to,"class","docstring"),d(_r,"class","docstring"),d(fF,"id","transformers.AutoModelForSemanticSegmentation"),d(fF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(fF,"href","#transformers.AutoModelForSemanticSegmentation"),d(sc,"class","relative group"),d(DG,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(GG,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(OG,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ft,"class","docstring"),d(VG,"href","/docs/transformers/pr_16473/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),d(XG,"href","/docs/transformers/pr_16473/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),d(zG,"href","/docs/transformers/pr_16473/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),d(ao,"class","docstring"),d(ur,"class","docstring"),d(_F,"id","transformers.AutoModelForInstanceSegmentation"),d(_F,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(_F,"href","#transformers.AutoModelForInstanceSegmentation"),d(cc,"class","relative group"),d(QG,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(WG,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(HG,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(mt,"class","docstring"),d(UG,"href","/docs/transformers/pr_16473/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),d(no,"class","docstring"),d(br,"class","docstring"),d(FF,"id","transformers.TFAutoModel"),d(FF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(FF,"href","#transformers.TFAutoModel"),d(gc,"class","relative group"),d(JG,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(YG,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(KG,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(gt,"class","docstring"),d(ZG,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.TFAlbertModel"),d(eO,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.TFBartModel"),d(oO,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.TFBertModel"),d(rO,"href","/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),d(tO,"href","/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),d(aO,"href","/docs/transformers/pr_16473/en/model_doc/camembert#transformers.TFCamembertModel"),d(nO,"href","/docs/transformers/pr_16473/en/model_doc/clip#transformers.TFCLIPModel"),d(sO,"href","/docs/transformers/pr_16473/en/model_doc/convbert#transformers.TFConvBertModel"),d(lO,"href","/docs/transformers/pr_16473/en/model_doc/convnext#transformers.TFConvNextModel"),d(iO,"href","/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.TFCTRLModel"),d(dO,"href","/docs/transformers/pr_16473/en/model_doc/deberta#transformers.TFDebertaModel"),d(cO,"href","/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),d(fO,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.TFDistilBertModel"),d(mO,"href","/docs/transformers/pr_16473/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),d(gO,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.TFElectraModel"),d(hO,"href","/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.TFFlaubertModel"),d(pO,"href","/docs/transformers/pr_16473/en/model_doc/funnel#transformers.TFFunnelModel"),d(_O,"href","/docs/transformers/pr_16473/en/model_doc/funnel#transformers.TFFunnelBaseModel"),d(uO,"href","/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.TFGPT2Model"),d(bO,"href","/docs/transformers/pr_16473/en/model_doc/gptj#transformers.TFGPTJModel"),d(FO,"href","/docs/transformers/pr_16473/en/model_doc/hubert#transformers.TFHubertModel"),d(vO,"href","/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),d(TO,"href","/docs/transformers/pr_16473/en/model_doc/led#transformers.TFLEDModel"),d(MO,"href","/docs/transformers/pr_16473/en/model_doc/longformer#transformers.TFLongformerModel"),d(EO,"href","/docs/transformers/pr_16473/en/model_doc/lxmert#transformers.TFLxmertModel"),d(CO,"href","/docs/transformers/pr_16473/en/model_doc/marian#transformers.TFMarianModel"),d(wO,"href","/docs/transformers/pr_16473/en/model_doc/mbart#transformers.TFMBartModel"),d(AO,"href","/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.TFMobileBertModel"),d(yO,"href","/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.TFMPNetModel"),d(LO,"href","/docs/transformers/pr_16473/en/model_doc/mt5#transformers.TFMT5Model"),d(xO,"href","/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),d(kO,"href","/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.TFPegasusModel"),d(SO,"href","/docs/transformers/pr_16473/en/model_doc/rembert#transformers.TFRemBertModel"),d(RO,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.TFRobertaModel"),d(BO,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.TFRoFormerModel"),d(PO,"href","/docs/transformers/pr_16473/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),d($O,"href","/docs/transformers/pr_16473/en/model_doc/t5#transformers.TFT5Model"),d(IO,"href","/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TFTapasModel"),d(qO,"href","/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),d(NO,"href","/docs/transformers/pr_16473/en/model_doc/vit#transformers.TFViTModel"),d(jO,"href","/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),d(DO,"href","/docs/transformers/pr_16473/en/model_doc/xlm#transformers.TFXLMModel"),d(GO,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),d(OO,"href","/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.TFXLNetModel"),d(ho,"class","docstring"),d(Fr,"class","docstring"),d(iv,"id","transformers.TFAutoModelForPreTraining"),d(iv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(iv,"href","#transformers.TFAutoModelForPreTraining"),d(_c,"class","relative group"),d(VO,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(XO,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(zO,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ht,"class","docstring"),d(QO,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.TFAlbertForPreTraining"),d(WO,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(HO,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.TFBertForPreTraining"),d(UO,"href","/docs/transformers/pr_16473/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(JO,"href","/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(YO,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(KO,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.TFElectraForPreTraining"),d(ZO,"href","/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(eV,"href","/docs/transformers/pr_16473/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),d(oV,"href","/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(rV,"href","/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(tV,"href","/docs/transformers/pr_16473/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),d(aV,"href","/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),d(nV,"href","/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(sV,"href","/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(lV,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(iV,"href","/docs/transformers/pr_16473/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(dV,"href","/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(cV,"href","/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(fV,"href","/docs/transformers/pr_16473/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(mV,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(gV,"href","/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(po,"class","docstring"),d(vr,"class","docstring"),d(Sv,"id","transformers.TFAutoModelForCausalLM"),d(Sv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Sv,"href","#transformers.TFAutoModelForCausalLM"),d(Fc,"class","relative group"),d(hV,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pV,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(_V,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pt,"class","docstring"),d(uV,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.TFBertLMHeadModel"),d(bV,"href","/docs/transformers/pr_16473/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),d(FV,"href","/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(vV,"href","/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(TV,"href","/docs/transformers/pr_16473/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),d(MV,"href","/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(EV,"href","/docs/transformers/pr_16473/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),d(CV,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),d(wV,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),d(AV,"href","/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(yV,"href","/docs/transformers/pr_16473/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(LV,"href","/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(_o,"class","docstring"),d(Tr,"class","docstring"),d(Xv,"id","transformers.TFAutoModelForImageClassification"),d(Xv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Xv,"href","#transformers.TFAutoModelForImageClassification"),d(Mc,"class","relative group"),d(xV,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(kV,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(SV,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_t,"class","docstring"),d(RV,"href","/docs/transformers/pr_16473/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),d(BV,"href","/docs/transformers/pr_16473/en/model_doc/vit#transformers.TFViTForImageClassification"),d(uo,"class","docstring"),d(Mr,"class","docstring"),d(Wv,"id","transformers.TFAutoModelForMaskedLM"),d(Wv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Wv,"href","#transformers.TFAutoModelForMaskedLM"),d(wc,"class","relative group"),d(PV,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($V,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(IV,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ut,"class","docstring"),d(qV,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),d(NV,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.TFBertForMaskedLM"),d(jV,"href","/docs/transformers/pr_16473/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(DV,"href","/docs/transformers/pr_16473/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),d(GV,"href","/docs/transformers/pr_16473/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),d(OV,"href","/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),d(VV,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(XV,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.TFElectraForMaskedLM"),d(zV,"href","/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(QV,"href","/docs/transformers/pr_16473/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),d(WV,"href","/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(HV,"href","/docs/transformers/pr_16473/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),d(UV,"href","/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),d(JV,"href","/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(YV,"href","/docs/transformers/pr_16473/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),d(KV,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(ZV,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),d(eX,"href","/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(oX,"href","/docs/transformers/pr_16473/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(rX,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(bo,"class","docstring"),d(Er,"class","docstring"),d(h6,"id","transformers.TFAutoModelForSeq2SeqLM"),d(h6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(h6,"href","#transformers.TFAutoModelForSeq2SeqLM"),d(Lc,"class","relative group"),d(tX,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(aX,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(nX,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bt,"class","docstring"),d(sX,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(lX,"href","/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),d(iX,"href","/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),d(dX,"href","/docs/transformers/pr_16473/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),d(cX,"href","/docs/transformers/pr_16473/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),d(fX,"href","/docs/transformers/pr_16473/en/model_doc/marian#transformers.TFMarianMTModel"),d(mX,"href","/docs/transformers/pr_16473/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),d(gX,"href","/docs/transformers/pr_16473/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),d(hX,"href","/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),d(pX,"href","/docs/transformers/pr_16473/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(Fo,"class","docstring"),d(Cr,"class","docstring"),d(w6,"id","transformers.TFAutoModelForSequenceClassification"),d(w6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(w6,"href","#transformers.TFAutoModelForSequenceClassification"),d(Sc,"class","relative group"),d(_X,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(uX,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(bX,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ft,"class","docstring"),d(FX,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),d(vX,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.TFBertForSequenceClassification"),d(TX,"href","/docs/transformers/pr_16473/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),d(MX,"href","/docs/transformers/pr_16473/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),d(EX,"href","/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),d(CX,"href","/docs/transformers/pr_16473/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),d(wX,"href","/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),d(AX,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),d(yX,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),d(LX,"href","/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),d(xX,"href","/docs/transformers/pr_16473/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),d(kX,"href","/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),d(SX,"href","/docs/transformers/pr_16473/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),d(RX,"href","/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),d(BX,"href","/docs/transformers/pr_16473/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),d(PX,"href","/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),d($X,"href","/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),d(IX,"href","/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),d(qX,"href","/docs/transformers/pr_16473/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),d(NX,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),d(jX,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),d(DX,"href","/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),d(GX,"href","/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),d(OX,"href","/docs/transformers/pr_16473/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),d(VX,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),d(XX,"href","/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),d(vo,"class","docstring"),d(wr,"class","docstring"),d(K6,"id","transformers.TFAutoModelForMultipleChoice"),d(K6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(K6,"href","#transformers.TFAutoModelForMultipleChoice"),d(Pc,"class","relative group"),d(zX,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(QX,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(WX,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(vt,"class","docstring"),d(HX,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),d(UX,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.TFBertForMultipleChoice"),d(JX,"href","/docs/transformers/pr_16473/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),d(YX,"href","/docs/transformers/pr_16473/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),d(KX,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),d(ZX,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),d(ez,"href","/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),d(oz,"href","/docs/transformers/pr_16473/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),d(rz,"href","/docs/transformers/pr_16473/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),d(tz,"href","/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),d(az,"href","/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),d(nz,"href","/docs/transformers/pr_16473/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),d(sz,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),d(lz,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),d(iz,"href","/docs/transformers/pr_16473/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),d(dz,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),d(cz,"href","/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),d(To,"class","docstring"),d(Ar,"class","docstring"),d(_T,"id","transformers.TFAutoModelForTableQuestionAnswering"),d(_T,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(_T,"href","#transformers.TFAutoModelForTableQuestionAnswering"),d(qc,"class","relative group"),d(fz,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(mz,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(gz,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Tt,"class","docstring"),d(hz,"href","/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),d(Mo,"class","docstring"),d(yr,"class","docstring"),d(bT,"id","transformers.TFAutoModelForTokenClassification"),d(bT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(bT,"href","#transformers.TFAutoModelForTokenClassification"),d(Dc,"class","relative group"),d(pz,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_z,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(uz,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Mt,"class","docstring"),d(bz,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),d(Fz,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.TFBertForTokenClassification"),d(vz,"href","/docs/transformers/pr_16473/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),d(Tz,"href","/docs/transformers/pr_16473/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),d(Mz,"href","/docs/transformers/pr_16473/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),d(Ez,"href","/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),d(Cz,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),d(wz,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.TFElectraForTokenClassification"),d(Az,"href","/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),d(yz,"href","/docs/transformers/pr_16473/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),d(Lz,"href","/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),d(xz,"href","/docs/transformers/pr_16473/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),d(kz,"href","/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),d(Sz,"href","/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),d(Rz,"href","/docs/transformers/pr_16473/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),d(Bz,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),d(Pz,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),d($z,"href","/docs/transformers/pr_16473/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),d(Iz,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),d(qz,"href","/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),d(Eo,"class","docstring"),d(Lr,"class","docstring"),d(jT,"id","transformers.TFAutoModelForQuestionAnswering"),d(jT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(jT,"href","#transformers.TFAutoModelForQuestionAnswering"),d(Vc,"class","relative group"),d(Nz,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(jz,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Dz,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Et,"class","docstring"),d(Gz,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),d(Oz,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),d(Vz,"href","/docs/transformers/pr_16473/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),d(Xz,"href","/docs/transformers/pr_16473/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),d(zz,"href","/docs/transformers/pr_16473/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),d(Qz,"href","/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),d(Wz,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),d(Hz,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),d(Uz,"href","/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),d(Jz,"href","/docs/transformers/pr_16473/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),d(Yz,"href","/docs/transformers/pr_16473/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),d(Kz,"href","/docs/transformers/pr_16473/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),d(Zz,"href","/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),d(eQ,"href","/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),d(oQ,"href","/docs/transformers/pr_16473/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),d(rQ,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),d(tQ,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),d(aQ,"href","/docs/transformers/pr_16473/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),d(nQ,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),d(sQ,"href","/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),d(Co,"class","docstring"),d(xr,"class","docstring"),d(s7,"id","transformers.TFAutoModelForVision2Seq"),d(s7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(s7,"href","#transformers.TFAutoModelForVision2Seq"),d(Qc,"class","relative group"),d(lQ,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(iQ,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(dQ,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ct,"class","docstring"),d(cQ,"href","/docs/transformers/pr_16473/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),d(wo,"class","docstring"),d(kr,"class","docstring"),d(i7,"id","transformers.TFAutoModelForSpeechSeq2Seq"),d(i7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(i7,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),d(Uc,"class","relative group"),d(fQ,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(mQ,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(gQ,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(wt,"class","docstring"),d(hQ,"href","/docs/transformers/pr_16473/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),d(Ao,"class","docstring"),d(Sr,"class","docstring"),d(c7,"id","transformers.FlaxAutoModel"),d(c7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(c7,"href","#transformers.FlaxAutoModel"),d(Kc,"class","relative group"),d(pQ,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_Q,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(uQ,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(At,"class","docstring"),d(bQ,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.FlaxAlbertModel"),d(FQ,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.FlaxBartModel"),d(vQ,"href","/docs/transformers/pr_16473/en/model_doc/beit#transformers.FlaxBeitModel"),d(TQ,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.FlaxBertModel"),d(MQ,"href","/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),d(EQ,"href","/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),d(CQ,"href","/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),d(wQ,"href","/docs/transformers/pr_16473/en/model_doc/clip#transformers.FlaxCLIPModel"),d(AQ,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),d(yQ,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.FlaxElectraModel"),d(LQ,"href","/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.FlaxGPT2Model"),d(xQ,"href","/docs/transformers/pr_16473/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),d(kQ,"href","/docs/transformers/pr_16473/en/model_doc/gptj#transformers.FlaxGPTJModel"),d(SQ,"href","/docs/transformers/pr_16473/en/model_doc/marian#transformers.FlaxMarianModel"),d(RQ,"href","/docs/transformers/pr_16473/en/model_doc/mbart#transformers.FlaxMBartModel"),d(BQ,"href","/docs/transformers/pr_16473/en/model_doc/mt5#transformers.FlaxMT5Model"),d(PQ,"href","/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.FlaxPegasusModel"),d($Q,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.FlaxRobertaModel"),d(IQ,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.FlaxRoFormerModel"),d(qQ,"href","/docs/transformers/pr_16473/en/model_doc/t5#transformers.FlaxT5Model"),d(NQ,"href","/docs/transformers/pr_16473/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),d(jQ,"href","/docs/transformers/pr_16473/en/model_doc/vit#transformers.FlaxViTModel"),d(DQ,"href","/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),d(GQ,"href","/docs/transformers/pr_16473/en/model_doc/xglm#transformers.FlaxXGLMModel"),d(OQ,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),d(yo,"class","docstring"),d(Rr,"class","docstring"),d(I7,"id","transformers.FlaxAutoModelForCausalLM"),d(I7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(I7,"href","#transformers.FlaxAutoModelForCausalLM"),d(of,"class","relative group"),d(VQ,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(XQ,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(zQ,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(yt,"class","docstring"),d(QQ,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.FlaxBartForCausalLM"),d(WQ,"href","/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),d(HQ,"href","/docs/transformers/pr_16473/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),d(UQ,"href","/docs/transformers/pr_16473/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),d(JQ,"href","/docs/transformers/pr_16473/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),d(Lo,"class","docstring"),d(Br,"class","docstring"),d(O7,"id","transformers.FlaxAutoModelForPreTraining"),d(O7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(O7,"href","#transformers.FlaxAutoModelForPreTraining"),d(af,"class","relative group"),d(YQ,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(KQ,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(ZQ,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Lt,"class","docstring"),d(eW,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),d(oW,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(rW,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.FlaxBertForPreTraining"),d(tW,"href","/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),d(aW,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),d(nW,"href","/docs/transformers/pr_16473/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(sW,"href","/docs/transformers/pr_16473/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(lW,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(iW,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(dW,"href","/docs/transformers/pr_16473/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(cW,"href","/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),d(fW,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(xo,"class","docstring"),d(Pr,"class","docstring"),d(oM,"id","transformers.FlaxAutoModelForMaskedLM"),d(oM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(oM,"href","#transformers.FlaxAutoModelForMaskedLM"),d(lf,"class","relative group"),d(mW,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(gW,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(hW,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(xt,"class","docstring"),d(pW,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),d(_W,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(uW,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),d(bW,"href","/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),d(FW,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),d(vW,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),d(TW,"href","/docs/transformers/pr_16473/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(MW,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(EW,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(CW,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(ko,"class","docstring"),d($r,"class","docstring"),d(mM,"id","transformers.FlaxAutoModelForSeq2SeqLM"),d(mM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(mM,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),d(ff,"class","relative group"),d(wW,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(AW,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(yW,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(kt,"class","docstring"),d(LW,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(xW,"href","/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),d(kW,"href","/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),d(SW,"href","/docs/transformers/pr_16473/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),d(RW,"href","/docs/transformers/pr_16473/en/model_doc/marian#transformers.FlaxMarianMTModel"),d(BW,"href","/docs/transformers/pr_16473/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(PW,"href","/docs/transformers/pr_16473/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d($W,"href","/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),d(IW,"href","/docs/transformers/pr_16473/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(So,"class","docstring"),d(Ir,"class","docstring"),d(MM,"id","transformers.FlaxAutoModelForSequenceClassification"),d(MM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(MM,"href","#transformers.FlaxAutoModelForSequenceClassification"),d(hf,"class","relative group"),d(qW,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(NW,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(jW,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(St,"class","docstring"),d(DW,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),d(GW,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),d(OW,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),d(VW,"href","/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),d(XW,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),d(zW,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),d(QW,"href","/docs/transformers/pr_16473/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),d(WW,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),d(HW,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),d(UW,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),d(Ro,"class","docstring"),d(qr,"class","docstring"),d(BM,"id","transformers.FlaxAutoModelForQuestionAnswering"),d(BM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(BM,"href","#transformers.FlaxAutoModelForQuestionAnswering"),d(uf,"class","relative group"),d(JW,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(YW,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(KW,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Rt,"class","docstring"),d(ZW,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),d(eH,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),d(oH,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),d(rH,"href","/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),d(tH,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),d(aH,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),d(nH,"href","/docs/transformers/pr_16473/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),d(sH,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),d(lH,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),d(iH,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),d(Bo,"class","docstring"),d(Nr,"class","docstring"),d(XM,"id","transformers.FlaxAutoModelForTokenClassification"),d(XM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(XM,"href","#transformers.FlaxAutoModelForTokenClassification"),d(vf,"class","relative group"),d(dH,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(cH,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(fH,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Bt,"class","docstring"),d(mH,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),d(gH,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),d(hH,"href","/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),d(pH,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),d(_H,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),d(uH,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),d(bH,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),d(FH,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),d(Po,"class","docstring"),d(jr,"class","docstring"),d(ZM,"id","transformers.FlaxAutoModelForMultipleChoice"),d(ZM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ZM,"href","#transformers.FlaxAutoModelForMultipleChoice"),d(Ef,"class","relative group"),d(vH,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(TH,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(MH,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Pt,"class","docstring"),d(EH,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),d(CH,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),d(wH,"href","/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),d(AH,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),d(yH,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),d(LH,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),d(xH,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),d(kH,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),d($o,"class","docstring"),d(Dr,"class","docstring"),d(iE,"id","transformers.FlaxAutoModelForNextSentencePrediction"),d(iE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(iE,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),d(Af,"class","relative group"),d(SH,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(RH,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(BH,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($t,"class","docstring"),d(PH,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),d(Io,"class","docstring"),d(Gr,"class","docstring"),d(cE,"id","transformers.FlaxAutoModelForImageClassification"),d(cE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(cE,"href","#transformers.FlaxAutoModelForImageClassification"),d(xf,"class","relative group"),d($H,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(IH,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(qH,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(It,"class","docstring"),d(NH,"href","/docs/transformers/pr_16473/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),d(jH,"href","/docs/transformers/pr_16473/en/model_doc/vit#transformers.FlaxViTForImageClassification"),d(qo,"class","docstring"),d(Or,"class","docstring"),d(gE,"id","transformers.FlaxAutoModelForVision2Seq"),d(gE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(gE,"href","#transformers.FlaxAutoModelForVision2Seq"),d(Rf,"class","relative group"),d(DH,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(GH,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(OH,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qt,"class","docstring"),d(VH,"href","/docs/transformers/pr_16473/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),d(No,"class","docstring"),d(Vr,"class","docstring")},m(c,u){e(document.head,Z),b(c,io,u),b(c,de,u),e(de,Ce),e(Ce,lo),g(me,lo,null),e(de,Me),e(de,Xo),e(Xo,Ii),b(c,qf,u),b(c,fa,u),e(fa,qi),e(fa,Ni),e(Ni,hC),e(fa,Nf),b(c,xe,u),b(c,co,u),e(co,ji),e(co,Gn),e(Gn,pC),e(co,On),e(co,Vn),e(Vn,_C),e(co,Di),e(co,Xn),e(Xn,uC),e(co,Gi),b(c,jf,u),g(Da,c,u),b(c,fo,u),b(c,_e,u),e(_e,s9),e(_e,Oi),e(Oi,l9),e(_e,i9),b(c,zo,u),b(c,Ga,u),e(Ga,d9),e(Ga,Df),e(Df,c9),e(Ga,Q$e),b(c,BSe,u),b(c,Vi,u),e(Vi,Gf),e(Gf,qJ),g(bC,qJ,null),e(Vi,W$e),e(Vi,NJ),e(NJ,H$e),b(c,PSe,u),b(c,zn,u),e(zn,U$e),e(zn,jJ),e(jJ,J$e),e(zn,Y$e),e(zn,DJ),e(DJ,K$e),e(zn,Z$e),b(c,$Se,u),g(FC,c,u),b(c,ISe,u),b(c,f9,u),e(f9,eIe),b(c,qSe,u),g(Of,c,u),b(c,NSe,u),b(c,Xi,u),e(Xi,Vf),e(Vf,GJ),g(vC,GJ,null),e(Xi,oIe),e(Xi,OJ),e(OJ,rIe),b(c,jSe,u),b(c,Qo,u),g(TC,Qo,null),e(Qo,tIe),e(Qo,MC),e(MC,aIe),e(MC,m9),e(m9,nIe),e(MC,sIe),e(Qo,lIe),e(Qo,EC),e(EC,iIe),e(EC,VJ),e(VJ,dIe),e(EC,cIe),e(Qo,fIe),e(Qo,mo),g(CC,mo,null),e(mo,mIe),e(mo,XJ),e(XJ,gIe),e(mo,hIe),e(mo,zi),e(zi,pIe),e(zi,zJ),e(zJ,_Ie),e(zi,uIe),e(zi,QJ),e(QJ,bIe),e(zi,FIe),e(mo,vIe),e(mo,F),e(F,Xf),e(Xf,WJ),e(WJ,TIe),e(Xf,MIe),e(Xf,g9),e(g9,EIe),e(Xf,CIe),e(F,wIe),e(F,zf),e(zf,HJ),e(HJ,AIe),e(zf,yIe),e(zf,h9),e(h9,LIe),e(zf,xIe),e(F,kIe),e(F,Qf),e(Qf,UJ),e(UJ,SIe),e(Qf,RIe),e(Qf,p9),e(p9,BIe),e(Qf,PIe),e(F,$Ie),e(F,Wf),e(Wf,JJ),e(JJ,IIe),e(Wf,qIe),e(Wf,_9),e(_9,NIe),e(Wf,jIe),e(F,DIe),e(F,Hf),e(Hf,YJ),e(YJ,GIe),e(Hf,OIe),e(Hf,u9),e(u9,VIe),e(Hf,XIe),e(F,zIe),e(F,Uf),e(Uf,KJ),e(KJ,QIe),e(Uf,WIe),e(Uf,b9),e(b9,HIe),e(Uf,UIe),e(F,JIe),e(F,Jf),e(Jf,ZJ),e(ZJ,YIe),e(Jf,KIe),e(Jf,F9),e(F9,ZIe),e(Jf,eqe),e(F,oqe),e(F,Yf),e(Yf,eY),e(eY,rqe),e(Yf,tqe),e(Yf,v9),e(v9,aqe),e(Yf,nqe),e(F,sqe),e(F,Kf),e(Kf,oY),e(oY,lqe),e(Kf,iqe),e(Kf,T9),e(T9,dqe),e(Kf,cqe),e(F,fqe),e(F,Zf),e(Zf,rY),e(rY,mqe),e(Zf,gqe),e(Zf,M9),e(M9,hqe),e(Zf,pqe),e(F,_qe),e(F,em),e(em,tY),e(tY,uqe),e(em,bqe),e(em,E9),e(E9,Fqe),e(em,vqe),e(F,Tqe),e(F,om),e(om,aY),e(aY,Mqe),e(om,Eqe),e(om,C9),e(C9,Cqe),e(om,wqe),e(F,Aqe),e(F,rm),e(rm,nY),e(nY,yqe),e(rm,Lqe),e(rm,w9),e(w9,xqe),e(rm,kqe),e(F,Sqe),e(F,tm),e(tm,sY),e(sY,Rqe),e(tm,Bqe),e(tm,A9),e(A9,Pqe),e(tm,$qe),e(F,Iqe),e(F,am),e(am,lY),e(lY,qqe),e(am,Nqe),e(am,y9),e(y9,jqe),e(am,Dqe),e(F,Gqe),e(F,nm),e(nm,iY),e(iY,Oqe),e(nm,Vqe),e(nm,L9),e(L9,Xqe),e(nm,zqe),e(F,Qqe),e(F,sm),e(sm,dY),e(dY,Wqe),e(sm,Hqe),e(sm,x9),e(x9,Uqe),e(sm,Jqe),e(F,Yqe),e(F,lm),e(lm,cY),e(cY,Kqe),e(lm,Zqe),e(lm,k9),e(k9,eNe),e(lm,oNe),e(F,rNe),e(F,im),e(im,fY),e(fY,tNe),e(im,aNe),e(im,S9),e(S9,nNe),e(im,sNe),e(F,lNe),e(F,dm),e(dm,mY),e(mY,iNe),e(dm,dNe),e(dm,R9),e(R9,cNe),e(dm,fNe),e(F,mNe),e(F,cm),e(cm,gY),e(gY,gNe),e(cm,hNe),e(cm,B9),e(B9,pNe),e(cm,_Ne),e(F,uNe),e(F,fm),e(fm,hY),e(hY,bNe),e(fm,FNe),e(fm,P9),e(P9,vNe),e(fm,TNe),e(F,MNe),e(F,mm),e(mm,pY),e(pY,ENe),e(mm,CNe),e(mm,$9),e($9,wNe),e(mm,ANe),e(F,yNe),e(F,gm),e(gm,_Y),e(_Y,LNe),e(gm,xNe),e(gm,I9),e(I9,kNe),e(gm,SNe),e(F,RNe),e(F,hm),e(hm,uY),e(uY,BNe),e(hm,PNe),e(hm,q9),e(q9,$Ne),e(hm,INe),e(F,qNe),e(F,pm),e(pm,bY),e(bY,NNe),e(pm,jNe),e(pm,N9),e(N9,DNe),e(pm,GNe),e(F,ONe),e(F,_m),e(_m,FY),e(FY,VNe),e(_m,XNe),e(_m,j9),e(j9,zNe),e(_m,QNe),e(F,WNe),e(F,um),e(um,vY),e(vY,HNe),e(um,UNe),e(um,D9),e(D9,JNe),e(um,YNe),e(F,KNe),e(F,bm),e(bm,TY),e(TY,ZNe),e(bm,eje),e(bm,G9),e(G9,oje),e(bm,rje),e(F,tje),e(F,Fm),e(Fm,MY),e(MY,aje),e(Fm,nje),e(Fm,O9),e(O9,sje),e(Fm,lje),e(F,ije),e(F,vm),e(vm,EY),e(EY,dje),e(vm,cje),e(vm,V9),e(V9,fje),e(vm,mje),e(F,gje),e(F,Tm),e(Tm,CY),e(CY,hje),e(Tm,pje),e(Tm,X9),e(X9,_je),e(Tm,uje),e(F,bje),e(F,Mm),e(Mm,wY),e(wY,Fje),e(Mm,vje),e(Mm,z9),e(z9,Tje),e(Mm,Mje),e(F,Eje),e(F,Em),e(Em,AY),e(AY,Cje),e(Em,wje),e(Em,Q9),e(Q9,Aje),e(Em,yje),e(F,Lje),e(F,Cm),e(Cm,yY),e(yY,xje),e(Cm,kje),e(Cm,W9),e(W9,Sje),e(Cm,Rje),e(F,Bje),e(F,wm),e(wm,LY),e(LY,Pje),e(wm,$je),e(wm,H9),e(H9,Ije),e(wm,qje),e(F,Nje),e(F,Am),e(Am,xY),e(xY,jje),e(Am,Dje),e(Am,U9),e(U9,Gje),e(Am,Oje),e(F,Vje),e(F,ym),e(ym,kY),e(kY,Xje),e(ym,zje),e(ym,J9),e(J9,Qje),e(ym,Wje),e(F,Hje),e(F,Lm),e(Lm,SY),e(SY,Uje),e(Lm,Jje),e(Lm,Y9),e(Y9,Yje),e(Lm,Kje),e(F,Zje),e(F,xm),e(xm,RY),e(RY,eDe),e(xm,oDe),e(xm,K9),e(K9,rDe),e(xm,tDe),e(F,aDe),e(F,km),e(km,BY),e(BY,nDe),e(km,sDe),e(km,Z9),e(Z9,lDe),e(km,iDe),e(F,dDe),e(F,Sm),e(Sm,PY),e(PY,cDe),e(Sm,fDe),e(Sm,ex),e(ex,mDe),e(Sm,gDe),e(F,hDe),e(F,Rm),e(Rm,$Y),e($Y,pDe),e(Rm,_De),e(Rm,ox),e(ox,uDe),e(Rm,bDe),e(F,FDe),e(F,Bm),e(Bm,IY),e(IY,vDe),e(Bm,TDe),e(Bm,rx),e(rx,MDe),e(Bm,EDe),e(F,CDe),e(F,Pm),e(Pm,qY),e(qY,wDe),e(Pm,ADe),e(Pm,tx),e(tx,yDe),e(Pm,LDe),e(F,xDe),e(F,$m),e($m,NY),e(NY,kDe),e($m,SDe),e($m,ax),e(ax,RDe),e($m,BDe),e(F,PDe),e(F,Im),e(Im,jY),e(jY,$De),e(Im,IDe),e(Im,nx),e(nx,qDe),e(Im,NDe),e(F,jDe),e(F,qm),e(qm,DY),e(DY,DDe),e(qm,GDe),e(qm,sx),e(sx,ODe),e(qm,VDe),e(F,XDe),e(F,Nm),e(Nm,GY),e(GY,zDe),e(Nm,QDe),e(Nm,lx),e(lx,WDe),e(Nm,HDe),e(F,UDe),e(F,jm),e(jm,OY),e(OY,JDe),e(jm,YDe),e(jm,ix),e(ix,KDe),e(jm,ZDe),e(F,eGe),e(F,Dm),e(Dm,VY),e(VY,oGe),e(Dm,rGe),e(Dm,dx),e(dx,tGe),e(Dm,aGe),e(F,nGe),e(F,Gm),e(Gm,XY),e(XY,sGe),e(Gm,lGe),e(Gm,cx),e(cx,iGe),e(Gm,dGe),e(F,cGe),e(F,Om),e(Om,zY),e(zY,fGe),e(Om,mGe),e(Om,fx),e(fx,gGe),e(Om,hGe),e(F,pGe),e(F,Vm),e(Vm,QY),e(QY,_Ge),e(Vm,uGe),e(Vm,mx),e(mx,bGe),e(Vm,FGe),e(F,vGe),e(F,Xm),e(Xm,WY),e(WY,TGe),e(Xm,MGe),e(Xm,gx),e(gx,EGe),e(Xm,CGe),e(F,wGe),e(F,zm),e(zm,HY),e(HY,AGe),e(zm,yGe),e(zm,hx),e(hx,LGe),e(zm,xGe),e(F,kGe),e(F,Qm),e(Qm,UY),e(UY,SGe),e(Qm,RGe),e(Qm,px),e(px,BGe),e(Qm,PGe),e(F,$Ge),e(F,Wm),e(Wm,JY),e(JY,IGe),e(Wm,qGe),e(Wm,_x),e(_x,NGe),e(Wm,jGe),e(F,DGe),e(F,Hm),e(Hm,YY),e(YY,GGe),e(Hm,OGe),e(Hm,ux),e(ux,VGe),e(Hm,XGe),e(F,zGe),e(F,Um),e(Um,KY),e(KY,QGe),e(Um,WGe),e(Um,bx),e(bx,HGe),e(Um,UGe),e(F,JGe),e(F,Jm),e(Jm,ZY),e(ZY,YGe),e(Jm,KGe),e(Jm,Fx),e(Fx,ZGe),e(Jm,eOe),e(F,oOe),e(F,Ym),e(Ym,eK),e(eK,rOe),e(Ym,tOe),e(Ym,vx),e(vx,aOe),e(Ym,nOe),e(F,sOe),e(F,Km),e(Km,oK),e(oK,lOe),e(Km,iOe),e(Km,Tx),e(Tx,dOe),e(Km,cOe),e(F,fOe),e(F,Zm),e(Zm,rK),e(rK,mOe),e(Zm,gOe),e(Zm,Mx),e(Mx,hOe),e(Zm,pOe),e(F,_Oe),e(F,eg),e(eg,tK),e(tK,uOe),e(eg,bOe),e(eg,Ex),e(Ex,FOe),e(eg,vOe),e(F,TOe),e(F,og),e(og,aK),e(aK,MOe),e(og,EOe),e(og,Cx),e(Cx,COe),e(og,wOe),e(F,AOe),e(F,rg),e(rg,nK),e(nK,yOe),e(rg,LOe),e(rg,wx),e(wx,xOe),e(rg,kOe),e(F,SOe),e(F,tg),e(tg,sK),e(sK,ROe),e(tg,BOe),e(tg,Ax),e(Ax,POe),e(tg,$Oe),e(F,IOe),e(F,ag),e(ag,lK),e(lK,qOe),e(ag,NOe),e(ag,yx),e(yx,jOe),e(ag,DOe),e(F,GOe),e(F,ng),e(ng,iK),e(iK,OOe),e(ng,VOe),e(ng,Lx),e(Lx,XOe),e(ng,zOe),e(F,QOe),e(F,sg),e(sg,dK),e(dK,WOe),e(sg,HOe),e(sg,xx),e(xx,UOe),e(sg,JOe),e(F,YOe),e(F,lg),e(lg,cK),e(cK,KOe),e(lg,ZOe),e(lg,kx),e(kx,eVe),e(lg,oVe),e(F,rVe),e(F,ig),e(ig,fK),e(fK,tVe),e(ig,aVe),e(ig,Sx),e(Sx,nVe),e(ig,sVe),e(F,lVe),e(F,dg),e(dg,mK),e(mK,iVe),e(dg,dVe),e(dg,Rx),e(Rx,cVe),e(dg,fVe),e(F,mVe),e(F,cg),e(cg,gK),e(gK,gVe),e(cg,hVe),e(cg,Bx),e(Bx,pVe),e(cg,_Ve),e(F,uVe),e(F,fg),e(fg,hK),e(hK,bVe),e(fg,FVe),e(fg,Px),e(Px,vVe),e(fg,TVe),e(F,MVe),e(F,mg),e(mg,pK),e(pK,EVe),e(mg,CVe),e(mg,$x),e($x,wVe),e(mg,AVe),e(F,yVe),e(F,gg),e(gg,_K),e(_K,LVe),e(gg,xVe),e(gg,Ix),e(Ix,kVe),e(gg,SVe),e(F,RVe),e(F,hg),e(hg,uK),e(uK,BVe),e(hg,PVe),e(hg,qx),e(qx,$Ve),e(hg,IVe),e(F,qVe),e(F,pg),e(pg,bK),e(bK,NVe),e(pg,jVe),e(pg,Nx),e(Nx,DVe),e(pg,GVe),e(F,OVe),e(F,_g),e(_g,FK),e(FK,VVe),e(_g,XVe),e(_g,jx),e(jx,zVe),e(_g,QVe),e(F,WVe),e(F,ug),e(ug,vK),e(vK,HVe),e(ug,UVe),e(ug,Dx),e(Dx,JVe),e(ug,YVe),e(F,KVe),e(F,bg),e(bg,TK),e(TK,ZVe),e(bg,eXe),e(bg,Gx),e(Gx,oXe),e(bg,rXe),e(F,tXe),e(F,Fg),e(Fg,MK),e(MK,aXe),e(Fg,nXe),e(Fg,Ox),e(Ox,sXe),e(Fg,lXe),e(F,iXe),e(F,vg),e(vg,EK),e(EK,dXe),e(vg,cXe),e(vg,Vx),e(Vx,fXe),e(vg,mXe),e(F,gXe),e(F,Tg),e(Tg,CK),e(CK,hXe),e(Tg,pXe),e(Tg,Xx),e(Xx,_Xe),e(Tg,uXe),e(F,bXe),e(F,Mg),e(Mg,wK),e(wK,FXe),e(Mg,vXe),e(Mg,zx),e(zx,TXe),e(Mg,MXe),e(F,EXe),e(F,Eg),e(Eg,AK),e(AK,CXe),e(Eg,wXe),e(Eg,Qx),e(Qx,AXe),e(Eg,yXe),e(F,LXe),e(F,Cg),e(Cg,yK),e(yK,xXe),e(Cg,kXe),e(Cg,Wx),e(Wx,SXe),e(Cg,RXe),e(F,BXe),e(F,wg),e(wg,LK),e(LK,PXe),e(wg,$Xe),e(wg,Hx),e(Hx,IXe),e(wg,qXe),e(F,NXe),e(F,Ag),e(Ag,xK),e(xK,jXe),e(Ag,DXe),e(Ag,Ux),e(Ux,GXe),e(Ag,OXe),e(F,VXe),e(F,yg),e(yg,kK),e(kK,XXe),e(yg,zXe),e(yg,Jx),e(Jx,QXe),e(yg,WXe),e(F,HXe),e(F,Lg),e(Lg,SK),e(SK,UXe),e(Lg,JXe),e(Lg,Yx),e(Yx,YXe),e(Lg,KXe),e(F,ZXe),e(F,xg),e(xg,RK),e(RK,eze),e(xg,oze),e(xg,Kx),e(Kx,rze),e(xg,tze),e(F,aze),e(F,kg),e(kg,BK),e(BK,nze),e(kg,sze),e(kg,Zx),e(Zx,lze),e(kg,ize),e(F,dze),e(F,Sg),e(Sg,PK),e(PK,cze),e(Sg,fze),e(Sg,ek),e(ek,mze),e(Sg,gze),e(F,hze),e(F,Rg),e(Rg,$K),e($K,pze),e(Rg,_ze),e(Rg,ok),e(ok,uze),e(Rg,bze),e(F,Fze),e(F,Bg),e(Bg,IK),e(IK,vze),e(Bg,Tze),e(Bg,rk),e(rk,Mze),e(Bg,Eze),e(F,Cze),e(F,Pg),e(Pg,qK),e(qK,wze),e(Pg,Aze),e(Pg,tk),e(tk,yze),e(Pg,Lze),e(mo,xze),e(mo,NK),e(NK,kze),e(mo,Sze),g(wC,mo,null),e(Qo,Rze),e(Qo,$g),g(AC,$g,null),e($g,Bze),e($g,jK),e(jK,Pze),b(c,DSe,u),b(c,Qi,u),e(Qi,Ig),e(Ig,DK),g(yC,DK,null),e(Qi,$ze),e(Qi,GK),e(GK,Ize),b(c,GSe,u),b(c,Wo,u),g(LC,Wo,null),e(Wo,qze),e(Wo,xC),e(xC,Nze),e(xC,ak),e(ak,jze),e(xC,Dze),e(Wo,Gze),e(Wo,kC),e(kC,Oze),e(kC,OK),e(OK,Vze),e(kC,Xze),e(Wo,zze),e(Wo,go),g(SC,go,null),e(go,Qze),e(go,VK),e(VK,Wze),e(go,Hze),e(go,Oa),e(Oa,Uze),e(Oa,XK),e(XK,Jze),e(Oa,Yze),e(Oa,zK),e(zK,Kze),e(Oa,Zze),e(Oa,QK),e(QK,eQe),e(Oa,oQe),e(go,rQe),e(go,E),e(E,Qn),e(Qn,WK),e(WK,tQe),e(Qn,aQe),e(Qn,nk),e(nk,nQe),e(Qn,sQe),e(Qn,sk),e(sk,lQe),e(Qn,iQe),e(E,dQe),e(E,Wn),e(Wn,HK),e(HK,cQe),e(Wn,fQe),e(Wn,lk),e(lk,mQe),e(Wn,gQe),e(Wn,ik),e(ik,hQe),e(Wn,pQe),e(E,_Qe),e(E,Hn),e(Hn,UK),e(UK,uQe),e(Hn,bQe),e(Hn,dk),e(dk,FQe),e(Hn,vQe),e(Hn,ck),e(ck,TQe),e(Hn,MQe),e(E,EQe),e(E,qg),e(qg,JK),e(JK,CQe),e(qg,wQe),e(qg,fk),e(fk,AQe),e(qg,yQe),e(E,LQe),e(E,Un),e(Un,YK),e(YK,xQe),e(Un,kQe),e(Un,mk),e(mk,SQe),e(Un,RQe),e(Un,gk),e(gk,BQe),e(Un,PQe),e(E,$Qe),e(E,Ng),e(Ng,KK),e(KK,IQe),e(Ng,qQe),e(Ng,hk),e(hk,NQe),e(Ng,jQe),e(E,DQe),e(E,jg),e(jg,ZK),e(ZK,GQe),e(jg,OQe),e(jg,pk),e(pk,VQe),e(jg,XQe),e(E,zQe),e(E,Dg),e(Dg,eZ),e(eZ,QQe),e(Dg,WQe),e(Dg,_k),e(_k,HQe),e(Dg,UQe),e(E,JQe),e(E,Jn),e(Jn,oZ),e(oZ,YQe),e(Jn,KQe),e(Jn,uk),e(uk,ZQe),e(Jn,eWe),e(Jn,bk),e(bk,oWe),e(Jn,rWe),e(E,tWe),e(E,Yn),e(Yn,rZ),e(rZ,aWe),e(Yn,nWe),e(Yn,Fk),e(Fk,sWe),e(Yn,lWe),e(Yn,vk),e(vk,iWe),e(Yn,dWe),e(E,cWe),e(E,Kn),e(Kn,tZ),e(tZ,fWe),e(Kn,mWe),e(Kn,Tk),e(Tk,gWe),e(Kn,hWe),e(Kn,Mk),e(Mk,pWe),e(Kn,_We),e(E,uWe),e(E,Gg),e(Gg,aZ),e(aZ,bWe),e(Gg,FWe),e(Gg,Ek),e(Ek,vWe),e(Gg,TWe),e(E,MWe),e(E,Og),e(Og,nZ),e(nZ,EWe),e(Og,CWe),e(Og,Ck),e(Ck,wWe),e(Og,AWe),e(E,yWe),e(E,Zn),e(Zn,sZ),e(sZ,LWe),e(Zn,xWe),e(Zn,wk),e(wk,kWe),e(Zn,SWe),e(Zn,Ak),e(Ak,RWe),e(Zn,BWe),e(E,PWe),e(E,Vg),e(Vg,lZ),e(lZ,$We),e(Vg,IWe),e(Vg,yk),e(yk,qWe),e(Vg,NWe),e(E,jWe),e(E,es),e(es,iZ),e(iZ,DWe),e(es,GWe),e(es,Lk),e(Lk,OWe),e(es,VWe),e(es,xk),e(xk,XWe),e(es,zWe),e(E,QWe),e(E,os),e(os,dZ),e(dZ,WWe),e(os,HWe),e(os,kk),e(kk,UWe),e(os,JWe),e(os,Sk),e(Sk,YWe),e(os,KWe),e(E,ZWe),e(E,rs),e(rs,cZ),e(cZ,eHe),e(rs,oHe),e(rs,Rk),e(Rk,rHe),e(rs,tHe),e(rs,fZ),e(fZ,aHe),e(rs,nHe),e(E,sHe),e(E,Xg),e(Xg,mZ),e(mZ,lHe),e(Xg,iHe),e(Xg,Bk),e(Bk,dHe),e(Xg,cHe),e(E,fHe),e(E,ts),e(ts,gZ),e(gZ,mHe),e(ts,gHe),e(ts,Pk),e(Pk,hHe),e(ts,pHe),e(ts,$k),e($k,_He),e(ts,uHe),e(E,bHe),e(E,zg),e(zg,hZ),e(hZ,FHe),e(zg,vHe),e(zg,Ik),e(Ik,THe),e(zg,MHe),e(E,EHe),e(E,as),e(as,pZ),e(pZ,CHe),e(as,wHe),e(as,qk),e(qk,AHe),e(as,yHe),e(as,Nk),e(Nk,LHe),e(as,xHe),e(E,kHe),e(E,ns),e(ns,_Z),e(_Z,SHe),e(ns,RHe),e(ns,jk),e(jk,BHe),e(ns,PHe),e(ns,Dk),e(Dk,$He),e(ns,IHe),e(E,qHe),e(E,ss),e(ss,uZ),e(uZ,NHe),e(ss,jHe),e(ss,Gk),e(Gk,DHe),e(ss,GHe),e(ss,Ok),e(Ok,OHe),e(ss,VHe),e(E,XHe),e(E,Qg),e(Qg,bZ),e(bZ,zHe),e(Qg,QHe),e(Qg,Vk),e(Vk,WHe),e(Qg,HHe),e(E,UHe),e(E,ls),e(ls,FZ),e(FZ,JHe),e(ls,YHe),e(ls,Xk),e(Xk,KHe),e(ls,ZHe),e(ls,zk),e(zk,eUe),e(ls,oUe),e(E,rUe),e(E,Wg),e(Wg,vZ),e(vZ,tUe),e(Wg,aUe),e(Wg,Qk),e(Qk,nUe),e(Wg,sUe),e(E,lUe),e(E,is),e(is,TZ),e(TZ,iUe),e(is,dUe),e(is,Wk),e(Wk,cUe),e(is,fUe),e(is,Hk),e(Hk,mUe),e(is,gUe),e(E,hUe),e(E,ds),e(ds,MZ),e(MZ,pUe),e(ds,_Ue),e(ds,Uk),e(Uk,uUe),e(ds,bUe),e(ds,Jk),e(Jk,FUe),e(ds,vUe),e(E,TUe),e(E,cs),e(cs,EZ),e(EZ,MUe),e(cs,EUe),e(cs,Yk),e(Yk,CUe),e(cs,wUe),e(cs,Kk),e(Kk,AUe),e(cs,yUe),e(E,LUe),e(E,fs),e(fs,CZ),e(CZ,xUe),e(fs,kUe),e(fs,Zk),e(Zk,SUe),e(fs,RUe),e(fs,eS),e(eS,BUe),e(fs,PUe),e(E,$Ue),e(E,Hg),e(Hg,wZ),e(wZ,IUe),e(Hg,qUe),e(Hg,oS),e(oS,NUe),e(Hg,jUe),e(E,DUe),e(E,ms),e(ms,AZ),e(AZ,GUe),e(ms,OUe),e(ms,rS),e(rS,VUe),e(ms,XUe),e(ms,tS),e(tS,zUe),e(ms,QUe),e(E,WUe),e(E,gs),e(gs,yZ),e(yZ,HUe),e(gs,UUe),e(gs,aS),e(aS,JUe),e(gs,YUe),e(gs,nS),e(nS,KUe),e(gs,ZUe),e(E,eJe),e(E,hs),e(hs,LZ),e(LZ,oJe),e(hs,rJe),e(hs,sS),e(sS,tJe),e(hs,aJe),e(hs,lS),e(lS,nJe),e(hs,sJe),e(E,lJe),e(E,ps),e(ps,xZ),e(xZ,iJe),e(ps,dJe),e(ps,iS),e(iS,cJe),e(ps,fJe),e(ps,dS),e(dS,mJe),e(ps,gJe),e(E,hJe),e(E,_s),e(_s,kZ),e(kZ,pJe),e(_s,_Je),e(_s,cS),e(cS,uJe),e(_s,bJe),e(_s,fS),e(fS,FJe),e(_s,vJe),e(E,TJe),e(E,us),e(us,SZ),e(SZ,MJe),e(us,EJe),e(us,mS),e(mS,CJe),e(us,wJe),e(us,gS),e(gS,AJe),e(us,yJe),e(E,LJe),e(E,Ug),e(Ug,RZ),e(RZ,xJe),e(Ug,kJe),e(Ug,hS),e(hS,SJe),e(Ug,RJe),e(E,BJe),e(E,bs),e(bs,BZ),e(BZ,PJe),e(bs,$Je),e(bs,pS),e(pS,IJe),e(bs,qJe),e(bs,_S),e(_S,NJe),e(bs,jJe),e(E,DJe),e(E,Jg),e(Jg,PZ),e(PZ,GJe),e(Jg,OJe),e(Jg,uS),e(uS,VJe),e(Jg,XJe),e(E,zJe),e(E,Yg),e(Yg,$Z),e($Z,QJe),e(Yg,WJe),e(Yg,bS),e(bS,HJe),e(Yg,UJe),e(E,JJe),e(E,Fs),e(Fs,IZ),e(IZ,YJe),e(Fs,KJe),e(Fs,FS),e(FS,ZJe),e(Fs,eYe),e(Fs,vS),e(vS,oYe),e(Fs,rYe),e(E,tYe),e(E,vs),e(vs,qZ),e(qZ,aYe),e(vs,nYe),e(vs,TS),e(TS,sYe),e(vs,lYe),e(vs,MS),e(MS,iYe),e(vs,dYe),e(E,cYe),e(E,Kg),e(Kg,NZ),e(NZ,fYe),e(Kg,mYe),e(Kg,ES),e(ES,gYe),e(Kg,hYe),e(E,pYe),e(E,Ts),e(Ts,jZ),e(jZ,_Ye),e(Ts,uYe),e(Ts,CS),e(CS,bYe),e(Ts,FYe),e(Ts,wS),e(wS,vYe),e(Ts,TYe),e(E,MYe),e(E,Ms),e(Ms,DZ),e(DZ,EYe),e(Ms,CYe),e(Ms,AS),e(AS,wYe),e(Ms,AYe),e(Ms,yS),e(yS,yYe),e(Ms,LYe),e(E,xYe),e(E,Es),e(Es,GZ),e(GZ,kYe),e(Es,SYe),e(Es,LS),e(LS,RYe),e(Es,BYe),e(Es,xS),e(xS,PYe),e(Es,$Ye),e(E,IYe),e(E,Cs),e(Cs,OZ),e(OZ,qYe),e(Cs,NYe),e(Cs,kS),e(kS,jYe),e(Cs,DYe),e(Cs,SS),e(SS,GYe),e(Cs,OYe),e(E,VYe),e(E,ws),e(ws,VZ),e(VZ,XYe),e(ws,zYe),e(ws,RS),e(RS,QYe),e(ws,WYe),e(ws,BS),e(BS,HYe),e(ws,UYe),e(E,JYe),e(E,Zg),e(Zg,XZ),e(XZ,YYe),e(Zg,KYe),e(Zg,PS),e(PS,ZYe),e(Zg,eKe),e(E,oKe),e(E,eh),e(eh,zZ),e(zZ,rKe),e(eh,tKe),e(eh,$S),e($S,aKe),e(eh,nKe),e(E,sKe),e(E,oh),e(oh,QZ),e(QZ,lKe),e(oh,iKe),e(oh,IS),e(IS,dKe),e(oh,cKe),e(E,fKe),e(E,rh),e(rh,WZ),e(WZ,mKe),e(rh,gKe),e(rh,qS),e(qS,hKe),e(rh,pKe),e(E,_Ke),e(E,As),e(As,HZ),e(HZ,uKe),e(As,bKe),e(As,NS),e(NS,FKe),e(As,vKe),e(As,jS),e(jS,TKe),e(As,MKe),e(E,EKe),e(E,th),e(th,UZ),e(UZ,CKe),e(th,wKe),e(th,DS),e(DS,AKe),e(th,yKe),e(E,LKe),e(E,ys),e(ys,JZ),e(JZ,xKe),e(ys,kKe),e(ys,GS),e(GS,SKe),e(ys,RKe),e(ys,OS),e(OS,BKe),e(ys,PKe),e(E,$Ke),e(E,Ls),e(Ls,YZ),e(YZ,IKe),e(Ls,qKe),e(Ls,VS),e(VS,NKe),e(Ls,jKe),e(Ls,XS),e(XS,DKe),e(Ls,GKe),e(E,OKe),e(E,xs),e(xs,KZ),e(KZ,VKe),e(xs,XKe),e(xs,zS),e(zS,zKe),e(xs,QKe),e(xs,QS),e(QS,WKe),e(xs,HKe),e(E,UKe),e(E,ks),e(ks,ZZ),e(ZZ,JKe),e(ks,YKe),e(ks,WS),e(WS,KKe),e(ks,ZKe),e(ks,HS),e(HS,eZe),e(ks,oZe),e(E,rZe),e(E,Ss),e(Ss,eee),e(eee,tZe),e(Ss,aZe),e(Ss,US),e(US,nZe),e(Ss,sZe),e(Ss,JS),e(JS,lZe),e(Ss,iZe),e(E,dZe),e(E,Rs),e(Rs,oee),e(oee,cZe),e(Rs,fZe),e(Rs,YS),e(YS,mZe),e(Rs,gZe),e(Rs,KS),e(KS,hZe),e(Rs,pZe),e(E,_Ze),e(E,ah),e(ah,ree),e(ree,uZe),e(ah,bZe),e(ah,ZS),e(ZS,FZe),e(ah,vZe),e(E,TZe),e(E,nh),e(nh,tee),e(tee,MZe),e(nh,EZe),e(nh,eR),e(eR,CZe),e(nh,wZe),e(E,AZe),e(E,Bs),e(Bs,aee),e(aee,yZe),e(Bs,LZe),e(Bs,oR),e(oR,xZe),e(Bs,kZe),e(Bs,rR),e(rR,SZe),e(Bs,RZe),e(E,BZe),e(E,Ps),e(Ps,nee),e(nee,PZe),e(Ps,$Ze),e(Ps,tR),e(tR,IZe),e(Ps,qZe),e(Ps,aR),e(aR,NZe),e(Ps,jZe),e(E,DZe),e(E,$s),e($s,see),e(see,GZe),e($s,OZe),e($s,nR),e(nR,VZe),e($s,XZe),e($s,sR),e(sR,zZe),e($s,QZe),e(E,WZe),e(E,sh),e(sh,lee),e(lee,HZe),e(sh,UZe),e(sh,lR),e(lR,JZe),e(sh,YZe),e(E,KZe),e(E,lh),e(lh,iee),e(iee,ZZe),e(lh,eeo),e(lh,iR),e(iR,oeo),e(lh,reo),e(E,teo),e(E,ih),e(ih,dee),e(dee,aeo),e(ih,neo),e(ih,dR),e(dR,seo),e(ih,leo),e(E,ieo),e(E,dh),e(dh,cee),e(cee,deo),e(dh,ceo),e(dh,cR),e(cR,feo),e(dh,meo),e(E,geo),e(E,ch),e(ch,fee),e(fee,heo),e(ch,peo),e(ch,fR),e(fR,_eo),e(ch,ueo),e(E,beo),e(E,Is),e(Is,mee),e(mee,Feo),e(Is,veo),e(Is,mR),e(mR,Teo),e(Is,Meo),e(Is,gR),e(gR,Eeo),e(Is,Ceo),e(E,weo),e(E,fh),e(fh,gee),e(gee,Aeo),e(fh,yeo),e(fh,hR),e(hR,Leo),e(fh,xeo),e(E,keo),e(E,mh),e(mh,hee),e(hee,Seo),e(mh,Reo),e(mh,pR),e(pR,Beo),e(mh,Peo),e(E,$eo),e(E,qs),e(qs,pee),e(pee,Ieo),e(qs,qeo),e(qs,_R),e(_R,Neo),e(qs,jeo),e(qs,uR),e(uR,Deo),e(qs,Geo),e(E,Oeo),e(E,Ns),e(Ns,_ee),e(_ee,Veo),e(Ns,Xeo),e(Ns,bR),e(bR,zeo),e(Ns,Qeo),e(Ns,FR),e(FR,Weo),e(Ns,Heo),e(go,Ueo),e(go,uee),e(uee,Jeo),e(go,Yeo),g(RC,go,null),e(Wo,Keo),e(Wo,gh),g(BC,gh,null),e(gh,Zeo),e(gh,bee),e(bee,eoo),b(c,OSe,u),b(c,Wi,u),e(Wi,hh),e(hh,Fee),g(PC,Fee,null),e(Wi,ooo),e(Wi,vee),e(vee,roo),b(c,VSe,u),b(c,Ho,u),g($C,Ho,null),e(Ho,too),e(Ho,IC),e(IC,aoo),e(IC,vR),e(vR,noo),e(IC,soo),e(Ho,loo),e(Ho,qC),e(qC,ioo),e(qC,Tee),e(Tee,doo),e(qC,coo),e(Ho,foo),e(Ho,$e),g(NC,$e,null),e($e,moo),e($e,Mee),e(Mee,goo),e($e,hoo),e($e,Va),e(Va,poo),e(Va,Eee),e(Eee,_oo),e(Va,uoo),e(Va,Cee),e(Cee,boo),e(Va,Foo),e(Va,wee),e(wee,voo),e(Va,Too),e($e,Moo),e($e,te),e(te,ph),e(ph,Aee),e(Aee,Eoo),e(ph,Coo),e(ph,TR),e(TR,woo),e(ph,Aoo),e(te,yoo),e(te,_h),e(_h,yee),e(yee,Loo),e(_h,xoo),e(_h,MR),e(MR,koo),e(_h,Soo),e(te,Roo),e(te,uh),e(uh,Lee),e(Lee,Boo),e(uh,Poo),e(uh,ER),e(ER,$oo),e(uh,Ioo),e(te,qoo),e(te,bh),e(bh,xee),e(xee,Noo),e(bh,joo),e(bh,CR),e(CR,Doo),e(bh,Goo),e(te,Ooo),e(te,Fh),e(Fh,kee),e(kee,Voo),e(Fh,Xoo),e(Fh,wR),e(wR,zoo),e(Fh,Qoo),e(te,Woo),e(te,vh),e(vh,See),e(See,Hoo),e(vh,Uoo),e(vh,AR),e(AR,Joo),e(vh,Yoo),e(te,Koo),e(te,Th),e(Th,Ree),e(Ree,Zoo),e(Th,ero),e(Th,yR),e(yR,oro),e(Th,rro),e(te,tro),e(te,Mh),e(Mh,Bee),e(Bee,aro),e(Mh,nro),e(Mh,LR),e(LR,sro),e(Mh,lro),e(te,iro),e(te,Eh),e(Eh,Pee),e(Pee,dro),e(Eh,cro),e(Eh,xR),e(xR,fro),e(Eh,mro),e(te,gro),e(te,Ch),e(Ch,$ee),e($ee,hro),e(Ch,pro),e(Ch,kR),e(kR,_ro),e(Ch,uro),e(te,bro),e(te,wh),e(wh,Iee),e(Iee,Fro),e(wh,vro),e(wh,SR),e(SR,Tro),e(wh,Mro),e(te,Ero),e(te,Ah),e(Ah,qee),e(qee,Cro),e(Ah,wro),e(Ah,RR),e(RR,Aro),e(Ah,yro),e(te,Lro),e(te,yh),e(yh,Nee),e(Nee,xro),e(yh,kro),e(yh,BR),e(BR,Sro),e(yh,Rro),e(te,Bro),e(te,Lh),e(Lh,jee),e(jee,Pro),e(Lh,$ro),e(Lh,PR),e(PR,Iro),e(Lh,qro),e(te,Nro),e(te,xh),e(xh,Dee),e(Dee,jro),e(xh,Dro),e(xh,$R),e($R,Gro),e(xh,Oro),e(te,Vro),e(te,kh),e(kh,Gee),e(Gee,Xro),e(kh,zro),e(kh,IR),e(IR,Qro),e(kh,Wro),e(te,Hro),e(te,Sh),e(Sh,Oee),e(Oee,Uro),e(Sh,Jro),e(Sh,qR),e(qR,Yro),e(Sh,Kro),e(te,Zro),e(te,Rh),e(Rh,Vee),e(Vee,eto),e(Rh,oto),e(Rh,NR),e(NR,rto),e(Rh,tto),e($e,ato),g(Bh,$e,null),e($e,nto),e($e,Xee),e(Xee,sto),e($e,lto),g(jC,$e,null),e(Ho,ito),e(Ho,Ph),g(DC,Ph,null),e(Ph,dto),e(Ph,zee),e(zee,cto),b(c,XSe,u),b(c,Hi,u),e(Hi,$h),e($h,Qee),g(GC,Qee,null),e(Hi,fto),e(Hi,Wee),e(Wee,mto),b(c,zSe,u),b(c,Uo,u),g(OC,Uo,null),e(Uo,gto),e(Uo,VC),e(VC,hto),e(VC,jR),e(jR,pto),e(VC,_to),e(Uo,uto),e(Uo,XC),e(XC,bto),e(XC,Hee),e(Hee,Fto),e(XC,vto),e(Uo,Tto),e(Uo,Ie),g(zC,Ie,null),e(Ie,Mto),e(Ie,Uee),e(Uee,Eto),e(Ie,Cto),e(Ie,Ui),e(Ui,wto),e(Ui,Jee),e(Jee,Ato),e(Ui,yto),e(Ui,Yee),e(Yee,Lto),e(Ui,xto),e(Ie,kto),e(Ie,ke),e(ke,Ih),e(Ih,Kee),e(Kee,Sto),e(Ih,Rto),e(Ih,DR),e(DR,Bto),e(Ih,Pto),e(ke,$to),e(ke,qh),e(qh,Zee),e(Zee,Ito),e(qh,qto),e(qh,GR),e(GR,Nto),e(qh,jto),e(ke,Dto),e(ke,Nh),e(Nh,eoe),e(eoe,Gto),e(Nh,Oto),e(Nh,OR),e(OR,Vto),e(Nh,Xto),e(ke,zto),e(ke,jh),e(jh,ooe),e(ooe,Qto),e(jh,Wto),e(jh,VR),e(VR,Hto),e(jh,Uto),e(ke,Jto),e(ke,Dh),e(Dh,roe),e(roe,Yto),e(Dh,Kto),e(Dh,XR),e(XR,Zto),e(Dh,eao),e(ke,oao),e(ke,Gh),e(Gh,toe),e(toe,rao),e(Gh,tao),e(Gh,zR),e(zR,aao),e(Gh,nao),e(ke,sao),e(ke,Oh),e(Oh,aoe),e(aoe,lao),e(Oh,iao),e(Oh,QR),e(QR,dao),e(Oh,cao),e(ke,fao),e(ke,Vh),e(Vh,noe),e(noe,mao),e(Vh,gao),e(Vh,WR),e(WR,hao),e(Vh,pao),e(Ie,_ao),g(Xh,Ie,null),e(Ie,uao),e(Ie,soe),e(soe,bao),e(Ie,Fao),g(QC,Ie,null),e(Uo,vao),e(Uo,zh),g(WC,zh,null),e(zh,Tao),e(zh,loe),e(loe,Mao),b(c,QSe,u),b(c,Ji,u),e(Ji,Qh),e(Qh,ioe),g(HC,ioe,null),e(Ji,Eao),e(Ji,doe),e(doe,Cao),b(c,WSe,u),b(c,Jo,u),g(UC,Jo,null),e(Jo,wao),e(Jo,Yi),e(Yi,Aao),e(Yi,HR),e(HR,yao),e(Yi,Lao),e(Yi,UR),e(UR,xao),e(Yi,kao),e(Jo,Sao),e(Jo,JC),e(JC,Rao),e(JC,coe),e(coe,Bao),e(JC,Pao),e(Jo,$ao),e(Jo,Xr),g(YC,Xr,null),e(Xr,Iao),e(Xr,foe),e(foe,qao),e(Xr,Nao),e(Xr,Ki),e(Ki,jao),e(Ki,moe),e(moe,Dao),e(Ki,Gao),e(Ki,JR),e(JR,Oao),e(Ki,Vao),e(Xr,Xao),e(Xr,goe),e(goe,zao),e(Xr,Qao),g(KC,Xr,null),e(Jo,Wao),e(Jo,qe),g(ZC,qe,null),e(qe,Hao),e(qe,hoe),e(hoe,Uao),e(qe,Jao),e(qe,Xa),e(Xa,Yao),e(Xa,poe),e(poe,Kao),e(Xa,Zao),e(Xa,_oe),e(_oe,eno),e(Xa,ono),e(Xa,uoe),e(uoe,rno),e(Xa,tno),e(qe,ano),e(qe,T),e(T,Wh),e(Wh,boe),e(boe,nno),e(Wh,sno),e(Wh,YR),e(YR,lno),e(Wh,ino),e(T,dno),e(T,Hh),e(Hh,Foe),e(Foe,cno),e(Hh,fno),e(Hh,KR),e(KR,mno),e(Hh,gno),e(T,hno),e(T,Uh),e(Uh,voe),e(voe,pno),e(Uh,_no),e(Uh,ZR),e(ZR,uno),e(Uh,bno),e(T,Fno),e(T,Jh),e(Jh,Toe),e(Toe,vno),e(Jh,Tno),e(Jh,eB),e(eB,Mno),e(Jh,Eno),e(T,Cno),e(T,Yh),e(Yh,Moe),e(Moe,wno),e(Yh,Ano),e(Yh,oB),e(oB,yno),e(Yh,Lno),e(T,xno),e(T,Kh),e(Kh,Eoe),e(Eoe,kno),e(Kh,Sno),e(Kh,rB),e(rB,Rno),e(Kh,Bno),e(T,Pno),e(T,Zh),e(Zh,Coe),e(Coe,$no),e(Zh,Ino),e(Zh,tB),e(tB,qno),e(Zh,Nno),e(T,jno),e(T,ep),e(ep,woe),e(woe,Dno),e(ep,Gno),e(ep,aB),e(aB,Ono),e(ep,Vno),e(T,Xno),e(T,op),e(op,Aoe),e(Aoe,zno),e(op,Qno),e(op,nB),e(nB,Wno),e(op,Hno),e(T,Uno),e(T,rp),e(rp,yoe),e(yoe,Jno),e(rp,Yno),e(rp,sB),e(sB,Kno),e(rp,Zno),e(T,eso),e(T,tp),e(tp,Loe),e(Loe,oso),e(tp,rso),e(tp,lB),e(lB,tso),e(tp,aso),e(T,nso),e(T,ap),e(ap,xoe),e(xoe,sso),e(ap,lso),e(ap,iB),e(iB,iso),e(ap,dso),e(T,cso),e(T,np),e(np,koe),e(koe,fso),e(np,mso),e(np,dB),e(dB,gso),e(np,hso),e(T,pso),e(T,sp),e(sp,Soe),e(Soe,_so),e(sp,uso),e(sp,cB),e(cB,bso),e(sp,Fso),e(T,vso),e(T,lp),e(lp,Roe),e(Roe,Tso),e(lp,Mso),e(lp,fB),e(fB,Eso),e(lp,Cso),e(T,wso),e(T,ip),e(ip,Boe),e(Boe,Aso),e(ip,yso),e(ip,mB),e(mB,Lso),e(ip,xso),e(T,kso),e(T,dp),e(dp,Poe),e(Poe,Sso),e(dp,Rso),e(dp,gB),e(gB,Bso),e(dp,Pso),e(T,$so),e(T,cp),e(cp,$oe),e($oe,Iso),e(cp,qso),e(cp,hB),e(hB,Nso),e(cp,jso),e(T,Dso),e(T,fp),e(fp,Ioe),e(Ioe,Gso),e(fp,Oso),e(fp,pB),e(pB,Vso),e(fp,Xso),e(T,zso),e(T,mp),e(mp,qoe),e(qoe,Qso),e(mp,Wso),e(mp,_B),e(_B,Hso),e(mp,Uso),e(T,Jso),e(T,gp),e(gp,Noe),e(Noe,Yso),e(gp,Kso),e(gp,uB),e(uB,Zso),e(gp,elo),e(T,olo),e(T,hp),e(hp,joe),e(joe,rlo),e(hp,tlo),e(hp,bB),e(bB,alo),e(hp,nlo),e(T,slo),e(T,pp),e(pp,Doe),e(Doe,llo),e(pp,ilo),e(pp,FB),e(FB,dlo),e(pp,clo),e(T,flo),e(T,_p),e(_p,Goe),e(Goe,mlo),e(_p,glo),e(_p,vB),e(vB,hlo),e(_p,plo),e(T,_lo),e(T,up),e(up,Ooe),e(Ooe,ulo),e(up,blo),e(up,TB),e(TB,Flo),e(up,vlo),e(T,Tlo),e(T,bp),e(bp,Voe),e(Voe,Mlo),e(bp,Elo),e(bp,MB),e(MB,Clo),e(bp,wlo),e(T,Alo),e(T,Fp),e(Fp,Xoe),e(Xoe,ylo),e(Fp,Llo),e(Fp,EB),e(EB,xlo),e(Fp,klo),e(T,Slo),e(T,vp),e(vp,zoe),e(zoe,Rlo),e(vp,Blo),e(vp,CB),e(CB,Plo),e(vp,$lo),e(T,Ilo),e(T,Tp),e(Tp,Qoe),e(Qoe,qlo),e(Tp,Nlo),e(Tp,wB),e(wB,jlo),e(Tp,Dlo),e(T,Glo),e(T,js),e(js,Woe),e(Woe,Olo),e(js,Vlo),e(js,AB),e(AB,Xlo),e(js,zlo),e(js,yB),e(yB,Qlo),e(js,Wlo),e(T,Hlo),e(T,Mp),e(Mp,Hoe),e(Hoe,Ulo),e(Mp,Jlo),e(Mp,LB),e(LB,Ylo),e(Mp,Klo),e(T,Zlo),e(T,Ep),e(Ep,Uoe),e(Uoe,eio),e(Ep,oio),e(Ep,xB),e(xB,rio),e(Ep,tio),e(T,aio),e(T,Cp),e(Cp,Joe),e(Joe,nio),e(Cp,sio),e(Cp,kB),e(kB,lio),e(Cp,iio),e(T,dio),e(T,wp),e(wp,Yoe),e(Yoe,cio),e(wp,fio),e(wp,SB),e(SB,mio),e(wp,gio),e(T,hio),e(T,Ap),e(Ap,Koe),e(Koe,pio),e(Ap,_io),e(Ap,RB),e(RB,uio),e(Ap,bio),e(T,Fio),e(T,yp),e(yp,Zoe),e(Zoe,vio),e(yp,Tio),e(yp,BB),e(BB,Mio),e(yp,Eio),e(T,Cio),e(T,Lp),e(Lp,ere),e(ere,wio),e(Lp,Aio),e(Lp,PB),e(PB,yio),e(Lp,Lio),e(T,xio),e(T,xp),e(xp,ore),e(ore,kio),e(xp,Sio),e(xp,$B),e($B,Rio),e(xp,Bio),e(T,Pio),e(T,kp),e(kp,rre),e(rre,$io),e(kp,Iio),e(kp,IB),e(IB,qio),e(kp,Nio),e(T,jio),e(T,Sp),e(Sp,tre),e(tre,Dio),e(Sp,Gio),e(Sp,qB),e(qB,Oio),e(Sp,Vio),e(T,Xio),e(T,Rp),e(Rp,are),e(are,zio),e(Rp,Qio),e(Rp,NB),e(NB,Wio),e(Rp,Hio),e(T,Uio),e(T,Bp),e(Bp,nre),e(nre,Jio),e(Bp,Yio),e(Bp,jB),e(jB,Kio),e(Bp,Zio),e(T,edo),e(T,Pp),e(Pp,sre),e(sre,odo),e(Pp,rdo),e(Pp,DB),e(DB,tdo),e(Pp,ado),e(T,ndo),e(T,$p),e($p,lre),e(lre,sdo),e($p,ldo),e($p,GB),e(GB,ido),e($p,ddo),e(T,cdo),e(T,Ip),e(Ip,ire),e(ire,fdo),e(Ip,mdo),e(Ip,OB),e(OB,gdo),e(Ip,hdo),e(T,pdo),e(T,qp),e(qp,dre),e(dre,_do),e(qp,udo),e(qp,VB),e(VB,bdo),e(qp,Fdo),e(T,vdo),e(T,Np),e(Np,cre),e(cre,Tdo),e(Np,Mdo),e(Np,XB),e(XB,Edo),e(Np,Cdo),e(T,wdo),e(T,jp),e(jp,fre),e(fre,Ado),e(jp,ydo),e(jp,zB),e(zB,Ldo),e(jp,xdo),e(T,kdo),e(T,Dp),e(Dp,mre),e(mre,Sdo),e(Dp,Rdo),e(Dp,QB),e(QB,Bdo),e(Dp,Pdo),e(T,$do),e(T,Gp),e(Gp,gre),e(gre,Ido),e(Gp,qdo),e(Gp,WB),e(WB,Ndo),e(Gp,jdo),e(T,Ddo),e(T,Op),e(Op,hre),e(hre,Gdo),e(Op,Odo),e(Op,HB),e(HB,Vdo),e(Op,Xdo),e(T,zdo),e(T,Vp),e(Vp,pre),e(pre,Qdo),e(Vp,Wdo),e(Vp,UB),e(UB,Hdo),e(Vp,Udo),e(T,Jdo),e(T,Xp),e(Xp,_re),e(_re,Ydo),e(Xp,Kdo),e(Xp,JB),e(JB,Zdo),e(Xp,eco),e(T,oco),e(T,zp),e(zp,ure),e(ure,rco),e(zp,tco),e(zp,YB),e(YB,aco),e(zp,nco),e(T,sco),e(T,Qp),e(Qp,bre),e(bre,lco),e(Qp,ico),e(Qp,KB),e(KB,dco),e(Qp,cco),e(T,fco),e(T,Wp),e(Wp,Fre),e(Fre,mco),e(Wp,gco),e(Wp,ZB),e(ZB,hco),e(Wp,pco),e(T,_co),e(T,Hp),e(Hp,vre),e(vre,uco),e(Hp,bco),e(Hp,eP),e(eP,Fco),e(Hp,vco),e(T,Tco),e(T,Up),e(Up,Tre),e(Tre,Mco),e(Up,Eco),e(Up,oP),e(oP,Cco),e(Up,wco),e(T,Aco),e(T,Jp),e(Jp,Mre),e(Mre,yco),e(Jp,Lco),e(Jp,rP),e(rP,xco),e(Jp,kco),e(T,Sco),e(T,Yp),e(Yp,Ere),e(Ere,Rco),e(Yp,Bco),e(Yp,tP),e(tP,Pco),e(Yp,$co),e(T,Ico),e(T,Kp),e(Kp,Cre),e(Cre,qco),e(Kp,Nco),e(Kp,aP),e(aP,jco),e(Kp,Dco),e(T,Gco),e(T,Zp),e(Zp,wre),e(wre,Oco),e(Zp,Vco),e(Zp,nP),e(nP,Xco),e(Zp,zco),e(T,Qco),e(T,e_),e(e_,Are),e(Are,Wco),e(e_,Hco),e(e_,sP),e(sP,Uco),e(e_,Jco),e(T,Yco),e(T,o_),e(o_,yre),e(yre,Kco),e(o_,Zco),e(o_,lP),e(lP,efo),e(o_,ofo),e(T,rfo),e(T,r_),e(r_,Lre),e(Lre,tfo),e(r_,afo),e(r_,iP),e(iP,nfo),e(r_,sfo),e(T,lfo),e(T,t_),e(t_,xre),e(xre,ifo),e(t_,dfo),e(t_,dP),e(dP,cfo),e(t_,ffo),e(T,mfo),e(T,a_),e(a_,kre),e(kre,gfo),e(a_,hfo),e(a_,cP),e(cP,pfo),e(a_,_fo),e(T,ufo),e(T,n_),e(n_,Sre),e(Sre,bfo),e(n_,Ffo),e(n_,fP),e(fP,vfo),e(n_,Tfo),e(T,Mfo),e(T,s_),e(s_,Rre),e(Rre,Efo),e(s_,Cfo),e(s_,mP),e(mP,wfo),e(s_,Afo),e(T,yfo),e(T,l_),e(l_,Bre),e(Bre,Lfo),e(l_,xfo),e(l_,gP),e(gP,kfo),e(l_,Sfo),e(T,Rfo),e(T,i_),e(i_,Pre),e(Pre,Bfo),e(i_,Pfo),e(i_,hP),e(hP,$fo),e(i_,Ifo),e(T,qfo),e(T,d_),e(d_,$re),e($re,Nfo),e(d_,jfo),e(d_,pP),e(pP,Dfo),e(d_,Gfo),e(T,Ofo),e(T,c_),e(c_,Ire),e(Ire,Vfo),e(c_,Xfo),e(c_,_P),e(_P,zfo),e(c_,Qfo),e(T,Wfo),e(T,f_),e(f_,qre),e(qre,Hfo),e(f_,Ufo),e(f_,uP),e(uP,Jfo),e(f_,Yfo),e(T,Kfo),e(T,m_),e(m_,Nre),e(Nre,Zfo),e(m_,emo),e(m_,bP),e(bP,omo),e(m_,rmo),e(T,tmo),e(T,g_),e(g_,jre),e(jre,amo),e(g_,nmo),e(g_,FP),e(FP,smo),e(g_,lmo),e(T,imo),e(T,h_),e(h_,Dre),e(Dre,dmo),e(h_,cmo),e(h_,vP),e(vP,fmo),e(h_,mmo),e(T,gmo),e(T,p_),e(p_,Gre),e(Gre,hmo),e(p_,pmo),e(p_,TP),e(TP,_mo),e(p_,umo),e(T,bmo),e(T,__),e(__,Ore),e(Ore,Fmo),e(__,vmo),e(__,MP),e(MP,Tmo),e(__,Mmo),e(T,Emo),e(T,u_),e(u_,Vre),e(Vre,Cmo),e(u_,wmo),e(u_,EP),e(EP,Amo),e(u_,ymo),e(T,Lmo),e(T,b_),e(b_,Xre),e(Xre,xmo),e(b_,kmo),e(b_,CP),e(CP,Smo),e(b_,Rmo),e(T,Bmo),e(T,F_),e(F_,zre),e(zre,Pmo),e(F_,$mo),e(F_,wP),e(wP,Imo),e(F_,qmo),e(T,Nmo),e(T,v_),e(v_,Qre),e(Qre,jmo),e(v_,Dmo),e(v_,AP),e(AP,Gmo),e(v_,Omo),e(T,Vmo),e(T,T_),e(T_,Wre),e(Wre,Xmo),e(T_,zmo),e(T_,yP),e(yP,Qmo),e(T_,Wmo),e(T,Hmo),e(T,M_),e(M_,Hre),e(Hre,Umo),e(M_,Jmo),e(M_,LP),e(LP,Ymo),e(M_,Kmo),e(T,Zmo),e(T,E_),e(E_,Ure),e(Ure,ego),e(E_,ogo),e(E_,xP),e(xP,rgo),e(E_,tgo),e(T,ago),e(T,C_),e(C_,Jre),e(Jre,ngo),e(C_,sgo),e(C_,kP),e(kP,lgo),e(C_,igo),e(T,dgo),e(T,w_),e(w_,Yre),e(Yre,cgo),e(w_,fgo),e(w_,SP),e(SP,mgo),e(w_,ggo),e(T,hgo),e(T,A_),e(A_,Kre),e(Kre,pgo),e(A_,_go),e(A_,RP),e(RP,ugo),e(A_,bgo),e(T,Fgo),e(T,y_),e(y_,Zre),e(Zre,vgo),e(y_,Tgo),e(y_,BP),e(BP,Mgo),e(y_,Ego),e(T,Cgo),e(T,L_),e(L_,ete),e(ete,wgo),e(L_,Ago),e(L_,PP),e(PP,ygo),e(L_,Lgo),e(T,xgo),e(T,x_),e(x_,ote),e(ote,kgo),e(x_,Sgo),e(x_,$P),e($P,Rgo),e(x_,Bgo),e(qe,Pgo),e(qe,k_),e(k_,$go),e(k_,rte),e(rte,Igo),e(k_,qgo),e(k_,tte),e(tte,Ngo),e(qe,jgo),e(qe,ate),e(ate,Dgo),e(qe,Ggo),g(e5,qe,null),b(c,HSe,u),b(c,Zi,u),e(Zi,S_),e(S_,nte),g(o5,nte,null),e(Zi,Ogo),e(Zi,ste),e(ste,Vgo),b(c,USe,u),b(c,Yo,u),g(r5,Yo,null),e(Yo,Xgo),e(Yo,ed),e(ed,zgo),e(ed,IP),e(IP,Qgo),e(ed,Wgo),e(ed,qP),e(qP,Hgo),e(ed,Ugo),e(Yo,Jgo),e(Yo,t5),e(t5,Ygo),e(t5,lte),e(lte,Kgo),e(t5,Zgo),e(Yo,eho),e(Yo,zr),g(a5,zr,null),e(zr,oho),e(zr,ite),e(ite,rho),e(zr,tho),e(zr,od),e(od,aho),e(od,dte),e(dte,nho),e(od,sho),e(od,NP),e(NP,lho),e(od,iho),e(zr,dho),e(zr,cte),e(cte,cho),e(zr,fho),g(n5,zr,null),e(Yo,mho),e(Yo,Ne),g(s5,Ne,null),e(Ne,gho),e(Ne,fte),e(fte,hho),e(Ne,pho),e(Ne,za),e(za,_ho),e(za,mte),e(mte,uho),e(za,bho),e(za,gte),e(gte,Fho),e(za,vho),e(za,hte),e(hte,Tho),e(za,Mho),e(Ne,Eho),e(Ne,S),e(S,R_),e(R_,pte),e(pte,Cho),e(R_,who),e(R_,jP),e(jP,Aho),e(R_,yho),e(S,Lho),e(S,B_),e(B_,_te),e(_te,xho),e(B_,kho),e(B_,DP),e(DP,Sho),e(B_,Rho),e(S,Bho),e(S,P_),e(P_,ute),e(ute,Pho),e(P_,$ho),e(P_,GP),e(GP,Iho),e(P_,qho),e(S,Nho),e(S,$_),e($_,bte),e(bte,jho),e($_,Dho),e($_,OP),e(OP,Gho),e($_,Oho),e(S,Vho),e(S,I_),e(I_,Fte),e(Fte,Xho),e(I_,zho),e(I_,VP),e(VP,Qho),e(I_,Who),e(S,Hho),e(S,q_),e(q_,vte),e(vte,Uho),e(q_,Jho),e(q_,XP),e(XP,Yho),e(q_,Kho),e(S,Zho),e(S,N_),e(N_,Tte),e(Tte,epo),e(N_,opo),e(N_,zP),e(zP,rpo),e(N_,tpo),e(S,apo),e(S,j_),e(j_,Mte),e(Mte,npo),e(j_,spo),e(j_,QP),e(QP,lpo),e(j_,ipo),e(S,dpo),e(S,D_),e(D_,Ete),e(Ete,cpo),e(D_,fpo),e(D_,WP),e(WP,mpo),e(D_,gpo),e(S,hpo),e(S,G_),e(G_,Cte),e(Cte,ppo),e(G_,_po),e(G_,HP),e(HP,upo),e(G_,bpo),e(S,Fpo),e(S,O_),e(O_,wte),e(wte,vpo),e(O_,Tpo),e(O_,UP),e(UP,Mpo),e(O_,Epo),e(S,Cpo),e(S,V_),e(V_,Ate),e(Ate,wpo),e(V_,Apo),e(V_,JP),e(JP,ypo),e(V_,Lpo),e(S,xpo),e(S,X_),e(X_,yte),e(yte,kpo),e(X_,Spo),e(X_,YP),e(YP,Rpo),e(X_,Bpo),e(S,Ppo),e(S,z_),e(z_,Lte),e(Lte,$po),e(z_,Ipo),e(z_,KP),e(KP,qpo),e(z_,Npo),e(S,jpo),e(S,Q_),e(Q_,xte),e(xte,Dpo),e(Q_,Gpo),e(Q_,ZP),e(ZP,Opo),e(Q_,Vpo),e(S,Xpo),e(S,W_),e(W_,kte),e(kte,zpo),e(W_,Qpo),e(W_,e$),e(e$,Wpo),e(W_,Hpo),e(S,Upo),e(S,H_),e(H_,Ste),e(Ste,Jpo),e(H_,Ypo),e(H_,o$),e(o$,Kpo),e(H_,Zpo),e(S,e_o),e(S,U_),e(U_,Rte),e(Rte,o_o),e(U_,r_o),e(U_,r$),e(r$,t_o),e(U_,a_o),e(S,n_o),e(S,J_),e(J_,Bte),e(Bte,s_o),e(J_,l_o),e(J_,t$),e(t$,i_o),e(J_,d_o),e(S,c_o),e(S,Y_),e(Y_,Pte),e(Pte,f_o),e(Y_,m_o),e(Y_,a$),e(a$,g_o),e(Y_,h_o),e(S,p_o),e(S,K_),e(K_,$te),e($te,__o),e(K_,u_o),e(K_,n$),e(n$,b_o),e(K_,F_o),e(S,v_o),e(S,Z_),e(Z_,Ite),e(Ite,T_o),e(Z_,M_o),e(Z_,s$),e(s$,E_o),e(Z_,C_o),e(S,w_o),e(S,eu),e(eu,qte),e(qte,A_o),e(eu,y_o),e(eu,l$),e(l$,L_o),e(eu,x_o),e(S,k_o),e(S,ou),e(ou,Nte),e(Nte,S_o),e(ou,R_o),e(ou,i$),e(i$,B_o),e(ou,P_o),e(S,$_o),e(S,ru),e(ru,jte),e(jte,I_o),e(ru,q_o),e(ru,d$),e(d$,N_o),e(ru,j_o),e(S,D_o),e(S,tu),e(tu,Dte),e(Dte,G_o),e(tu,O_o),e(tu,c$),e(c$,V_o),e(tu,X_o),e(S,z_o),e(S,au),e(au,Gte),e(Gte,Q_o),e(au,W_o),e(au,f$),e(f$,H_o),e(au,U_o),e(S,J_o),e(S,nu),e(nu,Ote),e(Ote,Y_o),e(nu,K_o),e(nu,m$),e(m$,Z_o),e(nu,euo),e(S,ouo),e(S,su),e(su,Vte),e(Vte,ruo),e(su,tuo),e(su,g$),e(g$,auo),e(su,nuo),e(S,suo),e(S,lu),e(lu,Xte),e(Xte,luo),e(lu,iuo),e(lu,h$),e(h$,duo),e(lu,cuo),e(S,fuo),e(S,iu),e(iu,zte),e(zte,muo),e(iu,guo),e(iu,p$),e(p$,huo),e(iu,puo),e(S,_uo),e(S,du),e(du,Qte),e(Qte,uuo),e(du,buo),e(du,_$),e(_$,Fuo),e(du,vuo),e(S,Tuo),e(S,cu),e(cu,Wte),e(Wte,Muo),e(cu,Euo),e(cu,u$),e(u$,Cuo),e(cu,wuo),e(S,Auo),e(S,fu),e(fu,Hte),e(Hte,yuo),e(fu,Luo),e(fu,b$),e(b$,xuo),e(fu,kuo),e(S,Suo),e(S,mu),e(mu,Ute),e(Ute,Ruo),e(mu,Buo),e(mu,F$),e(F$,Puo),e(mu,$uo),e(S,Iuo),e(S,gu),e(gu,Jte),e(Jte,quo),e(gu,Nuo),e(gu,v$),e(v$,juo),e(gu,Duo),e(S,Guo),e(S,hu),e(hu,Yte),e(Yte,Ouo),e(hu,Vuo),e(hu,T$),e(T$,Xuo),e(hu,zuo),e(S,Quo),e(S,pu),e(pu,Kte),e(Kte,Wuo),e(pu,Huo),e(pu,M$),e(M$,Uuo),e(pu,Juo),e(S,Yuo),e(S,_u),e(_u,Zte),e(Zte,Kuo),e(_u,Zuo),e(_u,E$),e(E$,e1o),e(_u,o1o),e(Ne,r1o),e(Ne,uu),e(uu,t1o),e(uu,eae),e(eae,a1o),e(uu,n1o),e(uu,oae),e(oae,s1o),e(Ne,l1o),e(Ne,rae),e(rae,i1o),e(Ne,d1o),g(l5,Ne,null),b(c,JSe,u),b(c,rd,u),e(rd,bu),e(bu,tae),g(i5,tae,null),e(rd,c1o),e(rd,aae),e(aae,f1o),b(c,YSe,u),b(c,Ko,u),g(d5,Ko,null),e(Ko,m1o),e(Ko,td),e(td,g1o),e(td,C$),e(C$,h1o),e(td,p1o),e(td,w$),e(w$,_1o),e(td,u1o),e(Ko,b1o),e(Ko,c5),e(c5,F1o),e(c5,nae),e(nae,v1o),e(c5,T1o),e(Ko,M1o),e(Ko,Qr),g(f5,Qr,null),e(Qr,E1o),e(Qr,sae),e(sae,C1o),e(Qr,w1o),e(Qr,ad),e(ad,A1o),e(ad,lae),e(lae,y1o),e(ad,L1o),e(ad,A$),e(A$,x1o),e(ad,k1o),e(Qr,S1o),e(Qr,iae),e(iae,R1o),e(Qr,B1o),g(m5,Qr,null),e(Ko,P1o),e(Ko,je),g(g5,je,null),e(je,$1o),e(je,dae),e(dae,I1o),e(je,q1o),e(je,Qa),e(Qa,N1o),e(Qa,cae),e(cae,j1o),e(Qa,D1o),e(Qa,fae),e(fae,G1o),e(Qa,O1o),e(Qa,mae),e(mae,V1o),e(Qa,X1o),e(je,z1o),e(je,$),e($,Fu),e(Fu,gae),e(gae,Q1o),e(Fu,W1o),e(Fu,y$),e(y$,H1o),e(Fu,U1o),e($,J1o),e($,vu),e(vu,hae),e(hae,Y1o),e(vu,K1o),e(vu,L$),e(L$,Z1o),e(vu,e4o),e($,o4o),e($,Tu),e(Tu,pae),e(pae,r4o),e(Tu,t4o),e(Tu,x$),e(x$,a4o),e(Tu,n4o),e($,s4o),e($,Mu),e(Mu,_ae),e(_ae,l4o),e(Mu,i4o),e(Mu,k$),e(k$,d4o),e(Mu,c4o),e($,f4o),e($,Eu),e(Eu,uae),e(uae,m4o),e(Eu,g4o),e(Eu,S$),e(S$,h4o),e(Eu,p4o),e($,_4o),e($,Cu),e(Cu,bae),e(bae,u4o),e(Cu,b4o),e(Cu,R$),e(R$,F4o),e(Cu,v4o),e($,T4o),e($,wu),e(wu,Fae),e(Fae,M4o),e(wu,E4o),e(wu,B$),e(B$,C4o),e(wu,w4o),e($,A4o),e($,Au),e(Au,vae),e(vae,y4o),e(Au,L4o),e(Au,P$),e(P$,x4o),e(Au,k4o),e($,S4o),e($,yu),e(yu,Tae),e(Tae,R4o),e(yu,B4o),e(yu,$$),e($$,P4o),e(yu,$4o),e($,I4o),e($,Lu),e(Lu,Mae),e(Mae,q4o),e(Lu,N4o),e(Lu,I$),e(I$,j4o),e(Lu,D4o),e($,G4o),e($,xu),e(xu,Eae),e(Eae,O4o),e(xu,V4o),e(xu,q$),e(q$,X4o),e(xu,z4o),e($,Q4o),e($,ku),e(ku,Cae),e(Cae,W4o),e(ku,H4o),e(ku,N$),e(N$,U4o),e(ku,J4o),e($,Y4o),e($,Su),e(Su,wae),e(wae,K4o),e(Su,Z4o),e(Su,j$),e(j$,ebo),e(Su,obo),e($,rbo),e($,Ru),e(Ru,Aae),e(Aae,tbo),e(Ru,abo),e(Ru,D$),e(D$,nbo),e(Ru,sbo),e($,lbo),e($,Bu),e(Bu,yae),e(yae,ibo),e(Bu,dbo),e(Bu,G$),e(G$,cbo),e(Bu,fbo),e($,mbo),e($,Pu),e(Pu,Lae),e(Lae,gbo),e(Pu,hbo),e(Pu,O$),e(O$,pbo),e(Pu,_bo),e($,ubo),e($,$u),e($u,xae),e(xae,bbo),e($u,Fbo),e($u,V$),e(V$,vbo),e($u,Tbo),e($,Mbo),e($,Iu),e(Iu,kae),e(kae,Ebo),e(Iu,Cbo),e(Iu,X$),e(X$,wbo),e(Iu,Abo),e($,ybo),e($,qu),e(qu,Sae),e(Sae,Lbo),e(qu,xbo),e(qu,z$),e(z$,kbo),e(qu,Sbo),e($,Rbo),e($,Nu),e(Nu,Rae),e(Rae,Bbo),e(Nu,Pbo),e(Nu,Q$),e(Q$,$bo),e(Nu,Ibo),e($,qbo),e($,ju),e(ju,Bae),e(Bae,Nbo),e(ju,jbo),e(ju,W$),e(W$,Dbo),e(ju,Gbo),e($,Obo),e($,Du),e(Du,Pae),e(Pae,Vbo),e(Du,Xbo),e(Du,H$),e(H$,zbo),e(Du,Qbo),e($,Wbo),e($,Gu),e(Gu,$ae),e($ae,Hbo),e(Gu,Ubo),e(Gu,U$),e(U$,Jbo),e(Gu,Ybo),e($,Kbo),e($,Ou),e(Ou,Iae),e(Iae,Zbo),e(Ou,e3o),e(Ou,J$),e(J$,o3o),e(Ou,r3o),e($,t3o),e($,Vu),e(Vu,qae),e(qae,a3o),e(Vu,n3o),e(Vu,Y$),e(Y$,s3o),e(Vu,l3o),e($,i3o),e($,Xu),e(Xu,Nae),e(Nae,d3o),e(Xu,c3o),e(Xu,K$),e(K$,f3o),e(Xu,m3o),e($,g3o),e($,zu),e(zu,jae),e(jae,h3o),e(zu,p3o),e(zu,Z$),e(Z$,_3o),e(zu,u3o),e($,b3o),e($,Qu),e(Qu,Dae),e(Dae,F3o),e(Qu,v3o),e(Qu,eI),e(eI,T3o),e(Qu,M3o),e($,E3o),e($,Wu),e(Wu,Gae),e(Gae,C3o),e(Wu,w3o),e(Wu,oI),e(oI,A3o),e(Wu,y3o),e($,L3o),e($,Hu),e(Hu,Oae),e(Oae,x3o),e(Hu,k3o),e(Hu,rI),e(rI,S3o),e(Hu,R3o),e($,B3o),e($,Uu),e(Uu,Vae),e(Vae,P3o),e(Uu,$3o),e(Uu,tI),e(tI,I3o),e(Uu,q3o),e($,N3o),e($,Ju),e(Ju,Xae),e(Xae,j3o),e(Ju,D3o),e(Ju,aI),e(aI,G3o),e(Ju,O3o),e($,V3o),e($,Yu),e(Yu,zae),e(zae,X3o),e(Yu,z3o),e(Yu,nI),e(nI,Q3o),e(Yu,W3o),e($,H3o),e($,Ku),e(Ku,Qae),e(Qae,U3o),e(Ku,J3o),e(Ku,sI),e(sI,Y3o),e(Ku,K3o),e($,Z3o),e($,Zu),e(Zu,Wae),e(Wae,e2o),e(Zu,o2o),e(Zu,lI),e(lI,r2o),e(Zu,t2o),e(je,a2o),e(je,e1),e(e1,n2o),e(e1,Hae),e(Hae,s2o),e(e1,l2o),e(e1,Uae),e(Uae,i2o),e(je,d2o),e(je,Jae),e(Jae,c2o),e(je,f2o),g(h5,je,null),b(c,KSe,u),b(c,nd,u),e(nd,o1),e(o1,Yae),g(p5,Yae,null),e(nd,m2o),e(nd,Kae),e(Kae,g2o),b(c,ZSe,u),b(c,Zo,u),g(_5,Zo,null),e(Zo,h2o),e(Zo,sd),e(sd,p2o),e(sd,iI),e(iI,_2o),e(sd,u2o),e(sd,dI),e(dI,b2o),e(sd,F2o),e(Zo,v2o),e(Zo,u5),e(u5,T2o),e(u5,Zae),e(Zae,M2o),e(u5,E2o),e(Zo,C2o),e(Zo,Wr),g(b5,Wr,null),e(Wr,w2o),e(Wr,ene),e(ene,A2o),e(Wr,y2o),e(Wr,ld),e(ld,L2o),e(ld,one),e(one,x2o),e(ld,k2o),e(ld,cI),e(cI,S2o),e(ld,R2o),e(Wr,B2o),e(Wr,rne),e(rne,P2o),e(Wr,$2o),g(F5,Wr,null),e(Zo,I2o),e(Zo,De),g(v5,De,null),e(De,q2o),e(De,tne),e(tne,N2o),e(De,j2o),e(De,Wa),e(Wa,D2o),e(Wa,ane),e(ane,G2o),e(Wa,O2o),e(Wa,nne),e(nne,V2o),e(Wa,X2o),e(Wa,sne),e(sne,z2o),e(Wa,Q2o),e(De,W2o),e(De,I),e(I,r1),e(r1,lne),e(lne,H2o),e(r1,U2o),e(r1,fI),e(fI,J2o),e(r1,Y2o),e(I,K2o),e(I,t1),e(t1,ine),e(ine,Z2o),e(t1,eFo),e(t1,mI),e(mI,oFo),e(t1,rFo),e(I,tFo),e(I,a1),e(a1,dne),e(dne,aFo),e(a1,nFo),e(a1,gI),e(gI,sFo),e(a1,lFo),e(I,iFo),e(I,n1),e(n1,cne),e(cne,dFo),e(n1,cFo),e(n1,hI),e(hI,fFo),e(n1,mFo),e(I,gFo),e(I,s1),e(s1,fne),e(fne,hFo),e(s1,pFo),e(s1,pI),e(pI,_Fo),e(s1,uFo),e(I,bFo),e(I,l1),e(l1,mne),e(mne,FFo),e(l1,vFo),e(l1,_I),e(_I,TFo),e(l1,MFo),e(I,EFo),e(I,i1),e(i1,gne),e(gne,CFo),e(i1,wFo),e(i1,uI),e(uI,AFo),e(i1,yFo),e(I,LFo),e(I,d1),e(d1,hne),e(hne,xFo),e(d1,kFo),e(d1,bI),e(bI,SFo),e(d1,RFo),e(I,BFo),e(I,c1),e(c1,pne),e(pne,PFo),e(c1,$Fo),e(c1,FI),e(FI,IFo),e(c1,qFo),e(I,NFo),e(I,f1),e(f1,_ne),e(_ne,jFo),e(f1,DFo),e(f1,vI),e(vI,GFo),e(f1,OFo),e(I,VFo),e(I,m1),e(m1,une),e(une,XFo),e(m1,zFo),e(m1,TI),e(TI,QFo),e(m1,WFo),e(I,HFo),e(I,g1),e(g1,bne),e(bne,UFo),e(g1,JFo),e(g1,MI),e(MI,YFo),e(g1,KFo),e(I,ZFo),e(I,h1),e(h1,Fne),e(Fne,evo),e(h1,ovo),e(h1,EI),e(EI,rvo),e(h1,tvo),e(I,avo),e(I,p1),e(p1,vne),e(vne,nvo),e(p1,svo),e(p1,CI),e(CI,lvo),e(p1,ivo),e(I,dvo),e(I,_1),e(_1,Tne),e(Tne,cvo),e(_1,fvo),e(_1,wI),e(wI,mvo),e(_1,gvo),e(I,hvo),e(I,u1),e(u1,Mne),e(Mne,pvo),e(u1,_vo),e(u1,AI),e(AI,uvo),e(u1,bvo),e(I,Fvo),e(I,b1),e(b1,Ene),e(Ene,vvo),e(b1,Tvo),e(b1,yI),e(yI,Mvo),e(b1,Evo),e(I,Cvo),e(I,F1),e(F1,Cne),e(Cne,wvo),e(F1,Avo),e(F1,LI),e(LI,yvo),e(F1,Lvo),e(I,xvo),e(I,v1),e(v1,wne),e(wne,kvo),e(v1,Svo),e(v1,xI),e(xI,Rvo),e(v1,Bvo),e(I,Pvo),e(I,T1),e(T1,Ane),e(Ane,$vo),e(T1,Ivo),e(T1,kI),e(kI,qvo),e(T1,Nvo),e(I,jvo),e(I,M1),e(M1,yne),e(yne,Dvo),e(M1,Gvo),e(M1,SI),e(SI,Ovo),e(M1,Vvo),e(I,Xvo),e(I,E1),e(E1,Lne),e(Lne,zvo),e(E1,Qvo),e(E1,RI),e(RI,Wvo),e(E1,Hvo),e(I,Uvo),e(I,C1),e(C1,xne),e(xne,Jvo),e(C1,Yvo),e(C1,BI),e(BI,Kvo),e(C1,Zvo),e(I,e6o),e(I,w1),e(w1,kne),e(kne,o6o),e(w1,r6o),e(w1,PI),e(PI,t6o),e(w1,a6o),e(I,n6o),e(I,A1),e(A1,Sne),e(Sne,s6o),e(A1,l6o),e(A1,$I),e($I,i6o),e(A1,d6o),e(I,c6o),e(I,y1),e(y1,Rne),e(Rne,f6o),e(y1,m6o),e(y1,II),e(II,g6o),e(y1,h6o),e(I,p6o),e(I,L1),e(L1,Bne),e(Bne,_6o),e(L1,u6o),e(L1,qI),e(qI,b6o),e(L1,F6o),e(I,v6o),e(I,x1),e(x1,Pne),e(Pne,T6o),e(x1,M6o),e(x1,NI),e(NI,E6o),e(x1,C6o),e(I,w6o),e(I,k1),e(k1,$ne),e($ne,A6o),e(k1,y6o),e(k1,jI),e(jI,L6o),e(k1,x6o),e(I,k6o),e(I,S1),e(S1,Ine),e(Ine,S6o),e(S1,R6o),e(S1,DI),e(DI,B6o),e(S1,P6o),e(I,$6o),e(I,R1),e(R1,qne),e(qne,I6o),e(R1,q6o),e(R1,Nne),e(Nne,N6o),e(R1,j6o),e(I,D6o),e(I,B1),e(B1,jne),e(jne,G6o),e(B1,O6o),e(B1,GI),e(GI,V6o),e(B1,X6o),e(I,z6o),e(I,P1),e(P1,Dne),e(Dne,Q6o),e(P1,W6o),e(P1,OI),e(OI,H6o),e(P1,U6o),e(I,J6o),e(I,$1),e($1,Gne),e(Gne,Y6o),e($1,K6o),e($1,VI),e(VI,Z6o),e($1,eTo),e(I,oTo),e(I,I1),e(I1,One),e(One,rTo),e(I1,tTo),e(I1,XI),e(XI,aTo),e(I1,nTo),e(De,sTo),e(De,q1),e(q1,lTo),e(q1,Vne),e(Vne,iTo),e(q1,dTo),e(q1,Xne),e(Xne,cTo),e(De,fTo),e(De,zne),e(zne,mTo),e(De,gTo),g(T5,De,null),b(c,eRe,u),b(c,id,u),e(id,N1),e(N1,Qne),g(M5,Qne,null),e(id,hTo),e(id,Wne),e(Wne,pTo),b(c,oRe,u),b(c,er,u),g(E5,er,null),e(er,_To),e(er,dd),e(dd,uTo),e(dd,zI),e(zI,bTo),e(dd,FTo),e(dd,QI),e(QI,vTo),e(dd,TTo),e(er,MTo),e(er,C5),e(C5,ETo),e(C5,Hne),e(Hne,CTo),e(C5,wTo),e(er,ATo),e(er,Hr),g(w5,Hr,null),e(Hr,yTo),e(Hr,Une),e(Une,LTo),e(Hr,xTo),e(Hr,cd),e(cd,kTo),e(cd,Jne),e(Jne,STo),e(cd,RTo),e(cd,WI),e(WI,BTo),e(cd,PTo),e(Hr,$To),e(Hr,Yne),e(Yne,ITo),e(Hr,qTo),g(A5,Hr,null),e(er,NTo),e(er,Ge),g(y5,Ge,null),e(Ge,jTo),e(Ge,Kne),e(Kne,DTo),e(Ge,GTo),e(Ge,Ha),e(Ha,OTo),e(Ha,Zne),e(Zne,VTo),e(Ha,XTo),e(Ha,ese),e(ese,zTo),e(Ha,QTo),e(Ha,ose),e(ose,WTo),e(Ha,HTo),e(Ge,UTo),e(Ge,se),e(se,j1),e(j1,rse),e(rse,JTo),e(j1,YTo),e(j1,HI),e(HI,KTo),e(j1,ZTo),e(se,e7o),e(se,D1),e(D1,tse),e(tse,o7o),e(D1,r7o),e(D1,UI),e(UI,t7o),e(D1,a7o),e(se,n7o),e(se,G1),e(G1,ase),e(ase,s7o),e(G1,l7o),e(G1,JI),e(JI,i7o),e(G1,d7o),e(se,c7o),e(se,O1),e(O1,nse),e(nse,f7o),e(O1,m7o),e(O1,YI),e(YI,g7o),e(O1,h7o),e(se,p7o),e(se,V1),e(V1,sse),e(sse,_7o),e(V1,u7o),e(V1,KI),e(KI,b7o),e(V1,F7o),e(se,v7o),e(se,X1),e(X1,lse),e(lse,T7o),e(X1,M7o),e(X1,ZI),e(ZI,E7o),e(X1,C7o),e(se,w7o),e(se,z1),e(z1,ise),e(ise,A7o),e(z1,y7o),e(z1,eq),e(eq,L7o),e(z1,x7o),e(se,k7o),e(se,Q1),e(Q1,dse),e(dse,S7o),e(Q1,R7o),e(Q1,oq),e(oq,B7o),e(Q1,P7o),e(se,$7o),e(se,W1),e(W1,cse),e(cse,I7o),e(W1,q7o),e(W1,rq),e(rq,N7o),e(W1,j7o),e(se,D7o),e(se,H1),e(H1,fse),e(fse,G7o),e(H1,O7o),e(H1,tq),e(tq,V7o),e(H1,X7o),e(se,z7o),e(se,U1),e(U1,mse),e(mse,Q7o),e(U1,W7o),e(U1,aq),e(aq,H7o),e(U1,U7o),e(se,J7o),e(se,J1),e(J1,gse),e(gse,Y7o),e(J1,K7o),e(J1,nq),e(nq,Z7o),e(J1,eMo),e(se,oMo),e(se,Y1),e(Y1,hse),e(hse,rMo),e(Y1,tMo),e(Y1,sq),e(sq,aMo),e(Y1,nMo),e(se,sMo),e(se,K1),e(K1,pse),e(pse,lMo),e(K1,iMo),e(K1,lq),e(lq,dMo),e(K1,cMo),e(se,fMo),e(se,Z1),e(Z1,_se),e(_se,mMo),e(Z1,gMo),e(Z1,iq),e(iq,hMo),e(Z1,pMo),e(se,_Mo),e(se,e4),e(e4,use),e(use,uMo),e(e4,bMo),e(e4,dq),e(dq,FMo),e(e4,vMo),e(Ge,TMo),e(Ge,o4),e(o4,MMo),e(o4,bse),e(bse,EMo),e(o4,CMo),e(o4,Fse),e(Fse,wMo),e(Ge,AMo),e(Ge,vse),e(vse,yMo),e(Ge,LMo),g(L5,Ge,null),b(c,rRe,u),b(c,fd,u),e(fd,r4),e(r4,Tse),g(x5,Tse,null),e(fd,xMo),e(fd,Mse),e(Mse,kMo),b(c,tRe,u),b(c,or,u),g(k5,or,null),e(or,SMo),e(or,md),e(md,RMo),e(md,cq),e(cq,BMo),e(md,PMo),e(md,fq),e(fq,$Mo),e(md,IMo),e(or,qMo),e(or,S5),e(S5,NMo),e(S5,Ese),e(Ese,jMo),e(S5,DMo),e(or,GMo),e(or,Ur),g(R5,Ur,null),e(Ur,OMo),e(Ur,Cse),e(Cse,VMo),e(Ur,XMo),e(Ur,gd),e(gd,zMo),e(gd,wse),e(wse,QMo),e(gd,WMo),e(gd,mq),e(mq,HMo),e(gd,UMo),e(Ur,JMo),e(Ur,Ase),e(Ase,YMo),e(Ur,KMo),g(B5,Ur,null),e(or,ZMo),e(or,Oe),g(P5,Oe,null),e(Oe,eEo),e(Oe,yse),e(yse,oEo),e(Oe,rEo),e(Oe,Ua),e(Ua,tEo),e(Ua,Lse),e(Lse,aEo),e(Ua,nEo),e(Ua,xse),e(xse,sEo),e(Ua,lEo),e(Ua,kse),e(kse,iEo),e(Ua,dEo),e(Oe,cEo),e(Oe,y),e(y,t4),e(t4,Sse),e(Sse,fEo),e(t4,mEo),e(t4,gq),e(gq,gEo),e(t4,hEo),e(y,pEo),e(y,a4),e(a4,Rse),e(Rse,_Eo),e(a4,uEo),e(a4,hq),e(hq,bEo),e(a4,FEo),e(y,vEo),e(y,n4),e(n4,Bse),e(Bse,TEo),e(n4,MEo),e(n4,pq),e(pq,EEo),e(n4,CEo),e(y,wEo),e(y,s4),e(s4,Pse),e(Pse,AEo),e(s4,yEo),e(s4,_q),e(_q,LEo),e(s4,xEo),e(y,kEo),e(y,l4),e(l4,$se),e($se,SEo),e(l4,REo),e(l4,uq),e(uq,BEo),e(l4,PEo),e(y,$Eo),e(y,i4),e(i4,Ise),e(Ise,IEo),e(i4,qEo),e(i4,bq),e(bq,NEo),e(i4,jEo),e(y,DEo),e(y,d4),e(d4,qse),e(qse,GEo),e(d4,OEo),e(d4,Fq),e(Fq,VEo),e(d4,XEo),e(y,zEo),e(y,c4),e(c4,Nse),e(Nse,QEo),e(c4,WEo),e(c4,vq),e(vq,HEo),e(c4,UEo),e(y,JEo),e(y,f4),e(f4,jse),e(jse,YEo),e(f4,KEo),e(f4,Tq),e(Tq,ZEo),e(f4,eCo),e(y,oCo),e(y,m4),e(m4,Dse),e(Dse,rCo),e(m4,tCo),e(m4,Mq),e(Mq,aCo),e(m4,nCo),e(y,sCo),e(y,g4),e(g4,Gse),e(Gse,lCo),e(g4,iCo),e(g4,Eq),e(Eq,dCo),e(g4,cCo),e(y,fCo),e(y,h4),e(h4,Ose),e(Ose,mCo),e(h4,gCo),e(h4,Cq),e(Cq,hCo),e(h4,pCo),e(y,_Co),e(y,p4),e(p4,Vse),e(Vse,uCo),e(p4,bCo),e(p4,wq),e(wq,FCo),e(p4,vCo),e(y,TCo),e(y,_4),e(_4,Xse),e(Xse,MCo),e(_4,ECo),e(_4,Aq),e(Aq,CCo),e(_4,wCo),e(y,ACo),e(y,u4),e(u4,zse),e(zse,yCo),e(u4,LCo),e(u4,yq),e(yq,xCo),e(u4,kCo),e(y,SCo),e(y,b4),e(b4,Qse),e(Qse,RCo),e(b4,BCo),e(b4,Lq),e(Lq,PCo),e(b4,$Co),e(y,ICo),e(y,F4),e(F4,Wse),e(Wse,qCo),e(F4,NCo),e(F4,xq),e(xq,jCo),e(F4,DCo),e(y,GCo),e(y,v4),e(v4,Hse),e(Hse,OCo),e(v4,VCo),e(v4,kq),e(kq,XCo),e(v4,zCo),e(y,QCo),e(y,T4),e(T4,Use),e(Use,WCo),e(T4,HCo),e(T4,Sq),e(Sq,UCo),e(T4,JCo),e(y,YCo),e(y,M4),e(M4,Jse),e(Jse,KCo),e(M4,ZCo),e(M4,Rq),e(Rq,e5o),e(M4,o5o),e(y,r5o),e(y,E4),e(E4,Yse),e(Yse,t5o),e(E4,a5o),e(E4,Bq),e(Bq,n5o),e(E4,s5o),e(y,l5o),e(y,C4),e(C4,Kse),e(Kse,i5o),e(C4,d5o),e(C4,Pq),e(Pq,c5o),e(C4,f5o),e(y,m5o),e(y,w4),e(w4,Zse),e(Zse,g5o),e(w4,h5o),e(w4,$q),e($q,p5o),e(w4,_5o),e(y,u5o),e(y,A4),e(A4,ele),e(ele,b5o),e(A4,F5o),e(A4,Iq),e(Iq,v5o),e(A4,T5o),e(y,M5o),e(y,y4),e(y4,ole),e(ole,E5o),e(y4,C5o),e(y4,qq),e(qq,w5o),e(y4,A5o),e(y,y5o),e(y,L4),e(L4,rle),e(rle,L5o),e(L4,x5o),e(L4,Nq),e(Nq,k5o),e(L4,S5o),e(y,R5o),e(y,x4),e(x4,tle),e(tle,B5o),e(x4,P5o),e(x4,jq),e(jq,$5o),e(x4,I5o),e(y,q5o),e(y,k4),e(k4,ale),e(ale,N5o),e(k4,j5o),e(k4,Dq),e(Dq,D5o),e(k4,G5o),e(y,O5o),e(y,S4),e(S4,nle),e(nle,V5o),e(S4,X5o),e(S4,Gq),e(Gq,z5o),e(S4,Q5o),e(y,W5o),e(y,R4),e(R4,sle),e(sle,H5o),e(R4,U5o),e(R4,Oq),e(Oq,J5o),e(R4,Y5o),e(y,K5o),e(y,B4),e(B4,lle),e(lle,Z5o),e(B4,ewo),e(B4,Vq),e(Vq,owo),e(B4,rwo),e(y,two),e(y,P4),e(P4,ile),e(ile,awo),e(P4,nwo),e(P4,Xq),e(Xq,swo),e(P4,lwo),e(y,iwo),e(y,$4),e($4,dle),e(dle,dwo),e($4,cwo),e($4,zq),e(zq,fwo),e($4,mwo),e(y,gwo),e(y,I4),e(I4,cle),e(cle,hwo),e(I4,pwo),e(I4,Qq),e(Qq,_wo),e(I4,uwo),e(y,bwo),e(y,q4),e(q4,fle),e(fle,Fwo),e(q4,vwo),e(q4,Wq),e(Wq,Two),e(q4,Mwo),e(y,Ewo),e(y,N4),e(N4,mle),e(mle,Cwo),e(N4,wwo),e(N4,Hq),e(Hq,Awo),e(N4,ywo),e(y,Lwo),e(y,j4),e(j4,gle),e(gle,xwo),e(j4,kwo),e(j4,Uq),e(Uq,Swo),e(j4,Rwo),e(y,Bwo),e(y,D4),e(D4,hle),e(hle,Pwo),e(D4,$wo),e(D4,Jq),e(Jq,Iwo),e(D4,qwo),e(y,Nwo),e(y,G4),e(G4,ple),e(ple,jwo),e(G4,Dwo),e(G4,Yq),e(Yq,Gwo),e(G4,Owo),e(y,Vwo),e(y,O4),e(O4,_le),e(_le,Xwo),e(O4,zwo),e(O4,Kq),e(Kq,Qwo),e(O4,Wwo),e(y,Hwo),e(y,V4),e(V4,ule),e(ule,Uwo),e(V4,Jwo),e(V4,Zq),e(Zq,Ywo),e(V4,Kwo),e(y,Zwo),e(y,X4),e(X4,ble),e(ble,eAo),e(X4,oAo),e(X4,eN),e(eN,rAo),e(X4,tAo),e(y,aAo),e(y,z4),e(z4,Fle),e(Fle,nAo),e(z4,sAo),e(z4,oN),e(oN,lAo),e(z4,iAo),e(y,dAo),e(y,Q4),e(Q4,vle),e(vle,cAo),e(Q4,fAo),e(Q4,rN),e(rN,mAo),e(Q4,gAo),e(y,hAo),e(y,W4),e(W4,Tle),e(Tle,pAo),e(W4,_Ao),e(W4,tN),e(tN,uAo),e(W4,bAo),e(y,FAo),e(y,H4),e(H4,Mle),e(Mle,vAo),e(H4,TAo),e(H4,aN),e(aN,MAo),e(H4,EAo),e(Oe,CAo),e(Oe,U4),e(U4,wAo),e(U4,Ele),e(Ele,AAo),e(U4,yAo),e(U4,Cle),e(Cle,LAo),e(Oe,xAo),e(Oe,wle),e(wle,kAo),e(Oe,SAo),g($5,Oe,null),b(c,aRe,u),b(c,hd,u),e(hd,J4),e(J4,Ale),g(I5,Ale,null),e(hd,RAo),e(hd,yle),e(yle,BAo),b(c,nRe,u),b(c,rr,u),g(q5,rr,null),e(rr,PAo),e(rr,pd),e(pd,$Ao),e(pd,nN),e(nN,IAo),e(pd,qAo),e(pd,sN),e(sN,NAo),e(pd,jAo),e(rr,DAo),e(rr,N5),e(N5,GAo),e(N5,Lle),e(Lle,OAo),e(N5,VAo),e(rr,XAo),e(rr,Jr),g(j5,Jr,null),e(Jr,zAo),e(Jr,xle),e(xle,QAo),e(Jr,WAo),e(Jr,_d),e(_d,HAo),e(_d,kle),e(kle,UAo),e(_d,JAo),e(_d,lN),e(lN,YAo),e(_d,KAo),e(Jr,ZAo),e(Jr,Sle),e(Sle,e0o),e(Jr,o0o),g(D5,Jr,null),e(rr,r0o),e(rr,Ve),g(G5,Ve,null),e(Ve,t0o),e(Ve,Rle),e(Rle,a0o),e(Ve,n0o),e(Ve,Ja),e(Ja,s0o),e(Ja,Ble),e(Ble,l0o),e(Ja,i0o),e(Ja,Ple),e(Ple,d0o),e(Ja,c0o),e(Ja,$le),e($le,f0o),e(Ja,m0o),e(Ve,g0o),e(Ve,G),e(G,Y4),e(Y4,Ile),e(Ile,h0o),e(Y4,p0o),e(Y4,iN),e(iN,_0o),e(Y4,u0o),e(G,b0o),e(G,K4),e(K4,qle),e(qle,F0o),e(K4,v0o),e(K4,dN),e(dN,T0o),e(K4,M0o),e(G,E0o),e(G,Z4),e(Z4,Nle),e(Nle,C0o),e(Z4,w0o),e(Z4,cN),e(cN,A0o),e(Z4,y0o),e(G,L0o),e(G,eb),e(eb,jle),e(jle,x0o),e(eb,k0o),e(eb,fN),e(fN,S0o),e(eb,R0o),e(G,B0o),e(G,ob),e(ob,Dle),e(Dle,P0o),e(ob,$0o),e(ob,mN),e(mN,I0o),e(ob,q0o),e(G,N0o),e(G,rb),e(rb,Gle),e(Gle,j0o),e(rb,D0o),e(rb,gN),e(gN,G0o),e(rb,O0o),e(G,V0o),e(G,tb),e(tb,Ole),e(Ole,X0o),e(tb,z0o),e(tb,hN),e(hN,Q0o),e(tb,W0o),e(G,H0o),e(G,ab),e(ab,Vle),e(Vle,U0o),e(ab,J0o),e(ab,pN),e(pN,Y0o),e(ab,K0o),e(G,Z0o),e(G,nb),e(nb,Xle),e(Xle,eyo),e(nb,oyo),e(nb,_N),e(_N,ryo),e(nb,tyo),e(G,ayo),e(G,sb),e(sb,zle),e(zle,nyo),e(sb,syo),e(sb,uN),e(uN,lyo),e(sb,iyo),e(G,dyo),e(G,lb),e(lb,Qle),e(Qle,cyo),e(lb,fyo),e(lb,bN),e(bN,myo),e(lb,gyo),e(G,hyo),e(G,ib),e(ib,Wle),e(Wle,pyo),e(ib,_yo),e(ib,FN),e(FN,uyo),e(ib,byo),e(G,Fyo),e(G,db),e(db,Hle),e(Hle,vyo),e(db,Tyo),e(db,vN),e(vN,Myo),e(db,Eyo),e(G,Cyo),e(G,cb),e(cb,Ule),e(Ule,wyo),e(cb,Ayo),e(cb,TN),e(TN,yyo),e(cb,Lyo),e(G,xyo),e(G,fb),e(fb,Jle),e(Jle,kyo),e(fb,Syo),e(fb,MN),e(MN,Ryo),e(fb,Byo),e(G,Pyo),e(G,mb),e(mb,Yle),e(Yle,$yo),e(mb,Iyo),e(mb,EN),e(EN,qyo),e(mb,Nyo),e(G,jyo),e(G,gb),e(gb,Kle),e(Kle,Dyo),e(gb,Gyo),e(gb,CN),e(CN,Oyo),e(gb,Vyo),e(G,Xyo),e(G,hb),e(hb,Zle),e(Zle,zyo),e(hb,Qyo),e(hb,wN),e(wN,Wyo),e(hb,Hyo),e(G,Uyo),e(G,pb),e(pb,eie),e(eie,Jyo),e(pb,Yyo),e(pb,AN),e(AN,Kyo),e(pb,Zyo),e(G,eLo),e(G,_b),e(_b,oie),e(oie,oLo),e(_b,rLo),e(_b,yN),e(yN,tLo),e(_b,aLo),e(G,nLo),e(G,ub),e(ub,rie),e(rie,sLo),e(ub,lLo),e(ub,LN),e(LN,iLo),e(ub,dLo),e(G,cLo),e(G,bb),e(bb,tie),e(tie,fLo),e(bb,mLo),e(bb,xN),e(xN,gLo),e(bb,hLo),e(G,pLo),e(G,Fb),e(Fb,aie),e(aie,_Lo),e(Fb,uLo),e(Fb,kN),e(kN,bLo),e(Fb,FLo),e(G,vLo),e(G,vb),e(vb,nie),e(nie,TLo),e(vb,MLo),e(vb,SN),e(SN,ELo),e(vb,CLo),e(G,wLo),e(G,Tb),e(Tb,sie),e(sie,ALo),e(Tb,yLo),e(Tb,RN),e(RN,LLo),e(Tb,xLo),e(G,kLo),e(G,Mb),e(Mb,lie),e(lie,SLo),e(Mb,RLo),e(Mb,BN),e(BN,BLo),e(Mb,PLo),e(G,$Lo),e(G,Eb),e(Eb,iie),e(iie,ILo),e(Eb,qLo),e(Eb,PN),e(PN,NLo),e(Eb,jLo),e(G,DLo),e(G,Cb),e(Cb,die),e(die,GLo),e(Cb,OLo),e(Cb,$N),e($N,VLo),e(Cb,XLo),e(Ve,zLo),e(Ve,wb),e(wb,QLo),e(wb,cie),e(cie,WLo),e(wb,HLo),e(wb,fie),e(fie,ULo),e(Ve,JLo),e(Ve,mie),e(mie,YLo),e(Ve,KLo),g(O5,Ve,null),b(c,sRe,u),b(c,ud,u),e(ud,Ab),e(Ab,gie),g(V5,gie,null),e(ud,ZLo),e(ud,hie),e(hie,e8o),b(c,lRe,u),b(c,tr,u),g(X5,tr,null),e(tr,o8o),e(tr,bd),e(bd,r8o),e(bd,IN),e(IN,t8o),e(bd,a8o),e(bd,qN),e(qN,n8o),e(bd,s8o),e(tr,l8o),e(tr,z5),e(z5,i8o),e(z5,pie),e(pie,d8o),e(z5,c8o),e(tr,f8o),e(tr,Yr),g(Q5,Yr,null),e(Yr,m8o),e(Yr,_ie),e(_ie,g8o),e(Yr,h8o),e(Yr,Fd),e(Fd,p8o),e(Fd,uie),e(uie,_8o),e(Fd,u8o),e(Fd,NN),e(NN,b8o),e(Fd,F8o),e(Yr,v8o),e(Yr,bie),e(bie,T8o),e(Yr,M8o),g(W5,Yr,null),e(tr,E8o),e(tr,Xe),g(H5,Xe,null),e(Xe,C8o),e(Xe,Fie),e(Fie,w8o),e(Xe,A8o),e(Xe,Ya),e(Ya,y8o),e(Ya,vie),e(vie,L8o),e(Ya,x8o),e(Ya,Tie),e(Tie,k8o),e(Ya,S8o),e(Ya,Mie),e(Mie,R8o),e(Ya,B8o),e(Xe,P8o),e(Xe,da),e(da,yb),e(yb,Eie),e(Eie,$8o),e(yb,I8o),e(yb,jN),e(jN,q8o),e(yb,N8o),e(da,j8o),e(da,Lb),e(Lb,Cie),e(Cie,D8o),e(Lb,G8o),e(Lb,DN),e(DN,O8o),e(Lb,V8o),e(da,X8o),e(da,xb),e(xb,wie),e(wie,z8o),e(xb,Q8o),e(xb,GN),e(GN,W8o),e(xb,H8o),e(da,U8o),e(da,kb),e(kb,Aie),e(Aie,J8o),e(kb,Y8o),e(kb,ON),e(ON,K8o),e(kb,Z8o),e(da,e9o),e(da,Sb),e(Sb,yie),e(yie,o9o),e(Sb,r9o),e(Sb,VN),e(VN,t9o),e(Sb,a9o),e(Xe,n9o),e(Xe,Rb),e(Rb,s9o),e(Rb,Lie),e(Lie,l9o),e(Rb,i9o),e(Rb,xie),e(xie,d9o),e(Xe,c9o),e(Xe,kie),e(kie,f9o),e(Xe,m9o),g(U5,Xe,null),b(c,iRe,u),b(c,vd,u),e(vd,Bb),e(Bb,Sie),g(J5,Sie,null),e(vd,g9o),e(vd,Rie),e(Rie,h9o),b(c,dRe,u),b(c,ar,u),g(Y5,ar,null),e(ar,p9o),e(ar,Td),e(Td,_9o),e(Td,XN),e(XN,u9o),e(Td,b9o),e(Td,zN),e(zN,F9o),e(Td,v9o),e(ar,T9o),e(ar,K5),e(K5,M9o),e(K5,Bie),e(Bie,E9o),e(K5,C9o),e(ar,w9o),e(ar,Kr),g(Z5,Kr,null),e(Kr,A9o),e(Kr,Pie),e(Pie,y9o),e(Kr,L9o),e(Kr,Md),e(Md,x9o),e(Md,$ie),e($ie,k9o),e(Md,S9o),e(Md,QN),e(QN,R9o),e(Md,B9o),e(Kr,P9o),e(Kr,Iie),e(Iie,$9o),e(Kr,I9o),g(ew,Kr,null),e(ar,q9o),e(ar,ze),g(ow,ze,null),e(ze,N9o),e(ze,qie),e(qie,j9o),e(ze,D9o),e(ze,Ka),e(Ka,G9o),e(Ka,Nie),e(Nie,O9o),e(Ka,V9o),e(Ka,jie),e(jie,X9o),e(Ka,z9o),e(Ka,Die),e(Die,Q9o),e(Ka,W9o),e(ze,H9o),e(ze,j),e(j,Pb),e(Pb,Gie),e(Gie,U9o),e(Pb,J9o),e(Pb,WN),e(WN,Y9o),e(Pb,K9o),e(j,Z9o),e(j,$b),e($b,Oie),e(Oie,exo),e($b,oxo),e($b,HN),e(HN,rxo),e($b,txo),e(j,axo),e(j,Ib),e(Ib,Vie),e(Vie,nxo),e(Ib,sxo),e(Ib,UN),e(UN,lxo),e(Ib,ixo),e(j,dxo),e(j,qb),e(qb,Xie),e(Xie,cxo),e(qb,fxo),e(qb,JN),e(JN,mxo),e(qb,gxo),e(j,hxo),e(j,Nb),e(Nb,zie),e(zie,pxo),e(Nb,_xo),e(Nb,YN),e(YN,uxo),e(Nb,bxo),e(j,Fxo),e(j,jb),e(jb,Qie),e(Qie,vxo),e(jb,Txo),e(jb,KN),e(KN,Mxo),e(jb,Exo),e(j,Cxo),e(j,Db),e(Db,Wie),e(Wie,wxo),e(Db,Axo),e(Db,ZN),e(ZN,yxo),e(Db,Lxo),e(j,xxo),e(j,Gb),e(Gb,Hie),e(Hie,kxo),e(Gb,Sxo),e(Gb,ej),e(ej,Rxo),e(Gb,Bxo),e(j,Pxo),e(j,Ob),e(Ob,Uie),e(Uie,$xo),e(Ob,Ixo),e(Ob,oj),e(oj,qxo),e(Ob,Nxo),e(j,jxo),e(j,Vb),e(Vb,Jie),e(Jie,Dxo),e(Vb,Gxo),e(Vb,rj),e(rj,Oxo),e(Vb,Vxo),e(j,Xxo),e(j,Xb),e(Xb,Yie),e(Yie,zxo),e(Xb,Qxo),e(Xb,tj),e(tj,Wxo),e(Xb,Hxo),e(j,Uxo),e(j,zb),e(zb,Kie),e(Kie,Jxo),e(zb,Yxo),e(zb,aj),e(aj,Kxo),e(zb,Zxo),e(j,eko),e(j,Qb),e(Qb,Zie),e(Zie,oko),e(Qb,rko),e(Qb,nj),e(nj,tko),e(Qb,ako),e(j,nko),e(j,Wb),e(Wb,ede),e(ede,sko),e(Wb,lko),e(Wb,sj),e(sj,iko),e(Wb,dko),e(j,cko),e(j,Hb),e(Hb,ode),e(ode,fko),e(Hb,mko),e(Hb,lj),e(lj,gko),e(Hb,hko),e(j,pko),e(j,Ub),e(Ub,rde),e(rde,_ko),e(Ub,uko),e(Ub,ij),e(ij,bko),e(Ub,Fko),e(j,vko),e(j,Jb),e(Jb,tde),e(tde,Tko),e(Jb,Mko),e(Jb,dj),e(dj,Eko),e(Jb,Cko),e(j,wko),e(j,Yb),e(Yb,ade),e(ade,Ako),e(Yb,yko),e(Yb,cj),e(cj,Lko),e(Yb,xko),e(j,kko),e(j,Kb),e(Kb,nde),e(nde,Sko),e(Kb,Rko),e(Kb,fj),e(fj,Bko),e(Kb,Pko),e(j,$ko),e(j,Zb),e(Zb,sde),e(sde,Iko),e(Zb,qko),e(Zb,mj),e(mj,Nko),e(Zb,jko),e(j,Dko),e(j,e3),e(e3,lde),e(lde,Gko),e(e3,Oko),e(e3,gj),e(gj,Vko),e(e3,Xko),e(j,zko),e(j,o3),e(o3,ide),e(ide,Qko),e(o3,Wko),e(o3,hj),e(hj,Hko),e(o3,Uko),e(j,Jko),e(j,r3),e(r3,dde),e(dde,Yko),e(r3,Kko),e(r3,pj),e(pj,Zko),e(r3,eSo),e(j,oSo),e(j,t3),e(t3,cde),e(cde,rSo),e(t3,tSo),e(t3,_j),e(_j,aSo),e(t3,nSo),e(j,sSo),e(j,a3),e(a3,fde),e(fde,lSo),e(a3,iSo),e(a3,uj),e(uj,dSo),e(a3,cSo),e(j,fSo),e(j,n3),e(n3,mde),e(mde,mSo),e(n3,gSo),e(n3,bj),e(bj,hSo),e(n3,pSo),e(j,_So),e(j,s3),e(s3,gde),e(gde,uSo),e(s3,bSo),e(s3,Fj),e(Fj,FSo),e(s3,vSo),e(j,TSo),e(j,l3),e(l3,hde),e(hde,MSo),e(l3,ESo),e(l3,vj),e(vj,CSo),e(l3,wSo),e(j,ASo),e(j,i3),e(i3,pde),e(pde,ySo),e(i3,LSo),e(i3,Tj),e(Tj,xSo),e(i3,kSo),e(j,SSo),e(j,d3),e(d3,_de),e(_de,RSo),e(d3,BSo),e(d3,Mj),e(Mj,PSo),e(d3,$So),e(j,ISo),e(j,c3),e(c3,ude),e(ude,qSo),e(c3,NSo),e(c3,Ej),e(Ej,jSo),e(c3,DSo),e(j,GSo),e(j,f3),e(f3,bde),e(bde,OSo),e(f3,VSo),e(f3,Cj),e(Cj,XSo),e(f3,zSo),e(j,QSo),e(j,m3),e(m3,Fde),e(Fde,WSo),e(m3,HSo),e(m3,wj),e(wj,USo),e(m3,JSo),e(ze,YSo),e(ze,g3),e(g3,KSo),e(g3,vde),e(vde,ZSo),e(g3,eRo),e(g3,Tde),e(Tde,oRo),e(ze,rRo),e(ze,Mde),e(Mde,tRo),e(ze,aRo),g(rw,ze,null),b(c,cRe,u),b(c,Ed,u),e(Ed,h3),e(h3,Ede),g(tw,Ede,null),e(Ed,nRo),e(Ed,Cde),e(Cde,sRo),b(c,fRe,u),b(c,nr,u),g(aw,nr,null),e(nr,lRo),e(nr,Cd),e(Cd,iRo),e(Cd,Aj),e(Aj,dRo),e(Cd,cRo),e(Cd,yj),e(yj,fRo),e(Cd,mRo),e(nr,gRo),e(nr,nw),e(nw,hRo),e(nw,wde),e(wde,pRo),e(nw,_Ro),e(nr,uRo),e(nr,Zr),g(sw,Zr,null),e(Zr,bRo),e(Zr,Ade),e(Ade,FRo),e(Zr,vRo),e(Zr,wd),e(wd,TRo),e(wd,yde),e(yde,MRo),e(wd,ERo),e(wd,Lj),e(Lj,CRo),e(wd,wRo),e(Zr,ARo),e(Zr,Lde),e(Lde,yRo),e(Zr,LRo),g(lw,Zr,null),e(nr,xRo),e(nr,Qe),g(iw,Qe,null),e(Qe,kRo),e(Qe,xde),e(xde,SRo),e(Qe,RRo),e(Qe,Za),e(Za,BRo),e(Za,kde),e(kde,PRo),e(Za,$Ro),e(Za,Sde),e(Sde,IRo),e(Za,qRo),e(Za,Rde),e(Rde,NRo),e(Za,jRo),e(Qe,DRo),e(Qe,R),e(R,p3),e(p3,Bde),e(Bde,GRo),e(p3,ORo),e(p3,xj),e(xj,VRo),e(p3,XRo),e(R,zRo),e(R,_3),e(_3,Pde),e(Pde,QRo),e(_3,WRo),e(_3,kj),e(kj,HRo),e(_3,URo),e(R,JRo),e(R,u3),e(u3,$de),e($de,YRo),e(u3,KRo),e(u3,Sj),e(Sj,ZRo),e(u3,eBo),e(R,oBo),e(R,b3),e(b3,Ide),e(Ide,rBo),e(b3,tBo),e(b3,Rj),e(Rj,aBo),e(b3,nBo),e(R,sBo),e(R,F3),e(F3,qde),e(qde,lBo),e(F3,iBo),e(F3,Bj),e(Bj,dBo),e(F3,cBo),e(R,fBo),e(R,v3),e(v3,Nde),e(Nde,mBo),e(v3,gBo),e(v3,Pj),e(Pj,hBo),e(v3,pBo),e(R,_Bo),e(R,T3),e(T3,jde),e(jde,uBo),e(T3,bBo),e(T3,$j),e($j,FBo),e(T3,vBo),e(R,TBo),e(R,M3),e(M3,Dde),e(Dde,MBo),e(M3,EBo),e(M3,Ij),e(Ij,CBo),e(M3,wBo),e(R,ABo),e(R,E3),e(E3,Gde),e(Gde,yBo),e(E3,LBo),e(E3,qj),e(qj,xBo),e(E3,kBo),e(R,SBo),e(R,C3),e(C3,Ode),e(Ode,RBo),e(C3,BBo),e(C3,Nj),e(Nj,PBo),e(C3,$Bo),e(R,IBo),e(R,w3),e(w3,Vde),e(Vde,qBo),e(w3,NBo),e(w3,jj),e(jj,jBo),e(w3,DBo),e(R,GBo),e(R,A3),e(A3,Xde),e(Xde,OBo),e(A3,VBo),e(A3,Dj),e(Dj,XBo),e(A3,zBo),e(R,QBo),e(R,y3),e(y3,zde),e(zde,WBo),e(y3,HBo),e(y3,Gj),e(Gj,UBo),e(y3,JBo),e(R,YBo),e(R,L3),e(L3,Qde),e(Qde,KBo),e(L3,ZBo),e(L3,Oj),e(Oj,ePo),e(L3,oPo),e(R,rPo),e(R,x3),e(x3,Wde),e(Wde,tPo),e(x3,aPo),e(x3,Vj),e(Vj,nPo),e(x3,sPo),e(R,lPo),e(R,k3),e(k3,Hde),e(Hde,iPo),e(k3,dPo),e(k3,Xj),e(Xj,cPo),e(k3,fPo),e(R,mPo),e(R,S3),e(S3,Ude),e(Ude,gPo),e(S3,hPo),e(S3,zj),e(zj,pPo),e(S3,_Po),e(R,uPo),e(R,R3),e(R3,Jde),e(Jde,bPo),e(R3,FPo),e(R3,Qj),e(Qj,vPo),e(R3,TPo),e(R,MPo),e(R,B3),e(B3,Yde),e(Yde,EPo),e(B3,CPo),e(B3,Wj),e(Wj,wPo),e(B3,APo),e(R,yPo),e(R,P3),e(P3,Kde),e(Kde,LPo),e(P3,xPo),e(P3,Hj),e(Hj,kPo),e(P3,SPo),e(R,RPo),e(R,$3),e($3,Zde),e(Zde,BPo),e($3,PPo),e($3,Uj),e(Uj,$Po),e($3,IPo),e(R,qPo),e(R,I3),e(I3,ece),e(ece,NPo),e(I3,jPo),e(I3,Jj),e(Jj,DPo),e(I3,GPo),e(R,OPo),e(R,q3),e(q3,oce),e(oce,VPo),e(q3,XPo),e(q3,Yj),e(Yj,zPo),e(q3,QPo),e(R,WPo),e(R,N3),e(N3,rce),e(rce,HPo),e(N3,UPo),e(N3,Kj),e(Kj,JPo),e(N3,YPo),e(R,KPo),e(R,j3),e(j3,tce),e(tce,ZPo),e(j3,e$o),e(j3,Zj),e(Zj,o$o),e(j3,r$o),e(R,t$o),e(R,D3),e(D3,ace),e(ace,a$o),e(D3,n$o),e(D3,eD),e(eD,s$o),e(D3,l$o),e(R,i$o),e(R,G3),e(G3,nce),e(nce,d$o),e(G3,c$o),e(G3,oD),e(oD,f$o),e(G3,m$o),e(R,g$o),e(R,O3),e(O3,sce),e(sce,h$o),e(O3,p$o),e(O3,rD),e(rD,_$o),e(O3,u$o),e(R,b$o),e(R,V3),e(V3,lce),e(lce,F$o),e(V3,v$o),e(V3,tD),e(tD,T$o),e(V3,M$o),e(R,E$o),e(R,X3),e(X3,ice),e(ice,C$o),e(X3,w$o),e(X3,aD),e(aD,A$o),e(X3,y$o),e(R,L$o),e(R,z3),e(z3,dce),e(dce,x$o),e(z3,k$o),e(z3,nD),e(nD,S$o),e(z3,R$o),e(R,B$o),e(R,Q3),e(Q3,cce),e(cce,P$o),e(Q3,$$o),e(Q3,sD),e(sD,I$o),e(Q3,q$o),e(R,N$o),e(R,W3),e(W3,fce),e(fce,j$o),e(W3,D$o),e(W3,lD),e(lD,G$o),e(W3,O$o),e(R,V$o),e(R,H3),e(H3,mce),e(mce,X$o),e(H3,z$o),e(H3,iD),e(iD,Q$o),e(H3,W$o),e(R,H$o),e(R,U3),e(U3,gce),e(gce,U$o),e(U3,J$o),e(U3,dD),e(dD,Y$o),e(U3,K$o),e(R,Z$o),e(R,J3),e(J3,hce),e(hce,eIo),e(J3,oIo),e(J3,cD),e(cD,rIo),e(J3,tIo),e(R,aIo),e(R,Y3),e(Y3,pce),e(pce,nIo),e(Y3,sIo),e(Y3,fD),e(fD,lIo),e(Y3,iIo),e(R,dIo),e(R,K3),e(K3,_ce),e(_ce,cIo),e(K3,fIo),e(K3,mD),e(mD,mIo),e(K3,gIo),e(R,hIo),e(R,Z3),e(Z3,uce),e(uce,pIo),e(Z3,_Io),e(Z3,gD),e(gD,uIo),e(Z3,bIo),e(Qe,FIo),e(Qe,e2),e(e2,vIo),e(e2,bce),e(bce,TIo),e(e2,MIo),e(e2,Fce),e(Fce,EIo),e(Qe,CIo),e(Qe,vce),e(vce,wIo),e(Qe,AIo),g(dw,Qe,null),b(c,mRe,u),b(c,Ad,u),e(Ad,o2),e(o2,Tce),g(cw,Tce,null),e(Ad,yIo),e(Ad,Mce),e(Mce,LIo),b(c,gRe,u),b(c,sr,u),g(fw,sr,null),e(sr,xIo),e(sr,yd),e(yd,kIo),e(yd,hD),e(hD,SIo),e(yd,RIo),e(yd,pD),e(pD,BIo),e(yd,PIo),e(sr,$Io),e(sr,mw),e(mw,IIo),e(mw,Ece),e(Ece,qIo),e(mw,NIo),e(sr,jIo),e(sr,et),g(gw,et,null),e(et,DIo),e(et,Cce),e(Cce,GIo),e(et,OIo),e(et,Ld),e(Ld,VIo),e(Ld,wce),e(wce,XIo),e(Ld,zIo),e(Ld,_D),e(_D,QIo),e(Ld,WIo),e(et,HIo),e(et,Ace),e(Ace,UIo),e(et,JIo),g(hw,et,null),e(sr,YIo),e(sr,We),g(pw,We,null),e(We,KIo),e(We,yce),e(yce,ZIo),e(We,eqo),e(We,en),e(en,oqo),e(en,Lce),e(Lce,rqo),e(en,tqo),e(en,xce),e(xce,aqo),e(en,nqo),e(en,kce),e(kce,sqo),e(en,lqo),e(We,iqo),e(We,Sce),e(Sce,r2),e(r2,Rce),e(Rce,dqo),e(r2,cqo),e(r2,uD),e(uD,fqo),e(r2,mqo),e(We,gqo),e(We,t2),e(t2,hqo),e(t2,Bce),e(Bce,pqo),e(t2,_qo),e(t2,Pce),e(Pce,uqo),e(We,bqo),e(We,$ce),e($ce,Fqo),e(We,vqo),g(_w,We,null),b(c,hRe,u),b(c,xd,u),e(xd,a2),e(a2,Ice),g(uw,Ice,null),e(xd,Tqo),e(xd,qce),e(qce,Mqo),b(c,pRe,u),b(c,lr,u),g(bw,lr,null),e(lr,Eqo),e(lr,kd),e(kd,Cqo),e(kd,bD),e(bD,wqo),e(kd,Aqo),e(kd,FD),e(FD,yqo),e(kd,Lqo),e(lr,xqo),e(lr,Fw),e(Fw,kqo),e(Fw,Nce),e(Nce,Sqo),e(Fw,Rqo),e(lr,Bqo),e(lr,ot),g(vw,ot,null),e(ot,Pqo),e(ot,jce),e(jce,$qo),e(ot,Iqo),e(ot,Sd),e(Sd,qqo),e(Sd,Dce),e(Dce,Nqo),e(Sd,jqo),e(Sd,vD),e(vD,Dqo),e(Sd,Gqo),e(ot,Oqo),e(ot,Gce),e(Gce,Vqo),e(ot,Xqo),g(Tw,ot,null),e(lr,zqo),e(lr,He),g(Mw,He,null),e(He,Qqo),e(He,Oce),e(Oce,Wqo),e(He,Hqo),e(He,on),e(on,Uqo),e(on,Vce),e(Vce,Jqo),e(on,Yqo),e(on,Xce),e(Xce,Kqo),e(on,Zqo),e(on,zce),e(zce,eNo),e(on,oNo),e(He,rNo),e(He,ge),e(ge,n2),e(n2,Qce),e(Qce,tNo),e(n2,aNo),e(n2,TD),e(TD,nNo),e(n2,sNo),e(ge,lNo),e(ge,s2),e(s2,Wce),e(Wce,iNo),e(s2,dNo),e(s2,MD),e(MD,cNo),e(s2,fNo),e(ge,mNo),e(ge,Ds),e(Ds,Hce),e(Hce,gNo),e(Ds,hNo),e(Ds,ED),e(ED,pNo),e(Ds,_No),e(Ds,CD),e(CD,uNo),e(Ds,bNo),e(ge,FNo),e(ge,l2),e(l2,Uce),e(Uce,vNo),e(l2,TNo),e(l2,wD),e(wD,MNo),e(l2,ENo),e(ge,CNo),e(ge,ma),e(ma,Jce),e(Jce,wNo),e(ma,ANo),e(ma,AD),e(AD,yNo),e(ma,LNo),e(ma,yD),e(yD,xNo),e(ma,kNo),e(ma,LD),e(LD,SNo),e(ma,RNo),e(ge,BNo),e(ge,i2),e(i2,Yce),e(Yce,PNo),e(i2,$No),e(i2,xD),e(xD,INo),e(i2,qNo),e(ge,NNo),e(ge,d2),e(d2,Kce),e(Kce,jNo),e(d2,DNo),e(d2,kD),e(kD,GNo),e(d2,ONo),e(ge,VNo),e(ge,c2),e(c2,Zce),e(Zce,XNo),e(c2,zNo),e(c2,SD),e(SD,QNo),e(c2,WNo),e(ge,HNo),e(ge,f2),e(f2,efe),e(efe,UNo),e(f2,JNo),e(f2,RD),e(RD,YNo),e(f2,KNo),e(ge,ZNo),e(ge,m2),e(m2,ofe),e(ofe,ejo),e(m2,ojo),e(m2,BD),e(BD,rjo),e(m2,tjo),e(ge,ajo),e(ge,g2),e(g2,rfe),e(rfe,njo),e(g2,sjo),e(g2,PD),e(PD,ljo),e(g2,ijo),e(He,djo),e(He,h2),e(h2,cjo),e(h2,tfe),e(tfe,fjo),e(h2,mjo),e(h2,afe),e(afe,gjo),e(He,hjo),e(He,nfe),e(nfe,pjo),e(He,_jo),g(Ew,He,null),b(c,_Re,u),b(c,Rd,u),e(Rd,p2),e(p2,sfe),g(Cw,sfe,null),e(Rd,ujo),e(Rd,lfe),e(lfe,bjo),b(c,uRe,u),b(c,ir,u),g(ww,ir,null),e(ir,Fjo),e(ir,Bd),e(Bd,vjo),e(Bd,$D),e($D,Tjo),e(Bd,Mjo),e(Bd,ID),e(ID,Ejo),e(Bd,Cjo),e(ir,wjo),e(ir,Aw),e(Aw,Ajo),e(Aw,ife),e(ife,yjo),e(Aw,Ljo),e(ir,xjo),e(ir,rt),g(yw,rt,null),e(rt,kjo),e(rt,dfe),e(dfe,Sjo),e(rt,Rjo),e(rt,Pd),e(Pd,Bjo),e(Pd,cfe),e(cfe,Pjo),e(Pd,$jo),e(Pd,qD),e(qD,Ijo),e(Pd,qjo),e(rt,Njo),e(rt,ffe),e(ffe,jjo),e(rt,Djo),g(Lw,rt,null),e(ir,Gjo),e(ir,Ue),g(xw,Ue,null),e(Ue,Ojo),e(Ue,mfe),e(mfe,Vjo),e(Ue,Xjo),e(Ue,rn),e(rn,zjo),e(rn,gfe),e(gfe,Qjo),e(rn,Wjo),e(rn,hfe),e(hfe,Hjo),e(rn,Ujo),e(rn,pfe),e(pfe,Jjo),e(rn,Yjo),e(Ue,Kjo),e(Ue,_fe),e(_fe,_2),e(_2,ufe),e(ufe,Zjo),e(_2,eDo),e(_2,ND),e(ND,oDo),e(_2,rDo),e(Ue,tDo),e(Ue,u2),e(u2,aDo),e(u2,bfe),e(bfe,nDo),e(u2,sDo),e(u2,Ffe),e(Ffe,lDo),e(Ue,iDo),e(Ue,vfe),e(vfe,dDo),e(Ue,cDo),g(kw,Ue,null),b(c,bRe,u),b(c,$d,u),e($d,b2),e(b2,Tfe),g(Sw,Tfe,null),e($d,fDo),e($d,Mfe),e(Mfe,mDo),b(c,FRe,u),b(c,dr,u),g(Rw,dr,null),e(dr,gDo),e(dr,Id),e(Id,hDo),e(Id,jD),e(jD,pDo),e(Id,_Do),e(Id,DD),e(DD,uDo),e(Id,bDo),e(dr,FDo),e(dr,Bw),e(Bw,vDo),e(Bw,Efe),e(Efe,TDo),e(Bw,MDo),e(dr,EDo),e(dr,tt),g(Pw,tt,null),e(tt,CDo),e(tt,Cfe),e(Cfe,wDo),e(tt,ADo),e(tt,qd),e(qd,yDo),e(qd,wfe),e(wfe,LDo),e(qd,xDo),e(qd,GD),e(GD,kDo),e(qd,SDo),e(tt,RDo),e(tt,Afe),e(Afe,BDo),e(tt,PDo),g($w,tt,null),e(dr,$Do),e(dr,Je),g(Iw,Je,null),e(Je,IDo),e(Je,yfe),e(yfe,qDo),e(Je,NDo),e(Je,tn),e(tn,jDo),e(tn,Lfe),e(Lfe,DDo),e(tn,GDo),e(tn,xfe),e(xfe,ODo),e(tn,VDo),e(tn,kfe),e(kfe,XDo),e(tn,zDo),e(Je,QDo),e(Je,Se),e(Se,F2),e(F2,Sfe),e(Sfe,WDo),e(F2,HDo),e(F2,OD),e(OD,UDo),e(F2,JDo),e(Se,YDo),e(Se,v2),e(v2,Rfe),e(Rfe,KDo),e(v2,ZDo),e(v2,VD),e(VD,eGo),e(v2,oGo),e(Se,rGo),e(Se,T2),e(T2,Bfe),e(Bfe,tGo),e(T2,aGo),e(T2,XD),e(XD,nGo),e(T2,sGo),e(Se,lGo),e(Se,M2),e(M2,Pfe),e(Pfe,iGo),e(M2,dGo),e(M2,zD),e(zD,cGo),e(M2,fGo),e(Se,mGo),e(Se,E2),e(E2,$fe),e($fe,gGo),e(E2,hGo),e(E2,QD),e(QD,pGo),e(E2,_Go),e(Se,uGo),e(Se,C2),e(C2,Ife),e(Ife,bGo),e(C2,FGo),e(C2,WD),e(WD,vGo),e(C2,TGo),e(Se,MGo),e(Se,w2),e(w2,qfe),e(qfe,EGo),e(w2,CGo),e(w2,HD),e(HD,wGo),e(w2,AGo),e(Se,yGo),e(Se,A2),e(A2,Nfe),e(Nfe,LGo),e(A2,xGo),e(A2,UD),e(UD,kGo),e(A2,SGo),e(Je,RGo),e(Je,y2),e(y2,BGo),e(y2,jfe),e(jfe,PGo),e(y2,$Go),e(y2,Dfe),e(Dfe,IGo),e(Je,qGo),e(Je,Gfe),e(Gfe,NGo),e(Je,jGo),g(qw,Je,null),b(c,vRe,u),b(c,Nd,u),e(Nd,L2),e(L2,Ofe),g(Nw,Ofe,null),e(Nd,DGo),e(Nd,Vfe),e(Vfe,GGo),b(c,TRe,u),b(c,cr,u),g(jw,cr,null),e(cr,OGo),e(cr,jd),e(jd,VGo),e(jd,JD),e(JD,XGo),e(jd,zGo),e(jd,YD),e(YD,QGo),e(jd,WGo),e(cr,HGo),e(cr,Dw),e(Dw,UGo),e(Dw,Xfe),e(Xfe,JGo),e(Dw,YGo),e(cr,KGo),e(cr,at),g(Gw,at,null),e(at,ZGo),e(at,zfe),e(zfe,eOo),e(at,oOo),e(at,Dd),e(Dd,rOo),e(Dd,Qfe),e(Qfe,tOo),e(Dd,aOo),e(Dd,KD),e(KD,nOo),e(Dd,sOo),e(at,lOo),e(at,Wfe),e(Wfe,iOo),e(at,dOo),g(Ow,at,null),e(cr,cOo),e(cr,Ye),g(Vw,Ye,null),e(Ye,fOo),e(Ye,Hfe),e(Hfe,mOo),e(Ye,gOo),e(Ye,an),e(an,hOo),e(an,Ufe),e(Ufe,pOo),e(an,_Oo),e(an,Jfe),e(Jfe,uOo),e(an,bOo),e(an,Yfe),e(Yfe,FOo),e(an,vOo),e(Ye,TOo),e(Ye,nn),e(nn,x2),e(x2,Kfe),e(Kfe,MOo),e(x2,EOo),e(x2,ZD),e(ZD,COo),e(x2,wOo),e(nn,AOo),e(nn,k2),e(k2,Zfe),e(Zfe,yOo),e(k2,LOo),e(k2,eG),e(eG,xOo),e(k2,kOo),e(nn,SOo),e(nn,S2),e(S2,eme),e(eme,ROo),e(S2,BOo),e(S2,oG),e(oG,POo),e(S2,$Oo),e(nn,IOo),e(nn,R2),e(R2,ome),e(ome,qOo),e(R2,NOo),e(R2,rG),e(rG,jOo),e(R2,DOo),e(Ye,GOo),e(Ye,B2),e(B2,OOo),e(B2,rme),e(rme,VOo),e(B2,XOo),e(B2,tme),e(tme,zOo),e(Ye,QOo),e(Ye,ame),e(ame,WOo),e(Ye,HOo),g(Xw,Ye,null),b(c,MRe,u),b(c,Gd,u),e(Gd,P2),e(P2,nme),g(zw,nme,null),e(Gd,UOo),e(Gd,sme),e(sme,JOo),b(c,ERe,u),b(c,fr,u),g(Qw,fr,null),e(fr,YOo),e(fr,Od),e(Od,KOo),e(Od,tG),e(tG,ZOo),e(Od,eVo),e(Od,aG),e(aG,oVo),e(Od,rVo),e(fr,tVo),e(fr,Ww),e(Ww,aVo),e(Ww,lme),e(lme,nVo),e(Ww,sVo),e(fr,lVo),e(fr,nt),g(Hw,nt,null),e(nt,iVo),e(nt,ime),e(ime,dVo),e(nt,cVo),e(nt,Vd),e(Vd,fVo),e(Vd,dme),e(dme,mVo),e(Vd,gVo),e(Vd,nG),e(nG,hVo),e(Vd,pVo),e(nt,_Vo),e(nt,cme),e(cme,uVo),e(nt,bVo),g(Uw,nt,null),e(fr,FVo),e(fr,Ke),g(Jw,Ke,null),e(Ke,vVo),e(Ke,fme),e(fme,TVo),e(Ke,MVo),e(Ke,sn),e(sn,EVo),e(sn,mme),e(mme,CVo),e(sn,wVo),e(sn,gme),e(gme,AVo),e(sn,yVo),e(sn,hme),e(hme,LVo),e(sn,xVo),e(Ke,kVo),e(Ke,Re),e(Re,$2),e($2,pme),e(pme,SVo),e($2,RVo),e($2,sG),e(sG,BVo),e($2,PVo),e(Re,$Vo),e(Re,I2),e(I2,_me),e(_me,IVo),e(I2,qVo),e(I2,lG),e(lG,NVo),e(I2,jVo),e(Re,DVo),e(Re,q2),e(q2,ume),e(ume,GVo),e(q2,OVo),e(q2,iG),e(iG,VVo),e(q2,XVo),e(Re,zVo),e(Re,N2),e(N2,bme),e(bme,QVo),e(N2,WVo),e(N2,dG),e(dG,HVo),e(N2,UVo),e(Re,JVo),e(Re,j2),e(j2,Fme),e(Fme,YVo),e(j2,KVo),e(j2,cG),e(cG,ZVo),e(j2,eXo),e(Re,oXo),e(Re,D2),e(D2,vme),e(vme,rXo),e(D2,tXo),e(D2,fG),e(fG,aXo),e(D2,nXo),e(Re,sXo),e(Re,G2),e(G2,Tme),e(Tme,lXo),e(G2,iXo),e(G2,mG),e(mG,dXo),e(G2,cXo),e(Re,fXo),e(Re,O2),e(O2,Mme),e(Mme,mXo),e(O2,gXo),e(O2,gG),e(gG,hXo),e(O2,pXo),e(Ke,_Xo),e(Ke,V2),e(V2,uXo),e(V2,Eme),e(Eme,bXo),e(V2,FXo),e(V2,Cme),e(Cme,vXo),e(Ke,TXo),e(Ke,wme),e(wme,MXo),e(Ke,EXo),g(Yw,Ke,null),b(c,CRe,u),b(c,Xd,u),e(Xd,X2),e(X2,Ame),g(Kw,Ame,null),e(Xd,CXo),e(Xd,yme),e(yme,wXo),b(c,wRe,u),b(c,mr,u),g(Zw,mr,null),e(mr,AXo),e(mr,zd),e(zd,yXo),e(zd,hG),e(hG,LXo),e(zd,xXo),e(zd,pG),e(pG,kXo),e(zd,SXo),e(mr,RXo),e(mr,eA),e(eA,BXo),e(eA,Lme),e(Lme,PXo),e(eA,$Xo),e(mr,IXo),e(mr,st),g(oA,st,null),e(st,qXo),e(st,xme),e(xme,NXo),e(st,jXo),e(st,Qd),e(Qd,DXo),e(Qd,kme),e(kme,GXo),e(Qd,OXo),e(Qd,_G),e(_G,VXo),e(Qd,XXo),e(st,zXo),e(st,Sme),e(Sme,QXo),e(st,WXo),g(rA,st,null),e(mr,HXo),e(mr,Ze),g(tA,Ze,null),e(Ze,UXo),e(Ze,Rme),e(Rme,JXo),e(Ze,YXo),e(Ze,ln),e(ln,KXo),e(ln,Bme),e(Bme,ZXo),e(ln,ezo),e(ln,Pme),e(Pme,ozo),e(ln,rzo),e(ln,$me),e($me,tzo),e(ln,azo),e(Ze,nzo),e(Ze,aA),e(aA,z2),e(z2,Ime),e(Ime,szo),e(z2,lzo),e(z2,uG),e(uG,izo),e(z2,dzo),e(aA,czo),e(aA,Q2),e(Q2,qme),e(qme,fzo),e(Q2,mzo),e(Q2,bG),e(bG,gzo),e(Q2,hzo),e(Ze,pzo),e(Ze,W2),e(W2,_zo),e(W2,Nme),e(Nme,uzo),e(W2,bzo),e(W2,jme),e(jme,Fzo),e(Ze,vzo),e(Ze,Dme),e(Dme,Tzo),e(Ze,Mzo),g(nA,Ze,null),b(c,ARe,u),b(c,Wd,u),e(Wd,H2),e(H2,Gme),g(sA,Gme,null),e(Wd,Ezo),e(Wd,Ome),e(Ome,Czo),b(c,yRe,u),b(c,gr,u),g(lA,gr,null),e(gr,wzo),e(gr,Hd),e(Hd,Azo),e(Hd,FG),e(FG,yzo),e(Hd,Lzo),e(Hd,vG),e(vG,xzo),e(Hd,kzo),e(gr,Szo),e(gr,iA),e(iA,Rzo),e(iA,Vme),e(Vme,Bzo),e(iA,Pzo),e(gr,$zo),e(gr,lt),g(dA,lt,null),e(lt,Izo),e(lt,Xme),e(Xme,qzo),e(lt,Nzo),e(lt,Ud),e(Ud,jzo),e(Ud,zme),e(zme,Dzo),e(Ud,Gzo),e(Ud,TG),e(TG,Ozo),e(Ud,Vzo),e(lt,Xzo),e(lt,Qme),e(Qme,zzo),e(lt,Qzo),g(cA,lt,null),e(gr,Wzo),e(gr,eo),g(fA,eo,null),e(eo,Hzo),e(eo,Wme),e(Wme,Uzo),e(eo,Jzo),e(eo,dn),e(dn,Yzo),e(dn,Hme),e(Hme,Kzo),e(dn,Zzo),e(dn,Ume),e(Ume,eQo),e(dn,oQo),e(dn,Jme),e(Jme,rQo),e(dn,tQo),e(eo,aQo),e(eo,cn),e(cn,U2),e(U2,Yme),e(Yme,nQo),e(U2,sQo),e(U2,MG),e(MG,lQo),e(U2,iQo),e(cn,dQo),e(cn,J2),e(J2,Kme),e(Kme,cQo),e(J2,fQo),e(J2,EG),e(EG,mQo),e(J2,gQo),e(cn,hQo),e(cn,Y2),e(Y2,Zme),e(Zme,pQo),e(Y2,_Qo),e(Y2,CG),e(CG,uQo),e(Y2,bQo),e(cn,FQo),e(cn,K2),e(K2,ege),e(ege,vQo),e(K2,TQo),e(K2,wG),e(wG,MQo),e(K2,EQo),e(eo,CQo),e(eo,Z2),e(Z2,wQo),e(Z2,oge),e(oge,AQo),e(Z2,yQo),e(Z2,rge),e(rge,LQo),e(eo,xQo),e(eo,tge),e(tge,kQo),e(eo,SQo),g(mA,eo,null),b(c,LRe,u),b(c,Jd,u),e(Jd,eF),e(eF,age),g(gA,age,null),e(Jd,RQo),e(Jd,nge),e(nge,BQo),b(c,xRe,u),b(c,hr,u),g(hA,hr,null),e(hr,PQo),e(hr,Yd),e(Yd,$Qo),e(Yd,AG),e(AG,IQo),e(Yd,qQo),e(Yd,yG),e(yG,NQo),e(Yd,jQo),e(hr,DQo),e(hr,pA),e(pA,GQo),e(pA,sge),e(sge,OQo),e(pA,VQo),e(hr,XQo),e(hr,it),g(_A,it,null),e(it,zQo),e(it,lge),e(lge,QQo),e(it,WQo),e(it,Kd),e(Kd,HQo),e(Kd,ige),e(ige,UQo),e(Kd,JQo),e(Kd,LG),e(LG,YQo),e(Kd,KQo),e(it,ZQo),e(it,dge),e(dge,eWo),e(it,oWo),g(uA,it,null),e(hr,rWo),e(hr,oo),g(bA,oo,null),e(oo,tWo),e(oo,cge),e(cge,aWo),e(oo,nWo),e(oo,fn),e(fn,sWo),e(fn,fge),e(fge,lWo),e(fn,iWo),e(fn,mge),e(mge,dWo),e(fn,cWo),e(fn,gge),e(gge,fWo),e(fn,mWo),e(oo,gWo),e(oo,Zd),e(Zd,oF),e(oF,hge),e(hge,hWo),e(oF,pWo),e(oF,xG),e(xG,_Wo),e(oF,uWo),e(Zd,bWo),e(Zd,rF),e(rF,pge),e(pge,FWo),e(rF,vWo),e(rF,kG),e(kG,TWo),e(rF,MWo),e(Zd,EWo),e(Zd,tF),e(tF,_ge),e(_ge,CWo),e(tF,wWo),e(tF,SG),e(SG,AWo),e(tF,yWo),e(oo,LWo),e(oo,aF),e(aF,xWo),e(aF,uge),e(uge,kWo),e(aF,SWo),e(aF,bge),e(bge,RWo),e(oo,BWo),e(oo,Fge),e(Fge,PWo),e(oo,$Wo),g(FA,oo,null),b(c,kRe,u),b(c,ec,u),e(ec,nF),e(nF,vge),g(vA,vge,null),e(ec,IWo),e(ec,Tge),e(Tge,qWo),b(c,SRe,u),b(c,pr,u),g(TA,pr,null),e(pr,NWo),e(pr,oc),e(oc,jWo),e(oc,RG),e(RG,DWo),e(oc,GWo),e(oc,BG),e(BG,OWo),e(oc,VWo),e(pr,XWo),e(pr,MA),e(MA,zWo),e(MA,Mge),e(Mge,QWo),e(MA,WWo),e(pr,HWo),e(pr,dt),g(EA,dt,null),e(dt,UWo),e(dt,Ege),e(Ege,JWo),e(dt,YWo),e(dt,rc),e(rc,KWo),e(rc,Cge),e(Cge,ZWo),e(rc,eHo),e(rc,PG),e(PG,oHo),e(rc,rHo),e(dt,tHo),e(dt,wge),e(wge,aHo),e(dt,nHo),g(CA,dt,null),e(pr,sHo),e(pr,ro),g(wA,ro,null),e(ro,lHo),e(ro,Age),e(Age,iHo),e(ro,dHo),e(ro,mn),e(mn,cHo),e(mn,yge),e(yge,fHo),e(mn,mHo),e(mn,Lge),e(Lge,gHo),e(mn,hHo),e(mn,xge),e(xge,pHo),e(mn,_Ho),e(ro,uHo),e(ro,kge),e(kge,sF),e(sF,Sge),e(Sge,bHo),e(sF,FHo),e(sF,$G),e($G,vHo),e(sF,THo),e(ro,MHo),e(ro,lF),e(lF,EHo),e(lF,Rge),e(Rge,CHo),e(lF,wHo),e(lF,Bge),e(Bge,AHo),e(ro,yHo),e(ro,Pge),e(Pge,LHo),e(ro,xHo),g(AA,ro,null),b(c,RRe,u),b(c,tc,u),e(tc,iF),e(iF,$ge),g(yA,$ge,null),e(tc,kHo),e(tc,Ige),e(Ige,SHo),b(c,BRe,u),b(c,_r,u),g(LA,_r,null),e(_r,RHo),e(_r,ac),e(ac,BHo),e(ac,IG),e(IG,PHo),e(ac,$Ho),e(ac,qG),e(qG,IHo),e(ac,qHo),e(_r,NHo),e(_r,xA),e(xA,jHo),e(xA,qge),e(qge,DHo),e(xA,GHo),e(_r,OHo),e(_r,ct),g(kA,ct,null),e(ct,VHo),e(ct,Nge),e(Nge,XHo),e(ct,zHo),e(ct,nc),e(nc,QHo),e(nc,jge),e(jge,WHo),e(nc,HHo),e(nc,NG),e(NG,UHo),e(nc,JHo),e(ct,YHo),e(ct,Dge),e(Dge,KHo),e(ct,ZHo),g(SA,ct,null),e(_r,eUo),e(_r,to),g(RA,to,null),e(to,oUo),e(to,Gge),e(Gge,rUo),e(to,tUo),e(to,gn),e(gn,aUo),e(gn,Oge),e(Oge,nUo),e(gn,sUo),e(gn,Vge),e(Vge,lUo),e(gn,iUo),e(gn,Xge),e(Xge,dUo),e(gn,cUo),e(to,fUo),e(to,zge),e(zge,dF),e(dF,Qge),e(Qge,mUo),e(dF,gUo),e(dF,jG),e(jG,hUo),e(dF,pUo),e(to,_Uo),e(to,cF),e(cF,uUo),e(cF,Wge),e(Wge,bUo),e(cF,FUo),e(cF,Hge),e(Hge,vUo),e(to,TUo),e(to,Uge),e(Uge,MUo),e(to,EUo),g(BA,to,null),b(c,PRe,u),b(c,sc,u),e(sc,fF),e(fF,Jge),g(PA,Jge,null),e(sc,CUo),e(sc,Yge),e(Yge,wUo),b(c,$Re,u),b(c,ur,u),g($A,ur,null),e(ur,AUo),e(ur,lc),e(lc,yUo),e(lc,DG),e(DG,LUo),e(lc,xUo),e(lc,GG),e(GG,kUo),e(lc,SUo),e(ur,RUo),e(ur,IA),e(IA,BUo),e(IA,Kge),e(Kge,PUo),e(IA,$Uo),e(ur,IUo),e(ur,ft),g(qA,ft,null),e(ft,qUo),e(ft,Zge),e(Zge,NUo),e(ft,jUo),e(ft,ic),e(ic,DUo),e(ic,ehe),e(ehe,GUo),e(ic,OUo),e(ic,OG),e(OG,VUo),e(ic,XUo),e(ft,zUo),e(ft,ohe),e(ohe,QUo),e(ft,WUo),g(NA,ft,null),e(ur,HUo),e(ur,ao),g(jA,ao,null),e(ao,UUo),e(ao,rhe),e(rhe,JUo),e(ao,YUo),e(ao,hn),e(hn,KUo),e(hn,the),e(the,ZUo),e(hn,eJo),e(hn,ahe),e(ahe,oJo),e(hn,rJo),e(hn,nhe),e(nhe,tJo),e(hn,aJo),e(ao,nJo),e(ao,dc),e(dc,mF),e(mF,she),e(she,sJo),e(mF,lJo),e(mF,VG),e(VG,iJo),e(mF,dJo),e(dc,cJo),e(dc,gF),e(gF,lhe),e(lhe,fJo),e(gF,mJo),e(gF,XG),e(XG,gJo),e(gF,hJo),e(dc,pJo),e(dc,hF),e(hF,ihe),e(ihe,_Jo),e(hF,uJo),e(hF,zG),e(zG,bJo),e(hF,FJo),e(ao,vJo),e(ao,pF),e(pF,TJo),e(pF,dhe),e(dhe,MJo),e(pF,EJo),e(pF,che),e(che,CJo),e(ao,wJo),e(ao,fhe),e(fhe,AJo),e(ao,yJo),g(DA,ao,null),b(c,IRe,u),b(c,cc,u),e(cc,_F),e(_F,mhe),g(GA,mhe,null),e(cc,LJo),e(cc,ghe),e(ghe,xJo),b(c,qRe,u),b(c,br,u),g(OA,br,null),e(br,kJo),e(br,fc),e(fc,SJo),e(fc,QG),e(QG,RJo),e(fc,BJo),e(fc,WG),e(WG,PJo),e(fc,$Jo),e(br,IJo),e(br,VA),e(VA,qJo),e(VA,hhe),e(hhe,NJo),e(VA,jJo),e(br,DJo),e(br,mt),g(XA,mt,null),e(mt,GJo),e(mt,phe),e(phe,OJo),e(mt,VJo),e(mt,mc),e(mc,XJo),e(mc,_he),e(_he,zJo),e(mc,QJo),e(mc,HG),e(HG,WJo),e(mc,HJo),e(mt,UJo),e(mt,uhe),e(uhe,JJo),e(mt,YJo),g(zA,mt,null),e(br,KJo),e(br,no),g(QA,no,null),e(no,ZJo),e(no,bhe),e(bhe,eYo),e(no,oYo),e(no,pn),e(pn,rYo),e(pn,Fhe),e(Fhe,tYo),e(pn,aYo),e(pn,vhe),e(vhe,nYo),e(pn,sYo),e(pn,The),e(The,lYo),e(pn,iYo),e(no,dYo),e(no,Mhe),e(Mhe,uF),e(uF,Ehe),e(Ehe,cYo),e(uF,fYo),e(uF,UG),e(UG,mYo),e(uF,gYo),e(no,hYo),e(no,bF),e(bF,pYo),e(bF,Che),e(Che,_Yo),e(bF,uYo),e(bF,whe),e(whe,bYo),e(no,FYo),e(no,Ahe),e(Ahe,vYo),e(no,TYo),g(WA,no,null),b(c,NRe,u),b(c,gc,u),e(gc,FF),e(FF,yhe),g(HA,yhe,null),e(gc,MYo),e(gc,Lhe),e(Lhe,EYo),b(c,jRe,u),b(c,Fr,u),g(UA,Fr,null),e(Fr,CYo),e(Fr,hc),e(hc,wYo),e(hc,JG),e(JG,AYo),e(hc,yYo),e(hc,YG),e(YG,LYo),e(hc,xYo),e(Fr,kYo),e(Fr,JA),e(JA,SYo),e(JA,xhe),e(xhe,RYo),e(JA,BYo),e(Fr,PYo),e(Fr,gt),g(YA,gt,null),e(gt,$Yo),e(gt,khe),e(khe,IYo),e(gt,qYo),e(gt,pc),e(pc,NYo),e(pc,She),e(She,jYo),e(pc,DYo),e(pc,KG),e(KG,GYo),e(pc,OYo),e(gt,VYo),e(gt,Rhe),e(Rhe,XYo),e(gt,zYo),g(KA,gt,null),e(Fr,QYo),e(Fr,ho),g(ZA,ho,null),e(ho,WYo),e(ho,Bhe),e(Bhe,HYo),e(ho,UYo),e(ho,_n),e(_n,JYo),e(_n,Phe),e(Phe,YYo),e(_n,KYo),e(_n,$he),e($he,ZYo),e(_n,eKo),e(_n,Ihe),e(Ihe,oKo),e(_n,rKo),e(ho,tKo),e(ho,x),e(x,vF),e(vF,qhe),e(qhe,aKo),e(vF,nKo),e(vF,ZG),e(ZG,sKo),e(vF,lKo),e(x,iKo),e(x,TF),e(TF,Nhe),e(Nhe,dKo),e(TF,cKo),e(TF,eO),e(eO,fKo),e(TF,mKo),e(x,gKo),e(x,MF),e(MF,jhe),e(jhe,hKo),e(MF,pKo),e(MF,oO),e(oO,_Ko),e(MF,uKo),e(x,bKo),e(x,EF),e(EF,Dhe),e(Dhe,FKo),e(EF,vKo),e(EF,rO),e(rO,TKo),e(EF,MKo),e(x,EKo),e(x,CF),e(CF,Ghe),e(Ghe,CKo),e(CF,wKo),e(CF,tO),e(tO,AKo),e(CF,yKo),e(x,LKo),e(x,wF),e(wF,Ohe),e(Ohe,xKo),e(wF,kKo),e(wF,aO),e(aO,SKo),e(wF,RKo),e(x,BKo),e(x,AF),e(AF,Vhe),e(Vhe,PKo),e(AF,$Ko),e(AF,nO),e(nO,IKo),e(AF,qKo),e(x,NKo),e(x,yF),e(yF,Xhe),e(Xhe,jKo),e(yF,DKo),e(yF,sO),e(sO,GKo),e(yF,OKo),e(x,VKo),e(x,LF),e(LF,zhe),e(zhe,XKo),e(LF,zKo),e(LF,lO),e(lO,QKo),e(LF,WKo),e(x,HKo),e(x,xF),e(xF,Qhe),e(Qhe,UKo),e(xF,JKo),e(xF,iO),e(iO,YKo),e(xF,KKo),e(x,ZKo),e(x,kF),e(kF,Whe),e(Whe,eZo),e(kF,oZo),e(kF,dO),e(dO,rZo),e(kF,tZo),e(x,aZo),e(x,SF),e(SF,Hhe),e(Hhe,nZo),e(SF,sZo),e(SF,cO),e(cO,lZo),e(SF,iZo),e(x,dZo),e(x,RF),e(RF,Uhe),e(Uhe,cZo),e(RF,fZo),e(RF,fO),e(fO,mZo),e(RF,gZo),e(x,hZo),e(x,BF),e(BF,Jhe),e(Jhe,pZo),e(BF,_Zo),e(BF,mO),e(mO,uZo),e(BF,bZo),e(x,FZo),e(x,PF),e(PF,Yhe),e(Yhe,vZo),e(PF,TZo),e(PF,gO),e(gO,MZo),e(PF,EZo),e(x,CZo),e(x,$F),e($F,Khe),e(Khe,wZo),e($F,AZo),e($F,hO),e(hO,yZo),e($F,LZo),e(x,xZo),e(x,Gs),e(Gs,Zhe),e(Zhe,kZo),e(Gs,SZo),e(Gs,pO),e(pO,RZo),e(Gs,BZo),e(Gs,_O),e(_O,PZo),e(Gs,$Zo),e(x,IZo),e(x,IF),e(IF,epe),e(epe,qZo),e(IF,NZo),e(IF,uO),e(uO,jZo),e(IF,DZo),e(x,GZo),e(x,qF),e(qF,ope),e(ope,OZo),e(qF,VZo),e(qF,bO),e(bO,XZo),e(qF,zZo),e(x,QZo),e(x,NF),e(NF,rpe),e(rpe,WZo),e(NF,HZo),e(NF,FO),e(FO,UZo),e(NF,JZo),e(x,YZo),e(x,jF),e(jF,tpe),e(tpe,KZo),e(jF,ZZo),e(jF,vO),e(vO,eer),e(jF,oer),e(x,rer),e(x,DF),e(DF,ape),e(ape,ter),e(DF,aer),e(DF,TO),e(TO,ner),e(DF,ser),e(x,ler),e(x,GF),e(GF,npe),e(npe,ier),e(GF,der),e(GF,MO),e(MO,cer),e(GF,fer),e(x,mer),e(x,OF),e(OF,spe),e(spe,ger),e(OF,her),e(OF,EO),e(EO,per),e(OF,_er),e(x,uer),e(x,VF),e(VF,lpe),e(lpe,ber),e(VF,Fer),e(VF,CO),e(CO,ver),e(VF,Ter),e(x,Mer),e(x,XF),e(XF,ipe),e(ipe,Eer),e(XF,Cer),e(XF,wO),e(wO,wer),e(XF,Aer),e(x,yer),e(x,zF),e(zF,dpe),e(dpe,Ler),e(zF,xer),e(zF,AO),e(AO,ker),e(zF,Ser),e(x,Rer),e(x,QF),e(QF,cpe),e(cpe,Ber),e(QF,Per),e(QF,yO),e(yO,$er),e(QF,Ier),e(x,qer),e(x,WF),e(WF,fpe),e(fpe,Ner),e(WF,jer),e(WF,LO),e(LO,Der),e(WF,Ger),e(x,Oer),e(x,HF),e(HF,mpe),e(mpe,Ver),e(HF,Xer),e(HF,xO),e(xO,zer),e(HF,Qer),e(x,Wer),e(x,UF),e(UF,gpe),e(gpe,Her),e(UF,Uer),e(UF,kO),e(kO,Jer),e(UF,Yer),e(x,Ker),e(x,JF),e(JF,hpe),e(hpe,Zer),e(JF,eor),e(JF,SO),e(SO,oor),e(JF,ror),e(x,tor),e(x,YF),e(YF,ppe),e(ppe,aor),e(YF,nor),e(YF,RO),e(RO,sor),e(YF,lor),e(x,ior),e(x,KF),e(KF,_pe),e(_pe,dor),e(KF,cor),e(KF,BO),e(BO,mor),e(KF,gor),e(x,hor),e(x,ZF),e(ZF,upe),e(upe,por),e(ZF,_or),e(ZF,PO),e(PO,uor),e(ZF,bor),e(x,For),e(x,ev),e(ev,bpe),e(bpe,vor),e(ev,Tor),e(ev,$O),e($O,Mor),e(ev,Eor),e(x,Cor),e(x,ov),e(ov,Fpe),e(Fpe,wor),e(ov,Aor),e(ov,IO),e(IO,yor),e(ov,Lor),e(x,xor),e(x,rv),e(rv,vpe),e(vpe,kor),e(rv,Sor),e(rv,qO),e(qO,Ror),e(rv,Bor),e(x,Por),e(x,tv),e(tv,Tpe),e(Tpe,$or),e(tv,Ior),e(tv,NO),e(NO,qor),e(tv,Nor),e(x,jor),e(x,av),e(av,Mpe),e(Mpe,Dor),e(av,Gor),e(av,jO),e(jO,Oor),e(av,Vor),e(x,Xor),e(x,nv),e(nv,Epe),e(Epe,zor),e(nv,Qor),e(nv,DO),e(DO,Wor),e(nv,Hor),e(x,Uor),e(x,sv),e(sv,Cpe),e(Cpe,Jor),e(sv,Yor),e(sv,GO),e(GO,Kor),e(sv,Zor),e(x,err),e(x,lv),e(lv,wpe),e(wpe,orr),e(lv,rrr),e(lv,OO),e(OO,trr),e(lv,arr),e(ho,nrr),e(ho,Ape),e(Ape,srr),e(ho,lrr),g(e0,ho,null),b(c,DRe,u),b(c,_c,u),e(_c,iv),e(iv,ype),g(o0,ype,null),e(_c,irr),e(_c,Lpe),e(Lpe,drr),b(c,GRe,u),b(c,vr,u),g(r0,vr,null),e(vr,crr),e(vr,uc),e(uc,frr),e(uc,VO),e(VO,mrr),e(uc,grr),e(uc,XO),e(XO,hrr),e(uc,prr),e(vr,_rr),e(vr,t0),e(t0,urr),e(t0,xpe),e(xpe,brr),e(t0,Frr),e(vr,vrr),e(vr,ht),g(a0,ht,null),e(ht,Trr),e(ht,kpe),e(kpe,Mrr),e(ht,Err),e(ht,bc),e(bc,Crr),e(bc,Spe),e(Spe,wrr),e(bc,Arr),e(bc,zO),e(zO,yrr),e(bc,Lrr),e(ht,xrr),e(ht,Rpe),e(Rpe,krr),e(ht,Srr),g(n0,ht,null),e(vr,Rrr),e(vr,po),g(s0,po,null),e(po,Brr),e(po,Bpe),e(Bpe,Prr),e(po,$rr),e(po,un),e(un,Irr),e(un,Ppe),e(Ppe,qrr),e(un,Nrr),e(un,$pe),e($pe,jrr),e(un,Drr),e(un,Ipe),e(Ipe,Grr),e(un,Orr),e(po,Vrr),e(po,H),e(H,dv),e(dv,qpe),e(qpe,Xrr),e(dv,zrr),e(dv,QO),e(QO,Qrr),e(dv,Wrr),e(H,Hrr),e(H,cv),e(cv,Npe),e(Npe,Urr),e(cv,Jrr),e(cv,WO),e(WO,Yrr),e(cv,Krr),e(H,Zrr),e(H,fv),e(fv,jpe),e(jpe,etr),e(fv,otr),e(fv,HO),e(HO,rtr),e(fv,ttr),e(H,atr),e(H,mv),e(mv,Dpe),e(Dpe,ntr),e(mv,str),e(mv,UO),e(UO,ltr),e(mv,itr),e(H,dtr),e(H,gv),e(gv,Gpe),e(Gpe,ctr),e(gv,ftr),e(gv,JO),e(JO,mtr),e(gv,gtr),e(H,htr),e(H,hv),e(hv,Ope),e(Ope,ptr),e(hv,_tr),e(hv,YO),e(YO,utr),e(hv,btr),e(H,Ftr),e(H,pv),e(pv,Vpe),e(Vpe,vtr),e(pv,Ttr),e(pv,KO),e(KO,Mtr),e(pv,Etr),e(H,Ctr),e(H,_v),e(_v,Xpe),e(Xpe,wtr),e(_v,Atr),e(_v,ZO),e(ZO,ytr),e(_v,Ltr),e(H,xtr),e(H,uv),e(uv,zpe),e(zpe,ktr),e(uv,Str),e(uv,eV),e(eV,Rtr),e(uv,Btr),e(H,Ptr),e(H,bv),e(bv,Qpe),e(Qpe,$tr),e(bv,Itr),e(bv,oV),e(oV,qtr),e(bv,Ntr),e(H,jtr),e(H,Fv),e(Fv,Wpe),e(Wpe,Dtr),e(Fv,Gtr),e(Fv,rV),e(rV,Otr),e(Fv,Vtr),e(H,Xtr),e(H,vv),e(vv,Hpe),e(Hpe,ztr),e(vv,Qtr),e(vv,tV),e(tV,Wtr),e(vv,Htr),e(H,Utr),e(H,Tv),e(Tv,Upe),e(Upe,Jtr),e(Tv,Ytr),e(Tv,aV),e(aV,Ktr),e(Tv,Ztr),e(H,ear),e(H,Mv),e(Mv,Jpe),e(Jpe,oar),e(Mv,rar),e(Mv,nV),e(nV,tar),e(Mv,aar),e(H,nar),e(H,Ev),e(Ev,Ype),e(Ype,sar),e(Ev,lar),e(Ev,sV),e(sV,iar),e(Ev,dar),e(H,car),e(H,Cv),e(Cv,Kpe),e(Kpe,far),e(Cv,mar),e(Cv,lV),e(lV,gar),e(Cv,har),e(H,par),e(H,wv),e(wv,Zpe),e(Zpe,_ar),e(wv,uar),e(wv,iV),e(iV,bar),e(wv,Far),e(H,Tar),e(H,Av),e(Av,e_e),e(e_e,Mar),e(Av,Ear),e(Av,dV),e(dV,Car),e(Av,war),e(H,Aar),e(H,yv),e(yv,o_e),e(o_e,yar),e(yv,Lar),e(yv,cV),e(cV,xar),e(yv,kar),e(H,Sar),e(H,Lv),e(Lv,r_e),e(r_e,Rar),e(Lv,Bar),e(Lv,fV),e(fV,Par),e(Lv,$ar),e(H,Iar),e(H,xv),e(xv,t_e),e(t_e,qar),e(xv,Nar),e(xv,mV),e(mV,jar),e(xv,Dar),e(H,Gar),e(H,kv),e(kv,a_e),e(a_e,Oar),e(kv,Var),e(kv,gV),e(gV,Xar),e(kv,zar),e(po,Qar),e(po,n_e),e(n_e,War),e(po,Har),g(l0,po,null),b(c,ORe,u),b(c,Fc,u),e(Fc,Sv),e(Sv,s_e),g(i0,s_e,null),e(Fc,Uar),e(Fc,l_e),e(l_e,Jar),b(c,VRe,u),b(c,Tr,u),g(d0,Tr,null),e(Tr,Yar),e(Tr,vc),e(vc,Kar),e(vc,hV),e(hV,Zar),e(vc,enr),e(vc,pV),e(pV,onr),e(vc,rnr),e(Tr,tnr),e(Tr,c0),e(c0,anr),e(c0,i_e),e(i_e,nnr),e(c0,snr),e(Tr,lnr),e(Tr,pt),g(f0,pt,null),e(pt,inr),e(pt,d_e),e(d_e,dnr),e(pt,cnr),e(pt,Tc),e(Tc,fnr),e(Tc,c_e),e(c_e,mnr),e(Tc,gnr),e(Tc,_V),e(_V,hnr),e(Tc,pnr),e(pt,_nr),e(pt,f_e),e(f_e,unr),e(pt,bnr),g(m0,pt,null),e(Tr,Fnr),e(Tr,_o),g(g0,_o,null),e(_o,vnr),e(_o,m_e),e(m_e,Tnr),e(_o,Mnr),e(_o,bn),e(bn,Enr),e(bn,g_e),e(g_e,Cnr),e(bn,wnr),e(bn,h_e),e(h_e,Anr),e(bn,ynr),e(bn,p_e),e(p_e,Lnr),e(bn,xnr),e(_o,knr),e(_o,ce),e(ce,Rv),e(Rv,__e),e(__e,Snr),e(Rv,Rnr),e(Rv,uV),e(uV,Bnr),e(Rv,Pnr),e(ce,$nr),e(ce,Bv),e(Bv,u_e),e(u_e,Inr),e(Bv,qnr),e(Bv,bV),e(bV,Nnr),e(Bv,jnr),e(ce,Dnr),e(ce,Pv),e(Pv,b_e),e(b_e,Gnr),e(Pv,Onr),e(Pv,FV),e(FV,Vnr),e(Pv,Xnr),e(ce,znr),e(ce,$v),e($v,F_e),e(F_e,Qnr),e($v,Wnr),e($v,vV),e(vV,Hnr),e($v,Unr),e(ce,Jnr),e(ce,Iv),e(Iv,v_e),e(v_e,Ynr),e(Iv,Knr),e(Iv,TV),e(TV,Znr),e(Iv,esr),e(ce,osr),e(ce,qv),e(qv,T_e),e(T_e,rsr),e(qv,tsr),e(qv,MV),e(MV,asr),e(qv,nsr),e(ce,ssr),e(ce,Nv),e(Nv,M_e),e(M_e,lsr),e(Nv,isr),e(Nv,EV),e(EV,dsr),e(Nv,csr),e(ce,fsr),e(ce,jv),e(jv,E_e),e(E_e,msr),e(jv,gsr),e(jv,CV),e(CV,hsr),e(jv,psr),e(ce,_sr),e(ce,Dv),e(Dv,C_e),e(C_e,usr),e(Dv,bsr),e(Dv,wV),e(wV,Fsr),e(Dv,vsr),e(ce,Tsr),e(ce,Gv),e(Gv,w_e),e(w_e,Msr),e(Gv,Esr),e(Gv,AV),e(AV,Csr),e(Gv,wsr),e(ce,Asr),e(ce,Ov),e(Ov,A_e),e(A_e,ysr),e(Ov,Lsr),e(Ov,yV),e(yV,xsr),e(Ov,ksr),e(ce,Ssr),e(ce,Vv),e(Vv,y_e),e(y_e,Rsr),e(Vv,Bsr),e(Vv,LV),e(LV,Psr),e(Vv,$sr),e(_o,Isr),e(_o,L_e),e(L_e,qsr),e(_o,Nsr),g(h0,_o,null),b(c,XRe,u),b(c,Mc,u),e(Mc,Xv),e(Xv,x_e),g(p0,x_e,null),e(Mc,jsr),e(Mc,k_e),e(k_e,Dsr),b(c,zRe,u),b(c,Mr,u),g(_0,Mr,null),e(Mr,Gsr),e(Mr,Ec),e(Ec,Osr),e(Ec,xV),e(xV,Vsr),e(Ec,Xsr),e(Ec,kV),e(kV,zsr),e(Ec,Qsr),e(Mr,Wsr),e(Mr,u0),e(u0,Hsr),e(u0,S_e),e(S_e,Usr),e(u0,Jsr),e(Mr,Ysr),e(Mr,_t),g(b0,_t,null),e(_t,Ksr),e(_t,R_e),e(R_e,Zsr),e(_t,elr),e(_t,Cc),e(Cc,olr),e(Cc,B_e),e(B_e,rlr),e(Cc,tlr),e(Cc,SV),e(SV,alr),e(Cc,nlr),e(_t,slr),e(_t,P_e),e(P_e,llr),e(_t,ilr),g(F0,_t,null),e(Mr,dlr),e(Mr,uo),g(v0,uo,null),e(uo,clr),e(uo,$_e),e($_e,flr),e(uo,mlr),e(uo,Fn),e(Fn,glr),e(Fn,I_e),e(I_e,hlr),e(Fn,plr),e(Fn,q_e),e(q_e,_lr),e(Fn,ulr),e(Fn,N_e),e(N_e,blr),e(Fn,Flr),e(uo,vlr),e(uo,T0),e(T0,zv),e(zv,j_e),e(j_e,Tlr),e(zv,Mlr),e(zv,RV),e(RV,Elr),e(zv,Clr),e(T0,wlr),e(T0,Qv),e(Qv,D_e),e(D_e,Alr),e(Qv,ylr),e(Qv,BV),e(BV,Llr),e(Qv,xlr),e(uo,klr),e(uo,G_e),e(G_e,Slr),e(uo,Rlr),g(M0,uo,null),b(c,QRe,u),b(c,wc,u),e(wc,Wv),e(Wv,O_e),g(E0,O_e,null),e(wc,Blr),e(wc,V_e),e(V_e,Plr),b(c,WRe,u),b(c,Er,u),g(C0,Er,null),e(Er,$lr),e(Er,Ac),e(Ac,Ilr),e(Ac,PV),e(PV,qlr),e(Ac,Nlr),e(Ac,$V),e($V,jlr),e(Ac,Dlr),e(Er,Glr),e(Er,w0),e(w0,Olr),e(w0,X_e),e(X_e,Vlr),e(w0,Xlr),e(Er,zlr),e(Er,ut),g(A0,ut,null),e(ut,Qlr),e(ut,z_e),e(z_e,Wlr),e(ut,Hlr),e(ut,yc),e(yc,Ulr),e(yc,Q_e),e(Q_e,Jlr),e(yc,Ylr),e(yc,IV),e(IV,Klr),e(yc,Zlr),e(ut,eir),e(ut,W_e),e(W_e,oir),e(ut,rir),g(y0,ut,null),e(Er,tir),e(Er,bo),g(L0,bo,null),e(bo,air),e(bo,H_e),e(H_e,nir),e(bo,sir),e(bo,vn),e(vn,lir),e(vn,U_e),e(U_e,iir),e(vn,dir),e(vn,J_e),e(J_e,cir),e(vn,fir),e(vn,Y_e),e(Y_e,mir),e(vn,gir),e(bo,hir),e(bo,J),e(J,Hv),e(Hv,K_e),e(K_e,pir),e(Hv,_ir),e(Hv,qV),e(qV,uir),e(Hv,bir),e(J,Fir),e(J,Uv),e(Uv,Z_e),e(Z_e,vir),e(Uv,Tir),e(Uv,NV),e(NV,Mir),e(Uv,Eir),e(J,Cir),e(J,Jv),e(Jv,eue),e(eue,wir),e(Jv,Air),e(Jv,jV),e(jV,yir),e(Jv,Lir),e(J,xir),e(J,Yv),e(Yv,oue),e(oue,kir),e(Yv,Sir),e(Yv,DV),e(DV,Rir),e(Yv,Bir),e(J,Pir),e(J,Kv),e(Kv,rue),e(rue,$ir),e(Kv,Iir),e(Kv,GV),e(GV,qir),e(Kv,Nir),e(J,jir),e(J,Zv),e(Zv,tue),e(tue,Dir),e(Zv,Gir),e(Zv,OV),e(OV,Oir),e(Zv,Vir),e(J,Xir),e(J,e6),e(e6,aue),e(aue,zir),e(e6,Qir),e(e6,VV),e(VV,Wir),e(e6,Hir),e(J,Uir),e(J,o6),e(o6,nue),e(nue,Jir),e(o6,Yir),e(o6,XV),e(XV,Kir),e(o6,Zir),e(J,edr),e(J,r6),e(r6,sue),e(sue,odr),e(r6,rdr),e(r6,zV),e(zV,tdr),e(r6,adr),e(J,ndr),e(J,t6),e(t6,lue),e(lue,sdr),e(t6,ldr),e(t6,QV),e(QV,idr),e(t6,ddr),e(J,cdr),e(J,a6),e(a6,iue),e(iue,fdr),e(a6,mdr),e(a6,WV),e(WV,gdr),e(a6,hdr),e(J,pdr),e(J,n6),e(n6,due),e(due,_dr),e(n6,udr),e(n6,HV),e(HV,bdr),e(n6,Fdr),e(J,vdr),e(J,s6),e(s6,cue),e(cue,Tdr),e(s6,Mdr),e(s6,UV),e(UV,Edr),e(s6,Cdr),e(J,wdr),e(J,l6),e(l6,fue),e(fue,Adr),e(l6,ydr),e(l6,JV),e(JV,Ldr),e(l6,xdr),e(J,kdr),e(J,i6),e(i6,mue),e(mue,Sdr),e(i6,Rdr),e(i6,YV),e(YV,Bdr),e(i6,Pdr),e(J,$dr),e(J,d6),e(d6,gue),e(gue,Idr),e(d6,qdr),e(d6,KV),e(KV,Ndr),e(d6,jdr),e(J,Ddr),e(J,c6),e(c6,hue),e(hue,Gdr),e(c6,Odr),e(c6,ZV),e(ZV,Vdr),e(c6,Xdr),e(J,zdr),e(J,f6),e(f6,pue),e(pue,Qdr),e(f6,Wdr),e(f6,eX),e(eX,Hdr),e(f6,Udr),e(J,Jdr),e(J,m6),e(m6,_ue),e(_ue,Ydr),e(m6,Kdr),e(m6,oX),e(oX,Zdr),e(m6,ecr),e(J,ocr),e(J,g6),e(g6,uue),e(uue,rcr),e(g6,tcr),e(g6,rX),e(rX,acr),e(g6,ncr),e(bo,scr),e(bo,bue),e(bue,lcr),e(bo,icr),g(x0,bo,null),b(c,HRe,u),b(c,Lc,u),e(Lc,h6),e(h6,Fue),g(k0,Fue,null),e(Lc,dcr),e(Lc,vue),e(vue,ccr),b(c,URe,u),b(c,Cr,u),g(S0,Cr,null),e(Cr,fcr),e(Cr,xc),e(xc,mcr),e(xc,tX),e(tX,gcr),e(xc,hcr),e(xc,aX),e(aX,pcr),e(xc,_cr),e(Cr,ucr),e(Cr,R0),e(R0,bcr),e(R0,Tue),e(Tue,Fcr),e(R0,vcr),e(Cr,Tcr),e(Cr,bt),g(B0,bt,null),e(bt,Mcr),e(bt,Mue),e(Mue,Ecr),e(bt,Ccr),e(bt,kc),e(kc,wcr),e(kc,Eue),e(Eue,Acr),e(kc,ycr),e(kc,nX),e(nX,Lcr),e(kc,xcr),e(bt,kcr),e(bt,Cue),e(Cue,Scr),e(bt,Rcr),g(P0,bt,null),e(Cr,Bcr),e(Cr,Fo),g($0,Fo,null),e(Fo,Pcr),e(Fo,wue),e(wue,$cr),e(Fo,Icr),e(Fo,Tn),e(Tn,qcr),e(Tn,Aue),e(Aue,Ncr),e(Tn,jcr),e(Tn,yue),e(yue,Dcr),e(Tn,Gcr),e(Tn,Lue),e(Lue,Ocr),e(Tn,Vcr),e(Fo,Xcr),e(Fo,ue),e(ue,p6),e(p6,xue),e(xue,zcr),e(p6,Qcr),e(p6,sX),e(sX,Wcr),e(p6,Hcr),e(ue,Ucr),e(ue,_6),e(_6,kue),e(kue,Jcr),e(_6,Ycr),e(_6,lX),e(lX,Kcr),e(_6,Zcr),e(ue,efr),e(ue,u6),e(u6,Sue),e(Sue,ofr),e(u6,rfr),e(u6,iX),e(iX,tfr),e(u6,afr),e(ue,nfr),e(ue,b6),e(b6,Rue),e(Rue,sfr),e(b6,lfr),e(b6,dX),e(dX,ifr),e(b6,dfr),e(ue,cfr),e(ue,F6),e(F6,Bue),e(Bue,ffr),e(F6,mfr),e(F6,cX),e(cX,gfr),e(F6,hfr),e(ue,pfr),e(ue,v6),e(v6,Pue),e(Pue,_fr),e(v6,ufr),e(v6,fX),e(fX,bfr),e(v6,Ffr),e(ue,vfr),e(ue,T6),e(T6,$ue),e($ue,Tfr),e(T6,Mfr),e(T6,mX),e(mX,Efr),e(T6,Cfr),e(ue,wfr),e(ue,M6),e(M6,Iue),e(Iue,Afr),e(M6,yfr),e(M6,gX),e(gX,Lfr),e(M6,xfr),e(ue,kfr),e(ue,E6),e(E6,que),e(que,Sfr),e(E6,Rfr),e(E6,hX),e(hX,Bfr),e(E6,Pfr),e(ue,$fr),e(ue,C6),e(C6,Nue),e(Nue,Ifr),e(C6,qfr),e(C6,pX),e(pX,Nfr),e(C6,jfr),e(Fo,Dfr),e(Fo,jue),e(jue,Gfr),e(Fo,Ofr),g(I0,Fo,null),b(c,JRe,u),b(c,Sc,u),e(Sc,w6),e(w6,Due),g(q0,Due,null),e(Sc,Vfr),e(Sc,Gue),e(Gue,Xfr),b(c,YRe,u),b(c,wr,u),g(N0,wr,null),e(wr,zfr),e(wr,Rc),e(Rc,Qfr),e(Rc,_X),e(_X,Wfr),e(Rc,Hfr),e(Rc,uX),e(uX,Ufr),e(Rc,Jfr),e(wr,Yfr),e(wr,j0),e(j0,Kfr),e(j0,Oue),e(Oue,Zfr),e(j0,emr),e(wr,omr),e(wr,Ft),g(D0,Ft,null),e(Ft,rmr),e(Ft,Vue),e(Vue,tmr),e(Ft,amr),e(Ft,Bc),e(Bc,nmr),e(Bc,Xue),e(Xue,smr),e(Bc,lmr),e(Bc,bX),e(bX,imr),e(Bc,dmr),e(Ft,cmr),e(Ft,zue),e(zue,fmr),e(Ft,mmr),g(G0,Ft,null),e(wr,gmr),e(wr,vo),g(O0,vo,null),e(vo,hmr),e(vo,Que),e(Que,pmr),e(vo,_mr),e(vo,Mn),e(Mn,umr),e(Mn,Wue),e(Wue,bmr),e(Mn,Fmr),e(Mn,Hue),e(Hue,vmr),e(Mn,Tmr),e(Mn,Uue),e(Uue,Mmr),e(Mn,Emr),e(vo,Cmr),e(vo,V),e(V,A6),e(A6,Jue),e(Jue,wmr),e(A6,Amr),e(A6,FX),e(FX,ymr),e(A6,Lmr),e(V,xmr),e(V,y6),e(y6,Yue),e(Yue,kmr),e(y6,Smr),e(y6,vX),e(vX,Rmr),e(y6,Bmr),e(V,Pmr),e(V,L6),e(L6,Kue),e(Kue,$mr),e(L6,Imr),e(L6,TX),e(TX,qmr),e(L6,Nmr),e(V,jmr),e(V,x6),e(x6,Zue),e(Zue,Dmr),e(x6,Gmr),e(x6,MX),e(MX,Omr),e(x6,Vmr),e(V,Xmr),e(V,k6),e(k6,e1e),e(e1e,zmr),e(k6,Qmr),e(k6,EX),e(EX,Wmr),e(k6,Hmr),e(V,Umr),e(V,S6),e(S6,o1e),e(o1e,Jmr),e(S6,Ymr),e(S6,CX),e(CX,Kmr),e(S6,Zmr),e(V,egr),e(V,R6),e(R6,r1e),e(r1e,ogr),e(R6,rgr),e(R6,wX),e(wX,tgr),e(R6,agr),e(V,ngr),e(V,B6),e(B6,t1e),e(t1e,sgr),e(B6,lgr),e(B6,AX),e(AX,igr),e(B6,dgr),e(V,cgr),e(V,P6),e(P6,a1e),e(a1e,fgr),e(P6,mgr),e(P6,yX),e(yX,ggr),e(P6,hgr),e(V,pgr),e(V,$6),e($6,n1e),e(n1e,_gr),e($6,ugr),e($6,LX),e(LX,bgr),e($6,Fgr),e(V,vgr),e(V,I6),e(I6,s1e),e(s1e,Tgr),e(I6,Mgr),e(I6,xX),e(xX,Egr),e(I6,Cgr),e(V,wgr),e(V,q6),e(q6,l1e),e(l1e,Agr),e(q6,ygr),e(q6,kX),e(kX,Lgr),e(q6,xgr),e(V,kgr),e(V,N6),e(N6,i1e),e(i1e,Sgr),e(N6,Rgr),e(N6,SX),e(SX,Bgr),e(N6,Pgr),e(V,$gr),e(V,j6),e(j6,d1e),e(d1e,Igr),e(j6,qgr),e(j6,RX),e(RX,Ngr),e(j6,jgr),e(V,Dgr),e(V,D6),e(D6,c1e),e(c1e,Ggr),e(D6,Ogr),e(D6,BX),e(BX,Vgr),e(D6,Xgr),e(V,zgr),e(V,G6),e(G6,f1e),e(f1e,Qgr),e(G6,Wgr),e(G6,PX),e(PX,Hgr),e(G6,Ugr),e(V,Jgr),e(V,O6),e(O6,m1e),e(m1e,Ygr),e(O6,Kgr),e(O6,$X),e($X,Zgr),e(O6,ehr),e(V,ohr),e(V,V6),e(V6,g1e),e(g1e,rhr),e(V6,thr),e(V6,IX),e(IX,ahr),e(V6,nhr),e(V,shr),e(V,X6),e(X6,h1e),e(h1e,lhr),e(X6,ihr),e(X6,qX),e(qX,dhr),e(X6,chr),e(V,fhr),e(V,z6),e(z6,p1e),e(p1e,mhr),e(z6,ghr),e(z6,NX),e(NX,hhr),e(z6,phr),e(V,_hr),e(V,Q6),e(Q6,_1e),e(_1e,uhr),e(Q6,bhr),e(Q6,jX),e(jX,Fhr),e(Q6,vhr),e(V,Thr),e(V,W6),e(W6,u1e),e(u1e,Mhr),e(W6,Ehr),e(W6,DX),e(DX,Chr),e(W6,whr),e(V,Ahr),e(V,H6),e(H6,b1e),e(b1e,yhr),e(H6,Lhr),e(H6,GX),e(GX,xhr),e(H6,khr),e(V,Shr),e(V,U6),e(U6,F1e),e(F1e,Rhr),e(U6,Bhr),e(U6,OX),e(OX,Phr),e(U6,$hr),e(V,Ihr),e(V,J6),e(J6,v1e),e(v1e,qhr),e(J6,Nhr),e(J6,VX),e(VX,jhr),e(J6,Dhr),e(V,Ghr),e(V,Y6),e(Y6,T1e),e(T1e,Ohr),e(Y6,Vhr),e(Y6,XX),e(XX,Xhr),e(Y6,zhr),e(vo,Qhr),e(vo,M1e),e(M1e,Whr),e(vo,Hhr),g(V0,vo,null),b(c,KRe,u),b(c,Pc,u),e(Pc,K6),e(K6,E1e),g(X0,E1e,null),e(Pc,Uhr),e(Pc,C1e),e(C1e,Jhr),b(c,ZRe,u),b(c,Ar,u),g(z0,Ar,null),e(Ar,Yhr),e(Ar,$c),e($c,Khr),e($c,zX),e(zX,Zhr),e($c,epr),e($c,QX),e(QX,opr),e($c,rpr),e(Ar,tpr),e(Ar,Q0),e(Q0,apr),e(Q0,w1e),e(w1e,npr),e(Q0,spr),e(Ar,lpr),e(Ar,vt),g(W0,vt,null),e(vt,ipr),e(vt,A1e),e(A1e,dpr),e(vt,cpr),e(vt,Ic),e(Ic,fpr),e(Ic,y1e),e(y1e,mpr),e(Ic,gpr),e(Ic,WX),e(WX,hpr),e(Ic,ppr),e(vt,_pr),e(vt,L1e),e(L1e,upr),e(vt,bpr),g(H0,vt,null),e(Ar,Fpr),e(Ar,To),g(U0,To,null),e(To,vpr),e(To,x1e),e(x1e,Tpr),e(To,Mpr),e(To,En),e(En,Epr),e(En,k1e),e(k1e,Cpr),e(En,wpr),e(En,S1e),e(S1e,Apr),e(En,ypr),e(En,R1e),e(R1e,Lpr),e(En,xpr),e(To,kpr),e(To,ae),e(ae,Z6),e(Z6,B1e),e(B1e,Spr),e(Z6,Rpr),e(Z6,HX),e(HX,Bpr),e(Z6,Ppr),e(ae,$pr),e(ae,eT),e(eT,P1e),e(P1e,Ipr),e(eT,qpr),e(eT,UX),e(UX,Npr),e(eT,jpr),e(ae,Dpr),e(ae,oT),e(oT,$1e),e($1e,Gpr),e(oT,Opr),e(oT,JX),e(JX,Vpr),e(oT,Xpr),e(ae,zpr),e(ae,rT),e(rT,I1e),e(I1e,Qpr),e(rT,Wpr),e(rT,YX),e(YX,Hpr),e(rT,Upr),e(ae,Jpr),e(ae,tT),e(tT,q1e),e(q1e,Ypr),e(tT,Kpr),e(tT,KX),e(KX,Zpr),e(tT,e_r),e(ae,o_r),e(ae,aT),e(aT,N1e),e(N1e,r_r),e(aT,t_r),e(aT,ZX),e(ZX,a_r),e(aT,n_r),e(ae,s_r),e(ae,nT),e(nT,j1e),e(j1e,l_r),e(nT,i_r),e(nT,ez),e(ez,d_r),e(nT,c_r),e(ae,f_r),e(ae,sT),e(sT,D1e),e(D1e,m_r),e(sT,g_r),e(sT,oz),e(oz,h_r),e(sT,p_r),e(ae,__r),e(ae,lT),e(lT,G1e),e(G1e,u_r),e(lT,b_r),e(lT,rz),e(rz,F_r),e(lT,v_r),e(ae,T_r),e(ae,iT),e(iT,O1e),e(O1e,M_r),e(iT,E_r),e(iT,tz),e(tz,C_r),e(iT,w_r),e(ae,A_r),e(ae,dT),e(dT,V1e),e(V1e,y_r),e(dT,L_r),e(dT,az),e(az,x_r),e(dT,k_r),e(ae,S_r),e(ae,cT),e(cT,X1e),e(X1e,R_r),e(cT,B_r),e(cT,nz),e(nz,P_r),e(cT,$_r),e(ae,I_r),e(ae,fT),e(fT,z1e),e(z1e,q_r),e(fT,N_r),e(fT,sz),e(sz,j_r),e(fT,D_r),e(ae,G_r),e(ae,mT),e(mT,Q1e),e(Q1e,O_r),e(mT,V_r),e(mT,lz),e(lz,X_r),e(mT,z_r),e(ae,Q_r),e(ae,gT),e(gT,W1e),e(W1e,W_r),e(gT,H_r),e(gT,iz),e(iz,U_r),e(gT,J_r),e(ae,Y_r),e(ae,hT),e(hT,H1e),e(H1e,K_r),e(hT,Z_r),e(hT,dz),e(dz,eur),e(hT,our),e(ae,rur),e(ae,pT),e(pT,U1e),e(U1e,tur),e(pT,aur),e(pT,cz),e(cz,nur),e(pT,sur),e(To,lur),e(To,J1e),e(J1e,iur),e(To,dur),g(J0,To,null),b(c,eBe,u),b(c,qc,u),e(qc,_T),e(_T,Y1e),g(Y0,Y1e,null),e(qc,cur),e(qc,K1e),e(K1e,fur),b(c,oBe,u),b(c,yr,u),g(K0,yr,null),e(yr,mur),e(yr,Nc),e(Nc,gur),e(Nc,fz),e(fz,hur),e(Nc,pur),e(Nc,mz),e(mz,_ur),e(Nc,uur),e(yr,bur),e(yr,Z0),e(Z0,Fur),e(Z0,Z1e),e(Z1e,vur),e(Z0,Tur),e(yr,Mur),e(yr,Tt),g(ey,Tt,null),e(Tt,Eur),e(Tt,e4e),e(e4e,Cur),e(Tt,wur),e(Tt,jc),e(jc,Aur),e(jc,o4e),e(o4e,yur),e(jc,Lur),e(jc,gz),e(gz,xur),e(jc,kur),e(Tt,Sur),e(Tt,r4e),e(r4e,Rur),e(Tt,Bur),g(oy,Tt,null),e(yr,Pur),e(yr,Mo),g(ry,Mo,null),e(Mo,$ur),e(Mo,t4e),e(t4e,Iur),e(Mo,qur),e(Mo,Cn),e(Cn,Nur),e(Cn,a4e),e(a4e,jur),e(Cn,Dur),e(Cn,n4e),e(n4e,Gur),e(Cn,Our),e(Cn,s4e),e(s4e,Vur),e(Cn,Xur),e(Mo,zur),e(Mo,l4e),e(l4e,uT),e(uT,i4e),e(i4e,Qur),e(uT,Wur),e(uT,hz),e(hz,Hur),e(uT,Uur),e(Mo,Jur),e(Mo,d4e),e(d4e,Yur),e(Mo,Kur),g(ty,Mo,null),b(c,rBe,u),b(c,Dc,u),e(Dc,bT),e(bT,c4e),g(ay,c4e,null),e(Dc,Zur),e(Dc,f4e),e(f4e,e1r),b(c,tBe,u),b(c,Lr,u),g(ny,Lr,null),e(Lr,o1r),e(Lr,Gc),e(Gc,r1r),e(Gc,pz),e(pz,t1r),e(Gc,a1r),e(Gc,_z),e(_z,n1r),e(Gc,s1r),e(Lr,l1r),e(Lr,sy),e(sy,i1r),e(sy,m4e),e(m4e,d1r),e(sy,c1r),e(Lr,f1r),e(Lr,Mt),g(ly,Mt,null),e(Mt,m1r),e(Mt,g4e),e(g4e,g1r),e(Mt,h1r),e(Mt,Oc),e(Oc,p1r),e(Oc,h4e),e(h4e,_1r),e(Oc,u1r),e(Oc,uz),e(uz,b1r),e(Oc,F1r),e(Mt,v1r),e(Mt,p4e),e(p4e,T1r),e(Mt,M1r),g(iy,Mt,null),e(Lr,E1r),e(Lr,Eo),g(dy,Eo,null),e(Eo,C1r),e(Eo,_4e),e(_4e,w1r),e(Eo,A1r),e(Eo,wn),e(wn,y1r),e(wn,u4e),e(u4e,L1r),e(wn,x1r),e(wn,b4e),e(b4e,k1r),e(wn,S1r),e(wn,F4e),e(F4e,R1r),e(wn,B1r),e(Eo,P1r),e(Eo,Y),e(Y,FT),e(FT,v4e),e(v4e,$1r),e(FT,I1r),e(FT,bz),e(bz,q1r),e(FT,N1r),e(Y,j1r),e(Y,vT),e(vT,T4e),e(T4e,D1r),e(vT,G1r),e(vT,Fz),e(Fz,O1r),e(vT,V1r),e(Y,X1r),e(Y,TT),e(TT,M4e),e(M4e,z1r),e(TT,Q1r),e(TT,vz),e(vz,W1r),e(TT,H1r),e(Y,U1r),e(Y,MT),e(MT,E4e),e(E4e,J1r),e(MT,Y1r),e(MT,Tz),e(Tz,K1r),e(MT,Z1r),e(Y,e4r),e(Y,ET),e(ET,C4e),e(C4e,o4r),e(ET,r4r),e(ET,Mz),e(Mz,t4r),e(ET,a4r),e(Y,n4r),e(Y,CT),e(CT,w4e),e(w4e,s4r),e(CT,l4r),e(CT,Ez),e(Ez,i4r),e(CT,d4r),e(Y,c4r),e(Y,wT),e(wT,A4e),e(A4e,f4r),e(wT,m4r),e(wT,Cz),e(Cz,g4r),e(wT,h4r),e(Y,p4r),e(Y,AT),e(AT,y4e),e(y4e,_4r),e(AT,u4r),e(AT,wz),e(wz,b4r),e(AT,F4r),e(Y,v4r),e(Y,yT),e(yT,L4e),e(L4e,T4r),e(yT,M4r),e(yT,Az),e(Az,E4r),e(yT,C4r),e(Y,w4r),e(Y,LT),e(LT,x4e),e(x4e,A4r),e(LT,y4r),e(LT,yz),e(yz,L4r),e(LT,x4r),e(Y,k4r),e(Y,xT),e(xT,k4e),e(k4e,S4r),e(xT,R4r),e(xT,Lz),e(Lz,B4r),e(xT,P4r),e(Y,$4r),e(Y,kT),e(kT,S4e),e(S4e,I4r),e(kT,q4r),e(kT,xz),e(xz,N4r),e(kT,j4r),e(Y,D4r),e(Y,ST),e(ST,R4e),e(R4e,G4r),e(ST,O4r),e(ST,kz),e(kz,V4r),e(ST,X4r),e(Y,z4r),e(Y,RT),e(RT,B4e),e(B4e,Q4r),e(RT,W4r),e(RT,Sz),e(Sz,H4r),e(RT,U4r),e(Y,J4r),e(Y,BT),e(BT,P4e),e(P4e,Y4r),e(BT,K4r),e(BT,Rz),e(Rz,Z4r),e(BT,ebr),e(Y,obr),e(Y,PT),e(PT,$4e),e($4e,rbr),e(PT,tbr),e(PT,Bz),e(Bz,abr),e(PT,nbr),e(Y,sbr),e(Y,$T),e($T,I4e),e(I4e,lbr),e($T,ibr),e($T,Pz),e(Pz,dbr),e($T,cbr),e(Y,fbr),e(Y,IT),e(IT,q4e),e(q4e,mbr),e(IT,gbr),e(IT,$z),e($z,hbr),e(IT,pbr),e(Y,_br),e(Y,qT),e(qT,N4e),e(N4e,ubr),e(qT,bbr),e(qT,Iz),e(Iz,Fbr),e(qT,vbr),e(Y,Tbr),e(Y,NT),e(NT,j4e),e(j4e,Mbr),e(NT,Ebr),e(NT,qz),e(qz,Cbr),e(NT,wbr),e(Eo,Abr),e(Eo,D4e),e(D4e,ybr),e(Eo,Lbr),g(cy,Eo,null),b(c,aBe,u),b(c,Vc,u),e(Vc,jT),e(jT,G4e),g(fy,G4e,null),e(Vc,xbr),e(Vc,O4e),e(O4e,kbr),b(c,nBe,u),b(c,xr,u),g(my,xr,null),e(xr,Sbr),e(xr,Xc),e(Xc,Rbr),e(Xc,Nz),e(Nz,Bbr),e(Xc,Pbr),e(Xc,jz),e(jz,$br),e(Xc,Ibr),e(xr,qbr),e(xr,gy),e(gy,Nbr),e(gy,V4e),e(V4e,jbr),e(gy,Dbr),e(xr,Gbr),e(xr,Et),g(hy,Et,null),e(Et,Obr),e(Et,X4e),e(X4e,Vbr),e(Et,Xbr),e(Et,zc),e(zc,zbr),e(zc,z4e),e(z4e,Qbr),e(zc,Wbr),e(zc,Dz),e(Dz,Hbr),e(zc,Ubr),e(Et,Jbr),e(Et,Q4e),e(Q4e,Ybr),e(Et,Kbr),g(py,Et,null),e(xr,Zbr),e(xr,Co),g(_y,Co,null),e(Co,e3r),e(Co,W4e),e(W4e,o3r),e(Co,r3r),e(Co,An),e(An,t3r),e(An,H4e),e(H4e,a3r),e(An,n3r),e(An,U4e),e(U4e,s3r),e(An,l3r),e(An,J4e),e(J4e,i3r),e(An,d3r),e(Co,c3r),e(Co,K),e(K,DT),e(DT,Y4e),e(Y4e,f3r),e(DT,m3r),e(DT,Gz),e(Gz,g3r),e(DT,h3r),e(K,p3r),e(K,GT),e(GT,K4e),e(K4e,_3r),e(GT,u3r),e(GT,Oz),e(Oz,b3r),e(GT,F3r),e(K,v3r),e(K,OT),e(OT,Z4e),e(Z4e,T3r),e(OT,M3r),e(OT,Vz),e(Vz,E3r),e(OT,C3r),e(K,w3r),e(K,VT),e(VT,ebe),e(ebe,A3r),e(VT,y3r),e(VT,Xz),e(Xz,L3r),e(VT,x3r),e(K,k3r),e(K,XT),e(XT,obe),e(obe,S3r),e(XT,R3r),e(XT,zz),e(zz,B3r),e(XT,P3r),e(K,$3r),e(K,zT),e(zT,rbe),e(rbe,I3r),e(zT,q3r),e(zT,Qz),e(Qz,N3r),e(zT,j3r),e(K,D3r),e(K,QT),e(QT,tbe),e(tbe,G3r),e(QT,O3r),e(QT,Wz),e(Wz,V3r),e(QT,X3r),e(K,z3r),e(K,WT),e(WT,abe),e(abe,Q3r),e(WT,W3r),e(WT,Hz),e(Hz,H3r),e(WT,U3r),e(K,J3r),e(K,HT),e(HT,nbe),e(nbe,Y3r),e(HT,K3r),e(HT,Uz),e(Uz,Z3r),e(HT,e2r),e(K,o2r),e(K,UT),e(UT,sbe),e(sbe,r2r),e(UT,t2r),e(UT,Jz),e(Jz,a2r),e(UT,n2r),e(K,s2r),e(K,JT),e(JT,lbe),e(lbe,l2r),e(JT,i2r),e(JT,Yz),e(Yz,d2r),e(JT,c2r),e(K,f2r),e(K,YT),e(YT,ibe),e(ibe,m2r),e(YT,g2r),e(YT,Kz),e(Kz,h2r),e(YT,p2r),e(K,_2r),e(K,KT),e(KT,dbe),e(dbe,u2r),e(KT,b2r),e(KT,Zz),e(Zz,F2r),e(KT,v2r),e(K,T2r),e(K,ZT),e(ZT,cbe),e(cbe,M2r),e(ZT,E2r),e(ZT,eQ),e(eQ,C2r),e(ZT,w2r),e(K,A2r),e(K,e7),e(e7,fbe),e(fbe,y2r),e(e7,L2r),e(e7,oQ),e(oQ,x2r),e(e7,k2r),e(K,S2r),e(K,o7),e(o7,mbe),e(mbe,R2r),e(o7,B2r),e(o7,rQ),e(rQ,P2r),e(o7,$2r),e(K,I2r),e(K,r7),e(r7,gbe),e(gbe,q2r),e(r7,N2r),e(r7,tQ),e(tQ,j2r),e(r7,D2r),e(K,G2r),e(K,t7),e(t7,hbe),e(hbe,O2r),e(t7,V2r),e(t7,aQ),e(aQ,X2r),e(t7,z2r),e(K,Q2r),e(K,a7),e(a7,pbe),e(pbe,W2r),e(a7,H2r),e(a7,nQ),e(nQ,U2r),e(a7,J2r),e(K,Y2r),e(K,n7),e(n7,_be),e(_be,K2r),e(n7,Z2r),e(n7,sQ),e(sQ,eFr),e(n7,oFr),e(Co,rFr),e(Co,ube),e(ube,tFr),e(Co,aFr),g(uy,Co,null),b(c,sBe,u),b(c,Qc,u),e(Qc,s7),e(s7,bbe),g(by,bbe,null),e(Qc,nFr),e(Qc,Fbe),e(Fbe,sFr),b(c,lBe,u),b(c,kr,u),g(Fy,kr,null),e(kr,lFr),e(kr,Wc),e(Wc,iFr),e(Wc,lQ),e(lQ,dFr),e(Wc,cFr),e(Wc,iQ),e(iQ,fFr),e(Wc,mFr),e(kr,gFr),e(kr,vy),e(vy,hFr),e(vy,vbe),e(vbe,pFr),e(vy,_Fr),e(kr,uFr),e(kr,Ct),g(Ty,Ct,null),e(Ct,bFr),e(Ct,Tbe),e(Tbe,FFr),e(Ct,vFr),e(Ct,Hc),e(Hc,TFr),e(Hc,Mbe),e(Mbe,MFr),e(Hc,EFr),e(Hc,dQ),e(dQ,CFr),e(Hc,wFr),e(Ct,AFr),e(Ct,Ebe),e(Ebe,yFr),e(Ct,LFr),g(My,Ct,null),e(kr,xFr),e(kr,wo),g(Ey,wo,null),e(wo,kFr),e(wo,Cbe),e(Cbe,SFr),e(wo,RFr),e(wo,yn),e(yn,BFr),e(yn,wbe),e(wbe,PFr),e(yn,$Fr),e(yn,Abe),e(Abe,IFr),e(yn,qFr),e(yn,ybe),e(ybe,NFr),e(yn,jFr),e(wo,DFr),e(wo,Lbe),e(Lbe,l7),e(l7,xbe),e(xbe,GFr),e(l7,OFr),e(l7,cQ),e(cQ,VFr),e(l7,XFr),e(wo,zFr),e(wo,kbe),e(kbe,QFr),e(wo,WFr),g(Cy,wo,null),b(c,iBe,u),b(c,Uc,u),e(Uc,i7),e(i7,Sbe),g(wy,Sbe,null),e(Uc,HFr),e(Uc,Rbe),e(Rbe,UFr),b(c,dBe,u),b(c,Sr,u),g(Ay,Sr,null),e(Sr,JFr),e(Sr,Jc),e(Jc,YFr),e(Jc,fQ),e(fQ,KFr),e(Jc,ZFr),e(Jc,mQ),e(mQ,evr),e(Jc,ovr),e(Sr,rvr),e(Sr,yy),e(yy,tvr),e(yy,Bbe),e(Bbe,avr),e(yy,nvr),e(Sr,svr),e(Sr,wt),g(Ly,wt,null),e(wt,lvr),e(wt,Pbe),e(Pbe,ivr),e(wt,dvr),e(wt,Yc),e(Yc,cvr),e(Yc,$be),e($be,fvr),e(Yc,mvr),e(Yc,gQ),e(gQ,gvr),e(Yc,hvr),e(wt,pvr),e(wt,Ibe),e(Ibe,_vr),e(wt,uvr),g(xy,wt,null),e(Sr,bvr),e(Sr,Ao),g(ky,Ao,null),e(Ao,Fvr),e(Ao,qbe),e(qbe,vvr),e(Ao,Tvr),e(Ao,Ln),e(Ln,Mvr),e(Ln,Nbe),e(Nbe,Evr),e(Ln,Cvr),e(Ln,jbe),e(jbe,wvr),e(Ln,Avr),e(Ln,Dbe),e(Dbe,yvr),e(Ln,Lvr),e(Ao,xvr),e(Ao,Gbe),e(Gbe,d7),e(d7,Obe),e(Obe,kvr),e(d7,Svr),e(d7,hQ),e(hQ,Rvr),e(d7,Bvr),e(Ao,Pvr),e(Ao,Vbe),e(Vbe,$vr),e(Ao,Ivr),g(Sy,Ao,null),b(c,cBe,u),b(c,Kc,u),e(Kc,c7),e(c7,Xbe),g(Ry,Xbe,null),e(Kc,qvr),e(Kc,zbe),e(zbe,Nvr),b(c,fBe,u),b(c,Rr,u),g(By,Rr,null),e(Rr,jvr),e(Rr,Zc),e(Zc,Dvr),e(Zc,pQ),e(pQ,Gvr),e(Zc,Ovr),e(Zc,_Q),e(_Q,Vvr),e(Zc,Xvr),e(Rr,zvr),e(Rr,Py),e(Py,Qvr),e(Py,Qbe),e(Qbe,Wvr),e(Py,Hvr),e(Rr,Uvr),e(Rr,At),g($y,At,null),e(At,Jvr),e(At,Wbe),e(Wbe,Yvr),e(At,Kvr),e(At,ef),e(ef,Zvr),e(ef,Hbe),e(Hbe,e6r),e(ef,o6r),e(ef,uQ),e(uQ,r6r),e(ef,t6r),e(At,a6r),e(At,Ube),e(Ube,n6r),e(At,s6r),g(Iy,At,null),e(Rr,l6r),e(Rr,yo),g(qy,yo,null),e(yo,i6r),e(yo,Jbe),e(Jbe,d6r),e(yo,c6r),e(yo,xn),e(xn,f6r),e(xn,Ybe),e(Ybe,m6r),e(xn,g6r),e(xn,Kbe),e(Kbe,h6r),e(xn,p6r),e(xn,Zbe),e(Zbe,_6r),e(xn,u6r),e(yo,b6r),e(yo,z),e(z,f7),e(f7,e3e),e(e3e,F6r),e(f7,v6r),e(f7,bQ),e(bQ,T6r),e(f7,M6r),e(z,E6r),e(z,m7),e(m7,o3e),e(o3e,C6r),e(m7,w6r),e(m7,FQ),e(FQ,A6r),e(m7,y6r),e(z,L6r),e(z,g7),e(g7,r3e),e(r3e,x6r),e(g7,k6r),e(g7,vQ),e(vQ,S6r),e(g7,R6r),e(z,B6r),e(z,h7),e(h7,t3e),e(t3e,P6r),e(h7,$6r),e(h7,TQ),e(TQ,I6r),e(h7,q6r),e(z,N6r),e(z,p7),e(p7,a3e),e(a3e,j6r),e(p7,D6r),e(p7,MQ),e(MQ,G6r),e(p7,O6r),e(z,V6r),e(z,_7),e(_7,n3e),e(n3e,X6r),e(_7,z6r),e(_7,EQ),e(EQ,Q6r),e(_7,W6r),e(z,H6r),e(z,u7),e(u7,s3e),e(s3e,U6r),e(u7,J6r),e(u7,CQ),e(CQ,Y6r),e(u7,K6r),e(z,Z6r),e(z,b7),e(b7,l3e),e(l3e,eTr),e(b7,oTr),e(b7,wQ),e(wQ,rTr),e(b7,tTr),e(z,aTr),e(z,F7),e(F7,i3e),e(i3e,nTr),e(F7,sTr),e(F7,AQ),e(AQ,lTr),e(F7,iTr),e(z,dTr),e(z,v7),e(v7,d3e),e(d3e,cTr),e(v7,fTr),e(v7,yQ),e(yQ,mTr),e(v7,gTr),e(z,hTr),e(z,T7),e(T7,c3e),e(c3e,pTr),e(T7,_Tr),e(T7,LQ),e(LQ,uTr),e(T7,bTr),e(z,FTr),e(z,M7),e(M7,f3e),e(f3e,vTr),e(M7,TTr),e(M7,xQ),e(xQ,MTr),e(M7,ETr),e(z,CTr),e(z,E7),e(E7,m3e),e(m3e,wTr),e(E7,ATr),e(E7,kQ),e(kQ,yTr),e(E7,LTr),e(z,xTr),e(z,C7),e(C7,g3e),e(g3e,kTr),e(C7,STr),e(C7,SQ),e(SQ,RTr),e(C7,BTr),e(z,PTr),e(z,w7),e(w7,h3e),e(h3e,$Tr),e(w7,ITr),e(w7,RQ),e(RQ,qTr),e(w7,NTr),e(z,jTr),e(z,A7),e(A7,p3e),e(p3e,DTr),e(A7,GTr),e(A7,BQ),e(BQ,OTr),e(A7,VTr),e(z,XTr),e(z,y7),e(y7,_3e),e(_3e,zTr),e(y7,QTr),e(y7,PQ),e(PQ,WTr),e(y7,HTr),e(z,UTr),e(z,L7),e(L7,u3e),e(u3e,JTr),e(L7,YTr),e(L7,$Q),e($Q,KTr),e(L7,ZTr),e(z,e7r),e(z,x7),e(x7,b3e),e(b3e,o7r),e(x7,r7r),e(x7,IQ),e(IQ,t7r),e(x7,a7r),e(z,n7r),e(z,k7),e(k7,F3e),e(F3e,s7r),e(k7,l7r),e(k7,qQ),e(qQ,i7r),e(k7,d7r),e(z,c7r),e(z,S7),e(S7,v3e),e(v3e,f7r),e(S7,m7r),e(S7,NQ),e(NQ,g7r),e(S7,h7r),e(z,p7r),e(z,R7),e(R7,T3e),e(T3e,_7r),e(R7,u7r),e(R7,jQ),e(jQ,b7r),e(R7,F7r),e(z,v7r),e(z,B7),e(B7,M3e),e(M3e,T7r),e(B7,M7r),e(B7,DQ),e(DQ,E7r),e(B7,C7r),e(z,w7r),e(z,P7),e(P7,E3e),e(E3e,A7r),e(P7,y7r),e(P7,GQ),e(GQ,L7r),e(P7,x7r),e(z,k7r),e(z,$7),e($7,C3e),e(C3e,S7r),e($7,R7r),e($7,OQ),e(OQ,B7r),e($7,P7r),e(yo,$7r),e(yo,w3e),e(w3e,I7r),e(yo,q7r),g(Ny,yo,null),b(c,mBe,u),b(c,of,u),e(of,I7),e(I7,A3e),g(jy,A3e,null),e(of,N7r),e(of,y3e),e(y3e,j7r),b(c,gBe,u),b(c,Br,u),g(Dy,Br,null),e(Br,D7r),e(Br,rf),e(rf,G7r),e(rf,VQ),e(VQ,O7r),e(rf,V7r),e(rf,XQ),e(XQ,X7r),e(rf,z7r),e(Br,Q7r),e(Br,Gy),e(Gy,W7r),e(Gy,L3e),e(L3e,H7r),e(Gy,U7r),e(Br,J7r),e(Br,yt),g(Oy,yt,null),e(yt,Y7r),e(yt,x3e),e(x3e,K7r),e(yt,Z7r),e(yt,tf),e(tf,eMr),e(tf,k3e),e(k3e,oMr),e(tf,rMr),e(tf,zQ),e(zQ,tMr),e(tf,aMr),e(yt,nMr),e(yt,S3e),e(S3e,sMr),e(yt,lMr),g(Vy,yt,null),e(Br,iMr),e(Br,Lo),g(Xy,Lo,null),e(Lo,dMr),e(Lo,R3e),e(R3e,cMr),e(Lo,fMr),e(Lo,kn),e(kn,mMr),e(kn,B3e),e(B3e,gMr),e(kn,hMr),e(kn,P3e),e(P3e,pMr),e(kn,_Mr),e(kn,$3e),e($3e,uMr),e(kn,bMr),e(Lo,FMr),e(Lo,ca),e(ca,q7),e(q7,I3e),e(I3e,vMr),e(q7,TMr),e(q7,QQ),e(QQ,MMr),e(q7,EMr),e(ca,CMr),e(ca,N7),e(N7,q3e),e(q3e,wMr),e(N7,AMr),e(N7,WQ),e(WQ,yMr),e(N7,LMr),e(ca,xMr),e(ca,j7),e(j7,N3e),e(N3e,kMr),e(j7,SMr),e(j7,HQ),e(HQ,RMr),e(j7,BMr),e(ca,PMr),e(ca,D7),e(D7,j3e),e(j3e,$Mr),e(D7,IMr),e(D7,UQ),e(UQ,qMr),e(D7,NMr),e(ca,jMr),e(ca,G7),e(G7,D3e),e(D3e,DMr),e(G7,GMr),e(G7,JQ),e(JQ,OMr),e(G7,VMr),e(Lo,XMr),e(Lo,G3e),e(G3e,zMr),e(Lo,QMr),g(zy,Lo,null),b(c,hBe,u),b(c,af,u),e(af,O7),e(O7,O3e),g(Qy,O3e,null),e(af,WMr),e(af,V3e),e(V3e,HMr),b(c,pBe,u),b(c,Pr,u),g(Wy,Pr,null),e(Pr,UMr),e(Pr,nf),e(nf,JMr),e(nf,YQ),e(YQ,YMr),e(nf,KMr),e(nf,KQ),e(KQ,ZMr),e(nf,eEr),e(Pr,oEr),e(Pr,Hy),e(Hy,rEr),e(Hy,X3e),e(X3e,tEr),e(Hy,aEr),e(Pr,nEr),e(Pr,Lt),g(Uy,Lt,null),e(Lt,sEr),e(Lt,z3e),e(z3e,lEr),e(Lt,iEr),e(Lt,sf),e(sf,dEr),e(sf,Q3e),e(Q3e,cEr),e(sf,fEr),e(sf,ZQ),e(ZQ,mEr),e(sf,gEr),e(Lt,hEr),e(Lt,W3e),e(W3e,pEr),e(Lt,_Er),g(Jy,Lt,null),e(Pr,uEr),e(Pr,xo),g(Yy,xo,null),e(xo,bEr),e(xo,H3e),e(H3e,FEr),e(xo,vEr),e(xo,Sn),e(Sn,TEr),e(Sn,U3e),e(U3e,MEr),e(Sn,EEr),e(Sn,J3e),e(J3e,CEr),e(Sn,wEr),e(Sn,Y3e),e(Y3e,AEr),e(Sn,yEr),e(xo,LEr),e(xo,fe),e(fe,V7),e(V7,K3e),e(K3e,xEr),e(V7,kEr),e(V7,eW),e(eW,SEr),e(V7,REr),e(fe,BEr),e(fe,X7),e(X7,Z3e),e(Z3e,PEr),e(X7,$Er),e(X7,oW),e(oW,IEr),e(X7,qEr),e(fe,NEr),e(fe,z7),e(z7,e2e),e(e2e,jEr),e(z7,DEr),e(z7,rW),e(rW,GEr),e(z7,OEr),e(fe,VEr),e(fe,Q7),e(Q7,o2e),e(o2e,XEr),e(Q7,zEr),e(Q7,tW),e(tW,QEr),e(Q7,WEr),e(fe,HEr),e(fe,W7),e(W7,r2e),e(r2e,UEr),e(W7,JEr),e(W7,aW),e(aW,YEr),e(W7,KEr),e(fe,ZEr),e(fe,H7),e(H7,t2e),e(t2e,eCr),e(H7,oCr),e(H7,nW),e(nW,rCr),e(H7,tCr),e(fe,aCr),e(fe,U7),e(U7,a2e),e(a2e,nCr),e(U7,sCr),e(U7,sW),e(sW,lCr),e(U7,iCr),e(fe,dCr),e(fe,J7),e(J7,n2e),e(n2e,cCr),e(J7,fCr),e(J7,lW),e(lW,mCr),e(J7,gCr),e(fe,hCr),e(fe,Y7),e(Y7,s2e),e(s2e,pCr),e(Y7,_Cr),e(Y7,iW),e(iW,uCr),e(Y7,bCr),e(fe,FCr),e(fe,K7),e(K7,l2e),e(l2e,vCr),e(K7,TCr),e(K7,dW),e(dW,MCr),e(K7,ECr),e(fe,CCr),e(fe,Z7),e(Z7,i2e),e(i2e,wCr),e(Z7,ACr),e(Z7,cW),e(cW,yCr),e(Z7,LCr),e(fe,xCr),e(fe,eM),e(eM,d2e),e(d2e,kCr),e(eM,SCr),e(eM,fW),e(fW,RCr),e(eM,BCr),e(xo,PCr),e(xo,c2e),e(c2e,$Cr),e(xo,ICr),g(Ky,xo,null),b(c,_Be,u),b(c,lf,u),e(lf,oM),e(oM,f2e),g(Zy,f2e,null),e(lf,qCr),e(lf,m2e),e(m2e,NCr),b(c,uBe,u),b(c,$r,u),g(eL,$r,null),e($r,jCr),e($r,df),e(df,DCr),e(df,mW),e(mW,GCr),e(df,OCr),e(df,gW),e(gW,VCr),e(df,XCr),e($r,zCr),e($r,oL),e(oL,QCr),e(oL,g2e),e(g2e,WCr),e(oL,HCr),e($r,UCr),e($r,xt),g(rL,xt,null),e(xt,JCr),e(xt,h2e),e(h2e,YCr),e(xt,KCr),e(xt,cf),e(cf,ZCr),e(cf,p2e),e(p2e,e5r),e(cf,o5r),e(cf,hW),e(hW,r5r),e(cf,t5r),e(xt,a5r),e(xt,_2e),e(_2e,n5r),e(xt,s5r),g(tL,xt,null),e($r,l5r),e($r,ko),g(aL,ko,null),e(ko,i5r),e(ko,u2e),e(u2e,d5r),e(ko,c5r),e(ko,Rn),e(Rn,f5r),e(Rn,b2e),e(b2e,m5r),e(Rn,g5r),e(Rn,F2e),e(F2e,h5r),e(Rn,p5r),e(Rn,v2e),e(v2e,_5r),e(Rn,u5r),e(ko,b5r),e(ko,be),e(be,rM),e(rM,T2e),e(T2e,F5r),e(rM,v5r),e(rM,pW),e(pW,T5r),e(rM,M5r),e(be,E5r),e(be,tM),e(tM,M2e),e(M2e,C5r),e(tM,w5r),e(tM,_W),e(_W,A5r),e(tM,y5r),e(be,L5r),e(be,aM),e(aM,E2e),e(E2e,x5r),e(aM,k5r),e(aM,uW),e(uW,S5r),e(aM,R5r),e(be,B5r),e(be,nM),e(nM,C2e),e(C2e,P5r),e(nM,$5r),e(nM,bW),e(bW,I5r),e(nM,q5r),e(be,N5r),e(be,sM),e(sM,w2e),e(w2e,j5r),e(sM,D5r),e(sM,FW),e(FW,G5r),e(sM,O5r),e(be,V5r),e(be,lM),e(lM,A2e),e(A2e,X5r),e(lM,z5r),e(lM,vW),e(vW,Q5r),e(lM,W5r),e(be,H5r),e(be,iM),e(iM,y2e),e(y2e,U5r),e(iM,J5r),e(iM,TW),e(TW,Y5r),e(iM,K5r),e(be,Z5r),e(be,dM),e(dM,L2e),e(L2e,ewr),e(dM,owr),e(dM,MW),e(MW,rwr),e(dM,twr),e(be,awr),e(be,cM),e(cM,x2e),e(x2e,nwr),e(cM,swr),e(cM,EW),e(EW,lwr),e(cM,iwr),e(be,dwr),e(be,fM),e(fM,k2e),e(k2e,cwr),e(fM,fwr),e(fM,CW),e(CW,mwr),e(fM,gwr),e(ko,hwr),e(ko,S2e),e(S2e,pwr),e(ko,_wr),g(nL,ko,null),b(c,bBe,u),b(c,ff,u),e(ff,mM),e(mM,R2e),g(sL,R2e,null),e(ff,uwr),e(ff,B2e),e(B2e,bwr),b(c,FBe,u),b(c,Ir,u),g(lL,Ir,null),e(Ir,Fwr),e(Ir,mf),e(mf,vwr),e(mf,wW),e(wW,Twr),e(mf,Mwr),e(mf,AW),e(AW,Ewr),e(mf,Cwr),e(Ir,wwr),e(Ir,iL),e(iL,Awr),e(iL,P2e),e(P2e,ywr),e(iL,Lwr),e(Ir,xwr),e(Ir,kt),g(dL,kt,null),e(kt,kwr),e(kt,$2e),e($2e,Swr),e(kt,Rwr),e(kt,gf),e(gf,Bwr),e(gf,I2e),e(I2e,Pwr),e(gf,$wr),e(gf,yW),e(yW,Iwr),e(gf,qwr),e(kt,Nwr),e(kt,q2e),e(q2e,jwr),e(kt,Dwr),g(cL,kt,null),e(Ir,Gwr),e(Ir,So),g(fL,So,null),e(So,Owr),e(So,N2e),e(N2e,Vwr),e(So,Xwr),e(So,Bn),e(Bn,zwr),e(Bn,j2e),e(j2e,Qwr),e(Bn,Wwr),e(Bn,D2e),e(D2e,Hwr),e(Bn,Uwr),e(Bn,G2e),e(G2e,Jwr),e(Bn,Ywr),e(So,Kwr),e(So,Ee),e(Ee,gM),e(gM,O2e),e(O2e,Zwr),e(gM,eAr),e(gM,LW),e(LW,oAr),e(gM,rAr),e(Ee,tAr),e(Ee,hM),e(hM,V2e),e(V2e,aAr),e(hM,nAr),e(hM,xW),e(xW,sAr),e(hM,lAr),e(Ee,iAr),e(Ee,pM),e(pM,X2e),e(X2e,dAr),e(pM,cAr),e(pM,kW),e(kW,fAr),e(pM,mAr),e(Ee,gAr),e(Ee,_M),e(_M,z2e),e(z2e,hAr),e(_M,pAr),e(_M,SW),e(SW,_Ar),e(_M,uAr),e(Ee,bAr),e(Ee,uM),e(uM,Q2e),e(Q2e,FAr),e(uM,vAr),e(uM,RW),e(RW,TAr),e(uM,MAr),e(Ee,EAr),e(Ee,bM),e(bM,W2e),e(W2e,CAr),e(bM,wAr),e(bM,BW),e(BW,AAr),e(bM,yAr),e(Ee,LAr),e(Ee,FM),e(FM,H2e),e(H2e,xAr),e(FM,kAr),e(FM,PW),e(PW,SAr),e(FM,RAr),e(Ee,BAr),e(Ee,vM),e(vM,U2e),e(U2e,PAr),e(vM,$Ar),e(vM,$W),e($W,IAr),e(vM,qAr),e(Ee,NAr),e(Ee,TM),e(TM,J2e),e(J2e,jAr),e(TM,DAr),e(TM,IW),e(IW,GAr),e(TM,OAr),e(So,VAr),e(So,Y2e),e(Y2e,XAr),e(So,zAr),g(mL,So,null),b(c,vBe,u),b(c,hf,u),e(hf,MM),e(MM,K2e),g(gL,K2e,null),e(hf,QAr),e(hf,Z2e),e(Z2e,WAr),b(c,TBe,u),b(c,qr,u),g(hL,qr,null),e(qr,HAr),e(qr,pf),e(pf,UAr),e(pf,qW),e(qW,JAr),e(pf,YAr),e(pf,NW),e(NW,KAr),e(pf,ZAr),e(qr,e0r),e(qr,pL),e(pL,o0r),e(pL,eFe),e(eFe,r0r),e(pL,t0r),e(qr,a0r),e(qr,St),g(_L,St,null),e(St,n0r),e(St,oFe),e(oFe,s0r),e(St,l0r),e(St,_f),e(_f,i0r),e(_f,rFe),e(rFe,d0r),e(_f,c0r),e(_f,jW),e(jW,f0r),e(_f,m0r),e(St,g0r),e(St,tFe),e(tFe,h0r),e(St,p0r),g(uL,St,null),e(qr,_0r),e(qr,Ro),g(bL,Ro,null),e(Ro,u0r),e(Ro,aFe),e(aFe,b0r),e(Ro,F0r),e(Ro,Pn),e(Pn,v0r),e(Pn,nFe),e(nFe,T0r),e(Pn,M0r),e(Pn,sFe),e(sFe,E0r),e(Pn,C0r),e(Pn,lFe),e(lFe,w0r),e(Pn,A0r),e(Ro,y0r),e(Ro,Fe),e(Fe,EM),e(EM,iFe),e(iFe,L0r),e(EM,x0r),e(EM,DW),e(DW,k0r),e(EM,S0r),e(Fe,R0r),e(Fe,CM),e(CM,dFe),e(dFe,B0r),e(CM,P0r),e(CM,GW),e(GW,$0r),e(CM,I0r),e(Fe,q0r),e(Fe,wM),e(wM,cFe),e(cFe,N0r),e(wM,j0r),e(wM,OW),e(OW,D0r),e(wM,G0r),e(Fe,O0r),e(Fe,AM),e(AM,fFe),e(fFe,V0r),e(AM,X0r),e(AM,VW),e(VW,z0r),e(AM,Q0r),e(Fe,W0r),e(Fe,yM),e(yM,mFe),e(mFe,H0r),e(yM,U0r),e(yM,XW),e(XW,J0r),e(yM,Y0r),e(Fe,K0r),e(Fe,LM),e(LM,gFe),e(gFe,Z0r),e(LM,eyr),e(LM,zW),e(zW,oyr),e(LM,ryr),e(Fe,tyr),e(Fe,xM),e(xM,hFe),e(hFe,ayr),e(xM,nyr),e(xM,QW),e(QW,syr),e(xM,lyr),e(Fe,iyr),e(Fe,kM),e(kM,pFe),e(pFe,dyr),e(kM,cyr),e(kM,WW),e(WW,fyr),e(kM,myr),e(Fe,gyr),e(Fe,SM),e(SM,_Fe),e(_Fe,hyr),e(SM,pyr),e(SM,HW),e(HW,_yr),e(SM,uyr),e(Fe,byr),e(Fe,RM),e(RM,uFe),e(uFe,Fyr),e(RM,vyr),e(RM,UW),e(UW,Tyr),e(RM,Myr),e(Ro,Eyr),e(Ro,bFe),e(bFe,Cyr),e(Ro,wyr),g(FL,Ro,null),b(c,MBe,u),b(c,uf,u),e(uf,BM),e(BM,FFe),g(vL,FFe,null),e(uf,Ayr),e(uf,vFe),e(vFe,yyr),b(c,EBe,u),b(c,Nr,u),g(TL,Nr,null),e(Nr,Lyr),e(Nr,bf),e(bf,xyr),e(bf,JW),e(JW,kyr),e(bf,Syr),e(bf,YW),e(YW,Ryr),e(bf,Byr),e(Nr,Pyr),e(Nr,ML),e(ML,$yr),e(ML,TFe),e(TFe,Iyr),e(ML,qyr),e(Nr,Nyr),e(Nr,Rt),g(EL,Rt,null),e(Rt,jyr),e(Rt,MFe),e(MFe,Dyr),e(Rt,Gyr),e(Rt,Ff),e(Ff,Oyr),e(Ff,EFe),e(EFe,Vyr),e(Ff,Xyr),e(Ff,KW),e(KW,zyr),e(Ff,Qyr),e(Rt,Wyr),e(Rt,CFe),e(CFe,Hyr),e(Rt,Uyr),g(CL,Rt,null),e(Nr,Jyr),e(Nr,Bo),g(wL,Bo,null),e(Bo,Yyr),e(Bo,wFe),e(wFe,Kyr),e(Bo,Zyr),e(Bo,$n),e($n,eLr),e($n,AFe),e(AFe,oLr),e($n,rLr),e($n,yFe),e(yFe,tLr),e($n,aLr),e($n,LFe),e(LFe,nLr),e($n,sLr),e(Bo,lLr),e(Bo,ve),e(ve,PM),e(PM,xFe),e(xFe,iLr),e(PM,dLr),e(PM,ZW),e(ZW,cLr),e(PM,fLr),e(ve,mLr),e(ve,$M),e($M,kFe),e(kFe,gLr),e($M,hLr),e($M,eH),e(eH,pLr),e($M,_Lr),e(ve,uLr),e(ve,IM),e(IM,SFe),e(SFe,bLr),e(IM,FLr),e(IM,oH),e(oH,vLr),e(IM,TLr),e(ve,MLr),e(ve,qM),e(qM,RFe),e(RFe,ELr),e(qM,CLr),e(qM,rH),e(rH,wLr),e(qM,ALr),e(ve,yLr),e(ve,NM),e(NM,BFe),e(BFe,LLr),e(NM,xLr),e(NM,tH),e(tH,kLr),e(NM,SLr),e(ve,RLr),e(ve,jM),e(jM,PFe),e(PFe,BLr),e(jM,PLr),e(jM,aH),e(aH,$Lr),e(jM,ILr),e(ve,qLr),e(ve,DM),e(DM,$Fe),e($Fe,NLr),e(DM,jLr),e(DM,nH),e(nH,DLr),e(DM,GLr),e(ve,OLr),e(ve,GM),e(GM,IFe),e(IFe,VLr),e(GM,XLr),e(GM,sH),e(sH,zLr),e(GM,QLr),e(ve,WLr),e(ve,OM),e(OM,qFe),e(qFe,HLr),e(OM,ULr),e(OM,lH),e(lH,JLr),e(OM,YLr),e(ve,KLr),e(ve,VM),e(VM,NFe),e(NFe,ZLr),e(VM,e8r),e(VM,iH),e(iH,o8r),e(VM,r8r),e(Bo,t8r),e(Bo,jFe),e(jFe,a8r),e(Bo,n8r),g(AL,Bo,null),b(c,CBe,u),b(c,vf,u),e(vf,XM),e(XM,DFe),g(yL,DFe,null),e(vf,s8r),e(vf,GFe),e(GFe,l8r),b(c,wBe,u),b(c,jr,u),g(LL,jr,null),e(jr,i8r),e(jr,Tf),e(Tf,d8r),e(Tf,dH),e(dH,c8r),e(Tf,f8r),e(Tf,cH),e(cH,m8r),e(Tf,g8r),e(jr,h8r),e(jr,xL),e(xL,p8r),e(xL,OFe),e(OFe,_8r),e(xL,u8r),e(jr,b8r),e(jr,Bt),g(kL,Bt,null),e(Bt,F8r),e(Bt,VFe),e(VFe,v8r),e(Bt,T8r),e(Bt,Mf),e(Mf,M8r),e(Mf,XFe),e(XFe,E8r),e(Mf,C8r),e(Mf,fH),e(fH,w8r),e(Mf,A8r),e(Bt,y8r),e(Bt,zFe),e(zFe,L8r),e(Bt,x8r),g(SL,Bt,null),e(jr,k8r),e(jr,Po),g(RL,Po,null),e(Po,S8r),e(Po,QFe),e(QFe,R8r),e(Po,B8r),e(Po,In),e(In,P8r),e(In,WFe),e(WFe,$8r),e(In,I8r),e(In,HFe),e(HFe,q8r),e(In,N8r),e(In,UFe),e(UFe,j8r),e(In,D8r),e(Po,G8r),e(Po,Be),e(Be,zM),e(zM,JFe),e(JFe,O8r),e(zM,V8r),e(zM,mH),e(mH,X8r),e(zM,z8r),e(Be,Q8r),e(Be,QM),e(QM,YFe),e(YFe,W8r),e(QM,H8r),e(QM,gH),e(gH,U8r),e(QM,J8r),e(Be,Y8r),e(Be,WM),e(WM,KFe),e(KFe,K8r),e(WM,Z8r),e(WM,hH),e(hH,e9r),e(WM,o9r),e(Be,r9r),e(Be,HM),e(HM,ZFe),e(ZFe,t9r),e(HM,a9r),e(HM,pH),e(pH,n9r),e(HM,s9r),e(Be,l9r),e(Be,UM),e(UM,eve),e(eve,i9r),e(UM,d9r),e(UM,_H),e(_H,c9r),e(UM,f9r),e(Be,m9r),e(Be,JM),e(JM,ove),e(ove,g9r),e(JM,h9r),e(JM,uH),e(uH,p9r),e(JM,_9r),e(Be,u9r),e(Be,YM),e(YM,rve),e(rve,b9r),e(YM,F9r),e(YM,bH),e(bH,v9r),e(YM,T9r),e(Be,M9r),e(Be,KM),e(KM,tve),e(tve,E9r),e(KM,C9r),e(KM,FH),e(FH,w9r),e(KM,A9r),e(Po,y9r),e(Po,ave),e(ave,L9r),e(Po,x9r),g(BL,Po,null),b(c,ABe,u),b(c,Ef,u),e(Ef,ZM),e(ZM,nve),g(PL,nve,null),e(Ef,k9r),e(Ef,sve),e(sve,S9r),b(c,yBe,u),b(c,Dr,u),g($L,Dr,null),e(Dr,R9r),e(Dr,Cf),e(Cf,B9r),e(Cf,vH),e(vH,P9r),e(Cf,$9r),e(Cf,TH),e(TH,I9r),e(Cf,q9r),e(Dr,N9r),e(Dr,IL),e(IL,j9r),e(IL,lve),e(lve,D9r),e(IL,G9r),e(Dr,O9r),e(Dr,Pt),g(qL,Pt,null),e(Pt,V9r),e(Pt,ive),e(ive,X9r),e(Pt,z9r),e(Pt,wf),e(wf,Q9r),e(wf,dve),e(dve,W9r),e(wf,H9r),e(wf,MH),e(MH,U9r),e(wf,J9r),e(Pt,Y9r),e(Pt,cve),e(cve,K9r),e(Pt,Z9r),g(NL,Pt,null),e(Dr,exr),e(Dr,$o),g(jL,$o,null),e($o,oxr),e($o,fve),e(fve,rxr),e($o,txr),e($o,qn),e(qn,axr),e(qn,mve),e(mve,nxr),e(qn,sxr),e(qn,gve),e(gve,lxr),e(qn,ixr),e(qn,hve),e(hve,dxr),e(qn,cxr),e($o,fxr),e($o,Pe),e(Pe,eE),e(eE,pve),e(pve,mxr),e(eE,gxr),e(eE,EH),e(EH,hxr),e(eE,pxr),e(Pe,_xr),e(Pe,oE),e(oE,_ve),e(_ve,uxr),e(oE,bxr),e(oE,CH),e(CH,Fxr),e(oE,vxr),e(Pe,Txr),e(Pe,rE),e(rE,uve),e(uve,Mxr),e(rE,Exr),e(rE,wH),e(wH,Cxr),e(rE,wxr),e(Pe,Axr),e(Pe,tE),e(tE,bve),e(bve,yxr),e(tE,Lxr),e(tE,AH),e(AH,xxr),e(tE,kxr),e(Pe,Sxr),e(Pe,aE),e(aE,Fve),e(Fve,Rxr),e(aE,Bxr),e(aE,yH),e(yH,Pxr),e(aE,$xr),e(Pe,Ixr),e(Pe,nE),e(nE,vve),e(vve,qxr),e(nE,Nxr),e(nE,LH),e(LH,jxr),e(nE,Dxr),e(Pe,Gxr),e(Pe,sE),e(sE,Tve),e(Tve,Oxr),e(sE,Vxr),e(sE,xH),e(xH,Xxr),e(sE,zxr),e(Pe,Qxr),e(Pe,lE),e(lE,Mve),e(Mve,Wxr),e(lE,Hxr),e(lE,kH),e(kH,Uxr),e(lE,Jxr),e($o,Yxr),e($o,Eve),e(Eve,Kxr),e($o,Zxr),g(DL,$o,null),b(c,LBe,u),b(c,Af,u),e(Af,iE),e(iE,Cve),g(GL,Cve,null),e(Af,ekr),e(Af,wve),e(wve,okr),b(c,xBe,u),b(c,Gr,u),g(OL,Gr,null),e(Gr,rkr),e(Gr,yf),e(yf,tkr),e(yf,SH),e(SH,akr),e(yf,nkr),e(yf,RH),e(RH,skr),e(yf,lkr),e(Gr,ikr),e(Gr,VL),e(VL,dkr),e(VL,Ave),e(Ave,ckr),e(VL,fkr),e(Gr,mkr),e(Gr,$t),g(XL,$t,null),e($t,gkr),e($t,yve),e(yve,hkr),e($t,pkr),e($t,Lf),e(Lf,_kr),e(Lf,Lve),e(Lve,ukr),e(Lf,bkr),e(Lf,BH),e(BH,Fkr),e(Lf,vkr),e($t,Tkr),e($t,xve),e(xve,Mkr),e($t,Ekr),g(zL,$t,null),e(Gr,Ckr),e(Gr,Io),g(QL,Io,null),e(Io,wkr),e(Io,kve),e(kve,Akr),e(Io,ykr),e(Io,Nn),e(Nn,Lkr),e(Nn,Sve),e(Sve,xkr),e(Nn,kkr),e(Nn,Rve),e(Rve,Skr),e(Nn,Rkr),e(Nn,Bve),e(Bve,Bkr),e(Nn,Pkr),e(Io,$kr),e(Io,Pve),e(Pve,dE),e(dE,$ve),e($ve,Ikr),e(dE,qkr),e(dE,PH),e(PH,Nkr),e(dE,jkr),e(Io,Dkr),e(Io,Ive),e(Ive,Gkr),e(Io,Okr),g(WL,Io,null),b(c,kBe,u),b(c,xf,u),e(xf,cE),e(cE,qve),g(HL,qve,null),e(xf,Vkr),e(xf,Nve),e(Nve,Xkr),b(c,SBe,u),b(c,Or,u),g(UL,Or,null),e(Or,zkr),e(Or,kf),e(kf,Qkr),e(kf,$H),e($H,Wkr),e(kf,Hkr),e(kf,IH),e(IH,Ukr),e(kf,Jkr),e(Or,Ykr),e(Or,JL),e(JL,Kkr),e(JL,jve),e(jve,Zkr),e(JL,eSr),e(Or,oSr),e(Or,It),g(YL,It,null),e(It,rSr),e(It,Dve),e(Dve,tSr),e(It,aSr),e(It,Sf),e(Sf,nSr),e(Sf,Gve),e(Gve,sSr),e(Sf,lSr),e(Sf,qH),e(qH,iSr),e(Sf,dSr),e(It,cSr),e(It,Ove),e(Ove,fSr),e(It,mSr),g(KL,It,null),e(Or,gSr),e(Or,qo),g(ZL,qo,null),e(qo,hSr),e(qo,Vve),e(Vve,pSr),e(qo,_Sr),e(qo,jn),e(jn,uSr),e(jn,Xve),e(Xve,bSr),e(jn,FSr),e(jn,zve),e(zve,vSr),e(jn,TSr),e(jn,Qve),e(Qve,MSr),e(jn,ESr),e(qo,CSr),e(qo,e8),e(e8,fE),e(fE,Wve),e(Wve,wSr),e(fE,ASr),e(fE,NH),e(NH,ySr),e(fE,LSr),e(e8,xSr),e(e8,mE),e(mE,Hve),e(Hve,kSr),e(mE,SSr),e(mE,jH),e(jH,RSr),e(mE,BSr),e(qo,PSr),e(qo,Uve),e(Uve,$Sr),e(qo,ISr),g(o8,qo,null),b(c,RBe,u),b(c,Rf,u),e(Rf,gE),e(gE,Jve),g(r8,Jve,null),e(Rf,qSr),e(Rf,Yve),e(Yve,NSr),b(c,BBe,u),b(c,Vr,u),g(t8,Vr,null),e(Vr,jSr),e(Vr,Bf),e(Bf,DSr),e(Bf,DH),e(DH,GSr),e(Bf,OSr),e(Bf,GH),e(GH,VSr),e(Bf,XSr),e(Vr,zSr),e(Vr,a8),e(a8,QSr),e(a8,Kve),e(Kve,WSr),e(a8,HSr),e(Vr,USr),e(Vr,qt),g(n8,qt,null),e(qt,JSr),e(qt,Zve),e(Zve,YSr),e(qt,KSr),e(qt,Pf),e(Pf,ZSr),e(Pf,e6e),e(e6e,eRr),e(Pf,oRr),e(Pf,OH),e(OH,rRr),e(Pf,tRr),e(qt,aRr),e(qt,o6e),e(o6e,nRr),e(qt,sRr),g(s8,qt,null),e(Vr,lRr),e(Vr,No),g(l8,No,null),e(No,iRr),e(No,r6e),e(r6e,dRr),e(No,cRr),e(No,Dn),e(Dn,fRr),e(Dn,t6e),e(t6e,mRr),e(Dn,gRr),e(Dn,a6e),e(a6e,hRr),e(Dn,pRr),e(Dn,n6e),e(n6e,_Rr),e(Dn,uRr),e(No,bRr),e(No,s6e),e(s6e,hE),e(hE,l6e),e(l6e,FRr),e(hE,vRr),e(hE,VH),e(VH,TRr),e(hE,MRr),e(No,ERr),e(No,i6e),e(i6e,CRr),e(No,wRr),g(i8,No,null),PBe=!0},p(c,[u]){const d8={};u&2&&(d8.$$scope={dirty:u,ctx:c}),Of.$set(d8);const d6e={};u&2&&(d6e.$$scope={dirty:u,ctx:c}),Bh.$set(d6e);const c6e={};u&2&&(c6e.$$scope={dirty:u,ctx:c}),Xh.$set(c6e)},i(c){PBe||(h(me.$$.fragment,c),h(Da.$$.fragment,c),h(bC.$$.fragment,c),h(FC.$$.fragment,c),h(Of.$$.fragment,c),h(vC.$$.fragment,c),h(TC.$$.fragment,c),h(CC.$$.fragment,c),h(wC.$$.fragment,c),h(AC.$$.fragment,c),h(yC.$$.fragment,c),h(LC.$$.fragment,c),h(SC.$$.fragment,c),h(RC.$$.fragment,c),h(BC.$$.fragment,c),h(PC.$$.fragment,c),h($C.$$.fragment,c),h(NC.$$.fragment,c),h(Bh.$$.fragment,c),h(jC.$$.fragment,c),h(DC.$$.fragment,c),h(GC.$$.fragment,c),h(OC.$$.fragment,c),h(zC.$$.fragment,c),h(Xh.$$.fragment,c),h(QC.$$.fragment,c),h(WC.$$.fragment,c),h(HC.$$.fragment,c),h(UC.$$.fragment,c),h(YC.$$.fragment,c),h(KC.$$.fragment,c),h(ZC.$$.fragment,c),h(e5.$$.fragment,c),h(o5.$$.fragment,c),h(r5.$$.fragment,c),h(a5.$$.fragment,c),h(n5.$$.fragment,c),h(s5.$$.fragment,c),h(l5.$$.fragment,c),h(i5.$$.fragment,c),h(d5.$$.fragment,c),h(f5.$$.fragment,c),h(m5.$$.fragment,c),h(g5.$$.fragment,c),h(h5.$$.fragment,c),h(p5.$$.fragment,c),h(_5.$$.fragment,c),h(b5.$$.fragment,c),h(F5.$$.fragment,c),h(v5.$$.fragment,c),h(T5.$$.fragment,c),h(M5.$$.fragment,c),h(E5.$$.fragment,c),h(w5.$$.fragment,c),h(A5.$$.fragment,c),h(y5.$$.fragment,c),h(L5.$$.fragment,c),h(x5.$$.fragment,c),h(k5.$$.fragment,c),h(R5.$$.fragment,c),h(B5.$$.fragment,c),h(P5.$$.fragment,c),h($5.$$.fragment,c),h(I5.$$.fragment,c),h(q5.$$.fragment,c),h(j5.$$.fragment,c),h(D5.$$.fragment,c),h(G5.$$.fragment,c),h(O5.$$.fragment,c),h(V5.$$.fragment,c),h(X5.$$.fragment,c),h(Q5.$$.fragment,c),h(W5.$$.fragment,c),h(H5.$$.fragment,c),h(U5.$$.fragment,c),h(J5.$$.fragment,c),h(Y5.$$.fragment,c),h(Z5.$$.fragment,c),h(ew.$$.fragment,c),h(ow.$$.fragment,c),h(rw.$$.fragment,c),h(tw.$$.fragment,c),h(aw.$$.fragment,c),h(sw.$$.fragment,c),h(lw.$$.fragment,c),h(iw.$$.fragment,c),h(dw.$$.fragment,c),h(cw.$$.fragment,c),h(fw.$$.fragment,c),h(gw.$$.fragment,c),h(hw.$$.fragment,c),h(pw.$$.fragment,c),h(_w.$$.fragment,c),h(uw.$$.fragment,c),h(bw.$$.fragment,c),h(vw.$$.fragment,c),h(Tw.$$.fragment,c),h(Mw.$$.fragment,c),h(Ew.$$.fragment,c),h(Cw.$$.fragment,c),h(ww.$$.fragment,c),h(yw.$$.fragment,c),h(Lw.$$.fragment,c),h(xw.$$.fragment,c),h(kw.$$.fragment,c),h(Sw.$$.fragment,c),h(Rw.$$.fragment,c),h(Pw.$$.fragment,c),h($w.$$.fragment,c),h(Iw.$$.fragment,c),h(qw.$$.fragment,c),h(Nw.$$.fragment,c),h(jw.$$.fragment,c),h(Gw.$$.fragment,c),h(Ow.$$.fragment,c),h(Vw.$$.fragment,c),h(Xw.$$.fragment,c),h(zw.$$.fragment,c),h(Qw.$$.fragment,c),h(Hw.$$.fragment,c),h(Uw.$$.fragment,c),h(Jw.$$.fragment,c),h(Yw.$$.fragment,c),h(Kw.$$.fragment,c),h(Zw.$$.fragment,c),h(oA.$$.fragment,c),h(rA.$$.fragment,c),h(tA.$$.fragment,c),h(nA.$$.fragment,c),h(sA.$$.fragment,c),h(lA.$$.fragment,c),h(dA.$$.fragment,c),h(cA.$$.fragment,c),h(fA.$$.fragment,c),h(mA.$$.fragment,c),h(gA.$$.fragment,c),h(hA.$$.fragment,c),h(_A.$$.fragment,c),h(uA.$$.fragment,c),h(bA.$$.fragment,c),h(FA.$$.fragment,c),h(vA.$$.fragment,c),h(TA.$$.fragment,c),h(EA.$$.fragment,c),h(CA.$$.fragment,c),h(wA.$$.fragment,c),h(AA.$$.fragment,c),h(yA.$$.fragment,c),h(LA.$$.fragment,c),h(kA.$$.fragment,c),h(SA.$$.fragment,c),h(RA.$$.fragment,c),h(BA.$$.fragment,c),h(PA.$$.fragment,c),h($A.$$.fragment,c),h(qA.$$.fragment,c),h(NA.$$.fragment,c),h(jA.$$.fragment,c),h(DA.$$.fragment,c),h(GA.$$.fragment,c),h(OA.$$.fragment,c),h(XA.$$.fragment,c),h(zA.$$.fragment,c),h(QA.$$.fragment,c),h(WA.$$.fragment,c),h(HA.$$.fragment,c),h(UA.$$.fragment,c),h(YA.$$.fragment,c),h(KA.$$.fragment,c),h(ZA.$$.fragment,c),h(e0.$$.fragment,c),h(o0.$$.fragment,c),h(r0.$$.fragment,c),h(a0.$$.fragment,c),h(n0.$$.fragment,c),h(s0.$$.fragment,c),h(l0.$$.fragment,c),h(i0.$$.fragment,c),h(d0.$$.fragment,c),h(f0.$$.fragment,c),h(m0.$$.fragment,c),h(g0.$$.fragment,c),h(h0.$$.fragment,c),h(p0.$$.fragment,c),h(_0.$$.fragment,c),h(b0.$$.fragment,c),h(F0.$$.fragment,c),h(v0.$$.fragment,c),h(M0.$$.fragment,c),h(E0.$$.fragment,c),h(C0.$$.fragment,c),h(A0.$$.fragment,c),h(y0.$$.fragment,c),h(L0.$$.fragment,c),h(x0.$$.fragment,c),h(k0.$$.fragment,c),h(S0.$$.fragment,c),h(B0.$$.fragment,c),h(P0.$$.fragment,c),h($0.$$.fragment,c),h(I0.$$.fragment,c),h(q0.$$.fragment,c),h(N0.$$.fragment,c),h(D0.$$.fragment,c),h(G0.$$.fragment,c),h(O0.$$.fragment,c),h(V0.$$.fragment,c),h(X0.$$.fragment,c),h(z0.$$.fragment,c),h(W0.$$.fragment,c),h(H0.$$.fragment,c),h(U0.$$.fragment,c),h(J0.$$.fragment,c),h(Y0.$$.fragment,c),h(K0.$$.fragment,c),h(ey.$$.fragment,c),h(oy.$$.fragment,c),h(ry.$$.fragment,c),h(ty.$$.fragment,c),h(ay.$$.fragment,c),h(ny.$$.fragment,c),h(ly.$$.fragment,c),h(iy.$$.fragment,c),h(dy.$$.fragment,c),h(cy.$$.fragment,c),h(fy.$$.fragment,c),h(my.$$.fragment,c),h(hy.$$.fragment,c),h(py.$$.fragment,c),h(_y.$$.fragment,c),h(uy.$$.fragment,c),h(by.$$.fragment,c),h(Fy.$$.fragment,c),h(Ty.$$.fragment,c),h(My.$$.fragment,c),h(Ey.$$.fragment,c),h(Cy.$$.fragment,c),h(wy.$$.fragment,c),h(Ay.$$.fragment,c),h(Ly.$$.fragment,c),h(xy.$$.fragment,c),h(ky.$$.fragment,c),h(Sy.$$.fragment,c),h(Ry.$$.fragment,c),h(By.$$.fragment,c),h($y.$$.fragment,c),h(Iy.$$.fragment,c),h(qy.$$.fragment,c),h(Ny.$$.fragment,c),h(jy.$$.fragment,c),h(Dy.$$.fragment,c),h(Oy.$$.fragment,c),h(Vy.$$.fragment,c),h(Xy.$$.fragment,c),h(zy.$$.fragment,c),h(Qy.$$.fragment,c),h(Wy.$$.fragment,c),h(Uy.$$.fragment,c),h(Jy.$$.fragment,c),h(Yy.$$.fragment,c),h(Ky.$$.fragment,c),h(Zy.$$.fragment,c),h(eL.$$.fragment,c),h(rL.$$.fragment,c),h(tL.$$.fragment,c),h(aL.$$.fragment,c),h(nL.$$.fragment,c),h(sL.$$.fragment,c),h(lL.$$.fragment,c),h(dL.$$.fragment,c),h(cL.$$.fragment,c),h(fL.$$.fragment,c),h(mL.$$.fragment,c),h(gL.$$.fragment,c),h(hL.$$.fragment,c),h(_L.$$.fragment,c),h(uL.$$.fragment,c),h(bL.$$.fragment,c),h(FL.$$.fragment,c),h(vL.$$.fragment,c),h(TL.$$.fragment,c),h(EL.$$.fragment,c),h(CL.$$.fragment,c),h(wL.$$.fragment,c),h(AL.$$.fragment,c),h(yL.$$.fragment,c),h(LL.$$.fragment,c),h(kL.$$.fragment,c),h(SL.$$.fragment,c),h(RL.$$.fragment,c),h(BL.$$.fragment,c),h(PL.$$.fragment,c),h($L.$$.fragment,c),h(qL.$$.fragment,c),h(NL.$$.fragment,c),h(jL.$$.fragment,c),h(DL.$$.fragment,c),h(GL.$$.fragment,c),h(OL.$$.fragment,c),h(XL.$$.fragment,c),h(zL.$$.fragment,c),h(QL.$$.fragment,c),h(WL.$$.fragment,c),h(HL.$$.fragment,c),h(UL.$$.fragment,c),h(YL.$$.fragment,c),h(KL.$$.fragment,c),h(ZL.$$.fragment,c),h(o8.$$.fragment,c),h(r8.$$.fragment,c),h(t8.$$.fragment,c),h(n8.$$.fragment,c),h(s8.$$.fragment,c),h(l8.$$.fragment,c),h(i8.$$.fragment,c),PBe=!0)},o(c){p(me.$$.fragment,c),p(Da.$$.fragment,c),p(bC.$$.fragment,c),p(FC.$$.fragment,c),p(Of.$$.fragment,c),p(vC.$$.fragment,c),p(TC.$$.fragment,c),p(CC.$$.fragment,c),p(wC.$$.fragment,c),p(AC.$$.fragment,c),p(yC.$$.fragment,c),p(LC.$$.fragment,c),p(SC.$$.fragment,c),p(RC.$$.fragment,c),p(BC.$$.fragment,c),p(PC.$$.fragment,c),p($C.$$.fragment,c),p(NC.$$.fragment,c),p(Bh.$$.fragment,c),p(jC.$$.fragment,c),p(DC.$$.fragment,c),p(GC.$$.fragment,c),p(OC.$$.fragment,c),p(zC.$$.fragment,c),p(Xh.$$.fragment,c),p(QC.$$.fragment,c),p(WC.$$.fragment,c),p(HC.$$.fragment,c),p(UC.$$.fragment,c),p(YC.$$.fragment,c),p(KC.$$.fragment,c),p(ZC.$$.fragment,c),p(e5.$$.fragment,c),p(o5.$$.fragment,c),p(r5.$$.fragment,c),p(a5.$$.fragment,c),p(n5.$$.fragment,c),p(s5.$$.fragment,c),p(l5.$$.fragment,c),p(i5.$$.fragment,c),p(d5.$$.fragment,c),p(f5.$$.fragment,c),p(m5.$$.fragment,c),p(g5.$$.fragment,c),p(h5.$$.fragment,c),p(p5.$$.fragment,c),p(_5.$$.fragment,c),p(b5.$$.fragment,c),p(F5.$$.fragment,c),p(v5.$$.fragment,c),p(T5.$$.fragment,c),p(M5.$$.fragment,c),p(E5.$$.fragment,c),p(w5.$$.fragment,c),p(A5.$$.fragment,c),p(y5.$$.fragment,c),p(L5.$$.fragment,c),p(x5.$$.fragment,c),p(k5.$$.fragment,c),p(R5.$$.fragment,c),p(B5.$$.fragment,c),p(P5.$$.fragment,c),p($5.$$.fragment,c),p(I5.$$.fragment,c),p(q5.$$.fragment,c),p(j5.$$.fragment,c),p(D5.$$.fragment,c),p(G5.$$.fragment,c),p(O5.$$.fragment,c),p(V5.$$.fragment,c),p(X5.$$.fragment,c),p(Q5.$$.fragment,c),p(W5.$$.fragment,c),p(H5.$$.fragment,c),p(U5.$$.fragment,c),p(J5.$$.fragment,c),p(Y5.$$.fragment,c),p(Z5.$$.fragment,c),p(ew.$$.fragment,c),p(ow.$$.fragment,c),p(rw.$$.fragment,c),p(tw.$$.fragment,c),p(aw.$$.fragment,c),p(sw.$$.fragment,c),p(lw.$$.fragment,c),p(iw.$$.fragment,c),p(dw.$$.fragment,c),p(cw.$$.fragment,c),p(fw.$$.fragment,c),p(gw.$$.fragment,c),p(hw.$$.fragment,c),p(pw.$$.fragment,c),p(_w.$$.fragment,c),p(uw.$$.fragment,c),p(bw.$$.fragment,c),p(vw.$$.fragment,c),p(Tw.$$.fragment,c),p(Mw.$$.fragment,c),p(Ew.$$.fragment,c),p(Cw.$$.fragment,c),p(ww.$$.fragment,c),p(yw.$$.fragment,c),p(Lw.$$.fragment,c),p(xw.$$.fragment,c),p(kw.$$.fragment,c),p(Sw.$$.fragment,c),p(Rw.$$.fragment,c),p(Pw.$$.fragment,c),p($w.$$.fragment,c),p(Iw.$$.fragment,c),p(qw.$$.fragment,c),p(Nw.$$.fragment,c),p(jw.$$.fragment,c),p(Gw.$$.fragment,c),p(Ow.$$.fragment,c),p(Vw.$$.fragment,c),p(Xw.$$.fragment,c),p(zw.$$.fragment,c),p(Qw.$$.fragment,c),p(Hw.$$.fragment,c),p(Uw.$$.fragment,c),p(Jw.$$.fragment,c),p(Yw.$$.fragment,c),p(Kw.$$.fragment,c),p(Zw.$$.fragment,c),p(oA.$$.fragment,c),p(rA.$$.fragment,c),p(tA.$$.fragment,c),p(nA.$$.fragment,c),p(sA.$$.fragment,c),p(lA.$$.fragment,c),p(dA.$$.fragment,c),p(cA.$$.fragment,c),p(fA.$$.fragment,c),p(mA.$$.fragment,c),p(gA.$$.fragment,c),p(hA.$$.fragment,c),p(_A.$$.fragment,c),p(uA.$$.fragment,c),p(bA.$$.fragment,c),p(FA.$$.fragment,c),p(vA.$$.fragment,c),p(TA.$$.fragment,c),p(EA.$$.fragment,c),p(CA.$$.fragment,c),p(wA.$$.fragment,c),p(AA.$$.fragment,c),p(yA.$$.fragment,c),p(LA.$$.fragment,c),p(kA.$$.fragment,c),p(SA.$$.fragment,c),p(RA.$$.fragment,c),p(BA.$$.fragment,c),p(PA.$$.fragment,c),p($A.$$.fragment,c),p(qA.$$.fragment,c),p(NA.$$.fragment,c),p(jA.$$.fragment,c),p(DA.$$.fragment,c),p(GA.$$.fragment,c),p(OA.$$.fragment,c),p(XA.$$.fragment,c),p(zA.$$.fragment,c),p(QA.$$.fragment,c),p(WA.$$.fragment,c),p(HA.$$.fragment,c),p(UA.$$.fragment,c),p(YA.$$.fragment,c),p(KA.$$.fragment,c),p(ZA.$$.fragment,c),p(e0.$$.fragment,c),p(o0.$$.fragment,c),p(r0.$$.fragment,c),p(a0.$$.fragment,c),p(n0.$$.fragment,c),p(s0.$$.fragment,c),p(l0.$$.fragment,c),p(i0.$$.fragment,c),p(d0.$$.fragment,c),p(f0.$$.fragment,c),p(m0.$$.fragment,c),p(g0.$$.fragment,c),p(h0.$$.fragment,c),p(p0.$$.fragment,c),p(_0.$$.fragment,c),p(b0.$$.fragment,c),p(F0.$$.fragment,c),p(v0.$$.fragment,c),p(M0.$$.fragment,c),p(E0.$$.fragment,c),p(C0.$$.fragment,c),p(A0.$$.fragment,c),p(y0.$$.fragment,c),p(L0.$$.fragment,c),p(x0.$$.fragment,c),p(k0.$$.fragment,c),p(S0.$$.fragment,c),p(B0.$$.fragment,c),p(P0.$$.fragment,c),p($0.$$.fragment,c),p(I0.$$.fragment,c),p(q0.$$.fragment,c),p(N0.$$.fragment,c),p(D0.$$.fragment,c),p(G0.$$.fragment,c),p(O0.$$.fragment,c),p(V0.$$.fragment,c),p(X0.$$.fragment,c),p(z0.$$.fragment,c),p(W0.$$.fragment,c),p(H0.$$.fragment,c),p(U0.$$.fragment,c),p(J0.$$.fragment,c),p(Y0.$$.fragment,c),p(K0.$$.fragment,c),p(ey.$$.fragment,c),p(oy.$$.fragment,c),p(ry.$$.fragment,c),p(ty.$$.fragment,c),p(ay.$$.fragment,c),p(ny.$$.fragment,c),p(ly.$$.fragment,c),p(iy.$$.fragment,c),p(dy.$$.fragment,c),p(cy.$$.fragment,c),p(fy.$$.fragment,c),p(my.$$.fragment,c),p(hy.$$.fragment,c),p(py.$$.fragment,c),p(_y.$$.fragment,c),p(uy.$$.fragment,c),p(by.$$.fragment,c),p(Fy.$$.fragment,c),p(Ty.$$.fragment,c),p(My.$$.fragment,c),p(Ey.$$.fragment,c),p(Cy.$$.fragment,c),p(wy.$$.fragment,c),p(Ay.$$.fragment,c),p(Ly.$$.fragment,c),p(xy.$$.fragment,c),p(ky.$$.fragment,c),p(Sy.$$.fragment,c),p(Ry.$$.fragment,c),p(By.$$.fragment,c),p($y.$$.fragment,c),p(Iy.$$.fragment,c),p(qy.$$.fragment,c),p(Ny.$$.fragment,c),p(jy.$$.fragment,c),p(Dy.$$.fragment,c),p(Oy.$$.fragment,c),p(Vy.$$.fragment,c),p(Xy.$$.fragment,c),p(zy.$$.fragment,c),p(Qy.$$.fragment,c),p(Wy.$$.fragment,c),p(Uy.$$.fragment,c),p(Jy.$$.fragment,c),p(Yy.$$.fragment,c),p(Ky.$$.fragment,c),p(Zy.$$.fragment,c),p(eL.$$.fragment,c),p(rL.$$.fragment,c),p(tL.$$.fragment,c),p(aL.$$.fragment,c),p(nL.$$.fragment,c),p(sL.$$.fragment,c),p(lL.$$.fragment,c),p(dL.$$.fragment,c),p(cL.$$.fragment,c),p(fL.$$.fragment,c),p(mL.$$.fragment,c),p(gL.$$.fragment,c),p(hL.$$.fragment,c),p(_L.$$.fragment,c),p(uL.$$.fragment,c),p(bL.$$.fragment,c),p(FL.$$.fragment,c),p(vL.$$.fragment,c),p(TL.$$.fragment,c),p(EL.$$.fragment,c),p(CL.$$.fragment,c),p(wL.$$.fragment,c),p(AL.$$.fragment,c),p(yL.$$.fragment,c),p(LL.$$.fragment,c),p(kL.$$.fragment,c),p(SL.$$.fragment,c),p(RL.$$.fragment,c),p(BL.$$.fragment,c),p(PL.$$.fragment,c),p($L.$$.fragment,c),p(qL.$$.fragment,c),p(NL.$$.fragment,c),p(jL.$$.fragment,c),p(DL.$$.fragment,c),p(GL.$$.fragment,c),p(OL.$$.fragment,c),p(XL.$$.fragment,c),p(zL.$$.fragment,c),p(QL.$$.fragment,c),p(WL.$$.fragment,c),p(HL.$$.fragment,c),p(UL.$$.fragment,c),p(YL.$$.fragment,c),p(KL.$$.fragment,c),p(ZL.$$.fragment,c),p(o8.$$.fragment,c),p(r8.$$.fragment,c),p(t8.$$.fragment,c),p(n8.$$.fragment,c),p(s8.$$.fragment,c),p(l8.$$.fragment,c),p(i8.$$.fragment,c),PBe=!1},d(c){t(Z),c&&t(io),c&&t(de),_(me),c&&t(qf),c&&t(fa),c&&t(xe),c&&t(co),c&&t(jf),_(Da,c),c&&t(fo),c&&t(_e),c&&t(zo),c&&t(Ga),c&&t(BSe),c&&t(Vi),_(bC),c&&t(PSe),c&&t(zn),c&&t($Se),_(FC,c),c&&t(ISe),c&&t(f9),c&&t(qSe),_(Of,c),c&&t(NSe),c&&t(Xi),_(vC),c&&t(jSe),c&&t(Qo),_(TC),_(CC),_(wC),_(AC),c&&t(DSe),c&&t(Qi),_(yC),c&&t(GSe),c&&t(Wo),_(LC),_(SC),_(RC),_(BC),c&&t(OSe),c&&t(Wi),_(PC),c&&t(VSe),c&&t(Ho),_($C),_(NC),_(Bh),_(jC),_(DC),c&&t(XSe),c&&t(Hi),_(GC),c&&t(zSe),c&&t(Uo),_(OC),_(zC),_(Xh),_(QC),_(WC),c&&t(QSe),c&&t(Ji),_(HC),c&&t(WSe),c&&t(Jo),_(UC),_(YC),_(KC),_(ZC),_(e5),c&&t(HSe),c&&t(Zi),_(o5),c&&t(USe),c&&t(Yo),_(r5),_(a5),_(n5),_(s5),_(l5),c&&t(JSe),c&&t(rd),_(i5),c&&t(YSe),c&&t(Ko),_(d5),_(f5),_(m5),_(g5),_(h5),c&&t(KSe),c&&t(nd),_(p5),c&&t(ZSe),c&&t(Zo),_(_5),_(b5),_(F5),_(v5),_(T5),c&&t(eRe),c&&t(id),_(M5),c&&t(oRe),c&&t(er),_(E5),_(w5),_(A5),_(y5),_(L5),c&&t(rRe),c&&t(fd),_(x5),c&&t(tRe),c&&t(or),_(k5),_(R5),_(B5),_(P5),_($5),c&&t(aRe),c&&t(hd),_(I5),c&&t(nRe),c&&t(rr),_(q5),_(j5),_(D5),_(G5),_(O5),c&&t(sRe),c&&t(ud),_(V5),c&&t(lRe),c&&t(tr),_(X5),_(Q5),_(W5),_(H5),_(U5),c&&t(iRe),c&&t(vd),_(J5),c&&t(dRe),c&&t(ar),_(Y5),_(Z5),_(ew),_(ow),_(rw),c&&t(cRe),c&&t(Ed),_(tw),c&&t(fRe),c&&t(nr),_(aw),_(sw),_(lw),_(iw),_(dw),c&&t(mRe),c&&t(Ad),_(cw),c&&t(gRe),c&&t(sr),_(fw),_(gw),_(hw),_(pw),_(_w),c&&t(hRe),c&&t(xd),_(uw),c&&t(pRe),c&&t(lr),_(bw),_(vw),_(Tw),_(Mw),_(Ew),c&&t(_Re),c&&t(Rd),_(Cw),c&&t(uRe),c&&t(ir),_(ww),_(yw),_(Lw),_(xw),_(kw),c&&t(bRe),c&&t($d),_(Sw),c&&t(FRe),c&&t(dr),_(Rw),_(Pw),_($w),_(Iw),_(qw),c&&t(vRe),c&&t(Nd),_(Nw),c&&t(TRe),c&&t(cr),_(jw),_(Gw),_(Ow),_(Vw),_(Xw),c&&t(MRe),c&&t(Gd),_(zw),c&&t(ERe),c&&t(fr),_(Qw),_(Hw),_(Uw),_(Jw),_(Yw),c&&t(CRe),c&&t(Xd),_(Kw),c&&t(wRe),c&&t(mr),_(Zw),_(oA),_(rA),_(tA),_(nA),c&&t(ARe),c&&t(Wd),_(sA),c&&t(yRe),c&&t(gr),_(lA),_(dA),_(cA),_(fA),_(mA),c&&t(LRe),c&&t(Jd),_(gA),c&&t(xRe),c&&t(hr),_(hA),_(_A),_(uA),_(bA),_(FA),c&&t(kRe),c&&t(ec),_(vA),c&&t(SRe),c&&t(pr),_(TA),_(EA),_(CA),_(wA),_(AA),c&&t(RRe),c&&t(tc),_(yA),c&&t(BRe),c&&t(_r),_(LA),_(kA),_(SA),_(RA),_(BA),c&&t(PRe),c&&t(sc),_(PA),c&&t($Re),c&&t(ur),_($A),_(qA),_(NA),_(jA),_(DA),c&&t(IRe),c&&t(cc),_(GA),c&&t(qRe),c&&t(br),_(OA),_(XA),_(zA),_(QA),_(WA),c&&t(NRe),c&&t(gc),_(HA),c&&t(jRe),c&&t(Fr),_(UA),_(YA),_(KA),_(ZA),_(e0),c&&t(DRe),c&&t(_c),_(o0),c&&t(GRe),c&&t(vr),_(r0),_(a0),_(n0),_(s0),_(l0),c&&t(ORe),c&&t(Fc),_(i0),c&&t(VRe),c&&t(Tr),_(d0),_(f0),_(m0),_(g0),_(h0),c&&t(XRe),c&&t(Mc),_(p0),c&&t(zRe),c&&t(Mr),_(_0),_(b0),_(F0),_(v0),_(M0),c&&t(QRe),c&&t(wc),_(E0),c&&t(WRe),c&&t(Er),_(C0),_(A0),_(y0),_(L0),_(x0),c&&t(HRe),c&&t(Lc),_(k0),c&&t(URe),c&&t(Cr),_(S0),_(B0),_(P0),_($0),_(I0),c&&t(JRe),c&&t(Sc),_(q0),c&&t(YRe),c&&t(wr),_(N0),_(D0),_(G0),_(O0),_(V0),c&&t(KRe),c&&t(Pc),_(X0),c&&t(ZRe),c&&t(Ar),_(z0),_(W0),_(H0),_(U0),_(J0),c&&t(eBe),c&&t(qc),_(Y0),c&&t(oBe),c&&t(yr),_(K0),_(ey),_(oy),_(ry),_(ty),c&&t(rBe),c&&t(Dc),_(ay),c&&t(tBe),c&&t(Lr),_(ny),_(ly),_(iy),_(dy),_(cy),c&&t(aBe),c&&t(Vc),_(fy),c&&t(nBe),c&&t(xr),_(my),_(hy),_(py),_(_y),_(uy),c&&t(sBe),c&&t(Qc),_(by),c&&t(lBe),c&&t(kr),_(Fy),_(Ty),_(My),_(Ey),_(Cy),c&&t(iBe),c&&t(Uc),_(wy),c&&t(dBe),c&&t(Sr),_(Ay),_(Ly),_(xy),_(ky),_(Sy),c&&t(cBe),c&&t(Kc),_(Ry),c&&t(fBe),c&&t(Rr),_(By),_($y),_(Iy),_(qy),_(Ny),c&&t(mBe),c&&t(of),_(jy),c&&t(gBe),c&&t(Br),_(Dy),_(Oy),_(Vy),_(Xy),_(zy),c&&t(hBe),c&&t(af),_(Qy),c&&t(pBe),c&&t(Pr),_(Wy),_(Uy),_(Jy),_(Yy),_(Ky),c&&t(_Be),c&&t(lf),_(Zy),c&&t(uBe),c&&t($r),_(eL),_(rL),_(tL),_(aL),_(nL),c&&t(bBe),c&&t(ff),_(sL),c&&t(FBe),c&&t(Ir),_(lL),_(dL),_(cL),_(fL),_(mL),c&&t(vBe),c&&t(hf),_(gL),c&&t(TBe),c&&t(qr),_(hL),_(_L),_(uL),_(bL),_(FL),c&&t(MBe),c&&t(uf),_(vL),c&&t(EBe),c&&t(Nr),_(TL),_(EL),_(CL),_(wL),_(AL),c&&t(CBe),c&&t(vf),_(yL),c&&t(wBe),c&&t(jr),_(LL),_(kL),_(SL),_(RL),_(BL),c&&t(ABe),c&&t(Ef),_(PL),c&&t(yBe),c&&t(Dr),_($L),_(qL),_(NL),_(jL),_(DL),c&&t(LBe),c&&t(Af),_(GL),c&&t(xBe),c&&t(Gr),_(OL),_(XL),_(zL),_(QL),_(WL),c&&t(kBe),c&&t(xf),_(HL),c&&t(SBe),c&&t(Or),_(UL),_(YL),_(KL),_(ZL),_(o8),c&&t(RBe),c&&t(Rf),_(r8),c&&t(BBe),c&&t(Vr),_(t8),_(n8),_(s8),_(l8),_(i8)}}}const HMt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function UMt(If){return VMt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class oEt extends jMt{constructor(Z){super();DMt(this,Z,UMt,WMt,GMt,{})}}export{oEt as default,HMt as metadata};
