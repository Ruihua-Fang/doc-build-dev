import{S as jCt,i as qCt,s as GCt,e as a,k as l,w as f,t as o,M as OCt,c as n,d as t,m as i,a as s,x as m,h as r,b as d,F as e,g as b,y as g,q as h,o as p,B as _,v as XCt}from"../../chunks/vendor-6b77c823.js";import{T as wRr}from"../../chunks/Tip-39098574.js";import{D as E}from"../../chunks/Docstring-abef54e3.js";import{C as w}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as V}from"../../chunks/IconCopyLink-7a11ce68.js";function VCt(If){let Z,io,de,Ee,lo,me,Ce,Vo,Ii,Df,fa,Di,Ni,hE,Nf,Be,co,ji,Gn,pE,On,Xn,_E,qi,Vn,uE,Gi,jf,qa;return{c(){Z=a("p"),io=o("If your "),de=a("code"),Ee=o("NewModelConfig"),lo=o(" is a subclass of "),me=a("code"),Ce=o("PretrainedConfig"),Vo=o(`, make sure its
`),Ii=a("code"),Df=o("model_type"),fa=o(" attribute is set to the same key you use when registering the config (here "),Di=a("code"),Ni=o('"new-model"'),hE=o(")."),Nf=l(),Be=a("p"),co=o("Likewise, if your "),ji=a("code"),Gn=o("NewModel"),pE=o(" is a subclass of "),On=a("a"),Xn=o("PreTrainedModel"),_E=o(`, make sure its
`),qi=a("code"),Vn=o("config_class"),uE=o(` attribute is set to the same class you use when registering the model (here
`),Gi=a("code"),jf=o("NewModelConfig"),qa=o(")."),this.h()},l(fo){Z=n(fo,"P",{});var _e=s(Z);io=r(_e,"If your "),de=n(_e,"CODE",{});var s9=s(de);Ee=r(s9,"NewModelConfig"),s9.forEach(t),lo=r(_e," is a subclass of "),me=n(_e,"CODE",{});var Oi=s(me);Ce=r(Oi,"PretrainedConfig"),Oi.forEach(t),Vo=r(_e,`, make sure its
`),Ii=n(_e,"CODE",{});var l9=s(Ii);Df=r(l9,"model_type"),l9.forEach(t),fa=r(_e," attribute is set to the same key you use when registering the config (here "),Di=n(_e,"CODE",{});var i9=s(Di);Ni=r(i9,'"new-model"'),i9.forEach(t),hE=r(_e,")."),_e.forEach(t),Nf=i(fo),Be=n(fo,"P",{});var zo=s(Be);co=r(zo,"Likewise, if your "),ji=n(zo,"CODE",{});var Ga=s(ji);Gn=r(Ga,"NewModel"),Ga.forEach(t),pE=r(zo," is a subclass of "),On=n(zo,"A",{href:!0});var d9=s(On);Xn=r(d9,"PreTrainedModel"),d9.forEach(t),_E=r(zo,`, make sure its
`),qi=n(zo,"CODE",{});var qf=s(qi);Vn=r(qf,"config_class"),qf.forEach(t),uE=r(zo,` attribute is set to the same class you use when registering the model (here
`),Gi=n(zo,"CODE",{});var c9=s(Gi);jf=r(c9,"NewModelConfig"),c9.forEach(t),qa=r(zo,")."),zo.forEach(t),this.h()},h(){d(On,"href","/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel")},m(fo,_e){b(fo,Z,_e),e(Z,io),e(Z,de),e(de,Ee),e(Z,lo),e(Z,me),e(me,Ce),e(Z,Vo),e(Z,Ii),e(Ii,Df),e(Z,fa),e(Z,Di),e(Di,Ni),e(Z,hE),b(fo,Nf,_e),b(fo,Be,_e),e(Be,co),e(Be,ji),e(ji,Gn),e(Be,pE),e(Be,On),e(On,Xn),e(Be,_E),e(Be,qi),e(qi,Vn),e(Be,uE),e(Be,Gi),e(Gi,jf),e(Be,qa)},d(fo){fo&&t(Z),fo&&t(Nf),fo&&t(Be)}}}function zCt(If){let Z,io,de,Ee,lo;return{c(){Z=a("p"),io=o("Passing "),de=a("code"),Ee=o("use_auth_token=True"),lo=o(" is required when you want to use a private model.")},l(me){Z=n(me,"P",{});var Ce=s(Z);io=r(Ce,"Passing "),de=n(Ce,"CODE",{});var Vo=s(de);Ee=r(Vo,"use_auth_token=True"),Vo.forEach(t),lo=r(Ce," is required when you want to use a private model."),Ce.forEach(t)},m(me,Ce){b(me,Z,Ce),e(Z,io),e(Z,de),e(de,Ee),e(Z,lo)},d(me){me&&t(Z)}}}function WCt(If){let Z,io,de,Ee,lo;return{c(){Z=a("p"),io=o("Passing "),de=a("code"),Ee=o("use_auth_token=True"),lo=o(" is required when you want to use a private model.")},l(me){Z=n(me,"P",{});var Ce=s(Z);io=r(Ce,"Passing "),de=n(Ce,"CODE",{});var Vo=s(de);Ee=r(Vo,"use_auth_token=True"),Vo.forEach(t),lo=r(Ce," is required when you want to use a private model."),Ce.forEach(t)},m(me,Ce){b(me,Z,Ce),e(Z,io),e(Z,de),e(de,Ee),e(Z,lo)},d(me){me&&t(Z)}}}function QCt(If){let Z,io,de,Ee,lo,me,Ce,Vo,Ii,Df,fa,Di,Ni,hE,Nf,Be,co,ji,Gn,pE,On,Xn,_E,qi,Vn,uE,Gi,jf,qa,fo,_e,s9,Oi,l9,i9,zo,Ga,d9,qf,c9,W$e,Ske,Xi,Gf,oH,bE,Q$e,rH,H$e,Pke,zn,U$e,tH,J$e,Y$e,aH,K$e,Z$e,$ke,vE,Ike,f9,eIe,Dke,Of,Nke,Vi,Xf,nH,TE,oIe,sH,rIe,jke,Wo,FE,tIe,CE,aIe,m9,nIe,sIe,lIe,ME,iIe,lH,dIe,cIe,fIe,mo,EE,mIe,iH,gIe,hIe,zi,pIe,dH,_Ie,uIe,cH,bIe,vIe,TIe,v,Vf,fH,FIe,CIe,g9,MIe,EIe,yIe,zf,mH,wIe,AIe,h9,LIe,BIe,xIe,Wf,gH,kIe,RIe,p9,SIe,PIe,$Ie,Qf,hH,IIe,DIe,_9,NIe,jIe,qIe,Hf,pH,GIe,OIe,u9,XIe,VIe,zIe,Uf,_H,WIe,QIe,b9,HIe,UIe,JIe,Jf,uH,YIe,KIe,v9,ZIe,eDe,oDe,Yf,bH,rDe,tDe,T9,aDe,nDe,sDe,Kf,vH,lDe,iDe,F9,dDe,cDe,fDe,Zf,TH,mDe,gDe,C9,hDe,pDe,_De,em,FH,uDe,bDe,M9,vDe,TDe,FDe,om,CH,CDe,MDe,E9,EDe,yDe,wDe,rm,MH,ADe,LDe,y9,BDe,xDe,kDe,tm,EH,RDe,SDe,w9,PDe,$De,IDe,am,yH,DDe,NDe,A9,jDe,qDe,GDe,nm,wH,ODe,XDe,L9,VDe,zDe,WDe,sm,AH,QDe,HDe,B9,UDe,JDe,YDe,lm,LH,KDe,ZDe,x9,eNe,oNe,rNe,im,BH,tNe,aNe,k9,nNe,sNe,lNe,dm,xH,iNe,dNe,R9,cNe,fNe,mNe,cm,kH,gNe,hNe,S9,pNe,_Ne,uNe,fm,RH,bNe,vNe,P9,TNe,FNe,CNe,mm,SH,MNe,ENe,$9,yNe,wNe,ANe,gm,PH,LNe,BNe,I9,xNe,kNe,RNe,hm,$H,SNe,PNe,D9,$Ne,INe,DNe,pm,IH,NNe,jNe,N9,qNe,GNe,ONe,_m,DH,XNe,VNe,j9,zNe,WNe,QNe,um,NH,HNe,UNe,q9,JNe,YNe,KNe,bm,jH,ZNe,eje,G9,oje,rje,tje,vm,qH,aje,nje,O9,sje,lje,ije,Tm,GH,dje,cje,X9,fje,mje,gje,Fm,OH,hje,pje,V9,_je,uje,bje,Cm,XH,vje,Tje,z9,Fje,Cje,Mje,Mm,VH,Eje,yje,W9,wje,Aje,Lje,Em,zH,Bje,xje,Q9,kje,Rje,Sje,ym,WH,Pje,$je,H9,Ije,Dje,Nje,wm,QH,jje,qje,U9,Gje,Oje,Xje,Am,HH,Vje,zje,J9,Wje,Qje,Hje,Lm,UH,Uje,Jje,Y9,Yje,Kje,Zje,Bm,JH,eqe,oqe,K9,rqe,tqe,aqe,xm,YH,nqe,sqe,Z9,lqe,iqe,dqe,km,KH,cqe,fqe,eB,mqe,gqe,hqe,Rm,ZH,pqe,_qe,oB,uqe,bqe,vqe,Sm,eU,Tqe,Fqe,rB,Cqe,Mqe,Eqe,Pm,oU,yqe,wqe,tB,Aqe,Lqe,Bqe,$m,rU,xqe,kqe,aB,Rqe,Sqe,Pqe,Im,tU,$qe,Iqe,nB,Dqe,Nqe,jqe,Dm,aU,qqe,Gqe,sB,Oqe,Xqe,Vqe,Nm,nU,zqe,Wqe,lB,Qqe,Hqe,Uqe,jm,sU,Jqe,Yqe,iB,Kqe,Zqe,eGe,qm,lU,oGe,rGe,dB,tGe,aGe,nGe,Gm,iU,sGe,lGe,cB,iGe,dGe,cGe,Om,dU,fGe,mGe,fB,gGe,hGe,pGe,Xm,cU,_Ge,uGe,mB,bGe,vGe,TGe,Vm,fU,FGe,CGe,gB,MGe,EGe,yGe,zm,mU,wGe,AGe,hB,LGe,BGe,xGe,Wm,gU,kGe,RGe,pB,SGe,PGe,$Ge,Qm,hU,IGe,DGe,_B,NGe,jGe,qGe,Hm,pU,GGe,OGe,uB,XGe,VGe,zGe,Um,_U,WGe,QGe,bB,HGe,UGe,JGe,Jm,uU,YGe,KGe,vB,ZGe,eOe,oOe,Ym,bU,rOe,tOe,TB,aOe,nOe,sOe,Km,vU,lOe,iOe,FB,dOe,cOe,fOe,Zm,TU,mOe,gOe,CB,hOe,pOe,_Oe,eg,FU,uOe,bOe,MB,vOe,TOe,FOe,og,CU,COe,MOe,EB,EOe,yOe,wOe,rg,MU,AOe,LOe,yB,BOe,xOe,kOe,tg,EU,ROe,SOe,wB,POe,$Oe,IOe,ag,yU,DOe,NOe,AB,jOe,qOe,GOe,ng,wU,OOe,XOe,LB,VOe,zOe,WOe,sg,AU,QOe,HOe,BB,UOe,JOe,YOe,lg,LU,KOe,ZOe,xB,eXe,oXe,rXe,ig,BU,tXe,aXe,kB,nXe,sXe,lXe,dg,xU,iXe,dXe,RB,cXe,fXe,mXe,cg,kU,gXe,hXe,SB,pXe,_Xe,uXe,fg,RU,bXe,vXe,PB,TXe,FXe,CXe,mg,SU,MXe,EXe,$B,yXe,wXe,AXe,gg,PU,LXe,BXe,IB,xXe,kXe,RXe,hg,$U,SXe,PXe,DB,$Xe,IXe,DXe,pg,IU,NXe,jXe,NB,qXe,GXe,OXe,_g,DU,XXe,VXe,jB,zXe,WXe,QXe,ug,NU,HXe,UXe,qB,JXe,YXe,KXe,bg,jU,ZXe,eVe,GB,oVe,rVe,tVe,vg,qU,aVe,nVe,OB,sVe,lVe,iVe,Tg,GU,dVe,cVe,XB,fVe,mVe,gVe,Fg,OU,hVe,pVe,VB,_Ve,uVe,bVe,Cg,XU,vVe,TVe,zB,FVe,CVe,MVe,Mg,VU,EVe,yVe,WB,wVe,AVe,LVe,Eg,zU,BVe,xVe,QB,kVe,RVe,SVe,yg,WU,PVe,$Ve,HB,IVe,DVe,NVe,wg,QU,jVe,qVe,UB,GVe,OVe,XVe,Ag,HU,VVe,zVe,JB,WVe,QVe,HVe,Lg,UU,UVe,JVe,YB,YVe,KVe,ZVe,Bg,JU,eze,oze,KB,rze,tze,aze,xg,YU,nze,sze,ZB,lze,ize,dze,kg,KU,cze,fze,ex,mze,gze,hze,Rg,ZU,pze,_ze,ox,uze,bze,vze,Sg,eJ,Tze,Fze,rx,Cze,Mze,Eze,Pg,oJ,yze,wze,tx,Aze,Lze,Bze,rJ,xze,kze,yE,Rze,$g,wE,Sze,tJ,Pze,qke,Wi,Ig,aJ,AE,$ze,nJ,Ize,Gke,Qo,LE,Dze,BE,Nze,ax,jze,qze,Gze,xE,Oze,sJ,Xze,Vze,zze,go,kE,Wze,lJ,Qze,Hze,Oa,Uze,iJ,Jze,Yze,dJ,Kze,Zze,cJ,eWe,oWe,rWe,M,Wn,fJ,tWe,aWe,nx,nWe,sWe,sx,lWe,iWe,dWe,Qn,mJ,cWe,fWe,lx,mWe,gWe,ix,hWe,pWe,_We,Hn,gJ,uWe,bWe,dx,vWe,TWe,cx,FWe,CWe,MWe,Dg,hJ,EWe,yWe,fx,wWe,AWe,LWe,Un,pJ,BWe,xWe,mx,kWe,RWe,gx,SWe,PWe,$We,Ng,_J,IWe,DWe,hx,NWe,jWe,qWe,jg,uJ,GWe,OWe,px,XWe,VWe,zWe,qg,bJ,WWe,QWe,_x,HWe,UWe,JWe,Jn,vJ,YWe,KWe,ux,ZWe,eQe,bx,oQe,rQe,tQe,Yn,TJ,aQe,nQe,vx,sQe,lQe,Tx,iQe,dQe,cQe,Kn,FJ,fQe,mQe,Fx,gQe,hQe,Cx,pQe,_Qe,uQe,Gg,CJ,bQe,vQe,Mx,TQe,FQe,CQe,Og,MJ,MQe,EQe,Ex,yQe,wQe,AQe,Zn,EJ,LQe,BQe,yx,xQe,kQe,wx,RQe,SQe,PQe,Xg,yJ,$Qe,IQe,Ax,DQe,NQe,jQe,es,wJ,qQe,GQe,Lx,OQe,XQe,Bx,VQe,zQe,WQe,os,AJ,QQe,HQe,xx,UQe,JQe,kx,YQe,KQe,ZQe,rs,LJ,eHe,oHe,Rx,rHe,tHe,BJ,aHe,nHe,sHe,Vg,xJ,lHe,iHe,Sx,dHe,cHe,fHe,ts,kJ,mHe,gHe,Px,hHe,pHe,$x,_He,uHe,bHe,zg,RJ,vHe,THe,Ix,FHe,CHe,MHe,as,SJ,EHe,yHe,Dx,wHe,AHe,Nx,LHe,BHe,xHe,ns,PJ,kHe,RHe,jx,SHe,PHe,qx,$He,IHe,DHe,ss,$J,NHe,jHe,Gx,qHe,GHe,Ox,OHe,XHe,VHe,Wg,IJ,zHe,WHe,Xx,QHe,HHe,UHe,ls,DJ,JHe,YHe,Vx,KHe,ZHe,zx,eUe,oUe,rUe,Qg,NJ,tUe,aUe,Wx,nUe,sUe,lUe,is,jJ,iUe,dUe,Qx,cUe,fUe,Hx,mUe,gUe,hUe,ds,qJ,pUe,_Ue,Ux,uUe,bUe,Jx,vUe,TUe,FUe,cs,GJ,CUe,MUe,Yx,EUe,yUe,Kx,wUe,AUe,LUe,fs,OJ,BUe,xUe,Zx,kUe,RUe,ek,SUe,PUe,$Ue,Hg,XJ,IUe,DUe,ok,NUe,jUe,qUe,ms,VJ,GUe,OUe,rk,XUe,VUe,tk,zUe,WUe,QUe,gs,zJ,HUe,UUe,ak,JUe,YUe,nk,KUe,ZUe,eJe,hs,WJ,oJe,rJe,sk,tJe,aJe,lk,nJe,sJe,lJe,ps,QJ,iJe,dJe,ik,cJe,fJe,dk,mJe,gJe,hJe,_s,HJ,pJe,_Je,ck,uJe,bJe,fk,vJe,TJe,FJe,us,UJ,CJe,MJe,mk,EJe,yJe,gk,wJe,AJe,LJe,Ug,JJ,BJe,xJe,hk,kJe,RJe,SJe,bs,YJ,PJe,$Je,pk,IJe,DJe,_k,NJe,jJe,qJe,Jg,KJ,GJe,OJe,uk,XJe,VJe,zJe,Yg,ZJ,WJe,QJe,bk,HJe,UJe,JJe,vs,eY,YJe,KJe,vk,ZJe,eYe,Tk,oYe,rYe,tYe,Ts,oY,aYe,nYe,Fk,sYe,lYe,Ck,iYe,dYe,cYe,Kg,rY,fYe,mYe,Mk,gYe,hYe,pYe,Fs,tY,_Ye,uYe,Ek,bYe,vYe,yk,TYe,FYe,CYe,Cs,aY,MYe,EYe,wk,yYe,wYe,Ak,AYe,LYe,BYe,Ms,nY,xYe,kYe,Lk,RYe,SYe,Bk,PYe,$Ye,IYe,Es,sY,DYe,NYe,xk,jYe,qYe,kk,GYe,OYe,XYe,ys,lY,VYe,zYe,Rk,WYe,QYe,Sk,HYe,UYe,JYe,Zg,iY,YYe,KYe,Pk,ZYe,eKe,oKe,eh,dY,rKe,tKe,$k,aKe,nKe,sKe,oh,cY,lKe,iKe,Ik,dKe,cKe,fKe,rh,fY,mKe,gKe,Dk,hKe,pKe,_Ke,ws,mY,uKe,bKe,Nk,vKe,TKe,jk,FKe,CKe,MKe,th,gY,EKe,yKe,qk,wKe,AKe,LKe,As,hY,BKe,xKe,Gk,kKe,RKe,Ok,SKe,PKe,$Ke,Ls,pY,IKe,DKe,Xk,NKe,jKe,Vk,qKe,GKe,OKe,Bs,_Y,XKe,VKe,zk,zKe,WKe,Wk,QKe,HKe,UKe,xs,uY,JKe,YKe,Qk,KKe,ZKe,Hk,eZe,oZe,rZe,ks,bY,tZe,aZe,Uk,nZe,sZe,Jk,lZe,iZe,dZe,Rs,vY,cZe,fZe,Yk,mZe,gZe,Kk,hZe,pZe,_Ze,ah,TY,uZe,bZe,Zk,vZe,TZe,FZe,nh,FY,CZe,MZe,eR,EZe,yZe,wZe,Ss,CY,AZe,LZe,oR,BZe,xZe,rR,kZe,RZe,SZe,Ps,MY,PZe,$Ze,tR,IZe,DZe,aR,NZe,jZe,qZe,$s,EY,GZe,OZe,nR,XZe,VZe,sR,zZe,WZe,QZe,sh,yY,HZe,UZe,lR,JZe,YZe,KZe,lh,wY,ZZe,eeo,iR,oeo,reo,teo,ih,AY,aeo,neo,dR,seo,leo,ieo,dh,LY,deo,ceo,cR,feo,meo,geo,ch,BY,heo,peo,fR,_eo,ueo,beo,Is,xY,veo,Teo,mR,Feo,Ceo,gR,Meo,Eeo,yeo,fh,kY,weo,Aeo,hR,Leo,Beo,xeo,mh,RY,keo,Reo,pR,Seo,Peo,$eo,Ds,SY,Ieo,Deo,_R,Neo,jeo,uR,qeo,Geo,Oeo,Ns,PY,Xeo,Veo,bR,zeo,Weo,vR,Qeo,Heo,Ueo,$Y,Jeo,Yeo,RE,Keo,gh,SE,Zeo,IY,eoo,Oke,Qi,hh,DY,PE,ooo,NY,roo,Xke,Ho,$E,too,IE,aoo,TR,noo,soo,loo,DE,ioo,jY,doo,coo,foo,$e,NE,moo,qY,goo,hoo,Xa,poo,GY,_oo,uoo,OY,boo,voo,XY,Too,Foo,Coo,te,ph,VY,Moo,Eoo,FR,yoo,woo,Aoo,_h,zY,Loo,Boo,CR,xoo,koo,Roo,uh,WY,Soo,Poo,MR,$oo,Ioo,Doo,bh,QY,Noo,joo,ER,qoo,Goo,Ooo,vh,HY,Xoo,Voo,yR,zoo,Woo,Qoo,Th,UY,Hoo,Uoo,wR,Joo,Yoo,Koo,Fh,JY,Zoo,ero,AR,oro,rro,tro,Ch,YY,aro,nro,LR,sro,lro,iro,Mh,KY,dro,cro,BR,fro,mro,gro,Eh,ZY,hro,pro,xR,_ro,uro,bro,yh,eK,vro,Tro,kR,Fro,Cro,Mro,wh,oK,Ero,yro,RR,wro,Aro,Lro,Ah,rK,Bro,xro,SR,kro,Rro,Sro,Lh,tK,Pro,$ro,PR,Iro,Dro,Nro,Bh,aK,jro,qro,$R,Gro,Oro,Xro,xh,nK,Vro,zro,IR,Wro,Qro,Hro,kh,sK,Uro,Jro,DR,Yro,Kro,Zro,Rh,lK,eto,oto,NR,rto,tto,ato,Sh,nto,iK,sto,lto,jE,ito,Ph,qE,dto,dK,cto,Vke,Hi,$h,cK,GE,fto,fK,mto,zke,Uo,OE,gto,XE,hto,jR,pto,_to,uto,VE,bto,mK,vto,Tto,Fto,Ie,zE,Cto,gK,Mto,Eto,Ui,yto,hK,wto,Ato,pK,Lto,Bto,xto,xe,Ih,_K,kto,Rto,qR,Sto,Pto,$to,Dh,uK,Ito,Dto,GR,Nto,jto,qto,Nh,bK,Gto,Oto,OR,Xto,Vto,zto,jh,vK,Wto,Qto,XR,Hto,Uto,Jto,qh,TK,Yto,Kto,VR,Zto,eao,oao,Gh,FK,rao,tao,zR,aao,nao,sao,Oh,CK,lao,iao,WR,dao,cao,fao,Xh,MK,mao,gao,QR,hao,pao,_ao,Vh,uao,EK,bao,vao,WE,Tao,zh,QE,Fao,yK,Cao,Wke,Ji,Wh,wK,HE,Mao,AK,Eao,Qke,Jo,UE,yao,Yi,wao,LK,Aao,Lao,BK,Bao,xao,kao,JE,Rao,xK,Sao,Pao,$ao,Vr,YE,Iao,kK,Dao,Nao,Ki,jao,RK,qao,Gao,SK,Oao,Xao,Vao,PK,zao,Wao,KE,Qao,De,ZE,Hao,$K,Uao,Jao,Va,Yao,IK,Kao,Zao,DK,eno,ono,NK,rno,tno,ano,F,Qh,jK,nno,sno,HR,lno,ino,dno,Hh,qK,cno,fno,UR,mno,gno,hno,Uh,GK,pno,_no,JR,uno,bno,vno,Jh,OK,Tno,Fno,YR,Cno,Mno,Eno,Yh,XK,yno,wno,KR,Ano,Lno,Bno,Kh,VK,xno,kno,ZR,Rno,Sno,Pno,Zh,zK,$no,Ino,eS,Dno,Nno,jno,ep,WK,qno,Gno,oS,Ono,Xno,Vno,op,QK,zno,Wno,rS,Qno,Hno,Uno,rp,HK,Jno,Yno,tS,Kno,Zno,eso,tp,UK,oso,rso,aS,tso,aso,nso,ap,JK,sso,lso,nS,iso,dso,cso,np,YK,fso,mso,sS,gso,hso,pso,sp,KK,_so,uso,lS,bso,vso,Tso,lp,ZK,Fso,Cso,iS,Mso,Eso,yso,ip,eZ,wso,Aso,dS,Lso,Bso,xso,dp,oZ,kso,Rso,cS,Sso,Pso,$so,cp,rZ,Iso,Dso,fS,Nso,jso,qso,fp,tZ,Gso,Oso,mS,Xso,Vso,zso,mp,aZ,Wso,Qso,gS,Hso,Uso,Jso,gp,nZ,Yso,Kso,hS,Zso,elo,olo,hp,sZ,rlo,tlo,pS,alo,nlo,slo,pp,lZ,llo,ilo,_S,dlo,clo,flo,_p,iZ,mlo,glo,uS,hlo,plo,_lo,up,dZ,ulo,blo,bS,vlo,Tlo,Flo,bp,cZ,Clo,Mlo,vS,Elo,ylo,wlo,vp,fZ,Alo,Llo,TS,Blo,xlo,klo,Tp,mZ,Rlo,Slo,FS,Plo,$lo,Ilo,Fp,gZ,Dlo,Nlo,CS,jlo,qlo,Glo,js,hZ,Olo,Xlo,MS,Vlo,zlo,ES,Wlo,Qlo,Hlo,Cp,pZ,Ulo,Jlo,yS,Ylo,Klo,Zlo,Mp,_Z,eio,oio,wS,rio,tio,aio,Ep,uZ,nio,sio,AS,lio,iio,dio,yp,bZ,cio,fio,LS,mio,gio,hio,wp,vZ,pio,_io,BS,uio,bio,vio,Ap,TZ,Tio,Fio,xS,Cio,Mio,Eio,Lp,FZ,yio,wio,kS,Aio,Lio,Bio,Bp,CZ,xio,kio,RS,Rio,Sio,Pio,xp,MZ,$io,Iio,SS,Dio,Nio,jio,kp,EZ,qio,Gio,PS,Oio,Xio,Vio,Rp,yZ,zio,Wio,$S,Qio,Hio,Uio,Sp,wZ,Jio,Yio,IS,Kio,Zio,edo,Pp,AZ,odo,rdo,DS,tdo,ado,ndo,$p,LZ,sdo,ldo,NS,ido,ddo,cdo,Ip,BZ,fdo,mdo,jS,gdo,hdo,pdo,Dp,xZ,_do,udo,qS,bdo,vdo,Tdo,Np,kZ,Fdo,Cdo,GS,Mdo,Edo,ydo,jp,RZ,wdo,Ado,OS,Ldo,Bdo,xdo,qp,SZ,kdo,Rdo,XS,Sdo,Pdo,$do,Gp,PZ,Ido,Ddo,VS,Ndo,jdo,qdo,Op,$Z,Gdo,Odo,zS,Xdo,Vdo,zdo,Xp,IZ,Wdo,Qdo,WS,Hdo,Udo,Jdo,Vp,DZ,Ydo,Kdo,QS,Zdo,eco,oco,zp,NZ,rco,tco,HS,aco,nco,sco,Wp,jZ,lco,ico,US,dco,cco,fco,Qp,qZ,mco,gco,JS,hco,pco,_co,Hp,GZ,uco,bco,YS,vco,Tco,Fco,Up,OZ,Cco,Mco,KS,Eco,yco,wco,Jp,XZ,Aco,Lco,ZS,Bco,xco,kco,Yp,VZ,Rco,Sco,eP,Pco,$co,Ico,Kp,zZ,Dco,Nco,oP,jco,qco,Gco,Zp,WZ,Oco,Xco,rP,Vco,zco,Wco,e_,QZ,Qco,Hco,tP,Uco,Jco,Yco,o_,HZ,Kco,Zco,aP,efo,ofo,rfo,r_,UZ,tfo,afo,nP,nfo,sfo,lfo,t_,JZ,ifo,dfo,sP,cfo,ffo,mfo,a_,YZ,gfo,hfo,lP,pfo,_fo,ufo,n_,KZ,bfo,vfo,iP,Tfo,Ffo,Cfo,s_,ZZ,Mfo,Efo,dP,yfo,wfo,Afo,l_,eee,Lfo,Bfo,cP,xfo,kfo,Rfo,i_,oee,Sfo,Pfo,fP,$fo,Ifo,Dfo,d_,ree,Nfo,jfo,mP,qfo,Gfo,Ofo,c_,tee,Xfo,Vfo,gP,zfo,Wfo,Qfo,f_,aee,Hfo,Ufo,hP,Jfo,Yfo,Kfo,m_,nee,Zfo,emo,pP,omo,rmo,tmo,g_,see,amo,nmo,_P,smo,lmo,imo,h_,lee,dmo,cmo,uP,fmo,mmo,gmo,p_,iee,hmo,pmo,bP,_mo,umo,bmo,__,dee,vmo,Tmo,vP,Fmo,Cmo,Mmo,u_,cee,Emo,ymo,TP,wmo,Amo,Lmo,b_,fee,Bmo,xmo,FP,kmo,Rmo,Smo,v_,mee,Pmo,$mo,CP,Imo,Dmo,Nmo,T_,gee,jmo,qmo,MP,Gmo,Omo,Xmo,F_,hee,Vmo,zmo,EP,Wmo,Qmo,Hmo,C_,pee,Umo,Jmo,yP,Ymo,Kmo,Zmo,M_,_ee,ego,ogo,wP,rgo,tgo,ago,E_,uee,ngo,sgo,AP,lgo,igo,dgo,y_,bee,cgo,fgo,LP,mgo,ggo,hgo,w_,vee,pgo,_go,BP,ugo,bgo,vgo,A_,Tee,Tgo,Fgo,xP,Cgo,Mgo,Ego,L_,Fee,ygo,wgo,kP,Ago,Lgo,Bgo,B_,Cee,xgo,kgo,RP,Rgo,Sgo,Pgo,x_,$go,Mee,Igo,Dgo,Eee,Ngo,jgo,yee,qgo,Ggo,e5,Hke,Zi,k_,wee,o5,Ogo,Aee,Xgo,Uke,Yo,r5,Vgo,ed,zgo,Lee,Wgo,Qgo,Bee,Hgo,Ugo,Jgo,t5,Ygo,xee,Kgo,Zgo,eho,zr,a5,oho,kee,rho,tho,od,aho,Ree,nho,sho,See,lho,iho,dho,Pee,cho,fho,n5,mho,Ne,s5,gho,$ee,hho,pho,za,_ho,Iee,uho,bho,Dee,vho,Tho,Nee,Fho,Cho,Mho,k,R_,jee,Eho,yho,SP,who,Aho,Lho,S_,qee,Bho,xho,PP,kho,Rho,Sho,P_,Gee,Pho,$ho,$P,Iho,Dho,Nho,$_,Oee,jho,qho,IP,Gho,Oho,Xho,I_,Xee,Vho,zho,DP,Who,Qho,Hho,D_,Vee,Uho,Jho,NP,Yho,Kho,Zho,N_,zee,epo,opo,jP,rpo,tpo,apo,j_,Wee,npo,spo,qP,lpo,ipo,dpo,q_,Qee,cpo,fpo,GP,mpo,gpo,hpo,G_,Hee,ppo,_po,OP,upo,bpo,vpo,O_,Uee,Tpo,Fpo,XP,Cpo,Mpo,Epo,X_,Jee,ypo,wpo,VP,Apo,Lpo,Bpo,V_,Yee,xpo,kpo,zP,Rpo,Spo,Ppo,z_,Kee,$po,Ipo,WP,Dpo,Npo,jpo,W_,Zee,qpo,Gpo,QP,Opo,Xpo,Vpo,Q_,eoe,zpo,Wpo,HP,Qpo,Hpo,Upo,H_,ooe,Jpo,Ypo,UP,Kpo,Zpo,e_o,U_,roe,o_o,r_o,JP,t_o,a_o,n_o,J_,toe,s_o,l_o,YP,i_o,d_o,c_o,Y_,aoe,f_o,m_o,KP,g_o,h_o,p_o,K_,noe,__o,u_o,ZP,b_o,v_o,T_o,Z_,soe,F_o,C_o,e$,M_o,E_o,y_o,eu,loe,w_o,A_o,o$,L_o,B_o,x_o,ou,ioe,k_o,R_o,r$,S_o,P_o,$_o,ru,doe,I_o,D_o,t$,N_o,j_o,q_o,tu,coe,G_o,O_o,a$,X_o,V_o,z_o,au,foe,W_o,Q_o,n$,H_o,U_o,J_o,nu,moe,Y_o,K_o,s$,Z_o,euo,ouo,su,goe,ruo,tuo,l$,auo,nuo,suo,lu,hoe,luo,iuo,i$,duo,cuo,fuo,iu,poe,muo,guo,d$,huo,puo,_uo,du,_oe,uuo,buo,c$,vuo,Tuo,Fuo,cu,uoe,Cuo,Muo,f$,Euo,yuo,wuo,fu,boe,Auo,Luo,m$,Buo,xuo,kuo,mu,voe,Ruo,Suo,g$,Puo,$uo,Iuo,gu,Toe,Duo,Nuo,h$,juo,quo,Guo,hu,Foe,Ouo,Xuo,p$,Vuo,zuo,Wuo,pu,Coe,Quo,Huo,_$,Uuo,Juo,Yuo,_u,Moe,Kuo,Zuo,u$,e1o,o1o,r1o,uu,t1o,Eoe,a1o,n1o,yoe,s1o,l1o,woe,i1o,d1o,l5,Jke,rd,bu,Aoe,i5,c1o,Loe,f1o,Yke,Ko,d5,m1o,td,g1o,Boe,h1o,p1o,xoe,_1o,u1o,b1o,c5,v1o,koe,T1o,F1o,C1o,Wr,f5,M1o,Roe,E1o,y1o,ad,w1o,Soe,A1o,L1o,Poe,B1o,x1o,k1o,$oe,R1o,S1o,m5,P1o,je,g5,$1o,Ioe,I1o,D1o,Wa,N1o,Doe,j1o,q1o,Noe,G1o,O1o,joe,X1o,V1o,z1o,$,vu,qoe,W1o,Q1o,b$,H1o,U1o,J1o,Tu,Goe,Y1o,K1o,v$,Z1o,e4o,o4o,Fu,Ooe,r4o,t4o,T$,a4o,n4o,s4o,Cu,Xoe,l4o,i4o,F$,d4o,c4o,f4o,Mu,Voe,m4o,g4o,C$,h4o,p4o,_4o,Eu,zoe,u4o,b4o,M$,v4o,T4o,F4o,yu,Woe,C4o,M4o,E$,E4o,y4o,w4o,wu,Qoe,A4o,L4o,y$,B4o,x4o,k4o,Au,Hoe,R4o,S4o,w$,P4o,$4o,I4o,Lu,Uoe,D4o,N4o,A$,j4o,q4o,G4o,Bu,Joe,O4o,X4o,L$,V4o,z4o,W4o,xu,Yoe,Q4o,H4o,B$,U4o,J4o,Y4o,ku,Koe,K4o,Z4o,x$,ebo,obo,rbo,Ru,Zoe,tbo,abo,k$,nbo,sbo,lbo,Su,ere,ibo,dbo,R$,cbo,fbo,mbo,Pu,ore,gbo,hbo,S$,pbo,_bo,ubo,$u,rre,bbo,vbo,P$,Tbo,Fbo,Cbo,Iu,tre,Mbo,Ebo,$$,ybo,wbo,Abo,Du,are,Lbo,Bbo,I$,xbo,kbo,Rbo,Nu,nre,Sbo,Pbo,D$,$bo,Ibo,Dbo,ju,sre,Nbo,jbo,N$,qbo,Gbo,Obo,qu,lre,Xbo,Vbo,j$,zbo,Wbo,Qbo,Gu,ire,Hbo,Ubo,q$,Jbo,Ybo,Kbo,Ou,dre,Zbo,e3o,G$,o3o,r3o,t3o,Xu,cre,a3o,n3o,O$,s3o,l3o,i3o,Vu,fre,d3o,c3o,X$,f3o,m3o,g3o,zu,mre,h3o,p3o,V$,_3o,u3o,b3o,Wu,gre,v3o,T3o,z$,F3o,C3o,M3o,Qu,hre,E3o,y3o,W$,w3o,A3o,L3o,Hu,pre,B3o,x3o,Q$,k3o,R3o,S3o,Uu,_re,P3o,$3o,H$,I3o,D3o,N3o,Ju,ure,j3o,q3o,U$,G3o,O3o,X3o,Yu,bre,V3o,z3o,J$,W3o,Q3o,H3o,Ku,vre,U3o,J3o,Y$,Y3o,K3o,Z3o,Zu,Tre,e2o,o2o,K$,r2o,t2o,a2o,e1,n2o,Fre,s2o,l2o,Cre,i2o,d2o,Mre,c2o,f2o,h5,Kke,nd,o1,Ere,p5,m2o,yre,g2o,Zke,Zo,_5,h2o,sd,p2o,wre,_2o,u2o,Are,b2o,v2o,T2o,u5,F2o,Lre,C2o,M2o,E2o,Qr,b5,y2o,Bre,w2o,A2o,ld,L2o,xre,B2o,x2o,kre,k2o,R2o,S2o,Rre,P2o,$2o,v5,I2o,qe,T5,D2o,Sre,N2o,j2o,Qa,q2o,Pre,G2o,O2o,$re,X2o,V2o,Ire,z2o,W2o,Q2o,I,r1,Dre,H2o,U2o,Z$,J2o,Y2o,K2o,t1,Nre,Z2o,evo,eI,ovo,rvo,tvo,a1,jre,avo,nvo,oI,svo,lvo,ivo,n1,qre,dvo,cvo,rI,fvo,mvo,gvo,s1,Gre,hvo,pvo,tI,_vo,uvo,bvo,l1,Ore,vvo,Tvo,aI,Fvo,Cvo,Mvo,i1,Xre,Evo,yvo,nI,wvo,Avo,Lvo,d1,Vre,Bvo,xvo,sI,kvo,Rvo,Svo,c1,zre,Pvo,$vo,lI,Ivo,Dvo,Nvo,f1,Wre,jvo,qvo,iI,Gvo,Ovo,Xvo,m1,Qre,Vvo,zvo,dI,Wvo,Qvo,Hvo,g1,Hre,Uvo,Jvo,cI,Yvo,Kvo,Zvo,h1,Ure,e6o,o6o,fI,r6o,t6o,a6o,p1,Jre,n6o,s6o,mI,l6o,i6o,d6o,_1,Yre,c6o,f6o,gI,m6o,g6o,h6o,u1,Kre,p6o,_6o,hI,u6o,b6o,v6o,b1,Zre,T6o,F6o,pI,C6o,M6o,E6o,v1,ete,y6o,w6o,_I,A6o,L6o,B6o,T1,ote,x6o,k6o,uI,R6o,S6o,P6o,F1,rte,$6o,I6o,bI,D6o,N6o,j6o,C1,tte,q6o,G6o,vI,O6o,X6o,V6o,M1,ate,z6o,W6o,TI,Q6o,H6o,U6o,E1,nte,J6o,Y6o,FI,K6o,Z6o,eTo,y1,ste,oTo,rTo,CI,tTo,aTo,nTo,w1,lte,sTo,lTo,MI,iTo,dTo,cTo,A1,ite,fTo,mTo,EI,gTo,hTo,pTo,L1,dte,_To,uTo,yI,bTo,vTo,TTo,B1,cte,FTo,CTo,wI,MTo,ETo,yTo,x1,fte,wTo,ATo,AI,LTo,BTo,xTo,k1,mte,kTo,RTo,LI,STo,PTo,$To,R1,gte,ITo,DTo,hte,NTo,jTo,qTo,S1,pte,GTo,OTo,BI,XTo,VTo,zTo,P1,_te,WTo,QTo,xI,HTo,UTo,JTo,$1,ute,YTo,KTo,kI,ZTo,e7o,o7o,I1,bte,r7o,t7o,RI,a7o,n7o,s7o,D1,l7o,vte,i7o,d7o,Tte,c7o,f7o,Fte,m7o,g7o,F5,eRe,id,N1,Cte,C5,h7o,Mte,p7o,oRe,er,M5,_7o,dd,u7o,Ete,b7o,v7o,yte,T7o,F7o,C7o,E5,M7o,wte,E7o,y7o,w7o,Hr,y5,A7o,Ate,L7o,B7o,cd,x7o,Lte,k7o,R7o,Bte,S7o,P7o,$7o,xte,I7o,D7o,w5,N7o,Ge,A5,j7o,kte,q7o,G7o,Ha,O7o,Rte,X7o,V7o,Ste,z7o,W7o,Pte,Q7o,H7o,U7o,se,j1,$te,J7o,Y7o,SI,K7o,Z7o,eFo,q1,Ite,oFo,rFo,PI,tFo,aFo,nFo,G1,Dte,sFo,lFo,$I,iFo,dFo,cFo,O1,Nte,fFo,mFo,II,gFo,hFo,pFo,X1,jte,_Fo,uFo,DI,bFo,vFo,TFo,V1,qte,FFo,CFo,NI,MFo,EFo,yFo,z1,Gte,wFo,AFo,jI,LFo,BFo,xFo,W1,Ote,kFo,RFo,qI,SFo,PFo,$Fo,Q1,Xte,IFo,DFo,GI,NFo,jFo,qFo,H1,Vte,GFo,OFo,OI,XFo,VFo,zFo,U1,zte,WFo,QFo,XI,HFo,UFo,JFo,J1,Wte,YFo,KFo,VI,ZFo,eCo,oCo,Y1,Qte,rCo,tCo,zI,aCo,nCo,sCo,K1,Hte,lCo,iCo,WI,dCo,cCo,fCo,Z1,Ute,mCo,gCo,QI,hCo,pCo,_Co,e4,Jte,uCo,bCo,HI,vCo,TCo,FCo,o4,CCo,Yte,MCo,ECo,Kte,yCo,wCo,Zte,ACo,LCo,L5,rRe,fd,r4,eae,B5,BCo,oae,xCo,tRe,or,x5,kCo,md,RCo,rae,SCo,PCo,tae,$Co,ICo,DCo,k5,NCo,aae,jCo,qCo,GCo,Ur,R5,OCo,nae,XCo,VCo,gd,zCo,sae,WCo,QCo,lae,HCo,UCo,JCo,iae,YCo,KCo,S5,ZCo,Oe,P5,eMo,dae,oMo,rMo,Ua,tMo,cae,aMo,nMo,fae,sMo,lMo,mae,iMo,dMo,cMo,A,t4,gae,fMo,mMo,UI,gMo,hMo,pMo,a4,hae,_Mo,uMo,JI,bMo,vMo,TMo,n4,pae,FMo,CMo,YI,MMo,EMo,yMo,s4,_ae,wMo,AMo,KI,LMo,BMo,xMo,l4,uae,kMo,RMo,ZI,SMo,PMo,$Mo,i4,bae,IMo,DMo,eD,NMo,jMo,qMo,d4,vae,GMo,OMo,oD,XMo,VMo,zMo,c4,Tae,WMo,QMo,rD,HMo,UMo,JMo,f4,Fae,YMo,KMo,tD,ZMo,eEo,oEo,m4,Cae,rEo,tEo,aD,aEo,nEo,sEo,g4,Mae,lEo,iEo,nD,dEo,cEo,fEo,h4,Eae,mEo,gEo,sD,hEo,pEo,_Eo,p4,yae,uEo,bEo,lD,vEo,TEo,FEo,_4,wae,CEo,MEo,iD,EEo,yEo,wEo,u4,Aae,AEo,LEo,dD,BEo,xEo,kEo,b4,Lae,REo,SEo,cD,PEo,$Eo,IEo,v4,Bae,DEo,NEo,fD,jEo,qEo,GEo,T4,xae,OEo,XEo,mD,VEo,zEo,WEo,F4,kae,QEo,HEo,gD,UEo,JEo,YEo,C4,Rae,KEo,ZEo,hD,e5o,o5o,r5o,M4,Sae,t5o,a5o,pD,n5o,s5o,l5o,E4,Pae,i5o,d5o,_D,c5o,f5o,m5o,y4,$ae,g5o,h5o,uD,p5o,_5o,u5o,w4,Iae,b5o,v5o,bD,T5o,F5o,C5o,A4,Dae,M5o,E5o,vD,y5o,w5o,A5o,L4,Nae,L5o,B5o,TD,x5o,k5o,R5o,B4,jae,S5o,P5o,FD,$5o,I5o,D5o,x4,qae,N5o,j5o,CD,q5o,G5o,O5o,k4,Gae,X5o,V5o,MD,z5o,W5o,Q5o,R4,Oae,H5o,U5o,ED,J5o,Y5o,K5o,S4,Xae,Z5o,eyo,yD,oyo,ryo,tyo,P4,Vae,ayo,nyo,wD,syo,lyo,iyo,$4,zae,dyo,cyo,AD,fyo,myo,gyo,I4,Wae,hyo,pyo,LD,_yo,uyo,byo,D4,Qae,vyo,Tyo,BD,Fyo,Cyo,Myo,N4,Hae,Eyo,yyo,xD,wyo,Ayo,Lyo,j4,Uae,Byo,xyo,kD,kyo,Ryo,Syo,q4,Jae,Pyo,$yo,RD,Iyo,Dyo,Nyo,G4,Yae,jyo,qyo,SD,Gyo,Oyo,Xyo,O4,Kae,Vyo,zyo,PD,Wyo,Qyo,Hyo,X4,Zae,Uyo,Jyo,$D,Yyo,Kyo,Zyo,V4,ene,ewo,owo,ID,rwo,two,awo,z4,one,nwo,swo,DD,lwo,iwo,dwo,W4,rne,cwo,fwo,ND,mwo,gwo,hwo,Q4,tne,pwo,_wo,jD,uwo,bwo,vwo,H4,ane,Two,Fwo,qD,Cwo,Mwo,Ewo,U4,ywo,nne,wwo,Awo,sne,Lwo,Bwo,lne,xwo,kwo,$5,aRe,hd,J4,ine,I5,Rwo,dne,Swo,nRe,rr,D5,Pwo,pd,$wo,cne,Iwo,Dwo,fne,Nwo,jwo,qwo,N5,Gwo,mne,Owo,Xwo,Vwo,Jr,j5,zwo,gne,Wwo,Qwo,_d,Hwo,hne,Uwo,Jwo,pne,Ywo,Kwo,Zwo,_ne,eAo,oAo,q5,rAo,Xe,G5,tAo,une,aAo,nAo,Ja,sAo,bne,lAo,iAo,vne,dAo,cAo,Tne,fAo,mAo,gAo,G,Y4,Fne,hAo,pAo,GD,_Ao,uAo,bAo,K4,Cne,vAo,TAo,OD,FAo,CAo,MAo,Z4,Mne,EAo,yAo,XD,wAo,AAo,LAo,eb,Ene,BAo,xAo,VD,kAo,RAo,SAo,ob,yne,PAo,$Ao,zD,IAo,DAo,NAo,rb,wne,jAo,qAo,WD,GAo,OAo,XAo,tb,Ane,VAo,zAo,QD,WAo,QAo,HAo,ab,Lne,UAo,JAo,HD,YAo,KAo,ZAo,nb,Bne,e0o,o0o,UD,r0o,t0o,a0o,sb,xne,n0o,s0o,JD,l0o,i0o,d0o,lb,kne,c0o,f0o,YD,m0o,g0o,h0o,ib,Rne,p0o,_0o,KD,u0o,b0o,v0o,db,Sne,T0o,F0o,ZD,C0o,M0o,E0o,cb,Pne,y0o,w0o,eN,A0o,L0o,B0o,fb,$ne,x0o,k0o,oN,R0o,S0o,P0o,mb,Ine,$0o,I0o,rN,D0o,N0o,j0o,gb,Dne,q0o,G0o,tN,O0o,X0o,V0o,hb,Nne,z0o,W0o,aN,Q0o,H0o,U0o,pb,jne,J0o,Y0o,nN,K0o,Z0o,eLo,_b,qne,oLo,rLo,sN,tLo,aLo,nLo,ub,Gne,sLo,lLo,lN,iLo,dLo,cLo,bb,One,fLo,mLo,iN,gLo,hLo,pLo,vb,Xne,_Lo,uLo,dN,bLo,vLo,TLo,Tb,Vne,FLo,CLo,cN,MLo,ELo,yLo,Fb,zne,wLo,ALo,fN,LLo,BLo,xLo,Cb,Wne,kLo,RLo,mN,SLo,PLo,$Lo,Mb,Qne,ILo,DLo,gN,NLo,jLo,qLo,Eb,Hne,GLo,OLo,hN,XLo,VLo,zLo,yb,WLo,Une,QLo,HLo,Jne,ULo,JLo,Yne,YLo,KLo,O5,sRe,ud,wb,Kne,X5,ZLo,Zne,e8o,lRe,tr,V5,o8o,bd,r8o,ese,t8o,a8o,ose,n8o,s8o,l8o,z5,i8o,rse,d8o,c8o,f8o,Yr,W5,m8o,tse,g8o,h8o,vd,p8o,ase,_8o,u8o,nse,b8o,v8o,T8o,sse,F8o,C8o,Q5,M8o,Ve,H5,E8o,lse,y8o,w8o,Ya,A8o,ise,L8o,B8o,dse,x8o,k8o,cse,R8o,S8o,P8o,da,Ab,fse,$8o,I8o,pN,D8o,N8o,j8o,Lb,mse,q8o,G8o,_N,O8o,X8o,V8o,Bb,gse,z8o,W8o,uN,Q8o,H8o,U8o,xb,hse,J8o,Y8o,bN,K8o,Z8o,e9o,kb,pse,o9o,r9o,vN,t9o,a9o,n9o,Rb,s9o,_se,l9o,i9o,use,d9o,c9o,bse,f9o,m9o,U5,iRe,Td,Sb,vse,J5,g9o,Tse,h9o,dRe,ar,Y5,p9o,Fd,_9o,Fse,u9o,b9o,Cse,v9o,T9o,F9o,K5,C9o,Mse,M9o,E9o,y9o,Kr,Z5,w9o,Ese,A9o,L9o,Cd,B9o,yse,x9o,k9o,wse,R9o,S9o,P9o,Ase,$9o,I9o,ey,D9o,ze,oy,N9o,Lse,j9o,q9o,Ka,G9o,Bse,O9o,X9o,xse,V9o,z9o,kse,W9o,Q9o,H9o,j,Pb,Rse,U9o,J9o,TN,Y9o,K9o,Z9o,$b,Sse,eBo,oBo,FN,rBo,tBo,aBo,Ib,Pse,nBo,sBo,CN,lBo,iBo,dBo,Db,$se,cBo,fBo,MN,mBo,gBo,hBo,Nb,Ise,pBo,_Bo,EN,uBo,bBo,vBo,jb,Dse,TBo,FBo,yN,CBo,MBo,EBo,qb,Nse,yBo,wBo,wN,ABo,LBo,BBo,Gb,jse,xBo,kBo,AN,RBo,SBo,PBo,Ob,qse,$Bo,IBo,LN,DBo,NBo,jBo,Xb,Gse,qBo,GBo,BN,OBo,XBo,VBo,Vb,Ose,zBo,WBo,xN,QBo,HBo,UBo,zb,Xse,JBo,YBo,kN,KBo,ZBo,exo,Wb,Vse,oxo,rxo,RN,txo,axo,nxo,Qb,zse,sxo,lxo,SN,ixo,dxo,cxo,Hb,Wse,fxo,mxo,PN,gxo,hxo,pxo,Ub,Qse,_xo,uxo,$N,bxo,vxo,Txo,Jb,Hse,Fxo,Cxo,IN,Mxo,Exo,yxo,Yb,Use,wxo,Axo,DN,Lxo,Bxo,xxo,Kb,Jse,kxo,Rxo,NN,Sxo,Pxo,$xo,Zb,Yse,Ixo,Dxo,jN,Nxo,jxo,qxo,e3,Kse,Gxo,Oxo,qN,Xxo,Vxo,zxo,o3,Zse,Wxo,Qxo,GN,Hxo,Uxo,Jxo,r3,ele,Yxo,Kxo,ON,Zxo,eko,oko,t3,ole,rko,tko,XN,ako,nko,sko,a3,rle,lko,iko,VN,dko,cko,fko,n3,tle,mko,gko,zN,hko,pko,_ko,s3,ale,uko,bko,WN,vko,Tko,Fko,l3,nle,Cko,Mko,QN,Eko,yko,wko,i3,sle,Ako,Lko,HN,Bko,xko,kko,d3,lle,Rko,Sko,UN,Pko,$ko,Iko,c3,ile,Dko,Nko,JN,jko,qko,Gko,f3,dle,Oko,Xko,YN,Vko,zko,Wko,m3,cle,Qko,Hko,KN,Uko,Jko,Yko,g3,Kko,fle,Zko,eRo,mle,oRo,rRo,gle,tRo,aRo,ry,cRe,Md,h3,hle,ty,nRo,ple,sRo,fRe,nr,ay,lRo,Ed,iRo,_le,dRo,cRo,ule,fRo,mRo,gRo,ny,hRo,ble,pRo,_Ro,uRo,Zr,sy,bRo,vle,vRo,TRo,yd,FRo,Tle,CRo,MRo,Fle,ERo,yRo,wRo,Cle,ARo,LRo,ly,BRo,We,iy,xRo,Mle,kRo,RRo,Za,SRo,Ele,PRo,$Ro,yle,IRo,DRo,wle,NRo,jRo,qRo,R,p3,Ale,GRo,ORo,ZN,XRo,VRo,zRo,_3,Lle,WRo,QRo,ej,HRo,URo,JRo,u3,Ble,YRo,KRo,oj,ZRo,eSo,oSo,b3,xle,rSo,tSo,rj,aSo,nSo,sSo,v3,kle,lSo,iSo,tj,dSo,cSo,fSo,T3,Rle,mSo,gSo,aj,hSo,pSo,_So,F3,Sle,uSo,bSo,nj,vSo,TSo,FSo,C3,Ple,CSo,MSo,sj,ESo,ySo,wSo,M3,$le,ASo,LSo,lj,BSo,xSo,kSo,E3,Ile,RSo,SSo,ij,PSo,$So,ISo,y3,Dle,DSo,NSo,dj,jSo,qSo,GSo,w3,Nle,OSo,XSo,cj,VSo,zSo,WSo,A3,jle,QSo,HSo,fj,USo,JSo,YSo,L3,qle,KSo,ZSo,mj,ePo,oPo,rPo,B3,Gle,tPo,aPo,gj,nPo,sPo,lPo,x3,Ole,iPo,dPo,hj,cPo,fPo,mPo,k3,Xle,gPo,hPo,pj,pPo,_Po,uPo,R3,Vle,bPo,vPo,_j,TPo,FPo,CPo,S3,zle,MPo,EPo,uj,yPo,wPo,APo,P3,Wle,LPo,BPo,bj,xPo,kPo,RPo,$3,Qle,SPo,PPo,vj,$Po,IPo,DPo,I3,Hle,NPo,jPo,Tj,qPo,GPo,OPo,D3,Ule,XPo,VPo,Fj,zPo,WPo,QPo,N3,Jle,HPo,UPo,Cj,JPo,YPo,KPo,j3,Yle,ZPo,e$o,Mj,o$o,r$o,t$o,q3,Kle,a$o,n$o,Ej,s$o,l$o,i$o,G3,Zle,d$o,c$o,yj,f$o,m$o,g$o,O3,eie,h$o,p$o,wj,_$o,u$o,b$o,X3,oie,v$o,T$o,Aj,F$o,C$o,M$o,V3,rie,E$o,y$o,Lj,w$o,A$o,L$o,z3,tie,B$o,x$o,Bj,k$o,R$o,S$o,W3,aie,P$o,$$o,xj,I$o,D$o,N$o,Q3,nie,j$o,q$o,kj,G$o,O$o,X$o,H3,sie,V$o,z$o,Rj,W$o,Q$o,H$o,U3,lie,U$o,J$o,Sj,Y$o,K$o,Z$o,J3,iie,eIo,oIo,Pj,rIo,tIo,aIo,Y3,die,nIo,sIo,$j,lIo,iIo,dIo,K3,cie,cIo,fIo,Ij,mIo,gIo,hIo,Z3,fie,pIo,_Io,Dj,uIo,bIo,vIo,e2,TIo,mie,FIo,CIo,gie,MIo,EIo,hie,yIo,wIo,dy,mRe,wd,o2,pie,cy,AIo,_ie,LIo,gRe,sr,fy,BIo,Ad,xIo,uie,kIo,RIo,bie,SIo,PIo,$Io,my,IIo,vie,DIo,NIo,jIo,et,gy,qIo,Tie,GIo,OIo,Ld,XIo,Fie,VIo,zIo,Cie,WIo,QIo,HIo,Mie,UIo,JIo,hy,YIo,Qe,py,KIo,Eie,ZIo,eDo,en,oDo,yie,rDo,tDo,wie,aDo,nDo,Aie,sDo,lDo,iDo,Lie,r2,Bie,dDo,cDo,Nj,fDo,mDo,gDo,t2,hDo,xie,pDo,_Do,kie,uDo,bDo,Rie,vDo,TDo,_y,hRe,Bd,a2,Sie,uy,FDo,Pie,CDo,pRe,lr,by,MDo,xd,EDo,$ie,yDo,wDo,Iie,ADo,LDo,BDo,vy,xDo,Die,kDo,RDo,SDo,ot,Ty,PDo,Nie,$Do,IDo,kd,DDo,jie,NDo,jDo,qie,qDo,GDo,ODo,Gie,XDo,VDo,Fy,zDo,He,Cy,WDo,Oie,QDo,HDo,on,UDo,Xie,JDo,YDo,Vie,KDo,ZDo,zie,eNo,oNo,rNo,ge,n2,Wie,tNo,aNo,jj,nNo,sNo,lNo,s2,Qie,iNo,dNo,qj,cNo,fNo,mNo,qs,Hie,gNo,hNo,Gj,pNo,_No,Oj,uNo,bNo,vNo,l2,Uie,TNo,FNo,Xj,CNo,MNo,ENo,ma,Jie,yNo,wNo,Vj,ANo,LNo,zj,BNo,xNo,Wj,kNo,RNo,SNo,i2,Yie,PNo,$No,Qj,INo,DNo,NNo,d2,Kie,jNo,qNo,Hj,GNo,ONo,XNo,c2,Zie,VNo,zNo,Uj,WNo,QNo,HNo,f2,ede,UNo,JNo,Jj,YNo,KNo,ZNo,m2,ode,ejo,ojo,Yj,rjo,tjo,ajo,g2,rde,njo,sjo,Kj,ljo,ijo,djo,h2,cjo,tde,fjo,mjo,ade,gjo,hjo,nde,pjo,_jo,My,_Re,Rd,p2,sde,Ey,ujo,lde,bjo,uRe,ir,yy,vjo,Sd,Tjo,ide,Fjo,Cjo,dde,Mjo,Ejo,yjo,wy,wjo,cde,Ajo,Ljo,Bjo,rt,Ay,xjo,fde,kjo,Rjo,Pd,Sjo,mde,Pjo,$jo,gde,Ijo,Djo,Njo,hde,jjo,qjo,Ly,Gjo,Ue,By,Ojo,pde,Xjo,Vjo,rn,zjo,_de,Wjo,Qjo,ude,Hjo,Ujo,bde,Jjo,Yjo,Kjo,vde,_2,Tde,Zjo,eqo,Zj,oqo,rqo,tqo,u2,aqo,Fde,nqo,sqo,Cde,lqo,iqo,Mde,dqo,cqo,xy,bRe,$d,b2,Ede,ky,fqo,yde,mqo,vRe,dr,Ry,gqo,Id,hqo,wde,pqo,_qo,Ade,uqo,bqo,vqo,Sy,Tqo,Lde,Fqo,Cqo,Mqo,tt,Py,Eqo,Bde,yqo,wqo,Dd,Aqo,xde,Lqo,Bqo,kde,xqo,kqo,Rqo,Rde,Sqo,Pqo,$y,$qo,Je,Iy,Iqo,Sde,Dqo,Nqo,tn,jqo,Pde,qqo,Gqo,$de,Oqo,Xqo,Ide,Vqo,zqo,Wqo,ke,v2,Dde,Qqo,Hqo,eq,Uqo,Jqo,Yqo,T2,Nde,Kqo,Zqo,oq,eGo,oGo,rGo,F2,jde,tGo,aGo,rq,nGo,sGo,lGo,C2,qde,iGo,dGo,tq,cGo,fGo,mGo,M2,Gde,gGo,hGo,aq,pGo,_Go,uGo,E2,Ode,bGo,vGo,nq,TGo,FGo,CGo,y2,Xde,MGo,EGo,sq,yGo,wGo,AGo,w2,Vde,LGo,BGo,lq,xGo,kGo,RGo,A2,SGo,zde,PGo,$Go,Wde,IGo,DGo,Qde,NGo,jGo,Dy,TRe,Nd,L2,Hde,Ny,qGo,Ude,GGo,FRe,cr,jy,OGo,jd,XGo,Jde,VGo,zGo,Yde,WGo,QGo,HGo,qy,UGo,Kde,JGo,YGo,KGo,at,Gy,ZGo,Zde,eOo,oOo,qd,rOo,ece,tOo,aOo,oce,nOo,sOo,lOo,rce,iOo,dOo,Oy,cOo,Ye,Xy,fOo,tce,mOo,gOo,an,hOo,ace,pOo,_Oo,nce,uOo,bOo,sce,vOo,TOo,FOo,nn,B2,lce,COo,MOo,iq,EOo,yOo,wOo,x2,ice,AOo,LOo,dq,BOo,xOo,kOo,k2,dce,ROo,SOo,cq,POo,$Oo,IOo,R2,cce,DOo,NOo,fq,jOo,qOo,GOo,S2,OOo,fce,XOo,VOo,mce,zOo,WOo,gce,QOo,HOo,Vy,CRe,Gd,P2,hce,zy,UOo,pce,JOo,MRe,fr,Wy,YOo,Od,KOo,_ce,ZOo,eXo,uce,oXo,rXo,tXo,Qy,aXo,bce,nXo,sXo,lXo,nt,Hy,iXo,vce,dXo,cXo,Xd,fXo,Tce,mXo,gXo,Fce,hXo,pXo,_Xo,Cce,uXo,bXo,Uy,vXo,Ke,Jy,TXo,Mce,FXo,CXo,sn,MXo,Ece,EXo,yXo,yce,wXo,AXo,wce,LXo,BXo,xXo,Re,$2,Ace,kXo,RXo,mq,SXo,PXo,$Xo,I2,Lce,IXo,DXo,gq,NXo,jXo,qXo,D2,Bce,GXo,OXo,hq,XXo,VXo,zXo,N2,xce,WXo,QXo,pq,HXo,UXo,JXo,j2,kce,YXo,KXo,_q,ZXo,eVo,oVo,q2,Rce,rVo,tVo,uq,aVo,nVo,sVo,G2,Sce,lVo,iVo,bq,dVo,cVo,fVo,O2,Pce,mVo,gVo,vq,hVo,pVo,_Vo,X2,uVo,$ce,bVo,vVo,Ice,TVo,FVo,Dce,CVo,MVo,Yy,ERe,Vd,V2,Nce,Ky,EVo,jce,yVo,yRe,mr,Zy,wVo,zd,AVo,qce,LVo,BVo,Gce,xVo,kVo,RVo,ew,SVo,Oce,PVo,$Vo,IVo,st,ow,DVo,Xce,NVo,jVo,Wd,qVo,Vce,GVo,OVo,zce,XVo,VVo,zVo,Wce,WVo,QVo,rw,HVo,Ze,tw,UVo,Qce,JVo,YVo,ln,KVo,Hce,ZVo,ezo,Uce,ozo,rzo,Jce,tzo,azo,nzo,aw,z2,Yce,szo,lzo,Tq,izo,dzo,czo,W2,Kce,fzo,mzo,Fq,gzo,hzo,pzo,Q2,_zo,Zce,uzo,bzo,efe,vzo,Tzo,ofe,Fzo,Czo,nw,wRe,Qd,H2,rfe,sw,Mzo,tfe,Ezo,ARe,gr,lw,yzo,Hd,wzo,afe,Azo,Lzo,nfe,Bzo,xzo,kzo,iw,Rzo,sfe,Szo,Pzo,$zo,lt,dw,Izo,lfe,Dzo,Nzo,Ud,jzo,ife,qzo,Gzo,dfe,Ozo,Xzo,Vzo,cfe,zzo,Wzo,cw,Qzo,eo,fw,Hzo,ffe,Uzo,Jzo,dn,Yzo,mfe,Kzo,Zzo,gfe,eWo,oWo,hfe,rWo,tWo,aWo,cn,U2,pfe,nWo,sWo,Cq,lWo,iWo,dWo,J2,_fe,cWo,fWo,Mq,mWo,gWo,hWo,Y2,ufe,pWo,_Wo,Eq,uWo,bWo,vWo,K2,bfe,TWo,FWo,yq,CWo,MWo,EWo,Z2,yWo,vfe,wWo,AWo,Tfe,LWo,BWo,Ffe,xWo,kWo,mw,LRe,Jd,ev,Cfe,gw,RWo,Mfe,SWo,BRe,hr,hw,PWo,Yd,$Wo,Efe,IWo,DWo,yfe,NWo,jWo,qWo,pw,GWo,wfe,OWo,XWo,VWo,it,_w,zWo,Afe,WWo,QWo,Kd,HWo,Lfe,UWo,JWo,Bfe,YWo,KWo,ZWo,xfe,eQo,oQo,uw,rQo,oo,bw,tQo,kfe,aQo,nQo,fn,sQo,Rfe,lQo,iQo,Sfe,dQo,cQo,Pfe,fQo,mQo,gQo,Zd,ov,$fe,hQo,pQo,wq,_Qo,uQo,bQo,rv,Ife,vQo,TQo,Aq,FQo,CQo,MQo,tv,Dfe,EQo,yQo,Lq,wQo,AQo,LQo,av,BQo,Nfe,xQo,kQo,jfe,RQo,SQo,qfe,PQo,$Qo,vw,xRe,ec,nv,Gfe,Tw,IQo,Ofe,DQo,kRe,pr,Fw,NQo,oc,jQo,Xfe,qQo,GQo,Vfe,OQo,XQo,VQo,Cw,zQo,zfe,WQo,QQo,HQo,dt,Mw,UQo,Wfe,JQo,YQo,rc,KQo,Qfe,ZQo,eHo,Hfe,oHo,rHo,tHo,Ufe,aHo,nHo,Ew,sHo,ro,yw,lHo,Jfe,iHo,dHo,mn,cHo,Yfe,fHo,mHo,Kfe,gHo,hHo,Zfe,pHo,_Ho,uHo,eme,sv,ome,bHo,vHo,Bq,THo,FHo,CHo,lv,MHo,rme,EHo,yHo,tme,wHo,AHo,ame,LHo,BHo,ww,RRe,tc,iv,nme,Aw,xHo,sme,kHo,SRe,_r,Lw,RHo,ac,SHo,lme,PHo,$Ho,ime,IHo,DHo,NHo,Bw,jHo,dme,qHo,GHo,OHo,ct,xw,XHo,cme,VHo,zHo,nc,WHo,fme,QHo,HHo,mme,UHo,JHo,YHo,gme,KHo,ZHo,kw,eUo,to,Rw,oUo,hme,rUo,tUo,gn,aUo,pme,nUo,sUo,_me,lUo,iUo,ume,dUo,cUo,fUo,bme,dv,vme,mUo,gUo,xq,hUo,pUo,_Uo,cv,uUo,Tme,bUo,vUo,Fme,TUo,FUo,Cme,CUo,MUo,Sw,PRe,sc,fv,Mme,Pw,EUo,Eme,yUo,$Re,ur,$w,wUo,lc,AUo,yme,LUo,BUo,wme,xUo,kUo,RUo,Iw,SUo,Ame,PUo,$Uo,IUo,ft,Dw,DUo,Lme,NUo,jUo,ic,qUo,Bme,GUo,OUo,xme,XUo,VUo,zUo,kme,WUo,QUo,Nw,HUo,ao,jw,UUo,Rme,JUo,YUo,hn,KUo,Sme,ZUo,eJo,Pme,oJo,rJo,$me,tJo,aJo,nJo,dc,mv,Ime,sJo,lJo,kq,iJo,dJo,cJo,gv,Dme,fJo,mJo,Rq,gJo,hJo,pJo,hv,Nme,_Jo,uJo,Sq,bJo,vJo,TJo,pv,FJo,jme,CJo,MJo,qme,EJo,yJo,Gme,wJo,AJo,qw,IRe,cc,_v,Ome,Gw,LJo,Xme,BJo,DRe,br,Ow,xJo,fc,kJo,Vme,RJo,SJo,zme,PJo,$Jo,IJo,Xw,DJo,Wme,NJo,jJo,qJo,mt,Vw,GJo,Qme,OJo,XJo,mc,VJo,Hme,zJo,WJo,Ume,QJo,HJo,UJo,Jme,JJo,YJo,zw,KJo,no,Ww,ZJo,Yme,eYo,oYo,pn,rYo,Kme,tYo,aYo,Zme,nYo,sYo,ege,lYo,iYo,dYo,oge,uv,rge,cYo,fYo,Pq,mYo,gYo,hYo,bv,pYo,tge,_Yo,uYo,age,bYo,vYo,nge,TYo,FYo,Qw,NRe,gc,vv,sge,Hw,CYo,lge,MYo,jRe,vr,Uw,EYo,hc,yYo,ige,wYo,AYo,dge,LYo,BYo,xYo,Jw,kYo,cge,RYo,SYo,PYo,gt,Yw,$Yo,fge,IYo,DYo,pc,NYo,mge,jYo,qYo,gge,GYo,OYo,XYo,hge,VYo,zYo,Kw,WYo,ho,Zw,QYo,pge,HYo,UYo,_n,JYo,_ge,YYo,KYo,uge,ZYo,eKo,bge,oKo,rKo,tKo,B,Tv,vge,aKo,nKo,$q,sKo,lKo,iKo,Fv,Tge,dKo,cKo,Iq,fKo,mKo,gKo,Cv,Fge,hKo,pKo,Dq,_Ko,uKo,bKo,Mv,Cge,vKo,TKo,Nq,FKo,CKo,MKo,Ev,Mge,EKo,yKo,jq,wKo,AKo,LKo,yv,Ege,BKo,xKo,qq,kKo,RKo,SKo,wv,yge,PKo,$Ko,Gq,IKo,DKo,NKo,Av,wge,jKo,qKo,Oq,GKo,OKo,XKo,Lv,Age,VKo,zKo,Xq,WKo,QKo,HKo,Bv,Lge,UKo,JKo,Vq,YKo,KKo,ZKo,xv,Bge,eZo,oZo,zq,rZo,tZo,aZo,kv,xge,nZo,sZo,Wq,lZo,iZo,dZo,Rv,kge,cZo,fZo,Qq,mZo,gZo,hZo,Sv,Rge,pZo,_Zo,Hq,uZo,bZo,vZo,Pv,Sge,TZo,FZo,Uq,CZo,MZo,EZo,$v,Pge,yZo,wZo,Jq,AZo,LZo,BZo,Gs,$ge,xZo,kZo,Yq,RZo,SZo,Kq,PZo,$Zo,IZo,Iv,Ige,DZo,NZo,Zq,jZo,qZo,GZo,Dv,Dge,OZo,XZo,eG,VZo,zZo,WZo,Nv,Nge,QZo,HZo,oG,UZo,JZo,YZo,jv,jge,KZo,ZZo,rG,eer,oer,rer,qv,qge,ter,aer,tG,ner,ser,ler,Gv,Gge,ier,der,aG,cer,fer,mer,Ov,Oge,ger,her,nG,per,_er,uer,Xv,Xge,ber,ver,sG,Ter,Fer,Cer,Vv,Vge,Mer,Eer,lG,yer,wer,Aer,zv,zge,Ler,Ber,iG,xer,ker,Rer,Wv,Wge,Ser,Per,dG,$er,Ier,Der,Qv,Qge,Ner,jer,cG,qer,Ger,Oer,Hv,Hge,Xer,Ver,fG,zer,Wer,Qer,Uv,Uge,Her,Uer,mG,Jer,Yer,Ker,Jv,Jge,Zer,eor,gG,oor,ror,tor,Yv,Yge,aor,nor,hG,sor,lor,ior,Kv,Kge,dor,cor,pG,mor,gor,hor,Zv,Zge,por,_or,_G,uor,bor,vor,e6,ehe,Tor,For,uG,Cor,Mor,Eor,o6,ohe,yor,wor,bG,Aor,Lor,Bor,r6,rhe,xor,kor,vG,Ror,Sor,Por,t6,the,$or,Ior,TG,Dor,Nor,jor,a6,ahe,qor,Gor,FG,Oor,Xor,Vor,n6,nhe,zor,Wor,CG,Qor,Hor,Uor,s6,she,Jor,Yor,MG,Kor,Zor,err,l6,lhe,orr,rrr,EG,trr,arr,nrr,ihe,srr,lrr,eA,qRe,_c,i6,dhe,oA,irr,che,drr,GRe,Tr,rA,crr,uc,frr,fhe,mrr,grr,mhe,hrr,prr,_rr,tA,urr,ghe,brr,vrr,Trr,ht,aA,Frr,hhe,Crr,Mrr,bc,Err,phe,yrr,wrr,_he,Arr,Lrr,Brr,uhe,xrr,krr,nA,Rrr,po,sA,Srr,bhe,Prr,$rr,un,Irr,vhe,Drr,Nrr,The,jrr,qrr,Fhe,Grr,Orr,Xrr,H,d6,Che,Vrr,zrr,yG,Wrr,Qrr,Hrr,c6,Mhe,Urr,Jrr,wG,Yrr,Krr,Zrr,f6,Ehe,etr,otr,AG,rtr,ttr,atr,m6,yhe,ntr,str,LG,ltr,itr,dtr,g6,whe,ctr,ftr,BG,mtr,gtr,htr,h6,Ahe,ptr,_tr,xG,utr,btr,vtr,p6,Lhe,Ttr,Ftr,kG,Ctr,Mtr,Etr,_6,Bhe,ytr,wtr,RG,Atr,Ltr,Btr,u6,xhe,xtr,ktr,SG,Rtr,Str,Ptr,b6,khe,$tr,Itr,PG,Dtr,Ntr,jtr,v6,Rhe,qtr,Gtr,$G,Otr,Xtr,Vtr,T6,She,ztr,Wtr,IG,Qtr,Htr,Utr,F6,Phe,Jtr,Ytr,DG,Ktr,Ztr,ear,C6,$he,oar,rar,NG,tar,aar,nar,M6,Ihe,sar,lar,jG,iar,dar,car,E6,Dhe,far,mar,qG,gar,har,par,y6,Nhe,_ar,uar,GG,bar,Tar,Far,w6,jhe,Car,Mar,OG,Ear,yar,war,A6,qhe,Aar,Lar,XG,Bar,xar,kar,L6,Ghe,Rar,Sar,VG,Par,$ar,Iar,B6,Ohe,Dar,Nar,zG,jar,qar,Gar,x6,Xhe,Oar,Xar,WG,Var,zar,War,Vhe,Qar,Har,lA,ORe,vc,k6,zhe,iA,Uar,Whe,Jar,XRe,Fr,dA,Yar,Tc,Kar,Qhe,Zar,enr,Hhe,onr,rnr,tnr,cA,anr,Uhe,nnr,snr,lnr,pt,fA,inr,Jhe,dnr,cnr,Fc,fnr,Yhe,mnr,gnr,Khe,hnr,pnr,_nr,Zhe,unr,bnr,mA,vnr,_o,gA,Tnr,epe,Fnr,Cnr,bn,Mnr,ope,Enr,ynr,rpe,wnr,Anr,tpe,Lnr,Bnr,xnr,ce,R6,ape,knr,Rnr,QG,Snr,Pnr,$nr,S6,npe,Inr,Dnr,HG,Nnr,jnr,qnr,P6,spe,Gnr,Onr,UG,Xnr,Vnr,znr,$6,lpe,Wnr,Qnr,JG,Hnr,Unr,Jnr,I6,ipe,Ynr,Knr,YG,Znr,esr,osr,D6,dpe,rsr,tsr,KG,asr,nsr,ssr,N6,cpe,lsr,isr,ZG,dsr,csr,fsr,j6,fpe,msr,gsr,eO,hsr,psr,_sr,q6,mpe,usr,bsr,oO,vsr,Tsr,Fsr,G6,gpe,Csr,Msr,rO,Esr,ysr,wsr,O6,hpe,Asr,Lsr,tO,Bsr,xsr,ksr,X6,ppe,Rsr,Ssr,aO,Psr,$sr,Isr,_pe,Dsr,Nsr,hA,VRe,Cc,V6,upe,pA,jsr,bpe,qsr,zRe,Cr,_A,Gsr,Mc,Osr,vpe,Xsr,Vsr,Tpe,zsr,Wsr,Qsr,uA,Hsr,Fpe,Usr,Jsr,Ysr,_t,bA,Ksr,Cpe,Zsr,elr,Ec,olr,Mpe,rlr,tlr,Epe,alr,nlr,slr,ype,llr,ilr,vA,dlr,uo,TA,clr,wpe,flr,mlr,vn,glr,Ape,hlr,plr,Lpe,_lr,ulr,Bpe,blr,vlr,Tlr,FA,z6,xpe,Flr,Clr,nO,Mlr,Elr,ylr,W6,kpe,wlr,Alr,sO,Llr,Blr,xlr,Rpe,klr,Rlr,CA,WRe,yc,Q6,Spe,MA,Slr,Ppe,Plr,QRe,Mr,EA,$lr,wc,Ilr,$pe,Dlr,Nlr,Ipe,jlr,qlr,Glr,yA,Olr,Dpe,Xlr,Vlr,zlr,ut,wA,Wlr,Npe,Qlr,Hlr,Ac,Ulr,jpe,Jlr,Ylr,qpe,Klr,Zlr,eir,Gpe,oir,rir,AA,tir,bo,LA,air,Ope,nir,sir,Tn,lir,Xpe,iir,dir,Vpe,cir,fir,zpe,mir,gir,hir,J,H6,Wpe,pir,_ir,lO,uir,bir,vir,U6,Qpe,Tir,Fir,iO,Cir,Mir,Eir,J6,Hpe,yir,wir,dO,Air,Lir,Bir,Y6,Upe,xir,kir,cO,Rir,Sir,Pir,K6,Jpe,$ir,Iir,fO,Dir,Nir,jir,Z6,Ype,qir,Gir,mO,Oir,Xir,Vir,eT,Kpe,zir,Wir,gO,Qir,Hir,Uir,oT,Zpe,Jir,Yir,hO,Kir,Zir,edr,rT,e_e,odr,rdr,pO,tdr,adr,ndr,tT,o_e,sdr,ldr,_O,idr,ddr,cdr,aT,r_e,fdr,mdr,uO,gdr,hdr,pdr,nT,t_e,_dr,udr,bO,bdr,vdr,Tdr,sT,a_e,Fdr,Cdr,vO,Mdr,Edr,ydr,lT,n_e,wdr,Adr,TO,Ldr,Bdr,xdr,iT,s_e,kdr,Rdr,FO,Sdr,Pdr,$dr,dT,l_e,Idr,Ddr,CO,Ndr,jdr,qdr,cT,i_e,Gdr,Odr,MO,Xdr,Vdr,zdr,fT,d_e,Wdr,Qdr,EO,Hdr,Udr,Jdr,mT,c_e,Ydr,Kdr,yO,Zdr,ecr,ocr,gT,f_e,rcr,tcr,wO,acr,ncr,scr,m_e,lcr,icr,BA,HRe,Lc,hT,g_e,xA,dcr,h_e,ccr,URe,Er,kA,fcr,Bc,mcr,p_e,gcr,hcr,__e,pcr,_cr,ucr,RA,bcr,u_e,vcr,Tcr,Fcr,bt,SA,Ccr,b_e,Mcr,Ecr,xc,ycr,v_e,wcr,Acr,T_e,Lcr,Bcr,xcr,F_e,kcr,Rcr,PA,Scr,vo,$A,Pcr,C_e,$cr,Icr,Fn,Dcr,M_e,Ncr,jcr,E_e,qcr,Gcr,y_e,Ocr,Xcr,Vcr,ue,pT,w_e,zcr,Wcr,AO,Qcr,Hcr,Ucr,_T,A_e,Jcr,Ycr,LO,Kcr,Zcr,efr,uT,L_e,ofr,rfr,BO,tfr,afr,nfr,bT,B_e,sfr,lfr,xO,ifr,dfr,cfr,vT,x_e,ffr,mfr,kO,gfr,hfr,pfr,TT,k_e,_fr,ufr,RO,bfr,vfr,Tfr,FT,R_e,Ffr,Cfr,SO,Mfr,Efr,yfr,CT,S_e,wfr,Afr,PO,Lfr,Bfr,xfr,MT,P_e,kfr,Rfr,$O,Sfr,Pfr,$fr,ET,$_e,Ifr,Dfr,IO,Nfr,jfr,qfr,I_e,Gfr,Ofr,IA,JRe,kc,yT,D_e,DA,Xfr,N_e,Vfr,YRe,yr,NA,zfr,Rc,Wfr,j_e,Qfr,Hfr,q_e,Ufr,Jfr,Yfr,jA,Kfr,G_e,Zfr,emr,omr,vt,qA,rmr,O_e,tmr,amr,Sc,nmr,X_e,smr,lmr,V_e,imr,dmr,cmr,z_e,fmr,mmr,GA,gmr,To,OA,hmr,W_e,pmr,_mr,Cn,umr,Q_e,bmr,vmr,H_e,Tmr,Fmr,U_e,Cmr,Mmr,Emr,X,wT,J_e,ymr,wmr,DO,Amr,Lmr,Bmr,AT,Y_e,xmr,kmr,NO,Rmr,Smr,Pmr,LT,K_e,$mr,Imr,jO,Dmr,Nmr,jmr,BT,Z_e,qmr,Gmr,qO,Omr,Xmr,Vmr,xT,eue,zmr,Wmr,GO,Qmr,Hmr,Umr,kT,oue,Jmr,Ymr,OO,Kmr,Zmr,egr,RT,rue,ogr,rgr,XO,tgr,agr,ngr,ST,tue,sgr,lgr,VO,igr,dgr,cgr,PT,aue,fgr,mgr,zO,ggr,hgr,pgr,$T,nue,_gr,ugr,WO,bgr,vgr,Tgr,IT,sue,Fgr,Cgr,QO,Mgr,Egr,ygr,DT,lue,wgr,Agr,HO,Lgr,Bgr,xgr,NT,iue,kgr,Rgr,UO,Sgr,Pgr,$gr,jT,due,Igr,Dgr,JO,Ngr,jgr,qgr,qT,cue,Ggr,Ogr,YO,Xgr,Vgr,zgr,GT,fue,Wgr,Qgr,KO,Hgr,Ugr,Jgr,OT,mue,Ygr,Kgr,ZO,Zgr,ehr,ohr,XT,gue,rhr,thr,eX,ahr,nhr,shr,VT,hue,lhr,ihr,oX,dhr,chr,fhr,zT,pue,mhr,ghr,rX,hhr,phr,_hr,WT,_ue,uhr,bhr,tX,vhr,Thr,Fhr,QT,uue,Chr,Mhr,aX,Ehr,yhr,whr,HT,bue,Ahr,Lhr,nX,Bhr,xhr,khr,UT,vue,Rhr,Shr,sX,Phr,$hr,Ihr,JT,Tue,Dhr,Nhr,lX,jhr,qhr,Ghr,YT,Fue,Ohr,Xhr,iX,Vhr,zhr,Whr,Cue,Qhr,Hhr,XA,KRe,Pc,KT,Mue,VA,Uhr,Eue,Jhr,ZRe,wr,zA,Yhr,$c,Khr,yue,Zhr,epr,wue,opr,rpr,tpr,WA,apr,Aue,npr,spr,lpr,Tt,QA,ipr,Lue,dpr,cpr,Ic,fpr,Bue,mpr,gpr,xue,hpr,ppr,_pr,kue,upr,bpr,HA,vpr,Fo,UA,Tpr,Rue,Fpr,Cpr,Mn,Mpr,Sue,Epr,ypr,Pue,wpr,Apr,$ue,Lpr,Bpr,xpr,ae,ZT,Iue,kpr,Rpr,dX,Spr,Ppr,$pr,e7,Due,Ipr,Dpr,cX,Npr,jpr,qpr,o7,Nue,Gpr,Opr,fX,Xpr,Vpr,zpr,r7,jue,Wpr,Qpr,mX,Hpr,Upr,Jpr,t7,que,Ypr,Kpr,gX,Zpr,e_r,o_r,a7,Gue,r_r,t_r,hX,a_r,n_r,s_r,n7,Oue,l_r,i_r,pX,d_r,c_r,f_r,s7,Xue,m_r,g_r,_X,h_r,p_r,__r,l7,Vue,u_r,b_r,uX,v_r,T_r,F_r,i7,zue,C_r,M_r,bX,E_r,y_r,w_r,d7,Wue,A_r,L_r,vX,B_r,x_r,k_r,c7,Que,R_r,S_r,TX,P_r,$_r,I_r,f7,Hue,D_r,N_r,FX,j_r,q_r,G_r,m7,Uue,O_r,X_r,CX,V_r,z_r,W_r,g7,Jue,Q_r,H_r,MX,U_r,J_r,Y_r,h7,Yue,K_r,Z_r,EX,eur,our,rur,p7,Kue,tur,aur,yX,nur,sur,lur,Zue,iur,dur,JA,eSe,Dc,_7,e1e,YA,cur,o1e,fur,oSe,Ar,KA,mur,Nc,gur,r1e,hur,pur,t1e,_ur,uur,bur,ZA,vur,a1e,Tur,Fur,Cur,Ft,e0,Mur,n1e,Eur,yur,jc,wur,s1e,Aur,Lur,l1e,Bur,xur,kur,i1e,Rur,Sur,o0,Pur,Co,r0,$ur,d1e,Iur,Dur,En,Nur,c1e,jur,qur,f1e,Gur,Our,m1e,Xur,Vur,zur,g1e,u7,h1e,Wur,Qur,wX,Hur,Uur,Jur,p1e,Yur,Kur,t0,rSe,qc,b7,_1e,a0,Zur,u1e,e1r,tSe,Lr,n0,o1r,Gc,r1r,b1e,t1r,a1r,v1e,n1r,s1r,l1r,s0,i1r,T1e,d1r,c1r,f1r,Ct,l0,m1r,F1e,g1r,h1r,Oc,p1r,C1e,_1r,u1r,M1e,b1r,v1r,T1r,E1e,F1r,C1r,i0,M1r,Mo,d0,E1r,y1e,y1r,w1r,yn,A1r,w1e,L1r,B1r,A1e,x1r,k1r,L1e,R1r,S1r,P1r,Y,v7,B1e,$1r,I1r,AX,D1r,N1r,j1r,T7,x1e,q1r,G1r,LX,O1r,X1r,V1r,F7,k1e,z1r,W1r,BX,Q1r,H1r,U1r,C7,R1e,J1r,Y1r,xX,K1r,Z1r,e4r,M7,S1e,o4r,r4r,kX,t4r,a4r,n4r,E7,P1e,s4r,l4r,RX,i4r,d4r,c4r,y7,$1e,f4r,m4r,SX,g4r,h4r,p4r,w7,I1e,_4r,u4r,PX,b4r,v4r,T4r,A7,D1e,F4r,C4r,$X,M4r,E4r,y4r,L7,N1e,w4r,A4r,IX,L4r,B4r,x4r,B7,j1e,k4r,R4r,DX,S4r,P4r,$4r,x7,q1e,I4r,D4r,NX,N4r,j4r,q4r,k7,G1e,G4r,O4r,jX,X4r,V4r,z4r,R7,O1e,W4r,Q4r,qX,H4r,U4r,J4r,S7,X1e,Y4r,K4r,GX,Z4r,ebr,obr,P7,V1e,rbr,tbr,OX,abr,nbr,sbr,$7,z1e,lbr,ibr,XX,dbr,cbr,fbr,I7,W1e,mbr,gbr,VX,hbr,pbr,_br,D7,Q1e,ubr,bbr,zX,vbr,Tbr,Fbr,N7,H1e,Cbr,Mbr,WX,Ebr,ybr,wbr,U1e,Abr,Lbr,c0,aSe,Xc,j7,J1e,f0,Bbr,Y1e,xbr,nSe,Br,m0,kbr,Vc,Rbr,K1e,Sbr,Pbr,Z1e,$br,Ibr,Dbr,g0,Nbr,e4e,jbr,qbr,Gbr,Mt,h0,Obr,o4e,Xbr,Vbr,zc,zbr,r4e,Wbr,Qbr,t4e,Hbr,Ubr,Jbr,a4e,Ybr,Kbr,p0,Zbr,Eo,_0,e3r,n4e,o3r,r3r,wn,t3r,s4e,a3r,n3r,l4e,s3r,l3r,i4e,i3r,d3r,c3r,K,q7,d4e,f3r,m3r,QX,g3r,h3r,p3r,G7,c4e,_3r,u3r,HX,b3r,v3r,T3r,O7,f4e,F3r,C3r,UX,M3r,E3r,y3r,X7,m4e,w3r,A3r,JX,L3r,B3r,x3r,V7,g4e,k3r,R3r,YX,S3r,P3r,$3r,z7,h4e,I3r,D3r,KX,N3r,j3r,q3r,W7,p4e,G3r,O3r,ZX,X3r,V3r,z3r,Q7,_4e,W3r,Q3r,eV,H3r,U3r,J3r,H7,u4e,Y3r,K3r,oV,Z3r,e2r,o2r,U7,b4e,r2r,t2r,rV,a2r,n2r,s2r,J7,v4e,l2r,i2r,tV,d2r,c2r,f2r,Y7,T4e,m2r,g2r,aV,h2r,p2r,_2r,K7,F4e,u2r,b2r,nV,v2r,T2r,F2r,Z7,C4e,C2r,M2r,sV,E2r,y2r,w2r,eF,M4e,A2r,L2r,lV,B2r,x2r,k2r,oF,E4e,R2r,S2r,iV,P2r,$2r,I2r,rF,y4e,D2r,N2r,dV,j2r,q2r,G2r,tF,w4e,O2r,X2r,cV,V2r,z2r,W2r,aF,A4e,Q2r,H2r,fV,U2r,J2r,Y2r,nF,L4e,K2r,Z2r,mV,evr,ovr,rvr,B4e,tvr,avr,u0,sSe,Wc,sF,x4e,b0,nvr,k4e,svr,lSe,xr,v0,lvr,Qc,ivr,R4e,dvr,cvr,S4e,fvr,mvr,gvr,T0,hvr,P4e,pvr,_vr,uvr,Et,F0,bvr,$4e,vvr,Tvr,Hc,Fvr,I4e,Cvr,Mvr,D4e,Evr,yvr,wvr,N4e,Avr,Lvr,C0,Bvr,yo,M0,xvr,j4e,kvr,Rvr,An,Svr,q4e,Pvr,$vr,G4e,Ivr,Dvr,O4e,Nvr,jvr,qvr,X4e,lF,V4e,Gvr,Ovr,gV,Xvr,Vvr,zvr,z4e,Wvr,Qvr,E0,iSe,Uc,iF,W4e,y0,Hvr,Q4e,Uvr,dSe,kr,w0,Jvr,Jc,Yvr,H4e,Kvr,Zvr,U4e,e6r,o6r,r6r,A0,t6r,J4e,a6r,n6r,s6r,yt,L0,l6r,Y4e,i6r,d6r,Yc,c6r,K4e,f6r,m6r,Z4e,g6r,h6r,p6r,ebe,_6r,u6r,B0,b6r,wo,x0,v6r,obe,T6r,F6r,Ln,C6r,rbe,M6r,E6r,tbe,y6r,w6r,abe,A6r,L6r,B6r,nbe,dF,sbe,x6r,k6r,hV,R6r,S6r,P6r,lbe,$6r,I6r,k0,cSe,Kc,cF,ibe,R0,D6r,dbe,N6r,fSe,Rr,S0,j6r,Zc,q6r,cbe,G6r,O6r,fbe,X6r,V6r,z6r,P0,W6r,mbe,Q6r,H6r,U6r,wt,$0,J6r,gbe,Y6r,K6r,ef,Z6r,hbe,eTr,oTr,pbe,rTr,tTr,aTr,_be,nTr,sTr,I0,lTr,Ao,D0,iTr,ube,dTr,cTr,Bn,fTr,bbe,mTr,gTr,vbe,hTr,pTr,Tbe,_Tr,uTr,bTr,z,fF,Fbe,vTr,TTr,pV,FTr,CTr,MTr,mF,Cbe,ETr,yTr,_V,wTr,ATr,LTr,gF,Mbe,BTr,xTr,uV,kTr,RTr,STr,hF,Ebe,PTr,$Tr,bV,ITr,DTr,NTr,pF,ybe,jTr,qTr,vV,GTr,OTr,XTr,_F,wbe,VTr,zTr,TV,WTr,QTr,HTr,uF,Abe,UTr,JTr,FV,YTr,KTr,ZTr,bF,Lbe,e7r,o7r,CV,r7r,t7r,a7r,vF,Bbe,n7r,s7r,MV,l7r,i7r,d7r,TF,xbe,c7r,f7r,EV,m7r,g7r,h7r,FF,kbe,p7r,_7r,yV,u7r,b7r,v7r,CF,Rbe,T7r,F7r,wV,C7r,M7r,E7r,MF,Sbe,y7r,w7r,AV,A7r,L7r,B7r,EF,Pbe,x7r,k7r,LV,R7r,S7r,P7r,yF,$be,$7r,I7r,BV,D7r,N7r,j7r,wF,Ibe,q7r,G7r,xV,O7r,X7r,V7r,AF,Dbe,z7r,W7r,kV,Q7r,H7r,U7r,LF,Nbe,J7r,Y7r,RV,K7r,Z7r,eFr,BF,jbe,oFr,rFr,SV,tFr,aFr,nFr,xF,qbe,sFr,lFr,PV,iFr,dFr,cFr,kF,Gbe,fFr,mFr,$V,gFr,hFr,pFr,RF,Obe,_Fr,uFr,IV,bFr,vFr,TFr,SF,Xbe,FFr,CFr,DV,MFr,EFr,yFr,PF,Vbe,wFr,AFr,NV,LFr,BFr,xFr,$F,zbe,kFr,RFr,jV,SFr,PFr,$Fr,Wbe,IFr,DFr,N0,mSe,of,IF,Qbe,j0,NFr,Hbe,jFr,gSe,Sr,q0,qFr,rf,GFr,Ube,OFr,XFr,Jbe,VFr,zFr,WFr,G0,QFr,Ybe,HFr,UFr,JFr,At,O0,YFr,Kbe,KFr,ZFr,tf,eCr,Zbe,oCr,rCr,e3e,tCr,aCr,nCr,o3e,sCr,lCr,X0,iCr,Lo,V0,dCr,r3e,cCr,fCr,xn,mCr,t3e,gCr,hCr,a3e,pCr,_Cr,n3e,uCr,bCr,vCr,ca,DF,s3e,TCr,FCr,qV,CCr,MCr,ECr,NF,l3e,yCr,wCr,GV,ACr,LCr,BCr,jF,i3e,xCr,kCr,OV,RCr,SCr,PCr,qF,d3e,$Cr,ICr,XV,DCr,NCr,jCr,GF,c3e,qCr,GCr,VV,OCr,XCr,VCr,f3e,zCr,WCr,z0,hSe,af,OF,m3e,W0,QCr,g3e,HCr,pSe,Pr,Q0,UCr,nf,JCr,h3e,YCr,KCr,p3e,ZCr,eMr,oMr,H0,rMr,_3e,tMr,aMr,nMr,Lt,U0,sMr,u3e,lMr,iMr,sf,dMr,b3e,cMr,fMr,v3e,mMr,gMr,hMr,T3e,pMr,_Mr,J0,uMr,Bo,Y0,bMr,F3e,vMr,TMr,kn,FMr,C3e,CMr,MMr,M3e,EMr,yMr,E3e,wMr,AMr,LMr,fe,XF,y3e,BMr,xMr,zV,kMr,RMr,SMr,VF,w3e,PMr,$Mr,WV,IMr,DMr,NMr,zF,A3e,jMr,qMr,QV,GMr,OMr,XMr,WF,L3e,VMr,zMr,HV,WMr,QMr,HMr,QF,B3e,UMr,JMr,UV,YMr,KMr,ZMr,HF,x3e,eEr,oEr,JV,rEr,tEr,aEr,UF,k3e,nEr,sEr,YV,lEr,iEr,dEr,JF,R3e,cEr,fEr,KV,mEr,gEr,hEr,YF,S3e,pEr,_Er,ZV,uEr,bEr,vEr,KF,P3e,TEr,FEr,ez,CEr,MEr,EEr,ZF,$3e,yEr,wEr,oz,AEr,LEr,BEr,eC,I3e,xEr,kEr,rz,REr,SEr,PEr,D3e,$Er,IEr,K0,_Se,lf,oC,N3e,Z0,DEr,j3e,NEr,uSe,$r,eL,jEr,df,qEr,q3e,GEr,OEr,G3e,XEr,VEr,zEr,oL,WEr,O3e,QEr,HEr,UEr,Bt,rL,JEr,X3e,YEr,KEr,cf,ZEr,V3e,e5r,o5r,z3e,r5r,t5r,a5r,W3e,n5r,s5r,tL,l5r,xo,aL,i5r,Q3e,d5r,c5r,Rn,f5r,H3e,m5r,g5r,U3e,h5r,p5r,J3e,_5r,u5r,b5r,be,rC,Y3e,v5r,T5r,tz,F5r,C5r,M5r,tC,K3e,E5r,y5r,az,w5r,A5r,L5r,aC,Z3e,B5r,x5r,nz,k5r,R5r,S5r,nC,e2e,P5r,$5r,sz,I5r,D5r,N5r,sC,o2e,j5r,q5r,lz,G5r,O5r,X5r,lC,r2e,V5r,z5r,iz,W5r,Q5r,H5r,iC,t2e,U5r,J5r,dz,Y5r,K5r,Z5r,dC,a2e,eyr,oyr,cz,ryr,tyr,ayr,cC,n2e,nyr,syr,fz,lyr,iyr,dyr,fC,s2e,cyr,fyr,mz,myr,gyr,hyr,l2e,pyr,_yr,nL,bSe,ff,mC,i2e,sL,uyr,d2e,byr,vSe,Ir,lL,vyr,mf,Tyr,c2e,Fyr,Cyr,f2e,Myr,Eyr,yyr,iL,wyr,m2e,Ayr,Lyr,Byr,xt,dL,xyr,g2e,kyr,Ryr,gf,Syr,h2e,Pyr,$yr,p2e,Iyr,Dyr,Nyr,_2e,jyr,qyr,cL,Gyr,ko,fL,Oyr,u2e,Xyr,Vyr,Sn,zyr,b2e,Wyr,Qyr,v2e,Hyr,Uyr,T2e,Jyr,Yyr,Kyr,Me,gC,F2e,Zyr,ewr,gz,owr,rwr,twr,hC,C2e,awr,nwr,hz,swr,lwr,iwr,pC,M2e,dwr,cwr,pz,fwr,mwr,gwr,_C,E2e,hwr,pwr,_z,_wr,uwr,bwr,uC,y2e,vwr,Twr,uz,Fwr,Cwr,Mwr,bC,w2e,Ewr,ywr,bz,wwr,Awr,Lwr,vC,A2e,Bwr,xwr,vz,kwr,Rwr,Swr,TC,L2e,Pwr,$wr,Tz,Iwr,Dwr,Nwr,FC,B2e,jwr,qwr,Fz,Gwr,Owr,Xwr,x2e,Vwr,zwr,mL,TSe,hf,CC,k2e,gL,Wwr,R2e,Qwr,FSe,Dr,hL,Hwr,pf,Uwr,S2e,Jwr,Ywr,P2e,Kwr,Zwr,eAr,pL,oAr,$2e,rAr,tAr,aAr,kt,_L,nAr,I2e,sAr,lAr,_f,iAr,D2e,dAr,cAr,N2e,fAr,mAr,gAr,j2e,hAr,pAr,uL,_Ar,Ro,bL,uAr,q2e,bAr,vAr,Pn,TAr,G2e,FAr,CAr,O2e,MAr,EAr,X2e,yAr,wAr,AAr,ve,MC,V2e,LAr,BAr,Cz,xAr,kAr,RAr,EC,z2e,SAr,PAr,Mz,$Ar,IAr,DAr,yC,W2e,NAr,jAr,Ez,qAr,GAr,OAr,wC,Q2e,XAr,VAr,yz,zAr,WAr,QAr,AC,H2e,HAr,UAr,wz,JAr,YAr,KAr,LC,U2e,ZAr,e0r,Az,o0r,r0r,t0r,BC,J2e,a0r,n0r,Lz,s0r,l0r,i0r,xC,Y2e,d0r,c0r,Bz,f0r,m0r,g0r,kC,K2e,h0r,p0r,xz,_0r,u0r,b0r,RC,Z2e,v0r,T0r,kz,F0r,C0r,M0r,eve,E0r,y0r,vL,CSe,uf,SC,ove,TL,w0r,rve,A0r,MSe,Nr,FL,L0r,bf,B0r,tve,x0r,k0r,ave,R0r,S0r,P0r,CL,$0r,nve,I0r,D0r,N0r,Rt,ML,j0r,sve,q0r,G0r,vf,O0r,lve,X0r,V0r,ive,z0r,W0r,Q0r,dve,H0r,U0r,EL,J0r,So,yL,Y0r,cve,K0r,Z0r,$n,eLr,fve,oLr,rLr,mve,tLr,aLr,gve,nLr,sLr,lLr,Te,PC,hve,iLr,dLr,Rz,cLr,fLr,mLr,$C,pve,gLr,hLr,Sz,pLr,_Lr,uLr,IC,_ve,bLr,vLr,Pz,TLr,FLr,CLr,DC,uve,MLr,ELr,$z,yLr,wLr,ALr,NC,bve,LLr,BLr,Iz,xLr,kLr,RLr,jC,vve,SLr,PLr,Dz,$Lr,ILr,DLr,qC,Tve,NLr,jLr,Nz,qLr,GLr,OLr,GC,Fve,XLr,VLr,jz,zLr,WLr,QLr,OC,Cve,HLr,ULr,qz,JLr,YLr,KLr,XC,Mve,ZLr,e8r,Gz,o8r,r8r,t8r,Eve,a8r,n8r,wL,ESe,Tf,VC,yve,AL,s8r,wve,l8r,ySe,jr,LL,i8r,Ff,d8r,Ave,c8r,f8r,Lve,m8r,g8r,h8r,BL,p8r,Bve,_8r,u8r,b8r,St,xL,v8r,xve,T8r,F8r,Cf,C8r,kve,M8r,E8r,Rve,y8r,w8r,A8r,Sve,L8r,B8r,kL,x8r,Po,RL,k8r,Pve,R8r,S8r,In,P8r,$ve,$8r,I8r,Ive,D8r,N8r,Dve,j8r,q8r,G8r,Se,zC,Nve,O8r,X8r,Oz,V8r,z8r,W8r,WC,jve,Q8r,H8r,Xz,U8r,J8r,Y8r,QC,qve,K8r,Z8r,Vz,e9r,o9r,r9r,HC,Gve,t9r,a9r,zz,n9r,s9r,l9r,UC,Ove,i9r,d9r,Wz,c9r,f9r,m9r,JC,Xve,g9r,h9r,Qz,p9r,_9r,u9r,YC,Vve,b9r,v9r,Hz,T9r,F9r,C9r,KC,zve,M9r,E9r,Uz,y9r,w9r,A9r,Wve,L9r,B9r,SL,wSe,Mf,ZC,Qve,PL,x9r,Hve,k9r,ASe,qr,$L,R9r,Ef,S9r,Uve,P9r,$9r,Jve,I9r,D9r,N9r,IL,j9r,Yve,q9r,G9r,O9r,Pt,DL,X9r,Kve,V9r,z9r,yf,W9r,Zve,Q9r,H9r,e6e,U9r,J9r,Y9r,o6e,K9r,Z9r,NL,eBr,$o,jL,oBr,r6e,rBr,tBr,Dn,aBr,t6e,nBr,sBr,a6e,lBr,iBr,n6e,dBr,cBr,fBr,Pe,eM,s6e,mBr,gBr,Jz,hBr,pBr,_Br,oM,l6e,uBr,bBr,Yz,vBr,TBr,FBr,rM,i6e,CBr,MBr,Kz,EBr,yBr,wBr,tM,d6e,ABr,LBr,Zz,BBr,xBr,kBr,aM,c6e,RBr,SBr,eW,PBr,$Br,IBr,nM,f6e,DBr,NBr,oW,jBr,qBr,GBr,sM,m6e,OBr,XBr,rW,VBr,zBr,WBr,lM,g6e,QBr,HBr,tW,UBr,JBr,YBr,h6e,KBr,ZBr,qL,LSe,wf,iM,p6e,GL,exr,_6e,oxr,BSe,Gr,OL,rxr,Af,txr,u6e,axr,nxr,b6e,sxr,lxr,ixr,XL,dxr,v6e,cxr,fxr,mxr,$t,VL,gxr,T6e,hxr,pxr,Lf,_xr,F6e,uxr,bxr,C6e,vxr,Txr,Fxr,M6e,Cxr,Mxr,zL,Exr,Io,WL,yxr,E6e,wxr,Axr,Nn,Lxr,y6e,Bxr,xxr,w6e,kxr,Rxr,A6e,Sxr,Pxr,$xr,L6e,dM,B6e,Ixr,Dxr,aW,Nxr,jxr,qxr,x6e,Gxr,Oxr,QL,xSe,Bf,cM,k6e,HL,Xxr,R6e,Vxr,kSe,Or,UL,zxr,xf,Wxr,S6e,Qxr,Hxr,P6e,Uxr,Jxr,Yxr,JL,Kxr,$6e,Zxr,ekr,okr,It,YL,rkr,I6e,tkr,akr,kf,nkr,D6e,skr,lkr,N6e,ikr,dkr,ckr,j6e,fkr,mkr,KL,gkr,Do,ZL,hkr,q6e,pkr,_kr,jn,ukr,G6e,bkr,vkr,O6e,Tkr,Fkr,X6e,Ckr,Mkr,Ekr,e8,fM,V6e,ykr,wkr,nW,Akr,Lkr,Bkr,mM,z6e,xkr,kkr,sW,Rkr,Skr,Pkr,W6e,$kr,Ikr,o8,RSe,Rf,gM,Q6e,r8,Dkr,H6e,Nkr,SSe,Xr,t8,jkr,Sf,qkr,U6e,Gkr,Okr,J6e,Xkr,Vkr,zkr,a8,Wkr,Y6e,Qkr,Hkr,Ukr,Dt,n8,Jkr,K6e,Ykr,Kkr,Pf,Zkr,Z6e,eRr,oRr,eTe,rRr,tRr,aRr,oTe,nRr,sRr,s8,lRr,No,l8,iRr,rTe,dRr,cRr,qn,fRr,tTe,mRr,gRr,aTe,hRr,pRr,nTe,_Rr,uRr,bRr,sTe,hM,lTe,vRr,TRr,lW,FRr,CRr,MRr,iTe,ERr,yRr,i8,PSe;return me=new V({}),qa=new w({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),bE=new V({}),vE=new w({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Of=new wRr({props:{warning:!0,$$slots:{default:[VCt]},$$scope:{ctx:If}}}),TE=new V({}),FE=new E({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/configuration_auto.py#L542"}}),EE=new E({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/configuration_auto.py#L565",parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}]}}),yE=new w({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),wE=new E({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/configuration_auto.py#L687",parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}]}}),AE=new V({}),LE=new E({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/tokenization_auto.py#L358"}}),kE=new E({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/tokenization_auto.py#L372",parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_16473/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}]}}),RE=new w({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),SE=new E({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/tokenization_auto.py#L568",parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}]}}),PE=new V({}),$E=new E({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/feature_extraction_auto.py#L171"}}),NE=new E({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/feature_extraction_auto.py#L185",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_16473/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),Sh=new wRr({props:{$$slots:{default:[zCt]},$$scope:{ctx:If}}}),jE=new w({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),qE=new E({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/feature_extraction_auto.py#L312",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}]}}),GE=new V({}),OE=new E({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/processing_auto.py#L70"}}),zE=new E({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/processing_auto.py#L84",parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),Vh=new wRr({props:{$$slots:{default:[WCt]},$$scope:{ctx:If}}}),WE=new w({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),QE=new E({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/processing_auto.py#L237",parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}]}}),HE=new V({}),UE=new E({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L707"}}),YE=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),KE=new w({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),ZE=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),e5=new w({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),o5=new V({}),r5=new E({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L714"}}),a5=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),n5=new w({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),s5=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),l5=new w({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),i5=new V({}),d5=new E({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L729"}}),f5=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),m5=new w({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),g5=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),h5=new w({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),p5=new V({}),_5=new E({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L736"}}),b5=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code>(Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),v5=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),T5=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),F5=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),C5=new V({}),M5=new E({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L743"}}),y5=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}]}}),w5=new w({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),A5=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),L5=new w({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),B5=new V({}),x5=new E({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L752"}}),R5=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),S5=new w({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),P5=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),$5=new w({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),I5=new V({}),D5=new E({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L786"}}),j5=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),q5=new w({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),G5=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),O5=new w({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),X5=new V({}),V5=new E({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L793"}}),W5=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}]}}),Q5=new w({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),H5=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),U5=new w({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),J5=new V({}),Y5=new E({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L779"}}),Z5=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),ey=new w({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),oy=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ry=new w({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ty=new V({}),ay=new E({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L761"}}),sy=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),ly=new w({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),iy=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),dy=new w({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),cy=new V({}),fy=new E({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L768"}}),gy=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),hy=new w({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),py=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),_y=new w({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),uy=new V({}),by=new E({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L802"}}),Ty=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_16473/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_16473/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_16473/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),Fy=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),Cy=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),My=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ey=new V({}),yy=new E({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L841"}}),Ay=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),Ly=new w({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),By=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),xy=new w({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ky=new V({}),Ry=new E({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L848"}}),Py=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),$y=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),Iy=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Dy=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ny=new V({}),jy=new E({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L871"}}),Gy=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),Oy=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),Xy=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Vy=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),zy=new V({}),Wy=new E({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L855"}}),Hy=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),Uy=new w({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),Jy=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Yy=new w({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ky=new V({}),Zy=new E({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L862"}}),ow=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}]}}),rw=new w({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),tw=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),nw=new w({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),sw=new V({}),lw=new E({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L880"}}),dw=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),cw=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),fw=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),mw=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),gw=new V({}),hw=new E({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L887"}}),_w=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}]}}),uw=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),bw=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),vw=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Tw=new V({}),Fw=new E({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L834"}}),Mw=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
</ul>`,name:"config"}]}}),Ew=new w({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),yw=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ww=new w({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Aw=new V({}),Lw=new E({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L809"}}),xw=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}]}}),kw=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),Rw=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Sw=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Pw=new V({}),$w=new E({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L816"}}),Dw=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}]}}),Nw=new w({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),jw=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),qw=new w({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Gw=new V({}),Ow=new E({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L825"}}),Vw=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}]}}),zw=new w({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),Ww=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Qw=new w({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Hw=new V({}),Uw=new E({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_tf_auto.py#L379"}}),Yw=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Kw=new w({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),Zw=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),eA=new w({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),oA=new V({}),rA=new E({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_tf_auto.py#L386"}}),aA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),nA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),sA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),lA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),iA=new V({}),dA=new E({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_tf_auto.py#L401"}}),fA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),mA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),gA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),hA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),pA=new V({}),_A=new E({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_tf_auto.py#L408"}}),bA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),vA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),TA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),CA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),MA=new V({}),EA=new E({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_tf_auto.py#L422"}}),wA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),AA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),LA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),BA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),xA=new V({}),kA=new E({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_tf_auto.py#L429"}}),SA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),PA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),$A=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),IA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),DA=new V({}),NA=new E({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_tf_auto.py#L438"}}),qA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),GA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),OA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),XA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),VA=new V({}),zA=new E({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_tf_auto.py#L474"}}),QA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),HA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),UA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),JA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),YA=new V({}),KA=new E({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_tf_auto.py#L454"}}),e0=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),o0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),r0=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),t0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),a0=new V({}),n0=new E({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_tf_auto.py#L465"}}),l0=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),i0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),d0=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),c0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),f0=new V({}),m0=new E({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_tf_auto.py#L447"}}),h0=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),p0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),_0=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),u0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),b0=new V({}),v0=new E({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_tf_auto.py#L415"}}),F0=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),C0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),M0=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),E0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),y0=new V({}),w0=new E({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_tf_auto.py#L490"}}),L0=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}]}}),B0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),x0=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),k0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),R0=new V({}),S0=new E({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_flax_auto.py#L237"}}),$0=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),I0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),D0=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),N0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),j0=new V({}),q0=new E({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_flax_auto.py#L251"}}),O0=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}]}}),X0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),V0=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),z0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),W0=new V({}),Q0=new E({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_flax_auto.py#L244"}}),U0=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),J0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),Y0=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),K0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Z0=new V({}),eL=new E({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_flax_auto.py#L258"}}),rL=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),tL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),aL=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),nL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),sL=new V({}),lL=new E({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_flax_auto.py#L265"}}),dL=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),cL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),fL=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),mL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),gL=new V({}),hL=new E({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),_L=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),uL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),bL=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),vL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),TL=new V({}),FL=new E({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),ML=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),EL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),yL=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),wL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),AL=new V({}),LL=new E({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_flax_auto.py#L290"}}),xL=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),kL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),RL=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),SL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),PL=new V({}),$L=new E({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),DL=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),NL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),jL=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),qL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),GL=new V({}),OL=new E({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_flax_auto.py#L306"}}),VL=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}]}}),zL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),WL=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),QL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),HL=new V({}),UL=new E({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),YL=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),KL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),ZL=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),o8=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),r8=new V({}),t8=new E({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),n8=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),s8=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),l8=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),i8=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){Z=a("meta"),io=l(),de=a("h1"),Ee=a("a"),lo=a("span"),f(me.$$.fragment),Ce=l(),Vo=a("span"),Ii=o("Auto Classes"),Df=l(),fa=a("p"),Di=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ni=a("code"),hE=o("from_pretrained()"),Nf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Be=l(),co=a("p"),ji=o("Instantiating one of "),Gn=a("a"),pE=o("AutoConfig"),On=o(", "),Xn=a("a"),_E=o("AutoModel"),qi=o(`, and
`),Vn=a("a"),uE=o("AutoTokenizer"),Gi=o(" will directly create a class of the relevant architecture. For instance"),jf=l(),f(qa.$$.fragment),fo=l(),_e=a("p"),s9=o("will create a model that is an instance of "),Oi=a("a"),l9=o("BertModel"),i9=o("."),zo=l(),Ga=a("p"),d9=o("There is one class of "),qf=a("code"),c9=o("AutoModel"),W$e=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Ske=l(),Xi=a("h2"),Gf=a("a"),oH=a("span"),f(bE.$$.fragment),Q$e=l(),rH=a("span"),H$e=o("Extending the Auto Classes"),Pke=l(),zn=a("p"),U$e=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),tH=a("code"),J$e=o("NewModel"),Y$e=o(", make sure you have a "),aH=a("code"),K$e=o("NewModelConfig"),Z$e=o(` then you can add those to the auto
classes like this:`),$ke=l(),f(vE.$$.fragment),Ike=l(),f9=a("p"),eIe=o("You will then be able to use the auto classes like you would usually do!"),Dke=l(),f(Of.$$.fragment),Nke=l(),Vi=a("h2"),Xf=a("a"),nH=a("span"),f(TE.$$.fragment),oIe=l(),sH=a("span"),rIe=o("AutoConfig"),jke=l(),Wo=a("div"),f(FE.$$.fragment),tIe=l(),CE=a("p"),aIe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),m9=a("a"),nIe=o("from_pretrained()"),sIe=o(" class method."),lIe=l(),ME=a("p"),iIe=o("This class cannot be instantiated directly using "),lH=a("code"),dIe=o("__init__()"),cIe=o(" (throws an error)."),fIe=l(),mo=a("div"),f(EE.$$.fragment),mIe=l(),iH=a("p"),gIe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),hIe=l(),zi=a("p"),pIe=o("The configuration class to instantiate is selected based on the "),dH=a("code"),_Ie=o("model_type"),uIe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),cH=a("code"),bIe=o("pretrained_model_name_or_path"),vIe=o(":"),TIe=l(),v=a("ul"),Vf=a("li"),fH=a("strong"),FIe=o("albert"),CIe=o(" \u2014 "),g9=a("a"),MIe=o("AlbertConfig"),EIe=o(" (ALBERT model)"),yIe=l(),zf=a("li"),mH=a("strong"),wIe=o("bart"),AIe=o(" \u2014 "),h9=a("a"),LIe=o("BartConfig"),BIe=o(" (BART model)"),xIe=l(),Wf=a("li"),gH=a("strong"),kIe=o("beit"),RIe=o(" \u2014 "),p9=a("a"),SIe=o("BeitConfig"),PIe=o(" (BEiT model)"),$Ie=l(),Qf=a("li"),hH=a("strong"),IIe=o("bert"),DIe=o(" \u2014 "),_9=a("a"),NIe=o("BertConfig"),jIe=o(" (BERT model)"),qIe=l(),Hf=a("li"),pH=a("strong"),GIe=o("bert-generation"),OIe=o(" \u2014 "),u9=a("a"),XIe=o("BertGenerationConfig"),VIe=o(" (Bert Generation model)"),zIe=l(),Uf=a("li"),_H=a("strong"),WIe=o("big_bird"),QIe=o(" \u2014 "),b9=a("a"),HIe=o("BigBirdConfig"),UIe=o(" (BigBird model)"),JIe=l(),Jf=a("li"),uH=a("strong"),YIe=o("bigbird_pegasus"),KIe=o(" \u2014 "),v9=a("a"),ZIe=o("BigBirdPegasusConfig"),eDe=o(" (BigBirdPegasus model)"),oDe=l(),Yf=a("li"),bH=a("strong"),rDe=o("blenderbot"),tDe=o(" \u2014 "),T9=a("a"),aDe=o("BlenderbotConfig"),nDe=o(" (Blenderbot model)"),sDe=l(),Kf=a("li"),vH=a("strong"),lDe=o("blenderbot-small"),iDe=o(" \u2014 "),F9=a("a"),dDe=o("BlenderbotSmallConfig"),cDe=o(" (BlenderbotSmall model)"),fDe=l(),Zf=a("li"),TH=a("strong"),mDe=o("camembert"),gDe=o(" \u2014 "),C9=a("a"),hDe=o("CamembertConfig"),pDe=o(" (CamemBERT model)"),_De=l(),em=a("li"),FH=a("strong"),uDe=o("canine"),bDe=o(" \u2014 "),M9=a("a"),vDe=o("CanineConfig"),TDe=o(" (Canine model)"),FDe=l(),om=a("li"),CH=a("strong"),CDe=o("clip"),MDe=o(" \u2014 "),E9=a("a"),EDe=o("CLIPConfig"),yDe=o(" (CLIP model)"),wDe=l(),rm=a("li"),MH=a("strong"),ADe=o("convbert"),LDe=o(" \u2014 "),y9=a("a"),BDe=o("ConvBertConfig"),xDe=o(" (ConvBERT model)"),kDe=l(),tm=a("li"),EH=a("strong"),RDe=o("convnext"),SDe=o(" \u2014 "),w9=a("a"),PDe=o("ConvNextConfig"),$De=o(" (ConvNext model)"),IDe=l(),am=a("li"),yH=a("strong"),DDe=o("ctrl"),NDe=o(" \u2014 "),A9=a("a"),jDe=o("CTRLConfig"),qDe=o(" (CTRL model)"),GDe=l(),nm=a("li"),wH=a("strong"),ODe=o("data2vec-audio"),XDe=o(" \u2014 "),L9=a("a"),VDe=o("Data2VecAudioConfig"),zDe=o(" (Data2VecAudio model)"),WDe=l(),sm=a("li"),AH=a("strong"),QDe=o("data2vec-text"),HDe=o(" \u2014 "),B9=a("a"),UDe=o("Data2VecTextConfig"),JDe=o(" (Data2VecText model)"),YDe=l(),lm=a("li"),LH=a("strong"),KDe=o("deberta"),ZDe=o(" \u2014 "),x9=a("a"),eNe=o("DebertaConfig"),oNe=o(" (DeBERTa model)"),rNe=l(),im=a("li"),BH=a("strong"),tNe=o("deberta-v2"),aNe=o(" \u2014 "),k9=a("a"),nNe=o("DebertaV2Config"),sNe=o(" (DeBERTa-v2 model)"),lNe=l(),dm=a("li"),xH=a("strong"),iNe=o("decision_transformer"),dNe=o(" \u2014 "),R9=a("a"),cNe=o("DecisionTransformerConfig"),fNe=o(" (Decision Transformer model)"),mNe=l(),cm=a("li"),kH=a("strong"),gNe=o("deit"),hNe=o(" \u2014 "),S9=a("a"),pNe=o("DeiTConfig"),_Ne=o(" (DeiT model)"),uNe=l(),fm=a("li"),RH=a("strong"),bNe=o("detr"),vNe=o(" \u2014 "),P9=a("a"),TNe=o("DetrConfig"),FNe=o(" (DETR model)"),CNe=l(),mm=a("li"),SH=a("strong"),MNe=o("distilbert"),ENe=o(" \u2014 "),$9=a("a"),yNe=o("DistilBertConfig"),wNe=o(" (DistilBERT model)"),ANe=l(),gm=a("li"),PH=a("strong"),LNe=o("dpr"),BNe=o(" \u2014 "),I9=a("a"),xNe=o("DPRConfig"),kNe=o(" (DPR model)"),RNe=l(),hm=a("li"),$H=a("strong"),SNe=o("dpt"),PNe=o(" \u2014 "),D9=a("a"),$Ne=o("DPTConfig"),INe=o(" (DPT model)"),DNe=l(),pm=a("li"),IH=a("strong"),NNe=o("electra"),jNe=o(" \u2014 "),N9=a("a"),qNe=o("ElectraConfig"),GNe=o(" (ELECTRA model)"),ONe=l(),_m=a("li"),DH=a("strong"),XNe=o("encoder-decoder"),VNe=o(" \u2014 "),j9=a("a"),zNe=o("EncoderDecoderConfig"),WNe=o(" (Encoder decoder model)"),QNe=l(),um=a("li"),NH=a("strong"),HNe=o("flaubert"),UNe=o(" \u2014 "),q9=a("a"),JNe=o("FlaubertConfig"),YNe=o(" (FlauBERT model)"),KNe=l(),bm=a("li"),jH=a("strong"),ZNe=o("fnet"),eje=o(" \u2014 "),G9=a("a"),oje=o("FNetConfig"),rje=o(" (FNet model)"),tje=l(),vm=a("li"),qH=a("strong"),aje=o("fsmt"),nje=o(" \u2014 "),O9=a("a"),sje=o("FSMTConfig"),lje=o(" (FairSeq Machine-Translation model)"),ije=l(),Tm=a("li"),GH=a("strong"),dje=o("funnel"),cje=o(" \u2014 "),X9=a("a"),fje=o("FunnelConfig"),mje=o(" (Funnel Transformer model)"),gje=l(),Fm=a("li"),OH=a("strong"),hje=o("glpn"),pje=o(" \u2014 "),V9=a("a"),_je=o("GLPNConfig"),uje=o(" (GLPN model)"),bje=l(),Cm=a("li"),XH=a("strong"),vje=o("gpt2"),Tje=o(" \u2014 "),z9=a("a"),Fje=o("GPT2Config"),Cje=o(" (OpenAI GPT-2 model)"),Mje=l(),Mm=a("li"),VH=a("strong"),Eje=o("gpt_neo"),yje=o(" \u2014 "),W9=a("a"),wje=o("GPTNeoConfig"),Aje=o(" (GPT Neo model)"),Lje=l(),Em=a("li"),zH=a("strong"),Bje=o("gptj"),xje=o(" \u2014 "),Q9=a("a"),kje=o("GPTJConfig"),Rje=o(" (GPT-J model)"),Sje=l(),ym=a("li"),WH=a("strong"),Pje=o("hubert"),$je=o(" \u2014 "),H9=a("a"),Ije=o("HubertConfig"),Dje=o(" (Hubert model)"),Nje=l(),wm=a("li"),QH=a("strong"),jje=o("ibert"),qje=o(" \u2014 "),U9=a("a"),Gje=o("IBertConfig"),Oje=o(" (I-BERT model)"),Xje=l(),Am=a("li"),HH=a("strong"),Vje=o("imagegpt"),zje=o(" \u2014 "),J9=a("a"),Wje=o("ImageGPTConfig"),Qje=o(" (ImageGPT model)"),Hje=l(),Lm=a("li"),UH=a("strong"),Uje=o("layoutlm"),Jje=o(" \u2014 "),Y9=a("a"),Yje=o("LayoutLMConfig"),Kje=o(" (LayoutLM model)"),Zje=l(),Bm=a("li"),JH=a("strong"),eqe=o("layoutlmv2"),oqe=o(" \u2014 "),K9=a("a"),rqe=o("LayoutLMv2Config"),tqe=o(" (LayoutLMv2 model)"),aqe=l(),xm=a("li"),YH=a("strong"),nqe=o("led"),sqe=o(" \u2014 "),Z9=a("a"),lqe=o("LEDConfig"),iqe=o(" (LED model)"),dqe=l(),km=a("li"),KH=a("strong"),cqe=o("longformer"),fqe=o(" \u2014 "),eB=a("a"),mqe=o("LongformerConfig"),gqe=o(" (Longformer model)"),hqe=l(),Rm=a("li"),ZH=a("strong"),pqe=o("luke"),_qe=o(" \u2014 "),oB=a("a"),uqe=o("LukeConfig"),bqe=o(" (LUKE model)"),vqe=l(),Sm=a("li"),eU=a("strong"),Tqe=o("lxmert"),Fqe=o(" \u2014 "),rB=a("a"),Cqe=o("LxmertConfig"),Mqe=o(" (LXMERT model)"),Eqe=l(),Pm=a("li"),oU=a("strong"),yqe=o("m2m_100"),wqe=o(" \u2014 "),tB=a("a"),Aqe=o("M2M100Config"),Lqe=o(" (M2M100 model)"),Bqe=l(),$m=a("li"),rU=a("strong"),xqe=o("marian"),kqe=o(" \u2014 "),aB=a("a"),Rqe=o("MarianConfig"),Sqe=o(" (Marian model)"),Pqe=l(),Im=a("li"),tU=a("strong"),$qe=o("maskformer"),Iqe=o(" \u2014 "),nB=a("a"),Dqe=o("MaskFormerConfig"),Nqe=o(" (MaskFormer model)"),jqe=l(),Dm=a("li"),aU=a("strong"),qqe=o("mbart"),Gqe=o(" \u2014 "),sB=a("a"),Oqe=o("MBartConfig"),Xqe=o(" (mBART model)"),Vqe=l(),Nm=a("li"),nU=a("strong"),zqe=o("megatron-bert"),Wqe=o(" \u2014 "),lB=a("a"),Qqe=o("MegatronBertConfig"),Hqe=o(" (MegatronBert model)"),Uqe=l(),jm=a("li"),sU=a("strong"),Jqe=o("mobilebert"),Yqe=o(" \u2014 "),iB=a("a"),Kqe=o("MobileBertConfig"),Zqe=o(" (MobileBERT model)"),eGe=l(),qm=a("li"),lU=a("strong"),oGe=o("mpnet"),rGe=o(" \u2014 "),dB=a("a"),tGe=o("MPNetConfig"),aGe=o(" (MPNet model)"),nGe=l(),Gm=a("li"),iU=a("strong"),sGe=o("mt5"),lGe=o(" \u2014 "),cB=a("a"),iGe=o("MT5Config"),dGe=o(" (mT5 model)"),cGe=l(),Om=a("li"),dU=a("strong"),fGe=o("nystromformer"),mGe=o(" \u2014 "),fB=a("a"),gGe=o("NystromformerConfig"),hGe=o(" (Nystromformer model)"),pGe=l(),Xm=a("li"),cU=a("strong"),_Ge=o("openai-gpt"),uGe=o(" \u2014 "),mB=a("a"),bGe=o("OpenAIGPTConfig"),vGe=o(" (OpenAI GPT model)"),TGe=l(),Vm=a("li"),fU=a("strong"),FGe=o("pegasus"),CGe=o(" \u2014 "),gB=a("a"),MGe=o("PegasusConfig"),EGe=o(" (Pegasus model)"),yGe=l(),zm=a("li"),mU=a("strong"),wGe=o("perceiver"),AGe=o(" \u2014 "),hB=a("a"),LGe=o("PerceiverConfig"),BGe=o(" (Perceiver model)"),xGe=l(),Wm=a("li"),gU=a("strong"),kGe=o("plbart"),RGe=o(" \u2014 "),pB=a("a"),SGe=o("PLBartConfig"),PGe=o(" (PLBart model)"),$Ge=l(),Qm=a("li"),hU=a("strong"),IGe=o("poolformer"),DGe=o(" \u2014 "),_B=a("a"),NGe=o("PoolFormerConfig"),jGe=o(" (PoolFormer model)"),qGe=l(),Hm=a("li"),pU=a("strong"),GGe=o("prophetnet"),OGe=o(" \u2014 "),uB=a("a"),XGe=o("ProphetNetConfig"),VGe=o(" (ProphetNet model)"),zGe=l(),Um=a("li"),_U=a("strong"),WGe=o("qdqbert"),QGe=o(" \u2014 "),bB=a("a"),HGe=o("QDQBertConfig"),UGe=o(" (QDQBert model)"),JGe=l(),Jm=a("li"),uU=a("strong"),YGe=o("rag"),KGe=o(" \u2014 "),vB=a("a"),ZGe=o("RagConfig"),eOe=o(" (RAG model)"),oOe=l(),Ym=a("li"),bU=a("strong"),rOe=o("realm"),tOe=o(" \u2014 "),TB=a("a"),aOe=o("RealmConfig"),nOe=o(" (Realm model)"),sOe=l(),Km=a("li"),vU=a("strong"),lOe=o("reformer"),iOe=o(" \u2014 "),FB=a("a"),dOe=o("ReformerConfig"),cOe=o(" (Reformer model)"),fOe=l(),Zm=a("li"),TU=a("strong"),mOe=o("rembert"),gOe=o(" \u2014 "),CB=a("a"),hOe=o("RemBertConfig"),pOe=o(" (RemBERT model)"),_Oe=l(),eg=a("li"),FU=a("strong"),uOe=o("resnet"),bOe=o(" \u2014 "),MB=a("a"),vOe=o("ResNetConfig"),TOe=o(" (ResNet model)"),FOe=l(),og=a("li"),CU=a("strong"),COe=o("retribert"),MOe=o(" \u2014 "),EB=a("a"),EOe=o("RetriBertConfig"),yOe=o(" (RetriBERT model)"),wOe=l(),rg=a("li"),MU=a("strong"),AOe=o("roberta"),LOe=o(" \u2014 "),yB=a("a"),BOe=o("RobertaConfig"),xOe=o(" (RoBERTa model)"),kOe=l(),tg=a("li"),EU=a("strong"),ROe=o("roformer"),SOe=o(" \u2014 "),wB=a("a"),POe=o("RoFormerConfig"),$Oe=o(" (RoFormer model)"),IOe=l(),ag=a("li"),yU=a("strong"),DOe=o("segformer"),NOe=o(" \u2014 "),AB=a("a"),jOe=o("SegformerConfig"),qOe=o(" (SegFormer model)"),GOe=l(),ng=a("li"),wU=a("strong"),OOe=o("sew"),XOe=o(" \u2014 "),LB=a("a"),VOe=o("SEWConfig"),zOe=o(" (SEW model)"),WOe=l(),sg=a("li"),AU=a("strong"),QOe=o("sew-d"),HOe=o(" \u2014 "),BB=a("a"),UOe=o("SEWDConfig"),JOe=o(" (SEW-D model)"),YOe=l(),lg=a("li"),LU=a("strong"),KOe=o("speech-encoder-decoder"),ZOe=o(" \u2014 "),xB=a("a"),eXe=o("SpeechEncoderDecoderConfig"),oXe=o(" (Speech Encoder decoder model)"),rXe=l(),ig=a("li"),BU=a("strong"),tXe=o("speech_to_text"),aXe=o(" \u2014 "),kB=a("a"),nXe=o("Speech2TextConfig"),sXe=o(" (Speech2Text model)"),lXe=l(),dg=a("li"),xU=a("strong"),iXe=o("speech_to_text_2"),dXe=o(" \u2014 "),RB=a("a"),cXe=o("Speech2Text2Config"),fXe=o(" (Speech2Text2 model)"),mXe=l(),cg=a("li"),kU=a("strong"),gXe=o("splinter"),hXe=o(" \u2014 "),SB=a("a"),pXe=o("SplinterConfig"),_Xe=o(" (Splinter model)"),uXe=l(),fg=a("li"),RU=a("strong"),bXe=o("squeezebert"),vXe=o(" \u2014 "),PB=a("a"),TXe=o("SqueezeBertConfig"),FXe=o(" (SqueezeBERT model)"),CXe=l(),mg=a("li"),SU=a("strong"),MXe=o("swin"),EXe=o(" \u2014 "),$B=a("a"),yXe=o("SwinConfig"),wXe=o(" (Swin model)"),AXe=l(),gg=a("li"),PU=a("strong"),LXe=o("t5"),BXe=o(" \u2014 "),IB=a("a"),xXe=o("T5Config"),kXe=o(" (T5 model)"),RXe=l(),hg=a("li"),$U=a("strong"),SXe=o("tapas"),PXe=o(" \u2014 "),DB=a("a"),$Xe=o("TapasConfig"),IXe=o(" (TAPAS model)"),DXe=l(),pg=a("li"),IU=a("strong"),NXe=o("transfo-xl"),jXe=o(" \u2014 "),NB=a("a"),qXe=o("TransfoXLConfig"),GXe=o(" (Transformer-XL model)"),OXe=l(),_g=a("li"),DU=a("strong"),XXe=o("trocr"),VXe=o(" \u2014 "),jB=a("a"),zXe=o("TrOCRConfig"),WXe=o(" (TrOCR model)"),QXe=l(),ug=a("li"),NU=a("strong"),HXe=o("unispeech"),UXe=o(" \u2014 "),qB=a("a"),JXe=o("UniSpeechConfig"),YXe=o(" (UniSpeech model)"),KXe=l(),bg=a("li"),jU=a("strong"),ZXe=o("unispeech-sat"),eVe=o(" \u2014 "),GB=a("a"),oVe=o("UniSpeechSatConfig"),rVe=o(" (UniSpeechSat model)"),tVe=l(),vg=a("li"),qU=a("strong"),aVe=o("van"),nVe=o(" \u2014 "),OB=a("a"),sVe=o("VanConfig"),lVe=o(" (VAN model)"),iVe=l(),Tg=a("li"),GU=a("strong"),dVe=o("vilt"),cVe=o(" \u2014 "),XB=a("a"),fVe=o("ViltConfig"),mVe=o(" (ViLT model)"),gVe=l(),Fg=a("li"),OU=a("strong"),hVe=o("vision-encoder-decoder"),pVe=o(" \u2014 "),VB=a("a"),_Ve=o("VisionEncoderDecoderConfig"),uVe=o(" (Vision Encoder decoder model)"),bVe=l(),Cg=a("li"),XU=a("strong"),vVe=o("vision-text-dual-encoder"),TVe=o(" \u2014 "),zB=a("a"),FVe=o("VisionTextDualEncoderConfig"),CVe=o(" (VisionTextDualEncoder model)"),MVe=l(),Mg=a("li"),VU=a("strong"),EVe=o("visual_bert"),yVe=o(" \u2014 "),WB=a("a"),wVe=o("VisualBertConfig"),AVe=o(" (VisualBert model)"),LVe=l(),Eg=a("li"),zU=a("strong"),BVe=o("vit"),xVe=o(" \u2014 "),QB=a("a"),kVe=o("ViTConfig"),RVe=o(" (ViT model)"),SVe=l(),yg=a("li"),WU=a("strong"),PVe=o("vit_mae"),$Ve=o(" \u2014 "),HB=a("a"),IVe=o("ViTMAEConfig"),DVe=o(" (ViTMAE model)"),NVe=l(),wg=a("li"),QU=a("strong"),jVe=o("wav2vec2"),qVe=o(" \u2014 "),UB=a("a"),GVe=o("Wav2Vec2Config"),OVe=o(" (Wav2Vec2 model)"),XVe=l(),Ag=a("li"),HU=a("strong"),VVe=o("wavlm"),zVe=o(" \u2014 "),JB=a("a"),WVe=o("WavLMConfig"),QVe=o(" (WavLM model)"),HVe=l(),Lg=a("li"),UU=a("strong"),UVe=o("xglm"),JVe=o(" \u2014 "),YB=a("a"),YVe=o("XGLMConfig"),KVe=o(" (XGLM model)"),ZVe=l(),Bg=a("li"),JU=a("strong"),eze=o("xlm"),oze=o(" \u2014 "),KB=a("a"),rze=o("XLMConfig"),tze=o(" (XLM model)"),aze=l(),xg=a("li"),YU=a("strong"),nze=o("xlm-prophetnet"),sze=o(" \u2014 "),ZB=a("a"),lze=o("XLMProphetNetConfig"),ize=o(" (XLMProphetNet model)"),dze=l(),kg=a("li"),KU=a("strong"),cze=o("xlm-roberta"),fze=o(" \u2014 "),ex=a("a"),mze=o("XLMRobertaConfig"),gze=o(" (XLM-RoBERTa model)"),hze=l(),Rg=a("li"),ZU=a("strong"),pze=o("xlm-roberta-xl"),_ze=o(" \u2014 "),ox=a("a"),uze=o("XLMRobertaXLConfig"),bze=o(" (XLM-RoBERTa-XL model)"),vze=l(),Sg=a("li"),eJ=a("strong"),Tze=o("xlnet"),Fze=o(" \u2014 "),rx=a("a"),Cze=o("XLNetConfig"),Mze=o(" (XLNet model)"),Eze=l(),Pg=a("li"),oJ=a("strong"),yze=o("yoso"),wze=o(" \u2014 "),tx=a("a"),Aze=o("YosoConfig"),Lze=o(" (YOSO model)"),Bze=l(),rJ=a("p"),xze=o("Examples:"),kze=l(),f(yE.$$.fragment),Rze=l(),$g=a("div"),f(wE.$$.fragment),Sze=l(),tJ=a("p"),Pze=o("Register a new configuration for this class."),qke=l(),Wi=a("h2"),Ig=a("a"),aJ=a("span"),f(AE.$$.fragment),$ze=l(),nJ=a("span"),Ize=o("AutoTokenizer"),Gke=l(),Qo=a("div"),f(LE.$$.fragment),Dze=l(),BE=a("p"),Nze=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),ax=a("a"),jze=o("AutoTokenizer.from_pretrained()"),qze=o(" class method."),Gze=l(),xE=a("p"),Oze=o("This class cannot be instantiated directly using "),sJ=a("code"),Xze=o("__init__()"),Vze=o(" (throws an error)."),zze=l(),go=a("div"),f(kE.$$.fragment),Wze=l(),lJ=a("p"),Qze=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Hze=l(),Oa=a("p"),Uze=o("The tokenizer class to instantiate is selected based on the "),iJ=a("code"),Jze=o("model_type"),Yze=o(` property of the config object (either
passed as an argument or loaded from `),dJ=a("code"),Kze=o("pretrained_model_name_or_path"),Zze=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cJ=a("code"),eWe=o("pretrained_model_name_or_path"),oWe=o(":"),rWe=l(),M=a("ul"),Wn=a("li"),fJ=a("strong"),tWe=o("albert"),aWe=o(" \u2014 "),nx=a("a"),nWe=o("AlbertTokenizer"),sWe=o(" or "),sx=a("a"),lWe=o("AlbertTokenizerFast"),iWe=o(" (ALBERT model)"),dWe=l(),Qn=a("li"),mJ=a("strong"),cWe=o("bart"),fWe=o(" \u2014 "),lx=a("a"),mWe=o("BartTokenizer"),gWe=o(" or "),ix=a("a"),hWe=o("BartTokenizerFast"),pWe=o(" (BART model)"),_We=l(),Hn=a("li"),gJ=a("strong"),uWe=o("barthez"),bWe=o(" \u2014 "),dx=a("a"),vWe=o("BarthezTokenizer"),TWe=o(" or "),cx=a("a"),FWe=o("BarthezTokenizerFast"),CWe=o(" (BARThez model)"),MWe=l(),Dg=a("li"),hJ=a("strong"),EWe=o("bartpho"),yWe=o(" \u2014 "),fx=a("a"),wWe=o("BartphoTokenizer"),AWe=o(" (BARTpho model)"),LWe=l(),Un=a("li"),pJ=a("strong"),BWe=o("bert"),xWe=o(" \u2014 "),mx=a("a"),kWe=o("BertTokenizer"),RWe=o(" or "),gx=a("a"),SWe=o("BertTokenizerFast"),PWe=o(" (BERT model)"),$We=l(),Ng=a("li"),_J=a("strong"),IWe=o("bert-generation"),DWe=o(" \u2014 "),hx=a("a"),NWe=o("BertGenerationTokenizer"),jWe=o(" (Bert Generation model)"),qWe=l(),jg=a("li"),uJ=a("strong"),GWe=o("bert-japanese"),OWe=o(" \u2014 "),px=a("a"),XWe=o("BertJapaneseTokenizer"),VWe=o(" (BertJapanese model)"),zWe=l(),qg=a("li"),bJ=a("strong"),WWe=o("bertweet"),QWe=o(" \u2014 "),_x=a("a"),HWe=o("BertweetTokenizer"),UWe=o(" (Bertweet model)"),JWe=l(),Jn=a("li"),vJ=a("strong"),YWe=o("big_bird"),KWe=o(" \u2014 "),ux=a("a"),ZWe=o("BigBirdTokenizer"),eQe=o(" or "),bx=a("a"),oQe=o("BigBirdTokenizerFast"),rQe=o(" (BigBird model)"),tQe=l(),Yn=a("li"),TJ=a("strong"),aQe=o("bigbird_pegasus"),nQe=o(" \u2014 "),vx=a("a"),sQe=o("PegasusTokenizer"),lQe=o(" or "),Tx=a("a"),iQe=o("PegasusTokenizerFast"),dQe=o(" (BigBirdPegasus model)"),cQe=l(),Kn=a("li"),FJ=a("strong"),fQe=o("blenderbot"),mQe=o(" \u2014 "),Fx=a("a"),gQe=o("BlenderbotTokenizer"),hQe=o(" or "),Cx=a("a"),pQe=o("BlenderbotTokenizerFast"),_Qe=o(" (Blenderbot model)"),uQe=l(),Gg=a("li"),CJ=a("strong"),bQe=o("blenderbot-small"),vQe=o(" \u2014 "),Mx=a("a"),TQe=o("BlenderbotSmallTokenizer"),FQe=o(" (BlenderbotSmall model)"),CQe=l(),Og=a("li"),MJ=a("strong"),MQe=o("byt5"),EQe=o(" \u2014 "),Ex=a("a"),yQe=o("ByT5Tokenizer"),wQe=o(" (ByT5 model)"),AQe=l(),Zn=a("li"),EJ=a("strong"),LQe=o("camembert"),BQe=o(" \u2014 "),yx=a("a"),xQe=o("CamembertTokenizer"),kQe=o(" or "),wx=a("a"),RQe=o("CamembertTokenizerFast"),SQe=o(" (CamemBERT model)"),PQe=l(),Xg=a("li"),yJ=a("strong"),$Qe=o("canine"),IQe=o(" \u2014 "),Ax=a("a"),DQe=o("CanineTokenizer"),NQe=o(" (Canine model)"),jQe=l(),es=a("li"),wJ=a("strong"),qQe=o("clip"),GQe=o(" \u2014 "),Lx=a("a"),OQe=o("CLIPTokenizer"),XQe=o(" or "),Bx=a("a"),VQe=o("CLIPTokenizerFast"),zQe=o(" (CLIP model)"),WQe=l(),os=a("li"),AJ=a("strong"),QQe=o("convbert"),HQe=o(" \u2014 "),xx=a("a"),UQe=o("ConvBertTokenizer"),JQe=o(" or "),kx=a("a"),YQe=o("ConvBertTokenizerFast"),KQe=o(" (ConvBERT model)"),ZQe=l(),rs=a("li"),LJ=a("strong"),eHe=o("cpm"),oHe=o(" \u2014 "),Rx=a("a"),rHe=o("CpmTokenizer"),tHe=o(" or "),BJ=a("code"),aHe=o("CpmTokenizerFast"),nHe=o(" (CPM model)"),sHe=l(),Vg=a("li"),xJ=a("strong"),lHe=o("ctrl"),iHe=o(" \u2014 "),Sx=a("a"),dHe=o("CTRLTokenizer"),cHe=o(" (CTRL model)"),fHe=l(),ts=a("li"),kJ=a("strong"),mHe=o("deberta"),gHe=o(" \u2014 "),Px=a("a"),hHe=o("DebertaTokenizer"),pHe=o(" or "),$x=a("a"),_He=o("DebertaTokenizerFast"),uHe=o(" (DeBERTa model)"),bHe=l(),zg=a("li"),RJ=a("strong"),vHe=o("deberta-v2"),THe=o(" \u2014 "),Ix=a("a"),FHe=o("DebertaV2Tokenizer"),CHe=o(" (DeBERTa-v2 model)"),MHe=l(),as=a("li"),SJ=a("strong"),EHe=o("distilbert"),yHe=o(" \u2014 "),Dx=a("a"),wHe=o("DistilBertTokenizer"),AHe=o(" or "),Nx=a("a"),LHe=o("DistilBertTokenizerFast"),BHe=o(" (DistilBERT model)"),xHe=l(),ns=a("li"),PJ=a("strong"),kHe=o("dpr"),RHe=o(" \u2014 "),jx=a("a"),SHe=o("DPRQuestionEncoderTokenizer"),PHe=o(" or "),qx=a("a"),$He=o("DPRQuestionEncoderTokenizerFast"),IHe=o(" (DPR model)"),DHe=l(),ss=a("li"),$J=a("strong"),NHe=o("electra"),jHe=o(" \u2014 "),Gx=a("a"),qHe=o("ElectraTokenizer"),GHe=o(" or "),Ox=a("a"),OHe=o("ElectraTokenizerFast"),XHe=o(" (ELECTRA model)"),VHe=l(),Wg=a("li"),IJ=a("strong"),zHe=o("flaubert"),WHe=o(" \u2014 "),Xx=a("a"),QHe=o("FlaubertTokenizer"),HHe=o(" (FlauBERT model)"),UHe=l(),ls=a("li"),DJ=a("strong"),JHe=o("fnet"),YHe=o(" \u2014 "),Vx=a("a"),KHe=o("FNetTokenizer"),ZHe=o(" or "),zx=a("a"),eUe=o("FNetTokenizerFast"),oUe=o(" (FNet model)"),rUe=l(),Qg=a("li"),NJ=a("strong"),tUe=o("fsmt"),aUe=o(" \u2014 "),Wx=a("a"),nUe=o("FSMTTokenizer"),sUe=o(" (FairSeq Machine-Translation model)"),lUe=l(),is=a("li"),jJ=a("strong"),iUe=o("funnel"),dUe=o(" \u2014 "),Qx=a("a"),cUe=o("FunnelTokenizer"),fUe=o(" or "),Hx=a("a"),mUe=o("FunnelTokenizerFast"),gUe=o(" (Funnel Transformer model)"),hUe=l(),ds=a("li"),qJ=a("strong"),pUe=o("gpt2"),_Ue=o(" \u2014 "),Ux=a("a"),uUe=o("GPT2Tokenizer"),bUe=o(" or "),Jx=a("a"),vUe=o("GPT2TokenizerFast"),TUe=o(" (OpenAI GPT-2 model)"),FUe=l(),cs=a("li"),GJ=a("strong"),CUe=o("gpt_neo"),MUe=o(" \u2014 "),Yx=a("a"),EUe=o("GPT2Tokenizer"),yUe=o(" or "),Kx=a("a"),wUe=o("GPT2TokenizerFast"),AUe=o(" (GPT Neo model)"),LUe=l(),fs=a("li"),OJ=a("strong"),BUe=o("herbert"),xUe=o(" \u2014 "),Zx=a("a"),kUe=o("HerbertTokenizer"),RUe=o(" or "),ek=a("a"),SUe=o("HerbertTokenizerFast"),PUe=o(" (HerBERT model)"),$Ue=l(),Hg=a("li"),XJ=a("strong"),IUe=o("hubert"),DUe=o(" \u2014 "),ok=a("a"),NUe=o("Wav2Vec2CTCTokenizer"),jUe=o(" (Hubert model)"),qUe=l(),ms=a("li"),VJ=a("strong"),GUe=o("ibert"),OUe=o(" \u2014 "),rk=a("a"),XUe=o("RobertaTokenizer"),VUe=o(" or "),tk=a("a"),zUe=o("RobertaTokenizerFast"),WUe=o(" (I-BERT model)"),QUe=l(),gs=a("li"),zJ=a("strong"),HUe=o("layoutlm"),UUe=o(" \u2014 "),ak=a("a"),JUe=o("LayoutLMTokenizer"),YUe=o(" or "),nk=a("a"),KUe=o("LayoutLMTokenizerFast"),ZUe=o(" (LayoutLM model)"),eJe=l(),hs=a("li"),WJ=a("strong"),oJe=o("layoutlmv2"),rJe=o(" \u2014 "),sk=a("a"),tJe=o("LayoutLMv2Tokenizer"),aJe=o(" or "),lk=a("a"),nJe=o("LayoutLMv2TokenizerFast"),sJe=o(" (LayoutLMv2 model)"),lJe=l(),ps=a("li"),QJ=a("strong"),iJe=o("layoutxlm"),dJe=o(" \u2014 "),ik=a("a"),cJe=o("LayoutXLMTokenizer"),fJe=o(" or "),dk=a("a"),mJe=o("LayoutXLMTokenizerFast"),gJe=o(" (LayoutXLM model)"),hJe=l(),_s=a("li"),HJ=a("strong"),pJe=o("led"),_Je=o(" \u2014 "),ck=a("a"),uJe=o("LEDTokenizer"),bJe=o(" or "),fk=a("a"),vJe=o("LEDTokenizerFast"),TJe=o(" (LED model)"),FJe=l(),us=a("li"),UJ=a("strong"),CJe=o("longformer"),MJe=o(" \u2014 "),mk=a("a"),EJe=o("LongformerTokenizer"),yJe=o(" or "),gk=a("a"),wJe=o("LongformerTokenizerFast"),AJe=o(" (Longformer model)"),LJe=l(),Ug=a("li"),JJ=a("strong"),BJe=o("luke"),xJe=o(" \u2014 "),hk=a("a"),kJe=o("LukeTokenizer"),RJe=o(" (LUKE model)"),SJe=l(),bs=a("li"),YJ=a("strong"),PJe=o("lxmert"),$Je=o(" \u2014 "),pk=a("a"),IJe=o("LxmertTokenizer"),DJe=o(" or "),_k=a("a"),NJe=o("LxmertTokenizerFast"),jJe=o(" (LXMERT model)"),qJe=l(),Jg=a("li"),KJ=a("strong"),GJe=o("m2m_100"),OJe=o(" \u2014 "),uk=a("a"),XJe=o("M2M100Tokenizer"),VJe=o(" (M2M100 model)"),zJe=l(),Yg=a("li"),ZJ=a("strong"),WJe=o("marian"),QJe=o(" \u2014 "),bk=a("a"),HJe=o("MarianTokenizer"),UJe=o(" (Marian model)"),JJe=l(),vs=a("li"),eY=a("strong"),YJe=o("mbart"),KJe=o(" \u2014 "),vk=a("a"),ZJe=o("MBartTokenizer"),eYe=o(" or "),Tk=a("a"),oYe=o("MBartTokenizerFast"),rYe=o(" (mBART model)"),tYe=l(),Ts=a("li"),oY=a("strong"),aYe=o("mbart50"),nYe=o(" \u2014 "),Fk=a("a"),sYe=o("MBart50Tokenizer"),lYe=o(" or "),Ck=a("a"),iYe=o("MBart50TokenizerFast"),dYe=o(" (mBART-50 model)"),cYe=l(),Kg=a("li"),rY=a("strong"),fYe=o("mluke"),mYe=o(" \u2014 "),Mk=a("a"),gYe=o("MLukeTokenizer"),hYe=o(" (mLUKE model)"),pYe=l(),Fs=a("li"),tY=a("strong"),_Ye=o("mobilebert"),uYe=o(" \u2014 "),Ek=a("a"),bYe=o("MobileBertTokenizer"),vYe=o(" or "),yk=a("a"),TYe=o("MobileBertTokenizerFast"),FYe=o(" (MobileBERT model)"),CYe=l(),Cs=a("li"),aY=a("strong"),MYe=o("mpnet"),EYe=o(" \u2014 "),wk=a("a"),yYe=o("MPNetTokenizer"),wYe=o(" or "),Ak=a("a"),AYe=o("MPNetTokenizerFast"),LYe=o(" (MPNet model)"),BYe=l(),Ms=a("li"),nY=a("strong"),xYe=o("mt5"),kYe=o(" \u2014 "),Lk=a("a"),RYe=o("MT5Tokenizer"),SYe=o(" or "),Bk=a("a"),PYe=o("MT5TokenizerFast"),$Ye=o(" (mT5 model)"),IYe=l(),Es=a("li"),sY=a("strong"),DYe=o("openai-gpt"),NYe=o(" \u2014 "),xk=a("a"),jYe=o("OpenAIGPTTokenizer"),qYe=o(" or "),kk=a("a"),GYe=o("OpenAIGPTTokenizerFast"),OYe=o(" (OpenAI GPT model)"),XYe=l(),ys=a("li"),lY=a("strong"),VYe=o("pegasus"),zYe=o(" \u2014 "),Rk=a("a"),WYe=o("PegasusTokenizer"),QYe=o(" or "),Sk=a("a"),HYe=o("PegasusTokenizerFast"),UYe=o(" (Pegasus model)"),JYe=l(),Zg=a("li"),iY=a("strong"),YYe=o("perceiver"),KYe=o(" \u2014 "),Pk=a("a"),ZYe=o("PerceiverTokenizer"),eKe=o(" (Perceiver model)"),oKe=l(),eh=a("li"),dY=a("strong"),rKe=o("phobert"),tKe=o(" \u2014 "),$k=a("a"),aKe=o("PhobertTokenizer"),nKe=o(" (PhoBERT model)"),sKe=l(),oh=a("li"),cY=a("strong"),lKe=o("plbart"),iKe=o(" \u2014 "),Ik=a("a"),dKe=o("PLBartTokenizer"),cKe=o(" (PLBart model)"),fKe=l(),rh=a("li"),fY=a("strong"),mKe=o("prophetnet"),gKe=o(" \u2014 "),Dk=a("a"),hKe=o("ProphetNetTokenizer"),pKe=o(" (ProphetNet model)"),_Ke=l(),ws=a("li"),mY=a("strong"),uKe=o("qdqbert"),bKe=o(" \u2014 "),Nk=a("a"),vKe=o("BertTokenizer"),TKe=o(" or "),jk=a("a"),FKe=o("BertTokenizerFast"),CKe=o(" (QDQBert model)"),MKe=l(),th=a("li"),gY=a("strong"),EKe=o("rag"),yKe=o(" \u2014 "),qk=a("a"),wKe=o("RagTokenizer"),AKe=o(" (RAG model)"),LKe=l(),As=a("li"),hY=a("strong"),BKe=o("realm"),xKe=o(" \u2014 "),Gk=a("a"),kKe=o("RealmTokenizer"),RKe=o(" or "),Ok=a("a"),SKe=o("RealmTokenizerFast"),PKe=o(" (Realm model)"),$Ke=l(),Ls=a("li"),pY=a("strong"),IKe=o("reformer"),DKe=o(" \u2014 "),Xk=a("a"),NKe=o("ReformerTokenizer"),jKe=o(" or "),Vk=a("a"),qKe=o("ReformerTokenizerFast"),GKe=o(" (Reformer model)"),OKe=l(),Bs=a("li"),_Y=a("strong"),XKe=o("rembert"),VKe=o(" \u2014 "),zk=a("a"),zKe=o("RemBertTokenizer"),WKe=o(" or "),Wk=a("a"),QKe=o("RemBertTokenizerFast"),HKe=o(" (RemBERT model)"),UKe=l(),xs=a("li"),uY=a("strong"),JKe=o("retribert"),YKe=o(" \u2014 "),Qk=a("a"),KKe=o("RetriBertTokenizer"),ZKe=o(" or "),Hk=a("a"),eZe=o("RetriBertTokenizerFast"),oZe=o(" (RetriBERT model)"),rZe=l(),ks=a("li"),bY=a("strong"),tZe=o("roberta"),aZe=o(" \u2014 "),Uk=a("a"),nZe=o("RobertaTokenizer"),sZe=o(" or "),Jk=a("a"),lZe=o("RobertaTokenizerFast"),iZe=o(" (RoBERTa model)"),dZe=l(),Rs=a("li"),vY=a("strong"),cZe=o("roformer"),fZe=o(" \u2014 "),Yk=a("a"),mZe=o("RoFormerTokenizer"),gZe=o(" or "),Kk=a("a"),hZe=o("RoFormerTokenizerFast"),pZe=o(" (RoFormer model)"),_Ze=l(),ah=a("li"),TY=a("strong"),uZe=o("speech_to_text"),bZe=o(" \u2014 "),Zk=a("a"),vZe=o("Speech2TextTokenizer"),TZe=o(" (Speech2Text model)"),FZe=l(),nh=a("li"),FY=a("strong"),CZe=o("speech_to_text_2"),MZe=o(" \u2014 "),eR=a("a"),EZe=o("Speech2Text2Tokenizer"),yZe=o(" (Speech2Text2 model)"),wZe=l(),Ss=a("li"),CY=a("strong"),AZe=o("splinter"),LZe=o(" \u2014 "),oR=a("a"),BZe=o("SplinterTokenizer"),xZe=o(" or "),rR=a("a"),kZe=o("SplinterTokenizerFast"),RZe=o(" (Splinter model)"),SZe=l(),Ps=a("li"),MY=a("strong"),PZe=o("squeezebert"),$Ze=o(" \u2014 "),tR=a("a"),IZe=o("SqueezeBertTokenizer"),DZe=o(" or "),aR=a("a"),NZe=o("SqueezeBertTokenizerFast"),jZe=o(" (SqueezeBERT model)"),qZe=l(),$s=a("li"),EY=a("strong"),GZe=o("t5"),OZe=o(" \u2014 "),nR=a("a"),XZe=o("T5Tokenizer"),VZe=o(" or "),sR=a("a"),zZe=o("T5TokenizerFast"),WZe=o(" (T5 model)"),QZe=l(),sh=a("li"),yY=a("strong"),HZe=o("tapas"),UZe=o(" \u2014 "),lR=a("a"),JZe=o("TapasTokenizer"),YZe=o(" (TAPAS model)"),KZe=l(),lh=a("li"),wY=a("strong"),ZZe=o("tapex"),eeo=o(" \u2014 "),iR=a("a"),oeo=o("TapexTokenizer"),reo=o(" (TAPEX model)"),teo=l(),ih=a("li"),AY=a("strong"),aeo=o("transfo-xl"),neo=o(" \u2014 "),dR=a("a"),seo=o("TransfoXLTokenizer"),leo=o(" (Transformer-XL model)"),ieo=l(),dh=a("li"),LY=a("strong"),deo=o("wav2vec2"),ceo=o(" \u2014 "),cR=a("a"),feo=o("Wav2Vec2CTCTokenizer"),meo=o(" (Wav2Vec2 model)"),geo=l(),ch=a("li"),BY=a("strong"),heo=o("wav2vec2_phoneme"),peo=o(" \u2014 "),fR=a("a"),_eo=o("Wav2Vec2PhonemeCTCTokenizer"),ueo=o(" (Wav2Vec2Phoneme model)"),beo=l(),Is=a("li"),xY=a("strong"),veo=o("xglm"),Teo=o(" \u2014 "),mR=a("a"),Feo=o("XGLMTokenizer"),Ceo=o(" or "),gR=a("a"),Meo=o("XGLMTokenizerFast"),Eeo=o(" (XGLM model)"),yeo=l(),fh=a("li"),kY=a("strong"),weo=o("xlm"),Aeo=o(" \u2014 "),hR=a("a"),Leo=o("XLMTokenizer"),Beo=o(" (XLM model)"),xeo=l(),mh=a("li"),RY=a("strong"),keo=o("xlm-prophetnet"),Reo=o(" \u2014 "),pR=a("a"),Seo=o("XLMProphetNetTokenizer"),Peo=o(" (XLMProphetNet model)"),$eo=l(),Ds=a("li"),SY=a("strong"),Ieo=o("xlm-roberta"),Deo=o(" \u2014 "),_R=a("a"),Neo=o("XLMRobertaTokenizer"),jeo=o(" or "),uR=a("a"),qeo=o("XLMRobertaTokenizerFast"),Geo=o(" (XLM-RoBERTa model)"),Oeo=l(),Ns=a("li"),PY=a("strong"),Xeo=o("xlnet"),Veo=o(" \u2014 "),bR=a("a"),zeo=o("XLNetTokenizer"),Weo=o(" or "),vR=a("a"),Qeo=o("XLNetTokenizerFast"),Heo=o(" (XLNet model)"),Ueo=l(),$Y=a("p"),Jeo=o("Examples:"),Yeo=l(),f(RE.$$.fragment),Keo=l(),gh=a("div"),f(SE.$$.fragment),Zeo=l(),IY=a("p"),eoo=o("Register a new tokenizer in this mapping."),Oke=l(),Qi=a("h2"),hh=a("a"),DY=a("span"),f(PE.$$.fragment),ooo=l(),NY=a("span"),roo=o("AutoFeatureExtractor"),Xke=l(),Ho=a("div"),f($E.$$.fragment),too=l(),IE=a("p"),aoo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),TR=a("a"),noo=o("AutoFeatureExtractor.from_pretrained()"),soo=o(" class method."),loo=l(),DE=a("p"),ioo=o("This class cannot be instantiated directly using "),jY=a("code"),doo=o("__init__()"),coo=o(" (throws an error)."),foo=l(),$e=a("div"),f(NE.$$.fragment),moo=l(),qY=a("p"),goo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),hoo=l(),Xa=a("p"),poo=o("The feature extractor class to instantiate is selected based on the "),GY=a("code"),_oo=o("model_type"),uoo=o(` property of the config object
(either passed as an argument or loaded from `),OY=a("code"),boo=o("pretrained_model_name_or_path"),voo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),XY=a("code"),Too=o("pretrained_model_name_or_path"),Foo=o(":"),Coo=l(),te=a("ul"),ph=a("li"),VY=a("strong"),Moo=o("beit"),Eoo=o(" \u2014 "),FR=a("a"),yoo=o("BeitFeatureExtractor"),woo=o(" (BEiT model)"),Aoo=l(),_h=a("li"),zY=a("strong"),Loo=o("clip"),Boo=o(" \u2014 "),CR=a("a"),xoo=o("CLIPFeatureExtractor"),koo=o(" (CLIP model)"),Roo=l(),uh=a("li"),WY=a("strong"),Soo=o("convnext"),Poo=o(" \u2014 "),MR=a("a"),$oo=o("ConvNextFeatureExtractor"),Ioo=o(" (ConvNext model)"),Doo=l(),bh=a("li"),QY=a("strong"),Noo=o("deit"),joo=o(" \u2014 "),ER=a("a"),qoo=o("DeiTFeatureExtractor"),Goo=o(" (DeiT model)"),Ooo=l(),vh=a("li"),HY=a("strong"),Xoo=o("detr"),Voo=o(" \u2014 "),yR=a("a"),zoo=o("DetrFeatureExtractor"),Woo=o(" (DETR model)"),Qoo=l(),Th=a("li"),UY=a("strong"),Hoo=o("hubert"),Uoo=o(" \u2014 "),wR=a("a"),Joo=o("Wav2Vec2FeatureExtractor"),Yoo=o(" (Hubert model)"),Koo=l(),Fh=a("li"),JY=a("strong"),Zoo=o("layoutlmv2"),ero=o(" \u2014 "),AR=a("a"),oro=o("LayoutLMv2FeatureExtractor"),rro=o(" (LayoutLMv2 model)"),tro=l(),Ch=a("li"),YY=a("strong"),aro=o("maskformer"),nro=o(" \u2014 "),LR=a("a"),sro=o("MaskFormerFeatureExtractor"),lro=o(" (MaskFormer model)"),iro=l(),Mh=a("li"),KY=a("strong"),dro=o("perceiver"),cro=o(" \u2014 "),BR=a("a"),fro=o("PerceiverFeatureExtractor"),mro=o(" (Perceiver model)"),gro=l(),Eh=a("li"),ZY=a("strong"),hro=o("poolformer"),pro=o(" \u2014 "),xR=a("a"),_ro=o("PoolFormerFeatureExtractor"),uro=o(" (PoolFormer model)"),bro=l(),yh=a("li"),eK=a("strong"),vro=o("resnet"),Tro=o(" \u2014 "),kR=a("a"),Fro=o("ConvNextFeatureExtractor"),Cro=o(" (ResNet model)"),Mro=l(),wh=a("li"),oK=a("strong"),Ero=o("segformer"),yro=o(" \u2014 "),RR=a("a"),wro=o("SegformerFeatureExtractor"),Aro=o(" (SegFormer model)"),Lro=l(),Ah=a("li"),rK=a("strong"),Bro=o("speech_to_text"),xro=o(" \u2014 "),SR=a("a"),kro=o("Speech2TextFeatureExtractor"),Rro=o(" (Speech2Text model)"),Sro=l(),Lh=a("li"),tK=a("strong"),Pro=o("swin"),$ro=o(" \u2014 "),PR=a("a"),Iro=o("ViTFeatureExtractor"),Dro=o(" (Swin model)"),Nro=l(),Bh=a("li"),aK=a("strong"),jro=o("van"),qro=o(" \u2014 "),$R=a("a"),Gro=o("ConvNextFeatureExtractor"),Oro=o(" (VAN model)"),Xro=l(),xh=a("li"),nK=a("strong"),Vro=o("vit"),zro=o(" \u2014 "),IR=a("a"),Wro=o("ViTFeatureExtractor"),Qro=o(" (ViT model)"),Hro=l(),kh=a("li"),sK=a("strong"),Uro=o("vit_mae"),Jro=o(" \u2014 "),DR=a("a"),Yro=o("ViTFeatureExtractor"),Kro=o(" (ViTMAE model)"),Zro=l(),Rh=a("li"),lK=a("strong"),eto=o("wav2vec2"),oto=o(" \u2014 "),NR=a("a"),rto=o("Wav2Vec2FeatureExtractor"),tto=o(" (Wav2Vec2 model)"),ato=l(),f(Sh.$$.fragment),nto=l(),iK=a("p"),sto=o("Examples:"),lto=l(),f(jE.$$.fragment),ito=l(),Ph=a("div"),f(qE.$$.fragment),dto=l(),dK=a("p"),cto=o("Register a new feature extractor for this class."),Vke=l(),Hi=a("h2"),$h=a("a"),cK=a("span"),f(GE.$$.fragment),fto=l(),fK=a("span"),mto=o("AutoProcessor"),zke=l(),Uo=a("div"),f(OE.$$.fragment),gto=l(),XE=a("p"),hto=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),jR=a("a"),pto=o("AutoProcessor.from_pretrained()"),_to=o(" class method."),uto=l(),VE=a("p"),bto=o("This class cannot be instantiated directly using "),mK=a("code"),vto=o("__init__()"),Tto=o(" (throws an error)."),Fto=l(),Ie=a("div"),f(zE.$$.fragment),Cto=l(),gK=a("p"),Mto=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Eto=l(),Ui=a("p"),yto=o("The processor class to instantiate is selected based on the "),hK=a("code"),wto=o("model_type"),Ato=o(` property of the config object (either
passed as an argument or loaded from `),pK=a("code"),Lto=o("pretrained_model_name_or_path"),Bto=o(" if possible):"),xto=l(),xe=a("ul"),Ih=a("li"),_K=a("strong"),kto=o("clip"),Rto=o(" \u2014 "),qR=a("a"),Sto=o("CLIPProcessor"),Pto=o(" (CLIP model)"),$to=l(),Dh=a("li"),uK=a("strong"),Ito=o("layoutlmv2"),Dto=o(" \u2014 "),GR=a("a"),Nto=o("LayoutLMv2Processor"),jto=o(" (LayoutLMv2 model)"),qto=l(),Nh=a("li"),bK=a("strong"),Gto=o("layoutxlm"),Oto=o(" \u2014 "),OR=a("a"),Xto=o("LayoutXLMProcessor"),Vto=o(" (LayoutXLM model)"),zto=l(),jh=a("li"),vK=a("strong"),Wto=o("speech_to_text"),Qto=o(" \u2014 "),XR=a("a"),Hto=o("Speech2TextProcessor"),Uto=o(" (Speech2Text model)"),Jto=l(),qh=a("li"),TK=a("strong"),Yto=o("speech_to_text_2"),Kto=o(" \u2014 "),VR=a("a"),Zto=o("Speech2Text2Processor"),eao=o(" (Speech2Text2 model)"),oao=l(),Gh=a("li"),FK=a("strong"),rao=o("trocr"),tao=o(" \u2014 "),zR=a("a"),aao=o("TrOCRProcessor"),nao=o(" (TrOCR model)"),sao=l(),Oh=a("li"),CK=a("strong"),lao=o("vision-text-dual-encoder"),iao=o(" \u2014 "),WR=a("a"),dao=o("VisionTextDualEncoderProcessor"),cao=o(" (VisionTextDualEncoder model)"),fao=l(),Xh=a("li"),MK=a("strong"),mao=o("wav2vec2"),gao=o(" \u2014 "),QR=a("a"),hao=o("Wav2Vec2Processor"),pao=o(" (Wav2Vec2 model)"),_ao=l(),f(Vh.$$.fragment),uao=l(),EK=a("p"),bao=o("Examples:"),vao=l(),f(WE.$$.fragment),Tao=l(),zh=a("div"),f(QE.$$.fragment),Fao=l(),yK=a("p"),Cao=o("Register a new processor for this class."),Wke=l(),Ji=a("h2"),Wh=a("a"),wK=a("span"),f(HE.$$.fragment),Mao=l(),AK=a("span"),Eao=o("AutoModel"),Qke=l(),Jo=a("div"),f(UE.$$.fragment),yao=l(),Yi=a("p"),wao=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),LK=a("code"),Aao=o("from_pretrained()"),Lao=o("class method or the "),BK=a("code"),Bao=o("from_config()"),xao=o(`class
method.`),kao=l(),JE=a("p"),Rao=o("This class cannot be instantiated directly using "),xK=a("code"),Sao=o("__init__()"),Pao=o(" (throws an error)."),$ao=l(),Vr=a("div"),f(YE.$$.fragment),Iao=l(),kK=a("p"),Dao=o("Instantiates one of the base model classes of the library from a configuration."),Nao=l(),Ki=a("p"),jao=o(`Note:
Loading a model from its configuration file does `),RK=a("strong"),qao=o("not"),Gao=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SK=a("code"),Oao=o("from_pretrained()"),Xao=o("to load the model weights."),Vao=l(),PK=a("p"),zao=o("Examples:"),Wao=l(),f(KE.$$.fragment),Qao=l(),De=a("div"),f(ZE.$$.fragment),Hao=l(),$K=a("p"),Uao=o("Instantiate one of the base model classes of the library from a pretrained model."),Jao=l(),Va=a("p"),Yao=o("The model class to instantiate is selected based on the "),IK=a("code"),Kao=o("model_type"),Zao=o(` property of the config object (either
passed as an argument or loaded from `),DK=a("code"),eno=o("pretrained_model_name_or_path"),ono=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NK=a("code"),rno=o("pretrained_model_name_or_path"),tno=o(":"),ano=l(),F=a("ul"),Qh=a("li"),jK=a("strong"),nno=o("albert"),sno=o(" \u2014 "),HR=a("a"),lno=o("AlbertModel"),ino=o(" (ALBERT model)"),dno=l(),Hh=a("li"),qK=a("strong"),cno=o("bart"),fno=o(" \u2014 "),UR=a("a"),mno=o("BartModel"),gno=o(" (BART model)"),hno=l(),Uh=a("li"),GK=a("strong"),pno=o("beit"),_no=o(" \u2014 "),JR=a("a"),uno=o("BeitModel"),bno=o(" (BEiT model)"),vno=l(),Jh=a("li"),OK=a("strong"),Tno=o("bert"),Fno=o(" \u2014 "),YR=a("a"),Cno=o("BertModel"),Mno=o(" (BERT model)"),Eno=l(),Yh=a("li"),XK=a("strong"),yno=o("bert-generation"),wno=o(" \u2014 "),KR=a("a"),Ano=o("BertGenerationEncoder"),Lno=o(" (Bert Generation model)"),Bno=l(),Kh=a("li"),VK=a("strong"),xno=o("big_bird"),kno=o(" \u2014 "),ZR=a("a"),Rno=o("BigBirdModel"),Sno=o(" (BigBird model)"),Pno=l(),Zh=a("li"),zK=a("strong"),$no=o("bigbird_pegasus"),Ino=o(" \u2014 "),eS=a("a"),Dno=o("BigBirdPegasusModel"),Nno=o(" (BigBirdPegasus model)"),jno=l(),ep=a("li"),WK=a("strong"),qno=o("blenderbot"),Gno=o(" \u2014 "),oS=a("a"),Ono=o("BlenderbotModel"),Xno=o(" (Blenderbot model)"),Vno=l(),op=a("li"),QK=a("strong"),zno=o("blenderbot-small"),Wno=o(" \u2014 "),rS=a("a"),Qno=o("BlenderbotSmallModel"),Hno=o(" (BlenderbotSmall model)"),Uno=l(),rp=a("li"),HK=a("strong"),Jno=o("camembert"),Yno=o(" \u2014 "),tS=a("a"),Kno=o("CamembertModel"),Zno=o(" (CamemBERT model)"),eso=l(),tp=a("li"),UK=a("strong"),oso=o("canine"),rso=o(" \u2014 "),aS=a("a"),tso=o("CanineModel"),aso=o(" (Canine model)"),nso=l(),ap=a("li"),JK=a("strong"),sso=o("clip"),lso=o(" \u2014 "),nS=a("a"),iso=o("CLIPModel"),dso=o(" (CLIP model)"),cso=l(),np=a("li"),YK=a("strong"),fso=o("convbert"),mso=o(" \u2014 "),sS=a("a"),gso=o("ConvBertModel"),hso=o(" (ConvBERT model)"),pso=l(),sp=a("li"),KK=a("strong"),_so=o("convnext"),uso=o(" \u2014 "),lS=a("a"),bso=o("ConvNextModel"),vso=o(" (ConvNext model)"),Tso=l(),lp=a("li"),ZK=a("strong"),Fso=o("ctrl"),Cso=o(" \u2014 "),iS=a("a"),Mso=o("CTRLModel"),Eso=o(" (CTRL model)"),yso=l(),ip=a("li"),eZ=a("strong"),wso=o("data2vec-audio"),Aso=o(" \u2014 "),dS=a("a"),Lso=o("Data2VecAudioModel"),Bso=o(" (Data2VecAudio model)"),xso=l(),dp=a("li"),oZ=a("strong"),kso=o("data2vec-text"),Rso=o(" \u2014 "),cS=a("a"),Sso=o("Data2VecTextModel"),Pso=o(" (Data2VecText model)"),$so=l(),cp=a("li"),rZ=a("strong"),Iso=o("deberta"),Dso=o(" \u2014 "),fS=a("a"),Nso=o("DebertaModel"),jso=o(" (DeBERTa model)"),qso=l(),fp=a("li"),tZ=a("strong"),Gso=o("deberta-v2"),Oso=o(" \u2014 "),mS=a("a"),Xso=o("DebertaV2Model"),Vso=o(" (DeBERTa-v2 model)"),zso=l(),mp=a("li"),aZ=a("strong"),Wso=o("decision_transformer"),Qso=o(" \u2014 "),gS=a("a"),Hso=o("DecisionTransformerModel"),Uso=o(" (Decision Transformer model)"),Jso=l(),gp=a("li"),nZ=a("strong"),Yso=o("deit"),Kso=o(" \u2014 "),hS=a("a"),Zso=o("DeiTModel"),elo=o(" (DeiT model)"),olo=l(),hp=a("li"),sZ=a("strong"),rlo=o("detr"),tlo=o(" \u2014 "),pS=a("a"),alo=o("DetrModel"),nlo=o(" (DETR model)"),slo=l(),pp=a("li"),lZ=a("strong"),llo=o("distilbert"),ilo=o(" \u2014 "),_S=a("a"),dlo=o("DistilBertModel"),clo=o(" (DistilBERT model)"),flo=l(),_p=a("li"),iZ=a("strong"),mlo=o("dpr"),glo=o(" \u2014 "),uS=a("a"),hlo=o("DPRQuestionEncoder"),plo=o(" (DPR model)"),_lo=l(),up=a("li"),dZ=a("strong"),ulo=o("dpt"),blo=o(" \u2014 "),bS=a("a"),vlo=o("DPTModel"),Tlo=o(" (DPT model)"),Flo=l(),bp=a("li"),cZ=a("strong"),Clo=o("electra"),Mlo=o(" \u2014 "),vS=a("a"),Elo=o("ElectraModel"),ylo=o(" (ELECTRA model)"),wlo=l(),vp=a("li"),fZ=a("strong"),Alo=o("flaubert"),Llo=o(" \u2014 "),TS=a("a"),Blo=o("FlaubertModel"),xlo=o(" (FlauBERT model)"),klo=l(),Tp=a("li"),mZ=a("strong"),Rlo=o("fnet"),Slo=o(" \u2014 "),FS=a("a"),Plo=o("FNetModel"),$lo=o(" (FNet model)"),Ilo=l(),Fp=a("li"),gZ=a("strong"),Dlo=o("fsmt"),Nlo=o(" \u2014 "),CS=a("a"),jlo=o("FSMTModel"),qlo=o(" (FairSeq Machine-Translation model)"),Glo=l(),js=a("li"),hZ=a("strong"),Olo=o("funnel"),Xlo=o(" \u2014 "),MS=a("a"),Vlo=o("FunnelModel"),zlo=o(" or "),ES=a("a"),Wlo=o("FunnelBaseModel"),Qlo=o(" (Funnel Transformer model)"),Hlo=l(),Cp=a("li"),pZ=a("strong"),Ulo=o("glpn"),Jlo=o(" \u2014 "),yS=a("a"),Ylo=o("GLPNModel"),Klo=o(" (GLPN model)"),Zlo=l(),Mp=a("li"),_Z=a("strong"),eio=o("gpt2"),oio=o(" \u2014 "),wS=a("a"),rio=o("GPT2Model"),tio=o(" (OpenAI GPT-2 model)"),aio=l(),Ep=a("li"),uZ=a("strong"),nio=o("gpt_neo"),sio=o(" \u2014 "),AS=a("a"),lio=o("GPTNeoModel"),iio=o(" (GPT Neo model)"),dio=l(),yp=a("li"),bZ=a("strong"),cio=o("gptj"),fio=o(" \u2014 "),LS=a("a"),mio=o("GPTJModel"),gio=o(" (GPT-J model)"),hio=l(),wp=a("li"),vZ=a("strong"),pio=o("hubert"),_io=o(" \u2014 "),BS=a("a"),uio=o("HubertModel"),bio=o(" (Hubert model)"),vio=l(),Ap=a("li"),TZ=a("strong"),Tio=o("ibert"),Fio=o(" \u2014 "),xS=a("a"),Cio=o("IBertModel"),Mio=o(" (I-BERT model)"),Eio=l(),Lp=a("li"),FZ=a("strong"),yio=o("imagegpt"),wio=o(" \u2014 "),kS=a("a"),Aio=o("ImageGPTModel"),Lio=o(" (ImageGPT model)"),Bio=l(),Bp=a("li"),CZ=a("strong"),xio=o("layoutlm"),kio=o(" \u2014 "),RS=a("a"),Rio=o("LayoutLMModel"),Sio=o(" (LayoutLM model)"),Pio=l(),xp=a("li"),MZ=a("strong"),$io=o("layoutlmv2"),Iio=o(" \u2014 "),SS=a("a"),Dio=o("LayoutLMv2Model"),Nio=o(" (LayoutLMv2 model)"),jio=l(),kp=a("li"),EZ=a("strong"),qio=o("led"),Gio=o(" \u2014 "),PS=a("a"),Oio=o("LEDModel"),Xio=o(" (LED model)"),Vio=l(),Rp=a("li"),yZ=a("strong"),zio=o("longformer"),Wio=o(" \u2014 "),$S=a("a"),Qio=o("LongformerModel"),Hio=o(" (Longformer model)"),Uio=l(),Sp=a("li"),wZ=a("strong"),Jio=o("luke"),Yio=o(" \u2014 "),IS=a("a"),Kio=o("LukeModel"),Zio=o(" (LUKE model)"),edo=l(),Pp=a("li"),AZ=a("strong"),odo=o("lxmert"),rdo=o(" \u2014 "),DS=a("a"),tdo=o("LxmertModel"),ado=o(" (LXMERT model)"),ndo=l(),$p=a("li"),LZ=a("strong"),sdo=o("m2m_100"),ldo=o(" \u2014 "),NS=a("a"),ido=o("M2M100Model"),ddo=o(" (M2M100 model)"),cdo=l(),Ip=a("li"),BZ=a("strong"),fdo=o("marian"),mdo=o(" \u2014 "),jS=a("a"),gdo=o("MarianModel"),hdo=o(" (Marian model)"),pdo=l(),Dp=a("li"),xZ=a("strong"),_do=o("maskformer"),udo=o(" \u2014 "),qS=a("a"),bdo=o("MaskFormerModel"),vdo=o(" (MaskFormer model)"),Tdo=l(),Np=a("li"),kZ=a("strong"),Fdo=o("mbart"),Cdo=o(" \u2014 "),GS=a("a"),Mdo=o("MBartModel"),Edo=o(" (mBART model)"),ydo=l(),jp=a("li"),RZ=a("strong"),wdo=o("megatron-bert"),Ado=o(" \u2014 "),OS=a("a"),Ldo=o("MegatronBertModel"),Bdo=o(" (MegatronBert model)"),xdo=l(),qp=a("li"),SZ=a("strong"),kdo=o("mobilebert"),Rdo=o(" \u2014 "),XS=a("a"),Sdo=o("MobileBertModel"),Pdo=o(" (MobileBERT model)"),$do=l(),Gp=a("li"),PZ=a("strong"),Ido=o("mpnet"),Ddo=o(" \u2014 "),VS=a("a"),Ndo=o("MPNetModel"),jdo=o(" (MPNet model)"),qdo=l(),Op=a("li"),$Z=a("strong"),Gdo=o("mt5"),Odo=o(" \u2014 "),zS=a("a"),Xdo=o("MT5Model"),Vdo=o(" (mT5 model)"),zdo=l(),Xp=a("li"),IZ=a("strong"),Wdo=o("nystromformer"),Qdo=o(" \u2014 "),WS=a("a"),Hdo=o("NystromformerModel"),Udo=o(" (Nystromformer model)"),Jdo=l(),Vp=a("li"),DZ=a("strong"),Ydo=o("openai-gpt"),Kdo=o(" \u2014 "),QS=a("a"),Zdo=o("OpenAIGPTModel"),eco=o(" (OpenAI GPT model)"),oco=l(),zp=a("li"),NZ=a("strong"),rco=o("pegasus"),tco=o(" \u2014 "),HS=a("a"),aco=o("PegasusModel"),nco=o(" (Pegasus model)"),sco=l(),Wp=a("li"),jZ=a("strong"),lco=o("perceiver"),ico=o(" \u2014 "),US=a("a"),dco=o("PerceiverModel"),cco=o(" (Perceiver model)"),fco=l(),Qp=a("li"),qZ=a("strong"),mco=o("plbart"),gco=o(" \u2014 "),JS=a("a"),hco=o("PLBartModel"),pco=o(" (PLBart model)"),_co=l(),Hp=a("li"),GZ=a("strong"),uco=o("poolformer"),bco=o(" \u2014 "),YS=a("a"),vco=o("PoolFormerModel"),Tco=o(" (PoolFormer model)"),Fco=l(),Up=a("li"),OZ=a("strong"),Cco=o("prophetnet"),Mco=o(" \u2014 "),KS=a("a"),Eco=o("ProphetNetModel"),yco=o(" (ProphetNet model)"),wco=l(),Jp=a("li"),XZ=a("strong"),Aco=o("qdqbert"),Lco=o(" \u2014 "),ZS=a("a"),Bco=o("QDQBertModel"),xco=o(" (QDQBert model)"),kco=l(),Yp=a("li"),VZ=a("strong"),Rco=o("reformer"),Sco=o(" \u2014 "),eP=a("a"),Pco=o("ReformerModel"),$co=o(" (Reformer model)"),Ico=l(),Kp=a("li"),zZ=a("strong"),Dco=o("rembert"),Nco=o(" \u2014 "),oP=a("a"),jco=o("RemBertModel"),qco=o(" (RemBERT model)"),Gco=l(),Zp=a("li"),WZ=a("strong"),Oco=o("resnet"),Xco=o(" \u2014 "),rP=a("a"),Vco=o("ResNetModel"),zco=o(" (ResNet model)"),Wco=l(),e_=a("li"),QZ=a("strong"),Qco=o("retribert"),Hco=o(" \u2014 "),tP=a("a"),Uco=o("RetriBertModel"),Jco=o(" (RetriBERT model)"),Yco=l(),o_=a("li"),HZ=a("strong"),Kco=o("roberta"),Zco=o(" \u2014 "),aP=a("a"),efo=o("RobertaModel"),ofo=o(" (RoBERTa model)"),rfo=l(),r_=a("li"),UZ=a("strong"),tfo=o("roformer"),afo=o(" \u2014 "),nP=a("a"),nfo=o("RoFormerModel"),sfo=o(" (RoFormer model)"),lfo=l(),t_=a("li"),JZ=a("strong"),ifo=o("segformer"),dfo=o(" \u2014 "),sP=a("a"),cfo=o("SegformerModel"),ffo=o(" (SegFormer model)"),mfo=l(),a_=a("li"),YZ=a("strong"),gfo=o("sew"),hfo=o(" \u2014 "),lP=a("a"),pfo=o("SEWModel"),_fo=o(" (SEW model)"),ufo=l(),n_=a("li"),KZ=a("strong"),bfo=o("sew-d"),vfo=o(" \u2014 "),iP=a("a"),Tfo=o("SEWDModel"),Ffo=o(" (SEW-D model)"),Cfo=l(),s_=a("li"),ZZ=a("strong"),Mfo=o("speech_to_text"),Efo=o(" \u2014 "),dP=a("a"),yfo=o("Speech2TextModel"),wfo=o(" (Speech2Text model)"),Afo=l(),l_=a("li"),eee=a("strong"),Lfo=o("splinter"),Bfo=o(" \u2014 "),cP=a("a"),xfo=o("SplinterModel"),kfo=o(" (Splinter model)"),Rfo=l(),i_=a("li"),oee=a("strong"),Sfo=o("squeezebert"),Pfo=o(" \u2014 "),fP=a("a"),$fo=o("SqueezeBertModel"),Ifo=o(" (SqueezeBERT model)"),Dfo=l(),d_=a("li"),ree=a("strong"),Nfo=o("swin"),jfo=o(" \u2014 "),mP=a("a"),qfo=o("SwinModel"),Gfo=o(" (Swin model)"),Ofo=l(),c_=a("li"),tee=a("strong"),Xfo=o("t5"),Vfo=o(" \u2014 "),gP=a("a"),zfo=o("T5Model"),Wfo=o(" (T5 model)"),Qfo=l(),f_=a("li"),aee=a("strong"),Hfo=o("tapas"),Ufo=o(" \u2014 "),hP=a("a"),Jfo=o("TapasModel"),Yfo=o(" (TAPAS model)"),Kfo=l(),m_=a("li"),nee=a("strong"),Zfo=o("transfo-xl"),emo=o(" \u2014 "),pP=a("a"),omo=o("TransfoXLModel"),rmo=o(" (Transformer-XL model)"),tmo=l(),g_=a("li"),see=a("strong"),amo=o("unispeech"),nmo=o(" \u2014 "),_P=a("a"),smo=o("UniSpeechModel"),lmo=o(" (UniSpeech model)"),imo=l(),h_=a("li"),lee=a("strong"),dmo=o("unispeech-sat"),cmo=o(" \u2014 "),uP=a("a"),fmo=o("UniSpeechSatModel"),mmo=o(" (UniSpeechSat model)"),gmo=l(),p_=a("li"),iee=a("strong"),hmo=o("van"),pmo=o(" \u2014 "),bP=a("a"),_mo=o("VanModel"),umo=o(" (VAN model)"),bmo=l(),__=a("li"),dee=a("strong"),vmo=o("vilt"),Tmo=o(" \u2014 "),vP=a("a"),Fmo=o("ViltModel"),Cmo=o(" (ViLT model)"),Mmo=l(),u_=a("li"),cee=a("strong"),Emo=o("vision-text-dual-encoder"),ymo=o(" \u2014 "),TP=a("a"),wmo=o("VisionTextDualEncoderModel"),Amo=o(" (VisionTextDualEncoder model)"),Lmo=l(),b_=a("li"),fee=a("strong"),Bmo=o("visual_bert"),xmo=o(" \u2014 "),FP=a("a"),kmo=o("VisualBertModel"),Rmo=o(" (VisualBert model)"),Smo=l(),v_=a("li"),mee=a("strong"),Pmo=o("vit"),$mo=o(" \u2014 "),CP=a("a"),Imo=o("ViTModel"),Dmo=o(" (ViT model)"),Nmo=l(),T_=a("li"),gee=a("strong"),jmo=o("vit_mae"),qmo=o(" \u2014 "),MP=a("a"),Gmo=o("ViTMAEModel"),Omo=o(" (ViTMAE model)"),Xmo=l(),F_=a("li"),hee=a("strong"),Vmo=o("wav2vec2"),zmo=o(" \u2014 "),EP=a("a"),Wmo=o("Wav2Vec2Model"),Qmo=o(" (Wav2Vec2 model)"),Hmo=l(),C_=a("li"),pee=a("strong"),Umo=o("wavlm"),Jmo=o(" \u2014 "),yP=a("a"),Ymo=o("WavLMModel"),Kmo=o(" (WavLM model)"),Zmo=l(),M_=a("li"),_ee=a("strong"),ego=o("xglm"),ogo=o(" \u2014 "),wP=a("a"),rgo=o("XGLMModel"),tgo=o(" (XGLM model)"),ago=l(),E_=a("li"),uee=a("strong"),ngo=o("xlm"),sgo=o(" \u2014 "),AP=a("a"),lgo=o("XLMModel"),igo=o(" (XLM model)"),dgo=l(),y_=a("li"),bee=a("strong"),cgo=o("xlm-prophetnet"),fgo=o(" \u2014 "),LP=a("a"),mgo=o("XLMProphetNetModel"),ggo=o(" (XLMProphetNet model)"),hgo=l(),w_=a("li"),vee=a("strong"),pgo=o("xlm-roberta"),_go=o(" \u2014 "),BP=a("a"),ugo=o("XLMRobertaModel"),bgo=o(" (XLM-RoBERTa model)"),vgo=l(),A_=a("li"),Tee=a("strong"),Tgo=o("xlm-roberta-xl"),Fgo=o(" \u2014 "),xP=a("a"),Cgo=o("XLMRobertaXLModel"),Mgo=o(" (XLM-RoBERTa-XL model)"),Ego=l(),L_=a("li"),Fee=a("strong"),ygo=o("xlnet"),wgo=o(" \u2014 "),kP=a("a"),Ago=o("XLNetModel"),Lgo=o(" (XLNet model)"),Bgo=l(),B_=a("li"),Cee=a("strong"),xgo=o("yoso"),kgo=o(" \u2014 "),RP=a("a"),Rgo=o("YosoModel"),Sgo=o(" (YOSO model)"),Pgo=l(),x_=a("p"),$go=o("The model is set in evaluation mode by default using "),Mee=a("code"),Igo=o("model.eval()"),Dgo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Eee=a("code"),Ngo=o("model.train()"),jgo=l(),yee=a("p"),qgo=o("Examples:"),Ggo=l(),f(e5.$$.fragment),Hke=l(),Zi=a("h2"),k_=a("a"),wee=a("span"),f(o5.$$.fragment),Ogo=l(),Aee=a("span"),Xgo=o("AutoModelForPreTraining"),Uke=l(),Yo=a("div"),f(r5.$$.fragment),Vgo=l(),ed=a("p"),zgo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Lee=a("code"),Wgo=o("from_pretrained()"),Qgo=o("class method or the "),Bee=a("code"),Hgo=o("from_config()"),Ugo=o(`class
method.`),Jgo=l(),t5=a("p"),Ygo=o("This class cannot be instantiated directly using "),xee=a("code"),Kgo=o("__init__()"),Zgo=o(" (throws an error)."),eho=l(),zr=a("div"),f(a5.$$.fragment),oho=l(),kee=a("p"),rho=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),tho=l(),od=a("p"),aho=o(`Note:
Loading a model from its configuration file does `),Ree=a("strong"),nho=o("not"),sho=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),See=a("code"),lho=o("from_pretrained()"),iho=o("to load the model weights."),dho=l(),Pee=a("p"),cho=o("Examples:"),fho=l(),f(n5.$$.fragment),mho=l(),Ne=a("div"),f(s5.$$.fragment),gho=l(),$ee=a("p"),hho=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),pho=l(),za=a("p"),_ho=o("The model class to instantiate is selected based on the "),Iee=a("code"),uho=o("model_type"),bho=o(` property of the config object (either
passed as an argument or loaded from `),Dee=a("code"),vho=o("pretrained_model_name_or_path"),Tho=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nee=a("code"),Fho=o("pretrained_model_name_or_path"),Cho=o(":"),Mho=l(),k=a("ul"),R_=a("li"),jee=a("strong"),Eho=o("albert"),yho=o(" \u2014 "),SP=a("a"),who=o("AlbertForPreTraining"),Aho=o(" (ALBERT model)"),Lho=l(),S_=a("li"),qee=a("strong"),Bho=o("bart"),xho=o(" \u2014 "),PP=a("a"),kho=o("BartForConditionalGeneration"),Rho=o(" (BART model)"),Sho=l(),P_=a("li"),Gee=a("strong"),Pho=o("bert"),$ho=o(" \u2014 "),$P=a("a"),Iho=o("BertForPreTraining"),Dho=o(" (BERT model)"),Nho=l(),$_=a("li"),Oee=a("strong"),jho=o("big_bird"),qho=o(" \u2014 "),IP=a("a"),Gho=o("BigBirdForPreTraining"),Oho=o(" (BigBird model)"),Xho=l(),I_=a("li"),Xee=a("strong"),Vho=o("camembert"),zho=o(" \u2014 "),DP=a("a"),Who=o("CamembertForMaskedLM"),Qho=o(" (CamemBERT model)"),Hho=l(),D_=a("li"),Vee=a("strong"),Uho=o("ctrl"),Jho=o(" \u2014 "),NP=a("a"),Yho=o("CTRLLMHeadModel"),Kho=o(" (CTRL model)"),Zho=l(),N_=a("li"),zee=a("strong"),epo=o("data2vec-text"),opo=o(" \u2014 "),jP=a("a"),rpo=o("Data2VecTextForMaskedLM"),tpo=o(" (Data2VecText model)"),apo=l(),j_=a("li"),Wee=a("strong"),npo=o("deberta"),spo=o(" \u2014 "),qP=a("a"),lpo=o("DebertaForMaskedLM"),ipo=o(" (DeBERTa model)"),dpo=l(),q_=a("li"),Qee=a("strong"),cpo=o("deberta-v2"),fpo=o(" \u2014 "),GP=a("a"),mpo=o("DebertaV2ForMaskedLM"),gpo=o(" (DeBERTa-v2 model)"),hpo=l(),G_=a("li"),Hee=a("strong"),ppo=o("distilbert"),_po=o(" \u2014 "),OP=a("a"),upo=o("DistilBertForMaskedLM"),bpo=o(" (DistilBERT model)"),vpo=l(),O_=a("li"),Uee=a("strong"),Tpo=o("electra"),Fpo=o(" \u2014 "),XP=a("a"),Cpo=o("ElectraForPreTraining"),Mpo=o(" (ELECTRA model)"),Epo=l(),X_=a("li"),Jee=a("strong"),ypo=o("flaubert"),wpo=o(" \u2014 "),VP=a("a"),Apo=o("FlaubertWithLMHeadModel"),Lpo=o(" (FlauBERT model)"),Bpo=l(),V_=a("li"),Yee=a("strong"),xpo=o("fnet"),kpo=o(" \u2014 "),zP=a("a"),Rpo=o("FNetForPreTraining"),Spo=o(" (FNet model)"),Ppo=l(),z_=a("li"),Kee=a("strong"),$po=o("fsmt"),Ipo=o(" \u2014 "),WP=a("a"),Dpo=o("FSMTForConditionalGeneration"),Npo=o(" (FairSeq Machine-Translation model)"),jpo=l(),W_=a("li"),Zee=a("strong"),qpo=o("funnel"),Gpo=o(" \u2014 "),QP=a("a"),Opo=o("FunnelForPreTraining"),Xpo=o(" (Funnel Transformer model)"),Vpo=l(),Q_=a("li"),eoe=a("strong"),zpo=o("gpt2"),Wpo=o(" \u2014 "),HP=a("a"),Qpo=o("GPT2LMHeadModel"),Hpo=o(" (OpenAI GPT-2 model)"),Upo=l(),H_=a("li"),ooe=a("strong"),Jpo=o("ibert"),Ypo=o(" \u2014 "),UP=a("a"),Kpo=o("IBertForMaskedLM"),Zpo=o(" (I-BERT model)"),e_o=l(),U_=a("li"),roe=a("strong"),o_o=o("layoutlm"),r_o=o(" \u2014 "),JP=a("a"),t_o=o("LayoutLMForMaskedLM"),a_o=o(" (LayoutLM model)"),n_o=l(),J_=a("li"),toe=a("strong"),s_o=o("longformer"),l_o=o(" \u2014 "),YP=a("a"),i_o=o("LongformerForMaskedLM"),d_o=o(" (Longformer model)"),c_o=l(),Y_=a("li"),aoe=a("strong"),f_o=o("lxmert"),m_o=o(" \u2014 "),KP=a("a"),g_o=o("LxmertForPreTraining"),h_o=o(" (LXMERT model)"),p_o=l(),K_=a("li"),noe=a("strong"),__o=o("megatron-bert"),u_o=o(" \u2014 "),ZP=a("a"),b_o=o("MegatronBertForPreTraining"),v_o=o(" (MegatronBert model)"),T_o=l(),Z_=a("li"),soe=a("strong"),F_o=o("mobilebert"),C_o=o(" \u2014 "),e$=a("a"),M_o=o("MobileBertForPreTraining"),E_o=o(" (MobileBERT model)"),y_o=l(),eu=a("li"),loe=a("strong"),w_o=o("mpnet"),A_o=o(" \u2014 "),o$=a("a"),L_o=o("MPNetForMaskedLM"),B_o=o(" (MPNet model)"),x_o=l(),ou=a("li"),ioe=a("strong"),k_o=o("openai-gpt"),R_o=o(" \u2014 "),r$=a("a"),S_o=o("OpenAIGPTLMHeadModel"),P_o=o(" (OpenAI GPT model)"),$_o=l(),ru=a("li"),doe=a("strong"),I_o=o("retribert"),D_o=o(" \u2014 "),t$=a("a"),N_o=o("RetriBertModel"),j_o=o(" (RetriBERT model)"),q_o=l(),tu=a("li"),coe=a("strong"),G_o=o("roberta"),O_o=o(" \u2014 "),a$=a("a"),X_o=o("RobertaForMaskedLM"),V_o=o(" (RoBERTa model)"),z_o=l(),au=a("li"),foe=a("strong"),W_o=o("squeezebert"),Q_o=o(" \u2014 "),n$=a("a"),H_o=o("SqueezeBertForMaskedLM"),U_o=o(" (SqueezeBERT model)"),J_o=l(),nu=a("li"),moe=a("strong"),Y_o=o("t5"),K_o=o(" \u2014 "),s$=a("a"),Z_o=o("T5ForConditionalGeneration"),euo=o(" (T5 model)"),ouo=l(),su=a("li"),goe=a("strong"),ruo=o("tapas"),tuo=o(" \u2014 "),l$=a("a"),auo=o("TapasForMaskedLM"),nuo=o(" (TAPAS model)"),suo=l(),lu=a("li"),hoe=a("strong"),luo=o("transfo-xl"),iuo=o(" \u2014 "),i$=a("a"),duo=o("TransfoXLLMHeadModel"),cuo=o(" (Transformer-XL model)"),fuo=l(),iu=a("li"),poe=a("strong"),muo=o("unispeech"),guo=o(" \u2014 "),d$=a("a"),huo=o("UniSpeechForPreTraining"),puo=o(" (UniSpeech model)"),_uo=l(),du=a("li"),_oe=a("strong"),uuo=o("unispeech-sat"),buo=o(" \u2014 "),c$=a("a"),vuo=o("UniSpeechSatForPreTraining"),Tuo=o(" (UniSpeechSat model)"),Fuo=l(),cu=a("li"),uoe=a("strong"),Cuo=o("visual_bert"),Muo=o(" \u2014 "),f$=a("a"),Euo=o("VisualBertForPreTraining"),yuo=o(" (VisualBert model)"),wuo=l(),fu=a("li"),boe=a("strong"),Auo=o("vit_mae"),Luo=o(" \u2014 "),m$=a("a"),Buo=o("ViTMAEForPreTraining"),xuo=o(" (ViTMAE model)"),kuo=l(),mu=a("li"),voe=a("strong"),Ruo=o("wav2vec2"),Suo=o(" \u2014 "),g$=a("a"),Puo=o("Wav2Vec2ForPreTraining"),$uo=o(" (Wav2Vec2 model)"),Iuo=l(),gu=a("li"),Toe=a("strong"),Duo=o("xlm"),Nuo=o(" \u2014 "),h$=a("a"),juo=o("XLMWithLMHeadModel"),quo=o(" (XLM model)"),Guo=l(),hu=a("li"),Foe=a("strong"),Ouo=o("xlm-roberta"),Xuo=o(" \u2014 "),p$=a("a"),Vuo=o("XLMRobertaForMaskedLM"),zuo=o(" (XLM-RoBERTa model)"),Wuo=l(),pu=a("li"),Coe=a("strong"),Quo=o("xlm-roberta-xl"),Huo=o(" \u2014 "),_$=a("a"),Uuo=o("XLMRobertaXLForMaskedLM"),Juo=o(" (XLM-RoBERTa-XL model)"),Yuo=l(),_u=a("li"),Moe=a("strong"),Kuo=o("xlnet"),Zuo=o(" \u2014 "),u$=a("a"),e1o=o("XLNetLMHeadModel"),o1o=o(" (XLNet model)"),r1o=l(),uu=a("p"),t1o=o("The model is set in evaluation mode by default using "),Eoe=a("code"),a1o=o("model.eval()"),n1o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yoe=a("code"),s1o=o("model.train()"),l1o=l(),woe=a("p"),i1o=o("Examples:"),d1o=l(),f(l5.$$.fragment),Jke=l(),rd=a("h2"),bu=a("a"),Aoe=a("span"),f(i5.$$.fragment),c1o=l(),Loe=a("span"),f1o=o("AutoModelForCausalLM"),Yke=l(),Ko=a("div"),f(d5.$$.fragment),m1o=l(),td=a("p"),g1o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Boe=a("code"),h1o=o("from_pretrained()"),p1o=o("class method or the "),xoe=a("code"),_1o=o("from_config()"),u1o=o(`class
method.`),b1o=l(),c5=a("p"),v1o=o("This class cannot be instantiated directly using "),koe=a("code"),T1o=o("__init__()"),F1o=o(" (throws an error)."),C1o=l(),Wr=a("div"),f(f5.$$.fragment),M1o=l(),Roe=a("p"),E1o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),y1o=l(),ad=a("p"),w1o=o(`Note:
Loading a model from its configuration file does `),Soe=a("strong"),A1o=o("not"),L1o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Poe=a("code"),B1o=o("from_pretrained()"),x1o=o("to load the model weights."),k1o=l(),$oe=a("p"),R1o=o("Examples:"),S1o=l(),f(m5.$$.fragment),P1o=l(),je=a("div"),f(g5.$$.fragment),$1o=l(),Ioe=a("p"),I1o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),D1o=l(),Wa=a("p"),N1o=o("The model class to instantiate is selected based on the "),Doe=a("code"),j1o=o("model_type"),q1o=o(` property of the config object (either
passed as an argument or loaded from `),Noe=a("code"),G1o=o("pretrained_model_name_or_path"),O1o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),joe=a("code"),X1o=o("pretrained_model_name_or_path"),V1o=o(":"),z1o=l(),$=a("ul"),vu=a("li"),qoe=a("strong"),W1o=o("bart"),Q1o=o(" \u2014 "),b$=a("a"),H1o=o("BartForCausalLM"),U1o=o(" (BART model)"),J1o=l(),Tu=a("li"),Goe=a("strong"),Y1o=o("bert"),K1o=o(" \u2014 "),v$=a("a"),Z1o=o("BertLMHeadModel"),e4o=o(" (BERT model)"),o4o=l(),Fu=a("li"),Ooe=a("strong"),r4o=o("bert-generation"),t4o=o(" \u2014 "),T$=a("a"),a4o=o("BertGenerationDecoder"),n4o=o(" (Bert Generation model)"),s4o=l(),Cu=a("li"),Xoe=a("strong"),l4o=o("big_bird"),i4o=o(" \u2014 "),F$=a("a"),d4o=o("BigBirdForCausalLM"),c4o=o(" (BigBird model)"),f4o=l(),Mu=a("li"),Voe=a("strong"),m4o=o("bigbird_pegasus"),g4o=o(" \u2014 "),C$=a("a"),h4o=o("BigBirdPegasusForCausalLM"),p4o=o(" (BigBirdPegasus model)"),_4o=l(),Eu=a("li"),zoe=a("strong"),u4o=o("blenderbot"),b4o=o(" \u2014 "),M$=a("a"),v4o=o("BlenderbotForCausalLM"),T4o=o(" (Blenderbot model)"),F4o=l(),yu=a("li"),Woe=a("strong"),C4o=o("blenderbot-small"),M4o=o(" \u2014 "),E$=a("a"),E4o=o("BlenderbotSmallForCausalLM"),y4o=o(" (BlenderbotSmall model)"),w4o=l(),wu=a("li"),Qoe=a("strong"),A4o=o("camembert"),L4o=o(" \u2014 "),y$=a("a"),B4o=o("CamembertForCausalLM"),x4o=o(" (CamemBERT model)"),k4o=l(),Au=a("li"),Hoe=a("strong"),R4o=o("ctrl"),S4o=o(" \u2014 "),w$=a("a"),P4o=o("CTRLLMHeadModel"),$4o=o(" (CTRL model)"),I4o=l(),Lu=a("li"),Uoe=a("strong"),D4o=o("data2vec-text"),N4o=o(" \u2014 "),A$=a("a"),j4o=o("Data2VecTextForCausalLM"),q4o=o(" (Data2VecText model)"),G4o=l(),Bu=a("li"),Joe=a("strong"),O4o=o("electra"),X4o=o(" \u2014 "),L$=a("a"),V4o=o("ElectraForCausalLM"),z4o=o(" (ELECTRA model)"),W4o=l(),xu=a("li"),Yoe=a("strong"),Q4o=o("gpt2"),H4o=o(" \u2014 "),B$=a("a"),U4o=o("GPT2LMHeadModel"),J4o=o(" (OpenAI GPT-2 model)"),Y4o=l(),ku=a("li"),Koe=a("strong"),K4o=o("gpt_neo"),Z4o=o(" \u2014 "),x$=a("a"),ebo=o("GPTNeoForCausalLM"),obo=o(" (GPT Neo model)"),rbo=l(),Ru=a("li"),Zoe=a("strong"),tbo=o("gptj"),abo=o(" \u2014 "),k$=a("a"),nbo=o("GPTJForCausalLM"),sbo=o(" (GPT-J model)"),lbo=l(),Su=a("li"),ere=a("strong"),ibo=o("marian"),dbo=o(" \u2014 "),R$=a("a"),cbo=o("MarianForCausalLM"),fbo=o(" (Marian model)"),mbo=l(),Pu=a("li"),ore=a("strong"),gbo=o("mbart"),hbo=o(" \u2014 "),S$=a("a"),pbo=o("MBartForCausalLM"),_bo=o(" (mBART model)"),ubo=l(),$u=a("li"),rre=a("strong"),bbo=o("megatron-bert"),vbo=o(" \u2014 "),P$=a("a"),Tbo=o("MegatronBertForCausalLM"),Fbo=o(" (MegatronBert model)"),Cbo=l(),Iu=a("li"),tre=a("strong"),Mbo=o("openai-gpt"),Ebo=o(" \u2014 "),$$=a("a"),ybo=o("OpenAIGPTLMHeadModel"),wbo=o(" (OpenAI GPT model)"),Abo=l(),Du=a("li"),are=a("strong"),Lbo=o("pegasus"),Bbo=o(" \u2014 "),I$=a("a"),xbo=o("PegasusForCausalLM"),kbo=o(" (Pegasus model)"),Rbo=l(),Nu=a("li"),nre=a("strong"),Sbo=o("plbart"),Pbo=o(" \u2014 "),D$=a("a"),$bo=o("PLBartForCausalLM"),Ibo=o(" (PLBart model)"),Dbo=l(),ju=a("li"),sre=a("strong"),Nbo=o("prophetnet"),jbo=o(" \u2014 "),N$=a("a"),qbo=o("ProphetNetForCausalLM"),Gbo=o(" (ProphetNet model)"),Obo=l(),qu=a("li"),lre=a("strong"),Xbo=o("qdqbert"),Vbo=o(" \u2014 "),j$=a("a"),zbo=o("QDQBertLMHeadModel"),Wbo=o(" (QDQBert model)"),Qbo=l(),Gu=a("li"),ire=a("strong"),Hbo=o("reformer"),Ubo=o(" \u2014 "),q$=a("a"),Jbo=o("ReformerModelWithLMHead"),Ybo=o(" (Reformer model)"),Kbo=l(),Ou=a("li"),dre=a("strong"),Zbo=o("rembert"),e3o=o(" \u2014 "),G$=a("a"),o3o=o("RemBertForCausalLM"),r3o=o(" (RemBERT model)"),t3o=l(),Xu=a("li"),cre=a("strong"),a3o=o("roberta"),n3o=o(" \u2014 "),O$=a("a"),s3o=o("RobertaForCausalLM"),l3o=o(" (RoBERTa model)"),i3o=l(),Vu=a("li"),fre=a("strong"),d3o=o("roformer"),c3o=o(" \u2014 "),X$=a("a"),f3o=o("RoFormerForCausalLM"),m3o=o(" (RoFormer model)"),g3o=l(),zu=a("li"),mre=a("strong"),h3o=o("speech_to_text_2"),p3o=o(" \u2014 "),V$=a("a"),_3o=o("Speech2Text2ForCausalLM"),u3o=o(" (Speech2Text2 model)"),b3o=l(),Wu=a("li"),gre=a("strong"),v3o=o("transfo-xl"),T3o=o(" \u2014 "),z$=a("a"),F3o=o("TransfoXLLMHeadModel"),C3o=o(" (Transformer-XL model)"),M3o=l(),Qu=a("li"),hre=a("strong"),E3o=o("trocr"),y3o=o(" \u2014 "),W$=a("a"),w3o=o("TrOCRForCausalLM"),A3o=o(" (TrOCR model)"),L3o=l(),Hu=a("li"),pre=a("strong"),B3o=o("xglm"),x3o=o(" \u2014 "),Q$=a("a"),k3o=o("XGLMForCausalLM"),R3o=o(" (XGLM model)"),S3o=l(),Uu=a("li"),_re=a("strong"),P3o=o("xlm"),$3o=o(" \u2014 "),H$=a("a"),I3o=o("XLMWithLMHeadModel"),D3o=o(" (XLM model)"),N3o=l(),Ju=a("li"),ure=a("strong"),j3o=o("xlm-prophetnet"),q3o=o(" \u2014 "),U$=a("a"),G3o=o("XLMProphetNetForCausalLM"),O3o=o(" (XLMProphetNet model)"),X3o=l(),Yu=a("li"),bre=a("strong"),V3o=o("xlm-roberta"),z3o=o(" \u2014 "),J$=a("a"),W3o=o("XLMRobertaForCausalLM"),Q3o=o(" (XLM-RoBERTa model)"),H3o=l(),Ku=a("li"),vre=a("strong"),U3o=o("xlm-roberta-xl"),J3o=o(" \u2014 "),Y$=a("a"),Y3o=o("XLMRobertaXLForCausalLM"),K3o=o(" (XLM-RoBERTa-XL model)"),Z3o=l(),Zu=a("li"),Tre=a("strong"),e2o=o("xlnet"),o2o=o(" \u2014 "),K$=a("a"),r2o=o("XLNetLMHeadModel"),t2o=o(" (XLNet model)"),a2o=l(),e1=a("p"),n2o=o("The model is set in evaluation mode by default using "),Fre=a("code"),s2o=o("model.eval()"),l2o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cre=a("code"),i2o=o("model.train()"),d2o=l(),Mre=a("p"),c2o=o("Examples:"),f2o=l(),f(h5.$$.fragment),Kke=l(),nd=a("h2"),o1=a("a"),Ere=a("span"),f(p5.$$.fragment),m2o=l(),yre=a("span"),g2o=o("AutoModelForMaskedLM"),Zke=l(),Zo=a("div"),f(_5.$$.fragment),h2o=l(),sd=a("p"),p2o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),wre=a("code"),_2o=o("from_pretrained()"),u2o=o("class method or the "),Are=a("code"),b2o=o("from_config()"),v2o=o(`class
method.`),T2o=l(),u5=a("p"),F2o=o("This class cannot be instantiated directly using "),Lre=a("code"),C2o=o("__init__()"),M2o=o(" (throws an error)."),E2o=l(),Qr=a("div"),f(b5.$$.fragment),y2o=l(),Bre=a("p"),w2o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),A2o=l(),ld=a("p"),L2o=o(`Note:
Loading a model from its configuration file does `),xre=a("strong"),B2o=o("not"),x2o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kre=a("code"),k2o=o("from_pretrained()"),R2o=o("to load the model weights."),S2o=l(),Rre=a("p"),P2o=o("Examples:"),$2o=l(),f(v5.$$.fragment),I2o=l(),qe=a("div"),f(T5.$$.fragment),D2o=l(),Sre=a("p"),N2o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),j2o=l(),Qa=a("p"),q2o=o("The model class to instantiate is selected based on the "),Pre=a("code"),G2o=o("model_type"),O2o=o(` property of the config object (either
passed as an argument or loaded from `),$re=a("code"),X2o=o("pretrained_model_name_or_path"),V2o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ire=a("code"),z2o=o("pretrained_model_name_or_path"),W2o=o(":"),Q2o=l(),I=a("ul"),r1=a("li"),Dre=a("strong"),H2o=o("albert"),U2o=o(" \u2014 "),Z$=a("a"),J2o=o("AlbertForMaskedLM"),Y2o=o(" (ALBERT model)"),K2o=l(),t1=a("li"),Nre=a("strong"),Z2o=o("bart"),evo=o(" \u2014 "),eI=a("a"),ovo=o("BartForConditionalGeneration"),rvo=o(" (BART model)"),tvo=l(),a1=a("li"),jre=a("strong"),avo=o("bert"),nvo=o(" \u2014 "),oI=a("a"),svo=o("BertForMaskedLM"),lvo=o(" (BERT model)"),ivo=l(),n1=a("li"),qre=a("strong"),dvo=o("big_bird"),cvo=o(" \u2014 "),rI=a("a"),fvo=o("BigBirdForMaskedLM"),mvo=o(" (BigBird model)"),gvo=l(),s1=a("li"),Gre=a("strong"),hvo=o("camembert"),pvo=o(" \u2014 "),tI=a("a"),_vo=o("CamembertForMaskedLM"),uvo=o(" (CamemBERT model)"),bvo=l(),l1=a("li"),Ore=a("strong"),vvo=o("convbert"),Tvo=o(" \u2014 "),aI=a("a"),Fvo=o("ConvBertForMaskedLM"),Cvo=o(" (ConvBERT model)"),Mvo=l(),i1=a("li"),Xre=a("strong"),Evo=o("data2vec-text"),yvo=o(" \u2014 "),nI=a("a"),wvo=o("Data2VecTextForMaskedLM"),Avo=o(" (Data2VecText model)"),Lvo=l(),d1=a("li"),Vre=a("strong"),Bvo=o("deberta"),xvo=o(" \u2014 "),sI=a("a"),kvo=o("DebertaForMaskedLM"),Rvo=o(" (DeBERTa model)"),Svo=l(),c1=a("li"),zre=a("strong"),Pvo=o("deberta-v2"),$vo=o(" \u2014 "),lI=a("a"),Ivo=o("DebertaV2ForMaskedLM"),Dvo=o(" (DeBERTa-v2 model)"),Nvo=l(),f1=a("li"),Wre=a("strong"),jvo=o("distilbert"),qvo=o(" \u2014 "),iI=a("a"),Gvo=o("DistilBertForMaskedLM"),Ovo=o(" (DistilBERT model)"),Xvo=l(),m1=a("li"),Qre=a("strong"),Vvo=o("electra"),zvo=o(" \u2014 "),dI=a("a"),Wvo=o("ElectraForMaskedLM"),Qvo=o(" (ELECTRA model)"),Hvo=l(),g1=a("li"),Hre=a("strong"),Uvo=o("flaubert"),Jvo=o(" \u2014 "),cI=a("a"),Yvo=o("FlaubertWithLMHeadModel"),Kvo=o(" (FlauBERT model)"),Zvo=l(),h1=a("li"),Ure=a("strong"),e6o=o("fnet"),o6o=o(" \u2014 "),fI=a("a"),r6o=o("FNetForMaskedLM"),t6o=o(" (FNet model)"),a6o=l(),p1=a("li"),Jre=a("strong"),n6o=o("funnel"),s6o=o(" \u2014 "),mI=a("a"),l6o=o("FunnelForMaskedLM"),i6o=o(" (Funnel Transformer model)"),d6o=l(),_1=a("li"),Yre=a("strong"),c6o=o("ibert"),f6o=o(" \u2014 "),gI=a("a"),m6o=o("IBertForMaskedLM"),g6o=o(" (I-BERT model)"),h6o=l(),u1=a("li"),Kre=a("strong"),p6o=o("layoutlm"),_6o=o(" \u2014 "),hI=a("a"),u6o=o("LayoutLMForMaskedLM"),b6o=o(" (LayoutLM model)"),v6o=l(),b1=a("li"),Zre=a("strong"),T6o=o("longformer"),F6o=o(" \u2014 "),pI=a("a"),C6o=o("LongformerForMaskedLM"),M6o=o(" (Longformer model)"),E6o=l(),v1=a("li"),ete=a("strong"),y6o=o("mbart"),w6o=o(" \u2014 "),_I=a("a"),A6o=o("MBartForConditionalGeneration"),L6o=o(" (mBART model)"),B6o=l(),T1=a("li"),ote=a("strong"),x6o=o("megatron-bert"),k6o=o(" \u2014 "),uI=a("a"),R6o=o("MegatronBertForMaskedLM"),S6o=o(" (MegatronBert model)"),P6o=l(),F1=a("li"),rte=a("strong"),$6o=o("mobilebert"),I6o=o(" \u2014 "),bI=a("a"),D6o=o("MobileBertForMaskedLM"),N6o=o(" (MobileBERT model)"),j6o=l(),C1=a("li"),tte=a("strong"),q6o=o("mpnet"),G6o=o(" \u2014 "),vI=a("a"),O6o=o("MPNetForMaskedLM"),X6o=o(" (MPNet model)"),V6o=l(),M1=a("li"),ate=a("strong"),z6o=o("nystromformer"),W6o=o(" \u2014 "),TI=a("a"),Q6o=o("NystromformerForMaskedLM"),H6o=o(" (Nystromformer model)"),U6o=l(),E1=a("li"),nte=a("strong"),J6o=o("perceiver"),Y6o=o(" \u2014 "),FI=a("a"),K6o=o("PerceiverForMaskedLM"),Z6o=o(" (Perceiver model)"),eTo=l(),y1=a("li"),ste=a("strong"),oTo=o("qdqbert"),rTo=o(" \u2014 "),CI=a("a"),tTo=o("QDQBertForMaskedLM"),aTo=o(" (QDQBert model)"),nTo=l(),w1=a("li"),lte=a("strong"),sTo=o("reformer"),lTo=o(" \u2014 "),MI=a("a"),iTo=o("ReformerForMaskedLM"),dTo=o(" (Reformer model)"),cTo=l(),A1=a("li"),ite=a("strong"),fTo=o("rembert"),mTo=o(" \u2014 "),EI=a("a"),gTo=o("RemBertForMaskedLM"),hTo=o(" (RemBERT model)"),pTo=l(),L1=a("li"),dte=a("strong"),_To=o("roberta"),uTo=o(" \u2014 "),yI=a("a"),bTo=o("RobertaForMaskedLM"),vTo=o(" (RoBERTa model)"),TTo=l(),B1=a("li"),cte=a("strong"),FTo=o("roformer"),CTo=o(" \u2014 "),wI=a("a"),MTo=o("RoFormerForMaskedLM"),ETo=o(" (RoFormer model)"),yTo=l(),x1=a("li"),fte=a("strong"),wTo=o("squeezebert"),ATo=o(" \u2014 "),AI=a("a"),LTo=o("SqueezeBertForMaskedLM"),BTo=o(" (SqueezeBERT model)"),xTo=l(),k1=a("li"),mte=a("strong"),kTo=o("tapas"),RTo=o(" \u2014 "),LI=a("a"),STo=o("TapasForMaskedLM"),PTo=o(" (TAPAS model)"),$To=l(),R1=a("li"),gte=a("strong"),ITo=o("wav2vec2"),DTo=o(" \u2014 "),hte=a("code"),NTo=o("Wav2Vec2ForMaskedLM"),jTo=o("(Wav2Vec2 model)"),qTo=l(),S1=a("li"),pte=a("strong"),GTo=o("xlm"),OTo=o(" \u2014 "),BI=a("a"),XTo=o("XLMWithLMHeadModel"),VTo=o(" (XLM model)"),zTo=l(),P1=a("li"),_te=a("strong"),WTo=o("xlm-roberta"),QTo=o(" \u2014 "),xI=a("a"),HTo=o("XLMRobertaForMaskedLM"),UTo=o(" (XLM-RoBERTa model)"),JTo=l(),$1=a("li"),ute=a("strong"),YTo=o("xlm-roberta-xl"),KTo=o(" \u2014 "),kI=a("a"),ZTo=o("XLMRobertaXLForMaskedLM"),e7o=o(" (XLM-RoBERTa-XL model)"),o7o=l(),I1=a("li"),bte=a("strong"),r7o=o("yoso"),t7o=o(" \u2014 "),RI=a("a"),a7o=o("YosoForMaskedLM"),n7o=o(" (YOSO model)"),s7o=l(),D1=a("p"),l7o=o("The model is set in evaluation mode by default using "),vte=a("code"),i7o=o("model.eval()"),d7o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tte=a("code"),c7o=o("model.train()"),f7o=l(),Fte=a("p"),m7o=o("Examples:"),g7o=l(),f(F5.$$.fragment),eRe=l(),id=a("h2"),N1=a("a"),Cte=a("span"),f(C5.$$.fragment),h7o=l(),Mte=a("span"),p7o=o("AutoModelForSeq2SeqLM"),oRe=l(),er=a("div"),f(M5.$$.fragment),_7o=l(),dd=a("p"),u7o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Ete=a("code"),b7o=o("from_pretrained()"),v7o=o("class method or the "),yte=a("code"),T7o=o("from_config()"),F7o=o(`class
method.`),C7o=l(),E5=a("p"),M7o=o("This class cannot be instantiated directly using "),wte=a("code"),E7o=o("__init__()"),y7o=o(" (throws an error)."),w7o=l(),Hr=a("div"),f(y5.$$.fragment),A7o=l(),Ate=a("p"),L7o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),B7o=l(),cd=a("p"),x7o=o(`Note:
Loading a model from its configuration file does `),Lte=a("strong"),k7o=o("not"),R7o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Bte=a("code"),S7o=o("from_pretrained()"),P7o=o("to load the model weights."),$7o=l(),xte=a("p"),I7o=o("Examples:"),D7o=l(),f(w5.$$.fragment),N7o=l(),Ge=a("div"),f(A5.$$.fragment),j7o=l(),kte=a("p"),q7o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),G7o=l(),Ha=a("p"),O7o=o("The model class to instantiate is selected based on the "),Rte=a("code"),X7o=o("model_type"),V7o=o(` property of the config object (either
passed as an argument or loaded from `),Ste=a("code"),z7o=o("pretrained_model_name_or_path"),W7o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pte=a("code"),Q7o=o("pretrained_model_name_or_path"),H7o=o(":"),U7o=l(),se=a("ul"),j1=a("li"),$te=a("strong"),J7o=o("bart"),Y7o=o(" \u2014 "),SI=a("a"),K7o=o("BartForConditionalGeneration"),Z7o=o(" (BART model)"),eFo=l(),q1=a("li"),Ite=a("strong"),oFo=o("bigbird_pegasus"),rFo=o(" \u2014 "),PI=a("a"),tFo=o("BigBirdPegasusForConditionalGeneration"),aFo=o(" (BigBirdPegasus model)"),nFo=l(),G1=a("li"),Dte=a("strong"),sFo=o("blenderbot"),lFo=o(" \u2014 "),$I=a("a"),iFo=o("BlenderbotForConditionalGeneration"),dFo=o(" (Blenderbot model)"),cFo=l(),O1=a("li"),Nte=a("strong"),fFo=o("blenderbot-small"),mFo=o(" \u2014 "),II=a("a"),gFo=o("BlenderbotSmallForConditionalGeneration"),hFo=o(" (BlenderbotSmall model)"),pFo=l(),X1=a("li"),jte=a("strong"),_Fo=o("encoder-decoder"),uFo=o(" \u2014 "),DI=a("a"),bFo=o("EncoderDecoderModel"),vFo=o(" (Encoder decoder model)"),TFo=l(),V1=a("li"),qte=a("strong"),FFo=o("fsmt"),CFo=o(" \u2014 "),NI=a("a"),MFo=o("FSMTForConditionalGeneration"),EFo=o(" (FairSeq Machine-Translation model)"),yFo=l(),z1=a("li"),Gte=a("strong"),wFo=o("led"),AFo=o(" \u2014 "),jI=a("a"),LFo=o("LEDForConditionalGeneration"),BFo=o(" (LED model)"),xFo=l(),W1=a("li"),Ote=a("strong"),kFo=o("m2m_100"),RFo=o(" \u2014 "),qI=a("a"),SFo=o("M2M100ForConditionalGeneration"),PFo=o(" (M2M100 model)"),$Fo=l(),Q1=a("li"),Xte=a("strong"),IFo=o("marian"),DFo=o(" \u2014 "),GI=a("a"),NFo=o("MarianMTModel"),jFo=o(" (Marian model)"),qFo=l(),H1=a("li"),Vte=a("strong"),GFo=o("mbart"),OFo=o(" \u2014 "),OI=a("a"),XFo=o("MBartForConditionalGeneration"),VFo=o(" (mBART model)"),zFo=l(),U1=a("li"),zte=a("strong"),WFo=o("mt5"),QFo=o(" \u2014 "),XI=a("a"),HFo=o("MT5ForConditionalGeneration"),UFo=o(" (mT5 model)"),JFo=l(),J1=a("li"),Wte=a("strong"),YFo=o("pegasus"),KFo=o(" \u2014 "),VI=a("a"),ZFo=o("PegasusForConditionalGeneration"),eCo=o(" (Pegasus model)"),oCo=l(),Y1=a("li"),Qte=a("strong"),rCo=o("plbart"),tCo=o(" \u2014 "),zI=a("a"),aCo=o("PLBartForConditionalGeneration"),nCo=o(" (PLBart model)"),sCo=l(),K1=a("li"),Hte=a("strong"),lCo=o("prophetnet"),iCo=o(" \u2014 "),WI=a("a"),dCo=o("ProphetNetForConditionalGeneration"),cCo=o(" (ProphetNet model)"),fCo=l(),Z1=a("li"),Ute=a("strong"),mCo=o("t5"),gCo=o(" \u2014 "),QI=a("a"),hCo=o("T5ForConditionalGeneration"),pCo=o(" (T5 model)"),_Co=l(),e4=a("li"),Jte=a("strong"),uCo=o("xlm-prophetnet"),bCo=o(" \u2014 "),HI=a("a"),vCo=o("XLMProphetNetForConditionalGeneration"),TCo=o(" (XLMProphetNet model)"),FCo=l(),o4=a("p"),CCo=o("The model is set in evaluation mode by default using "),Yte=a("code"),MCo=o("model.eval()"),ECo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kte=a("code"),yCo=o("model.train()"),wCo=l(),Zte=a("p"),ACo=o("Examples:"),LCo=l(),f(L5.$$.fragment),rRe=l(),fd=a("h2"),r4=a("a"),eae=a("span"),f(B5.$$.fragment),BCo=l(),oae=a("span"),xCo=o("AutoModelForSequenceClassification"),tRe=l(),or=a("div"),f(x5.$$.fragment),kCo=l(),md=a("p"),RCo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),rae=a("code"),SCo=o("from_pretrained()"),PCo=o("class method or the "),tae=a("code"),$Co=o("from_config()"),ICo=o(`class
method.`),DCo=l(),k5=a("p"),NCo=o("This class cannot be instantiated directly using "),aae=a("code"),jCo=o("__init__()"),qCo=o(" (throws an error)."),GCo=l(),Ur=a("div"),f(R5.$$.fragment),OCo=l(),nae=a("p"),XCo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),VCo=l(),gd=a("p"),zCo=o(`Note:
Loading a model from its configuration file does `),sae=a("strong"),WCo=o("not"),QCo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lae=a("code"),HCo=o("from_pretrained()"),UCo=o("to load the model weights."),JCo=l(),iae=a("p"),YCo=o("Examples:"),KCo=l(),f(S5.$$.fragment),ZCo=l(),Oe=a("div"),f(P5.$$.fragment),eMo=l(),dae=a("p"),oMo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),rMo=l(),Ua=a("p"),tMo=o("The model class to instantiate is selected based on the "),cae=a("code"),aMo=o("model_type"),nMo=o(` property of the config object (either
passed as an argument or loaded from `),fae=a("code"),sMo=o("pretrained_model_name_or_path"),lMo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mae=a("code"),iMo=o("pretrained_model_name_or_path"),dMo=o(":"),cMo=l(),A=a("ul"),t4=a("li"),gae=a("strong"),fMo=o("albert"),mMo=o(" \u2014 "),UI=a("a"),gMo=o("AlbertForSequenceClassification"),hMo=o(" (ALBERT model)"),pMo=l(),a4=a("li"),hae=a("strong"),_Mo=o("bart"),uMo=o(" \u2014 "),JI=a("a"),bMo=o("BartForSequenceClassification"),vMo=o(" (BART model)"),TMo=l(),n4=a("li"),pae=a("strong"),FMo=o("bert"),CMo=o(" \u2014 "),YI=a("a"),MMo=o("BertForSequenceClassification"),EMo=o(" (BERT model)"),yMo=l(),s4=a("li"),_ae=a("strong"),wMo=o("big_bird"),AMo=o(" \u2014 "),KI=a("a"),LMo=o("BigBirdForSequenceClassification"),BMo=o(" (BigBird model)"),xMo=l(),l4=a("li"),uae=a("strong"),kMo=o("bigbird_pegasus"),RMo=o(" \u2014 "),ZI=a("a"),SMo=o("BigBirdPegasusForSequenceClassification"),PMo=o(" (BigBirdPegasus model)"),$Mo=l(),i4=a("li"),bae=a("strong"),IMo=o("camembert"),DMo=o(" \u2014 "),eD=a("a"),NMo=o("CamembertForSequenceClassification"),jMo=o(" (CamemBERT model)"),qMo=l(),d4=a("li"),vae=a("strong"),GMo=o("canine"),OMo=o(" \u2014 "),oD=a("a"),XMo=o("CanineForSequenceClassification"),VMo=o(" (Canine model)"),zMo=l(),c4=a("li"),Tae=a("strong"),WMo=o("convbert"),QMo=o(" \u2014 "),rD=a("a"),HMo=o("ConvBertForSequenceClassification"),UMo=o(" (ConvBERT model)"),JMo=l(),f4=a("li"),Fae=a("strong"),YMo=o("ctrl"),KMo=o(" \u2014 "),tD=a("a"),ZMo=o("CTRLForSequenceClassification"),eEo=o(" (CTRL model)"),oEo=l(),m4=a("li"),Cae=a("strong"),rEo=o("data2vec-text"),tEo=o(" \u2014 "),aD=a("a"),aEo=o("Data2VecTextForSequenceClassification"),nEo=o(" (Data2VecText model)"),sEo=l(),g4=a("li"),Mae=a("strong"),lEo=o("deberta"),iEo=o(" \u2014 "),nD=a("a"),dEo=o("DebertaForSequenceClassification"),cEo=o(" (DeBERTa model)"),fEo=l(),h4=a("li"),Eae=a("strong"),mEo=o("deberta-v2"),gEo=o(" \u2014 "),sD=a("a"),hEo=o("DebertaV2ForSequenceClassification"),pEo=o(" (DeBERTa-v2 model)"),_Eo=l(),p4=a("li"),yae=a("strong"),uEo=o("distilbert"),bEo=o(" \u2014 "),lD=a("a"),vEo=o("DistilBertForSequenceClassification"),TEo=o(" (DistilBERT model)"),FEo=l(),_4=a("li"),wae=a("strong"),CEo=o("electra"),MEo=o(" \u2014 "),iD=a("a"),EEo=o("ElectraForSequenceClassification"),yEo=o(" (ELECTRA model)"),wEo=l(),u4=a("li"),Aae=a("strong"),AEo=o("flaubert"),LEo=o(" \u2014 "),dD=a("a"),BEo=o("FlaubertForSequenceClassification"),xEo=o(" (FlauBERT model)"),kEo=l(),b4=a("li"),Lae=a("strong"),REo=o("fnet"),SEo=o(" \u2014 "),cD=a("a"),PEo=o("FNetForSequenceClassification"),$Eo=o(" (FNet model)"),IEo=l(),v4=a("li"),Bae=a("strong"),DEo=o("funnel"),NEo=o(" \u2014 "),fD=a("a"),jEo=o("FunnelForSequenceClassification"),qEo=o(" (Funnel Transformer model)"),GEo=l(),T4=a("li"),xae=a("strong"),OEo=o("gpt2"),XEo=o(" \u2014 "),mD=a("a"),VEo=o("GPT2ForSequenceClassification"),zEo=o(" (OpenAI GPT-2 model)"),WEo=l(),F4=a("li"),kae=a("strong"),QEo=o("gpt_neo"),HEo=o(" \u2014 "),gD=a("a"),UEo=o("GPTNeoForSequenceClassification"),JEo=o(" (GPT Neo model)"),YEo=l(),C4=a("li"),Rae=a("strong"),KEo=o("gptj"),ZEo=o(" \u2014 "),hD=a("a"),e5o=o("GPTJForSequenceClassification"),o5o=o(" (GPT-J model)"),r5o=l(),M4=a("li"),Sae=a("strong"),t5o=o("ibert"),a5o=o(" \u2014 "),pD=a("a"),n5o=o("IBertForSequenceClassification"),s5o=o(" (I-BERT model)"),l5o=l(),E4=a("li"),Pae=a("strong"),i5o=o("layoutlm"),d5o=o(" \u2014 "),_D=a("a"),c5o=o("LayoutLMForSequenceClassification"),f5o=o(" (LayoutLM model)"),m5o=l(),y4=a("li"),$ae=a("strong"),g5o=o("layoutlmv2"),h5o=o(" \u2014 "),uD=a("a"),p5o=o("LayoutLMv2ForSequenceClassification"),_5o=o(" (LayoutLMv2 model)"),u5o=l(),w4=a("li"),Iae=a("strong"),b5o=o("led"),v5o=o(" \u2014 "),bD=a("a"),T5o=o("LEDForSequenceClassification"),F5o=o(" (LED model)"),C5o=l(),A4=a("li"),Dae=a("strong"),M5o=o("longformer"),E5o=o(" \u2014 "),vD=a("a"),y5o=o("LongformerForSequenceClassification"),w5o=o(" (Longformer model)"),A5o=l(),L4=a("li"),Nae=a("strong"),L5o=o("mbart"),B5o=o(" \u2014 "),TD=a("a"),x5o=o("MBartForSequenceClassification"),k5o=o(" (mBART model)"),R5o=l(),B4=a("li"),jae=a("strong"),S5o=o("megatron-bert"),P5o=o(" \u2014 "),FD=a("a"),$5o=o("MegatronBertForSequenceClassification"),I5o=o(" (MegatronBert model)"),D5o=l(),x4=a("li"),qae=a("strong"),N5o=o("mobilebert"),j5o=o(" \u2014 "),CD=a("a"),q5o=o("MobileBertForSequenceClassification"),G5o=o(" (MobileBERT model)"),O5o=l(),k4=a("li"),Gae=a("strong"),X5o=o("mpnet"),V5o=o(" \u2014 "),MD=a("a"),z5o=o("MPNetForSequenceClassification"),W5o=o(" (MPNet model)"),Q5o=l(),R4=a("li"),Oae=a("strong"),H5o=o("nystromformer"),U5o=o(" \u2014 "),ED=a("a"),J5o=o("NystromformerForSequenceClassification"),Y5o=o(" (Nystromformer model)"),K5o=l(),S4=a("li"),Xae=a("strong"),Z5o=o("openai-gpt"),eyo=o(" \u2014 "),yD=a("a"),oyo=o("OpenAIGPTForSequenceClassification"),ryo=o(" (OpenAI GPT model)"),tyo=l(),P4=a("li"),Vae=a("strong"),ayo=o("perceiver"),nyo=o(" \u2014 "),wD=a("a"),syo=o("PerceiverForSequenceClassification"),lyo=o(" (Perceiver model)"),iyo=l(),$4=a("li"),zae=a("strong"),dyo=o("plbart"),cyo=o(" \u2014 "),AD=a("a"),fyo=o("PLBartForSequenceClassification"),myo=o(" (PLBart model)"),gyo=l(),I4=a("li"),Wae=a("strong"),hyo=o("qdqbert"),pyo=o(" \u2014 "),LD=a("a"),_yo=o("QDQBertForSequenceClassification"),uyo=o(" (QDQBert model)"),byo=l(),D4=a("li"),Qae=a("strong"),vyo=o("reformer"),Tyo=o(" \u2014 "),BD=a("a"),Fyo=o("ReformerForSequenceClassification"),Cyo=o(" (Reformer model)"),Myo=l(),N4=a("li"),Hae=a("strong"),Eyo=o("rembert"),yyo=o(" \u2014 "),xD=a("a"),wyo=o("RemBertForSequenceClassification"),Ayo=o(" (RemBERT model)"),Lyo=l(),j4=a("li"),Uae=a("strong"),Byo=o("roberta"),xyo=o(" \u2014 "),kD=a("a"),kyo=o("RobertaForSequenceClassification"),Ryo=o(" (RoBERTa model)"),Syo=l(),q4=a("li"),Jae=a("strong"),Pyo=o("roformer"),$yo=o(" \u2014 "),RD=a("a"),Iyo=o("RoFormerForSequenceClassification"),Dyo=o(" (RoFormer model)"),Nyo=l(),G4=a("li"),Yae=a("strong"),jyo=o("squeezebert"),qyo=o(" \u2014 "),SD=a("a"),Gyo=o("SqueezeBertForSequenceClassification"),Oyo=o(" (SqueezeBERT model)"),Xyo=l(),O4=a("li"),Kae=a("strong"),Vyo=o("tapas"),zyo=o(" \u2014 "),PD=a("a"),Wyo=o("TapasForSequenceClassification"),Qyo=o(" (TAPAS model)"),Hyo=l(),X4=a("li"),Zae=a("strong"),Uyo=o("transfo-xl"),Jyo=o(" \u2014 "),$D=a("a"),Yyo=o("TransfoXLForSequenceClassification"),Kyo=o(" (Transformer-XL model)"),Zyo=l(),V4=a("li"),ene=a("strong"),ewo=o("xlm"),owo=o(" \u2014 "),ID=a("a"),rwo=o("XLMForSequenceClassification"),two=o(" (XLM model)"),awo=l(),z4=a("li"),one=a("strong"),nwo=o("xlm-roberta"),swo=o(" \u2014 "),DD=a("a"),lwo=o("XLMRobertaForSequenceClassification"),iwo=o(" (XLM-RoBERTa model)"),dwo=l(),W4=a("li"),rne=a("strong"),cwo=o("xlm-roberta-xl"),fwo=o(" \u2014 "),ND=a("a"),mwo=o("XLMRobertaXLForSequenceClassification"),gwo=o(" (XLM-RoBERTa-XL model)"),hwo=l(),Q4=a("li"),tne=a("strong"),pwo=o("xlnet"),_wo=o(" \u2014 "),jD=a("a"),uwo=o("XLNetForSequenceClassification"),bwo=o(" (XLNet model)"),vwo=l(),H4=a("li"),ane=a("strong"),Two=o("yoso"),Fwo=o(" \u2014 "),qD=a("a"),Cwo=o("YosoForSequenceClassification"),Mwo=o(" (YOSO model)"),Ewo=l(),U4=a("p"),ywo=o("The model is set in evaluation mode by default using "),nne=a("code"),wwo=o("model.eval()"),Awo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sne=a("code"),Lwo=o("model.train()"),Bwo=l(),lne=a("p"),xwo=o("Examples:"),kwo=l(),f($5.$$.fragment),aRe=l(),hd=a("h2"),J4=a("a"),ine=a("span"),f(I5.$$.fragment),Rwo=l(),dne=a("span"),Swo=o("AutoModelForMultipleChoice"),nRe=l(),rr=a("div"),f(D5.$$.fragment),Pwo=l(),pd=a("p"),$wo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),cne=a("code"),Iwo=o("from_pretrained()"),Dwo=o("class method or the "),fne=a("code"),Nwo=o("from_config()"),jwo=o(`class
method.`),qwo=l(),N5=a("p"),Gwo=o("This class cannot be instantiated directly using "),mne=a("code"),Owo=o("__init__()"),Xwo=o(" (throws an error)."),Vwo=l(),Jr=a("div"),f(j5.$$.fragment),zwo=l(),gne=a("p"),Wwo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Qwo=l(),_d=a("p"),Hwo=o(`Note:
Loading a model from its configuration file does `),hne=a("strong"),Uwo=o("not"),Jwo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pne=a("code"),Ywo=o("from_pretrained()"),Kwo=o("to load the model weights."),Zwo=l(),_ne=a("p"),eAo=o("Examples:"),oAo=l(),f(q5.$$.fragment),rAo=l(),Xe=a("div"),f(G5.$$.fragment),tAo=l(),une=a("p"),aAo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),nAo=l(),Ja=a("p"),sAo=o("The model class to instantiate is selected based on the "),bne=a("code"),lAo=o("model_type"),iAo=o(` property of the config object (either
passed as an argument or loaded from `),vne=a("code"),dAo=o("pretrained_model_name_or_path"),cAo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tne=a("code"),fAo=o("pretrained_model_name_or_path"),mAo=o(":"),gAo=l(),G=a("ul"),Y4=a("li"),Fne=a("strong"),hAo=o("albert"),pAo=o(" \u2014 "),GD=a("a"),_Ao=o("AlbertForMultipleChoice"),uAo=o(" (ALBERT model)"),bAo=l(),K4=a("li"),Cne=a("strong"),vAo=o("bert"),TAo=o(" \u2014 "),OD=a("a"),FAo=o("BertForMultipleChoice"),CAo=o(" (BERT model)"),MAo=l(),Z4=a("li"),Mne=a("strong"),EAo=o("big_bird"),yAo=o(" \u2014 "),XD=a("a"),wAo=o("BigBirdForMultipleChoice"),AAo=o(" (BigBird model)"),LAo=l(),eb=a("li"),Ene=a("strong"),BAo=o("camembert"),xAo=o(" \u2014 "),VD=a("a"),kAo=o("CamembertForMultipleChoice"),RAo=o(" (CamemBERT model)"),SAo=l(),ob=a("li"),yne=a("strong"),PAo=o("canine"),$Ao=o(" \u2014 "),zD=a("a"),IAo=o("CanineForMultipleChoice"),DAo=o(" (Canine model)"),NAo=l(),rb=a("li"),wne=a("strong"),jAo=o("convbert"),qAo=o(" \u2014 "),WD=a("a"),GAo=o("ConvBertForMultipleChoice"),OAo=o(" (ConvBERT model)"),XAo=l(),tb=a("li"),Ane=a("strong"),VAo=o("data2vec-text"),zAo=o(" \u2014 "),QD=a("a"),WAo=o("Data2VecTextForMultipleChoice"),QAo=o(" (Data2VecText model)"),HAo=l(),ab=a("li"),Lne=a("strong"),UAo=o("distilbert"),JAo=o(" \u2014 "),HD=a("a"),YAo=o("DistilBertForMultipleChoice"),KAo=o(" (DistilBERT model)"),ZAo=l(),nb=a("li"),Bne=a("strong"),e0o=o("electra"),o0o=o(" \u2014 "),UD=a("a"),r0o=o("ElectraForMultipleChoice"),t0o=o(" (ELECTRA model)"),a0o=l(),sb=a("li"),xne=a("strong"),n0o=o("flaubert"),s0o=o(" \u2014 "),JD=a("a"),l0o=o("FlaubertForMultipleChoice"),i0o=o(" (FlauBERT model)"),d0o=l(),lb=a("li"),kne=a("strong"),c0o=o("fnet"),f0o=o(" \u2014 "),YD=a("a"),m0o=o("FNetForMultipleChoice"),g0o=o(" (FNet model)"),h0o=l(),ib=a("li"),Rne=a("strong"),p0o=o("funnel"),_0o=o(" \u2014 "),KD=a("a"),u0o=o("FunnelForMultipleChoice"),b0o=o(" (Funnel Transformer model)"),v0o=l(),db=a("li"),Sne=a("strong"),T0o=o("ibert"),F0o=o(" \u2014 "),ZD=a("a"),C0o=o("IBertForMultipleChoice"),M0o=o(" (I-BERT model)"),E0o=l(),cb=a("li"),Pne=a("strong"),y0o=o("longformer"),w0o=o(" \u2014 "),eN=a("a"),A0o=o("LongformerForMultipleChoice"),L0o=o(" (Longformer model)"),B0o=l(),fb=a("li"),$ne=a("strong"),x0o=o("megatron-bert"),k0o=o(" \u2014 "),oN=a("a"),R0o=o("MegatronBertForMultipleChoice"),S0o=o(" (MegatronBert model)"),P0o=l(),mb=a("li"),Ine=a("strong"),$0o=o("mobilebert"),I0o=o(" \u2014 "),rN=a("a"),D0o=o("MobileBertForMultipleChoice"),N0o=o(" (MobileBERT model)"),j0o=l(),gb=a("li"),Dne=a("strong"),q0o=o("mpnet"),G0o=o(" \u2014 "),tN=a("a"),O0o=o("MPNetForMultipleChoice"),X0o=o(" (MPNet model)"),V0o=l(),hb=a("li"),Nne=a("strong"),z0o=o("nystromformer"),W0o=o(" \u2014 "),aN=a("a"),Q0o=o("NystromformerForMultipleChoice"),H0o=o(" (Nystromformer model)"),U0o=l(),pb=a("li"),jne=a("strong"),J0o=o("qdqbert"),Y0o=o(" \u2014 "),nN=a("a"),K0o=o("QDQBertForMultipleChoice"),Z0o=o(" (QDQBert model)"),eLo=l(),_b=a("li"),qne=a("strong"),oLo=o("rembert"),rLo=o(" \u2014 "),sN=a("a"),tLo=o("RemBertForMultipleChoice"),aLo=o(" (RemBERT model)"),nLo=l(),ub=a("li"),Gne=a("strong"),sLo=o("roberta"),lLo=o(" \u2014 "),lN=a("a"),iLo=o("RobertaForMultipleChoice"),dLo=o(" (RoBERTa model)"),cLo=l(),bb=a("li"),One=a("strong"),fLo=o("roformer"),mLo=o(" \u2014 "),iN=a("a"),gLo=o("RoFormerForMultipleChoice"),hLo=o(" (RoFormer model)"),pLo=l(),vb=a("li"),Xne=a("strong"),_Lo=o("squeezebert"),uLo=o(" \u2014 "),dN=a("a"),bLo=o("SqueezeBertForMultipleChoice"),vLo=o(" (SqueezeBERT model)"),TLo=l(),Tb=a("li"),Vne=a("strong"),FLo=o("xlm"),CLo=o(" \u2014 "),cN=a("a"),MLo=o("XLMForMultipleChoice"),ELo=o(" (XLM model)"),yLo=l(),Fb=a("li"),zne=a("strong"),wLo=o("xlm-roberta"),ALo=o(" \u2014 "),fN=a("a"),LLo=o("XLMRobertaForMultipleChoice"),BLo=o(" (XLM-RoBERTa model)"),xLo=l(),Cb=a("li"),Wne=a("strong"),kLo=o("xlm-roberta-xl"),RLo=o(" \u2014 "),mN=a("a"),SLo=o("XLMRobertaXLForMultipleChoice"),PLo=o(" (XLM-RoBERTa-XL model)"),$Lo=l(),Mb=a("li"),Qne=a("strong"),ILo=o("xlnet"),DLo=o(" \u2014 "),gN=a("a"),NLo=o("XLNetForMultipleChoice"),jLo=o(" (XLNet model)"),qLo=l(),Eb=a("li"),Hne=a("strong"),GLo=o("yoso"),OLo=o(" \u2014 "),hN=a("a"),XLo=o("YosoForMultipleChoice"),VLo=o(" (YOSO model)"),zLo=l(),yb=a("p"),WLo=o("The model is set in evaluation mode by default using "),Une=a("code"),QLo=o("model.eval()"),HLo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jne=a("code"),ULo=o("model.train()"),JLo=l(),Yne=a("p"),YLo=o("Examples:"),KLo=l(),f(O5.$$.fragment),sRe=l(),ud=a("h2"),wb=a("a"),Kne=a("span"),f(X5.$$.fragment),ZLo=l(),Zne=a("span"),e8o=o("AutoModelForNextSentencePrediction"),lRe=l(),tr=a("div"),f(V5.$$.fragment),o8o=l(),bd=a("p"),r8o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),ese=a("code"),t8o=o("from_pretrained()"),a8o=o("class method or the "),ose=a("code"),n8o=o("from_config()"),s8o=o(`class
method.`),l8o=l(),z5=a("p"),i8o=o("This class cannot be instantiated directly using "),rse=a("code"),d8o=o("__init__()"),c8o=o(" (throws an error)."),f8o=l(),Yr=a("div"),f(W5.$$.fragment),m8o=l(),tse=a("p"),g8o=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),h8o=l(),vd=a("p"),p8o=o(`Note:
Loading a model from its configuration file does `),ase=a("strong"),_8o=o("not"),u8o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nse=a("code"),b8o=o("from_pretrained()"),v8o=o("to load the model weights."),T8o=l(),sse=a("p"),F8o=o("Examples:"),C8o=l(),f(Q5.$$.fragment),M8o=l(),Ve=a("div"),f(H5.$$.fragment),E8o=l(),lse=a("p"),y8o=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),w8o=l(),Ya=a("p"),A8o=o("The model class to instantiate is selected based on the "),ise=a("code"),L8o=o("model_type"),B8o=o(` property of the config object (either
passed as an argument or loaded from `),dse=a("code"),x8o=o("pretrained_model_name_or_path"),k8o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cse=a("code"),R8o=o("pretrained_model_name_or_path"),S8o=o(":"),P8o=l(),da=a("ul"),Ab=a("li"),fse=a("strong"),$8o=o("bert"),I8o=o(" \u2014 "),pN=a("a"),D8o=o("BertForNextSentencePrediction"),N8o=o(" (BERT model)"),j8o=l(),Lb=a("li"),mse=a("strong"),q8o=o("fnet"),G8o=o(" \u2014 "),_N=a("a"),O8o=o("FNetForNextSentencePrediction"),X8o=o(" (FNet model)"),V8o=l(),Bb=a("li"),gse=a("strong"),z8o=o("megatron-bert"),W8o=o(" \u2014 "),uN=a("a"),Q8o=o("MegatronBertForNextSentencePrediction"),H8o=o(" (MegatronBert model)"),U8o=l(),xb=a("li"),hse=a("strong"),J8o=o("mobilebert"),Y8o=o(" \u2014 "),bN=a("a"),K8o=o("MobileBertForNextSentencePrediction"),Z8o=o(" (MobileBERT model)"),e9o=l(),kb=a("li"),pse=a("strong"),o9o=o("qdqbert"),r9o=o(" \u2014 "),vN=a("a"),t9o=o("QDQBertForNextSentencePrediction"),a9o=o(" (QDQBert model)"),n9o=l(),Rb=a("p"),s9o=o("The model is set in evaluation mode by default using "),_se=a("code"),l9o=o("model.eval()"),i9o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),use=a("code"),d9o=o("model.train()"),c9o=l(),bse=a("p"),f9o=o("Examples:"),m9o=l(),f(U5.$$.fragment),iRe=l(),Td=a("h2"),Sb=a("a"),vse=a("span"),f(J5.$$.fragment),g9o=l(),Tse=a("span"),h9o=o("AutoModelForTokenClassification"),dRe=l(),ar=a("div"),f(Y5.$$.fragment),p9o=l(),Fd=a("p"),_9o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Fse=a("code"),u9o=o("from_pretrained()"),b9o=o("class method or the "),Cse=a("code"),v9o=o("from_config()"),T9o=o(`class
method.`),F9o=l(),K5=a("p"),C9o=o("This class cannot be instantiated directly using "),Mse=a("code"),M9o=o("__init__()"),E9o=o(" (throws an error)."),y9o=l(),Kr=a("div"),f(Z5.$$.fragment),w9o=l(),Ese=a("p"),A9o=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),L9o=l(),Cd=a("p"),B9o=o(`Note:
Loading a model from its configuration file does `),yse=a("strong"),x9o=o("not"),k9o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wse=a("code"),R9o=o("from_pretrained()"),S9o=o("to load the model weights."),P9o=l(),Ase=a("p"),$9o=o("Examples:"),I9o=l(),f(ey.$$.fragment),D9o=l(),ze=a("div"),f(oy.$$.fragment),N9o=l(),Lse=a("p"),j9o=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),q9o=l(),Ka=a("p"),G9o=o("The model class to instantiate is selected based on the "),Bse=a("code"),O9o=o("model_type"),X9o=o(` property of the config object (either
passed as an argument or loaded from `),xse=a("code"),V9o=o("pretrained_model_name_or_path"),z9o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kse=a("code"),W9o=o("pretrained_model_name_or_path"),Q9o=o(":"),H9o=l(),j=a("ul"),Pb=a("li"),Rse=a("strong"),U9o=o("albert"),J9o=o(" \u2014 "),TN=a("a"),Y9o=o("AlbertForTokenClassification"),K9o=o(" (ALBERT model)"),Z9o=l(),$b=a("li"),Sse=a("strong"),eBo=o("bert"),oBo=o(" \u2014 "),FN=a("a"),rBo=o("BertForTokenClassification"),tBo=o(" (BERT model)"),aBo=l(),Ib=a("li"),Pse=a("strong"),nBo=o("big_bird"),sBo=o(" \u2014 "),CN=a("a"),lBo=o("BigBirdForTokenClassification"),iBo=o(" (BigBird model)"),dBo=l(),Db=a("li"),$se=a("strong"),cBo=o("camembert"),fBo=o(" \u2014 "),MN=a("a"),mBo=o("CamembertForTokenClassification"),gBo=o(" (CamemBERT model)"),hBo=l(),Nb=a("li"),Ise=a("strong"),pBo=o("canine"),_Bo=o(" \u2014 "),EN=a("a"),uBo=o("CanineForTokenClassification"),bBo=o(" (Canine model)"),vBo=l(),jb=a("li"),Dse=a("strong"),TBo=o("convbert"),FBo=o(" \u2014 "),yN=a("a"),CBo=o("ConvBertForTokenClassification"),MBo=o(" (ConvBERT model)"),EBo=l(),qb=a("li"),Nse=a("strong"),yBo=o("data2vec-text"),wBo=o(" \u2014 "),wN=a("a"),ABo=o("Data2VecTextForTokenClassification"),LBo=o(" (Data2VecText model)"),BBo=l(),Gb=a("li"),jse=a("strong"),xBo=o("deberta"),kBo=o(" \u2014 "),AN=a("a"),RBo=o("DebertaForTokenClassification"),SBo=o(" (DeBERTa model)"),PBo=l(),Ob=a("li"),qse=a("strong"),$Bo=o("deberta-v2"),IBo=o(" \u2014 "),LN=a("a"),DBo=o("DebertaV2ForTokenClassification"),NBo=o(" (DeBERTa-v2 model)"),jBo=l(),Xb=a("li"),Gse=a("strong"),qBo=o("distilbert"),GBo=o(" \u2014 "),BN=a("a"),OBo=o("DistilBertForTokenClassification"),XBo=o(" (DistilBERT model)"),VBo=l(),Vb=a("li"),Ose=a("strong"),zBo=o("electra"),WBo=o(" \u2014 "),xN=a("a"),QBo=o("ElectraForTokenClassification"),HBo=o(" (ELECTRA model)"),UBo=l(),zb=a("li"),Xse=a("strong"),JBo=o("flaubert"),YBo=o(" \u2014 "),kN=a("a"),KBo=o("FlaubertForTokenClassification"),ZBo=o(" (FlauBERT model)"),exo=l(),Wb=a("li"),Vse=a("strong"),oxo=o("fnet"),rxo=o(" \u2014 "),RN=a("a"),txo=o("FNetForTokenClassification"),axo=o(" (FNet model)"),nxo=l(),Qb=a("li"),zse=a("strong"),sxo=o("funnel"),lxo=o(" \u2014 "),SN=a("a"),ixo=o("FunnelForTokenClassification"),dxo=o(" (Funnel Transformer model)"),cxo=l(),Hb=a("li"),Wse=a("strong"),fxo=o("gpt2"),mxo=o(" \u2014 "),PN=a("a"),gxo=o("GPT2ForTokenClassification"),hxo=o(" (OpenAI GPT-2 model)"),pxo=l(),Ub=a("li"),Qse=a("strong"),_xo=o("ibert"),uxo=o(" \u2014 "),$N=a("a"),bxo=o("IBertForTokenClassification"),vxo=o(" (I-BERT model)"),Txo=l(),Jb=a("li"),Hse=a("strong"),Fxo=o("layoutlm"),Cxo=o(" \u2014 "),IN=a("a"),Mxo=o("LayoutLMForTokenClassification"),Exo=o(" (LayoutLM model)"),yxo=l(),Yb=a("li"),Use=a("strong"),wxo=o("layoutlmv2"),Axo=o(" \u2014 "),DN=a("a"),Lxo=o("LayoutLMv2ForTokenClassification"),Bxo=o(" (LayoutLMv2 model)"),xxo=l(),Kb=a("li"),Jse=a("strong"),kxo=o("longformer"),Rxo=o(" \u2014 "),NN=a("a"),Sxo=o("LongformerForTokenClassification"),Pxo=o(" (Longformer model)"),$xo=l(),Zb=a("li"),Yse=a("strong"),Ixo=o("megatron-bert"),Dxo=o(" \u2014 "),jN=a("a"),Nxo=o("MegatronBertForTokenClassification"),jxo=o(" (MegatronBert model)"),qxo=l(),e3=a("li"),Kse=a("strong"),Gxo=o("mobilebert"),Oxo=o(" \u2014 "),qN=a("a"),Xxo=o("MobileBertForTokenClassification"),Vxo=o(" (MobileBERT model)"),zxo=l(),o3=a("li"),Zse=a("strong"),Wxo=o("mpnet"),Qxo=o(" \u2014 "),GN=a("a"),Hxo=o("MPNetForTokenClassification"),Uxo=o(" (MPNet model)"),Jxo=l(),r3=a("li"),ele=a("strong"),Yxo=o("nystromformer"),Kxo=o(" \u2014 "),ON=a("a"),Zxo=o("NystromformerForTokenClassification"),eko=o(" (Nystromformer model)"),oko=l(),t3=a("li"),ole=a("strong"),rko=o("qdqbert"),tko=o(" \u2014 "),XN=a("a"),ako=o("QDQBertForTokenClassification"),nko=o(" (QDQBert model)"),sko=l(),a3=a("li"),rle=a("strong"),lko=o("rembert"),iko=o(" \u2014 "),VN=a("a"),dko=o("RemBertForTokenClassification"),cko=o(" (RemBERT model)"),fko=l(),n3=a("li"),tle=a("strong"),mko=o("roberta"),gko=o(" \u2014 "),zN=a("a"),hko=o("RobertaForTokenClassification"),pko=o(" (RoBERTa model)"),_ko=l(),s3=a("li"),ale=a("strong"),uko=o("roformer"),bko=o(" \u2014 "),WN=a("a"),vko=o("RoFormerForTokenClassification"),Tko=o(" (RoFormer model)"),Fko=l(),l3=a("li"),nle=a("strong"),Cko=o("squeezebert"),Mko=o(" \u2014 "),QN=a("a"),Eko=o("SqueezeBertForTokenClassification"),yko=o(" (SqueezeBERT model)"),wko=l(),i3=a("li"),sle=a("strong"),Ako=o("xlm"),Lko=o(" \u2014 "),HN=a("a"),Bko=o("XLMForTokenClassification"),xko=o(" (XLM model)"),kko=l(),d3=a("li"),lle=a("strong"),Rko=o("xlm-roberta"),Sko=o(" \u2014 "),UN=a("a"),Pko=o("XLMRobertaForTokenClassification"),$ko=o(" (XLM-RoBERTa model)"),Iko=l(),c3=a("li"),ile=a("strong"),Dko=o("xlm-roberta-xl"),Nko=o(" \u2014 "),JN=a("a"),jko=o("XLMRobertaXLForTokenClassification"),qko=o(" (XLM-RoBERTa-XL model)"),Gko=l(),f3=a("li"),dle=a("strong"),Oko=o("xlnet"),Xko=o(" \u2014 "),YN=a("a"),Vko=o("XLNetForTokenClassification"),zko=o(" (XLNet model)"),Wko=l(),m3=a("li"),cle=a("strong"),Qko=o("yoso"),Hko=o(" \u2014 "),KN=a("a"),Uko=o("YosoForTokenClassification"),Jko=o(" (YOSO model)"),Yko=l(),g3=a("p"),Kko=o("The model is set in evaluation mode by default using "),fle=a("code"),Zko=o("model.eval()"),eRo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mle=a("code"),oRo=o("model.train()"),rRo=l(),gle=a("p"),tRo=o("Examples:"),aRo=l(),f(ry.$$.fragment),cRe=l(),Md=a("h2"),h3=a("a"),hle=a("span"),f(ty.$$.fragment),nRo=l(),ple=a("span"),sRo=o("AutoModelForQuestionAnswering"),fRe=l(),nr=a("div"),f(ay.$$.fragment),lRo=l(),Ed=a("p"),iRo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),_le=a("code"),dRo=o("from_pretrained()"),cRo=o("class method or the "),ule=a("code"),fRo=o("from_config()"),mRo=o(`class
method.`),gRo=l(),ny=a("p"),hRo=o("This class cannot be instantiated directly using "),ble=a("code"),pRo=o("__init__()"),_Ro=o(" (throws an error)."),uRo=l(),Zr=a("div"),f(sy.$$.fragment),bRo=l(),vle=a("p"),vRo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),TRo=l(),yd=a("p"),FRo=o(`Note:
Loading a model from its configuration file does `),Tle=a("strong"),CRo=o("not"),MRo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Fle=a("code"),ERo=o("from_pretrained()"),yRo=o("to load the model weights."),wRo=l(),Cle=a("p"),ARo=o("Examples:"),LRo=l(),f(ly.$$.fragment),BRo=l(),We=a("div"),f(iy.$$.fragment),xRo=l(),Mle=a("p"),kRo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),RRo=l(),Za=a("p"),SRo=o("The model class to instantiate is selected based on the "),Ele=a("code"),PRo=o("model_type"),$Ro=o(` property of the config object (either
passed as an argument or loaded from `),yle=a("code"),IRo=o("pretrained_model_name_or_path"),DRo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wle=a("code"),NRo=o("pretrained_model_name_or_path"),jRo=o(":"),qRo=l(),R=a("ul"),p3=a("li"),Ale=a("strong"),GRo=o("albert"),ORo=o(" \u2014 "),ZN=a("a"),XRo=o("AlbertForQuestionAnswering"),VRo=o(" (ALBERT model)"),zRo=l(),_3=a("li"),Lle=a("strong"),WRo=o("bart"),QRo=o(" \u2014 "),ej=a("a"),HRo=o("BartForQuestionAnswering"),URo=o(" (BART model)"),JRo=l(),u3=a("li"),Ble=a("strong"),YRo=o("bert"),KRo=o(" \u2014 "),oj=a("a"),ZRo=o("BertForQuestionAnswering"),eSo=o(" (BERT model)"),oSo=l(),b3=a("li"),xle=a("strong"),rSo=o("big_bird"),tSo=o(" \u2014 "),rj=a("a"),aSo=o("BigBirdForQuestionAnswering"),nSo=o(" (BigBird model)"),sSo=l(),v3=a("li"),kle=a("strong"),lSo=o("bigbird_pegasus"),iSo=o(" \u2014 "),tj=a("a"),dSo=o("BigBirdPegasusForQuestionAnswering"),cSo=o(" (BigBirdPegasus model)"),fSo=l(),T3=a("li"),Rle=a("strong"),mSo=o("camembert"),gSo=o(" \u2014 "),aj=a("a"),hSo=o("CamembertForQuestionAnswering"),pSo=o(" (CamemBERT model)"),_So=l(),F3=a("li"),Sle=a("strong"),uSo=o("canine"),bSo=o(" \u2014 "),nj=a("a"),vSo=o("CanineForQuestionAnswering"),TSo=o(" (Canine model)"),FSo=l(),C3=a("li"),Ple=a("strong"),CSo=o("convbert"),MSo=o(" \u2014 "),sj=a("a"),ESo=o("ConvBertForQuestionAnswering"),ySo=o(" (ConvBERT model)"),wSo=l(),M3=a("li"),$le=a("strong"),ASo=o("data2vec-text"),LSo=o(" \u2014 "),lj=a("a"),BSo=o("Data2VecTextForQuestionAnswering"),xSo=o(" (Data2VecText model)"),kSo=l(),E3=a("li"),Ile=a("strong"),RSo=o("deberta"),SSo=o(" \u2014 "),ij=a("a"),PSo=o("DebertaForQuestionAnswering"),$So=o(" (DeBERTa model)"),ISo=l(),y3=a("li"),Dle=a("strong"),DSo=o("deberta-v2"),NSo=o(" \u2014 "),dj=a("a"),jSo=o("DebertaV2ForQuestionAnswering"),qSo=o(" (DeBERTa-v2 model)"),GSo=l(),w3=a("li"),Nle=a("strong"),OSo=o("distilbert"),XSo=o(" \u2014 "),cj=a("a"),VSo=o("DistilBertForQuestionAnswering"),zSo=o(" (DistilBERT model)"),WSo=l(),A3=a("li"),jle=a("strong"),QSo=o("electra"),HSo=o(" \u2014 "),fj=a("a"),USo=o("ElectraForQuestionAnswering"),JSo=o(" (ELECTRA model)"),YSo=l(),L3=a("li"),qle=a("strong"),KSo=o("flaubert"),ZSo=o(" \u2014 "),mj=a("a"),ePo=o("FlaubertForQuestionAnsweringSimple"),oPo=o(" (FlauBERT model)"),rPo=l(),B3=a("li"),Gle=a("strong"),tPo=o("fnet"),aPo=o(" \u2014 "),gj=a("a"),nPo=o("FNetForQuestionAnswering"),sPo=o(" (FNet model)"),lPo=l(),x3=a("li"),Ole=a("strong"),iPo=o("funnel"),dPo=o(" \u2014 "),hj=a("a"),cPo=o("FunnelForQuestionAnswering"),fPo=o(" (Funnel Transformer model)"),mPo=l(),k3=a("li"),Xle=a("strong"),gPo=o("gptj"),hPo=o(" \u2014 "),pj=a("a"),pPo=o("GPTJForQuestionAnswering"),_Po=o(" (GPT-J model)"),uPo=l(),R3=a("li"),Vle=a("strong"),bPo=o("ibert"),vPo=o(" \u2014 "),_j=a("a"),TPo=o("IBertForQuestionAnswering"),FPo=o(" (I-BERT model)"),CPo=l(),S3=a("li"),zle=a("strong"),MPo=o("layoutlmv2"),EPo=o(" \u2014 "),uj=a("a"),yPo=o("LayoutLMv2ForQuestionAnswering"),wPo=o(" (LayoutLMv2 model)"),APo=l(),P3=a("li"),Wle=a("strong"),LPo=o("led"),BPo=o(" \u2014 "),bj=a("a"),xPo=o("LEDForQuestionAnswering"),kPo=o(" (LED model)"),RPo=l(),$3=a("li"),Qle=a("strong"),SPo=o("longformer"),PPo=o(" \u2014 "),vj=a("a"),$Po=o("LongformerForQuestionAnswering"),IPo=o(" (Longformer model)"),DPo=l(),I3=a("li"),Hle=a("strong"),NPo=o("lxmert"),jPo=o(" \u2014 "),Tj=a("a"),qPo=o("LxmertForQuestionAnswering"),GPo=o(" (LXMERT model)"),OPo=l(),D3=a("li"),Ule=a("strong"),XPo=o("mbart"),VPo=o(" \u2014 "),Fj=a("a"),zPo=o("MBartForQuestionAnswering"),WPo=o(" (mBART model)"),QPo=l(),N3=a("li"),Jle=a("strong"),HPo=o("megatron-bert"),UPo=o(" \u2014 "),Cj=a("a"),JPo=o("MegatronBertForQuestionAnswering"),YPo=o(" (MegatronBert model)"),KPo=l(),j3=a("li"),Yle=a("strong"),ZPo=o("mobilebert"),e$o=o(" \u2014 "),Mj=a("a"),o$o=o("MobileBertForQuestionAnswering"),r$o=o(" (MobileBERT model)"),t$o=l(),q3=a("li"),Kle=a("strong"),a$o=o("mpnet"),n$o=o(" \u2014 "),Ej=a("a"),s$o=o("MPNetForQuestionAnswering"),l$o=o(" (MPNet model)"),i$o=l(),G3=a("li"),Zle=a("strong"),d$o=o("nystromformer"),c$o=o(" \u2014 "),yj=a("a"),f$o=o("NystromformerForQuestionAnswering"),m$o=o(" (Nystromformer model)"),g$o=l(),O3=a("li"),eie=a("strong"),h$o=o("qdqbert"),p$o=o(" \u2014 "),wj=a("a"),_$o=o("QDQBertForQuestionAnswering"),u$o=o(" (QDQBert model)"),b$o=l(),X3=a("li"),oie=a("strong"),v$o=o("reformer"),T$o=o(" \u2014 "),Aj=a("a"),F$o=o("ReformerForQuestionAnswering"),C$o=o(" (Reformer model)"),M$o=l(),V3=a("li"),rie=a("strong"),E$o=o("rembert"),y$o=o(" \u2014 "),Lj=a("a"),w$o=o("RemBertForQuestionAnswering"),A$o=o(" (RemBERT model)"),L$o=l(),z3=a("li"),tie=a("strong"),B$o=o("roberta"),x$o=o(" \u2014 "),Bj=a("a"),k$o=o("RobertaForQuestionAnswering"),R$o=o(" (RoBERTa model)"),S$o=l(),W3=a("li"),aie=a("strong"),P$o=o("roformer"),$$o=o(" \u2014 "),xj=a("a"),I$o=o("RoFormerForQuestionAnswering"),D$o=o(" (RoFormer model)"),N$o=l(),Q3=a("li"),nie=a("strong"),j$o=o("splinter"),q$o=o(" \u2014 "),kj=a("a"),G$o=o("SplinterForQuestionAnswering"),O$o=o(" (Splinter model)"),X$o=l(),H3=a("li"),sie=a("strong"),V$o=o("squeezebert"),z$o=o(" \u2014 "),Rj=a("a"),W$o=o("SqueezeBertForQuestionAnswering"),Q$o=o(" (SqueezeBERT model)"),H$o=l(),U3=a("li"),lie=a("strong"),U$o=o("xlm"),J$o=o(" \u2014 "),Sj=a("a"),Y$o=o("XLMForQuestionAnsweringSimple"),K$o=o(" (XLM model)"),Z$o=l(),J3=a("li"),iie=a("strong"),eIo=o("xlm-roberta"),oIo=o(" \u2014 "),Pj=a("a"),rIo=o("XLMRobertaForQuestionAnswering"),tIo=o(" (XLM-RoBERTa model)"),aIo=l(),Y3=a("li"),die=a("strong"),nIo=o("xlm-roberta-xl"),sIo=o(" \u2014 "),$j=a("a"),lIo=o("XLMRobertaXLForQuestionAnswering"),iIo=o(" (XLM-RoBERTa-XL model)"),dIo=l(),K3=a("li"),cie=a("strong"),cIo=o("xlnet"),fIo=o(" \u2014 "),Ij=a("a"),mIo=o("XLNetForQuestionAnsweringSimple"),gIo=o(" (XLNet model)"),hIo=l(),Z3=a("li"),fie=a("strong"),pIo=o("yoso"),_Io=o(" \u2014 "),Dj=a("a"),uIo=o("YosoForQuestionAnswering"),bIo=o(" (YOSO model)"),vIo=l(),e2=a("p"),TIo=o("The model is set in evaluation mode by default using "),mie=a("code"),FIo=o("model.eval()"),CIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gie=a("code"),MIo=o("model.train()"),EIo=l(),hie=a("p"),yIo=o("Examples:"),wIo=l(),f(dy.$$.fragment),mRe=l(),wd=a("h2"),o2=a("a"),pie=a("span"),f(cy.$$.fragment),AIo=l(),_ie=a("span"),LIo=o("AutoModelForTableQuestionAnswering"),gRe=l(),sr=a("div"),f(fy.$$.fragment),BIo=l(),Ad=a("p"),xIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),uie=a("code"),kIo=o("from_pretrained()"),RIo=o("class method or the "),bie=a("code"),SIo=o("from_config()"),PIo=o(`class
method.`),$Io=l(),my=a("p"),IIo=o("This class cannot be instantiated directly using "),vie=a("code"),DIo=o("__init__()"),NIo=o(" (throws an error)."),jIo=l(),et=a("div"),f(gy.$$.fragment),qIo=l(),Tie=a("p"),GIo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),OIo=l(),Ld=a("p"),XIo=o(`Note:
Loading a model from its configuration file does `),Fie=a("strong"),VIo=o("not"),zIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Cie=a("code"),WIo=o("from_pretrained()"),QIo=o("to load the model weights."),HIo=l(),Mie=a("p"),UIo=o("Examples:"),JIo=l(),f(hy.$$.fragment),YIo=l(),Qe=a("div"),f(py.$$.fragment),KIo=l(),Eie=a("p"),ZIo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),eDo=l(),en=a("p"),oDo=o("The model class to instantiate is selected based on the "),yie=a("code"),rDo=o("model_type"),tDo=o(` property of the config object (either
passed as an argument or loaded from `),wie=a("code"),aDo=o("pretrained_model_name_or_path"),nDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Aie=a("code"),sDo=o("pretrained_model_name_or_path"),lDo=o(":"),iDo=l(),Lie=a("ul"),r2=a("li"),Bie=a("strong"),dDo=o("tapas"),cDo=o(" \u2014 "),Nj=a("a"),fDo=o("TapasForQuestionAnswering"),mDo=o(" (TAPAS model)"),gDo=l(),t2=a("p"),hDo=o("The model is set in evaluation mode by default using "),xie=a("code"),pDo=o("model.eval()"),_Do=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kie=a("code"),uDo=o("model.train()"),bDo=l(),Rie=a("p"),vDo=o("Examples:"),TDo=l(),f(_y.$$.fragment),hRe=l(),Bd=a("h2"),a2=a("a"),Sie=a("span"),f(uy.$$.fragment),FDo=l(),Pie=a("span"),CDo=o("AutoModelForImageClassification"),pRe=l(),lr=a("div"),f(by.$$.fragment),MDo=l(),xd=a("p"),EDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),$ie=a("code"),yDo=o("from_pretrained()"),wDo=o("class method or the "),Iie=a("code"),ADo=o("from_config()"),LDo=o(`class
method.`),BDo=l(),vy=a("p"),xDo=o("This class cannot be instantiated directly using "),Die=a("code"),kDo=o("__init__()"),RDo=o(" (throws an error)."),SDo=l(),ot=a("div"),f(Ty.$$.fragment),PDo=l(),Nie=a("p"),$Do=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),IDo=l(),kd=a("p"),DDo=o(`Note:
Loading a model from its configuration file does `),jie=a("strong"),NDo=o("not"),jDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qie=a("code"),qDo=o("from_pretrained()"),GDo=o("to load the model weights."),ODo=l(),Gie=a("p"),XDo=o("Examples:"),VDo=l(),f(Fy.$$.fragment),zDo=l(),He=a("div"),f(Cy.$$.fragment),WDo=l(),Oie=a("p"),QDo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),HDo=l(),on=a("p"),UDo=o("The model class to instantiate is selected based on the "),Xie=a("code"),JDo=o("model_type"),YDo=o(` property of the config object (either
passed as an argument or loaded from `),Vie=a("code"),KDo=o("pretrained_model_name_or_path"),ZDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zie=a("code"),eNo=o("pretrained_model_name_or_path"),oNo=o(":"),rNo=l(),ge=a("ul"),n2=a("li"),Wie=a("strong"),tNo=o("beit"),aNo=o(" \u2014 "),jj=a("a"),nNo=o("BeitForImageClassification"),sNo=o(" (BEiT model)"),lNo=l(),s2=a("li"),Qie=a("strong"),iNo=o("convnext"),dNo=o(" \u2014 "),qj=a("a"),cNo=o("ConvNextForImageClassification"),fNo=o(" (ConvNext model)"),mNo=l(),qs=a("li"),Hie=a("strong"),gNo=o("deit"),hNo=o(" \u2014 "),Gj=a("a"),pNo=o("DeiTForImageClassification"),_No=o(" or "),Oj=a("a"),uNo=o("DeiTForImageClassificationWithTeacher"),bNo=o(" (DeiT model)"),vNo=l(),l2=a("li"),Uie=a("strong"),TNo=o("imagegpt"),FNo=o(" \u2014 "),Xj=a("a"),CNo=o("ImageGPTForImageClassification"),MNo=o(" (ImageGPT model)"),ENo=l(),ma=a("li"),Jie=a("strong"),yNo=o("perceiver"),wNo=o(" \u2014 "),Vj=a("a"),ANo=o("PerceiverForImageClassificationLearned"),LNo=o(" or "),zj=a("a"),BNo=o("PerceiverForImageClassificationFourier"),xNo=o(" or "),Wj=a("a"),kNo=o("PerceiverForImageClassificationConvProcessing"),RNo=o(" (Perceiver model)"),SNo=l(),i2=a("li"),Yie=a("strong"),PNo=o("poolformer"),$No=o(" \u2014 "),Qj=a("a"),INo=o("PoolFormerForImageClassification"),DNo=o(" (PoolFormer model)"),NNo=l(),d2=a("li"),Kie=a("strong"),jNo=o("resnet"),qNo=o(" \u2014 "),Hj=a("a"),GNo=o("ResNetForImageClassification"),ONo=o(" (ResNet model)"),XNo=l(),c2=a("li"),Zie=a("strong"),VNo=o("segformer"),zNo=o(" \u2014 "),Uj=a("a"),WNo=o("SegformerForImageClassification"),QNo=o(" (SegFormer model)"),HNo=l(),f2=a("li"),ede=a("strong"),UNo=o("swin"),JNo=o(" \u2014 "),Jj=a("a"),YNo=o("SwinForImageClassification"),KNo=o(" (Swin model)"),ZNo=l(),m2=a("li"),ode=a("strong"),ejo=o("van"),ojo=o(" \u2014 "),Yj=a("a"),rjo=o("VanForImageClassification"),tjo=o(" (VAN model)"),ajo=l(),g2=a("li"),rde=a("strong"),njo=o("vit"),sjo=o(" \u2014 "),Kj=a("a"),ljo=o("ViTForImageClassification"),ijo=o(" (ViT model)"),djo=l(),h2=a("p"),cjo=o("The model is set in evaluation mode by default using "),tde=a("code"),fjo=o("model.eval()"),mjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ade=a("code"),gjo=o("model.train()"),hjo=l(),nde=a("p"),pjo=o("Examples:"),_jo=l(),f(My.$$.fragment),_Re=l(),Rd=a("h2"),p2=a("a"),sde=a("span"),f(Ey.$$.fragment),ujo=l(),lde=a("span"),bjo=o("AutoModelForVision2Seq"),uRe=l(),ir=a("div"),f(yy.$$.fragment),vjo=l(),Sd=a("p"),Tjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),ide=a("code"),Fjo=o("from_pretrained()"),Cjo=o("class method or the "),dde=a("code"),Mjo=o("from_config()"),Ejo=o(`class
method.`),yjo=l(),wy=a("p"),wjo=o("This class cannot be instantiated directly using "),cde=a("code"),Ajo=o("__init__()"),Ljo=o(" (throws an error)."),Bjo=l(),rt=a("div"),f(Ay.$$.fragment),xjo=l(),fde=a("p"),kjo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Rjo=l(),Pd=a("p"),Sjo=o(`Note:
Loading a model from its configuration file does `),mde=a("strong"),Pjo=o("not"),$jo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gde=a("code"),Ijo=o("from_pretrained()"),Djo=o("to load the model weights."),Njo=l(),hde=a("p"),jjo=o("Examples:"),qjo=l(),f(Ly.$$.fragment),Gjo=l(),Ue=a("div"),f(By.$$.fragment),Ojo=l(),pde=a("p"),Xjo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Vjo=l(),rn=a("p"),zjo=o("The model class to instantiate is selected based on the "),_de=a("code"),Wjo=o("model_type"),Qjo=o(` property of the config object (either
passed as an argument or loaded from `),ude=a("code"),Hjo=o("pretrained_model_name_or_path"),Ujo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bde=a("code"),Jjo=o("pretrained_model_name_or_path"),Yjo=o(":"),Kjo=l(),vde=a("ul"),_2=a("li"),Tde=a("strong"),Zjo=o("vision-encoder-decoder"),eqo=o(" \u2014 "),Zj=a("a"),oqo=o("VisionEncoderDecoderModel"),rqo=o(" (Vision Encoder decoder model)"),tqo=l(),u2=a("p"),aqo=o("The model is set in evaluation mode by default using "),Fde=a("code"),nqo=o("model.eval()"),sqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cde=a("code"),lqo=o("model.train()"),iqo=l(),Mde=a("p"),dqo=o("Examples:"),cqo=l(),f(xy.$$.fragment),bRe=l(),$d=a("h2"),b2=a("a"),Ede=a("span"),f(ky.$$.fragment),fqo=l(),yde=a("span"),mqo=o("AutoModelForAudioClassification"),vRe=l(),dr=a("div"),f(Ry.$$.fragment),gqo=l(),Id=a("p"),hqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),wde=a("code"),pqo=o("from_pretrained()"),_qo=o("class method or the "),Ade=a("code"),uqo=o("from_config()"),bqo=o(`class
method.`),vqo=l(),Sy=a("p"),Tqo=o("This class cannot be instantiated directly using "),Lde=a("code"),Fqo=o("__init__()"),Cqo=o(" (throws an error)."),Mqo=l(),tt=a("div"),f(Py.$$.fragment),Eqo=l(),Bde=a("p"),yqo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),wqo=l(),Dd=a("p"),Aqo=o(`Note:
Loading a model from its configuration file does `),xde=a("strong"),Lqo=o("not"),Bqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kde=a("code"),xqo=o("from_pretrained()"),kqo=o("to load the model weights."),Rqo=l(),Rde=a("p"),Sqo=o("Examples:"),Pqo=l(),f($y.$$.fragment),$qo=l(),Je=a("div"),f(Iy.$$.fragment),Iqo=l(),Sde=a("p"),Dqo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Nqo=l(),tn=a("p"),jqo=o("The model class to instantiate is selected based on the "),Pde=a("code"),qqo=o("model_type"),Gqo=o(` property of the config object (either
passed as an argument or loaded from `),$de=a("code"),Oqo=o("pretrained_model_name_or_path"),Xqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ide=a("code"),Vqo=o("pretrained_model_name_or_path"),zqo=o(":"),Wqo=l(),ke=a("ul"),v2=a("li"),Dde=a("strong"),Qqo=o("data2vec-audio"),Hqo=o(" \u2014 "),eq=a("a"),Uqo=o("Data2VecAudioForSequenceClassification"),Jqo=o(" (Data2VecAudio model)"),Yqo=l(),T2=a("li"),Nde=a("strong"),Kqo=o("hubert"),Zqo=o(" \u2014 "),oq=a("a"),eGo=o("HubertForSequenceClassification"),oGo=o(" (Hubert model)"),rGo=l(),F2=a("li"),jde=a("strong"),tGo=o("sew"),aGo=o(" \u2014 "),rq=a("a"),nGo=o("SEWForSequenceClassification"),sGo=o(" (SEW model)"),lGo=l(),C2=a("li"),qde=a("strong"),iGo=o("sew-d"),dGo=o(" \u2014 "),tq=a("a"),cGo=o("SEWDForSequenceClassification"),fGo=o(" (SEW-D model)"),mGo=l(),M2=a("li"),Gde=a("strong"),gGo=o("unispeech"),hGo=o(" \u2014 "),aq=a("a"),pGo=o("UniSpeechForSequenceClassification"),_Go=o(" (UniSpeech model)"),uGo=l(),E2=a("li"),Ode=a("strong"),bGo=o("unispeech-sat"),vGo=o(" \u2014 "),nq=a("a"),TGo=o("UniSpeechSatForSequenceClassification"),FGo=o(" (UniSpeechSat model)"),CGo=l(),y2=a("li"),Xde=a("strong"),MGo=o("wav2vec2"),EGo=o(" \u2014 "),sq=a("a"),yGo=o("Wav2Vec2ForSequenceClassification"),wGo=o(" (Wav2Vec2 model)"),AGo=l(),w2=a("li"),Vde=a("strong"),LGo=o("wavlm"),BGo=o(" \u2014 "),lq=a("a"),xGo=o("WavLMForSequenceClassification"),kGo=o(" (WavLM model)"),RGo=l(),A2=a("p"),SGo=o("The model is set in evaluation mode by default using "),zde=a("code"),PGo=o("model.eval()"),$Go=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wde=a("code"),IGo=o("model.train()"),DGo=l(),Qde=a("p"),NGo=o("Examples:"),jGo=l(),f(Dy.$$.fragment),TRe=l(),Nd=a("h2"),L2=a("a"),Hde=a("span"),f(Ny.$$.fragment),qGo=l(),Ude=a("span"),GGo=o("AutoModelForAudioFrameClassification"),FRe=l(),cr=a("div"),f(jy.$$.fragment),OGo=l(),jd=a("p"),XGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),Jde=a("code"),VGo=o("from_pretrained()"),zGo=o("class method or the "),Yde=a("code"),WGo=o("from_config()"),QGo=o(`class
method.`),HGo=l(),qy=a("p"),UGo=o("This class cannot be instantiated directly using "),Kde=a("code"),JGo=o("__init__()"),YGo=o(" (throws an error)."),KGo=l(),at=a("div"),f(Gy.$$.fragment),ZGo=l(),Zde=a("p"),eOo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),oOo=l(),qd=a("p"),rOo=o(`Note:
Loading a model from its configuration file does `),ece=a("strong"),tOo=o("not"),aOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oce=a("code"),nOo=o("from_pretrained()"),sOo=o("to load the model weights."),lOo=l(),rce=a("p"),iOo=o("Examples:"),dOo=l(),f(Oy.$$.fragment),cOo=l(),Ye=a("div"),f(Xy.$$.fragment),fOo=l(),tce=a("p"),mOo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),gOo=l(),an=a("p"),hOo=o("The model class to instantiate is selected based on the "),ace=a("code"),pOo=o("model_type"),_Oo=o(` property of the config object (either
passed as an argument or loaded from `),nce=a("code"),uOo=o("pretrained_model_name_or_path"),bOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sce=a("code"),vOo=o("pretrained_model_name_or_path"),TOo=o(":"),FOo=l(),nn=a("ul"),B2=a("li"),lce=a("strong"),COo=o("data2vec-audio"),MOo=o(" \u2014 "),iq=a("a"),EOo=o("Data2VecAudioForAudioFrameClassification"),yOo=o(" (Data2VecAudio model)"),wOo=l(),x2=a("li"),ice=a("strong"),AOo=o("unispeech-sat"),LOo=o(" \u2014 "),dq=a("a"),BOo=o("UniSpeechSatForAudioFrameClassification"),xOo=o(" (UniSpeechSat model)"),kOo=l(),k2=a("li"),dce=a("strong"),ROo=o("wav2vec2"),SOo=o(" \u2014 "),cq=a("a"),POo=o("Wav2Vec2ForAudioFrameClassification"),$Oo=o(" (Wav2Vec2 model)"),IOo=l(),R2=a("li"),cce=a("strong"),DOo=o("wavlm"),NOo=o(" \u2014 "),fq=a("a"),jOo=o("WavLMForAudioFrameClassification"),qOo=o(" (WavLM model)"),GOo=l(),S2=a("p"),OOo=o("The model is set in evaluation mode by default using "),fce=a("code"),XOo=o("model.eval()"),VOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mce=a("code"),zOo=o("model.train()"),WOo=l(),gce=a("p"),QOo=o("Examples:"),HOo=l(),f(Vy.$$.fragment),CRe=l(),Gd=a("h2"),P2=a("a"),hce=a("span"),f(zy.$$.fragment),UOo=l(),pce=a("span"),JOo=o("AutoModelForCTC"),MRe=l(),fr=a("div"),f(Wy.$$.fragment),YOo=l(),Od=a("p"),KOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),_ce=a("code"),ZOo=o("from_pretrained()"),eXo=o("class method or the "),uce=a("code"),oXo=o("from_config()"),rXo=o(`class
method.`),tXo=l(),Qy=a("p"),aXo=o("This class cannot be instantiated directly using "),bce=a("code"),nXo=o("__init__()"),sXo=o(" (throws an error)."),lXo=l(),nt=a("div"),f(Hy.$$.fragment),iXo=l(),vce=a("p"),dXo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),cXo=l(),Xd=a("p"),fXo=o(`Note:
Loading a model from its configuration file does `),Tce=a("strong"),mXo=o("not"),gXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Fce=a("code"),hXo=o("from_pretrained()"),pXo=o("to load the model weights."),_Xo=l(),Cce=a("p"),uXo=o("Examples:"),bXo=l(),f(Uy.$$.fragment),vXo=l(),Ke=a("div"),f(Jy.$$.fragment),TXo=l(),Mce=a("p"),FXo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),CXo=l(),sn=a("p"),MXo=o("The model class to instantiate is selected based on the "),Ece=a("code"),EXo=o("model_type"),yXo=o(` property of the config object (either
passed as an argument or loaded from `),yce=a("code"),wXo=o("pretrained_model_name_or_path"),AXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wce=a("code"),LXo=o("pretrained_model_name_or_path"),BXo=o(":"),xXo=l(),Re=a("ul"),$2=a("li"),Ace=a("strong"),kXo=o("data2vec-audio"),RXo=o(" \u2014 "),mq=a("a"),SXo=o("Data2VecAudioForCTC"),PXo=o(" (Data2VecAudio model)"),$Xo=l(),I2=a("li"),Lce=a("strong"),IXo=o("hubert"),DXo=o(" \u2014 "),gq=a("a"),NXo=o("HubertForCTC"),jXo=o(" (Hubert model)"),qXo=l(),D2=a("li"),Bce=a("strong"),GXo=o("sew"),OXo=o(" \u2014 "),hq=a("a"),XXo=o("SEWForCTC"),VXo=o(" (SEW model)"),zXo=l(),N2=a("li"),xce=a("strong"),WXo=o("sew-d"),QXo=o(" \u2014 "),pq=a("a"),HXo=o("SEWDForCTC"),UXo=o(" (SEW-D model)"),JXo=l(),j2=a("li"),kce=a("strong"),YXo=o("unispeech"),KXo=o(" \u2014 "),_q=a("a"),ZXo=o("UniSpeechForCTC"),eVo=o(" (UniSpeech model)"),oVo=l(),q2=a("li"),Rce=a("strong"),rVo=o("unispeech-sat"),tVo=o(" \u2014 "),uq=a("a"),aVo=o("UniSpeechSatForCTC"),nVo=o(" (UniSpeechSat model)"),sVo=l(),G2=a("li"),Sce=a("strong"),lVo=o("wav2vec2"),iVo=o(" \u2014 "),bq=a("a"),dVo=o("Wav2Vec2ForCTC"),cVo=o(" (Wav2Vec2 model)"),fVo=l(),O2=a("li"),Pce=a("strong"),mVo=o("wavlm"),gVo=o(" \u2014 "),vq=a("a"),hVo=o("WavLMForCTC"),pVo=o(" (WavLM model)"),_Vo=l(),X2=a("p"),uVo=o("The model is set in evaluation mode by default using "),$ce=a("code"),bVo=o("model.eval()"),vVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ice=a("code"),TVo=o("model.train()"),FVo=l(),Dce=a("p"),CVo=o("Examples:"),MVo=l(),f(Yy.$$.fragment),ERe=l(),Vd=a("h2"),V2=a("a"),Nce=a("span"),f(Ky.$$.fragment),EVo=l(),jce=a("span"),yVo=o("AutoModelForSpeechSeq2Seq"),yRe=l(),mr=a("div"),f(Zy.$$.fragment),wVo=l(),zd=a("p"),AVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),qce=a("code"),LVo=o("from_pretrained()"),BVo=o("class method or the "),Gce=a("code"),xVo=o("from_config()"),kVo=o(`class
method.`),RVo=l(),ew=a("p"),SVo=o("This class cannot be instantiated directly using "),Oce=a("code"),PVo=o("__init__()"),$Vo=o(" (throws an error)."),IVo=l(),st=a("div"),f(ow.$$.fragment),DVo=l(),Xce=a("p"),NVo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),jVo=l(),Wd=a("p"),qVo=o(`Note:
Loading a model from its configuration file does `),Vce=a("strong"),GVo=o("not"),OVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zce=a("code"),XVo=o("from_pretrained()"),VVo=o("to load the model weights."),zVo=l(),Wce=a("p"),WVo=o("Examples:"),QVo=l(),f(rw.$$.fragment),HVo=l(),Ze=a("div"),f(tw.$$.fragment),UVo=l(),Qce=a("p"),JVo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),YVo=l(),ln=a("p"),KVo=o("The model class to instantiate is selected based on the "),Hce=a("code"),ZVo=o("model_type"),ezo=o(` property of the config object (either
passed as an argument or loaded from `),Uce=a("code"),ozo=o("pretrained_model_name_or_path"),rzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jce=a("code"),tzo=o("pretrained_model_name_or_path"),azo=o(":"),nzo=l(),aw=a("ul"),z2=a("li"),Yce=a("strong"),szo=o("speech-encoder-decoder"),lzo=o(" \u2014 "),Tq=a("a"),izo=o("SpeechEncoderDecoderModel"),dzo=o(" (Speech Encoder decoder model)"),czo=l(),W2=a("li"),Kce=a("strong"),fzo=o("speech_to_text"),mzo=o(" \u2014 "),Fq=a("a"),gzo=o("Speech2TextForConditionalGeneration"),hzo=o(" (Speech2Text model)"),pzo=l(),Q2=a("p"),_zo=o("The model is set in evaluation mode by default using "),Zce=a("code"),uzo=o("model.eval()"),bzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),efe=a("code"),vzo=o("model.train()"),Tzo=l(),ofe=a("p"),Fzo=o("Examples:"),Czo=l(),f(nw.$$.fragment),wRe=l(),Qd=a("h2"),H2=a("a"),rfe=a("span"),f(sw.$$.fragment),Mzo=l(),tfe=a("span"),Ezo=o("AutoModelForAudioXVector"),ARe=l(),gr=a("div"),f(lw.$$.fragment),yzo=l(),Hd=a("p"),wzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),afe=a("code"),Azo=o("from_pretrained()"),Lzo=o("class method or the "),nfe=a("code"),Bzo=o("from_config()"),xzo=o(`class
method.`),kzo=l(),iw=a("p"),Rzo=o("This class cannot be instantiated directly using "),sfe=a("code"),Szo=o("__init__()"),Pzo=o(" (throws an error)."),$zo=l(),lt=a("div"),f(dw.$$.fragment),Izo=l(),lfe=a("p"),Dzo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Nzo=l(),Ud=a("p"),jzo=o(`Note:
Loading a model from its configuration file does `),ife=a("strong"),qzo=o("not"),Gzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dfe=a("code"),Ozo=o("from_pretrained()"),Xzo=o("to load the model weights."),Vzo=l(),cfe=a("p"),zzo=o("Examples:"),Wzo=l(),f(cw.$$.fragment),Qzo=l(),eo=a("div"),f(fw.$$.fragment),Hzo=l(),ffe=a("p"),Uzo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Jzo=l(),dn=a("p"),Yzo=o("The model class to instantiate is selected based on the "),mfe=a("code"),Kzo=o("model_type"),Zzo=o(` property of the config object (either
passed as an argument or loaded from `),gfe=a("code"),eWo=o("pretrained_model_name_or_path"),oWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hfe=a("code"),rWo=o("pretrained_model_name_or_path"),tWo=o(":"),aWo=l(),cn=a("ul"),U2=a("li"),pfe=a("strong"),nWo=o("data2vec-audio"),sWo=o(" \u2014 "),Cq=a("a"),lWo=o("Data2VecAudioForXVector"),iWo=o(" (Data2VecAudio model)"),dWo=l(),J2=a("li"),_fe=a("strong"),cWo=o("unispeech-sat"),fWo=o(" \u2014 "),Mq=a("a"),mWo=o("UniSpeechSatForXVector"),gWo=o(" (UniSpeechSat model)"),hWo=l(),Y2=a("li"),ufe=a("strong"),pWo=o("wav2vec2"),_Wo=o(" \u2014 "),Eq=a("a"),uWo=o("Wav2Vec2ForXVector"),bWo=o(" (Wav2Vec2 model)"),vWo=l(),K2=a("li"),bfe=a("strong"),TWo=o("wavlm"),FWo=o(" \u2014 "),yq=a("a"),CWo=o("WavLMForXVector"),MWo=o(" (WavLM model)"),EWo=l(),Z2=a("p"),yWo=o("The model is set in evaluation mode by default using "),vfe=a("code"),wWo=o("model.eval()"),AWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tfe=a("code"),LWo=o("model.train()"),BWo=l(),Ffe=a("p"),xWo=o("Examples:"),kWo=l(),f(mw.$$.fragment),LRe=l(),Jd=a("h2"),ev=a("a"),Cfe=a("span"),f(gw.$$.fragment),RWo=l(),Mfe=a("span"),SWo=o("AutoModelForMaskedImageModeling"),BRe=l(),hr=a("div"),f(hw.$$.fragment),PWo=l(),Yd=a("p"),$Wo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Efe=a("code"),IWo=o("from_pretrained()"),DWo=o("class method or the "),yfe=a("code"),NWo=o("from_config()"),jWo=o(`class
method.`),qWo=l(),pw=a("p"),GWo=o("This class cannot be instantiated directly using "),wfe=a("code"),OWo=o("__init__()"),XWo=o(" (throws an error)."),VWo=l(),it=a("div"),f(_w.$$.fragment),zWo=l(),Afe=a("p"),WWo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),QWo=l(),Kd=a("p"),HWo=o(`Note:
Loading a model from its configuration file does `),Lfe=a("strong"),UWo=o("not"),JWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Bfe=a("code"),YWo=o("from_pretrained()"),KWo=o("to load the model weights."),ZWo=l(),xfe=a("p"),eQo=o("Examples:"),oQo=l(),f(uw.$$.fragment),rQo=l(),oo=a("div"),f(bw.$$.fragment),tQo=l(),kfe=a("p"),aQo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),nQo=l(),fn=a("p"),sQo=o("The model class to instantiate is selected based on the "),Rfe=a("code"),lQo=o("model_type"),iQo=o(` property of the config object (either
passed as an argument or loaded from `),Sfe=a("code"),dQo=o("pretrained_model_name_or_path"),cQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pfe=a("code"),fQo=o("pretrained_model_name_or_path"),mQo=o(":"),gQo=l(),Zd=a("ul"),ov=a("li"),$fe=a("strong"),hQo=o("deit"),pQo=o(" \u2014 "),wq=a("a"),_Qo=o("DeiTForMaskedImageModeling"),uQo=o(" (DeiT model)"),bQo=l(),rv=a("li"),Ife=a("strong"),vQo=o("swin"),TQo=o(" \u2014 "),Aq=a("a"),FQo=o("SwinForMaskedImageModeling"),CQo=o(" (Swin model)"),MQo=l(),tv=a("li"),Dfe=a("strong"),EQo=o("vit"),yQo=o(" \u2014 "),Lq=a("a"),wQo=o("ViTForMaskedImageModeling"),AQo=o(" (ViT model)"),LQo=l(),av=a("p"),BQo=o("The model is set in evaluation mode by default using "),Nfe=a("code"),xQo=o("model.eval()"),kQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jfe=a("code"),RQo=o("model.train()"),SQo=l(),qfe=a("p"),PQo=o("Examples:"),$Qo=l(),f(vw.$$.fragment),xRe=l(),ec=a("h2"),nv=a("a"),Gfe=a("span"),f(Tw.$$.fragment),IQo=l(),Ofe=a("span"),DQo=o("AutoModelForObjectDetection"),kRe=l(),pr=a("div"),f(Fw.$$.fragment),NQo=l(),oc=a("p"),jQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Xfe=a("code"),qQo=o("from_pretrained()"),GQo=o("class method or the "),Vfe=a("code"),OQo=o("from_config()"),XQo=o(`class
method.`),VQo=l(),Cw=a("p"),zQo=o("This class cannot be instantiated directly using "),zfe=a("code"),WQo=o("__init__()"),QQo=o(" (throws an error)."),HQo=l(),dt=a("div"),f(Mw.$$.fragment),UQo=l(),Wfe=a("p"),JQo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),YQo=l(),rc=a("p"),KQo=o(`Note:
Loading a model from its configuration file does `),Qfe=a("strong"),ZQo=o("not"),eHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Hfe=a("code"),oHo=o("from_pretrained()"),rHo=o("to load the model weights."),tHo=l(),Ufe=a("p"),aHo=o("Examples:"),nHo=l(),f(Ew.$$.fragment),sHo=l(),ro=a("div"),f(yw.$$.fragment),lHo=l(),Jfe=a("p"),iHo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),dHo=l(),mn=a("p"),cHo=o("The model class to instantiate is selected based on the "),Yfe=a("code"),fHo=o("model_type"),mHo=o(` property of the config object (either
passed as an argument or loaded from `),Kfe=a("code"),gHo=o("pretrained_model_name_or_path"),hHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zfe=a("code"),pHo=o("pretrained_model_name_or_path"),_Ho=o(":"),uHo=l(),eme=a("ul"),sv=a("li"),ome=a("strong"),bHo=o("detr"),vHo=o(" \u2014 "),Bq=a("a"),THo=o("DetrForObjectDetection"),FHo=o(" (DETR model)"),CHo=l(),lv=a("p"),MHo=o("The model is set in evaluation mode by default using "),rme=a("code"),EHo=o("model.eval()"),yHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tme=a("code"),wHo=o("model.train()"),AHo=l(),ame=a("p"),LHo=o("Examples:"),BHo=l(),f(ww.$$.fragment),RRe=l(),tc=a("h2"),iv=a("a"),nme=a("span"),f(Aw.$$.fragment),xHo=l(),sme=a("span"),kHo=o("AutoModelForImageSegmentation"),SRe=l(),_r=a("div"),f(Lw.$$.fragment),RHo=l(),ac=a("p"),SHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),lme=a("code"),PHo=o("from_pretrained()"),$Ho=o("class method or the "),ime=a("code"),IHo=o("from_config()"),DHo=o(`class
method.`),NHo=l(),Bw=a("p"),jHo=o("This class cannot be instantiated directly using "),dme=a("code"),qHo=o("__init__()"),GHo=o(" (throws an error)."),OHo=l(),ct=a("div"),f(xw.$$.fragment),XHo=l(),cme=a("p"),VHo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),zHo=l(),nc=a("p"),WHo=o(`Note:
Loading a model from its configuration file does `),fme=a("strong"),QHo=o("not"),HHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mme=a("code"),UHo=o("from_pretrained()"),JHo=o("to load the model weights."),YHo=l(),gme=a("p"),KHo=o("Examples:"),ZHo=l(),f(kw.$$.fragment),eUo=l(),to=a("div"),f(Rw.$$.fragment),oUo=l(),hme=a("p"),rUo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),tUo=l(),gn=a("p"),aUo=o("The model class to instantiate is selected based on the "),pme=a("code"),nUo=o("model_type"),sUo=o(` property of the config object (either
passed as an argument or loaded from `),_me=a("code"),lUo=o("pretrained_model_name_or_path"),iUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ume=a("code"),dUo=o("pretrained_model_name_or_path"),cUo=o(":"),fUo=l(),bme=a("ul"),dv=a("li"),vme=a("strong"),mUo=o("detr"),gUo=o(" \u2014 "),xq=a("a"),hUo=o("DetrForSegmentation"),pUo=o(" (DETR model)"),_Uo=l(),cv=a("p"),uUo=o("The model is set in evaluation mode by default using "),Tme=a("code"),bUo=o("model.eval()"),vUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fme=a("code"),TUo=o("model.train()"),FUo=l(),Cme=a("p"),CUo=o("Examples:"),MUo=l(),f(Sw.$$.fragment),PRe=l(),sc=a("h2"),fv=a("a"),Mme=a("span"),f(Pw.$$.fragment),EUo=l(),Eme=a("span"),yUo=o("AutoModelForSemanticSegmentation"),$Re=l(),ur=a("div"),f($w.$$.fragment),wUo=l(),lc=a("p"),AUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),yme=a("code"),LUo=o("from_pretrained()"),BUo=o("class method or the "),wme=a("code"),xUo=o("from_config()"),kUo=o(`class
method.`),RUo=l(),Iw=a("p"),SUo=o("This class cannot be instantiated directly using "),Ame=a("code"),PUo=o("__init__()"),$Uo=o(" (throws an error)."),IUo=l(),ft=a("div"),f(Dw.$$.fragment),DUo=l(),Lme=a("p"),NUo=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),jUo=l(),ic=a("p"),qUo=o(`Note:
Loading a model from its configuration file does `),Bme=a("strong"),GUo=o("not"),OUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xme=a("code"),XUo=o("from_pretrained()"),VUo=o("to load the model weights."),zUo=l(),kme=a("p"),WUo=o("Examples:"),QUo=l(),f(Nw.$$.fragment),HUo=l(),ao=a("div"),f(jw.$$.fragment),UUo=l(),Rme=a("p"),JUo=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),YUo=l(),hn=a("p"),KUo=o("The model class to instantiate is selected based on the "),Sme=a("code"),ZUo=o("model_type"),eJo=o(` property of the config object (either
passed as an argument or loaded from `),Pme=a("code"),oJo=o("pretrained_model_name_or_path"),rJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$me=a("code"),tJo=o("pretrained_model_name_or_path"),aJo=o(":"),nJo=l(),dc=a("ul"),mv=a("li"),Ime=a("strong"),sJo=o("beit"),lJo=o(" \u2014 "),kq=a("a"),iJo=o("BeitForSemanticSegmentation"),dJo=o(" (BEiT model)"),cJo=l(),gv=a("li"),Dme=a("strong"),fJo=o("dpt"),mJo=o(" \u2014 "),Rq=a("a"),gJo=o("DPTForSemanticSegmentation"),hJo=o(" (DPT model)"),pJo=l(),hv=a("li"),Nme=a("strong"),_Jo=o("segformer"),uJo=o(" \u2014 "),Sq=a("a"),bJo=o("SegformerForSemanticSegmentation"),vJo=o(" (SegFormer model)"),TJo=l(),pv=a("p"),FJo=o("The model is set in evaluation mode by default using "),jme=a("code"),CJo=o("model.eval()"),MJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qme=a("code"),EJo=o("model.train()"),yJo=l(),Gme=a("p"),wJo=o("Examples:"),AJo=l(),f(qw.$$.fragment),IRe=l(),cc=a("h2"),_v=a("a"),Ome=a("span"),f(Gw.$$.fragment),LJo=l(),Xme=a("span"),BJo=o("AutoModelForInstanceSegmentation"),DRe=l(),br=a("div"),f(Ow.$$.fragment),xJo=l(),fc=a("p"),kJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),Vme=a("code"),RJo=o("from_pretrained()"),SJo=o("class method or the "),zme=a("code"),PJo=o("from_config()"),$Jo=o(`class
method.`),IJo=l(),Xw=a("p"),DJo=o("This class cannot be instantiated directly using "),Wme=a("code"),NJo=o("__init__()"),jJo=o(" (throws an error)."),qJo=l(),mt=a("div"),f(Vw.$$.fragment),GJo=l(),Qme=a("p"),OJo=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),XJo=l(),mc=a("p"),VJo=o(`Note:
Loading a model from its configuration file does `),Hme=a("strong"),zJo=o("not"),WJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ume=a("code"),QJo=o("from_pretrained()"),HJo=o("to load the model weights."),UJo=l(),Jme=a("p"),JJo=o("Examples:"),YJo=l(),f(zw.$$.fragment),KJo=l(),no=a("div"),f(Ww.$$.fragment),ZJo=l(),Yme=a("p"),eYo=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),oYo=l(),pn=a("p"),rYo=o("The model class to instantiate is selected based on the "),Kme=a("code"),tYo=o("model_type"),aYo=o(` property of the config object (either
passed as an argument or loaded from `),Zme=a("code"),nYo=o("pretrained_model_name_or_path"),sYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ege=a("code"),lYo=o("pretrained_model_name_or_path"),iYo=o(":"),dYo=l(),oge=a("ul"),uv=a("li"),rge=a("strong"),cYo=o("maskformer"),fYo=o(" \u2014 "),Pq=a("a"),mYo=o("MaskFormerForInstanceSegmentation"),gYo=o(" (MaskFormer model)"),hYo=l(),bv=a("p"),pYo=o("The model is set in evaluation mode by default using "),tge=a("code"),_Yo=o("model.eval()"),uYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),age=a("code"),bYo=o("model.train()"),vYo=l(),nge=a("p"),TYo=o("Examples:"),FYo=l(),f(Qw.$$.fragment),NRe=l(),gc=a("h2"),vv=a("a"),sge=a("span"),f(Hw.$$.fragment),CYo=l(),lge=a("span"),MYo=o("TFAutoModel"),jRe=l(),vr=a("div"),f(Uw.$$.fragment),EYo=l(),hc=a("p"),yYo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),ige=a("code"),wYo=o("from_pretrained()"),AYo=o("class method or the "),dge=a("code"),LYo=o("from_config()"),BYo=o(`class
method.`),xYo=l(),Jw=a("p"),kYo=o("This class cannot be instantiated directly using "),cge=a("code"),RYo=o("__init__()"),SYo=o(" (throws an error)."),PYo=l(),gt=a("div"),f(Yw.$$.fragment),$Yo=l(),fge=a("p"),IYo=o("Instantiates one of the base model classes of the library from a configuration."),DYo=l(),pc=a("p"),NYo=o(`Note:
Loading a model from its configuration file does `),mge=a("strong"),jYo=o("not"),qYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gge=a("code"),GYo=o("from_pretrained()"),OYo=o("to load the model weights."),XYo=l(),hge=a("p"),VYo=o("Examples:"),zYo=l(),f(Kw.$$.fragment),WYo=l(),ho=a("div"),f(Zw.$$.fragment),QYo=l(),pge=a("p"),HYo=o("Instantiate one of the base model classes of the library from a pretrained model."),UYo=l(),_n=a("p"),JYo=o("The model class to instantiate is selected based on the "),_ge=a("code"),YYo=o("model_type"),KYo=o(` property of the config object (either
passed as an argument or loaded from `),uge=a("code"),ZYo=o("pretrained_model_name_or_path"),eKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bge=a("code"),oKo=o("pretrained_model_name_or_path"),rKo=o(":"),tKo=l(),B=a("ul"),Tv=a("li"),vge=a("strong"),aKo=o("albert"),nKo=o(" \u2014 "),$q=a("a"),sKo=o("TFAlbertModel"),lKo=o(" (ALBERT model)"),iKo=l(),Fv=a("li"),Tge=a("strong"),dKo=o("bart"),cKo=o(" \u2014 "),Iq=a("a"),fKo=o("TFBartModel"),mKo=o(" (BART model)"),gKo=l(),Cv=a("li"),Fge=a("strong"),hKo=o("bert"),pKo=o(" \u2014 "),Dq=a("a"),_Ko=o("TFBertModel"),uKo=o(" (BERT model)"),bKo=l(),Mv=a("li"),Cge=a("strong"),vKo=o("blenderbot"),TKo=o(" \u2014 "),Nq=a("a"),FKo=o("TFBlenderbotModel"),CKo=o(" (Blenderbot model)"),MKo=l(),Ev=a("li"),Mge=a("strong"),EKo=o("blenderbot-small"),yKo=o(" \u2014 "),jq=a("a"),wKo=o("TFBlenderbotSmallModel"),AKo=o(" (BlenderbotSmall model)"),LKo=l(),yv=a("li"),Ege=a("strong"),BKo=o("camembert"),xKo=o(" \u2014 "),qq=a("a"),kKo=o("TFCamembertModel"),RKo=o(" (CamemBERT model)"),SKo=l(),wv=a("li"),yge=a("strong"),PKo=o("clip"),$Ko=o(" \u2014 "),Gq=a("a"),IKo=o("TFCLIPModel"),DKo=o(" (CLIP model)"),NKo=l(),Av=a("li"),wge=a("strong"),jKo=o("convbert"),qKo=o(" \u2014 "),Oq=a("a"),GKo=o("TFConvBertModel"),OKo=o(" (ConvBERT model)"),XKo=l(),Lv=a("li"),Age=a("strong"),VKo=o("convnext"),zKo=o(" \u2014 "),Xq=a("a"),WKo=o("TFConvNextModel"),QKo=o(" (ConvNext model)"),HKo=l(),Bv=a("li"),Lge=a("strong"),UKo=o("ctrl"),JKo=o(" \u2014 "),Vq=a("a"),YKo=o("TFCTRLModel"),KKo=o(" (CTRL model)"),ZKo=l(),xv=a("li"),Bge=a("strong"),eZo=o("deberta"),oZo=o(" \u2014 "),zq=a("a"),rZo=o("TFDebertaModel"),tZo=o(" (DeBERTa model)"),aZo=l(),kv=a("li"),xge=a("strong"),nZo=o("deberta-v2"),sZo=o(" \u2014 "),Wq=a("a"),lZo=o("TFDebertaV2Model"),iZo=o(" (DeBERTa-v2 model)"),dZo=l(),Rv=a("li"),kge=a("strong"),cZo=o("distilbert"),fZo=o(" \u2014 "),Qq=a("a"),mZo=o("TFDistilBertModel"),gZo=o(" (DistilBERT model)"),hZo=l(),Sv=a("li"),Rge=a("strong"),pZo=o("dpr"),_Zo=o(" \u2014 "),Hq=a("a"),uZo=o("TFDPRQuestionEncoder"),bZo=o(" (DPR model)"),vZo=l(),Pv=a("li"),Sge=a("strong"),TZo=o("electra"),FZo=o(" \u2014 "),Uq=a("a"),CZo=o("TFElectraModel"),MZo=o(" (ELECTRA model)"),EZo=l(),$v=a("li"),Pge=a("strong"),yZo=o("flaubert"),wZo=o(" \u2014 "),Jq=a("a"),AZo=o("TFFlaubertModel"),LZo=o(" (FlauBERT model)"),BZo=l(),Gs=a("li"),$ge=a("strong"),xZo=o("funnel"),kZo=o(" \u2014 "),Yq=a("a"),RZo=o("TFFunnelModel"),SZo=o(" or "),Kq=a("a"),PZo=o("TFFunnelBaseModel"),$Zo=o(" (Funnel Transformer model)"),IZo=l(),Iv=a("li"),Ige=a("strong"),DZo=o("gpt2"),NZo=o(" \u2014 "),Zq=a("a"),jZo=o("TFGPT2Model"),qZo=o(" (OpenAI GPT-2 model)"),GZo=l(),Dv=a("li"),Dge=a("strong"),OZo=o("gptj"),XZo=o(" \u2014 "),eG=a("a"),VZo=o("TFGPTJModel"),zZo=o(" (GPT-J model)"),WZo=l(),Nv=a("li"),Nge=a("strong"),QZo=o("hubert"),HZo=o(" \u2014 "),oG=a("a"),UZo=o("TFHubertModel"),JZo=o(" (Hubert model)"),YZo=l(),jv=a("li"),jge=a("strong"),KZo=o("layoutlm"),ZZo=o(" \u2014 "),rG=a("a"),eer=o("TFLayoutLMModel"),oer=o(" (LayoutLM model)"),rer=l(),qv=a("li"),qge=a("strong"),ter=o("led"),aer=o(" \u2014 "),tG=a("a"),ner=o("TFLEDModel"),ser=o(" (LED model)"),ler=l(),Gv=a("li"),Gge=a("strong"),ier=o("longformer"),der=o(" \u2014 "),aG=a("a"),cer=o("TFLongformerModel"),fer=o(" (Longformer model)"),mer=l(),Ov=a("li"),Oge=a("strong"),ger=o("lxmert"),her=o(" \u2014 "),nG=a("a"),per=o("TFLxmertModel"),_er=o(" (LXMERT model)"),uer=l(),Xv=a("li"),Xge=a("strong"),ber=o("marian"),ver=o(" \u2014 "),sG=a("a"),Ter=o("TFMarianModel"),Fer=o(" (Marian model)"),Cer=l(),Vv=a("li"),Vge=a("strong"),Mer=o("mbart"),Eer=o(" \u2014 "),lG=a("a"),yer=o("TFMBartModel"),wer=o(" (mBART model)"),Aer=l(),zv=a("li"),zge=a("strong"),Ler=o("mobilebert"),Ber=o(" \u2014 "),iG=a("a"),xer=o("TFMobileBertModel"),ker=o(" (MobileBERT model)"),Rer=l(),Wv=a("li"),Wge=a("strong"),Ser=o("mpnet"),Per=o(" \u2014 "),dG=a("a"),$er=o("TFMPNetModel"),Ier=o(" (MPNet model)"),Der=l(),Qv=a("li"),Qge=a("strong"),Ner=o("mt5"),jer=o(" \u2014 "),cG=a("a"),qer=o("TFMT5Model"),Ger=o(" (mT5 model)"),Oer=l(),Hv=a("li"),Hge=a("strong"),Xer=o("openai-gpt"),Ver=o(" \u2014 "),fG=a("a"),zer=o("TFOpenAIGPTModel"),Wer=o(" (OpenAI GPT model)"),Qer=l(),Uv=a("li"),Uge=a("strong"),Her=o("pegasus"),Uer=o(" \u2014 "),mG=a("a"),Jer=o("TFPegasusModel"),Yer=o(" (Pegasus model)"),Ker=l(),Jv=a("li"),Jge=a("strong"),Zer=o("rembert"),eor=o(" \u2014 "),gG=a("a"),oor=o("TFRemBertModel"),ror=o(" (RemBERT model)"),tor=l(),Yv=a("li"),Yge=a("strong"),aor=o("roberta"),nor=o(" \u2014 "),hG=a("a"),sor=o("TFRobertaModel"),lor=o(" (RoBERTa model)"),ior=l(),Kv=a("li"),Kge=a("strong"),dor=o("roformer"),cor=o(" \u2014 "),pG=a("a"),mor=o("TFRoFormerModel"),gor=o(" (RoFormer model)"),hor=l(),Zv=a("li"),Zge=a("strong"),por=o("speech_to_text"),_or=o(" \u2014 "),_G=a("a"),uor=o("TFSpeech2TextModel"),bor=o(" (Speech2Text model)"),vor=l(),e6=a("li"),ehe=a("strong"),Tor=o("t5"),For=o(" \u2014 "),uG=a("a"),Cor=o("TFT5Model"),Mor=o(" (T5 model)"),Eor=l(),o6=a("li"),ohe=a("strong"),yor=o("tapas"),wor=o(" \u2014 "),bG=a("a"),Aor=o("TFTapasModel"),Lor=o(" (TAPAS model)"),Bor=l(),r6=a("li"),rhe=a("strong"),xor=o("transfo-xl"),kor=o(" \u2014 "),vG=a("a"),Ror=o("TFTransfoXLModel"),Sor=o(" (Transformer-XL model)"),Por=l(),t6=a("li"),the=a("strong"),$or=o("vit"),Ior=o(" \u2014 "),TG=a("a"),Dor=o("TFViTModel"),Nor=o(" (ViT model)"),jor=l(),a6=a("li"),ahe=a("strong"),qor=o("wav2vec2"),Gor=o(" \u2014 "),FG=a("a"),Oor=o("TFWav2Vec2Model"),Xor=o(" (Wav2Vec2 model)"),Vor=l(),n6=a("li"),nhe=a("strong"),zor=o("xlm"),Wor=o(" \u2014 "),CG=a("a"),Qor=o("TFXLMModel"),Hor=o(" (XLM model)"),Uor=l(),s6=a("li"),she=a("strong"),Jor=o("xlm-roberta"),Yor=o(" \u2014 "),MG=a("a"),Kor=o("TFXLMRobertaModel"),Zor=o(" (XLM-RoBERTa model)"),err=l(),l6=a("li"),lhe=a("strong"),orr=o("xlnet"),rrr=o(" \u2014 "),EG=a("a"),trr=o("TFXLNetModel"),arr=o(" (XLNet model)"),nrr=l(),ihe=a("p"),srr=o("Examples:"),lrr=l(),f(eA.$$.fragment),qRe=l(),_c=a("h2"),i6=a("a"),dhe=a("span"),f(oA.$$.fragment),irr=l(),che=a("span"),drr=o("TFAutoModelForPreTraining"),GRe=l(),Tr=a("div"),f(rA.$$.fragment),crr=l(),uc=a("p"),frr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),fhe=a("code"),mrr=o("from_pretrained()"),grr=o("class method or the "),mhe=a("code"),hrr=o("from_config()"),prr=o(`class
method.`),_rr=l(),tA=a("p"),urr=o("This class cannot be instantiated directly using "),ghe=a("code"),brr=o("__init__()"),vrr=o(" (throws an error)."),Trr=l(),ht=a("div"),f(aA.$$.fragment),Frr=l(),hhe=a("p"),Crr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Mrr=l(),bc=a("p"),Err=o(`Note:
Loading a model from its configuration file does `),phe=a("strong"),yrr=o("not"),wrr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_he=a("code"),Arr=o("from_pretrained()"),Lrr=o("to load the model weights."),Brr=l(),uhe=a("p"),xrr=o("Examples:"),krr=l(),f(nA.$$.fragment),Rrr=l(),po=a("div"),f(sA.$$.fragment),Srr=l(),bhe=a("p"),Prr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),$rr=l(),un=a("p"),Irr=o("The model class to instantiate is selected based on the "),vhe=a("code"),Drr=o("model_type"),Nrr=o(` property of the config object (either
passed as an argument or loaded from `),The=a("code"),jrr=o("pretrained_model_name_or_path"),qrr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fhe=a("code"),Grr=o("pretrained_model_name_or_path"),Orr=o(":"),Xrr=l(),H=a("ul"),d6=a("li"),Che=a("strong"),Vrr=o("albert"),zrr=o(" \u2014 "),yG=a("a"),Wrr=o("TFAlbertForPreTraining"),Qrr=o(" (ALBERT model)"),Hrr=l(),c6=a("li"),Mhe=a("strong"),Urr=o("bart"),Jrr=o(" \u2014 "),wG=a("a"),Yrr=o("TFBartForConditionalGeneration"),Krr=o(" (BART model)"),Zrr=l(),f6=a("li"),Ehe=a("strong"),etr=o("bert"),otr=o(" \u2014 "),AG=a("a"),rtr=o("TFBertForPreTraining"),ttr=o(" (BERT model)"),atr=l(),m6=a("li"),yhe=a("strong"),ntr=o("camembert"),str=o(" \u2014 "),LG=a("a"),ltr=o("TFCamembertForMaskedLM"),itr=o(" (CamemBERT model)"),dtr=l(),g6=a("li"),whe=a("strong"),ctr=o("ctrl"),ftr=o(" \u2014 "),BG=a("a"),mtr=o("TFCTRLLMHeadModel"),gtr=o(" (CTRL model)"),htr=l(),h6=a("li"),Ahe=a("strong"),ptr=o("distilbert"),_tr=o(" \u2014 "),xG=a("a"),utr=o("TFDistilBertForMaskedLM"),btr=o(" (DistilBERT model)"),vtr=l(),p6=a("li"),Lhe=a("strong"),Ttr=o("electra"),Ftr=o(" \u2014 "),kG=a("a"),Ctr=o("TFElectraForPreTraining"),Mtr=o(" (ELECTRA model)"),Etr=l(),_6=a("li"),Bhe=a("strong"),ytr=o("flaubert"),wtr=o(" \u2014 "),RG=a("a"),Atr=o("TFFlaubertWithLMHeadModel"),Ltr=o(" (FlauBERT model)"),Btr=l(),u6=a("li"),xhe=a("strong"),xtr=o("funnel"),ktr=o(" \u2014 "),SG=a("a"),Rtr=o("TFFunnelForPreTraining"),Str=o(" (Funnel Transformer model)"),Ptr=l(),b6=a("li"),khe=a("strong"),$tr=o("gpt2"),Itr=o(" \u2014 "),PG=a("a"),Dtr=o("TFGPT2LMHeadModel"),Ntr=o(" (OpenAI GPT-2 model)"),jtr=l(),v6=a("li"),Rhe=a("strong"),qtr=o("layoutlm"),Gtr=o(" \u2014 "),$G=a("a"),Otr=o("TFLayoutLMForMaskedLM"),Xtr=o(" (LayoutLM model)"),Vtr=l(),T6=a("li"),She=a("strong"),ztr=o("lxmert"),Wtr=o(" \u2014 "),IG=a("a"),Qtr=o("TFLxmertForPreTraining"),Htr=o(" (LXMERT model)"),Utr=l(),F6=a("li"),Phe=a("strong"),Jtr=o("mobilebert"),Ytr=o(" \u2014 "),DG=a("a"),Ktr=o("TFMobileBertForPreTraining"),Ztr=o(" (MobileBERT model)"),ear=l(),C6=a("li"),$he=a("strong"),oar=o("mpnet"),rar=o(" \u2014 "),NG=a("a"),tar=o("TFMPNetForMaskedLM"),aar=o(" (MPNet model)"),nar=l(),M6=a("li"),Ihe=a("strong"),sar=o("openai-gpt"),lar=o(" \u2014 "),jG=a("a"),iar=o("TFOpenAIGPTLMHeadModel"),dar=o(" (OpenAI GPT model)"),car=l(),E6=a("li"),Dhe=a("strong"),far=o("roberta"),mar=o(" \u2014 "),qG=a("a"),gar=o("TFRobertaForMaskedLM"),har=o(" (RoBERTa model)"),par=l(),y6=a("li"),Nhe=a("strong"),_ar=o("t5"),uar=o(" \u2014 "),GG=a("a"),bar=o("TFT5ForConditionalGeneration"),Tar=o(" (T5 model)"),Far=l(),w6=a("li"),jhe=a("strong"),Car=o("tapas"),Mar=o(" \u2014 "),OG=a("a"),Ear=o("TFTapasForMaskedLM"),yar=o(" (TAPAS model)"),war=l(),A6=a("li"),qhe=a("strong"),Aar=o("transfo-xl"),Lar=o(" \u2014 "),XG=a("a"),Bar=o("TFTransfoXLLMHeadModel"),xar=o(" (Transformer-XL model)"),kar=l(),L6=a("li"),Ghe=a("strong"),Rar=o("xlm"),Sar=o(" \u2014 "),VG=a("a"),Par=o("TFXLMWithLMHeadModel"),$ar=o(" (XLM model)"),Iar=l(),B6=a("li"),Ohe=a("strong"),Dar=o("xlm-roberta"),Nar=o(" \u2014 "),zG=a("a"),jar=o("TFXLMRobertaForMaskedLM"),qar=o(" (XLM-RoBERTa model)"),Gar=l(),x6=a("li"),Xhe=a("strong"),Oar=o("xlnet"),Xar=o(" \u2014 "),WG=a("a"),Var=o("TFXLNetLMHeadModel"),zar=o(" (XLNet model)"),War=l(),Vhe=a("p"),Qar=o("Examples:"),Har=l(),f(lA.$$.fragment),ORe=l(),vc=a("h2"),k6=a("a"),zhe=a("span"),f(iA.$$.fragment),Uar=l(),Whe=a("span"),Jar=o("TFAutoModelForCausalLM"),XRe=l(),Fr=a("div"),f(dA.$$.fragment),Yar=l(),Tc=a("p"),Kar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Qhe=a("code"),Zar=o("from_pretrained()"),enr=o("class method or the "),Hhe=a("code"),onr=o("from_config()"),rnr=o(`class
method.`),tnr=l(),cA=a("p"),anr=o("This class cannot be instantiated directly using "),Uhe=a("code"),nnr=o("__init__()"),snr=o(" (throws an error)."),lnr=l(),pt=a("div"),f(fA.$$.fragment),inr=l(),Jhe=a("p"),dnr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),cnr=l(),Fc=a("p"),fnr=o(`Note:
Loading a model from its configuration file does `),Yhe=a("strong"),mnr=o("not"),gnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Khe=a("code"),hnr=o("from_pretrained()"),pnr=o("to load the model weights."),_nr=l(),Zhe=a("p"),unr=o("Examples:"),bnr=l(),f(mA.$$.fragment),vnr=l(),_o=a("div"),f(gA.$$.fragment),Tnr=l(),epe=a("p"),Fnr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Cnr=l(),bn=a("p"),Mnr=o("The model class to instantiate is selected based on the "),ope=a("code"),Enr=o("model_type"),ynr=o(` property of the config object (either
passed as an argument or loaded from `),rpe=a("code"),wnr=o("pretrained_model_name_or_path"),Anr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tpe=a("code"),Lnr=o("pretrained_model_name_or_path"),Bnr=o(":"),xnr=l(),ce=a("ul"),R6=a("li"),ape=a("strong"),knr=o("bert"),Rnr=o(" \u2014 "),QG=a("a"),Snr=o("TFBertLMHeadModel"),Pnr=o(" (BERT model)"),$nr=l(),S6=a("li"),npe=a("strong"),Inr=o("camembert"),Dnr=o(" \u2014 "),HG=a("a"),Nnr=o("TFCamembertForCausalLM"),jnr=o(" (CamemBERT model)"),qnr=l(),P6=a("li"),spe=a("strong"),Gnr=o("ctrl"),Onr=o(" \u2014 "),UG=a("a"),Xnr=o("TFCTRLLMHeadModel"),Vnr=o(" (CTRL model)"),znr=l(),$6=a("li"),lpe=a("strong"),Wnr=o("gpt2"),Qnr=o(" \u2014 "),JG=a("a"),Hnr=o("TFGPT2LMHeadModel"),Unr=o(" (OpenAI GPT-2 model)"),Jnr=l(),I6=a("li"),ipe=a("strong"),Ynr=o("gptj"),Knr=o(" \u2014 "),YG=a("a"),Znr=o("TFGPTJForCausalLM"),esr=o(" (GPT-J model)"),osr=l(),D6=a("li"),dpe=a("strong"),rsr=o("openai-gpt"),tsr=o(" \u2014 "),KG=a("a"),asr=o("TFOpenAIGPTLMHeadModel"),nsr=o(" (OpenAI GPT model)"),ssr=l(),N6=a("li"),cpe=a("strong"),lsr=o("rembert"),isr=o(" \u2014 "),ZG=a("a"),dsr=o("TFRemBertForCausalLM"),csr=o(" (RemBERT model)"),fsr=l(),j6=a("li"),fpe=a("strong"),msr=o("roberta"),gsr=o(" \u2014 "),eO=a("a"),hsr=o("TFRobertaForCausalLM"),psr=o(" (RoBERTa model)"),_sr=l(),q6=a("li"),mpe=a("strong"),usr=o("roformer"),bsr=o(" \u2014 "),oO=a("a"),vsr=o("TFRoFormerForCausalLM"),Tsr=o(" (RoFormer model)"),Fsr=l(),G6=a("li"),gpe=a("strong"),Csr=o("transfo-xl"),Msr=o(" \u2014 "),rO=a("a"),Esr=o("TFTransfoXLLMHeadModel"),ysr=o(" (Transformer-XL model)"),wsr=l(),O6=a("li"),hpe=a("strong"),Asr=o("xlm"),Lsr=o(" \u2014 "),tO=a("a"),Bsr=o("TFXLMWithLMHeadModel"),xsr=o(" (XLM model)"),ksr=l(),X6=a("li"),ppe=a("strong"),Rsr=o("xlnet"),Ssr=o(" \u2014 "),aO=a("a"),Psr=o("TFXLNetLMHeadModel"),$sr=o(" (XLNet model)"),Isr=l(),_pe=a("p"),Dsr=o("Examples:"),Nsr=l(),f(hA.$$.fragment),VRe=l(),Cc=a("h2"),V6=a("a"),upe=a("span"),f(pA.$$.fragment),jsr=l(),bpe=a("span"),qsr=o("TFAutoModelForImageClassification"),zRe=l(),Cr=a("div"),f(_A.$$.fragment),Gsr=l(),Mc=a("p"),Osr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),vpe=a("code"),Xsr=o("from_pretrained()"),Vsr=o("class method or the "),Tpe=a("code"),zsr=o("from_config()"),Wsr=o(`class
method.`),Qsr=l(),uA=a("p"),Hsr=o("This class cannot be instantiated directly using "),Fpe=a("code"),Usr=o("__init__()"),Jsr=o(" (throws an error)."),Ysr=l(),_t=a("div"),f(bA.$$.fragment),Ksr=l(),Cpe=a("p"),Zsr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),elr=l(),Ec=a("p"),olr=o(`Note:
Loading a model from its configuration file does `),Mpe=a("strong"),rlr=o("not"),tlr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Epe=a("code"),alr=o("from_pretrained()"),nlr=o("to load the model weights."),slr=l(),ype=a("p"),llr=o("Examples:"),ilr=l(),f(vA.$$.fragment),dlr=l(),uo=a("div"),f(TA.$$.fragment),clr=l(),wpe=a("p"),flr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),mlr=l(),vn=a("p"),glr=o("The model class to instantiate is selected based on the "),Ape=a("code"),hlr=o("model_type"),plr=o(` property of the config object (either
passed as an argument or loaded from `),Lpe=a("code"),_lr=o("pretrained_model_name_or_path"),ulr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bpe=a("code"),blr=o("pretrained_model_name_or_path"),vlr=o(":"),Tlr=l(),FA=a("ul"),z6=a("li"),xpe=a("strong"),Flr=o("convnext"),Clr=o(" \u2014 "),nO=a("a"),Mlr=o("TFConvNextForImageClassification"),Elr=o(" (ConvNext model)"),ylr=l(),W6=a("li"),kpe=a("strong"),wlr=o("vit"),Alr=o(" \u2014 "),sO=a("a"),Llr=o("TFViTForImageClassification"),Blr=o(" (ViT model)"),xlr=l(),Rpe=a("p"),klr=o("Examples:"),Rlr=l(),f(CA.$$.fragment),WRe=l(),yc=a("h2"),Q6=a("a"),Spe=a("span"),f(MA.$$.fragment),Slr=l(),Ppe=a("span"),Plr=o("TFAutoModelForMaskedLM"),QRe=l(),Mr=a("div"),f(EA.$$.fragment),$lr=l(),wc=a("p"),Ilr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),$pe=a("code"),Dlr=o("from_pretrained()"),Nlr=o("class method or the "),Ipe=a("code"),jlr=o("from_config()"),qlr=o(`class
method.`),Glr=l(),yA=a("p"),Olr=o("This class cannot be instantiated directly using "),Dpe=a("code"),Xlr=o("__init__()"),Vlr=o(" (throws an error)."),zlr=l(),ut=a("div"),f(wA.$$.fragment),Wlr=l(),Npe=a("p"),Qlr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Hlr=l(),Ac=a("p"),Ulr=o(`Note:
Loading a model from its configuration file does `),jpe=a("strong"),Jlr=o("not"),Ylr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qpe=a("code"),Klr=o("from_pretrained()"),Zlr=o("to load the model weights."),eir=l(),Gpe=a("p"),oir=o("Examples:"),rir=l(),f(AA.$$.fragment),tir=l(),bo=a("div"),f(LA.$$.fragment),air=l(),Ope=a("p"),nir=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),sir=l(),Tn=a("p"),lir=o("The model class to instantiate is selected based on the "),Xpe=a("code"),iir=o("model_type"),dir=o(` property of the config object (either
passed as an argument or loaded from `),Vpe=a("code"),cir=o("pretrained_model_name_or_path"),fir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zpe=a("code"),mir=o("pretrained_model_name_or_path"),gir=o(":"),hir=l(),J=a("ul"),H6=a("li"),Wpe=a("strong"),pir=o("albert"),_ir=o(" \u2014 "),lO=a("a"),uir=o("TFAlbertForMaskedLM"),bir=o(" (ALBERT model)"),vir=l(),U6=a("li"),Qpe=a("strong"),Tir=o("bert"),Fir=o(" \u2014 "),iO=a("a"),Cir=o("TFBertForMaskedLM"),Mir=o(" (BERT model)"),Eir=l(),J6=a("li"),Hpe=a("strong"),yir=o("camembert"),wir=o(" \u2014 "),dO=a("a"),Air=o("TFCamembertForMaskedLM"),Lir=o(" (CamemBERT model)"),Bir=l(),Y6=a("li"),Upe=a("strong"),xir=o("convbert"),kir=o(" \u2014 "),cO=a("a"),Rir=o("TFConvBertForMaskedLM"),Sir=o(" (ConvBERT model)"),Pir=l(),K6=a("li"),Jpe=a("strong"),$ir=o("deberta"),Iir=o(" \u2014 "),fO=a("a"),Dir=o("TFDebertaForMaskedLM"),Nir=o(" (DeBERTa model)"),jir=l(),Z6=a("li"),Ype=a("strong"),qir=o("deberta-v2"),Gir=o(" \u2014 "),mO=a("a"),Oir=o("TFDebertaV2ForMaskedLM"),Xir=o(" (DeBERTa-v2 model)"),Vir=l(),eT=a("li"),Kpe=a("strong"),zir=o("distilbert"),Wir=o(" \u2014 "),gO=a("a"),Qir=o("TFDistilBertForMaskedLM"),Hir=o(" (DistilBERT model)"),Uir=l(),oT=a("li"),Zpe=a("strong"),Jir=o("electra"),Yir=o(" \u2014 "),hO=a("a"),Kir=o("TFElectraForMaskedLM"),Zir=o(" (ELECTRA model)"),edr=l(),rT=a("li"),e_e=a("strong"),odr=o("flaubert"),rdr=o(" \u2014 "),pO=a("a"),tdr=o("TFFlaubertWithLMHeadModel"),adr=o(" (FlauBERT model)"),ndr=l(),tT=a("li"),o_e=a("strong"),sdr=o("funnel"),ldr=o(" \u2014 "),_O=a("a"),idr=o("TFFunnelForMaskedLM"),ddr=o(" (Funnel Transformer model)"),cdr=l(),aT=a("li"),r_e=a("strong"),fdr=o("layoutlm"),mdr=o(" \u2014 "),uO=a("a"),gdr=o("TFLayoutLMForMaskedLM"),hdr=o(" (LayoutLM model)"),pdr=l(),nT=a("li"),t_e=a("strong"),_dr=o("longformer"),udr=o(" \u2014 "),bO=a("a"),bdr=o("TFLongformerForMaskedLM"),vdr=o(" (Longformer model)"),Tdr=l(),sT=a("li"),a_e=a("strong"),Fdr=o("mobilebert"),Cdr=o(" \u2014 "),vO=a("a"),Mdr=o("TFMobileBertForMaskedLM"),Edr=o(" (MobileBERT model)"),ydr=l(),lT=a("li"),n_e=a("strong"),wdr=o("mpnet"),Adr=o(" \u2014 "),TO=a("a"),Ldr=o("TFMPNetForMaskedLM"),Bdr=o(" (MPNet model)"),xdr=l(),iT=a("li"),s_e=a("strong"),kdr=o("rembert"),Rdr=o(" \u2014 "),FO=a("a"),Sdr=o("TFRemBertForMaskedLM"),Pdr=o(" (RemBERT model)"),$dr=l(),dT=a("li"),l_e=a("strong"),Idr=o("roberta"),Ddr=o(" \u2014 "),CO=a("a"),Ndr=o("TFRobertaForMaskedLM"),jdr=o(" (RoBERTa model)"),qdr=l(),cT=a("li"),i_e=a("strong"),Gdr=o("roformer"),Odr=o(" \u2014 "),MO=a("a"),Xdr=o("TFRoFormerForMaskedLM"),Vdr=o(" (RoFormer model)"),zdr=l(),fT=a("li"),d_e=a("strong"),Wdr=o("tapas"),Qdr=o(" \u2014 "),EO=a("a"),Hdr=o("TFTapasForMaskedLM"),Udr=o(" (TAPAS model)"),Jdr=l(),mT=a("li"),c_e=a("strong"),Ydr=o("xlm"),Kdr=o(" \u2014 "),yO=a("a"),Zdr=o("TFXLMWithLMHeadModel"),ecr=o(" (XLM model)"),ocr=l(),gT=a("li"),f_e=a("strong"),rcr=o("xlm-roberta"),tcr=o(" \u2014 "),wO=a("a"),acr=o("TFXLMRobertaForMaskedLM"),ncr=o(" (XLM-RoBERTa model)"),scr=l(),m_e=a("p"),lcr=o("Examples:"),icr=l(),f(BA.$$.fragment),HRe=l(),Lc=a("h2"),hT=a("a"),g_e=a("span"),f(xA.$$.fragment),dcr=l(),h_e=a("span"),ccr=o("TFAutoModelForSeq2SeqLM"),URe=l(),Er=a("div"),f(kA.$$.fragment),fcr=l(),Bc=a("p"),mcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),p_e=a("code"),gcr=o("from_pretrained()"),hcr=o("class method or the "),__e=a("code"),pcr=o("from_config()"),_cr=o(`class
method.`),ucr=l(),RA=a("p"),bcr=o("This class cannot be instantiated directly using "),u_e=a("code"),vcr=o("__init__()"),Tcr=o(" (throws an error)."),Fcr=l(),bt=a("div"),f(SA.$$.fragment),Ccr=l(),b_e=a("p"),Mcr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Ecr=l(),xc=a("p"),ycr=o(`Note:
Loading a model from its configuration file does `),v_e=a("strong"),wcr=o("not"),Acr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),T_e=a("code"),Lcr=o("from_pretrained()"),Bcr=o("to load the model weights."),xcr=l(),F_e=a("p"),kcr=o("Examples:"),Rcr=l(),f(PA.$$.fragment),Scr=l(),vo=a("div"),f($A.$$.fragment),Pcr=l(),C_e=a("p"),$cr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Icr=l(),Fn=a("p"),Dcr=o("The model class to instantiate is selected based on the "),M_e=a("code"),Ncr=o("model_type"),jcr=o(` property of the config object (either
passed as an argument or loaded from `),E_e=a("code"),qcr=o("pretrained_model_name_or_path"),Gcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y_e=a("code"),Ocr=o("pretrained_model_name_or_path"),Xcr=o(":"),Vcr=l(),ue=a("ul"),pT=a("li"),w_e=a("strong"),zcr=o("bart"),Wcr=o(" \u2014 "),AO=a("a"),Qcr=o("TFBartForConditionalGeneration"),Hcr=o(" (BART model)"),Ucr=l(),_T=a("li"),A_e=a("strong"),Jcr=o("blenderbot"),Ycr=o(" \u2014 "),LO=a("a"),Kcr=o("TFBlenderbotForConditionalGeneration"),Zcr=o(" (Blenderbot model)"),efr=l(),uT=a("li"),L_e=a("strong"),ofr=o("blenderbot-small"),rfr=o(" \u2014 "),BO=a("a"),tfr=o("TFBlenderbotSmallForConditionalGeneration"),afr=o(" (BlenderbotSmall model)"),nfr=l(),bT=a("li"),B_e=a("strong"),sfr=o("encoder-decoder"),lfr=o(" \u2014 "),xO=a("a"),ifr=o("TFEncoderDecoderModel"),dfr=o(" (Encoder decoder model)"),cfr=l(),vT=a("li"),x_e=a("strong"),ffr=o("led"),mfr=o(" \u2014 "),kO=a("a"),gfr=o("TFLEDForConditionalGeneration"),hfr=o(" (LED model)"),pfr=l(),TT=a("li"),k_e=a("strong"),_fr=o("marian"),ufr=o(" \u2014 "),RO=a("a"),bfr=o("TFMarianMTModel"),vfr=o(" (Marian model)"),Tfr=l(),FT=a("li"),R_e=a("strong"),Ffr=o("mbart"),Cfr=o(" \u2014 "),SO=a("a"),Mfr=o("TFMBartForConditionalGeneration"),Efr=o(" (mBART model)"),yfr=l(),CT=a("li"),S_e=a("strong"),wfr=o("mt5"),Afr=o(" \u2014 "),PO=a("a"),Lfr=o("TFMT5ForConditionalGeneration"),Bfr=o(" (mT5 model)"),xfr=l(),MT=a("li"),P_e=a("strong"),kfr=o("pegasus"),Rfr=o(" \u2014 "),$O=a("a"),Sfr=o("TFPegasusForConditionalGeneration"),Pfr=o(" (Pegasus model)"),$fr=l(),ET=a("li"),$_e=a("strong"),Ifr=o("t5"),Dfr=o(" \u2014 "),IO=a("a"),Nfr=o("TFT5ForConditionalGeneration"),jfr=o(" (T5 model)"),qfr=l(),I_e=a("p"),Gfr=o("Examples:"),Ofr=l(),f(IA.$$.fragment),JRe=l(),kc=a("h2"),yT=a("a"),D_e=a("span"),f(DA.$$.fragment),Xfr=l(),N_e=a("span"),Vfr=o("TFAutoModelForSequenceClassification"),YRe=l(),yr=a("div"),f(NA.$$.fragment),zfr=l(),Rc=a("p"),Wfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),j_e=a("code"),Qfr=o("from_pretrained()"),Hfr=o("class method or the "),q_e=a("code"),Ufr=o("from_config()"),Jfr=o(`class
method.`),Yfr=l(),jA=a("p"),Kfr=o("This class cannot be instantiated directly using "),G_e=a("code"),Zfr=o("__init__()"),emr=o(" (throws an error)."),omr=l(),vt=a("div"),f(qA.$$.fragment),rmr=l(),O_e=a("p"),tmr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),amr=l(),Sc=a("p"),nmr=o(`Note:
Loading a model from its configuration file does `),X_e=a("strong"),smr=o("not"),lmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),V_e=a("code"),imr=o("from_pretrained()"),dmr=o("to load the model weights."),cmr=l(),z_e=a("p"),fmr=o("Examples:"),mmr=l(),f(GA.$$.fragment),gmr=l(),To=a("div"),f(OA.$$.fragment),hmr=l(),W_e=a("p"),pmr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),_mr=l(),Cn=a("p"),umr=o("The model class to instantiate is selected based on the "),Q_e=a("code"),bmr=o("model_type"),vmr=o(` property of the config object (either
passed as an argument or loaded from `),H_e=a("code"),Tmr=o("pretrained_model_name_or_path"),Fmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U_e=a("code"),Cmr=o("pretrained_model_name_or_path"),Mmr=o(":"),Emr=l(),X=a("ul"),wT=a("li"),J_e=a("strong"),ymr=o("albert"),wmr=o(" \u2014 "),DO=a("a"),Amr=o("TFAlbertForSequenceClassification"),Lmr=o(" (ALBERT model)"),Bmr=l(),AT=a("li"),Y_e=a("strong"),xmr=o("bert"),kmr=o(" \u2014 "),NO=a("a"),Rmr=o("TFBertForSequenceClassification"),Smr=o(" (BERT model)"),Pmr=l(),LT=a("li"),K_e=a("strong"),$mr=o("camembert"),Imr=o(" \u2014 "),jO=a("a"),Dmr=o("TFCamembertForSequenceClassification"),Nmr=o(" (CamemBERT model)"),jmr=l(),BT=a("li"),Z_e=a("strong"),qmr=o("convbert"),Gmr=o(" \u2014 "),qO=a("a"),Omr=o("TFConvBertForSequenceClassification"),Xmr=o(" (ConvBERT model)"),Vmr=l(),xT=a("li"),eue=a("strong"),zmr=o("ctrl"),Wmr=o(" \u2014 "),GO=a("a"),Qmr=o("TFCTRLForSequenceClassification"),Hmr=o(" (CTRL model)"),Umr=l(),kT=a("li"),oue=a("strong"),Jmr=o("deberta"),Ymr=o(" \u2014 "),OO=a("a"),Kmr=o("TFDebertaForSequenceClassification"),Zmr=o(" (DeBERTa model)"),egr=l(),RT=a("li"),rue=a("strong"),ogr=o("deberta-v2"),rgr=o(" \u2014 "),XO=a("a"),tgr=o("TFDebertaV2ForSequenceClassification"),agr=o(" (DeBERTa-v2 model)"),ngr=l(),ST=a("li"),tue=a("strong"),sgr=o("distilbert"),lgr=o(" \u2014 "),VO=a("a"),igr=o("TFDistilBertForSequenceClassification"),dgr=o(" (DistilBERT model)"),cgr=l(),PT=a("li"),aue=a("strong"),fgr=o("electra"),mgr=o(" \u2014 "),zO=a("a"),ggr=o("TFElectraForSequenceClassification"),hgr=o(" (ELECTRA model)"),pgr=l(),$T=a("li"),nue=a("strong"),_gr=o("flaubert"),ugr=o(" \u2014 "),WO=a("a"),bgr=o("TFFlaubertForSequenceClassification"),vgr=o(" (FlauBERT model)"),Tgr=l(),IT=a("li"),sue=a("strong"),Fgr=o("funnel"),Cgr=o(" \u2014 "),QO=a("a"),Mgr=o("TFFunnelForSequenceClassification"),Egr=o(" (Funnel Transformer model)"),ygr=l(),DT=a("li"),lue=a("strong"),wgr=o("gpt2"),Agr=o(" \u2014 "),HO=a("a"),Lgr=o("TFGPT2ForSequenceClassification"),Bgr=o(" (OpenAI GPT-2 model)"),xgr=l(),NT=a("li"),iue=a("strong"),kgr=o("gptj"),Rgr=o(" \u2014 "),UO=a("a"),Sgr=o("TFGPTJForSequenceClassification"),Pgr=o(" (GPT-J model)"),$gr=l(),jT=a("li"),due=a("strong"),Igr=o("layoutlm"),Dgr=o(" \u2014 "),JO=a("a"),Ngr=o("TFLayoutLMForSequenceClassification"),jgr=o(" (LayoutLM model)"),qgr=l(),qT=a("li"),cue=a("strong"),Ggr=o("longformer"),Ogr=o(" \u2014 "),YO=a("a"),Xgr=o("TFLongformerForSequenceClassification"),Vgr=o(" (Longformer model)"),zgr=l(),GT=a("li"),fue=a("strong"),Wgr=o("mobilebert"),Qgr=o(" \u2014 "),KO=a("a"),Hgr=o("TFMobileBertForSequenceClassification"),Ugr=o(" (MobileBERT model)"),Jgr=l(),OT=a("li"),mue=a("strong"),Ygr=o("mpnet"),Kgr=o(" \u2014 "),ZO=a("a"),Zgr=o("TFMPNetForSequenceClassification"),ehr=o(" (MPNet model)"),ohr=l(),XT=a("li"),gue=a("strong"),rhr=o("openai-gpt"),thr=o(" \u2014 "),eX=a("a"),ahr=o("TFOpenAIGPTForSequenceClassification"),nhr=o(" (OpenAI GPT model)"),shr=l(),VT=a("li"),hue=a("strong"),lhr=o("rembert"),ihr=o(" \u2014 "),oX=a("a"),dhr=o("TFRemBertForSequenceClassification"),chr=o(" (RemBERT model)"),fhr=l(),zT=a("li"),pue=a("strong"),mhr=o("roberta"),ghr=o(" \u2014 "),rX=a("a"),hhr=o("TFRobertaForSequenceClassification"),phr=o(" (RoBERTa model)"),_hr=l(),WT=a("li"),_ue=a("strong"),uhr=o("roformer"),bhr=o(" \u2014 "),tX=a("a"),vhr=o("TFRoFormerForSequenceClassification"),Thr=o(" (RoFormer model)"),Fhr=l(),QT=a("li"),uue=a("strong"),Chr=o("tapas"),Mhr=o(" \u2014 "),aX=a("a"),Ehr=o("TFTapasForSequenceClassification"),yhr=o(" (TAPAS model)"),whr=l(),HT=a("li"),bue=a("strong"),Ahr=o("transfo-xl"),Lhr=o(" \u2014 "),nX=a("a"),Bhr=o("TFTransfoXLForSequenceClassification"),xhr=o(" (Transformer-XL model)"),khr=l(),UT=a("li"),vue=a("strong"),Rhr=o("xlm"),Shr=o(" \u2014 "),sX=a("a"),Phr=o("TFXLMForSequenceClassification"),$hr=o(" (XLM model)"),Ihr=l(),JT=a("li"),Tue=a("strong"),Dhr=o("xlm-roberta"),Nhr=o(" \u2014 "),lX=a("a"),jhr=o("TFXLMRobertaForSequenceClassification"),qhr=o(" (XLM-RoBERTa model)"),Ghr=l(),YT=a("li"),Fue=a("strong"),Ohr=o("xlnet"),Xhr=o(" \u2014 "),iX=a("a"),Vhr=o("TFXLNetForSequenceClassification"),zhr=o(" (XLNet model)"),Whr=l(),Cue=a("p"),Qhr=o("Examples:"),Hhr=l(),f(XA.$$.fragment),KRe=l(),Pc=a("h2"),KT=a("a"),Mue=a("span"),f(VA.$$.fragment),Uhr=l(),Eue=a("span"),Jhr=o("TFAutoModelForMultipleChoice"),ZRe=l(),wr=a("div"),f(zA.$$.fragment),Yhr=l(),$c=a("p"),Khr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),yue=a("code"),Zhr=o("from_pretrained()"),epr=o("class method or the "),wue=a("code"),opr=o("from_config()"),rpr=o(`class
method.`),tpr=l(),WA=a("p"),apr=o("This class cannot be instantiated directly using "),Aue=a("code"),npr=o("__init__()"),spr=o(" (throws an error)."),lpr=l(),Tt=a("div"),f(QA.$$.fragment),ipr=l(),Lue=a("p"),dpr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),cpr=l(),Ic=a("p"),fpr=o(`Note:
Loading a model from its configuration file does `),Bue=a("strong"),mpr=o("not"),gpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xue=a("code"),hpr=o("from_pretrained()"),ppr=o("to load the model weights."),_pr=l(),kue=a("p"),upr=o("Examples:"),bpr=l(),f(HA.$$.fragment),vpr=l(),Fo=a("div"),f(UA.$$.fragment),Tpr=l(),Rue=a("p"),Fpr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Cpr=l(),Mn=a("p"),Mpr=o("The model class to instantiate is selected based on the "),Sue=a("code"),Epr=o("model_type"),ypr=o(` property of the config object (either
passed as an argument or loaded from `),Pue=a("code"),wpr=o("pretrained_model_name_or_path"),Apr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$ue=a("code"),Lpr=o("pretrained_model_name_or_path"),Bpr=o(":"),xpr=l(),ae=a("ul"),ZT=a("li"),Iue=a("strong"),kpr=o("albert"),Rpr=o(" \u2014 "),dX=a("a"),Spr=o("TFAlbertForMultipleChoice"),Ppr=o(" (ALBERT model)"),$pr=l(),e7=a("li"),Due=a("strong"),Ipr=o("bert"),Dpr=o(" \u2014 "),cX=a("a"),Npr=o("TFBertForMultipleChoice"),jpr=o(" (BERT model)"),qpr=l(),o7=a("li"),Nue=a("strong"),Gpr=o("camembert"),Opr=o(" \u2014 "),fX=a("a"),Xpr=o("TFCamembertForMultipleChoice"),Vpr=o(" (CamemBERT model)"),zpr=l(),r7=a("li"),jue=a("strong"),Wpr=o("convbert"),Qpr=o(" \u2014 "),mX=a("a"),Hpr=o("TFConvBertForMultipleChoice"),Upr=o(" (ConvBERT model)"),Jpr=l(),t7=a("li"),que=a("strong"),Ypr=o("distilbert"),Kpr=o(" \u2014 "),gX=a("a"),Zpr=o("TFDistilBertForMultipleChoice"),e_r=o(" (DistilBERT model)"),o_r=l(),a7=a("li"),Gue=a("strong"),r_r=o("electra"),t_r=o(" \u2014 "),hX=a("a"),a_r=o("TFElectraForMultipleChoice"),n_r=o(" (ELECTRA model)"),s_r=l(),n7=a("li"),Oue=a("strong"),l_r=o("flaubert"),i_r=o(" \u2014 "),pX=a("a"),d_r=o("TFFlaubertForMultipleChoice"),c_r=o(" (FlauBERT model)"),f_r=l(),s7=a("li"),Xue=a("strong"),m_r=o("funnel"),g_r=o(" \u2014 "),_X=a("a"),h_r=o("TFFunnelForMultipleChoice"),p_r=o(" (Funnel Transformer model)"),__r=l(),l7=a("li"),Vue=a("strong"),u_r=o("longformer"),b_r=o(" \u2014 "),uX=a("a"),v_r=o("TFLongformerForMultipleChoice"),T_r=o(" (Longformer model)"),F_r=l(),i7=a("li"),zue=a("strong"),C_r=o("mobilebert"),M_r=o(" \u2014 "),bX=a("a"),E_r=o("TFMobileBertForMultipleChoice"),y_r=o(" (MobileBERT model)"),w_r=l(),d7=a("li"),Wue=a("strong"),A_r=o("mpnet"),L_r=o(" \u2014 "),vX=a("a"),B_r=o("TFMPNetForMultipleChoice"),x_r=o(" (MPNet model)"),k_r=l(),c7=a("li"),Que=a("strong"),R_r=o("rembert"),S_r=o(" \u2014 "),TX=a("a"),P_r=o("TFRemBertForMultipleChoice"),$_r=o(" (RemBERT model)"),I_r=l(),f7=a("li"),Hue=a("strong"),D_r=o("roberta"),N_r=o(" \u2014 "),FX=a("a"),j_r=o("TFRobertaForMultipleChoice"),q_r=o(" (RoBERTa model)"),G_r=l(),m7=a("li"),Uue=a("strong"),O_r=o("roformer"),X_r=o(" \u2014 "),CX=a("a"),V_r=o("TFRoFormerForMultipleChoice"),z_r=o(" (RoFormer model)"),W_r=l(),g7=a("li"),Jue=a("strong"),Q_r=o("xlm"),H_r=o(" \u2014 "),MX=a("a"),U_r=o("TFXLMForMultipleChoice"),J_r=o(" (XLM model)"),Y_r=l(),h7=a("li"),Yue=a("strong"),K_r=o("xlm-roberta"),Z_r=o(" \u2014 "),EX=a("a"),eur=o("TFXLMRobertaForMultipleChoice"),our=o(" (XLM-RoBERTa model)"),rur=l(),p7=a("li"),Kue=a("strong"),tur=o("xlnet"),aur=o(" \u2014 "),yX=a("a"),nur=o("TFXLNetForMultipleChoice"),sur=o(" (XLNet model)"),lur=l(),Zue=a("p"),iur=o("Examples:"),dur=l(),f(JA.$$.fragment),eSe=l(),Dc=a("h2"),_7=a("a"),e1e=a("span"),f(YA.$$.fragment),cur=l(),o1e=a("span"),fur=o("TFAutoModelForTableQuestionAnswering"),oSe=l(),Ar=a("div"),f(KA.$$.fragment),mur=l(),Nc=a("p"),gur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),r1e=a("code"),hur=o("from_pretrained()"),pur=o("class method or the "),t1e=a("code"),_ur=o("from_config()"),uur=o(`class
method.`),bur=l(),ZA=a("p"),vur=o("This class cannot be instantiated directly using "),a1e=a("code"),Tur=o("__init__()"),Fur=o(" (throws an error)."),Cur=l(),Ft=a("div"),f(e0.$$.fragment),Mur=l(),n1e=a("p"),Eur=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),yur=l(),jc=a("p"),wur=o(`Note:
Loading a model from its configuration file does `),s1e=a("strong"),Aur=o("not"),Lur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),l1e=a("code"),Bur=o("from_pretrained()"),xur=o("to load the model weights."),kur=l(),i1e=a("p"),Rur=o("Examples:"),Sur=l(),f(o0.$$.fragment),Pur=l(),Co=a("div"),f(r0.$$.fragment),$ur=l(),d1e=a("p"),Iur=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Dur=l(),En=a("p"),Nur=o("The model class to instantiate is selected based on the "),c1e=a("code"),jur=o("model_type"),qur=o(` property of the config object (either
passed as an argument or loaded from `),f1e=a("code"),Gur=o("pretrained_model_name_or_path"),Our=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m1e=a("code"),Xur=o("pretrained_model_name_or_path"),Vur=o(":"),zur=l(),g1e=a("ul"),u7=a("li"),h1e=a("strong"),Wur=o("tapas"),Qur=o(" \u2014 "),wX=a("a"),Hur=o("TFTapasForQuestionAnswering"),Uur=o(" (TAPAS model)"),Jur=l(),p1e=a("p"),Yur=o("Examples:"),Kur=l(),f(t0.$$.fragment),rSe=l(),qc=a("h2"),b7=a("a"),_1e=a("span"),f(a0.$$.fragment),Zur=l(),u1e=a("span"),e1r=o("TFAutoModelForTokenClassification"),tSe=l(),Lr=a("div"),f(n0.$$.fragment),o1r=l(),Gc=a("p"),r1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),b1e=a("code"),t1r=o("from_pretrained()"),a1r=o("class method or the "),v1e=a("code"),n1r=o("from_config()"),s1r=o(`class
method.`),l1r=l(),s0=a("p"),i1r=o("This class cannot be instantiated directly using "),T1e=a("code"),d1r=o("__init__()"),c1r=o(" (throws an error)."),f1r=l(),Ct=a("div"),f(l0.$$.fragment),m1r=l(),F1e=a("p"),g1r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),h1r=l(),Oc=a("p"),p1r=o(`Note:
Loading a model from its configuration file does `),C1e=a("strong"),_1r=o("not"),u1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),M1e=a("code"),b1r=o("from_pretrained()"),v1r=o("to load the model weights."),T1r=l(),E1e=a("p"),F1r=o("Examples:"),C1r=l(),f(i0.$$.fragment),M1r=l(),Mo=a("div"),f(d0.$$.fragment),E1r=l(),y1e=a("p"),y1r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),w1r=l(),yn=a("p"),A1r=o("The model class to instantiate is selected based on the "),w1e=a("code"),L1r=o("model_type"),B1r=o(` property of the config object (either
passed as an argument or loaded from `),A1e=a("code"),x1r=o("pretrained_model_name_or_path"),k1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L1e=a("code"),R1r=o("pretrained_model_name_or_path"),S1r=o(":"),P1r=l(),Y=a("ul"),v7=a("li"),B1e=a("strong"),$1r=o("albert"),I1r=o(" \u2014 "),AX=a("a"),D1r=o("TFAlbertForTokenClassification"),N1r=o(" (ALBERT model)"),j1r=l(),T7=a("li"),x1e=a("strong"),q1r=o("bert"),G1r=o(" \u2014 "),LX=a("a"),O1r=o("TFBertForTokenClassification"),X1r=o(" (BERT model)"),V1r=l(),F7=a("li"),k1e=a("strong"),z1r=o("camembert"),W1r=o(" \u2014 "),BX=a("a"),Q1r=o("TFCamembertForTokenClassification"),H1r=o(" (CamemBERT model)"),U1r=l(),C7=a("li"),R1e=a("strong"),J1r=o("convbert"),Y1r=o(" \u2014 "),xX=a("a"),K1r=o("TFConvBertForTokenClassification"),Z1r=o(" (ConvBERT model)"),e4r=l(),M7=a("li"),S1e=a("strong"),o4r=o("deberta"),r4r=o(" \u2014 "),kX=a("a"),t4r=o("TFDebertaForTokenClassification"),a4r=o(" (DeBERTa model)"),n4r=l(),E7=a("li"),P1e=a("strong"),s4r=o("deberta-v2"),l4r=o(" \u2014 "),RX=a("a"),i4r=o("TFDebertaV2ForTokenClassification"),d4r=o(" (DeBERTa-v2 model)"),c4r=l(),y7=a("li"),$1e=a("strong"),f4r=o("distilbert"),m4r=o(" \u2014 "),SX=a("a"),g4r=o("TFDistilBertForTokenClassification"),h4r=o(" (DistilBERT model)"),p4r=l(),w7=a("li"),I1e=a("strong"),_4r=o("electra"),u4r=o(" \u2014 "),PX=a("a"),b4r=o("TFElectraForTokenClassification"),v4r=o(" (ELECTRA model)"),T4r=l(),A7=a("li"),D1e=a("strong"),F4r=o("flaubert"),C4r=o(" \u2014 "),$X=a("a"),M4r=o("TFFlaubertForTokenClassification"),E4r=o(" (FlauBERT model)"),y4r=l(),L7=a("li"),N1e=a("strong"),w4r=o("funnel"),A4r=o(" \u2014 "),IX=a("a"),L4r=o("TFFunnelForTokenClassification"),B4r=o(" (Funnel Transformer model)"),x4r=l(),B7=a("li"),j1e=a("strong"),k4r=o("layoutlm"),R4r=o(" \u2014 "),DX=a("a"),S4r=o("TFLayoutLMForTokenClassification"),P4r=o(" (LayoutLM model)"),$4r=l(),x7=a("li"),q1e=a("strong"),I4r=o("longformer"),D4r=o(" \u2014 "),NX=a("a"),N4r=o("TFLongformerForTokenClassification"),j4r=o(" (Longformer model)"),q4r=l(),k7=a("li"),G1e=a("strong"),G4r=o("mobilebert"),O4r=o(" \u2014 "),jX=a("a"),X4r=o("TFMobileBertForTokenClassification"),V4r=o(" (MobileBERT model)"),z4r=l(),R7=a("li"),O1e=a("strong"),W4r=o("mpnet"),Q4r=o(" \u2014 "),qX=a("a"),H4r=o("TFMPNetForTokenClassification"),U4r=o(" (MPNet model)"),J4r=l(),S7=a("li"),X1e=a("strong"),Y4r=o("rembert"),K4r=o(" \u2014 "),GX=a("a"),Z4r=o("TFRemBertForTokenClassification"),ebr=o(" (RemBERT model)"),obr=l(),P7=a("li"),V1e=a("strong"),rbr=o("roberta"),tbr=o(" \u2014 "),OX=a("a"),abr=o("TFRobertaForTokenClassification"),nbr=o(" (RoBERTa model)"),sbr=l(),$7=a("li"),z1e=a("strong"),lbr=o("roformer"),ibr=o(" \u2014 "),XX=a("a"),dbr=o("TFRoFormerForTokenClassification"),cbr=o(" (RoFormer model)"),fbr=l(),I7=a("li"),W1e=a("strong"),mbr=o("xlm"),gbr=o(" \u2014 "),VX=a("a"),hbr=o("TFXLMForTokenClassification"),pbr=o(" (XLM model)"),_br=l(),D7=a("li"),Q1e=a("strong"),ubr=o("xlm-roberta"),bbr=o(" \u2014 "),zX=a("a"),vbr=o("TFXLMRobertaForTokenClassification"),Tbr=o(" (XLM-RoBERTa model)"),Fbr=l(),N7=a("li"),H1e=a("strong"),Cbr=o("xlnet"),Mbr=o(" \u2014 "),WX=a("a"),Ebr=o("TFXLNetForTokenClassification"),ybr=o(" (XLNet model)"),wbr=l(),U1e=a("p"),Abr=o("Examples:"),Lbr=l(),f(c0.$$.fragment),aSe=l(),Xc=a("h2"),j7=a("a"),J1e=a("span"),f(f0.$$.fragment),Bbr=l(),Y1e=a("span"),xbr=o("TFAutoModelForQuestionAnswering"),nSe=l(),Br=a("div"),f(m0.$$.fragment),kbr=l(),Vc=a("p"),Rbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),K1e=a("code"),Sbr=o("from_pretrained()"),Pbr=o("class method or the "),Z1e=a("code"),$br=o("from_config()"),Ibr=o(`class
method.`),Dbr=l(),g0=a("p"),Nbr=o("This class cannot be instantiated directly using "),e4e=a("code"),jbr=o("__init__()"),qbr=o(" (throws an error)."),Gbr=l(),Mt=a("div"),f(h0.$$.fragment),Obr=l(),o4e=a("p"),Xbr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Vbr=l(),zc=a("p"),zbr=o(`Note:
Loading a model from its configuration file does `),r4e=a("strong"),Wbr=o("not"),Qbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),t4e=a("code"),Hbr=o("from_pretrained()"),Ubr=o("to load the model weights."),Jbr=l(),a4e=a("p"),Ybr=o("Examples:"),Kbr=l(),f(p0.$$.fragment),Zbr=l(),Eo=a("div"),f(_0.$$.fragment),e3r=l(),n4e=a("p"),o3r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),r3r=l(),wn=a("p"),t3r=o("The model class to instantiate is selected based on the "),s4e=a("code"),a3r=o("model_type"),n3r=o(` property of the config object (either
passed as an argument or loaded from `),l4e=a("code"),s3r=o("pretrained_model_name_or_path"),l3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i4e=a("code"),i3r=o("pretrained_model_name_or_path"),d3r=o(":"),c3r=l(),K=a("ul"),q7=a("li"),d4e=a("strong"),f3r=o("albert"),m3r=o(" \u2014 "),QX=a("a"),g3r=o("TFAlbertForQuestionAnswering"),h3r=o(" (ALBERT model)"),p3r=l(),G7=a("li"),c4e=a("strong"),_3r=o("bert"),u3r=o(" \u2014 "),HX=a("a"),b3r=o("TFBertForQuestionAnswering"),v3r=o(" (BERT model)"),T3r=l(),O7=a("li"),f4e=a("strong"),F3r=o("camembert"),C3r=o(" \u2014 "),UX=a("a"),M3r=o("TFCamembertForQuestionAnswering"),E3r=o(" (CamemBERT model)"),y3r=l(),X7=a("li"),m4e=a("strong"),w3r=o("convbert"),A3r=o(" \u2014 "),JX=a("a"),L3r=o("TFConvBertForQuestionAnswering"),B3r=o(" (ConvBERT model)"),x3r=l(),V7=a("li"),g4e=a("strong"),k3r=o("deberta"),R3r=o(" \u2014 "),YX=a("a"),S3r=o("TFDebertaForQuestionAnswering"),P3r=o(" (DeBERTa model)"),$3r=l(),z7=a("li"),h4e=a("strong"),I3r=o("deberta-v2"),D3r=o(" \u2014 "),KX=a("a"),N3r=o("TFDebertaV2ForQuestionAnswering"),j3r=o(" (DeBERTa-v2 model)"),q3r=l(),W7=a("li"),p4e=a("strong"),G3r=o("distilbert"),O3r=o(" \u2014 "),ZX=a("a"),X3r=o("TFDistilBertForQuestionAnswering"),V3r=o(" (DistilBERT model)"),z3r=l(),Q7=a("li"),_4e=a("strong"),W3r=o("electra"),Q3r=o(" \u2014 "),eV=a("a"),H3r=o("TFElectraForQuestionAnswering"),U3r=o(" (ELECTRA model)"),J3r=l(),H7=a("li"),u4e=a("strong"),Y3r=o("flaubert"),K3r=o(" \u2014 "),oV=a("a"),Z3r=o("TFFlaubertForQuestionAnsweringSimple"),e2r=o(" (FlauBERT model)"),o2r=l(),U7=a("li"),b4e=a("strong"),r2r=o("funnel"),t2r=o(" \u2014 "),rV=a("a"),a2r=o("TFFunnelForQuestionAnswering"),n2r=o(" (Funnel Transformer model)"),s2r=l(),J7=a("li"),v4e=a("strong"),l2r=o("gptj"),i2r=o(" \u2014 "),tV=a("a"),d2r=o("TFGPTJForQuestionAnswering"),c2r=o(" (GPT-J model)"),f2r=l(),Y7=a("li"),T4e=a("strong"),m2r=o("longformer"),g2r=o(" \u2014 "),aV=a("a"),h2r=o("TFLongformerForQuestionAnswering"),p2r=o(" (Longformer model)"),_2r=l(),K7=a("li"),F4e=a("strong"),u2r=o("mobilebert"),b2r=o(" \u2014 "),nV=a("a"),v2r=o("TFMobileBertForQuestionAnswering"),T2r=o(" (MobileBERT model)"),F2r=l(),Z7=a("li"),C4e=a("strong"),C2r=o("mpnet"),M2r=o(" \u2014 "),sV=a("a"),E2r=o("TFMPNetForQuestionAnswering"),y2r=o(" (MPNet model)"),w2r=l(),eF=a("li"),M4e=a("strong"),A2r=o("rembert"),L2r=o(" \u2014 "),lV=a("a"),B2r=o("TFRemBertForQuestionAnswering"),x2r=o(" (RemBERT model)"),k2r=l(),oF=a("li"),E4e=a("strong"),R2r=o("roberta"),S2r=o(" \u2014 "),iV=a("a"),P2r=o("TFRobertaForQuestionAnswering"),$2r=o(" (RoBERTa model)"),I2r=l(),rF=a("li"),y4e=a("strong"),D2r=o("roformer"),N2r=o(" \u2014 "),dV=a("a"),j2r=o("TFRoFormerForQuestionAnswering"),q2r=o(" (RoFormer model)"),G2r=l(),tF=a("li"),w4e=a("strong"),O2r=o("xlm"),X2r=o(" \u2014 "),cV=a("a"),V2r=o("TFXLMForQuestionAnsweringSimple"),z2r=o(" (XLM model)"),W2r=l(),aF=a("li"),A4e=a("strong"),Q2r=o("xlm-roberta"),H2r=o(" \u2014 "),fV=a("a"),U2r=o("TFXLMRobertaForQuestionAnswering"),J2r=o(" (XLM-RoBERTa model)"),Y2r=l(),nF=a("li"),L4e=a("strong"),K2r=o("xlnet"),Z2r=o(" \u2014 "),mV=a("a"),evr=o("TFXLNetForQuestionAnsweringSimple"),ovr=o(" (XLNet model)"),rvr=l(),B4e=a("p"),tvr=o("Examples:"),avr=l(),f(u0.$$.fragment),sSe=l(),Wc=a("h2"),sF=a("a"),x4e=a("span"),f(b0.$$.fragment),nvr=l(),k4e=a("span"),svr=o("TFAutoModelForVision2Seq"),lSe=l(),xr=a("div"),f(v0.$$.fragment),lvr=l(),Qc=a("p"),ivr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),R4e=a("code"),dvr=o("from_pretrained()"),cvr=o("class method or the "),S4e=a("code"),fvr=o("from_config()"),mvr=o(`class
method.`),gvr=l(),T0=a("p"),hvr=o("This class cannot be instantiated directly using "),P4e=a("code"),pvr=o("__init__()"),_vr=o(" (throws an error)."),uvr=l(),Et=a("div"),f(F0.$$.fragment),bvr=l(),$4e=a("p"),vvr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Tvr=l(),Hc=a("p"),Fvr=o(`Note:
Loading a model from its configuration file does `),I4e=a("strong"),Cvr=o("not"),Mvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),D4e=a("code"),Evr=o("from_pretrained()"),yvr=o("to load the model weights."),wvr=l(),N4e=a("p"),Avr=o("Examples:"),Lvr=l(),f(C0.$$.fragment),Bvr=l(),yo=a("div"),f(M0.$$.fragment),xvr=l(),j4e=a("p"),kvr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Rvr=l(),An=a("p"),Svr=o("The model class to instantiate is selected based on the "),q4e=a("code"),Pvr=o("model_type"),$vr=o(` property of the config object (either
passed as an argument or loaded from `),G4e=a("code"),Ivr=o("pretrained_model_name_or_path"),Dvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O4e=a("code"),Nvr=o("pretrained_model_name_or_path"),jvr=o(":"),qvr=l(),X4e=a("ul"),lF=a("li"),V4e=a("strong"),Gvr=o("vision-encoder-decoder"),Ovr=o(" \u2014 "),gV=a("a"),Xvr=o("TFVisionEncoderDecoderModel"),Vvr=o(" (Vision Encoder decoder model)"),zvr=l(),z4e=a("p"),Wvr=o("Examples:"),Qvr=l(),f(E0.$$.fragment),iSe=l(),Uc=a("h2"),iF=a("a"),W4e=a("span"),f(y0.$$.fragment),Hvr=l(),Q4e=a("span"),Uvr=o("TFAutoModelForSpeechSeq2Seq"),dSe=l(),kr=a("div"),f(w0.$$.fragment),Jvr=l(),Jc=a("p"),Yvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),H4e=a("code"),Kvr=o("from_pretrained()"),Zvr=o("class method or the "),U4e=a("code"),e6r=o("from_config()"),o6r=o(`class
method.`),r6r=l(),A0=a("p"),t6r=o("This class cannot be instantiated directly using "),J4e=a("code"),a6r=o("__init__()"),n6r=o(" (throws an error)."),s6r=l(),yt=a("div"),f(L0.$$.fragment),l6r=l(),Y4e=a("p"),i6r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),d6r=l(),Yc=a("p"),c6r=o(`Note:
Loading a model from its configuration file does `),K4e=a("strong"),f6r=o("not"),m6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Z4e=a("code"),g6r=o("from_pretrained()"),h6r=o("to load the model weights."),p6r=l(),ebe=a("p"),_6r=o("Examples:"),u6r=l(),f(B0.$$.fragment),b6r=l(),wo=a("div"),f(x0.$$.fragment),v6r=l(),obe=a("p"),T6r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),F6r=l(),Ln=a("p"),C6r=o("The model class to instantiate is selected based on the "),rbe=a("code"),M6r=o("model_type"),E6r=o(` property of the config object (either
passed as an argument or loaded from `),tbe=a("code"),y6r=o("pretrained_model_name_or_path"),w6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),abe=a("code"),A6r=o("pretrained_model_name_or_path"),L6r=o(":"),B6r=l(),nbe=a("ul"),dF=a("li"),sbe=a("strong"),x6r=o("speech_to_text"),k6r=o(" \u2014 "),hV=a("a"),R6r=o("TFSpeech2TextForConditionalGeneration"),S6r=o(" (Speech2Text model)"),P6r=l(),lbe=a("p"),$6r=o("Examples:"),I6r=l(),f(k0.$$.fragment),cSe=l(),Kc=a("h2"),cF=a("a"),ibe=a("span"),f(R0.$$.fragment),D6r=l(),dbe=a("span"),N6r=o("FlaxAutoModel"),fSe=l(),Rr=a("div"),f(S0.$$.fragment),j6r=l(),Zc=a("p"),q6r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),cbe=a("code"),G6r=o("from_pretrained()"),O6r=o("class method or the "),fbe=a("code"),X6r=o("from_config()"),V6r=o(`class
method.`),z6r=l(),P0=a("p"),W6r=o("This class cannot be instantiated directly using "),mbe=a("code"),Q6r=o("__init__()"),H6r=o(" (throws an error)."),U6r=l(),wt=a("div"),f($0.$$.fragment),J6r=l(),gbe=a("p"),Y6r=o("Instantiates one of the base model classes of the library from a configuration."),K6r=l(),ef=a("p"),Z6r=o(`Note:
Loading a model from its configuration file does `),hbe=a("strong"),eTr=o("not"),oTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pbe=a("code"),rTr=o("from_pretrained()"),tTr=o("to load the model weights."),aTr=l(),_be=a("p"),nTr=o("Examples:"),sTr=l(),f(I0.$$.fragment),lTr=l(),Ao=a("div"),f(D0.$$.fragment),iTr=l(),ube=a("p"),dTr=o("Instantiate one of the base model classes of the library from a pretrained model."),cTr=l(),Bn=a("p"),fTr=o("The model class to instantiate is selected based on the "),bbe=a("code"),mTr=o("model_type"),gTr=o(` property of the config object (either
passed as an argument or loaded from `),vbe=a("code"),hTr=o("pretrained_model_name_or_path"),pTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tbe=a("code"),_Tr=o("pretrained_model_name_or_path"),uTr=o(":"),bTr=l(),z=a("ul"),fF=a("li"),Fbe=a("strong"),vTr=o("albert"),TTr=o(" \u2014 "),pV=a("a"),FTr=o("FlaxAlbertModel"),CTr=o(" (ALBERT model)"),MTr=l(),mF=a("li"),Cbe=a("strong"),ETr=o("bart"),yTr=o(" \u2014 "),_V=a("a"),wTr=o("FlaxBartModel"),ATr=o(" (BART model)"),LTr=l(),gF=a("li"),Mbe=a("strong"),BTr=o("beit"),xTr=o(" \u2014 "),uV=a("a"),kTr=o("FlaxBeitModel"),RTr=o(" (BEiT model)"),STr=l(),hF=a("li"),Ebe=a("strong"),PTr=o("bert"),$Tr=o(" \u2014 "),bV=a("a"),ITr=o("FlaxBertModel"),DTr=o(" (BERT model)"),NTr=l(),pF=a("li"),ybe=a("strong"),jTr=o("big_bird"),qTr=o(" \u2014 "),vV=a("a"),GTr=o("FlaxBigBirdModel"),OTr=o(" (BigBird model)"),XTr=l(),_F=a("li"),wbe=a("strong"),VTr=o("blenderbot"),zTr=o(" \u2014 "),TV=a("a"),WTr=o("FlaxBlenderbotModel"),QTr=o(" (Blenderbot model)"),HTr=l(),uF=a("li"),Abe=a("strong"),UTr=o("blenderbot-small"),JTr=o(" \u2014 "),FV=a("a"),YTr=o("FlaxBlenderbotSmallModel"),KTr=o(" (BlenderbotSmall model)"),ZTr=l(),bF=a("li"),Lbe=a("strong"),e7r=o("clip"),o7r=o(" \u2014 "),CV=a("a"),r7r=o("FlaxCLIPModel"),t7r=o(" (CLIP model)"),a7r=l(),vF=a("li"),Bbe=a("strong"),n7r=o("distilbert"),s7r=o(" \u2014 "),MV=a("a"),l7r=o("FlaxDistilBertModel"),i7r=o(" (DistilBERT model)"),d7r=l(),TF=a("li"),xbe=a("strong"),c7r=o("electra"),f7r=o(" \u2014 "),EV=a("a"),m7r=o("FlaxElectraModel"),g7r=o(" (ELECTRA model)"),h7r=l(),FF=a("li"),kbe=a("strong"),p7r=o("gpt2"),_7r=o(" \u2014 "),yV=a("a"),u7r=o("FlaxGPT2Model"),b7r=o(" (OpenAI GPT-2 model)"),v7r=l(),CF=a("li"),Rbe=a("strong"),T7r=o("gpt_neo"),F7r=o(" \u2014 "),wV=a("a"),C7r=o("FlaxGPTNeoModel"),M7r=o(" (GPT Neo model)"),E7r=l(),MF=a("li"),Sbe=a("strong"),y7r=o("gptj"),w7r=o(" \u2014 "),AV=a("a"),A7r=o("FlaxGPTJModel"),L7r=o(" (GPT-J model)"),B7r=l(),EF=a("li"),Pbe=a("strong"),x7r=o("marian"),k7r=o(" \u2014 "),LV=a("a"),R7r=o("FlaxMarianModel"),S7r=o(" (Marian model)"),P7r=l(),yF=a("li"),$be=a("strong"),$7r=o("mbart"),I7r=o(" \u2014 "),BV=a("a"),D7r=o("FlaxMBartModel"),N7r=o(" (mBART model)"),j7r=l(),wF=a("li"),Ibe=a("strong"),q7r=o("mt5"),G7r=o(" \u2014 "),xV=a("a"),O7r=o("FlaxMT5Model"),X7r=o(" (mT5 model)"),V7r=l(),AF=a("li"),Dbe=a("strong"),z7r=o("pegasus"),W7r=o(" \u2014 "),kV=a("a"),Q7r=o("FlaxPegasusModel"),H7r=o(" (Pegasus model)"),U7r=l(),LF=a("li"),Nbe=a("strong"),J7r=o("roberta"),Y7r=o(" \u2014 "),RV=a("a"),K7r=o("FlaxRobertaModel"),Z7r=o(" (RoBERTa model)"),eFr=l(),BF=a("li"),jbe=a("strong"),oFr=o("roformer"),rFr=o(" \u2014 "),SV=a("a"),tFr=o("FlaxRoFormerModel"),aFr=o(" (RoFormer model)"),nFr=l(),xF=a("li"),qbe=a("strong"),sFr=o("t5"),lFr=o(" \u2014 "),PV=a("a"),iFr=o("FlaxT5Model"),dFr=o(" (T5 model)"),cFr=l(),kF=a("li"),Gbe=a("strong"),fFr=o("vision-text-dual-encoder"),mFr=o(" \u2014 "),$V=a("a"),gFr=o("FlaxVisionTextDualEncoderModel"),hFr=o(" (VisionTextDualEncoder model)"),pFr=l(),RF=a("li"),Obe=a("strong"),_Fr=o("vit"),uFr=o(" \u2014 "),IV=a("a"),bFr=o("FlaxViTModel"),vFr=o(" (ViT model)"),TFr=l(),SF=a("li"),Xbe=a("strong"),FFr=o("wav2vec2"),CFr=o(" \u2014 "),DV=a("a"),MFr=o("FlaxWav2Vec2Model"),EFr=o(" (Wav2Vec2 model)"),yFr=l(),PF=a("li"),Vbe=a("strong"),wFr=o("xglm"),AFr=o(" \u2014 "),NV=a("a"),LFr=o("FlaxXGLMModel"),BFr=o(" (XGLM model)"),xFr=l(),$F=a("li"),zbe=a("strong"),kFr=o("xlm-roberta"),RFr=o(" \u2014 "),jV=a("a"),SFr=o("FlaxXLMRobertaModel"),PFr=o(" (XLM-RoBERTa model)"),$Fr=l(),Wbe=a("p"),IFr=o("Examples:"),DFr=l(),f(N0.$$.fragment),mSe=l(),of=a("h2"),IF=a("a"),Qbe=a("span"),f(j0.$$.fragment),NFr=l(),Hbe=a("span"),jFr=o("FlaxAutoModelForCausalLM"),gSe=l(),Sr=a("div"),f(q0.$$.fragment),qFr=l(),rf=a("p"),GFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Ube=a("code"),OFr=o("from_pretrained()"),XFr=o("class method or the "),Jbe=a("code"),VFr=o("from_config()"),zFr=o(`class
method.`),WFr=l(),G0=a("p"),QFr=o("This class cannot be instantiated directly using "),Ybe=a("code"),HFr=o("__init__()"),UFr=o(" (throws an error)."),JFr=l(),At=a("div"),f(O0.$$.fragment),YFr=l(),Kbe=a("p"),KFr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),ZFr=l(),tf=a("p"),eCr=o(`Note:
Loading a model from its configuration file does `),Zbe=a("strong"),oCr=o("not"),rCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),e3e=a("code"),tCr=o("from_pretrained()"),aCr=o("to load the model weights."),nCr=l(),o3e=a("p"),sCr=o("Examples:"),lCr=l(),f(X0.$$.fragment),iCr=l(),Lo=a("div"),f(V0.$$.fragment),dCr=l(),r3e=a("p"),cCr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),fCr=l(),xn=a("p"),mCr=o("The model class to instantiate is selected based on the "),t3e=a("code"),gCr=o("model_type"),hCr=o(` property of the config object (either
passed as an argument or loaded from `),a3e=a("code"),pCr=o("pretrained_model_name_or_path"),_Cr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n3e=a("code"),uCr=o("pretrained_model_name_or_path"),bCr=o(":"),vCr=l(),ca=a("ul"),DF=a("li"),s3e=a("strong"),TCr=o("bart"),FCr=o(" \u2014 "),qV=a("a"),CCr=o("FlaxBartForCausalLM"),MCr=o(" (BART model)"),ECr=l(),NF=a("li"),l3e=a("strong"),yCr=o("gpt2"),wCr=o(" \u2014 "),GV=a("a"),ACr=o("FlaxGPT2LMHeadModel"),LCr=o(" (OpenAI GPT-2 model)"),BCr=l(),jF=a("li"),i3e=a("strong"),xCr=o("gpt_neo"),kCr=o(" \u2014 "),OV=a("a"),RCr=o("FlaxGPTNeoForCausalLM"),SCr=o(" (GPT Neo model)"),PCr=l(),qF=a("li"),d3e=a("strong"),$Cr=o("gptj"),ICr=o(" \u2014 "),XV=a("a"),DCr=o("FlaxGPTJForCausalLM"),NCr=o(" (GPT-J model)"),jCr=l(),GF=a("li"),c3e=a("strong"),qCr=o("xglm"),GCr=o(" \u2014 "),VV=a("a"),OCr=o("FlaxXGLMForCausalLM"),XCr=o(" (XGLM model)"),VCr=l(),f3e=a("p"),zCr=o("Examples:"),WCr=l(),f(z0.$$.fragment),hSe=l(),af=a("h2"),OF=a("a"),m3e=a("span"),f(W0.$$.fragment),QCr=l(),g3e=a("span"),HCr=o("FlaxAutoModelForPreTraining"),pSe=l(),Pr=a("div"),f(Q0.$$.fragment),UCr=l(),nf=a("p"),JCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),h3e=a("code"),YCr=o("from_pretrained()"),KCr=o("class method or the "),p3e=a("code"),ZCr=o("from_config()"),eMr=o(`class
method.`),oMr=l(),H0=a("p"),rMr=o("This class cannot be instantiated directly using "),_3e=a("code"),tMr=o("__init__()"),aMr=o(" (throws an error)."),nMr=l(),Lt=a("div"),f(U0.$$.fragment),sMr=l(),u3e=a("p"),lMr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),iMr=l(),sf=a("p"),dMr=o(`Note:
Loading a model from its configuration file does `),b3e=a("strong"),cMr=o("not"),fMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),v3e=a("code"),mMr=o("from_pretrained()"),gMr=o("to load the model weights."),hMr=l(),T3e=a("p"),pMr=o("Examples:"),_Mr=l(),f(J0.$$.fragment),uMr=l(),Bo=a("div"),f(Y0.$$.fragment),bMr=l(),F3e=a("p"),vMr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),TMr=l(),kn=a("p"),FMr=o("The model class to instantiate is selected based on the "),C3e=a("code"),CMr=o("model_type"),MMr=o(` property of the config object (either
passed as an argument or loaded from `),M3e=a("code"),EMr=o("pretrained_model_name_or_path"),yMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E3e=a("code"),wMr=o("pretrained_model_name_or_path"),AMr=o(":"),LMr=l(),fe=a("ul"),XF=a("li"),y3e=a("strong"),BMr=o("albert"),xMr=o(" \u2014 "),zV=a("a"),kMr=o("FlaxAlbertForPreTraining"),RMr=o(" (ALBERT model)"),SMr=l(),VF=a("li"),w3e=a("strong"),PMr=o("bart"),$Mr=o(" \u2014 "),WV=a("a"),IMr=o("FlaxBartForConditionalGeneration"),DMr=o(" (BART model)"),NMr=l(),zF=a("li"),A3e=a("strong"),jMr=o("bert"),qMr=o(" \u2014 "),QV=a("a"),GMr=o("FlaxBertForPreTraining"),OMr=o(" (BERT model)"),XMr=l(),WF=a("li"),L3e=a("strong"),VMr=o("big_bird"),zMr=o(" \u2014 "),HV=a("a"),WMr=o("FlaxBigBirdForPreTraining"),QMr=o(" (BigBird model)"),HMr=l(),QF=a("li"),B3e=a("strong"),UMr=o("electra"),JMr=o(" \u2014 "),UV=a("a"),YMr=o("FlaxElectraForPreTraining"),KMr=o(" (ELECTRA model)"),ZMr=l(),HF=a("li"),x3e=a("strong"),eEr=o("mbart"),oEr=o(" \u2014 "),JV=a("a"),rEr=o("FlaxMBartForConditionalGeneration"),tEr=o(" (mBART model)"),aEr=l(),UF=a("li"),k3e=a("strong"),nEr=o("mt5"),sEr=o(" \u2014 "),YV=a("a"),lEr=o("FlaxMT5ForConditionalGeneration"),iEr=o(" (mT5 model)"),dEr=l(),JF=a("li"),R3e=a("strong"),cEr=o("roberta"),fEr=o(" \u2014 "),KV=a("a"),mEr=o("FlaxRobertaForMaskedLM"),gEr=o(" (RoBERTa model)"),hEr=l(),YF=a("li"),S3e=a("strong"),pEr=o("roformer"),_Er=o(" \u2014 "),ZV=a("a"),uEr=o("FlaxRoFormerForMaskedLM"),bEr=o(" (RoFormer model)"),vEr=l(),KF=a("li"),P3e=a("strong"),TEr=o("t5"),FEr=o(" \u2014 "),ez=a("a"),CEr=o("FlaxT5ForConditionalGeneration"),MEr=o(" (T5 model)"),EEr=l(),ZF=a("li"),$3e=a("strong"),yEr=o("wav2vec2"),wEr=o(" \u2014 "),oz=a("a"),AEr=o("FlaxWav2Vec2ForPreTraining"),LEr=o(" (Wav2Vec2 model)"),BEr=l(),eC=a("li"),I3e=a("strong"),xEr=o("xlm-roberta"),kEr=o(" \u2014 "),rz=a("a"),REr=o("FlaxXLMRobertaForMaskedLM"),SEr=o(" (XLM-RoBERTa model)"),PEr=l(),D3e=a("p"),$Er=o("Examples:"),IEr=l(),f(K0.$$.fragment),_Se=l(),lf=a("h2"),oC=a("a"),N3e=a("span"),f(Z0.$$.fragment),DEr=l(),j3e=a("span"),NEr=o("FlaxAutoModelForMaskedLM"),uSe=l(),$r=a("div"),f(eL.$$.fragment),jEr=l(),df=a("p"),qEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),q3e=a("code"),GEr=o("from_pretrained()"),OEr=o("class method or the "),G3e=a("code"),XEr=o("from_config()"),VEr=o(`class
method.`),zEr=l(),oL=a("p"),WEr=o("This class cannot be instantiated directly using "),O3e=a("code"),QEr=o("__init__()"),HEr=o(" (throws an error)."),UEr=l(),Bt=a("div"),f(rL.$$.fragment),JEr=l(),X3e=a("p"),YEr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),KEr=l(),cf=a("p"),ZEr=o(`Note:
Loading a model from its configuration file does `),V3e=a("strong"),e5r=o("not"),o5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),z3e=a("code"),r5r=o("from_pretrained()"),t5r=o("to load the model weights."),a5r=l(),W3e=a("p"),n5r=o("Examples:"),s5r=l(),f(tL.$$.fragment),l5r=l(),xo=a("div"),f(aL.$$.fragment),i5r=l(),Q3e=a("p"),d5r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),c5r=l(),Rn=a("p"),f5r=o("The model class to instantiate is selected based on the "),H3e=a("code"),m5r=o("model_type"),g5r=o(` property of the config object (either
passed as an argument or loaded from `),U3e=a("code"),h5r=o("pretrained_model_name_or_path"),p5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J3e=a("code"),_5r=o("pretrained_model_name_or_path"),u5r=o(":"),b5r=l(),be=a("ul"),rC=a("li"),Y3e=a("strong"),v5r=o("albert"),T5r=o(" \u2014 "),tz=a("a"),F5r=o("FlaxAlbertForMaskedLM"),C5r=o(" (ALBERT model)"),M5r=l(),tC=a("li"),K3e=a("strong"),E5r=o("bart"),y5r=o(" \u2014 "),az=a("a"),w5r=o("FlaxBartForConditionalGeneration"),A5r=o(" (BART model)"),L5r=l(),aC=a("li"),Z3e=a("strong"),B5r=o("bert"),x5r=o(" \u2014 "),nz=a("a"),k5r=o("FlaxBertForMaskedLM"),R5r=o(" (BERT model)"),S5r=l(),nC=a("li"),e2e=a("strong"),P5r=o("big_bird"),$5r=o(" \u2014 "),sz=a("a"),I5r=o("FlaxBigBirdForMaskedLM"),D5r=o(" (BigBird model)"),N5r=l(),sC=a("li"),o2e=a("strong"),j5r=o("distilbert"),q5r=o(" \u2014 "),lz=a("a"),G5r=o("FlaxDistilBertForMaskedLM"),O5r=o(" (DistilBERT model)"),X5r=l(),lC=a("li"),r2e=a("strong"),V5r=o("electra"),z5r=o(" \u2014 "),iz=a("a"),W5r=o("FlaxElectraForMaskedLM"),Q5r=o(" (ELECTRA model)"),H5r=l(),iC=a("li"),t2e=a("strong"),U5r=o("mbart"),J5r=o(" \u2014 "),dz=a("a"),Y5r=o("FlaxMBartForConditionalGeneration"),K5r=o(" (mBART model)"),Z5r=l(),dC=a("li"),a2e=a("strong"),eyr=o("roberta"),oyr=o(" \u2014 "),cz=a("a"),ryr=o("FlaxRobertaForMaskedLM"),tyr=o(" (RoBERTa model)"),ayr=l(),cC=a("li"),n2e=a("strong"),nyr=o("roformer"),syr=o(" \u2014 "),fz=a("a"),lyr=o("FlaxRoFormerForMaskedLM"),iyr=o(" (RoFormer model)"),dyr=l(),fC=a("li"),s2e=a("strong"),cyr=o("xlm-roberta"),fyr=o(" \u2014 "),mz=a("a"),myr=o("FlaxXLMRobertaForMaskedLM"),gyr=o(" (XLM-RoBERTa model)"),hyr=l(),l2e=a("p"),pyr=o("Examples:"),_yr=l(),f(nL.$$.fragment),bSe=l(),ff=a("h2"),mC=a("a"),i2e=a("span"),f(sL.$$.fragment),uyr=l(),d2e=a("span"),byr=o("FlaxAutoModelForSeq2SeqLM"),vSe=l(),Ir=a("div"),f(lL.$$.fragment),vyr=l(),mf=a("p"),Tyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),c2e=a("code"),Fyr=o("from_pretrained()"),Cyr=o("class method or the "),f2e=a("code"),Myr=o("from_config()"),Eyr=o(`class
method.`),yyr=l(),iL=a("p"),wyr=o("This class cannot be instantiated directly using "),m2e=a("code"),Ayr=o("__init__()"),Lyr=o(" (throws an error)."),Byr=l(),xt=a("div"),f(dL.$$.fragment),xyr=l(),g2e=a("p"),kyr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Ryr=l(),gf=a("p"),Syr=o(`Note:
Loading a model from its configuration file does `),h2e=a("strong"),Pyr=o("not"),$yr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),p2e=a("code"),Iyr=o("from_pretrained()"),Dyr=o("to load the model weights."),Nyr=l(),_2e=a("p"),jyr=o("Examples:"),qyr=l(),f(cL.$$.fragment),Gyr=l(),ko=a("div"),f(fL.$$.fragment),Oyr=l(),u2e=a("p"),Xyr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Vyr=l(),Sn=a("p"),zyr=o("The model class to instantiate is selected based on the "),b2e=a("code"),Wyr=o("model_type"),Qyr=o(` property of the config object (either
passed as an argument or loaded from `),v2e=a("code"),Hyr=o("pretrained_model_name_or_path"),Uyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T2e=a("code"),Jyr=o("pretrained_model_name_or_path"),Yyr=o(":"),Kyr=l(),Me=a("ul"),gC=a("li"),F2e=a("strong"),Zyr=o("bart"),ewr=o(" \u2014 "),gz=a("a"),owr=o("FlaxBartForConditionalGeneration"),rwr=o(" (BART model)"),twr=l(),hC=a("li"),C2e=a("strong"),awr=o("blenderbot"),nwr=o(" \u2014 "),hz=a("a"),swr=o("FlaxBlenderbotForConditionalGeneration"),lwr=o(" (Blenderbot model)"),iwr=l(),pC=a("li"),M2e=a("strong"),dwr=o("blenderbot-small"),cwr=o(" \u2014 "),pz=a("a"),fwr=o("FlaxBlenderbotSmallForConditionalGeneration"),mwr=o(" (BlenderbotSmall model)"),gwr=l(),_C=a("li"),E2e=a("strong"),hwr=o("encoder-decoder"),pwr=o(" \u2014 "),_z=a("a"),_wr=o("FlaxEncoderDecoderModel"),uwr=o(" (Encoder decoder model)"),bwr=l(),uC=a("li"),y2e=a("strong"),vwr=o("marian"),Twr=o(" \u2014 "),uz=a("a"),Fwr=o("FlaxMarianMTModel"),Cwr=o(" (Marian model)"),Mwr=l(),bC=a("li"),w2e=a("strong"),Ewr=o("mbart"),ywr=o(" \u2014 "),bz=a("a"),wwr=o("FlaxMBartForConditionalGeneration"),Awr=o(" (mBART model)"),Lwr=l(),vC=a("li"),A2e=a("strong"),Bwr=o("mt5"),xwr=o(" \u2014 "),vz=a("a"),kwr=o("FlaxMT5ForConditionalGeneration"),Rwr=o(" (mT5 model)"),Swr=l(),TC=a("li"),L2e=a("strong"),Pwr=o("pegasus"),$wr=o(" \u2014 "),Tz=a("a"),Iwr=o("FlaxPegasusForConditionalGeneration"),Dwr=o(" (Pegasus model)"),Nwr=l(),FC=a("li"),B2e=a("strong"),jwr=o("t5"),qwr=o(" \u2014 "),Fz=a("a"),Gwr=o("FlaxT5ForConditionalGeneration"),Owr=o(" (T5 model)"),Xwr=l(),x2e=a("p"),Vwr=o("Examples:"),zwr=l(),f(mL.$$.fragment),TSe=l(),hf=a("h2"),CC=a("a"),k2e=a("span"),f(gL.$$.fragment),Wwr=l(),R2e=a("span"),Qwr=o("FlaxAutoModelForSequenceClassification"),FSe=l(),Dr=a("div"),f(hL.$$.fragment),Hwr=l(),pf=a("p"),Uwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),S2e=a("code"),Jwr=o("from_pretrained()"),Ywr=o("class method or the "),P2e=a("code"),Kwr=o("from_config()"),Zwr=o(`class
method.`),eAr=l(),pL=a("p"),oAr=o("This class cannot be instantiated directly using "),$2e=a("code"),rAr=o("__init__()"),tAr=o(" (throws an error)."),aAr=l(),kt=a("div"),f(_L.$$.fragment),nAr=l(),I2e=a("p"),sAr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),lAr=l(),_f=a("p"),iAr=o(`Note:
Loading a model from its configuration file does `),D2e=a("strong"),dAr=o("not"),cAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),N2e=a("code"),fAr=o("from_pretrained()"),mAr=o("to load the model weights."),gAr=l(),j2e=a("p"),hAr=o("Examples:"),pAr=l(),f(uL.$$.fragment),_Ar=l(),Ro=a("div"),f(bL.$$.fragment),uAr=l(),q2e=a("p"),bAr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),vAr=l(),Pn=a("p"),TAr=o("The model class to instantiate is selected based on the "),G2e=a("code"),FAr=o("model_type"),CAr=o(` property of the config object (either
passed as an argument or loaded from `),O2e=a("code"),MAr=o("pretrained_model_name_or_path"),EAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X2e=a("code"),yAr=o("pretrained_model_name_or_path"),wAr=o(":"),AAr=l(),ve=a("ul"),MC=a("li"),V2e=a("strong"),LAr=o("albert"),BAr=o(" \u2014 "),Cz=a("a"),xAr=o("FlaxAlbertForSequenceClassification"),kAr=o(" (ALBERT model)"),RAr=l(),EC=a("li"),z2e=a("strong"),SAr=o("bart"),PAr=o(" \u2014 "),Mz=a("a"),$Ar=o("FlaxBartForSequenceClassification"),IAr=o(" (BART model)"),DAr=l(),yC=a("li"),W2e=a("strong"),NAr=o("bert"),jAr=o(" \u2014 "),Ez=a("a"),qAr=o("FlaxBertForSequenceClassification"),GAr=o(" (BERT model)"),OAr=l(),wC=a("li"),Q2e=a("strong"),XAr=o("big_bird"),VAr=o(" \u2014 "),yz=a("a"),zAr=o("FlaxBigBirdForSequenceClassification"),WAr=o(" (BigBird model)"),QAr=l(),AC=a("li"),H2e=a("strong"),HAr=o("distilbert"),UAr=o(" \u2014 "),wz=a("a"),JAr=o("FlaxDistilBertForSequenceClassification"),YAr=o(" (DistilBERT model)"),KAr=l(),LC=a("li"),U2e=a("strong"),ZAr=o("electra"),e0r=o(" \u2014 "),Az=a("a"),o0r=o("FlaxElectraForSequenceClassification"),r0r=o(" (ELECTRA model)"),t0r=l(),BC=a("li"),J2e=a("strong"),a0r=o("mbart"),n0r=o(" \u2014 "),Lz=a("a"),s0r=o("FlaxMBartForSequenceClassification"),l0r=o(" (mBART model)"),i0r=l(),xC=a("li"),Y2e=a("strong"),d0r=o("roberta"),c0r=o(" \u2014 "),Bz=a("a"),f0r=o("FlaxRobertaForSequenceClassification"),m0r=o(" (RoBERTa model)"),g0r=l(),kC=a("li"),K2e=a("strong"),h0r=o("roformer"),p0r=o(" \u2014 "),xz=a("a"),_0r=o("FlaxRoFormerForSequenceClassification"),u0r=o(" (RoFormer model)"),b0r=l(),RC=a("li"),Z2e=a("strong"),v0r=o("xlm-roberta"),T0r=o(" \u2014 "),kz=a("a"),F0r=o("FlaxXLMRobertaForSequenceClassification"),C0r=o(" (XLM-RoBERTa model)"),M0r=l(),eve=a("p"),E0r=o("Examples:"),y0r=l(),f(vL.$$.fragment),CSe=l(),uf=a("h2"),SC=a("a"),ove=a("span"),f(TL.$$.fragment),w0r=l(),rve=a("span"),A0r=o("FlaxAutoModelForQuestionAnswering"),MSe=l(),Nr=a("div"),f(FL.$$.fragment),L0r=l(),bf=a("p"),B0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),tve=a("code"),x0r=o("from_pretrained()"),k0r=o("class method or the "),ave=a("code"),R0r=o("from_config()"),S0r=o(`class
method.`),P0r=l(),CL=a("p"),$0r=o("This class cannot be instantiated directly using "),nve=a("code"),I0r=o("__init__()"),D0r=o(" (throws an error)."),N0r=l(),Rt=a("div"),f(ML.$$.fragment),j0r=l(),sve=a("p"),q0r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),G0r=l(),vf=a("p"),O0r=o(`Note:
Loading a model from its configuration file does `),lve=a("strong"),X0r=o("not"),V0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ive=a("code"),z0r=o("from_pretrained()"),W0r=o("to load the model weights."),Q0r=l(),dve=a("p"),H0r=o("Examples:"),U0r=l(),f(EL.$$.fragment),J0r=l(),So=a("div"),f(yL.$$.fragment),Y0r=l(),cve=a("p"),K0r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Z0r=l(),$n=a("p"),eLr=o("The model class to instantiate is selected based on the "),fve=a("code"),oLr=o("model_type"),rLr=o(` property of the config object (either
passed as an argument or loaded from `),mve=a("code"),tLr=o("pretrained_model_name_or_path"),aLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gve=a("code"),nLr=o("pretrained_model_name_or_path"),sLr=o(":"),lLr=l(),Te=a("ul"),PC=a("li"),hve=a("strong"),iLr=o("albert"),dLr=o(" \u2014 "),Rz=a("a"),cLr=o("FlaxAlbertForQuestionAnswering"),fLr=o(" (ALBERT model)"),mLr=l(),$C=a("li"),pve=a("strong"),gLr=o("bart"),hLr=o(" \u2014 "),Sz=a("a"),pLr=o("FlaxBartForQuestionAnswering"),_Lr=o(" (BART model)"),uLr=l(),IC=a("li"),_ve=a("strong"),bLr=o("bert"),vLr=o(" \u2014 "),Pz=a("a"),TLr=o("FlaxBertForQuestionAnswering"),FLr=o(" (BERT model)"),CLr=l(),DC=a("li"),uve=a("strong"),MLr=o("big_bird"),ELr=o(" \u2014 "),$z=a("a"),yLr=o("FlaxBigBirdForQuestionAnswering"),wLr=o(" (BigBird model)"),ALr=l(),NC=a("li"),bve=a("strong"),LLr=o("distilbert"),BLr=o(" \u2014 "),Iz=a("a"),xLr=o("FlaxDistilBertForQuestionAnswering"),kLr=o(" (DistilBERT model)"),RLr=l(),jC=a("li"),vve=a("strong"),SLr=o("electra"),PLr=o(" \u2014 "),Dz=a("a"),$Lr=o("FlaxElectraForQuestionAnswering"),ILr=o(" (ELECTRA model)"),DLr=l(),qC=a("li"),Tve=a("strong"),NLr=o("mbart"),jLr=o(" \u2014 "),Nz=a("a"),qLr=o("FlaxMBartForQuestionAnswering"),GLr=o(" (mBART model)"),OLr=l(),GC=a("li"),Fve=a("strong"),XLr=o("roberta"),VLr=o(" \u2014 "),jz=a("a"),zLr=o("FlaxRobertaForQuestionAnswering"),WLr=o(" (RoBERTa model)"),QLr=l(),OC=a("li"),Cve=a("strong"),HLr=o("roformer"),ULr=o(" \u2014 "),qz=a("a"),JLr=o("FlaxRoFormerForQuestionAnswering"),YLr=o(" (RoFormer model)"),KLr=l(),XC=a("li"),Mve=a("strong"),ZLr=o("xlm-roberta"),e8r=o(" \u2014 "),Gz=a("a"),o8r=o("FlaxXLMRobertaForQuestionAnswering"),r8r=o(" (XLM-RoBERTa model)"),t8r=l(),Eve=a("p"),a8r=o("Examples:"),n8r=l(),f(wL.$$.fragment),ESe=l(),Tf=a("h2"),VC=a("a"),yve=a("span"),f(AL.$$.fragment),s8r=l(),wve=a("span"),l8r=o("FlaxAutoModelForTokenClassification"),ySe=l(),jr=a("div"),f(LL.$$.fragment),i8r=l(),Ff=a("p"),d8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Ave=a("code"),c8r=o("from_pretrained()"),f8r=o("class method or the "),Lve=a("code"),m8r=o("from_config()"),g8r=o(`class
method.`),h8r=l(),BL=a("p"),p8r=o("This class cannot be instantiated directly using "),Bve=a("code"),_8r=o("__init__()"),u8r=o(" (throws an error)."),b8r=l(),St=a("div"),f(xL.$$.fragment),v8r=l(),xve=a("p"),T8r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),F8r=l(),Cf=a("p"),C8r=o(`Note:
Loading a model from its configuration file does `),kve=a("strong"),M8r=o("not"),E8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Rve=a("code"),y8r=o("from_pretrained()"),w8r=o("to load the model weights."),A8r=l(),Sve=a("p"),L8r=o("Examples:"),B8r=l(),f(kL.$$.fragment),x8r=l(),Po=a("div"),f(RL.$$.fragment),k8r=l(),Pve=a("p"),R8r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),S8r=l(),In=a("p"),P8r=o("The model class to instantiate is selected based on the "),$ve=a("code"),$8r=o("model_type"),I8r=o(` property of the config object (either
passed as an argument or loaded from `),Ive=a("code"),D8r=o("pretrained_model_name_or_path"),N8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dve=a("code"),j8r=o("pretrained_model_name_or_path"),q8r=o(":"),G8r=l(),Se=a("ul"),zC=a("li"),Nve=a("strong"),O8r=o("albert"),X8r=o(" \u2014 "),Oz=a("a"),V8r=o("FlaxAlbertForTokenClassification"),z8r=o(" (ALBERT model)"),W8r=l(),WC=a("li"),jve=a("strong"),Q8r=o("bert"),H8r=o(" \u2014 "),Xz=a("a"),U8r=o("FlaxBertForTokenClassification"),J8r=o(" (BERT model)"),Y8r=l(),QC=a("li"),qve=a("strong"),K8r=o("big_bird"),Z8r=o(" \u2014 "),Vz=a("a"),e9r=o("FlaxBigBirdForTokenClassification"),o9r=o(" (BigBird model)"),r9r=l(),HC=a("li"),Gve=a("strong"),t9r=o("distilbert"),a9r=o(" \u2014 "),zz=a("a"),n9r=o("FlaxDistilBertForTokenClassification"),s9r=o(" (DistilBERT model)"),l9r=l(),UC=a("li"),Ove=a("strong"),i9r=o("electra"),d9r=o(" \u2014 "),Wz=a("a"),c9r=o("FlaxElectraForTokenClassification"),f9r=o(" (ELECTRA model)"),m9r=l(),JC=a("li"),Xve=a("strong"),g9r=o("roberta"),h9r=o(" \u2014 "),Qz=a("a"),p9r=o("FlaxRobertaForTokenClassification"),_9r=o(" (RoBERTa model)"),u9r=l(),YC=a("li"),Vve=a("strong"),b9r=o("roformer"),v9r=o(" \u2014 "),Hz=a("a"),T9r=o("FlaxRoFormerForTokenClassification"),F9r=o(" (RoFormer model)"),C9r=l(),KC=a("li"),zve=a("strong"),M9r=o("xlm-roberta"),E9r=o(" \u2014 "),Uz=a("a"),y9r=o("FlaxXLMRobertaForTokenClassification"),w9r=o(" (XLM-RoBERTa model)"),A9r=l(),Wve=a("p"),L9r=o("Examples:"),B9r=l(),f(SL.$$.fragment),wSe=l(),Mf=a("h2"),ZC=a("a"),Qve=a("span"),f(PL.$$.fragment),x9r=l(),Hve=a("span"),k9r=o("FlaxAutoModelForMultipleChoice"),ASe=l(),qr=a("div"),f($L.$$.fragment),R9r=l(),Ef=a("p"),S9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Uve=a("code"),P9r=o("from_pretrained()"),$9r=o("class method or the "),Jve=a("code"),I9r=o("from_config()"),D9r=o(`class
method.`),N9r=l(),IL=a("p"),j9r=o("This class cannot be instantiated directly using "),Yve=a("code"),q9r=o("__init__()"),G9r=o(" (throws an error)."),O9r=l(),Pt=a("div"),f(DL.$$.fragment),X9r=l(),Kve=a("p"),V9r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),z9r=l(),yf=a("p"),W9r=o(`Note:
Loading a model from its configuration file does `),Zve=a("strong"),Q9r=o("not"),H9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),e6e=a("code"),U9r=o("from_pretrained()"),J9r=o("to load the model weights."),Y9r=l(),o6e=a("p"),K9r=o("Examples:"),Z9r=l(),f(NL.$$.fragment),eBr=l(),$o=a("div"),f(jL.$$.fragment),oBr=l(),r6e=a("p"),rBr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),tBr=l(),Dn=a("p"),aBr=o("The model class to instantiate is selected based on the "),t6e=a("code"),nBr=o("model_type"),sBr=o(` property of the config object (either
passed as an argument or loaded from `),a6e=a("code"),lBr=o("pretrained_model_name_or_path"),iBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n6e=a("code"),dBr=o("pretrained_model_name_or_path"),cBr=o(":"),fBr=l(),Pe=a("ul"),eM=a("li"),s6e=a("strong"),mBr=o("albert"),gBr=o(" \u2014 "),Jz=a("a"),hBr=o("FlaxAlbertForMultipleChoice"),pBr=o(" (ALBERT model)"),_Br=l(),oM=a("li"),l6e=a("strong"),uBr=o("bert"),bBr=o(" \u2014 "),Yz=a("a"),vBr=o("FlaxBertForMultipleChoice"),TBr=o(" (BERT model)"),FBr=l(),rM=a("li"),i6e=a("strong"),CBr=o("big_bird"),MBr=o(" \u2014 "),Kz=a("a"),EBr=o("FlaxBigBirdForMultipleChoice"),yBr=o(" (BigBird model)"),wBr=l(),tM=a("li"),d6e=a("strong"),ABr=o("distilbert"),LBr=o(" \u2014 "),Zz=a("a"),BBr=o("FlaxDistilBertForMultipleChoice"),xBr=o(" (DistilBERT model)"),kBr=l(),aM=a("li"),c6e=a("strong"),RBr=o("electra"),SBr=o(" \u2014 "),eW=a("a"),PBr=o("FlaxElectraForMultipleChoice"),$Br=o(" (ELECTRA model)"),IBr=l(),nM=a("li"),f6e=a("strong"),DBr=o("roberta"),NBr=o(" \u2014 "),oW=a("a"),jBr=o("FlaxRobertaForMultipleChoice"),qBr=o(" (RoBERTa model)"),GBr=l(),sM=a("li"),m6e=a("strong"),OBr=o("roformer"),XBr=o(" \u2014 "),rW=a("a"),VBr=o("FlaxRoFormerForMultipleChoice"),zBr=o(" (RoFormer model)"),WBr=l(),lM=a("li"),g6e=a("strong"),QBr=o("xlm-roberta"),HBr=o(" \u2014 "),tW=a("a"),UBr=o("FlaxXLMRobertaForMultipleChoice"),JBr=o(" (XLM-RoBERTa model)"),YBr=l(),h6e=a("p"),KBr=o("Examples:"),ZBr=l(),f(qL.$$.fragment),LSe=l(),wf=a("h2"),iM=a("a"),p6e=a("span"),f(GL.$$.fragment),exr=l(),_6e=a("span"),oxr=o("FlaxAutoModelForNextSentencePrediction"),BSe=l(),Gr=a("div"),f(OL.$$.fragment),rxr=l(),Af=a("p"),txr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),u6e=a("code"),axr=o("from_pretrained()"),nxr=o("class method or the "),b6e=a("code"),sxr=o("from_config()"),lxr=o(`class
method.`),ixr=l(),XL=a("p"),dxr=o("This class cannot be instantiated directly using "),v6e=a("code"),cxr=o("__init__()"),fxr=o(" (throws an error)."),mxr=l(),$t=a("div"),f(VL.$$.fragment),gxr=l(),T6e=a("p"),hxr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),pxr=l(),Lf=a("p"),_xr=o(`Note:
Loading a model from its configuration file does `),F6e=a("strong"),uxr=o("not"),bxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),C6e=a("code"),vxr=o("from_pretrained()"),Txr=o("to load the model weights."),Fxr=l(),M6e=a("p"),Cxr=o("Examples:"),Mxr=l(),f(zL.$$.fragment),Exr=l(),Io=a("div"),f(WL.$$.fragment),yxr=l(),E6e=a("p"),wxr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Axr=l(),Nn=a("p"),Lxr=o("The model class to instantiate is selected based on the "),y6e=a("code"),Bxr=o("model_type"),xxr=o(` property of the config object (either
passed as an argument or loaded from `),w6e=a("code"),kxr=o("pretrained_model_name_or_path"),Rxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A6e=a("code"),Sxr=o("pretrained_model_name_or_path"),Pxr=o(":"),$xr=l(),L6e=a("ul"),dM=a("li"),B6e=a("strong"),Ixr=o("bert"),Dxr=o(" \u2014 "),aW=a("a"),Nxr=o("FlaxBertForNextSentencePrediction"),jxr=o(" (BERT model)"),qxr=l(),x6e=a("p"),Gxr=o("Examples:"),Oxr=l(),f(QL.$$.fragment),xSe=l(),Bf=a("h2"),cM=a("a"),k6e=a("span"),f(HL.$$.fragment),Xxr=l(),R6e=a("span"),Vxr=o("FlaxAutoModelForImageClassification"),kSe=l(),Or=a("div"),f(UL.$$.fragment),zxr=l(),xf=a("p"),Wxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),S6e=a("code"),Qxr=o("from_pretrained()"),Hxr=o("class method or the "),P6e=a("code"),Uxr=o("from_config()"),Jxr=o(`class
method.`),Yxr=l(),JL=a("p"),Kxr=o("This class cannot be instantiated directly using "),$6e=a("code"),Zxr=o("__init__()"),ekr=o(" (throws an error)."),okr=l(),It=a("div"),f(YL.$$.fragment),rkr=l(),I6e=a("p"),tkr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),akr=l(),kf=a("p"),nkr=o(`Note:
Loading a model from its configuration file does `),D6e=a("strong"),skr=o("not"),lkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),N6e=a("code"),ikr=o("from_pretrained()"),dkr=o("to load the model weights."),ckr=l(),j6e=a("p"),fkr=o("Examples:"),mkr=l(),f(KL.$$.fragment),gkr=l(),Do=a("div"),f(ZL.$$.fragment),hkr=l(),q6e=a("p"),pkr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),_kr=l(),jn=a("p"),ukr=o("The model class to instantiate is selected based on the "),G6e=a("code"),bkr=o("model_type"),vkr=o(` property of the config object (either
passed as an argument or loaded from `),O6e=a("code"),Tkr=o("pretrained_model_name_or_path"),Fkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X6e=a("code"),Ckr=o("pretrained_model_name_or_path"),Mkr=o(":"),Ekr=l(),e8=a("ul"),fM=a("li"),V6e=a("strong"),ykr=o("beit"),wkr=o(" \u2014 "),nW=a("a"),Akr=o("FlaxBeitForImageClassification"),Lkr=o(" (BEiT model)"),Bkr=l(),mM=a("li"),z6e=a("strong"),xkr=o("vit"),kkr=o(" \u2014 "),sW=a("a"),Rkr=o("FlaxViTForImageClassification"),Skr=o(" (ViT model)"),Pkr=l(),W6e=a("p"),$kr=o("Examples:"),Ikr=l(),f(o8.$$.fragment),RSe=l(),Rf=a("h2"),gM=a("a"),Q6e=a("span"),f(r8.$$.fragment),Dkr=l(),H6e=a("span"),Nkr=o("FlaxAutoModelForVision2Seq"),SSe=l(),Xr=a("div"),f(t8.$$.fragment),jkr=l(),Sf=a("p"),qkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),U6e=a("code"),Gkr=o("from_pretrained()"),Okr=o("class method or the "),J6e=a("code"),Xkr=o("from_config()"),Vkr=o(`class
method.`),zkr=l(),a8=a("p"),Wkr=o("This class cannot be instantiated directly using "),Y6e=a("code"),Qkr=o("__init__()"),Hkr=o(" (throws an error)."),Ukr=l(),Dt=a("div"),f(n8.$$.fragment),Jkr=l(),K6e=a("p"),Ykr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Kkr=l(),Pf=a("p"),Zkr=o(`Note:
Loading a model from its configuration file does `),Z6e=a("strong"),eRr=o("not"),oRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eTe=a("code"),rRr=o("from_pretrained()"),tRr=o("to load the model weights."),aRr=l(),oTe=a("p"),nRr=o("Examples:"),sRr=l(),f(s8.$$.fragment),lRr=l(),No=a("div"),f(l8.$$.fragment),iRr=l(),rTe=a("p"),dRr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),cRr=l(),qn=a("p"),fRr=o("The model class to instantiate is selected based on the "),tTe=a("code"),mRr=o("model_type"),gRr=o(` property of the config object (either
passed as an argument or loaded from `),aTe=a("code"),hRr=o("pretrained_model_name_or_path"),pRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nTe=a("code"),_Rr=o("pretrained_model_name_or_path"),uRr=o(":"),bRr=l(),sTe=a("ul"),hM=a("li"),lTe=a("strong"),vRr=o("vision-encoder-decoder"),TRr=o(" \u2014 "),lW=a("a"),FRr=o("FlaxVisionEncoderDecoderModel"),CRr=o(" (Vision Encoder decoder model)"),MRr=l(),iTe=a("p"),ERr=o("Examples:"),yRr=l(),f(i8.$$.fragment),this.h()},l(c){const u=OCt('[data-svelte="svelte-1phssyn"]',document.head);Z=n(u,"META",{name:!0,content:!0}),u.forEach(t),io=i(c),de=n(c,"H1",{class:!0});var d8=s(de);Ee=n(d8,"A",{id:!0,class:!0,href:!0});var dTe=s(Ee);lo=n(dTe,"SPAN",{});var cTe=s(lo);m(me.$$.fragment,cTe),cTe.forEach(t),dTe.forEach(t),Ce=i(d8),Vo=n(d8,"SPAN",{});var ARr=s(Vo);Ii=r(ARr,"Auto Classes"),ARr.forEach(t),d8.forEach(t),Df=i(c),fa=n(c,"P",{});var $Se=s(fa);Di=r($Se,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ni=n($Se,"CODE",{});var LRr=s(Ni);hE=r(LRr,"from_pretrained()"),LRr.forEach(t),Nf=r($Se,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),$Se.forEach(t),Be=i(c),co=n(c,"P",{});var pM=s(co);ji=r(pM,"Instantiating one of "),Gn=n(pM,"A",{href:!0});var BRr=s(Gn);pE=r(BRr,"AutoConfig"),BRr.forEach(t),On=r(pM,", "),Xn=n(pM,"A",{href:!0});var xRr=s(Xn);_E=r(xRr,"AutoModel"),xRr.forEach(t),qi=r(pM,`, and
`),Vn=n(pM,"A",{href:!0});var kRr=s(Vn);uE=r(kRr,"AutoTokenizer"),kRr.forEach(t),Gi=r(pM," will directly create a class of the relevant architecture. For instance"),pM.forEach(t),jf=i(c),m(qa.$$.fragment,c),fo=i(c),_e=n(c,"P",{});var ISe=s(_e);s9=r(ISe,"will create a model that is an instance of "),Oi=n(ISe,"A",{href:!0});var RRr=s(Oi);l9=r(RRr,"BertModel"),RRr.forEach(t),i9=r(ISe,"."),ISe.forEach(t),zo=i(c),Ga=n(c,"P",{});var DSe=s(Ga);d9=r(DSe,"There is one class of "),qf=n(DSe,"CODE",{});var SRr=s(qf);c9=r(SRr,"AutoModel"),SRr.forEach(t),W$e=r(DSe," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),DSe.forEach(t),Ske=i(c),Xi=n(c,"H2",{class:!0});var NSe=s(Xi);Gf=n(NSe,"A",{id:!0,class:!0,href:!0});var PRr=s(Gf);oH=n(PRr,"SPAN",{});var $Rr=s(oH);m(bE.$$.fragment,$Rr),$Rr.forEach(t),PRr.forEach(t),Q$e=i(NSe),rH=n(NSe,"SPAN",{});var IRr=s(rH);H$e=r(IRr,"Extending the Auto Classes"),IRr.forEach(t),NSe.forEach(t),Pke=i(c),zn=n(c,"P",{});var iW=s(zn);U$e=r(iW,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),tH=n(iW,"CODE",{});var DRr=s(tH);J$e=r(DRr,"NewModel"),DRr.forEach(t),Y$e=r(iW,", make sure you have a "),aH=n(iW,"CODE",{});var NRr=s(aH);K$e=r(NRr,"NewModelConfig"),NRr.forEach(t),Z$e=r(iW,` then you can add those to the auto
classes like this:`),iW.forEach(t),$ke=i(c),m(vE.$$.fragment,c),Ike=i(c),f9=n(c,"P",{});var jRr=s(f9);eIe=r(jRr,"You will then be able to use the auto classes like you would usually do!"),jRr.forEach(t),Dke=i(c),m(Of.$$.fragment,c),Nke=i(c),Vi=n(c,"H2",{class:!0});var jSe=s(Vi);Xf=n(jSe,"A",{id:!0,class:!0,href:!0});var qRr=s(Xf);nH=n(qRr,"SPAN",{});var GRr=s(nH);m(TE.$$.fragment,GRr),GRr.forEach(t),qRr.forEach(t),oIe=i(jSe),sH=n(jSe,"SPAN",{});var ORr=s(sH);rIe=r(ORr,"AutoConfig"),ORr.forEach(t),jSe.forEach(t),jke=i(c),Wo=n(c,"DIV",{class:!0});var Os=s(Wo);m(FE.$$.fragment,Os),tIe=i(Os),CE=n(Os,"P",{});var qSe=s(CE);aIe=r(qSe,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),m9=n(qSe,"A",{href:!0});var XRr=s(m9);nIe=r(XRr,"from_pretrained()"),XRr.forEach(t),sIe=r(qSe," class method."),qSe.forEach(t),lIe=i(Os),ME=n(Os,"P",{});var GSe=s(ME);iIe=r(GSe,"This class cannot be instantiated directly using "),lH=n(GSe,"CODE",{});var VRr=s(lH);dIe=r(VRr,"__init__()"),VRr.forEach(t),cIe=r(GSe," (throws an error)."),GSe.forEach(t),fIe=i(Os),mo=n(Os,"DIV",{class:!0});var ga=s(mo);m(EE.$$.fragment,ga),mIe=i(ga),iH=n(ga,"P",{});var zRr=s(iH);gIe=r(zRr,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),zRr.forEach(t),hIe=i(ga),zi=n(ga,"P",{});var dW=s(zi);pIe=r(dW,"The configuration class to instantiate is selected based on the "),dH=n(dW,"CODE",{});var WRr=s(dH);_Ie=r(WRr,"model_type"),WRr.forEach(t),uIe=r(dW,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),cH=n(dW,"CODE",{});var QRr=s(cH);bIe=r(QRr,"pretrained_model_name_or_path"),QRr.forEach(t),vIe=r(dW,":"),dW.forEach(t),TIe=i(ga),v=n(ga,"UL",{});var T=s(v);Vf=n(T,"LI",{});var fTe=s(Vf);fH=n(fTe,"STRONG",{});var HRr=s(fH);FIe=r(HRr,"albert"),HRr.forEach(t),CIe=r(fTe," \u2014 "),g9=n(fTe,"A",{href:!0});var URr=s(g9);MIe=r(URr,"AlbertConfig"),URr.forEach(t),EIe=r(fTe," (ALBERT model)"),fTe.forEach(t),yIe=i(T),zf=n(T,"LI",{});var mTe=s(zf);mH=n(mTe,"STRONG",{});var JRr=s(mH);wIe=r(JRr,"bart"),JRr.forEach(t),AIe=r(mTe," \u2014 "),h9=n(mTe,"A",{href:!0});var YRr=s(h9);LIe=r(YRr,"BartConfig"),YRr.forEach(t),BIe=r(mTe," (BART model)"),mTe.forEach(t),xIe=i(T),Wf=n(T,"LI",{});var gTe=s(Wf);gH=n(gTe,"STRONG",{});var KRr=s(gH);kIe=r(KRr,"beit"),KRr.forEach(t),RIe=r(gTe," \u2014 "),p9=n(gTe,"A",{href:!0});var ZRr=s(p9);SIe=r(ZRr,"BeitConfig"),ZRr.forEach(t),PIe=r(gTe," (BEiT model)"),gTe.forEach(t),$Ie=i(T),Qf=n(T,"LI",{});var hTe=s(Qf);hH=n(hTe,"STRONG",{});var eSr=s(hH);IIe=r(eSr,"bert"),eSr.forEach(t),DIe=r(hTe," \u2014 "),_9=n(hTe,"A",{href:!0});var oSr=s(_9);NIe=r(oSr,"BertConfig"),oSr.forEach(t),jIe=r(hTe," (BERT model)"),hTe.forEach(t),qIe=i(T),Hf=n(T,"LI",{});var pTe=s(Hf);pH=n(pTe,"STRONG",{});var rSr=s(pH);GIe=r(rSr,"bert-generation"),rSr.forEach(t),OIe=r(pTe," \u2014 "),u9=n(pTe,"A",{href:!0});var tSr=s(u9);XIe=r(tSr,"BertGenerationConfig"),tSr.forEach(t),VIe=r(pTe," (Bert Generation model)"),pTe.forEach(t),zIe=i(T),Uf=n(T,"LI",{});var _Te=s(Uf);_H=n(_Te,"STRONG",{});var aSr=s(_H);WIe=r(aSr,"big_bird"),aSr.forEach(t),QIe=r(_Te," \u2014 "),b9=n(_Te,"A",{href:!0});var nSr=s(b9);HIe=r(nSr,"BigBirdConfig"),nSr.forEach(t),UIe=r(_Te," (BigBird model)"),_Te.forEach(t),JIe=i(T),Jf=n(T,"LI",{});var uTe=s(Jf);uH=n(uTe,"STRONG",{});var sSr=s(uH);YIe=r(sSr,"bigbird_pegasus"),sSr.forEach(t),KIe=r(uTe," \u2014 "),v9=n(uTe,"A",{href:!0});var lSr=s(v9);ZIe=r(lSr,"BigBirdPegasusConfig"),lSr.forEach(t),eDe=r(uTe," (BigBirdPegasus model)"),uTe.forEach(t),oDe=i(T),Yf=n(T,"LI",{});var bTe=s(Yf);bH=n(bTe,"STRONG",{});var iSr=s(bH);rDe=r(iSr,"blenderbot"),iSr.forEach(t),tDe=r(bTe," \u2014 "),T9=n(bTe,"A",{href:!0});var dSr=s(T9);aDe=r(dSr,"BlenderbotConfig"),dSr.forEach(t),nDe=r(bTe," (Blenderbot model)"),bTe.forEach(t),sDe=i(T),Kf=n(T,"LI",{});var vTe=s(Kf);vH=n(vTe,"STRONG",{});var cSr=s(vH);lDe=r(cSr,"blenderbot-small"),cSr.forEach(t),iDe=r(vTe," \u2014 "),F9=n(vTe,"A",{href:!0});var fSr=s(F9);dDe=r(fSr,"BlenderbotSmallConfig"),fSr.forEach(t),cDe=r(vTe," (BlenderbotSmall model)"),vTe.forEach(t),fDe=i(T),Zf=n(T,"LI",{});var TTe=s(Zf);TH=n(TTe,"STRONG",{});var mSr=s(TH);mDe=r(mSr,"camembert"),mSr.forEach(t),gDe=r(TTe," \u2014 "),C9=n(TTe,"A",{href:!0});var gSr=s(C9);hDe=r(gSr,"CamembertConfig"),gSr.forEach(t),pDe=r(TTe," (CamemBERT model)"),TTe.forEach(t),_De=i(T),em=n(T,"LI",{});var FTe=s(em);FH=n(FTe,"STRONG",{});var hSr=s(FH);uDe=r(hSr,"canine"),hSr.forEach(t),bDe=r(FTe," \u2014 "),M9=n(FTe,"A",{href:!0});var pSr=s(M9);vDe=r(pSr,"CanineConfig"),pSr.forEach(t),TDe=r(FTe," (Canine model)"),FTe.forEach(t),FDe=i(T),om=n(T,"LI",{});var CTe=s(om);CH=n(CTe,"STRONG",{});var _Sr=s(CH);CDe=r(_Sr,"clip"),_Sr.forEach(t),MDe=r(CTe," \u2014 "),E9=n(CTe,"A",{href:!0});var uSr=s(E9);EDe=r(uSr,"CLIPConfig"),uSr.forEach(t),yDe=r(CTe," (CLIP model)"),CTe.forEach(t),wDe=i(T),rm=n(T,"LI",{});var MTe=s(rm);MH=n(MTe,"STRONG",{});var bSr=s(MH);ADe=r(bSr,"convbert"),bSr.forEach(t),LDe=r(MTe," \u2014 "),y9=n(MTe,"A",{href:!0});var vSr=s(y9);BDe=r(vSr,"ConvBertConfig"),vSr.forEach(t),xDe=r(MTe," (ConvBERT model)"),MTe.forEach(t),kDe=i(T),tm=n(T,"LI",{});var ETe=s(tm);EH=n(ETe,"STRONG",{});var TSr=s(EH);RDe=r(TSr,"convnext"),TSr.forEach(t),SDe=r(ETe," \u2014 "),w9=n(ETe,"A",{href:!0});var FSr=s(w9);PDe=r(FSr,"ConvNextConfig"),FSr.forEach(t),$De=r(ETe," (ConvNext model)"),ETe.forEach(t),IDe=i(T),am=n(T,"LI",{});var yTe=s(am);yH=n(yTe,"STRONG",{});var CSr=s(yH);DDe=r(CSr,"ctrl"),CSr.forEach(t),NDe=r(yTe," \u2014 "),A9=n(yTe,"A",{href:!0});var MSr=s(A9);jDe=r(MSr,"CTRLConfig"),MSr.forEach(t),qDe=r(yTe," (CTRL model)"),yTe.forEach(t),GDe=i(T),nm=n(T,"LI",{});var wTe=s(nm);wH=n(wTe,"STRONG",{});var ESr=s(wH);ODe=r(ESr,"data2vec-audio"),ESr.forEach(t),XDe=r(wTe," \u2014 "),L9=n(wTe,"A",{href:!0});var ySr=s(L9);VDe=r(ySr,"Data2VecAudioConfig"),ySr.forEach(t),zDe=r(wTe," (Data2VecAudio model)"),wTe.forEach(t),WDe=i(T),sm=n(T,"LI",{});var ATe=s(sm);AH=n(ATe,"STRONG",{});var wSr=s(AH);QDe=r(wSr,"data2vec-text"),wSr.forEach(t),HDe=r(ATe," \u2014 "),B9=n(ATe,"A",{href:!0});var ASr=s(B9);UDe=r(ASr,"Data2VecTextConfig"),ASr.forEach(t),JDe=r(ATe," (Data2VecText model)"),ATe.forEach(t),YDe=i(T),lm=n(T,"LI",{});var LTe=s(lm);LH=n(LTe,"STRONG",{});var LSr=s(LH);KDe=r(LSr,"deberta"),LSr.forEach(t),ZDe=r(LTe," \u2014 "),x9=n(LTe,"A",{href:!0});var BSr=s(x9);eNe=r(BSr,"DebertaConfig"),BSr.forEach(t),oNe=r(LTe," (DeBERTa model)"),LTe.forEach(t),rNe=i(T),im=n(T,"LI",{});var BTe=s(im);BH=n(BTe,"STRONG",{});var xSr=s(BH);tNe=r(xSr,"deberta-v2"),xSr.forEach(t),aNe=r(BTe," \u2014 "),k9=n(BTe,"A",{href:!0});var kSr=s(k9);nNe=r(kSr,"DebertaV2Config"),kSr.forEach(t),sNe=r(BTe," (DeBERTa-v2 model)"),BTe.forEach(t),lNe=i(T),dm=n(T,"LI",{});var xTe=s(dm);xH=n(xTe,"STRONG",{});var RSr=s(xH);iNe=r(RSr,"decision_transformer"),RSr.forEach(t),dNe=r(xTe," \u2014 "),R9=n(xTe,"A",{href:!0});var SSr=s(R9);cNe=r(SSr,"DecisionTransformerConfig"),SSr.forEach(t),fNe=r(xTe," (Decision Transformer model)"),xTe.forEach(t),mNe=i(T),cm=n(T,"LI",{});var kTe=s(cm);kH=n(kTe,"STRONG",{});var PSr=s(kH);gNe=r(PSr,"deit"),PSr.forEach(t),hNe=r(kTe," \u2014 "),S9=n(kTe,"A",{href:!0});var $Sr=s(S9);pNe=r($Sr,"DeiTConfig"),$Sr.forEach(t),_Ne=r(kTe," (DeiT model)"),kTe.forEach(t),uNe=i(T),fm=n(T,"LI",{});var RTe=s(fm);RH=n(RTe,"STRONG",{});var ISr=s(RH);bNe=r(ISr,"detr"),ISr.forEach(t),vNe=r(RTe," \u2014 "),P9=n(RTe,"A",{href:!0});var DSr=s(P9);TNe=r(DSr,"DetrConfig"),DSr.forEach(t),FNe=r(RTe," (DETR model)"),RTe.forEach(t),CNe=i(T),mm=n(T,"LI",{});var STe=s(mm);SH=n(STe,"STRONG",{});var NSr=s(SH);MNe=r(NSr,"distilbert"),NSr.forEach(t),ENe=r(STe," \u2014 "),$9=n(STe,"A",{href:!0});var jSr=s($9);yNe=r(jSr,"DistilBertConfig"),jSr.forEach(t),wNe=r(STe," (DistilBERT model)"),STe.forEach(t),ANe=i(T),gm=n(T,"LI",{});var PTe=s(gm);PH=n(PTe,"STRONG",{});var qSr=s(PH);LNe=r(qSr,"dpr"),qSr.forEach(t),BNe=r(PTe," \u2014 "),I9=n(PTe,"A",{href:!0});var GSr=s(I9);xNe=r(GSr,"DPRConfig"),GSr.forEach(t),kNe=r(PTe," (DPR model)"),PTe.forEach(t),RNe=i(T),hm=n(T,"LI",{});var $Te=s(hm);$H=n($Te,"STRONG",{});var OSr=s($H);SNe=r(OSr,"dpt"),OSr.forEach(t),PNe=r($Te," \u2014 "),D9=n($Te,"A",{href:!0});var XSr=s(D9);$Ne=r(XSr,"DPTConfig"),XSr.forEach(t),INe=r($Te," (DPT model)"),$Te.forEach(t),DNe=i(T),pm=n(T,"LI",{});var ITe=s(pm);IH=n(ITe,"STRONG",{});var VSr=s(IH);NNe=r(VSr,"electra"),VSr.forEach(t),jNe=r(ITe," \u2014 "),N9=n(ITe,"A",{href:!0});var zSr=s(N9);qNe=r(zSr,"ElectraConfig"),zSr.forEach(t),GNe=r(ITe," (ELECTRA model)"),ITe.forEach(t),ONe=i(T),_m=n(T,"LI",{});var DTe=s(_m);DH=n(DTe,"STRONG",{});var WSr=s(DH);XNe=r(WSr,"encoder-decoder"),WSr.forEach(t),VNe=r(DTe," \u2014 "),j9=n(DTe,"A",{href:!0});var QSr=s(j9);zNe=r(QSr,"EncoderDecoderConfig"),QSr.forEach(t),WNe=r(DTe," (Encoder decoder model)"),DTe.forEach(t),QNe=i(T),um=n(T,"LI",{});var NTe=s(um);NH=n(NTe,"STRONG",{});var HSr=s(NH);HNe=r(HSr,"flaubert"),HSr.forEach(t),UNe=r(NTe," \u2014 "),q9=n(NTe,"A",{href:!0});var USr=s(q9);JNe=r(USr,"FlaubertConfig"),USr.forEach(t),YNe=r(NTe," (FlauBERT model)"),NTe.forEach(t),KNe=i(T),bm=n(T,"LI",{});var jTe=s(bm);jH=n(jTe,"STRONG",{});var JSr=s(jH);ZNe=r(JSr,"fnet"),JSr.forEach(t),eje=r(jTe," \u2014 "),G9=n(jTe,"A",{href:!0});var YSr=s(G9);oje=r(YSr,"FNetConfig"),YSr.forEach(t),rje=r(jTe," (FNet model)"),jTe.forEach(t),tje=i(T),vm=n(T,"LI",{});var qTe=s(vm);qH=n(qTe,"STRONG",{});var KSr=s(qH);aje=r(KSr,"fsmt"),KSr.forEach(t),nje=r(qTe," \u2014 "),O9=n(qTe,"A",{href:!0});var ZSr=s(O9);sje=r(ZSr,"FSMTConfig"),ZSr.forEach(t),lje=r(qTe," (FairSeq Machine-Translation model)"),qTe.forEach(t),ije=i(T),Tm=n(T,"LI",{});var GTe=s(Tm);GH=n(GTe,"STRONG",{});var ePr=s(GH);dje=r(ePr,"funnel"),ePr.forEach(t),cje=r(GTe," \u2014 "),X9=n(GTe,"A",{href:!0});var oPr=s(X9);fje=r(oPr,"FunnelConfig"),oPr.forEach(t),mje=r(GTe," (Funnel Transformer model)"),GTe.forEach(t),gje=i(T),Fm=n(T,"LI",{});var OTe=s(Fm);OH=n(OTe,"STRONG",{});var rPr=s(OH);hje=r(rPr,"glpn"),rPr.forEach(t),pje=r(OTe," \u2014 "),V9=n(OTe,"A",{href:!0});var tPr=s(V9);_je=r(tPr,"GLPNConfig"),tPr.forEach(t),uje=r(OTe," (GLPN model)"),OTe.forEach(t),bje=i(T),Cm=n(T,"LI",{});var XTe=s(Cm);XH=n(XTe,"STRONG",{});var aPr=s(XH);vje=r(aPr,"gpt2"),aPr.forEach(t),Tje=r(XTe," \u2014 "),z9=n(XTe,"A",{href:!0});var nPr=s(z9);Fje=r(nPr,"GPT2Config"),nPr.forEach(t),Cje=r(XTe," (OpenAI GPT-2 model)"),XTe.forEach(t),Mje=i(T),Mm=n(T,"LI",{});var VTe=s(Mm);VH=n(VTe,"STRONG",{});var sPr=s(VH);Eje=r(sPr,"gpt_neo"),sPr.forEach(t),yje=r(VTe," \u2014 "),W9=n(VTe,"A",{href:!0});var lPr=s(W9);wje=r(lPr,"GPTNeoConfig"),lPr.forEach(t),Aje=r(VTe," (GPT Neo model)"),VTe.forEach(t),Lje=i(T),Em=n(T,"LI",{});var zTe=s(Em);zH=n(zTe,"STRONG",{});var iPr=s(zH);Bje=r(iPr,"gptj"),iPr.forEach(t),xje=r(zTe," \u2014 "),Q9=n(zTe,"A",{href:!0});var dPr=s(Q9);kje=r(dPr,"GPTJConfig"),dPr.forEach(t),Rje=r(zTe," (GPT-J model)"),zTe.forEach(t),Sje=i(T),ym=n(T,"LI",{});var WTe=s(ym);WH=n(WTe,"STRONG",{});var cPr=s(WH);Pje=r(cPr,"hubert"),cPr.forEach(t),$je=r(WTe," \u2014 "),H9=n(WTe,"A",{href:!0});var fPr=s(H9);Ije=r(fPr,"HubertConfig"),fPr.forEach(t),Dje=r(WTe," (Hubert model)"),WTe.forEach(t),Nje=i(T),wm=n(T,"LI",{});var QTe=s(wm);QH=n(QTe,"STRONG",{});var mPr=s(QH);jje=r(mPr,"ibert"),mPr.forEach(t),qje=r(QTe," \u2014 "),U9=n(QTe,"A",{href:!0});var gPr=s(U9);Gje=r(gPr,"IBertConfig"),gPr.forEach(t),Oje=r(QTe," (I-BERT model)"),QTe.forEach(t),Xje=i(T),Am=n(T,"LI",{});var HTe=s(Am);HH=n(HTe,"STRONG",{});var hPr=s(HH);Vje=r(hPr,"imagegpt"),hPr.forEach(t),zje=r(HTe," \u2014 "),J9=n(HTe,"A",{href:!0});var pPr=s(J9);Wje=r(pPr,"ImageGPTConfig"),pPr.forEach(t),Qje=r(HTe," (ImageGPT model)"),HTe.forEach(t),Hje=i(T),Lm=n(T,"LI",{});var UTe=s(Lm);UH=n(UTe,"STRONG",{});var _Pr=s(UH);Uje=r(_Pr,"layoutlm"),_Pr.forEach(t),Jje=r(UTe," \u2014 "),Y9=n(UTe,"A",{href:!0});var uPr=s(Y9);Yje=r(uPr,"LayoutLMConfig"),uPr.forEach(t),Kje=r(UTe," (LayoutLM model)"),UTe.forEach(t),Zje=i(T),Bm=n(T,"LI",{});var JTe=s(Bm);JH=n(JTe,"STRONG",{});var bPr=s(JH);eqe=r(bPr,"layoutlmv2"),bPr.forEach(t),oqe=r(JTe," \u2014 "),K9=n(JTe,"A",{href:!0});var vPr=s(K9);rqe=r(vPr,"LayoutLMv2Config"),vPr.forEach(t),tqe=r(JTe," (LayoutLMv2 model)"),JTe.forEach(t),aqe=i(T),xm=n(T,"LI",{});var YTe=s(xm);YH=n(YTe,"STRONG",{});var TPr=s(YH);nqe=r(TPr,"led"),TPr.forEach(t),sqe=r(YTe," \u2014 "),Z9=n(YTe,"A",{href:!0});var FPr=s(Z9);lqe=r(FPr,"LEDConfig"),FPr.forEach(t),iqe=r(YTe," (LED model)"),YTe.forEach(t),dqe=i(T),km=n(T,"LI",{});var KTe=s(km);KH=n(KTe,"STRONG",{});var CPr=s(KH);cqe=r(CPr,"longformer"),CPr.forEach(t),fqe=r(KTe," \u2014 "),eB=n(KTe,"A",{href:!0});var MPr=s(eB);mqe=r(MPr,"LongformerConfig"),MPr.forEach(t),gqe=r(KTe," (Longformer model)"),KTe.forEach(t),hqe=i(T),Rm=n(T,"LI",{});var ZTe=s(Rm);ZH=n(ZTe,"STRONG",{});var EPr=s(ZH);pqe=r(EPr,"luke"),EPr.forEach(t),_qe=r(ZTe," \u2014 "),oB=n(ZTe,"A",{href:!0});var yPr=s(oB);uqe=r(yPr,"LukeConfig"),yPr.forEach(t),bqe=r(ZTe," (LUKE model)"),ZTe.forEach(t),vqe=i(T),Sm=n(T,"LI",{});var e7e=s(Sm);eU=n(e7e,"STRONG",{});var wPr=s(eU);Tqe=r(wPr,"lxmert"),wPr.forEach(t),Fqe=r(e7e," \u2014 "),rB=n(e7e,"A",{href:!0});var APr=s(rB);Cqe=r(APr,"LxmertConfig"),APr.forEach(t),Mqe=r(e7e," (LXMERT model)"),e7e.forEach(t),Eqe=i(T),Pm=n(T,"LI",{});var o7e=s(Pm);oU=n(o7e,"STRONG",{});var LPr=s(oU);yqe=r(LPr,"m2m_100"),LPr.forEach(t),wqe=r(o7e," \u2014 "),tB=n(o7e,"A",{href:!0});var BPr=s(tB);Aqe=r(BPr,"M2M100Config"),BPr.forEach(t),Lqe=r(o7e," (M2M100 model)"),o7e.forEach(t),Bqe=i(T),$m=n(T,"LI",{});var r7e=s($m);rU=n(r7e,"STRONG",{});var xPr=s(rU);xqe=r(xPr,"marian"),xPr.forEach(t),kqe=r(r7e," \u2014 "),aB=n(r7e,"A",{href:!0});var kPr=s(aB);Rqe=r(kPr,"MarianConfig"),kPr.forEach(t),Sqe=r(r7e," (Marian model)"),r7e.forEach(t),Pqe=i(T),Im=n(T,"LI",{});var t7e=s(Im);tU=n(t7e,"STRONG",{});var RPr=s(tU);$qe=r(RPr,"maskformer"),RPr.forEach(t),Iqe=r(t7e," \u2014 "),nB=n(t7e,"A",{href:!0});var SPr=s(nB);Dqe=r(SPr,"MaskFormerConfig"),SPr.forEach(t),Nqe=r(t7e," (MaskFormer model)"),t7e.forEach(t),jqe=i(T),Dm=n(T,"LI",{});var a7e=s(Dm);aU=n(a7e,"STRONG",{});var PPr=s(aU);qqe=r(PPr,"mbart"),PPr.forEach(t),Gqe=r(a7e," \u2014 "),sB=n(a7e,"A",{href:!0});var $Pr=s(sB);Oqe=r($Pr,"MBartConfig"),$Pr.forEach(t),Xqe=r(a7e," (mBART model)"),a7e.forEach(t),Vqe=i(T),Nm=n(T,"LI",{});var n7e=s(Nm);nU=n(n7e,"STRONG",{});var IPr=s(nU);zqe=r(IPr,"megatron-bert"),IPr.forEach(t),Wqe=r(n7e," \u2014 "),lB=n(n7e,"A",{href:!0});var DPr=s(lB);Qqe=r(DPr,"MegatronBertConfig"),DPr.forEach(t),Hqe=r(n7e," (MegatronBert model)"),n7e.forEach(t),Uqe=i(T),jm=n(T,"LI",{});var s7e=s(jm);sU=n(s7e,"STRONG",{});var NPr=s(sU);Jqe=r(NPr,"mobilebert"),NPr.forEach(t),Yqe=r(s7e," \u2014 "),iB=n(s7e,"A",{href:!0});var jPr=s(iB);Kqe=r(jPr,"MobileBertConfig"),jPr.forEach(t),Zqe=r(s7e," (MobileBERT model)"),s7e.forEach(t),eGe=i(T),qm=n(T,"LI",{});var l7e=s(qm);lU=n(l7e,"STRONG",{});var qPr=s(lU);oGe=r(qPr,"mpnet"),qPr.forEach(t),rGe=r(l7e," \u2014 "),dB=n(l7e,"A",{href:!0});var GPr=s(dB);tGe=r(GPr,"MPNetConfig"),GPr.forEach(t),aGe=r(l7e," (MPNet model)"),l7e.forEach(t),nGe=i(T),Gm=n(T,"LI",{});var i7e=s(Gm);iU=n(i7e,"STRONG",{});var OPr=s(iU);sGe=r(OPr,"mt5"),OPr.forEach(t),lGe=r(i7e," \u2014 "),cB=n(i7e,"A",{href:!0});var XPr=s(cB);iGe=r(XPr,"MT5Config"),XPr.forEach(t),dGe=r(i7e," (mT5 model)"),i7e.forEach(t),cGe=i(T),Om=n(T,"LI",{});var d7e=s(Om);dU=n(d7e,"STRONG",{});var VPr=s(dU);fGe=r(VPr,"nystromformer"),VPr.forEach(t),mGe=r(d7e," \u2014 "),fB=n(d7e,"A",{href:!0});var zPr=s(fB);gGe=r(zPr,"NystromformerConfig"),zPr.forEach(t),hGe=r(d7e," (Nystromformer model)"),d7e.forEach(t),pGe=i(T),Xm=n(T,"LI",{});var c7e=s(Xm);cU=n(c7e,"STRONG",{});var WPr=s(cU);_Ge=r(WPr,"openai-gpt"),WPr.forEach(t),uGe=r(c7e," \u2014 "),mB=n(c7e,"A",{href:!0});var QPr=s(mB);bGe=r(QPr,"OpenAIGPTConfig"),QPr.forEach(t),vGe=r(c7e," (OpenAI GPT model)"),c7e.forEach(t),TGe=i(T),Vm=n(T,"LI",{});var f7e=s(Vm);fU=n(f7e,"STRONG",{});var HPr=s(fU);FGe=r(HPr,"pegasus"),HPr.forEach(t),CGe=r(f7e," \u2014 "),gB=n(f7e,"A",{href:!0});var UPr=s(gB);MGe=r(UPr,"PegasusConfig"),UPr.forEach(t),EGe=r(f7e," (Pegasus model)"),f7e.forEach(t),yGe=i(T),zm=n(T,"LI",{});var m7e=s(zm);mU=n(m7e,"STRONG",{});var JPr=s(mU);wGe=r(JPr,"perceiver"),JPr.forEach(t),AGe=r(m7e," \u2014 "),hB=n(m7e,"A",{href:!0});var YPr=s(hB);LGe=r(YPr,"PerceiverConfig"),YPr.forEach(t),BGe=r(m7e," (Perceiver model)"),m7e.forEach(t),xGe=i(T),Wm=n(T,"LI",{});var g7e=s(Wm);gU=n(g7e,"STRONG",{});var KPr=s(gU);kGe=r(KPr,"plbart"),KPr.forEach(t),RGe=r(g7e," \u2014 "),pB=n(g7e,"A",{href:!0});var ZPr=s(pB);SGe=r(ZPr,"PLBartConfig"),ZPr.forEach(t),PGe=r(g7e," (PLBart model)"),g7e.forEach(t),$Ge=i(T),Qm=n(T,"LI",{});var h7e=s(Qm);hU=n(h7e,"STRONG",{});var e$r=s(hU);IGe=r(e$r,"poolformer"),e$r.forEach(t),DGe=r(h7e," \u2014 "),_B=n(h7e,"A",{href:!0});var o$r=s(_B);NGe=r(o$r,"PoolFormerConfig"),o$r.forEach(t),jGe=r(h7e," (PoolFormer model)"),h7e.forEach(t),qGe=i(T),Hm=n(T,"LI",{});var p7e=s(Hm);pU=n(p7e,"STRONG",{});var r$r=s(pU);GGe=r(r$r,"prophetnet"),r$r.forEach(t),OGe=r(p7e," \u2014 "),uB=n(p7e,"A",{href:!0});var t$r=s(uB);XGe=r(t$r,"ProphetNetConfig"),t$r.forEach(t),VGe=r(p7e," (ProphetNet model)"),p7e.forEach(t),zGe=i(T),Um=n(T,"LI",{});var _7e=s(Um);_U=n(_7e,"STRONG",{});var a$r=s(_U);WGe=r(a$r,"qdqbert"),a$r.forEach(t),QGe=r(_7e," \u2014 "),bB=n(_7e,"A",{href:!0});var n$r=s(bB);HGe=r(n$r,"QDQBertConfig"),n$r.forEach(t),UGe=r(_7e," (QDQBert model)"),_7e.forEach(t),JGe=i(T),Jm=n(T,"LI",{});var u7e=s(Jm);uU=n(u7e,"STRONG",{});var s$r=s(uU);YGe=r(s$r,"rag"),s$r.forEach(t),KGe=r(u7e," \u2014 "),vB=n(u7e,"A",{href:!0});var l$r=s(vB);ZGe=r(l$r,"RagConfig"),l$r.forEach(t),eOe=r(u7e," (RAG model)"),u7e.forEach(t),oOe=i(T),Ym=n(T,"LI",{});var b7e=s(Ym);bU=n(b7e,"STRONG",{});var i$r=s(bU);rOe=r(i$r,"realm"),i$r.forEach(t),tOe=r(b7e," \u2014 "),TB=n(b7e,"A",{href:!0});var d$r=s(TB);aOe=r(d$r,"RealmConfig"),d$r.forEach(t),nOe=r(b7e," (Realm model)"),b7e.forEach(t),sOe=i(T),Km=n(T,"LI",{});var v7e=s(Km);vU=n(v7e,"STRONG",{});var c$r=s(vU);lOe=r(c$r,"reformer"),c$r.forEach(t),iOe=r(v7e," \u2014 "),FB=n(v7e,"A",{href:!0});var f$r=s(FB);dOe=r(f$r,"ReformerConfig"),f$r.forEach(t),cOe=r(v7e," (Reformer model)"),v7e.forEach(t),fOe=i(T),Zm=n(T,"LI",{});var T7e=s(Zm);TU=n(T7e,"STRONG",{});var m$r=s(TU);mOe=r(m$r,"rembert"),m$r.forEach(t),gOe=r(T7e," \u2014 "),CB=n(T7e,"A",{href:!0});var g$r=s(CB);hOe=r(g$r,"RemBertConfig"),g$r.forEach(t),pOe=r(T7e," (RemBERT model)"),T7e.forEach(t),_Oe=i(T),eg=n(T,"LI",{});var F7e=s(eg);FU=n(F7e,"STRONG",{});var h$r=s(FU);uOe=r(h$r,"resnet"),h$r.forEach(t),bOe=r(F7e," \u2014 "),MB=n(F7e,"A",{href:!0});var p$r=s(MB);vOe=r(p$r,"ResNetConfig"),p$r.forEach(t),TOe=r(F7e," (ResNet model)"),F7e.forEach(t),FOe=i(T),og=n(T,"LI",{});var C7e=s(og);CU=n(C7e,"STRONG",{});var _$r=s(CU);COe=r(_$r,"retribert"),_$r.forEach(t),MOe=r(C7e," \u2014 "),EB=n(C7e,"A",{href:!0});var u$r=s(EB);EOe=r(u$r,"RetriBertConfig"),u$r.forEach(t),yOe=r(C7e," (RetriBERT model)"),C7e.forEach(t),wOe=i(T),rg=n(T,"LI",{});var M7e=s(rg);MU=n(M7e,"STRONG",{});var b$r=s(MU);AOe=r(b$r,"roberta"),b$r.forEach(t),LOe=r(M7e," \u2014 "),yB=n(M7e,"A",{href:!0});var v$r=s(yB);BOe=r(v$r,"RobertaConfig"),v$r.forEach(t),xOe=r(M7e," (RoBERTa model)"),M7e.forEach(t),kOe=i(T),tg=n(T,"LI",{});var E7e=s(tg);EU=n(E7e,"STRONG",{});var T$r=s(EU);ROe=r(T$r,"roformer"),T$r.forEach(t),SOe=r(E7e," \u2014 "),wB=n(E7e,"A",{href:!0});var F$r=s(wB);POe=r(F$r,"RoFormerConfig"),F$r.forEach(t),$Oe=r(E7e," (RoFormer model)"),E7e.forEach(t),IOe=i(T),ag=n(T,"LI",{});var y7e=s(ag);yU=n(y7e,"STRONG",{});var C$r=s(yU);DOe=r(C$r,"segformer"),C$r.forEach(t),NOe=r(y7e," \u2014 "),AB=n(y7e,"A",{href:!0});var M$r=s(AB);jOe=r(M$r,"SegformerConfig"),M$r.forEach(t),qOe=r(y7e," (SegFormer model)"),y7e.forEach(t),GOe=i(T),ng=n(T,"LI",{});var w7e=s(ng);wU=n(w7e,"STRONG",{});var E$r=s(wU);OOe=r(E$r,"sew"),E$r.forEach(t),XOe=r(w7e," \u2014 "),LB=n(w7e,"A",{href:!0});var y$r=s(LB);VOe=r(y$r,"SEWConfig"),y$r.forEach(t),zOe=r(w7e," (SEW model)"),w7e.forEach(t),WOe=i(T),sg=n(T,"LI",{});var A7e=s(sg);AU=n(A7e,"STRONG",{});var w$r=s(AU);QOe=r(w$r,"sew-d"),w$r.forEach(t),HOe=r(A7e," \u2014 "),BB=n(A7e,"A",{href:!0});var A$r=s(BB);UOe=r(A$r,"SEWDConfig"),A$r.forEach(t),JOe=r(A7e," (SEW-D model)"),A7e.forEach(t),YOe=i(T),lg=n(T,"LI",{});var L7e=s(lg);LU=n(L7e,"STRONG",{});var L$r=s(LU);KOe=r(L$r,"speech-encoder-decoder"),L$r.forEach(t),ZOe=r(L7e," \u2014 "),xB=n(L7e,"A",{href:!0});var B$r=s(xB);eXe=r(B$r,"SpeechEncoderDecoderConfig"),B$r.forEach(t),oXe=r(L7e," (Speech Encoder decoder model)"),L7e.forEach(t),rXe=i(T),ig=n(T,"LI",{});var B7e=s(ig);BU=n(B7e,"STRONG",{});var x$r=s(BU);tXe=r(x$r,"speech_to_text"),x$r.forEach(t),aXe=r(B7e," \u2014 "),kB=n(B7e,"A",{href:!0});var k$r=s(kB);nXe=r(k$r,"Speech2TextConfig"),k$r.forEach(t),sXe=r(B7e," (Speech2Text model)"),B7e.forEach(t),lXe=i(T),dg=n(T,"LI",{});var x7e=s(dg);xU=n(x7e,"STRONG",{});var R$r=s(xU);iXe=r(R$r,"speech_to_text_2"),R$r.forEach(t),dXe=r(x7e," \u2014 "),RB=n(x7e,"A",{href:!0});var S$r=s(RB);cXe=r(S$r,"Speech2Text2Config"),S$r.forEach(t),fXe=r(x7e," (Speech2Text2 model)"),x7e.forEach(t),mXe=i(T),cg=n(T,"LI",{});var k7e=s(cg);kU=n(k7e,"STRONG",{});var P$r=s(kU);gXe=r(P$r,"splinter"),P$r.forEach(t),hXe=r(k7e," \u2014 "),SB=n(k7e,"A",{href:!0});var $$r=s(SB);pXe=r($$r,"SplinterConfig"),$$r.forEach(t),_Xe=r(k7e," (Splinter model)"),k7e.forEach(t),uXe=i(T),fg=n(T,"LI",{});var R7e=s(fg);RU=n(R7e,"STRONG",{});var I$r=s(RU);bXe=r(I$r,"squeezebert"),I$r.forEach(t),vXe=r(R7e," \u2014 "),PB=n(R7e,"A",{href:!0});var D$r=s(PB);TXe=r(D$r,"SqueezeBertConfig"),D$r.forEach(t),FXe=r(R7e," (SqueezeBERT model)"),R7e.forEach(t),CXe=i(T),mg=n(T,"LI",{});var S7e=s(mg);SU=n(S7e,"STRONG",{});var N$r=s(SU);MXe=r(N$r,"swin"),N$r.forEach(t),EXe=r(S7e," \u2014 "),$B=n(S7e,"A",{href:!0});var j$r=s($B);yXe=r(j$r,"SwinConfig"),j$r.forEach(t),wXe=r(S7e," (Swin model)"),S7e.forEach(t),AXe=i(T),gg=n(T,"LI",{});var P7e=s(gg);PU=n(P7e,"STRONG",{});var q$r=s(PU);LXe=r(q$r,"t5"),q$r.forEach(t),BXe=r(P7e," \u2014 "),IB=n(P7e,"A",{href:!0});var G$r=s(IB);xXe=r(G$r,"T5Config"),G$r.forEach(t),kXe=r(P7e," (T5 model)"),P7e.forEach(t),RXe=i(T),hg=n(T,"LI",{});var $7e=s(hg);$U=n($7e,"STRONG",{});var O$r=s($U);SXe=r(O$r,"tapas"),O$r.forEach(t),PXe=r($7e," \u2014 "),DB=n($7e,"A",{href:!0});var X$r=s(DB);$Xe=r(X$r,"TapasConfig"),X$r.forEach(t),IXe=r($7e," (TAPAS model)"),$7e.forEach(t),DXe=i(T),pg=n(T,"LI",{});var I7e=s(pg);IU=n(I7e,"STRONG",{});var V$r=s(IU);NXe=r(V$r,"transfo-xl"),V$r.forEach(t),jXe=r(I7e," \u2014 "),NB=n(I7e,"A",{href:!0});var z$r=s(NB);qXe=r(z$r,"TransfoXLConfig"),z$r.forEach(t),GXe=r(I7e," (Transformer-XL model)"),I7e.forEach(t),OXe=i(T),_g=n(T,"LI",{});var D7e=s(_g);DU=n(D7e,"STRONG",{});var W$r=s(DU);XXe=r(W$r,"trocr"),W$r.forEach(t),VXe=r(D7e," \u2014 "),jB=n(D7e,"A",{href:!0});var Q$r=s(jB);zXe=r(Q$r,"TrOCRConfig"),Q$r.forEach(t),WXe=r(D7e," (TrOCR model)"),D7e.forEach(t),QXe=i(T),ug=n(T,"LI",{});var N7e=s(ug);NU=n(N7e,"STRONG",{});var H$r=s(NU);HXe=r(H$r,"unispeech"),H$r.forEach(t),UXe=r(N7e," \u2014 "),qB=n(N7e,"A",{href:!0});var U$r=s(qB);JXe=r(U$r,"UniSpeechConfig"),U$r.forEach(t),YXe=r(N7e," (UniSpeech model)"),N7e.forEach(t),KXe=i(T),bg=n(T,"LI",{});var j7e=s(bg);jU=n(j7e,"STRONG",{});var J$r=s(jU);ZXe=r(J$r,"unispeech-sat"),J$r.forEach(t),eVe=r(j7e," \u2014 "),GB=n(j7e,"A",{href:!0});var Y$r=s(GB);oVe=r(Y$r,"UniSpeechSatConfig"),Y$r.forEach(t),rVe=r(j7e," (UniSpeechSat model)"),j7e.forEach(t),tVe=i(T),vg=n(T,"LI",{});var q7e=s(vg);qU=n(q7e,"STRONG",{});var K$r=s(qU);aVe=r(K$r,"van"),K$r.forEach(t),nVe=r(q7e," \u2014 "),OB=n(q7e,"A",{href:!0});var Z$r=s(OB);sVe=r(Z$r,"VanConfig"),Z$r.forEach(t),lVe=r(q7e," (VAN model)"),q7e.forEach(t),iVe=i(T),Tg=n(T,"LI",{});var G7e=s(Tg);GU=n(G7e,"STRONG",{});var eIr=s(GU);dVe=r(eIr,"vilt"),eIr.forEach(t),cVe=r(G7e," \u2014 "),XB=n(G7e,"A",{href:!0});var oIr=s(XB);fVe=r(oIr,"ViltConfig"),oIr.forEach(t),mVe=r(G7e," (ViLT model)"),G7e.forEach(t),gVe=i(T),Fg=n(T,"LI",{});var O7e=s(Fg);OU=n(O7e,"STRONG",{});var rIr=s(OU);hVe=r(rIr,"vision-encoder-decoder"),rIr.forEach(t),pVe=r(O7e," \u2014 "),VB=n(O7e,"A",{href:!0});var tIr=s(VB);_Ve=r(tIr,"VisionEncoderDecoderConfig"),tIr.forEach(t),uVe=r(O7e," (Vision Encoder decoder model)"),O7e.forEach(t),bVe=i(T),Cg=n(T,"LI",{});var X7e=s(Cg);XU=n(X7e,"STRONG",{});var aIr=s(XU);vVe=r(aIr,"vision-text-dual-encoder"),aIr.forEach(t),TVe=r(X7e," \u2014 "),zB=n(X7e,"A",{href:!0});var nIr=s(zB);FVe=r(nIr,"VisionTextDualEncoderConfig"),nIr.forEach(t),CVe=r(X7e," (VisionTextDualEncoder model)"),X7e.forEach(t),MVe=i(T),Mg=n(T,"LI",{});var V7e=s(Mg);VU=n(V7e,"STRONG",{});var sIr=s(VU);EVe=r(sIr,"visual_bert"),sIr.forEach(t),yVe=r(V7e," \u2014 "),WB=n(V7e,"A",{href:!0});var lIr=s(WB);wVe=r(lIr,"VisualBertConfig"),lIr.forEach(t),AVe=r(V7e," (VisualBert model)"),V7e.forEach(t),LVe=i(T),Eg=n(T,"LI",{});var z7e=s(Eg);zU=n(z7e,"STRONG",{});var iIr=s(zU);BVe=r(iIr,"vit"),iIr.forEach(t),xVe=r(z7e," \u2014 "),QB=n(z7e,"A",{href:!0});var dIr=s(QB);kVe=r(dIr,"ViTConfig"),dIr.forEach(t),RVe=r(z7e," (ViT model)"),z7e.forEach(t),SVe=i(T),yg=n(T,"LI",{});var W7e=s(yg);WU=n(W7e,"STRONG",{});var cIr=s(WU);PVe=r(cIr,"vit_mae"),cIr.forEach(t),$Ve=r(W7e," \u2014 "),HB=n(W7e,"A",{href:!0});var fIr=s(HB);IVe=r(fIr,"ViTMAEConfig"),fIr.forEach(t),DVe=r(W7e," (ViTMAE model)"),W7e.forEach(t),NVe=i(T),wg=n(T,"LI",{});var Q7e=s(wg);QU=n(Q7e,"STRONG",{});var mIr=s(QU);jVe=r(mIr,"wav2vec2"),mIr.forEach(t),qVe=r(Q7e," \u2014 "),UB=n(Q7e,"A",{href:!0});var gIr=s(UB);GVe=r(gIr,"Wav2Vec2Config"),gIr.forEach(t),OVe=r(Q7e," (Wav2Vec2 model)"),Q7e.forEach(t),XVe=i(T),Ag=n(T,"LI",{});var H7e=s(Ag);HU=n(H7e,"STRONG",{});var hIr=s(HU);VVe=r(hIr,"wavlm"),hIr.forEach(t),zVe=r(H7e," \u2014 "),JB=n(H7e,"A",{href:!0});var pIr=s(JB);WVe=r(pIr,"WavLMConfig"),pIr.forEach(t),QVe=r(H7e," (WavLM model)"),H7e.forEach(t),HVe=i(T),Lg=n(T,"LI",{});var U7e=s(Lg);UU=n(U7e,"STRONG",{});var _Ir=s(UU);UVe=r(_Ir,"xglm"),_Ir.forEach(t),JVe=r(U7e," \u2014 "),YB=n(U7e,"A",{href:!0});var uIr=s(YB);YVe=r(uIr,"XGLMConfig"),uIr.forEach(t),KVe=r(U7e," (XGLM model)"),U7e.forEach(t),ZVe=i(T),Bg=n(T,"LI",{});var J7e=s(Bg);JU=n(J7e,"STRONG",{});var bIr=s(JU);eze=r(bIr,"xlm"),bIr.forEach(t),oze=r(J7e," \u2014 "),KB=n(J7e,"A",{href:!0});var vIr=s(KB);rze=r(vIr,"XLMConfig"),vIr.forEach(t),tze=r(J7e," (XLM model)"),J7e.forEach(t),aze=i(T),xg=n(T,"LI",{});var Y7e=s(xg);YU=n(Y7e,"STRONG",{});var TIr=s(YU);nze=r(TIr,"xlm-prophetnet"),TIr.forEach(t),sze=r(Y7e," \u2014 "),ZB=n(Y7e,"A",{href:!0});var FIr=s(ZB);lze=r(FIr,"XLMProphetNetConfig"),FIr.forEach(t),ize=r(Y7e," (XLMProphetNet model)"),Y7e.forEach(t),dze=i(T),kg=n(T,"LI",{});var K7e=s(kg);KU=n(K7e,"STRONG",{});var CIr=s(KU);cze=r(CIr,"xlm-roberta"),CIr.forEach(t),fze=r(K7e," \u2014 "),ex=n(K7e,"A",{href:!0});var MIr=s(ex);mze=r(MIr,"XLMRobertaConfig"),MIr.forEach(t),gze=r(K7e," (XLM-RoBERTa model)"),K7e.forEach(t),hze=i(T),Rg=n(T,"LI",{});var Z7e=s(Rg);ZU=n(Z7e,"STRONG",{});var EIr=s(ZU);pze=r(EIr,"xlm-roberta-xl"),EIr.forEach(t),_ze=r(Z7e," \u2014 "),ox=n(Z7e,"A",{href:!0});var yIr=s(ox);uze=r(yIr,"XLMRobertaXLConfig"),yIr.forEach(t),bze=r(Z7e," (XLM-RoBERTa-XL model)"),Z7e.forEach(t),vze=i(T),Sg=n(T,"LI",{});var eFe=s(Sg);eJ=n(eFe,"STRONG",{});var wIr=s(eJ);Tze=r(wIr,"xlnet"),wIr.forEach(t),Fze=r(eFe," \u2014 "),rx=n(eFe,"A",{href:!0});var AIr=s(rx);Cze=r(AIr,"XLNetConfig"),AIr.forEach(t),Mze=r(eFe," (XLNet model)"),eFe.forEach(t),Eze=i(T),Pg=n(T,"LI",{});var oFe=s(Pg);oJ=n(oFe,"STRONG",{});var LIr=s(oJ);yze=r(LIr,"yoso"),LIr.forEach(t),wze=r(oFe," \u2014 "),tx=n(oFe,"A",{href:!0});var BIr=s(tx);Aze=r(BIr,"YosoConfig"),BIr.forEach(t),Lze=r(oFe," (YOSO model)"),oFe.forEach(t),T.forEach(t),Bze=i(ga),rJ=n(ga,"P",{});var xIr=s(rJ);xze=r(xIr,"Examples:"),xIr.forEach(t),kze=i(ga),m(yE.$$.fragment,ga),ga.forEach(t),Rze=i(Os),$g=n(Os,"DIV",{class:!0});var OSe=s($g);m(wE.$$.fragment,OSe),Sze=i(OSe),tJ=n(OSe,"P",{});var kIr=s(tJ);Pze=r(kIr,"Register a new configuration for this class."),kIr.forEach(t),OSe.forEach(t),Os.forEach(t),qke=i(c),Wi=n(c,"H2",{class:!0});var XSe=s(Wi);Ig=n(XSe,"A",{id:!0,class:!0,href:!0});var RIr=s(Ig);aJ=n(RIr,"SPAN",{});var SIr=s(aJ);m(AE.$$.fragment,SIr),SIr.forEach(t),RIr.forEach(t),$ze=i(XSe),nJ=n(XSe,"SPAN",{});var PIr=s(nJ);Ize=r(PIr,"AutoTokenizer"),PIr.forEach(t),XSe.forEach(t),Gke=i(c),Qo=n(c,"DIV",{class:!0});var Xs=s(Qo);m(LE.$$.fragment,Xs),Dze=i(Xs),BE=n(Xs,"P",{});var VSe=s(BE);Nze=r(VSe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),ax=n(VSe,"A",{href:!0});var $Ir=s(ax);jze=r($Ir,"AutoTokenizer.from_pretrained()"),$Ir.forEach(t),qze=r(VSe," class method."),VSe.forEach(t),Gze=i(Xs),xE=n(Xs,"P",{});var zSe=s(xE);Oze=r(zSe,"This class cannot be instantiated directly using "),sJ=n(zSe,"CODE",{});var IIr=s(sJ);Xze=r(IIr,"__init__()"),IIr.forEach(t),Vze=r(zSe," (throws an error)."),zSe.forEach(t),zze=i(Xs),go=n(Xs,"DIV",{class:!0});var ha=s(go);m(kE.$$.fragment,ha),Wze=i(ha),lJ=n(ha,"P",{});var DIr=s(lJ);Qze=r(DIr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),DIr.forEach(t),Hze=i(ha),Oa=n(ha,"P",{});var _M=s(Oa);Uze=r(_M,"The tokenizer class to instantiate is selected based on the "),iJ=n(_M,"CODE",{});var NIr=s(iJ);Jze=r(NIr,"model_type"),NIr.forEach(t),Yze=r(_M,` property of the config object (either
passed as an argument or loaded from `),dJ=n(_M,"CODE",{});var jIr=s(dJ);Kze=r(jIr,"pretrained_model_name_or_path"),jIr.forEach(t),Zze=r(_M,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cJ=n(_M,"CODE",{});var qIr=s(cJ);eWe=r(qIr,"pretrained_model_name_or_path"),qIr.forEach(t),oWe=r(_M,":"),_M.forEach(t),rWe=i(ha),M=n(ha,"UL",{});var y=s(M);Wn=n(y,"LI",{});var c8=s(Wn);fJ=n(c8,"STRONG",{});var GIr=s(fJ);tWe=r(GIr,"albert"),GIr.forEach(t),aWe=r(c8," \u2014 "),nx=n(c8,"A",{href:!0});var OIr=s(nx);nWe=r(OIr,"AlbertTokenizer"),OIr.forEach(t),sWe=r(c8," or "),sx=n(c8,"A",{href:!0});var XIr=s(sx);lWe=r(XIr,"AlbertTokenizerFast"),XIr.forEach(t),iWe=r(c8," (ALBERT model)"),c8.forEach(t),dWe=i(y),Qn=n(y,"LI",{});var f8=s(Qn);mJ=n(f8,"STRONG",{});var VIr=s(mJ);cWe=r(VIr,"bart"),VIr.forEach(t),fWe=r(f8," \u2014 "),lx=n(f8,"A",{href:!0});var zIr=s(lx);mWe=r(zIr,"BartTokenizer"),zIr.forEach(t),gWe=r(f8," or "),ix=n(f8,"A",{href:!0});var WIr=s(ix);hWe=r(WIr,"BartTokenizerFast"),WIr.forEach(t),pWe=r(f8," (BART model)"),f8.forEach(t),_We=i(y),Hn=n(y,"LI",{});var m8=s(Hn);gJ=n(m8,"STRONG",{});var QIr=s(gJ);uWe=r(QIr,"barthez"),QIr.forEach(t),bWe=r(m8," \u2014 "),dx=n(m8,"A",{href:!0});var HIr=s(dx);vWe=r(HIr,"BarthezTokenizer"),HIr.forEach(t),TWe=r(m8," or "),cx=n(m8,"A",{href:!0});var UIr=s(cx);FWe=r(UIr,"BarthezTokenizerFast"),UIr.forEach(t),CWe=r(m8," (BARThez model)"),m8.forEach(t),MWe=i(y),Dg=n(y,"LI",{});var rFe=s(Dg);hJ=n(rFe,"STRONG",{});var JIr=s(hJ);EWe=r(JIr,"bartpho"),JIr.forEach(t),yWe=r(rFe," \u2014 "),fx=n(rFe,"A",{href:!0});var YIr=s(fx);wWe=r(YIr,"BartphoTokenizer"),YIr.forEach(t),AWe=r(rFe," (BARTpho model)"),rFe.forEach(t),LWe=i(y),Un=n(y,"LI",{});var g8=s(Un);pJ=n(g8,"STRONG",{});var KIr=s(pJ);BWe=r(KIr,"bert"),KIr.forEach(t),xWe=r(g8," \u2014 "),mx=n(g8,"A",{href:!0});var ZIr=s(mx);kWe=r(ZIr,"BertTokenizer"),ZIr.forEach(t),RWe=r(g8," or "),gx=n(g8,"A",{href:!0});var eDr=s(gx);SWe=r(eDr,"BertTokenizerFast"),eDr.forEach(t),PWe=r(g8," (BERT model)"),g8.forEach(t),$We=i(y),Ng=n(y,"LI",{});var tFe=s(Ng);_J=n(tFe,"STRONG",{});var oDr=s(_J);IWe=r(oDr,"bert-generation"),oDr.forEach(t),DWe=r(tFe," \u2014 "),hx=n(tFe,"A",{href:!0});var rDr=s(hx);NWe=r(rDr,"BertGenerationTokenizer"),rDr.forEach(t),jWe=r(tFe," (Bert Generation model)"),tFe.forEach(t),qWe=i(y),jg=n(y,"LI",{});var aFe=s(jg);uJ=n(aFe,"STRONG",{});var tDr=s(uJ);GWe=r(tDr,"bert-japanese"),tDr.forEach(t),OWe=r(aFe," \u2014 "),px=n(aFe,"A",{href:!0});var aDr=s(px);XWe=r(aDr,"BertJapaneseTokenizer"),aDr.forEach(t),VWe=r(aFe," (BertJapanese model)"),aFe.forEach(t),zWe=i(y),qg=n(y,"LI",{});var nFe=s(qg);bJ=n(nFe,"STRONG",{});var nDr=s(bJ);WWe=r(nDr,"bertweet"),nDr.forEach(t),QWe=r(nFe," \u2014 "),_x=n(nFe,"A",{href:!0});var sDr=s(_x);HWe=r(sDr,"BertweetTokenizer"),sDr.forEach(t),UWe=r(nFe," (Bertweet model)"),nFe.forEach(t),JWe=i(y),Jn=n(y,"LI",{});var h8=s(Jn);vJ=n(h8,"STRONG",{});var lDr=s(vJ);YWe=r(lDr,"big_bird"),lDr.forEach(t),KWe=r(h8," \u2014 "),ux=n(h8,"A",{href:!0});var iDr=s(ux);ZWe=r(iDr,"BigBirdTokenizer"),iDr.forEach(t),eQe=r(h8," or "),bx=n(h8,"A",{href:!0});var dDr=s(bx);oQe=r(dDr,"BigBirdTokenizerFast"),dDr.forEach(t),rQe=r(h8," (BigBird model)"),h8.forEach(t),tQe=i(y),Yn=n(y,"LI",{});var p8=s(Yn);TJ=n(p8,"STRONG",{});var cDr=s(TJ);aQe=r(cDr,"bigbird_pegasus"),cDr.forEach(t),nQe=r(p8," \u2014 "),vx=n(p8,"A",{href:!0});var fDr=s(vx);sQe=r(fDr,"PegasusTokenizer"),fDr.forEach(t),lQe=r(p8," or "),Tx=n(p8,"A",{href:!0});var mDr=s(Tx);iQe=r(mDr,"PegasusTokenizerFast"),mDr.forEach(t),dQe=r(p8," (BigBirdPegasus model)"),p8.forEach(t),cQe=i(y),Kn=n(y,"LI",{});var _8=s(Kn);FJ=n(_8,"STRONG",{});var gDr=s(FJ);fQe=r(gDr,"blenderbot"),gDr.forEach(t),mQe=r(_8," \u2014 "),Fx=n(_8,"A",{href:!0});var hDr=s(Fx);gQe=r(hDr,"BlenderbotTokenizer"),hDr.forEach(t),hQe=r(_8," or "),Cx=n(_8,"A",{href:!0});var pDr=s(Cx);pQe=r(pDr,"BlenderbotTokenizerFast"),pDr.forEach(t),_Qe=r(_8," (Blenderbot model)"),_8.forEach(t),uQe=i(y),Gg=n(y,"LI",{});var sFe=s(Gg);CJ=n(sFe,"STRONG",{});var _Dr=s(CJ);bQe=r(_Dr,"blenderbot-small"),_Dr.forEach(t),vQe=r(sFe," \u2014 "),Mx=n(sFe,"A",{href:!0});var uDr=s(Mx);TQe=r(uDr,"BlenderbotSmallTokenizer"),uDr.forEach(t),FQe=r(sFe," (BlenderbotSmall model)"),sFe.forEach(t),CQe=i(y),Og=n(y,"LI",{});var lFe=s(Og);MJ=n(lFe,"STRONG",{});var bDr=s(MJ);MQe=r(bDr,"byt5"),bDr.forEach(t),EQe=r(lFe," \u2014 "),Ex=n(lFe,"A",{href:!0});var vDr=s(Ex);yQe=r(vDr,"ByT5Tokenizer"),vDr.forEach(t),wQe=r(lFe," (ByT5 model)"),lFe.forEach(t),AQe=i(y),Zn=n(y,"LI",{});var u8=s(Zn);EJ=n(u8,"STRONG",{});var TDr=s(EJ);LQe=r(TDr,"camembert"),TDr.forEach(t),BQe=r(u8," \u2014 "),yx=n(u8,"A",{href:!0});var FDr=s(yx);xQe=r(FDr,"CamembertTokenizer"),FDr.forEach(t),kQe=r(u8," or "),wx=n(u8,"A",{href:!0});var CDr=s(wx);RQe=r(CDr,"CamembertTokenizerFast"),CDr.forEach(t),SQe=r(u8," (CamemBERT model)"),u8.forEach(t),PQe=i(y),Xg=n(y,"LI",{});var iFe=s(Xg);yJ=n(iFe,"STRONG",{});var MDr=s(yJ);$Qe=r(MDr,"canine"),MDr.forEach(t),IQe=r(iFe," \u2014 "),Ax=n(iFe,"A",{href:!0});var EDr=s(Ax);DQe=r(EDr,"CanineTokenizer"),EDr.forEach(t),NQe=r(iFe," (Canine model)"),iFe.forEach(t),jQe=i(y),es=n(y,"LI",{});var b8=s(es);wJ=n(b8,"STRONG",{});var yDr=s(wJ);qQe=r(yDr,"clip"),yDr.forEach(t),GQe=r(b8," \u2014 "),Lx=n(b8,"A",{href:!0});var wDr=s(Lx);OQe=r(wDr,"CLIPTokenizer"),wDr.forEach(t),XQe=r(b8," or "),Bx=n(b8,"A",{href:!0});var ADr=s(Bx);VQe=r(ADr,"CLIPTokenizerFast"),ADr.forEach(t),zQe=r(b8," (CLIP model)"),b8.forEach(t),WQe=i(y),os=n(y,"LI",{});var v8=s(os);AJ=n(v8,"STRONG",{});var LDr=s(AJ);QQe=r(LDr,"convbert"),LDr.forEach(t),HQe=r(v8," \u2014 "),xx=n(v8,"A",{href:!0});var BDr=s(xx);UQe=r(BDr,"ConvBertTokenizer"),BDr.forEach(t),JQe=r(v8," or "),kx=n(v8,"A",{href:!0});var xDr=s(kx);YQe=r(xDr,"ConvBertTokenizerFast"),xDr.forEach(t),KQe=r(v8," (ConvBERT model)"),v8.forEach(t),ZQe=i(y),rs=n(y,"LI",{});var T8=s(rs);LJ=n(T8,"STRONG",{});var kDr=s(LJ);eHe=r(kDr,"cpm"),kDr.forEach(t),oHe=r(T8," \u2014 "),Rx=n(T8,"A",{href:!0});var RDr=s(Rx);rHe=r(RDr,"CpmTokenizer"),RDr.forEach(t),tHe=r(T8," or "),BJ=n(T8,"CODE",{});var SDr=s(BJ);aHe=r(SDr,"CpmTokenizerFast"),SDr.forEach(t),nHe=r(T8," (CPM model)"),T8.forEach(t),sHe=i(y),Vg=n(y,"LI",{});var dFe=s(Vg);xJ=n(dFe,"STRONG",{});var PDr=s(xJ);lHe=r(PDr,"ctrl"),PDr.forEach(t),iHe=r(dFe," \u2014 "),Sx=n(dFe,"A",{href:!0});var $Dr=s(Sx);dHe=r($Dr,"CTRLTokenizer"),$Dr.forEach(t),cHe=r(dFe," (CTRL model)"),dFe.forEach(t),fHe=i(y),ts=n(y,"LI",{});var F8=s(ts);kJ=n(F8,"STRONG",{});var IDr=s(kJ);mHe=r(IDr,"deberta"),IDr.forEach(t),gHe=r(F8," \u2014 "),Px=n(F8,"A",{href:!0});var DDr=s(Px);hHe=r(DDr,"DebertaTokenizer"),DDr.forEach(t),pHe=r(F8," or "),$x=n(F8,"A",{href:!0});var NDr=s($x);_He=r(NDr,"DebertaTokenizerFast"),NDr.forEach(t),uHe=r(F8," (DeBERTa model)"),F8.forEach(t),bHe=i(y),zg=n(y,"LI",{});var cFe=s(zg);RJ=n(cFe,"STRONG",{});var jDr=s(RJ);vHe=r(jDr,"deberta-v2"),jDr.forEach(t),THe=r(cFe," \u2014 "),Ix=n(cFe,"A",{href:!0});var qDr=s(Ix);FHe=r(qDr,"DebertaV2Tokenizer"),qDr.forEach(t),CHe=r(cFe," (DeBERTa-v2 model)"),cFe.forEach(t),MHe=i(y),as=n(y,"LI",{});var C8=s(as);SJ=n(C8,"STRONG",{});var GDr=s(SJ);EHe=r(GDr,"distilbert"),GDr.forEach(t),yHe=r(C8," \u2014 "),Dx=n(C8,"A",{href:!0});var ODr=s(Dx);wHe=r(ODr,"DistilBertTokenizer"),ODr.forEach(t),AHe=r(C8," or "),Nx=n(C8,"A",{href:!0});var XDr=s(Nx);LHe=r(XDr,"DistilBertTokenizerFast"),XDr.forEach(t),BHe=r(C8," (DistilBERT model)"),C8.forEach(t),xHe=i(y),ns=n(y,"LI",{});var M8=s(ns);PJ=n(M8,"STRONG",{});var VDr=s(PJ);kHe=r(VDr,"dpr"),VDr.forEach(t),RHe=r(M8," \u2014 "),jx=n(M8,"A",{href:!0});var zDr=s(jx);SHe=r(zDr,"DPRQuestionEncoderTokenizer"),zDr.forEach(t),PHe=r(M8," or "),qx=n(M8,"A",{href:!0});var WDr=s(qx);$He=r(WDr,"DPRQuestionEncoderTokenizerFast"),WDr.forEach(t),IHe=r(M8," (DPR model)"),M8.forEach(t),DHe=i(y),ss=n(y,"LI",{});var E8=s(ss);$J=n(E8,"STRONG",{});var QDr=s($J);NHe=r(QDr,"electra"),QDr.forEach(t),jHe=r(E8," \u2014 "),Gx=n(E8,"A",{href:!0});var HDr=s(Gx);qHe=r(HDr,"ElectraTokenizer"),HDr.forEach(t),GHe=r(E8," or "),Ox=n(E8,"A",{href:!0});var UDr=s(Ox);OHe=r(UDr,"ElectraTokenizerFast"),UDr.forEach(t),XHe=r(E8," (ELECTRA model)"),E8.forEach(t),VHe=i(y),Wg=n(y,"LI",{});var fFe=s(Wg);IJ=n(fFe,"STRONG",{});var JDr=s(IJ);zHe=r(JDr,"flaubert"),JDr.forEach(t),WHe=r(fFe," \u2014 "),Xx=n(fFe,"A",{href:!0});var YDr=s(Xx);QHe=r(YDr,"FlaubertTokenizer"),YDr.forEach(t),HHe=r(fFe," (FlauBERT model)"),fFe.forEach(t),UHe=i(y),ls=n(y,"LI",{});var y8=s(ls);DJ=n(y8,"STRONG",{});var KDr=s(DJ);JHe=r(KDr,"fnet"),KDr.forEach(t),YHe=r(y8," \u2014 "),Vx=n(y8,"A",{href:!0});var ZDr=s(Vx);KHe=r(ZDr,"FNetTokenizer"),ZDr.forEach(t),ZHe=r(y8," or "),zx=n(y8,"A",{href:!0});var eNr=s(zx);eUe=r(eNr,"FNetTokenizerFast"),eNr.forEach(t),oUe=r(y8," (FNet model)"),y8.forEach(t),rUe=i(y),Qg=n(y,"LI",{});var mFe=s(Qg);NJ=n(mFe,"STRONG",{});var oNr=s(NJ);tUe=r(oNr,"fsmt"),oNr.forEach(t),aUe=r(mFe," \u2014 "),Wx=n(mFe,"A",{href:!0});var rNr=s(Wx);nUe=r(rNr,"FSMTTokenizer"),rNr.forEach(t),sUe=r(mFe," (FairSeq Machine-Translation model)"),mFe.forEach(t),lUe=i(y),is=n(y,"LI",{});var w8=s(is);jJ=n(w8,"STRONG",{});var tNr=s(jJ);iUe=r(tNr,"funnel"),tNr.forEach(t),dUe=r(w8," \u2014 "),Qx=n(w8,"A",{href:!0});var aNr=s(Qx);cUe=r(aNr,"FunnelTokenizer"),aNr.forEach(t),fUe=r(w8," or "),Hx=n(w8,"A",{href:!0});var nNr=s(Hx);mUe=r(nNr,"FunnelTokenizerFast"),nNr.forEach(t),gUe=r(w8," (Funnel Transformer model)"),w8.forEach(t),hUe=i(y),ds=n(y,"LI",{});var A8=s(ds);qJ=n(A8,"STRONG",{});var sNr=s(qJ);pUe=r(sNr,"gpt2"),sNr.forEach(t),_Ue=r(A8," \u2014 "),Ux=n(A8,"A",{href:!0});var lNr=s(Ux);uUe=r(lNr,"GPT2Tokenizer"),lNr.forEach(t),bUe=r(A8," or "),Jx=n(A8,"A",{href:!0});var iNr=s(Jx);vUe=r(iNr,"GPT2TokenizerFast"),iNr.forEach(t),TUe=r(A8," (OpenAI GPT-2 model)"),A8.forEach(t),FUe=i(y),cs=n(y,"LI",{});var L8=s(cs);GJ=n(L8,"STRONG",{});var dNr=s(GJ);CUe=r(dNr,"gpt_neo"),dNr.forEach(t),MUe=r(L8," \u2014 "),Yx=n(L8,"A",{href:!0});var cNr=s(Yx);EUe=r(cNr,"GPT2Tokenizer"),cNr.forEach(t),yUe=r(L8," or "),Kx=n(L8,"A",{href:!0});var fNr=s(Kx);wUe=r(fNr,"GPT2TokenizerFast"),fNr.forEach(t),AUe=r(L8," (GPT Neo model)"),L8.forEach(t),LUe=i(y),fs=n(y,"LI",{});var B8=s(fs);OJ=n(B8,"STRONG",{});var mNr=s(OJ);BUe=r(mNr,"herbert"),mNr.forEach(t),xUe=r(B8," \u2014 "),Zx=n(B8,"A",{href:!0});var gNr=s(Zx);kUe=r(gNr,"HerbertTokenizer"),gNr.forEach(t),RUe=r(B8," or "),ek=n(B8,"A",{href:!0});var hNr=s(ek);SUe=r(hNr,"HerbertTokenizerFast"),hNr.forEach(t),PUe=r(B8," (HerBERT model)"),B8.forEach(t),$Ue=i(y),Hg=n(y,"LI",{});var gFe=s(Hg);XJ=n(gFe,"STRONG",{});var pNr=s(XJ);IUe=r(pNr,"hubert"),pNr.forEach(t),DUe=r(gFe," \u2014 "),ok=n(gFe,"A",{href:!0});var _Nr=s(ok);NUe=r(_Nr,"Wav2Vec2CTCTokenizer"),_Nr.forEach(t),jUe=r(gFe," (Hubert model)"),gFe.forEach(t),qUe=i(y),ms=n(y,"LI",{});var x8=s(ms);VJ=n(x8,"STRONG",{});var uNr=s(VJ);GUe=r(uNr,"ibert"),uNr.forEach(t),OUe=r(x8," \u2014 "),rk=n(x8,"A",{href:!0});var bNr=s(rk);XUe=r(bNr,"RobertaTokenizer"),bNr.forEach(t),VUe=r(x8," or "),tk=n(x8,"A",{href:!0});var vNr=s(tk);zUe=r(vNr,"RobertaTokenizerFast"),vNr.forEach(t),WUe=r(x8," (I-BERT model)"),x8.forEach(t),QUe=i(y),gs=n(y,"LI",{});var k8=s(gs);zJ=n(k8,"STRONG",{});var TNr=s(zJ);HUe=r(TNr,"layoutlm"),TNr.forEach(t),UUe=r(k8," \u2014 "),ak=n(k8,"A",{href:!0});var FNr=s(ak);JUe=r(FNr,"LayoutLMTokenizer"),FNr.forEach(t),YUe=r(k8," or "),nk=n(k8,"A",{href:!0});var CNr=s(nk);KUe=r(CNr,"LayoutLMTokenizerFast"),CNr.forEach(t),ZUe=r(k8," (LayoutLM model)"),k8.forEach(t),eJe=i(y),hs=n(y,"LI",{});var R8=s(hs);WJ=n(R8,"STRONG",{});var MNr=s(WJ);oJe=r(MNr,"layoutlmv2"),MNr.forEach(t),rJe=r(R8," \u2014 "),sk=n(R8,"A",{href:!0});var ENr=s(sk);tJe=r(ENr,"LayoutLMv2Tokenizer"),ENr.forEach(t),aJe=r(R8," or "),lk=n(R8,"A",{href:!0});var yNr=s(lk);nJe=r(yNr,"LayoutLMv2TokenizerFast"),yNr.forEach(t),sJe=r(R8," (LayoutLMv2 model)"),R8.forEach(t),lJe=i(y),ps=n(y,"LI",{});var S8=s(ps);QJ=n(S8,"STRONG",{});var wNr=s(QJ);iJe=r(wNr,"layoutxlm"),wNr.forEach(t),dJe=r(S8," \u2014 "),ik=n(S8,"A",{href:!0});var ANr=s(ik);cJe=r(ANr,"LayoutXLMTokenizer"),ANr.forEach(t),fJe=r(S8," or "),dk=n(S8,"A",{href:!0});var LNr=s(dk);mJe=r(LNr,"LayoutXLMTokenizerFast"),LNr.forEach(t),gJe=r(S8," (LayoutXLM model)"),S8.forEach(t),hJe=i(y),_s=n(y,"LI",{});var P8=s(_s);HJ=n(P8,"STRONG",{});var BNr=s(HJ);pJe=r(BNr,"led"),BNr.forEach(t),_Je=r(P8," \u2014 "),ck=n(P8,"A",{href:!0});var xNr=s(ck);uJe=r(xNr,"LEDTokenizer"),xNr.forEach(t),bJe=r(P8," or "),fk=n(P8,"A",{href:!0});var kNr=s(fk);vJe=r(kNr,"LEDTokenizerFast"),kNr.forEach(t),TJe=r(P8," (LED model)"),P8.forEach(t),FJe=i(y),us=n(y,"LI",{});var $8=s(us);UJ=n($8,"STRONG",{});var RNr=s(UJ);CJe=r(RNr,"longformer"),RNr.forEach(t),MJe=r($8," \u2014 "),mk=n($8,"A",{href:!0});var SNr=s(mk);EJe=r(SNr,"LongformerTokenizer"),SNr.forEach(t),yJe=r($8," or "),gk=n($8,"A",{href:!0});var PNr=s(gk);wJe=r(PNr,"LongformerTokenizerFast"),PNr.forEach(t),AJe=r($8," (Longformer model)"),$8.forEach(t),LJe=i(y),Ug=n(y,"LI",{});var hFe=s(Ug);JJ=n(hFe,"STRONG",{});var $Nr=s(JJ);BJe=r($Nr,"luke"),$Nr.forEach(t),xJe=r(hFe," \u2014 "),hk=n(hFe,"A",{href:!0});var INr=s(hk);kJe=r(INr,"LukeTokenizer"),INr.forEach(t),RJe=r(hFe," (LUKE model)"),hFe.forEach(t),SJe=i(y),bs=n(y,"LI",{});var I8=s(bs);YJ=n(I8,"STRONG",{});var DNr=s(YJ);PJe=r(DNr,"lxmert"),DNr.forEach(t),$Je=r(I8," \u2014 "),pk=n(I8,"A",{href:!0});var NNr=s(pk);IJe=r(NNr,"LxmertTokenizer"),NNr.forEach(t),DJe=r(I8," or "),_k=n(I8,"A",{href:!0});var jNr=s(_k);NJe=r(jNr,"LxmertTokenizerFast"),jNr.forEach(t),jJe=r(I8," (LXMERT model)"),I8.forEach(t),qJe=i(y),Jg=n(y,"LI",{});var pFe=s(Jg);KJ=n(pFe,"STRONG",{});var qNr=s(KJ);GJe=r(qNr,"m2m_100"),qNr.forEach(t),OJe=r(pFe," \u2014 "),uk=n(pFe,"A",{href:!0});var GNr=s(uk);XJe=r(GNr,"M2M100Tokenizer"),GNr.forEach(t),VJe=r(pFe," (M2M100 model)"),pFe.forEach(t),zJe=i(y),Yg=n(y,"LI",{});var _Fe=s(Yg);ZJ=n(_Fe,"STRONG",{});var ONr=s(ZJ);WJe=r(ONr,"marian"),ONr.forEach(t),QJe=r(_Fe," \u2014 "),bk=n(_Fe,"A",{href:!0});var XNr=s(bk);HJe=r(XNr,"MarianTokenizer"),XNr.forEach(t),UJe=r(_Fe," (Marian model)"),_Fe.forEach(t),JJe=i(y),vs=n(y,"LI",{});var D8=s(vs);eY=n(D8,"STRONG",{});var VNr=s(eY);YJe=r(VNr,"mbart"),VNr.forEach(t),KJe=r(D8," \u2014 "),vk=n(D8,"A",{href:!0});var zNr=s(vk);ZJe=r(zNr,"MBartTokenizer"),zNr.forEach(t),eYe=r(D8," or "),Tk=n(D8,"A",{href:!0});var WNr=s(Tk);oYe=r(WNr,"MBartTokenizerFast"),WNr.forEach(t),rYe=r(D8," (mBART model)"),D8.forEach(t),tYe=i(y),Ts=n(y,"LI",{});var N8=s(Ts);oY=n(N8,"STRONG",{});var QNr=s(oY);aYe=r(QNr,"mbart50"),QNr.forEach(t),nYe=r(N8," \u2014 "),Fk=n(N8,"A",{href:!0});var HNr=s(Fk);sYe=r(HNr,"MBart50Tokenizer"),HNr.forEach(t),lYe=r(N8," or "),Ck=n(N8,"A",{href:!0});var UNr=s(Ck);iYe=r(UNr,"MBart50TokenizerFast"),UNr.forEach(t),dYe=r(N8," (mBART-50 model)"),N8.forEach(t),cYe=i(y),Kg=n(y,"LI",{});var uFe=s(Kg);rY=n(uFe,"STRONG",{});var JNr=s(rY);fYe=r(JNr,"mluke"),JNr.forEach(t),mYe=r(uFe," \u2014 "),Mk=n(uFe,"A",{href:!0});var YNr=s(Mk);gYe=r(YNr,"MLukeTokenizer"),YNr.forEach(t),hYe=r(uFe," (mLUKE model)"),uFe.forEach(t),pYe=i(y),Fs=n(y,"LI",{});var j8=s(Fs);tY=n(j8,"STRONG",{});var KNr=s(tY);_Ye=r(KNr,"mobilebert"),KNr.forEach(t),uYe=r(j8," \u2014 "),Ek=n(j8,"A",{href:!0});var ZNr=s(Ek);bYe=r(ZNr,"MobileBertTokenizer"),ZNr.forEach(t),vYe=r(j8," or "),yk=n(j8,"A",{href:!0});var ejr=s(yk);TYe=r(ejr,"MobileBertTokenizerFast"),ejr.forEach(t),FYe=r(j8," (MobileBERT model)"),j8.forEach(t),CYe=i(y),Cs=n(y,"LI",{});var q8=s(Cs);aY=n(q8,"STRONG",{});var ojr=s(aY);MYe=r(ojr,"mpnet"),ojr.forEach(t),EYe=r(q8," \u2014 "),wk=n(q8,"A",{href:!0});var rjr=s(wk);yYe=r(rjr,"MPNetTokenizer"),rjr.forEach(t),wYe=r(q8," or "),Ak=n(q8,"A",{href:!0});var tjr=s(Ak);AYe=r(tjr,"MPNetTokenizerFast"),tjr.forEach(t),LYe=r(q8," (MPNet model)"),q8.forEach(t),BYe=i(y),Ms=n(y,"LI",{});var G8=s(Ms);nY=n(G8,"STRONG",{});var ajr=s(nY);xYe=r(ajr,"mt5"),ajr.forEach(t),kYe=r(G8," \u2014 "),Lk=n(G8,"A",{href:!0});var njr=s(Lk);RYe=r(njr,"MT5Tokenizer"),njr.forEach(t),SYe=r(G8," or "),Bk=n(G8,"A",{href:!0});var sjr=s(Bk);PYe=r(sjr,"MT5TokenizerFast"),sjr.forEach(t),$Ye=r(G8," (mT5 model)"),G8.forEach(t),IYe=i(y),Es=n(y,"LI",{});var O8=s(Es);sY=n(O8,"STRONG",{});var ljr=s(sY);DYe=r(ljr,"openai-gpt"),ljr.forEach(t),NYe=r(O8," \u2014 "),xk=n(O8,"A",{href:!0});var ijr=s(xk);jYe=r(ijr,"OpenAIGPTTokenizer"),ijr.forEach(t),qYe=r(O8," or "),kk=n(O8,"A",{href:!0});var djr=s(kk);GYe=r(djr,"OpenAIGPTTokenizerFast"),djr.forEach(t),OYe=r(O8," (OpenAI GPT model)"),O8.forEach(t),XYe=i(y),ys=n(y,"LI",{});var X8=s(ys);lY=n(X8,"STRONG",{});var cjr=s(lY);VYe=r(cjr,"pegasus"),cjr.forEach(t),zYe=r(X8," \u2014 "),Rk=n(X8,"A",{href:!0});var fjr=s(Rk);WYe=r(fjr,"PegasusTokenizer"),fjr.forEach(t),QYe=r(X8," or "),Sk=n(X8,"A",{href:!0});var mjr=s(Sk);HYe=r(mjr,"PegasusTokenizerFast"),mjr.forEach(t),UYe=r(X8," (Pegasus model)"),X8.forEach(t),JYe=i(y),Zg=n(y,"LI",{});var bFe=s(Zg);iY=n(bFe,"STRONG",{});var gjr=s(iY);YYe=r(gjr,"perceiver"),gjr.forEach(t),KYe=r(bFe," \u2014 "),Pk=n(bFe,"A",{href:!0});var hjr=s(Pk);ZYe=r(hjr,"PerceiverTokenizer"),hjr.forEach(t),eKe=r(bFe," (Perceiver model)"),bFe.forEach(t),oKe=i(y),eh=n(y,"LI",{});var vFe=s(eh);dY=n(vFe,"STRONG",{});var pjr=s(dY);rKe=r(pjr,"phobert"),pjr.forEach(t),tKe=r(vFe," \u2014 "),$k=n(vFe,"A",{href:!0});var _jr=s($k);aKe=r(_jr,"PhobertTokenizer"),_jr.forEach(t),nKe=r(vFe," (PhoBERT model)"),vFe.forEach(t),sKe=i(y),oh=n(y,"LI",{});var TFe=s(oh);cY=n(TFe,"STRONG",{});var ujr=s(cY);lKe=r(ujr,"plbart"),ujr.forEach(t),iKe=r(TFe," \u2014 "),Ik=n(TFe,"A",{href:!0});var bjr=s(Ik);dKe=r(bjr,"PLBartTokenizer"),bjr.forEach(t),cKe=r(TFe," (PLBart model)"),TFe.forEach(t),fKe=i(y),rh=n(y,"LI",{});var FFe=s(rh);fY=n(FFe,"STRONG",{});var vjr=s(fY);mKe=r(vjr,"prophetnet"),vjr.forEach(t),gKe=r(FFe," \u2014 "),Dk=n(FFe,"A",{href:!0});var Tjr=s(Dk);hKe=r(Tjr,"ProphetNetTokenizer"),Tjr.forEach(t),pKe=r(FFe," (ProphetNet model)"),FFe.forEach(t),_Ke=i(y),ws=n(y,"LI",{});var V8=s(ws);mY=n(V8,"STRONG",{});var Fjr=s(mY);uKe=r(Fjr,"qdqbert"),Fjr.forEach(t),bKe=r(V8," \u2014 "),Nk=n(V8,"A",{href:!0});var Cjr=s(Nk);vKe=r(Cjr,"BertTokenizer"),Cjr.forEach(t),TKe=r(V8," or "),jk=n(V8,"A",{href:!0});var Mjr=s(jk);FKe=r(Mjr,"BertTokenizerFast"),Mjr.forEach(t),CKe=r(V8," (QDQBert model)"),V8.forEach(t),MKe=i(y),th=n(y,"LI",{});var CFe=s(th);gY=n(CFe,"STRONG",{});var Ejr=s(gY);EKe=r(Ejr,"rag"),Ejr.forEach(t),yKe=r(CFe," \u2014 "),qk=n(CFe,"A",{href:!0});var yjr=s(qk);wKe=r(yjr,"RagTokenizer"),yjr.forEach(t),AKe=r(CFe," (RAG model)"),CFe.forEach(t),LKe=i(y),As=n(y,"LI",{});var z8=s(As);hY=n(z8,"STRONG",{});var wjr=s(hY);BKe=r(wjr,"realm"),wjr.forEach(t),xKe=r(z8," \u2014 "),Gk=n(z8,"A",{href:!0});var Ajr=s(Gk);kKe=r(Ajr,"RealmTokenizer"),Ajr.forEach(t),RKe=r(z8," or "),Ok=n(z8,"A",{href:!0});var Ljr=s(Ok);SKe=r(Ljr,"RealmTokenizerFast"),Ljr.forEach(t),PKe=r(z8," (Realm model)"),z8.forEach(t),$Ke=i(y),Ls=n(y,"LI",{});var W8=s(Ls);pY=n(W8,"STRONG",{});var Bjr=s(pY);IKe=r(Bjr,"reformer"),Bjr.forEach(t),DKe=r(W8," \u2014 "),Xk=n(W8,"A",{href:!0});var xjr=s(Xk);NKe=r(xjr,"ReformerTokenizer"),xjr.forEach(t),jKe=r(W8," or "),Vk=n(W8,"A",{href:!0});var kjr=s(Vk);qKe=r(kjr,"ReformerTokenizerFast"),kjr.forEach(t),GKe=r(W8," (Reformer model)"),W8.forEach(t),OKe=i(y),Bs=n(y,"LI",{});var Q8=s(Bs);_Y=n(Q8,"STRONG",{});var Rjr=s(_Y);XKe=r(Rjr,"rembert"),Rjr.forEach(t),VKe=r(Q8," \u2014 "),zk=n(Q8,"A",{href:!0});var Sjr=s(zk);zKe=r(Sjr,"RemBertTokenizer"),Sjr.forEach(t),WKe=r(Q8," or "),Wk=n(Q8,"A",{href:!0});var Pjr=s(Wk);QKe=r(Pjr,"RemBertTokenizerFast"),Pjr.forEach(t),HKe=r(Q8," (RemBERT model)"),Q8.forEach(t),UKe=i(y),xs=n(y,"LI",{});var H8=s(xs);uY=n(H8,"STRONG",{});var $jr=s(uY);JKe=r($jr,"retribert"),$jr.forEach(t),YKe=r(H8," \u2014 "),Qk=n(H8,"A",{href:!0});var Ijr=s(Qk);KKe=r(Ijr,"RetriBertTokenizer"),Ijr.forEach(t),ZKe=r(H8," or "),Hk=n(H8,"A",{href:!0});var Djr=s(Hk);eZe=r(Djr,"RetriBertTokenizerFast"),Djr.forEach(t),oZe=r(H8," (RetriBERT model)"),H8.forEach(t),rZe=i(y),ks=n(y,"LI",{});var U8=s(ks);bY=n(U8,"STRONG",{});var Njr=s(bY);tZe=r(Njr,"roberta"),Njr.forEach(t),aZe=r(U8," \u2014 "),Uk=n(U8,"A",{href:!0});var jjr=s(Uk);nZe=r(jjr,"RobertaTokenizer"),jjr.forEach(t),sZe=r(U8," or "),Jk=n(U8,"A",{href:!0});var qjr=s(Jk);lZe=r(qjr,"RobertaTokenizerFast"),qjr.forEach(t),iZe=r(U8," (RoBERTa model)"),U8.forEach(t),dZe=i(y),Rs=n(y,"LI",{});var J8=s(Rs);vY=n(J8,"STRONG",{});var Gjr=s(vY);cZe=r(Gjr,"roformer"),Gjr.forEach(t),fZe=r(J8," \u2014 "),Yk=n(J8,"A",{href:!0});var Ojr=s(Yk);mZe=r(Ojr,"RoFormerTokenizer"),Ojr.forEach(t),gZe=r(J8," or "),Kk=n(J8,"A",{href:!0});var Xjr=s(Kk);hZe=r(Xjr,"RoFormerTokenizerFast"),Xjr.forEach(t),pZe=r(J8," (RoFormer model)"),J8.forEach(t),_Ze=i(y),ah=n(y,"LI",{});var MFe=s(ah);TY=n(MFe,"STRONG",{});var Vjr=s(TY);uZe=r(Vjr,"speech_to_text"),Vjr.forEach(t),bZe=r(MFe," \u2014 "),Zk=n(MFe,"A",{href:!0});var zjr=s(Zk);vZe=r(zjr,"Speech2TextTokenizer"),zjr.forEach(t),TZe=r(MFe," (Speech2Text model)"),MFe.forEach(t),FZe=i(y),nh=n(y,"LI",{});var EFe=s(nh);FY=n(EFe,"STRONG",{});var Wjr=s(FY);CZe=r(Wjr,"speech_to_text_2"),Wjr.forEach(t),MZe=r(EFe," \u2014 "),eR=n(EFe,"A",{href:!0});var Qjr=s(eR);EZe=r(Qjr,"Speech2Text2Tokenizer"),Qjr.forEach(t),yZe=r(EFe," (Speech2Text2 model)"),EFe.forEach(t),wZe=i(y),Ss=n(y,"LI",{});var Y8=s(Ss);CY=n(Y8,"STRONG",{});var Hjr=s(CY);AZe=r(Hjr,"splinter"),Hjr.forEach(t),LZe=r(Y8," \u2014 "),oR=n(Y8,"A",{href:!0});var Ujr=s(oR);BZe=r(Ujr,"SplinterTokenizer"),Ujr.forEach(t),xZe=r(Y8," or "),rR=n(Y8,"A",{href:!0});var Jjr=s(rR);kZe=r(Jjr,"SplinterTokenizerFast"),Jjr.forEach(t),RZe=r(Y8," (Splinter model)"),Y8.forEach(t),SZe=i(y),Ps=n(y,"LI",{});var K8=s(Ps);MY=n(K8,"STRONG",{});var Yjr=s(MY);PZe=r(Yjr,"squeezebert"),Yjr.forEach(t),$Ze=r(K8," \u2014 "),tR=n(K8,"A",{href:!0});var Kjr=s(tR);IZe=r(Kjr,"SqueezeBertTokenizer"),Kjr.forEach(t),DZe=r(K8," or "),aR=n(K8,"A",{href:!0});var Zjr=s(aR);NZe=r(Zjr,"SqueezeBertTokenizerFast"),Zjr.forEach(t),jZe=r(K8," (SqueezeBERT model)"),K8.forEach(t),qZe=i(y),$s=n(y,"LI",{});var Z8=s($s);EY=n(Z8,"STRONG",{});var eqr=s(EY);GZe=r(eqr,"t5"),eqr.forEach(t),OZe=r(Z8," \u2014 "),nR=n(Z8,"A",{href:!0});var oqr=s(nR);XZe=r(oqr,"T5Tokenizer"),oqr.forEach(t),VZe=r(Z8," or "),sR=n(Z8,"A",{href:!0});var rqr=s(sR);zZe=r(rqr,"T5TokenizerFast"),rqr.forEach(t),WZe=r(Z8," (T5 model)"),Z8.forEach(t),QZe=i(y),sh=n(y,"LI",{});var yFe=s(sh);yY=n(yFe,"STRONG",{});var tqr=s(yY);HZe=r(tqr,"tapas"),tqr.forEach(t),UZe=r(yFe," \u2014 "),lR=n(yFe,"A",{href:!0});var aqr=s(lR);JZe=r(aqr,"TapasTokenizer"),aqr.forEach(t),YZe=r(yFe," (TAPAS model)"),yFe.forEach(t),KZe=i(y),lh=n(y,"LI",{});var wFe=s(lh);wY=n(wFe,"STRONG",{});var nqr=s(wY);ZZe=r(nqr,"tapex"),nqr.forEach(t),eeo=r(wFe," \u2014 "),iR=n(wFe,"A",{href:!0});var sqr=s(iR);oeo=r(sqr,"TapexTokenizer"),sqr.forEach(t),reo=r(wFe," (TAPEX model)"),wFe.forEach(t),teo=i(y),ih=n(y,"LI",{});var AFe=s(ih);AY=n(AFe,"STRONG",{});var lqr=s(AY);aeo=r(lqr,"transfo-xl"),lqr.forEach(t),neo=r(AFe," \u2014 "),dR=n(AFe,"A",{href:!0});var iqr=s(dR);seo=r(iqr,"TransfoXLTokenizer"),iqr.forEach(t),leo=r(AFe," (Transformer-XL model)"),AFe.forEach(t),ieo=i(y),dh=n(y,"LI",{});var LFe=s(dh);LY=n(LFe,"STRONG",{});var dqr=s(LY);deo=r(dqr,"wav2vec2"),dqr.forEach(t),ceo=r(LFe," \u2014 "),cR=n(LFe,"A",{href:!0});var cqr=s(cR);feo=r(cqr,"Wav2Vec2CTCTokenizer"),cqr.forEach(t),meo=r(LFe," (Wav2Vec2 model)"),LFe.forEach(t),geo=i(y),ch=n(y,"LI",{});var BFe=s(ch);BY=n(BFe,"STRONG",{});var fqr=s(BY);heo=r(fqr,"wav2vec2_phoneme"),fqr.forEach(t),peo=r(BFe," \u2014 "),fR=n(BFe,"A",{href:!0});var mqr=s(fR);_eo=r(mqr,"Wav2Vec2PhonemeCTCTokenizer"),mqr.forEach(t),ueo=r(BFe," (Wav2Vec2Phoneme model)"),BFe.forEach(t),beo=i(y),Is=n(y,"LI",{});var e9=s(Is);xY=n(e9,"STRONG",{});var gqr=s(xY);veo=r(gqr,"xglm"),gqr.forEach(t),Teo=r(e9," \u2014 "),mR=n(e9,"A",{href:!0});var hqr=s(mR);Feo=r(hqr,"XGLMTokenizer"),hqr.forEach(t),Ceo=r(e9," or "),gR=n(e9,"A",{href:!0});var pqr=s(gR);Meo=r(pqr,"XGLMTokenizerFast"),pqr.forEach(t),Eeo=r(e9," (XGLM model)"),e9.forEach(t),yeo=i(y),fh=n(y,"LI",{});var xFe=s(fh);kY=n(xFe,"STRONG",{});var _qr=s(kY);weo=r(_qr,"xlm"),_qr.forEach(t),Aeo=r(xFe," \u2014 "),hR=n(xFe,"A",{href:!0});var uqr=s(hR);Leo=r(uqr,"XLMTokenizer"),uqr.forEach(t),Beo=r(xFe," (XLM model)"),xFe.forEach(t),xeo=i(y),mh=n(y,"LI",{});var kFe=s(mh);RY=n(kFe,"STRONG",{});var bqr=s(RY);keo=r(bqr,"xlm-prophetnet"),bqr.forEach(t),Reo=r(kFe," \u2014 "),pR=n(kFe,"A",{href:!0});var vqr=s(pR);Seo=r(vqr,"XLMProphetNetTokenizer"),vqr.forEach(t),Peo=r(kFe," (XLMProphetNet model)"),kFe.forEach(t),$eo=i(y),Ds=n(y,"LI",{});var o9=s(Ds);SY=n(o9,"STRONG",{});var Tqr=s(SY);Ieo=r(Tqr,"xlm-roberta"),Tqr.forEach(t),Deo=r(o9," \u2014 "),_R=n(o9,"A",{href:!0});var Fqr=s(_R);Neo=r(Fqr,"XLMRobertaTokenizer"),Fqr.forEach(t),jeo=r(o9," or "),uR=n(o9,"A",{href:!0});var Cqr=s(uR);qeo=r(Cqr,"XLMRobertaTokenizerFast"),Cqr.forEach(t),Geo=r(o9," (XLM-RoBERTa model)"),o9.forEach(t),Oeo=i(y),Ns=n(y,"LI",{});var r9=s(Ns);PY=n(r9,"STRONG",{});var Mqr=s(PY);Xeo=r(Mqr,"xlnet"),Mqr.forEach(t),Veo=r(r9," \u2014 "),bR=n(r9,"A",{href:!0});var Eqr=s(bR);zeo=r(Eqr,"XLNetTokenizer"),Eqr.forEach(t),Weo=r(r9," or "),vR=n(r9,"A",{href:!0});var yqr=s(vR);Qeo=r(yqr,"XLNetTokenizerFast"),yqr.forEach(t),Heo=r(r9," (XLNet model)"),r9.forEach(t),y.forEach(t),Ueo=i(ha),$Y=n(ha,"P",{});var wqr=s($Y);Jeo=r(wqr,"Examples:"),wqr.forEach(t),Yeo=i(ha),m(RE.$$.fragment,ha),ha.forEach(t),Keo=i(Xs),gh=n(Xs,"DIV",{class:!0});var WSe=s(gh);m(SE.$$.fragment,WSe),Zeo=i(WSe),IY=n(WSe,"P",{});var Aqr=s(IY);eoo=r(Aqr,"Register a new tokenizer in this mapping."),Aqr.forEach(t),WSe.forEach(t),Xs.forEach(t),Oke=i(c),Qi=n(c,"H2",{class:!0});var QSe=s(Qi);hh=n(QSe,"A",{id:!0,class:!0,href:!0});var Lqr=s(hh);DY=n(Lqr,"SPAN",{});var Bqr=s(DY);m(PE.$$.fragment,Bqr),Bqr.forEach(t),Lqr.forEach(t),ooo=i(QSe),NY=n(QSe,"SPAN",{});var xqr=s(NY);roo=r(xqr,"AutoFeatureExtractor"),xqr.forEach(t),QSe.forEach(t),Xke=i(c),Ho=n(c,"DIV",{class:!0});var Vs=s(Ho);m($E.$$.fragment,Vs),too=i(Vs),IE=n(Vs,"P",{});var HSe=s(IE);aoo=r(HSe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),TR=n(HSe,"A",{href:!0});var kqr=s(TR);noo=r(kqr,"AutoFeatureExtractor.from_pretrained()"),kqr.forEach(t),soo=r(HSe," class method."),HSe.forEach(t),loo=i(Vs),DE=n(Vs,"P",{});var USe=s(DE);ioo=r(USe,"This class cannot be instantiated directly using "),jY=n(USe,"CODE",{});var Rqr=s(jY);doo=r(Rqr,"__init__()"),Rqr.forEach(t),coo=r(USe," (throws an error)."),USe.forEach(t),foo=i(Vs),$e=n(Vs,"DIV",{class:!0});var Nt=s($e);m(NE.$$.fragment,Nt),moo=i(Nt),qY=n(Nt,"P",{});var Sqr=s(qY);goo=r(Sqr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Sqr.forEach(t),hoo=i(Nt),Xa=n(Nt,"P",{});var uM=s(Xa);poo=r(uM,"The feature extractor class to instantiate is selected based on the "),GY=n(uM,"CODE",{});var Pqr=s(GY);_oo=r(Pqr,"model_type"),Pqr.forEach(t),uoo=r(uM,` property of the config object
(either passed as an argument or loaded from `),OY=n(uM,"CODE",{});var $qr=s(OY);boo=r($qr,"pretrained_model_name_or_path"),$qr.forEach(t),voo=r(uM,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),XY=n(uM,"CODE",{});var Iqr=s(XY);Too=r(Iqr,"pretrained_model_name_or_path"),Iqr.forEach(t),Foo=r(uM,":"),uM.forEach(t),Coo=i(Nt),te=n(Nt,"UL",{});var ne=s(te);ph=n(ne,"LI",{});var RFe=s(ph);VY=n(RFe,"STRONG",{});var Dqr=s(VY);Moo=r(Dqr,"beit"),Dqr.forEach(t),Eoo=r(RFe," \u2014 "),FR=n(RFe,"A",{href:!0});var Nqr=s(FR);yoo=r(Nqr,"BeitFeatureExtractor"),Nqr.forEach(t),woo=r(RFe," (BEiT model)"),RFe.forEach(t),Aoo=i(ne),_h=n(ne,"LI",{});var SFe=s(_h);zY=n(SFe,"STRONG",{});var jqr=s(zY);Loo=r(jqr,"clip"),jqr.forEach(t),Boo=r(SFe," \u2014 "),CR=n(SFe,"A",{href:!0});var qqr=s(CR);xoo=r(qqr,"CLIPFeatureExtractor"),qqr.forEach(t),koo=r(SFe," (CLIP model)"),SFe.forEach(t),Roo=i(ne),uh=n(ne,"LI",{});var PFe=s(uh);WY=n(PFe,"STRONG",{});var Gqr=s(WY);Soo=r(Gqr,"convnext"),Gqr.forEach(t),Poo=r(PFe," \u2014 "),MR=n(PFe,"A",{href:!0});var Oqr=s(MR);$oo=r(Oqr,"ConvNextFeatureExtractor"),Oqr.forEach(t),Ioo=r(PFe," (ConvNext model)"),PFe.forEach(t),Doo=i(ne),bh=n(ne,"LI",{});var $Fe=s(bh);QY=n($Fe,"STRONG",{});var Xqr=s(QY);Noo=r(Xqr,"deit"),Xqr.forEach(t),joo=r($Fe," \u2014 "),ER=n($Fe,"A",{href:!0});var Vqr=s(ER);qoo=r(Vqr,"DeiTFeatureExtractor"),Vqr.forEach(t),Goo=r($Fe," (DeiT model)"),$Fe.forEach(t),Ooo=i(ne),vh=n(ne,"LI",{});var IFe=s(vh);HY=n(IFe,"STRONG",{});var zqr=s(HY);Xoo=r(zqr,"detr"),zqr.forEach(t),Voo=r(IFe," \u2014 "),yR=n(IFe,"A",{href:!0});var Wqr=s(yR);zoo=r(Wqr,"DetrFeatureExtractor"),Wqr.forEach(t),Woo=r(IFe," (DETR model)"),IFe.forEach(t),Qoo=i(ne),Th=n(ne,"LI",{});var DFe=s(Th);UY=n(DFe,"STRONG",{});var Qqr=s(UY);Hoo=r(Qqr,"hubert"),Qqr.forEach(t),Uoo=r(DFe," \u2014 "),wR=n(DFe,"A",{href:!0});var Hqr=s(wR);Joo=r(Hqr,"Wav2Vec2FeatureExtractor"),Hqr.forEach(t),Yoo=r(DFe," (Hubert model)"),DFe.forEach(t),Koo=i(ne),Fh=n(ne,"LI",{});var NFe=s(Fh);JY=n(NFe,"STRONG",{});var Uqr=s(JY);Zoo=r(Uqr,"layoutlmv2"),Uqr.forEach(t),ero=r(NFe," \u2014 "),AR=n(NFe,"A",{href:!0});var Jqr=s(AR);oro=r(Jqr,"LayoutLMv2FeatureExtractor"),Jqr.forEach(t),rro=r(NFe," (LayoutLMv2 model)"),NFe.forEach(t),tro=i(ne),Ch=n(ne,"LI",{});var jFe=s(Ch);YY=n(jFe,"STRONG",{});var Yqr=s(YY);aro=r(Yqr,"maskformer"),Yqr.forEach(t),nro=r(jFe," \u2014 "),LR=n(jFe,"A",{href:!0});var Kqr=s(LR);sro=r(Kqr,"MaskFormerFeatureExtractor"),Kqr.forEach(t),lro=r(jFe," (MaskFormer model)"),jFe.forEach(t),iro=i(ne),Mh=n(ne,"LI",{});var qFe=s(Mh);KY=n(qFe,"STRONG",{});var Zqr=s(KY);dro=r(Zqr,"perceiver"),Zqr.forEach(t),cro=r(qFe," \u2014 "),BR=n(qFe,"A",{href:!0});var eGr=s(BR);fro=r(eGr,"PerceiverFeatureExtractor"),eGr.forEach(t),mro=r(qFe," (Perceiver model)"),qFe.forEach(t),gro=i(ne),Eh=n(ne,"LI",{});var GFe=s(Eh);ZY=n(GFe,"STRONG",{});var oGr=s(ZY);hro=r(oGr,"poolformer"),oGr.forEach(t),pro=r(GFe," \u2014 "),xR=n(GFe,"A",{href:!0});var rGr=s(xR);_ro=r(rGr,"PoolFormerFeatureExtractor"),rGr.forEach(t),uro=r(GFe," (PoolFormer model)"),GFe.forEach(t),bro=i(ne),yh=n(ne,"LI",{});var OFe=s(yh);eK=n(OFe,"STRONG",{});var tGr=s(eK);vro=r(tGr,"resnet"),tGr.forEach(t),Tro=r(OFe," \u2014 "),kR=n(OFe,"A",{href:!0});var aGr=s(kR);Fro=r(aGr,"ConvNextFeatureExtractor"),aGr.forEach(t),Cro=r(OFe," (ResNet model)"),OFe.forEach(t),Mro=i(ne),wh=n(ne,"LI",{});var XFe=s(wh);oK=n(XFe,"STRONG",{});var nGr=s(oK);Ero=r(nGr,"segformer"),nGr.forEach(t),yro=r(XFe," \u2014 "),RR=n(XFe,"A",{href:!0});var sGr=s(RR);wro=r(sGr,"SegformerFeatureExtractor"),sGr.forEach(t),Aro=r(XFe," (SegFormer model)"),XFe.forEach(t),Lro=i(ne),Ah=n(ne,"LI",{});var VFe=s(Ah);rK=n(VFe,"STRONG",{});var lGr=s(rK);Bro=r(lGr,"speech_to_text"),lGr.forEach(t),xro=r(VFe," \u2014 "),SR=n(VFe,"A",{href:!0});var iGr=s(SR);kro=r(iGr,"Speech2TextFeatureExtractor"),iGr.forEach(t),Rro=r(VFe," (Speech2Text model)"),VFe.forEach(t),Sro=i(ne),Lh=n(ne,"LI",{});var zFe=s(Lh);tK=n(zFe,"STRONG",{});var dGr=s(tK);Pro=r(dGr,"swin"),dGr.forEach(t),$ro=r(zFe," \u2014 "),PR=n(zFe,"A",{href:!0});var cGr=s(PR);Iro=r(cGr,"ViTFeatureExtractor"),cGr.forEach(t),Dro=r(zFe," (Swin model)"),zFe.forEach(t),Nro=i(ne),Bh=n(ne,"LI",{});var WFe=s(Bh);aK=n(WFe,"STRONG",{});var fGr=s(aK);jro=r(fGr,"van"),fGr.forEach(t),qro=r(WFe," \u2014 "),$R=n(WFe,"A",{href:!0});var mGr=s($R);Gro=r(mGr,"ConvNextFeatureExtractor"),mGr.forEach(t),Oro=r(WFe," (VAN model)"),WFe.forEach(t),Xro=i(ne),xh=n(ne,"LI",{});var QFe=s(xh);nK=n(QFe,"STRONG",{});var gGr=s(nK);Vro=r(gGr,"vit"),gGr.forEach(t),zro=r(QFe," \u2014 "),IR=n(QFe,"A",{href:!0});var hGr=s(IR);Wro=r(hGr,"ViTFeatureExtractor"),hGr.forEach(t),Qro=r(QFe," (ViT model)"),QFe.forEach(t),Hro=i(ne),kh=n(ne,"LI",{});var HFe=s(kh);sK=n(HFe,"STRONG",{});var pGr=s(sK);Uro=r(pGr,"vit_mae"),pGr.forEach(t),Jro=r(HFe," \u2014 "),DR=n(HFe,"A",{href:!0});var _Gr=s(DR);Yro=r(_Gr,"ViTFeatureExtractor"),_Gr.forEach(t),Kro=r(HFe," (ViTMAE model)"),HFe.forEach(t),Zro=i(ne),Rh=n(ne,"LI",{});var UFe=s(Rh);lK=n(UFe,"STRONG",{});var uGr=s(lK);eto=r(uGr,"wav2vec2"),uGr.forEach(t),oto=r(UFe," \u2014 "),NR=n(UFe,"A",{href:!0});var bGr=s(NR);rto=r(bGr,"Wav2Vec2FeatureExtractor"),bGr.forEach(t),tto=r(UFe," (Wav2Vec2 model)"),UFe.forEach(t),ne.forEach(t),ato=i(Nt),m(Sh.$$.fragment,Nt),nto=i(Nt),iK=n(Nt,"P",{});var vGr=s(iK);sto=r(vGr,"Examples:"),vGr.forEach(t),lto=i(Nt),m(jE.$$.fragment,Nt),Nt.forEach(t),ito=i(Vs),Ph=n(Vs,"DIV",{class:!0});var JSe=s(Ph);m(qE.$$.fragment,JSe),dto=i(JSe),dK=n(JSe,"P",{});var TGr=s(dK);cto=r(TGr,"Register a new feature extractor for this class."),TGr.forEach(t),JSe.forEach(t),Vs.forEach(t),Vke=i(c),Hi=n(c,"H2",{class:!0});var YSe=s(Hi);$h=n(YSe,"A",{id:!0,class:!0,href:!0});var FGr=s($h);cK=n(FGr,"SPAN",{});var CGr=s(cK);m(GE.$$.fragment,CGr),CGr.forEach(t),FGr.forEach(t),fto=i(YSe),fK=n(YSe,"SPAN",{});var MGr=s(fK);mto=r(MGr,"AutoProcessor"),MGr.forEach(t),YSe.forEach(t),zke=i(c),Uo=n(c,"DIV",{class:!0});var zs=s(Uo);m(OE.$$.fragment,zs),gto=i(zs),XE=n(zs,"P",{});var KSe=s(XE);hto=r(KSe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),jR=n(KSe,"A",{href:!0});var EGr=s(jR);pto=r(EGr,"AutoProcessor.from_pretrained()"),EGr.forEach(t),_to=r(KSe," class method."),KSe.forEach(t),uto=i(zs),VE=n(zs,"P",{});var ZSe=s(VE);bto=r(ZSe,"This class cannot be instantiated directly using "),mK=n(ZSe,"CODE",{});var yGr=s(mK);vto=r(yGr,"__init__()"),yGr.forEach(t),Tto=r(ZSe," (throws an error)."),ZSe.forEach(t),Fto=i(zs),Ie=n(zs,"DIV",{class:!0});var jt=s(Ie);m(zE.$$.fragment,jt),Cto=i(jt),gK=n(jt,"P",{});var wGr=s(gK);Mto=r(wGr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),wGr.forEach(t),Eto=i(jt),Ui=n(jt,"P",{});var cW=s(Ui);yto=r(cW,"The processor class to instantiate is selected based on the "),hK=n(cW,"CODE",{});var AGr=s(hK);wto=r(AGr,"model_type"),AGr.forEach(t),Ato=r(cW,` property of the config object (either
passed as an argument or loaded from `),pK=n(cW,"CODE",{});var LGr=s(pK);Lto=r(LGr,"pretrained_model_name_or_path"),LGr.forEach(t),Bto=r(cW," if possible):"),cW.forEach(t),xto=i(jt),xe=n(jt,"UL",{});var jo=s(xe);Ih=n(jo,"LI",{});var JFe=s(Ih);_K=n(JFe,"STRONG",{});var BGr=s(_K);kto=r(BGr,"clip"),BGr.forEach(t),Rto=r(JFe," \u2014 "),qR=n(JFe,"A",{href:!0});var xGr=s(qR);Sto=r(xGr,"CLIPProcessor"),xGr.forEach(t),Pto=r(JFe," (CLIP model)"),JFe.forEach(t),$to=i(jo),Dh=n(jo,"LI",{});var YFe=s(Dh);uK=n(YFe,"STRONG",{});var kGr=s(uK);Ito=r(kGr,"layoutlmv2"),kGr.forEach(t),Dto=r(YFe," \u2014 "),GR=n(YFe,"A",{href:!0});var RGr=s(GR);Nto=r(RGr,"LayoutLMv2Processor"),RGr.forEach(t),jto=r(YFe," (LayoutLMv2 model)"),YFe.forEach(t),qto=i(jo),Nh=n(jo,"LI",{});var KFe=s(Nh);bK=n(KFe,"STRONG",{});var SGr=s(bK);Gto=r(SGr,"layoutxlm"),SGr.forEach(t),Oto=r(KFe," \u2014 "),OR=n(KFe,"A",{href:!0});var PGr=s(OR);Xto=r(PGr,"LayoutXLMProcessor"),PGr.forEach(t),Vto=r(KFe," (LayoutXLM model)"),KFe.forEach(t),zto=i(jo),jh=n(jo,"LI",{});var ZFe=s(jh);vK=n(ZFe,"STRONG",{});var $Gr=s(vK);Wto=r($Gr,"speech_to_text"),$Gr.forEach(t),Qto=r(ZFe," \u2014 "),XR=n(ZFe,"A",{href:!0});var IGr=s(XR);Hto=r(IGr,"Speech2TextProcessor"),IGr.forEach(t),Uto=r(ZFe," (Speech2Text model)"),ZFe.forEach(t),Jto=i(jo),qh=n(jo,"LI",{});var eCe=s(qh);TK=n(eCe,"STRONG",{});var DGr=s(TK);Yto=r(DGr,"speech_to_text_2"),DGr.forEach(t),Kto=r(eCe," \u2014 "),VR=n(eCe,"A",{href:!0});var NGr=s(VR);Zto=r(NGr,"Speech2Text2Processor"),NGr.forEach(t),eao=r(eCe," (Speech2Text2 model)"),eCe.forEach(t),oao=i(jo),Gh=n(jo,"LI",{});var oCe=s(Gh);FK=n(oCe,"STRONG",{});var jGr=s(FK);rao=r(jGr,"trocr"),jGr.forEach(t),tao=r(oCe," \u2014 "),zR=n(oCe,"A",{href:!0});var qGr=s(zR);aao=r(qGr,"TrOCRProcessor"),qGr.forEach(t),nao=r(oCe," (TrOCR model)"),oCe.forEach(t),sao=i(jo),Oh=n(jo,"LI",{});var rCe=s(Oh);CK=n(rCe,"STRONG",{});var GGr=s(CK);lao=r(GGr,"vision-text-dual-encoder"),GGr.forEach(t),iao=r(rCe," \u2014 "),WR=n(rCe,"A",{href:!0});var OGr=s(WR);dao=r(OGr,"VisionTextDualEncoderProcessor"),OGr.forEach(t),cao=r(rCe," (VisionTextDualEncoder model)"),rCe.forEach(t),fao=i(jo),Xh=n(jo,"LI",{});var tCe=s(Xh);MK=n(tCe,"STRONG",{});var XGr=s(MK);mao=r(XGr,"wav2vec2"),XGr.forEach(t),gao=r(tCe," \u2014 "),QR=n(tCe,"A",{href:!0});var VGr=s(QR);hao=r(VGr,"Wav2Vec2Processor"),VGr.forEach(t),pao=r(tCe," (Wav2Vec2 model)"),tCe.forEach(t),jo.forEach(t),_ao=i(jt),m(Vh.$$.fragment,jt),uao=i(jt),EK=n(jt,"P",{});var zGr=s(EK);bao=r(zGr,"Examples:"),zGr.forEach(t),vao=i(jt),m(WE.$$.fragment,jt),jt.forEach(t),Tao=i(zs),zh=n(zs,"DIV",{class:!0});var ePe=s(zh);m(QE.$$.fragment,ePe),Fao=i(ePe),yK=n(ePe,"P",{});var WGr=s(yK);Cao=r(WGr,"Register a new processor for this class."),WGr.forEach(t),ePe.forEach(t),zs.forEach(t),Wke=i(c),Ji=n(c,"H2",{class:!0});var oPe=s(Ji);Wh=n(oPe,"A",{id:!0,class:!0,href:!0});var QGr=s(Wh);wK=n(QGr,"SPAN",{});var HGr=s(wK);m(HE.$$.fragment,HGr),HGr.forEach(t),QGr.forEach(t),Mao=i(oPe),AK=n(oPe,"SPAN",{});var UGr=s(AK);Eao=r(UGr,"AutoModel"),UGr.forEach(t),oPe.forEach(t),Qke=i(c),Jo=n(c,"DIV",{class:!0});var Ws=s(Jo);m(UE.$$.fragment,Ws),yao=i(Ws),Yi=n(Ws,"P",{});var fW=s(Yi);wao=r(fW,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),LK=n(fW,"CODE",{});var JGr=s(LK);Aao=r(JGr,"from_pretrained()"),JGr.forEach(t),Lao=r(fW,"class method or the "),BK=n(fW,"CODE",{});var YGr=s(BK);Bao=r(YGr,"from_config()"),YGr.forEach(t),xao=r(fW,`class
method.`),fW.forEach(t),kao=i(Ws),JE=n(Ws,"P",{});var rPe=s(JE);Rao=r(rPe,"This class cannot be instantiated directly using "),xK=n(rPe,"CODE",{});var KGr=s(xK);Sao=r(KGr,"__init__()"),KGr.forEach(t),Pao=r(rPe," (throws an error)."),rPe.forEach(t),$ao=i(Ws),Vr=n(Ws,"DIV",{class:!0});var Qs=s(Vr);m(YE.$$.fragment,Qs),Iao=i(Qs),kK=n(Qs,"P",{});var ZGr=s(kK);Dao=r(ZGr,"Instantiates one of the base model classes of the library from a configuration."),ZGr.forEach(t),Nao=i(Qs),Ki=n(Qs,"P",{});var mW=s(Ki);jao=r(mW,`Note:
Loading a model from its configuration file does `),RK=n(mW,"STRONG",{});var eOr=s(RK);qao=r(eOr,"not"),eOr.forEach(t),Gao=r(mW,` load the model weights. It only affects the
model\u2019s configuration. Use `),SK=n(mW,"CODE",{});var oOr=s(SK);Oao=r(oOr,"from_pretrained()"),oOr.forEach(t),Xao=r(mW,"to load the model weights."),mW.forEach(t),Vao=i(Qs),PK=n(Qs,"P",{});var rOr=s(PK);zao=r(rOr,"Examples:"),rOr.forEach(t),Wao=i(Qs),m(KE.$$.fragment,Qs),Qs.forEach(t),Qao=i(Ws),De=n(Ws,"DIV",{class:!0});var qt=s(De);m(ZE.$$.fragment,qt),Hao=i(qt),$K=n(qt,"P",{});var tOr=s($K);Uao=r(tOr,"Instantiate one of the base model classes of the library from a pretrained model."),tOr.forEach(t),Jao=i(qt),Va=n(qt,"P",{});var bM=s(Va);Yao=r(bM,"The model class to instantiate is selected based on the "),IK=n(bM,"CODE",{});var aOr=s(IK);Kao=r(aOr,"model_type"),aOr.forEach(t),Zao=r(bM,` property of the config object (either
passed as an argument or loaded from `),DK=n(bM,"CODE",{});var nOr=s(DK);eno=r(nOr,"pretrained_model_name_or_path"),nOr.forEach(t),ono=r(bM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NK=n(bM,"CODE",{});var sOr=s(NK);rno=r(sOr,"pretrained_model_name_or_path"),sOr.forEach(t),tno=r(bM,":"),bM.forEach(t),ano=i(qt),F=n(qt,"UL",{});var C=s(F);Qh=n(C,"LI",{});var aCe=s(Qh);jK=n(aCe,"STRONG",{});var lOr=s(jK);nno=r(lOr,"albert"),lOr.forEach(t),sno=r(aCe," \u2014 "),HR=n(aCe,"A",{href:!0});var iOr=s(HR);lno=r(iOr,"AlbertModel"),iOr.forEach(t),ino=r(aCe," (ALBERT model)"),aCe.forEach(t),dno=i(C),Hh=n(C,"LI",{});var nCe=s(Hh);qK=n(nCe,"STRONG",{});var dOr=s(qK);cno=r(dOr,"bart"),dOr.forEach(t),fno=r(nCe," \u2014 "),UR=n(nCe,"A",{href:!0});var cOr=s(UR);mno=r(cOr,"BartModel"),cOr.forEach(t),gno=r(nCe," (BART model)"),nCe.forEach(t),hno=i(C),Uh=n(C,"LI",{});var sCe=s(Uh);GK=n(sCe,"STRONG",{});var fOr=s(GK);pno=r(fOr,"beit"),fOr.forEach(t),_no=r(sCe," \u2014 "),JR=n(sCe,"A",{href:!0});var mOr=s(JR);uno=r(mOr,"BeitModel"),mOr.forEach(t),bno=r(sCe," (BEiT model)"),sCe.forEach(t),vno=i(C),Jh=n(C,"LI",{});var lCe=s(Jh);OK=n(lCe,"STRONG",{});var gOr=s(OK);Tno=r(gOr,"bert"),gOr.forEach(t),Fno=r(lCe," \u2014 "),YR=n(lCe,"A",{href:!0});var hOr=s(YR);Cno=r(hOr,"BertModel"),hOr.forEach(t),Mno=r(lCe," (BERT model)"),lCe.forEach(t),Eno=i(C),Yh=n(C,"LI",{});var iCe=s(Yh);XK=n(iCe,"STRONG",{});var pOr=s(XK);yno=r(pOr,"bert-generation"),pOr.forEach(t),wno=r(iCe," \u2014 "),KR=n(iCe,"A",{href:!0});var _Or=s(KR);Ano=r(_Or,"BertGenerationEncoder"),_Or.forEach(t),Lno=r(iCe," (Bert Generation model)"),iCe.forEach(t),Bno=i(C),Kh=n(C,"LI",{});var dCe=s(Kh);VK=n(dCe,"STRONG",{});var uOr=s(VK);xno=r(uOr,"big_bird"),uOr.forEach(t),kno=r(dCe," \u2014 "),ZR=n(dCe,"A",{href:!0});var bOr=s(ZR);Rno=r(bOr,"BigBirdModel"),bOr.forEach(t),Sno=r(dCe," (BigBird model)"),dCe.forEach(t),Pno=i(C),Zh=n(C,"LI",{});var cCe=s(Zh);zK=n(cCe,"STRONG",{});var vOr=s(zK);$no=r(vOr,"bigbird_pegasus"),vOr.forEach(t),Ino=r(cCe," \u2014 "),eS=n(cCe,"A",{href:!0});var TOr=s(eS);Dno=r(TOr,"BigBirdPegasusModel"),TOr.forEach(t),Nno=r(cCe," (BigBirdPegasus model)"),cCe.forEach(t),jno=i(C),ep=n(C,"LI",{});var fCe=s(ep);WK=n(fCe,"STRONG",{});var FOr=s(WK);qno=r(FOr,"blenderbot"),FOr.forEach(t),Gno=r(fCe," \u2014 "),oS=n(fCe,"A",{href:!0});var COr=s(oS);Ono=r(COr,"BlenderbotModel"),COr.forEach(t),Xno=r(fCe," (Blenderbot model)"),fCe.forEach(t),Vno=i(C),op=n(C,"LI",{});var mCe=s(op);QK=n(mCe,"STRONG",{});var MOr=s(QK);zno=r(MOr,"blenderbot-small"),MOr.forEach(t),Wno=r(mCe," \u2014 "),rS=n(mCe,"A",{href:!0});var EOr=s(rS);Qno=r(EOr,"BlenderbotSmallModel"),EOr.forEach(t),Hno=r(mCe," (BlenderbotSmall model)"),mCe.forEach(t),Uno=i(C),rp=n(C,"LI",{});var gCe=s(rp);HK=n(gCe,"STRONG",{});var yOr=s(HK);Jno=r(yOr,"camembert"),yOr.forEach(t),Yno=r(gCe," \u2014 "),tS=n(gCe,"A",{href:!0});var wOr=s(tS);Kno=r(wOr,"CamembertModel"),wOr.forEach(t),Zno=r(gCe," (CamemBERT model)"),gCe.forEach(t),eso=i(C),tp=n(C,"LI",{});var hCe=s(tp);UK=n(hCe,"STRONG",{});var AOr=s(UK);oso=r(AOr,"canine"),AOr.forEach(t),rso=r(hCe," \u2014 "),aS=n(hCe,"A",{href:!0});var LOr=s(aS);tso=r(LOr,"CanineModel"),LOr.forEach(t),aso=r(hCe," (Canine model)"),hCe.forEach(t),nso=i(C),ap=n(C,"LI",{});var pCe=s(ap);JK=n(pCe,"STRONG",{});var BOr=s(JK);sso=r(BOr,"clip"),BOr.forEach(t),lso=r(pCe," \u2014 "),nS=n(pCe,"A",{href:!0});var xOr=s(nS);iso=r(xOr,"CLIPModel"),xOr.forEach(t),dso=r(pCe," (CLIP model)"),pCe.forEach(t),cso=i(C),np=n(C,"LI",{});var _Ce=s(np);YK=n(_Ce,"STRONG",{});var kOr=s(YK);fso=r(kOr,"convbert"),kOr.forEach(t),mso=r(_Ce," \u2014 "),sS=n(_Ce,"A",{href:!0});var ROr=s(sS);gso=r(ROr,"ConvBertModel"),ROr.forEach(t),hso=r(_Ce," (ConvBERT model)"),_Ce.forEach(t),pso=i(C),sp=n(C,"LI",{});var uCe=s(sp);KK=n(uCe,"STRONG",{});var SOr=s(KK);_so=r(SOr,"convnext"),SOr.forEach(t),uso=r(uCe," \u2014 "),lS=n(uCe,"A",{href:!0});var POr=s(lS);bso=r(POr,"ConvNextModel"),POr.forEach(t),vso=r(uCe," (ConvNext model)"),uCe.forEach(t),Tso=i(C),lp=n(C,"LI",{});var bCe=s(lp);ZK=n(bCe,"STRONG",{});var $Or=s(ZK);Fso=r($Or,"ctrl"),$Or.forEach(t),Cso=r(bCe," \u2014 "),iS=n(bCe,"A",{href:!0});var IOr=s(iS);Mso=r(IOr,"CTRLModel"),IOr.forEach(t),Eso=r(bCe," (CTRL model)"),bCe.forEach(t),yso=i(C),ip=n(C,"LI",{});var vCe=s(ip);eZ=n(vCe,"STRONG",{});var DOr=s(eZ);wso=r(DOr,"data2vec-audio"),DOr.forEach(t),Aso=r(vCe," \u2014 "),dS=n(vCe,"A",{href:!0});var NOr=s(dS);Lso=r(NOr,"Data2VecAudioModel"),NOr.forEach(t),Bso=r(vCe," (Data2VecAudio model)"),vCe.forEach(t),xso=i(C),dp=n(C,"LI",{});var TCe=s(dp);oZ=n(TCe,"STRONG",{});var jOr=s(oZ);kso=r(jOr,"data2vec-text"),jOr.forEach(t),Rso=r(TCe," \u2014 "),cS=n(TCe,"A",{href:!0});var qOr=s(cS);Sso=r(qOr,"Data2VecTextModel"),qOr.forEach(t),Pso=r(TCe," (Data2VecText model)"),TCe.forEach(t),$so=i(C),cp=n(C,"LI",{});var FCe=s(cp);rZ=n(FCe,"STRONG",{});var GOr=s(rZ);Iso=r(GOr,"deberta"),GOr.forEach(t),Dso=r(FCe," \u2014 "),fS=n(FCe,"A",{href:!0});var OOr=s(fS);Nso=r(OOr,"DebertaModel"),OOr.forEach(t),jso=r(FCe," (DeBERTa model)"),FCe.forEach(t),qso=i(C),fp=n(C,"LI",{});var CCe=s(fp);tZ=n(CCe,"STRONG",{});var XOr=s(tZ);Gso=r(XOr,"deberta-v2"),XOr.forEach(t),Oso=r(CCe," \u2014 "),mS=n(CCe,"A",{href:!0});var VOr=s(mS);Xso=r(VOr,"DebertaV2Model"),VOr.forEach(t),Vso=r(CCe," (DeBERTa-v2 model)"),CCe.forEach(t),zso=i(C),mp=n(C,"LI",{});var MCe=s(mp);aZ=n(MCe,"STRONG",{});var zOr=s(aZ);Wso=r(zOr,"decision_transformer"),zOr.forEach(t),Qso=r(MCe," \u2014 "),gS=n(MCe,"A",{href:!0});var WOr=s(gS);Hso=r(WOr,"DecisionTransformerModel"),WOr.forEach(t),Uso=r(MCe," (Decision Transformer model)"),MCe.forEach(t),Jso=i(C),gp=n(C,"LI",{});var ECe=s(gp);nZ=n(ECe,"STRONG",{});var QOr=s(nZ);Yso=r(QOr,"deit"),QOr.forEach(t),Kso=r(ECe," \u2014 "),hS=n(ECe,"A",{href:!0});var HOr=s(hS);Zso=r(HOr,"DeiTModel"),HOr.forEach(t),elo=r(ECe," (DeiT model)"),ECe.forEach(t),olo=i(C),hp=n(C,"LI",{});var yCe=s(hp);sZ=n(yCe,"STRONG",{});var UOr=s(sZ);rlo=r(UOr,"detr"),UOr.forEach(t),tlo=r(yCe," \u2014 "),pS=n(yCe,"A",{href:!0});var JOr=s(pS);alo=r(JOr,"DetrModel"),JOr.forEach(t),nlo=r(yCe," (DETR model)"),yCe.forEach(t),slo=i(C),pp=n(C,"LI",{});var wCe=s(pp);lZ=n(wCe,"STRONG",{});var YOr=s(lZ);llo=r(YOr,"distilbert"),YOr.forEach(t),ilo=r(wCe," \u2014 "),_S=n(wCe,"A",{href:!0});var KOr=s(_S);dlo=r(KOr,"DistilBertModel"),KOr.forEach(t),clo=r(wCe," (DistilBERT model)"),wCe.forEach(t),flo=i(C),_p=n(C,"LI",{});var ACe=s(_p);iZ=n(ACe,"STRONG",{});var ZOr=s(iZ);mlo=r(ZOr,"dpr"),ZOr.forEach(t),glo=r(ACe," \u2014 "),uS=n(ACe,"A",{href:!0});var eXr=s(uS);hlo=r(eXr,"DPRQuestionEncoder"),eXr.forEach(t),plo=r(ACe," (DPR model)"),ACe.forEach(t),_lo=i(C),up=n(C,"LI",{});var LCe=s(up);dZ=n(LCe,"STRONG",{});var oXr=s(dZ);ulo=r(oXr,"dpt"),oXr.forEach(t),blo=r(LCe," \u2014 "),bS=n(LCe,"A",{href:!0});var rXr=s(bS);vlo=r(rXr,"DPTModel"),rXr.forEach(t),Tlo=r(LCe," (DPT model)"),LCe.forEach(t),Flo=i(C),bp=n(C,"LI",{});var BCe=s(bp);cZ=n(BCe,"STRONG",{});var tXr=s(cZ);Clo=r(tXr,"electra"),tXr.forEach(t),Mlo=r(BCe," \u2014 "),vS=n(BCe,"A",{href:!0});var aXr=s(vS);Elo=r(aXr,"ElectraModel"),aXr.forEach(t),ylo=r(BCe," (ELECTRA model)"),BCe.forEach(t),wlo=i(C),vp=n(C,"LI",{});var xCe=s(vp);fZ=n(xCe,"STRONG",{});var nXr=s(fZ);Alo=r(nXr,"flaubert"),nXr.forEach(t),Llo=r(xCe," \u2014 "),TS=n(xCe,"A",{href:!0});var sXr=s(TS);Blo=r(sXr,"FlaubertModel"),sXr.forEach(t),xlo=r(xCe," (FlauBERT model)"),xCe.forEach(t),klo=i(C),Tp=n(C,"LI",{});var kCe=s(Tp);mZ=n(kCe,"STRONG",{});var lXr=s(mZ);Rlo=r(lXr,"fnet"),lXr.forEach(t),Slo=r(kCe," \u2014 "),FS=n(kCe,"A",{href:!0});var iXr=s(FS);Plo=r(iXr,"FNetModel"),iXr.forEach(t),$lo=r(kCe," (FNet model)"),kCe.forEach(t),Ilo=i(C),Fp=n(C,"LI",{});var RCe=s(Fp);gZ=n(RCe,"STRONG",{});var dXr=s(gZ);Dlo=r(dXr,"fsmt"),dXr.forEach(t),Nlo=r(RCe," \u2014 "),CS=n(RCe,"A",{href:!0});var cXr=s(CS);jlo=r(cXr,"FSMTModel"),cXr.forEach(t),qlo=r(RCe," (FairSeq Machine-Translation model)"),RCe.forEach(t),Glo=i(C),js=n(C,"LI",{});var t9=s(js);hZ=n(t9,"STRONG",{});var fXr=s(hZ);Olo=r(fXr,"funnel"),fXr.forEach(t),Xlo=r(t9," \u2014 "),MS=n(t9,"A",{href:!0});var mXr=s(MS);Vlo=r(mXr,"FunnelModel"),mXr.forEach(t),zlo=r(t9," or "),ES=n(t9,"A",{href:!0});var gXr=s(ES);Wlo=r(gXr,"FunnelBaseModel"),gXr.forEach(t),Qlo=r(t9," (Funnel Transformer model)"),t9.forEach(t),Hlo=i(C),Cp=n(C,"LI",{});var SCe=s(Cp);pZ=n(SCe,"STRONG",{});var hXr=s(pZ);Ulo=r(hXr,"glpn"),hXr.forEach(t),Jlo=r(SCe," \u2014 "),yS=n(SCe,"A",{href:!0});var pXr=s(yS);Ylo=r(pXr,"GLPNModel"),pXr.forEach(t),Klo=r(SCe," (GLPN model)"),SCe.forEach(t),Zlo=i(C),Mp=n(C,"LI",{});var PCe=s(Mp);_Z=n(PCe,"STRONG",{});var _Xr=s(_Z);eio=r(_Xr,"gpt2"),_Xr.forEach(t),oio=r(PCe," \u2014 "),wS=n(PCe,"A",{href:!0});var uXr=s(wS);rio=r(uXr,"GPT2Model"),uXr.forEach(t),tio=r(PCe," (OpenAI GPT-2 model)"),PCe.forEach(t),aio=i(C),Ep=n(C,"LI",{});var $Ce=s(Ep);uZ=n($Ce,"STRONG",{});var bXr=s(uZ);nio=r(bXr,"gpt_neo"),bXr.forEach(t),sio=r($Ce," \u2014 "),AS=n($Ce,"A",{href:!0});var vXr=s(AS);lio=r(vXr,"GPTNeoModel"),vXr.forEach(t),iio=r($Ce," (GPT Neo model)"),$Ce.forEach(t),dio=i(C),yp=n(C,"LI",{});var ICe=s(yp);bZ=n(ICe,"STRONG",{});var TXr=s(bZ);cio=r(TXr,"gptj"),TXr.forEach(t),fio=r(ICe," \u2014 "),LS=n(ICe,"A",{href:!0});var FXr=s(LS);mio=r(FXr,"GPTJModel"),FXr.forEach(t),gio=r(ICe," (GPT-J model)"),ICe.forEach(t),hio=i(C),wp=n(C,"LI",{});var DCe=s(wp);vZ=n(DCe,"STRONG",{});var CXr=s(vZ);pio=r(CXr,"hubert"),CXr.forEach(t),_io=r(DCe," \u2014 "),BS=n(DCe,"A",{href:!0});var MXr=s(BS);uio=r(MXr,"HubertModel"),MXr.forEach(t),bio=r(DCe," (Hubert model)"),DCe.forEach(t),vio=i(C),Ap=n(C,"LI",{});var NCe=s(Ap);TZ=n(NCe,"STRONG",{});var EXr=s(TZ);Tio=r(EXr,"ibert"),EXr.forEach(t),Fio=r(NCe," \u2014 "),xS=n(NCe,"A",{href:!0});var yXr=s(xS);Cio=r(yXr,"IBertModel"),yXr.forEach(t),Mio=r(NCe," (I-BERT model)"),NCe.forEach(t),Eio=i(C),Lp=n(C,"LI",{});var jCe=s(Lp);FZ=n(jCe,"STRONG",{});var wXr=s(FZ);yio=r(wXr,"imagegpt"),wXr.forEach(t),wio=r(jCe," \u2014 "),kS=n(jCe,"A",{href:!0});var AXr=s(kS);Aio=r(AXr,"ImageGPTModel"),AXr.forEach(t),Lio=r(jCe," (ImageGPT model)"),jCe.forEach(t),Bio=i(C),Bp=n(C,"LI",{});var qCe=s(Bp);CZ=n(qCe,"STRONG",{});var LXr=s(CZ);xio=r(LXr,"layoutlm"),LXr.forEach(t),kio=r(qCe," \u2014 "),RS=n(qCe,"A",{href:!0});var BXr=s(RS);Rio=r(BXr,"LayoutLMModel"),BXr.forEach(t),Sio=r(qCe," (LayoutLM model)"),qCe.forEach(t),Pio=i(C),xp=n(C,"LI",{});var GCe=s(xp);MZ=n(GCe,"STRONG",{});var xXr=s(MZ);$io=r(xXr,"layoutlmv2"),xXr.forEach(t),Iio=r(GCe," \u2014 "),SS=n(GCe,"A",{href:!0});var kXr=s(SS);Dio=r(kXr,"LayoutLMv2Model"),kXr.forEach(t),Nio=r(GCe," (LayoutLMv2 model)"),GCe.forEach(t),jio=i(C),kp=n(C,"LI",{});var OCe=s(kp);EZ=n(OCe,"STRONG",{});var RXr=s(EZ);qio=r(RXr,"led"),RXr.forEach(t),Gio=r(OCe," \u2014 "),PS=n(OCe,"A",{href:!0});var SXr=s(PS);Oio=r(SXr,"LEDModel"),SXr.forEach(t),Xio=r(OCe," (LED model)"),OCe.forEach(t),Vio=i(C),Rp=n(C,"LI",{});var XCe=s(Rp);yZ=n(XCe,"STRONG",{});var PXr=s(yZ);zio=r(PXr,"longformer"),PXr.forEach(t),Wio=r(XCe," \u2014 "),$S=n(XCe,"A",{href:!0});var $Xr=s($S);Qio=r($Xr,"LongformerModel"),$Xr.forEach(t),Hio=r(XCe," (Longformer model)"),XCe.forEach(t),Uio=i(C),Sp=n(C,"LI",{});var VCe=s(Sp);wZ=n(VCe,"STRONG",{});var IXr=s(wZ);Jio=r(IXr,"luke"),IXr.forEach(t),Yio=r(VCe," \u2014 "),IS=n(VCe,"A",{href:!0});var DXr=s(IS);Kio=r(DXr,"LukeModel"),DXr.forEach(t),Zio=r(VCe," (LUKE model)"),VCe.forEach(t),edo=i(C),Pp=n(C,"LI",{});var zCe=s(Pp);AZ=n(zCe,"STRONG",{});var NXr=s(AZ);odo=r(NXr,"lxmert"),NXr.forEach(t),rdo=r(zCe," \u2014 "),DS=n(zCe,"A",{href:!0});var jXr=s(DS);tdo=r(jXr,"LxmertModel"),jXr.forEach(t),ado=r(zCe," (LXMERT model)"),zCe.forEach(t),ndo=i(C),$p=n(C,"LI",{});var WCe=s($p);LZ=n(WCe,"STRONG",{});var qXr=s(LZ);sdo=r(qXr,"m2m_100"),qXr.forEach(t),ldo=r(WCe," \u2014 "),NS=n(WCe,"A",{href:!0});var GXr=s(NS);ido=r(GXr,"M2M100Model"),GXr.forEach(t),ddo=r(WCe," (M2M100 model)"),WCe.forEach(t),cdo=i(C),Ip=n(C,"LI",{});var QCe=s(Ip);BZ=n(QCe,"STRONG",{});var OXr=s(BZ);fdo=r(OXr,"marian"),OXr.forEach(t),mdo=r(QCe," \u2014 "),jS=n(QCe,"A",{href:!0});var XXr=s(jS);gdo=r(XXr,"MarianModel"),XXr.forEach(t),hdo=r(QCe," (Marian model)"),QCe.forEach(t),pdo=i(C),Dp=n(C,"LI",{});var HCe=s(Dp);xZ=n(HCe,"STRONG",{});var VXr=s(xZ);_do=r(VXr,"maskformer"),VXr.forEach(t),udo=r(HCe," \u2014 "),qS=n(HCe,"A",{href:!0});var zXr=s(qS);bdo=r(zXr,"MaskFormerModel"),zXr.forEach(t),vdo=r(HCe," (MaskFormer model)"),HCe.forEach(t),Tdo=i(C),Np=n(C,"LI",{});var UCe=s(Np);kZ=n(UCe,"STRONG",{});var WXr=s(kZ);Fdo=r(WXr,"mbart"),WXr.forEach(t),Cdo=r(UCe," \u2014 "),GS=n(UCe,"A",{href:!0});var QXr=s(GS);Mdo=r(QXr,"MBartModel"),QXr.forEach(t),Edo=r(UCe," (mBART model)"),UCe.forEach(t),ydo=i(C),jp=n(C,"LI",{});var JCe=s(jp);RZ=n(JCe,"STRONG",{});var HXr=s(RZ);wdo=r(HXr,"megatron-bert"),HXr.forEach(t),Ado=r(JCe," \u2014 "),OS=n(JCe,"A",{href:!0});var UXr=s(OS);Ldo=r(UXr,"MegatronBertModel"),UXr.forEach(t),Bdo=r(JCe," (MegatronBert model)"),JCe.forEach(t),xdo=i(C),qp=n(C,"LI",{});var YCe=s(qp);SZ=n(YCe,"STRONG",{});var JXr=s(SZ);kdo=r(JXr,"mobilebert"),JXr.forEach(t),Rdo=r(YCe," \u2014 "),XS=n(YCe,"A",{href:!0});var YXr=s(XS);Sdo=r(YXr,"MobileBertModel"),YXr.forEach(t),Pdo=r(YCe," (MobileBERT model)"),YCe.forEach(t),$do=i(C),Gp=n(C,"LI",{});var KCe=s(Gp);PZ=n(KCe,"STRONG",{});var KXr=s(PZ);Ido=r(KXr,"mpnet"),KXr.forEach(t),Ddo=r(KCe," \u2014 "),VS=n(KCe,"A",{href:!0});var ZXr=s(VS);Ndo=r(ZXr,"MPNetModel"),ZXr.forEach(t),jdo=r(KCe," (MPNet model)"),KCe.forEach(t),qdo=i(C),Op=n(C,"LI",{});var ZCe=s(Op);$Z=n(ZCe,"STRONG",{});var eVr=s($Z);Gdo=r(eVr,"mt5"),eVr.forEach(t),Odo=r(ZCe," \u2014 "),zS=n(ZCe,"A",{href:!0});var oVr=s(zS);Xdo=r(oVr,"MT5Model"),oVr.forEach(t),Vdo=r(ZCe," (mT5 model)"),ZCe.forEach(t),zdo=i(C),Xp=n(C,"LI",{});var eMe=s(Xp);IZ=n(eMe,"STRONG",{});var rVr=s(IZ);Wdo=r(rVr,"nystromformer"),rVr.forEach(t),Qdo=r(eMe," \u2014 "),WS=n(eMe,"A",{href:!0});var tVr=s(WS);Hdo=r(tVr,"NystromformerModel"),tVr.forEach(t),Udo=r(eMe," (Nystromformer model)"),eMe.forEach(t),Jdo=i(C),Vp=n(C,"LI",{});var oMe=s(Vp);DZ=n(oMe,"STRONG",{});var aVr=s(DZ);Ydo=r(aVr,"openai-gpt"),aVr.forEach(t),Kdo=r(oMe," \u2014 "),QS=n(oMe,"A",{href:!0});var nVr=s(QS);Zdo=r(nVr,"OpenAIGPTModel"),nVr.forEach(t),eco=r(oMe," (OpenAI GPT model)"),oMe.forEach(t),oco=i(C),zp=n(C,"LI",{});var rMe=s(zp);NZ=n(rMe,"STRONG",{});var sVr=s(NZ);rco=r(sVr,"pegasus"),sVr.forEach(t),tco=r(rMe," \u2014 "),HS=n(rMe,"A",{href:!0});var lVr=s(HS);aco=r(lVr,"PegasusModel"),lVr.forEach(t),nco=r(rMe," (Pegasus model)"),rMe.forEach(t),sco=i(C),Wp=n(C,"LI",{});var tMe=s(Wp);jZ=n(tMe,"STRONG",{});var iVr=s(jZ);lco=r(iVr,"perceiver"),iVr.forEach(t),ico=r(tMe," \u2014 "),US=n(tMe,"A",{href:!0});var dVr=s(US);dco=r(dVr,"PerceiverModel"),dVr.forEach(t),cco=r(tMe," (Perceiver model)"),tMe.forEach(t),fco=i(C),Qp=n(C,"LI",{});var aMe=s(Qp);qZ=n(aMe,"STRONG",{});var cVr=s(qZ);mco=r(cVr,"plbart"),cVr.forEach(t),gco=r(aMe," \u2014 "),JS=n(aMe,"A",{href:!0});var fVr=s(JS);hco=r(fVr,"PLBartModel"),fVr.forEach(t),pco=r(aMe," (PLBart model)"),aMe.forEach(t),_co=i(C),Hp=n(C,"LI",{});var nMe=s(Hp);GZ=n(nMe,"STRONG",{});var mVr=s(GZ);uco=r(mVr,"poolformer"),mVr.forEach(t),bco=r(nMe," \u2014 "),YS=n(nMe,"A",{href:!0});var gVr=s(YS);vco=r(gVr,"PoolFormerModel"),gVr.forEach(t),Tco=r(nMe," (PoolFormer model)"),nMe.forEach(t),Fco=i(C),Up=n(C,"LI",{});var sMe=s(Up);OZ=n(sMe,"STRONG",{});var hVr=s(OZ);Cco=r(hVr,"prophetnet"),hVr.forEach(t),Mco=r(sMe," \u2014 "),KS=n(sMe,"A",{href:!0});var pVr=s(KS);Eco=r(pVr,"ProphetNetModel"),pVr.forEach(t),yco=r(sMe," (ProphetNet model)"),sMe.forEach(t),wco=i(C),Jp=n(C,"LI",{});var lMe=s(Jp);XZ=n(lMe,"STRONG",{});var _Vr=s(XZ);Aco=r(_Vr,"qdqbert"),_Vr.forEach(t),Lco=r(lMe," \u2014 "),ZS=n(lMe,"A",{href:!0});var uVr=s(ZS);Bco=r(uVr,"QDQBertModel"),uVr.forEach(t),xco=r(lMe," (QDQBert model)"),lMe.forEach(t),kco=i(C),Yp=n(C,"LI",{});var iMe=s(Yp);VZ=n(iMe,"STRONG",{});var bVr=s(VZ);Rco=r(bVr,"reformer"),bVr.forEach(t),Sco=r(iMe," \u2014 "),eP=n(iMe,"A",{href:!0});var vVr=s(eP);Pco=r(vVr,"ReformerModel"),vVr.forEach(t),$co=r(iMe," (Reformer model)"),iMe.forEach(t),Ico=i(C),Kp=n(C,"LI",{});var dMe=s(Kp);zZ=n(dMe,"STRONG",{});var TVr=s(zZ);Dco=r(TVr,"rembert"),TVr.forEach(t),Nco=r(dMe," \u2014 "),oP=n(dMe,"A",{href:!0});var FVr=s(oP);jco=r(FVr,"RemBertModel"),FVr.forEach(t),qco=r(dMe," (RemBERT model)"),dMe.forEach(t),Gco=i(C),Zp=n(C,"LI",{});var cMe=s(Zp);WZ=n(cMe,"STRONG",{});var CVr=s(WZ);Oco=r(CVr,"resnet"),CVr.forEach(t),Xco=r(cMe," \u2014 "),rP=n(cMe,"A",{href:!0});var MVr=s(rP);Vco=r(MVr,"ResNetModel"),MVr.forEach(t),zco=r(cMe," (ResNet model)"),cMe.forEach(t),Wco=i(C),e_=n(C,"LI",{});var fMe=s(e_);QZ=n(fMe,"STRONG",{});var EVr=s(QZ);Qco=r(EVr,"retribert"),EVr.forEach(t),Hco=r(fMe," \u2014 "),tP=n(fMe,"A",{href:!0});var yVr=s(tP);Uco=r(yVr,"RetriBertModel"),yVr.forEach(t),Jco=r(fMe," (RetriBERT model)"),fMe.forEach(t),Yco=i(C),o_=n(C,"LI",{});var mMe=s(o_);HZ=n(mMe,"STRONG",{});var wVr=s(HZ);Kco=r(wVr,"roberta"),wVr.forEach(t),Zco=r(mMe," \u2014 "),aP=n(mMe,"A",{href:!0});var AVr=s(aP);efo=r(AVr,"RobertaModel"),AVr.forEach(t),ofo=r(mMe," (RoBERTa model)"),mMe.forEach(t),rfo=i(C),r_=n(C,"LI",{});var gMe=s(r_);UZ=n(gMe,"STRONG",{});var LVr=s(UZ);tfo=r(LVr,"roformer"),LVr.forEach(t),afo=r(gMe," \u2014 "),nP=n(gMe,"A",{href:!0});var BVr=s(nP);nfo=r(BVr,"RoFormerModel"),BVr.forEach(t),sfo=r(gMe," (RoFormer model)"),gMe.forEach(t),lfo=i(C),t_=n(C,"LI",{});var hMe=s(t_);JZ=n(hMe,"STRONG",{});var xVr=s(JZ);ifo=r(xVr,"segformer"),xVr.forEach(t),dfo=r(hMe," \u2014 "),sP=n(hMe,"A",{href:!0});var kVr=s(sP);cfo=r(kVr,"SegformerModel"),kVr.forEach(t),ffo=r(hMe," (SegFormer model)"),hMe.forEach(t),mfo=i(C),a_=n(C,"LI",{});var pMe=s(a_);YZ=n(pMe,"STRONG",{});var RVr=s(YZ);gfo=r(RVr,"sew"),RVr.forEach(t),hfo=r(pMe," \u2014 "),lP=n(pMe,"A",{href:!0});var SVr=s(lP);pfo=r(SVr,"SEWModel"),SVr.forEach(t),_fo=r(pMe," (SEW model)"),pMe.forEach(t),ufo=i(C),n_=n(C,"LI",{});var _Me=s(n_);KZ=n(_Me,"STRONG",{});var PVr=s(KZ);bfo=r(PVr,"sew-d"),PVr.forEach(t),vfo=r(_Me," \u2014 "),iP=n(_Me,"A",{href:!0});var $Vr=s(iP);Tfo=r($Vr,"SEWDModel"),$Vr.forEach(t),Ffo=r(_Me," (SEW-D model)"),_Me.forEach(t),Cfo=i(C),s_=n(C,"LI",{});var uMe=s(s_);ZZ=n(uMe,"STRONG",{});var IVr=s(ZZ);Mfo=r(IVr,"speech_to_text"),IVr.forEach(t),Efo=r(uMe," \u2014 "),dP=n(uMe,"A",{href:!0});var DVr=s(dP);yfo=r(DVr,"Speech2TextModel"),DVr.forEach(t),wfo=r(uMe," (Speech2Text model)"),uMe.forEach(t),Afo=i(C),l_=n(C,"LI",{});var bMe=s(l_);eee=n(bMe,"STRONG",{});var NVr=s(eee);Lfo=r(NVr,"splinter"),NVr.forEach(t),Bfo=r(bMe," \u2014 "),cP=n(bMe,"A",{href:!0});var jVr=s(cP);xfo=r(jVr,"SplinterModel"),jVr.forEach(t),kfo=r(bMe," (Splinter model)"),bMe.forEach(t),Rfo=i(C),i_=n(C,"LI",{});var vMe=s(i_);oee=n(vMe,"STRONG",{});var qVr=s(oee);Sfo=r(qVr,"squeezebert"),qVr.forEach(t),Pfo=r(vMe," \u2014 "),fP=n(vMe,"A",{href:!0});var GVr=s(fP);$fo=r(GVr,"SqueezeBertModel"),GVr.forEach(t),Ifo=r(vMe," (SqueezeBERT model)"),vMe.forEach(t),Dfo=i(C),d_=n(C,"LI",{});var TMe=s(d_);ree=n(TMe,"STRONG",{});var OVr=s(ree);Nfo=r(OVr,"swin"),OVr.forEach(t),jfo=r(TMe," \u2014 "),mP=n(TMe,"A",{href:!0});var XVr=s(mP);qfo=r(XVr,"SwinModel"),XVr.forEach(t),Gfo=r(TMe," (Swin model)"),TMe.forEach(t),Ofo=i(C),c_=n(C,"LI",{});var FMe=s(c_);tee=n(FMe,"STRONG",{});var VVr=s(tee);Xfo=r(VVr,"t5"),VVr.forEach(t),Vfo=r(FMe," \u2014 "),gP=n(FMe,"A",{href:!0});var zVr=s(gP);zfo=r(zVr,"T5Model"),zVr.forEach(t),Wfo=r(FMe," (T5 model)"),FMe.forEach(t),Qfo=i(C),f_=n(C,"LI",{});var CMe=s(f_);aee=n(CMe,"STRONG",{});var WVr=s(aee);Hfo=r(WVr,"tapas"),WVr.forEach(t),Ufo=r(CMe," \u2014 "),hP=n(CMe,"A",{href:!0});var QVr=s(hP);Jfo=r(QVr,"TapasModel"),QVr.forEach(t),Yfo=r(CMe," (TAPAS model)"),CMe.forEach(t),Kfo=i(C),m_=n(C,"LI",{});var MMe=s(m_);nee=n(MMe,"STRONG",{});var HVr=s(nee);Zfo=r(HVr,"transfo-xl"),HVr.forEach(t),emo=r(MMe," \u2014 "),pP=n(MMe,"A",{href:!0});var UVr=s(pP);omo=r(UVr,"TransfoXLModel"),UVr.forEach(t),rmo=r(MMe," (Transformer-XL model)"),MMe.forEach(t),tmo=i(C),g_=n(C,"LI",{});var EMe=s(g_);see=n(EMe,"STRONG",{});var JVr=s(see);amo=r(JVr,"unispeech"),JVr.forEach(t),nmo=r(EMe," \u2014 "),_P=n(EMe,"A",{href:!0});var YVr=s(_P);smo=r(YVr,"UniSpeechModel"),YVr.forEach(t),lmo=r(EMe," (UniSpeech model)"),EMe.forEach(t),imo=i(C),h_=n(C,"LI",{});var yMe=s(h_);lee=n(yMe,"STRONG",{});var KVr=s(lee);dmo=r(KVr,"unispeech-sat"),KVr.forEach(t),cmo=r(yMe," \u2014 "),uP=n(yMe,"A",{href:!0});var ZVr=s(uP);fmo=r(ZVr,"UniSpeechSatModel"),ZVr.forEach(t),mmo=r(yMe," (UniSpeechSat model)"),yMe.forEach(t),gmo=i(C),p_=n(C,"LI",{});var wMe=s(p_);iee=n(wMe,"STRONG",{});var ezr=s(iee);hmo=r(ezr,"van"),ezr.forEach(t),pmo=r(wMe," \u2014 "),bP=n(wMe,"A",{href:!0});var ozr=s(bP);_mo=r(ozr,"VanModel"),ozr.forEach(t),umo=r(wMe," (VAN model)"),wMe.forEach(t),bmo=i(C),__=n(C,"LI",{});var AMe=s(__);dee=n(AMe,"STRONG",{});var rzr=s(dee);vmo=r(rzr,"vilt"),rzr.forEach(t),Tmo=r(AMe," \u2014 "),vP=n(AMe,"A",{href:!0});var tzr=s(vP);Fmo=r(tzr,"ViltModel"),tzr.forEach(t),Cmo=r(AMe," (ViLT model)"),AMe.forEach(t),Mmo=i(C),u_=n(C,"LI",{});var LMe=s(u_);cee=n(LMe,"STRONG",{});var azr=s(cee);Emo=r(azr,"vision-text-dual-encoder"),azr.forEach(t),ymo=r(LMe," \u2014 "),TP=n(LMe,"A",{href:!0});var nzr=s(TP);wmo=r(nzr,"VisionTextDualEncoderModel"),nzr.forEach(t),Amo=r(LMe," (VisionTextDualEncoder model)"),LMe.forEach(t),Lmo=i(C),b_=n(C,"LI",{});var BMe=s(b_);fee=n(BMe,"STRONG",{});var szr=s(fee);Bmo=r(szr,"visual_bert"),szr.forEach(t),xmo=r(BMe," \u2014 "),FP=n(BMe,"A",{href:!0});var lzr=s(FP);kmo=r(lzr,"VisualBertModel"),lzr.forEach(t),Rmo=r(BMe," (VisualBert model)"),BMe.forEach(t),Smo=i(C),v_=n(C,"LI",{});var xMe=s(v_);mee=n(xMe,"STRONG",{});var izr=s(mee);Pmo=r(izr,"vit"),izr.forEach(t),$mo=r(xMe," \u2014 "),CP=n(xMe,"A",{href:!0});var dzr=s(CP);Imo=r(dzr,"ViTModel"),dzr.forEach(t),Dmo=r(xMe," (ViT model)"),xMe.forEach(t),Nmo=i(C),T_=n(C,"LI",{});var kMe=s(T_);gee=n(kMe,"STRONG",{});var czr=s(gee);jmo=r(czr,"vit_mae"),czr.forEach(t),qmo=r(kMe," \u2014 "),MP=n(kMe,"A",{href:!0});var fzr=s(MP);Gmo=r(fzr,"ViTMAEModel"),fzr.forEach(t),Omo=r(kMe," (ViTMAE model)"),kMe.forEach(t),Xmo=i(C),F_=n(C,"LI",{});var RMe=s(F_);hee=n(RMe,"STRONG",{});var mzr=s(hee);Vmo=r(mzr,"wav2vec2"),mzr.forEach(t),zmo=r(RMe," \u2014 "),EP=n(RMe,"A",{href:!0});var gzr=s(EP);Wmo=r(gzr,"Wav2Vec2Model"),gzr.forEach(t),Qmo=r(RMe," (Wav2Vec2 model)"),RMe.forEach(t),Hmo=i(C),C_=n(C,"LI",{});var SMe=s(C_);pee=n(SMe,"STRONG",{});var hzr=s(pee);Umo=r(hzr,"wavlm"),hzr.forEach(t),Jmo=r(SMe," \u2014 "),yP=n(SMe,"A",{href:!0});var pzr=s(yP);Ymo=r(pzr,"WavLMModel"),pzr.forEach(t),Kmo=r(SMe," (WavLM model)"),SMe.forEach(t),Zmo=i(C),M_=n(C,"LI",{});var PMe=s(M_);_ee=n(PMe,"STRONG",{});var _zr=s(_ee);ego=r(_zr,"xglm"),_zr.forEach(t),ogo=r(PMe," \u2014 "),wP=n(PMe,"A",{href:!0});var uzr=s(wP);rgo=r(uzr,"XGLMModel"),uzr.forEach(t),tgo=r(PMe," (XGLM model)"),PMe.forEach(t),ago=i(C),E_=n(C,"LI",{});var $Me=s(E_);uee=n($Me,"STRONG",{});var bzr=s(uee);ngo=r(bzr,"xlm"),bzr.forEach(t),sgo=r($Me," \u2014 "),AP=n($Me,"A",{href:!0});var vzr=s(AP);lgo=r(vzr,"XLMModel"),vzr.forEach(t),igo=r($Me," (XLM model)"),$Me.forEach(t),dgo=i(C),y_=n(C,"LI",{});var IMe=s(y_);bee=n(IMe,"STRONG",{});var Tzr=s(bee);cgo=r(Tzr,"xlm-prophetnet"),Tzr.forEach(t),fgo=r(IMe," \u2014 "),LP=n(IMe,"A",{href:!0});var Fzr=s(LP);mgo=r(Fzr,"XLMProphetNetModel"),Fzr.forEach(t),ggo=r(IMe," (XLMProphetNet model)"),IMe.forEach(t),hgo=i(C),w_=n(C,"LI",{});var DMe=s(w_);vee=n(DMe,"STRONG",{});var Czr=s(vee);pgo=r(Czr,"xlm-roberta"),Czr.forEach(t),_go=r(DMe," \u2014 "),BP=n(DMe,"A",{href:!0});var Mzr=s(BP);ugo=r(Mzr,"XLMRobertaModel"),Mzr.forEach(t),bgo=r(DMe," (XLM-RoBERTa model)"),DMe.forEach(t),vgo=i(C),A_=n(C,"LI",{});var NMe=s(A_);Tee=n(NMe,"STRONG",{});var Ezr=s(Tee);Tgo=r(Ezr,"xlm-roberta-xl"),Ezr.forEach(t),Fgo=r(NMe," \u2014 "),xP=n(NMe,"A",{href:!0});var yzr=s(xP);Cgo=r(yzr,"XLMRobertaXLModel"),yzr.forEach(t),Mgo=r(NMe," (XLM-RoBERTa-XL model)"),NMe.forEach(t),Ego=i(C),L_=n(C,"LI",{});var jMe=s(L_);Fee=n(jMe,"STRONG",{});var wzr=s(Fee);ygo=r(wzr,"xlnet"),wzr.forEach(t),wgo=r(jMe," \u2014 "),kP=n(jMe,"A",{href:!0});var Azr=s(kP);Ago=r(Azr,"XLNetModel"),Azr.forEach(t),Lgo=r(jMe," (XLNet model)"),jMe.forEach(t),Bgo=i(C),B_=n(C,"LI",{});var qMe=s(B_);Cee=n(qMe,"STRONG",{});var Lzr=s(Cee);xgo=r(Lzr,"yoso"),Lzr.forEach(t),kgo=r(qMe," \u2014 "),RP=n(qMe,"A",{href:!0});var Bzr=s(RP);Rgo=r(Bzr,"YosoModel"),Bzr.forEach(t),Sgo=r(qMe," (YOSO model)"),qMe.forEach(t),C.forEach(t),Pgo=i(qt),x_=n(qt,"P",{});var GMe=s(x_);$go=r(GMe,"The model is set in evaluation mode by default using "),Mee=n(GMe,"CODE",{});var xzr=s(Mee);Igo=r(xzr,"model.eval()"),xzr.forEach(t),Dgo=r(GMe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Eee=n(GMe,"CODE",{});var kzr=s(Eee);Ngo=r(kzr,"model.train()"),kzr.forEach(t),GMe.forEach(t),jgo=i(qt),yee=n(qt,"P",{});var Rzr=s(yee);qgo=r(Rzr,"Examples:"),Rzr.forEach(t),Ggo=i(qt),m(e5.$$.fragment,qt),qt.forEach(t),Ws.forEach(t),Hke=i(c),Zi=n(c,"H2",{class:!0});var tPe=s(Zi);k_=n(tPe,"A",{id:!0,class:!0,href:!0});var Szr=s(k_);wee=n(Szr,"SPAN",{});var Pzr=s(wee);m(o5.$$.fragment,Pzr),Pzr.forEach(t),Szr.forEach(t),Ogo=i(tPe),Aee=n(tPe,"SPAN",{});var $zr=s(Aee);Xgo=r($zr,"AutoModelForPreTraining"),$zr.forEach(t),tPe.forEach(t),Uke=i(c),Yo=n(c,"DIV",{class:!0});var Hs=s(Yo);m(r5.$$.fragment,Hs),Vgo=i(Hs),ed=n(Hs,"P",{});var gW=s(ed);zgo=r(gW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Lee=n(gW,"CODE",{});var Izr=s(Lee);Wgo=r(Izr,"from_pretrained()"),Izr.forEach(t),Qgo=r(gW,"class method or the "),Bee=n(gW,"CODE",{});var Dzr=s(Bee);Hgo=r(Dzr,"from_config()"),Dzr.forEach(t),Ugo=r(gW,`class
method.`),gW.forEach(t),Jgo=i(Hs),t5=n(Hs,"P",{});var aPe=s(t5);Ygo=r(aPe,"This class cannot be instantiated directly using "),xee=n(aPe,"CODE",{});var Nzr=s(xee);Kgo=r(Nzr,"__init__()"),Nzr.forEach(t),Zgo=r(aPe," (throws an error)."),aPe.forEach(t),eho=i(Hs),zr=n(Hs,"DIV",{class:!0});var Us=s(zr);m(a5.$$.fragment,Us),oho=i(Us),kee=n(Us,"P",{});var jzr=s(kee);rho=r(jzr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),jzr.forEach(t),tho=i(Us),od=n(Us,"P",{});var hW=s(od);aho=r(hW,`Note:
Loading a model from its configuration file does `),Ree=n(hW,"STRONG",{});var qzr=s(Ree);nho=r(qzr,"not"),qzr.forEach(t),sho=r(hW,` load the model weights. It only affects the
model\u2019s configuration. Use `),See=n(hW,"CODE",{});var Gzr=s(See);lho=r(Gzr,"from_pretrained()"),Gzr.forEach(t),iho=r(hW,"to load the model weights."),hW.forEach(t),dho=i(Us),Pee=n(Us,"P",{});var Ozr=s(Pee);cho=r(Ozr,"Examples:"),Ozr.forEach(t),fho=i(Us),m(n5.$$.fragment,Us),Us.forEach(t),mho=i(Hs),Ne=n(Hs,"DIV",{class:!0});var Gt=s(Ne);m(s5.$$.fragment,Gt),gho=i(Gt),$ee=n(Gt,"P",{});var Xzr=s($ee);hho=r(Xzr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Xzr.forEach(t),pho=i(Gt),za=n(Gt,"P",{});var vM=s(za);_ho=r(vM,"The model class to instantiate is selected based on the "),Iee=n(vM,"CODE",{});var Vzr=s(Iee);uho=r(Vzr,"model_type"),Vzr.forEach(t),bho=r(vM,` property of the config object (either
passed as an argument or loaded from `),Dee=n(vM,"CODE",{});var zzr=s(Dee);vho=r(zzr,"pretrained_model_name_or_path"),zzr.forEach(t),Tho=r(vM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nee=n(vM,"CODE",{});var Wzr=s(Nee);Fho=r(Wzr,"pretrained_model_name_or_path"),Wzr.forEach(t),Cho=r(vM,":"),vM.forEach(t),Mho=i(Gt),k=n(Gt,"UL",{});var S=s(k);R_=n(S,"LI",{});var OMe=s(R_);jee=n(OMe,"STRONG",{});var Qzr=s(jee);Eho=r(Qzr,"albert"),Qzr.forEach(t),yho=r(OMe," \u2014 "),SP=n(OMe,"A",{href:!0});var Hzr=s(SP);who=r(Hzr,"AlbertForPreTraining"),Hzr.forEach(t),Aho=r(OMe," (ALBERT model)"),OMe.forEach(t),Lho=i(S),S_=n(S,"LI",{});var XMe=s(S_);qee=n(XMe,"STRONG",{});var Uzr=s(qee);Bho=r(Uzr,"bart"),Uzr.forEach(t),xho=r(XMe," \u2014 "),PP=n(XMe,"A",{href:!0});var Jzr=s(PP);kho=r(Jzr,"BartForConditionalGeneration"),Jzr.forEach(t),Rho=r(XMe," (BART model)"),XMe.forEach(t),Sho=i(S),P_=n(S,"LI",{});var VMe=s(P_);Gee=n(VMe,"STRONG",{});var Yzr=s(Gee);Pho=r(Yzr,"bert"),Yzr.forEach(t),$ho=r(VMe," \u2014 "),$P=n(VMe,"A",{href:!0});var Kzr=s($P);Iho=r(Kzr,"BertForPreTraining"),Kzr.forEach(t),Dho=r(VMe," (BERT model)"),VMe.forEach(t),Nho=i(S),$_=n(S,"LI",{});var zMe=s($_);Oee=n(zMe,"STRONG",{});var Zzr=s(Oee);jho=r(Zzr,"big_bird"),Zzr.forEach(t),qho=r(zMe," \u2014 "),IP=n(zMe,"A",{href:!0});var eWr=s(IP);Gho=r(eWr,"BigBirdForPreTraining"),eWr.forEach(t),Oho=r(zMe," (BigBird model)"),zMe.forEach(t),Xho=i(S),I_=n(S,"LI",{});var WMe=s(I_);Xee=n(WMe,"STRONG",{});var oWr=s(Xee);Vho=r(oWr,"camembert"),oWr.forEach(t),zho=r(WMe," \u2014 "),DP=n(WMe,"A",{href:!0});var rWr=s(DP);Who=r(rWr,"CamembertForMaskedLM"),rWr.forEach(t),Qho=r(WMe," (CamemBERT model)"),WMe.forEach(t),Hho=i(S),D_=n(S,"LI",{});var QMe=s(D_);Vee=n(QMe,"STRONG",{});var tWr=s(Vee);Uho=r(tWr,"ctrl"),tWr.forEach(t),Jho=r(QMe," \u2014 "),NP=n(QMe,"A",{href:!0});var aWr=s(NP);Yho=r(aWr,"CTRLLMHeadModel"),aWr.forEach(t),Kho=r(QMe," (CTRL model)"),QMe.forEach(t),Zho=i(S),N_=n(S,"LI",{});var HMe=s(N_);zee=n(HMe,"STRONG",{});var nWr=s(zee);epo=r(nWr,"data2vec-text"),nWr.forEach(t),opo=r(HMe," \u2014 "),jP=n(HMe,"A",{href:!0});var sWr=s(jP);rpo=r(sWr,"Data2VecTextForMaskedLM"),sWr.forEach(t),tpo=r(HMe," (Data2VecText model)"),HMe.forEach(t),apo=i(S),j_=n(S,"LI",{});var UMe=s(j_);Wee=n(UMe,"STRONG",{});var lWr=s(Wee);npo=r(lWr,"deberta"),lWr.forEach(t),spo=r(UMe," \u2014 "),qP=n(UMe,"A",{href:!0});var iWr=s(qP);lpo=r(iWr,"DebertaForMaskedLM"),iWr.forEach(t),ipo=r(UMe," (DeBERTa model)"),UMe.forEach(t),dpo=i(S),q_=n(S,"LI",{});var JMe=s(q_);Qee=n(JMe,"STRONG",{});var dWr=s(Qee);cpo=r(dWr,"deberta-v2"),dWr.forEach(t),fpo=r(JMe," \u2014 "),GP=n(JMe,"A",{href:!0});var cWr=s(GP);mpo=r(cWr,"DebertaV2ForMaskedLM"),cWr.forEach(t),gpo=r(JMe," (DeBERTa-v2 model)"),JMe.forEach(t),hpo=i(S),G_=n(S,"LI",{});var YMe=s(G_);Hee=n(YMe,"STRONG",{});var fWr=s(Hee);ppo=r(fWr,"distilbert"),fWr.forEach(t),_po=r(YMe," \u2014 "),OP=n(YMe,"A",{href:!0});var mWr=s(OP);upo=r(mWr,"DistilBertForMaskedLM"),mWr.forEach(t),bpo=r(YMe," (DistilBERT model)"),YMe.forEach(t),vpo=i(S),O_=n(S,"LI",{});var KMe=s(O_);Uee=n(KMe,"STRONG",{});var gWr=s(Uee);Tpo=r(gWr,"electra"),gWr.forEach(t),Fpo=r(KMe," \u2014 "),XP=n(KMe,"A",{href:!0});var hWr=s(XP);Cpo=r(hWr,"ElectraForPreTraining"),hWr.forEach(t),Mpo=r(KMe," (ELECTRA model)"),KMe.forEach(t),Epo=i(S),X_=n(S,"LI",{});var ZMe=s(X_);Jee=n(ZMe,"STRONG",{});var pWr=s(Jee);ypo=r(pWr,"flaubert"),pWr.forEach(t),wpo=r(ZMe," \u2014 "),VP=n(ZMe,"A",{href:!0});var _Wr=s(VP);Apo=r(_Wr,"FlaubertWithLMHeadModel"),_Wr.forEach(t),Lpo=r(ZMe," (FlauBERT model)"),ZMe.forEach(t),Bpo=i(S),V_=n(S,"LI",{});var eEe=s(V_);Yee=n(eEe,"STRONG",{});var uWr=s(Yee);xpo=r(uWr,"fnet"),uWr.forEach(t),kpo=r(eEe," \u2014 "),zP=n(eEe,"A",{href:!0});var bWr=s(zP);Rpo=r(bWr,"FNetForPreTraining"),bWr.forEach(t),Spo=r(eEe," (FNet model)"),eEe.forEach(t),Ppo=i(S),z_=n(S,"LI",{});var oEe=s(z_);Kee=n(oEe,"STRONG",{});var vWr=s(Kee);$po=r(vWr,"fsmt"),vWr.forEach(t),Ipo=r(oEe," \u2014 "),WP=n(oEe,"A",{href:!0});var TWr=s(WP);Dpo=r(TWr,"FSMTForConditionalGeneration"),TWr.forEach(t),Npo=r(oEe," (FairSeq Machine-Translation model)"),oEe.forEach(t),jpo=i(S),W_=n(S,"LI",{});var rEe=s(W_);Zee=n(rEe,"STRONG",{});var FWr=s(Zee);qpo=r(FWr,"funnel"),FWr.forEach(t),Gpo=r(rEe," \u2014 "),QP=n(rEe,"A",{href:!0});var CWr=s(QP);Opo=r(CWr,"FunnelForPreTraining"),CWr.forEach(t),Xpo=r(rEe," (Funnel Transformer model)"),rEe.forEach(t),Vpo=i(S),Q_=n(S,"LI",{});var tEe=s(Q_);eoe=n(tEe,"STRONG",{});var MWr=s(eoe);zpo=r(MWr,"gpt2"),MWr.forEach(t),Wpo=r(tEe," \u2014 "),HP=n(tEe,"A",{href:!0});var EWr=s(HP);Qpo=r(EWr,"GPT2LMHeadModel"),EWr.forEach(t),Hpo=r(tEe," (OpenAI GPT-2 model)"),tEe.forEach(t),Upo=i(S),H_=n(S,"LI",{});var aEe=s(H_);ooe=n(aEe,"STRONG",{});var yWr=s(ooe);Jpo=r(yWr,"ibert"),yWr.forEach(t),Ypo=r(aEe," \u2014 "),UP=n(aEe,"A",{href:!0});var wWr=s(UP);Kpo=r(wWr,"IBertForMaskedLM"),wWr.forEach(t),Zpo=r(aEe," (I-BERT model)"),aEe.forEach(t),e_o=i(S),U_=n(S,"LI",{});var nEe=s(U_);roe=n(nEe,"STRONG",{});var AWr=s(roe);o_o=r(AWr,"layoutlm"),AWr.forEach(t),r_o=r(nEe," \u2014 "),JP=n(nEe,"A",{href:!0});var LWr=s(JP);t_o=r(LWr,"LayoutLMForMaskedLM"),LWr.forEach(t),a_o=r(nEe," (LayoutLM model)"),nEe.forEach(t),n_o=i(S),J_=n(S,"LI",{});var sEe=s(J_);toe=n(sEe,"STRONG",{});var BWr=s(toe);s_o=r(BWr,"longformer"),BWr.forEach(t),l_o=r(sEe," \u2014 "),YP=n(sEe,"A",{href:!0});var xWr=s(YP);i_o=r(xWr,"LongformerForMaskedLM"),xWr.forEach(t),d_o=r(sEe," (Longformer model)"),sEe.forEach(t),c_o=i(S),Y_=n(S,"LI",{});var lEe=s(Y_);aoe=n(lEe,"STRONG",{});var kWr=s(aoe);f_o=r(kWr,"lxmert"),kWr.forEach(t),m_o=r(lEe," \u2014 "),KP=n(lEe,"A",{href:!0});var RWr=s(KP);g_o=r(RWr,"LxmertForPreTraining"),RWr.forEach(t),h_o=r(lEe," (LXMERT model)"),lEe.forEach(t),p_o=i(S),K_=n(S,"LI",{});var iEe=s(K_);noe=n(iEe,"STRONG",{});var SWr=s(noe);__o=r(SWr,"megatron-bert"),SWr.forEach(t),u_o=r(iEe," \u2014 "),ZP=n(iEe,"A",{href:!0});var PWr=s(ZP);b_o=r(PWr,"MegatronBertForPreTraining"),PWr.forEach(t),v_o=r(iEe," (MegatronBert model)"),iEe.forEach(t),T_o=i(S),Z_=n(S,"LI",{});var dEe=s(Z_);soe=n(dEe,"STRONG",{});var $Wr=s(soe);F_o=r($Wr,"mobilebert"),$Wr.forEach(t),C_o=r(dEe," \u2014 "),e$=n(dEe,"A",{href:!0});var IWr=s(e$);M_o=r(IWr,"MobileBertForPreTraining"),IWr.forEach(t),E_o=r(dEe," (MobileBERT model)"),dEe.forEach(t),y_o=i(S),eu=n(S,"LI",{});var cEe=s(eu);loe=n(cEe,"STRONG",{});var DWr=s(loe);w_o=r(DWr,"mpnet"),DWr.forEach(t),A_o=r(cEe," \u2014 "),o$=n(cEe,"A",{href:!0});var NWr=s(o$);L_o=r(NWr,"MPNetForMaskedLM"),NWr.forEach(t),B_o=r(cEe," (MPNet model)"),cEe.forEach(t),x_o=i(S),ou=n(S,"LI",{});var fEe=s(ou);ioe=n(fEe,"STRONG",{});var jWr=s(ioe);k_o=r(jWr,"openai-gpt"),jWr.forEach(t),R_o=r(fEe," \u2014 "),r$=n(fEe,"A",{href:!0});var qWr=s(r$);S_o=r(qWr,"OpenAIGPTLMHeadModel"),qWr.forEach(t),P_o=r(fEe," (OpenAI GPT model)"),fEe.forEach(t),$_o=i(S),ru=n(S,"LI",{});var mEe=s(ru);doe=n(mEe,"STRONG",{});var GWr=s(doe);I_o=r(GWr,"retribert"),GWr.forEach(t),D_o=r(mEe," \u2014 "),t$=n(mEe,"A",{href:!0});var OWr=s(t$);N_o=r(OWr,"RetriBertModel"),OWr.forEach(t),j_o=r(mEe," (RetriBERT model)"),mEe.forEach(t),q_o=i(S),tu=n(S,"LI",{});var gEe=s(tu);coe=n(gEe,"STRONG",{});var XWr=s(coe);G_o=r(XWr,"roberta"),XWr.forEach(t),O_o=r(gEe," \u2014 "),a$=n(gEe,"A",{href:!0});var VWr=s(a$);X_o=r(VWr,"RobertaForMaskedLM"),VWr.forEach(t),V_o=r(gEe," (RoBERTa model)"),gEe.forEach(t),z_o=i(S),au=n(S,"LI",{});var hEe=s(au);foe=n(hEe,"STRONG",{});var zWr=s(foe);W_o=r(zWr,"squeezebert"),zWr.forEach(t),Q_o=r(hEe," \u2014 "),n$=n(hEe,"A",{href:!0});var WWr=s(n$);H_o=r(WWr,"SqueezeBertForMaskedLM"),WWr.forEach(t),U_o=r(hEe," (SqueezeBERT model)"),hEe.forEach(t),J_o=i(S),nu=n(S,"LI",{});var pEe=s(nu);moe=n(pEe,"STRONG",{});var QWr=s(moe);Y_o=r(QWr,"t5"),QWr.forEach(t),K_o=r(pEe," \u2014 "),s$=n(pEe,"A",{href:!0});var HWr=s(s$);Z_o=r(HWr,"T5ForConditionalGeneration"),HWr.forEach(t),euo=r(pEe," (T5 model)"),pEe.forEach(t),ouo=i(S),su=n(S,"LI",{});var _Ee=s(su);goe=n(_Ee,"STRONG",{});var UWr=s(goe);ruo=r(UWr,"tapas"),UWr.forEach(t),tuo=r(_Ee," \u2014 "),l$=n(_Ee,"A",{href:!0});var JWr=s(l$);auo=r(JWr,"TapasForMaskedLM"),JWr.forEach(t),nuo=r(_Ee," (TAPAS model)"),_Ee.forEach(t),suo=i(S),lu=n(S,"LI",{});var uEe=s(lu);hoe=n(uEe,"STRONG",{});var YWr=s(hoe);luo=r(YWr,"transfo-xl"),YWr.forEach(t),iuo=r(uEe," \u2014 "),i$=n(uEe,"A",{href:!0});var KWr=s(i$);duo=r(KWr,"TransfoXLLMHeadModel"),KWr.forEach(t),cuo=r(uEe," (Transformer-XL model)"),uEe.forEach(t),fuo=i(S),iu=n(S,"LI",{});var bEe=s(iu);poe=n(bEe,"STRONG",{});var ZWr=s(poe);muo=r(ZWr,"unispeech"),ZWr.forEach(t),guo=r(bEe," \u2014 "),d$=n(bEe,"A",{href:!0});var eQr=s(d$);huo=r(eQr,"UniSpeechForPreTraining"),eQr.forEach(t),puo=r(bEe," (UniSpeech model)"),bEe.forEach(t),_uo=i(S),du=n(S,"LI",{});var vEe=s(du);_oe=n(vEe,"STRONG",{});var oQr=s(_oe);uuo=r(oQr,"unispeech-sat"),oQr.forEach(t),buo=r(vEe," \u2014 "),c$=n(vEe,"A",{href:!0});var rQr=s(c$);vuo=r(rQr,"UniSpeechSatForPreTraining"),rQr.forEach(t),Tuo=r(vEe," (UniSpeechSat model)"),vEe.forEach(t),Fuo=i(S),cu=n(S,"LI",{});var TEe=s(cu);uoe=n(TEe,"STRONG",{});var tQr=s(uoe);Cuo=r(tQr,"visual_bert"),tQr.forEach(t),Muo=r(TEe," \u2014 "),f$=n(TEe,"A",{href:!0});var aQr=s(f$);Euo=r(aQr,"VisualBertForPreTraining"),aQr.forEach(t),yuo=r(TEe," (VisualBert model)"),TEe.forEach(t),wuo=i(S),fu=n(S,"LI",{});var FEe=s(fu);boe=n(FEe,"STRONG",{});var nQr=s(boe);Auo=r(nQr,"vit_mae"),nQr.forEach(t),Luo=r(FEe," \u2014 "),m$=n(FEe,"A",{href:!0});var sQr=s(m$);Buo=r(sQr,"ViTMAEForPreTraining"),sQr.forEach(t),xuo=r(FEe," (ViTMAE model)"),FEe.forEach(t),kuo=i(S),mu=n(S,"LI",{});var CEe=s(mu);voe=n(CEe,"STRONG",{});var lQr=s(voe);Ruo=r(lQr,"wav2vec2"),lQr.forEach(t),Suo=r(CEe," \u2014 "),g$=n(CEe,"A",{href:!0});var iQr=s(g$);Puo=r(iQr,"Wav2Vec2ForPreTraining"),iQr.forEach(t),$uo=r(CEe," (Wav2Vec2 model)"),CEe.forEach(t),Iuo=i(S),gu=n(S,"LI",{});var MEe=s(gu);Toe=n(MEe,"STRONG",{});var dQr=s(Toe);Duo=r(dQr,"xlm"),dQr.forEach(t),Nuo=r(MEe," \u2014 "),h$=n(MEe,"A",{href:!0});var cQr=s(h$);juo=r(cQr,"XLMWithLMHeadModel"),cQr.forEach(t),quo=r(MEe," (XLM model)"),MEe.forEach(t),Guo=i(S),hu=n(S,"LI",{});var EEe=s(hu);Foe=n(EEe,"STRONG",{});var fQr=s(Foe);Ouo=r(fQr,"xlm-roberta"),fQr.forEach(t),Xuo=r(EEe," \u2014 "),p$=n(EEe,"A",{href:!0});var mQr=s(p$);Vuo=r(mQr,"XLMRobertaForMaskedLM"),mQr.forEach(t),zuo=r(EEe," (XLM-RoBERTa model)"),EEe.forEach(t),Wuo=i(S),pu=n(S,"LI",{});var yEe=s(pu);Coe=n(yEe,"STRONG",{});var gQr=s(Coe);Quo=r(gQr,"xlm-roberta-xl"),gQr.forEach(t),Huo=r(yEe," \u2014 "),_$=n(yEe,"A",{href:!0});var hQr=s(_$);Uuo=r(hQr,"XLMRobertaXLForMaskedLM"),hQr.forEach(t),Juo=r(yEe," (XLM-RoBERTa-XL model)"),yEe.forEach(t),Yuo=i(S),_u=n(S,"LI",{});var wEe=s(_u);Moe=n(wEe,"STRONG",{});var pQr=s(Moe);Kuo=r(pQr,"xlnet"),pQr.forEach(t),Zuo=r(wEe," \u2014 "),u$=n(wEe,"A",{href:!0});var _Qr=s(u$);e1o=r(_Qr,"XLNetLMHeadModel"),_Qr.forEach(t),o1o=r(wEe," (XLNet model)"),wEe.forEach(t),S.forEach(t),r1o=i(Gt),uu=n(Gt,"P",{});var AEe=s(uu);t1o=r(AEe,"The model is set in evaluation mode by default using "),Eoe=n(AEe,"CODE",{});var uQr=s(Eoe);a1o=r(uQr,"model.eval()"),uQr.forEach(t),n1o=r(AEe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yoe=n(AEe,"CODE",{});var bQr=s(yoe);s1o=r(bQr,"model.train()"),bQr.forEach(t),AEe.forEach(t),l1o=i(Gt),woe=n(Gt,"P",{});var vQr=s(woe);i1o=r(vQr,"Examples:"),vQr.forEach(t),d1o=i(Gt),m(l5.$$.fragment,Gt),Gt.forEach(t),Hs.forEach(t),Jke=i(c),rd=n(c,"H2",{class:!0});var nPe=s(rd);bu=n(nPe,"A",{id:!0,class:!0,href:!0});var TQr=s(bu);Aoe=n(TQr,"SPAN",{});var FQr=s(Aoe);m(i5.$$.fragment,FQr),FQr.forEach(t),TQr.forEach(t),c1o=i(nPe),Loe=n(nPe,"SPAN",{});var CQr=s(Loe);f1o=r(CQr,"AutoModelForCausalLM"),CQr.forEach(t),nPe.forEach(t),Yke=i(c),Ko=n(c,"DIV",{class:!0});var Js=s(Ko);m(d5.$$.fragment,Js),m1o=i(Js),td=n(Js,"P",{});var pW=s(td);g1o=r(pW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Boe=n(pW,"CODE",{});var MQr=s(Boe);h1o=r(MQr,"from_pretrained()"),MQr.forEach(t),p1o=r(pW,"class method or the "),xoe=n(pW,"CODE",{});var EQr=s(xoe);_1o=r(EQr,"from_config()"),EQr.forEach(t),u1o=r(pW,`class
method.`),pW.forEach(t),b1o=i(Js),c5=n(Js,"P",{});var sPe=s(c5);v1o=r(sPe,"This class cannot be instantiated directly using "),koe=n(sPe,"CODE",{});var yQr=s(koe);T1o=r(yQr,"__init__()"),yQr.forEach(t),F1o=r(sPe," (throws an error)."),sPe.forEach(t),C1o=i(Js),Wr=n(Js,"DIV",{class:!0});var Ys=s(Wr);m(f5.$$.fragment,Ys),M1o=i(Ys),Roe=n(Ys,"P",{});var wQr=s(Roe);E1o=r(wQr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),wQr.forEach(t),y1o=i(Ys),ad=n(Ys,"P",{});var _W=s(ad);w1o=r(_W,`Note:
Loading a model from its configuration file does `),Soe=n(_W,"STRONG",{});var AQr=s(Soe);A1o=r(AQr,"not"),AQr.forEach(t),L1o=r(_W,` load the model weights. It only affects the
model\u2019s configuration. Use `),Poe=n(_W,"CODE",{});var LQr=s(Poe);B1o=r(LQr,"from_pretrained()"),LQr.forEach(t),x1o=r(_W,"to load the model weights."),_W.forEach(t),k1o=i(Ys),$oe=n(Ys,"P",{});var BQr=s($oe);R1o=r(BQr,"Examples:"),BQr.forEach(t),S1o=i(Ys),m(m5.$$.fragment,Ys),Ys.forEach(t),P1o=i(Js),je=n(Js,"DIV",{class:!0});var Ot=s(je);m(g5.$$.fragment,Ot),$1o=i(Ot),Ioe=n(Ot,"P",{});var xQr=s(Ioe);I1o=r(xQr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),xQr.forEach(t),D1o=i(Ot),Wa=n(Ot,"P",{});var TM=s(Wa);N1o=r(TM,"The model class to instantiate is selected based on the "),Doe=n(TM,"CODE",{});var kQr=s(Doe);j1o=r(kQr,"model_type"),kQr.forEach(t),q1o=r(TM,` property of the config object (either
passed as an argument or loaded from `),Noe=n(TM,"CODE",{});var RQr=s(Noe);G1o=r(RQr,"pretrained_model_name_or_path"),RQr.forEach(t),O1o=r(TM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),joe=n(TM,"CODE",{});var SQr=s(joe);X1o=r(SQr,"pretrained_model_name_or_path"),SQr.forEach(t),V1o=r(TM,":"),TM.forEach(t),z1o=i(Ot),$=n(Ot,"UL",{});var D=s($);vu=n(D,"LI",{});var LEe=s(vu);qoe=n(LEe,"STRONG",{});var PQr=s(qoe);W1o=r(PQr,"bart"),PQr.forEach(t),Q1o=r(LEe," \u2014 "),b$=n(LEe,"A",{href:!0});var $Qr=s(b$);H1o=r($Qr,"BartForCausalLM"),$Qr.forEach(t),U1o=r(LEe," (BART model)"),LEe.forEach(t),J1o=i(D),Tu=n(D,"LI",{});var BEe=s(Tu);Goe=n(BEe,"STRONG",{});var IQr=s(Goe);Y1o=r(IQr,"bert"),IQr.forEach(t),K1o=r(BEe," \u2014 "),v$=n(BEe,"A",{href:!0});var DQr=s(v$);Z1o=r(DQr,"BertLMHeadModel"),DQr.forEach(t),e4o=r(BEe," (BERT model)"),BEe.forEach(t),o4o=i(D),Fu=n(D,"LI",{});var xEe=s(Fu);Ooe=n(xEe,"STRONG",{});var NQr=s(Ooe);r4o=r(NQr,"bert-generation"),NQr.forEach(t),t4o=r(xEe," \u2014 "),T$=n(xEe,"A",{href:!0});var jQr=s(T$);a4o=r(jQr,"BertGenerationDecoder"),jQr.forEach(t),n4o=r(xEe," (Bert Generation model)"),xEe.forEach(t),s4o=i(D),Cu=n(D,"LI",{});var kEe=s(Cu);Xoe=n(kEe,"STRONG",{});var qQr=s(Xoe);l4o=r(qQr,"big_bird"),qQr.forEach(t),i4o=r(kEe," \u2014 "),F$=n(kEe,"A",{href:!0});var GQr=s(F$);d4o=r(GQr,"BigBirdForCausalLM"),GQr.forEach(t),c4o=r(kEe," (BigBird model)"),kEe.forEach(t),f4o=i(D),Mu=n(D,"LI",{});var REe=s(Mu);Voe=n(REe,"STRONG",{});var OQr=s(Voe);m4o=r(OQr,"bigbird_pegasus"),OQr.forEach(t),g4o=r(REe," \u2014 "),C$=n(REe,"A",{href:!0});var XQr=s(C$);h4o=r(XQr,"BigBirdPegasusForCausalLM"),XQr.forEach(t),p4o=r(REe," (BigBirdPegasus model)"),REe.forEach(t),_4o=i(D),Eu=n(D,"LI",{});var SEe=s(Eu);zoe=n(SEe,"STRONG",{});var VQr=s(zoe);u4o=r(VQr,"blenderbot"),VQr.forEach(t),b4o=r(SEe," \u2014 "),M$=n(SEe,"A",{href:!0});var zQr=s(M$);v4o=r(zQr,"BlenderbotForCausalLM"),zQr.forEach(t),T4o=r(SEe," (Blenderbot model)"),SEe.forEach(t),F4o=i(D),yu=n(D,"LI",{});var PEe=s(yu);Woe=n(PEe,"STRONG",{});var WQr=s(Woe);C4o=r(WQr,"blenderbot-small"),WQr.forEach(t),M4o=r(PEe," \u2014 "),E$=n(PEe,"A",{href:!0});var QQr=s(E$);E4o=r(QQr,"BlenderbotSmallForCausalLM"),QQr.forEach(t),y4o=r(PEe," (BlenderbotSmall model)"),PEe.forEach(t),w4o=i(D),wu=n(D,"LI",{});var $Ee=s(wu);Qoe=n($Ee,"STRONG",{});var HQr=s(Qoe);A4o=r(HQr,"camembert"),HQr.forEach(t),L4o=r($Ee," \u2014 "),y$=n($Ee,"A",{href:!0});var UQr=s(y$);B4o=r(UQr,"CamembertForCausalLM"),UQr.forEach(t),x4o=r($Ee," (CamemBERT model)"),$Ee.forEach(t),k4o=i(D),Au=n(D,"LI",{});var IEe=s(Au);Hoe=n(IEe,"STRONG",{});var JQr=s(Hoe);R4o=r(JQr,"ctrl"),JQr.forEach(t),S4o=r(IEe," \u2014 "),w$=n(IEe,"A",{href:!0});var YQr=s(w$);P4o=r(YQr,"CTRLLMHeadModel"),YQr.forEach(t),$4o=r(IEe," (CTRL model)"),IEe.forEach(t),I4o=i(D),Lu=n(D,"LI",{});var DEe=s(Lu);Uoe=n(DEe,"STRONG",{});var KQr=s(Uoe);D4o=r(KQr,"data2vec-text"),KQr.forEach(t),N4o=r(DEe," \u2014 "),A$=n(DEe,"A",{href:!0});var ZQr=s(A$);j4o=r(ZQr,"Data2VecTextForCausalLM"),ZQr.forEach(t),q4o=r(DEe," (Data2VecText model)"),DEe.forEach(t),G4o=i(D),Bu=n(D,"LI",{});var NEe=s(Bu);Joe=n(NEe,"STRONG",{});var eHr=s(Joe);O4o=r(eHr,"electra"),eHr.forEach(t),X4o=r(NEe," \u2014 "),L$=n(NEe,"A",{href:!0});var oHr=s(L$);V4o=r(oHr,"ElectraForCausalLM"),oHr.forEach(t),z4o=r(NEe," (ELECTRA model)"),NEe.forEach(t),W4o=i(D),xu=n(D,"LI",{});var jEe=s(xu);Yoe=n(jEe,"STRONG",{});var rHr=s(Yoe);Q4o=r(rHr,"gpt2"),rHr.forEach(t),H4o=r(jEe," \u2014 "),B$=n(jEe,"A",{href:!0});var tHr=s(B$);U4o=r(tHr,"GPT2LMHeadModel"),tHr.forEach(t),J4o=r(jEe," (OpenAI GPT-2 model)"),jEe.forEach(t),Y4o=i(D),ku=n(D,"LI",{});var qEe=s(ku);Koe=n(qEe,"STRONG",{});var aHr=s(Koe);K4o=r(aHr,"gpt_neo"),aHr.forEach(t),Z4o=r(qEe," \u2014 "),x$=n(qEe,"A",{href:!0});var nHr=s(x$);ebo=r(nHr,"GPTNeoForCausalLM"),nHr.forEach(t),obo=r(qEe," (GPT Neo model)"),qEe.forEach(t),rbo=i(D),Ru=n(D,"LI",{});var GEe=s(Ru);Zoe=n(GEe,"STRONG",{});var sHr=s(Zoe);tbo=r(sHr,"gptj"),sHr.forEach(t),abo=r(GEe," \u2014 "),k$=n(GEe,"A",{href:!0});var lHr=s(k$);nbo=r(lHr,"GPTJForCausalLM"),lHr.forEach(t),sbo=r(GEe," (GPT-J model)"),GEe.forEach(t),lbo=i(D),Su=n(D,"LI",{});var OEe=s(Su);ere=n(OEe,"STRONG",{});var iHr=s(ere);ibo=r(iHr,"marian"),iHr.forEach(t),dbo=r(OEe," \u2014 "),R$=n(OEe,"A",{href:!0});var dHr=s(R$);cbo=r(dHr,"MarianForCausalLM"),dHr.forEach(t),fbo=r(OEe," (Marian model)"),OEe.forEach(t),mbo=i(D),Pu=n(D,"LI",{});var XEe=s(Pu);ore=n(XEe,"STRONG",{});var cHr=s(ore);gbo=r(cHr,"mbart"),cHr.forEach(t),hbo=r(XEe," \u2014 "),S$=n(XEe,"A",{href:!0});var fHr=s(S$);pbo=r(fHr,"MBartForCausalLM"),fHr.forEach(t),_bo=r(XEe," (mBART model)"),XEe.forEach(t),ubo=i(D),$u=n(D,"LI",{});var VEe=s($u);rre=n(VEe,"STRONG",{});var mHr=s(rre);bbo=r(mHr,"megatron-bert"),mHr.forEach(t),vbo=r(VEe," \u2014 "),P$=n(VEe,"A",{href:!0});var gHr=s(P$);Tbo=r(gHr,"MegatronBertForCausalLM"),gHr.forEach(t),Fbo=r(VEe," (MegatronBert model)"),VEe.forEach(t),Cbo=i(D),Iu=n(D,"LI",{});var zEe=s(Iu);tre=n(zEe,"STRONG",{});var hHr=s(tre);Mbo=r(hHr,"openai-gpt"),hHr.forEach(t),Ebo=r(zEe," \u2014 "),$$=n(zEe,"A",{href:!0});var pHr=s($$);ybo=r(pHr,"OpenAIGPTLMHeadModel"),pHr.forEach(t),wbo=r(zEe," (OpenAI GPT model)"),zEe.forEach(t),Abo=i(D),Du=n(D,"LI",{});var WEe=s(Du);are=n(WEe,"STRONG",{});var _Hr=s(are);Lbo=r(_Hr,"pegasus"),_Hr.forEach(t),Bbo=r(WEe," \u2014 "),I$=n(WEe,"A",{href:!0});var uHr=s(I$);xbo=r(uHr,"PegasusForCausalLM"),uHr.forEach(t),kbo=r(WEe," (Pegasus model)"),WEe.forEach(t),Rbo=i(D),Nu=n(D,"LI",{});var QEe=s(Nu);nre=n(QEe,"STRONG",{});var bHr=s(nre);Sbo=r(bHr,"plbart"),bHr.forEach(t),Pbo=r(QEe," \u2014 "),D$=n(QEe,"A",{href:!0});var vHr=s(D$);$bo=r(vHr,"PLBartForCausalLM"),vHr.forEach(t),Ibo=r(QEe," (PLBart model)"),QEe.forEach(t),Dbo=i(D),ju=n(D,"LI",{});var HEe=s(ju);sre=n(HEe,"STRONG",{});var THr=s(sre);Nbo=r(THr,"prophetnet"),THr.forEach(t),jbo=r(HEe," \u2014 "),N$=n(HEe,"A",{href:!0});var FHr=s(N$);qbo=r(FHr,"ProphetNetForCausalLM"),FHr.forEach(t),Gbo=r(HEe," (ProphetNet model)"),HEe.forEach(t),Obo=i(D),qu=n(D,"LI",{});var UEe=s(qu);lre=n(UEe,"STRONG",{});var CHr=s(lre);Xbo=r(CHr,"qdqbert"),CHr.forEach(t),Vbo=r(UEe," \u2014 "),j$=n(UEe,"A",{href:!0});var MHr=s(j$);zbo=r(MHr,"QDQBertLMHeadModel"),MHr.forEach(t),Wbo=r(UEe," (QDQBert model)"),UEe.forEach(t),Qbo=i(D),Gu=n(D,"LI",{});var JEe=s(Gu);ire=n(JEe,"STRONG",{});var EHr=s(ire);Hbo=r(EHr,"reformer"),EHr.forEach(t),Ubo=r(JEe," \u2014 "),q$=n(JEe,"A",{href:!0});var yHr=s(q$);Jbo=r(yHr,"ReformerModelWithLMHead"),yHr.forEach(t),Ybo=r(JEe," (Reformer model)"),JEe.forEach(t),Kbo=i(D),Ou=n(D,"LI",{});var YEe=s(Ou);dre=n(YEe,"STRONG",{});var wHr=s(dre);Zbo=r(wHr,"rembert"),wHr.forEach(t),e3o=r(YEe," \u2014 "),G$=n(YEe,"A",{href:!0});var AHr=s(G$);o3o=r(AHr,"RemBertForCausalLM"),AHr.forEach(t),r3o=r(YEe," (RemBERT model)"),YEe.forEach(t),t3o=i(D),Xu=n(D,"LI",{});var KEe=s(Xu);cre=n(KEe,"STRONG",{});var LHr=s(cre);a3o=r(LHr,"roberta"),LHr.forEach(t),n3o=r(KEe," \u2014 "),O$=n(KEe,"A",{href:!0});var BHr=s(O$);s3o=r(BHr,"RobertaForCausalLM"),BHr.forEach(t),l3o=r(KEe," (RoBERTa model)"),KEe.forEach(t),i3o=i(D),Vu=n(D,"LI",{});var ZEe=s(Vu);fre=n(ZEe,"STRONG",{});var xHr=s(fre);d3o=r(xHr,"roformer"),xHr.forEach(t),c3o=r(ZEe," \u2014 "),X$=n(ZEe,"A",{href:!0});var kHr=s(X$);f3o=r(kHr,"RoFormerForCausalLM"),kHr.forEach(t),m3o=r(ZEe," (RoFormer model)"),ZEe.forEach(t),g3o=i(D),zu=n(D,"LI",{});var e5e=s(zu);mre=n(e5e,"STRONG",{});var RHr=s(mre);h3o=r(RHr,"speech_to_text_2"),RHr.forEach(t),p3o=r(e5e," \u2014 "),V$=n(e5e,"A",{href:!0});var SHr=s(V$);_3o=r(SHr,"Speech2Text2ForCausalLM"),SHr.forEach(t),u3o=r(e5e," (Speech2Text2 model)"),e5e.forEach(t),b3o=i(D),Wu=n(D,"LI",{});var o5e=s(Wu);gre=n(o5e,"STRONG",{});var PHr=s(gre);v3o=r(PHr,"transfo-xl"),PHr.forEach(t),T3o=r(o5e," \u2014 "),z$=n(o5e,"A",{href:!0});var $Hr=s(z$);F3o=r($Hr,"TransfoXLLMHeadModel"),$Hr.forEach(t),C3o=r(o5e," (Transformer-XL model)"),o5e.forEach(t),M3o=i(D),Qu=n(D,"LI",{});var r5e=s(Qu);hre=n(r5e,"STRONG",{});var IHr=s(hre);E3o=r(IHr,"trocr"),IHr.forEach(t),y3o=r(r5e," \u2014 "),W$=n(r5e,"A",{href:!0});var DHr=s(W$);w3o=r(DHr,"TrOCRForCausalLM"),DHr.forEach(t),A3o=r(r5e," (TrOCR model)"),r5e.forEach(t),L3o=i(D),Hu=n(D,"LI",{});var t5e=s(Hu);pre=n(t5e,"STRONG",{});var NHr=s(pre);B3o=r(NHr,"xglm"),NHr.forEach(t),x3o=r(t5e," \u2014 "),Q$=n(t5e,"A",{href:!0});var jHr=s(Q$);k3o=r(jHr,"XGLMForCausalLM"),jHr.forEach(t),R3o=r(t5e," (XGLM model)"),t5e.forEach(t),S3o=i(D),Uu=n(D,"LI",{});var a5e=s(Uu);_re=n(a5e,"STRONG",{});var qHr=s(_re);P3o=r(qHr,"xlm"),qHr.forEach(t),$3o=r(a5e," \u2014 "),H$=n(a5e,"A",{href:!0});var GHr=s(H$);I3o=r(GHr,"XLMWithLMHeadModel"),GHr.forEach(t),D3o=r(a5e," (XLM model)"),a5e.forEach(t),N3o=i(D),Ju=n(D,"LI",{});var n5e=s(Ju);ure=n(n5e,"STRONG",{});var OHr=s(ure);j3o=r(OHr,"xlm-prophetnet"),OHr.forEach(t),q3o=r(n5e," \u2014 "),U$=n(n5e,"A",{href:!0});var XHr=s(U$);G3o=r(XHr,"XLMProphetNetForCausalLM"),XHr.forEach(t),O3o=r(n5e," (XLMProphetNet model)"),n5e.forEach(t),X3o=i(D),Yu=n(D,"LI",{});var s5e=s(Yu);bre=n(s5e,"STRONG",{});var VHr=s(bre);V3o=r(VHr,"xlm-roberta"),VHr.forEach(t),z3o=r(s5e," \u2014 "),J$=n(s5e,"A",{href:!0});var zHr=s(J$);W3o=r(zHr,"XLMRobertaForCausalLM"),zHr.forEach(t),Q3o=r(s5e," (XLM-RoBERTa model)"),s5e.forEach(t),H3o=i(D),Ku=n(D,"LI",{});var l5e=s(Ku);vre=n(l5e,"STRONG",{});var WHr=s(vre);U3o=r(WHr,"xlm-roberta-xl"),WHr.forEach(t),J3o=r(l5e," \u2014 "),Y$=n(l5e,"A",{href:!0});var QHr=s(Y$);Y3o=r(QHr,"XLMRobertaXLForCausalLM"),QHr.forEach(t),K3o=r(l5e," (XLM-RoBERTa-XL model)"),l5e.forEach(t),Z3o=i(D),Zu=n(D,"LI",{});var i5e=s(Zu);Tre=n(i5e,"STRONG",{});var HHr=s(Tre);e2o=r(HHr,"xlnet"),HHr.forEach(t),o2o=r(i5e," \u2014 "),K$=n(i5e,"A",{href:!0});var UHr=s(K$);r2o=r(UHr,"XLNetLMHeadModel"),UHr.forEach(t),t2o=r(i5e," (XLNet model)"),i5e.forEach(t),D.forEach(t),a2o=i(Ot),e1=n(Ot,"P",{});var d5e=s(e1);n2o=r(d5e,"The model is set in evaluation mode by default using "),Fre=n(d5e,"CODE",{});var JHr=s(Fre);s2o=r(JHr,"model.eval()"),JHr.forEach(t),l2o=r(d5e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cre=n(d5e,"CODE",{});var YHr=s(Cre);i2o=r(YHr,"model.train()"),YHr.forEach(t),d5e.forEach(t),d2o=i(Ot),Mre=n(Ot,"P",{});var KHr=s(Mre);c2o=r(KHr,"Examples:"),KHr.forEach(t),f2o=i(Ot),m(h5.$$.fragment,Ot),Ot.forEach(t),Js.forEach(t),Kke=i(c),nd=n(c,"H2",{class:!0});var lPe=s(nd);o1=n(lPe,"A",{id:!0,class:!0,href:!0});var ZHr=s(o1);Ere=n(ZHr,"SPAN",{});var eUr=s(Ere);m(p5.$$.fragment,eUr),eUr.forEach(t),ZHr.forEach(t),m2o=i(lPe),yre=n(lPe,"SPAN",{});var oUr=s(yre);g2o=r(oUr,"AutoModelForMaskedLM"),oUr.forEach(t),lPe.forEach(t),Zke=i(c),Zo=n(c,"DIV",{class:!0});var Ks=s(Zo);m(_5.$$.fragment,Ks),h2o=i(Ks),sd=n(Ks,"P",{});var uW=s(sd);p2o=r(uW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),wre=n(uW,"CODE",{});var rUr=s(wre);_2o=r(rUr,"from_pretrained()"),rUr.forEach(t),u2o=r(uW,"class method or the "),Are=n(uW,"CODE",{});var tUr=s(Are);b2o=r(tUr,"from_config()"),tUr.forEach(t),v2o=r(uW,`class
method.`),uW.forEach(t),T2o=i(Ks),u5=n(Ks,"P",{});var iPe=s(u5);F2o=r(iPe,"This class cannot be instantiated directly using "),Lre=n(iPe,"CODE",{});var aUr=s(Lre);C2o=r(aUr,"__init__()"),aUr.forEach(t),M2o=r(iPe," (throws an error)."),iPe.forEach(t),E2o=i(Ks),Qr=n(Ks,"DIV",{class:!0});var Zs=s(Qr);m(b5.$$.fragment,Zs),y2o=i(Zs),Bre=n(Zs,"P",{});var nUr=s(Bre);w2o=r(nUr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),nUr.forEach(t),A2o=i(Zs),ld=n(Zs,"P",{});var bW=s(ld);L2o=r(bW,`Note:
Loading a model from its configuration file does `),xre=n(bW,"STRONG",{});var sUr=s(xre);B2o=r(sUr,"not"),sUr.forEach(t),x2o=r(bW,` load the model weights. It only affects the
model\u2019s configuration. Use `),kre=n(bW,"CODE",{});var lUr=s(kre);k2o=r(lUr,"from_pretrained()"),lUr.forEach(t),R2o=r(bW,"to load the model weights."),bW.forEach(t),S2o=i(Zs),Rre=n(Zs,"P",{});var iUr=s(Rre);P2o=r(iUr,"Examples:"),iUr.forEach(t),$2o=i(Zs),m(v5.$$.fragment,Zs),Zs.forEach(t),I2o=i(Ks),qe=n(Ks,"DIV",{class:!0});var Xt=s(qe);m(T5.$$.fragment,Xt),D2o=i(Xt),Sre=n(Xt,"P",{});var dUr=s(Sre);N2o=r(dUr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),dUr.forEach(t),j2o=i(Xt),Qa=n(Xt,"P",{});var FM=s(Qa);q2o=r(FM,"The model class to instantiate is selected based on the "),Pre=n(FM,"CODE",{});var cUr=s(Pre);G2o=r(cUr,"model_type"),cUr.forEach(t),O2o=r(FM,` property of the config object (either
passed as an argument or loaded from `),$re=n(FM,"CODE",{});var fUr=s($re);X2o=r(fUr,"pretrained_model_name_or_path"),fUr.forEach(t),V2o=r(FM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ire=n(FM,"CODE",{});var mUr=s(Ire);z2o=r(mUr,"pretrained_model_name_or_path"),mUr.forEach(t),W2o=r(FM,":"),FM.forEach(t),Q2o=i(Xt),I=n(Xt,"UL",{});var N=s(I);r1=n(N,"LI",{});var c5e=s(r1);Dre=n(c5e,"STRONG",{});var gUr=s(Dre);H2o=r(gUr,"albert"),gUr.forEach(t),U2o=r(c5e," \u2014 "),Z$=n(c5e,"A",{href:!0});var hUr=s(Z$);J2o=r(hUr,"AlbertForMaskedLM"),hUr.forEach(t),Y2o=r(c5e," (ALBERT model)"),c5e.forEach(t),K2o=i(N),t1=n(N,"LI",{});var f5e=s(t1);Nre=n(f5e,"STRONG",{});var pUr=s(Nre);Z2o=r(pUr,"bart"),pUr.forEach(t),evo=r(f5e," \u2014 "),eI=n(f5e,"A",{href:!0});var _Ur=s(eI);ovo=r(_Ur,"BartForConditionalGeneration"),_Ur.forEach(t),rvo=r(f5e," (BART model)"),f5e.forEach(t),tvo=i(N),a1=n(N,"LI",{});var m5e=s(a1);jre=n(m5e,"STRONG",{});var uUr=s(jre);avo=r(uUr,"bert"),uUr.forEach(t),nvo=r(m5e," \u2014 "),oI=n(m5e,"A",{href:!0});var bUr=s(oI);svo=r(bUr,"BertForMaskedLM"),bUr.forEach(t),lvo=r(m5e," (BERT model)"),m5e.forEach(t),ivo=i(N),n1=n(N,"LI",{});var g5e=s(n1);qre=n(g5e,"STRONG",{});var vUr=s(qre);dvo=r(vUr,"big_bird"),vUr.forEach(t),cvo=r(g5e," \u2014 "),rI=n(g5e,"A",{href:!0});var TUr=s(rI);fvo=r(TUr,"BigBirdForMaskedLM"),TUr.forEach(t),mvo=r(g5e," (BigBird model)"),g5e.forEach(t),gvo=i(N),s1=n(N,"LI",{});var h5e=s(s1);Gre=n(h5e,"STRONG",{});var FUr=s(Gre);hvo=r(FUr,"camembert"),FUr.forEach(t),pvo=r(h5e," \u2014 "),tI=n(h5e,"A",{href:!0});var CUr=s(tI);_vo=r(CUr,"CamembertForMaskedLM"),CUr.forEach(t),uvo=r(h5e," (CamemBERT model)"),h5e.forEach(t),bvo=i(N),l1=n(N,"LI",{});var p5e=s(l1);Ore=n(p5e,"STRONG",{});var MUr=s(Ore);vvo=r(MUr,"convbert"),MUr.forEach(t),Tvo=r(p5e," \u2014 "),aI=n(p5e,"A",{href:!0});var EUr=s(aI);Fvo=r(EUr,"ConvBertForMaskedLM"),EUr.forEach(t),Cvo=r(p5e," (ConvBERT model)"),p5e.forEach(t),Mvo=i(N),i1=n(N,"LI",{});var _5e=s(i1);Xre=n(_5e,"STRONG",{});var yUr=s(Xre);Evo=r(yUr,"data2vec-text"),yUr.forEach(t),yvo=r(_5e," \u2014 "),nI=n(_5e,"A",{href:!0});var wUr=s(nI);wvo=r(wUr,"Data2VecTextForMaskedLM"),wUr.forEach(t),Avo=r(_5e," (Data2VecText model)"),_5e.forEach(t),Lvo=i(N),d1=n(N,"LI",{});var u5e=s(d1);Vre=n(u5e,"STRONG",{});var AUr=s(Vre);Bvo=r(AUr,"deberta"),AUr.forEach(t),xvo=r(u5e," \u2014 "),sI=n(u5e,"A",{href:!0});var LUr=s(sI);kvo=r(LUr,"DebertaForMaskedLM"),LUr.forEach(t),Rvo=r(u5e," (DeBERTa model)"),u5e.forEach(t),Svo=i(N),c1=n(N,"LI",{});var b5e=s(c1);zre=n(b5e,"STRONG",{});var BUr=s(zre);Pvo=r(BUr,"deberta-v2"),BUr.forEach(t),$vo=r(b5e," \u2014 "),lI=n(b5e,"A",{href:!0});var xUr=s(lI);Ivo=r(xUr,"DebertaV2ForMaskedLM"),xUr.forEach(t),Dvo=r(b5e," (DeBERTa-v2 model)"),b5e.forEach(t),Nvo=i(N),f1=n(N,"LI",{});var v5e=s(f1);Wre=n(v5e,"STRONG",{});var kUr=s(Wre);jvo=r(kUr,"distilbert"),kUr.forEach(t),qvo=r(v5e," \u2014 "),iI=n(v5e,"A",{href:!0});var RUr=s(iI);Gvo=r(RUr,"DistilBertForMaskedLM"),RUr.forEach(t),Ovo=r(v5e," (DistilBERT model)"),v5e.forEach(t),Xvo=i(N),m1=n(N,"LI",{});var T5e=s(m1);Qre=n(T5e,"STRONG",{});var SUr=s(Qre);Vvo=r(SUr,"electra"),SUr.forEach(t),zvo=r(T5e," \u2014 "),dI=n(T5e,"A",{href:!0});var PUr=s(dI);Wvo=r(PUr,"ElectraForMaskedLM"),PUr.forEach(t),Qvo=r(T5e," (ELECTRA model)"),T5e.forEach(t),Hvo=i(N),g1=n(N,"LI",{});var F5e=s(g1);Hre=n(F5e,"STRONG",{});var $Ur=s(Hre);Uvo=r($Ur,"flaubert"),$Ur.forEach(t),Jvo=r(F5e," \u2014 "),cI=n(F5e,"A",{href:!0});var IUr=s(cI);Yvo=r(IUr,"FlaubertWithLMHeadModel"),IUr.forEach(t),Kvo=r(F5e," (FlauBERT model)"),F5e.forEach(t),Zvo=i(N),h1=n(N,"LI",{});var C5e=s(h1);Ure=n(C5e,"STRONG",{});var DUr=s(Ure);e6o=r(DUr,"fnet"),DUr.forEach(t),o6o=r(C5e," \u2014 "),fI=n(C5e,"A",{href:!0});var NUr=s(fI);r6o=r(NUr,"FNetForMaskedLM"),NUr.forEach(t),t6o=r(C5e," (FNet model)"),C5e.forEach(t),a6o=i(N),p1=n(N,"LI",{});var M5e=s(p1);Jre=n(M5e,"STRONG",{});var jUr=s(Jre);n6o=r(jUr,"funnel"),jUr.forEach(t),s6o=r(M5e," \u2014 "),mI=n(M5e,"A",{href:!0});var qUr=s(mI);l6o=r(qUr,"FunnelForMaskedLM"),qUr.forEach(t),i6o=r(M5e," (Funnel Transformer model)"),M5e.forEach(t),d6o=i(N),_1=n(N,"LI",{});var E5e=s(_1);Yre=n(E5e,"STRONG",{});var GUr=s(Yre);c6o=r(GUr,"ibert"),GUr.forEach(t),f6o=r(E5e," \u2014 "),gI=n(E5e,"A",{href:!0});var OUr=s(gI);m6o=r(OUr,"IBertForMaskedLM"),OUr.forEach(t),g6o=r(E5e," (I-BERT model)"),E5e.forEach(t),h6o=i(N),u1=n(N,"LI",{});var y5e=s(u1);Kre=n(y5e,"STRONG",{});var XUr=s(Kre);p6o=r(XUr,"layoutlm"),XUr.forEach(t),_6o=r(y5e," \u2014 "),hI=n(y5e,"A",{href:!0});var VUr=s(hI);u6o=r(VUr,"LayoutLMForMaskedLM"),VUr.forEach(t),b6o=r(y5e," (LayoutLM model)"),y5e.forEach(t),v6o=i(N),b1=n(N,"LI",{});var w5e=s(b1);Zre=n(w5e,"STRONG",{});var zUr=s(Zre);T6o=r(zUr,"longformer"),zUr.forEach(t),F6o=r(w5e," \u2014 "),pI=n(w5e,"A",{href:!0});var WUr=s(pI);C6o=r(WUr,"LongformerForMaskedLM"),WUr.forEach(t),M6o=r(w5e," (Longformer model)"),w5e.forEach(t),E6o=i(N),v1=n(N,"LI",{});var A5e=s(v1);ete=n(A5e,"STRONG",{});var QUr=s(ete);y6o=r(QUr,"mbart"),QUr.forEach(t),w6o=r(A5e," \u2014 "),_I=n(A5e,"A",{href:!0});var HUr=s(_I);A6o=r(HUr,"MBartForConditionalGeneration"),HUr.forEach(t),L6o=r(A5e," (mBART model)"),A5e.forEach(t),B6o=i(N),T1=n(N,"LI",{});var L5e=s(T1);ote=n(L5e,"STRONG",{});var UUr=s(ote);x6o=r(UUr,"megatron-bert"),UUr.forEach(t),k6o=r(L5e," \u2014 "),uI=n(L5e,"A",{href:!0});var JUr=s(uI);R6o=r(JUr,"MegatronBertForMaskedLM"),JUr.forEach(t),S6o=r(L5e," (MegatronBert model)"),L5e.forEach(t),P6o=i(N),F1=n(N,"LI",{});var B5e=s(F1);rte=n(B5e,"STRONG",{});var YUr=s(rte);$6o=r(YUr,"mobilebert"),YUr.forEach(t),I6o=r(B5e," \u2014 "),bI=n(B5e,"A",{href:!0});var KUr=s(bI);D6o=r(KUr,"MobileBertForMaskedLM"),KUr.forEach(t),N6o=r(B5e," (MobileBERT model)"),B5e.forEach(t),j6o=i(N),C1=n(N,"LI",{});var x5e=s(C1);tte=n(x5e,"STRONG",{});var ZUr=s(tte);q6o=r(ZUr,"mpnet"),ZUr.forEach(t),G6o=r(x5e," \u2014 "),vI=n(x5e,"A",{href:!0});var eJr=s(vI);O6o=r(eJr,"MPNetForMaskedLM"),eJr.forEach(t),X6o=r(x5e," (MPNet model)"),x5e.forEach(t),V6o=i(N),M1=n(N,"LI",{});var k5e=s(M1);ate=n(k5e,"STRONG",{});var oJr=s(ate);z6o=r(oJr,"nystromformer"),oJr.forEach(t),W6o=r(k5e," \u2014 "),TI=n(k5e,"A",{href:!0});var rJr=s(TI);Q6o=r(rJr,"NystromformerForMaskedLM"),rJr.forEach(t),H6o=r(k5e," (Nystromformer model)"),k5e.forEach(t),U6o=i(N),E1=n(N,"LI",{});var R5e=s(E1);nte=n(R5e,"STRONG",{});var tJr=s(nte);J6o=r(tJr,"perceiver"),tJr.forEach(t),Y6o=r(R5e," \u2014 "),FI=n(R5e,"A",{href:!0});var aJr=s(FI);K6o=r(aJr,"PerceiverForMaskedLM"),aJr.forEach(t),Z6o=r(R5e," (Perceiver model)"),R5e.forEach(t),eTo=i(N),y1=n(N,"LI",{});var S5e=s(y1);ste=n(S5e,"STRONG",{});var nJr=s(ste);oTo=r(nJr,"qdqbert"),nJr.forEach(t),rTo=r(S5e," \u2014 "),CI=n(S5e,"A",{href:!0});var sJr=s(CI);tTo=r(sJr,"QDQBertForMaskedLM"),sJr.forEach(t),aTo=r(S5e," (QDQBert model)"),S5e.forEach(t),nTo=i(N),w1=n(N,"LI",{});var P5e=s(w1);lte=n(P5e,"STRONG",{});var lJr=s(lte);sTo=r(lJr,"reformer"),lJr.forEach(t),lTo=r(P5e," \u2014 "),MI=n(P5e,"A",{href:!0});var iJr=s(MI);iTo=r(iJr,"ReformerForMaskedLM"),iJr.forEach(t),dTo=r(P5e," (Reformer model)"),P5e.forEach(t),cTo=i(N),A1=n(N,"LI",{});var $5e=s(A1);ite=n($5e,"STRONG",{});var dJr=s(ite);fTo=r(dJr,"rembert"),dJr.forEach(t),mTo=r($5e," \u2014 "),EI=n($5e,"A",{href:!0});var cJr=s(EI);gTo=r(cJr,"RemBertForMaskedLM"),cJr.forEach(t),hTo=r($5e," (RemBERT model)"),$5e.forEach(t),pTo=i(N),L1=n(N,"LI",{});var I5e=s(L1);dte=n(I5e,"STRONG",{});var fJr=s(dte);_To=r(fJr,"roberta"),fJr.forEach(t),uTo=r(I5e," \u2014 "),yI=n(I5e,"A",{href:!0});var mJr=s(yI);bTo=r(mJr,"RobertaForMaskedLM"),mJr.forEach(t),vTo=r(I5e," (RoBERTa model)"),I5e.forEach(t),TTo=i(N),B1=n(N,"LI",{});var D5e=s(B1);cte=n(D5e,"STRONG",{});var gJr=s(cte);FTo=r(gJr,"roformer"),gJr.forEach(t),CTo=r(D5e," \u2014 "),wI=n(D5e,"A",{href:!0});var hJr=s(wI);MTo=r(hJr,"RoFormerForMaskedLM"),hJr.forEach(t),ETo=r(D5e," (RoFormer model)"),D5e.forEach(t),yTo=i(N),x1=n(N,"LI",{});var N5e=s(x1);fte=n(N5e,"STRONG",{});var pJr=s(fte);wTo=r(pJr,"squeezebert"),pJr.forEach(t),ATo=r(N5e," \u2014 "),AI=n(N5e,"A",{href:!0});var _Jr=s(AI);LTo=r(_Jr,"SqueezeBertForMaskedLM"),_Jr.forEach(t),BTo=r(N5e," (SqueezeBERT model)"),N5e.forEach(t),xTo=i(N),k1=n(N,"LI",{});var j5e=s(k1);mte=n(j5e,"STRONG",{});var uJr=s(mte);kTo=r(uJr,"tapas"),uJr.forEach(t),RTo=r(j5e," \u2014 "),LI=n(j5e,"A",{href:!0});var bJr=s(LI);STo=r(bJr,"TapasForMaskedLM"),bJr.forEach(t),PTo=r(j5e," (TAPAS model)"),j5e.forEach(t),$To=i(N),R1=n(N,"LI",{});var q5e=s(R1);gte=n(q5e,"STRONG",{});var vJr=s(gte);ITo=r(vJr,"wav2vec2"),vJr.forEach(t),DTo=r(q5e," \u2014 "),hte=n(q5e,"CODE",{});var TJr=s(hte);NTo=r(TJr,"Wav2Vec2ForMaskedLM"),TJr.forEach(t),jTo=r(q5e,"(Wav2Vec2 model)"),q5e.forEach(t),qTo=i(N),S1=n(N,"LI",{});var G5e=s(S1);pte=n(G5e,"STRONG",{});var FJr=s(pte);GTo=r(FJr,"xlm"),FJr.forEach(t),OTo=r(G5e," \u2014 "),BI=n(G5e,"A",{href:!0});var CJr=s(BI);XTo=r(CJr,"XLMWithLMHeadModel"),CJr.forEach(t),VTo=r(G5e," (XLM model)"),G5e.forEach(t),zTo=i(N),P1=n(N,"LI",{});var O5e=s(P1);_te=n(O5e,"STRONG",{});var MJr=s(_te);WTo=r(MJr,"xlm-roberta"),MJr.forEach(t),QTo=r(O5e," \u2014 "),xI=n(O5e,"A",{href:!0});var EJr=s(xI);HTo=r(EJr,"XLMRobertaForMaskedLM"),EJr.forEach(t),UTo=r(O5e," (XLM-RoBERTa model)"),O5e.forEach(t),JTo=i(N),$1=n(N,"LI",{});var X5e=s($1);ute=n(X5e,"STRONG",{});var yJr=s(ute);YTo=r(yJr,"xlm-roberta-xl"),yJr.forEach(t),KTo=r(X5e," \u2014 "),kI=n(X5e,"A",{href:!0});var wJr=s(kI);ZTo=r(wJr,"XLMRobertaXLForMaskedLM"),wJr.forEach(t),e7o=r(X5e," (XLM-RoBERTa-XL model)"),X5e.forEach(t),o7o=i(N),I1=n(N,"LI",{});var V5e=s(I1);bte=n(V5e,"STRONG",{});var AJr=s(bte);r7o=r(AJr,"yoso"),AJr.forEach(t),t7o=r(V5e," \u2014 "),RI=n(V5e,"A",{href:!0});var LJr=s(RI);a7o=r(LJr,"YosoForMaskedLM"),LJr.forEach(t),n7o=r(V5e," (YOSO model)"),V5e.forEach(t),N.forEach(t),s7o=i(Xt),D1=n(Xt,"P",{});var z5e=s(D1);l7o=r(z5e,"The model is set in evaluation mode by default using "),vte=n(z5e,"CODE",{});var BJr=s(vte);i7o=r(BJr,"model.eval()"),BJr.forEach(t),d7o=r(z5e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tte=n(z5e,"CODE",{});var xJr=s(Tte);c7o=r(xJr,"model.train()"),xJr.forEach(t),z5e.forEach(t),f7o=i(Xt),Fte=n(Xt,"P",{});var kJr=s(Fte);m7o=r(kJr,"Examples:"),kJr.forEach(t),g7o=i(Xt),m(F5.$$.fragment,Xt),Xt.forEach(t),Ks.forEach(t),eRe=i(c),id=n(c,"H2",{class:!0});var dPe=s(id);N1=n(dPe,"A",{id:!0,class:!0,href:!0});var RJr=s(N1);Cte=n(RJr,"SPAN",{});var SJr=s(Cte);m(C5.$$.fragment,SJr),SJr.forEach(t),RJr.forEach(t),h7o=i(dPe),Mte=n(dPe,"SPAN",{});var PJr=s(Mte);p7o=r(PJr,"AutoModelForSeq2SeqLM"),PJr.forEach(t),dPe.forEach(t),oRe=i(c),er=n(c,"DIV",{class:!0});var el=s(er);m(M5.$$.fragment,el),_7o=i(el),dd=n(el,"P",{});var vW=s(dd);u7o=r(vW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Ete=n(vW,"CODE",{});var $Jr=s(Ete);b7o=r($Jr,"from_pretrained()"),$Jr.forEach(t),v7o=r(vW,"class method or the "),yte=n(vW,"CODE",{});var IJr=s(yte);T7o=r(IJr,"from_config()"),IJr.forEach(t),F7o=r(vW,`class
method.`),vW.forEach(t),C7o=i(el),E5=n(el,"P",{});var cPe=s(E5);M7o=r(cPe,"This class cannot be instantiated directly using "),wte=n(cPe,"CODE",{});var DJr=s(wte);E7o=r(DJr,"__init__()"),DJr.forEach(t),y7o=r(cPe," (throws an error)."),cPe.forEach(t),w7o=i(el),Hr=n(el,"DIV",{class:!0});var ol=s(Hr);m(y5.$$.fragment,ol),A7o=i(ol),Ate=n(ol,"P",{});var NJr=s(Ate);L7o=r(NJr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),NJr.forEach(t),B7o=i(ol),cd=n(ol,"P",{});var TW=s(cd);x7o=r(TW,`Note:
Loading a model from its configuration file does `),Lte=n(TW,"STRONG",{});var jJr=s(Lte);k7o=r(jJr,"not"),jJr.forEach(t),R7o=r(TW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Bte=n(TW,"CODE",{});var qJr=s(Bte);S7o=r(qJr,"from_pretrained()"),qJr.forEach(t),P7o=r(TW,"to load the model weights."),TW.forEach(t),$7o=i(ol),xte=n(ol,"P",{});var GJr=s(xte);I7o=r(GJr,"Examples:"),GJr.forEach(t),D7o=i(ol),m(w5.$$.fragment,ol),ol.forEach(t),N7o=i(el),Ge=n(el,"DIV",{class:!0});var Vt=s(Ge);m(A5.$$.fragment,Vt),j7o=i(Vt),kte=n(Vt,"P",{});var OJr=s(kte);q7o=r(OJr,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),OJr.forEach(t),G7o=i(Vt),Ha=n(Vt,"P",{});var CM=s(Ha);O7o=r(CM,"The model class to instantiate is selected based on the "),Rte=n(CM,"CODE",{});var XJr=s(Rte);X7o=r(XJr,"model_type"),XJr.forEach(t),V7o=r(CM,` property of the config object (either
passed as an argument or loaded from `),Ste=n(CM,"CODE",{});var VJr=s(Ste);z7o=r(VJr,"pretrained_model_name_or_path"),VJr.forEach(t),W7o=r(CM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pte=n(CM,"CODE",{});var zJr=s(Pte);Q7o=r(zJr,"pretrained_model_name_or_path"),zJr.forEach(t),H7o=r(CM,":"),CM.forEach(t),U7o=i(Vt),se=n(Vt,"UL",{});var ie=s(se);j1=n(ie,"LI",{});var W5e=s(j1);$te=n(W5e,"STRONG",{});var WJr=s($te);J7o=r(WJr,"bart"),WJr.forEach(t),Y7o=r(W5e," \u2014 "),SI=n(W5e,"A",{href:!0});var QJr=s(SI);K7o=r(QJr,"BartForConditionalGeneration"),QJr.forEach(t),Z7o=r(W5e," (BART model)"),W5e.forEach(t),eFo=i(ie),q1=n(ie,"LI",{});var Q5e=s(q1);Ite=n(Q5e,"STRONG",{});var HJr=s(Ite);oFo=r(HJr,"bigbird_pegasus"),HJr.forEach(t),rFo=r(Q5e," \u2014 "),PI=n(Q5e,"A",{href:!0});var UJr=s(PI);tFo=r(UJr,"BigBirdPegasusForConditionalGeneration"),UJr.forEach(t),aFo=r(Q5e," (BigBirdPegasus model)"),Q5e.forEach(t),nFo=i(ie),G1=n(ie,"LI",{});var H5e=s(G1);Dte=n(H5e,"STRONG",{});var JJr=s(Dte);sFo=r(JJr,"blenderbot"),JJr.forEach(t),lFo=r(H5e," \u2014 "),$I=n(H5e,"A",{href:!0});var YJr=s($I);iFo=r(YJr,"BlenderbotForConditionalGeneration"),YJr.forEach(t),dFo=r(H5e," (Blenderbot model)"),H5e.forEach(t),cFo=i(ie),O1=n(ie,"LI",{});var U5e=s(O1);Nte=n(U5e,"STRONG",{});var KJr=s(Nte);fFo=r(KJr,"blenderbot-small"),KJr.forEach(t),mFo=r(U5e," \u2014 "),II=n(U5e,"A",{href:!0});var ZJr=s(II);gFo=r(ZJr,"BlenderbotSmallForConditionalGeneration"),ZJr.forEach(t),hFo=r(U5e," (BlenderbotSmall model)"),U5e.forEach(t),pFo=i(ie),X1=n(ie,"LI",{});var J5e=s(X1);jte=n(J5e,"STRONG",{});var eYr=s(jte);_Fo=r(eYr,"encoder-decoder"),eYr.forEach(t),uFo=r(J5e," \u2014 "),DI=n(J5e,"A",{href:!0});var oYr=s(DI);bFo=r(oYr,"EncoderDecoderModel"),oYr.forEach(t),vFo=r(J5e," (Encoder decoder model)"),J5e.forEach(t),TFo=i(ie),V1=n(ie,"LI",{});var Y5e=s(V1);qte=n(Y5e,"STRONG",{});var rYr=s(qte);FFo=r(rYr,"fsmt"),rYr.forEach(t),CFo=r(Y5e," \u2014 "),NI=n(Y5e,"A",{href:!0});var tYr=s(NI);MFo=r(tYr,"FSMTForConditionalGeneration"),tYr.forEach(t),EFo=r(Y5e," (FairSeq Machine-Translation model)"),Y5e.forEach(t),yFo=i(ie),z1=n(ie,"LI",{});var K5e=s(z1);Gte=n(K5e,"STRONG",{});var aYr=s(Gte);wFo=r(aYr,"led"),aYr.forEach(t),AFo=r(K5e," \u2014 "),jI=n(K5e,"A",{href:!0});var nYr=s(jI);LFo=r(nYr,"LEDForConditionalGeneration"),nYr.forEach(t),BFo=r(K5e," (LED model)"),K5e.forEach(t),xFo=i(ie),W1=n(ie,"LI",{});var Z5e=s(W1);Ote=n(Z5e,"STRONG",{});var sYr=s(Ote);kFo=r(sYr,"m2m_100"),sYr.forEach(t),RFo=r(Z5e," \u2014 "),qI=n(Z5e,"A",{href:!0});var lYr=s(qI);SFo=r(lYr,"M2M100ForConditionalGeneration"),lYr.forEach(t),PFo=r(Z5e," (M2M100 model)"),Z5e.forEach(t),$Fo=i(ie),Q1=n(ie,"LI",{});var eye=s(Q1);Xte=n(eye,"STRONG",{});var iYr=s(Xte);IFo=r(iYr,"marian"),iYr.forEach(t),DFo=r(eye," \u2014 "),GI=n(eye,"A",{href:!0});var dYr=s(GI);NFo=r(dYr,"MarianMTModel"),dYr.forEach(t),jFo=r(eye," (Marian model)"),eye.forEach(t),qFo=i(ie),H1=n(ie,"LI",{});var oye=s(H1);Vte=n(oye,"STRONG",{});var cYr=s(Vte);GFo=r(cYr,"mbart"),cYr.forEach(t),OFo=r(oye," \u2014 "),OI=n(oye,"A",{href:!0});var fYr=s(OI);XFo=r(fYr,"MBartForConditionalGeneration"),fYr.forEach(t),VFo=r(oye," (mBART model)"),oye.forEach(t),zFo=i(ie),U1=n(ie,"LI",{});var rye=s(U1);zte=n(rye,"STRONG",{});var mYr=s(zte);WFo=r(mYr,"mt5"),mYr.forEach(t),QFo=r(rye," \u2014 "),XI=n(rye,"A",{href:!0});var gYr=s(XI);HFo=r(gYr,"MT5ForConditionalGeneration"),gYr.forEach(t),UFo=r(rye," (mT5 model)"),rye.forEach(t),JFo=i(ie),J1=n(ie,"LI",{});var tye=s(J1);Wte=n(tye,"STRONG",{});var hYr=s(Wte);YFo=r(hYr,"pegasus"),hYr.forEach(t),KFo=r(tye," \u2014 "),VI=n(tye,"A",{href:!0});var pYr=s(VI);ZFo=r(pYr,"PegasusForConditionalGeneration"),pYr.forEach(t),eCo=r(tye," (Pegasus model)"),tye.forEach(t),oCo=i(ie),Y1=n(ie,"LI",{});var aye=s(Y1);Qte=n(aye,"STRONG",{});var _Yr=s(Qte);rCo=r(_Yr,"plbart"),_Yr.forEach(t),tCo=r(aye," \u2014 "),zI=n(aye,"A",{href:!0});var uYr=s(zI);aCo=r(uYr,"PLBartForConditionalGeneration"),uYr.forEach(t),nCo=r(aye," (PLBart model)"),aye.forEach(t),sCo=i(ie),K1=n(ie,"LI",{});var nye=s(K1);Hte=n(nye,"STRONG",{});var bYr=s(Hte);lCo=r(bYr,"prophetnet"),bYr.forEach(t),iCo=r(nye," \u2014 "),WI=n(nye,"A",{href:!0});var vYr=s(WI);dCo=r(vYr,"ProphetNetForConditionalGeneration"),vYr.forEach(t),cCo=r(nye," (ProphetNet model)"),nye.forEach(t),fCo=i(ie),Z1=n(ie,"LI",{});var sye=s(Z1);Ute=n(sye,"STRONG",{});var TYr=s(Ute);mCo=r(TYr,"t5"),TYr.forEach(t),gCo=r(sye," \u2014 "),QI=n(sye,"A",{href:!0});var FYr=s(QI);hCo=r(FYr,"T5ForConditionalGeneration"),FYr.forEach(t),pCo=r(sye," (T5 model)"),sye.forEach(t),_Co=i(ie),e4=n(ie,"LI",{});var lye=s(e4);Jte=n(lye,"STRONG",{});var CYr=s(Jte);uCo=r(CYr,"xlm-prophetnet"),CYr.forEach(t),bCo=r(lye," \u2014 "),HI=n(lye,"A",{href:!0});var MYr=s(HI);vCo=r(MYr,"XLMProphetNetForConditionalGeneration"),MYr.forEach(t),TCo=r(lye," (XLMProphetNet model)"),lye.forEach(t),ie.forEach(t),FCo=i(Vt),o4=n(Vt,"P",{});var iye=s(o4);CCo=r(iye,"The model is set in evaluation mode by default using "),Yte=n(iye,"CODE",{});var EYr=s(Yte);MCo=r(EYr,"model.eval()"),EYr.forEach(t),ECo=r(iye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kte=n(iye,"CODE",{});var yYr=s(Kte);yCo=r(yYr,"model.train()"),yYr.forEach(t),iye.forEach(t),wCo=i(Vt),Zte=n(Vt,"P",{});var wYr=s(Zte);ACo=r(wYr,"Examples:"),wYr.forEach(t),LCo=i(Vt),m(L5.$$.fragment,Vt),Vt.forEach(t),el.forEach(t),rRe=i(c),fd=n(c,"H2",{class:!0});var fPe=s(fd);r4=n(fPe,"A",{id:!0,class:!0,href:!0});var AYr=s(r4);eae=n(AYr,"SPAN",{});var LYr=s(eae);m(B5.$$.fragment,LYr),LYr.forEach(t),AYr.forEach(t),BCo=i(fPe),oae=n(fPe,"SPAN",{});var BYr=s(oae);xCo=r(BYr,"AutoModelForSequenceClassification"),BYr.forEach(t),fPe.forEach(t),tRe=i(c),or=n(c,"DIV",{class:!0});var rl=s(or);m(x5.$$.fragment,rl),kCo=i(rl),md=n(rl,"P",{});var FW=s(md);RCo=r(FW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),rae=n(FW,"CODE",{});var xYr=s(rae);SCo=r(xYr,"from_pretrained()"),xYr.forEach(t),PCo=r(FW,"class method or the "),tae=n(FW,"CODE",{});var kYr=s(tae);$Co=r(kYr,"from_config()"),kYr.forEach(t),ICo=r(FW,`class
method.`),FW.forEach(t),DCo=i(rl),k5=n(rl,"P",{});var mPe=s(k5);NCo=r(mPe,"This class cannot be instantiated directly using "),aae=n(mPe,"CODE",{});var RYr=s(aae);jCo=r(RYr,"__init__()"),RYr.forEach(t),qCo=r(mPe," (throws an error)."),mPe.forEach(t),GCo=i(rl),Ur=n(rl,"DIV",{class:!0});var tl=s(Ur);m(R5.$$.fragment,tl),OCo=i(tl),nae=n(tl,"P",{});var SYr=s(nae);XCo=r(SYr,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),SYr.forEach(t),VCo=i(tl),gd=n(tl,"P",{});var CW=s(gd);zCo=r(CW,`Note:
Loading a model from its configuration file does `),sae=n(CW,"STRONG",{});var PYr=s(sae);WCo=r(PYr,"not"),PYr.forEach(t),QCo=r(CW,` load the model weights. It only affects the
model\u2019s configuration. Use `),lae=n(CW,"CODE",{});var $Yr=s(lae);HCo=r($Yr,"from_pretrained()"),$Yr.forEach(t),UCo=r(CW,"to load the model weights."),CW.forEach(t),JCo=i(tl),iae=n(tl,"P",{});var IYr=s(iae);YCo=r(IYr,"Examples:"),IYr.forEach(t),KCo=i(tl),m(S5.$$.fragment,tl),tl.forEach(t),ZCo=i(rl),Oe=n(rl,"DIV",{class:!0});var zt=s(Oe);m(P5.$$.fragment,zt),eMo=i(zt),dae=n(zt,"P",{});var DYr=s(dae);oMo=r(DYr,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),DYr.forEach(t),rMo=i(zt),Ua=n(zt,"P",{});var MM=s(Ua);tMo=r(MM,"The model class to instantiate is selected based on the "),cae=n(MM,"CODE",{});var NYr=s(cae);aMo=r(NYr,"model_type"),NYr.forEach(t),nMo=r(MM,` property of the config object (either
passed as an argument or loaded from `),fae=n(MM,"CODE",{});var jYr=s(fae);sMo=r(jYr,"pretrained_model_name_or_path"),jYr.forEach(t),lMo=r(MM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mae=n(MM,"CODE",{});var qYr=s(mae);iMo=r(qYr,"pretrained_model_name_or_path"),qYr.forEach(t),dMo=r(MM,":"),MM.forEach(t),cMo=i(zt),A=n(zt,"UL",{});var L=s(A);t4=n(L,"LI",{});var dye=s(t4);gae=n(dye,"STRONG",{});var GYr=s(gae);fMo=r(GYr,"albert"),GYr.forEach(t),mMo=r(dye," \u2014 "),UI=n(dye,"A",{href:!0});var OYr=s(UI);gMo=r(OYr,"AlbertForSequenceClassification"),OYr.forEach(t),hMo=r(dye," (ALBERT model)"),dye.forEach(t),pMo=i(L),a4=n(L,"LI",{});var cye=s(a4);hae=n(cye,"STRONG",{});var XYr=s(hae);_Mo=r(XYr,"bart"),XYr.forEach(t),uMo=r(cye," \u2014 "),JI=n(cye,"A",{href:!0});var VYr=s(JI);bMo=r(VYr,"BartForSequenceClassification"),VYr.forEach(t),vMo=r(cye," (BART model)"),cye.forEach(t),TMo=i(L),n4=n(L,"LI",{});var fye=s(n4);pae=n(fye,"STRONG",{});var zYr=s(pae);FMo=r(zYr,"bert"),zYr.forEach(t),CMo=r(fye," \u2014 "),YI=n(fye,"A",{href:!0});var WYr=s(YI);MMo=r(WYr,"BertForSequenceClassification"),WYr.forEach(t),EMo=r(fye," (BERT model)"),fye.forEach(t),yMo=i(L),s4=n(L,"LI",{});var mye=s(s4);_ae=n(mye,"STRONG",{});var QYr=s(_ae);wMo=r(QYr,"big_bird"),QYr.forEach(t),AMo=r(mye," \u2014 "),KI=n(mye,"A",{href:!0});var HYr=s(KI);LMo=r(HYr,"BigBirdForSequenceClassification"),HYr.forEach(t),BMo=r(mye," (BigBird model)"),mye.forEach(t),xMo=i(L),l4=n(L,"LI",{});var gye=s(l4);uae=n(gye,"STRONG",{});var UYr=s(uae);kMo=r(UYr,"bigbird_pegasus"),UYr.forEach(t),RMo=r(gye," \u2014 "),ZI=n(gye,"A",{href:!0});var JYr=s(ZI);SMo=r(JYr,"BigBirdPegasusForSequenceClassification"),JYr.forEach(t),PMo=r(gye," (BigBirdPegasus model)"),gye.forEach(t),$Mo=i(L),i4=n(L,"LI",{});var hye=s(i4);bae=n(hye,"STRONG",{});var YYr=s(bae);IMo=r(YYr,"camembert"),YYr.forEach(t),DMo=r(hye," \u2014 "),eD=n(hye,"A",{href:!0});var KYr=s(eD);NMo=r(KYr,"CamembertForSequenceClassification"),KYr.forEach(t),jMo=r(hye," (CamemBERT model)"),hye.forEach(t),qMo=i(L),d4=n(L,"LI",{});var pye=s(d4);vae=n(pye,"STRONG",{});var ZYr=s(vae);GMo=r(ZYr,"canine"),ZYr.forEach(t),OMo=r(pye," \u2014 "),oD=n(pye,"A",{href:!0});var eKr=s(oD);XMo=r(eKr,"CanineForSequenceClassification"),eKr.forEach(t),VMo=r(pye," (Canine model)"),pye.forEach(t),zMo=i(L),c4=n(L,"LI",{});var _ye=s(c4);Tae=n(_ye,"STRONG",{});var oKr=s(Tae);WMo=r(oKr,"convbert"),oKr.forEach(t),QMo=r(_ye," \u2014 "),rD=n(_ye,"A",{href:!0});var rKr=s(rD);HMo=r(rKr,"ConvBertForSequenceClassification"),rKr.forEach(t),UMo=r(_ye," (ConvBERT model)"),_ye.forEach(t),JMo=i(L),f4=n(L,"LI",{});var uye=s(f4);Fae=n(uye,"STRONG",{});var tKr=s(Fae);YMo=r(tKr,"ctrl"),tKr.forEach(t),KMo=r(uye," \u2014 "),tD=n(uye,"A",{href:!0});var aKr=s(tD);ZMo=r(aKr,"CTRLForSequenceClassification"),aKr.forEach(t),eEo=r(uye," (CTRL model)"),uye.forEach(t),oEo=i(L),m4=n(L,"LI",{});var bye=s(m4);Cae=n(bye,"STRONG",{});var nKr=s(Cae);rEo=r(nKr,"data2vec-text"),nKr.forEach(t),tEo=r(bye," \u2014 "),aD=n(bye,"A",{href:!0});var sKr=s(aD);aEo=r(sKr,"Data2VecTextForSequenceClassification"),sKr.forEach(t),nEo=r(bye," (Data2VecText model)"),bye.forEach(t),sEo=i(L),g4=n(L,"LI",{});var vye=s(g4);Mae=n(vye,"STRONG",{});var lKr=s(Mae);lEo=r(lKr,"deberta"),lKr.forEach(t),iEo=r(vye," \u2014 "),nD=n(vye,"A",{href:!0});var iKr=s(nD);dEo=r(iKr,"DebertaForSequenceClassification"),iKr.forEach(t),cEo=r(vye," (DeBERTa model)"),vye.forEach(t),fEo=i(L),h4=n(L,"LI",{});var Tye=s(h4);Eae=n(Tye,"STRONG",{});var dKr=s(Eae);mEo=r(dKr,"deberta-v2"),dKr.forEach(t),gEo=r(Tye," \u2014 "),sD=n(Tye,"A",{href:!0});var cKr=s(sD);hEo=r(cKr,"DebertaV2ForSequenceClassification"),cKr.forEach(t),pEo=r(Tye," (DeBERTa-v2 model)"),Tye.forEach(t),_Eo=i(L),p4=n(L,"LI",{});var Fye=s(p4);yae=n(Fye,"STRONG",{});var fKr=s(yae);uEo=r(fKr,"distilbert"),fKr.forEach(t),bEo=r(Fye," \u2014 "),lD=n(Fye,"A",{href:!0});var mKr=s(lD);vEo=r(mKr,"DistilBertForSequenceClassification"),mKr.forEach(t),TEo=r(Fye," (DistilBERT model)"),Fye.forEach(t),FEo=i(L),_4=n(L,"LI",{});var Cye=s(_4);wae=n(Cye,"STRONG",{});var gKr=s(wae);CEo=r(gKr,"electra"),gKr.forEach(t),MEo=r(Cye," \u2014 "),iD=n(Cye,"A",{href:!0});var hKr=s(iD);EEo=r(hKr,"ElectraForSequenceClassification"),hKr.forEach(t),yEo=r(Cye," (ELECTRA model)"),Cye.forEach(t),wEo=i(L),u4=n(L,"LI",{});var Mye=s(u4);Aae=n(Mye,"STRONG",{});var pKr=s(Aae);AEo=r(pKr,"flaubert"),pKr.forEach(t),LEo=r(Mye," \u2014 "),dD=n(Mye,"A",{href:!0});var _Kr=s(dD);BEo=r(_Kr,"FlaubertForSequenceClassification"),_Kr.forEach(t),xEo=r(Mye," (FlauBERT model)"),Mye.forEach(t),kEo=i(L),b4=n(L,"LI",{});var Eye=s(b4);Lae=n(Eye,"STRONG",{});var uKr=s(Lae);REo=r(uKr,"fnet"),uKr.forEach(t),SEo=r(Eye," \u2014 "),cD=n(Eye,"A",{href:!0});var bKr=s(cD);PEo=r(bKr,"FNetForSequenceClassification"),bKr.forEach(t),$Eo=r(Eye," (FNet model)"),Eye.forEach(t),IEo=i(L),v4=n(L,"LI",{});var yye=s(v4);Bae=n(yye,"STRONG",{});var vKr=s(Bae);DEo=r(vKr,"funnel"),vKr.forEach(t),NEo=r(yye," \u2014 "),fD=n(yye,"A",{href:!0});var TKr=s(fD);jEo=r(TKr,"FunnelForSequenceClassification"),TKr.forEach(t),qEo=r(yye," (Funnel Transformer model)"),yye.forEach(t),GEo=i(L),T4=n(L,"LI",{});var wye=s(T4);xae=n(wye,"STRONG",{});var FKr=s(xae);OEo=r(FKr,"gpt2"),FKr.forEach(t),XEo=r(wye," \u2014 "),mD=n(wye,"A",{href:!0});var CKr=s(mD);VEo=r(CKr,"GPT2ForSequenceClassification"),CKr.forEach(t),zEo=r(wye," (OpenAI GPT-2 model)"),wye.forEach(t),WEo=i(L),F4=n(L,"LI",{});var Aye=s(F4);kae=n(Aye,"STRONG",{});var MKr=s(kae);QEo=r(MKr,"gpt_neo"),MKr.forEach(t),HEo=r(Aye," \u2014 "),gD=n(Aye,"A",{href:!0});var EKr=s(gD);UEo=r(EKr,"GPTNeoForSequenceClassification"),EKr.forEach(t),JEo=r(Aye," (GPT Neo model)"),Aye.forEach(t),YEo=i(L),C4=n(L,"LI",{});var Lye=s(C4);Rae=n(Lye,"STRONG",{});var yKr=s(Rae);KEo=r(yKr,"gptj"),yKr.forEach(t),ZEo=r(Lye," \u2014 "),hD=n(Lye,"A",{href:!0});var wKr=s(hD);e5o=r(wKr,"GPTJForSequenceClassification"),wKr.forEach(t),o5o=r(Lye," (GPT-J model)"),Lye.forEach(t),r5o=i(L),M4=n(L,"LI",{});var Bye=s(M4);Sae=n(Bye,"STRONG",{});var AKr=s(Sae);t5o=r(AKr,"ibert"),AKr.forEach(t),a5o=r(Bye," \u2014 "),pD=n(Bye,"A",{href:!0});var LKr=s(pD);n5o=r(LKr,"IBertForSequenceClassification"),LKr.forEach(t),s5o=r(Bye," (I-BERT model)"),Bye.forEach(t),l5o=i(L),E4=n(L,"LI",{});var xye=s(E4);Pae=n(xye,"STRONG",{});var BKr=s(Pae);i5o=r(BKr,"layoutlm"),BKr.forEach(t),d5o=r(xye," \u2014 "),_D=n(xye,"A",{href:!0});var xKr=s(_D);c5o=r(xKr,"LayoutLMForSequenceClassification"),xKr.forEach(t),f5o=r(xye," (LayoutLM model)"),xye.forEach(t),m5o=i(L),y4=n(L,"LI",{});var kye=s(y4);$ae=n(kye,"STRONG",{});var kKr=s($ae);g5o=r(kKr,"layoutlmv2"),kKr.forEach(t),h5o=r(kye," \u2014 "),uD=n(kye,"A",{href:!0});var RKr=s(uD);p5o=r(RKr,"LayoutLMv2ForSequenceClassification"),RKr.forEach(t),_5o=r(kye," (LayoutLMv2 model)"),kye.forEach(t),u5o=i(L),w4=n(L,"LI",{});var Rye=s(w4);Iae=n(Rye,"STRONG",{});var SKr=s(Iae);b5o=r(SKr,"led"),SKr.forEach(t),v5o=r(Rye," \u2014 "),bD=n(Rye,"A",{href:!0});var PKr=s(bD);T5o=r(PKr,"LEDForSequenceClassification"),PKr.forEach(t),F5o=r(Rye," (LED model)"),Rye.forEach(t),C5o=i(L),A4=n(L,"LI",{});var Sye=s(A4);Dae=n(Sye,"STRONG",{});var $Kr=s(Dae);M5o=r($Kr,"longformer"),$Kr.forEach(t),E5o=r(Sye," \u2014 "),vD=n(Sye,"A",{href:!0});var IKr=s(vD);y5o=r(IKr,"LongformerForSequenceClassification"),IKr.forEach(t),w5o=r(Sye," (Longformer model)"),Sye.forEach(t),A5o=i(L),L4=n(L,"LI",{});var Pye=s(L4);Nae=n(Pye,"STRONG",{});var DKr=s(Nae);L5o=r(DKr,"mbart"),DKr.forEach(t),B5o=r(Pye," \u2014 "),TD=n(Pye,"A",{href:!0});var NKr=s(TD);x5o=r(NKr,"MBartForSequenceClassification"),NKr.forEach(t),k5o=r(Pye," (mBART model)"),Pye.forEach(t),R5o=i(L),B4=n(L,"LI",{});var $ye=s(B4);jae=n($ye,"STRONG",{});var jKr=s(jae);S5o=r(jKr,"megatron-bert"),jKr.forEach(t),P5o=r($ye," \u2014 "),FD=n($ye,"A",{href:!0});var qKr=s(FD);$5o=r(qKr,"MegatronBertForSequenceClassification"),qKr.forEach(t),I5o=r($ye," (MegatronBert model)"),$ye.forEach(t),D5o=i(L),x4=n(L,"LI",{});var Iye=s(x4);qae=n(Iye,"STRONG",{});var GKr=s(qae);N5o=r(GKr,"mobilebert"),GKr.forEach(t),j5o=r(Iye," \u2014 "),CD=n(Iye,"A",{href:!0});var OKr=s(CD);q5o=r(OKr,"MobileBertForSequenceClassification"),OKr.forEach(t),G5o=r(Iye," (MobileBERT model)"),Iye.forEach(t),O5o=i(L),k4=n(L,"LI",{});var Dye=s(k4);Gae=n(Dye,"STRONG",{});var XKr=s(Gae);X5o=r(XKr,"mpnet"),XKr.forEach(t),V5o=r(Dye," \u2014 "),MD=n(Dye,"A",{href:!0});var VKr=s(MD);z5o=r(VKr,"MPNetForSequenceClassification"),VKr.forEach(t),W5o=r(Dye," (MPNet model)"),Dye.forEach(t),Q5o=i(L),R4=n(L,"LI",{});var Nye=s(R4);Oae=n(Nye,"STRONG",{});var zKr=s(Oae);H5o=r(zKr,"nystromformer"),zKr.forEach(t),U5o=r(Nye," \u2014 "),ED=n(Nye,"A",{href:!0});var WKr=s(ED);J5o=r(WKr,"NystromformerForSequenceClassification"),WKr.forEach(t),Y5o=r(Nye," (Nystromformer model)"),Nye.forEach(t),K5o=i(L),S4=n(L,"LI",{});var jye=s(S4);Xae=n(jye,"STRONG",{});var QKr=s(Xae);Z5o=r(QKr,"openai-gpt"),QKr.forEach(t),eyo=r(jye," \u2014 "),yD=n(jye,"A",{href:!0});var HKr=s(yD);oyo=r(HKr,"OpenAIGPTForSequenceClassification"),HKr.forEach(t),ryo=r(jye," (OpenAI GPT model)"),jye.forEach(t),tyo=i(L),P4=n(L,"LI",{});var qye=s(P4);Vae=n(qye,"STRONG",{});var UKr=s(Vae);ayo=r(UKr,"perceiver"),UKr.forEach(t),nyo=r(qye," \u2014 "),wD=n(qye,"A",{href:!0});var JKr=s(wD);syo=r(JKr,"PerceiverForSequenceClassification"),JKr.forEach(t),lyo=r(qye," (Perceiver model)"),qye.forEach(t),iyo=i(L),$4=n(L,"LI",{});var Gye=s($4);zae=n(Gye,"STRONG",{});var YKr=s(zae);dyo=r(YKr,"plbart"),YKr.forEach(t),cyo=r(Gye," \u2014 "),AD=n(Gye,"A",{href:!0});var KKr=s(AD);fyo=r(KKr,"PLBartForSequenceClassification"),KKr.forEach(t),myo=r(Gye," (PLBart model)"),Gye.forEach(t),gyo=i(L),I4=n(L,"LI",{});var Oye=s(I4);Wae=n(Oye,"STRONG",{});var ZKr=s(Wae);hyo=r(ZKr,"qdqbert"),ZKr.forEach(t),pyo=r(Oye," \u2014 "),LD=n(Oye,"A",{href:!0});var eZr=s(LD);_yo=r(eZr,"QDQBertForSequenceClassification"),eZr.forEach(t),uyo=r(Oye," (QDQBert model)"),Oye.forEach(t),byo=i(L),D4=n(L,"LI",{});var Xye=s(D4);Qae=n(Xye,"STRONG",{});var oZr=s(Qae);vyo=r(oZr,"reformer"),oZr.forEach(t),Tyo=r(Xye," \u2014 "),BD=n(Xye,"A",{href:!0});var rZr=s(BD);Fyo=r(rZr,"ReformerForSequenceClassification"),rZr.forEach(t),Cyo=r(Xye," (Reformer model)"),Xye.forEach(t),Myo=i(L),N4=n(L,"LI",{});var Vye=s(N4);Hae=n(Vye,"STRONG",{});var tZr=s(Hae);Eyo=r(tZr,"rembert"),tZr.forEach(t),yyo=r(Vye," \u2014 "),xD=n(Vye,"A",{href:!0});var aZr=s(xD);wyo=r(aZr,"RemBertForSequenceClassification"),aZr.forEach(t),Ayo=r(Vye," (RemBERT model)"),Vye.forEach(t),Lyo=i(L),j4=n(L,"LI",{});var zye=s(j4);Uae=n(zye,"STRONG",{});var nZr=s(Uae);Byo=r(nZr,"roberta"),nZr.forEach(t),xyo=r(zye," \u2014 "),kD=n(zye,"A",{href:!0});var sZr=s(kD);kyo=r(sZr,"RobertaForSequenceClassification"),sZr.forEach(t),Ryo=r(zye," (RoBERTa model)"),zye.forEach(t),Syo=i(L),q4=n(L,"LI",{});var Wye=s(q4);Jae=n(Wye,"STRONG",{});var lZr=s(Jae);Pyo=r(lZr,"roformer"),lZr.forEach(t),$yo=r(Wye," \u2014 "),RD=n(Wye,"A",{href:!0});var iZr=s(RD);Iyo=r(iZr,"RoFormerForSequenceClassification"),iZr.forEach(t),Dyo=r(Wye," (RoFormer model)"),Wye.forEach(t),Nyo=i(L),G4=n(L,"LI",{});var Qye=s(G4);Yae=n(Qye,"STRONG",{});var dZr=s(Yae);jyo=r(dZr,"squeezebert"),dZr.forEach(t),qyo=r(Qye," \u2014 "),SD=n(Qye,"A",{href:!0});var cZr=s(SD);Gyo=r(cZr,"SqueezeBertForSequenceClassification"),cZr.forEach(t),Oyo=r(Qye," (SqueezeBERT model)"),Qye.forEach(t),Xyo=i(L),O4=n(L,"LI",{});var Hye=s(O4);Kae=n(Hye,"STRONG",{});var fZr=s(Kae);Vyo=r(fZr,"tapas"),fZr.forEach(t),zyo=r(Hye," \u2014 "),PD=n(Hye,"A",{href:!0});var mZr=s(PD);Wyo=r(mZr,"TapasForSequenceClassification"),mZr.forEach(t),Qyo=r(Hye," (TAPAS model)"),Hye.forEach(t),Hyo=i(L),X4=n(L,"LI",{});var Uye=s(X4);Zae=n(Uye,"STRONG",{});var gZr=s(Zae);Uyo=r(gZr,"transfo-xl"),gZr.forEach(t),Jyo=r(Uye," \u2014 "),$D=n(Uye,"A",{href:!0});var hZr=s($D);Yyo=r(hZr,"TransfoXLForSequenceClassification"),hZr.forEach(t),Kyo=r(Uye," (Transformer-XL model)"),Uye.forEach(t),Zyo=i(L),V4=n(L,"LI",{});var Jye=s(V4);ene=n(Jye,"STRONG",{});var pZr=s(ene);ewo=r(pZr,"xlm"),pZr.forEach(t),owo=r(Jye," \u2014 "),ID=n(Jye,"A",{href:!0});var _Zr=s(ID);rwo=r(_Zr,"XLMForSequenceClassification"),_Zr.forEach(t),two=r(Jye," (XLM model)"),Jye.forEach(t),awo=i(L),z4=n(L,"LI",{});var Yye=s(z4);one=n(Yye,"STRONG",{});var uZr=s(one);nwo=r(uZr,"xlm-roberta"),uZr.forEach(t),swo=r(Yye," \u2014 "),DD=n(Yye,"A",{href:!0});var bZr=s(DD);lwo=r(bZr,"XLMRobertaForSequenceClassification"),bZr.forEach(t),iwo=r(Yye," (XLM-RoBERTa model)"),Yye.forEach(t),dwo=i(L),W4=n(L,"LI",{});var Kye=s(W4);rne=n(Kye,"STRONG",{});var vZr=s(rne);cwo=r(vZr,"xlm-roberta-xl"),vZr.forEach(t),fwo=r(Kye," \u2014 "),ND=n(Kye,"A",{href:!0});var TZr=s(ND);mwo=r(TZr,"XLMRobertaXLForSequenceClassification"),TZr.forEach(t),gwo=r(Kye," (XLM-RoBERTa-XL model)"),Kye.forEach(t),hwo=i(L),Q4=n(L,"LI",{});var Zye=s(Q4);tne=n(Zye,"STRONG",{});var FZr=s(tne);pwo=r(FZr,"xlnet"),FZr.forEach(t),_wo=r(Zye," \u2014 "),jD=n(Zye,"A",{href:!0});var CZr=s(jD);uwo=r(CZr,"XLNetForSequenceClassification"),CZr.forEach(t),bwo=r(Zye," (XLNet model)"),Zye.forEach(t),vwo=i(L),H4=n(L,"LI",{});var ewe=s(H4);ane=n(ewe,"STRONG",{});var MZr=s(ane);Two=r(MZr,"yoso"),MZr.forEach(t),Fwo=r(ewe," \u2014 "),qD=n(ewe,"A",{href:!0});var EZr=s(qD);Cwo=r(EZr,"YosoForSequenceClassification"),EZr.forEach(t),Mwo=r(ewe," (YOSO model)"),ewe.forEach(t),L.forEach(t),Ewo=i(zt),U4=n(zt,"P",{});var owe=s(U4);ywo=r(owe,"The model is set in evaluation mode by default using "),nne=n(owe,"CODE",{});var yZr=s(nne);wwo=r(yZr,"model.eval()"),yZr.forEach(t),Awo=r(owe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sne=n(owe,"CODE",{});var wZr=s(sne);Lwo=r(wZr,"model.train()"),wZr.forEach(t),owe.forEach(t),Bwo=i(zt),lne=n(zt,"P",{});var AZr=s(lne);xwo=r(AZr,"Examples:"),AZr.forEach(t),kwo=i(zt),m($5.$$.fragment,zt),zt.forEach(t),rl.forEach(t),aRe=i(c),hd=n(c,"H2",{class:!0});var gPe=s(hd);J4=n(gPe,"A",{id:!0,class:!0,href:!0});var LZr=s(J4);ine=n(LZr,"SPAN",{});var BZr=s(ine);m(I5.$$.fragment,BZr),BZr.forEach(t),LZr.forEach(t),Rwo=i(gPe),dne=n(gPe,"SPAN",{});var xZr=s(dne);Swo=r(xZr,"AutoModelForMultipleChoice"),xZr.forEach(t),gPe.forEach(t),nRe=i(c),rr=n(c,"DIV",{class:!0});var al=s(rr);m(D5.$$.fragment,al),Pwo=i(al),pd=n(al,"P",{});var MW=s(pd);$wo=r(MW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),cne=n(MW,"CODE",{});var kZr=s(cne);Iwo=r(kZr,"from_pretrained()"),kZr.forEach(t),Dwo=r(MW,"class method or the "),fne=n(MW,"CODE",{});var RZr=s(fne);Nwo=r(RZr,"from_config()"),RZr.forEach(t),jwo=r(MW,`class
method.`),MW.forEach(t),qwo=i(al),N5=n(al,"P",{});var hPe=s(N5);Gwo=r(hPe,"This class cannot be instantiated directly using "),mne=n(hPe,"CODE",{});var SZr=s(mne);Owo=r(SZr,"__init__()"),SZr.forEach(t),Xwo=r(hPe," (throws an error)."),hPe.forEach(t),Vwo=i(al),Jr=n(al,"DIV",{class:!0});var nl=s(Jr);m(j5.$$.fragment,nl),zwo=i(nl),gne=n(nl,"P",{});var PZr=s(gne);Wwo=r(PZr,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),PZr.forEach(t),Qwo=i(nl),_d=n(nl,"P",{});var EW=s(_d);Hwo=r(EW,`Note:
Loading a model from its configuration file does `),hne=n(EW,"STRONG",{});var $Zr=s(hne);Uwo=r($Zr,"not"),$Zr.forEach(t),Jwo=r(EW,` load the model weights. It only affects the
model\u2019s configuration. Use `),pne=n(EW,"CODE",{});var IZr=s(pne);Ywo=r(IZr,"from_pretrained()"),IZr.forEach(t),Kwo=r(EW,"to load the model weights."),EW.forEach(t),Zwo=i(nl),_ne=n(nl,"P",{});var DZr=s(_ne);eAo=r(DZr,"Examples:"),DZr.forEach(t),oAo=i(nl),m(q5.$$.fragment,nl),nl.forEach(t),rAo=i(al),Xe=n(al,"DIV",{class:!0});var Wt=s(Xe);m(G5.$$.fragment,Wt),tAo=i(Wt),une=n(Wt,"P",{});var NZr=s(une);aAo=r(NZr,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),NZr.forEach(t),nAo=i(Wt),Ja=n(Wt,"P",{});var EM=s(Ja);sAo=r(EM,"The model class to instantiate is selected based on the "),bne=n(EM,"CODE",{});var jZr=s(bne);lAo=r(jZr,"model_type"),jZr.forEach(t),iAo=r(EM,` property of the config object (either
passed as an argument or loaded from `),vne=n(EM,"CODE",{});var qZr=s(vne);dAo=r(qZr,"pretrained_model_name_or_path"),qZr.forEach(t),cAo=r(EM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tne=n(EM,"CODE",{});var GZr=s(Tne);fAo=r(GZr,"pretrained_model_name_or_path"),GZr.forEach(t),mAo=r(EM,":"),EM.forEach(t),gAo=i(Wt),G=n(Wt,"UL",{});var O=s(G);Y4=n(O,"LI",{});var rwe=s(Y4);Fne=n(rwe,"STRONG",{});var OZr=s(Fne);hAo=r(OZr,"albert"),OZr.forEach(t),pAo=r(rwe," \u2014 "),GD=n(rwe,"A",{href:!0});var XZr=s(GD);_Ao=r(XZr,"AlbertForMultipleChoice"),XZr.forEach(t),uAo=r(rwe," (ALBERT model)"),rwe.forEach(t),bAo=i(O),K4=n(O,"LI",{});var twe=s(K4);Cne=n(twe,"STRONG",{});var VZr=s(Cne);vAo=r(VZr,"bert"),VZr.forEach(t),TAo=r(twe," \u2014 "),OD=n(twe,"A",{href:!0});var zZr=s(OD);FAo=r(zZr,"BertForMultipleChoice"),zZr.forEach(t),CAo=r(twe," (BERT model)"),twe.forEach(t),MAo=i(O),Z4=n(O,"LI",{});var awe=s(Z4);Mne=n(awe,"STRONG",{});var WZr=s(Mne);EAo=r(WZr,"big_bird"),WZr.forEach(t),yAo=r(awe," \u2014 "),XD=n(awe,"A",{href:!0});var QZr=s(XD);wAo=r(QZr,"BigBirdForMultipleChoice"),QZr.forEach(t),AAo=r(awe," (BigBird model)"),awe.forEach(t),LAo=i(O),eb=n(O,"LI",{});var nwe=s(eb);Ene=n(nwe,"STRONG",{});var HZr=s(Ene);BAo=r(HZr,"camembert"),HZr.forEach(t),xAo=r(nwe," \u2014 "),VD=n(nwe,"A",{href:!0});var UZr=s(VD);kAo=r(UZr,"CamembertForMultipleChoice"),UZr.forEach(t),RAo=r(nwe," (CamemBERT model)"),nwe.forEach(t),SAo=i(O),ob=n(O,"LI",{});var swe=s(ob);yne=n(swe,"STRONG",{});var JZr=s(yne);PAo=r(JZr,"canine"),JZr.forEach(t),$Ao=r(swe," \u2014 "),zD=n(swe,"A",{href:!0});var YZr=s(zD);IAo=r(YZr,"CanineForMultipleChoice"),YZr.forEach(t),DAo=r(swe," (Canine model)"),swe.forEach(t),NAo=i(O),rb=n(O,"LI",{});var lwe=s(rb);wne=n(lwe,"STRONG",{});var KZr=s(wne);jAo=r(KZr,"convbert"),KZr.forEach(t),qAo=r(lwe," \u2014 "),WD=n(lwe,"A",{href:!0});var ZZr=s(WD);GAo=r(ZZr,"ConvBertForMultipleChoice"),ZZr.forEach(t),OAo=r(lwe," (ConvBERT model)"),lwe.forEach(t),XAo=i(O),tb=n(O,"LI",{});var iwe=s(tb);Ane=n(iwe,"STRONG",{});var eet=s(Ane);VAo=r(eet,"data2vec-text"),eet.forEach(t),zAo=r(iwe," \u2014 "),QD=n(iwe,"A",{href:!0});var oet=s(QD);WAo=r(oet,"Data2VecTextForMultipleChoice"),oet.forEach(t),QAo=r(iwe," (Data2VecText model)"),iwe.forEach(t),HAo=i(O),ab=n(O,"LI",{});var dwe=s(ab);Lne=n(dwe,"STRONG",{});var ret=s(Lne);UAo=r(ret,"distilbert"),ret.forEach(t),JAo=r(dwe," \u2014 "),HD=n(dwe,"A",{href:!0});var tet=s(HD);YAo=r(tet,"DistilBertForMultipleChoice"),tet.forEach(t),KAo=r(dwe," (DistilBERT model)"),dwe.forEach(t),ZAo=i(O),nb=n(O,"LI",{});var cwe=s(nb);Bne=n(cwe,"STRONG",{});var aet=s(Bne);e0o=r(aet,"electra"),aet.forEach(t),o0o=r(cwe," \u2014 "),UD=n(cwe,"A",{href:!0});var net=s(UD);r0o=r(net,"ElectraForMultipleChoice"),net.forEach(t),t0o=r(cwe," (ELECTRA model)"),cwe.forEach(t),a0o=i(O),sb=n(O,"LI",{});var fwe=s(sb);xne=n(fwe,"STRONG",{});var set=s(xne);n0o=r(set,"flaubert"),set.forEach(t),s0o=r(fwe," \u2014 "),JD=n(fwe,"A",{href:!0});var iet=s(JD);l0o=r(iet,"FlaubertForMultipleChoice"),iet.forEach(t),i0o=r(fwe," (FlauBERT model)"),fwe.forEach(t),d0o=i(O),lb=n(O,"LI",{});var mwe=s(lb);kne=n(mwe,"STRONG",{});var det=s(kne);c0o=r(det,"fnet"),det.forEach(t),f0o=r(mwe," \u2014 "),YD=n(mwe,"A",{href:!0});var cet=s(YD);m0o=r(cet,"FNetForMultipleChoice"),cet.forEach(t),g0o=r(mwe," (FNet model)"),mwe.forEach(t),h0o=i(O),ib=n(O,"LI",{});var gwe=s(ib);Rne=n(gwe,"STRONG",{});var fet=s(Rne);p0o=r(fet,"funnel"),fet.forEach(t),_0o=r(gwe," \u2014 "),KD=n(gwe,"A",{href:!0});var met=s(KD);u0o=r(met,"FunnelForMultipleChoice"),met.forEach(t),b0o=r(gwe," (Funnel Transformer model)"),gwe.forEach(t),v0o=i(O),db=n(O,"LI",{});var hwe=s(db);Sne=n(hwe,"STRONG",{});var get=s(Sne);T0o=r(get,"ibert"),get.forEach(t),F0o=r(hwe," \u2014 "),ZD=n(hwe,"A",{href:!0});var het=s(ZD);C0o=r(het,"IBertForMultipleChoice"),het.forEach(t),M0o=r(hwe," (I-BERT model)"),hwe.forEach(t),E0o=i(O),cb=n(O,"LI",{});var pwe=s(cb);Pne=n(pwe,"STRONG",{});var pet=s(Pne);y0o=r(pet,"longformer"),pet.forEach(t),w0o=r(pwe," \u2014 "),eN=n(pwe,"A",{href:!0});var _et=s(eN);A0o=r(_et,"LongformerForMultipleChoice"),_et.forEach(t),L0o=r(pwe," (Longformer model)"),pwe.forEach(t),B0o=i(O),fb=n(O,"LI",{});var _we=s(fb);$ne=n(_we,"STRONG",{});var uet=s($ne);x0o=r(uet,"megatron-bert"),uet.forEach(t),k0o=r(_we," \u2014 "),oN=n(_we,"A",{href:!0});var bet=s(oN);R0o=r(bet,"MegatronBertForMultipleChoice"),bet.forEach(t),S0o=r(_we," (MegatronBert model)"),_we.forEach(t),P0o=i(O),mb=n(O,"LI",{});var uwe=s(mb);Ine=n(uwe,"STRONG",{});var vet=s(Ine);$0o=r(vet,"mobilebert"),vet.forEach(t),I0o=r(uwe," \u2014 "),rN=n(uwe,"A",{href:!0});var Tet=s(rN);D0o=r(Tet,"MobileBertForMultipleChoice"),Tet.forEach(t),N0o=r(uwe," (MobileBERT model)"),uwe.forEach(t),j0o=i(O),gb=n(O,"LI",{});var bwe=s(gb);Dne=n(bwe,"STRONG",{});var Fet=s(Dne);q0o=r(Fet,"mpnet"),Fet.forEach(t),G0o=r(bwe," \u2014 "),tN=n(bwe,"A",{href:!0});var Cet=s(tN);O0o=r(Cet,"MPNetForMultipleChoice"),Cet.forEach(t),X0o=r(bwe," (MPNet model)"),bwe.forEach(t),V0o=i(O),hb=n(O,"LI",{});var vwe=s(hb);Nne=n(vwe,"STRONG",{});var Met=s(Nne);z0o=r(Met,"nystromformer"),Met.forEach(t),W0o=r(vwe," \u2014 "),aN=n(vwe,"A",{href:!0});var Eet=s(aN);Q0o=r(Eet,"NystromformerForMultipleChoice"),Eet.forEach(t),H0o=r(vwe," (Nystromformer model)"),vwe.forEach(t),U0o=i(O),pb=n(O,"LI",{});var Twe=s(pb);jne=n(Twe,"STRONG",{});var yet=s(jne);J0o=r(yet,"qdqbert"),yet.forEach(t),Y0o=r(Twe," \u2014 "),nN=n(Twe,"A",{href:!0});var wet=s(nN);K0o=r(wet,"QDQBertForMultipleChoice"),wet.forEach(t),Z0o=r(Twe," (QDQBert model)"),Twe.forEach(t),eLo=i(O),_b=n(O,"LI",{});var Fwe=s(_b);qne=n(Fwe,"STRONG",{});var Aet=s(qne);oLo=r(Aet,"rembert"),Aet.forEach(t),rLo=r(Fwe," \u2014 "),sN=n(Fwe,"A",{href:!0});var Let=s(sN);tLo=r(Let,"RemBertForMultipleChoice"),Let.forEach(t),aLo=r(Fwe," (RemBERT model)"),Fwe.forEach(t),nLo=i(O),ub=n(O,"LI",{});var Cwe=s(ub);Gne=n(Cwe,"STRONG",{});var Bet=s(Gne);sLo=r(Bet,"roberta"),Bet.forEach(t),lLo=r(Cwe," \u2014 "),lN=n(Cwe,"A",{href:!0});var xet=s(lN);iLo=r(xet,"RobertaForMultipleChoice"),xet.forEach(t),dLo=r(Cwe," (RoBERTa model)"),Cwe.forEach(t),cLo=i(O),bb=n(O,"LI",{});var Mwe=s(bb);One=n(Mwe,"STRONG",{});var ket=s(One);fLo=r(ket,"roformer"),ket.forEach(t),mLo=r(Mwe," \u2014 "),iN=n(Mwe,"A",{href:!0});var Ret=s(iN);gLo=r(Ret,"RoFormerForMultipleChoice"),Ret.forEach(t),hLo=r(Mwe," (RoFormer model)"),Mwe.forEach(t),pLo=i(O),vb=n(O,"LI",{});var Ewe=s(vb);Xne=n(Ewe,"STRONG",{});var Set=s(Xne);_Lo=r(Set,"squeezebert"),Set.forEach(t),uLo=r(Ewe," \u2014 "),dN=n(Ewe,"A",{href:!0});var Pet=s(dN);bLo=r(Pet,"SqueezeBertForMultipleChoice"),Pet.forEach(t),vLo=r(Ewe," (SqueezeBERT model)"),Ewe.forEach(t),TLo=i(O),Tb=n(O,"LI",{});var ywe=s(Tb);Vne=n(ywe,"STRONG",{});var $et=s(Vne);FLo=r($et,"xlm"),$et.forEach(t),CLo=r(ywe," \u2014 "),cN=n(ywe,"A",{href:!0});var Iet=s(cN);MLo=r(Iet,"XLMForMultipleChoice"),Iet.forEach(t),ELo=r(ywe," (XLM model)"),ywe.forEach(t),yLo=i(O),Fb=n(O,"LI",{});var wwe=s(Fb);zne=n(wwe,"STRONG",{});var Det=s(zne);wLo=r(Det,"xlm-roberta"),Det.forEach(t),ALo=r(wwe," \u2014 "),fN=n(wwe,"A",{href:!0});var Net=s(fN);LLo=r(Net,"XLMRobertaForMultipleChoice"),Net.forEach(t),BLo=r(wwe," (XLM-RoBERTa model)"),wwe.forEach(t),xLo=i(O),Cb=n(O,"LI",{});var Awe=s(Cb);Wne=n(Awe,"STRONG",{});var jet=s(Wne);kLo=r(jet,"xlm-roberta-xl"),jet.forEach(t),RLo=r(Awe," \u2014 "),mN=n(Awe,"A",{href:!0});var qet=s(mN);SLo=r(qet,"XLMRobertaXLForMultipleChoice"),qet.forEach(t),PLo=r(Awe," (XLM-RoBERTa-XL model)"),Awe.forEach(t),$Lo=i(O),Mb=n(O,"LI",{});var Lwe=s(Mb);Qne=n(Lwe,"STRONG",{});var Get=s(Qne);ILo=r(Get,"xlnet"),Get.forEach(t),DLo=r(Lwe," \u2014 "),gN=n(Lwe,"A",{href:!0});var Oet=s(gN);NLo=r(Oet,"XLNetForMultipleChoice"),Oet.forEach(t),jLo=r(Lwe," (XLNet model)"),Lwe.forEach(t),qLo=i(O),Eb=n(O,"LI",{});var Bwe=s(Eb);Hne=n(Bwe,"STRONG",{});var Xet=s(Hne);GLo=r(Xet,"yoso"),Xet.forEach(t),OLo=r(Bwe," \u2014 "),hN=n(Bwe,"A",{href:!0});var Vet=s(hN);XLo=r(Vet,"YosoForMultipleChoice"),Vet.forEach(t),VLo=r(Bwe," (YOSO model)"),Bwe.forEach(t),O.forEach(t),zLo=i(Wt),yb=n(Wt,"P",{});var xwe=s(yb);WLo=r(xwe,"The model is set in evaluation mode by default using "),Une=n(xwe,"CODE",{});var zet=s(Une);QLo=r(zet,"model.eval()"),zet.forEach(t),HLo=r(xwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jne=n(xwe,"CODE",{});var Wet=s(Jne);ULo=r(Wet,"model.train()"),Wet.forEach(t),xwe.forEach(t),JLo=i(Wt),Yne=n(Wt,"P",{});var Qet=s(Yne);YLo=r(Qet,"Examples:"),Qet.forEach(t),KLo=i(Wt),m(O5.$$.fragment,Wt),Wt.forEach(t),al.forEach(t),sRe=i(c),ud=n(c,"H2",{class:!0});var pPe=s(ud);wb=n(pPe,"A",{id:!0,class:!0,href:!0});var Het=s(wb);Kne=n(Het,"SPAN",{});var Uet=s(Kne);m(X5.$$.fragment,Uet),Uet.forEach(t),Het.forEach(t),ZLo=i(pPe),Zne=n(pPe,"SPAN",{});var Jet=s(Zne);e8o=r(Jet,"AutoModelForNextSentencePrediction"),Jet.forEach(t),pPe.forEach(t),lRe=i(c),tr=n(c,"DIV",{class:!0});var sl=s(tr);m(V5.$$.fragment,sl),o8o=i(sl),bd=n(sl,"P",{});var yW=s(bd);r8o=r(yW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),ese=n(yW,"CODE",{});var Yet=s(ese);t8o=r(Yet,"from_pretrained()"),Yet.forEach(t),a8o=r(yW,"class method or the "),ose=n(yW,"CODE",{});var Ket=s(ose);n8o=r(Ket,"from_config()"),Ket.forEach(t),s8o=r(yW,`class
method.`),yW.forEach(t),l8o=i(sl),z5=n(sl,"P",{});var _Pe=s(z5);i8o=r(_Pe,"This class cannot be instantiated directly using "),rse=n(_Pe,"CODE",{});var Zet=s(rse);d8o=r(Zet,"__init__()"),Zet.forEach(t),c8o=r(_Pe," (throws an error)."),_Pe.forEach(t),f8o=i(sl),Yr=n(sl,"DIV",{class:!0});var ll=s(Yr);m(W5.$$.fragment,ll),m8o=i(ll),tse=n(ll,"P",{});var eot=s(tse);g8o=r(eot,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),eot.forEach(t),h8o=i(ll),vd=n(ll,"P",{});var wW=s(vd);p8o=r(wW,`Note:
Loading a model from its configuration file does `),ase=n(wW,"STRONG",{});var oot=s(ase);_8o=r(oot,"not"),oot.forEach(t),u8o=r(wW,` load the model weights. It only affects the
model\u2019s configuration. Use `),nse=n(wW,"CODE",{});var rot=s(nse);b8o=r(rot,"from_pretrained()"),rot.forEach(t),v8o=r(wW,"to load the model weights."),wW.forEach(t),T8o=i(ll),sse=n(ll,"P",{});var tot=s(sse);F8o=r(tot,"Examples:"),tot.forEach(t),C8o=i(ll),m(Q5.$$.fragment,ll),ll.forEach(t),M8o=i(sl),Ve=n(sl,"DIV",{class:!0});var Qt=s(Ve);m(H5.$$.fragment,Qt),E8o=i(Qt),lse=n(Qt,"P",{});var aot=s(lse);y8o=r(aot,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),aot.forEach(t),w8o=i(Qt),Ya=n(Qt,"P",{});var yM=s(Ya);A8o=r(yM,"The model class to instantiate is selected based on the "),ise=n(yM,"CODE",{});var not=s(ise);L8o=r(not,"model_type"),not.forEach(t),B8o=r(yM,` property of the config object (either
passed as an argument or loaded from `),dse=n(yM,"CODE",{});var sot=s(dse);x8o=r(sot,"pretrained_model_name_or_path"),sot.forEach(t),k8o=r(yM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cse=n(yM,"CODE",{});var lot=s(cse);R8o=r(lot,"pretrained_model_name_or_path"),lot.forEach(t),S8o=r(yM,":"),yM.forEach(t),P8o=i(Qt),da=n(Qt,"UL",{});var il=s(da);Ab=n(il,"LI",{});var kwe=s(Ab);fse=n(kwe,"STRONG",{});var iot=s(fse);$8o=r(iot,"bert"),iot.forEach(t),I8o=r(kwe," \u2014 "),pN=n(kwe,"A",{href:!0});var dot=s(pN);D8o=r(dot,"BertForNextSentencePrediction"),dot.forEach(t),N8o=r(kwe," (BERT model)"),kwe.forEach(t),j8o=i(il),Lb=n(il,"LI",{});var Rwe=s(Lb);mse=n(Rwe,"STRONG",{});var cot=s(mse);q8o=r(cot,"fnet"),cot.forEach(t),G8o=r(Rwe," \u2014 "),_N=n(Rwe,"A",{href:!0});var fot=s(_N);O8o=r(fot,"FNetForNextSentencePrediction"),fot.forEach(t),X8o=r(Rwe," (FNet model)"),Rwe.forEach(t),V8o=i(il),Bb=n(il,"LI",{});var Swe=s(Bb);gse=n(Swe,"STRONG",{});var mot=s(gse);z8o=r(mot,"megatron-bert"),mot.forEach(t),W8o=r(Swe," \u2014 "),uN=n(Swe,"A",{href:!0});var got=s(uN);Q8o=r(got,"MegatronBertForNextSentencePrediction"),got.forEach(t),H8o=r(Swe," (MegatronBert model)"),Swe.forEach(t),U8o=i(il),xb=n(il,"LI",{});var Pwe=s(xb);hse=n(Pwe,"STRONG",{});var hot=s(hse);J8o=r(hot,"mobilebert"),hot.forEach(t),Y8o=r(Pwe," \u2014 "),bN=n(Pwe,"A",{href:!0});var pot=s(bN);K8o=r(pot,"MobileBertForNextSentencePrediction"),pot.forEach(t),Z8o=r(Pwe," (MobileBERT model)"),Pwe.forEach(t),e9o=i(il),kb=n(il,"LI",{});var $we=s(kb);pse=n($we,"STRONG",{});var _ot=s(pse);o9o=r(_ot,"qdqbert"),_ot.forEach(t),r9o=r($we," \u2014 "),vN=n($we,"A",{href:!0});var uot=s(vN);t9o=r(uot,"QDQBertForNextSentencePrediction"),uot.forEach(t),a9o=r($we," (QDQBert model)"),$we.forEach(t),il.forEach(t),n9o=i(Qt),Rb=n(Qt,"P",{});var Iwe=s(Rb);s9o=r(Iwe,"The model is set in evaluation mode by default using "),_se=n(Iwe,"CODE",{});var bot=s(_se);l9o=r(bot,"model.eval()"),bot.forEach(t),i9o=r(Iwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),use=n(Iwe,"CODE",{});var vot=s(use);d9o=r(vot,"model.train()"),vot.forEach(t),Iwe.forEach(t),c9o=i(Qt),bse=n(Qt,"P",{});var Tot=s(bse);f9o=r(Tot,"Examples:"),Tot.forEach(t),m9o=i(Qt),m(U5.$$.fragment,Qt),Qt.forEach(t),sl.forEach(t),iRe=i(c),Td=n(c,"H2",{class:!0});var uPe=s(Td);Sb=n(uPe,"A",{id:!0,class:!0,href:!0});var Fot=s(Sb);vse=n(Fot,"SPAN",{});var Cot=s(vse);m(J5.$$.fragment,Cot),Cot.forEach(t),Fot.forEach(t),g9o=i(uPe),Tse=n(uPe,"SPAN",{});var Mot=s(Tse);h9o=r(Mot,"AutoModelForTokenClassification"),Mot.forEach(t),uPe.forEach(t),dRe=i(c),ar=n(c,"DIV",{class:!0});var dl=s(ar);m(Y5.$$.fragment,dl),p9o=i(dl),Fd=n(dl,"P",{});var AW=s(Fd);_9o=r(AW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Fse=n(AW,"CODE",{});var Eot=s(Fse);u9o=r(Eot,"from_pretrained()"),Eot.forEach(t),b9o=r(AW,"class method or the "),Cse=n(AW,"CODE",{});var yot=s(Cse);v9o=r(yot,"from_config()"),yot.forEach(t),T9o=r(AW,`class
method.`),AW.forEach(t),F9o=i(dl),K5=n(dl,"P",{});var bPe=s(K5);C9o=r(bPe,"This class cannot be instantiated directly using "),Mse=n(bPe,"CODE",{});var wot=s(Mse);M9o=r(wot,"__init__()"),wot.forEach(t),E9o=r(bPe," (throws an error)."),bPe.forEach(t),y9o=i(dl),Kr=n(dl,"DIV",{class:!0});var cl=s(Kr);m(Z5.$$.fragment,cl),w9o=i(cl),Ese=n(cl,"P",{});var Aot=s(Ese);A9o=r(Aot,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Aot.forEach(t),L9o=i(cl),Cd=n(cl,"P",{});var LW=s(Cd);B9o=r(LW,`Note:
Loading a model from its configuration file does `),yse=n(LW,"STRONG",{});var Lot=s(yse);x9o=r(Lot,"not"),Lot.forEach(t),k9o=r(LW,` load the model weights. It only affects the
model\u2019s configuration. Use `),wse=n(LW,"CODE",{});var Bot=s(wse);R9o=r(Bot,"from_pretrained()"),Bot.forEach(t),S9o=r(LW,"to load the model weights."),LW.forEach(t),P9o=i(cl),Ase=n(cl,"P",{});var xot=s(Ase);$9o=r(xot,"Examples:"),xot.forEach(t),I9o=i(cl),m(ey.$$.fragment,cl),cl.forEach(t),D9o=i(dl),ze=n(dl,"DIV",{class:!0});var Ht=s(ze);m(oy.$$.fragment,Ht),N9o=i(Ht),Lse=n(Ht,"P",{});var kot=s(Lse);j9o=r(kot,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),kot.forEach(t),q9o=i(Ht),Ka=n(Ht,"P",{});var wM=s(Ka);G9o=r(wM,"The model class to instantiate is selected based on the "),Bse=n(wM,"CODE",{});var Rot=s(Bse);O9o=r(Rot,"model_type"),Rot.forEach(t),X9o=r(wM,` property of the config object (either
passed as an argument or loaded from `),xse=n(wM,"CODE",{});var Sot=s(xse);V9o=r(Sot,"pretrained_model_name_or_path"),Sot.forEach(t),z9o=r(wM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kse=n(wM,"CODE",{});var Pot=s(kse);W9o=r(Pot,"pretrained_model_name_or_path"),Pot.forEach(t),Q9o=r(wM,":"),wM.forEach(t),H9o=i(Ht),j=n(Ht,"UL",{});var q=s(j);Pb=n(q,"LI",{});var Dwe=s(Pb);Rse=n(Dwe,"STRONG",{});var $ot=s(Rse);U9o=r($ot,"albert"),$ot.forEach(t),J9o=r(Dwe," \u2014 "),TN=n(Dwe,"A",{href:!0});var Iot=s(TN);Y9o=r(Iot,"AlbertForTokenClassification"),Iot.forEach(t),K9o=r(Dwe," (ALBERT model)"),Dwe.forEach(t),Z9o=i(q),$b=n(q,"LI",{});var Nwe=s($b);Sse=n(Nwe,"STRONG",{});var Dot=s(Sse);eBo=r(Dot,"bert"),Dot.forEach(t),oBo=r(Nwe," \u2014 "),FN=n(Nwe,"A",{href:!0});var Not=s(FN);rBo=r(Not,"BertForTokenClassification"),Not.forEach(t),tBo=r(Nwe," (BERT model)"),Nwe.forEach(t),aBo=i(q),Ib=n(q,"LI",{});var jwe=s(Ib);Pse=n(jwe,"STRONG",{});var jot=s(Pse);nBo=r(jot,"big_bird"),jot.forEach(t),sBo=r(jwe," \u2014 "),CN=n(jwe,"A",{href:!0});var qot=s(CN);lBo=r(qot,"BigBirdForTokenClassification"),qot.forEach(t),iBo=r(jwe," (BigBird model)"),jwe.forEach(t),dBo=i(q),Db=n(q,"LI",{});var qwe=s(Db);$se=n(qwe,"STRONG",{});var Got=s($se);cBo=r(Got,"camembert"),Got.forEach(t),fBo=r(qwe," \u2014 "),MN=n(qwe,"A",{href:!0});var Oot=s(MN);mBo=r(Oot,"CamembertForTokenClassification"),Oot.forEach(t),gBo=r(qwe," (CamemBERT model)"),qwe.forEach(t),hBo=i(q),Nb=n(q,"LI",{});var Gwe=s(Nb);Ise=n(Gwe,"STRONG",{});var Xot=s(Ise);pBo=r(Xot,"canine"),Xot.forEach(t),_Bo=r(Gwe," \u2014 "),EN=n(Gwe,"A",{href:!0});var Vot=s(EN);uBo=r(Vot,"CanineForTokenClassification"),Vot.forEach(t),bBo=r(Gwe," (Canine model)"),Gwe.forEach(t),vBo=i(q),jb=n(q,"LI",{});var Owe=s(jb);Dse=n(Owe,"STRONG",{});var zot=s(Dse);TBo=r(zot,"convbert"),zot.forEach(t),FBo=r(Owe," \u2014 "),yN=n(Owe,"A",{href:!0});var Wot=s(yN);CBo=r(Wot,"ConvBertForTokenClassification"),Wot.forEach(t),MBo=r(Owe," (ConvBERT model)"),Owe.forEach(t),EBo=i(q),qb=n(q,"LI",{});var Xwe=s(qb);Nse=n(Xwe,"STRONG",{});var Qot=s(Nse);yBo=r(Qot,"data2vec-text"),Qot.forEach(t),wBo=r(Xwe," \u2014 "),wN=n(Xwe,"A",{href:!0});var Hot=s(wN);ABo=r(Hot,"Data2VecTextForTokenClassification"),Hot.forEach(t),LBo=r(Xwe," (Data2VecText model)"),Xwe.forEach(t),BBo=i(q),Gb=n(q,"LI",{});var Vwe=s(Gb);jse=n(Vwe,"STRONG",{});var Uot=s(jse);xBo=r(Uot,"deberta"),Uot.forEach(t),kBo=r(Vwe," \u2014 "),AN=n(Vwe,"A",{href:!0});var Jot=s(AN);RBo=r(Jot,"DebertaForTokenClassification"),Jot.forEach(t),SBo=r(Vwe," (DeBERTa model)"),Vwe.forEach(t),PBo=i(q),Ob=n(q,"LI",{});var zwe=s(Ob);qse=n(zwe,"STRONG",{});var Yot=s(qse);$Bo=r(Yot,"deberta-v2"),Yot.forEach(t),IBo=r(zwe," \u2014 "),LN=n(zwe,"A",{href:!0});var Kot=s(LN);DBo=r(Kot,"DebertaV2ForTokenClassification"),Kot.forEach(t),NBo=r(zwe," (DeBERTa-v2 model)"),zwe.forEach(t),jBo=i(q),Xb=n(q,"LI",{});var Wwe=s(Xb);Gse=n(Wwe,"STRONG",{});var Zot=s(Gse);qBo=r(Zot,"distilbert"),Zot.forEach(t),GBo=r(Wwe," \u2014 "),BN=n(Wwe,"A",{href:!0});var ert=s(BN);OBo=r(ert,"DistilBertForTokenClassification"),ert.forEach(t),XBo=r(Wwe," (DistilBERT model)"),Wwe.forEach(t),VBo=i(q),Vb=n(q,"LI",{});var Qwe=s(Vb);Ose=n(Qwe,"STRONG",{});var ort=s(Ose);zBo=r(ort,"electra"),ort.forEach(t),WBo=r(Qwe," \u2014 "),xN=n(Qwe,"A",{href:!0});var rrt=s(xN);QBo=r(rrt,"ElectraForTokenClassification"),rrt.forEach(t),HBo=r(Qwe," (ELECTRA model)"),Qwe.forEach(t),UBo=i(q),zb=n(q,"LI",{});var Hwe=s(zb);Xse=n(Hwe,"STRONG",{});var trt=s(Xse);JBo=r(trt,"flaubert"),trt.forEach(t),YBo=r(Hwe," \u2014 "),kN=n(Hwe,"A",{href:!0});var art=s(kN);KBo=r(art,"FlaubertForTokenClassification"),art.forEach(t),ZBo=r(Hwe," (FlauBERT model)"),Hwe.forEach(t),exo=i(q),Wb=n(q,"LI",{});var Uwe=s(Wb);Vse=n(Uwe,"STRONG",{});var nrt=s(Vse);oxo=r(nrt,"fnet"),nrt.forEach(t),rxo=r(Uwe," \u2014 "),RN=n(Uwe,"A",{href:!0});var srt=s(RN);txo=r(srt,"FNetForTokenClassification"),srt.forEach(t),axo=r(Uwe," (FNet model)"),Uwe.forEach(t),nxo=i(q),Qb=n(q,"LI",{});var Jwe=s(Qb);zse=n(Jwe,"STRONG",{});var lrt=s(zse);sxo=r(lrt,"funnel"),lrt.forEach(t),lxo=r(Jwe," \u2014 "),SN=n(Jwe,"A",{href:!0});var irt=s(SN);ixo=r(irt,"FunnelForTokenClassification"),irt.forEach(t),dxo=r(Jwe," (Funnel Transformer model)"),Jwe.forEach(t),cxo=i(q),Hb=n(q,"LI",{});var Ywe=s(Hb);Wse=n(Ywe,"STRONG",{});var drt=s(Wse);fxo=r(drt,"gpt2"),drt.forEach(t),mxo=r(Ywe," \u2014 "),PN=n(Ywe,"A",{href:!0});var crt=s(PN);gxo=r(crt,"GPT2ForTokenClassification"),crt.forEach(t),hxo=r(Ywe," (OpenAI GPT-2 model)"),Ywe.forEach(t),pxo=i(q),Ub=n(q,"LI",{});var Kwe=s(Ub);Qse=n(Kwe,"STRONG",{});var frt=s(Qse);_xo=r(frt,"ibert"),frt.forEach(t),uxo=r(Kwe," \u2014 "),$N=n(Kwe,"A",{href:!0});var mrt=s($N);bxo=r(mrt,"IBertForTokenClassification"),mrt.forEach(t),vxo=r(Kwe," (I-BERT model)"),Kwe.forEach(t),Txo=i(q),Jb=n(q,"LI",{});var Zwe=s(Jb);Hse=n(Zwe,"STRONG",{});var grt=s(Hse);Fxo=r(grt,"layoutlm"),grt.forEach(t),Cxo=r(Zwe," \u2014 "),IN=n(Zwe,"A",{href:!0});var hrt=s(IN);Mxo=r(hrt,"LayoutLMForTokenClassification"),hrt.forEach(t),Exo=r(Zwe," (LayoutLM model)"),Zwe.forEach(t),yxo=i(q),Yb=n(q,"LI",{});var eAe=s(Yb);Use=n(eAe,"STRONG",{});var prt=s(Use);wxo=r(prt,"layoutlmv2"),prt.forEach(t),Axo=r(eAe," \u2014 "),DN=n(eAe,"A",{href:!0});var _rt=s(DN);Lxo=r(_rt,"LayoutLMv2ForTokenClassification"),_rt.forEach(t),Bxo=r(eAe," (LayoutLMv2 model)"),eAe.forEach(t),xxo=i(q),Kb=n(q,"LI",{});var oAe=s(Kb);Jse=n(oAe,"STRONG",{});var urt=s(Jse);kxo=r(urt,"longformer"),urt.forEach(t),Rxo=r(oAe," \u2014 "),NN=n(oAe,"A",{href:!0});var brt=s(NN);Sxo=r(brt,"LongformerForTokenClassification"),brt.forEach(t),Pxo=r(oAe," (Longformer model)"),oAe.forEach(t),$xo=i(q),Zb=n(q,"LI",{});var rAe=s(Zb);Yse=n(rAe,"STRONG",{});var vrt=s(Yse);Ixo=r(vrt,"megatron-bert"),vrt.forEach(t),Dxo=r(rAe," \u2014 "),jN=n(rAe,"A",{href:!0});var Trt=s(jN);Nxo=r(Trt,"MegatronBertForTokenClassification"),Trt.forEach(t),jxo=r(rAe," (MegatronBert model)"),rAe.forEach(t),qxo=i(q),e3=n(q,"LI",{});var tAe=s(e3);Kse=n(tAe,"STRONG",{});var Frt=s(Kse);Gxo=r(Frt,"mobilebert"),Frt.forEach(t),Oxo=r(tAe," \u2014 "),qN=n(tAe,"A",{href:!0});var Crt=s(qN);Xxo=r(Crt,"MobileBertForTokenClassification"),Crt.forEach(t),Vxo=r(tAe," (MobileBERT model)"),tAe.forEach(t),zxo=i(q),o3=n(q,"LI",{});var aAe=s(o3);Zse=n(aAe,"STRONG",{});var Mrt=s(Zse);Wxo=r(Mrt,"mpnet"),Mrt.forEach(t),Qxo=r(aAe," \u2014 "),GN=n(aAe,"A",{href:!0});var Ert=s(GN);Hxo=r(Ert,"MPNetForTokenClassification"),Ert.forEach(t),Uxo=r(aAe," (MPNet model)"),aAe.forEach(t),Jxo=i(q),r3=n(q,"LI",{});var nAe=s(r3);ele=n(nAe,"STRONG",{});var yrt=s(ele);Yxo=r(yrt,"nystromformer"),yrt.forEach(t),Kxo=r(nAe," \u2014 "),ON=n(nAe,"A",{href:!0});var wrt=s(ON);Zxo=r(wrt,"NystromformerForTokenClassification"),wrt.forEach(t),eko=r(nAe," (Nystromformer model)"),nAe.forEach(t),oko=i(q),t3=n(q,"LI",{});var sAe=s(t3);ole=n(sAe,"STRONG",{});var Art=s(ole);rko=r(Art,"qdqbert"),Art.forEach(t),tko=r(sAe," \u2014 "),XN=n(sAe,"A",{href:!0});var Lrt=s(XN);ako=r(Lrt,"QDQBertForTokenClassification"),Lrt.forEach(t),nko=r(sAe," (QDQBert model)"),sAe.forEach(t),sko=i(q),a3=n(q,"LI",{});var lAe=s(a3);rle=n(lAe,"STRONG",{});var Brt=s(rle);lko=r(Brt,"rembert"),Brt.forEach(t),iko=r(lAe," \u2014 "),VN=n(lAe,"A",{href:!0});var xrt=s(VN);dko=r(xrt,"RemBertForTokenClassification"),xrt.forEach(t),cko=r(lAe," (RemBERT model)"),lAe.forEach(t),fko=i(q),n3=n(q,"LI",{});var iAe=s(n3);tle=n(iAe,"STRONG",{});var krt=s(tle);mko=r(krt,"roberta"),krt.forEach(t),gko=r(iAe," \u2014 "),zN=n(iAe,"A",{href:!0});var Rrt=s(zN);hko=r(Rrt,"RobertaForTokenClassification"),Rrt.forEach(t),pko=r(iAe," (RoBERTa model)"),iAe.forEach(t),_ko=i(q),s3=n(q,"LI",{});var dAe=s(s3);ale=n(dAe,"STRONG",{});var Srt=s(ale);uko=r(Srt,"roformer"),Srt.forEach(t),bko=r(dAe," \u2014 "),WN=n(dAe,"A",{href:!0});var Prt=s(WN);vko=r(Prt,"RoFormerForTokenClassification"),Prt.forEach(t),Tko=r(dAe," (RoFormer model)"),dAe.forEach(t),Fko=i(q),l3=n(q,"LI",{});var cAe=s(l3);nle=n(cAe,"STRONG",{});var $rt=s(nle);Cko=r($rt,"squeezebert"),$rt.forEach(t),Mko=r(cAe," \u2014 "),QN=n(cAe,"A",{href:!0});var Irt=s(QN);Eko=r(Irt,"SqueezeBertForTokenClassification"),Irt.forEach(t),yko=r(cAe," (SqueezeBERT model)"),cAe.forEach(t),wko=i(q),i3=n(q,"LI",{});var fAe=s(i3);sle=n(fAe,"STRONG",{});var Drt=s(sle);Ako=r(Drt,"xlm"),Drt.forEach(t),Lko=r(fAe," \u2014 "),HN=n(fAe,"A",{href:!0});var Nrt=s(HN);Bko=r(Nrt,"XLMForTokenClassification"),Nrt.forEach(t),xko=r(fAe," (XLM model)"),fAe.forEach(t),kko=i(q),d3=n(q,"LI",{});var mAe=s(d3);lle=n(mAe,"STRONG",{});var jrt=s(lle);Rko=r(jrt,"xlm-roberta"),jrt.forEach(t),Sko=r(mAe," \u2014 "),UN=n(mAe,"A",{href:!0});var qrt=s(UN);Pko=r(qrt,"XLMRobertaForTokenClassification"),qrt.forEach(t),$ko=r(mAe," (XLM-RoBERTa model)"),mAe.forEach(t),Iko=i(q),c3=n(q,"LI",{});var gAe=s(c3);ile=n(gAe,"STRONG",{});var Grt=s(ile);Dko=r(Grt,"xlm-roberta-xl"),Grt.forEach(t),Nko=r(gAe," \u2014 "),JN=n(gAe,"A",{href:!0});var Ort=s(JN);jko=r(Ort,"XLMRobertaXLForTokenClassification"),Ort.forEach(t),qko=r(gAe," (XLM-RoBERTa-XL model)"),gAe.forEach(t),Gko=i(q),f3=n(q,"LI",{});var hAe=s(f3);dle=n(hAe,"STRONG",{});var Xrt=s(dle);Oko=r(Xrt,"xlnet"),Xrt.forEach(t),Xko=r(hAe," \u2014 "),YN=n(hAe,"A",{href:!0});var Vrt=s(YN);Vko=r(Vrt,"XLNetForTokenClassification"),Vrt.forEach(t),zko=r(hAe," (XLNet model)"),hAe.forEach(t),Wko=i(q),m3=n(q,"LI",{});var pAe=s(m3);cle=n(pAe,"STRONG",{});var zrt=s(cle);Qko=r(zrt,"yoso"),zrt.forEach(t),Hko=r(pAe," \u2014 "),KN=n(pAe,"A",{href:!0});var Wrt=s(KN);Uko=r(Wrt,"YosoForTokenClassification"),Wrt.forEach(t),Jko=r(pAe," (YOSO model)"),pAe.forEach(t),q.forEach(t),Yko=i(Ht),g3=n(Ht,"P",{});var _Ae=s(g3);Kko=r(_Ae,"The model is set in evaluation mode by default using "),fle=n(_Ae,"CODE",{});var Qrt=s(fle);Zko=r(Qrt,"model.eval()"),Qrt.forEach(t),eRo=r(_Ae,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mle=n(_Ae,"CODE",{});var Hrt=s(mle);oRo=r(Hrt,"model.train()"),Hrt.forEach(t),_Ae.forEach(t),rRo=i(Ht),gle=n(Ht,"P",{});var Urt=s(gle);tRo=r(Urt,"Examples:"),Urt.forEach(t),aRo=i(Ht),m(ry.$$.fragment,Ht),Ht.forEach(t),dl.forEach(t),cRe=i(c),Md=n(c,"H2",{class:!0});var vPe=s(Md);h3=n(vPe,"A",{id:!0,class:!0,href:!0});var Jrt=s(h3);hle=n(Jrt,"SPAN",{});var Yrt=s(hle);m(ty.$$.fragment,Yrt),Yrt.forEach(t),Jrt.forEach(t),nRo=i(vPe),ple=n(vPe,"SPAN",{});var Krt=s(ple);sRo=r(Krt,"AutoModelForQuestionAnswering"),Krt.forEach(t),vPe.forEach(t),fRe=i(c),nr=n(c,"DIV",{class:!0});var fl=s(nr);m(ay.$$.fragment,fl),lRo=i(fl),Ed=n(fl,"P",{});var BW=s(Ed);iRo=r(BW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),_le=n(BW,"CODE",{});var Zrt=s(_le);dRo=r(Zrt,"from_pretrained()"),Zrt.forEach(t),cRo=r(BW,"class method or the "),ule=n(BW,"CODE",{});var ett=s(ule);fRo=r(ett,"from_config()"),ett.forEach(t),mRo=r(BW,`class
method.`),BW.forEach(t),gRo=i(fl),ny=n(fl,"P",{});var TPe=s(ny);hRo=r(TPe,"This class cannot be instantiated directly using "),ble=n(TPe,"CODE",{});var ott=s(ble);pRo=r(ott,"__init__()"),ott.forEach(t),_Ro=r(TPe," (throws an error)."),TPe.forEach(t),uRo=i(fl),Zr=n(fl,"DIV",{class:!0});var ml=s(Zr);m(sy.$$.fragment,ml),bRo=i(ml),vle=n(ml,"P",{});var rtt=s(vle);vRo=r(rtt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),rtt.forEach(t),TRo=i(ml),yd=n(ml,"P",{});var xW=s(yd);FRo=r(xW,`Note:
Loading a model from its configuration file does `),Tle=n(xW,"STRONG",{});var ttt=s(Tle);CRo=r(ttt,"not"),ttt.forEach(t),MRo=r(xW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Fle=n(xW,"CODE",{});var att=s(Fle);ERo=r(att,"from_pretrained()"),att.forEach(t),yRo=r(xW,"to load the model weights."),xW.forEach(t),wRo=i(ml),Cle=n(ml,"P",{});var ntt=s(Cle);ARo=r(ntt,"Examples:"),ntt.forEach(t),LRo=i(ml),m(ly.$$.fragment,ml),ml.forEach(t),BRo=i(fl),We=n(fl,"DIV",{class:!0});var Ut=s(We);m(iy.$$.fragment,Ut),xRo=i(Ut),Mle=n(Ut,"P",{});var stt=s(Mle);kRo=r(stt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),stt.forEach(t),RRo=i(Ut),Za=n(Ut,"P",{});var AM=s(Za);SRo=r(AM,"The model class to instantiate is selected based on the "),Ele=n(AM,"CODE",{});var ltt=s(Ele);PRo=r(ltt,"model_type"),ltt.forEach(t),$Ro=r(AM,` property of the config object (either
passed as an argument or loaded from `),yle=n(AM,"CODE",{});var itt=s(yle);IRo=r(itt,"pretrained_model_name_or_path"),itt.forEach(t),DRo=r(AM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wle=n(AM,"CODE",{});var dtt=s(wle);NRo=r(dtt,"pretrained_model_name_or_path"),dtt.forEach(t),jRo=r(AM,":"),AM.forEach(t),qRo=i(Ut),R=n(Ut,"UL",{});var P=s(R);p3=n(P,"LI",{});var uAe=s(p3);Ale=n(uAe,"STRONG",{});var ctt=s(Ale);GRo=r(ctt,"albert"),ctt.forEach(t),ORo=r(uAe," \u2014 "),ZN=n(uAe,"A",{href:!0});var ftt=s(ZN);XRo=r(ftt,"AlbertForQuestionAnswering"),ftt.forEach(t),VRo=r(uAe," (ALBERT model)"),uAe.forEach(t),zRo=i(P),_3=n(P,"LI",{});var bAe=s(_3);Lle=n(bAe,"STRONG",{});var mtt=s(Lle);WRo=r(mtt,"bart"),mtt.forEach(t),QRo=r(bAe," \u2014 "),ej=n(bAe,"A",{href:!0});var gtt=s(ej);HRo=r(gtt,"BartForQuestionAnswering"),gtt.forEach(t),URo=r(bAe," (BART model)"),bAe.forEach(t),JRo=i(P),u3=n(P,"LI",{});var vAe=s(u3);Ble=n(vAe,"STRONG",{});var htt=s(Ble);YRo=r(htt,"bert"),htt.forEach(t),KRo=r(vAe," \u2014 "),oj=n(vAe,"A",{href:!0});var ptt=s(oj);ZRo=r(ptt,"BertForQuestionAnswering"),ptt.forEach(t),eSo=r(vAe," (BERT model)"),vAe.forEach(t),oSo=i(P),b3=n(P,"LI",{});var TAe=s(b3);xle=n(TAe,"STRONG",{});var _tt=s(xle);rSo=r(_tt,"big_bird"),_tt.forEach(t),tSo=r(TAe," \u2014 "),rj=n(TAe,"A",{href:!0});var utt=s(rj);aSo=r(utt,"BigBirdForQuestionAnswering"),utt.forEach(t),nSo=r(TAe," (BigBird model)"),TAe.forEach(t),sSo=i(P),v3=n(P,"LI",{});var FAe=s(v3);kle=n(FAe,"STRONG",{});var btt=s(kle);lSo=r(btt,"bigbird_pegasus"),btt.forEach(t),iSo=r(FAe," \u2014 "),tj=n(FAe,"A",{href:!0});var vtt=s(tj);dSo=r(vtt,"BigBirdPegasusForQuestionAnswering"),vtt.forEach(t),cSo=r(FAe," (BigBirdPegasus model)"),FAe.forEach(t),fSo=i(P),T3=n(P,"LI",{});var CAe=s(T3);Rle=n(CAe,"STRONG",{});var Ttt=s(Rle);mSo=r(Ttt,"camembert"),Ttt.forEach(t),gSo=r(CAe," \u2014 "),aj=n(CAe,"A",{href:!0});var Ftt=s(aj);hSo=r(Ftt,"CamembertForQuestionAnswering"),Ftt.forEach(t),pSo=r(CAe," (CamemBERT model)"),CAe.forEach(t),_So=i(P),F3=n(P,"LI",{});var MAe=s(F3);Sle=n(MAe,"STRONG",{});var Ctt=s(Sle);uSo=r(Ctt,"canine"),Ctt.forEach(t),bSo=r(MAe," \u2014 "),nj=n(MAe,"A",{href:!0});var Mtt=s(nj);vSo=r(Mtt,"CanineForQuestionAnswering"),Mtt.forEach(t),TSo=r(MAe," (Canine model)"),MAe.forEach(t),FSo=i(P),C3=n(P,"LI",{});var EAe=s(C3);Ple=n(EAe,"STRONG",{});var Ett=s(Ple);CSo=r(Ett,"convbert"),Ett.forEach(t),MSo=r(EAe," \u2014 "),sj=n(EAe,"A",{href:!0});var ytt=s(sj);ESo=r(ytt,"ConvBertForQuestionAnswering"),ytt.forEach(t),ySo=r(EAe," (ConvBERT model)"),EAe.forEach(t),wSo=i(P),M3=n(P,"LI",{});var yAe=s(M3);$le=n(yAe,"STRONG",{});var wtt=s($le);ASo=r(wtt,"data2vec-text"),wtt.forEach(t),LSo=r(yAe," \u2014 "),lj=n(yAe,"A",{href:!0});var Att=s(lj);BSo=r(Att,"Data2VecTextForQuestionAnswering"),Att.forEach(t),xSo=r(yAe," (Data2VecText model)"),yAe.forEach(t),kSo=i(P),E3=n(P,"LI",{});var wAe=s(E3);Ile=n(wAe,"STRONG",{});var Ltt=s(Ile);RSo=r(Ltt,"deberta"),Ltt.forEach(t),SSo=r(wAe," \u2014 "),ij=n(wAe,"A",{href:!0});var Btt=s(ij);PSo=r(Btt,"DebertaForQuestionAnswering"),Btt.forEach(t),$So=r(wAe," (DeBERTa model)"),wAe.forEach(t),ISo=i(P),y3=n(P,"LI",{});var AAe=s(y3);Dle=n(AAe,"STRONG",{});var xtt=s(Dle);DSo=r(xtt,"deberta-v2"),xtt.forEach(t),NSo=r(AAe," \u2014 "),dj=n(AAe,"A",{href:!0});var ktt=s(dj);jSo=r(ktt,"DebertaV2ForQuestionAnswering"),ktt.forEach(t),qSo=r(AAe," (DeBERTa-v2 model)"),AAe.forEach(t),GSo=i(P),w3=n(P,"LI",{});var LAe=s(w3);Nle=n(LAe,"STRONG",{});var Rtt=s(Nle);OSo=r(Rtt,"distilbert"),Rtt.forEach(t),XSo=r(LAe," \u2014 "),cj=n(LAe,"A",{href:!0});var Stt=s(cj);VSo=r(Stt,"DistilBertForQuestionAnswering"),Stt.forEach(t),zSo=r(LAe," (DistilBERT model)"),LAe.forEach(t),WSo=i(P),A3=n(P,"LI",{});var BAe=s(A3);jle=n(BAe,"STRONG",{});var Ptt=s(jle);QSo=r(Ptt,"electra"),Ptt.forEach(t),HSo=r(BAe," \u2014 "),fj=n(BAe,"A",{href:!0});var $tt=s(fj);USo=r($tt,"ElectraForQuestionAnswering"),$tt.forEach(t),JSo=r(BAe," (ELECTRA model)"),BAe.forEach(t),YSo=i(P),L3=n(P,"LI",{});var xAe=s(L3);qle=n(xAe,"STRONG",{});var Itt=s(qle);KSo=r(Itt,"flaubert"),Itt.forEach(t),ZSo=r(xAe," \u2014 "),mj=n(xAe,"A",{href:!0});var Dtt=s(mj);ePo=r(Dtt,"FlaubertForQuestionAnsweringSimple"),Dtt.forEach(t),oPo=r(xAe," (FlauBERT model)"),xAe.forEach(t),rPo=i(P),B3=n(P,"LI",{});var kAe=s(B3);Gle=n(kAe,"STRONG",{});var Ntt=s(Gle);tPo=r(Ntt,"fnet"),Ntt.forEach(t),aPo=r(kAe," \u2014 "),gj=n(kAe,"A",{href:!0});var jtt=s(gj);nPo=r(jtt,"FNetForQuestionAnswering"),jtt.forEach(t),sPo=r(kAe," (FNet model)"),kAe.forEach(t),lPo=i(P),x3=n(P,"LI",{});var RAe=s(x3);Ole=n(RAe,"STRONG",{});var qtt=s(Ole);iPo=r(qtt,"funnel"),qtt.forEach(t),dPo=r(RAe," \u2014 "),hj=n(RAe,"A",{href:!0});var Gtt=s(hj);cPo=r(Gtt,"FunnelForQuestionAnswering"),Gtt.forEach(t),fPo=r(RAe," (Funnel Transformer model)"),RAe.forEach(t),mPo=i(P),k3=n(P,"LI",{});var SAe=s(k3);Xle=n(SAe,"STRONG",{});var Ott=s(Xle);gPo=r(Ott,"gptj"),Ott.forEach(t),hPo=r(SAe," \u2014 "),pj=n(SAe,"A",{href:!0});var Xtt=s(pj);pPo=r(Xtt,"GPTJForQuestionAnswering"),Xtt.forEach(t),_Po=r(SAe," (GPT-J model)"),SAe.forEach(t),uPo=i(P),R3=n(P,"LI",{});var PAe=s(R3);Vle=n(PAe,"STRONG",{});var Vtt=s(Vle);bPo=r(Vtt,"ibert"),Vtt.forEach(t),vPo=r(PAe," \u2014 "),_j=n(PAe,"A",{href:!0});var ztt=s(_j);TPo=r(ztt,"IBertForQuestionAnswering"),ztt.forEach(t),FPo=r(PAe," (I-BERT model)"),PAe.forEach(t),CPo=i(P),S3=n(P,"LI",{});var $Ae=s(S3);zle=n($Ae,"STRONG",{});var Wtt=s(zle);MPo=r(Wtt,"layoutlmv2"),Wtt.forEach(t),EPo=r($Ae," \u2014 "),uj=n($Ae,"A",{href:!0});var Qtt=s(uj);yPo=r(Qtt,"LayoutLMv2ForQuestionAnswering"),Qtt.forEach(t),wPo=r($Ae," (LayoutLMv2 model)"),$Ae.forEach(t),APo=i(P),P3=n(P,"LI",{});var IAe=s(P3);Wle=n(IAe,"STRONG",{});var Htt=s(Wle);LPo=r(Htt,"led"),Htt.forEach(t),BPo=r(IAe," \u2014 "),bj=n(IAe,"A",{href:!0});var Utt=s(bj);xPo=r(Utt,"LEDForQuestionAnswering"),Utt.forEach(t),kPo=r(IAe," (LED model)"),IAe.forEach(t),RPo=i(P),$3=n(P,"LI",{});var DAe=s($3);Qle=n(DAe,"STRONG",{});var Jtt=s(Qle);SPo=r(Jtt,"longformer"),Jtt.forEach(t),PPo=r(DAe," \u2014 "),vj=n(DAe,"A",{href:!0});var Ytt=s(vj);$Po=r(Ytt,"LongformerForQuestionAnswering"),Ytt.forEach(t),IPo=r(DAe," (Longformer model)"),DAe.forEach(t),DPo=i(P),I3=n(P,"LI",{});var NAe=s(I3);Hle=n(NAe,"STRONG",{});var Ktt=s(Hle);NPo=r(Ktt,"lxmert"),Ktt.forEach(t),jPo=r(NAe," \u2014 "),Tj=n(NAe,"A",{href:!0});var Ztt=s(Tj);qPo=r(Ztt,"LxmertForQuestionAnswering"),Ztt.forEach(t),GPo=r(NAe," (LXMERT model)"),NAe.forEach(t),OPo=i(P),D3=n(P,"LI",{});var jAe=s(D3);Ule=n(jAe,"STRONG",{});var eat=s(Ule);XPo=r(eat,"mbart"),eat.forEach(t),VPo=r(jAe," \u2014 "),Fj=n(jAe,"A",{href:!0});var oat=s(Fj);zPo=r(oat,"MBartForQuestionAnswering"),oat.forEach(t),WPo=r(jAe," (mBART model)"),jAe.forEach(t),QPo=i(P),N3=n(P,"LI",{});var qAe=s(N3);Jle=n(qAe,"STRONG",{});var rat=s(Jle);HPo=r(rat,"megatron-bert"),rat.forEach(t),UPo=r(qAe," \u2014 "),Cj=n(qAe,"A",{href:!0});var tat=s(Cj);JPo=r(tat,"MegatronBertForQuestionAnswering"),tat.forEach(t),YPo=r(qAe," (MegatronBert model)"),qAe.forEach(t),KPo=i(P),j3=n(P,"LI",{});var GAe=s(j3);Yle=n(GAe,"STRONG",{});var aat=s(Yle);ZPo=r(aat,"mobilebert"),aat.forEach(t),e$o=r(GAe," \u2014 "),Mj=n(GAe,"A",{href:!0});var nat=s(Mj);o$o=r(nat,"MobileBertForQuestionAnswering"),nat.forEach(t),r$o=r(GAe," (MobileBERT model)"),GAe.forEach(t),t$o=i(P),q3=n(P,"LI",{});var OAe=s(q3);Kle=n(OAe,"STRONG",{});var sat=s(Kle);a$o=r(sat,"mpnet"),sat.forEach(t),n$o=r(OAe," \u2014 "),Ej=n(OAe,"A",{href:!0});var lat=s(Ej);s$o=r(lat,"MPNetForQuestionAnswering"),lat.forEach(t),l$o=r(OAe," (MPNet model)"),OAe.forEach(t),i$o=i(P),G3=n(P,"LI",{});var XAe=s(G3);Zle=n(XAe,"STRONG",{});var iat=s(Zle);d$o=r(iat,"nystromformer"),iat.forEach(t),c$o=r(XAe," \u2014 "),yj=n(XAe,"A",{href:!0});var dat=s(yj);f$o=r(dat,"NystromformerForQuestionAnswering"),dat.forEach(t),m$o=r(XAe," (Nystromformer model)"),XAe.forEach(t),g$o=i(P),O3=n(P,"LI",{});var VAe=s(O3);eie=n(VAe,"STRONG",{});var cat=s(eie);h$o=r(cat,"qdqbert"),cat.forEach(t),p$o=r(VAe," \u2014 "),wj=n(VAe,"A",{href:!0});var fat=s(wj);_$o=r(fat,"QDQBertForQuestionAnswering"),fat.forEach(t),u$o=r(VAe," (QDQBert model)"),VAe.forEach(t),b$o=i(P),X3=n(P,"LI",{});var zAe=s(X3);oie=n(zAe,"STRONG",{});var mat=s(oie);v$o=r(mat,"reformer"),mat.forEach(t),T$o=r(zAe," \u2014 "),Aj=n(zAe,"A",{href:!0});var gat=s(Aj);F$o=r(gat,"ReformerForQuestionAnswering"),gat.forEach(t),C$o=r(zAe," (Reformer model)"),zAe.forEach(t),M$o=i(P),V3=n(P,"LI",{});var WAe=s(V3);rie=n(WAe,"STRONG",{});var hat=s(rie);E$o=r(hat,"rembert"),hat.forEach(t),y$o=r(WAe," \u2014 "),Lj=n(WAe,"A",{href:!0});var pat=s(Lj);w$o=r(pat,"RemBertForQuestionAnswering"),pat.forEach(t),A$o=r(WAe," (RemBERT model)"),WAe.forEach(t),L$o=i(P),z3=n(P,"LI",{});var QAe=s(z3);tie=n(QAe,"STRONG",{});var _at=s(tie);B$o=r(_at,"roberta"),_at.forEach(t),x$o=r(QAe," \u2014 "),Bj=n(QAe,"A",{href:!0});var uat=s(Bj);k$o=r(uat,"RobertaForQuestionAnswering"),uat.forEach(t),R$o=r(QAe," (RoBERTa model)"),QAe.forEach(t),S$o=i(P),W3=n(P,"LI",{});var HAe=s(W3);aie=n(HAe,"STRONG",{});var bat=s(aie);P$o=r(bat,"roformer"),bat.forEach(t),$$o=r(HAe," \u2014 "),xj=n(HAe,"A",{href:!0});var vat=s(xj);I$o=r(vat,"RoFormerForQuestionAnswering"),vat.forEach(t),D$o=r(HAe," (RoFormer model)"),HAe.forEach(t),N$o=i(P),Q3=n(P,"LI",{});var UAe=s(Q3);nie=n(UAe,"STRONG",{});var Tat=s(nie);j$o=r(Tat,"splinter"),Tat.forEach(t),q$o=r(UAe," \u2014 "),kj=n(UAe,"A",{href:!0});var Fat=s(kj);G$o=r(Fat,"SplinterForQuestionAnswering"),Fat.forEach(t),O$o=r(UAe," (Splinter model)"),UAe.forEach(t),X$o=i(P),H3=n(P,"LI",{});var JAe=s(H3);sie=n(JAe,"STRONG",{});var Cat=s(sie);V$o=r(Cat,"squeezebert"),Cat.forEach(t),z$o=r(JAe," \u2014 "),Rj=n(JAe,"A",{href:!0});var Mat=s(Rj);W$o=r(Mat,"SqueezeBertForQuestionAnswering"),Mat.forEach(t),Q$o=r(JAe," (SqueezeBERT model)"),JAe.forEach(t),H$o=i(P),U3=n(P,"LI",{});var YAe=s(U3);lie=n(YAe,"STRONG",{});var Eat=s(lie);U$o=r(Eat,"xlm"),Eat.forEach(t),J$o=r(YAe," \u2014 "),Sj=n(YAe,"A",{href:!0});var yat=s(Sj);Y$o=r(yat,"XLMForQuestionAnsweringSimple"),yat.forEach(t),K$o=r(YAe," (XLM model)"),YAe.forEach(t),Z$o=i(P),J3=n(P,"LI",{});var KAe=s(J3);iie=n(KAe,"STRONG",{});var wat=s(iie);eIo=r(wat,"xlm-roberta"),wat.forEach(t),oIo=r(KAe," \u2014 "),Pj=n(KAe,"A",{href:!0});var Aat=s(Pj);rIo=r(Aat,"XLMRobertaForQuestionAnswering"),Aat.forEach(t),tIo=r(KAe," (XLM-RoBERTa model)"),KAe.forEach(t),aIo=i(P),Y3=n(P,"LI",{});var ZAe=s(Y3);die=n(ZAe,"STRONG",{});var Lat=s(die);nIo=r(Lat,"xlm-roberta-xl"),Lat.forEach(t),sIo=r(ZAe," \u2014 "),$j=n(ZAe,"A",{href:!0});var Bat=s($j);lIo=r(Bat,"XLMRobertaXLForQuestionAnswering"),Bat.forEach(t),iIo=r(ZAe," (XLM-RoBERTa-XL model)"),ZAe.forEach(t),dIo=i(P),K3=n(P,"LI",{});var e0e=s(K3);cie=n(e0e,"STRONG",{});var xat=s(cie);cIo=r(xat,"xlnet"),xat.forEach(t),fIo=r(e0e," \u2014 "),Ij=n(e0e,"A",{href:!0});var kat=s(Ij);mIo=r(kat,"XLNetForQuestionAnsweringSimple"),kat.forEach(t),gIo=r(e0e," (XLNet model)"),e0e.forEach(t),hIo=i(P),Z3=n(P,"LI",{});var o0e=s(Z3);fie=n(o0e,"STRONG",{});var Rat=s(fie);pIo=r(Rat,"yoso"),Rat.forEach(t),_Io=r(o0e," \u2014 "),Dj=n(o0e,"A",{href:!0});var Sat=s(Dj);uIo=r(Sat,"YosoForQuestionAnswering"),Sat.forEach(t),bIo=r(o0e," (YOSO model)"),o0e.forEach(t),P.forEach(t),vIo=i(Ut),e2=n(Ut,"P",{});var r0e=s(e2);TIo=r(r0e,"The model is set in evaluation mode by default using "),mie=n(r0e,"CODE",{});var Pat=s(mie);FIo=r(Pat,"model.eval()"),Pat.forEach(t),CIo=r(r0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gie=n(r0e,"CODE",{});var $at=s(gie);MIo=r($at,"model.train()"),$at.forEach(t),r0e.forEach(t),EIo=i(Ut),hie=n(Ut,"P",{});var Iat=s(hie);yIo=r(Iat,"Examples:"),Iat.forEach(t),wIo=i(Ut),m(dy.$$.fragment,Ut),Ut.forEach(t),fl.forEach(t),mRe=i(c),wd=n(c,"H2",{class:!0});var FPe=s(wd);o2=n(FPe,"A",{id:!0,class:!0,href:!0});var Dat=s(o2);pie=n(Dat,"SPAN",{});var Nat=s(pie);m(cy.$$.fragment,Nat),Nat.forEach(t),Dat.forEach(t),AIo=i(FPe),_ie=n(FPe,"SPAN",{});var jat=s(_ie);LIo=r(jat,"AutoModelForTableQuestionAnswering"),jat.forEach(t),FPe.forEach(t),gRe=i(c),sr=n(c,"DIV",{class:!0});var gl=s(sr);m(fy.$$.fragment,gl),BIo=i(gl),Ad=n(gl,"P",{});var kW=s(Ad);xIo=r(kW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),uie=n(kW,"CODE",{});var qat=s(uie);kIo=r(qat,"from_pretrained()"),qat.forEach(t),RIo=r(kW,"class method or the "),bie=n(kW,"CODE",{});var Gat=s(bie);SIo=r(Gat,"from_config()"),Gat.forEach(t),PIo=r(kW,`class
method.`),kW.forEach(t),$Io=i(gl),my=n(gl,"P",{});var CPe=s(my);IIo=r(CPe,"This class cannot be instantiated directly using "),vie=n(CPe,"CODE",{});var Oat=s(vie);DIo=r(Oat,"__init__()"),Oat.forEach(t),NIo=r(CPe," (throws an error)."),CPe.forEach(t),jIo=i(gl),et=n(gl,"DIV",{class:!0});var hl=s(et);m(gy.$$.fragment,hl),qIo=i(hl),Tie=n(hl,"P",{});var Xat=s(Tie);GIo=r(Xat,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Xat.forEach(t),OIo=i(hl),Ld=n(hl,"P",{});var RW=s(Ld);XIo=r(RW,`Note:
Loading a model from its configuration file does `),Fie=n(RW,"STRONG",{});var Vat=s(Fie);VIo=r(Vat,"not"),Vat.forEach(t),zIo=r(RW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Cie=n(RW,"CODE",{});var zat=s(Cie);WIo=r(zat,"from_pretrained()"),zat.forEach(t),QIo=r(RW,"to load the model weights."),RW.forEach(t),HIo=i(hl),Mie=n(hl,"P",{});var Wat=s(Mie);UIo=r(Wat,"Examples:"),Wat.forEach(t),JIo=i(hl),m(hy.$$.fragment,hl),hl.forEach(t),YIo=i(gl),Qe=n(gl,"DIV",{class:!0});var Jt=s(Qe);m(py.$$.fragment,Jt),KIo=i(Jt),Eie=n(Jt,"P",{});var Qat=s(Eie);ZIo=r(Qat,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Qat.forEach(t),eDo=i(Jt),en=n(Jt,"P",{});var LM=s(en);oDo=r(LM,"The model class to instantiate is selected based on the "),yie=n(LM,"CODE",{});var Hat=s(yie);rDo=r(Hat,"model_type"),Hat.forEach(t),tDo=r(LM,` property of the config object (either
passed as an argument or loaded from `),wie=n(LM,"CODE",{});var Uat=s(wie);aDo=r(Uat,"pretrained_model_name_or_path"),Uat.forEach(t),nDo=r(LM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Aie=n(LM,"CODE",{});var Jat=s(Aie);sDo=r(Jat,"pretrained_model_name_or_path"),Jat.forEach(t),lDo=r(LM,":"),LM.forEach(t),iDo=i(Jt),Lie=n(Jt,"UL",{});var Yat=s(Lie);r2=n(Yat,"LI",{});var t0e=s(r2);Bie=n(t0e,"STRONG",{});var Kat=s(Bie);dDo=r(Kat,"tapas"),Kat.forEach(t),cDo=r(t0e," \u2014 "),Nj=n(t0e,"A",{href:!0});var Zat=s(Nj);fDo=r(Zat,"TapasForQuestionAnswering"),Zat.forEach(t),mDo=r(t0e," (TAPAS model)"),t0e.forEach(t),Yat.forEach(t),gDo=i(Jt),t2=n(Jt,"P",{});var a0e=s(t2);hDo=r(a0e,"The model is set in evaluation mode by default using "),xie=n(a0e,"CODE",{});var ent=s(xie);pDo=r(ent,"model.eval()"),ent.forEach(t),_Do=r(a0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kie=n(a0e,"CODE",{});var ont=s(kie);uDo=r(ont,"model.train()"),ont.forEach(t),a0e.forEach(t),bDo=i(Jt),Rie=n(Jt,"P",{});var rnt=s(Rie);vDo=r(rnt,"Examples:"),rnt.forEach(t),TDo=i(Jt),m(_y.$$.fragment,Jt),Jt.forEach(t),gl.forEach(t),hRe=i(c),Bd=n(c,"H2",{class:!0});var MPe=s(Bd);a2=n(MPe,"A",{id:!0,class:!0,href:!0});var tnt=s(a2);Sie=n(tnt,"SPAN",{});var ant=s(Sie);m(uy.$$.fragment,ant),ant.forEach(t),tnt.forEach(t),FDo=i(MPe),Pie=n(MPe,"SPAN",{});var nnt=s(Pie);CDo=r(nnt,"AutoModelForImageClassification"),nnt.forEach(t),MPe.forEach(t),pRe=i(c),lr=n(c,"DIV",{class:!0});var pl=s(lr);m(by.$$.fragment,pl),MDo=i(pl),xd=n(pl,"P",{});var SW=s(xd);EDo=r(SW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),$ie=n(SW,"CODE",{});var snt=s($ie);yDo=r(snt,"from_pretrained()"),snt.forEach(t),wDo=r(SW,"class method or the "),Iie=n(SW,"CODE",{});var lnt=s(Iie);ADo=r(lnt,"from_config()"),lnt.forEach(t),LDo=r(SW,`class
method.`),SW.forEach(t),BDo=i(pl),vy=n(pl,"P",{});var EPe=s(vy);xDo=r(EPe,"This class cannot be instantiated directly using "),Die=n(EPe,"CODE",{});var int=s(Die);kDo=r(int,"__init__()"),int.forEach(t),RDo=r(EPe," (throws an error)."),EPe.forEach(t),SDo=i(pl),ot=n(pl,"DIV",{class:!0});var _l=s(ot);m(Ty.$$.fragment,_l),PDo=i(_l),Nie=n(_l,"P",{});var dnt=s(Nie);$Do=r(dnt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),dnt.forEach(t),IDo=i(_l),kd=n(_l,"P",{});var PW=s(kd);DDo=r(PW,`Note:
Loading a model from its configuration file does `),jie=n(PW,"STRONG",{});var cnt=s(jie);NDo=r(cnt,"not"),cnt.forEach(t),jDo=r(PW,` load the model weights. It only affects the
model\u2019s configuration. Use `),qie=n(PW,"CODE",{});var fnt=s(qie);qDo=r(fnt,"from_pretrained()"),fnt.forEach(t),GDo=r(PW,"to load the model weights."),PW.forEach(t),ODo=i(_l),Gie=n(_l,"P",{});var mnt=s(Gie);XDo=r(mnt,"Examples:"),mnt.forEach(t),VDo=i(_l),m(Fy.$$.fragment,_l),_l.forEach(t),zDo=i(pl),He=n(pl,"DIV",{class:!0});var Yt=s(He);m(Cy.$$.fragment,Yt),WDo=i(Yt),Oie=n(Yt,"P",{});var gnt=s(Oie);QDo=r(gnt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),gnt.forEach(t),HDo=i(Yt),on=n(Yt,"P",{});var BM=s(on);UDo=r(BM,"The model class to instantiate is selected based on the "),Xie=n(BM,"CODE",{});var hnt=s(Xie);JDo=r(hnt,"model_type"),hnt.forEach(t),YDo=r(BM,` property of the config object (either
passed as an argument or loaded from `),Vie=n(BM,"CODE",{});var pnt=s(Vie);KDo=r(pnt,"pretrained_model_name_or_path"),pnt.forEach(t),ZDo=r(BM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zie=n(BM,"CODE",{});var _nt=s(zie);eNo=r(_nt,"pretrained_model_name_or_path"),_nt.forEach(t),oNo=r(BM,":"),BM.forEach(t),rNo=i(Yt),ge=n(Yt,"UL",{});var Fe=s(ge);n2=n(Fe,"LI",{});var n0e=s(n2);Wie=n(n0e,"STRONG",{});var unt=s(Wie);tNo=r(unt,"beit"),unt.forEach(t),aNo=r(n0e," \u2014 "),jj=n(n0e,"A",{href:!0});var bnt=s(jj);nNo=r(bnt,"BeitForImageClassification"),bnt.forEach(t),sNo=r(n0e," (BEiT model)"),n0e.forEach(t),lNo=i(Fe),s2=n(Fe,"LI",{});var s0e=s(s2);Qie=n(s0e,"STRONG",{});var vnt=s(Qie);iNo=r(vnt,"convnext"),vnt.forEach(t),dNo=r(s0e," \u2014 "),qj=n(s0e,"A",{href:!0});var Tnt=s(qj);cNo=r(Tnt,"ConvNextForImageClassification"),Tnt.forEach(t),fNo=r(s0e," (ConvNext model)"),s0e.forEach(t),mNo=i(Fe),qs=n(Fe,"LI",{});var a9=s(qs);Hie=n(a9,"STRONG",{});var Fnt=s(Hie);gNo=r(Fnt,"deit"),Fnt.forEach(t),hNo=r(a9," \u2014 "),Gj=n(a9,"A",{href:!0});var Cnt=s(Gj);pNo=r(Cnt,"DeiTForImageClassification"),Cnt.forEach(t),_No=r(a9," or "),Oj=n(a9,"A",{href:!0});var Mnt=s(Oj);uNo=r(Mnt,"DeiTForImageClassificationWithTeacher"),Mnt.forEach(t),bNo=r(a9," (DeiT model)"),a9.forEach(t),vNo=i(Fe),l2=n(Fe,"LI",{});var l0e=s(l2);Uie=n(l0e,"STRONG",{});var Ent=s(Uie);TNo=r(Ent,"imagegpt"),Ent.forEach(t),FNo=r(l0e," \u2014 "),Xj=n(l0e,"A",{href:!0});var ynt=s(Xj);CNo=r(ynt,"ImageGPTForImageClassification"),ynt.forEach(t),MNo=r(l0e," (ImageGPT model)"),l0e.forEach(t),ENo=i(Fe),ma=n(Fe,"LI",{});var $f=s(ma);Jie=n($f,"STRONG",{});var wnt=s(Jie);yNo=r(wnt,"perceiver"),wnt.forEach(t),wNo=r($f," \u2014 "),Vj=n($f,"A",{href:!0});var Ant=s(Vj);ANo=r(Ant,"PerceiverForImageClassificationLearned"),Ant.forEach(t),LNo=r($f," or "),zj=n($f,"A",{href:!0});var Lnt=s(zj);BNo=r(Lnt,"PerceiverForImageClassificationFourier"),Lnt.forEach(t),xNo=r($f," or "),Wj=n($f,"A",{href:!0});var Bnt=s(Wj);kNo=r(Bnt,"PerceiverForImageClassificationConvProcessing"),Bnt.forEach(t),RNo=r($f," (Perceiver model)"),$f.forEach(t),SNo=i(Fe),i2=n(Fe,"LI",{});var i0e=s(i2);Yie=n(i0e,"STRONG",{});var xnt=s(Yie);PNo=r(xnt,"poolformer"),xnt.forEach(t),$No=r(i0e," \u2014 "),Qj=n(i0e,"A",{href:!0});var knt=s(Qj);INo=r(knt,"PoolFormerForImageClassification"),knt.forEach(t),DNo=r(i0e," (PoolFormer model)"),i0e.forEach(t),NNo=i(Fe),d2=n(Fe,"LI",{});var d0e=s(d2);Kie=n(d0e,"STRONG",{});var Rnt=s(Kie);jNo=r(Rnt,"resnet"),Rnt.forEach(t),qNo=r(d0e," \u2014 "),Hj=n(d0e,"A",{href:!0});var Snt=s(Hj);GNo=r(Snt,"ResNetForImageClassification"),Snt.forEach(t),ONo=r(d0e," (ResNet model)"),d0e.forEach(t),XNo=i(Fe),c2=n(Fe,"LI",{});var c0e=s(c2);Zie=n(c0e,"STRONG",{});var Pnt=s(Zie);VNo=r(Pnt,"segformer"),Pnt.forEach(t),zNo=r(c0e," \u2014 "),Uj=n(c0e,"A",{href:!0});var $nt=s(Uj);WNo=r($nt,"SegformerForImageClassification"),$nt.forEach(t),QNo=r(c0e," (SegFormer model)"),c0e.forEach(t),HNo=i(Fe),f2=n(Fe,"LI",{});var f0e=s(f2);ede=n(f0e,"STRONG",{});var Int=s(ede);UNo=r(Int,"swin"),Int.forEach(t),JNo=r(f0e," \u2014 "),Jj=n(f0e,"A",{href:!0});var Dnt=s(Jj);YNo=r(Dnt,"SwinForImageClassification"),Dnt.forEach(t),KNo=r(f0e," (Swin model)"),f0e.forEach(t),ZNo=i(Fe),m2=n(Fe,"LI",{});var m0e=s(m2);ode=n(m0e,"STRONG",{});var Nnt=s(ode);ejo=r(Nnt,"van"),Nnt.forEach(t),ojo=r(m0e," \u2014 "),Yj=n(m0e,"A",{href:!0});var jnt=s(Yj);rjo=r(jnt,"VanForImageClassification"),jnt.forEach(t),tjo=r(m0e," (VAN model)"),m0e.forEach(t),ajo=i(Fe),g2=n(Fe,"LI",{});var g0e=s(g2);rde=n(g0e,"STRONG",{});var qnt=s(rde);njo=r(qnt,"vit"),qnt.forEach(t),sjo=r(g0e," \u2014 "),Kj=n(g0e,"A",{href:!0});var Gnt=s(Kj);ljo=r(Gnt,"ViTForImageClassification"),Gnt.forEach(t),ijo=r(g0e," (ViT model)"),g0e.forEach(t),Fe.forEach(t),djo=i(Yt),h2=n(Yt,"P",{});var h0e=s(h2);cjo=r(h0e,"The model is set in evaluation mode by default using "),tde=n(h0e,"CODE",{});var Ont=s(tde);fjo=r(Ont,"model.eval()"),Ont.forEach(t),mjo=r(h0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ade=n(h0e,"CODE",{});var Xnt=s(ade);gjo=r(Xnt,"model.train()"),Xnt.forEach(t),h0e.forEach(t),hjo=i(Yt),nde=n(Yt,"P",{});var Vnt=s(nde);pjo=r(Vnt,"Examples:"),Vnt.forEach(t),_jo=i(Yt),m(My.$$.fragment,Yt),Yt.forEach(t),pl.forEach(t),_Re=i(c),Rd=n(c,"H2",{class:!0});var yPe=s(Rd);p2=n(yPe,"A",{id:!0,class:!0,href:!0});var znt=s(p2);sde=n(znt,"SPAN",{});var Wnt=s(sde);m(Ey.$$.fragment,Wnt),Wnt.forEach(t),znt.forEach(t),ujo=i(yPe),lde=n(yPe,"SPAN",{});var Qnt=s(lde);bjo=r(Qnt,"AutoModelForVision2Seq"),Qnt.forEach(t),yPe.forEach(t),uRe=i(c),ir=n(c,"DIV",{class:!0});var ul=s(ir);m(yy.$$.fragment,ul),vjo=i(ul),Sd=n(ul,"P",{});var $W=s(Sd);Tjo=r($W,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),ide=n($W,"CODE",{});var Hnt=s(ide);Fjo=r(Hnt,"from_pretrained()"),Hnt.forEach(t),Cjo=r($W,"class method or the "),dde=n($W,"CODE",{});var Unt=s(dde);Mjo=r(Unt,"from_config()"),Unt.forEach(t),Ejo=r($W,`class
method.`),$W.forEach(t),yjo=i(ul),wy=n(ul,"P",{});var wPe=s(wy);wjo=r(wPe,"This class cannot be instantiated directly using "),cde=n(wPe,"CODE",{});var Jnt=s(cde);Ajo=r(Jnt,"__init__()"),Jnt.forEach(t),Ljo=r(wPe," (throws an error)."),wPe.forEach(t),Bjo=i(ul),rt=n(ul,"DIV",{class:!0});var bl=s(rt);m(Ay.$$.fragment,bl),xjo=i(bl),fde=n(bl,"P",{});var Ynt=s(fde);kjo=r(Ynt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Ynt.forEach(t),Rjo=i(bl),Pd=n(bl,"P",{});var IW=s(Pd);Sjo=r(IW,`Note:
Loading a model from its configuration file does `),mde=n(IW,"STRONG",{});var Knt=s(mde);Pjo=r(Knt,"not"),Knt.forEach(t),$jo=r(IW,` load the model weights. It only affects the
model\u2019s configuration. Use `),gde=n(IW,"CODE",{});var Znt=s(gde);Ijo=r(Znt,"from_pretrained()"),Znt.forEach(t),Djo=r(IW,"to load the model weights."),IW.forEach(t),Njo=i(bl),hde=n(bl,"P",{});var est=s(hde);jjo=r(est,"Examples:"),est.forEach(t),qjo=i(bl),m(Ly.$$.fragment,bl),bl.forEach(t),Gjo=i(ul),Ue=n(ul,"DIV",{class:!0});var Kt=s(Ue);m(By.$$.fragment,Kt),Ojo=i(Kt),pde=n(Kt,"P",{});var ost=s(pde);Xjo=r(ost,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),ost.forEach(t),Vjo=i(Kt),rn=n(Kt,"P",{});var xM=s(rn);zjo=r(xM,"The model class to instantiate is selected based on the "),_de=n(xM,"CODE",{});var rst=s(_de);Wjo=r(rst,"model_type"),rst.forEach(t),Qjo=r(xM,` property of the config object (either
passed as an argument or loaded from `),ude=n(xM,"CODE",{});var tst=s(ude);Hjo=r(tst,"pretrained_model_name_or_path"),tst.forEach(t),Ujo=r(xM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bde=n(xM,"CODE",{});var ast=s(bde);Jjo=r(ast,"pretrained_model_name_or_path"),ast.forEach(t),Yjo=r(xM,":"),xM.forEach(t),Kjo=i(Kt),vde=n(Kt,"UL",{});var nst=s(vde);_2=n(nst,"LI",{});var p0e=s(_2);Tde=n(p0e,"STRONG",{});var sst=s(Tde);Zjo=r(sst,"vision-encoder-decoder"),sst.forEach(t),eqo=r(p0e," \u2014 "),Zj=n(p0e,"A",{href:!0});var lst=s(Zj);oqo=r(lst,"VisionEncoderDecoderModel"),lst.forEach(t),rqo=r(p0e," (Vision Encoder decoder model)"),p0e.forEach(t),nst.forEach(t),tqo=i(Kt),u2=n(Kt,"P",{});var _0e=s(u2);aqo=r(_0e,"The model is set in evaluation mode by default using "),Fde=n(_0e,"CODE",{});var ist=s(Fde);nqo=r(ist,"model.eval()"),ist.forEach(t),sqo=r(_0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cde=n(_0e,"CODE",{});var dst=s(Cde);lqo=r(dst,"model.train()"),dst.forEach(t),_0e.forEach(t),iqo=i(Kt),Mde=n(Kt,"P",{});var cst=s(Mde);dqo=r(cst,"Examples:"),cst.forEach(t),cqo=i(Kt),m(xy.$$.fragment,Kt),Kt.forEach(t),ul.forEach(t),bRe=i(c),$d=n(c,"H2",{class:!0});var APe=s($d);b2=n(APe,"A",{id:!0,class:!0,href:!0});var fst=s(b2);Ede=n(fst,"SPAN",{});var mst=s(Ede);m(ky.$$.fragment,mst),mst.forEach(t),fst.forEach(t),fqo=i(APe),yde=n(APe,"SPAN",{});var gst=s(yde);mqo=r(gst,"AutoModelForAudioClassification"),gst.forEach(t),APe.forEach(t),vRe=i(c),dr=n(c,"DIV",{class:!0});var vl=s(dr);m(Ry.$$.fragment,vl),gqo=i(vl),Id=n(vl,"P",{});var DW=s(Id);hqo=r(DW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),wde=n(DW,"CODE",{});var hst=s(wde);pqo=r(hst,"from_pretrained()"),hst.forEach(t),_qo=r(DW,"class method or the "),Ade=n(DW,"CODE",{});var pst=s(Ade);uqo=r(pst,"from_config()"),pst.forEach(t),bqo=r(DW,`class
method.`),DW.forEach(t),vqo=i(vl),Sy=n(vl,"P",{});var LPe=s(Sy);Tqo=r(LPe,"This class cannot be instantiated directly using "),Lde=n(LPe,"CODE",{});var _st=s(Lde);Fqo=r(_st,"__init__()"),_st.forEach(t),Cqo=r(LPe," (throws an error)."),LPe.forEach(t),Mqo=i(vl),tt=n(vl,"DIV",{class:!0});var Tl=s(tt);m(Py.$$.fragment,Tl),Eqo=i(Tl),Bde=n(Tl,"P",{});var ust=s(Bde);yqo=r(ust,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),ust.forEach(t),wqo=i(Tl),Dd=n(Tl,"P",{});var NW=s(Dd);Aqo=r(NW,`Note:
Loading a model from its configuration file does `),xde=n(NW,"STRONG",{});var bst=s(xde);Lqo=r(bst,"not"),bst.forEach(t),Bqo=r(NW,` load the model weights. It only affects the
model\u2019s configuration. Use `),kde=n(NW,"CODE",{});var vst=s(kde);xqo=r(vst,"from_pretrained()"),vst.forEach(t),kqo=r(NW,"to load the model weights."),NW.forEach(t),Rqo=i(Tl),Rde=n(Tl,"P",{});var Tst=s(Rde);Sqo=r(Tst,"Examples:"),Tst.forEach(t),Pqo=i(Tl),m($y.$$.fragment,Tl),Tl.forEach(t),$qo=i(vl),Je=n(vl,"DIV",{class:!0});var Zt=s(Je);m(Iy.$$.fragment,Zt),Iqo=i(Zt),Sde=n(Zt,"P",{});var Fst=s(Sde);Dqo=r(Fst,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Fst.forEach(t),Nqo=i(Zt),tn=n(Zt,"P",{});var kM=s(tn);jqo=r(kM,"The model class to instantiate is selected based on the "),Pde=n(kM,"CODE",{});var Cst=s(Pde);qqo=r(Cst,"model_type"),Cst.forEach(t),Gqo=r(kM,` property of the config object (either
passed as an argument or loaded from `),$de=n(kM,"CODE",{});var Mst=s($de);Oqo=r(Mst,"pretrained_model_name_or_path"),Mst.forEach(t),Xqo=r(kM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ide=n(kM,"CODE",{});var Est=s(Ide);Vqo=r(Est,"pretrained_model_name_or_path"),Est.forEach(t),zqo=r(kM,":"),kM.forEach(t),Wqo=i(Zt),ke=n(Zt,"UL",{});var qo=s(ke);v2=n(qo,"LI",{});var u0e=s(v2);Dde=n(u0e,"STRONG",{});var yst=s(Dde);Qqo=r(yst,"data2vec-audio"),yst.forEach(t),Hqo=r(u0e," \u2014 "),eq=n(u0e,"A",{href:!0});var wst=s(eq);Uqo=r(wst,"Data2VecAudioForSequenceClassification"),wst.forEach(t),Jqo=r(u0e," (Data2VecAudio model)"),u0e.forEach(t),Yqo=i(qo),T2=n(qo,"LI",{});var b0e=s(T2);Nde=n(b0e,"STRONG",{});var Ast=s(Nde);Kqo=r(Ast,"hubert"),Ast.forEach(t),Zqo=r(b0e," \u2014 "),oq=n(b0e,"A",{href:!0});var Lst=s(oq);eGo=r(Lst,"HubertForSequenceClassification"),Lst.forEach(t),oGo=r(b0e," (Hubert model)"),b0e.forEach(t),rGo=i(qo),F2=n(qo,"LI",{});var v0e=s(F2);jde=n(v0e,"STRONG",{});var Bst=s(jde);tGo=r(Bst,"sew"),Bst.forEach(t),aGo=r(v0e," \u2014 "),rq=n(v0e,"A",{href:!0});var xst=s(rq);nGo=r(xst,"SEWForSequenceClassification"),xst.forEach(t),sGo=r(v0e," (SEW model)"),v0e.forEach(t),lGo=i(qo),C2=n(qo,"LI",{});var T0e=s(C2);qde=n(T0e,"STRONG",{});var kst=s(qde);iGo=r(kst,"sew-d"),kst.forEach(t),dGo=r(T0e," \u2014 "),tq=n(T0e,"A",{href:!0});var Rst=s(tq);cGo=r(Rst,"SEWDForSequenceClassification"),Rst.forEach(t),fGo=r(T0e," (SEW-D model)"),T0e.forEach(t),mGo=i(qo),M2=n(qo,"LI",{});var F0e=s(M2);Gde=n(F0e,"STRONG",{});var Sst=s(Gde);gGo=r(Sst,"unispeech"),Sst.forEach(t),hGo=r(F0e," \u2014 "),aq=n(F0e,"A",{href:!0});var Pst=s(aq);pGo=r(Pst,"UniSpeechForSequenceClassification"),Pst.forEach(t),_Go=r(F0e," (UniSpeech model)"),F0e.forEach(t),uGo=i(qo),E2=n(qo,"LI",{});var C0e=s(E2);Ode=n(C0e,"STRONG",{});var $st=s(Ode);bGo=r($st,"unispeech-sat"),$st.forEach(t),vGo=r(C0e," \u2014 "),nq=n(C0e,"A",{href:!0});var Ist=s(nq);TGo=r(Ist,"UniSpeechSatForSequenceClassification"),Ist.forEach(t),FGo=r(C0e," (UniSpeechSat model)"),C0e.forEach(t),CGo=i(qo),y2=n(qo,"LI",{});var M0e=s(y2);Xde=n(M0e,"STRONG",{});var Dst=s(Xde);MGo=r(Dst,"wav2vec2"),Dst.forEach(t),EGo=r(M0e," \u2014 "),sq=n(M0e,"A",{href:!0});var Nst=s(sq);yGo=r(Nst,"Wav2Vec2ForSequenceClassification"),Nst.forEach(t),wGo=r(M0e," (Wav2Vec2 model)"),M0e.forEach(t),AGo=i(qo),w2=n(qo,"LI",{});var E0e=s(w2);Vde=n(E0e,"STRONG",{});var jst=s(Vde);LGo=r(jst,"wavlm"),jst.forEach(t),BGo=r(E0e," \u2014 "),lq=n(E0e,"A",{href:!0});var qst=s(lq);xGo=r(qst,"WavLMForSequenceClassification"),qst.forEach(t),kGo=r(E0e," (WavLM model)"),E0e.forEach(t),qo.forEach(t),RGo=i(Zt),A2=n(Zt,"P",{});var y0e=s(A2);SGo=r(y0e,"The model is set in evaluation mode by default using "),zde=n(y0e,"CODE",{});var Gst=s(zde);PGo=r(Gst,"model.eval()"),Gst.forEach(t),$Go=r(y0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wde=n(y0e,"CODE",{});var Ost=s(Wde);IGo=r(Ost,"model.train()"),Ost.forEach(t),y0e.forEach(t),DGo=i(Zt),Qde=n(Zt,"P",{});var Xst=s(Qde);NGo=r(Xst,"Examples:"),Xst.forEach(t),jGo=i(Zt),m(Dy.$$.fragment,Zt),Zt.forEach(t),vl.forEach(t),TRe=i(c),Nd=n(c,"H2",{class:!0});var BPe=s(Nd);L2=n(BPe,"A",{id:!0,class:!0,href:!0});var Vst=s(L2);Hde=n(Vst,"SPAN",{});var zst=s(Hde);m(Ny.$$.fragment,zst),zst.forEach(t),Vst.forEach(t),qGo=i(BPe),Ude=n(BPe,"SPAN",{});var Wst=s(Ude);GGo=r(Wst,"AutoModelForAudioFrameClassification"),Wst.forEach(t),BPe.forEach(t),FRe=i(c),cr=n(c,"DIV",{class:!0});var Fl=s(cr);m(jy.$$.fragment,Fl),OGo=i(Fl),jd=n(Fl,"P",{});var jW=s(jd);XGo=r(jW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),Jde=n(jW,"CODE",{});var Qst=s(Jde);VGo=r(Qst,"from_pretrained()"),Qst.forEach(t),zGo=r(jW,"class method or the "),Yde=n(jW,"CODE",{});var Hst=s(Yde);WGo=r(Hst,"from_config()"),Hst.forEach(t),QGo=r(jW,`class
method.`),jW.forEach(t),HGo=i(Fl),qy=n(Fl,"P",{});var xPe=s(qy);UGo=r(xPe,"This class cannot be instantiated directly using "),Kde=n(xPe,"CODE",{});var Ust=s(Kde);JGo=r(Ust,"__init__()"),Ust.forEach(t),YGo=r(xPe," (throws an error)."),xPe.forEach(t),KGo=i(Fl),at=n(Fl,"DIV",{class:!0});var Cl=s(at);m(Gy.$$.fragment,Cl),ZGo=i(Cl),Zde=n(Cl,"P",{});var Jst=s(Zde);eOo=r(Jst,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Jst.forEach(t),oOo=i(Cl),qd=n(Cl,"P",{});var qW=s(qd);rOo=r(qW,`Note:
Loading a model from its configuration file does `),ece=n(qW,"STRONG",{});var Yst=s(ece);tOo=r(Yst,"not"),Yst.forEach(t),aOo=r(qW,` load the model weights. It only affects the
model\u2019s configuration. Use `),oce=n(qW,"CODE",{});var Kst=s(oce);nOo=r(Kst,"from_pretrained()"),Kst.forEach(t),sOo=r(qW,"to load the model weights."),qW.forEach(t),lOo=i(Cl),rce=n(Cl,"P",{});var Zst=s(rce);iOo=r(Zst,"Examples:"),Zst.forEach(t),dOo=i(Cl),m(Oy.$$.fragment,Cl),Cl.forEach(t),cOo=i(Fl),Ye=n(Fl,"DIV",{class:!0});var ea=s(Ye);m(Xy.$$.fragment,ea),fOo=i(ea),tce=n(ea,"P",{});var elt=s(tce);mOo=r(elt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),elt.forEach(t),gOo=i(ea),an=n(ea,"P",{});var RM=s(an);hOo=r(RM,"The model class to instantiate is selected based on the "),ace=n(RM,"CODE",{});var olt=s(ace);pOo=r(olt,"model_type"),olt.forEach(t),_Oo=r(RM,` property of the config object (either
passed as an argument or loaded from `),nce=n(RM,"CODE",{});var rlt=s(nce);uOo=r(rlt,"pretrained_model_name_or_path"),rlt.forEach(t),bOo=r(RM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sce=n(RM,"CODE",{});var tlt=s(sce);vOo=r(tlt,"pretrained_model_name_or_path"),tlt.forEach(t),TOo=r(RM,":"),RM.forEach(t),FOo=i(ea),nn=n(ea,"UL",{});var SM=s(nn);B2=n(SM,"LI",{});var w0e=s(B2);lce=n(w0e,"STRONG",{});var alt=s(lce);COo=r(alt,"data2vec-audio"),alt.forEach(t),MOo=r(w0e," \u2014 "),iq=n(w0e,"A",{href:!0});var nlt=s(iq);EOo=r(nlt,"Data2VecAudioForAudioFrameClassification"),nlt.forEach(t),yOo=r(w0e," (Data2VecAudio model)"),w0e.forEach(t),wOo=i(SM),x2=n(SM,"LI",{});var A0e=s(x2);ice=n(A0e,"STRONG",{});var slt=s(ice);AOo=r(slt,"unispeech-sat"),slt.forEach(t),LOo=r(A0e," \u2014 "),dq=n(A0e,"A",{href:!0});var llt=s(dq);BOo=r(llt,"UniSpeechSatForAudioFrameClassification"),llt.forEach(t),xOo=r(A0e," (UniSpeechSat model)"),A0e.forEach(t),kOo=i(SM),k2=n(SM,"LI",{});var L0e=s(k2);dce=n(L0e,"STRONG",{});var ilt=s(dce);ROo=r(ilt,"wav2vec2"),ilt.forEach(t),SOo=r(L0e," \u2014 "),cq=n(L0e,"A",{href:!0});var dlt=s(cq);POo=r(dlt,"Wav2Vec2ForAudioFrameClassification"),dlt.forEach(t),$Oo=r(L0e," (Wav2Vec2 model)"),L0e.forEach(t),IOo=i(SM),R2=n(SM,"LI",{});var B0e=s(R2);cce=n(B0e,"STRONG",{});var clt=s(cce);DOo=r(clt,"wavlm"),clt.forEach(t),NOo=r(B0e," \u2014 "),fq=n(B0e,"A",{href:!0});var flt=s(fq);jOo=r(flt,"WavLMForAudioFrameClassification"),flt.forEach(t),qOo=r(B0e," (WavLM model)"),B0e.forEach(t),SM.forEach(t),GOo=i(ea),S2=n(ea,"P",{});var x0e=s(S2);OOo=r(x0e,"The model is set in evaluation mode by default using "),fce=n(x0e,"CODE",{});var mlt=s(fce);XOo=r(mlt,"model.eval()"),mlt.forEach(t),VOo=r(x0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mce=n(x0e,"CODE",{});var glt=s(mce);zOo=r(glt,"model.train()"),glt.forEach(t),x0e.forEach(t),WOo=i(ea),gce=n(ea,"P",{});var hlt=s(gce);QOo=r(hlt,"Examples:"),hlt.forEach(t),HOo=i(ea),m(Vy.$$.fragment,ea),ea.forEach(t),Fl.forEach(t),CRe=i(c),Gd=n(c,"H2",{class:!0});var kPe=s(Gd);P2=n(kPe,"A",{id:!0,class:!0,href:!0});var plt=s(P2);hce=n(plt,"SPAN",{});var _lt=s(hce);m(zy.$$.fragment,_lt),_lt.forEach(t),plt.forEach(t),UOo=i(kPe),pce=n(kPe,"SPAN",{});var ult=s(pce);JOo=r(ult,"AutoModelForCTC"),ult.forEach(t),kPe.forEach(t),MRe=i(c),fr=n(c,"DIV",{class:!0});var Ml=s(fr);m(Wy.$$.fragment,Ml),YOo=i(Ml),Od=n(Ml,"P",{});var GW=s(Od);KOo=r(GW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),_ce=n(GW,"CODE",{});var blt=s(_ce);ZOo=r(blt,"from_pretrained()"),blt.forEach(t),eXo=r(GW,"class method or the "),uce=n(GW,"CODE",{});var vlt=s(uce);oXo=r(vlt,"from_config()"),vlt.forEach(t),rXo=r(GW,`class
method.`),GW.forEach(t),tXo=i(Ml),Qy=n(Ml,"P",{});var RPe=s(Qy);aXo=r(RPe,"This class cannot be instantiated directly using "),bce=n(RPe,"CODE",{});var Tlt=s(bce);nXo=r(Tlt,"__init__()"),Tlt.forEach(t),sXo=r(RPe," (throws an error)."),RPe.forEach(t),lXo=i(Ml),nt=n(Ml,"DIV",{class:!0});var El=s(nt);m(Hy.$$.fragment,El),iXo=i(El),vce=n(El,"P",{});var Flt=s(vce);dXo=r(Flt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Flt.forEach(t),cXo=i(El),Xd=n(El,"P",{});var OW=s(Xd);fXo=r(OW,`Note:
Loading a model from its configuration file does `),Tce=n(OW,"STRONG",{});var Clt=s(Tce);mXo=r(Clt,"not"),Clt.forEach(t),gXo=r(OW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Fce=n(OW,"CODE",{});var Mlt=s(Fce);hXo=r(Mlt,"from_pretrained()"),Mlt.forEach(t),pXo=r(OW,"to load the model weights."),OW.forEach(t),_Xo=i(El),Cce=n(El,"P",{});var Elt=s(Cce);uXo=r(Elt,"Examples:"),Elt.forEach(t),bXo=i(El),m(Uy.$$.fragment,El),El.forEach(t),vXo=i(Ml),Ke=n(Ml,"DIV",{class:!0});var oa=s(Ke);m(Jy.$$.fragment,oa),TXo=i(oa),Mce=n(oa,"P",{});var ylt=s(Mce);FXo=r(ylt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),ylt.forEach(t),CXo=i(oa),sn=n(oa,"P",{});var PM=s(sn);MXo=r(PM,"The model class to instantiate is selected based on the "),Ece=n(PM,"CODE",{});var wlt=s(Ece);EXo=r(wlt,"model_type"),wlt.forEach(t),yXo=r(PM,` property of the config object (either
passed as an argument or loaded from `),yce=n(PM,"CODE",{});var Alt=s(yce);wXo=r(Alt,"pretrained_model_name_or_path"),Alt.forEach(t),AXo=r(PM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wce=n(PM,"CODE",{});var Llt=s(wce);LXo=r(Llt,"pretrained_model_name_or_path"),Llt.forEach(t),BXo=r(PM,":"),PM.forEach(t),xXo=i(oa),Re=n(oa,"UL",{});var Go=s(Re);$2=n(Go,"LI",{});var k0e=s($2);Ace=n(k0e,"STRONG",{});var Blt=s(Ace);kXo=r(Blt,"data2vec-audio"),Blt.forEach(t),RXo=r(k0e," \u2014 "),mq=n(k0e,"A",{href:!0});var xlt=s(mq);SXo=r(xlt,"Data2VecAudioForCTC"),xlt.forEach(t),PXo=r(k0e," (Data2VecAudio model)"),k0e.forEach(t),$Xo=i(Go),I2=n(Go,"LI",{});var R0e=s(I2);Lce=n(R0e,"STRONG",{});var klt=s(Lce);IXo=r(klt,"hubert"),klt.forEach(t),DXo=r(R0e," \u2014 "),gq=n(R0e,"A",{href:!0});var Rlt=s(gq);NXo=r(Rlt,"HubertForCTC"),Rlt.forEach(t),jXo=r(R0e," (Hubert model)"),R0e.forEach(t),qXo=i(Go),D2=n(Go,"LI",{});var S0e=s(D2);Bce=n(S0e,"STRONG",{});var Slt=s(Bce);GXo=r(Slt,"sew"),Slt.forEach(t),OXo=r(S0e," \u2014 "),hq=n(S0e,"A",{href:!0});var Plt=s(hq);XXo=r(Plt,"SEWForCTC"),Plt.forEach(t),VXo=r(S0e," (SEW model)"),S0e.forEach(t),zXo=i(Go),N2=n(Go,"LI",{});var P0e=s(N2);xce=n(P0e,"STRONG",{});var $lt=s(xce);WXo=r($lt,"sew-d"),$lt.forEach(t),QXo=r(P0e," \u2014 "),pq=n(P0e,"A",{href:!0});var Ilt=s(pq);HXo=r(Ilt,"SEWDForCTC"),Ilt.forEach(t),UXo=r(P0e," (SEW-D model)"),P0e.forEach(t),JXo=i(Go),j2=n(Go,"LI",{});var $0e=s(j2);kce=n($0e,"STRONG",{});var Dlt=s(kce);YXo=r(Dlt,"unispeech"),Dlt.forEach(t),KXo=r($0e," \u2014 "),_q=n($0e,"A",{href:!0});var Nlt=s(_q);ZXo=r(Nlt,"UniSpeechForCTC"),Nlt.forEach(t),eVo=r($0e," (UniSpeech model)"),$0e.forEach(t),oVo=i(Go),q2=n(Go,"LI",{});var I0e=s(q2);Rce=n(I0e,"STRONG",{});var jlt=s(Rce);rVo=r(jlt,"unispeech-sat"),jlt.forEach(t),tVo=r(I0e," \u2014 "),uq=n(I0e,"A",{href:!0});var qlt=s(uq);aVo=r(qlt,"UniSpeechSatForCTC"),qlt.forEach(t),nVo=r(I0e," (UniSpeechSat model)"),I0e.forEach(t),sVo=i(Go),G2=n(Go,"LI",{});var D0e=s(G2);Sce=n(D0e,"STRONG",{});var Glt=s(Sce);lVo=r(Glt,"wav2vec2"),Glt.forEach(t),iVo=r(D0e," \u2014 "),bq=n(D0e,"A",{href:!0});var Olt=s(bq);dVo=r(Olt,"Wav2Vec2ForCTC"),Olt.forEach(t),cVo=r(D0e," (Wav2Vec2 model)"),D0e.forEach(t),fVo=i(Go),O2=n(Go,"LI",{});var N0e=s(O2);Pce=n(N0e,"STRONG",{});var Xlt=s(Pce);mVo=r(Xlt,"wavlm"),Xlt.forEach(t),gVo=r(N0e," \u2014 "),vq=n(N0e,"A",{href:!0});var Vlt=s(vq);hVo=r(Vlt,"WavLMForCTC"),Vlt.forEach(t),pVo=r(N0e," (WavLM model)"),N0e.forEach(t),Go.forEach(t),_Vo=i(oa),X2=n(oa,"P",{});var j0e=s(X2);uVo=r(j0e,"The model is set in evaluation mode by default using "),$ce=n(j0e,"CODE",{});var zlt=s($ce);bVo=r(zlt,"model.eval()"),zlt.forEach(t),vVo=r(j0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ice=n(j0e,"CODE",{});var Wlt=s(Ice);TVo=r(Wlt,"model.train()"),Wlt.forEach(t),j0e.forEach(t),FVo=i(oa),Dce=n(oa,"P",{});var Qlt=s(Dce);CVo=r(Qlt,"Examples:"),Qlt.forEach(t),MVo=i(oa),m(Yy.$$.fragment,oa),oa.forEach(t),Ml.forEach(t),ERe=i(c),Vd=n(c,"H2",{class:!0});var SPe=s(Vd);V2=n(SPe,"A",{id:!0,class:!0,href:!0});var Hlt=s(V2);Nce=n(Hlt,"SPAN",{});var Ult=s(Nce);m(Ky.$$.fragment,Ult),Ult.forEach(t),Hlt.forEach(t),EVo=i(SPe),jce=n(SPe,"SPAN",{});var Jlt=s(jce);yVo=r(Jlt,"AutoModelForSpeechSeq2Seq"),Jlt.forEach(t),SPe.forEach(t),yRe=i(c),mr=n(c,"DIV",{class:!0});var yl=s(mr);m(Zy.$$.fragment,yl),wVo=i(yl),zd=n(yl,"P",{});var XW=s(zd);AVo=r(XW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),qce=n(XW,"CODE",{});var Ylt=s(qce);LVo=r(Ylt,"from_pretrained()"),Ylt.forEach(t),BVo=r(XW,"class method or the "),Gce=n(XW,"CODE",{});var Klt=s(Gce);xVo=r(Klt,"from_config()"),Klt.forEach(t),kVo=r(XW,`class
method.`),XW.forEach(t),RVo=i(yl),ew=n(yl,"P",{});var PPe=s(ew);SVo=r(PPe,"This class cannot be instantiated directly using "),Oce=n(PPe,"CODE",{});var Zlt=s(Oce);PVo=r(Zlt,"__init__()"),Zlt.forEach(t),$Vo=r(PPe," (throws an error)."),PPe.forEach(t),IVo=i(yl),st=n(yl,"DIV",{class:!0});var wl=s(st);m(ow.$$.fragment,wl),DVo=i(wl),Xce=n(wl,"P",{});var eit=s(Xce);NVo=r(eit,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),eit.forEach(t),jVo=i(wl),Wd=n(wl,"P",{});var VW=s(Wd);qVo=r(VW,`Note:
Loading a model from its configuration file does `),Vce=n(VW,"STRONG",{});var oit=s(Vce);GVo=r(oit,"not"),oit.forEach(t),OVo=r(VW,` load the model weights. It only affects the
model\u2019s configuration. Use `),zce=n(VW,"CODE",{});var rit=s(zce);XVo=r(rit,"from_pretrained()"),rit.forEach(t),VVo=r(VW,"to load the model weights."),VW.forEach(t),zVo=i(wl),Wce=n(wl,"P",{});var tit=s(Wce);WVo=r(tit,"Examples:"),tit.forEach(t),QVo=i(wl),m(rw.$$.fragment,wl),wl.forEach(t),HVo=i(yl),Ze=n(yl,"DIV",{class:!0});var ra=s(Ze);m(tw.$$.fragment,ra),UVo=i(ra),Qce=n(ra,"P",{});var ait=s(Qce);JVo=r(ait,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),ait.forEach(t),YVo=i(ra),ln=n(ra,"P",{});var $M=s(ln);KVo=r($M,"The model class to instantiate is selected based on the "),Hce=n($M,"CODE",{});var nit=s(Hce);ZVo=r(nit,"model_type"),nit.forEach(t),ezo=r($M,` property of the config object (either
passed as an argument or loaded from `),Uce=n($M,"CODE",{});var sit=s(Uce);ozo=r(sit,"pretrained_model_name_or_path"),sit.forEach(t),rzo=r($M,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jce=n($M,"CODE",{});var lit=s(Jce);tzo=r(lit,"pretrained_model_name_or_path"),lit.forEach(t),azo=r($M,":"),$M.forEach(t),nzo=i(ra),aw=n(ra,"UL",{});var $Pe=s(aw);z2=n($Pe,"LI",{});var q0e=s(z2);Yce=n(q0e,"STRONG",{});var iit=s(Yce);szo=r(iit,"speech-encoder-decoder"),iit.forEach(t),lzo=r(q0e," \u2014 "),Tq=n(q0e,"A",{href:!0});var dit=s(Tq);izo=r(dit,"SpeechEncoderDecoderModel"),dit.forEach(t),dzo=r(q0e," (Speech Encoder decoder model)"),q0e.forEach(t),czo=i($Pe),W2=n($Pe,"LI",{});var G0e=s(W2);Kce=n(G0e,"STRONG",{});var cit=s(Kce);fzo=r(cit,"speech_to_text"),cit.forEach(t),mzo=r(G0e," \u2014 "),Fq=n(G0e,"A",{href:!0});var fit=s(Fq);gzo=r(fit,"Speech2TextForConditionalGeneration"),fit.forEach(t),hzo=r(G0e," (Speech2Text model)"),G0e.forEach(t),$Pe.forEach(t),pzo=i(ra),Q2=n(ra,"P",{});var O0e=s(Q2);_zo=r(O0e,"The model is set in evaluation mode by default using "),Zce=n(O0e,"CODE",{});var mit=s(Zce);uzo=r(mit,"model.eval()"),mit.forEach(t),bzo=r(O0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),efe=n(O0e,"CODE",{});var git=s(efe);vzo=r(git,"model.train()"),git.forEach(t),O0e.forEach(t),Tzo=i(ra),ofe=n(ra,"P",{});var hit=s(ofe);Fzo=r(hit,"Examples:"),hit.forEach(t),Czo=i(ra),m(nw.$$.fragment,ra),ra.forEach(t),yl.forEach(t),wRe=i(c),Qd=n(c,"H2",{class:!0});var IPe=s(Qd);H2=n(IPe,"A",{id:!0,class:!0,href:!0});var pit=s(H2);rfe=n(pit,"SPAN",{});var _it=s(rfe);m(sw.$$.fragment,_it),_it.forEach(t),pit.forEach(t),Mzo=i(IPe),tfe=n(IPe,"SPAN",{});var uit=s(tfe);Ezo=r(uit,"AutoModelForAudioXVector"),uit.forEach(t),IPe.forEach(t),ARe=i(c),gr=n(c,"DIV",{class:!0});var Al=s(gr);m(lw.$$.fragment,Al),yzo=i(Al),Hd=n(Al,"P",{});var zW=s(Hd);wzo=r(zW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),afe=n(zW,"CODE",{});var bit=s(afe);Azo=r(bit,"from_pretrained()"),bit.forEach(t),Lzo=r(zW,"class method or the "),nfe=n(zW,"CODE",{});var vit=s(nfe);Bzo=r(vit,"from_config()"),vit.forEach(t),xzo=r(zW,`class
method.`),zW.forEach(t),kzo=i(Al),iw=n(Al,"P",{});var DPe=s(iw);Rzo=r(DPe,"This class cannot be instantiated directly using "),sfe=n(DPe,"CODE",{});var Tit=s(sfe);Szo=r(Tit,"__init__()"),Tit.forEach(t),Pzo=r(DPe," (throws an error)."),DPe.forEach(t),$zo=i(Al),lt=n(Al,"DIV",{class:!0});var Ll=s(lt);m(dw.$$.fragment,Ll),Izo=i(Ll),lfe=n(Ll,"P",{});var Fit=s(lfe);Dzo=r(Fit,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Fit.forEach(t),Nzo=i(Ll),Ud=n(Ll,"P",{});var WW=s(Ud);jzo=r(WW,`Note:
Loading a model from its configuration file does `),ife=n(WW,"STRONG",{});var Cit=s(ife);qzo=r(Cit,"not"),Cit.forEach(t),Gzo=r(WW,` load the model weights. It only affects the
model\u2019s configuration. Use `),dfe=n(WW,"CODE",{});var Mit=s(dfe);Ozo=r(Mit,"from_pretrained()"),Mit.forEach(t),Xzo=r(WW,"to load the model weights."),WW.forEach(t),Vzo=i(Ll),cfe=n(Ll,"P",{});var Eit=s(cfe);zzo=r(Eit,"Examples:"),Eit.forEach(t),Wzo=i(Ll),m(cw.$$.fragment,Ll),Ll.forEach(t),Qzo=i(Al),eo=n(Al,"DIV",{class:!0});var ta=s(eo);m(fw.$$.fragment,ta),Hzo=i(ta),ffe=n(ta,"P",{});var yit=s(ffe);Uzo=r(yit,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),yit.forEach(t),Jzo=i(ta),dn=n(ta,"P",{});var IM=s(dn);Yzo=r(IM,"The model class to instantiate is selected based on the "),mfe=n(IM,"CODE",{});var wit=s(mfe);Kzo=r(wit,"model_type"),wit.forEach(t),Zzo=r(IM,` property of the config object (either
passed as an argument or loaded from `),gfe=n(IM,"CODE",{});var Ait=s(gfe);eWo=r(Ait,"pretrained_model_name_or_path"),Ait.forEach(t),oWo=r(IM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hfe=n(IM,"CODE",{});var Lit=s(hfe);rWo=r(Lit,"pretrained_model_name_or_path"),Lit.forEach(t),tWo=r(IM,":"),IM.forEach(t),aWo=i(ta),cn=n(ta,"UL",{});var DM=s(cn);U2=n(DM,"LI",{});var X0e=s(U2);pfe=n(X0e,"STRONG",{});var Bit=s(pfe);nWo=r(Bit,"data2vec-audio"),Bit.forEach(t),sWo=r(X0e," \u2014 "),Cq=n(X0e,"A",{href:!0});var xit=s(Cq);lWo=r(xit,"Data2VecAudioForXVector"),xit.forEach(t),iWo=r(X0e," (Data2VecAudio model)"),X0e.forEach(t),dWo=i(DM),J2=n(DM,"LI",{});var V0e=s(J2);_fe=n(V0e,"STRONG",{});var kit=s(_fe);cWo=r(kit,"unispeech-sat"),kit.forEach(t),fWo=r(V0e," \u2014 "),Mq=n(V0e,"A",{href:!0});var Rit=s(Mq);mWo=r(Rit,"UniSpeechSatForXVector"),Rit.forEach(t),gWo=r(V0e," (UniSpeechSat model)"),V0e.forEach(t),hWo=i(DM),Y2=n(DM,"LI",{});var z0e=s(Y2);ufe=n(z0e,"STRONG",{});var Sit=s(ufe);pWo=r(Sit,"wav2vec2"),Sit.forEach(t),_Wo=r(z0e," \u2014 "),Eq=n(z0e,"A",{href:!0});var Pit=s(Eq);uWo=r(Pit,"Wav2Vec2ForXVector"),Pit.forEach(t),bWo=r(z0e," (Wav2Vec2 model)"),z0e.forEach(t),vWo=i(DM),K2=n(DM,"LI",{});var W0e=s(K2);bfe=n(W0e,"STRONG",{});var $it=s(bfe);TWo=r($it,"wavlm"),$it.forEach(t),FWo=r(W0e," \u2014 "),yq=n(W0e,"A",{href:!0});var Iit=s(yq);CWo=r(Iit,"WavLMForXVector"),Iit.forEach(t),MWo=r(W0e," (WavLM model)"),W0e.forEach(t),DM.forEach(t),EWo=i(ta),Z2=n(ta,"P",{});var Q0e=s(Z2);yWo=r(Q0e,"The model is set in evaluation mode by default using "),vfe=n(Q0e,"CODE",{});var Dit=s(vfe);wWo=r(Dit,"model.eval()"),Dit.forEach(t),AWo=r(Q0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tfe=n(Q0e,"CODE",{});var Nit=s(Tfe);LWo=r(Nit,"model.train()"),Nit.forEach(t),Q0e.forEach(t),BWo=i(ta),Ffe=n(ta,"P",{});var jit=s(Ffe);xWo=r(jit,"Examples:"),jit.forEach(t),kWo=i(ta),m(mw.$$.fragment,ta),ta.forEach(t),Al.forEach(t),LRe=i(c),Jd=n(c,"H2",{class:!0});var NPe=s(Jd);ev=n(NPe,"A",{id:!0,class:!0,href:!0});var qit=s(ev);Cfe=n(qit,"SPAN",{});var Git=s(Cfe);m(gw.$$.fragment,Git),Git.forEach(t),qit.forEach(t),RWo=i(NPe),Mfe=n(NPe,"SPAN",{});var Oit=s(Mfe);SWo=r(Oit,"AutoModelForMaskedImageModeling"),Oit.forEach(t),NPe.forEach(t),BRe=i(c),hr=n(c,"DIV",{class:!0});var Bl=s(hr);m(hw.$$.fragment,Bl),PWo=i(Bl),Yd=n(Bl,"P",{});var QW=s(Yd);$Wo=r(QW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Efe=n(QW,"CODE",{});var Xit=s(Efe);IWo=r(Xit,"from_pretrained()"),Xit.forEach(t),DWo=r(QW,"class method or the "),yfe=n(QW,"CODE",{});var Vit=s(yfe);NWo=r(Vit,"from_config()"),Vit.forEach(t),jWo=r(QW,`class
method.`),QW.forEach(t),qWo=i(Bl),pw=n(Bl,"P",{});var jPe=s(pw);GWo=r(jPe,"This class cannot be instantiated directly using "),wfe=n(jPe,"CODE",{});var zit=s(wfe);OWo=r(zit,"__init__()"),zit.forEach(t),XWo=r(jPe," (throws an error)."),jPe.forEach(t),VWo=i(Bl),it=n(Bl,"DIV",{class:!0});var xl=s(it);m(_w.$$.fragment,xl),zWo=i(xl),Afe=n(xl,"P",{});var Wit=s(Afe);WWo=r(Wit,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Wit.forEach(t),QWo=i(xl),Kd=n(xl,"P",{});var HW=s(Kd);HWo=r(HW,`Note:
Loading a model from its configuration file does `),Lfe=n(HW,"STRONG",{});var Qit=s(Lfe);UWo=r(Qit,"not"),Qit.forEach(t),JWo=r(HW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Bfe=n(HW,"CODE",{});var Hit=s(Bfe);YWo=r(Hit,"from_pretrained()"),Hit.forEach(t),KWo=r(HW,"to load the model weights."),HW.forEach(t),ZWo=i(xl),xfe=n(xl,"P",{});var Uit=s(xfe);eQo=r(Uit,"Examples:"),Uit.forEach(t),oQo=i(xl),m(uw.$$.fragment,xl),xl.forEach(t),rQo=i(Bl),oo=n(Bl,"DIV",{class:!0});var aa=s(oo);m(bw.$$.fragment,aa),tQo=i(aa),kfe=n(aa,"P",{});var Jit=s(kfe);aQo=r(Jit,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Jit.forEach(t),nQo=i(aa),fn=n(aa,"P",{});var NM=s(fn);sQo=r(NM,"The model class to instantiate is selected based on the "),Rfe=n(NM,"CODE",{});var Yit=s(Rfe);lQo=r(Yit,"model_type"),Yit.forEach(t),iQo=r(NM,` property of the config object (either
passed as an argument or loaded from `),Sfe=n(NM,"CODE",{});var Kit=s(Sfe);dQo=r(Kit,"pretrained_model_name_or_path"),Kit.forEach(t),cQo=r(NM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pfe=n(NM,"CODE",{});var Zit=s(Pfe);fQo=r(Zit,"pretrained_model_name_or_path"),Zit.forEach(t),mQo=r(NM,":"),NM.forEach(t),gQo=i(aa),Zd=n(aa,"UL",{});var UW=s(Zd);ov=n(UW,"LI",{});var H0e=s(ov);$fe=n(H0e,"STRONG",{});var edt=s($fe);hQo=r(edt,"deit"),edt.forEach(t),pQo=r(H0e," \u2014 "),wq=n(H0e,"A",{href:!0});var odt=s(wq);_Qo=r(odt,"DeiTForMaskedImageModeling"),odt.forEach(t),uQo=r(H0e," (DeiT model)"),H0e.forEach(t),bQo=i(UW),rv=n(UW,"LI",{});var U0e=s(rv);Ife=n(U0e,"STRONG",{});var rdt=s(Ife);vQo=r(rdt,"swin"),rdt.forEach(t),TQo=r(U0e," \u2014 "),Aq=n(U0e,"A",{href:!0});var tdt=s(Aq);FQo=r(tdt,"SwinForMaskedImageModeling"),tdt.forEach(t),CQo=r(U0e," (Swin model)"),U0e.forEach(t),MQo=i(UW),tv=n(UW,"LI",{});var J0e=s(tv);Dfe=n(J0e,"STRONG",{});var adt=s(Dfe);EQo=r(adt,"vit"),adt.forEach(t),yQo=r(J0e," \u2014 "),Lq=n(J0e,"A",{href:!0});var ndt=s(Lq);wQo=r(ndt,"ViTForMaskedImageModeling"),ndt.forEach(t),AQo=r(J0e," (ViT model)"),J0e.forEach(t),UW.forEach(t),LQo=i(aa),av=n(aa,"P",{});var Y0e=s(av);BQo=r(Y0e,"The model is set in evaluation mode by default using "),Nfe=n(Y0e,"CODE",{});var sdt=s(Nfe);xQo=r(sdt,"model.eval()"),sdt.forEach(t),kQo=r(Y0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jfe=n(Y0e,"CODE",{});var ldt=s(jfe);RQo=r(ldt,"model.train()"),ldt.forEach(t),Y0e.forEach(t),SQo=i(aa),qfe=n(aa,"P",{});var idt=s(qfe);PQo=r(idt,"Examples:"),idt.forEach(t),$Qo=i(aa),m(vw.$$.fragment,aa),aa.forEach(t),Bl.forEach(t),xRe=i(c),ec=n(c,"H2",{class:!0});var qPe=s(ec);nv=n(qPe,"A",{id:!0,class:!0,href:!0});var ddt=s(nv);Gfe=n(ddt,"SPAN",{});var cdt=s(Gfe);m(Tw.$$.fragment,cdt),cdt.forEach(t),ddt.forEach(t),IQo=i(qPe),Ofe=n(qPe,"SPAN",{});var fdt=s(Ofe);DQo=r(fdt,"AutoModelForObjectDetection"),fdt.forEach(t),qPe.forEach(t),kRe=i(c),pr=n(c,"DIV",{class:!0});var kl=s(pr);m(Fw.$$.fragment,kl),NQo=i(kl),oc=n(kl,"P",{});var JW=s(oc);jQo=r(JW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Xfe=n(JW,"CODE",{});var mdt=s(Xfe);qQo=r(mdt,"from_pretrained()"),mdt.forEach(t),GQo=r(JW,"class method or the "),Vfe=n(JW,"CODE",{});var gdt=s(Vfe);OQo=r(gdt,"from_config()"),gdt.forEach(t),XQo=r(JW,`class
method.`),JW.forEach(t),VQo=i(kl),Cw=n(kl,"P",{});var GPe=s(Cw);zQo=r(GPe,"This class cannot be instantiated directly using "),zfe=n(GPe,"CODE",{});var hdt=s(zfe);WQo=r(hdt,"__init__()"),hdt.forEach(t),QQo=r(GPe," (throws an error)."),GPe.forEach(t),HQo=i(kl),dt=n(kl,"DIV",{class:!0});var Rl=s(dt);m(Mw.$$.fragment,Rl),UQo=i(Rl),Wfe=n(Rl,"P",{});var pdt=s(Wfe);JQo=r(pdt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),pdt.forEach(t),YQo=i(Rl),rc=n(Rl,"P",{});var YW=s(rc);KQo=r(YW,`Note:
Loading a model from its configuration file does `),Qfe=n(YW,"STRONG",{});var _dt=s(Qfe);ZQo=r(_dt,"not"),_dt.forEach(t),eHo=r(YW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Hfe=n(YW,"CODE",{});var udt=s(Hfe);oHo=r(udt,"from_pretrained()"),udt.forEach(t),rHo=r(YW,"to load the model weights."),YW.forEach(t),tHo=i(Rl),Ufe=n(Rl,"P",{});var bdt=s(Ufe);aHo=r(bdt,"Examples:"),bdt.forEach(t),nHo=i(Rl),m(Ew.$$.fragment,Rl),Rl.forEach(t),sHo=i(kl),ro=n(kl,"DIV",{class:!0});var na=s(ro);m(yw.$$.fragment,na),lHo=i(na),Jfe=n(na,"P",{});var vdt=s(Jfe);iHo=r(vdt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),vdt.forEach(t),dHo=i(na),mn=n(na,"P",{});var jM=s(mn);cHo=r(jM,"The model class to instantiate is selected based on the "),Yfe=n(jM,"CODE",{});var Tdt=s(Yfe);fHo=r(Tdt,"model_type"),Tdt.forEach(t),mHo=r(jM,` property of the config object (either
passed as an argument or loaded from `),Kfe=n(jM,"CODE",{});var Fdt=s(Kfe);gHo=r(Fdt,"pretrained_model_name_or_path"),Fdt.forEach(t),hHo=r(jM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zfe=n(jM,"CODE",{});var Cdt=s(Zfe);pHo=r(Cdt,"pretrained_model_name_or_path"),Cdt.forEach(t),_Ho=r(jM,":"),jM.forEach(t),uHo=i(na),eme=n(na,"UL",{});var Mdt=s(eme);sv=n(Mdt,"LI",{});var K0e=s(sv);ome=n(K0e,"STRONG",{});var Edt=s(ome);bHo=r(Edt,"detr"),Edt.forEach(t),vHo=r(K0e," \u2014 "),Bq=n(K0e,"A",{href:!0});var ydt=s(Bq);THo=r(ydt,"DetrForObjectDetection"),ydt.forEach(t),FHo=r(K0e," (DETR model)"),K0e.forEach(t),Mdt.forEach(t),CHo=i(na),lv=n(na,"P",{});var Z0e=s(lv);MHo=r(Z0e,"The model is set in evaluation mode by default using "),rme=n(Z0e,"CODE",{});var wdt=s(rme);EHo=r(wdt,"model.eval()"),wdt.forEach(t),yHo=r(Z0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tme=n(Z0e,"CODE",{});var Adt=s(tme);wHo=r(Adt,"model.train()"),Adt.forEach(t),Z0e.forEach(t),AHo=i(na),ame=n(na,"P",{});var Ldt=s(ame);LHo=r(Ldt,"Examples:"),Ldt.forEach(t),BHo=i(na),m(ww.$$.fragment,na),na.forEach(t),kl.forEach(t),RRe=i(c),tc=n(c,"H2",{class:!0});var OPe=s(tc);iv=n(OPe,"A",{id:!0,class:!0,href:!0});var Bdt=s(iv);nme=n(Bdt,"SPAN",{});var xdt=s(nme);m(Aw.$$.fragment,xdt),xdt.forEach(t),Bdt.forEach(t),xHo=i(OPe),sme=n(OPe,"SPAN",{});var kdt=s(sme);kHo=r(kdt,"AutoModelForImageSegmentation"),kdt.forEach(t),OPe.forEach(t),SRe=i(c),_r=n(c,"DIV",{class:!0});var Sl=s(_r);m(Lw.$$.fragment,Sl),RHo=i(Sl),ac=n(Sl,"P",{});var KW=s(ac);SHo=r(KW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),lme=n(KW,"CODE",{});var Rdt=s(lme);PHo=r(Rdt,"from_pretrained()"),Rdt.forEach(t),$Ho=r(KW,"class method or the "),ime=n(KW,"CODE",{});var Sdt=s(ime);IHo=r(Sdt,"from_config()"),Sdt.forEach(t),DHo=r(KW,`class
method.`),KW.forEach(t),NHo=i(Sl),Bw=n(Sl,"P",{});var XPe=s(Bw);jHo=r(XPe,"This class cannot be instantiated directly using "),dme=n(XPe,"CODE",{});var Pdt=s(dme);qHo=r(Pdt,"__init__()"),Pdt.forEach(t),GHo=r(XPe," (throws an error)."),XPe.forEach(t),OHo=i(Sl),ct=n(Sl,"DIV",{class:!0});var Pl=s(ct);m(xw.$$.fragment,Pl),XHo=i(Pl),cme=n(Pl,"P",{});var $dt=s(cme);VHo=r($dt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),$dt.forEach(t),zHo=i(Pl),nc=n(Pl,"P",{});var ZW=s(nc);WHo=r(ZW,`Note:
Loading a model from its configuration file does `),fme=n(ZW,"STRONG",{});var Idt=s(fme);QHo=r(Idt,"not"),Idt.forEach(t),HHo=r(ZW,` load the model weights. It only affects the
model\u2019s configuration. Use `),mme=n(ZW,"CODE",{});var Ddt=s(mme);UHo=r(Ddt,"from_pretrained()"),Ddt.forEach(t),JHo=r(ZW,"to load the model weights."),ZW.forEach(t),YHo=i(Pl),gme=n(Pl,"P",{});var Ndt=s(gme);KHo=r(Ndt,"Examples:"),Ndt.forEach(t),ZHo=i(Pl),m(kw.$$.fragment,Pl),Pl.forEach(t),eUo=i(Sl),to=n(Sl,"DIV",{class:!0});var sa=s(to);m(Rw.$$.fragment,sa),oUo=i(sa),hme=n(sa,"P",{});var jdt=s(hme);rUo=r(jdt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),jdt.forEach(t),tUo=i(sa),gn=n(sa,"P",{});var qM=s(gn);aUo=r(qM,"The model class to instantiate is selected based on the "),pme=n(qM,"CODE",{});var qdt=s(pme);nUo=r(qdt,"model_type"),qdt.forEach(t),sUo=r(qM,` property of the config object (either
passed as an argument or loaded from `),_me=n(qM,"CODE",{});var Gdt=s(_me);lUo=r(Gdt,"pretrained_model_name_or_path"),Gdt.forEach(t),iUo=r(qM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ume=n(qM,"CODE",{});var Odt=s(ume);dUo=r(Odt,"pretrained_model_name_or_path"),Odt.forEach(t),cUo=r(qM,":"),qM.forEach(t),fUo=i(sa),bme=n(sa,"UL",{});var Xdt=s(bme);dv=n(Xdt,"LI",{});var eLe=s(dv);vme=n(eLe,"STRONG",{});var Vdt=s(vme);mUo=r(Vdt,"detr"),Vdt.forEach(t),gUo=r(eLe," \u2014 "),xq=n(eLe,"A",{href:!0});var zdt=s(xq);hUo=r(zdt,"DetrForSegmentation"),zdt.forEach(t),pUo=r(eLe," (DETR model)"),eLe.forEach(t),Xdt.forEach(t),_Uo=i(sa),cv=n(sa,"P",{});var oLe=s(cv);uUo=r(oLe,"The model is set in evaluation mode by default using "),Tme=n(oLe,"CODE",{});var Wdt=s(Tme);bUo=r(Wdt,"model.eval()"),Wdt.forEach(t),vUo=r(oLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fme=n(oLe,"CODE",{});var Qdt=s(Fme);TUo=r(Qdt,"model.train()"),Qdt.forEach(t),oLe.forEach(t),FUo=i(sa),Cme=n(sa,"P",{});var Hdt=s(Cme);CUo=r(Hdt,"Examples:"),Hdt.forEach(t),MUo=i(sa),m(Sw.$$.fragment,sa),sa.forEach(t),Sl.forEach(t),PRe=i(c),sc=n(c,"H2",{class:!0});var VPe=s(sc);fv=n(VPe,"A",{id:!0,class:!0,href:!0});var Udt=s(fv);Mme=n(Udt,"SPAN",{});var Jdt=s(Mme);m(Pw.$$.fragment,Jdt),Jdt.forEach(t),Udt.forEach(t),EUo=i(VPe),Eme=n(VPe,"SPAN",{});var Ydt=s(Eme);yUo=r(Ydt,"AutoModelForSemanticSegmentation"),Ydt.forEach(t),VPe.forEach(t),$Re=i(c),ur=n(c,"DIV",{class:!0});var $l=s(ur);m($w.$$.fragment,$l),wUo=i($l),lc=n($l,"P",{});var eQ=s(lc);AUo=r(eQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),yme=n(eQ,"CODE",{});var Kdt=s(yme);LUo=r(Kdt,"from_pretrained()"),Kdt.forEach(t),BUo=r(eQ,"class method or the "),wme=n(eQ,"CODE",{});var Zdt=s(wme);xUo=r(Zdt,"from_config()"),Zdt.forEach(t),kUo=r(eQ,`class
method.`),eQ.forEach(t),RUo=i($l),Iw=n($l,"P",{});var zPe=s(Iw);SUo=r(zPe,"This class cannot be instantiated directly using "),Ame=n(zPe,"CODE",{});var ect=s(Ame);PUo=r(ect,"__init__()"),ect.forEach(t),$Uo=r(zPe," (throws an error)."),zPe.forEach(t),IUo=i($l),ft=n($l,"DIV",{class:!0});var Il=s(ft);m(Dw.$$.fragment,Il),DUo=i(Il),Lme=n(Il,"P",{});var oct=s(Lme);NUo=r(oct,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),oct.forEach(t),jUo=i(Il),ic=n(Il,"P",{});var oQ=s(ic);qUo=r(oQ,`Note:
Loading a model from its configuration file does `),Bme=n(oQ,"STRONG",{});var rct=s(Bme);GUo=r(rct,"not"),rct.forEach(t),OUo=r(oQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),xme=n(oQ,"CODE",{});var tct=s(xme);XUo=r(tct,"from_pretrained()"),tct.forEach(t),VUo=r(oQ,"to load the model weights."),oQ.forEach(t),zUo=i(Il),kme=n(Il,"P",{});var act=s(kme);WUo=r(act,"Examples:"),act.forEach(t),QUo=i(Il),m(Nw.$$.fragment,Il),Il.forEach(t),HUo=i($l),ao=n($l,"DIV",{class:!0});var la=s(ao);m(jw.$$.fragment,la),UUo=i(la),Rme=n(la,"P",{});var nct=s(Rme);JUo=r(nct,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),nct.forEach(t),YUo=i(la),hn=n(la,"P",{});var GM=s(hn);KUo=r(GM,"The model class to instantiate is selected based on the "),Sme=n(GM,"CODE",{});var sct=s(Sme);ZUo=r(sct,"model_type"),sct.forEach(t),eJo=r(GM,` property of the config object (either
passed as an argument or loaded from `),Pme=n(GM,"CODE",{});var lct=s(Pme);oJo=r(lct,"pretrained_model_name_or_path"),lct.forEach(t),rJo=r(GM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$me=n(GM,"CODE",{});var ict=s($me);tJo=r(ict,"pretrained_model_name_or_path"),ict.forEach(t),aJo=r(GM,":"),GM.forEach(t),nJo=i(la),dc=n(la,"UL",{});var rQ=s(dc);mv=n(rQ,"LI",{});var rLe=s(mv);Ime=n(rLe,"STRONG",{});var dct=s(Ime);sJo=r(dct,"beit"),dct.forEach(t),lJo=r(rLe," \u2014 "),kq=n(rLe,"A",{href:!0});var cct=s(kq);iJo=r(cct,"BeitForSemanticSegmentation"),cct.forEach(t),dJo=r(rLe," (BEiT model)"),rLe.forEach(t),cJo=i(rQ),gv=n(rQ,"LI",{});var tLe=s(gv);Dme=n(tLe,"STRONG",{});var fct=s(Dme);fJo=r(fct,"dpt"),fct.forEach(t),mJo=r(tLe," \u2014 "),Rq=n(tLe,"A",{href:!0});var mct=s(Rq);gJo=r(mct,"DPTForSemanticSegmentation"),mct.forEach(t),hJo=r(tLe," (DPT model)"),tLe.forEach(t),pJo=i(rQ),hv=n(rQ,"LI",{});var aLe=s(hv);Nme=n(aLe,"STRONG",{});var gct=s(Nme);_Jo=r(gct,"segformer"),gct.forEach(t),uJo=r(aLe," \u2014 "),Sq=n(aLe,"A",{href:!0});var hct=s(Sq);bJo=r(hct,"SegformerForSemanticSegmentation"),hct.forEach(t),vJo=r(aLe," (SegFormer model)"),aLe.forEach(t),rQ.forEach(t),TJo=i(la),pv=n(la,"P",{});var nLe=s(pv);FJo=r(nLe,"The model is set in evaluation mode by default using "),jme=n(nLe,"CODE",{});var pct=s(jme);CJo=r(pct,"model.eval()"),pct.forEach(t),MJo=r(nLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qme=n(nLe,"CODE",{});var _ct=s(qme);EJo=r(_ct,"model.train()"),_ct.forEach(t),nLe.forEach(t),yJo=i(la),Gme=n(la,"P",{});var uct=s(Gme);wJo=r(uct,"Examples:"),uct.forEach(t),AJo=i(la),m(qw.$$.fragment,la),la.forEach(t),$l.forEach(t),IRe=i(c),cc=n(c,"H2",{class:!0});var WPe=s(cc);_v=n(WPe,"A",{id:!0,class:!0,href:!0});var bct=s(_v);Ome=n(bct,"SPAN",{});var vct=s(Ome);m(Gw.$$.fragment,vct),vct.forEach(t),bct.forEach(t),LJo=i(WPe),Xme=n(WPe,"SPAN",{});var Tct=s(Xme);BJo=r(Tct,"AutoModelForInstanceSegmentation"),Tct.forEach(t),WPe.forEach(t),DRe=i(c),br=n(c,"DIV",{class:!0});var Dl=s(br);m(Ow.$$.fragment,Dl),xJo=i(Dl),fc=n(Dl,"P",{});var tQ=s(fc);kJo=r(tQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),Vme=n(tQ,"CODE",{});var Fct=s(Vme);RJo=r(Fct,"from_pretrained()"),Fct.forEach(t),SJo=r(tQ,"class method or the "),zme=n(tQ,"CODE",{});var Cct=s(zme);PJo=r(Cct,"from_config()"),Cct.forEach(t),$Jo=r(tQ,`class
method.`),tQ.forEach(t),IJo=i(Dl),Xw=n(Dl,"P",{});var QPe=s(Xw);DJo=r(QPe,"This class cannot be instantiated directly using "),Wme=n(QPe,"CODE",{});var Mct=s(Wme);NJo=r(Mct,"__init__()"),Mct.forEach(t),jJo=r(QPe," (throws an error)."),QPe.forEach(t),qJo=i(Dl),mt=n(Dl,"DIV",{class:!0});var Nl=s(mt);m(Vw.$$.fragment,Nl),GJo=i(Nl),Qme=n(Nl,"P",{});var Ect=s(Qme);OJo=r(Ect,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Ect.forEach(t),XJo=i(Nl),mc=n(Nl,"P",{});var aQ=s(mc);VJo=r(aQ,`Note:
Loading a model from its configuration file does `),Hme=n(aQ,"STRONG",{});var yct=s(Hme);zJo=r(yct,"not"),yct.forEach(t),WJo=r(aQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ume=n(aQ,"CODE",{});var wct=s(Ume);QJo=r(wct,"from_pretrained()"),wct.forEach(t),HJo=r(aQ,"to load the model weights."),aQ.forEach(t),UJo=i(Nl),Jme=n(Nl,"P",{});var Act=s(Jme);JJo=r(Act,"Examples:"),Act.forEach(t),YJo=i(Nl),m(zw.$$.fragment,Nl),Nl.forEach(t),KJo=i(Dl),no=n(Dl,"DIV",{class:!0});var ia=s(no);m(Ww.$$.fragment,ia),ZJo=i(ia),Yme=n(ia,"P",{});var Lct=s(Yme);eYo=r(Lct,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Lct.forEach(t),oYo=i(ia),pn=n(ia,"P",{});var OM=s(pn);rYo=r(OM,"The model class to instantiate is selected based on the "),Kme=n(OM,"CODE",{});var Bct=s(Kme);tYo=r(Bct,"model_type"),Bct.forEach(t),aYo=r(OM,` property of the config object (either
passed as an argument or loaded from `),Zme=n(OM,"CODE",{});var xct=s(Zme);nYo=r(xct,"pretrained_model_name_or_path"),xct.forEach(t),sYo=r(OM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ege=n(OM,"CODE",{});var kct=s(ege);lYo=r(kct,"pretrained_model_name_or_path"),kct.forEach(t),iYo=r(OM,":"),OM.forEach(t),dYo=i(ia),oge=n(ia,"UL",{});var Rct=s(oge);uv=n(Rct,"LI",{});var sLe=s(uv);rge=n(sLe,"STRONG",{});var Sct=s(rge);cYo=r(Sct,"maskformer"),Sct.forEach(t),fYo=r(sLe," \u2014 "),Pq=n(sLe,"A",{href:!0});var Pct=s(Pq);mYo=r(Pct,"MaskFormerForInstanceSegmentation"),Pct.forEach(t),gYo=r(sLe," (MaskFormer model)"),sLe.forEach(t),Rct.forEach(t),hYo=i(ia),bv=n(ia,"P",{});var lLe=s(bv);pYo=r(lLe,"The model is set in evaluation mode by default using "),tge=n(lLe,"CODE",{});var $ct=s(tge);_Yo=r($ct,"model.eval()"),$ct.forEach(t),uYo=r(lLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),age=n(lLe,"CODE",{});var Ict=s(age);bYo=r(Ict,"model.train()"),Ict.forEach(t),lLe.forEach(t),vYo=i(ia),nge=n(ia,"P",{});var Dct=s(nge);TYo=r(Dct,"Examples:"),Dct.forEach(t),FYo=i(ia),m(Qw.$$.fragment,ia),ia.forEach(t),Dl.forEach(t),NRe=i(c),gc=n(c,"H2",{class:!0});var HPe=s(gc);vv=n(HPe,"A",{id:!0,class:!0,href:!0});var Nct=s(vv);sge=n(Nct,"SPAN",{});var jct=s(sge);m(Hw.$$.fragment,jct),jct.forEach(t),Nct.forEach(t),CYo=i(HPe),lge=n(HPe,"SPAN",{});var qct=s(lge);MYo=r(qct,"TFAutoModel"),qct.forEach(t),HPe.forEach(t),jRe=i(c),vr=n(c,"DIV",{class:!0});var jl=s(vr);m(Uw.$$.fragment,jl),EYo=i(jl),hc=n(jl,"P",{});var nQ=s(hc);yYo=r(nQ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),ige=n(nQ,"CODE",{});var Gct=s(ige);wYo=r(Gct,"from_pretrained()"),Gct.forEach(t),AYo=r(nQ,"class method or the "),dge=n(nQ,"CODE",{});var Oct=s(dge);LYo=r(Oct,"from_config()"),Oct.forEach(t),BYo=r(nQ,`class
method.`),nQ.forEach(t),xYo=i(jl),Jw=n(jl,"P",{});var UPe=s(Jw);kYo=r(UPe,"This class cannot be instantiated directly using "),cge=n(UPe,"CODE",{});var Xct=s(cge);RYo=r(Xct,"__init__()"),Xct.forEach(t),SYo=r(UPe," (throws an error)."),UPe.forEach(t),PYo=i(jl),gt=n(jl,"DIV",{class:!0});var ql=s(gt);m(Yw.$$.fragment,ql),$Yo=i(ql),fge=n(ql,"P",{});var Vct=s(fge);IYo=r(Vct,"Instantiates one of the base model classes of the library from a configuration."),Vct.forEach(t),DYo=i(ql),pc=n(ql,"P",{});var sQ=s(pc);NYo=r(sQ,`Note:
Loading a model from its configuration file does `),mge=n(sQ,"STRONG",{});var zct=s(mge);jYo=r(zct,"not"),zct.forEach(t),qYo=r(sQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),gge=n(sQ,"CODE",{});var Wct=s(gge);GYo=r(Wct,"from_pretrained()"),Wct.forEach(t),OYo=r(sQ,"to load the model weights."),sQ.forEach(t),XYo=i(ql),hge=n(ql,"P",{});var Qct=s(hge);VYo=r(Qct,"Examples:"),Qct.forEach(t),zYo=i(ql),m(Kw.$$.fragment,ql),ql.forEach(t),WYo=i(jl),ho=n(jl,"DIV",{class:!0});var pa=s(ho);m(Zw.$$.fragment,pa),QYo=i(pa),pge=n(pa,"P",{});var Hct=s(pge);HYo=r(Hct,"Instantiate one of the base model classes of the library from a pretrained model."),Hct.forEach(t),UYo=i(pa),_n=n(pa,"P",{});var XM=s(_n);JYo=r(XM,"The model class to instantiate is selected based on the "),_ge=n(XM,"CODE",{});var Uct=s(_ge);YYo=r(Uct,"model_type"),Uct.forEach(t),KYo=r(XM,` property of the config object (either
passed as an argument or loaded from `),uge=n(XM,"CODE",{});var Jct=s(uge);ZYo=r(Jct,"pretrained_model_name_or_path"),Jct.forEach(t),eKo=r(XM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bge=n(XM,"CODE",{});var Yct=s(bge);oKo=r(Yct,"pretrained_model_name_or_path"),Yct.forEach(t),rKo=r(XM,":"),XM.forEach(t),tKo=i(pa),B=n(pa,"UL",{});var x=s(B);Tv=n(x,"LI",{});var iLe=s(Tv);vge=n(iLe,"STRONG",{});var Kct=s(vge);aKo=r(Kct,"albert"),Kct.forEach(t),nKo=r(iLe," \u2014 "),$q=n(iLe,"A",{href:!0});var Zct=s($q);sKo=r(Zct,"TFAlbertModel"),Zct.forEach(t),lKo=r(iLe," (ALBERT model)"),iLe.forEach(t),iKo=i(x),Fv=n(x,"LI",{});var dLe=s(Fv);Tge=n(dLe,"STRONG",{});var eft=s(Tge);dKo=r(eft,"bart"),eft.forEach(t),cKo=r(dLe," \u2014 "),Iq=n(dLe,"A",{href:!0});var oft=s(Iq);fKo=r(oft,"TFBartModel"),oft.forEach(t),mKo=r(dLe," (BART model)"),dLe.forEach(t),gKo=i(x),Cv=n(x,"LI",{});var cLe=s(Cv);Fge=n(cLe,"STRONG",{});var rft=s(Fge);hKo=r(rft,"bert"),rft.forEach(t),pKo=r(cLe," \u2014 "),Dq=n(cLe,"A",{href:!0});var tft=s(Dq);_Ko=r(tft,"TFBertModel"),tft.forEach(t),uKo=r(cLe," (BERT model)"),cLe.forEach(t),bKo=i(x),Mv=n(x,"LI",{});var fLe=s(Mv);Cge=n(fLe,"STRONG",{});var aft=s(Cge);vKo=r(aft,"blenderbot"),aft.forEach(t),TKo=r(fLe," \u2014 "),Nq=n(fLe,"A",{href:!0});var nft=s(Nq);FKo=r(nft,"TFBlenderbotModel"),nft.forEach(t),CKo=r(fLe," (Blenderbot model)"),fLe.forEach(t),MKo=i(x),Ev=n(x,"LI",{});var mLe=s(Ev);Mge=n(mLe,"STRONG",{});var sft=s(Mge);EKo=r(sft,"blenderbot-small"),sft.forEach(t),yKo=r(mLe," \u2014 "),jq=n(mLe,"A",{href:!0});var lft=s(jq);wKo=r(lft,"TFBlenderbotSmallModel"),lft.forEach(t),AKo=r(mLe," (BlenderbotSmall model)"),mLe.forEach(t),LKo=i(x),yv=n(x,"LI",{});var gLe=s(yv);Ege=n(gLe,"STRONG",{});var ift=s(Ege);BKo=r(ift,"camembert"),ift.forEach(t),xKo=r(gLe," \u2014 "),qq=n(gLe,"A",{href:!0});var dft=s(qq);kKo=r(dft,"TFCamembertModel"),dft.forEach(t),RKo=r(gLe," (CamemBERT model)"),gLe.forEach(t),SKo=i(x),wv=n(x,"LI",{});var hLe=s(wv);yge=n(hLe,"STRONG",{});var cft=s(yge);PKo=r(cft,"clip"),cft.forEach(t),$Ko=r(hLe," \u2014 "),Gq=n(hLe,"A",{href:!0});var fft=s(Gq);IKo=r(fft,"TFCLIPModel"),fft.forEach(t),DKo=r(hLe," (CLIP model)"),hLe.forEach(t),NKo=i(x),Av=n(x,"LI",{});var pLe=s(Av);wge=n(pLe,"STRONG",{});var mft=s(wge);jKo=r(mft,"convbert"),mft.forEach(t),qKo=r(pLe," \u2014 "),Oq=n(pLe,"A",{href:!0});var gft=s(Oq);GKo=r(gft,"TFConvBertModel"),gft.forEach(t),OKo=r(pLe," (ConvBERT model)"),pLe.forEach(t),XKo=i(x),Lv=n(x,"LI",{});var _Le=s(Lv);Age=n(_Le,"STRONG",{});var hft=s(Age);VKo=r(hft,"convnext"),hft.forEach(t),zKo=r(_Le," \u2014 "),Xq=n(_Le,"A",{href:!0});var pft=s(Xq);WKo=r(pft,"TFConvNextModel"),pft.forEach(t),QKo=r(_Le," (ConvNext model)"),_Le.forEach(t),HKo=i(x),Bv=n(x,"LI",{});var uLe=s(Bv);Lge=n(uLe,"STRONG",{});var _ft=s(Lge);UKo=r(_ft,"ctrl"),_ft.forEach(t),JKo=r(uLe," \u2014 "),Vq=n(uLe,"A",{href:!0});var uft=s(Vq);YKo=r(uft,"TFCTRLModel"),uft.forEach(t),KKo=r(uLe," (CTRL model)"),uLe.forEach(t),ZKo=i(x),xv=n(x,"LI",{});var bLe=s(xv);Bge=n(bLe,"STRONG",{});var bft=s(Bge);eZo=r(bft,"deberta"),bft.forEach(t),oZo=r(bLe," \u2014 "),zq=n(bLe,"A",{href:!0});var vft=s(zq);rZo=r(vft,"TFDebertaModel"),vft.forEach(t),tZo=r(bLe," (DeBERTa model)"),bLe.forEach(t),aZo=i(x),kv=n(x,"LI",{});var vLe=s(kv);xge=n(vLe,"STRONG",{});var Tft=s(xge);nZo=r(Tft,"deberta-v2"),Tft.forEach(t),sZo=r(vLe," \u2014 "),Wq=n(vLe,"A",{href:!0});var Fft=s(Wq);lZo=r(Fft,"TFDebertaV2Model"),Fft.forEach(t),iZo=r(vLe," (DeBERTa-v2 model)"),vLe.forEach(t),dZo=i(x),Rv=n(x,"LI",{});var TLe=s(Rv);kge=n(TLe,"STRONG",{});var Cft=s(kge);cZo=r(Cft,"distilbert"),Cft.forEach(t),fZo=r(TLe," \u2014 "),Qq=n(TLe,"A",{href:!0});var Mft=s(Qq);mZo=r(Mft,"TFDistilBertModel"),Mft.forEach(t),gZo=r(TLe," (DistilBERT model)"),TLe.forEach(t),hZo=i(x),Sv=n(x,"LI",{});var FLe=s(Sv);Rge=n(FLe,"STRONG",{});var Eft=s(Rge);pZo=r(Eft,"dpr"),Eft.forEach(t),_Zo=r(FLe," \u2014 "),Hq=n(FLe,"A",{href:!0});var yft=s(Hq);uZo=r(yft,"TFDPRQuestionEncoder"),yft.forEach(t),bZo=r(FLe," (DPR model)"),FLe.forEach(t),vZo=i(x),Pv=n(x,"LI",{});var CLe=s(Pv);Sge=n(CLe,"STRONG",{});var wft=s(Sge);TZo=r(wft,"electra"),wft.forEach(t),FZo=r(CLe," \u2014 "),Uq=n(CLe,"A",{href:!0});var Aft=s(Uq);CZo=r(Aft,"TFElectraModel"),Aft.forEach(t),MZo=r(CLe," (ELECTRA model)"),CLe.forEach(t),EZo=i(x),$v=n(x,"LI",{});var MLe=s($v);Pge=n(MLe,"STRONG",{});var Lft=s(Pge);yZo=r(Lft,"flaubert"),Lft.forEach(t),wZo=r(MLe," \u2014 "),Jq=n(MLe,"A",{href:!0});var Bft=s(Jq);AZo=r(Bft,"TFFlaubertModel"),Bft.forEach(t),LZo=r(MLe," (FlauBERT model)"),MLe.forEach(t),BZo=i(x),Gs=n(x,"LI",{});var n9=s(Gs);$ge=n(n9,"STRONG",{});var xft=s($ge);xZo=r(xft,"funnel"),xft.forEach(t),kZo=r(n9," \u2014 "),Yq=n(n9,"A",{href:!0});var kft=s(Yq);RZo=r(kft,"TFFunnelModel"),kft.forEach(t),SZo=r(n9," or "),Kq=n(n9,"A",{href:!0});var Rft=s(Kq);PZo=r(Rft,"TFFunnelBaseModel"),Rft.forEach(t),$Zo=r(n9," (Funnel Transformer model)"),n9.forEach(t),IZo=i(x),Iv=n(x,"LI",{});var ELe=s(Iv);Ige=n(ELe,"STRONG",{});var Sft=s(Ige);DZo=r(Sft,"gpt2"),Sft.forEach(t),NZo=r(ELe," \u2014 "),Zq=n(ELe,"A",{href:!0});var Pft=s(Zq);jZo=r(Pft,"TFGPT2Model"),Pft.forEach(t),qZo=r(ELe," (OpenAI GPT-2 model)"),ELe.forEach(t),GZo=i(x),Dv=n(x,"LI",{});var yLe=s(Dv);Dge=n(yLe,"STRONG",{});var $ft=s(Dge);OZo=r($ft,"gptj"),$ft.forEach(t),XZo=r(yLe," \u2014 "),eG=n(yLe,"A",{href:!0});var Ift=s(eG);VZo=r(Ift,"TFGPTJModel"),Ift.forEach(t),zZo=r(yLe," (GPT-J model)"),yLe.forEach(t),WZo=i(x),Nv=n(x,"LI",{});var wLe=s(Nv);Nge=n(wLe,"STRONG",{});var Dft=s(Nge);QZo=r(Dft,"hubert"),Dft.forEach(t),HZo=r(wLe," \u2014 "),oG=n(wLe,"A",{href:!0});var Nft=s(oG);UZo=r(Nft,"TFHubertModel"),Nft.forEach(t),JZo=r(wLe," (Hubert model)"),wLe.forEach(t),YZo=i(x),jv=n(x,"LI",{});var ALe=s(jv);jge=n(ALe,"STRONG",{});var jft=s(jge);KZo=r(jft,"layoutlm"),jft.forEach(t),ZZo=r(ALe," \u2014 "),rG=n(ALe,"A",{href:!0});var qft=s(rG);eer=r(qft,"TFLayoutLMModel"),qft.forEach(t),oer=r(ALe," (LayoutLM model)"),ALe.forEach(t),rer=i(x),qv=n(x,"LI",{});var LLe=s(qv);qge=n(LLe,"STRONG",{});var Gft=s(qge);ter=r(Gft,"led"),Gft.forEach(t),aer=r(LLe," \u2014 "),tG=n(LLe,"A",{href:!0});var Oft=s(tG);ner=r(Oft,"TFLEDModel"),Oft.forEach(t),ser=r(LLe," (LED model)"),LLe.forEach(t),ler=i(x),Gv=n(x,"LI",{});var BLe=s(Gv);Gge=n(BLe,"STRONG",{});var Xft=s(Gge);ier=r(Xft,"longformer"),Xft.forEach(t),der=r(BLe," \u2014 "),aG=n(BLe,"A",{href:!0});var Vft=s(aG);cer=r(Vft,"TFLongformerModel"),Vft.forEach(t),fer=r(BLe," (Longformer model)"),BLe.forEach(t),mer=i(x),Ov=n(x,"LI",{});var xLe=s(Ov);Oge=n(xLe,"STRONG",{});var zft=s(Oge);ger=r(zft,"lxmert"),zft.forEach(t),her=r(xLe," \u2014 "),nG=n(xLe,"A",{href:!0});var Wft=s(nG);per=r(Wft,"TFLxmertModel"),Wft.forEach(t),_er=r(xLe," (LXMERT model)"),xLe.forEach(t),uer=i(x),Xv=n(x,"LI",{});var kLe=s(Xv);Xge=n(kLe,"STRONG",{});var Qft=s(Xge);ber=r(Qft,"marian"),Qft.forEach(t),ver=r(kLe," \u2014 "),sG=n(kLe,"A",{href:!0});var Hft=s(sG);Ter=r(Hft,"TFMarianModel"),Hft.forEach(t),Fer=r(kLe," (Marian model)"),kLe.forEach(t),Cer=i(x),Vv=n(x,"LI",{});var RLe=s(Vv);Vge=n(RLe,"STRONG",{});var Uft=s(Vge);Mer=r(Uft,"mbart"),Uft.forEach(t),Eer=r(RLe," \u2014 "),lG=n(RLe,"A",{href:!0});var Jft=s(lG);yer=r(Jft,"TFMBartModel"),Jft.forEach(t),wer=r(RLe," (mBART model)"),RLe.forEach(t),Aer=i(x),zv=n(x,"LI",{});var SLe=s(zv);zge=n(SLe,"STRONG",{});var Yft=s(zge);Ler=r(Yft,"mobilebert"),Yft.forEach(t),Ber=r(SLe," \u2014 "),iG=n(SLe,"A",{href:!0});var Kft=s(iG);xer=r(Kft,"TFMobileBertModel"),Kft.forEach(t),ker=r(SLe," (MobileBERT model)"),SLe.forEach(t),Rer=i(x),Wv=n(x,"LI",{});var PLe=s(Wv);Wge=n(PLe,"STRONG",{});var Zft=s(Wge);Ser=r(Zft,"mpnet"),Zft.forEach(t),Per=r(PLe," \u2014 "),dG=n(PLe,"A",{href:!0});var emt=s(dG);$er=r(emt,"TFMPNetModel"),emt.forEach(t),Ier=r(PLe," (MPNet model)"),PLe.forEach(t),Der=i(x),Qv=n(x,"LI",{});var $Le=s(Qv);Qge=n($Le,"STRONG",{});var omt=s(Qge);Ner=r(omt,"mt5"),omt.forEach(t),jer=r($Le," \u2014 "),cG=n($Le,"A",{href:!0});var rmt=s(cG);qer=r(rmt,"TFMT5Model"),rmt.forEach(t),Ger=r($Le," (mT5 model)"),$Le.forEach(t),Oer=i(x),Hv=n(x,"LI",{});var ILe=s(Hv);Hge=n(ILe,"STRONG",{});var tmt=s(Hge);Xer=r(tmt,"openai-gpt"),tmt.forEach(t),Ver=r(ILe," \u2014 "),fG=n(ILe,"A",{href:!0});var amt=s(fG);zer=r(amt,"TFOpenAIGPTModel"),amt.forEach(t),Wer=r(ILe," (OpenAI GPT model)"),ILe.forEach(t),Qer=i(x),Uv=n(x,"LI",{});var DLe=s(Uv);Uge=n(DLe,"STRONG",{});var nmt=s(Uge);Her=r(nmt,"pegasus"),nmt.forEach(t),Uer=r(DLe," \u2014 "),mG=n(DLe,"A",{href:!0});var smt=s(mG);Jer=r(smt,"TFPegasusModel"),smt.forEach(t),Yer=r(DLe," (Pegasus model)"),DLe.forEach(t),Ker=i(x),Jv=n(x,"LI",{});var NLe=s(Jv);Jge=n(NLe,"STRONG",{});var lmt=s(Jge);Zer=r(lmt,"rembert"),lmt.forEach(t),eor=r(NLe," \u2014 "),gG=n(NLe,"A",{href:!0});var imt=s(gG);oor=r(imt,"TFRemBertModel"),imt.forEach(t),ror=r(NLe," (RemBERT model)"),NLe.forEach(t),tor=i(x),Yv=n(x,"LI",{});var jLe=s(Yv);Yge=n(jLe,"STRONG",{});var dmt=s(Yge);aor=r(dmt,"roberta"),dmt.forEach(t),nor=r(jLe," \u2014 "),hG=n(jLe,"A",{href:!0});var cmt=s(hG);sor=r(cmt,"TFRobertaModel"),cmt.forEach(t),lor=r(jLe," (RoBERTa model)"),jLe.forEach(t),ior=i(x),Kv=n(x,"LI",{});var qLe=s(Kv);Kge=n(qLe,"STRONG",{});var fmt=s(Kge);dor=r(fmt,"roformer"),fmt.forEach(t),cor=r(qLe," \u2014 "),pG=n(qLe,"A",{href:!0});var mmt=s(pG);mor=r(mmt,"TFRoFormerModel"),mmt.forEach(t),gor=r(qLe," (RoFormer model)"),qLe.forEach(t),hor=i(x),Zv=n(x,"LI",{});var GLe=s(Zv);Zge=n(GLe,"STRONG",{});var gmt=s(Zge);por=r(gmt,"speech_to_text"),gmt.forEach(t),_or=r(GLe," \u2014 "),_G=n(GLe,"A",{href:!0});var hmt=s(_G);uor=r(hmt,"TFSpeech2TextModel"),hmt.forEach(t),bor=r(GLe," (Speech2Text model)"),GLe.forEach(t),vor=i(x),e6=n(x,"LI",{});var OLe=s(e6);ehe=n(OLe,"STRONG",{});var pmt=s(ehe);Tor=r(pmt,"t5"),pmt.forEach(t),For=r(OLe," \u2014 "),uG=n(OLe,"A",{href:!0});var _mt=s(uG);Cor=r(_mt,"TFT5Model"),_mt.forEach(t),Mor=r(OLe," (T5 model)"),OLe.forEach(t),Eor=i(x),o6=n(x,"LI",{});var XLe=s(o6);ohe=n(XLe,"STRONG",{});var umt=s(ohe);yor=r(umt,"tapas"),umt.forEach(t),wor=r(XLe," \u2014 "),bG=n(XLe,"A",{href:!0});var bmt=s(bG);Aor=r(bmt,"TFTapasModel"),bmt.forEach(t),Lor=r(XLe," (TAPAS model)"),XLe.forEach(t),Bor=i(x),r6=n(x,"LI",{});var VLe=s(r6);rhe=n(VLe,"STRONG",{});var vmt=s(rhe);xor=r(vmt,"transfo-xl"),vmt.forEach(t),kor=r(VLe," \u2014 "),vG=n(VLe,"A",{href:!0});var Tmt=s(vG);Ror=r(Tmt,"TFTransfoXLModel"),Tmt.forEach(t),Sor=r(VLe," (Transformer-XL model)"),VLe.forEach(t),Por=i(x),t6=n(x,"LI",{});var zLe=s(t6);the=n(zLe,"STRONG",{});var Fmt=s(the);$or=r(Fmt,"vit"),Fmt.forEach(t),Ior=r(zLe," \u2014 "),TG=n(zLe,"A",{href:!0});var Cmt=s(TG);Dor=r(Cmt,"TFViTModel"),Cmt.forEach(t),Nor=r(zLe," (ViT model)"),zLe.forEach(t),jor=i(x),a6=n(x,"LI",{});var WLe=s(a6);ahe=n(WLe,"STRONG",{});var Mmt=s(ahe);qor=r(Mmt,"wav2vec2"),Mmt.forEach(t),Gor=r(WLe," \u2014 "),FG=n(WLe,"A",{href:!0});var Emt=s(FG);Oor=r(Emt,"TFWav2Vec2Model"),Emt.forEach(t),Xor=r(WLe," (Wav2Vec2 model)"),WLe.forEach(t),Vor=i(x),n6=n(x,"LI",{});var QLe=s(n6);nhe=n(QLe,"STRONG",{});var ymt=s(nhe);zor=r(ymt,"xlm"),ymt.forEach(t),Wor=r(QLe," \u2014 "),CG=n(QLe,"A",{href:!0});var wmt=s(CG);Qor=r(wmt,"TFXLMModel"),wmt.forEach(t),Hor=r(QLe," (XLM model)"),QLe.forEach(t),Uor=i(x),s6=n(x,"LI",{});var HLe=s(s6);she=n(HLe,"STRONG",{});var Amt=s(she);Jor=r(Amt,"xlm-roberta"),Amt.forEach(t),Yor=r(HLe," \u2014 "),MG=n(HLe,"A",{href:!0});var Lmt=s(MG);Kor=r(Lmt,"TFXLMRobertaModel"),Lmt.forEach(t),Zor=r(HLe," (XLM-RoBERTa model)"),HLe.forEach(t),err=i(x),l6=n(x,"LI",{});var ULe=s(l6);lhe=n(ULe,"STRONG",{});var Bmt=s(lhe);orr=r(Bmt,"xlnet"),Bmt.forEach(t),rrr=r(ULe," \u2014 "),EG=n(ULe,"A",{href:!0});var xmt=s(EG);trr=r(xmt,"TFXLNetModel"),xmt.forEach(t),arr=r(ULe," (XLNet model)"),ULe.forEach(t),x.forEach(t),nrr=i(pa),ihe=n(pa,"P",{});var kmt=s(ihe);srr=r(kmt,"Examples:"),kmt.forEach(t),lrr=i(pa),m(eA.$$.fragment,pa),pa.forEach(t),jl.forEach(t),qRe=i(c),_c=n(c,"H2",{class:!0});var JPe=s(_c);i6=n(JPe,"A",{id:!0,class:!0,href:!0});var Rmt=s(i6);dhe=n(Rmt,"SPAN",{});var Smt=s(dhe);m(oA.$$.fragment,Smt),Smt.forEach(t),Rmt.forEach(t),irr=i(JPe),che=n(JPe,"SPAN",{});var Pmt=s(che);drr=r(Pmt,"TFAutoModelForPreTraining"),Pmt.forEach(t),JPe.forEach(t),GRe=i(c),Tr=n(c,"DIV",{class:!0});var Gl=s(Tr);m(rA.$$.fragment,Gl),crr=i(Gl),uc=n(Gl,"P",{});var lQ=s(uc);frr=r(lQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),fhe=n(lQ,"CODE",{});var $mt=s(fhe);mrr=r($mt,"from_pretrained()"),$mt.forEach(t),grr=r(lQ,"class method or the "),mhe=n(lQ,"CODE",{});var Imt=s(mhe);hrr=r(Imt,"from_config()"),Imt.forEach(t),prr=r(lQ,`class
method.`),lQ.forEach(t),_rr=i(Gl),tA=n(Gl,"P",{});var YPe=s(tA);urr=r(YPe,"This class cannot be instantiated directly using "),ghe=n(YPe,"CODE",{});var Dmt=s(ghe);brr=r(Dmt,"__init__()"),Dmt.forEach(t),vrr=r(YPe," (throws an error)."),YPe.forEach(t),Trr=i(Gl),ht=n(Gl,"DIV",{class:!0});var Ol=s(ht);m(aA.$$.fragment,Ol),Frr=i(Ol),hhe=n(Ol,"P",{});var Nmt=s(hhe);Crr=r(Nmt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Nmt.forEach(t),Mrr=i(Ol),bc=n(Ol,"P",{});var iQ=s(bc);Err=r(iQ,`Note:
Loading a model from its configuration file does `),phe=n(iQ,"STRONG",{});var jmt=s(phe);yrr=r(jmt,"not"),jmt.forEach(t),wrr=r(iQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),_he=n(iQ,"CODE",{});var qmt=s(_he);Arr=r(qmt,"from_pretrained()"),qmt.forEach(t),Lrr=r(iQ,"to load the model weights."),iQ.forEach(t),Brr=i(Ol),uhe=n(Ol,"P",{});var Gmt=s(uhe);xrr=r(Gmt,"Examples:"),Gmt.forEach(t),krr=i(Ol),m(nA.$$.fragment,Ol),Ol.forEach(t),Rrr=i(Gl),po=n(Gl,"DIV",{class:!0});var _a=s(po);m(sA.$$.fragment,_a),Srr=i(_a),bhe=n(_a,"P",{});var Omt=s(bhe);Prr=r(Omt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Omt.forEach(t),$rr=i(_a),un=n(_a,"P",{});var VM=s(un);Irr=r(VM,"The model class to instantiate is selected based on the "),vhe=n(VM,"CODE",{});var Xmt=s(vhe);Drr=r(Xmt,"model_type"),Xmt.forEach(t),Nrr=r(VM,` property of the config object (either
passed as an argument or loaded from `),The=n(VM,"CODE",{});var Vmt=s(The);jrr=r(Vmt,"pretrained_model_name_or_path"),Vmt.forEach(t),qrr=r(VM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fhe=n(VM,"CODE",{});var zmt=s(Fhe);Grr=r(zmt,"pretrained_model_name_or_path"),zmt.forEach(t),Orr=r(VM,":"),VM.forEach(t),Xrr=i(_a),H=n(_a,"UL",{});var U=s(H);d6=n(U,"LI",{});var JLe=s(d6);Che=n(JLe,"STRONG",{});var Wmt=s(Che);Vrr=r(Wmt,"albert"),Wmt.forEach(t),zrr=r(JLe," \u2014 "),yG=n(JLe,"A",{href:!0});var Qmt=s(yG);Wrr=r(Qmt,"TFAlbertForPreTraining"),Qmt.forEach(t),Qrr=r(JLe," (ALBERT model)"),JLe.forEach(t),Hrr=i(U),c6=n(U,"LI",{});var YLe=s(c6);Mhe=n(YLe,"STRONG",{});var Hmt=s(Mhe);Urr=r(Hmt,"bart"),Hmt.forEach(t),Jrr=r(YLe," \u2014 "),wG=n(YLe,"A",{href:!0});var Umt=s(wG);Yrr=r(Umt,"TFBartForConditionalGeneration"),Umt.forEach(t),Krr=r(YLe," (BART model)"),YLe.forEach(t),Zrr=i(U),f6=n(U,"LI",{});var KLe=s(f6);Ehe=n(KLe,"STRONG",{});var Jmt=s(Ehe);etr=r(Jmt,"bert"),Jmt.forEach(t),otr=r(KLe," \u2014 "),AG=n(KLe,"A",{href:!0});var Ymt=s(AG);rtr=r(Ymt,"TFBertForPreTraining"),Ymt.forEach(t),ttr=r(KLe," (BERT model)"),KLe.forEach(t),atr=i(U),m6=n(U,"LI",{});var ZLe=s(m6);yhe=n(ZLe,"STRONG",{});var Kmt=s(yhe);ntr=r(Kmt,"camembert"),Kmt.forEach(t),str=r(ZLe," \u2014 "),LG=n(ZLe,"A",{href:!0});var Zmt=s(LG);ltr=r(Zmt,"TFCamembertForMaskedLM"),Zmt.forEach(t),itr=r(ZLe," (CamemBERT model)"),ZLe.forEach(t),dtr=i(U),g6=n(U,"LI",{});var e8e=s(g6);whe=n(e8e,"STRONG",{});var egt=s(whe);ctr=r(egt,"ctrl"),egt.forEach(t),ftr=r(e8e," \u2014 "),BG=n(e8e,"A",{href:!0});var ogt=s(BG);mtr=r(ogt,"TFCTRLLMHeadModel"),ogt.forEach(t),gtr=r(e8e," (CTRL model)"),e8e.forEach(t),htr=i(U),h6=n(U,"LI",{});var o8e=s(h6);Ahe=n(o8e,"STRONG",{});var rgt=s(Ahe);ptr=r(rgt,"distilbert"),rgt.forEach(t),_tr=r(o8e," \u2014 "),xG=n(o8e,"A",{href:!0});var tgt=s(xG);utr=r(tgt,"TFDistilBertForMaskedLM"),tgt.forEach(t),btr=r(o8e," (DistilBERT model)"),o8e.forEach(t),vtr=i(U),p6=n(U,"LI",{});var r8e=s(p6);Lhe=n(r8e,"STRONG",{});var agt=s(Lhe);Ttr=r(agt,"electra"),agt.forEach(t),Ftr=r(r8e," \u2014 "),kG=n(r8e,"A",{href:!0});var ngt=s(kG);Ctr=r(ngt,"TFElectraForPreTraining"),ngt.forEach(t),Mtr=r(r8e," (ELECTRA model)"),r8e.forEach(t),Etr=i(U),_6=n(U,"LI",{});var t8e=s(_6);Bhe=n(t8e,"STRONG",{});var sgt=s(Bhe);ytr=r(sgt,"flaubert"),sgt.forEach(t),wtr=r(t8e," \u2014 "),RG=n(t8e,"A",{href:!0});var lgt=s(RG);Atr=r(lgt,"TFFlaubertWithLMHeadModel"),lgt.forEach(t),Ltr=r(t8e," (FlauBERT model)"),t8e.forEach(t),Btr=i(U),u6=n(U,"LI",{});var a8e=s(u6);xhe=n(a8e,"STRONG",{});var igt=s(xhe);xtr=r(igt,"funnel"),igt.forEach(t),ktr=r(a8e," \u2014 "),SG=n(a8e,"A",{href:!0});var dgt=s(SG);Rtr=r(dgt,"TFFunnelForPreTraining"),dgt.forEach(t),Str=r(a8e," (Funnel Transformer model)"),a8e.forEach(t),Ptr=i(U),b6=n(U,"LI",{});var n8e=s(b6);khe=n(n8e,"STRONG",{});var cgt=s(khe);$tr=r(cgt,"gpt2"),cgt.forEach(t),Itr=r(n8e," \u2014 "),PG=n(n8e,"A",{href:!0});var fgt=s(PG);Dtr=r(fgt,"TFGPT2LMHeadModel"),fgt.forEach(t),Ntr=r(n8e," (OpenAI GPT-2 model)"),n8e.forEach(t),jtr=i(U),v6=n(U,"LI",{});var s8e=s(v6);Rhe=n(s8e,"STRONG",{});var mgt=s(Rhe);qtr=r(mgt,"layoutlm"),mgt.forEach(t),Gtr=r(s8e," \u2014 "),$G=n(s8e,"A",{href:!0});var ggt=s($G);Otr=r(ggt,"TFLayoutLMForMaskedLM"),ggt.forEach(t),Xtr=r(s8e," (LayoutLM model)"),s8e.forEach(t),Vtr=i(U),T6=n(U,"LI",{});var l8e=s(T6);She=n(l8e,"STRONG",{});var hgt=s(She);ztr=r(hgt,"lxmert"),hgt.forEach(t),Wtr=r(l8e," \u2014 "),IG=n(l8e,"A",{href:!0});var pgt=s(IG);Qtr=r(pgt,"TFLxmertForPreTraining"),pgt.forEach(t),Htr=r(l8e," (LXMERT model)"),l8e.forEach(t),Utr=i(U),F6=n(U,"LI",{});var i8e=s(F6);Phe=n(i8e,"STRONG",{});var _gt=s(Phe);Jtr=r(_gt,"mobilebert"),_gt.forEach(t),Ytr=r(i8e," \u2014 "),DG=n(i8e,"A",{href:!0});var ugt=s(DG);Ktr=r(ugt,"TFMobileBertForPreTraining"),ugt.forEach(t),Ztr=r(i8e," (MobileBERT model)"),i8e.forEach(t),ear=i(U),C6=n(U,"LI",{});var d8e=s(C6);$he=n(d8e,"STRONG",{});var bgt=s($he);oar=r(bgt,"mpnet"),bgt.forEach(t),rar=r(d8e," \u2014 "),NG=n(d8e,"A",{href:!0});var vgt=s(NG);tar=r(vgt,"TFMPNetForMaskedLM"),vgt.forEach(t),aar=r(d8e," (MPNet model)"),d8e.forEach(t),nar=i(U),M6=n(U,"LI",{});var c8e=s(M6);Ihe=n(c8e,"STRONG",{});var Tgt=s(Ihe);sar=r(Tgt,"openai-gpt"),Tgt.forEach(t),lar=r(c8e," \u2014 "),jG=n(c8e,"A",{href:!0});var Fgt=s(jG);iar=r(Fgt,"TFOpenAIGPTLMHeadModel"),Fgt.forEach(t),dar=r(c8e," (OpenAI GPT model)"),c8e.forEach(t),car=i(U),E6=n(U,"LI",{});var f8e=s(E6);Dhe=n(f8e,"STRONG",{});var Cgt=s(Dhe);far=r(Cgt,"roberta"),Cgt.forEach(t),mar=r(f8e," \u2014 "),qG=n(f8e,"A",{href:!0});var Mgt=s(qG);gar=r(Mgt,"TFRobertaForMaskedLM"),Mgt.forEach(t),har=r(f8e," (RoBERTa model)"),f8e.forEach(t),par=i(U),y6=n(U,"LI",{});var m8e=s(y6);Nhe=n(m8e,"STRONG",{});var Egt=s(Nhe);_ar=r(Egt,"t5"),Egt.forEach(t),uar=r(m8e," \u2014 "),GG=n(m8e,"A",{href:!0});var ygt=s(GG);bar=r(ygt,"TFT5ForConditionalGeneration"),ygt.forEach(t),Tar=r(m8e," (T5 model)"),m8e.forEach(t),Far=i(U),w6=n(U,"LI",{});var g8e=s(w6);jhe=n(g8e,"STRONG",{});var wgt=s(jhe);Car=r(wgt,"tapas"),wgt.forEach(t),Mar=r(g8e," \u2014 "),OG=n(g8e,"A",{href:!0});var Agt=s(OG);Ear=r(Agt,"TFTapasForMaskedLM"),Agt.forEach(t),yar=r(g8e," (TAPAS model)"),g8e.forEach(t),war=i(U),A6=n(U,"LI",{});var h8e=s(A6);qhe=n(h8e,"STRONG",{});var Lgt=s(qhe);Aar=r(Lgt,"transfo-xl"),Lgt.forEach(t),Lar=r(h8e," \u2014 "),XG=n(h8e,"A",{href:!0});var Bgt=s(XG);Bar=r(Bgt,"TFTransfoXLLMHeadModel"),Bgt.forEach(t),xar=r(h8e," (Transformer-XL model)"),h8e.forEach(t),kar=i(U),L6=n(U,"LI",{});var p8e=s(L6);Ghe=n(p8e,"STRONG",{});var xgt=s(Ghe);Rar=r(xgt,"xlm"),xgt.forEach(t),Sar=r(p8e," \u2014 "),VG=n(p8e,"A",{href:!0});var kgt=s(VG);Par=r(kgt,"TFXLMWithLMHeadModel"),kgt.forEach(t),$ar=r(p8e," (XLM model)"),p8e.forEach(t),Iar=i(U),B6=n(U,"LI",{});var _8e=s(B6);Ohe=n(_8e,"STRONG",{});var Rgt=s(Ohe);Dar=r(Rgt,"xlm-roberta"),Rgt.forEach(t),Nar=r(_8e," \u2014 "),zG=n(_8e,"A",{href:!0});var Sgt=s(zG);jar=r(Sgt,"TFXLMRobertaForMaskedLM"),Sgt.forEach(t),qar=r(_8e," (XLM-RoBERTa model)"),_8e.forEach(t),Gar=i(U),x6=n(U,"LI",{});var u8e=s(x6);Xhe=n(u8e,"STRONG",{});var Pgt=s(Xhe);Oar=r(Pgt,"xlnet"),Pgt.forEach(t),Xar=r(u8e," \u2014 "),WG=n(u8e,"A",{href:!0});var $gt=s(WG);Var=r($gt,"TFXLNetLMHeadModel"),$gt.forEach(t),zar=r(u8e," (XLNet model)"),u8e.forEach(t),U.forEach(t),War=i(_a),Vhe=n(_a,"P",{});var Igt=s(Vhe);Qar=r(Igt,"Examples:"),Igt.forEach(t),Har=i(_a),m(lA.$$.fragment,_a),_a.forEach(t),Gl.forEach(t),ORe=i(c),vc=n(c,"H2",{class:!0});var KPe=s(vc);k6=n(KPe,"A",{id:!0,class:!0,href:!0});var Dgt=s(k6);zhe=n(Dgt,"SPAN",{});var Ngt=s(zhe);m(iA.$$.fragment,Ngt),Ngt.forEach(t),Dgt.forEach(t),Uar=i(KPe),Whe=n(KPe,"SPAN",{});var jgt=s(Whe);Jar=r(jgt,"TFAutoModelForCausalLM"),jgt.forEach(t),KPe.forEach(t),XRe=i(c),Fr=n(c,"DIV",{class:!0});var Xl=s(Fr);m(dA.$$.fragment,Xl),Yar=i(Xl),Tc=n(Xl,"P",{});var dQ=s(Tc);Kar=r(dQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Qhe=n(dQ,"CODE",{});var qgt=s(Qhe);Zar=r(qgt,"from_pretrained()"),qgt.forEach(t),enr=r(dQ,"class method or the "),Hhe=n(dQ,"CODE",{});var Ggt=s(Hhe);onr=r(Ggt,"from_config()"),Ggt.forEach(t),rnr=r(dQ,`class
method.`),dQ.forEach(t),tnr=i(Xl),cA=n(Xl,"P",{});var ZPe=s(cA);anr=r(ZPe,"This class cannot be instantiated directly using "),Uhe=n(ZPe,"CODE",{});var Ogt=s(Uhe);nnr=r(Ogt,"__init__()"),Ogt.forEach(t),snr=r(ZPe," (throws an error)."),ZPe.forEach(t),lnr=i(Xl),pt=n(Xl,"DIV",{class:!0});var Vl=s(pt);m(fA.$$.fragment,Vl),inr=i(Vl),Jhe=n(Vl,"P",{});var Xgt=s(Jhe);dnr=r(Xgt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Xgt.forEach(t),cnr=i(Vl),Fc=n(Vl,"P",{});var cQ=s(Fc);fnr=r(cQ,`Note:
Loading a model from its configuration file does `),Yhe=n(cQ,"STRONG",{});var Vgt=s(Yhe);mnr=r(Vgt,"not"),Vgt.forEach(t),gnr=r(cQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Khe=n(cQ,"CODE",{});var zgt=s(Khe);hnr=r(zgt,"from_pretrained()"),zgt.forEach(t),pnr=r(cQ,"to load the model weights."),cQ.forEach(t),_nr=i(Vl),Zhe=n(Vl,"P",{});var Wgt=s(Zhe);unr=r(Wgt,"Examples:"),Wgt.forEach(t),bnr=i(Vl),m(mA.$$.fragment,Vl),Vl.forEach(t),vnr=i(Xl),_o=n(Xl,"DIV",{class:!0});var ua=s(_o);m(gA.$$.fragment,ua),Tnr=i(ua),epe=n(ua,"P",{});var Qgt=s(epe);Fnr=r(Qgt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Qgt.forEach(t),Cnr=i(ua),bn=n(ua,"P",{});var zM=s(bn);Mnr=r(zM,"The model class to instantiate is selected based on the "),ope=n(zM,"CODE",{});var Hgt=s(ope);Enr=r(Hgt,"model_type"),Hgt.forEach(t),ynr=r(zM,` property of the config object (either
passed as an argument or loaded from `),rpe=n(zM,"CODE",{});var Ugt=s(rpe);wnr=r(Ugt,"pretrained_model_name_or_path"),Ugt.forEach(t),Anr=r(zM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tpe=n(zM,"CODE",{});var Jgt=s(tpe);Lnr=r(Jgt,"pretrained_model_name_or_path"),Jgt.forEach(t),Bnr=r(zM,":"),zM.forEach(t),xnr=i(ua),ce=n(ua,"UL",{});var he=s(ce);R6=n(he,"LI",{});var b8e=s(R6);ape=n(b8e,"STRONG",{});var Ygt=s(ape);knr=r(Ygt,"bert"),Ygt.forEach(t),Rnr=r(b8e," \u2014 "),QG=n(b8e,"A",{href:!0});var Kgt=s(QG);Snr=r(Kgt,"TFBertLMHeadModel"),Kgt.forEach(t),Pnr=r(b8e," (BERT model)"),b8e.forEach(t),$nr=i(he),S6=n(he,"LI",{});var v8e=s(S6);npe=n(v8e,"STRONG",{});var Zgt=s(npe);Inr=r(Zgt,"camembert"),Zgt.forEach(t),Dnr=r(v8e," \u2014 "),HG=n(v8e,"A",{href:!0});var eht=s(HG);Nnr=r(eht,"TFCamembertForCausalLM"),eht.forEach(t),jnr=r(v8e," (CamemBERT model)"),v8e.forEach(t),qnr=i(he),P6=n(he,"LI",{});var T8e=s(P6);spe=n(T8e,"STRONG",{});var oht=s(spe);Gnr=r(oht,"ctrl"),oht.forEach(t),Onr=r(T8e," \u2014 "),UG=n(T8e,"A",{href:!0});var rht=s(UG);Xnr=r(rht,"TFCTRLLMHeadModel"),rht.forEach(t),Vnr=r(T8e," (CTRL model)"),T8e.forEach(t),znr=i(he),$6=n(he,"LI",{});var F8e=s($6);lpe=n(F8e,"STRONG",{});var tht=s(lpe);Wnr=r(tht,"gpt2"),tht.forEach(t),Qnr=r(F8e," \u2014 "),JG=n(F8e,"A",{href:!0});var aht=s(JG);Hnr=r(aht,"TFGPT2LMHeadModel"),aht.forEach(t),Unr=r(F8e," (OpenAI GPT-2 model)"),F8e.forEach(t),Jnr=i(he),I6=n(he,"LI",{});var C8e=s(I6);ipe=n(C8e,"STRONG",{});var nht=s(ipe);Ynr=r(nht,"gptj"),nht.forEach(t),Knr=r(C8e," \u2014 "),YG=n(C8e,"A",{href:!0});var sht=s(YG);Znr=r(sht,"TFGPTJForCausalLM"),sht.forEach(t),esr=r(C8e," (GPT-J model)"),C8e.forEach(t),osr=i(he),D6=n(he,"LI",{});var M8e=s(D6);dpe=n(M8e,"STRONG",{});var lht=s(dpe);rsr=r(lht,"openai-gpt"),lht.forEach(t),tsr=r(M8e," \u2014 "),KG=n(M8e,"A",{href:!0});var iht=s(KG);asr=r(iht,"TFOpenAIGPTLMHeadModel"),iht.forEach(t),nsr=r(M8e," (OpenAI GPT model)"),M8e.forEach(t),ssr=i(he),N6=n(he,"LI",{});var E8e=s(N6);cpe=n(E8e,"STRONG",{});var dht=s(cpe);lsr=r(dht,"rembert"),dht.forEach(t),isr=r(E8e," \u2014 "),ZG=n(E8e,"A",{href:!0});var cht=s(ZG);dsr=r(cht,"TFRemBertForCausalLM"),cht.forEach(t),csr=r(E8e," (RemBERT model)"),E8e.forEach(t),fsr=i(he),j6=n(he,"LI",{});var y8e=s(j6);fpe=n(y8e,"STRONG",{});var fht=s(fpe);msr=r(fht,"roberta"),fht.forEach(t),gsr=r(y8e," \u2014 "),eO=n(y8e,"A",{href:!0});var mht=s(eO);hsr=r(mht,"TFRobertaForCausalLM"),mht.forEach(t),psr=r(y8e," (RoBERTa model)"),y8e.forEach(t),_sr=i(he),q6=n(he,"LI",{});var w8e=s(q6);mpe=n(w8e,"STRONG",{});var ght=s(mpe);usr=r(ght,"roformer"),ght.forEach(t),bsr=r(w8e," \u2014 "),oO=n(w8e,"A",{href:!0});var hht=s(oO);vsr=r(hht,"TFRoFormerForCausalLM"),hht.forEach(t),Tsr=r(w8e," (RoFormer model)"),w8e.forEach(t),Fsr=i(he),G6=n(he,"LI",{});var A8e=s(G6);gpe=n(A8e,"STRONG",{});var pht=s(gpe);Csr=r(pht,"transfo-xl"),pht.forEach(t),Msr=r(A8e," \u2014 "),rO=n(A8e,"A",{href:!0});var _ht=s(rO);Esr=r(_ht,"TFTransfoXLLMHeadModel"),_ht.forEach(t),ysr=r(A8e," (Transformer-XL model)"),A8e.forEach(t),wsr=i(he),O6=n(he,"LI",{});var L8e=s(O6);hpe=n(L8e,"STRONG",{});var uht=s(hpe);Asr=r(uht,"xlm"),uht.forEach(t),Lsr=r(L8e," \u2014 "),tO=n(L8e,"A",{href:!0});var bht=s(tO);Bsr=r(bht,"TFXLMWithLMHeadModel"),bht.forEach(t),xsr=r(L8e," (XLM model)"),L8e.forEach(t),ksr=i(he),X6=n(he,"LI",{});var B8e=s(X6);ppe=n(B8e,"STRONG",{});var vht=s(ppe);Rsr=r(vht,"xlnet"),vht.forEach(t),Ssr=r(B8e," \u2014 "),aO=n(B8e,"A",{href:!0});var Tht=s(aO);Psr=r(Tht,"TFXLNetLMHeadModel"),Tht.forEach(t),$sr=r(B8e," (XLNet model)"),B8e.forEach(t),he.forEach(t),Isr=i(ua),_pe=n(ua,"P",{});var Fht=s(_pe);Dsr=r(Fht,"Examples:"),Fht.forEach(t),Nsr=i(ua),m(hA.$$.fragment,ua),ua.forEach(t),Xl.forEach(t),VRe=i(c),Cc=n(c,"H2",{class:!0});var e$e=s(Cc);V6=n(e$e,"A",{id:!0,class:!0,href:!0});var Cht=s(V6);upe=n(Cht,"SPAN",{});var Mht=s(upe);m(pA.$$.fragment,Mht),Mht.forEach(t),Cht.forEach(t),jsr=i(e$e),bpe=n(e$e,"SPAN",{});var Eht=s(bpe);qsr=r(Eht,"TFAutoModelForImageClassification"),Eht.forEach(t),e$e.forEach(t),zRe=i(c),Cr=n(c,"DIV",{class:!0});var zl=s(Cr);m(_A.$$.fragment,zl),Gsr=i(zl),Mc=n(zl,"P",{});var fQ=s(Mc);Osr=r(fQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),vpe=n(fQ,"CODE",{});var yht=s(vpe);Xsr=r(yht,"from_pretrained()"),yht.forEach(t),Vsr=r(fQ,"class method or the "),Tpe=n(fQ,"CODE",{});var wht=s(Tpe);zsr=r(wht,"from_config()"),wht.forEach(t),Wsr=r(fQ,`class
method.`),fQ.forEach(t),Qsr=i(zl),uA=n(zl,"P",{});var o$e=s(uA);Hsr=r(o$e,"This class cannot be instantiated directly using "),Fpe=n(o$e,"CODE",{});var Aht=s(Fpe);Usr=r(Aht,"__init__()"),Aht.forEach(t),Jsr=r(o$e," (throws an error)."),o$e.forEach(t),Ysr=i(zl),_t=n(zl,"DIV",{class:!0});var Wl=s(_t);m(bA.$$.fragment,Wl),Ksr=i(Wl),Cpe=n(Wl,"P",{});var Lht=s(Cpe);Zsr=r(Lht,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Lht.forEach(t),elr=i(Wl),Ec=n(Wl,"P",{});var mQ=s(Ec);olr=r(mQ,`Note:
Loading a model from its configuration file does `),Mpe=n(mQ,"STRONG",{});var Bht=s(Mpe);rlr=r(Bht,"not"),Bht.forEach(t),tlr=r(mQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Epe=n(mQ,"CODE",{});var xht=s(Epe);alr=r(xht,"from_pretrained()"),xht.forEach(t),nlr=r(mQ,"to load the model weights."),mQ.forEach(t),slr=i(Wl),ype=n(Wl,"P",{});var kht=s(ype);llr=r(kht,"Examples:"),kht.forEach(t),ilr=i(Wl),m(vA.$$.fragment,Wl),Wl.forEach(t),dlr=i(zl),uo=n(zl,"DIV",{class:!0});var ba=s(uo);m(TA.$$.fragment,ba),clr=i(ba),wpe=n(ba,"P",{});var Rht=s(wpe);flr=r(Rht,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Rht.forEach(t),mlr=i(ba),vn=n(ba,"P",{});var WM=s(vn);glr=r(WM,"The model class to instantiate is selected based on the "),Ape=n(WM,"CODE",{});var Sht=s(Ape);hlr=r(Sht,"model_type"),Sht.forEach(t),plr=r(WM,` property of the config object (either
passed as an argument or loaded from `),Lpe=n(WM,"CODE",{});var Pht=s(Lpe);_lr=r(Pht,"pretrained_model_name_or_path"),Pht.forEach(t),ulr=r(WM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bpe=n(WM,"CODE",{});var $ht=s(Bpe);blr=r($ht,"pretrained_model_name_or_path"),$ht.forEach(t),vlr=r(WM,":"),WM.forEach(t),Tlr=i(ba),FA=n(ba,"UL",{});var r$e=s(FA);z6=n(r$e,"LI",{});var x8e=s(z6);xpe=n(x8e,"STRONG",{});var Iht=s(xpe);Flr=r(Iht,"convnext"),Iht.forEach(t),Clr=r(x8e," \u2014 "),nO=n(x8e,"A",{href:!0});var Dht=s(nO);Mlr=r(Dht,"TFConvNextForImageClassification"),Dht.forEach(t),Elr=r(x8e," (ConvNext model)"),x8e.forEach(t),ylr=i(r$e),W6=n(r$e,"LI",{});var k8e=s(W6);kpe=n(k8e,"STRONG",{});var Nht=s(kpe);wlr=r(Nht,"vit"),Nht.forEach(t),Alr=r(k8e," \u2014 "),sO=n(k8e,"A",{href:!0});var jht=s(sO);Llr=r(jht,"TFViTForImageClassification"),jht.forEach(t),Blr=r(k8e," (ViT model)"),k8e.forEach(t),r$e.forEach(t),xlr=i(ba),Rpe=n(ba,"P",{});var qht=s(Rpe);klr=r(qht,"Examples:"),qht.forEach(t),Rlr=i(ba),m(CA.$$.fragment,ba),ba.forEach(t),zl.forEach(t),WRe=i(c),yc=n(c,"H2",{class:!0});var t$e=s(yc);Q6=n(t$e,"A",{id:!0,class:!0,href:!0});var Ght=s(Q6);Spe=n(Ght,"SPAN",{});var Oht=s(Spe);m(MA.$$.fragment,Oht),Oht.forEach(t),Ght.forEach(t),Slr=i(t$e),Ppe=n(t$e,"SPAN",{});var Xht=s(Ppe);Plr=r(Xht,"TFAutoModelForMaskedLM"),Xht.forEach(t),t$e.forEach(t),QRe=i(c),Mr=n(c,"DIV",{class:!0});var Ql=s(Mr);m(EA.$$.fragment,Ql),$lr=i(Ql),wc=n(Ql,"P",{});var gQ=s(wc);Ilr=r(gQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),$pe=n(gQ,"CODE",{});var Vht=s($pe);Dlr=r(Vht,"from_pretrained()"),Vht.forEach(t),Nlr=r(gQ,"class method or the "),Ipe=n(gQ,"CODE",{});var zht=s(Ipe);jlr=r(zht,"from_config()"),zht.forEach(t),qlr=r(gQ,`class
method.`),gQ.forEach(t),Glr=i(Ql),yA=n(Ql,"P",{});var a$e=s(yA);Olr=r(a$e,"This class cannot be instantiated directly using "),Dpe=n(a$e,"CODE",{});var Wht=s(Dpe);Xlr=r(Wht,"__init__()"),Wht.forEach(t),Vlr=r(a$e," (throws an error)."),a$e.forEach(t),zlr=i(Ql),ut=n(Ql,"DIV",{class:!0});var Hl=s(ut);m(wA.$$.fragment,Hl),Wlr=i(Hl),Npe=n(Hl,"P",{});var Qht=s(Npe);Qlr=r(Qht,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Qht.forEach(t),Hlr=i(Hl),Ac=n(Hl,"P",{});var hQ=s(Ac);Ulr=r(hQ,`Note:
Loading a model from its configuration file does `),jpe=n(hQ,"STRONG",{});var Hht=s(jpe);Jlr=r(Hht,"not"),Hht.forEach(t),Ylr=r(hQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),qpe=n(hQ,"CODE",{});var Uht=s(qpe);Klr=r(Uht,"from_pretrained()"),Uht.forEach(t),Zlr=r(hQ,"to load the model weights."),hQ.forEach(t),eir=i(Hl),Gpe=n(Hl,"P",{});var Jht=s(Gpe);oir=r(Jht,"Examples:"),Jht.forEach(t),rir=i(Hl),m(AA.$$.fragment,Hl),Hl.forEach(t),tir=i(Ql),bo=n(Ql,"DIV",{class:!0});var va=s(bo);m(LA.$$.fragment,va),air=i(va),Ope=n(va,"P",{});var Yht=s(Ope);nir=r(Yht,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Yht.forEach(t),sir=i(va),Tn=n(va,"P",{});var QM=s(Tn);lir=r(QM,"The model class to instantiate is selected based on the "),Xpe=n(QM,"CODE",{});var Kht=s(Xpe);iir=r(Kht,"model_type"),Kht.forEach(t),dir=r(QM,` property of the config object (either
passed as an argument or loaded from `),Vpe=n(QM,"CODE",{});var Zht=s(Vpe);cir=r(Zht,"pretrained_model_name_or_path"),Zht.forEach(t),fir=r(QM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zpe=n(QM,"CODE",{});var ept=s(zpe);mir=r(ept,"pretrained_model_name_or_path"),ept.forEach(t),gir=r(QM,":"),QM.forEach(t),hir=i(va),J=n(va,"UL",{});var ee=s(J);H6=n(ee,"LI",{});var R8e=s(H6);Wpe=n(R8e,"STRONG",{});var opt=s(Wpe);pir=r(opt,"albert"),opt.forEach(t),_ir=r(R8e," \u2014 "),lO=n(R8e,"A",{href:!0});var rpt=s(lO);uir=r(rpt,"TFAlbertForMaskedLM"),rpt.forEach(t),bir=r(R8e," (ALBERT model)"),R8e.forEach(t),vir=i(ee),U6=n(ee,"LI",{});var S8e=s(U6);Qpe=n(S8e,"STRONG",{});var tpt=s(Qpe);Tir=r(tpt,"bert"),tpt.forEach(t),Fir=r(S8e," \u2014 "),iO=n(S8e,"A",{href:!0});var apt=s(iO);Cir=r(apt,"TFBertForMaskedLM"),apt.forEach(t),Mir=r(S8e," (BERT model)"),S8e.forEach(t),Eir=i(ee),J6=n(ee,"LI",{});var P8e=s(J6);Hpe=n(P8e,"STRONG",{});var npt=s(Hpe);yir=r(npt,"camembert"),npt.forEach(t),wir=r(P8e," \u2014 "),dO=n(P8e,"A",{href:!0});var spt=s(dO);Air=r(spt,"TFCamembertForMaskedLM"),spt.forEach(t),Lir=r(P8e," (CamemBERT model)"),P8e.forEach(t),Bir=i(ee),Y6=n(ee,"LI",{});var $8e=s(Y6);Upe=n($8e,"STRONG",{});var lpt=s(Upe);xir=r(lpt,"convbert"),lpt.forEach(t),kir=r($8e," \u2014 "),cO=n($8e,"A",{href:!0});var ipt=s(cO);Rir=r(ipt,"TFConvBertForMaskedLM"),ipt.forEach(t),Sir=r($8e," (ConvBERT model)"),$8e.forEach(t),Pir=i(ee),K6=n(ee,"LI",{});var I8e=s(K6);Jpe=n(I8e,"STRONG",{});var dpt=s(Jpe);$ir=r(dpt,"deberta"),dpt.forEach(t),Iir=r(I8e," \u2014 "),fO=n(I8e,"A",{href:!0});var cpt=s(fO);Dir=r(cpt,"TFDebertaForMaskedLM"),cpt.forEach(t),Nir=r(I8e," (DeBERTa model)"),I8e.forEach(t),jir=i(ee),Z6=n(ee,"LI",{});var D8e=s(Z6);Ype=n(D8e,"STRONG",{});var fpt=s(Ype);qir=r(fpt,"deberta-v2"),fpt.forEach(t),Gir=r(D8e," \u2014 "),mO=n(D8e,"A",{href:!0});var mpt=s(mO);Oir=r(mpt,"TFDebertaV2ForMaskedLM"),mpt.forEach(t),Xir=r(D8e," (DeBERTa-v2 model)"),D8e.forEach(t),Vir=i(ee),eT=n(ee,"LI",{});var N8e=s(eT);Kpe=n(N8e,"STRONG",{});var gpt=s(Kpe);zir=r(gpt,"distilbert"),gpt.forEach(t),Wir=r(N8e," \u2014 "),gO=n(N8e,"A",{href:!0});var hpt=s(gO);Qir=r(hpt,"TFDistilBertForMaskedLM"),hpt.forEach(t),Hir=r(N8e," (DistilBERT model)"),N8e.forEach(t),Uir=i(ee),oT=n(ee,"LI",{});var j8e=s(oT);Zpe=n(j8e,"STRONG",{});var ppt=s(Zpe);Jir=r(ppt,"electra"),ppt.forEach(t),Yir=r(j8e," \u2014 "),hO=n(j8e,"A",{href:!0});var _pt=s(hO);Kir=r(_pt,"TFElectraForMaskedLM"),_pt.forEach(t),Zir=r(j8e," (ELECTRA model)"),j8e.forEach(t),edr=i(ee),rT=n(ee,"LI",{});var q8e=s(rT);e_e=n(q8e,"STRONG",{});var upt=s(e_e);odr=r(upt,"flaubert"),upt.forEach(t),rdr=r(q8e," \u2014 "),pO=n(q8e,"A",{href:!0});var bpt=s(pO);tdr=r(bpt,"TFFlaubertWithLMHeadModel"),bpt.forEach(t),adr=r(q8e," (FlauBERT model)"),q8e.forEach(t),ndr=i(ee),tT=n(ee,"LI",{});var G8e=s(tT);o_e=n(G8e,"STRONG",{});var vpt=s(o_e);sdr=r(vpt,"funnel"),vpt.forEach(t),ldr=r(G8e," \u2014 "),_O=n(G8e,"A",{href:!0});var Tpt=s(_O);idr=r(Tpt,"TFFunnelForMaskedLM"),Tpt.forEach(t),ddr=r(G8e," (Funnel Transformer model)"),G8e.forEach(t),cdr=i(ee),aT=n(ee,"LI",{});var O8e=s(aT);r_e=n(O8e,"STRONG",{});var Fpt=s(r_e);fdr=r(Fpt,"layoutlm"),Fpt.forEach(t),mdr=r(O8e," \u2014 "),uO=n(O8e,"A",{href:!0});var Cpt=s(uO);gdr=r(Cpt,"TFLayoutLMForMaskedLM"),Cpt.forEach(t),hdr=r(O8e," (LayoutLM model)"),O8e.forEach(t),pdr=i(ee),nT=n(ee,"LI",{});var X8e=s(nT);t_e=n(X8e,"STRONG",{});var Mpt=s(t_e);_dr=r(Mpt,"longformer"),Mpt.forEach(t),udr=r(X8e," \u2014 "),bO=n(X8e,"A",{href:!0});var Ept=s(bO);bdr=r(Ept,"TFLongformerForMaskedLM"),Ept.forEach(t),vdr=r(X8e," (Longformer model)"),X8e.forEach(t),Tdr=i(ee),sT=n(ee,"LI",{});var V8e=s(sT);a_e=n(V8e,"STRONG",{});var ypt=s(a_e);Fdr=r(ypt,"mobilebert"),ypt.forEach(t),Cdr=r(V8e," \u2014 "),vO=n(V8e,"A",{href:!0});var wpt=s(vO);Mdr=r(wpt,"TFMobileBertForMaskedLM"),wpt.forEach(t),Edr=r(V8e," (MobileBERT model)"),V8e.forEach(t),ydr=i(ee),lT=n(ee,"LI",{});var z8e=s(lT);n_e=n(z8e,"STRONG",{});var Apt=s(n_e);wdr=r(Apt,"mpnet"),Apt.forEach(t),Adr=r(z8e," \u2014 "),TO=n(z8e,"A",{href:!0});var Lpt=s(TO);Ldr=r(Lpt,"TFMPNetForMaskedLM"),Lpt.forEach(t),Bdr=r(z8e," (MPNet model)"),z8e.forEach(t),xdr=i(ee),iT=n(ee,"LI",{});var W8e=s(iT);s_e=n(W8e,"STRONG",{});var Bpt=s(s_e);kdr=r(Bpt,"rembert"),Bpt.forEach(t),Rdr=r(W8e," \u2014 "),FO=n(W8e,"A",{href:!0});var xpt=s(FO);Sdr=r(xpt,"TFRemBertForMaskedLM"),xpt.forEach(t),Pdr=r(W8e," (RemBERT model)"),W8e.forEach(t),$dr=i(ee),dT=n(ee,"LI",{});var Q8e=s(dT);l_e=n(Q8e,"STRONG",{});var kpt=s(l_e);Idr=r(kpt,"roberta"),kpt.forEach(t),Ddr=r(Q8e," \u2014 "),CO=n(Q8e,"A",{href:!0});var Rpt=s(CO);Ndr=r(Rpt,"TFRobertaForMaskedLM"),Rpt.forEach(t),jdr=r(Q8e," (RoBERTa model)"),Q8e.forEach(t),qdr=i(ee),cT=n(ee,"LI",{});var H8e=s(cT);i_e=n(H8e,"STRONG",{});var Spt=s(i_e);Gdr=r(Spt,"roformer"),Spt.forEach(t),Odr=r(H8e," \u2014 "),MO=n(H8e,"A",{href:!0});var Ppt=s(MO);Xdr=r(Ppt,"TFRoFormerForMaskedLM"),Ppt.forEach(t),Vdr=r(H8e," (RoFormer model)"),H8e.forEach(t),zdr=i(ee),fT=n(ee,"LI",{});var U8e=s(fT);d_e=n(U8e,"STRONG",{});var $pt=s(d_e);Wdr=r($pt,"tapas"),$pt.forEach(t),Qdr=r(U8e," \u2014 "),EO=n(U8e,"A",{href:!0});var Ipt=s(EO);Hdr=r(Ipt,"TFTapasForMaskedLM"),Ipt.forEach(t),Udr=r(U8e," (TAPAS model)"),U8e.forEach(t),Jdr=i(ee),mT=n(ee,"LI",{});var J8e=s(mT);c_e=n(J8e,"STRONG",{});var Dpt=s(c_e);Ydr=r(Dpt,"xlm"),Dpt.forEach(t),Kdr=r(J8e," \u2014 "),yO=n(J8e,"A",{href:!0});var Npt=s(yO);Zdr=r(Npt,"TFXLMWithLMHeadModel"),Npt.forEach(t),ecr=r(J8e," (XLM model)"),J8e.forEach(t),ocr=i(ee),gT=n(ee,"LI",{});var Y8e=s(gT);f_e=n(Y8e,"STRONG",{});var jpt=s(f_e);rcr=r(jpt,"xlm-roberta"),jpt.forEach(t),tcr=r(Y8e," \u2014 "),wO=n(Y8e,"A",{href:!0});var qpt=s(wO);acr=r(qpt,"TFXLMRobertaForMaskedLM"),qpt.forEach(t),ncr=r(Y8e," (XLM-RoBERTa model)"),Y8e.forEach(t),ee.forEach(t),scr=i(va),m_e=n(va,"P",{});var Gpt=s(m_e);lcr=r(Gpt,"Examples:"),Gpt.forEach(t),icr=i(va),m(BA.$$.fragment,va),va.forEach(t),Ql.forEach(t),HRe=i(c),Lc=n(c,"H2",{class:!0});var n$e=s(Lc);hT=n(n$e,"A",{id:!0,class:!0,href:!0});var Opt=s(hT);g_e=n(Opt,"SPAN",{});var Xpt=s(g_e);m(xA.$$.fragment,Xpt),Xpt.forEach(t),Opt.forEach(t),dcr=i(n$e),h_e=n(n$e,"SPAN",{});var Vpt=s(h_e);ccr=r(Vpt,"TFAutoModelForSeq2SeqLM"),Vpt.forEach(t),n$e.forEach(t),URe=i(c),Er=n(c,"DIV",{class:!0});var Ul=s(Er);m(kA.$$.fragment,Ul),fcr=i(Ul),Bc=n(Ul,"P",{});var pQ=s(Bc);mcr=r(pQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),p_e=n(pQ,"CODE",{});var zpt=s(p_e);gcr=r(zpt,"from_pretrained()"),zpt.forEach(t),hcr=r(pQ,"class method or the "),__e=n(pQ,"CODE",{});var Wpt=s(__e);pcr=r(Wpt,"from_config()"),Wpt.forEach(t),_cr=r(pQ,`class
method.`),pQ.forEach(t),ucr=i(Ul),RA=n(Ul,"P",{});var s$e=s(RA);bcr=r(s$e,"This class cannot be instantiated directly using "),u_e=n(s$e,"CODE",{});var Qpt=s(u_e);vcr=r(Qpt,"__init__()"),Qpt.forEach(t),Tcr=r(s$e," (throws an error)."),s$e.forEach(t),Fcr=i(Ul),bt=n(Ul,"DIV",{class:!0});var Jl=s(bt);m(SA.$$.fragment,Jl),Ccr=i(Jl),b_e=n(Jl,"P",{});var Hpt=s(b_e);Mcr=r(Hpt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Hpt.forEach(t),Ecr=i(Jl),xc=n(Jl,"P",{});var _Q=s(xc);ycr=r(_Q,`Note:
Loading a model from its configuration file does `),v_e=n(_Q,"STRONG",{});var Upt=s(v_e);wcr=r(Upt,"not"),Upt.forEach(t),Acr=r(_Q,` load the model weights. It only affects the
model\u2019s configuration. Use `),T_e=n(_Q,"CODE",{});var Jpt=s(T_e);Lcr=r(Jpt,"from_pretrained()"),Jpt.forEach(t),Bcr=r(_Q,"to load the model weights."),_Q.forEach(t),xcr=i(Jl),F_e=n(Jl,"P",{});var Ypt=s(F_e);kcr=r(Ypt,"Examples:"),Ypt.forEach(t),Rcr=i(Jl),m(PA.$$.fragment,Jl),Jl.forEach(t),Scr=i(Ul),vo=n(Ul,"DIV",{class:!0});var Ta=s(vo);m($A.$$.fragment,Ta),Pcr=i(Ta),C_e=n(Ta,"P",{});var Kpt=s(C_e);$cr=r(Kpt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Kpt.forEach(t),Icr=i(Ta),Fn=n(Ta,"P",{});var HM=s(Fn);Dcr=r(HM,"The model class to instantiate is selected based on the "),M_e=n(HM,"CODE",{});var Zpt=s(M_e);Ncr=r(Zpt,"model_type"),Zpt.forEach(t),jcr=r(HM,` property of the config object (either
passed as an argument or loaded from `),E_e=n(HM,"CODE",{});var e_t=s(E_e);qcr=r(e_t,"pretrained_model_name_or_path"),e_t.forEach(t),Gcr=r(HM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y_e=n(HM,"CODE",{});var o_t=s(y_e);Ocr=r(o_t,"pretrained_model_name_or_path"),o_t.forEach(t),Xcr=r(HM,":"),HM.forEach(t),Vcr=i(Ta),ue=n(Ta,"UL",{});var ye=s(ue);pT=n(ye,"LI",{});var K8e=s(pT);w_e=n(K8e,"STRONG",{});var r_t=s(w_e);zcr=r(r_t,"bart"),r_t.forEach(t),Wcr=r(K8e," \u2014 "),AO=n(K8e,"A",{href:!0});var t_t=s(AO);Qcr=r(t_t,"TFBartForConditionalGeneration"),t_t.forEach(t),Hcr=r(K8e," (BART model)"),K8e.forEach(t),Ucr=i(ye),_T=n(ye,"LI",{});var Z8e=s(_T);A_e=n(Z8e,"STRONG",{});var a_t=s(A_e);Jcr=r(a_t,"blenderbot"),a_t.forEach(t),Ycr=r(Z8e," \u2014 "),LO=n(Z8e,"A",{href:!0});var n_t=s(LO);Kcr=r(n_t,"TFBlenderbotForConditionalGeneration"),n_t.forEach(t),Zcr=r(Z8e," (Blenderbot model)"),Z8e.forEach(t),efr=i(ye),uT=n(ye,"LI",{});var e9e=s(uT);L_e=n(e9e,"STRONG",{});var s_t=s(L_e);ofr=r(s_t,"blenderbot-small"),s_t.forEach(t),rfr=r(e9e," \u2014 "),BO=n(e9e,"A",{href:!0});var l_t=s(BO);tfr=r(l_t,"TFBlenderbotSmallForConditionalGeneration"),l_t.forEach(t),afr=r(e9e," (BlenderbotSmall model)"),e9e.forEach(t),nfr=i(ye),bT=n(ye,"LI",{});var o9e=s(bT);B_e=n(o9e,"STRONG",{});var i_t=s(B_e);sfr=r(i_t,"encoder-decoder"),i_t.forEach(t),lfr=r(o9e," \u2014 "),xO=n(o9e,"A",{href:!0});var d_t=s(xO);ifr=r(d_t,"TFEncoderDecoderModel"),d_t.forEach(t),dfr=r(o9e," (Encoder decoder model)"),o9e.forEach(t),cfr=i(ye),vT=n(ye,"LI",{});var r9e=s(vT);x_e=n(r9e,"STRONG",{});var c_t=s(x_e);ffr=r(c_t,"led"),c_t.forEach(t),mfr=r(r9e," \u2014 "),kO=n(r9e,"A",{href:!0});var f_t=s(kO);gfr=r(f_t,"TFLEDForConditionalGeneration"),f_t.forEach(t),hfr=r(r9e," (LED model)"),r9e.forEach(t),pfr=i(ye),TT=n(ye,"LI",{});var t9e=s(TT);k_e=n(t9e,"STRONG",{});var m_t=s(k_e);_fr=r(m_t,"marian"),m_t.forEach(t),ufr=r(t9e," \u2014 "),RO=n(t9e,"A",{href:!0});var g_t=s(RO);bfr=r(g_t,"TFMarianMTModel"),g_t.forEach(t),vfr=r(t9e," (Marian model)"),t9e.forEach(t),Tfr=i(ye),FT=n(ye,"LI",{});var a9e=s(FT);R_e=n(a9e,"STRONG",{});var h_t=s(R_e);Ffr=r(h_t,"mbart"),h_t.forEach(t),Cfr=r(a9e," \u2014 "),SO=n(a9e,"A",{href:!0});var p_t=s(SO);Mfr=r(p_t,"TFMBartForConditionalGeneration"),p_t.forEach(t),Efr=r(a9e," (mBART model)"),a9e.forEach(t),yfr=i(ye),CT=n(ye,"LI",{});var n9e=s(CT);S_e=n(n9e,"STRONG",{});var __t=s(S_e);wfr=r(__t,"mt5"),__t.forEach(t),Afr=r(n9e," \u2014 "),PO=n(n9e,"A",{href:!0});var u_t=s(PO);Lfr=r(u_t,"TFMT5ForConditionalGeneration"),u_t.forEach(t),Bfr=r(n9e," (mT5 model)"),n9e.forEach(t),xfr=i(ye),MT=n(ye,"LI",{});var s9e=s(MT);P_e=n(s9e,"STRONG",{});var b_t=s(P_e);kfr=r(b_t,"pegasus"),b_t.forEach(t),Rfr=r(s9e," \u2014 "),$O=n(s9e,"A",{href:!0});var v_t=s($O);Sfr=r(v_t,"TFPegasusForConditionalGeneration"),v_t.forEach(t),Pfr=r(s9e," (Pegasus model)"),s9e.forEach(t),$fr=i(ye),ET=n(ye,"LI",{});var l9e=s(ET);$_e=n(l9e,"STRONG",{});var T_t=s($_e);Ifr=r(T_t,"t5"),T_t.forEach(t),Dfr=r(l9e," \u2014 "),IO=n(l9e,"A",{href:!0});var F_t=s(IO);Nfr=r(F_t,"TFT5ForConditionalGeneration"),F_t.forEach(t),jfr=r(l9e," (T5 model)"),l9e.forEach(t),ye.forEach(t),qfr=i(Ta),I_e=n(Ta,"P",{});var C_t=s(I_e);Gfr=r(C_t,"Examples:"),C_t.forEach(t),Ofr=i(Ta),m(IA.$$.fragment,Ta),Ta.forEach(t),Ul.forEach(t),JRe=i(c),kc=n(c,"H2",{class:!0});var l$e=s(kc);yT=n(l$e,"A",{id:!0,class:!0,href:!0});var M_t=s(yT);D_e=n(M_t,"SPAN",{});var E_t=s(D_e);m(DA.$$.fragment,E_t),E_t.forEach(t),M_t.forEach(t),Xfr=i(l$e),N_e=n(l$e,"SPAN",{});var y_t=s(N_e);Vfr=r(y_t,"TFAutoModelForSequenceClassification"),y_t.forEach(t),l$e.forEach(t),YRe=i(c),yr=n(c,"DIV",{class:!0});var Yl=s(yr);m(NA.$$.fragment,Yl),zfr=i(Yl),Rc=n(Yl,"P",{});var uQ=s(Rc);Wfr=r(uQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),j_e=n(uQ,"CODE",{});var w_t=s(j_e);Qfr=r(w_t,"from_pretrained()"),w_t.forEach(t),Hfr=r(uQ,"class method or the "),q_e=n(uQ,"CODE",{});var A_t=s(q_e);Ufr=r(A_t,"from_config()"),A_t.forEach(t),Jfr=r(uQ,`class
method.`),uQ.forEach(t),Yfr=i(Yl),jA=n(Yl,"P",{});var i$e=s(jA);Kfr=r(i$e,"This class cannot be instantiated directly using "),G_e=n(i$e,"CODE",{});var L_t=s(G_e);Zfr=r(L_t,"__init__()"),L_t.forEach(t),emr=r(i$e," (throws an error)."),i$e.forEach(t),omr=i(Yl),vt=n(Yl,"DIV",{class:!0});var Kl=s(vt);m(qA.$$.fragment,Kl),rmr=i(Kl),O_e=n(Kl,"P",{});var B_t=s(O_e);tmr=r(B_t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),B_t.forEach(t),amr=i(Kl),Sc=n(Kl,"P",{});var bQ=s(Sc);nmr=r(bQ,`Note:
Loading a model from its configuration file does `),X_e=n(bQ,"STRONG",{});var x_t=s(X_e);smr=r(x_t,"not"),x_t.forEach(t),lmr=r(bQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),V_e=n(bQ,"CODE",{});var k_t=s(V_e);imr=r(k_t,"from_pretrained()"),k_t.forEach(t),dmr=r(bQ,"to load the model weights."),bQ.forEach(t),cmr=i(Kl),z_e=n(Kl,"P",{});var R_t=s(z_e);fmr=r(R_t,"Examples:"),R_t.forEach(t),mmr=i(Kl),m(GA.$$.fragment,Kl),Kl.forEach(t),gmr=i(Yl),To=n(Yl,"DIV",{class:!0});var Fa=s(To);m(OA.$$.fragment,Fa),hmr=i(Fa),W_e=n(Fa,"P",{});var S_t=s(W_e);pmr=r(S_t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),S_t.forEach(t),_mr=i(Fa),Cn=n(Fa,"P",{});var UM=s(Cn);umr=r(UM,"The model class to instantiate is selected based on the "),Q_e=n(UM,"CODE",{});var P_t=s(Q_e);bmr=r(P_t,"model_type"),P_t.forEach(t),vmr=r(UM,` property of the config object (either
passed as an argument or loaded from `),H_e=n(UM,"CODE",{});var $_t=s(H_e);Tmr=r($_t,"pretrained_model_name_or_path"),$_t.forEach(t),Fmr=r(UM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U_e=n(UM,"CODE",{});var I_t=s(U_e);Cmr=r(I_t,"pretrained_model_name_or_path"),I_t.forEach(t),Mmr=r(UM,":"),UM.forEach(t),Emr=i(Fa),X=n(Fa,"UL",{});var W=s(X);wT=n(W,"LI",{});var i9e=s(wT);J_e=n(i9e,"STRONG",{});var D_t=s(J_e);ymr=r(D_t,"albert"),D_t.forEach(t),wmr=r(i9e," \u2014 "),DO=n(i9e,"A",{href:!0});var N_t=s(DO);Amr=r(N_t,"TFAlbertForSequenceClassification"),N_t.forEach(t),Lmr=r(i9e," (ALBERT model)"),i9e.forEach(t),Bmr=i(W),AT=n(W,"LI",{});var d9e=s(AT);Y_e=n(d9e,"STRONG",{});var j_t=s(Y_e);xmr=r(j_t,"bert"),j_t.forEach(t),kmr=r(d9e," \u2014 "),NO=n(d9e,"A",{href:!0});var q_t=s(NO);Rmr=r(q_t,"TFBertForSequenceClassification"),q_t.forEach(t),Smr=r(d9e," (BERT model)"),d9e.forEach(t),Pmr=i(W),LT=n(W,"LI",{});var c9e=s(LT);K_e=n(c9e,"STRONG",{});var G_t=s(K_e);$mr=r(G_t,"camembert"),G_t.forEach(t),Imr=r(c9e," \u2014 "),jO=n(c9e,"A",{href:!0});var O_t=s(jO);Dmr=r(O_t,"TFCamembertForSequenceClassification"),O_t.forEach(t),Nmr=r(c9e," (CamemBERT model)"),c9e.forEach(t),jmr=i(W),BT=n(W,"LI",{});var f9e=s(BT);Z_e=n(f9e,"STRONG",{});var X_t=s(Z_e);qmr=r(X_t,"convbert"),X_t.forEach(t),Gmr=r(f9e," \u2014 "),qO=n(f9e,"A",{href:!0});var V_t=s(qO);Omr=r(V_t,"TFConvBertForSequenceClassification"),V_t.forEach(t),Xmr=r(f9e," (ConvBERT model)"),f9e.forEach(t),Vmr=i(W),xT=n(W,"LI",{});var m9e=s(xT);eue=n(m9e,"STRONG",{});var z_t=s(eue);zmr=r(z_t,"ctrl"),z_t.forEach(t),Wmr=r(m9e," \u2014 "),GO=n(m9e,"A",{href:!0});var W_t=s(GO);Qmr=r(W_t,"TFCTRLForSequenceClassification"),W_t.forEach(t),Hmr=r(m9e," (CTRL model)"),m9e.forEach(t),Umr=i(W),kT=n(W,"LI",{});var g9e=s(kT);oue=n(g9e,"STRONG",{});var Q_t=s(oue);Jmr=r(Q_t,"deberta"),Q_t.forEach(t),Ymr=r(g9e," \u2014 "),OO=n(g9e,"A",{href:!0});var H_t=s(OO);Kmr=r(H_t,"TFDebertaForSequenceClassification"),H_t.forEach(t),Zmr=r(g9e," (DeBERTa model)"),g9e.forEach(t),egr=i(W),RT=n(W,"LI",{});var h9e=s(RT);rue=n(h9e,"STRONG",{});var U_t=s(rue);ogr=r(U_t,"deberta-v2"),U_t.forEach(t),rgr=r(h9e," \u2014 "),XO=n(h9e,"A",{href:!0});var J_t=s(XO);tgr=r(J_t,"TFDebertaV2ForSequenceClassification"),J_t.forEach(t),agr=r(h9e," (DeBERTa-v2 model)"),h9e.forEach(t),ngr=i(W),ST=n(W,"LI",{});var p9e=s(ST);tue=n(p9e,"STRONG",{});var Y_t=s(tue);sgr=r(Y_t,"distilbert"),Y_t.forEach(t),lgr=r(p9e," \u2014 "),VO=n(p9e,"A",{href:!0});var K_t=s(VO);igr=r(K_t,"TFDistilBertForSequenceClassification"),K_t.forEach(t),dgr=r(p9e," (DistilBERT model)"),p9e.forEach(t),cgr=i(W),PT=n(W,"LI",{});var _9e=s(PT);aue=n(_9e,"STRONG",{});var Z_t=s(aue);fgr=r(Z_t,"electra"),Z_t.forEach(t),mgr=r(_9e," \u2014 "),zO=n(_9e,"A",{href:!0});var eut=s(zO);ggr=r(eut,"TFElectraForSequenceClassification"),eut.forEach(t),hgr=r(_9e," (ELECTRA model)"),_9e.forEach(t),pgr=i(W),$T=n(W,"LI",{});var u9e=s($T);nue=n(u9e,"STRONG",{});var out=s(nue);_gr=r(out,"flaubert"),out.forEach(t),ugr=r(u9e," \u2014 "),WO=n(u9e,"A",{href:!0});var rut=s(WO);bgr=r(rut,"TFFlaubertForSequenceClassification"),rut.forEach(t),vgr=r(u9e," (FlauBERT model)"),u9e.forEach(t),Tgr=i(W),IT=n(W,"LI",{});var b9e=s(IT);sue=n(b9e,"STRONG",{});var tut=s(sue);Fgr=r(tut,"funnel"),tut.forEach(t),Cgr=r(b9e," \u2014 "),QO=n(b9e,"A",{href:!0});var aut=s(QO);Mgr=r(aut,"TFFunnelForSequenceClassification"),aut.forEach(t),Egr=r(b9e," (Funnel Transformer model)"),b9e.forEach(t),ygr=i(W),DT=n(W,"LI",{});var v9e=s(DT);lue=n(v9e,"STRONG",{});var nut=s(lue);wgr=r(nut,"gpt2"),nut.forEach(t),Agr=r(v9e," \u2014 "),HO=n(v9e,"A",{href:!0});var sut=s(HO);Lgr=r(sut,"TFGPT2ForSequenceClassification"),sut.forEach(t),Bgr=r(v9e," (OpenAI GPT-2 model)"),v9e.forEach(t),xgr=i(W),NT=n(W,"LI",{});var T9e=s(NT);iue=n(T9e,"STRONG",{});var lut=s(iue);kgr=r(lut,"gptj"),lut.forEach(t),Rgr=r(T9e," \u2014 "),UO=n(T9e,"A",{href:!0});var iut=s(UO);Sgr=r(iut,"TFGPTJForSequenceClassification"),iut.forEach(t),Pgr=r(T9e," (GPT-J model)"),T9e.forEach(t),$gr=i(W),jT=n(W,"LI",{});var F9e=s(jT);due=n(F9e,"STRONG",{});var dut=s(due);Igr=r(dut,"layoutlm"),dut.forEach(t),Dgr=r(F9e," \u2014 "),JO=n(F9e,"A",{href:!0});var cut=s(JO);Ngr=r(cut,"TFLayoutLMForSequenceClassification"),cut.forEach(t),jgr=r(F9e," (LayoutLM model)"),F9e.forEach(t),qgr=i(W),qT=n(W,"LI",{});var C9e=s(qT);cue=n(C9e,"STRONG",{});var fut=s(cue);Ggr=r(fut,"longformer"),fut.forEach(t),Ogr=r(C9e," \u2014 "),YO=n(C9e,"A",{href:!0});var mut=s(YO);Xgr=r(mut,"TFLongformerForSequenceClassification"),mut.forEach(t),Vgr=r(C9e," (Longformer model)"),C9e.forEach(t),zgr=i(W),GT=n(W,"LI",{});var M9e=s(GT);fue=n(M9e,"STRONG",{});var gut=s(fue);Wgr=r(gut,"mobilebert"),gut.forEach(t),Qgr=r(M9e," \u2014 "),KO=n(M9e,"A",{href:!0});var hut=s(KO);Hgr=r(hut,"TFMobileBertForSequenceClassification"),hut.forEach(t),Ugr=r(M9e," (MobileBERT model)"),M9e.forEach(t),Jgr=i(W),OT=n(W,"LI",{});var E9e=s(OT);mue=n(E9e,"STRONG",{});var put=s(mue);Ygr=r(put,"mpnet"),put.forEach(t),Kgr=r(E9e," \u2014 "),ZO=n(E9e,"A",{href:!0});var _ut=s(ZO);Zgr=r(_ut,"TFMPNetForSequenceClassification"),_ut.forEach(t),ehr=r(E9e," (MPNet model)"),E9e.forEach(t),ohr=i(W),XT=n(W,"LI",{});var y9e=s(XT);gue=n(y9e,"STRONG",{});var uut=s(gue);rhr=r(uut,"openai-gpt"),uut.forEach(t),thr=r(y9e," \u2014 "),eX=n(y9e,"A",{href:!0});var but=s(eX);ahr=r(but,"TFOpenAIGPTForSequenceClassification"),but.forEach(t),nhr=r(y9e," (OpenAI GPT model)"),y9e.forEach(t),shr=i(W),VT=n(W,"LI",{});var w9e=s(VT);hue=n(w9e,"STRONG",{});var vut=s(hue);lhr=r(vut,"rembert"),vut.forEach(t),ihr=r(w9e," \u2014 "),oX=n(w9e,"A",{href:!0});var Tut=s(oX);dhr=r(Tut,"TFRemBertForSequenceClassification"),Tut.forEach(t),chr=r(w9e," (RemBERT model)"),w9e.forEach(t),fhr=i(W),zT=n(W,"LI",{});var A9e=s(zT);pue=n(A9e,"STRONG",{});var Fut=s(pue);mhr=r(Fut,"roberta"),Fut.forEach(t),ghr=r(A9e," \u2014 "),rX=n(A9e,"A",{href:!0});var Cut=s(rX);hhr=r(Cut,"TFRobertaForSequenceClassification"),Cut.forEach(t),phr=r(A9e," (RoBERTa model)"),A9e.forEach(t),_hr=i(W),WT=n(W,"LI",{});var L9e=s(WT);_ue=n(L9e,"STRONG",{});var Mut=s(_ue);uhr=r(Mut,"roformer"),Mut.forEach(t),bhr=r(L9e," \u2014 "),tX=n(L9e,"A",{href:!0});var Eut=s(tX);vhr=r(Eut,"TFRoFormerForSequenceClassification"),Eut.forEach(t),Thr=r(L9e," (RoFormer model)"),L9e.forEach(t),Fhr=i(W),QT=n(W,"LI",{});var B9e=s(QT);uue=n(B9e,"STRONG",{});var yut=s(uue);Chr=r(yut,"tapas"),yut.forEach(t),Mhr=r(B9e," \u2014 "),aX=n(B9e,"A",{href:!0});var wut=s(aX);Ehr=r(wut,"TFTapasForSequenceClassification"),wut.forEach(t),yhr=r(B9e," (TAPAS model)"),B9e.forEach(t),whr=i(W),HT=n(W,"LI",{});var x9e=s(HT);bue=n(x9e,"STRONG",{});var Aut=s(bue);Ahr=r(Aut,"transfo-xl"),Aut.forEach(t),Lhr=r(x9e," \u2014 "),nX=n(x9e,"A",{href:!0});var Lut=s(nX);Bhr=r(Lut,"TFTransfoXLForSequenceClassification"),Lut.forEach(t),xhr=r(x9e," (Transformer-XL model)"),x9e.forEach(t),khr=i(W),UT=n(W,"LI",{});var k9e=s(UT);vue=n(k9e,"STRONG",{});var But=s(vue);Rhr=r(But,"xlm"),But.forEach(t),Shr=r(k9e," \u2014 "),sX=n(k9e,"A",{href:!0});var xut=s(sX);Phr=r(xut,"TFXLMForSequenceClassification"),xut.forEach(t),$hr=r(k9e," (XLM model)"),k9e.forEach(t),Ihr=i(W),JT=n(W,"LI",{});var R9e=s(JT);Tue=n(R9e,"STRONG",{});var kut=s(Tue);Dhr=r(kut,"xlm-roberta"),kut.forEach(t),Nhr=r(R9e," \u2014 "),lX=n(R9e,"A",{href:!0});var Rut=s(lX);jhr=r(Rut,"TFXLMRobertaForSequenceClassification"),Rut.forEach(t),qhr=r(R9e," (XLM-RoBERTa model)"),R9e.forEach(t),Ghr=i(W),YT=n(W,"LI",{});var S9e=s(YT);Fue=n(S9e,"STRONG",{});var Sut=s(Fue);Ohr=r(Sut,"xlnet"),Sut.forEach(t),Xhr=r(S9e," \u2014 "),iX=n(S9e,"A",{href:!0});var Put=s(iX);Vhr=r(Put,"TFXLNetForSequenceClassification"),Put.forEach(t),zhr=r(S9e," (XLNet model)"),S9e.forEach(t),W.forEach(t),Whr=i(Fa),Cue=n(Fa,"P",{});var $ut=s(Cue);Qhr=r($ut,"Examples:"),$ut.forEach(t),Hhr=i(Fa),m(XA.$$.fragment,Fa),Fa.forEach(t),Yl.forEach(t),KRe=i(c),Pc=n(c,"H2",{class:!0});var d$e=s(Pc);KT=n(d$e,"A",{id:!0,class:!0,href:!0});var Iut=s(KT);Mue=n(Iut,"SPAN",{});var Dut=s(Mue);m(VA.$$.fragment,Dut),Dut.forEach(t),Iut.forEach(t),Uhr=i(d$e),Eue=n(d$e,"SPAN",{});var Nut=s(Eue);Jhr=r(Nut,"TFAutoModelForMultipleChoice"),Nut.forEach(t),d$e.forEach(t),ZRe=i(c),wr=n(c,"DIV",{class:!0});var Zl=s(wr);m(zA.$$.fragment,Zl),Yhr=i(Zl),$c=n(Zl,"P",{});var vQ=s($c);Khr=r(vQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),yue=n(vQ,"CODE",{});var jut=s(yue);Zhr=r(jut,"from_pretrained()"),jut.forEach(t),epr=r(vQ,"class method or the "),wue=n(vQ,"CODE",{});var qut=s(wue);opr=r(qut,"from_config()"),qut.forEach(t),rpr=r(vQ,`class
method.`),vQ.forEach(t),tpr=i(Zl),WA=n(Zl,"P",{});var c$e=s(WA);apr=r(c$e,"This class cannot be instantiated directly using "),Aue=n(c$e,"CODE",{});var Gut=s(Aue);npr=r(Gut,"__init__()"),Gut.forEach(t),spr=r(c$e," (throws an error)."),c$e.forEach(t),lpr=i(Zl),Tt=n(Zl,"DIV",{class:!0});var ei=s(Tt);m(QA.$$.fragment,ei),ipr=i(ei),Lue=n(ei,"P",{});var Out=s(Lue);dpr=r(Out,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Out.forEach(t),cpr=i(ei),Ic=n(ei,"P",{});var TQ=s(Ic);fpr=r(TQ,`Note:
Loading a model from its configuration file does `),Bue=n(TQ,"STRONG",{});var Xut=s(Bue);mpr=r(Xut,"not"),Xut.forEach(t),gpr=r(TQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),xue=n(TQ,"CODE",{});var Vut=s(xue);hpr=r(Vut,"from_pretrained()"),Vut.forEach(t),ppr=r(TQ,"to load the model weights."),TQ.forEach(t),_pr=i(ei),kue=n(ei,"P",{});var zut=s(kue);upr=r(zut,"Examples:"),zut.forEach(t),bpr=i(ei),m(HA.$$.fragment,ei),ei.forEach(t),vpr=i(Zl),Fo=n(Zl,"DIV",{class:!0});var Ca=s(Fo);m(UA.$$.fragment,Ca),Tpr=i(Ca),Rue=n(Ca,"P",{});var Wut=s(Rue);Fpr=r(Wut,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Wut.forEach(t),Cpr=i(Ca),Mn=n(Ca,"P",{});var JM=s(Mn);Mpr=r(JM,"The model class to instantiate is selected based on the "),Sue=n(JM,"CODE",{});var Qut=s(Sue);Epr=r(Qut,"model_type"),Qut.forEach(t),ypr=r(JM,` property of the config object (either
passed as an argument or loaded from `),Pue=n(JM,"CODE",{});var Hut=s(Pue);wpr=r(Hut,"pretrained_model_name_or_path"),Hut.forEach(t),Apr=r(JM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$ue=n(JM,"CODE",{});var Uut=s($ue);Lpr=r(Uut,"pretrained_model_name_or_path"),Uut.forEach(t),Bpr=r(JM,":"),JM.forEach(t),xpr=i(Ca),ae=n(Ca,"UL",{});var le=s(ae);ZT=n(le,"LI",{});var P9e=s(ZT);Iue=n(P9e,"STRONG",{});var Jut=s(Iue);kpr=r(Jut,"albert"),Jut.forEach(t),Rpr=r(P9e," \u2014 "),dX=n(P9e,"A",{href:!0});var Yut=s(dX);Spr=r(Yut,"TFAlbertForMultipleChoice"),Yut.forEach(t),Ppr=r(P9e," (ALBERT model)"),P9e.forEach(t),$pr=i(le),e7=n(le,"LI",{});var $9e=s(e7);Due=n($9e,"STRONG",{});var Kut=s(Due);Ipr=r(Kut,"bert"),Kut.forEach(t),Dpr=r($9e," \u2014 "),cX=n($9e,"A",{href:!0});var Zut=s(cX);Npr=r(Zut,"TFBertForMultipleChoice"),Zut.forEach(t),jpr=r($9e," (BERT model)"),$9e.forEach(t),qpr=i(le),o7=n(le,"LI",{});var I9e=s(o7);Nue=n(I9e,"STRONG",{});var e1t=s(Nue);Gpr=r(e1t,"camembert"),e1t.forEach(t),Opr=r(I9e," \u2014 "),fX=n(I9e,"A",{href:!0});var o1t=s(fX);Xpr=r(o1t,"TFCamembertForMultipleChoice"),o1t.forEach(t),Vpr=r(I9e," (CamemBERT model)"),I9e.forEach(t),zpr=i(le),r7=n(le,"LI",{});var D9e=s(r7);jue=n(D9e,"STRONG",{});var r1t=s(jue);Wpr=r(r1t,"convbert"),r1t.forEach(t),Qpr=r(D9e," \u2014 "),mX=n(D9e,"A",{href:!0});var t1t=s(mX);Hpr=r(t1t,"TFConvBertForMultipleChoice"),t1t.forEach(t),Upr=r(D9e," (ConvBERT model)"),D9e.forEach(t),Jpr=i(le),t7=n(le,"LI",{});var N9e=s(t7);que=n(N9e,"STRONG",{});var a1t=s(que);Ypr=r(a1t,"distilbert"),a1t.forEach(t),Kpr=r(N9e," \u2014 "),gX=n(N9e,"A",{href:!0});var n1t=s(gX);Zpr=r(n1t,"TFDistilBertForMultipleChoice"),n1t.forEach(t),e_r=r(N9e," (DistilBERT model)"),N9e.forEach(t),o_r=i(le),a7=n(le,"LI",{});var j9e=s(a7);Gue=n(j9e,"STRONG",{});var s1t=s(Gue);r_r=r(s1t,"electra"),s1t.forEach(t),t_r=r(j9e," \u2014 "),hX=n(j9e,"A",{href:!0});var l1t=s(hX);a_r=r(l1t,"TFElectraForMultipleChoice"),l1t.forEach(t),n_r=r(j9e," (ELECTRA model)"),j9e.forEach(t),s_r=i(le),n7=n(le,"LI",{});var q9e=s(n7);Oue=n(q9e,"STRONG",{});var i1t=s(Oue);l_r=r(i1t,"flaubert"),i1t.forEach(t),i_r=r(q9e," \u2014 "),pX=n(q9e,"A",{href:!0});var d1t=s(pX);d_r=r(d1t,"TFFlaubertForMultipleChoice"),d1t.forEach(t),c_r=r(q9e," (FlauBERT model)"),q9e.forEach(t),f_r=i(le),s7=n(le,"LI",{});var G9e=s(s7);Xue=n(G9e,"STRONG",{});var c1t=s(Xue);m_r=r(c1t,"funnel"),c1t.forEach(t),g_r=r(G9e," \u2014 "),_X=n(G9e,"A",{href:!0});var f1t=s(_X);h_r=r(f1t,"TFFunnelForMultipleChoice"),f1t.forEach(t),p_r=r(G9e," (Funnel Transformer model)"),G9e.forEach(t),__r=i(le),l7=n(le,"LI",{});var O9e=s(l7);Vue=n(O9e,"STRONG",{});var m1t=s(Vue);u_r=r(m1t,"longformer"),m1t.forEach(t),b_r=r(O9e," \u2014 "),uX=n(O9e,"A",{href:!0});var g1t=s(uX);v_r=r(g1t,"TFLongformerForMultipleChoice"),g1t.forEach(t),T_r=r(O9e," (Longformer model)"),O9e.forEach(t),F_r=i(le),i7=n(le,"LI",{});var X9e=s(i7);zue=n(X9e,"STRONG",{});var h1t=s(zue);C_r=r(h1t,"mobilebert"),h1t.forEach(t),M_r=r(X9e," \u2014 "),bX=n(X9e,"A",{href:!0});var p1t=s(bX);E_r=r(p1t,"TFMobileBertForMultipleChoice"),p1t.forEach(t),y_r=r(X9e," (MobileBERT model)"),X9e.forEach(t),w_r=i(le),d7=n(le,"LI",{});var V9e=s(d7);Wue=n(V9e,"STRONG",{});var _1t=s(Wue);A_r=r(_1t,"mpnet"),_1t.forEach(t),L_r=r(V9e," \u2014 "),vX=n(V9e,"A",{href:!0});var u1t=s(vX);B_r=r(u1t,"TFMPNetForMultipleChoice"),u1t.forEach(t),x_r=r(V9e," (MPNet model)"),V9e.forEach(t),k_r=i(le),c7=n(le,"LI",{});var z9e=s(c7);Que=n(z9e,"STRONG",{});var b1t=s(Que);R_r=r(b1t,"rembert"),b1t.forEach(t),S_r=r(z9e," \u2014 "),TX=n(z9e,"A",{href:!0});var v1t=s(TX);P_r=r(v1t,"TFRemBertForMultipleChoice"),v1t.forEach(t),$_r=r(z9e," (RemBERT model)"),z9e.forEach(t),I_r=i(le),f7=n(le,"LI",{});var W9e=s(f7);Hue=n(W9e,"STRONG",{});var T1t=s(Hue);D_r=r(T1t,"roberta"),T1t.forEach(t),N_r=r(W9e," \u2014 "),FX=n(W9e,"A",{href:!0});var F1t=s(FX);j_r=r(F1t,"TFRobertaForMultipleChoice"),F1t.forEach(t),q_r=r(W9e," (RoBERTa model)"),W9e.forEach(t),G_r=i(le),m7=n(le,"LI",{});var Q9e=s(m7);Uue=n(Q9e,"STRONG",{});var C1t=s(Uue);O_r=r(C1t,"roformer"),C1t.forEach(t),X_r=r(Q9e," \u2014 "),CX=n(Q9e,"A",{href:!0});var M1t=s(CX);V_r=r(M1t,"TFRoFormerForMultipleChoice"),M1t.forEach(t),z_r=r(Q9e," (RoFormer model)"),Q9e.forEach(t),W_r=i(le),g7=n(le,"LI",{});var H9e=s(g7);Jue=n(H9e,"STRONG",{});var E1t=s(Jue);Q_r=r(E1t,"xlm"),E1t.forEach(t),H_r=r(H9e," \u2014 "),MX=n(H9e,"A",{href:!0});var y1t=s(MX);U_r=r(y1t,"TFXLMForMultipleChoice"),y1t.forEach(t),J_r=r(H9e," (XLM model)"),H9e.forEach(t),Y_r=i(le),h7=n(le,"LI",{});var U9e=s(h7);Yue=n(U9e,"STRONG",{});var w1t=s(Yue);K_r=r(w1t,"xlm-roberta"),w1t.forEach(t),Z_r=r(U9e," \u2014 "),EX=n(U9e,"A",{href:!0});var A1t=s(EX);eur=r(A1t,"TFXLMRobertaForMultipleChoice"),A1t.forEach(t),our=r(U9e," (XLM-RoBERTa model)"),U9e.forEach(t),rur=i(le),p7=n(le,"LI",{});var J9e=s(p7);Kue=n(J9e,"STRONG",{});var L1t=s(Kue);tur=r(L1t,"xlnet"),L1t.forEach(t),aur=r(J9e," \u2014 "),yX=n(J9e,"A",{href:!0});var B1t=s(yX);nur=r(B1t,"TFXLNetForMultipleChoice"),B1t.forEach(t),sur=r(J9e," (XLNet model)"),J9e.forEach(t),le.forEach(t),lur=i(Ca),Zue=n(Ca,"P",{});var x1t=s(Zue);iur=r(x1t,"Examples:"),x1t.forEach(t),dur=i(Ca),m(JA.$$.fragment,Ca),Ca.forEach(t),Zl.forEach(t),eSe=i(c),Dc=n(c,"H2",{class:!0});var f$e=s(Dc);_7=n(f$e,"A",{id:!0,class:!0,href:!0});var k1t=s(_7);e1e=n(k1t,"SPAN",{});var R1t=s(e1e);m(YA.$$.fragment,R1t),R1t.forEach(t),k1t.forEach(t),cur=i(f$e),o1e=n(f$e,"SPAN",{});var S1t=s(o1e);fur=r(S1t,"TFAutoModelForTableQuestionAnswering"),S1t.forEach(t),f$e.forEach(t),oSe=i(c),Ar=n(c,"DIV",{class:!0});var oi=s(Ar);m(KA.$$.fragment,oi),mur=i(oi),Nc=n(oi,"P",{});var FQ=s(Nc);gur=r(FQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),r1e=n(FQ,"CODE",{});var P1t=s(r1e);hur=r(P1t,"from_pretrained()"),P1t.forEach(t),pur=r(FQ,"class method or the "),t1e=n(FQ,"CODE",{});var $1t=s(t1e);_ur=r($1t,"from_config()"),$1t.forEach(t),uur=r(FQ,`class
method.`),FQ.forEach(t),bur=i(oi),ZA=n(oi,"P",{});var m$e=s(ZA);vur=r(m$e,"This class cannot be instantiated directly using "),a1e=n(m$e,"CODE",{});var I1t=s(a1e);Tur=r(I1t,"__init__()"),I1t.forEach(t),Fur=r(m$e," (throws an error)."),m$e.forEach(t),Cur=i(oi),Ft=n(oi,"DIV",{class:!0});var ri=s(Ft);m(e0.$$.fragment,ri),Mur=i(ri),n1e=n(ri,"P",{});var D1t=s(n1e);Eur=r(D1t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),D1t.forEach(t),yur=i(ri),jc=n(ri,"P",{});var CQ=s(jc);wur=r(CQ,`Note:
Loading a model from its configuration file does `),s1e=n(CQ,"STRONG",{});var N1t=s(s1e);Aur=r(N1t,"not"),N1t.forEach(t),Lur=r(CQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),l1e=n(CQ,"CODE",{});var j1t=s(l1e);Bur=r(j1t,"from_pretrained()"),j1t.forEach(t),xur=r(CQ,"to load the model weights."),CQ.forEach(t),kur=i(ri),i1e=n(ri,"P",{});var q1t=s(i1e);Rur=r(q1t,"Examples:"),q1t.forEach(t),Sur=i(ri),m(o0.$$.fragment,ri),ri.forEach(t),Pur=i(oi),Co=n(oi,"DIV",{class:!0});var Ma=s(Co);m(r0.$$.fragment,Ma),$ur=i(Ma),d1e=n(Ma,"P",{});var G1t=s(d1e);Iur=r(G1t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),G1t.forEach(t),Dur=i(Ma),En=n(Ma,"P",{});var YM=s(En);Nur=r(YM,"The model class to instantiate is selected based on the "),c1e=n(YM,"CODE",{});var O1t=s(c1e);jur=r(O1t,"model_type"),O1t.forEach(t),qur=r(YM,` property of the config object (either
passed as an argument or loaded from `),f1e=n(YM,"CODE",{});var X1t=s(f1e);Gur=r(X1t,"pretrained_model_name_or_path"),X1t.forEach(t),Our=r(YM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m1e=n(YM,"CODE",{});var V1t=s(m1e);Xur=r(V1t,"pretrained_model_name_or_path"),V1t.forEach(t),Vur=r(YM,":"),YM.forEach(t),zur=i(Ma),g1e=n(Ma,"UL",{});var z1t=s(g1e);u7=n(z1t,"LI",{});var Y9e=s(u7);h1e=n(Y9e,"STRONG",{});var W1t=s(h1e);Wur=r(W1t,"tapas"),W1t.forEach(t),Qur=r(Y9e," \u2014 "),wX=n(Y9e,"A",{href:!0});var Q1t=s(wX);Hur=r(Q1t,"TFTapasForQuestionAnswering"),Q1t.forEach(t),Uur=r(Y9e," (TAPAS model)"),Y9e.forEach(t),z1t.forEach(t),Jur=i(Ma),p1e=n(Ma,"P",{});var H1t=s(p1e);Yur=r(H1t,"Examples:"),H1t.forEach(t),Kur=i(Ma),m(t0.$$.fragment,Ma),Ma.forEach(t),oi.forEach(t),rSe=i(c),qc=n(c,"H2",{class:!0});var g$e=s(qc);b7=n(g$e,"A",{id:!0,class:!0,href:!0});var U1t=s(b7);_1e=n(U1t,"SPAN",{});var J1t=s(_1e);m(a0.$$.fragment,J1t),J1t.forEach(t),U1t.forEach(t),Zur=i(g$e),u1e=n(g$e,"SPAN",{});var Y1t=s(u1e);e1r=r(Y1t,"TFAutoModelForTokenClassification"),Y1t.forEach(t),g$e.forEach(t),tSe=i(c),Lr=n(c,"DIV",{class:!0});var ti=s(Lr);m(n0.$$.fragment,ti),o1r=i(ti),Gc=n(ti,"P",{});var MQ=s(Gc);r1r=r(MQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),b1e=n(MQ,"CODE",{});var K1t=s(b1e);t1r=r(K1t,"from_pretrained()"),K1t.forEach(t),a1r=r(MQ,"class method or the "),v1e=n(MQ,"CODE",{});var Z1t=s(v1e);n1r=r(Z1t,"from_config()"),Z1t.forEach(t),s1r=r(MQ,`class
method.`),MQ.forEach(t),l1r=i(ti),s0=n(ti,"P",{});var h$e=s(s0);i1r=r(h$e,"This class cannot be instantiated directly using "),T1e=n(h$e,"CODE",{});var e4t=s(T1e);d1r=r(e4t,"__init__()"),e4t.forEach(t),c1r=r(h$e," (throws an error)."),h$e.forEach(t),f1r=i(ti),Ct=n(ti,"DIV",{class:!0});var ai=s(Ct);m(l0.$$.fragment,ai),m1r=i(ai),F1e=n(ai,"P",{});var o4t=s(F1e);g1r=r(o4t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),o4t.forEach(t),h1r=i(ai),Oc=n(ai,"P",{});var EQ=s(Oc);p1r=r(EQ,`Note:
Loading a model from its configuration file does `),C1e=n(EQ,"STRONG",{});var r4t=s(C1e);_1r=r(r4t,"not"),r4t.forEach(t),u1r=r(EQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),M1e=n(EQ,"CODE",{});var t4t=s(M1e);b1r=r(t4t,"from_pretrained()"),t4t.forEach(t),v1r=r(EQ,"to load the model weights."),EQ.forEach(t),T1r=i(ai),E1e=n(ai,"P",{});var a4t=s(E1e);F1r=r(a4t,"Examples:"),a4t.forEach(t),C1r=i(ai),m(i0.$$.fragment,ai),ai.forEach(t),M1r=i(ti),Mo=n(ti,"DIV",{class:!0});var Ea=s(Mo);m(d0.$$.fragment,Ea),E1r=i(Ea),y1e=n(Ea,"P",{});var n4t=s(y1e);y1r=r(n4t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),n4t.forEach(t),w1r=i(Ea),yn=n(Ea,"P",{});var KM=s(yn);A1r=r(KM,"The model class to instantiate is selected based on the "),w1e=n(KM,"CODE",{});var s4t=s(w1e);L1r=r(s4t,"model_type"),s4t.forEach(t),B1r=r(KM,` property of the config object (either
passed as an argument or loaded from `),A1e=n(KM,"CODE",{});var l4t=s(A1e);x1r=r(l4t,"pretrained_model_name_or_path"),l4t.forEach(t),k1r=r(KM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L1e=n(KM,"CODE",{});var i4t=s(L1e);R1r=r(i4t,"pretrained_model_name_or_path"),i4t.forEach(t),S1r=r(KM,":"),KM.forEach(t),P1r=i(Ea),Y=n(Ea,"UL",{});var oe=s(Y);v7=n(oe,"LI",{});var K9e=s(v7);B1e=n(K9e,"STRONG",{});var d4t=s(B1e);$1r=r(d4t,"albert"),d4t.forEach(t),I1r=r(K9e," \u2014 "),AX=n(K9e,"A",{href:!0});var c4t=s(AX);D1r=r(c4t,"TFAlbertForTokenClassification"),c4t.forEach(t),N1r=r(K9e," (ALBERT model)"),K9e.forEach(t),j1r=i(oe),T7=n(oe,"LI",{});var Z9e=s(T7);x1e=n(Z9e,"STRONG",{});var f4t=s(x1e);q1r=r(f4t,"bert"),f4t.forEach(t),G1r=r(Z9e," \u2014 "),LX=n(Z9e,"A",{href:!0});var m4t=s(LX);O1r=r(m4t,"TFBertForTokenClassification"),m4t.forEach(t),X1r=r(Z9e," (BERT model)"),Z9e.forEach(t),V1r=i(oe),F7=n(oe,"LI",{});var eBe=s(F7);k1e=n(eBe,"STRONG",{});var g4t=s(k1e);z1r=r(g4t,"camembert"),g4t.forEach(t),W1r=r(eBe," \u2014 "),BX=n(eBe,"A",{href:!0});var h4t=s(BX);Q1r=r(h4t,"TFCamembertForTokenClassification"),h4t.forEach(t),H1r=r(eBe," (CamemBERT model)"),eBe.forEach(t),U1r=i(oe),C7=n(oe,"LI",{});var oBe=s(C7);R1e=n(oBe,"STRONG",{});var p4t=s(R1e);J1r=r(p4t,"convbert"),p4t.forEach(t),Y1r=r(oBe," \u2014 "),xX=n(oBe,"A",{href:!0});var _4t=s(xX);K1r=r(_4t,"TFConvBertForTokenClassification"),_4t.forEach(t),Z1r=r(oBe," (ConvBERT model)"),oBe.forEach(t),e4r=i(oe),M7=n(oe,"LI",{});var rBe=s(M7);S1e=n(rBe,"STRONG",{});var u4t=s(S1e);o4r=r(u4t,"deberta"),u4t.forEach(t),r4r=r(rBe," \u2014 "),kX=n(rBe,"A",{href:!0});var b4t=s(kX);t4r=r(b4t,"TFDebertaForTokenClassification"),b4t.forEach(t),a4r=r(rBe," (DeBERTa model)"),rBe.forEach(t),n4r=i(oe),E7=n(oe,"LI",{});var tBe=s(E7);P1e=n(tBe,"STRONG",{});var v4t=s(P1e);s4r=r(v4t,"deberta-v2"),v4t.forEach(t),l4r=r(tBe," \u2014 "),RX=n(tBe,"A",{href:!0});var T4t=s(RX);i4r=r(T4t,"TFDebertaV2ForTokenClassification"),T4t.forEach(t),d4r=r(tBe," (DeBERTa-v2 model)"),tBe.forEach(t),c4r=i(oe),y7=n(oe,"LI",{});var aBe=s(y7);$1e=n(aBe,"STRONG",{});var F4t=s($1e);f4r=r(F4t,"distilbert"),F4t.forEach(t),m4r=r(aBe," \u2014 "),SX=n(aBe,"A",{href:!0});var C4t=s(SX);g4r=r(C4t,"TFDistilBertForTokenClassification"),C4t.forEach(t),h4r=r(aBe," (DistilBERT model)"),aBe.forEach(t),p4r=i(oe),w7=n(oe,"LI",{});var nBe=s(w7);I1e=n(nBe,"STRONG",{});var M4t=s(I1e);_4r=r(M4t,"electra"),M4t.forEach(t),u4r=r(nBe," \u2014 "),PX=n(nBe,"A",{href:!0});var E4t=s(PX);b4r=r(E4t,"TFElectraForTokenClassification"),E4t.forEach(t),v4r=r(nBe," (ELECTRA model)"),nBe.forEach(t),T4r=i(oe),A7=n(oe,"LI",{});var sBe=s(A7);D1e=n(sBe,"STRONG",{});var y4t=s(D1e);F4r=r(y4t,"flaubert"),y4t.forEach(t),C4r=r(sBe," \u2014 "),$X=n(sBe,"A",{href:!0});var w4t=s($X);M4r=r(w4t,"TFFlaubertForTokenClassification"),w4t.forEach(t),E4r=r(sBe," (FlauBERT model)"),sBe.forEach(t),y4r=i(oe),L7=n(oe,"LI",{});var lBe=s(L7);N1e=n(lBe,"STRONG",{});var A4t=s(N1e);w4r=r(A4t,"funnel"),A4t.forEach(t),A4r=r(lBe," \u2014 "),IX=n(lBe,"A",{href:!0});var L4t=s(IX);L4r=r(L4t,"TFFunnelForTokenClassification"),L4t.forEach(t),B4r=r(lBe," (Funnel Transformer model)"),lBe.forEach(t),x4r=i(oe),B7=n(oe,"LI",{});var iBe=s(B7);j1e=n(iBe,"STRONG",{});var B4t=s(j1e);k4r=r(B4t,"layoutlm"),B4t.forEach(t),R4r=r(iBe," \u2014 "),DX=n(iBe,"A",{href:!0});var x4t=s(DX);S4r=r(x4t,"TFLayoutLMForTokenClassification"),x4t.forEach(t),P4r=r(iBe," (LayoutLM model)"),iBe.forEach(t),$4r=i(oe),x7=n(oe,"LI",{});var dBe=s(x7);q1e=n(dBe,"STRONG",{});var k4t=s(q1e);I4r=r(k4t,"longformer"),k4t.forEach(t),D4r=r(dBe," \u2014 "),NX=n(dBe,"A",{href:!0});var R4t=s(NX);N4r=r(R4t,"TFLongformerForTokenClassification"),R4t.forEach(t),j4r=r(dBe," (Longformer model)"),dBe.forEach(t),q4r=i(oe),k7=n(oe,"LI",{});var cBe=s(k7);G1e=n(cBe,"STRONG",{});var S4t=s(G1e);G4r=r(S4t,"mobilebert"),S4t.forEach(t),O4r=r(cBe," \u2014 "),jX=n(cBe,"A",{href:!0});var P4t=s(jX);X4r=r(P4t,"TFMobileBertForTokenClassification"),P4t.forEach(t),V4r=r(cBe," (MobileBERT model)"),cBe.forEach(t),z4r=i(oe),R7=n(oe,"LI",{});var fBe=s(R7);O1e=n(fBe,"STRONG",{});var $4t=s(O1e);W4r=r($4t,"mpnet"),$4t.forEach(t),Q4r=r(fBe," \u2014 "),qX=n(fBe,"A",{href:!0});var I4t=s(qX);H4r=r(I4t,"TFMPNetForTokenClassification"),I4t.forEach(t),U4r=r(fBe," (MPNet model)"),fBe.forEach(t),J4r=i(oe),S7=n(oe,"LI",{});var mBe=s(S7);X1e=n(mBe,"STRONG",{});var D4t=s(X1e);Y4r=r(D4t,"rembert"),D4t.forEach(t),K4r=r(mBe," \u2014 "),GX=n(mBe,"A",{href:!0});var N4t=s(GX);Z4r=r(N4t,"TFRemBertForTokenClassification"),N4t.forEach(t),ebr=r(mBe," (RemBERT model)"),mBe.forEach(t),obr=i(oe),P7=n(oe,"LI",{});var gBe=s(P7);V1e=n(gBe,"STRONG",{});var j4t=s(V1e);rbr=r(j4t,"roberta"),j4t.forEach(t),tbr=r(gBe," \u2014 "),OX=n(gBe,"A",{href:!0});var q4t=s(OX);abr=r(q4t,"TFRobertaForTokenClassification"),q4t.forEach(t),nbr=r(gBe," (RoBERTa model)"),gBe.forEach(t),sbr=i(oe),$7=n(oe,"LI",{});var hBe=s($7);z1e=n(hBe,"STRONG",{});var G4t=s(z1e);lbr=r(G4t,"roformer"),G4t.forEach(t),ibr=r(hBe," \u2014 "),XX=n(hBe,"A",{href:!0});var O4t=s(XX);dbr=r(O4t,"TFRoFormerForTokenClassification"),O4t.forEach(t),cbr=r(hBe," (RoFormer model)"),hBe.forEach(t),fbr=i(oe),I7=n(oe,"LI",{});var pBe=s(I7);W1e=n(pBe,"STRONG",{});var X4t=s(W1e);mbr=r(X4t,"xlm"),X4t.forEach(t),gbr=r(pBe," \u2014 "),VX=n(pBe,"A",{href:!0});var V4t=s(VX);hbr=r(V4t,"TFXLMForTokenClassification"),V4t.forEach(t),pbr=r(pBe," (XLM model)"),pBe.forEach(t),_br=i(oe),D7=n(oe,"LI",{});var _Be=s(D7);Q1e=n(_Be,"STRONG",{});var z4t=s(Q1e);ubr=r(z4t,"xlm-roberta"),z4t.forEach(t),bbr=r(_Be," \u2014 "),zX=n(_Be,"A",{href:!0});var W4t=s(zX);vbr=r(W4t,"TFXLMRobertaForTokenClassification"),W4t.forEach(t),Tbr=r(_Be," (XLM-RoBERTa model)"),_Be.forEach(t),Fbr=i(oe),N7=n(oe,"LI",{});var uBe=s(N7);H1e=n(uBe,"STRONG",{});var Q4t=s(H1e);Cbr=r(Q4t,"xlnet"),Q4t.forEach(t),Mbr=r(uBe," \u2014 "),WX=n(uBe,"A",{href:!0});var H4t=s(WX);Ebr=r(H4t,"TFXLNetForTokenClassification"),H4t.forEach(t),ybr=r(uBe," (XLNet model)"),uBe.forEach(t),oe.forEach(t),wbr=i(Ea),U1e=n(Ea,"P",{});var U4t=s(U1e);Abr=r(U4t,"Examples:"),U4t.forEach(t),Lbr=i(Ea),m(c0.$$.fragment,Ea),Ea.forEach(t),ti.forEach(t),aSe=i(c),Xc=n(c,"H2",{class:!0});var p$e=s(Xc);j7=n(p$e,"A",{id:!0,class:!0,href:!0});var J4t=s(j7);J1e=n(J4t,"SPAN",{});var Y4t=s(J1e);m(f0.$$.fragment,Y4t),Y4t.forEach(t),J4t.forEach(t),Bbr=i(p$e),Y1e=n(p$e,"SPAN",{});var K4t=s(Y1e);xbr=r(K4t,"TFAutoModelForQuestionAnswering"),K4t.forEach(t),p$e.forEach(t),nSe=i(c),Br=n(c,"DIV",{class:!0});var ni=s(Br);m(m0.$$.fragment,ni),kbr=i(ni),Vc=n(ni,"P",{});var yQ=s(Vc);Rbr=r(yQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),K1e=n(yQ,"CODE",{});var Z4t=s(K1e);Sbr=r(Z4t,"from_pretrained()"),Z4t.forEach(t),Pbr=r(yQ,"class method or the "),Z1e=n(yQ,"CODE",{});var ebt=s(Z1e);$br=r(ebt,"from_config()"),ebt.forEach(t),Ibr=r(yQ,`class
method.`),yQ.forEach(t),Dbr=i(ni),g0=n(ni,"P",{});var _$e=s(g0);Nbr=r(_$e,"This class cannot be instantiated directly using "),e4e=n(_$e,"CODE",{});var obt=s(e4e);jbr=r(obt,"__init__()"),obt.forEach(t),qbr=r(_$e," (throws an error)."),_$e.forEach(t),Gbr=i(ni),Mt=n(ni,"DIV",{class:!0});var si=s(Mt);m(h0.$$.fragment,si),Obr=i(si),o4e=n(si,"P",{});var rbt=s(o4e);Xbr=r(rbt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),rbt.forEach(t),Vbr=i(si),zc=n(si,"P",{});var wQ=s(zc);zbr=r(wQ,`Note:
Loading a model from its configuration file does `),r4e=n(wQ,"STRONG",{});var tbt=s(r4e);Wbr=r(tbt,"not"),tbt.forEach(t),Qbr=r(wQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),t4e=n(wQ,"CODE",{});var abt=s(t4e);Hbr=r(abt,"from_pretrained()"),abt.forEach(t),Ubr=r(wQ,"to load the model weights."),wQ.forEach(t),Jbr=i(si),a4e=n(si,"P",{});var nbt=s(a4e);Ybr=r(nbt,"Examples:"),nbt.forEach(t),Kbr=i(si),m(p0.$$.fragment,si),si.forEach(t),Zbr=i(ni),Eo=n(ni,"DIV",{class:!0});var ya=s(Eo);m(_0.$$.fragment,ya),e3r=i(ya),n4e=n(ya,"P",{});var sbt=s(n4e);o3r=r(sbt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),sbt.forEach(t),r3r=i(ya),wn=n(ya,"P",{});var ZM=s(wn);t3r=r(ZM,"The model class to instantiate is selected based on the "),s4e=n(ZM,"CODE",{});var lbt=s(s4e);a3r=r(lbt,"model_type"),lbt.forEach(t),n3r=r(ZM,` property of the config object (either
passed as an argument or loaded from `),l4e=n(ZM,"CODE",{});var ibt=s(l4e);s3r=r(ibt,"pretrained_model_name_or_path"),ibt.forEach(t),l3r=r(ZM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i4e=n(ZM,"CODE",{});var dbt=s(i4e);i3r=r(dbt,"pretrained_model_name_or_path"),dbt.forEach(t),d3r=r(ZM,":"),ZM.forEach(t),c3r=i(ya),K=n(ya,"UL",{});var re=s(K);q7=n(re,"LI",{});var bBe=s(q7);d4e=n(bBe,"STRONG",{});var cbt=s(d4e);f3r=r(cbt,"albert"),cbt.forEach(t),m3r=r(bBe," \u2014 "),QX=n(bBe,"A",{href:!0});var fbt=s(QX);g3r=r(fbt,"TFAlbertForQuestionAnswering"),fbt.forEach(t),h3r=r(bBe," (ALBERT model)"),bBe.forEach(t),p3r=i(re),G7=n(re,"LI",{});var vBe=s(G7);c4e=n(vBe,"STRONG",{});var mbt=s(c4e);_3r=r(mbt,"bert"),mbt.forEach(t),u3r=r(vBe," \u2014 "),HX=n(vBe,"A",{href:!0});var gbt=s(HX);b3r=r(gbt,"TFBertForQuestionAnswering"),gbt.forEach(t),v3r=r(vBe," (BERT model)"),vBe.forEach(t),T3r=i(re),O7=n(re,"LI",{});var TBe=s(O7);f4e=n(TBe,"STRONG",{});var hbt=s(f4e);F3r=r(hbt,"camembert"),hbt.forEach(t),C3r=r(TBe," \u2014 "),UX=n(TBe,"A",{href:!0});var pbt=s(UX);M3r=r(pbt,"TFCamembertForQuestionAnswering"),pbt.forEach(t),E3r=r(TBe," (CamemBERT model)"),TBe.forEach(t),y3r=i(re),X7=n(re,"LI",{});var FBe=s(X7);m4e=n(FBe,"STRONG",{});var _bt=s(m4e);w3r=r(_bt,"convbert"),_bt.forEach(t),A3r=r(FBe," \u2014 "),JX=n(FBe,"A",{href:!0});var ubt=s(JX);L3r=r(ubt,"TFConvBertForQuestionAnswering"),ubt.forEach(t),B3r=r(FBe," (ConvBERT model)"),FBe.forEach(t),x3r=i(re),V7=n(re,"LI",{});var CBe=s(V7);g4e=n(CBe,"STRONG",{});var bbt=s(g4e);k3r=r(bbt,"deberta"),bbt.forEach(t),R3r=r(CBe," \u2014 "),YX=n(CBe,"A",{href:!0});var vbt=s(YX);S3r=r(vbt,"TFDebertaForQuestionAnswering"),vbt.forEach(t),P3r=r(CBe," (DeBERTa model)"),CBe.forEach(t),$3r=i(re),z7=n(re,"LI",{});var MBe=s(z7);h4e=n(MBe,"STRONG",{});var Tbt=s(h4e);I3r=r(Tbt,"deberta-v2"),Tbt.forEach(t),D3r=r(MBe," \u2014 "),KX=n(MBe,"A",{href:!0});var Fbt=s(KX);N3r=r(Fbt,"TFDebertaV2ForQuestionAnswering"),Fbt.forEach(t),j3r=r(MBe," (DeBERTa-v2 model)"),MBe.forEach(t),q3r=i(re),W7=n(re,"LI",{});var EBe=s(W7);p4e=n(EBe,"STRONG",{});var Cbt=s(p4e);G3r=r(Cbt,"distilbert"),Cbt.forEach(t),O3r=r(EBe," \u2014 "),ZX=n(EBe,"A",{href:!0});var Mbt=s(ZX);X3r=r(Mbt,"TFDistilBertForQuestionAnswering"),Mbt.forEach(t),V3r=r(EBe," (DistilBERT model)"),EBe.forEach(t),z3r=i(re),Q7=n(re,"LI",{});var yBe=s(Q7);_4e=n(yBe,"STRONG",{});var Ebt=s(_4e);W3r=r(Ebt,"electra"),Ebt.forEach(t),Q3r=r(yBe," \u2014 "),eV=n(yBe,"A",{href:!0});var ybt=s(eV);H3r=r(ybt,"TFElectraForQuestionAnswering"),ybt.forEach(t),U3r=r(yBe," (ELECTRA model)"),yBe.forEach(t),J3r=i(re),H7=n(re,"LI",{});var wBe=s(H7);u4e=n(wBe,"STRONG",{});var wbt=s(u4e);Y3r=r(wbt,"flaubert"),wbt.forEach(t),K3r=r(wBe," \u2014 "),oV=n(wBe,"A",{href:!0});var Abt=s(oV);Z3r=r(Abt,"TFFlaubertForQuestionAnsweringSimple"),Abt.forEach(t),e2r=r(wBe," (FlauBERT model)"),wBe.forEach(t),o2r=i(re),U7=n(re,"LI",{});var ABe=s(U7);b4e=n(ABe,"STRONG",{});var Lbt=s(b4e);r2r=r(Lbt,"funnel"),Lbt.forEach(t),t2r=r(ABe," \u2014 "),rV=n(ABe,"A",{href:!0});var Bbt=s(rV);a2r=r(Bbt,"TFFunnelForQuestionAnswering"),Bbt.forEach(t),n2r=r(ABe," (Funnel Transformer model)"),ABe.forEach(t),s2r=i(re),J7=n(re,"LI",{});var LBe=s(J7);v4e=n(LBe,"STRONG",{});var xbt=s(v4e);l2r=r(xbt,"gptj"),xbt.forEach(t),i2r=r(LBe," \u2014 "),tV=n(LBe,"A",{href:!0});var kbt=s(tV);d2r=r(kbt,"TFGPTJForQuestionAnswering"),kbt.forEach(t),c2r=r(LBe," (GPT-J model)"),LBe.forEach(t),f2r=i(re),Y7=n(re,"LI",{});var BBe=s(Y7);T4e=n(BBe,"STRONG",{});var Rbt=s(T4e);m2r=r(Rbt,"longformer"),Rbt.forEach(t),g2r=r(BBe," \u2014 "),aV=n(BBe,"A",{href:!0});var Sbt=s(aV);h2r=r(Sbt,"TFLongformerForQuestionAnswering"),Sbt.forEach(t),p2r=r(BBe," (Longformer model)"),BBe.forEach(t),_2r=i(re),K7=n(re,"LI",{});var xBe=s(K7);F4e=n(xBe,"STRONG",{});var Pbt=s(F4e);u2r=r(Pbt,"mobilebert"),Pbt.forEach(t),b2r=r(xBe," \u2014 "),nV=n(xBe,"A",{href:!0});var $bt=s(nV);v2r=r($bt,"TFMobileBertForQuestionAnswering"),$bt.forEach(t),T2r=r(xBe," (MobileBERT model)"),xBe.forEach(t),F2r=i(re),Z7=n(re,"LI",{});var kBe=s(Z7);C4e=n(kBe,"STRONG",{});var Ibt=s(C4e);C2r=r(Ibt,"mpnet"),Ibt.forEach(t),M2r=r(kBe," \u2014 "),sV=n(kBe,"A",{href:!0});var Dbt=s(sV);E2r=r(Dbt,"TFMPNetForQuestionAnswering"),Dbt.forEach(t),y2r=r(kBe," (MPNet model)"),kBe.forEach(t),w2r=i(re),eF=n(re,"LI",{});var RBe=s(eF);M4e=n(RBe,"STRONG",{});var Nbt=s(M4e);A2r=r(Nbt,"rembert"),Nbt.forEach(t),L2r=r(RBe," \u2014 "),lV=n(RBe,"A",{href:!0});var jbt=s(lV);B2r=r(jbt,"TFRemBertForQuestionAnswering"),jbt.forEach(t),x2r=r(RBe," (RemBERT model)"),RBe.forEach(t),k2r=i(re),oF=n(re,"LI",{});var SBe=s(oF);E4e=n(SBe,"STRONG",{});var qbt=s(E4e);R2r=r(qbt,"roberta"),qbt.forEach(t),S2r=r(SBe," \u2014 "),iV=n(SBe,"A",{href:!0});var Gbt=s(iV);P2r=r(Gbt,"TFRobertaForQuestionAnswering"),Gbt.forEach(t),$2r=r(SBe," (RoBERTa model)"),SBe.forEach(t),I2r=i(re),rF=n(re,"LI",{});var PBe=s(rF);y4e=n(PBe,"STRONG",{});var Obt=s(y4e);D2r=r(Obt,"roformer"),Obt.forEach(t),N2r=r(PBe," \u2014 "),dV=n(PBe,"A",{href:!0});var Xbt=s(dV);j2r=r(Xbt,"TFRoFormerForQuestionAnswering"),Xbt.forEach(t),q2r=r(PBe," (RoFormer model)"),PBe.forEach(t),G2r=i(re),tF=n(re,"LI",{});var $Be=s(tF);w4e=n($Be,"STRONG",{});var Vbt=s(w4e);O2r=r(Vbt,"xlm"),Vbt.forEach(t),X2r=r($Be," \u2014 "),cV=n($Be,"A",{href:!0});var zbt=s(cV);V2r=r(zbt,"TFXLMForQuestionAnsweringSimple"),zbt.forEach(t),z2r=r($Be," (XLM model)"),$Be.forEach(t),W2r=i(re),aF=n(re,"LI",{});var IBe=s(aF);A4e=n(IBe,"STRONG",{});var Wbt=s(A4e);Q2r=r(Wbt,"xlm-roberta"),Wbt.forEach(t),H2r=r(IBe," \u2014 "),fV=n(IBe,"A",{href:!0});var Qbt=s(fV);U2r=r(Qbt,"TFXLMRobertaForQuestionAnswering"),Qbt.forEach(t),J2r=r(IBe," (XLM-RoBERTa model)"),IBe.forEach(t),Y2r=i(re),nF=n(re,"LI",{});var DBe=s(nF);L4e=n(DBe,"STRONG",{});var Hbt=s(L4e);K2r=r(Hbt,"xlnet"),Hbt.forEach(t),Z2r=r(DBe," \u2014 "),mV=n(DBe,"A",{href:!0});var Ubt=s(mV);evr=r(Ubt,"TFXLNetForQuestionAnsweringSimple"),Ubt.forEach(t),ovr=r(DBe," (XLNet model)"),DBe.forEach(t),re.forEach(t),rvr=i(ya),B4e=n(ya,"P",{});var Jbt=s(B4e);tvr=r(Jbt,"Examples:"),Jbt.forEach(t),avr=i(ya),m(u0.$$.fragment,ya),ya.forEach(t),ni.forEach(t),sSe=i(c),Wc=n(c,"H2",{class:!0});var u$e=s(Wc);sF=n(u$e,"A",{id:!0,class:!0,href:!0});var Ybt=s(sF);x4e=n(Ybt,"SPAN",{});var Kbt=s(x4e);m(b0.$$.fragment,Kbt),Kbt.forEach(t),Ybt.forEach(t),nvr=i(u$e),k4e=n(u$e,"SPAN",{});var Zbt=s(k4e);svr=r(Zbt,"TFAutoModelForVision2Seq"),Zbt.forEach(t),u$e.forEach(t),lSe=i(c),xr=n(c,"DIV",{class:!0});var li=s(xr);m(v0.$$.fragment,li),lvr=i(li),Qc=n(li,"P",{});var AQ=s(Qc);ivr=r(AQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),R4e=n(AQ,"CODE",{});var e3t=s(R4e);dvr=r(e3t,"from_pretrained()"),e3t.forEach(t),cvr=r(AQ,"class method or the "),S4e=n(AQ,"CODE",{});var o3t=s(S4e);fvr=r(o3t,"from_config()"),o3t.forEach(t),mvr=r(AQ,`class
method.`),AQ.forEach(t),gvr=i(li),T0=n(li,"P",{});var b$e=s(T0);hvr=r(b$e,"This class cannot be instantiated directly using "),P4e=n(b$e,"CODE",{});var r3t=s(P4e);pvr=r(r3t,"__init__()"),r3t.forEach(t),_vr=r(b$e," (throws an error)."),b$e.forEach(t),uvr=i(li),Et=n(li,"DIV",{class:!0});var ii=s(Et);m(F0.$$.fragment,ii),bvr=i(ii),$4e=n(ii,"P",{});var t3t=s($4e);vvr=r(t3t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),t3t.forEach(t),Tvr=i(ii),Hc=n(ii,"P",{});var LQ=s(Hc);Fvr=r(LQ,`Note:
Loading a model from its configuration file does `),I4e=n(LQ,"STRONG",{});var a3t=s(I4e);Cvr=r(a3t,"not"),a3t.forEach(t),Mvr=r(LQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),D4e=n(LQ,"CODE",{});var n3t=s(D4e);Evr=r(n3t,"from_pretrained()"),n3t.forEach(t),yvr=r(LQ,"to load the model weights."),LQ.forEach(t),wvr=i(ii),N4e=n(ii,"P",{});var s3t=s(N4e);Avr=r(s3t,"Examples:"),s3t.forEach(t),Lvr=i(ii),m(C0.$$.fragment,ii),ii.forEach(t),Bvr=i(li),yo=n(li,"DIV",{class:!0});var wa=s(yo);m(M0.$$.fragment,wa),xvr=i(wa),j4e=n(wa,"P",{});var l3t=s(j4e);kvr=r(l3t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),l3t.forEach(t),Rvr=i(wa),An=n(wa,"P",{});var eE=s(An);Svr=r(eE,"The model class to instantiate is selected based on the "),q4e=n(eE,"CODE",{});var i3t=s(q4e);Pvr=r(i3t,"model_type"),i3t.forEach(t),$vr=r(eE,` property of the config object (either
passed as an argument or loaded from `),G4e=n(eE,"CODE",{});var d3t=s(G4e);Ivr=r(d3t,"pretrained_model_name_or_path"),d3t.forEach(t),Dvr=r(eE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O4e=n(eE,"CODE",{});var c3t=s(O4e);Nvr=r(c3t,"pretrained_model_name_or_path"),c3t.forEach(t),jvr=r(eE,":"),eE.forEach(t),qvr=i(wa),X4e=n(wa,"UL",{});var f3t=s(X4e);lF=n(f3t,"LI",{});var NBe=s(lF);V4e=n(NBe,"STRONG",{});var m3t=s(V4e);Gvr=r(m3t,"vision-encoder-decoder"),m3t.forEach(t),Ovr=r(NBe," \u2014 "),gV=n(NBe,"A",{href:!0});var g3t=s(gV);Xvr=r(g3t,"TFVisionEncoderDecoderModel"),g3t.forEach(t),Vvr=r(NBe," (Vision Encoder decoder model)"),NBe.forEach(t),f3t.forEach(t),zvr=i(wa),z4e=n(wa,"P",{});var h3t=s(z4e);Wvr=r(h3t,"Examples:"),h3t.forEach(t),Qvr=i(wa),m(E0.$$.fragment,wa),wa.forEach(t),li.forEach(t),iSe=i(c),Uc=n(c,"H2",{class:!0});var v$e=s(Uc);iF=n(v$e,"A",{id:!0,class:!0,href:!0});var p3t=s(iF);W4e=n(p3t,"SPAN",{});var _3t=s(W4e);m(y0.$$.fragment,_3t),_3t.forEach(t),p3t.forEach(t),Hvr=i(v$e),Q4e=n(v$e,"SPAN",{});var u3t=s(Q4e);Uvr=r(u3t,"TFAutoModelForSpeechSeq2Seq"),u3t.forEach(t),v$e.forEach(t),dSe=i(c),kr=n(c,"DIV",{class:!0});var di=s(kr);m(w0.$$.fragment,di),Jvr=i(di),Jc=n(di,"P",{});var BQ=s(Jc);Yvr=r(BQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),H4e=n(BQ,"CODE",{});var b3t=s(H4e);Kvr=r(b3t,"from_pretrained()"),b3t.forEach(t),Zvr=r(BQ,"class method or the "),U4e=n(BQ,"CODE",{});var v3t=s(U4e);e6r=r(v3t,"from_config()"),v3t.forEach(t),o6r=r(BQ,`class
method.`),BQ.forEach(t),r6r=i(di),A0=n(di,"P",{});var T$e=s(A0);t6r=r(T$e,"This class cannot be instantiated directly using "),J4e=n(T$e,"CODE",{});var T3t=s(J4e);a6r=r(T3t,"__init__()"),T3t.forEach(t),n6r=r(T$e," (throws an error)."),T$e.forEach(t),s6r=i(di),yt=n(di,"DIV",{class:!0});var ci=s(yt);m(L0.$$.fragment,ci),l6r=i(ci),Y4e=n(ci,"P",{});var F3t=s(Y4e);i6r=r(F3t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),F3t.forEach(t),d6r=i(ci),Yc=n(ci,"P",{});var xQ=s(Yc);c6r=r(xQ,`Note:
Loading a model from its configuration file does `),K4e=n(xQ,"STRONG",{});var C3t=s(K4e);f6r=r(C3t,"not"),C3t.forEach(t),m6r=r(xQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Z4e=n(xQ,"CODE",{});var M3t=s(Z4e);g6r=r(M3t,"from_pretrained()"),M3t.forEach(t),h6r=r(xQ,"to load the model weights."),xQ.forEach(t),p6r=i(ci),ebe=n(ci,"P",{});var E3t=s(ebe);_6r=r(E3t,"Examples:"),E3t.forEach(t),u6r=i(ci),m(B0.$$.fragment,ci),ci.forEach(t),b6r=i(di),wo=n(di,"DIV",{class:!0});var Aa=s(wo);m(x0.$$.fragment,Aa),v6r=i(Aa),obe=n(Aa,"P",{});var y3t=s(obe);T6r=r(y3t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),y3t.forEach(t),F6r=i(Aa),Ln=n(Aa,"P",{});var oE=s(Ln);C6r=r(oE,"The model class to instantiate is selected based on the "),rbe=n(oE,"CODE",{});var w3t=s(rbe);M6r=r(w3t,"model_type"),w3t.forEach(t),E6r=r(oE,` property of the config object (either
passed as an argument or loaded from `),tbe=n(oE,"CODE",{});var A3t=s(tbe);y6r=r(A3t,"pretrained_model_name_or_path"),A3t.forEach(t),w6r=r(oE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),abe=n(oE,"CODE",{});var L3t=s(abe);A6r=r(L3t,"pretrained_model_name_or_path"),L3t.forEach(t),L6r=r(oE,":"),oE.forEach(t),B6r=i(Aa),nbe=n(Aa,"UL",{});var B3t=s(nbe);dF=n(B3t,"LI",{});var jBe=s(dF);sbe=n(jBe,"STRONG",{});var x3t=s(sbe);x6r=r(x3t,"speech_to_text"),x3t.forEach(t),k6r=r(jBe," \u2014 "),hV=n(jBe,"A",{href:!0});var k3t=s(hV);R6r=r(k3t,"TFSpeech2TextForConditionalGeneration"),k3t.forEach(t),S6r=r(jBe," (Speech2Text model)"),jBe.forEach(t),B3t.forEach(t),P6r=i(Aa),lbe=n(Aa,"P",{});var R3t=s(lbe);$6r=r(R3t,"Examples:"),R3t.forEach(t),I6r=i(Aa),m(k0.$$.fragment,Aa),Aa.forEach(t),di.forEach(t),cSe=i(c),Kc=n(c,"H2",{class:!0});var F$e=s(Kc);cF=n(F$e,"A",{id:!0,class:!0,href:!0});var S3t=s(cF);ibe=n(S3t,"SPAN",{});var P3t=s(ibe);m(R0.$$.fragment,P3t),P3t.forEach(t),S3t.forEach(t),D6r=i(F$e),dbe=n(F$e,"SPAN",{});var $3t=s(dbe);N6r=r($3t,"FlaxAutoModel"),$3t.forEach(t),F$e.forEach(t),fSe=i(c),Rr=n(c,"DIV",{class:!0});var fi=s(Rr);m(S0.$$.fragment,fi),j6r=i(fi),Zc=n(fi,"P",{});var kQ=s(Zc);q6r=r(kQ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),cbe=n(kQ,"CODE",{});var I3t=s(cbe);G6r=r(I3t,"from_pretrained()"),I3t.forEach(t),O6r=r(kQ,"class method or the "),fbe=n(kQ,"CODE",{});var D3t=s(fbe);X6r=r(D3t,"from_config()"),D3t.forEach(t),V6r=r(kQ,`class
method.`),kQ.forEach(t),z6r=i(fi),P0=n(fi,"P",{});var C$e=s(P0);W6r=r(C$e,"This class cannot be instantiated directly using "),mbe=n(C$e,"CODE",{});var N3t=s(mbe);Q6r=r(N3t,"__init__()"),N3t.forEach(t),H6r=r(C$e," (throws an error)."),C$e.forEach(t),U6r=i(fi),wt=n(fi,"DIV",{class:!0});var mi=s(wt);m($0.$$.fragment,mi),J6r=i(mi),gbe=n(mi,"P",{});var j3t=s(gbe);Y6r=r(j3t,"Instantiates one of the base model classes of the library from a configuration."),j3t.forEach(t),K6r=i(mi),ef=n(mi,"P",{});var RQ=s(ef);Z6r=r(RQ,`Note:
Loading a model from its configuration file does `),hbe=n(RQ,"STRONG",{});var q3t=s(hbe);eTr=r(q3t,"not"),q3t.forEach(t),oTr=r(RQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),pbe=n(RQ,"CODE",{});var G3t=s(pbe);rTr=r(G3t,"from_pretrained()"),G3t.forEach(t),tTr=r(RQ,"to load the model weights."),RQ.forEach(t),aTr=i(mi),_be=n(mi,"P",{});var O3t=s(_be);nTr=r(O3t,"Examples:"),O3t.forEach(t),sTr=i(mi),m(I0.$$.fragment,mi),mi.forEach(t),lTr=i(fi),Ao=n(fi,"DIV",{class:!0});var La=s(Ao);m(D0.$$.fragment,La),iTr=i(La),ube=n(La,"P",{});var X3t=s(ube);dTr=r(X3t,"Instantiate one of the base model classes of the library from a pretrained model."),X3t.forEach(t),cTr=i(La),Bn=n(La,"P",{});var rE=s(Bn);fTr=r(rE,"The model class to instantiate is selected based on the "),bbe=n(rE,"CODE",{});var V3t=s(bbe);mTr=r(V3t,"model_type"),V3t.forEach(t),gTr=r(rE,` property of the config object (either
passed as an argument or loaded from `),vbe=n(rE,"CODE",{});var z3t=s(vbe);hTr=r(z3t,"pretrained_model_name_or_path"),z3t.forEach(t),pTr=r(rE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tbe=n(rE,"CODE",{});var W3t=s(Tbe);_Tr=r(W3t,"pretrained_model_name_or_path"),W3t.forEach(t),uTr=r(rE,":"),rE.forEach(t),bTr=i(La),z=n(La,"UL",{});var Q=s(z);fF=n(Q,"LI",{});var qBe=s(fF);Fbe=n(qBe,"STRONG",{});var Q3t=s(Fbe);vTr=r(Q3t,"albert"),Q3t.forEach(t),TTr=r(qBe," \u2014 "),pV=n(qBe,"A",{href:!0});var H3t=s(pV);FTr=r(H3t,"FlaxAlbertModel"),H3t.forEach(t),CTr=r(qBe," (ALBERT model)"),qBe.forEach(t),MTr=i(Q),mF=n(Q,"LI",{});var GBe=s(mF);Cbe=n(GBe,"STRONG",{});var U3t=s(Cbe);ETr=r(U3t,"bart"),U3t.forEach(t),yTr=r(GBe," \u2014 "),_V=n(GBe,"A",{href:!0});var J3t=s(_V);wTr=r(J3t,"FlaxBartModel"),J3t.forEach(t),ATr=r(GBe," (BART model)"),GBe.forEach(t),LTr=i(Q),gF=n(Q,"LI",{});var OBe=s(gF);Mbe=n(OBe,"STRONG",{});var Y3t=s(Mbe);BTr=r(Y3t,"beit"),Y3t.forEach(t),xTr=r(OBe," \u2014 "),uV=n(OBe,"A",{href:!0});var K3t=s(uV);kTr=r(K3t,"FlaxBeitModel"),K3t.forEach(t),RTr=r(OBe," (BEiT model)"),OBe.forEach(t),STr=i(Q),hF=n(Q,"LI",{});var XBe=s(hF);Ebe=n(XBe,"STRONG",{});var Z3t=s(Ebe);PTr=r(Z3t,"bert"),Z3t.forEach(t),$Tr=r(XBe," \u2014 "),bV=n(XBe,"A",{href:!0});var e2t=s(bV);ITr=r(e2t,"FlaxBertModel"),e2t.forEach(t),DTr=r(XBe," (BERT model)"),XBe.forEach(t),NTr=i(Q),pF=n(Q,"LI",{});var VBe=s(pF);ybe=n(VBe,"STRONG",{});var o2t=s(ybe);jTr=r(o2t,"big_bird"),o2t.forEach(t),qTr=r(VBe," \u2014 "),vV=n(VBe,"A",{href:!0});var r2t=s(vV);GTr=r(r2t,"FlaxBigBirdModel"),r2t.forEach(t),OTr=r(VBe," (BigBird model)"),VBe.forEach(t),XTr=i(Q),_F=n(Q,"LI",{});var zBe=s(_F);wbe=n(zBe,"STRONG",{});var t2t=s(wbe);VTr=r(t2t,"blenderbot"),t2t.forEach(t),zTr=r(zBe," \u2014 "),TV=n(zBe,"A",{href:!0});var a2t=s(TV);WTr=r(a2t,"FlaxBlenderbotModel"),a2t.forEach(t),QTr=r(zBe," (Blenderbot model)"),zBe.forEach(t),HTr=i(Q),uF=n(Q,"LI",{});var WBe=s(uF);Abe=n(WBe,"STRONG",{});var n2t=s(Abe);UTr=r(n2t,"blenderbot-small"),n2t.forEach(t),JTr=r(WBe," \u2014 "),FV=n(WBe,"A",{href:!0});var s2t=s(FV);YTr=r(s2t,"FlaxBlenderbotSmallModel"),s2t.forEach(t),KTr=r(WBe," (BlenderbotSmall model)"),WBe.forEach(t),ZTr=i(Q),bF=n(Q,"LI",{});var QBe=s(bF);Lbe=n(QBe,"STRONG",{});var l2t=s(Lbe);e7r=r(l2t,"clip"),l2t.forEach(t),o7r=r(QBe," \u2014 "),CV=n(QBe,"A",{href:!0});var i2t=s(CV);r7r=r(i2t,"FlaxCLIPModel"),i2t.forEach(t),t7r=r(QBe," (CLIP model)"),QBe.forEach(t),a7r=i(Q),vF=n(Q,"LI",{});var HBe=s(vF);Bbe=n(HBe,"STRONG",{});var d2t=s(Bbe);n7r=r(d2t,"distilbert"),d2t.forEach(t),s7r=r(HBe," \u2014 "),MV=n(HBe,"A",{href:!0});var c2t=s(MV);l7r=r(c2t,"FlaxDistilBertModel"),c2t.forEach(t),i7r=r(HBe," (DistilBERT model)"),HBe.forEach(t),d7r=i(Q),TF=n(Q,"LI",{});var UBe=s(TF);xbe=n(UBe,"STRONG",{});var f2t=s(xbe);c7r=r(f2t,"electra"),f2t.forEach(t),f7r=r(UBe," \u2014 "),EV=n(UBe,"A",{href:!0});var m2t=s(EV);m7r=r(m2t,"FlaxElectraModel"),m2t.forEach(t),g7r=r(UBe," (ELECTRA model)"),UBe.forEach(t),h7r=i(Q),FF=n(Q,"LI",{});var JBe=s(FF);kbe=n(JBe,"STRONG",{});var g2t=s(kbe);p7r=r(g2t,"gpt2"),g2t.forEach(t),_7r=r(JBe," \u2014 "),yV=n(JBe,"A",{href:!0});var h2t=s(yV);u7r=r(h2t,"FlaxGPT2Model"),h2t.forEach(t),b7r=r(JBe," (OpenAI GPT-2 model)"),JBe.forEach(t),v7r=i(Q),CF=n(Q,"LI",{});var YBe=s(CF);Rbe=n(YBe,"STRONG",{});var p2t=s(Rbe);T7r=r(p2t,"gpt_neo"),p2t.forEach(t),F7r=r(YBe," \u2014 "),wV=n(YBe,"A",{href:!0});var _2t=s(wV);C7r=r(_2t,"FlaxGPTNeoModel"),_2t.forEach(t),M7r=r(YBe," (GPT Neo model)"),YBe.forEach(t),E7r=i(Q),MF=n(Q,"LI",{});var KBe=s(MF);Sbe=n(KBe,"STRONG",{});var u2t=s(Sbe);y7r=r(u2t,"gptj"),u2t.forEach(t),w7r=r(KBe," \u2014 "),AV=n(KBe,"A",{href:!0});var b2t=s(AV);A7r=r(b2t,"FlaxGPTJModel"),b2t.forEach(t),L7r=r(KBe," (GPT-J model)"),KBe.forEach(t),B7r=i(Q),EF=n(Q,"LI",{});var ZBe=s(EF);Pbe=n(ZBe,"STRONG",{});var v2t=s(Pbe);x7r=r(v2t,"marian"),v2t.forEach(t),k7r=r(ZBe," \u2014 "),LV=n(ZBe,"A",{href:!0});var T2t=s(LV);R7r=r(T2t,"FlaxMarianModel"),T2t.forEach(t),S7r=r(ZBe," (Marian model)"),ZBe.forEach(t),P7r=i(Q),yF=n(Q,"LI",{});var exe=s(yF);$be=n(exe,"STRONG",{});var F2t=s($be);$7r=r(F2t,"mbart"),F2t.forEach(t),I7r=r(exe," \u2014 "),BV=n(exe,"A",{href:!0});var C2t=s(BV);D7r=r(C2t,"FlaxMBartModel"),C2t.forEach(t),N7r=r(exe," (mBART model)"),exe.forEach(t),j7r=i(Q),wF=n(Q,"LI",{});var oxe=s(wF);Ibe=n(oxe,"STRONG",{});var M2t=s(Ibe);q7r=r(M2t,"mt5"),M2t.forEach(t),G7r=r(oxe," \u2014 "),xV=n(oxe,"A",{href:!0});var E2t=s(xV);O7r=r(E2t,"FlaxMT5Model"),E2t.forEach(t),X7r=r(oxe," (mT5 model)"),oxe.forEach(t),V7r=i(Q),AF=n(Q,"LI",{});var rxe=s(AF);Dbe=n(rxe,"STRONG",{});var y2t=s(Dbe);z7r=r(y2t,"pegasus"),y2t.forEach(t),W7r=r(rxe," \u2014 "),kV=n(rxe,"A",{href:!0});var w2t=s(kV);Q7r=r(w2t,"FlaxPegasusModel"),w2t.forEach(t),H7r=r(rxe," (Pegasus model)"),rxe.forEach(t),U7r=i(Q),LF=n(Q,"LI",{});var txe=s(LF);Nbe=n(txe,"STRONG",{});var A2t=s(Nbe);J7r=r(A2t,"roberta"),A2t.forEach(t),Y7r=r(txe," \u2014 "),RV=n(txe,"A",{href:!0});var L2t=s(RV);K7r=r(L2t,"FlaxRobertaModel"),L2t.forEach(t),Z7r=r(txe," (RoBERTa model)"),txe.forEach(t),eFr=i(Q),BF=n(Q,"LI",{});var axe=s(BF);jbe=n(axe,"STRONG",{});var B2t=s(jbe);oFr=r(B2t,"roformer"),B2t.forEach(t),rFr=r(axe," \u2014 "),SV=n(axe,"A",{href:!0});var x2t=s(SV);tFr=r(x2t,"FlaxRoFormerModel"),x2t.forEach(t),aFr=r(axe," (RoFormer model)"),axe.forEach(t),nFr=i(Q),xF=n(Q,"LI",{});var nxe=s(xF);qbe=n(nxe,"STRONG",{});var k2t=s(qbe);sFr=r(k2t,"t5"),k2t.forEach(t),lFr=r(nxe," \u2014 "),PV=n(nxe,"A",{href:!0});var R2t=s(PV);iFr=r(R2t,"FlaxT5Model"),R2t.forEach(t),dFr=r(nxe," (T5 model)"),nxe.forEach(t),cFr=i(Q),kF=n(Q,"LI",{});var sxe=s(kF);Gbe=n(sxe,"STRONG",{});var S2t=s(Gbe);fFr=r(S2t,"vision-text-dual-encoder"),S2t.forEach(t),mFr=r(sxe," \u2014 "),$V=n(sxe,"A",{href:!0});var P2t=s($V);gFr=r(P2t,"FlaxVisionTextDualEncoderModel"),P2t.forEach(t),hFr=r(sxe," (VisionTextDualEncoder model)"),sxe.forEach(t),pFr=i(Q),RF=n(Q,"LI",{});var lxe=s(RF);Obe=n(lxe,"STRONG",{});var $2t=s(Obe);_Fr=r($2t,"vit"),$2t.forEach(t),uFr=r(lxe," \u2014 "),IV=n(lxe,"A",{href:!0});var I2t=s(IV);bFr=r(I2t,"FlaxViTModel"),I2t.forEach(t),vFr=r(lxe," (ViT model)"),lxe.forEach(t),TFr=i(Q),SF=n(Q,"LI",{});var ixe=s(SF);Xbe=n(ixe,"STRONG",{});var D2t=s(Xbe);FFr=r(D2t,"wav2vec2"),D2t.forEach(t),CFr=r(ixe," \u2014 "),DV=n(ixe,"A",{href:!0});var N2t=s(DV);MFr=r(N2t,"FlaxWav2Vec2Model"),N2t.forEach(t),EFr=r(ixe," (Wav2Vec2 model)"),ixe.forEach(t),yFr=i(Q),PF=n(Q,"LI",{});var dxe=s(PF);Vbe=n(dxe,"STRONG",{});var j2t=s(Vbe);wFr=r(j2t,"xglm"),j2t.forEach(t),AFr=r(dxe," \u2014 "),NV=n(dxe,"A",{href:!0});var q2t=s(NV);LFr=r(q2t,"FlaxXGLMModel"),q2t.forEach(t),BFr=r(dxe," (XGLM model)"),dxe.forEach(t),xFr=i(Q),$F=n(Q,"LI",{});var cxe=s($F);zbe=n(cxe,"STRONG",{});var G2t=s(zbe);kFr=r(G2t,"xlm-roberta"),G2t.forEach(t),RFr=r(cxe," \u2014 "),jV=n(cxe,"A",{href:!0});var O2t=s(jV);SFr=r(O2t,"FlaxXLMRobertaModel"),O2t.forEach(t),PFr=r(cxe," (XLM-RoBERTa model)"),cxe.forEach(t),Q.forEach(t),$Fr=i(La),Wbe=n(La,"P",{});var X2t=s(Wbe);IFr=r(X2t,"Examples:"),X2t.forEach(t),DFr=i(La),m(N0.$$.fragment,La),La.forEach(t),fi.forEach(t),mSe=i(c),of=n(c,"H2",{class:!0});var M$e=s(of);IF=n(M$e,"A",{id:!0,class:!0,href:!0});var V2t=s(IF);Qbe=n(V2t,"SPAN",{});var z2t=s(Qbe);m(j0.$$.fragment,z2t),z2t.forEach(t),V2t.forEach(t),NFr=i(M$e),Hbe=n(M$e,"SPAN",{});var W2t=s(Hbe);jFr=r(W2t,"FlaxAutoModelForCausalLM"),W2t.forEach(t),M$e.forEach(t),gSe=i(c),Sr=n(c,"DIV",{class:!0});var gi=s(Sr);m(q0.$$.fragment,gi),qFr=i(gi),rf=n(gi,"P",{});var SQ=s(rf);GFr=r(SQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Ube=n(SQ,"CODE",{});var Q2t=s(Ube);OFr=r(Q2t,"from_pretrained()"),Q2t.forEach(t),XFr=r(SQ,"class method or the "),Jbe=n(SQ,"CODE",{});var H2t=s(Jbe);VFr=r(H2t,"from_config()"),H2t.forEach(t),zFr=r(SQ,`class
method.`),SQ.forEach(t),WFr=i(gi),G0=n(gi,"P",{});var E$e=s(G0);QFr=r(E$e,"This class cannot be instantiated directly using "),Ybe=n(E$e,"CODE",{});var U2t=s(Ybe);HFr=r(U2t,"__init__()"),U2t.forEach(t),UFr=r(E$e," (throws an error)."),E$e.forEach(t),JFr=i(gi),At=n(gi,"DIV",{class:!0});var hi=s(At);m(O0.$$.fragment,hi),YFr=i(hi),Kbe=n(hi,"P",{});var J2t=s(Kbe);KFr=r(J2t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),J2t.forEach(t),ZFr=i(hi),tf=n(hi,"P",{});var PQ=s(tf);eCr=r(PQ,`Note:
Loading a model from its configuration file does `),Zbe=n(PQ,"STRONG",{});var Y2t=s(Zbe);oCr=r(Y2t,"not"),Y2t.forEach(t),rCr=r(PQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),e3e=n(PQ,"CODE",{});var K2t=s(e3e);tCr=r(K2t,"from_pretrained()"),K2t.forEach(t),aCr=r(PQ,"to load the model weights."),PQ.forEach(t),nCr=i(hi),o3e=n(hi,"P",{});var Z2t=s(o3e);sCr=r(Z2t,"Examples:"),Z2t.forEach(t),lCr=i(hi),m(X0.$$.fragment,hi),hi.forEach(t),iCr=i(gi),Lo=n(gi,"DIV",{class:!0});var Ba=s(Lo);m(V0.$$.fragment,Ba),dCr=i(Ba),r3e=n(Ba,"P",{});var evt=s(r3e);cCr=r(evt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),evt.forEach(t),fCr=i(Ba),xn=n(Ba,"P",{});var tE=s(xn);mCr=r(tE,"The model class to instantiate is selected based on the "),t3e=n(tE,"CODE",{});var ovt=s(t3e);gCr=r(ovt,"model_type"),ovt.forEach(t),hCr=r(tE,` property of the config object (either
passed as an argument or loaded from `),a3e=n(tE,"CODE",{});var rvt=s(a3e);pCr=r(rvt,"pretrained_model_name_or_path"),rvt.forEach(t),_Cr=r(tE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n3e=n(tE,"CODE",{});var tvt=s(n3e);uCr=r(tvt,"pretrained_model_name_or_path"),tvt.forEach(t),bCr=r(tE,":"),tE.forEach(t),vCr=i(Ba),ca=n(Ba,"UL",{});var pi=s(ca);DF=n(pi,"LI",{});var fxe=s(DF);s3e=n(fxe,"STRONG",{});var avt=s(s3e);TCr=r(avt,"bart"),avt.forEach(t),FCr=r(fxe," \u2014 "),qV=n(fxe,"A",{href:!0});var nvt=s(qV);CCr=r(nvt,"FlaxBartForCausalLM"),nvt.forEach(t),MCr=r(fxe," (BART model)"),fxe.forEach(t),ECr=i(pi),NF=n(pi,"LI",{});var mxe=s(NF);l3e=n(mxe,"STRONG",{});var svt=s(l3e);yCr=r(svt,"gpt2"),svt.forEach(t),wCr=r(mxe," \u2014 "),GV=n(mxe,"A",{href:!0});var lvt=s(GV);ACr=r(lvt,"FlaxGPT2LMHeadModel"),lvt.forEach(t),LCr=r(mxe," (OpenAI GPT-2 model)"),mxe.forEach(t),BCr=i(pi),jF=n(pi,"LI",{});var gxe=s(jF);i3e=n(gxe,"STRONG",{});var ivt=s(i3e);xCr=r(ivt,"gpt_neo"),ivt.forEach(t),kCr=r(gxe," \u2014 "),OV=n(gxe,"A",{href:!0});var dvt=s(OV);RCr=r(dvt,"FlaxGPTNeoForCausalLM"),dvt.forEach(t),SCr=r(gxe," (GPT Neo model)"),gxe.forEach(t),PCr=i(pi),qF=n(pi,"LI",{});var hxe=s(qF);d3e=n(hxe,"STRONG",{});var cvt=s(d3e);$Cr=r(cvt,"gptj"),cvt.forEach(t),ICr=r(hxe," \u2014 "),XV=n(hxe,"A",{href:!0});var fvt=s(XV);DCr=r(fvt,"FlaxGPTJForCausalLM"),fvt.forEach(t),NCr=r(hxe," (GPT-J model)"),hxe.forEach(t),jCr=i(pi),GF=n(pi,"LI",{});var pxe=s(GF);c3e=n(pxe,"STRONG",{});var mvt=s(c3e);qCr=r(mvt,"xglm"),mvt.forEach(t),GCr=r(pxe," \u2014 "),VV=n(pxe,"A",{href:!0});var gvt=s(VV);OCr=r(gvt,"FlaxXGLMForCausalLM"),gvt.forEach(t),XCr=r(pxe," (XGLM model)"),pxe.forEach(t),pi.forEach(t),VCr=i(Ba),f3e=n(Ba,"P",{});var hvt=s(f3e);zCr=r(hvt,"Examples:"),hvt.forEach(t),WCr=i(Ba),m(z0.$$.fragment,Ba),Ba.forEach(t),gi.forEach(t),hSe=i(c),af=n(c,"H2",{class:!0});var y$e=s(af);OF=n(y$e,"A",{id:!0,class:!0,href:!0});var pvt=s(OF);m3e=n(pvt,"SPAN",{});var _vt=s(m3e);m(W0.$$.fragment,_vt),_vt.forEach(t),pvt.forEach(t),QCr=i(y$e),g3e=n(y$e,"SPAN",{});var uvt=s(g3e);HCr=r(uvt,"FlaxAutoModelForPreTraining"),uvt.forEach(t),y$e.forEach(t),pSe=i(c),Pr=n(c,"DIV",{class:!0});var _i=s(Pr);m(Q0.$$.fragment,_i),UCr=i(_i),nf=n(_i,"P",{});var $Q=s(nf);JCr=r($Q,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),h3e=n($Q,"CODE",{});var bvt=s(h3e);YCr=r(bvt,"from_pretrained()"),bvt.forEach(t),KCr=r($Q,"class method or the "),p3e=n($Q,"CODE",{});var vvt=s(p3e);ZCr=r(vvt,"from_config()"),vvt.forEach(t),eMr=r($Q,`class
method.`),$Q.forEach(t),oMr=i(_i),H0=n(_i,"P",{});var w$e=s(H0);rMr=r(w$e,"This class cannot be instantiated directly using "),_3e=n(w$e,"CODE",{});var Tvt=s(_3e);tMr=r(Tvt,"__init__()"),Tvt.forEach(t),aMr=r(w$e," (throws an error)."),w$e.forEach(t),nMr=i(_i),Lt=n(_i,"DIV",{class:!0});var ui=s(Lt);m(U0.$$.fragment,ui),sMr=i(ui),u3e=n(ui,"P",{});var Fvt=s(u3e);lMr=r(Fvt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Fvt.forEach(t),iMr=i(ui),sf=n(ui,"P",{});var IQ=s(sf);dMr=r(IQ,`Note:
Loading a model from its configuration file does `),b3e=n(IQ,"STRONG",{});var Cvt=s(b3e);cMr=r(Cvt,"not"),Cvt.forEach(t),fMr=r(IQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),v3e=n(IQ,"CODE",{});var Mvt=s(v3e);mMr=r(Mvt,"from_pretrained()"),Mvt.forEach(t),gMr=r(IQ,"to load the model weights."),IQ.forEach(t),hMr=i(ui),T3e=n(ui,"P",{});var Evt=s(T3e);pMr=r(Evt,"Examples:"),Evt.forEach(t),_Mr=i(ui),m(J0.$$.fragment,ui),ui.forEach(t),uMr=i(_i),Bo=n(_i,"DIV",{class:!0});var xa=s(Bo);m(Y0.$$.fragment,xa),bMr=i(xa),F3e=n(xa,"P",{});var yvt=s(F3e);vMr=r(yvt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),yvt.forEach(t),TMr=i(xa),kn=n(xa,"P",{});var aE=s(kn);FMr=r(aE,"The model class to instantiate is selected based on the "),C3e=n(aE,"CODE",{});var wvt=s(C3e);CMr=r(wvt,"model_type"),wvt.forEach(t),MMr=r(aE,` property of the config object (either
passed as an argument or loaded from `),M3e=n(aE,"CODE",{});var Avt=s(M3e);EMr=r(Avt,"pretrained_model_name_or_path"),Avt.forEach(t),yMr=r(aE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E3e=n(aE,"CODE",{});var Lvt=s(E3e);wMr=r(Lvt,"pretrained_model_name_or_path"),Lvt.forEach(t),AMr=r(aE,":"),aE.forEach(t),LMr=i(xa),fe=n(xa,"UL",{});var pe=s(fe);XF=n(pe,"LI",{});var _xe=s(XF);y3e=n(_xe,"STRONG",{});var Bvt=s(y3e);BMr=r(Bvt,"albert"),Bvt.forEach(t),xMr=r(_xe," \u2014 "),zV=n(_xe,"A",{href:!0});var xvt=s(zV);kMr=r(xvt,"FlaxAlbertForPreTraining"),xvt.forEach(t),RMr=r(_xe," (ALBERT model)"),_xe.forEach(t),SMr=i(pe),VF=n(pe,"LI",{});var uxe=s(VF);w3e=n(uxe,"STRONG",{});var kvt=s(w3e);PMr=r(kvt,"bart"),kvt.forEach(t),$Mr=r(uxe," \u2014 "),WV=n(uxe,"A",{href:!0});var Rvt=s(WV);IMr=r(Rvt,"FlaxBartForConditionalGeneration"),Rvt.forEach(t),DMr=r(uxe," (BART model)"),uxe.forEach(t),NMr=i(pe),zF=n(pe,"LI",{});var bxe=s(zF);A3e=n(bxe,"STRONG",{});var Svt=s(A3e);jMr=r(Svt,"bert"),Svt.forEach(t),qMr=r(bxe," \u2014 "),QV=n(bxe,"A",{href:!0});var Pvt=s(QV);GMr=r(Pvt,"FlaxBertForPreTraining"),Pvt.forEach(t),OMr=r(bxe," (BERT model)"),bxe.forEach(t),XMr=i(pe),WF=n(pe,"LI",{});var vxe=s(WF);L3e=n(vxe,"STRONG",{});var $vt=s(L3e);VMr=r($vt,"big_bird"),$vt.forEach(t),zMr=r(vxe," \u2014 "),HV=n(vxe,"A",{href:!0});var Ivt=s(HV);WMr=r(Ivt,"FlaxBigBirdForPreTraining"),Ivt.forEach(t),QMr=r(vxe," (BigBird model)"),vxe.forEach(t),HMr=i(pe),QF=n(pe,"LI",{});var Txe=s(QF);B3e=n(Txe,"STRONG",{});var Dvt=s(B3e);UMr=r(Dvt,"electra"),Dvt.forEach(t),JMr=r(Txe," \u2014 "),UV=n(Txe,"A",{href:!0});var Nvt=s(UV);YMr=r(Nvt,"FlaxElectraForPreTraining"),Nvt.forEach(t),KMr=r(Txe," (ELECTRA model)"),Txe.forEach(t),ZMr=i(pe),HF=n(pe,"LI",{});var Fxe=s(HF);x3e=n(Fxe,"STRONG",{});var jvt=s(x3e);eEr=r(jvt,"mbart"),jvt.forEach(t),oEr=r(Fxe," \u2014 "),JV=n(Fxe,"A",{href:!0});var qvt=s(JV);rEr=r(qvt,"FlaxMBartForConditionalGeneration"),qvt.forEach(t),tEr=r(Fxe," (mBART model)"),Fxe.forEach(t),aEr=i(pe),UF=n(pe,"LI",{});var Cxe=s(UF);k3e=n(Cxe,"STRONG",{});var Gvt=s(k3e);nEr=r(Gvt,"mt5"),Gvt.forEach(t),sEr=r(Cxe," \u2014 "),YV=n(Cxe,"A",{href:!0});var Ovt=s(YV);lEr=r(Ovt,"FlaxMT5ForConditionalGeneration"),Ovt.forEach(t),iEr=r(Cxe," (mT5 model)"),Cxe.forEach(t),dEr=i(pe),JF=n(pe,"LI",{});var Mxe=s(JF);R3e=n(Mxe,"STRONG",{});var Xvt=s(R3e);cEr=r(Xvt,"roberta"),Xvt.forEach(t),fEr=r(Mxe," \u2014 "),KV=n(Mxe,"A",{href:!0});var Vvt=s(KV);mEr=r(Vvt,"FlaxRobertaForMaskedLM"),Vvt.forEach(t),gEr=r(Mxe," (RoBERTa model)"),Mxe.forEach(t),hEr=i(pe),YF=n(pe,"LI",{});var Exe=s(YF);S3e=n(Exe,"STRONG",{});var zvt=s(S3e);pEr=r(zvt,"roformer"),zvt.forEach(t),_Er=r(Exe," \u2014 "),ZV=n(Exe,"A",{href:!0});var Wvt=s(ZV);uEr=r(Wvt,"FlaxRoFormerForMaskedLM"),Wvt.forEach(t),bEr=r(Exe," (RoFormer model)"),Exe.forEach(t),vEr=i(pe),KF=n(pe,"LI",{});var yxe=s(KF);P3e=n(yxe,"STRONG",{});var Qvt=s(P3e);TEr=r(Qvt,"t5"),Qvt.forEach(t),FEr=r(yxe," \u2014 "),ez=n(yxe,"A",{href:!0});var Hvt=s(ez);CEr=r(Hvt,"FlaxT5ForConditionalGeneration"),Hvt.forEach(t),MEr=r(yxe," (T5 model)"),yxe.forEach(t),EEr=i(pe),ZF=n(pe,"LI",{});var wxe=s(ZF);$3e=n(wxe,"STRONG",{});var Uvt=s($3e);yEr=r(Uvt,"wav2vec2"),Uvt.forEach(t),wEr=r(wxe," \u2014 "),oz=n(wxe,"A",{href:!0});var Jvt=s(oz);AEr=r(Jvt,"FlaxWav2Vec2ForPreTraining"),Jvt.forEach(t),LEr=r(wxe," (Wav2Vec2 model)"),wxe.forEach(t),BEr=i(pe),eC=n(pe,"LI",{});var Axe=s(eC);I3e=n(Axe,"STRONG",{});var Yvt=s(I3e);xEr=r(Yvt,"xlm-roberta"),Yvt.forEach(t),kEr=r(Axe," \u2014 "),rz=n(Axe,"A",{href:!0});var Kvt=s(rz);REr=r(Kvt,"FlaxXLMRobertaForMaskedLM"),Kvt.forEach(t),SEr=r(Axe," (XLM-RoBERTa model)"),Axe.forEach(t),pe.forEach(t),PEr=i(xa),D3e=n(xa,"P",{});var Zvt=s(D3e);$Er=r(Zvt,"Examples:"),Zvt.forEach(t),IEr=i(xa),m(K0.$$.fragment,xa),xa.forEach(t),_i.forEach(t),_Se=i(c),lf=n(c,"H2",{class:!0});var A$e=s(lf);oC=n(A$e,"A",{id:!0,class:!0,href:!0});var e6t=s(oC);N3e=n(e6t,"SPAN",{});var o6t=s(N3e);m(Z0.$$.fragment,o6t),o6t.forEach(t),e6t.forEach(t),DEr=i(A$e),j3e=n(A$e,"SPAN",{});var r6t=s(j3e);NEr=r(r6t,"FlaxAutoModelForMaskedLM"),r6t.forEach(t),A$e.forEach(t),uSe=i(c),$r=n(c,"DIV",{class:!0});var bi=s($r);m(eL.$$.fragment,bi),jEr=i(bi),df=n(bi,"P",{});var DQ=s(df);qEr=r(DQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),q3e=n(DQ,"CODE",{});var t6t=s(q3e);GEr=r(t6t,"from_pretrained()"),t6t.forEach(t),OEr=r(DQ,"class method or the "),G3e=n(DQ,"CODE",{});var a6t=s(G3e);XEr=r(a6t,"from_config()"),a6t.forEach(t),VEr=r(DQ,`class
method.`),DQ.forEach(t),zEr=i(bi),oL=n(bi,"P",{});var L$e=s(oL);WEr=r(L$e,"This class cannot be instantiated directly using "),O3e=n(L$e,"CODE",{});var n6t=s(O3e);QEr=r(n6t,"__init__()"),n6t.forEach(t),HEr=r(L$e," (throws an error)."),L$e.forEach(t),UEr=i(bi),Bt=n(bi,"DIV",{class:!0});var vi=s(Bt);m(rL.$$.fragment,vi),JEr=i(vi),X3e=n(vi,"P",{});var s6t=s(X3e);YEr=r(s6t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),s6t.forEach(t),KEr=i(vi),cf=n(vi,"P",{});var NQ=s(cf);ZEr=r(NQ,`Note:
Loading a model from its configuration file does `),V3e=n(NQ,"STRONG",{});var l6t=s(V3e);e5r=r(l6t,"not"),l6t.forEach(t),o5r=r(NQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),z3e=n(NQ,"CODE",{});var i6t=s(z3e);r5r=r(i6t,"from_pretrained()"),i6t.forEach(t),t5r=r(NQ,"to load the model weights."),NQ.forEach(t),a5r=i(vi),W3e=n(vi,"P",{});var d6t=s(W3e);n5r=r(d6t,"Examples:"),d6t.forEach(t),s5r=i(vi),m(tL.$$.fragment,vi),vi.forEach(t),l5r=i(bi),xo=n(bi,"DIV",{class:!0});var ka=s(xo);m(aL.$$.fragment,ka),i5r=i(ka),Q3e=n(ka,"P",{});var c6t=s(Q3e);d5r=r(c6t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),c6t.forEach(t),c5r=i(ka),Rn=n(ka,"P",{});var nE=s(Rn);f5r=r(nE,"The model class to instantiate is selected based on the "),H3e=n(nE,"CODE",{});var f6t=s(H3e);m5r=r(f6t,"model_type"),f6t.forEach(t),g5r=r(nE,` property of the config object (either
passed as an argument or loaded from `),U3e=n(nE,"CODE",{});var m6t=s(U3e);h5r=r(m6t,"pretrained_model_name_or_path"),m6t.forEach(t),p5r=r(nE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J3e=n(nE,"CODE",{});var g6t=s(J3e);_5r=r(g6t,"pretrained_model_name_or_path"),g6t.forEach(t),u5r=r(nE,":"),nE.forEach(t),b5r=i(ka),be=n(ka,"UL",{});var we=s(be);rC=n(we,"LI",{});var Lxe=s(rC);Y3e=n(Lxe,"STRONG",{});var h6t=s(Y3e);v5r=r(h6t,"albert"),h6t.forEach(t),T5r=r(Lxe," \u2014 "),tz=n(Lxe,"A",{href:!0});var p6t=s(tz);F5r=r(p6t,"FlaxAlbertForMaskedLM"),p6t.forEach(t),C5r=r(Lxe," (ALBERT model)"),Lxe.forEach(t),M5r=i(we),tC=n(we,"LI",{});var Bxe=s(tC);K3e=n(Bxe,"STRONG",{});var _6t=s(K3e);E5r=r(_6t,"bart"),_6t.forEach(t),y5r=r(Bxe," \u2014 "),az=n(Bxe,"A",{href:!0});var u6t=s(az);w5r=r(u6t,"FlaxBartForConditionalGeneration"),u6t.forEach(t),A5r=r(Bxe," (BART model)"),Bxe.forEach(t),L5r=i(we),aC=n(we,"LI",{});var xxe=s(aC);Z3e=n(xxe,"STRONG",{});var b6t=s(Z3e);B5r=r(b6t,"bert"),b6t.forEach(t),x5r=r(xxe," \u2014 "),nz=n(xxe,"A",{href:!0});var v6t=s(nz);k5r=r(v6t,"FlaxBertForMaskedLM"),v6t.forEach(t),R5r=r(xxe," (BERT model)"),xxe.forEach(t),S5r=i(we),nC=n(we,"LI",{});var kxe=s(nC);e2e=n(kxe,"STRONG",{});var T6t=s(e2e);P5r=r(T6t,"big_bird"),T6t.forEach(t),$5r=r(kxe," \u2014 "),sz=n(kxe,"A",{href:!0});var F6t=s(sz);I5r=r(F6t,"FlaxBigBirdForMaskedLM"),F6t.forEach(t),D5r=r(kxe," (BigBird model)"),kxe.forEach(t),N5r=i(we),sC=n(we,"LI",{});var Rxe=s(sC);o2e=n(Rxe,"STRONG",{});var C6t=s(o2e);j5r=r(C6t,"distilbert"),C6t.forEach(t),q5r=r(Rxe," \u2014 "),lz=n(Rxe,"A",{href:!0});var M6t=s(lz);G5r=r(M6t,"FlaxDistilBertForMaskedLM"),M6t.forEach(t),O5r=r(Rxe," (DistilBERT model)"),Rxe.forEach(t),X5r=i(we),lC=n(we,"LI",{});var Sxe=s(lC);r2e=n(Sxe,"STRONG",{});var E6t=s(r2e);V5r=r(E6t,"electra"),E6t.forEach(t),z5r=r(Sxe," \u2014 "),iz=n(Sxe,"A",{href:!0});var y6t=s(iz);W5r=r(y6t,"FlaxElectraForMaskedLM"),y6t.forEach(t),Q5r=r(Sxe," (ELECTRA model)"),Sxe.forEach(t),H5r=i(we),iC=n(we,"LI",{});var Pxe=s(iC);t2e=n(Pxe,"STRONG",{});var w6t=s(t2e);U5r=r(w6t,"mbart"),w6t.forEach(t),J5r=r(Pxe," \u2014 "),dz=n(Pxe,"A",{href:!0});var A6t=s(dz);Y5r=r(A6t,"FlaxMBartForConditionalGeneration"),A6t.forEach(t),K5r=r(Pxe," (mBART model)"),Pxe.forEach(t),Z5r=i(we),dC=n(we,"LI",{});var $xe=s(dC);a2e=n($xe,"STRONG",{});var L6t=s(a2e);eyr=r(L6t,"roberta"),L6t.forEach(t),oyr=r($xe," \u2014 "),cz=n($xe,"A",{href:!0});var B6t=s(cz);ryr=r(B6t,"FlaxRobertaForMaskedLM"),B6t.forEach(t),tyr=r($xe," (RoBERTa model)"),$xe.forEach(t),ayr=i(we),cC=n(we,"LI",{});var Ixe=s(cC);n2e=n(Ixe,"STRONG",{});var x6t=s(n2e);nyr=r(x6t,"roformer"),x6t.forEach(t),syr=r(Ixe," \u2014 "),fz=n(Ixe,"A",{href:!0});var k6t=s(fz);lyr=r(k6t,"FlaxRoFormerForMaskedLM"),k6t.forEach(t),iyr=r(Ixe," (RoFormer model)"),Ixe.forEach(t),dyr=i(we),fC=n(we,"LI",{});var Dxe=s(fC);s2e=n(Dxe,"STRONG",{});var R6t=s(s2e);cyr=r(R6t,"xlm-roberta"),R6t.forEach(t),fyr=r(Dxe," \u2014 "),mz=n(Dxe,"A",{href:!0});var S6t=s(mz);myr=r(S6t,"FlaxXLMRobertaForMaskedLM"),S6t.forEach(t),gyr=r(Dxe," (XLM-RoBERTa model)"),Dxe.forEach(t),we.forEach(t),hyr=i(ka),l2e=n(ka,"P",{});var P6t=s(l2e);pyr=r(P6t,"Examples:"),P6t.forEach(t),_yr=i(ka),m(nL.$$.fragment,ka),ka.forEach(t),bi.forEach(t),bSe=i(c),ff=n(c,"H2",{class:!0});var B$e=s(ff);mC=n(B$e,"A",{id:!0,class:!0,href:!0});var $6t=s(mC);i2e=n($6t,"SPAN",{});var I6t=s(i2e);m(sL.$$.fragment,I6t),I6t.forEach(t),$6t.forEach(t),uyr=i(B$e),d2e=n(B$e,"SPAN",{});var D6t=s(d2e);byr=r(D6t,"FlaxAutoModelForSeq2SeqLM"),D6t.forEach(t),B$e.forEach(t),vSe=i(c),Ir=n(c,"DIV",{class:!0});var Ti=s(Ir);m(lL.$$.fragment,Ti),vyr=i(Ti),mf=n(Ti,"P",{});var jQ=s(mf);Tyr=r(jQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),c2e=n(jQ,"CODE",{});var N6t=s(c2e);Fyr=r(N6t,"from_pretrained()"),N6t.forEach(t),Cyr=r(jQ,"class method or the "),f2e=n(jQ,"CODE",{});var j6t=s(f2e);Myr=r(j6t,"from_config()"),j6t.forEach(t),Eyr=r(jQ,`class
method.`),jQ.forEach(t),yyr=i(Ti),iL=n(Ti,"P",{});var x$e=s(iL);wyr=r(x$e,"This class cannot be instantiated directly using "),m2e=n(x$e,"CODE",{});var q6t=s(m2e);Ayr=r(q6t,"__init__()"),q6t.forEach(t),Lyr=r(x$e," (throws an error)."),x$e.forEach(t),Byr=i(Ti),xt=n(Ti,"DIV",{class:!0});var Fi=s(xt);m(dL.$$.fragment,Fi),xyr=i(Fi),g2e=n(Fi,"P",{});var G6t=s(g2e);kyr=r(G6t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),G6t.forEach(t),Ryr=i(Fi),gf=n(Fi,"P",{});var qQ=s(gf);Syr=r(qQ,`Note:
Loading a model from its configuration file does `),h2e=n(qQ,"STRONG",{});var O6t=s(h2e);Pyr=r(O6t,"not"),O6t.forEach(t),$yr=r(qQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),p2e=n(qQ,"CODE",{});var X6t=s(p2e);Iyr=r(X6t,"from_pretrained()"),X6t.forEach(t),Dyr=r(qQ,"to load the model weights."),qQ.forEach(t),Nyr=i(Fi),_2e=n(Fi,"P",{});var V6t=s(_2e);jyr=r(V6t,"Examples:"),V6t.forEach(t),qyr=i(Fi),m(cL.$$.fragment,Fi),Fi.forEach(t),Gyr=i(Ti),ko=n(Ti,"DIV",{class:!0});var Ra=s(ko);m(fL.$$.fragment,Ra),Oyr=i(Ra),u2e=n(Ra,"P",{});var z6t=s(u2e);Xyr=r(z6t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),z6t.forEach(t),Vyr=i(Ra),Sn=n(Ra,"P",{});var sE=s(Sn);zyr=r(sE,"The model class to instantiate is selected based on the "),b2e=n(sE,"CODE",{});var W6t=s(b2e);Wyr=r(W6t,"model_type"),W6t.forEach(t),Qyr=r(sE,` property of the config object (either
passed as an argument or loaded from `),v2e=n(sE,"CODE",{});var Q6t=s(v2e);Hyr=r(Q6t,"pretrained_model_name_or_path"),Q6t.forEach(t),Uyr=r(sE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T2e=n(sE,"CODE",{});var H6t=s(T2e);Jyr=r(H6t,"pretrained_model_name_or_path"),H6t.forEach(t),Yyr=r(sE,":"),sE.forEach(t),Kyr=i(Ra),Me=n(Ra,"UL",{});var so=s(Me);gC=n(so,"LI",{});var Nxe=s(gC);F2e=n(Nxe,"STRONG",{});var U6t=s(F2e);Zyr=r(U6t,"bart"),U6t.forEach(t),ewr=r(Nxe," \u2014 "),gz=n(Nxe,"A",{href:!0});var J6t=s(gz);owr=r(J6t,"FlaxBartForConditionalGeneration"),J6t.forEach(t),rwr=r(Nxe," (BART model)"),Nxe.forEach(t),twr=i(so),hC=n(so,"LI",{});var jxe=s(hC);C2e=n(jxe,"STRONG",{});var Y6t=s(C2e);awr=r(Y6t,"blenderbot"),Y6t.forEach(t),nwr=r(jxe," \u2014 "),hz=n(jxe,"A",{href:!0});var K6t=s(hz);swr=r(K6t,"FlaxBlenderbotForConditionalGeneration"),K6t.forEach(t),lwr=r(jxe," (Blenderbot model)"),jxe.forEach(t),iwr=i(so),pC=n(so,"LI",{});var qxe=s(pC);M2e=n(qxe,"STRONG",{});var Z6t=s(M2e);dwr=r(Z6t,"blenderbot-small"),Z6t.forEach(t),cwr=r(qxe," \u2014 "),pz=n(qxe,"A",{href:!0});var eTt=s(pz);fwr=r(eTt,"FlaxBlenderbotSmallForConditionalGeneration"),eTt.forEach(t),mwr=r(qxe," (BlenderbotSmall model)"),qxe.forEach(t),gwr=i(so),_C=n(so,"LI",{});var Gxe=s(_C);E2e=n(Gxe,"STRONG",{});var oTt=s(E2e);hwr=r(oTt,"encoder-decoder"),oTt.forEach(t),pwr=r(Gxe," \u2014 "),_z=n(Gxe,"A",{href:!0});var rTt=s(_z);_wr=r(rTt,"FlaxEncoderDecoderModel"),rTt.forEach(t),uwr=r(Gxe," (Encoder decoder model)"),Gxe.forEach(t),bwr=i(so),uC=n(so,"LI",{});var Oxe=s(uC);y2e=n(Oxe,"STRONG",{});var tTt=s(y2e);vwr=r(tTt,"marian"),tTt.forEach(t),Twr=r(Oxe," \u2014 "),uz=n(Oxe,"A",{href:!0});var aTt=s(uz);Fwr=r(aTt,"FlaxMarianMTModel"),aTt.forEach(t),Cwr=r(Oxe," (Marian model)"),Oxe.forEach(t),Mwr=i(so),bC=n(so,"LI",{});var Xxe=s(bC);w2e=n(Xxe,"STRONG",{});var nTt=s(w2e);Ewr=r(nTt,"mbart"),nTt.forEach(t),ywr=r(Xxe," \u2014 "),bz=n(Xxe,"A",{href:!0});var sTt=s(bz);wwr=r(sTt,"FlaxMBartForConditionalGeneration"),sTt.forEach(t),Awr=r(Xxe," (mBART model)"),Xxe.forEach(t),Lwr=i(so),vC=n(so,"LI",{});var Vxe=s(vC);A2e=n(Vxe,"STRONG",{});var lTt=s(A2e);Bwr=r(lTt,"mt5"),lTt.forEach(t),xwr=r(Vxe," \u2014 "),vz=n(Vxe,"A",{href:!0});var iTt=s(vz);kwr=r(iTt,"FlaxMT5ForConditionalGeneration"),iTt.forEach(t),Rwr=r(Vxe," (mT5 model)"),Vxe.forEach(t),Swr=i(so),TC=n(so,"LI",{});var zxe=s(TC);L2e=n(zxe,"STRONG",{});var dTt=s(L2e);Pwr=r(dTt,"pegasus"),dTt.forEach(t),$wr=r(zxe," \u2014 "),Tz=n(zxe,"A",{href:!0});var cTt=s(Tz);Iwr=r(cTt,"FlaxPegasusForConditionalGeneration"),cTt.forEach(t),Dwr=r(zxe," (Pegasus model)"),zxe.forEach(t),Nwr=i(so),FC=n(so,"LI",{});var Wxe=s(FC);B2e=n(Wxe,"STRONG",{});var fTt=s(B2e);jwr=r(fTt,"t5"),fTt.forEach(t),qwr=r(Wxe," \u2014 "),Fz=n(Wxe,"A",{href:!0});var mTt=s(Fz);Gwr=r(mTt,"FlaxT5ForConditionalGeneration"),mTt.forEach(t),Owr=r(Wxe," (T5 model)"),Wxe.forEach(t),so.forEach(t),Xwr=i(Ra),x2e=n(Ra,"P",{});var gTt=s(x2e);Vwr=r(gTt,"Examples:"),gTt.forEach(t),zwr=i(Ra),m(mL.$$.fragment,Ra),Ra.forEach(t),Ti.forEach(t),TSe=i(c),hf=n(c,"H2",{class:!0});var k$e=s(hf);CC=n(k$e,"A",{id:!0,class:!0,href:!0});var hTt=s(CC);k2e=n(hTt,"SPAN",{});var pTt=s(k2e);m(gL.$$.fragment,pTt),pTt.forEach(t),hTt.forEach(t),Wwr=i(k$e),R2e=n(k$e,"SPAN",{});var _Tt=s(R2e);Qwr=r(_Tt,"FlaxAutoModelForSequenceClassification"),_Tt.forEach(t),k$e.forEach(t),FSe=i(c),Dr=n(c,"DIV",{class:!0});var Ci=s(Dr);m(hL.$$.fragment,Ci),Hwr=i(Ci),pf=n(Ci,"P",{});var GQ=s(pf);Uwr=r(GQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),S2e=n(GQ,"CODE",{});var uTt=s(S2e);Jwr=r(uTt,"from_pretrained()"),uTt.forEach(t),Ywr=r(GQ,"class method or the "),P2e=n(GQ,"CODE",{});var bTt=s(P2e);Kwr=r(bTt,"from_config()"),bTt.forEach(t),Zwr=r(GQ,`class
method.`),GQ.forEach(t),eAr=i(Ci),pL=n(Ci,"P",{});var R$e=s(pL);oAr=r(R$e,"This class cannot be instantiated directly using "),$2e=n(R$e,"CODE",{});var vTt=s($2e);rAr=r(vTt,"__init__()"),vTt.forEach(t),tAr=r(R$e," (throws an error)."),R$e.forEach(t),aAr=i(Ci),kt=n(Ci,"DIV",{class:!0});var Mi=s(kt);m(_L.$$.fragment,Mi),nAr=i(Mi),I2e=n(Mi,"P",{});var TTt=s(I2e);sAr=r(TTt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),TTt.forEach(t),lAr=i(Mi),_f=n(Mi,"P",{});var OQ=s(_f);iAr=r(OQ,`Note:
Loading a model from its configuration file does `),D2e=n(OQ,"STRONG",{});var FTt=s(D2e);dAr=r(FTt,"not"),FTt.forEach(t),cAr=r(OQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),N2e=n(OQ,"CODE",{});var CTt=s(N2e);fAr=r(CTt,"from_pretrained()"),CTt.forEach(t),mAr=r(OQ,"to load the model weights."),OQ.forEach(t),gAr=i(Mi),j2e=n(Mi,"P",{});var MTt=s(j2e);hAr=r(MTt,"Examples:"),MTt.forEach(t),pAr=i(Mi),m(uL.$$.fragment,Mi),Mi.forEach(t),_Ar=i(Ci),Ro=n(Ci,"DIV",{class:!0});var Sa=s(Ro);m(bL.$$.fragment,Sa),uAr=i(Sa),q2e=n(Sa,"P",{});var ETt=s(q2e);bAr=r(ETt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),ETt.forEach(t),vAr=i(Sa),Pn=n(Sa,"P",{});var lE=s(Pn);TAr=r(lE,"The model class to instantiate is selected based on the "),G2e=n(lE,"CODE",{});var yTt=s(G2e);FAr=r(yTt,"model_type"),yTt.forEach(t),CAr=r(lE,` property of the config object (either
passed as an argument or loaded from `),O2e=n(lE,"CODE",{});var wTt=s(O2e);MAr=r(wTt,"pretrained_model_name_or_path"),wTt.forEach(t),EAr=r(lE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X2e=n(lE,"CODE",{});var ATt=s(X2e);yAr=r(ATt,"pretrained_model_name_or_path"),ATt.forEach(t),wAr=r(lE,":"),lE.forEach(t),AAr=i(Sa),ve=n(Sa,"UL",{});var Ae=s(ve);MC=n(Ae,"LI",{});var Qxe=s(MC);V2e=n(Qxe,"STRONG",{});var LTt=s(V2e);LAr=r(LTt,"albert"),LTt.forEach(t),BAr=r(Qxe," \u2014 "),Cz=n(Qxe,"A",{href:!0});var BTt=s(Cz);xAr=r(BTt,"FlaxAlbertForSequenceClassification"),BTt.forEach(t),kAr=r(Qxe," (ALBERT model)"),Qxe.forEach(t),RAr=i(Ae),EC=n(Ae,"LI",{});var Hxe=s(EC);z2e=n(Hxe,"STRONG",{});var xTt=s(z2e);SAr=r(xTt,"bart"),xTt.forEach(t),PAr=r(Hxe," \u2014 "),Mz=n(Hxe,"A",{href:!0});var kTt=s(Mz);$Ar=r(kTt,"FlaxBartForSequenceClassification"),kTt.forEach(t),IAr=r(Hxe," (BART model)"),Hxe.forEach(t),DAr=i(Ae),yC=n(Ae,"LI",{});var Uxe=s(yC);W2e=n(Uxe,"STRONG",{});var RTt=s(W2e);NAr=r(RTt,"bert"),RTt.forEach(t),jAr=r(Uxe," \u2014 "),Ez=n(Uxe,"A",{href:!0});var STt=s(Ez);qAr=r(STt,"FlaxBertForSequenceClassification"),STt.forEach(t),GAr=r(Uxe," (BERT model)"),Uxe.forEach(t),OAr=i(Ae),wC=n(Ae,"LI",{});var Jxe=s(wC);Q2e=n(Jxe,"STRONG",{});var PTt=s(Q2e);XAr=r(PTt,"big_bird"),PTt.forEach(t),VAr=r(Jxe," \u2014 "),yz=n(Jxe,"A",{href:!0});var $Tt=s(yz);zAr=r($Tt,"FlaxBigBirdForSequenceClassification"),$Tt.forEach(t),WAr=r(Jxe," (BigBird model)"),Jxe.forEach(t),QAr=i(Ae),AC=n(Ae,"LI",{});var Yxe=s(AC);H2e=n(Yxe,"STRONG",{});var ITt=s(H2e);HAr=r(ITt,"distilbert"),ITt.forEach(t),UAr=r(Yxe," \u2014 "),wz=n(Yxe,"A",{href:!0});var DTt=s(wz);JAr=r(DTt,"FlaxDistilBertForSequenceClassification"),DTt.forEach(t),YAr=r(Yxe," (DistilBERT model)"),Yxe.forEach(t),KAr=i(Ae),LC=n(Ae,"LI",{});var Kxe=s(LC);U2e=n(Kxe,"STRONG",{});var NTt=s(U2e);ZAr=r(NTt,"electra"),NTt.forEach(t),e0r=r(Kxe," \u2014 "),Az=n(Kxe,"A",{href:!0});var jTt=s(Az);o0r=r(jTt,"FlaxElectraForSequenceClassification"),jTt.forEach(t),r0r=r(Kxe," (ELECTRA model)"),Kxe.forEach(t),t0r=i(Ae),BC=n(Ae,"LI",{});var Zxe=s(BC);J2e=n(Zxe,"STRONG",{});var qTt=s(J2e);a0r=r(qTt,"mbart"),qTt.forEach(t),n0r=r(Zxe," \u2014 "),Lz=n(Zxe,"A",{href:!0});var GTt=s(Lz);s0r=r(GTt,"FlaxMBartForSequenceClassification"),GTt.forEach(t),l0r=r(Zxe," (mBART model)"),Zxe.forEach(t),i0r=i(Ae),xC=n(Ae,"LI",{});var eke=s(xC);Y2e=n(eke,"STRONG",{});var OTt=s(Y2e);d0r=r(OTt,"roberta"),OTt.forEach(t),c0r=r(eke," \u2014 "),Bz=n(eke,"A",{href:!0});var XTt=s(Bz);f0r=r(XTt,"FlaxRobertaForSequenceClassification"),XTt.forEach(t),m0r=r(eke," (RoBERTa model)"),eke.forEach(t),g0r=i(Ae),kC=n(Ae,"LI",{});var oke=s(kC);K2e=n(oke,"STRONG",{});var VTt=s(K2e);h0r=r(VTt,"roformer"),VTt.forEach(t),p0r=r(oke," \u2014 "),xz=n(oke,"A",{href:!0});var zTt=s(xz);_0r=r(zTt,"FlaxRoFormerForSequenceClassification"),zTt.forEach(t),u0r=r(oke," (RoFormer model)"),oke.forEach(t),b0r=i(Ae),RC=n(Ae,"LI",{});var rke=s(RC);Z2e=n(rke,"STRONG",{});var WTt=s(Z2e);v0r=r(WTt,"xlm-roberta"),WTt.forEach(t),T0r=r(rke," \u2014 "),kz=n(rke,"A",{href:!0});var QTt=s(kz);F0r=r(QTt,"FlaxXLMRobertaForSequenceClassification"),QTt.forEach(t),C0r=r(rke," (XLM-RoBERTa model)"),rke.forEach(t),Ae.forEach(t),M0r=i(Sa),eve=n(Sa,"P",{});var HTt=s(eve);E0r=r(HTt,"Examples:"),HTt.forEach(t),y0r=i(Sa),m(vL.$$.fragment,Sa),Sa.forEach(t),Ci.forEach(t),CSe=i(c),uf=n(c,"H2",{class:!0});var S$e=s(uf);SC=n(S$e,"A",{id:!0,class:!0,href:!0});var UTt=s(SC);ove=n(UTt,"SPAN",{});var JTt=s(ove);m(TL.$$.fragment,JTt),JTt.forEach(t),UTt.forEach(t),w0r=i(S$e),rve=n(S$e,"SPAN",{});var YTt=s(rve);A0r=r(YTt,"FlaxAutoModelForQuestionAnswering"),YTt.forEach(t),S$e.forEach(t),MSe=i(c),Nr=n(c,"DIV",{class:!0});var Ei=s(Nr);m(FL.$$.fragment,Ei),L0r=i(Ei),bf=n(Ei,"P",{});var XQ=s(bf);B0r=r(XQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),tve=n(XQ,"CODE",{});var KTt=s(tve);x0r=r(KTt,"from_pretrained()"),KTt.forEach(t),k0r=r(XQ,"class method or the "),ave=n(XQ,"CODE",{});var ZTt=s(ave);R0r=r(ZTt,"from_config()"),ZTt.forEach(t),S0r=r(XQ,`class
method.`),XQ.forEach(t),P0r=i(Ei),CL=n(Ei,"P",{});var P$e=s(CL);$0r=r(P$e,"This class cannot be instantiated directly using "),nve=n(P$e,"CODE",{});var e7t=s(nve);I0r=r(e7t,"__init__()"),e7t.forEach(t),D0r=r(P$e," (throws an error)."),P$e.forEach(t),N0r=i(Ei),Rt=n(Ei,"DIV",{class:!0});var yi=s(Rt);m(ML.$$.fragment,yi),j0r=i(yi),sve=n(yi,"P",{});var o7t=s(sve);q0r=r(o7t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),o7t.forEach(t),G0r=i(yi),vf=n(yi,"P",{});var VQ=s(vf);O0r=r(VQ,`Note:
Loading a model from its configuration file does `),lve=n(VQ,"STRONG",{});var r7t=s(lve);X0r=r(r7t,"not"),r7t.forEach(t),V0r=r(VQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),ive=n(VQ,"CODE",{});var t7t=s(ive);z0r=r(t7t,"from_pretrained()"),t7t.forEach(t),W0r=r(VQ,"to load the model weights."),VQ.forEach(t),Q0r=i(yi),dve=n(yi,"P",{});var a7t=s(dve);H0r=r(a7t,"Examples:"),a7t.forEach(t),U0r=i(yi),m(EL.$$.fragment,yi),yi.forEach(t),J0r=i(Ei),So=n(Ei,"DIV",{class:!0});var Pa=s(So);m(yL.$$.fragment,Pa),Y0r=i(Pa),cve=n(Pa,"P",{});var n7t=s(cve);K0r=r(n7t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),n7t.forEach(t),Z0r=i(Pa),$n=n(Pa,"P",{});var iE=s($n);eLr=r(iE,"The model class to instantiate is selected based on the "),fve=n(iE,"CODE",{});var s7t=s(fve);oLr=r(s7t,"model_type"),s7t.forEach(t),rLr=r(iE,` property of the config object (either
passed as an argument or loaded from `),mve=n(iE,"CODE",{});var l7t=s(mve);tLr=r(l7t,"pretrained_model_name_or_path"),l7t.forEach(t),aLr=r(iE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gve=n(iE,"CODE",{});var i7t=s(gve);nLr=r(i7t,"pretrained_model_name_or_path"),i7t.forEach(t),sLr=r(iE,":"),iE.forEach(t),lLr=i(Pa),Te=n(Pa,"UL",{});var Le=s(Te);PC=n(Le,"LI",{});var tke=s(PC);hve=n(tke,"STRONG",{});var d7t=s(hve);iLr=r(d7t,"albert"),d7t.forEach(t),dLr=r(tke," \u2014 "),Rz=n(tke,"A",{href:!0});var c7t=s(Rz);cLr=r(c7t,"FlaxAlbertForQuestionAnswering"),c7t.forEach(t),fLr=r(tke," (ALBERT model)"),tke.forEach(t),mLr=i(Le),$C=n(Le,"LI",{});var ake=s($C);pve=n(ake,"STRONG",{});var f7t=s(pve);gLr=r(f7t,"bart"),f7t.forEach(t),hLr=r(ake," \u2014 "),Sz=n(ake,"A",{href:!0});var m7t=s(Sz);pLr=r(m7t,"FlaxBartForQuestionAnswering"),m7t.forEach(t),_Lr=r(ake," (BART model)"),ake.forEach(t),uLr=i(Le),IC=n(Le,"LI",{});var nke=s(IC);_ve=n(nke,"STRONG",{});var g7t=s(_ve);bLr=r(g7t,"bert"),g7t.forEach(t),vLr=r(nke," \u2014 "),Pz=n(nke,"A",{href:!0});var h7t=s(Pz);TLr=r(h7t,"FlaxBertForQuestionAnswering"),h7t.forEach(t),FLr=r(nke," (BERT model)"),nke.forEach(t),CLr=i(Le),DC=n(Le,"LI",{});var ske=s(DC);uve=n(ske,"STRONG",{});var p7t=s(uve);MLr=r(p7t,"big_bird"),p7t.forEach(t),ELr=r(ske," \u2014 "),$z=n(ske,"A",{href:!0});var _7t=s($z);yLr=r(_7t,"FlaxBigBirdForQuestionAnswering"),_7t.forEach(t),wLr=r(ske," (BigBird model)"),ske.forEach(t),ALr=i(Le),NC=n(Le,"LI",{});var lke=s(NC);bve=n(lke,"STRONG",{});var u7t=s(bve);LLr=r(u7t,"distilbert"),u7t.forEach(t),BLr=r(lke," \u2014 "),Iz=n(lke,"A",{href:!0});var b7t=s(Iz);xLr=r(b7t,"FlaxDistilBertForQuestionAnswering"),b7t.forEach(t),kLr=r(lke," (DistilBERT model)"),lke.forEach(t),RLr=i(Le),jC=n(Le,"LI",{});var ike=s(jC);vve=n(ike,"STRONG",{});var v7t=s(vve);SLr=r(v7t,"electra"),v7t.forEach(t),PLr=r(ike," \u2014 "),Dz=n(ike,"A",{href:!0});var T7t=s(Dz);$Lr=r(T7t,"FlaxElectraForQuestionAnswering"),T7t.forEach(t),ILr=r(ike," (ELECTRA model)"),ike.forEach(t),DLr=i(Le),qC=n(Le,"LI",{});var dke=s(qC);Tve=n(dke,"STRONG",{});var F7t=s(Tve);NLr=r(F7t,"mbart"),F7t.forEach(t),jLr=r(dke," \u2014 "),Nz=n(dke,"A",{href:!0});var C7t=s(Nz);qLr=r(C7t,"FlaxMBartForQuestionAnswering"),C7t.forEach(t),GLr=r(dke," (mBART model)"),dke.forEach(t),OLr=i(Le),GC=n(Le,"LI",{});var cke=s(GC);Fve=n(cke,"STRONG",{});var M7t=s(Fve);XLr=r(M7t,"roberta"),M7t.forEach(t),VLr=r(cke," \u2014 "),jz=n(cke,"A",{href:!0});var E7t=s(jz);zLr=r(E7t,"FlaxRobertaForQuestionAnswering"),E7t.forEach(t),WLr=r(cke," (RoBERTa model)"),cke.forEach(t),QLr=i(Le),OC=n(Le,"LI",{});var fke=s(OC);Cve=n(fke,"STRONG",{});var y7t=s(Cve);HLr=r(y7t,"roformer"),y7t.forEach(t),ULr=r(fke," \u2014 "),qz=n(fke,"A",{href:!0});var w7t=s(qz);JLr=r(w7t,"FlaxRoFormerForQuestionAnswering"),w7t.forEach(t),YLr=r(fke," (RoFormer model)"),fke.forEach(t),KLr=i(Le),XC=n(Le,"LI",{});var mke=s(XC);Mve=n(mke,"STRONG",{});var A7t=s(Mve);ZLr=r(A7t,"xlm-roberta"),A7t.forEach(t),e8r=r(mke," \u2014 "),Gz=n(mke,"A",{href:!0});var L7t=s(Gz);o8r=r(L7t,"FlaxXLMRobertaForQuestionAnswering"),L7t.forEach(t),r8r=r(mke," (XLM-RoBERTa model)"),mke.forEach(t),Le.forEach(t),t8r=i(Pa),Eve=n(Pa,"P",{});var B7t=s(Eve);a8r=r(B7t,"Examples:"),B7t.forEach(t),n8r=i(Pa),m(wL.$$.fragment,Pa),Pa.forEach(t),Ei.forEach(t),ESe=i(c),Tf=n(c,"H2",{class:!0});var $$e=s(Tf);VC=n($$e,"A",{id:!0,class:!0,href:!0});var x7t=s(VC);yve=n(x7t,"SPAN",{});var k7t=s(yve);m(AL.$$.fragment,k7t),k7t.forEach(t),x7t.forEach(t),s8r=i($$e),wve=n($$e,"SPAN",{});var R7t=s(wve);l8r=r(R7t,"FlaxAutoModelForTokenClassification"),R7t.forEach(t),$$e.forEach(t),ySe=i(c),jr=n(c,"DIV",{class:!0});var wi=s(jr);m(LL.$$.fragment,wi),i8r=i(wi),Ff=n(wi,"P",{});var zQ=s(Ff);d8r=r(zQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Ave=n(zQ,"CODE",{});var S7t=s(Ave);c8r=r(S7t,"from_pretrained()"),S7t.forEach(t),f8r=r(zQ,"class method or the "),Lve=n(zQ,"CODE",{});var P7t=s(Lve);m8r=r(P7t,"from_config()"),P7t.forEach(t),g8r=r(zQ,`class
method.`),zQ.forEach(t),h8r=i(wi),BL=n(wi,"P",{});var I$e=s(BL);p8r=r(I$e,"This class cannot be instantiated directly using "),Bve=n(I$e,"CODE",{});var $7t=s(Bve);_8r=r($7t,"__init__()"),$7t.forEach(t),u8r=r(I$e," (throws an error)."),I$e.forEach(t),b8r=i(wi),St=n(wi,"DIV",{class:!0});var Ai=s(St);m(xL.$$.fragment,Ai),v8r=i(Ai),xve=n(Ai,"P",{});var I7t=s(xve);T8r=r(I7t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),I7t.forEach(t),F8r=i(Ai),Cf=n(Ai,"P",{});var WQ=s(Cf);C8r=r(WQ,`Note:
Loading a model from its configuration file does `),kve=n(WQ,"STRONG",{});var D7t=s(kve);M8r=r(D7t,"not"),D7t.forEach(t),E8r=r(WQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Rve=n(WQ,"CODE",{});var N7t=s(Rve);y8r=r(N7t,"from_pretrained()"),N7t.forEach(t),w8r=r(WQ,"to load the model weights."),WQ.forEach(t),A8r=i(Ai),Sve=n(Ai,"P",{});var j7t=s(Sve);L8r=r(j7t,"Examples:"),j7t.forEach(t),B8r=i(Ai),m(kL.$$.fragment,Ai),Ai.forEach(t),x8r=i(wi),Po=n(wi,"DIV",{class:!0});var $a=s(Po);m(RL.$$.fragment,$a),k8r=i($a),Pve=n($a,"P",{});var q7t=s(Pve);R8r=r(q7t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),q7t.forEach(t),S8r=i($a),In=n($a,"P",{});var dE=s(In);P8r=r(dE,"The model class to instantiate is selected based on the "),$ve=n(dE,"CODE",{});var G7t=s($ve);$8r=r(G7t,"model_type"),G7t.forEach(t),I8r=r(dE,` property of the config object (either
passed as an argument or loaded from `),Ive=n(dE,"CODE",{});var O7t=s(Ive);D8r=r(O7t,"pretrained_model_name_or_path"),O7t.forEach(t),N8r=r(dE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dve=n(dE,"CODE",{});var X7t=s(Dve);j8r=r(X7t,"pretrained_model_name_or_path"),X7t.forEach(t),q8r=r(dE,":"),dE.forEach(t),G8r=i($a),Se=n($a,"UL",{});var Oo=s(Se);zC=n(Oo,"LI",{});var gke=s(zC);Nve=n(gke,"STRONG",{});var V7t=s(Nve);O8r=r(V7t,"albert"),V7t.forEach(t),X8r=r(gke," \u2014 "),Oz=n(gke,"A",{href:!0});var z7t=s(Oz);V8r=r(z7t,"FlaxAlbertForTokenClassification"),z7t.forEach(t),z8r=r(gke," (ALBERT model)"),gke.forEach(t),W8r=i(Oo),WC=n(Oo,"LI",{});var hke=s(WC);jve=n(hke,"STRONG",{});var W7t=s(jve);Q8r=r(W7t,"bert"),W7t.forEach(t),H8r=r(hke," \u2014 "),Xz=n(hke,"A",{href:!0});var Q7t=s(Xz);U8r=r(Q7t,"FlaxBertForTokenClassification"),Q7t.forEach(t),J8r=r(hke," (BERT model)"),hke.forEach(t),Y8r=i(Oo),QC=n(Oo,"LI",{});var pke=s(QC);qve=n(pke,"STRONG",{});var H7t=s(qve);K8r=r(H7t,"big_bird"),H7t.forEach(t),Z8r=r(pke," \u2014 "),Vz=n(pke,"A",{href:!0});var U7t=s(Vz);e9r=r(U7t,"FlaxBigBirdForTokenClassification"),U7t.forEach(t),o9r=r(pke," (BigBird model)"),pke.forEach(t),r9r=i(Oo),HC=n(Oo,"LI",{});var _ke=s(HC);Gve=n(_ke,"STRONG",{});var J7t=s(Gve);t9r=r(J7t,"distilbert"),J7t.forEach(t),a9r=r(_ke," \u2014 "),zz=n(_ke,"A",{href:!0});var Y7t=s(zz);n9r=r(Y7t,"FlaxDistilBertForTokenClassification"),Y7t.forEach(t),s9r=r(_ke," (DistilBERT model)"),_ke.forEach(t),l9r=i(Oo),UC=n(Oo,"LI",{});var uke=s(UC);Ove=n(uke,"STRONG",{});var K7t=s(Ove);i9r=r(K7t,"electra"),K7t.forEach(t),d9r=r(uke," \u2014 "),Wz=n(uke,"A",{href:!0});var Z7t=s(Wz);c9r=r(Z7t,"FlaxElectraForTokenClassification"),Z7t.forEach(t),f9r=r(uke," (ELECTRA model)"),uke.forEach(t),m9r=i(Oo),JC=n(Oo,"LI",{});var bke=s(JC);Xve=n(bke,"STRONG",{});var eFt=s(Xve);g9r=r(eFt,"roberta"),eFt.forEach(t),h9r=r(bke," \u2014 "),Qz=n(bke,"A",{href:!0});var oFt=s(Qz);p9r=r(oFt,"FlaxRobertaForTokenClassification"),oFt.forEach(t),_9r=r(bke," (RoBERTa model)"),bke.forEach(t),u9r=i(Oo),YC=n(Oo,"LI",{});var vke=s(YC);Vve=n(vke,"STRONG",{});var rFt=s(Vve);b9r=r(rFt,"roformer"),rFt.forEach(t),v9r=r(vke," \u2014 "),Hz=n(vke,"A",{href:!0});var tFt=s(Hz);T9r=r(tFt,"FlaxRoFormerForTokenClassification"),tFt.forEach(t),F9r=r(vke," (RoFormer model)"),vke.forEach(t),C9r=i(Oo),KC=n(Oo,"LI",{});var Tke=s(KC);zve=n(Tke,"STRONG",{});var aFt=s(zve);M9r=r(aFt,"xlm-roberta"),aFt.forEach(t),E9r=r(Tke," \u2014 "),Uz=n(Tke,"A",{href:!0});var nFt=s(Uz);y9r=r(nFt,"FlaxXLMRobertaForTokenClassification"),nFt.forEach(t),w9r=r(Tke," (XLM-RoBERTa model)"),Tke.forEach(t),Oo.forEach(t),A9r=i($a),Wve=n($a,"P",{});var sFt=s(Wve);L9r=r(sFt,"Examples:"),sFt.forEach(t),B9r=i($a),m(SL.$$.fragment,$a),$a.forEach(t),wi.forEach(t),wSe=i(c),Mf=n(c,"H2",{class:!0});var D$e=s(Mf);ZC=n(D$e,"A",{id:!0,class:!0,href:!0});var lFt=s(ZC);Qve=n(lFt,"SPAN",{});var iFt=s(Qve);m(PL.$$.fragment,iFt),iFt.forEach(t),lFt.forEach(t),x9r=i(D$e),Hve=n(D$e,"SPAN",{});var dFt=s(Hve);k9r=r(dFt,"FlaxAutoModelForMultipleChoice"),dFt.forEach(t),D$e.forEach(t),ASe=i(c),qr=n(c,"DIV",{class:!0});var Li=s(qr);m($L.$$.fragment,Li),R9r=i(Li),Ef=n(Li,"P",{});var QQ=s(Ef);S9r=r(QQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Uve=n(QQ,"CODE",{});var cFt=s(Uve);P9r=r(cFt,"from_pretrained()"),cFt.forEach(t),$9r=r(QQ,"class method or the "),Jve=n(QQ,"CODE",{});var fFt=s(Jve);I9r=r(fFt,"from_config()"),fFt.forEach(t),D9r=r(QQ,`class
method.`),QQ.forEach(t),N9r=i(Li),IL=n(Li,"P",{});var N$e=s(IL);j9r=r(N$e,"This class cannot be instantiated directly using "),Yve=n(N$e,"CODE",{});var mFt=s(Yve);q9r=r(mFt,"__init__()"),mFt.forEach(t),G9r=r(N$e," (throws an error)."),N$e.forEach(t),O9r=i(Li),Pt=n(Li,"DIV",{class:!0});var Bi=s(Pt);m(DL.$$.fragment,Bi),X9r=i(Bi),Kve=n(Bi,"P",{});var gFt=s(Kve);V9r=r(gFt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),gFt.forEach(t),z9r=i(Bi),yf=n(Bi,"P",{});var HQ=s(yf);W9r=r(HQ,`Note:
Loading a model from its configuration file does `),Zve=n(HQ,"STRONG",{});var hFt=s(Zve);Q9r=r(hFt,"not"),hFt.forEach(t),H9r=r(HQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),e6e=n(HQ,"CODE",{});var pFt=s(e6e);U9r=r(pFt,"from_pretrained()"),pFt.forEach(t),J9r=r(HQ,"to load the model weights."),HQ.forEach(t),Y9r=i(Bi),o6e=n(Bi,"P",{});var _Ft=s(o6e);K9r=r(_Ft,"Examples:"),_Ft.forEach(t),Z9r=i(Bi),m(NL.$$.fragment,Bi),Bi.forEach(t),eBr=i(Li),$o=n(Li,"DIV",{class:!0});var Ia=s($o);m(jL.$$.fragment,Ia),oBr=i(Ia),r6e=n(Ia,"P",{});var uFt=s(r6e);rBr=r(uFt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),uFt.forEach(t),tBr=i(Ia),Dn=n(Ia,"P",{});var cE=s(Dn);aBr=r(cE,"The model class to instantiate is selected based on the "),t6e=n(cE,"CODE",{});var bFt=s(t6e);nBr=r(bFt,"model_type"),bFt.forEach(t),sBr=r(cE,` property of the config object (either
passed as an argument or loaded from `),a6e=n(cE,"CODE",{});var vFt=s(a6e);lBr=r(vFt,"pretrained_model_name_or_path"),vFt.forEach(t),iBr=r(cE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n6e=n(cE,"CODE",{});var TFt=s(n6e);dBr=r(TFt,"pretrained_model_name_or_path"),TFt.forEach(t),cBr=r(cE,":"),cE.forEach(t),fBr=i(Ia),Pe=n(Ia,"UL",{});var Xo=s(Pe);eM=n(Xo,"LI",{});var Fke=s(eM);s6e=n(Fke,"STRONG",{});var FFt=s(s6e);mBr=r(FFt,"albert"),FFt.forEach(t),gBr=r(Fke," \u2014 "),Jz=n(Fke,"A",{href:!0});var CFt=s(Jz);hBr=r(CFt,"FlaxAlbertForMultipleChoice"),CFt.forEach(t),pBr=r(Fke," (ALBERT model)"),Fke.forEach(t),_Br=i(Xo),oM=n(Xo,"LI",{});var Cke=s(oM);l6e=n(Cke,"STRONG",{});var MFt=s(l6e);uBr=r(MFt,"bert"),MFt.forEach(t),bBr=r(Cke," \u2014 "),Yz=n(Cke,"A",{href:!0});var EFt=s(Yz);vBr=r(EFt,"FlaxBertForMultipleChoice"),EFt.forEach(t),TBr=r(Cke," (BERT model)"),Cke.forEach(t),FBr=i(Xo),rM=n(Xo,"LI",{});var Mke=s(rM);i6e=n(Mke,"STRONG",{});var yFt=s(i6e);CBr=r(yFt,"big_bird"),yFt.forEach(t),MBr=r(Mke," \u2014 "),Kz=n(Mke,"A",{href:!0});var wFt=s(Kz);EBr=r(wFt,"FlaxBigBirdForMultipleChoice"),wFt.forEach(t),yBr=r(Mke," (BigBird model)"),Mke.forEach(t),wBr=i(Xo),tM=n(Xo,"LI",{});var Eke=s(tM);d6e=n(Eke,"STRONG",{});var AFt=s(d6e);ABr=r(AFt,"distilbert"),AFt.forEach(t),LBr=r(Eke," \u2014 "),Zz=n(Eke,"A",{href:!0});var LFt=s(Zz);BBr=r(LFt,"FlaxDistilBertForMultipleChoice"),LFt.forEach(t),xBr=r(Eke," (DistilBERT model)"),Eke.forEach(t),kBr=i(Xo),aM=n(Xo,"LI",{});var yke=s(aM);c6e=n(yke,"STRONG",{});var BFt=s(c6e);RBr=r(BFt,"electra"),BFt.forEach(t),SBr=r(yke," \u2014 "),eW=n(yke,"A",{href:!0});var xFt=s(eW);PBr=r(xFt,"FlaxElectraForMultipleChoice"),xFt.forEach(t),$Br=r(yke," (ELECTRA model)"),yke.forEach(t),IBr=i(Xo),nM=n(Xo,"LI",{});var wke=s(nM);f6e=n(wke,"STRONG",{});var kFt=s(f6e);DBr=r(kFt,"roberta"),kFt.forEach(t),NBr=r(wke," \u2014 "),oW=n(wke,"A",{href:!0});var RFt=s(oW);jBr=r(RFt,"FlaxRobertaForMultipleChoice"),RFt.forEach(t),qBr=r(wke," (RoBERTa model)"),wke.forEach(t),GBr=i(Xo),sM=n(Xo,"LI",{});var Ake=s(sM);m6e=n(Ake,"STRONG",{});var SFt=s(m6e);OBr=r(SFt,"roformer"),SFt.forEach(t),XBr=r(Ake," \u2014 "),rW=n(Ake,"A",{href:!0});var PFt=s(rW);VBr=r(PFt,"FlaxRoFormerForMultipleChoice"),PFt.forEach(t),zBr=r(Ake," (RoFormer model)"),Ake.forEach(t),WBr=i(Xo),lM=n(Xo,"LI",{});var Lke=s(lM);g6e=n(Lke,"STRONG",{});var $Ft=s(g6e);QBr=r($Ft,"xlm-roberta"),$Ft.forEach(t),HBr=r(Lke," \u2014 "),tW=n(Lke,"A",{href:!0});var IFt=s(tW);UBr=r(IFt,"FlaxXLMRobertaForMultipleChoice"),IFt.forEach(t),JBr=r(Lke," (XLM-RoBERTa model)"),Lke.forEach(t),Xo.forEach(t),YBr=i(Ia),h6e=n(Ia,"P",{});var DFt=s(h6e);KBr=r(DFt,"Examples:"),DFt.forEach(t),ZBr=i(Ia),m(qL.$$.fragment,Ia),Ia.forEach(t),Li.forEach(t),LSe=i(c),wf=n(c,"H2",{class:!0});var j$e=s(wf);iM=n(j$e,"A",{id:!0,class:!0,href:!0});var NFt=s(iM);p6e=n(NFt,"SPAN",{});var jFt=s(p6e);m(GL.$$.fragment,jFt),jFt.forEach(t),NFt.forEach(t),exr=i(j$e),_6e=n(j$e,"SPAN",{});var qFt=s(_6e);oxr=r(qFt,"FlaxAutoModelForNextSentencePrediction"),qFt.forEach(t),j$e.forEach(t),BSe=i(c),Gr=n(c,"DIV",{class:!0});var xi=s(Gr);m(OL.$$.fragment,xi),rxr=i(xi),Af=n(xi,"P",{});var UQ=s(Af);txr=r(UQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),u6e=n(UQ,"CODE",{});var GFt=s(u6e);axr=r(GFt,"from_pretrained()"),GFt.forEach(t),nxr=r(UQ,"class method or the "),b6e=n(UQ,"CODE",{});var OFt=s(b6e);sxr=r(OFt,"from_config()"),OFt.forEach(t),lxr=r(UQ,`class
method.`),UQ.forEach(t),ixr=i(xi),XL=n(xi,"P",{});var q$e=s(XL);dxr=r(q$e,"This class cannot be instantiated directly using "),v6e=n(q$e,"CODE",{});var XFt=s(v6e);cxr=r(XFt,"__init__()"),XFt.forEach(t),fxr=r(q$e," (throws an error)."),q$e.forEach(t),mxr=i(xi),$t=n(xi,"DIV",{class:!0});var ki=s($t);m(VL.$$.fragment,ki),gxr=i(ki),T6e=n(ki,"P",{});var VFt=s(T6e);hxr=r(VFt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),VFt.forEach(t),pxr=i(ki),Lf=n(ki,"P",{});var JQ=s(Lf);_xr=r(JQ,`Note:
Loading a model from its configuration file does `),F6e=n(JQ,"STRONG",{});var zFt=s(F6e);uxr=r(zFt,"not"),zFt.forEach(t),bxr=r(JQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),C6e=n(JQ,"CODE",{});var WFt=s(C6e);vxr=r(WFt,"from_pretrained()"),WFt.forEach(t),Txr=r(JQ,"to load the model weights."),JQ.forEach(t),Fxr=i(ki),M6e=n(ki,"P",{});var QFt=s(M6e);Cxr=r(QFt,"Examples:"),QFt.forEach(t),Mxr=i(ki),m(zL.$$.fragment,ki),ki.forEach(t),Exr=i(xi),Io=n(xi,"DIV",{class:!0});var Da=s(Io);m(WL.$$.fragment,Da),yxr=i(Da),E6e=n(Da,"P",{});var HFt=s(E6e);wxr=r(HFt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),HFt.forEach(t),Axr=i(Da),Nn=n(Da,"P",{});var fE=s(Nn);Lxr=r(fE,"The model class to instantiate is selected based on the "),y6e=n(fE,"CODE",{});var UFt=s(y6e);Bxr=r(UFt,"model_type"),UFt.forEach(t),xxr=r(fE,` property of the config object (either
passed as an argument or loaded from `),w6e=n(fE,"CODE",{});var JFt=s(w6e);kxr=r(JFt,"pretrained_model_name_or_path"),JFt.forEach(t),Rxr=r(fE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A6e=n(fE,"CODE",{});var YFt=s(A6e);Sxr=r(YFt,"pretrained_model_name_or_path"),YFt.forEach(t),Pxr=r(fE,":"),fE.forEach(t),$xr=i(Da),L6e=n(Da,"UL",{});var KFt=s(L6e);dM=n(KFt,"LI",{});var Bke=s(dM);B6e=n(Bke,"STRONG",{});var ZFt=s(B6e);Ixr=r(ZFt,"bert"),ZFt.forEach(t),Dxr=r(Bke," \u2014 "),aW=n(Bke,"A",{href:!0});var eCt=s(aW);Nxr=r(eCt,"FlaxBertForNextSentencePrediction"),eCt.forEach(t),jxr=r(Bke," (BERT model)"),Bke.forEach(t),KFt.forEach(t),qxr=i(Da),x6e=n(Da,"P",{});var oCt=s(x6e);Gxr=r(oCt,"Examples:"),oCt.forEach(t),Oxr=i(Da),m(QL.$$.fragment,Da),Da.forEach(t),xi.forEach(t),xSe=i(c),Bf=n(c,"H2",{class:!0});var G$e=s(Bf);cM=n(G$e,"A",{id:!0,class:!0,href:!0});var rCt=s(cM);k6e=n(rCt,"SPAN",{});var tCt=s(k6e);m(HL.$$.fragment,tCt),tCt.forEach(t),rCt.forEach(t),Xxr=i(G$e),R6e=n(G$e,"SPAN",{});var aCt=s(R6e);Vxr=r(aCt,"FlaxAutoModelForImageClassification"),aCt.forEach(t),G$e.forEach(t),kSe=i(c),Or=n(c,"DIV",{class:!0});var Ri=s(Or);m(UL.$$.fragment,Ri),zxr=i(Ri),xf=n(Ri,"P",{});var YQ=s(xf);Wxr=r(YQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),S6e=n(YQ,"CODE",{});var nCt=s(S6e);Qxr=r(nCt,"from_pretrained()"),nCt.forEach(t),Hxr=r(YQ,"class method or the "),P6e=n(YQ,"CODE",{});var sCt=s(P6e);Uxr=r(sCt,"from_config()"),sCt.forEach(t),Jxr=r(YQ,`class
method.`),YQ.forEach(t),Yxr=i(Ri),JL=n(Ri,"P",{});var O$e=s(JL);Kxr=r(O$e,"This class cannot be instantiated directly using "),$6e=n(O$e,"CODE",{});var lCt=s($6e);Zxr=r(lCt,"__init__()"),lCt.forEach(t),ekr=r(O$e," (throws an error)."),O$e.forEach(t),okr=i(Ri),It=n(Ri,"DIV",{class:!0});var Si=s(It);m(YL.$$.fragment,Si),rkr=i(Si),I6e=n(Si,"P",{});var iCt=s(I6e);tkr=r(iCt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),iCt.forEach(t),akr=i(Si),kf=n(Si,"P",{});var KQ=s(kf);nkr=r(KQ,`Note:
Loading a model from its configuration file does `),D6e=n(KQ,"STRONG",{});var dCt=s(D6e);skr=r(dCt,"not"),dCt.forEach(t),lkr=r(KQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),N6e=n(KQ,"CODE",{});var cCt=s(N6e);ikr=r(cCt,"from_pretrained()"),cCt.forEach(t),dkr=r(KQ,"to load the model weights."),KQ.forEach(t),ckr=i(Si),j6e=n(Si,"P",{});var fCt=s(j6e);fkr=r(fCt,"Examples:"),fCt.forEach(t),mkr=i(Si),m(KL.$$.fragment,Si),Si.forEach(t),gkr=i(Ri),Do=n(Ri,"DIV",{class:!0});var Na=s(Do);m(ZL.$$.fragment,Na),hkr=i(Na),q6e=n(Na,"P",{});var mCt=s(q6e);pkr=r(mCt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),mCt.forEach(t),_kr=i(Na),jn=n(Na,"P",{});var mE=s(jn);ukr=r(mE,"The model class to instantiate is selected based on the "),G6e=n(mE,"CODE",{});var gCt=s(G6e);bkr=r(gCt,"model_type"),gCt.forEach(t),vkr=r(mE,` property of the config object (either
passed as an argument or loaded from `),O6e=n(mE,"CODE",{});var hCt=s(O6e);Tkr=r(hCt,"pretrained_model_name_or_path"),hCt.forEach(t),Fkr=r(mE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X6e=n(mE,"CODE",{});var pCt=s(X6e);Ckr=r(pCt,"pretrained_model_name_or_path"),pCt.forEach(t),Mkr=r(mE,":"),mE.forEach(t),Ekr=i(Na),e8=n(Na,"UL",{});var X$e=s(e8);fM=n(X$e,"LI",{});var xke=s(fM);V6e=n(xke,"STRONG",{});var _Ct=s(V6e);ykr=r(_Ct,"beit"),_Ct.forEach(t),wkr=r(xke," \u2014 "),nW=n(xke,"A",{href:!0});var uCt=s(nW);Akr=r(uCt,"FlaxBeitForImageClassification"),uCt.forEach(t),Lkr=r(xke," (BEiT model)"),xke.forEach(t),Bkr=i(X$e),mM=n(X$e,"LI",{});var kke=s(mM);z6e=n(kke,"STRONG",{});var bCt=s(z6e);xkr=r(bCt,"vit"),bCt.forEach(t),kkr=r(kke," \u2014 "),sW=n(kke,"A",{href:!0});var vCt=s(sW);Rkr=r(vCt,"FlaxViTForImageClassification"),vCt.forEach(t),Skr=r(kke," (ViT model)"),kke.forEach(t),X$e.forEach(t),Pkr=i(Na),W6e=n(Na,"P",{});var TCt=s(W6e);$kr=r(TCt,"Examples:"),TCt.forEach(t),Ikr=i(Na),m(o8.$$.fragment,Na),Na.forEach(t),Ri.forEach(t),RSe=i(c),Rf=n(c,"H2",{class:!0});var V$e=s(Rf);gM=n(V$e,"A",{id:!0,class:!0,href:!0});var FCt=s(gM);Q6e=n(FCt,"SPAN",{});var CCt=s(Q6e);m(r8.$$.fragment,CCt),CCt.forEach(t),FCt.forEach(t),Dkr=i(V$e),H6e=n(V$e,"SPAN",{});var MCt=s(H6e);Nkr=r(MCt,"FlaxAutoModelForVision2Seq"),MCt.forEach(t),V$e.forEach(t),SSe=i(c),Xr=n(c,"DIV",{class:!0});var Pi=s(Xr);m(t8.$$.fragment,Pi),jkr=i(Pi),Sf=n(Pi,"P",{});var ZQ=s(Sf);qkr=r(ZQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),U6e=n(ZQ,"CODE",{});var ECt=s(U6e);Gkr=r(ECt,"from_pretrained()"),ECt.forEach(t),Okr=r(ZQ,"class method or the "),J6e=n(ZQ,"CODE",{});var yCt=s(J6e);Xkr=r(yCt,"from_config()"),yCt.forEach(t),Vkr=r(ZQ,`class
method.`),ZQ.forEach(t),zkr=i(Pi),a8=n(Pi,"P",{});var z$e=s(a8);Wkr=r(z$e,"This class cannot be instantiated directly using "),Y6e=n(z$e,"CODE",{});var wCt=s(Y6e);Qkr=r(wCt,"__init__()"),wCt.forEach(t),Hkr=r(z$e," (throws an error)."),z$e.forEach(t),Ukr=i(Pi),Dt=n(Pi,"DIV",{class:!0});var $i=s(Dt);m(n8.$$.fragment,$i),Jkr=i($i),K6e=n($i,"P",{});var ACt=s(K6e);Ykr=r(ACt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),ACt.forEach(t),Kkr=i($i),Pf=n($i,"P",{});var eH=s(Pf);Zkr=r(eH,`Note:
Loading a model from its configuration file does `),Z6e=n(eH,"STRONG",{});var LCt=s(Z6e);eRr=r(LCt,"not"),LCt.forEach(t),oRr=r(eH,` load the model weights. It only affects the
model\u2019s configuration. Use `),eTe=n(eH,"CODE",{});var BCt=s(eTe);rRr=r(BCt,"from_pretrained()"),BCt.forEach(t),tRr=r(eH,"to load the model weights."),eH.forEach(t),aRr=i($i),oTe=n($i,"P",{});var xCt=s(oTe);nRr=r(xCt,"Examples:"),xCt.forEach(t),sRr=i($i),m(s8.$$.fragment,$i),$i.forEach(t),lRr=i(Pi),No=n(Pi,"DIV",{class:!0});var ja=s(No);m(l8.$$.fragment,ja),iRr=i(ja),rTe=n(ja,"P",{});var kCt=s(rTe);dRr=r(kCt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),kCt.forEach(t),cRr=i(ja),qn=n(ja,"P",{});var gE=s(qn);fRr=r(gE,"The model class to instantiate is selected based on the "),tTe=n(gE,"CODE",{});var RCt=s(tTe);mRr=r(RCt,"model_type"),RCt.forEach(t),gRr=r(gE,` property of the config object (either
passed as an argument or loaded from `),aTe=n(gE,"CODE",{});var SCt=s(aTe);hRr=r(SCt,"pretrained_model_name_or_path"),SCt.forEach(t),pRr=r(gE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nTe=n(gE,"CODE",{});var PCt=s(nTe);_Rr=r(PCt,"pretrained_model_name_or_path"),PCt.forEach(t),uRr=r(gE,":"),gE.forEach(t),bRr=i(ja),sTe=n(ja,"UL",{});var $Ct=s(sTe);hM=n($Ct,"LI",{});var Rke=s(hM);lTe=n(Rke,"STRONG",{});var ICt=s(lTe);vRr=r(ICt,"vision-encoder-decoder"),ICt.forEach(t),TRr=r(Rke," \u2014 "),lW=n(Rke,"A",{href:!0});var DCt=s(lW);FRr=r(DCt,"FlaxVisionEncoderDecoderModel"),DCt.forEach(t),CRr=r(Rke," (Vision Encoder decoder model)"),Rke.forEach(t),$Ct.forEach(t),MRr=i(ja),iTe=n(ja,"P",{});var NCt=s(iTe);ERr=r(NCt,"Examples:"),NCt.forEach(t),yRr=i(ja),m(i8.$$.fragment,ja),ja.forEach(t),Pi.forEach(t),this.h()},h(){d(Z,"name","hf:doc:metadata"),d(Z,"content",JSON.stringify(HCt)),d(Ee,"id","auto-classes"),d(Ee,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ee,"href","#auto-classes"),d(de,"class","relative group"),d(Gn,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.AutoConfig"),d(Xn,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.AutoModel"),d(Vn,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.AutoTokenizer"),d(Oi,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertModel"),d(Gf,"id","extending-the-auto-classes"),d(Gf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Gf,"href","#extending-the-auto-classes"),d(Xi,"class","relative group"),d(Xf,"id","transformers.AutoConfig"),d(Xf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Xf,"href","#transformers.AutoConfig"),d(Vi,"class","relative group"),d(m9,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),d(g9,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig"),d(h9,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartConfig"),d(p9,"href","/docs/transformers/pr_16473/en/model_doc/beit#transformers.BeitConfig"),d(_9,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig"),d(u9,"href","/docs/transformers/pr_16473/en/model_doc/bert-generation#transformers.BertGenerationConfig"),d(b9,"href","/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdConfig"),d(v9,"href","/docs/transformers/pr_16473/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),d(T9,"href","/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.BlenderbotConfig"),d(F9,"href","/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),d(C9,"href","/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertConfig"),d(M9,"href","/docs/transformers/pr_16473/en/model_doc/canine#transformers.CanineConfig"),d(E9,"href","/docs/transformers/pr_16473/en/model_doc/clip#transformers.CLIPConfig"),d(y9,"href","/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertConfig"),d(w9,"href","/docs/transformers/pr_16473/en/model_doc/convnext#transformers.ConvNextConfig"),d(A9,"href","/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.CTRLConfig"),d(L9,"href","/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),d(B9,"href","/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextConfig"),d(x9,"href","/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaConfig"),d(k9,"href","/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2Config"),d(R9,"href","/docs/transformers/pr_16473/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),d(S9,"href","/docs/transformers/pr_16473/en/model_doc/deit#transformers.DeiTConfig"),d(P9,"href","/docs/transformers/pr_16473/en/model_doc/detr#transformers.DetrConfig"),d($9,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig"),d(I9,"href","/docs/transformers/pr_16473/en/model_doc/dpr#transformers.DPRConfig"),d(D9,"href","/docs/transformers/pr_16473/en/model_doc/dpt#transformers.DPTConfig"),d(N9,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig"),d(j9,"href","/docs/transformers/pr_16473/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),d(q9,"href","/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertConfig"),d(G9,"href","/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetConfig"),d(O9,"href","/docs/transformers/pr_16473/en/model_doc/fsmt#transformers.FSMTConfig"),d(X9,"href","/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelConfig"),d(V9,"href","/docs/transformers/pr_16473/en/model_doc/glpn#transformers.GLPNConfig"),d(z9,"href","/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2Config"),d(W9,"href","/docs/transformers/pr_16473/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),d(Q9,"href","/docs/transformers/pr_16473/en/model_doc/gptj#transformers.GPTJConfig"),d(H9,"href","/docs/transformers/pr_16473/en/model_doc/hubert#transformers.HubertConfig"),d(U9,"href","/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertConfig"),d(J9,"href","/docs/transformers/pr_16473/en/model_doc/imagegpt#transformers.ImageGPTConfig"),d(Y9,"href","/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMConfig"),d(K9,"href","/docs/transformers/pr_16473/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),d(Z9,"href","/docs/transformers/pr_16473/en/model_doc/led#transformers.LEDConfig"),d(eB,"href","/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerConfig"),d(oB,"href","/docs/transformers/pr_16473/en/model_doc/luke#transformers.LukeConfig"),d(rB,"href","/docs/transformers/pr_16473/en/model_doc/lxmert#transformers.LxmertConfig"),d(tB,"href","/docs/transformers/pr_16473/en/model_doc/m2m_100#transformers.M2M100Config"),d(aB,"href","/docs/transformers/pr_16473/en/model_doc/marian#transformers.MarianConfig"),d(nB,"href","/docs/transformers/pr_16473/en/model_doc/maskformer#transformers.MaskFormerConfig"),d(sB,"href","/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartConfig"),d(lB,"href","/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),d(iB,"href","/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertConfig"),d(dB,"href","/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetConfig"),d(cB,"href","/docs/transformers/pr_16473/en/model_doc/mt5#transformers.MT5Config"),d(fB,"href","/docs/transformers/pr_16473/en/model_doc/nystromformer#transformers.NystromformerConfig"),d(mB,"href","/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),d(gB,"href","/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.PegasusConfig"),d(hB,"href","/docs/transformers/pr_16473/en/model_doc/perceiver#transformers.PerceiverConfig"),d(pB,"href","/docs/transformers/pr_16473/en/model_doc/plbart#transformers.PLBartConfig"),d(_B,"href","/docs/transformers/pr_16473/en/model_doc/poolformer#transformers.PoolFormerConfig"),d(uB,"href","/docs/transformers/pr_16473/en/model_doc/prophetnet#transformers.ProphetNetConfig"),d(bB,"href","/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertConfig"),d(vB,"href","/docs/transformers/pr_16473/en/model_doc/rag#transformers.RagConfig"),d(TB,"href","/docs/transformers/pr_16473/en/model_doc/realm#transformers.RealmConfig"),d(FB,"href","/docs/transformers/pr_16473/en/model_doc/reformer#transformers.ReformerConfig"),d(CB,"href","/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertConfig"),d(MB,"href","/docs/transformers/pr_16473/en/model_doc/resnet#transformers.ResNetConfig"),d(EB,"href","/docs/transformers/pr_16473/en/model_doc/retribert#transformers.RetriBertConfig"),d(yB,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig"),d(wB,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig"),d(AB,"href","/docs/transformers/pr_16473/en/model_doc/segformer#transformers.SegformerConfig"),d(LB,"href","/docs/transformers/pr_16473/en/model_doc/sew#transformers.SEWConfig"),d(BB,"href","/docs/transformers/pr_16473/en/model_doc/sew-d#transformers.SEWDConfig"),d(xB,"href","/docs/transformers/pr_16473/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),d(kB,"href","/docs/transformers/pr_16473/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),d(RB,"href","/docs/transformers/pr_16473/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),d(SB,"href","/docs/transformers/pr_16473/en/model_doc/splinter#transformers.SplinterConfig"),d(PB,"href","/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),d($B,"href","/docs/transformers/pr_16473/en/model_doc/swin#transformers.SwinConfig"),d(IB,"href","/docs/transformers/pr_16473/en/model_doc/t5#transformers.T5Config"),d(DB,"href","/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasConfig"),d(NB,"href","/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),d(jB,"href","/docs/transformers/pr_16473/en/model_doc/trocr#transformers.TrOCRConfig"),d(qB,"href","/docs/transformers/pr_16473/en/model_doc/unispeech#transformers.UniSpeechConfig"),d(GB,"href","/docs/transformers/pr_16473/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),d(OB,"href","/docs/transformers/pr_16473/en/model_doc/van#transformers.VanConfig"),d(XB,"href","/docs/transformers/pr_16473/en/model_doc/vilt#transformers.ViltConfig"),d(VB,"href","/docs/transformers/pr_16473/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),d(zB,"href","/docs/transformers/pr_16473/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),d(WB,"href","/docs/transformers/pr_16473/en/model_doc/visual_bert#transformers.VisualBertConfig"),d(QB,"href","/docs/transformers/pr_16473/en/model_doc/vit#transformers.ViTConfig"),d(HB,"href","/docs/transformers/pr_16473/en/model_doc/vit_mae#transformers.ViTMAEConfig"),d(UB,"href","/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),d(JB,"href","/docs/transformers/pr_16473/en/model_doc/wavlm#transformers.WavLMConfig"),d(YB,"href","/docs/transformers/pr_16473/en/model_doc/xglm#transformers.XGLMConfig"),d(KB,"href","/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMConfig"),d(ZB,"href","/docs/transformers/pr_16473/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),d(ex,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),d(ox,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),d(rx,"href","/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetConfig"),d(tx,"href","/docs/transformers/pr_16473/en/model_doc/yoso#transformers.YosoConfig"),d(mo,"class","docstring"),d($g,"class","docstring"),d(Wo,"class","docstring"),d(Ig,"id","transformers.AutoTokenizer"),d(Ig,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ig,"href","#transformers.AutoTokenizer"),d(Wi,"class","relative group"),d(ax,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),d(nx,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertTokenizer"),d(sx,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(lx,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartTokenizer"),d(ix,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartTokenizerFast"),d(dx,"href","/docs/transformers/pr_16473/en/model_doc/barthez#transformers.BarthezTokenizer"),d(cx,"href","/docs/transformers/pr_16473/en/model_doc/barthez#transformers.BarthezTokenizerFast"),d(fx,"href","/docs/transformers/pr_16473/en/model_doc/bartpho#transformers.BartphoTokenizer"),d(mx,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertTokenizer"),d(gx,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertTokenizerFast"),d(hx,"href","/docs/transformers/pr_16473/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),d(px,"href","/docs/transformers/pr_16473/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),d(_x,"href","/docs/transformers/pr_16473/en/model_doc/bertweet#transformers.BertweetTokenizer"),d(ux,"href","/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdTokenizer"),d(bx,"href","/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),d(vx,"href","/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(Tx,"href","/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(Fx,"href","/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),d(Cx,"href","/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),d(Mx,"href","/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),d(Ex,"href","/docs/transformers/pr_16473/en/model_doc/byt5#transformers.ByT5Tokenizer"),d(yx,"href","/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertTokenizer"),d(wx,"href","/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertTokenizerFast"),d(Ax,"href","/docs/transformers/pr_16473/en/model_doc/canine#transformers.CanineTokenizer"),d(Lx,"href","/docs/transformers/pr_16473/en/model_doc/clip#transformers.CLIPTokenizer"),d(Bx,"href","/docs/transformers/pr_16473/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(xx,"href","/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertTokenizer"),d(kx,"href","/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),d(Rx,"href","/docs/transformers/pr_16473/en/model_doc/cpm#transformers.CpmTokenizer"),d(Sx,"href","/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.CTRLTokenizer"),d(Px,"href","/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaTokenizer"),d($x,"href","/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaTokenizerFast"),d(Ix,"href","/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),d(Dx,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertTokenizer"),d(Nx,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),d(jx,"href","/docs/transformers/pr_16473/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),d(qx,"href","/docs/transformers/pr_16473/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),d(Gx,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraTokenizer"),d(Ox,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraTokenizerFast"),d(Xx,"href","/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertTokenizer"),d(Vx,"href","/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetTokenizer"),d(zx,"href","/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetTokenizerFast"),d(Wx,"href","/docs/transformers/pr_16473/en/model_doc/fsmt#transformers.FSMTTokenizer"),d(Qx,"href","/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelTokenizer"),d(Hx,"href","/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelTokenizerFast"),d(Ux,"href","/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(Jx,"href","/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(Yx,"href","/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(Kx,"href","/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(Zx,"href","/docs/transformers/pr_16473/en/model_doc/herbert#transformers.HerbertTokenizer"),d(ek,"href","/docs/transformers/pr_16473/en/model_doc/herbert#transformers.HerbertTokenizerFast"),d(ok,"href","/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(rk,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaTokenizer"),d(tk,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(ak,"href","/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),d(nk,"href","/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),d(sk,"href","/docs/transformers/pr_16473/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),d(lk,"href","/docs/transformers/pr_16473/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),d(ik,"href","/docs/transformers/pr_16473/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),d(dk,"href","/docs/transformers/pr_16473/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),d(ck,"href","/docs/transformers/pr_16473/en/model_doc/led#transformers.LEDTokenizer"),d(fk,"href","/docs/transformers/pr_16473/en/model_doc/led#transformers.LEDTokenizerFast"),d(mk,"href","/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerTokenizer"),d(gk,"href","/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerTokenizerFast"),d(hk,"href","/docs/transformers/pr_16473/en/model_doc/luke#transformers.LukeTokenizer"),d(pk,"href","/docs/transformers/pr_16473/en/model_doc/lxmert#transformers.LxmertTokenizer"),d(_k,"href","/docs/transformers/pr_16473/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),d(uk,"href","/docs/transformers/pr_16473/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),d(bk,"href","/docs/transformers/pr_16473/en/model_doc/marian#transformers.MarianTokenizer"),d(vk,"href","/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartTokenizer"),d(Tk,"href","/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartTokenizerFast"),d(Fk,"href","/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBart50Tokenizer"),d(Ck,"href","/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBart50TokenizerFast"),d(Mk,"href","/docs/transformers/pr_16473/en/model_doc/mluke#transformers.MLukeTokenizer"),d(Ek,"href","/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),d(yk,"href","/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),d(wk,"href","/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetTokenizer"),d(Ak,"href","/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),d(Lk,"href","/docs/transformers/pr_16473/en/model_doc/mt5#transformers.T5Tokenizer"),d(Bk,"href","/docs/transformers/pr_16473/en/model_doc/mt5#transformers.T5TokenizerFast"),d(xk,"href","/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),d(kk,"href","/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),d(Rk,"href","/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(Sk,"href","/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(Pk,"href","/docs/transformers/pr_16473/en/model_doc/perceiver#transformers.PerceiverTokenizer"),d($k,"href","/docs/transformers/pr_16473/en/model_doc/phobert#transformers.PhobertTokenizer"),d(Ik,"href","/docs/transformers/pr_16473/en/model_doc/plbart#transformers.PLBartTokenizer"),d(Dk,"href","/docs/transformers/pr_16473/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),d(Nk,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertTokenizer"),d(jk,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertTokenizerFast"),d(qk,"href","/docs/transformers/pr_16473/en/model_doc/rag#transformers.RagTokenizer"),d(Gk,"href","/docs/transformers/pr_16473/en/model_doc/realm#transformers.RealmTokenizer"),d(Ok,"href","/docs/transformers/pr_16473/en/model_doc/realm#transformers.RealmTokenizerFast"),d(Xk,"href","/docs/transformers/pr_16473/en/model_doc/reformer#transformers.ReformerTokenizer"),d(Vk,"href","/docs/transformers/pr_16473/en/model_doc/reformer#transformers.ReformerTokenizerFast"),d(zk,"href","/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertTokenizer"),d(Wk,"href","/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertTokenizerFast"),d(Qk,"href","/docs/transformers/pr_16473/en/model_doc/retribert#transformers.RetriBertTokenizer"),d(Hk,"href","/docs/transformers/pr_16473/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),d(Uk,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaTokenizer"),d(Jk,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(Yk,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerTokenizer"),d(Kk,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),d(Zk,"href","/docs/transformers/pr_16473/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),d(eR,"href","/docs/transformers/pr_16473/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),d(oR,"href","/docs/transformers/pr_16473/en/model_doc/splinter#transformers.SplinterTokenizer"),d(rR,"href","/docs/transformers/pr_16473/en/model_doc/splinter#transformers.SplinterTokenizerFast"),d(tR,"href","/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),d(aR,"href","/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),d(nR,"href","/docs/transformers/pr_16473/en/model_doc/mt5#transformers.T5Tokenizer"),d(sR,"href","/docs/transformers/pr_16473/en/model_doc/mt5#transformers.T5TokenizerFast"),d(lR,"href","/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasTokenizer"),d(iR,"href","/docs/transformers/pr_16473/en/model_doc/tapex#transformers.TapexTokenizer"),d(dR,"href","/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),d(cR,"href","/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(fR,"href","/docs/transformers/pr_16473/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),d(mR,"href","/docs/transformers/pr_16473/en/model_doc/xglm#transformers.XGLMTokenizer"),d(gR,"href","/docs/transformers/pr_16473/en/model_doc/xglm#transformers.XGLMTokenizerFast"),d(hR,"href","/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMTokenizer"),d(pR,"href","/docs/transformers/pr_16473/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),d(_R,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),d(uR,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),d(bR,"href","/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetTokenizer"),d(vR,"href","/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),d(go,"class","docstring"),d(gh,"class","docstring"),d(Qo,"class","docstring"),d(hh,"id","transformers.AutoFeatureExtractor"),d(hh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(hh,"href","#transformers.AutoFeatureExtractor"),d(Qi,"class","relative group"),d(TR,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),d(FR,"href","/docs/transformers/pr_16473/en/model_doc/beit#transformers.BeitFeatureExtractor"),d(CR,"href","/docs/transformers/pr_16473/en/model_doc/clip#transformers.CLIPFeatureExtractor"),d(MR,"href","/docs/transformers/pr_16473/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(ER,"href","/docs/transformers/pr_16473/en/model_doc/deit#transformers.DeiTFeatureExtractor"),d(yR,"href","/docs/transformers/pr_16473/en/model_doc/detr#transformers.DetrFeatureExtractor"),d(wR,"href","/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(AR,"href","/docs/transformers/pr_16473/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),d(LR,"href","/docs/transformers/pr_16473/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),d(BR,"href","/docs/transformers/pr_16473/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),d(xR,"href","/docs/transformers/pr_16473/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),d(kR,"href","/docs/transformers/pr_16473/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(RR,"href","/docs/transformers/pr_16473/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),d(SR,"href","/docs/transformers/pr_16473/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),d(PR,"href","/docs/transformers/pr_16473/en/model_doc/vit#transformers.ViTFeatureExtractor"),d($R,"href","/docs/transformers/pr_16473/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(IR,"href","/docs/transformers/pr_16473/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(DR,"href","/docs/transformers/pr_16473/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(NR,"href","/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d($e,"class","docstring"),d(Ph,"class","docstring"),d(Ho,"class","docstring"),d($h,"id","transformers.AutoProcessor"),d($h,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d($h,"href","#transformers.AutoProcessor"),d(Hi,"class","relative group"),d(jR,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),d(qR,"href","/docs/transformers/pr_16473/en/model_doc/clip#transformers.CLIPProcessor"),d(GR,"href","/docs/transformers/pr_16473/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),d(OR,"href","/docs/transformers/pr_16473/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),d(XR,"href","/docs/transformers/pr_16473/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),d(VR,"href","/docs/transformers/pr_16473/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),d(zR,"href","/docs/transformers/pr_16473/en/model_doc/trocr#transformers.TrOCRProcessor"),d(WR,"href","/docs/transformers/pr_16473/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),d(QR,"href","/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(Ie,"class","docstring"),d(zh,"class","docstring"),d(Uo,"class","docstring"),d(Wh,"id","transformers.AutoModel"),d(Wh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Wh,"href","#transformers.AutoModel"),d(Ji,"class","relative group"),d(Vr,"class","docstring"),d(HR,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertModel"),d(UR,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartModel"),d(JR,"href","/docs/transformers/pr_16473/en/model_doc/beit#transformers.BeitModel"),d(YR,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertModel"),d(KR,"href","/docs/transformers/pr_16473/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),d(ZR,"href","/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdModel"),d(eS,"href","/docs/transformers/pr_16473/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),d(oS,"href","/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.BlenderbotModel"),d(rS,"href","/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),d(tS,"href","/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertModel"),d(aS,"href","/docs/transformers/pr_16473/en/model_doc/canine#transformers.CanineModel"),d(nS,"href","/docs/transformers/pr_16473/en/model_doc/clip#transformers.CLIPModel"),d(sS,"href","/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertModel"),d(lS,"href","/docs/transformers/pr_16473/en/model_doc/convnext#transformers.ConvNextModel"),d(iS,"href","/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.CTRLModel"),d(dS,"href","/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecAudioModel"),d(cS,"href","/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextModel"),d(fS,"href","/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaModel"),d(mS,"href","/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2Model"),d(gS,"href","/docs/transformers/pr_16473/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),d(hS,"href","/docs/transformers/pr_16473/en/model_doc/deit#transformers.DeiTModel"),d(pS,"href","/docs/transformers/pr_16473/en/model_doc/detr#transformers.DetrModel"),d(_S,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertModel"),d(uS,"href","/docs/transformers/pr_16473/en/model_doc/dpr#transformers.DPRQuestionEncoder"),d(bS,"href","/docs/transformers/pr_16473/en/model_doc/dpt#transformers.DPTModel"),d(vS,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraModel"),d(TS,"href","/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertModel"),d(FS,"href","/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetModel"),d(CS,"href","/docs/transformers/pr_16473/en/model_doc/fsmt#transformers.FSMTModel"),d(MS,"href","/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelModel"),d(ES,"href","/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelBaseModel"),d(yS,"href","/docs/transformers/pr_16473/en/model_doc/glpn#transformers.GLPNModel"),d(wS,"href","/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2Model"),d(AS,"href","/docs/transformers/pr_16473/en/model_doc/gpt_neo#transformers.GPTNeoModel"),d(LS,"href","/docs/transformers/pr_16473/en/model_doc/gptj#transformers.GPTJModel"),d(BS,"href","/docs/transformers/pr_16473/en/model_doc/hubert#transformers.HubertModel"),d(xS,"href","/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertModel"),d(kS,"href","/docs/transformers/pr_16473/en/model_doc/imagegpt#transformers.ImageGPTModel"),d(RS,"href","/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMModel"),d(SS,"href","/docs/transformers/pr_16473/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),d(PS,"href","/docs/transformers/pr_16473/en/model_doc/led#transformers.LEDModel"),d($S,"href","/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerModel"),d(IS,"href","/docs/transformers/pr_16473/en/model_doc/luke#transformers.LukeModel"),d(DS,"href","/docs/transformers/pr_16473/en/model_doc/lxmert#transformers.LxmertModel"),d(NS,"href","/docs/transformers/pr_16473/en/model_doc/m2m_100#transformers.M2M100Model"),d(jS,"href","/docs/transformers/pr_16473/en/model_doc/marian#transformers.MarianModel"),d(qS,"href","/docs/transformers/pr_16473/en/model_doc/maskformer#transformers.MaskFormerModel"),d(GS,"href","/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartModel"),d(OS,"href","/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertModel"),d(XS,"href","/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertModel"),d(VS,"href","/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetModel"),d(zS,"href","/docs/transformers/pr_16473/en/model_doc/mt5#transformers.MT5Model"),d(WS,"href","/docs/transformers/pr_16473/en/model_doc/nystromformer#transformers.NystromformerModel"),d(QS,"href","/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),d(HS,"href","/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.PegasusModel"),d(US,"href","/docs/transformers/pr_16473/en/model_doc/perceiver#transformers.PerceiverModel"),d(JS,"href","/docs/transformers/pr_16473/en/model_doc/plbart#transformers.PLBartModel"),d(YS,"href","/docs/transformers/pr_16473/en/model_doc/poolformer#transformers.PoolFormerModel"),d(KS,"href","/docs/transformers/pr_16473/en/model_doc/prophetnet#transformers.ProphetNetModel"),d(ZS,"href","/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertModel"),d(eP,"href","/docs/transformers/pr_16473/en/model_doc/reformer#transformers.ReformerModel"),d(oP,"href","/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertModel"),d(rP,"href","/docs/transformers/pr_16473/en/model_doc/resnet#transformers.ResNetModel"),d(tP,"href","/docs/transformers/pr_16473/en/model_doc/retribert#transformers.RetriBertModel"),d(aP,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaModel"),d(nP,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerModel"),d(sP,"href","/docs/transformers/pr_16473/en/model_doc/segformer#transformers.SegformerModel"),d(lP,"href","/docs/transformers/pr_16473/en/model_doc/sew#transformers.SEWModel"),d(iP,"href","/docs/transformers/pr_16473/en/model_doc/sew-d#transformers.SEWDModel"),d(dP,"href","/docs/transformers/pr_16473/en/model_doc/speech_to_text#transformers.Speech2TextModel"),d(cP,"href","/docs/transformers/pr_16473/en/model_doc/splinter#transformers.SplinterModel"),d(fP,"href","/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertModel"),d(mP,"href","/docs/transformers/pr_16473/en/model_doc/swin#transformers.SwinModel"),d(gP,"href","/docs/transformers/pr_16473/en/model_doc/t5#transformers.T5Model"),d(hP,"href","/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasModel"),d(pP,"href","/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TransfoXLModel"),d(_P,"href","/docs/transformers/pr_16473/en/model_doc/unispeech#transformers.UniSpeechModel"),d(uP,"href","/docs/transformers/pr_16473/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),d(bP,"href","/docs/transformers/pr_16473/en/model_doc/van#transformers.VanModel"),d(vP,"href","/docs/transformers/pr_16473/en/model_doc/vilt#transformers.ViltModel"),d(TP,"href","/docs/transformers/pr_16473/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),d(FP,"href","/docs/transformers/pr_16473/en/model_doc/visual_bert#transformers.VisualBertModel"),d(CP,"href","/docs/transformers/pr_16473/en/model_doc/vit#transformers.ViTModel"),d(MP,"href","/docs/transformers/pr_16473/en/model_doc/vit_mae#transformers.ViTMAEModel"),d(EP,"href","/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),d(yP,"href","/docs/transformers/pr_16473/en/model_doc/wavlm#transformers.WavLMModel"),d(wP,"href","/docs/transformers/pr_16473/en/model_doc/xglm#transformers.XGLMModel"),d(AP,"href","/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMModel"),d(LP,"href","/docs/transformers/pr_16473/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),d(BP,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),d(xP,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),d(kP,"href","/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetModel"),d(RP,"href","/docs/transformers/pr_16473/en/model_doc/yoso#transformers.YosoModel"),d(De,"class","docstring"),d(Jo,"class","docstring"),d(k_,"id","transformers.AutoModelForPreTraining"),d(k_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(k_,"href","#transformers.AutoModelForPreTraining"),d(Zi,"class","relative group"),d(zr,"class","docstring"),d(SP,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertForPreTraining"),d(PP,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartForConditionalGeneration"),d($P,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertForPreTraining"),d(IP,"href","/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),d(DP,"href","/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(NP,"href","/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(jP,"href","/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(qP,"href","/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(GP,"href","/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(OP,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(XP,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraForPreTraining"),d(VP,"href","/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(zP,"href","/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetForPreTraining"),d(WP,"href","/docs/transformers/pr_16473/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(QP,"href","/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelForPreTraining"),d(HP,"href","/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(UP,"href","/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(JP,"href","/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(YP,"href","/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(KP,"href","/docs/transformers/pr_16473/en/model_doc/lxmert#transformers.LxmertForPreTraining"),d(ZP,"href","/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),d(e$,"href","/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),d(o$,"href","/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(r$,"href","/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(t$,"href","/docs/transformers/pr_16473/en/model_doc/retribert#transformers.RetriBertModel"),d(a$,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(n$,"href","/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(s$,"href","/docs/transformers/pr_16473/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(l$,"href","/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(i$,"href","/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(d$,"href","/docs/transformers/pr_16473/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),d(c$,"href","/docs/transformers/pr_16473/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),d(f$,"href","/docs/transformers/pr_16473/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),d(m$,"href","/docs/transformers/pr_16473/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),d(g$,"href","/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),d(h$,"href","/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(p$,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(_$,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(u$,"href","/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(Ne,"class","docstring"),d(Yo,"class","docstring"),d(bu,"id","transformers.AutoModelForCausalLM"),d(bu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(bu,"href","#transformers.AutoModelForCausalLM"),d(rd,"class","relative group"),d(Wr,"class","docstring"),d(b$,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartForCausalLM"),d(v$,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertLMHeadModel"),d(T$,"href","/docs/transformers/pr_16473/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),d(F$,"href","/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),d(C$,"href","/docs/transformers/pr_16473/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),d(M$,"href","/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),d(E$,"href","/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),d(y$,"href","/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertForCausalLM"),d(w$,"href","/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(A$,"href","/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),d(L$,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraForCausalLM"),d(B$,"href","/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(x$,"href","/docs/transformers/pr_16473/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),d(k$,"href","/docs/transformers/pr_16473/en/model_doc/gptj#transformers.GPTJForCausalLM"),d(R$,"href","/docs/transformers/pr_16473/en/model_doc/marian#transformers.MarianForCausalLM"),d(S$,"href","/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartForCausalLM"),d(P$,"href","/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),d($$,"href","/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(I$,"href","/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.PegasusForCausalLM"),d(D$,"href","/docs/transformers/pr_16473/en/model_doc/plbart#transformers.PLBartForCausalLM"),d(N$,"href","/docs/transformers/pr_16473/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),d(j$,"href","/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),d(q$,"href","/docs/transformers/pr_16473/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),d(G$,"href","/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertForCausalLM"),d(O$,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaForCausalLM"),d(X$,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerForCausalLM"),d(V$,"href","/docs/transformers/pr_16473/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),d(z$,"href","/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(W$,"href","/docs/transformers/pr_16473/en/model_doc/trocr#transformers.TrOCRForCausalLM"),d(Q$,"href","/docs/transformers/pr_16473/en/model_doc/xglm#transformers.XGLMForCausalLM"),d(H$,"href","/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(U$,"href","/docs/transformers/pr_16473/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),d(J$,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),d(Y$,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),d(K$,"href","/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(je,"class","docstring"),d(Ko,"class","docstring"),d(o1,"id","transformers.AutoModelForMaskedLM"),d(o1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(o1,"href","#transformers.AutoModelForMaskedLM"),d(nd,"class","relative group"),d(Qr,"class","docstring"),d(Z$,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertForMaskedLM"),d(eI,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(oI,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertForMaskedLM"),d(rI,"href","/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),d(tI,"href","/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(aI,"href","/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),d(nI,"href","/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(sI,"href","/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(lI,"href","/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(iI,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(dI,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraForMaskedLM"),d(cI,"href","/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(fI,"href","/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetForMaskedLM"),d(mI,"href","/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelForMaskedLM"),d(gI,"href","/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(hI,"href","/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(pI,"href","/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(_I,"href","/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(uI,"href","/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),d(bI,"href","/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),d(vI,"href","/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(TI,"href","/docs/transformers/pr_16473/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),d(FI,"href","/docs/transformers/pr_16473/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),d(CI,"href","/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),d(MI,"href","/docs/transformers/pr_16473/en/model_doc/reformer#transformers.ReformerForMaskedLM"),d(EI,"href","/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertForMaskedLM"),d(yI,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(wI,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),d(AI,"href","/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(LI,"href","/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(BI,"href","/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(xI,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(kI,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(RI,"href","/docs/transformers/pr_16473/en/model_doc/yoso#transformers.YosoForMaskedLM"),d(qe,"class","docstring"),d(Zo,"class","docstring"),d(N1,"id","transformers.AutoModelForSeq2SeqLM"),d(N1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(N1,"href","#transformers.AutoModelForSeq2SeqLM"),d(id,"class","relative group"),d(Hr,"class","docstring"),d(SI,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(PI,"href","/docs/transformers/pr_16473/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),d($I,"href","/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),d(II,"href","/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),d(DI,"href","/docs/transformers/pr_16473/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),d(NI,"href","/docs/transformers/pr_16473/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(jI,"href","/docs/transformers/pr_16473/en/model_doc/led#transformers.LEDForConditionalGeneration"),d(qI,"href","/docs/transformers/pr_16473/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),d(GI,"href","/docs/transformers/pr_16473/en/model_doc/marian#transformers.MarianMTModel"),d(OI,"href","/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(XI,"href","/docs/transformers/pr_16473/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),d(VI,"href","/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),d(zI,"href","/docs/transformers/pr_16473/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),d(WI,"href","/docs/transformers/pr_16473/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),d(QI,"href","/docs/transformers/pr_16473/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(HI,"href","/docs/transformers/pr_16473/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),d(Ge,"class","docstring"),d(er,"class","docstring"),d(r4,"id","transformers.AutoModelForSequenceClassification"),d(r4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(r4,"href","#transformers.AutoModelForSequenceClassification"),d(fd,"class","relative group"),d(Ur,"class","docstring"),d(UI,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertForSequenceClassification"),d(JI,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartForSequenceClassification"),d(YI,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertForSequenceClassification"),d(KI,"href","/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),d(ZI,"href","/docs/transformers/pr_16473/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),d(eD,"href","/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),d(oD,"href","/docs/transformers/pr_16473/en/model_doc/canine#transformers.CanineForSequenceClassification"),d(rD,"href","/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),d(tD,"href","/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),d(aD,"href","/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),d(nD,"href","/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),d(sD,"href","/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),d(lD,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),d(iD,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraForSequenceClassification"),d(dD,"href","/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),d(cD,"href","/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetForSequenceClassification"),d(fD,"href","/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),d(mD,"href","/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),d(gD,"href","/docs/transformers/pr_16473/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),d(hD,"href","/docs/transformers/pr_16473/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),d(pD,"href","/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertForSequenceClassification"),d(_D,"href","/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),d(uD,"href","/docs/transformers/pr_16473/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),d(bD,"href","/docs/transformers/pr_16473/en/model_doc/led#transformers.LEDForSequenceClassification"),d(vD,"href","/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),d(TD,"href","/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartForSequenceClassification"),d(FD,"href","/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),d(CD,"href","/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),d(MD,"href","/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),d(ED,"href","/docs/transformers/pr_16473/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),d(yD,"href","/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),d(wD,"href","/docs/transformers/pr_16473/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),d(AD,"href","/docs/transformers/pr_16473/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),d(LD,"href","/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),d(BD,"href","/docs/transformers/pr_16473/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),d(xD,"href","/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),d(kD,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),d(RD,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),d(SD,"href","/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),d(PD,"href","/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasForSequenceClassification"),d($D,"href","/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),d(ID,"href","/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMForSequenceClassification"),d(DD,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),d(ND,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),d(jD,"href","/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),d(qD,"href","/docs/transformers/pr_16473/en/model_doc/yoso#transformers.YosoForSequenceClassification"),d(Oe,"class","docstring"),d(or,"class","docstring"),d(J4,"id","transformers.AutoModelForMultipleChoice"),d(J4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(J4,"href","#transformers.AutoModelForMultipleChoice"),d(hd,"class","relative group"),d(Jr,"class","docstring"),d(GD,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertForMultipleChoice"),d(OD,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertForMultipleChoice"),d(XD,"href","/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),d(VD,"href","/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),d(zD,"href","/docs/transformers/pr_16473/en/model_doc/canine#transformers.CanineForMultipleChoice"),d(WD,"href","/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),d(QD,"href","/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),d(HD,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),d(UD,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraForMultipleChoice"),d(JD,"href","/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),d(YD,"href","/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetForMultipleChoice"),d(KD,"href","/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),d(ZD,"href","/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertForMultipleChoice"),d(eN,"href","/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),d(oN,"href","/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),d(rN,"href","/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),d(tN,"href","/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),d(aN,"href","/docs/transformers/pr_16473/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),d(nN,"href","/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),d(sN,"href","/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),d(lN,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),d(iN,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),d(dN,"href","/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),d(cN,"href","/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMForMultipleChoice"),d(fN,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),d(mN,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),d(gN,"href","/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),d(hN,"href","/docs/transformers/pr_16473/en/model_doc/yoso#transformers.YosoForMultipleChoice"),d(Xe,"class","docstring"),d(rr,"class","docstring"),d(wb,"id","transformers.AutoModelForNextSentencePrediction"),d(wb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(wb,"href","#transformers.AutoModelForNextSentencePrediction"),d(ud,"class","relative group"),d(Yr,"class","docstring"),d(pN,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertForNextSentencePrediction"),d(_N,"href","/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),d(uN,"href","/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),d(bN,"href","/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),d(vN,"href","/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),d(Ve,"class","docstring"),d(tr,"class","docstring"),d(Sb,"id","transformers.AutoModelForTokenClassification"),d(Sb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Sb,"href","#transformers.AutoModelForTokenClassification"),d(Td,"class","relative group"),d(Kr,"class","docstring"),d(TN,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertForTokenClassification"),d(FN,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertForTokenClassification"),d(CN,"href","/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),d(MN,"href","/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertForTokenClassification"),d(EN,"href","/docs/transformers/pr_16473/en/model_doc/canine#transformers.CanineForTokenClassification"),d(yN,"href","/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),d(wN,"href","/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),d(AN,"href","/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaForTokenClassification"),d(LN,"href","/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),d(BN,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),d(xN,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraForTokenClassification"),d(kN,"href","/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),d(RN,"href","/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetForTokenClassification"),d(SN,"href","/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelForTokenClassification"),d(PN,"href","/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),d($N,"href","/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertForTokenClassification"),d(IN,"href","/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),d(DN,"href","/docs/transformers/pr_16473/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),d(NN,"href","/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerForTokenClassification"),d(jN,"href","/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),d(qN,"href","/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),d(GN,"href","/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),d(ON,"href","/docs/transformers/pr_16473/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),d(XN,"href","/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),d(VN,"href","/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertForTokenClassification"),d(zN,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaForTokenClassification"),d(WN,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),d(QN,"href","/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),d(HN,"href","/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMForTokenClassification"),d(UN,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),d(JN,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),d(YN,"href","/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),d(KN,"href","/docs/transformers/pr_16473/en/model_doc/yoso#transformers.YosoForTokenClassification"),d(ze,"class","docstring"),d(ar,"class","docstring"),d(h3,"id","transformers.AutoModelForQuestionAnswering"),d(h3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(h3,"href","#transformers.AutoModelForQuestionAnswering"),d(Md,"class","relative group"),d(Zr,"class","docstring"),d(ZN,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),d(ej,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartForQuestionAnswering"),d(oj,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertForQuestionAnswering"),d(rj,"href","/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),d(tj,"href","/docs/transformers/pr_16473/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),d(aj,"href","/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),d(nj,"href","/docs/transformers/pr_16473/en/model_doc/canine#transformers.CanineForQuestionAnswering"),d(sj,"href","/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),d(lj,"href","/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),d(ij,"href","/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),d(dj,"href","/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),d(cj,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),d(fj,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),d(mj,"href","/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),d(gj,"href","/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),d(hj,"href","/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),d(pj,"href","/docs/transformers/pr_16473/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),d(_j,"href","/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),d(uj,"href","/docs/transformers/pr_16473/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),d(bj,"href","/docs/transformers/pr_16473/en/model_doc/led#transformers.LEDForQuestionAnswering"),d(vj,"href","/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),d(Tj,"href","/docs/transformers/pr_16473/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),d(Fj,"href","/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),d(Cj,"href","/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),d(Mj,"href","/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),d(Ej,"href","/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),d(yj,"href","/docs/transformers/pr_16473/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),d(wj,"href","/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),d(Aj,"href","/docs/transformers/pr_16473/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),d(Lj,"href","/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),d(Bj,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),d(xj,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),d(kj,"href","/docs/transformers/pr_16473/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),d(Rj,"href","/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),d(Sj,"href","/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),d(Pj,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),d($j,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),d(Ij,"href","/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),d(Dj,"href","/docs/transformers/pr_16473/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),d(We,"class","docstring"),d(nr,"class","docstring"),d(o2,"id","transformers.AutoModelForTableQuestionAnswering"),d(o2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(o2,"href","#transformers.AutoModelForTableQuestionAnswering"),d(wd,"class","relative group"),d(et,"class","docstring"),d(Nj,"href","/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),d(Qe,"class","docstring"),d(sr,"class","docstring"),d(a2,"id","transformers.AutoModelForImageClassification"),d(a2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(a2,"href","#transformers.AutoModelForImageClassification"),d(Bd,"class","relative group"),d(ot,"class","docstring"),d(jj,"href","/docs/transformers/pr_16473/en/model_doc/beit#transformers.BeitForImageClassification"),d(qj,"href","/docs/transformers/pr_16473/en/model_doc/convnext#transformers.ConvNextForImageClassification"),d(Gj,"href","/docs/transformers/pr_16473/en/model_doc/deit#transformers.DeiTForImageClassification"),d(Oj,"href","/docs/transformers/pr_16473/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),d(Xj,"href","/docs/transformers/pr_16473/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),d(Vj,"href","/docs/transformers/pr_16473/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),d(zj,"href","/docs/transformers/pr_16473/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),d(Wj,"href","/docs/transformers/pr_16473/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),d(Qj,"href","/docs/transformers/pr_16473/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),d(Hj,"href","/docs/transformers/pr_16473/en/model_doc/resnet#transformers.ResNetForImageClassification"),d(Uj,"href","/docs/transformers/pr_16473/en/model_doc/segformer#transformers.SegformerForImageClassification"),d(Jj,"href","/docs/transformers/pr_16473/en/model_doc/swin#transformers.SwinForImageClassification"),d(Yj,"href","/docs/transformers/pr_16473/en/model_doc/van#transformers.VanForImageClassification"),d(Kj,"href","/docs/transformers/pr_16473/en/model_doc/vit#transformers.ViTForImageClassification"),d(He,"class","docstring"),d(lr,"class","docstring"),d(p2,"id","transformers.AutoModelForVision2Seq"),d(p2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(p2,"href","#transformers.AutoModelForVision2Seq"),d(Rd,"class","relative group"),d(rt,"class","docstring"),d(Zj,"href","/docs/transformers/pr_16473/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),d(Ue,"class","docstring"),d(ir,"class","docstring"),d(b2,"id","transformers.AutoModelForAudioClassification"),d(b2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(b2,"href","#transformers.AutoModelForAudioClassification"),d($d,"class","relative group"),d(tt,"class","docstring"),d(eq,"href","/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),d(oq,"href","/docs/transformers/pr_16473/en/model_doc/hubert#transformers.HubertForSequenceClassification"),d(rq,"href","/docs/transformers/pr_16473/en/model_doc/sew#transformers.SEWForSequenceClassification"),d(tq,"href","/docs/transformers/pr_16473/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),d(aq,"href","/docs/transformers/pr_16473/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),d(nq,"href","/docs/transformers/pr_16473/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),d(sq,"href","/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),d(lq,"href","/docs/transformers/pr_16473/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),d(Je,"class","docstring"),d(dr,"class","docstring"),d(L2,"id","transformers.AutoModelForAudioFrameClassification"),d(L2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(L2,"href","#transformers.AutoModelForAudioFrameClassification"),d(Nd,"class","relative group"),d(at,"class","docstring"),d(iq,"href","/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),d(dq,"href","/docs/transformers/pr_16473/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),d(cq,"href","/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),d(fq,"href","/docs/transformers/pr_16473/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),d(Ye,"class","docstring"),d(cr,"class","docstring"),d(P2,"id","transformers.AutoModelForCTC"),d(P2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(P2,"href","#transformers.AutoModelForCTC"),d(Gd,"class","relative group"),d(nt,"class","docstring"),d(mq,"href","/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),d(gq,"href","/docs/transformers/pr_16473/en/model_doc/hubert#transformers.HubertForCTC"),d(hq,"href","/docs/transformers/pr_16473/en/model_doc/sew#transformers.SEWForCTC"),d(pq,"href","/docs/transformers/pr_16473/en/model_doc/sew-d#transformers.SEWDForCTC"),d(_q,"href","/docs/transformers/pr_16473/en/model_doc/unispeech#transformers.UniSpeechForCTC"),d(uq,"href","/docs/transformers/pr_16473/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),d(bq,"href","/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),d(vq,"href","/docs/transformers/pr_16473/en/model_doc/wavlm#transformers.WavLMForCTC"),d(Ke,"class","docstring"),d(fr,"class","docstring"),d(V2,"id","transformers.AutoModelForSpeechSeq2Seq"),d(V2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(V2,"href","#transformers.AutoModelForSpeechSeq2Seq"),d(Vd,"class","relative group"),d(st,"class","docstring"),d(Tq,"href","/docs/transformers/pr_16473/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),d(Fq,"href","/docs/transformers/pr_16473/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),d(Ze,"class","docstring"),d(mr,"class","docstring"),d(H2,"id","transformers.AutoModelForAudioXVector"),d(H2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(H2,"href","#transformers.AutoModelForAudioXVector"),d(Qd,"class","relative group"),d(lt,"class","docstring"),d(Cq,"href","/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),d(Mq,"href","/docs/transformers/pr_16473/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),d(Eq,"href","/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),d(yq,"href","/docs/transformers/pr_16473/en/model_doc/wavlm#transformers.WavLMForXVector"),d(eo,"class","docstring"),d(gr,"class","docstring"),d(ev,"id","transformers.AutoModelForMaskedImageModeling"),d(ev,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ev,"href","#transformers.AutoModelForMaskedImageModeling"),d(Jd,"class","relative group"),d(it,"class","docstring"),d(wq,"href","/docs/transformers/pr_16473/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),d(Aq,"href","/docs/transformers/pr_16473/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),d(Lq,"href","/docs/transformers/pr_16473/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),d(oo,"class","docstring"),d(hr,"class","docstring"),d(nv,"id","transformers.AutoModelForObjectDetection"),d(nv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(nv,"href","#transformers.AutoModelForObjectDetection"),d(ec,"class","relative group"),d(dt,"class","docstring"),d(Bq,"href","/docs/transformers/pr_16473/en/model_doc/detr#transformers.DetrForObjectDetection"),d(ro,"class","docstring"),d(pr,"class","docstring"),d(iv,"id","transformers.AutoModelForImageSegmentation"),d(iv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(iv,"href","#transformers.AutoModelForImageSegmentation"),d(tc,"class","relative group"),d(ct,"class","docstring"),d(xq,"href","/docs/transformers/pr_16473/en/model_doc/detr#transformers.DetrForSegmentation"),d(to,"class","docstring"),d(_r,"class","docstring"),d(fv,"id","transformers.AutoModelForSemanticSegmentation"),d(fv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(fv,"href","#transformers.AutoModelForSemanticSegmentation"),d(sc,"class","relative group"),d(ft,"class","docstring"),d(kq,"href","/docs/transformers/pr_16473/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),d(Rq,"href","/docs/transformers/pr_16473/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),d(Sq,"href","/docs/transformers/pr_16473/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),d(ao,"class","docstring"),d(ur,"class","docstring"),d(_v,"id","transformers.AutoModelForInstanceSegmentation"),d(_v,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(_v,"href","#transformers.AutoModelForInstanceSegmentation"),d(cc,"class","relative group"),d(mt,"class","docstring"),d(Pq,"href","/docs/transformers/pr_16473/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),d(no,"class","docstring"),d(br,"class","docstring"),d(vv,"id","transformers.TFAutoModel"),d(vv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(vv,"href","#transformers.TFAutoModel"),d(gc,"class","relative group"),d(gt,"class","docstring"),d($q,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.TFAlbertModel"),d(Iq,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.TFBartModel"),d(Dq,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.TFBertModel"),d(Nq,"href","/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),d(jq,"href","/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),d(qq,"href","/docs/transformers/pr_16473/en/model_doc/camembert#transformers.TFCamembertModel"),d(Gq,"href","/docs/transformers/pr_16473/en/model_doc/clip#transformers.TFCLIPModel"),d(Oq,"href","/docs/transformers/pr_16473/en/model_doc/convbert#transformers.TFConvBertModel"),d(Xq,"href","/docs/transformers/pr_16473/en/model_doc/convnext#transformers.TFConvNextModel"),d(Vq,"href","/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.TFCTRLModel"),d(zq,"href","/docs/transformers/pr_16473/en/model_doc/deberta#transformers.TFDebertaModel"),d(Wq,"href","/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),d(Qq,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.TFDistilBertModel"),d(Hq,"href","/docs/transformers/pr_16473/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),d(Uq,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.TFElectraModel"),d(Jq,"href","/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.TFFlaubertModel"),d(Yq,"href","/docs/transformers/pr_16473/en/model_doc/funnel#transformers.TFFunnelModel"),d(Kq,"href","/docs/transformers/pr_16473/en/model_doc/funnel#transformers.TFFunnelBaseModel"),d(Zq,"href","/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.TFGPT2Model"),d(eG,"href","/docs/transformers/pr_16473/en/model_doc/gptj#transformers.TFGPTJModel"),d(oG,"href","/docs/transformers/pr_16473/en/model_doc/hubert#transformers.TFHubertModel"),d(rG,"href","/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),d(tG,"href","/docs/transformers/pr_16473/en/model_doc/led#transformers.TFLEDModel"),d(aG,"href","/docs/transformers/pr_16473/en/model_doc/longformer#transformers.TFLongformerModel"),d(nG,"href","/docs/transformers/pr_16473/en/model_doc/lxmert#transformers.TFLxmertModel"),d(sG,"href","/docs/transformers/pr_16473/en/model_doc/marian#transformers.TFMarianModel"),d(lG,"href","/docs/transformers/pr_16473/en/model_doc/mbart#transformers.TFMBartModel"),d(iG,"href","/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.TFMobileBertModel"),d(dG,"href","/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.TFMPNetModel"),d(cG,"href","/docs/transformers/pr_16473/en/model_doc/mt5#transformers.TFMT5Model"),d(fG,"href","/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),d(mG,"href","/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.TFPegasusModel"),d(gG,"href","/docs/transformers/pr_16473/en/model_doc/rembert#transformers.TFRemBertModel"),d(hG,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.TFRobertaModel"),d(pG,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.TFRoFormerModel"),d(_G,"href","/docs/transformers/pr_16473/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),d(uG,"href","/docs/transformers/pr_16473/en/model_doc/t5#transformers.TFT5Model"),d(bG,"href","/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TFTapasModel"),d(vG,"href","/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),d(TG,"href","/docs/transformers/pr_16473/en/model_doc/vit#transformers.TFViTModel"),d(FG,"href","/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),d(CG,"href","/docs/transformers/pr_16473/en/model_doc/xlm#transformers.TFXLMModel"),d(MG,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),d(EG,"href","/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.TFXLNetModel"),d(ho,"class","docstring"),d(vr,"class","docstring"),d(i6,"id","transformers.TFAutoModelForPreTraining"),d(i6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(i6,"href","#transformers.TFAutoModelForPreTraining"),d(_c,"class","relative group"),d(ht,"class","docstring"),d(yG,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.TFAlbertForPreTraining"),d(wG,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(AG,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.TFBertForPreTraining"),d(LG,"href","/docs/transformers/pr_16473/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(BG,"href","/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(xG,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(kG,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.TFElectraForPreTraining"),d(RG,"href","/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(SG,"href","/docs/transformers/pr_16473/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),d(PG,"href","/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d($G,"href","/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(IG,"href","/docs/transformers/pr_16473/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),d(DG,"href","/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),d(NG,"href","/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(jG,"href","/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(qG,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(GG,"href","/docs/transformers/pr_16473/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(OG,"href","/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(XG,"href","/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(VG,"href","/docs/transformers/pr_16473/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(zG,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(WG,"href","/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(po,"class","docstring"),d(Tr,"class","docstring"),d(k6,"id","transformers.TFAutoModelForCausalLM"),d(k6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(k6,"href","#transformers.TFAutoModelForCausalLM"),d(vc,"class","relative group"),d(pt,"class","docstring"),d(QG,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.TFBertLMHeadModel"),d(HG,"href","/docs/transformers/pr_16473/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),d(UG,"href","/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(JG,"href","/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(YG,"href","/docs/transformers/pr_16473/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),d(KG,"href","/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(ZG,"href","/docs/transformers/pr_16473/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),d(eO,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),d(oO,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),d(rO,"href","/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(tO,"href","/docs/transformers/pr_16473/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(aO,"href","/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(_o,"class","docstring"),d(Fr,"class","docstring"),d(V6,"id","transformers.TFAutoModelForImageClassification"),d(V6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(V6,"href","#transformers.TFAutoModelForImageClassification"),d(Cc,"class","relative group"),d(_t,"class","docstring"),d(nO,"href","/docs/transformers/pr_16473/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),d(sO,"href","/docs/transformers/pr_16473/en/model_doc/vit#transformers.TFViTForImageClassification"),d(uo,"class","docstring"),d(Cr,"class","docstring"),d(Q6,"id","transformers.TFAutoModelForMaskedLM"),d(Q6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Q6,"href","#transformers.TFAutoModelForMaskedLM"),d(yc,"class","relative group"),d(ut,"class","docstring"),d(lO,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),d(iO,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.TFBertForMaskedLM"),d(dO,"href","/docs/transformers/pr_16473/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(cO,"href","/docs/transformers/pr_16473/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),d(fO,"href","/docs/transformers/pr_16473/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),d(mO,"href","/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),d(gO,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(hO,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.TFElectraForMaskedLM"),d(pO,"href","/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(_O,"href","/docs/transformers/pr_16473/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),d(uO,"href","/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(bO,"href","/docs/transformers/pr_16473/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),d(vO,"href","/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),d(TO,"href","/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(FO,"href","/docs/transformers/pr_16473/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),d(CO,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(MO,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),d(EO,"href","/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(yO,"href","/docs/transformers/pr_16473/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(wO,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(bo,"class","docstring"),d(Mr,"class","docstring"),d(hT,"id","transformers.TFAutoModelForSeq2SeqLM"),d(hT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(hT,"href","#transformers.TFAutoModelForSeq2SeqLM"),d(Lc,"class","relative group"),d(bt,"class","docstring"),d(AO,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(LO,"href","/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),d(BO,"href","/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),d(xO,"href","/docs/transformers/pr_16473/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),d(kO,"href","/docs/transformers/pr_16473/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),d(RO,"href","/docs/transformers/pr_16473/en/model_doc/marian#transformers.TFMarianMTModel"),d(SO,"href","/docs/transformers/pr_16473/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),d(PO,"href","/docs/transformers/pr_16473/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),d($O,"href","/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),d(IO,"href","/docs/transformers/pr_16473/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(vo,"class","docstring"),d(Er,"class","docstring"),d(yT,"id","transformers.TFAutoModelForSequenceClassification"),d(yT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(yT,"href","#transformers.TFAutoModelForSequenceClassification"),d(kc,"class","relative group"),d(vt,"class","docstring"),d(DO,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),d(NO,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.TFBertForSequenceClassification"),d(jO,"href","/docs/transformers/pr_16473/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),d(qO,"href","/docs/transformers/pr_16473/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),d(GO,"href","/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),d(OO,"href","/docs/transformers/pr_16473/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),d(XO,"href","/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),d(VO,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),d(zO,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),d(WO,"href","/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),d(QO,"href","/docs/transformers/pr_16473/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),d(HO,"href","/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),d(UO,"href","/docs/transformers/pr_16473/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),d(JO,"href","/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),d(YO,"href","/docs/transformers/pr_16473/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),d(KO,"href","/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),d(ZO,"href","/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),d(eX,"href","/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),d(oX,"href","/docs/transformers/pr_16473/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),d(rX,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),d(tX,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),d(aX,"href","/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),d(nX,"href","/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),d(sX,"href","/docs/transformers/pr_16473/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),d(lX,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),d(iX,"href","/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),d(To,"class","docstring"),d(yr,"class","docstring"),d(KT,"id","transformers.TFAutoModelForMultipleChoice"),d(KT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(KT,"href","#transformers.TFAutoModelForMultipleChoice"),d(Pc,"class","relative group"),d(Tt,"class","docstring"),d(dX,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),d(cX,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.TFBertForMultipleChoice"),d(fX,"href","/docs/transformers/pr_16473/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),d(mX,"href","/docs/transformers/pr_16473/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),d(gX,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),d(hX,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),d(pX,"href","/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),d(_X,"href","/docs/transformers/pr_16473/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),d(uX,"href","/docs/transformers/pr_16473/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),d(bX,"href","/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),d(vX,"href","/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),d(TX,"href","/docs/transformers/pr_16473/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),d(FX,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),d(CX,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),d(MX,"href","/docs/transformers/pr_16473/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),d(EX,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),d(yX,"href","/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),d(Fo,"class","docstring"),d(wr,"class","docstring"),d(_7,"id","transformers.TFAutoModelForTableQuestionAnswering"),d(_7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(_7,"href","#transformers.TFAutoModelForTableQuestionAnswering"),d(Dc,"class","relative group"),d(Ft,"class","docstring"),d(wX,"href","/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),d(Co,"class","docstring"),d(Ar,"class","docstring"),d(b7,"id","transformers.TFAutoModelForTokenClassification"),d(b7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(b7,"href","#transformers.TFAutoModelForTokenClassification"),d(qc,"class","relative group"),d(Ct,"class","docstring"),d(AX,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),d(LX,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.TFBertForTokenClassification"),d(BX,"href","/docs/transformers/pr_16473/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),d(xX,"href","/docs/transformers/pr_16473/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),d(kX,"href","/docs/transformers/pr_16473/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),d(RX,"href","/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),d(SX,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),d(PX,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.TFElectraForTokenClassification"),d($X,"href","/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),d(IX,"href","/docs/transformers/pr_16473/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),d(DX,"href","/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),d(NX,"href","/docs/transformers/pr_16473/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),d(jX,"href","/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),d(qX,"href","/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),d(GX,"href","/docs/transformers/pr_16473/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),d(OX,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),d(XX,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),d(VX,"href","/docs/transformers/pr_16473/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),d(zX,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),d(WX,"href","/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),d(Mo,"class","docstring"),d(Lr,"class","docstring"),d(j7,"id","transformers.TFAutoModelForQuestionAnswering"),d(j7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(j7,"href","#transformers.TFAutoModelForQuestionAnswering"),d(Xc,"class","relative group"),d(Mt,"class","docstring"),d(QX,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),d(HX,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),d(UX,"href","/docs/transformers/pr_16473/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),d(JX,"href","/docs/transformers/pr_16473/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),d(YX,"href","/docs/transformers/pr_16473/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),d(KX,"href","/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),d(ZX,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),d(eV,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),d(oV,"href","/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),d(rV,"href","/docs/transformers/pr_16473/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),d(tV,"href","/docs/transformers/pr_16473/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),d(aV,"href","/docs/transformers/pr_16473/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),d(nV,"href","/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),d(sV,"href","/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),d(lV,"href","/docs/transformers/pr_16473/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),d(iV,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),d(dV,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),d(cV,"href","/docs/transformers/pr_16473/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),d(fV,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),d(mV,"href","/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),d(Eo,"class","docstring"),d(Br,"class","docstring"),d(sF,"id","transformers.TFAutoModelForVision2Seq"),d(sF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(sF,"href","#transformers.TFAutoModelForVision2Seq"),d(Wc,"class","relative group"),d(Et,"class","docstring"),d(gV,"href","/docs/transformers/pr_16473/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),d(yo,"class","docstring"),d(xr,"class","docstring"),d(iF,"id","transformers.TFAutoModelForSpeechSeq2Seq"),d(iF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(iF,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),d(Uc,"class","relative group"),d(yt,"class","docstring"),d(hV,"href","/docs/transformers/pr_16473/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),d(wo,"class","docstring"),d(kr,"class","docstring"),d(cF,"id","transformers.FlaxAutoModel"),d(cF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(cF,"href","#transformers.FlaxAutoModel"),d(Kc,"class","relative group"),d(wt,"class","docstring"),d(pV,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.FlaxAlbertModel"),d(_V,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.FlaxBartModel"),d(uV,"href","/docs/transformers/pr_16473/en/model_doc/beit#transformers.FlaxBeitModel"),d(bV,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.FlaxBertModel"),d(vV,"href","/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),d(TV,"href","/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),d(FV,"href","/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),d(CV,"href","/docs/transformers/pr_16473/en/model_doc/clip#transformers.FlaxCLIPModel"),d(MV,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),d(EV,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.FlaxElectraModel"),d(yV,"href","/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.FlaxGPT2Model"),d(wV,"href","/docs/transformers/pr_16473/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),d(AV,"href","/docs/transformers/pr_16473/en/model_doc/gptj#transformers.FlaxGPTJModel"),d(LV,"href","/docs/transformers/pr_16473/en/model_doc/marian#transformers.FlaxMarianModel"),d(BV,"href","/docs/transformers/pr_16473/en/model_doc/mbart#transformers.FlaxMBartModel"),d(xV,"href","/docs/transformers/pr_16473/en/model_doc/mt5#transformers.FlaxMT5Model"),d(kV,"href","/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.FlaxPegasusModel"),d(RV,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.FlaxRobertaModel"),d(SV,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.FlaxRoFormerModel"),d(PV,"href","/docs/transformers/pr_16473/en/model_doc/t5#transformers.FlaxT5Model"),d($V,"href","/docs/transformers/pr_16473/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),d(IV,"href","/docs/transformers/pr_16473/en/model_doc/vit#transformers.FlaxViTModel"),d(DV,"href","/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),d(NV,"href","/docs/transformers/pr_16473/en/model_doc/xglm#transformers.FlaxXGLMModel"),d(jV,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),d(Ao,"class","docstring"),d(Rr,"class","docstring"),d(IF,"id","transformers.FlaxAutoModelForCausalLM"),d(IF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(IF,"href","#transformers.FlaxAutoModelForCausalLM"),d(of,"class","relative group"),d(At,"class","docstring"),d(qV,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.FlaxBartForCausalLM"),d(GV,"href","/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),d(OV,"href","/docs/transformers/pr_16473/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),d(XV,"href","/docs/transformers/pr_16473/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),d(VV,"href","/docs/transformers/pr_16473/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),d(Lo,"class","docstring"),d(Sr,"class","docstring"),d(OF,"id","transformers.FlaxAutoModelForPreTraining"),d(OF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(OF,"href","#transformers.FlaxAutoModelForPreTraining"),d(af,"class","relative group"),d(Lt,"class","docstring"),d(zV,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),d(WV,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(QV,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.FlaxBertForPreTraining"),d(HV,"href","/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),d(UV,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),d(JV,"href","/docs/transformers/pr_16473/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(YV,"href","/docs/transformers/pr_16473/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(KV,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(ZV,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(ez,"href","/docs/transformers/pr_16473/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(oz,"href","/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),d(rz,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(Bo,"class","docstring"),d(Pr,"class","docstring"),d(oC,"id","transformers.FlaxAutoModelForMaskedLM"),d(oC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(oC,"href","#transformers.FlaxAutoModelForMaskedLM"),d(lf,"class","relative group"),d(Bt,"class","docstring"),d(tz,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),d(az,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(nz,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),d(sz,"href","/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),d(lz,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),d(iz,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),d(dz,"href","/docs/transformers/pr_16473/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(cz,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(fz,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(mz,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(xo,"class","docstring"),d($r,"class","docstring"),d(mC,"id","transformers.FlaxAutoModelForSeq2SeqLM"),d(mC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(mC,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),d(ff,"class","relative group"),d(xt,"class","docstring"),d(gz,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(hz,"href","/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),d(pz,"href","/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),d(_z,"href","/docs/transformers/pr_16473/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),d(uz,"href","/docs/transformers/pr_16473/en/model_doc/marian#transformers.FlaxMarianMTModel"),d(bz,"href","/docs/transformers/pr_16473/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(vz,"href","/docs/transformers/pr_16473/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(Tz,"href","/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),d(Fz,"href","/docs/transformers/pr_16473/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(ko,"class","docstring"),d(Ir,"class","docstring"),d(CC,"id","transformers.FlaxAutoModelForSequenceClassification"),d(CC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(CC,"href","#transformers.FlaxAutoModelForSequenceClassification"),d(hf,"class","relative group"),d(kt,"class","docstring"),d(Cz,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),d(Mz,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),d(Ez,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),d(yz,"href","/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),d(wz,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),d(Az,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),d(Lz,"href","/docs/transformers/pr_16473/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),d(Bz,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),d(xz,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),d(kz,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),d(Ro,"class","docstring"),d(Dr,"class","docstring"),d(SC,"id","transformers.FlaxAutoModelForQuestionAnswering"),d(SC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(SC,"href","#transformers.FlaxAutoModelForQuestionAnswering"),d(uf,"class","relative group"),d(Rt,"class","docstring"),d(Rz,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),d(Sz,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),d(Pz,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),d($z,"href","/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),d(Iz,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),d(Dz,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),d(Nz,"href","/docs/transformers/pr_16473/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),d(jz,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),d(qz,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),d(Gz,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),d(So,"class","docstring"),d(Nr,"class","docstring"),d(VC,"id","transformers.FlaxAutoModelForTokenClassification"),d(VC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(VC,"href","#transformers.FlaxAutoModelForTokenClassification"),d(Tf,"class","relative group"),d(St,"class","docstring"),d(Oz,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),d(Xz,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),d(Vz,"href","/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),d(zz,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),d(Wz,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),d(Qz,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),d(Hz,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),d(Uz,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),d(Po,"class","docstring"),d(jr,"class","docstring"),d(ZC,"id","transformers.FlaxAutoModelForMultipleChoice"),d(ZC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ZC,"href","#transformers.FlaxAutoModelForMultipleChoice"),d(Mf,"class","relative group"),d(Pt,"class","docstring"),d(Jz,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),d(Yz,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),d(Kz,"href","/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),d(Zz,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),d(eW,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),d(oW,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),d(rW,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),d(tW,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),d($o,"class","docstring"),d(qr,"class","docstring"),d(iM,"id","transformers.FlaxAutoModelForNextSentencePrediction"),d(iM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(iM,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),d(wf,"class","relative group"),d($t,"class","docstring"),d(aW,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),d(Io,"class","docstring"),d(Gr,"class","docstring"),d(cM,"id","transformers.FlaxAutoModelForImageClassification"),d(cM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(cM,"href","#transformers.FlaxAutoModelForImageClassification"),d(Bf,"class","relative group"),d(It,"class","docstring"),d(nW,"href","/docs/transformers/pr_16473/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),d(sW,"href","/docs/transformers/pr_16473/en/model_doc/vit#transformers.FlaxViTForImageClassification"),d(Do,"class","docstring"),d(Or,"class","docstring"),d(gM,"id","transformers.FlaxAutoModelForVision2Seq"),d(gM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(gM,"href","#transformers.FlaxAutoModelForVision2Seq"),d(Rf,"class","relative group"),d(Dt,"class","docstring"),d(lW,"href","/docs/transformers/pr_16473/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),d(No,"class","docstring"),d(Xr,"class","docstring")},m(c,u){e(document.head,Z),b(c,io,u),b(c,de,u),e(de,Ee),e(Ee,lo),g(me,lo,null),e(de,Ce),e(de,Vo),e(Vo,Ii),b(c,Df,u),b(c,fa,u),e(fa,Di),e(fa,Ni),e(Ni,hE),e(fa,Nf),b(c,Be,u),b(c,co,u),e(co,ji),e(co,Gn),e(Gn,pE),e(co,On),e(co,Xn),e(Xn,_E),e(co,qi),e(co,Vn),e(Vn,uE),e(co,Gi),b(c,jf,u),g(qa,c,u),b(c,fo,u),b(c,_e,u),e(_e,s9),e(_e,Oi),e(Oi,l9),e(_e,i9),b(c,zo,u),b(c,Ga,u),e(Ga,d9),e(Ga,qf),e(qf,c9),e(Ga,W$e),b(c,Ske,u),b(c,Xi,u),e(Xi,Gf),e(Gf,oH),g(bE,oH,null),e(Xi,Q$e),e(Xi,rH),e(rH,H$e),b(c,Pke,u),b(c,zn,u),e(zn,U$e),e(zn,tH),e(tH,J$e),e(zn,Y$e),e(zn,aH),e(aH,K$e),e(zn,Z$e),b(c,$ke,u),g(vE,c,u),b(c,Ike,u),b(c,f9,u),e(f9,eIe),b(c,Dke,u),g(Of,c,u),b(c,Nke,u),b(c,Vi,u),e(Vi,Xf),e(Xf,nH),g(TE,nH,null),e(Vi,oIe),e(Vi,sH),e(sH,rIe),b(c,jke,u),b(c,Wo,u),g(FE,Wo,null),e(Wo,tIe),e(Wo,CE),e(CE,aIe),e(CE,m9),e(m9,nIe),e(CE,sIe),e(Wo,lIe),e(Wo,ME),e(ME,iIe),e(ME,lH),e(lH,dIe),e(ME,cIe),e(Wo,fIe),e(Wo,mo),g(EE,mo,null),e(mo,mIe),e(mo,iH),e(iH,gIe),e(mo,hIe),e(mo,zi),e(zi,pIe),e(zi,dH),e(dH,_Ie),e(zi,uIe),e(zi,cH),e(cH,bIe),e(zi,vIe),e(mo,TIe),e(mo,v),e(v,Vf),e(Vf,fH),e(fH,FIe),e(Vf,CIe),e(Vf,g9),e(g9,MIe),e(Vf,EIe),e(v,yIe),e(v,zf),e(zf,mH),e(mH,wIe),e(zf,AIe),e(zf,h9),e(h9,LIe),e(zf,BIe),e(v,xIe),e(v,Wf),e(Wf,gH),e(gH,kIe),e(Wf,RIe),e(Wf,p9),e(p9,SIe),e(Wf,PIe),e(v,$Ie),e(v,Qf),e(Qf,hH),e(hH,IIe),e(Qf,DIe),e(Qf,_9),e(_9,NIe),e(Qf,jIe),e(v,qIe),e(v,Hf),e(Hf,pH),e(pH,GIe),e(Hf,OIe),e(Hf,u9),e(u9,XIe),e(Hf,VIe),e(v,zIe),e(v,Uf),e(Uf,_H),e(_H,WIe),e(Uf,QIe),e(Uf,b9),e(b9,HIe),e(Uf,UIe),e(v,JIe),e(v,Jf),e(Jf,uH),e(uH,YIe),e(Jf,KIe),e(Jf,v9),e(v9,ZIe),e(Jf,eDe),e(v,oDe),e(v,Yf),e(Yf,bH),e(bH,rDe),e(Yf,tDe),e(Yf,T9),e(T9,aDe),e(Yf,nDe),e(v,sDe),e(v,Kf),e(Kf,vH),e(vH,lDe),e(Kf,iDe),e(Kf,F9),e(F9,dDe),e(Kf,cDe),e(v,fDe),e(v,Zf),e(Zf,TH),e(TH,mDe),e(Zf,gDe),e(Zf,C9),e(C9,hDe),e(Zf,pDe),e(v,_De),e(v,em),e(em,FH),e(FH,uDe),e(em,bDe),e(em,M9),e(M9,vDe),e(em,TDe),e(v,FDe),e(v,om),e(om,CH),e(CH,CDe),e(om,MDe),e(om,E9),e(E9,EDe),e(om,yDe),e(v,wDe),e(v,rm),e(rm,MH),e(MH,ADe),e(rm,LDe),e(rm,y9),e(y9,BDe),e(rm,xDe),e(v,kDe),e(v,tm),e(tm,EH),e(EH,RDe),e(tm,SDe),e(tm,w9),e(w9,PDe),e(tm,$De),e(v,IDe),e(v,am),e(am,yH),e(yH,DDe),e(am,NDe),e(am,A9),e(A9,jDe),e(am,qDe),e(v,GDe),e(v,nm),e(nm,wH),e(wH,ODe),e(nm,XDe),e(nm,L9),e(L9,VDe),e(nm,zDe),e(v,WDe),e(v,sm),e(sm,AH),e(AH,QDe),e(sm,HDe),e(sm,B9),e(B9,UDe),e(sm,JDe),e(v,YDe),e(v,lm),e(lm,LH),e(LH,KDe),e(lm,ZDe),e(lm,x9),e(x9,eNe),e(lm,oNe),e(v,rNe),e(v,im),e(im,BH),e(BH,tNe),e(im,aNe),e(im,k9),e(k9,nNe),e(im,sNe),e(v,lNe),e(v,dm),e(dm,xH),e(xH,iNe),e(dm,dNe),e(dm,R9),e(R9,cNe),e(dm,fNe),e(v,mNe),e(v,cm),e(cm,kH),e(kH,gNe),e(cm,hNe),e(cm,S9),e(S9,pNe),e(cm,_Ne),e(v,uNe),e(v,fm),e(fm,RH),e(RH,bNe),e(fm,vNe),e(fm,P9),e(P9,TNe),e(fm,FNe),e(v,CNe),e(v,mm),e(mm,SH),e(SH,MNe),e(mm,ENe),e(mm,$9),e($9,yNe),e(mm,wNe),e(v,ANe),e(v,gm),e(gm,PH),e(PH,LNe),e(gm,BNe),e(gm,I9),e(I9,xNe),e(gm,kNe),e(v,RNe),e(v,hm),e(hm,$H),e($H,SNe),e(hm,PNe),e(hm,D9),e(D9,$Ne),e(hm,INe),e(v,DNe),e(v,pm),e(pm,IH),e(IH,NNe),e(pm,jNe),e(pm,N9),e(N9,qNe),e(pm,GNe),e(v,ONe),e(v,_m),e(_m,DH),e(DH,XNe),e(_m,VNe),e(_m,j9),e(j9,zNe),e(_m,WNe),e(v,QNe),e(v,um),e(um,NH),e(NH,HNe),e(um,UNe),e(um,q9),e(q9,JNe),e(um,YNe),e(v,KNe),e(v,bm),e(bm,jH),e(jH,ZNe),e(bm,eje),e(bm,G9),e(G9,oje),e(bm,rje),e(v,tje),e(v,vm),e(vm,qH),e(qH,aje),e(vm,nje),e(vm,O9),e(O9,sje),e(vm,lje),e(v,ije),e(v,Tm),e(Tm,GH),e(GH,dje),e(Tm,cje),e(Tm,X9),e(X9,fje),e(Tm,mje),e(v,gje),e(v,Fm),e(Fm,OH),e(OH,hje),e(Fm,pje),e(Fm,V9),e(V9,_je),e(Fm,uje),e(v,bje),e(v,Cm),e(Cm,XH),e(XH,vje),e(Cm,Tje),e(Cm,z9),e(z9,Fje),e(Cm,Cje),e(v,Mje),e(v,Mm),e(Mm,VH),e(VH,Eje),e(Mm,yje),e(Mm,W9),e(W9,wje),e(Mm,Aje),e(v,Lje),e(v,Em),e(Em,zH),e(zH,Bje),e(Em,xje),e(Em,Q9),e(Q9,kje),e(Em,Rje),e(v,Sje),e(v,ym),e(ym,WH),e(WH,Pje),e(ym,$je),e(ym,H9),e(H9,Ije),e(ym,Dje),e(v,Nje),e(v,wm),e(wm,QH),e(QH,jje),e(wm,qje),e(wm,U9),e(U9,Gje),e(wm,Oje),e(v,Xje),e(v,Am),e(Am,HH),e(HH,Vje),e(Am,zje),e(Am,J9),e(J9,Wje),e(Am,Qje),e(v,Hje),e(v,Lm),e(Lm,UH),e(UH,Uje),e(Lm,Jje),e(Lm,Y9),e(Y9,Yje),e(Lm,Kje),e(v,Zje),e(v,Bm),e(Bm,JH),e(JH,eqe),e(Bm,oqe),e(Bm,K9),e(K9,rqe),e(Bm,tqe),e(v,aqe),e(v,xm),e(xm,YH),e(YH,nqe),e(xm,sqe),e(xm,Z9),e(Z9,lqe),e(xm,iqe),e(v,dqe),e(v,km),e(km,KH),e(KH,cqe),e(km,fqe),e(km,eB),e(eB,mqe),e(km,gqe),e(v,hqe),e(v,Rm),e(Rm,ZH),e(ZH,pqe),e(Rm,_qe),e(Rm,oB),e(oB,uqe),e(Rm,bqe),e(v,vqe),e(v,Sm),e(Sm,eU),e(eU,Tqe),e(Sm,Fqe),e(Sm,rB),e(rB,Cqe),e(Sm,Mqe),e(v,Eqe),e(v,Pm),e(Pm,oU),e(oU,yqe),e(Pm,wqe),e(Pm,tB),e(tB,Aqe),e(Pm,Lqe),e(v,Bqe),e(v,$m),e($m,rU),e(rU,xqe),e($m,kqe),e($m,aB),e(aB,Rqe),e($m,Sqe),e(v,Pqe),e(v,Im),e(Im,tU),e(tU,$qe),e(Im,Iqe),e(Im,nB),e(nB,Dqe),e(Im,Nqe),e(v,jqe),e(v,Dm),e(Dm,aU),e(aU,qqe),e(Dm,Gqe),e(Dm,sB),e(sB,Oqe),e(Dm,Xqe),e(v,Vqe),e(v,Nm),e(Nm,nU),e(nU,zqe),e(Nm,Wqe),e(Nm,lB),e(lB,Qqe),e(Nm,Hqe),e(v,Uqe),e(v,jm),e(jm,sU),e(sU,Jqe),e(jm,Yqe),e(jm,iB),e(iB,Kqe),e(jm,Zqe),e(v,eGe),e(v,qm),e(qm,lU),e(lU,oGe),e(qm,rGe),e(qm,dB),e(dB,tGe),e(qm,aGe),e(v,nGe),e(v,Gm),e(Gm,iU),e(iU,sGe),e(Gm,lGe),e(Gm,cB),e(cB,iGe),e(Gm,dGe),e(v,cGe),e(v,Om),e(Om,dU),e(dU,fGe),e(Om,mGe),e(Om,fB),e(fB,gGe),e(Om,hGe),e(v,pGe),e(v,Xm),e(Xm,cU),e(cU,_Ge),e(Xm,uGe),e(Xm,mB),e(mB,bGe),e(Xm,vGe),e(v,TGe),e(v,Vm),e(Vm,fU),e(fU,FGe),e(Vm,CGe),e(Vm,gB),e(gB,MGe),e(Vm,EGe),e(v,yGe),e(v,zm),e(zm,mU),e(mU,wGe),e(zm,AGe),e(zm,hB),e(hB,LGe),e(zm,BGe),e(v,xGe),e(v,Wm),e(Wm,gU),e(gU,kGe),e(Wm,RGe),e(Wm,pB),e(pB,SGe),e(Wm,PGe),e(v,$Ge),e(v,Qm),e(Qm,hU),e(hU,IGe),e(Qm,DGe),e(Qm,_B),e(_B,NGe),e(Qm,jGe),e(v,qGe),e(v,Hm),e(Hm,pU),e(pU,GGe),e(Hm,OGe),e(Hm,uB),e(uB,XGe),e(Hm,VGe),e(v,zGe),e(v,Um),e(Um,_U),e(_U,WGe),e(Um,QGe),e(Um,bB),e(bB,HGe),e(Um,UGe),e(v,JGe),e(v,Jm),e(Jm,uU),e(uU,YGe),e(Jm,KGe),e(Jm,vB),e(vB,ZGe),e(Jm,eOe),e(v,oOe),e(v,Ym),e(Ym,bU),e(bU,rOe),e(Ym,tOe),e(Ym,TB),e(TB,aOe),e(Ym,nOe),e(v,sOe),e(v,Km),e(Km,vU),e(vU,lOe),e(Km,iOe),e(Km,FB),e(FB,dOe),e(Km,cOe),e(v,fOe),e(v,Zm),e(Zm,TU),e(TU,mOe),e(Zm,gOe),e(Zm,CB),e(CB,hOe),e(Zm,pOe),e(v,_Oe),e(v,eg),e(eg,FU),e(FU,uOe),e(eg,bOe),e(eg,MB),e(MB,vOe),e(eg,TOe),e(v,FOe),e(v,og),e(og,CU),e(CU,COe),e(og,MOe),e(og,EB),e(EB,EOe),e(og,yOe),e(v,wOe),e(v,rg),e(rg,MU),e(MU,AOe),e(rg,LOe),e(rg,yB),e(yB,BOe),e(rg,xOe),e(v,kOe),e(v,tg),e(tg,EU),e(EU,ROe),e(tg,SOe),e(tg,wB),e(wB,POe),e(tg,$Oe),e(v,IOe),e(v,ag),e(ag,yU),e(yU,DOe),e(ag,NOe),e(ag,AB),e(AB,jOe),e(ag,qOe),e(v,GOe),e(v,ng),e(ng,wU),e(wU,OOe),e(ng,XOe),e(ng,LB),e(LB,VOe),e(ng,zOe),e(v,WOe),e(v,sg),e(sg,AU),e(AU,QOe),e(sg,HOe),e(sg,BB),e(BB,UOe),e(sg,JOe),e(v,YOe),e(v,lg),e(lg,LU),e(LU,KOe),e(lg,ZOe),e(lg,xB),e(xB,eXe),e(lg,oXe),e(v,rXe),e(v,ig),e(ig,BU),e(BU,tXe),e(ig,aXe),e(ig,kB),e(kB,nXe),e(ig,sXe),e(v,lXe),e(v,dg),e(dg,xU),e(xU,iXe),e(dg,dXe),e(dg,RB),e(RB,cXe),e(dg,fXe),e(v,mXe),e(v,cg),e(cg,kU),e(kU,gXe),e(cg,hXe),e(cg,SB),e(SB,pXe),e(cg,_Xe),e(v,uXe),e(v,fg),e(fg,RU),e(RU,bXe),e(fg,vXe),e(fg,PB),e(PB,TXe),e(fg,FXe),e(v,CXe),e(v,mg),e(mg,SU),e(SU,MXe),e(mg,EXe),e(mg,$B),e($B,yXe),e(mg,wXe),e(v,AXe),e(v,gg),e(gg,PU),e(PU,LXe),e(gg,BXe),e(gg,IB),e(IB,xXe),e(gg,kXe),e(v,RXe),e(v,hg),e(hg,$U),e($U,SXe),e(hg,PXe),e(hg,DB),e(DB,$Xe),e(hg,IXe),e(v,DXe),e(v,pg),e(pg,IU),e(IU,NXe),e(pg,jXe),e(pg,NB),e(NB,qXe),e(pg,GXe),e(v,OXe),e(v,_g),e(_g,DU),e(DU,XXe),e(_g,VXe),e(_g,jB),e(jB,zXe),e(_g,WXe),e(v,QXe),e(v,ug),e(ug,NU),e(NU,HXe),e(ug,UXe),e(ug,qB),e(qB,JXe),e(ug,YXe),e(v,KXe),e(v,bg),e(bg,jU),e(jU,ZXe),e(bg,eVe),e(bg,GB),e(GB,oVe),e(bg,rVe),e(v,tVe),e(v,vg),e(vg,qU),e(qU,aVe),e(vg,nVe),e(vg,OB),e(OB,sVe),e(vg,lVe),e(v,iVe),e(v,Tg),e(Tg,GU),e(GU,dVe),e(Tg,cVe),e(Tg,XB),e(XB,fVe),e(Tg,mVe),e(v,gVe),e(v,Fg),e(Fg,OU),e(OU,hVe),e(Fg,pVe),e(Fg,VB),e(VB,_Ve),e(Fg,uVe),e(v,bVe),e(v,Cg),e(Cg,XU),e(XU,vVe),e(Cg,TVe),e(Cg,zB),e(zB,FVe),e(Cg,CVe),e(v,MVe),e(v,Mg),e(Mg,VU),e(VU,EVe),e(Mg,yVe),e(Mg,WB),e(WB,wVe),e(Mg,AVe),e(v,LVe),e(v,Eg),e(Eg,zU),e(zU,BVe),e(Eg,xVe),e(Eg,QB),e(QB,kVe),e(Eg,RVe),e(v,SVe),e(v,yg),e(yg,WU),e(WU,PVe),e(yg,$Ve),e(yg,HB),e(HB,IVe),e(yg,DVe),e(v,NVe),e(v,wg),e(wg,QU),e(QU,jVe),e(wg,qVe),e(wg,UB),e(UB,GVe),e(wg,OVe),e(v,XVe),e(v,Ag),e(Ag,HU),e(HU,VVe),e(Ag,zVe),e(Ag,JB),e(JB,WVe),e(Ag,QVe),e(v,HVe),e(v,Lg),e(Lg,UU),e(UU,UVe),e(Lg,JVe),e(Lg,YB),e(YB,YVe),e(Lg,KVe),e(v,ZVe),e(v,Bg),e(Bg,JU),e(JU,eze),e(Bg,oze),e(Bg,KB),e(KB,rze),e(Bg,tze),e(v,aze),e(v,xg),e(xg,YU),e(YU,nze),e(xg,sze),e(xg,ZB),e(ZB,lze),e(xg,ize),e(v,dze),e(v,kg),e(kg,KU),e(KU,cze),e(kg,fze),e(kg,ex),e(ex,mze),e(kg,gze),e(v,hze),e(v,Rg),e(Rg,ZU),e(ZU,pze),e(Rg,_ze),e(Rg,ox),e(ox,uze),e(Rg,bze),e(v,vze),e(v,Sg),e(Sg,eJ),e(eJ,Tze),e(Sg,Fze),e(Sg,rx),e(rx,Cze),e(Sg,Mze),e(v,Eze),e(v,Pg),e(Pg,oJ),e(oJ,yze),e(Pg,wze),e(Pg,tx),e(tx,Aze),e(Pg,Lze),e(mo,Bze),e(mo,rJ),e(rJ,xze),e(mo,kze),g(yE,mo,null),e(Wo,Rze),e(Wo,$g),g(wE,$g,null),e($g,Sze),e($g,tJ),e(tJ,Pze),b(c,qke,u),b(c,Wi,u),e(Wi,Ig),e(Ig,aJ),g(AE,aJ,null),e(Wi,$ze),e(Wi,nJ),e(nJ,Ize),b(c,Gke,u),b(c,Qo,u),g(LE,Qo,null),e(Qo,Dze),e(Qo,BE),e(BE,Nze),e(BE,ax),e(ax,jze),e(BE,qze),e(Qo,Gze),e(Qo,xE),e(xE,Oze),e(xE,sJ),e(sJ,Xze),e(xE,Vze),e(Qo,zze),e(Qo,go),g(kE,go,null),e(go,Wze),e(go,lJ),e(lJ,Qze),e(go,Hze),e(go,Oa),e(Oa,Uze),e(Oa,iJ),e(iJ,Jze),e(Oa,Yze),e(Oa,dJ),e(dJ,Kze),e(Oa,Zze),e(Oa,cJ),e(cJ,eWe),e(Oa,oWe),e(go,rWe),e(go,M),e(M,Wn),e(Wn,fJ),e(fJ,tWe),e(Wn,aWe),e(Wn,nx),e(nx,nWe),e(Wn,sWe),e(Wn,sx),e(sx,lWe),e(Wn,iWe),e(M,dWe),e(M,Qn),e(Qn,mJ),e(mJ,cWe),e(Qn,fWe),e(Qn,lx),e(lx,mWe),e(Qn,gWe),e(Qn,ix),e(ix,hWe),e(Qn,pWe),e(M,_We),e(M,Hn),e(Hn,gJ),e(gJ,uWe),e(Hn,bWe),e(Hn,dx),e(dx,vWe),e(Hn,TWe),e(Hn,cx),e(cx,FWe),e(Hn,CWe),e(M,MWe),e(M,Dg),e(Dg,hJ),e(hJ,EWe),e(Dg,yWe),e(Dg,fx),e(fx,wWe),e(Dg,AWe),e(M,LWe),e(M,Un),e(Un,pJ),e(pJ,BWe),e(Un,xWe),e(Un,mx),e(mx,kWe),e(Un,RWe),e(Un,gx),e(gx,SWe),e(Un,PWe),e(M,$We),e(M,Ng),e(Ng,_J),e(_J,IWe),e(Ng,DWe),e(Ng,hx),e(hx,NWe),e(Ng,jWe),e(M,qWe),e(M,jg),e(jg,uJ),e(uJ,GWe),e(jg,OWe),e(jg,px),e(px,XWe),e(jg,VWe),e(M,zWe),e(M,qg),e(qg,bJ),e(bJ,WWe),e(qg,QWe),e(qg,_x),e(_x,HWe),e(qg,UWe),e(M,JWe),e(M,Jn),e(Jn,vJ),e(vJ,YWe),e(Jn,KWe),e(Jn,ux),e(ux,ZWe),e(Jn,eQe),e(Jn,bx),e(bx,oQe),e(Jn,rQe),e(M,tQe),e(M,Yn),e(Yn,TJ),e(TJ,aQe),e(Yn,nQe),e(Yn,vx),e(vx,sQe),e(Yn,lQe),e(Yn,Tx),e(Tx,iQe),e(Yn,dQe),e(M,cQe),e(M,Kn),e(Kn,FJ),e(FJ,fQe),e(Kn,mQe),e(Kn,Fx),e(Fx,gQe),e(Kn,hQe),e(Kn,Cx),e(Cx,pQe),e(Kn,_Qe),e(M,uQe),e(M,Gg),e(Gg,CJ),e(CJ,bQe),e(Gg,vQe),e(Gg,Mx),e(Mx,TQe),e(Gg,FQe),e(M,CQe),e(M,Og),e(Og,MJ),e(MJ,MQe),e(Og,EQe),e(Og,Ex),e(Ex,yQe),e(Og,wQe),e(M,AQe),e(M,Zn),e(Zn,EJ),e(EJ,LQe),e(Zn,BQe),e(Zn,yx),e(yx,xQe),e(Zn,kQe),e(Zn,wx),e(wx,RQe),e(Zn,SQe),e(M,PQe),e(M,Xg),e(Xg,yJ),e(yJ,$Qe),e(Xg,IQe),e(Xg,Ax),e(Ax,DQe),e(Xg,NQe),e(M,jQe),e(M,es),e(es,wJ),e(wJ,qQe),e(es,GQe),e(es,Lx),e(Lx,OQe),e(es,XQe),e(es,Bx),e(Bx,VQe),e(es,zQe),e(M,WQe),e(M,os),e(os,AJ),e(AJ,QQe),e(os,HQe),e(os,xx),e(xx,UQe),e(os,JQe),e(os,kx),e(kx,YQe),e(os,KQe),e(M,ZQe),e(M,rs),e(rs,LJ),e(LJ,eHe),e(rs,oHe),e(rs,Rx),e(Rx,rHe),e(rs,tHe),e(rs,BJ),e(BJ,aHe),e(rs,nHe),e(M,sHe),e(M,Vg),e(Vg,xJ),e(xJ,lHe),e(Vg,iHe),e(Vg,Sx),e(Sx,dHe),e(Vg,cHe),e(M,fHe),e(M,ts),e(ts,kJ),e(kJ,mHe),e(ts,gHe),e(ts,Px),e(Px,hHe),e(ts,pHe),e(ts,$x),e($x,_He),e(ts,uHe),e(M,bHe),e(M,zg),e(zg,RJ),e(RJ,vHe),e(zg,THe),e(zg,Ix),e(Ix,FHe),e(zg,CHe),e(M,MHe),e(M,as),e(as,SJ),e(SJ,EHe),e(as,yHe),e(as,Dx),e(Dx,wHe),e(as,AHe),e(as,Nx),e(Nx,LHe),e(as,BHe),e(M,xHe),e(M,ns),e(ns,PJ),e(PJ,kHe),e(ns,RHe),e(ns,jx),e(jx,SHe),e(ns,PHe),e(ns,qx),e(qx,$He),e(ns,IHe),e(M,DHe),e(M,ss),e(ss,$J),e($J,NHe),e(ss,jHe),e(ss,Gx),e(Gx,qHe),e(ss,GHe),e(ss,Ox),e(Ox,OHe),e(ss,XHe),e(M,VHe),e(M,Wg),e(Wg,IJ),e(IJ,zHe),e(Wg,WHe),e(Wg,Xx),e(Xx,QHe),e(Wg,HHe),e(M,UHe),e(M,ls),e(ls,DJ),e(DJ,JHe),e(ls,YHe),e(ls,Vx),e(Vx,KHe),e(ls,ZHe),e(ls,zx),e(zx,eUe),e(ls,oUe),e(M,rUe),e(M,Qg),e(Qg,NJ),e(NJ,tUe),e(Qg,aUe),e(Qg,Wx),e(Wx,nUe),e(Qg,sUe),e(M,lUe),e(M,is),e(is,jJ),e(jJ,iUe),e(is,dUe),e(is,Qx),e(Qx,cUe),e(is,fUe),e(is,Hx),e(Hx,mUe),e(is,gUe),e(M,hUe),e(M,ds),e(ds,qJ),e(qJ,pUe),e(ds,_Ue),e(ds,Ux),e(Ux,uUe),e(ds,bUe),e(ds,Jx),e(Jx,vUe),e(ds,TUe),e(M,FUe),e(M,cs),e(cs,GJ),e(GJ,CUe),e(cs,MUe),e(cs,Yx),e(Yx,EUe),e(cs,yUe),e(cs,Kx),e(Kx,wUe),e(cs,AUe),e(M,LUe),e(M,fs),e(fs,OJ),e(OJ,BUe),e(fs,xUe),e(fs,Zx),e(Zx,kUe),e(fs,RUe),e(fs,ek),e(ek,SUe),e(fs,PUe),e(M,$Ue),e(M,Hg),e(Hg,XJ),e(XJ,IUe),e(Hg,DUe),e(Hg,ok),e(ok,NUe),e(Hg,jUe),e(M,qUe),e(M,ms),e(ms,VJ),e(VJ,GUe),e(ms,OUe),e(ms,rk),e(rk,XUe),e(ms,VUe),e(ms,tk),e(tk,zUe),e(ms,WUe),e(M,QUe),e(M,gs),e(gs,zJ),e(zJ,HUe),e(gs,UUe),e(gs,ak),e(ak,JUe),e(gs,YUe),e(gs,nk),e(nk,KUe),e(gs,ZUe),e(M,eJe),e(M,hs),e(hs,WJ),e(WJ,oJe),e(hs,rJe),e(hs,sk),e(sk,tJe),e(hs,aJe),e(hs,lk),e(lk,nJe),e(hs,sJe),e(M,lJe),e(M,ps),e(ps,QJ),e(QJ,iJe),e(ps,dJe),e(ps,ik),e(ik,cJe),e(ps,fJe),e(ps,dk),e(dk,mJe),e(ps,gJe),e(M,hJe),e(M,_s),e(_s,HJ),e(HJ,pJe),e(_s,_Je),e(_s,ck),e(ck,uJe),e(_s,bJe),e(_s,fk),e(fk,vJe),e(_s,TJe),e(M,FJe),e(M,us),e(us,UJ),e(UJ,CJe),e(us,MJe),e(us,mk),e(mk,EJe),e(us,yJe),e(us,gk),e(gk,wJe),e(us,AJe),e(M,LJe),e(M,Ug),e(Ug,JJ),e(JJ,BJe),e(Ug,xJe),e(Ug,hk),e(hk,kJe),e(Ug,RJe),e(M,SJe),e(M,bs),e(bs,YJ),e(YJ,PJe),e(bs,$Je),e(bs,pk),e(pk,IJe),e(bs,DJe),e(bs,_k),e(_k,NJe),e(bs,jJe),e(M,qJe),e(M,Jg),e(Jg,KJ),e(KJ,GJe),e(Jg,OJe),e(Jg,uk),e(uk,XJe),e(Jg,VJe),e(M,zJe),e(M,Yg),e(Yg,ZJ),e(ZJ,WJe),e(Yg,QJe),e(Yg,bk),e(bk,HJe),e(Yg,UJe),e(M,JJe),e(M,vs),e(vs,eY),e(eY,YJe),e(vs,KJe),e(vs,vk),e(vk,ZJe),e(vs,eYe),e(vs,Tk),e(Tk,oYe),e(vs,rYe),e(M,tYe),e(M,Ts),e(Ts,oY),e(oY,aYe),e(Ts,nYe),e(Ts,Fk),e(Fk,sYe),e(Ts,lYe),e(Ts,Ck),e(Ck,iYe),e(Ts,dYe),e(M,cYe),e(M,Kg),e(Kg,rY),e(rY,fYe),e(Kg,mYe),e(Kg,Mk),e(Mk,gYe),e(Kg,hYe),e(M,pYe),e(M,Fs),e(Fs,tY),e(tY,_Ye),e(Fs,uYe),e(Fs,Ek),e(Ek,bYe),e(Fs,vYe),e(Fs,yk),e(yk,TYe),e(Fs,FYe),e(M,CYe),e(M,Cs),e(Cs,aY),e(aY,MYe),e(Cs,EYe),e(Cs,wk),e(wk,yYe),e(Cs,wYe),e(Cs,Ak),e(Ak,AYe),e(Cs,LYe),e(M,BYe),e(M,Ms),e(Ms,nY),e(nY,xYe),e(Ms,kYe),e(Ms,Lk),e(Lk,RYe),e(Ms,SYe),e(Ms,Bk),e(Bk,PYe),e(Ms,$Ye),e(M,IYe),e(M,Es),e(Es,sY),e(sY,DYe),e(Es,NYe),e(Es,xk),e(xk,jYe),e(Es,qYe),e(Es,kk),e(kk,GYe),e(Es,OYe),e(M,XYe),e(M,ys),e(ys,lY),e(lY,VYe),e(ys,zYe),e(ys,Rk),e(Rk,WYe),e(ys,QYe),e(ys,Sk),e(Sk,HYe),e(ys,UYe),e(M,JYe),e(M,Zg),e(Zg,iY),e(iY,YYe),e(Zg,KYe),e(Zg,Pk),e(Pk,ZYe),e(Zg,eKe),e(M,oKe),e(M,eh),e(eh,dY),e(dY,rKe),e(eh,tKe),e(eh,$k),e($k,aKe),e(eh,nKe),e(M,sKe),e(M,oh),e(oh,cY),e(cY,lKe),e(oh,iKe),e(oh,Ik),e(Ik,dKe),e(oh,cKe),e(M,fKe),e(M,rh),e(rh,fY),e(fY,mKe),e(rh,gKe),e(rh,Dk),e(Dk,hKe),e(rh,pKe),e(M,_Ke),e(M,ws),e(ws,mY),e(mY,uKe),e(ws,bKe),e(ws,Nk),e(Nk,vKe),e(ws,TKe),e(ws,jk),e(jk,FKe),e(ws,CKe),e(M,MKe),e(M,th),e(th,gY),e(gY,EKe),e(th,yKe),e(th,qk),e(qk,wKe),e(th,AKe),e(M,LKe),e(M,As),e(As,hY),e(hY,BKe),e(As,xKe),e(As,Gk),e(Gk,kKe),e(As,RKe),e(As,Ok),e(Ok,SKe),e(As,PKe),e(M,$Ke),e(M,Ls),e(Ls,pY),e(pY,IKe),e(Ls,DKe),e(Ls,Xk),e(Xk,NKe),e(Ls,jKe),e(Ls,Vk),e(Vk,qKe),e(Ls,GKe),e(M,OKe),e(M,Bs),e(Bs,_Y),e(_Y,XKe),e(Bs,VKe),e(Bs,zk),e(zk,zKe),e(Bs,WKe),e(Bs,Wk),e(Wk,QKe),e(Bs,HKe),e(M,UKe),e(M,xs),e(xs,uY),e(uY,JKe),e(xs,YKe),e(xs,Qk),e(Qk,KKe),e(xs,ZKe),e(xs,Hk),e(Hk,eZe),e(xs,oZe),e(M,rZe),e(M,ks),e(ks,bY),e(bY,tZe),e(ks,aZe),e(ks,Uk),e(Uk,nZe),e(ks,sZe),e(ks,Jk),e(Jk,lZe),e(ks,iZe),e(M,dZe),e(M,Rs),e(Rs,vY),e(vY,cZe),e(Rs,fZe),e(Rs,Yk),e(Yk,mZe),e(Rs,gZe),e(Rs,Kk),e(Kk,hZe),e(Rs,pZe),e(M,_Ze),e(M,ah),e(ah,TY),e(TY,uZe),e(ah,bZe),e(ah,Zk),e(Zk,vZe),e(ah,TZe),e(M,FZe),e(M,nh),e(nh,FY),e(FY,CZe),e(nh,MZe),e(nh,eR),e(eR,EZe),e(nh,yZe),e(M,wZe),e(M,Ss),e(Ss,CY),e(CY,AZe),e(Ss,LZe),e(Ss,oR),e(oR,BZe),e(Ss,xZe),e(Ss,rR),e(rR,kZe),e(Ss,RZe),e(M,SZe),e(M,Ps),e(Ps,MY),e(MY,PZe),e(Ps,$Ze),e(Ps,tR),e(tR,IZe),e(Ps,DZe),e(Ps,aR),e(aR,NZe),e(Ps,jZe),e(M,qZe),e(M,$s),e($s,EY),e(EY,GZe),e($s,OZe),e($s,nR),e(nR,XZe),e($s,VZe),e($s,sR),e(sR,zZe),e($s,WZe),e(M,QZe),e(M,sh),e(sh,yY),e(yY,HZe),e(sh,UZe),e(sh,lR),e(lR,JZe),e(sh,YZe),e(M,KZe),e(M,lh),e(lh,wY),e(wY,ZZe),e(lh,eeo),e(lh,iR),e(iR,oeo),e(lh,reo),e(M,teo),e(M,ih),e(ih,AY),e(AY,aeo),e(ih,neo),e(ih,dR),e(dR,seo),e(ih,leo),e(M,ieo),e(M,dh),e(dh,LY),e(LY,deo),e(dh,ceo),e(dh,cR),e(cR,feo),e(dh,meo),e(M,geo),e(M,ch),e(ch,BY),e(BY,heo),e(ch,peo),e(ch,fR),e(fR,_eo),e(ch,ueo),e(M,beo),e(M,Is),e(Is,xY),e(xY,veo),e(Is,Teo),e(Is,mR),e(mR,Feo),e(Is,Ceo),e(Is,gR),e(gR,Meo),e(Is,Eeo),e(M,yeo),e(M,fh),e(fh,kY),e(kY,weo),e(fh,Aeo),e(fh,hR),e(hR,Leo),e(fh,Beo),e(M,xeo),e(M,mh),e(mh,RY),e(RY,keo),e(mh,Reo),e(mh,pR),e(pR,Seo),e(mh,Peo),e(M,$eo),e(M,Ds),e(Ds,SY),e(SY,Ieo),e(Ds,Deo),e(Ds,_R),e(_R,Neo),e(Ds,jeo),e(Ds,uR),e(uR,qeo),e(Ds,Geo),e(M,Oeo),e(M,Ns),e(Ns,PY),e(PY,Xeo),e(Ns,Veo),e(Ns,bR),e(bR,zeo),e(Ns,Weo),e(Ns,vR),e(vR,Qeo),e(Ns,Heo),e(go,Ueo),e(go,$Y),e($Y,Jeo),e(go,Yeo),g(RE,go,null),e(Qo,Keo),e(Qo,gh),g(SE,gh,null),e(gh,Zeo),e(gh,IY),e(IY,eoo),b(c,Oke,u),b(c,Qi,u),e(Qi,hh),e(hh,DY),g(PE,DY,null),e(Qi,ooo),e(Qi,NY),e(NY,roo),b(c,Xke,u),b(c,Ho,u),g($E,Ho,null),e(Ho,too),e(Ho,IE),e(IE,aoo),e(IE,TR),e(TR,noo),e(IE,soo),e(Ho,loo),e(Ho,DE),e(DE,ioo),e(DE,jY),e(jY,doo),e(DE,coo),e(Ho,foo),e(Ho,$e),g(NE,$e,null),e($e,moo),e($e,qY),e(qY,goo),e($e,hoo),e($e,Xa),e(Xa,poo),e(Xa,GY),e(GY,_oo),e(Xa,uoo),e(Xa,OY),e(OY,boo),e(Xa,voo),e(Xa,XY),e(XY,Too),e(Xa,Foo),e($e,Coo),e($e,te),e(te,ph),e(ph,VY),e(VY,Moo),e(ph,Eoo),e(ph,FR),e(FR,yoo),e(ph,woo),e(te,Aoo),e(te,_h),e(_h,zY),e(zY,Loo),e(_h,Boo),e(_h,CR),e(CR,xoo),e(_h,koo),e(te,Roo),e(te,uh),e(uh,WY),e(WY,Soo),e(uh,Poo),e(uh,MR),e(MR,$oo),e(uh,Ioo),e(te,Doo),e(te,bh),e(bh,QY),e(QY,Noo),e(bh,joo),e(bh,ER),e(ER,qoo),e(bh,Goo),e(te,Ooo),e(te,vh),e(vh,HY),e(HY,Xoo),e(vh,Voo),e(vh,yR),e(yR,zoo),e(vh,Woo),e(te,Qoo),e(te,Th),e(Th,UY),e(UY,Hoo),e(Th,Uoo),e(Th,wR),e(wR,Joo),e(Th,Yoo),e(te,Koo),e(te,Fh),e(Fh,JY),e(JY,Zoo),e(Fh,ero),e(Fh,AR),e(AR,oro),e(Fh,rro),e(te,tro),e(te,Ch),e(Ch,YY),e(YY,aro),e(Ch,nro),e(Ch,LR),e(LR,sro),e(Ch,lro),e(te,iro),e(te,Mh),e(Mh,KY),e(KY,dro),e(Mh,cro),e(Mh,BR),e(BR,fro),e(Mh,mro),e(te,gro),e(te,Eh),e(Eh,ZY),e(ZY,hro),e(Eh,pro),e(Eh,xR),e(xR,_ro),e(Eh,uro),e(te,bro),e(te,yh),e(yh,eK),e(eK,vro),e(yh,Tro),e(yh,kR),e(kR,Fro),e(yh,Cro),e(te,Mro),e(te,wh),e(wh,oK),e(oK,Ero),e(wh,yro),e(wh,RR),e(RR,wro),e(wh,Aro),e(te,Lro),e(te,Ah),e(Ah,rK),e(rK,Bro),e(Ah,xro),e(Ah,SR),e(SR,kro),e(Ah,Rro),e(te,Sro),e(te,Lh),e(Lh,tK),e(tK,Pro),e(Lh,$ro),e(Lh,PR),e(PR,Iro),e(Lh,Dro),e(te,Nro),e(te,Bh),e(Bh,aK),e(aK,jro),e(Bh,qro),e(Bh,$R),e($R,Gro),e(Bh,Oro),e(te,Xro),e(te,xh),e(xh,nK),e(nK,Vro),e(xh,zro),e(xh,IR),e(IR,Wro),e(xh,Qro),e(te,Hro),e(te,kh),e(kh,sK),e(sK,Uro),e(kh,Jro),e(kh,DR),e(DR,Yro),e(kh,Kro),e(te,Zro),e(te,Rh),e(Rh,lK),e(lK,eto),e(Rh,oto),e(Rh,NR),e(NR,rto),e(Rh,tto),e($e,ato),g(Sh,$e,null),e($e,nto),e($e,iK),e(iK,sto),e($e,lto),g(jE,$e,null),e(Ho,ito),e(Ho,Ph),g(qE,Ph,null),e(Ph,dto),e(Ph,dK),e(dK,cto),b(c,Vke,u),b(c,Hi,u),e(Hi,$h),e($h,cK),g(GE,cK,null),e(Hi,fto),e(Hi,fK),e(fK,mto),b(c,zke,u),b(c,Uo,u),g(OE,Uo,null),e(Uo,gto),e(Uo,XE),e(XE,hto),e(XE,jR),e(jR,pto),e(XE,_to),e(Uo,uto),e(Uo,VE),e(VE,bto),e(VE,mK),e(mK,vto),e(VE,Tto),e(Uo,Fto),e(Uo,Ie),g(zE,Ie,null),e(Ie,Cto),e(Ie,gK),e(gK,Mto),e(Ie,Eto),e(Ie,Ui),e(Ui,yto),e(Ui,hK),e(hK,wto),e(Ui,Ato),e(Ui,pK),e(pK,Lto),e(Ui,Bto),e(Ie,xto),e(Ie,xe),e(xe,Ih),e(Ih,_K),e(_K,kto),e(Ih,Rto),e(Ih,qR),e(qR,Sto),e(Ih,Pto),e(xe,$to),e(xe,Dh),e(Dh,uK),e(uK,Ito),e(Dh,Dto),e(Dh,GR),e(GR,Nto),e(Dh,jto),e(xe,qto),e(xe,Nh),e(Nh,bK),e(bK,Gto),e(Nh,Oto),e(Nh,OR),e(OR,Xto),e(Nh,Vto),e(xe,zto),e(xe,jh),e(jh,vK),e(vK,Wto),e(jh,Qto),e(jh,XR),e(XR,Hto),e(jh,Uto),e(xe,Jto),e(xe,qh),e(qh,TK),e(TK,Yto),e(qh,Kto),e(qh,VR),e(VR,Zto),e(qh,eao),e(xe,oao),e(xe,Gh),e(Gh,FK),e(FK,rao),e(Gh,tao),e(Gh,zR),e(zR,aao),e(Gh,nao),e(xe,sao),e(xe,Oh),e(Oh,CK),e(CK,lao),e(Oh,iao),e(Oh,WR),e(WR,dao),e(Oh,cao),e(xe,fao),e(xe,Xh),e(Xh,MK),e(MK,mao),e(Xh,gao),e(Xh,QR),e(QR,hao),e(Xh,pao),e(Ie,_ao),g(Vh,Ie,null),e(Ie,uao),e(Ie,EK),e(EK,bao),e(Ie,vao),g(WE,Ie,null),e(Uo,Tao),e(Uo,zh),g(QE,zh,null),e(zh,Fao),e(zh,yK),e(yK,Cao),b(c,Wke,u),b(c,Ji,u),e(Ji,Wh),e(Wh,wK),g(HE,wK,null),e(Ji,Mao),e(Ji,AK),e(AK,Eao),b(c,Qke,u),b(c,Jo,u),g(UE,Jo,null),e(Jo,yao),e(Jo,Yi),e(Yi,wao),e(Yi,LK),e(LK,Aao),e(Yi,Lao),e(Yi,BK),e(BK,Bao),e(Yi,xao),e(Jo,kao),e(Jo,JE),e(JE,Rao),e(JE,xK),e(xK,Sao),e(JE,Pao),e(Jo,$ao),e(Jo,Vr),g(YE,Vr,null),e(Vr,Iao),e(Vr,kK),e(kK,Dao),e(Vr,Nao),e(Vr,Ki),e(Ki,jao),e(Ki,RK),e(RK,qao),e(Ki,Gao),e(Ki,SK),e(SK,Oao),e(Ki,Xao),e(Vr,Vao),e(Vr,PK),e(PK,zao),e(Vr,Wao),g(KE,Vr,null),e(Jo,Qao),e(Jo,De),g(ZE,De,null),e(De,Hao),e(De,$K),e($K,Uao),e(De,Jao),e(De,Va),e(Va,Yao),e(Va,IK),e(IK,Kao),e(Va,Zao),e(Va,DK),e(DK,eno),e(Va,ono),e(Va,NK),e(NK,rno),e(Va,tno),e(De,ano),e(De,F),e(F,Qh),e(Qh,jK),e(jK,nno),e(Qh,sno),e(Qh,HR),e(HR,lno),e(Qh,ino),e(F,dno),e(F,Hh),e(Hh,qK),e(qK,cno),e(Hh,fno),e(Hh,UR),e(UR,mno),e(Hh,gno),e(F,hno),e(F,Uh),e(Uh,GK),e(GK,pno),e(Uh,_no),e(Uh,JR),e(JR,uno),e(Uh,bno),e(F,vno),e(F,Jh),e(Jh,OK),e(OK,Tno),e(Jh,Fno),e(Jh,YR),e(YR,Cno),e(Jh,Mno),e(F,Eno),e(F,Yh),e(Yh,XK),e(XK,yno),e(Yh,wno),e(Yh,KR),e(KR,Ano),e(Yh,Lno),e(F,Bno),e(F,Kh),e(Kh,VK),e(VK,xno),e(Kh,kno),e(Kh,ZR),e(ZR,Rno),e(Kh,Sno),e(F,Pno),e(F,Zh),e(Zh,zK),e(zK,$no),e(Zh,Ino),e(Zh,eS),e(eS,Dno),e(Zh,Nno),e(F,jno),e(F,ep),e(ep,WK),e(WK,qno),e(ep,Gno),e(ep,oS),e(oS,Ono),e(ep,Xno),e(F,Vno),e(F,op),e(op,QK),e(QK,zno),e(op,Wno),e(op,rS),e(rS,Qno),e(op,Hno),e(F,Uno),e(F,rp),e(rp,HK),e(HK,Jno),e(rp,Yno),e(rp,tS),e(tS,Kno),e(rp,Zno),e(F,eso),e(F,tp),e(tp,UK),e(UK,oso),e(tp,rso),e(tp,aS),e(aS,tso),e(tp,aso),e(F,nso),e(F,ap),e(ap,JK),e(JK,sso),e(ap,lso),e(ap,nS),e(nS,iso),e(ap,dso),e(F,cso),e(F,np),e(np,YK),e(YK,fso),e(np,mso),e(np,sS),e(sS,gso),e(np,hso),e(F,pso),e(F,sp),e(sp,KK),e(KK,_so),e(sp,uso),e(sp,lS),e(lS,bso),e(sp,vso),e(F,Tso),e(F,lp),e(lp,ZK),e(ZK,Fso),e(lp,Cso),e(lp,iS),e(iS,Mso),e(lp,Eso),e(F,yso),e(F,ip),e(ip,eZ),e(eZ,wso),e(ip,Aso),e(ip,dS),e(dS,Lso),e(ip,Bso),e(F,xso),e(F,dp),e(dp,oZ),e(oZ,kso),e(dp,Rso),e(dp,cS),e(cS,Sso),e(dp,Pso),e(F,$so),e(F,cp),e(cp,rZ),e(rZ,Iso),e(cp,Dso),e(cp,fS),e(fS,Nso),e(cp,jso),e(F,qso),e(F,fp),e(fp,tZ),e(tZ,Gso),e(fp,Oso),e(fp,mS),e(mS,Xso),e(fp,Vso),e(F,zso),e(F,mp),e(mp,aZ),e(aZ,Wso),e(mp,Qso),e(mp,gS),e(gS,Hso),e(mp,Uso),e(F,Jso),e(F,gp),e(gp,nZ),e(nZ,Yso),e(gp,Kso),e(gp,hS),e(hS,Zso),e(gp,elo),e(F,olo),e(F,hp),e(hp,sZ),e(sZ,rlo),e(hp,tlo),e(hp,pS),e(pS,alo),e(hp,nlo),e(F,slo),e(F,pp),e(pp,lZ),e(lZ,llo),e(pp,ilo),e(pp,_S),e(_S,dlo),e(pp,clo),e(F,flo),e(F,_p),e(_p,iZ),e(iZ,mlo),e(_p,glo),e(_p,uS),e(uS,hlo),e(_p,plo),e(F,_lo),e(F,up),e(up,dZ),e(dZ,ulo),e(up,blo),e(up,bS),e(bS,vlo),e(up,Tlo),e(F,Flo),e(F,bp),e(bp,cZ),e(cZ,Clo),e(bp,Mlo),e(bp,vS),e(vS,Elo),e(bp,ylo),e(F,wlo),e(F,vp),e(vp,fZ),e(fZ,Alo),e(vp,Llo),e(vp,TS),e(TS,Blo),e(vp,xlo),e(F,klo),e(F,Tp),e(Tp,mZ),e(mZ,Rlo),e(Tp,Slo),e(Tp,FS),e(FS,Plo),e(Tp,$lo),e(F,Ilo),e(F,Fp),e(Fp,gZ),e(gZ,Dlo),e(Fp,Nlo),e(Fp,CS),e(CS,jlo),e(Fp,qlo),e(F,Glo),e(F,js),e(js,hZ),e(hZ,Olo),e(js,Xlo),e(js,MS),e(MS,Vlo),e(js,zlo),e(js,ES),e(ES,Wlo),e(js,Qlo),e(F,Hlo),e(F,Cp),e(Cp,pZ),e(pZ,Ulo),e(Cp,Jlo),e(Cp,yS),e(yS,Ylo),e(Cp,Klo),e(F,Zlo),e(F,Mp),e(Mp,_Z),e(_Z,eio),e(Mp,oio),e(Mp,wS),e(wS,rio),e(Mp,tio),e(F,aio),e(F,Ep),e(Ep,uZ),e(uZ,nio),e(Ep,sio),e(Ep,AS),e(AS,lio),e(Ep,iio),e(F,dio),e(F,yp),e(yp,bZ),e(bZ,cio),e(yp,fio),e(yp,LS),e(LS,mio),e(yp,gio),e(F,hio),e(F,wp),e(wp,vZ),e(vZ,pio),e(wp,_io),e(wp,BS),e(BS,uio),e(wp,bio),e(F,vio),e(F,Ap),e(Ap,TZ),e(TZ,Tio),e(Ap,Fio),e(Ap,xS),e(xS,Cio),e(Ap,Mio),e(F,Eio),e(F,Lp),e(Lp,FZ),e(FZ,yio),e(Lp,wio),e(Lp,kS),e(kS,Aio),e(Lp,Lio),e(F,Bio),e(F,Bp),e(Bp,CZ),e(CZ,xio),e(Bp,kio),e(Bp,RS),e(RS,Rio),e(Bp,Sio),e(F,Pio),e(F,xp),e(xp,MZ),e(MZ,$io),e(xp,Iio),e(xp,SS),e(SS,Dio),e(xp,Nio),e(F,jio),e(F,kp),e(kp,EZ),e(EZ,qio),e(kp,Gio),e(kp,PS),e(PS,Oio),e(kp,Xio),e(F,Vio),e(F,Rp),e(Rp,yZ),e(yZ,zio),e(Rp,Wio),e(Rp,$S),e($S,Qio),e(Rp,Hio),e(F,Uio),e(F,Sp),e(Sp,wZ),e(wZ,Jio),e(Sp,Yio),e(Sp,IS),e(IS,Kio),e(Sp,Zio),e(F,edo),e(F,Pp),e(Pp,AZ),e(AZ,odo),e(Pp,rdo),e(Pp,DS),e(DS,tdo),e(Pp,ado),e(F,ndo),e(F,$p),e($p,LZ),e(LZ,sdo),e($p,ldo),e($p,NS),e(NS,ido),e($p,ddo),e(F,cdo),e(F,Ip),e(Ip,BZ),e(BZ,fdo),e(Ip,mdo),e(Ip,jS),e(jS,gdo),e(Ip,hdo),e(F,pdo),e(F,Dp),e(Dp,xZ),e(xZ,_do),e(Dp,udo),e(Dp,qS),e(qS,bdo),e(Dp,vdo),e(F,Tdo),e(F,Np),e(Np,kZ),e(kZ,Fdo),e(Np,Cdo),e(Np,GS),e(GS,Mdo),e(Np,Edo),e(F,ydo),e(F,jp),e(jp,RZ),e(RZ,wdo),e(jp,Ado),e(jp,OS),e(OS,Ldo),e(jp,Bdo),e(F,xdo),e(F,qp),e(qp,SZ),e(SZ,kdo),e(qp,Rdo),e(qp,XS),e(XS,Sdo),e(qp,Pdo),e(F,$do),e(F,Gp),e(Gp,PZ),e(PZ,Ido),e(Gp,Ddo),e(Gp,VS),e(VS,Ndo),e(Gp,jdo),e(F,qdo),e(F,Op),e(Op,$Z),e($Z,Gdo),e(Op,Odo),e(Op,zS),e(zS,Xdo),e(Op,Vdo),e(F,zdo),e(F,Xp),e(Xp,IZ),e(IZ,Wdo),e(Xp,Qdo),e(Xp,WS),e(WS,Hdo),e(Xp,Udo),e(F,Jdo),e(F,Vp),e(Vp,DZ),e(DZ,Ydo),e(Vp,Kdo),e(Vp,QS),e(QS,Zdo),e(Vp,eco),e(F,oco),e(F,zp),e(zp,NZ),e(NZ,rco),e(zp,tco),e(zp,HS),e(HS,aco),e(zp,nco),e(F,sco),e(F,Wp),e(Wp,jZ),e(jZ,lco),e(Wp,ico),e(Wp,US),e(US,dco),e(Wp,cco),e(F,fco),e(F,Qp),e(Qp,qZ),e(qZ,mco),e(Qp,gco),e(Qp,JS),e(JS,hco),e(Qp,pco),e(F,_co),e(F,Hp),e(Hp,GZ),e(GZ,uco),e(Hp,bco),e(Hp,YS),e(YS,vco),e(Hp,Tco),e(F,Fco),e(F,Up),e(Up,OZ),e(OZ,Cco),e(Up,Mco),e(Up,KS),e(KS,Eco),e(Up,yco),e(F,wco),e(F,Jp),e(Jp,XZ),e(XZ,Aco),e(Jp,Lco),e(Jp,ZS),e(ZS,Bco),e(Jp,xco),e(F,kco),e(F,Yp),e(Yp,VZ),e(VZ,Rco),e(Yp,Sco),e(Yp,eP),e(eP,Pco),e(Yp,$co),e(F,Ico),e(F,Kp),e(Kp,zZ),e(zZ,Dco),e(Kp,Nco),e(Kp,oP),e(oP,jco),e(Kp,qco),e(F,Gco),e(F,Zp),e(Zp,WZ),e(WZ,Oco),e(Zp,Xco),e(Zp,rP),e(rP,Vco),e(Zp,zco),e(F,Wco),e(F,e_),e(e_,QZ),e(QZ,Qco),e(e_,Hco),e(e_,tP),e(tP,Uco),e(e_,Jco),e(F,Yco),e(F,o_),e(o_,HZ),e(HZ,Kco),e(o_,Zco),e(o_,aP),e(aP,efo),e(o_,ofo),e(F,rfo),e(F,r_),e(r_,UZ),e(UZ,tfo),e(r_,afo),e(r_,nP),e(nP,nfo),e(r_,sfo),e(F,lfo),e(F,t_),e(t_,JZ),e(JZ,ifo),e(t_,dfo),e(t_,sP),e(sP,cfo),e(t_,ffo),e(F,mfo),e(F,a_),e(a_,YZ),e(YZ,gfo),e(a_,hfo),e(a_,lP),e(lP,pfo),e(a_,_fo),e(F,ufo),e(F,n_),e(n_,KZ),e(KZ,bfo),e(n_,vfo),e(n_,iP),e(iP,Tfo),e(n_,Ffo),e(F,Cfo),e(F,s_),e(s_,ZZ),e(ZZ,Mfo),e(s_,Efo),e(s_,dP),e(dP,yfo),e(s_,wfo),e(F,Afo),e(F,l_),e(l_,eee),e(eee,Lfo),e(l_,Bfo),e(l_,cP),e(cP,xfo),e(l_,kfo),e(F,Rfo),e(F,i_),e(i_,oee),e(oee,Sfo),e(i_,Pfo),e(i_,fP),e(fP,$fo),e(i_,Ifo),e(F,Dfo),e(F,d_),e(d_,ree),e(ree,Nfo),e(d_,jfo),e(d_,mP),e(mP,qfo),e(d_,Gfo),e(F,Ofo),e(F,c_),e(c_,tee),e(tee,Xfo),e(c_,Vfo),e(c_,gP),e(gP,zfo),e(c_,Wfo),e(F,Qfo),e(F,f_),e(f_,aee),e(aee,Hfo),e(f_,Ufo),e(f_,hP),e(hP,Jfo),e(f_,Yfo),e(F,Kfo),e(F,m_),e(m_,nee),e(nee,Zfo),e(m_,emo),e(m_,pP),e(pP,omo),e(m_,rmo),e(F,tmo),e(F,g_),e(g_,see),e(see,amo),e(g_,nmo),e(g_,_P),e(_P,smo),e(g_,lmo),e(F,imo),e(F,h_),e(h_,lee),e(lee,dmo),e(h_,cmo),e(h_,uP),e(uP,fmo),e(h_,mmo),e(F,gmo),e(F,p_),e(p_,iee),e(iee,hmo),e(p_,pmo),e(p_,bP),e(bP,_mo),e(p_,umo),e(F,bmo),e(F,__),e(__,dee),e(dee,vmo),e(__,Tmo),e(__,vP),e(vP,Fmo),e(__,Cmo),e(F,Mmo),e(F,u_),e(u_,cee),e(cee,Emo),e(u_,ymo),e(u_,TP),e(TP,wmo),e(u_,Amo),e(F,Lmo),e(F,b_),e(b_,fee),e(fee,Bmo),e(b_,xmo),e(b_,FP),e(FP,kmo),e(b_,Rmo),e(F,Smo),e(F,v_),e(v_,mee),e(mee,Pmo),e(v_,$mo),e(v_,CP),e(CP,Imo),e(v_,Dmo),e(F,Nmo),e(F,T_),e(T_,gee),e(gee,jmo),e(T_,qmo),e(T_,MP),e(MP,Gmo),e(T_,Omo),e(F,Xmo),e(F,F_),e(F_,hee),e(hee,Vmo),e(F_,zmo),e(F_,EP),e(EP,Wmo),e(F_,Qmo),e(F,Hmo),e(F,C_),e(C_,pee),e(pee,Umo),e(C_,Jmo),e(C_,yP),e(yP,Ymo),e(C_,Kmo),e(F,Zmo),e(F,M_),e(M_,_ee),e(_ee,ego),e(M_,ogo),e(M_,wP),e(wP,rgo),e(M_,tgo),e(F,ago),e(F,E_),e(E_,uee),e(uee,ngo),e(E_,sgo),e(E_,AP),e(AP,lgo),e(E_,igo),e(F,dgo),e(F,y_),e(y_,bee),e(bee,cgo),e(y_,fgo),e(y_,LP),e(LP,mgo),e(y_,ggo),e(F,hgo),e(F,w_),e(w_,vee),e(vee,pgo),e(w_,_go),e(w_,BP),e(BP,ugo),e(w_,bgo),e(F,vgo),e(F,A_),e(A_,Tee),e(Tee,Tgo),e(A_,Fgo),e(A_,xP),e(xP,Cgo),e(A_,Mgo),e(F,Ego),e(F,L_),e(L_,Fee),e(Fee,ygo),e(L_,wgo),e(L_,kP),e(kP,Ago),e(L_,Lgo),e(F,Bgo),e(F,B_),e(B_,Cee),e(Cee,xgo),e(B_,kgo),e(B_,RP),e(RP,Rgo),e(B_,Sgo),e(De,Pgo),e(De,x_),e(x_,$go),e(x_,Mee),e(Mee,Igo),e(x_,Dgo),e(x_,Eee),e(Eee,Ngo),e(De,jgo),e(De,yee),e(yee,qgo),e(De,Ggo),g(e5,De,null),b(c,Hke,u),b(c,Zi,u),e(Zi,k_),e(k_,wee),g(o5,wee,null),e(Zi,Ogo),e(Zi,Aee),e(Aee,Xgo),b(c,Uke,u),b(c,Yo,u),g(r5,Yo,null),e(Yo,Vgo),e(Yo,ed),e(ed,zgo),e(ed,Lee),e(Lee,Wgo),e(ed,Qgo),e(ed,Bee),e(Bee,Hgo),e(ed,Ugo),e(Yo,Jgo),e(Yo,t5),e(t5,Ygo),e(t5,xee),e(xee,Kgo),e(t5,Zgo),e(Yo,eho),e(Yo,zr),g(a5,zr,null),e(zr,oho),e(zr,kee),e(kee,rho),e(zr,tho),e(zr,od),e(od,aho),e(od,Ree),e(Ree,nho),e(od,sho),e(od,See),e(See,lho),e(od,iho),e(zr,dho),e(zr,Pee),e(Pee,cho),e(zr,fho),g(n5,zr,null),e(Yo,mho),e(Yo,Ne),g(s5,Ne,null),e(Ne,gho),e(Ne,$ee),e($ee,hho),e(Ne,pho),e(Ne,za),e(za,_ho),e(za,Iee),e(Iee,uho),e(za,bho),e(za,Dee),e(Dee,vho),e(za,Tho),e(za,Nee),e(Nee,Fho),e(za,Cho),e(Ne,Mho),e(Ne,k),e(k,R_),e(R_,jee),e(jee,Eho),e(R_,yho),e(R_,SP),e(SP,who),e(R_,Aho),e(k,Lho),e(k,S_),e(S_,qee),e(qee,Bho),e(S_,xho),e(S_,PP),e(PP,kho),e(S_,Rho),e(k,Sho),e(k,P_),e(P_,Gee),e(Gee,Pho),e(P_,$ho),e(P_,$P),e($P,Iho),e(P_,Dho),e(k,Nho),e(k,$_),e($_,Oee),e(Oee,jho),e($_,qho),e($_,IP),e(IP,Gho),e($_,Oho),e(k,Xho),e(k,I_),e(I_,Xee),e(Xee,Vho),e(I_,zho),e(I_,DP),e(DP,Who),e(I_,Qho),e(k,Hho),e(k,D_),e(D_,Vee),e(Vee,Uho),e(D_,Jho),e(D_,NP),e(NP,Yho),e(D_,Kho),e(k,Zho),e(k,N_),e(N_,zee),e(zee,epo),e(N_,opo),e(N_,jP),e(jP,rpo),e(N_,tpo),e(k,apo),e(k,j_),e(j_,Wee),e(Wee,npo),e(j_,spo),e(j_,qP),e(qP,lpo),e(j_,ipo),e(k,dpo),e(k,q_),e(q_,Qee),e(Qee,cpo),e(q_,fpo),e(q_,GP),e(GP,mpo),e(q_,gpo),e(k,hpo),e(k,G_),e(G_,Hee),e(Hee,ppo),e(G_,_po),e(G_,OP),e(OP,upo),e(G_,bpo),e(k,vpo),e(k,O_),e(O_,Uee),e(Uee,Tpo),e(O_,Fpo),e(O_,XP),e(XP,Cpo),e(O_,Mpo),e(k,Epo),e(k,X_),e(X_,Jee),e(Jee,ypo),e(X_,wpo),e(X_,VP),e(VP,Apo),e(X_,Lpo),e(k,Bpo),e(k,V_),e(V_,Yee),e(Yee,xpo),e(V_,kpo),e(V_,zP),e(zP,Rpo),e(V_,Spo),e(k,Ppo),e(k,z_),e(z_,Kee),e(Kee,$po),e(z_,Ipo),e(z_,WP),e(WP,Dpo),e(z_,Npo),e(k,jpo),e(k,W_),e(W_,Zee),e(Zee,qpo),e(W_,Gpo),e(W_,QP),e(QP,Opo),e(W_,Xpo),e(k,Vpo),e(k,Q_),e(Q_,eoe),e(eoe,zpo),e(Q_,Wpo),e(Q_,HP),e(HP,Qpo),e(Q_,Hpo),e(k,Upo),e(k,H_),e(H_,ooe),e(ooe,Jpo),e(H_,Ypo),e(H_,UP),e(UP,Kpo),e(H_,Zpo),e(k,e_o),e(k,U_),e(U_,roe),e(roe,o_o),e(U_,r_o),e(U_,JP),e(JP,t_o),e(U_,a_o),e(k,n_o),e(k,J_),e(J_,toe),e(toe,s_o),e(J_,l_o),e(J_,YP),e(YP,i_o),e(J_,d_o),e(k,c_o),e(k,Y_),e(Y_,aoe),e(aoe,f_o),e(Y_,m_o),e(Y_,KP),e(KP,g_o),e(Y_,h_o),e(k,p_o),e(k,K_),e(K_,noe),e(noe,__o),e(K_,u_o),e(K_,ZP),e(ZP,b_o),e(K_,v_o),e(k,T_o),e(k,Z_),e(Z_,soe),e(soe,F_o),e(Z_,C_o),e(Z_,e$),e(e$,M_o),e(Z_,E_o),e(k,y_o),e(k,eu),e(eu,loe),e(loe,w_o),e(eu,A_o),e(eu,o$),e(o$,L_o),e(eu,B_o),e(k,x_o),e(k,ou),e(ou,ioe),e(ioe,k_o),e(ou,R_o),e(ou,r$),e(r$,S_o),e(ou,P_o),e(k,$_o),e(k,ru),e(ru,doe),e(doe,I_o),e(ru,D_o),e(ru,t$),e(t$,N_o),e(ru,j_o),e(k,q_o),e(k,tu),e(tu,coe),e(coe,G_o),e(tu,O_o),e(tu,a$),e(a$,X_o),e(tu,V_o),e(k,z_o),e(k,au),e(au,foe),e(foe,W_o),e(au,Q_o),e(au,n$),e(n$,H_o),e(au,U_o),e(k,J_o),e(k,nu),e(nu,moe),e(moe,Y_o),e(nu,K_o),e(nu,s$),e(s$,Z_o),e(nu,euo),e(k,ouo),e(k,su),e(su,goe),e(goe,ruo),e(su,tuo),e(su,l$),e(l$,auo),e(su,nuo),e(k,suo),e(k,lu),e(lu,hoe),e(hoe,luo),e(lu,iuo),e(lu,i$),e(i$,duo),e(lu,cuo),e(k,fuo),e(k,iu),e(iu,poe),e(poe,muo),e(iu,guo),e(iu,d$),e(d$,huo),e(iu,puo),e(k,_uo),e(k,du),e(du,_oe),e(_oe,uuo),e(du,buo),e(du,c$),e(c$,vuo),e(du,Tuo),e(k,Fuo),e(k,cu),e(cu,uoe),e(uoe,Cuo),e(cu,Muo),e(cu,f$),e(f$,Euo),e(cu,yuo),e(k,wuo),e(k,fu),e(fu,boe),e(boe,Auo),e(fu,Luo),e(fu,m$),e(m$,Buo),e(fu,xuo),e(k,kuo),e(k,mu),e(mu,voe),e(voe,Ruo),e(mu,Suo),e(mu,g$),e(g$,Puo),e(mu,$uo),e(k,Iuo),e(k,gu),e(gu,Toe),e(Toe,Duo),e(gu,Nuo),e(gu,h$),e(h$,juo),e(gu,quo),e(k,Guo),e(k,hu),e(hu,Foe),e(Foe,Ouo),e(hu,Xuo),e(hu,p$),e(p$,Vuo),e(hu,zuo),e(k,Wuo),e(k,pu),e(pu,Coe),e(Coe,Quo),e(pu,Huo),e(pu,_$),e(_$,Uuo),e(pu,Juo),e(k,Yuo),e(k,_u),e(_u,Moe),e(Moe,Kuo),e(_u,Zuo),e(_u,u$),e(u$,e1o),e(_u,o1o),e(Ne,r1o),e(Ne,uu),e(uu,t1o),e(uu,Eoe),e(Eoe,a1o),e(uu,n1o),e(uu,yoe),e(yoe,s1o),e(Ne,l1o),e(Ne,woe),e(woe,i1o),e(Ne,d1o),g(l5,Ne,null),b(c,Jke,u),b(c,rd,u),e(rd,bu),e(bu,Aoe),g(i5,Aoe,null),e(rd,c1o),e(rd,Loe),e(Loe,f1o),b(c,Yke,u),b(c,Ko,u),g(d5,Ko,null),e(Ko,m1o),e(Ko,td),e(td,g1o),e(td,Boe),e(Boe,h1o),e(td,p1o),e(td,xoe),e(xoe,_1o),e(td,u1o),e(Ko,b1o),e(Ko,c5),e(c5,v1o),e(c5,koe),e(koe,T1o),e(c5,F1o),e(Ko,C1o),e(Ko,Wr),g(f5,Wr,null),e(Wr,M1o),e(Wr,Roe),e(Roe,E1o),e(Wr,y1o),e(Wr,ad),e(ad,w1o),e(ad,Soe),e(Soe,A1o),e(ad,L1o),e(ad,Poe),e(Poe,B1o),e(ad,x1o),e(Wr,k1o),e(Wr,$oe),e($oe,R1o),e(Wr,S1o),g(m5,Wr,null),e(Ko,P1o),e(Ko,je),g(g5,je,null),e(je,$1o),e(je,Ioe),e(Ioe,I1o),e(je,D1o),e(je,Wa),e(Wa,N1o),e(Wa,Doe),e(Doe,j1o),e(Wa,q1o),e(Wa,Noe),e(Noe,G1o),e(Wa,O1o),e(Wa,joe),e(joe,X1o),e(Wa,V1o),e(je,z1o),e(je,$),e($,vu),e(vu,qoe),e(qoe,W1o),e(vu,Q1o),e(vu,b$),e(b$,H1o),e(vu,U1o),e($,J1o),e($,Tu),e(Tu,Goe),e(Goe,Y1o),e(Tu,K1o),e(Tu,v$),e(v$,Z1o),e(Tu,e4o),e($,o4o),e($,Fu),e(Fu,Ooe),e(Ooe,r4o),e(Fu,t4o),e(Fu,T$),e(T$,a4o),e(Fu,n4o),e($,s4o),e($,Cu),e(Cu,Xoe),e(Xoe,l4o),e(Cu,i4o),e(Cu,F$),e(F$,d4o),e(Cu,c4o),e($,f4o),e($,Mu),e(Mu,Voe),e(Voe,m4o),e(Mu,g4o),e(Mu,C$),e(C$,h4o),e(Mu,p4o),e($,_4o),e($,Eu),e(Eu,zoe),e(zoe,u4o),e(Eu,b4o),e(Eu,M$),e(M$,v4o),e(Eu,T4o),e($,F4o),e($,yu),e(yu,Woe),e(Woe,C4o),e(yu,M4o),e(yu,E$),e(E$,E4o),e(yu,y4o),e($,w4o),e($,wu),e(wu,Qoe),e(Qoe,A4o),e(wu,L4o),e(wu,y$),e(y$,B4o),e(wu,x4o),e($,k4o),e($,Au),e(Au,Hoe),e(Hoe,R4o),e(Au,S4o),e(Au,w$),e(w$,P4o),e(Au,$4o),e($,I4o),e($,Lu),e(Lu,Uoe),e(Uoe,D4o),e(Lu,N4o),e(Lu,A$),e(A$,j4o),e(Lu,q4o),e($,G4o),e($,Bu),e(Bu,Joe),e(Joe,O4o),e(Bu,X4o),e(Bu,L$),e(L$,V4o),e(Bu,z4o),e($,W4o),e($,xu),e(xu,Yoe),e(Yoe,Q4o),e(xu,H4o),e(xu,B$),e(B$,U4o),e(xu,J4o),e($,Y4o),e($,ku),e(ku,Koe),e(Koe,K4o),e(ku,Z4o),e(ku,x$),e(x$,ebo),e(ku,obo),e($,rbo),e($,Ru),e(Ru,Zoe),e(Zoe,tbo),e(Ru,abo),e(Ru,k$),e(k$,nbo),e(Ru,sbo),e($,lbo),e($,Su),e(Su,ere),e(ere,ibo),e(Su,dbo),e(Su,R$),e(R$,cbo),e(Su,fbo),e($,mbo),e($,Pu),e(Pu,ore),e(ore,gbo),e(Pu,hbo),e(Pu,S$),e(S$,pbo),e(Pu,_bo),e($,ubo),e($,$u),e($u,rre),e(rre,bbo),e($u,vbo),e($u,P$),e(P$,Tbo),e($u,Fbo),e($,Cbo),e($,Iu),e(Iu,tre),e(tre,Mbo),e(Iu,Ebo),e(Iu,$$),e($$,ybo),e(Iu,wbo),e($,Abo),e($,Du),e(Du,are),e(are,Lbo),e(Du,Bbo),e(Du,I$),e(I$,xbo),e(Du,kbo),e($,Rbo),e($,Nu),e(Nu,nre),e(nre,Sbo),e(Nu,Pbo),e(Nu,D$),e(D$,$bo),e(Nu,Ibo),e($,Dbo),e($,ju),e(ju,sre),e(sre,Nbo),e(ju,jbo),e(ju,N$),e(N$,qbo),e(ju,Gbo),e($,Obo),e($,qu),e(qu,lre),e(lre,Xbo),e(qu,Vbo),e(qu,j$),e(j$,zbo),e(qu,Wbo),e($,Qbo),e($,Gu),e(Gu,ire),e(ire,Hbo),e(Gu,Ubo),e(Gu,q$),e(q$,Jbo),e(Gu,Ybo),e($,Kbo),e($,Ou),e(Ou,dre),e(dre,Zbo),e(Ou,e3o),e(Ou,G$),e(G$,o3o),e(Ou,r3o),e($,t3o),e($,Xu),e(Xu,cre),e(cre,a3o),e(Xu,n3o),e(Xu,O$),e(O$,s3o),e(Xu,l3o),e($,i3o),e($,Vu),e(Vu,fre),e(fre,d3o),e(Vu,c3o),e(Vu,X$),e(X$,f3o),e(Vu,m3o),e($,g3o),e($,zu),e(zu,mre),e(mre,h3o),e(zu,p3o),e(zu,V$),e(V$,_3o),e(zu,u3o),e($,b3o),e($,Wu),e(Wu,gre),e(gre,v3o),e(Wu,T3o),e(Wu,z$),e(z$,F3o),e(Wu,C3o),e($,M3o),e($,Qu),e(Qu,hre),e(hre,E3o),e(Qu,y3o),e(Qu,W$),e(W$,w3o),e(Qu,A3o),e($,L3o),e($,Hu),e(Hu,pre),e(pre,B3o),e(Hu,x3o),e(Hu,Q$),e(Q$,k3o),e(Hu,R3o),e($,S3o),e($,Uu),e(Uu,_re),e(_re,P3o),e(Uu,$3o),e(Uu,H$),e(H$,I3o),e(Uu,D3o),e($,N3o),e($,Ju),e(Ju,ure),e(ure,j3o),e(Ju,q3o),e(Ju,U$),e(U$,G3o),e(Ju,O3o),e($,X3o),e($,Yu),e(Yu,bre),e(bre,V3o),e(Yu,z3o),e(Yu,J$),e(J$,W3o),e(Yu,Q3o),e($,H3o),e($,Ku),e(Ku,vre),e(vre,U3o),e(Ku,J3o),e(Ku,Y$),e(Y$,Y3o),e(Ku,K3o),e($,Z3o),e($,Zu),e(Zu,Tre),e(Tre,e2o),e(Zu,o2o),e(Zu,K$),e(K$,r2o),e(Zu,t2o),e(je,a2o),e(je,e1),e(e1,n2o),e(e1,Fre),e(Fre,s2o),e(e1,l2o),e(e1,Cre),e(Cre,i2o),e(je,d2o),e(je,Mre),e(Mre,c2o),e(je,f2o),g(h5,je,null),b(c,Kke,u),b(c,nd,u),e(nd,o1),e(o1,Ere),g(p5,Ere,null),e(nd,m2o),e(nd,yre),e(yre,g2o),b(c,Zke,u),b(c,Zo,u),g(_5,Zo,null),e(Zo,h2o),e(Zo,sd),e(sd,p2o),e(sd,wre),e(wre,_2o),e(sd,u2o),e(sd,Are),e(Are,b2o),e(sd,v2o),e(Zo,T2o),e(Zo,u5),e(u5,F2o),e(u5,Lre),e(Lre,C2o),e(u5,M2o),e(Zo,E2o),e(Zo,Qr),g(b5,Qr,null),e(Qr,y2o),e(Qr,Bre),e(Bre,w2o),e(Qr,A2o),e(Qr,ld),e(ld,L2o),e(ld,xre),e(xre,B2o),e(ld,x2o),e(ld,kre),e(kre,k2o),e(ld,R2o),e(Qr,S2o),e(Qr,Rre),e(Rre,P2o),e(Qr,$2o),g(v5,Qr,null),e(Zo,I2o),e(Zo,qe),g(T5,qe,null),e(qe,D2o),e(qe,Sre),e(Sre,N2o),e(qe,j2o),e(qe,Qa),e(Qa,q2o),e(Qa,Pre),e(Pre,G2o),e(Qa,O2o),e(Qa,$re),e($re,X2o),e(Qa,V2o),e(Qa,Ire),e(Ire,z2o),e(Qa,W2o),e(qe,Q2o),e(qe,I),e(I,r1),e(r1,Dre),e(Dre,H2o),e(r1,U2o),e(r1,Z$),e(Z$,J2o),e(r1,Y2o),e(I,K2o),e(I,t1),e(t1,Nre),e(Nre,Z2o),e(t1,evo),e(t1,eI),e(eI,ovo),e(t1,rvo),e(I,tvo),e(I,a1),e(a1,jre),e(jre,avo),e(a1,nvo),e(a1,oI),e(oI,svo),e(a1,lvo),e(I,ivo),e(I,n1),e(n1,qre),e(qre,dvo),e(n1,cvo),e(n1,rI),e(rI,fvo),e(n1,mvo),e(I,gvo),e(I,s1),e(s1,Gre),e(Gre,hvo),e(s1,pvo),e(s1,tI),e(tI,_vo),e(s1,uvo),e(I,bvo),e(I,l1),e(l1,Ore),e(Ore,vvo),e(l1,Tvo),e(l1,aI),e(aI,Fvo),e(l1,Cvo),e(I,Mvo),e(I,i1),e(i1,Xre),e(Xre,Evo),e(i1,yvo),e(i1,nI),e(nI,wvo),e(i1,Avo),e(I,Lvo),e(I,d1),e(d1,Vre),e(Vre,Bvo),e(d1,xvo),e(d1,sI),e(sI,kvo),e(d1,Rvo),e(I,Svo),e(I,c1),e(c1,zre),e(zre,Pvo),e(c1,$vo),e(c1,lI),e(lI,Ivo),e(c1,Dvo),e(I,Nvo),e(I,f1),e(f1,Wre),e(Wre,jvo),e(f1,qvo),e(f1,iI),e(iI,Gvo),e(f1,Ovo),e(I,Xvo),e(I,m1),e(m1,Qre),e(Qre,Vvo),e(m1,zvo),e(m1,dI),e(dI,Wvo),e(m1,Qvo),e(I,Hvo),e(I,g1),e(g1,Hre),e(Hre,Uvo),e(g1,Jvo),e(g1,cI),e(cI,Yvo),e(g1,Kvo),e(I,Zvo),e(I,h1),e(h1,Ure),e(Ure,e6o),e(h1,o6o),e(h1,fI),e(fI,r6o),e(h1,t6o),e(I,a6o),e(I,p1),e(p1,Jre),e(Jre,n6o),e(p1,s6o),e(p1,mI),e(mI,l6o),e(p1,i6o),e(I,d6o),e(I,_1),e(_1,Yre),e(Yre,c6o),e(_1,f6o),e(_1,gI),e(gI,m6o),e(_1,g6o),e(I,h6o),e(I,u1),e(u1,Kre),e(Kre,p6o),e(u1,_6o),e(u1,hI),e(hI,u6o),e(u1,b6o),e(I,v6o),e(I,b1),e(b1,Zre),e(Zre,T6o),e(b1,F6o),e(b1,pI),e(pI,C6o),e(b1,M6o),e(I,E6o),e(I,v1),e(v1,ete),e(ete,y6o),e(v1,w6o),e(v1,_I),e(_I,A6o),e(v1,L6o),e(I,B6o),e(I,T1),e(T1,ote),e(ote,x6o),e(T1,k6o),e(T1,uI),e(uI,R6o),e(T1,S6o),e(I,P6o),e(I,F1),e(F1,rte),e(rte,$6o),e(F1,I6o),e(F1,bI),e(bI,D6o),e(F1,N6o),e(I,j6o),e(I,C1),e(C1,tte),e(tte,q6o),e(C1,G6o),e(C1,vI),e(vI,O6o),e(C1,X6o),e(I,V6o),e(I,M1),e(M1,ate),e(ate,z6o),e(M1,W6o),e(M1,TI),e(TI,Q6o),e(M1,H6o),e(I,U6o),e(I,E1),e(E1,nte),e(nte,J6o),e(E1,Y6o),e(E1,FI),e(FI,K6o),e(E1,Z6o),e(I,eTo),e(I,y1),e(y1,ste),e(ste,oTo),e(y1,rTo),e(y1,CI),e(CI,tTo),e(y1,aTo),e(I,nTo),e(I,w1),e(w1,lte),e(lte,sTo),e(w1,lTo),e(w1,MI),e(MI,iTo),e(w1,dTo),e(I,cTo),e(I,A1),e(A1,ite),e(ite,fTo),e(A1,mTo),e(A1,EI),e(EI,gTo),e(A1,hTo),e(I,pTo),e(I,L1),e(L1,dte),e(dte,_To),e(L1,uTo),e(L1,yI),e(yI,bTo),e(L1,vTo),e(I,TTo),e(I,B1),e(B1,cte),e(cte,FTo),e(B1,CTo),e(B1,wI),e(wI,MTo),e(B1,ETo),e(I,yTo),e(I,x1),e(x1,fte),e(fte,wTo),e(x1,ATo),e(x1,AI),e(AI,LTo),e(x1,BTo),e(I,xTo),e(I,k1),e(k1,mte),e(mte,kTo),e(k1,RTo),e(k1,LI),e(LI,STo),e(k1,PTo),e(I,$To),e(I,R1),e(R1,gte),e(gte,ITo),e(R1,DTo),e(R1,hte),e(hte,NTo),e(R1,jTo),e(I,qTo),e(I,S1),e(S1,pte),e(pte,GTo),e(S1,OTo),e(S1,BI),e(BI,XTo),e(S1,VTo),e(I,zTo),e(I,P1),e(P1,_te),e(_te,WTo),e(P1,QTo),e(P1,xI),e(xI,HTo),e(P1,UTo),e(I,JTo),e(I,$1),e($1,ute),e(ute,YTo),e($1,KTo),e($1,kI),e(kI,ZTo),e($1,e7o),e(I,o7o),e(I,I1),e(I1,bte),e(bte,r7o),e(I1,t7o),e(I1,RI),e(RI,a7o),e(I1,n7o),e(qe,s7o),e(qe,D1),e(D1,l7o),e(D1,vte),e(vte,i7o),e(D1,d7o),e(D1,Tte),e(Tte,c7o),e(qe,f7o),e(qe,Fte),e(Fte,m7o),e(qe,g7o),g(F5,qe,null),b(c,eRe,u),b(c,id,u),e(id,N1),e(N1,Cte),g(C5,Cte,null),e(id,h7o),e(id,Mte),e(Mte,p7o),b(c,oRe,u),b(c,er,u),g(M5,er,null),e(er,_7o),e(er,dd),e(dd,u7o),e(dd,Ete),e(Ete,b7o),e(dd,v7o),e(dd,yte),e(yte,T7o),e(dd,F7o),e(er,C7o),e(er,E5),e(E5,M7o),e(E5,wte),e(wte,E7o),e(E5,y7o),e(er,w7o),e(er,Hr),g(y5,Hr,null),e(Hr,A7o),e(Hr,Ate),e(Ate,L7o),e(Hr,B7o),e(Hr,cd),e(cd,x7o),e(cd,Lte),e(Lte,k7o),e(cd,R7o),e(cd,Bte),e(Bte,S7o),e(cd,P7o),e(Hr,$7o),e(Hr,xte),e(xte,I7o),e(Hr,D7o),g(w5,Hr,null),e(er,N7o),e(er,Ge),g(A5,Ge,null),e(Ge,j7o),e(Ge,kte),e(kte,q7o),e(Ge,G7o),e(Ge,Ha),e(Ha,O7o),e(Ha,Rte),e(Rte,X7o),e(Ha,V7o),e(Ha,Ste),e(Ste,z7o),e(Ha,W7o),e(Ha,Pte),e(Pte,Q7o),e(Ha,H7o),e(Ge,U7o),e(Ge,se),e(se,j1),e(j1,$te),e($te,J7o),e(j1,Y7o),e(j1,SI),e(SI,K7o),e(j1,Z7o),e(se,eFo),e(se,q1),e(q1,Ite),e(Ite,oFo),e(q1,rFo),e(q1,PI),e(PI,tFo),e(q1,aFo),e(se,nFo),e(se,G1),e(G1,Dte),e(Dte,sFo),e(G1,lFo),e(G1,$I),e($I,iFo),e(G1,dFo),e(se,cFo),e(se,O1),e(O1,Nte),e(Nte,fFo),e(O1,mFo),e(O1,II),e(II,gFo),e(O1,hFo),e(se,pFo),e(se,X1),e(X1,jte),e(jte,_Fo),e(X1,uFo),e(X1,DI),e(DI,bFo),e(X1,vFo),e(se,TFo),e(se,V1),e(V1,qte),e(qte,FFo),e(V1,CFo),e(V1,NI),e(NI,MFo),e(V1,EFo),e(se,yFo),e(se,z1),e(z1,Gte),e(Gte,wFo),e(z1,AFo),e(z1,jI),e(jI,LFo),e(z1,BFo),e(se,xFo),e(se,W1),e(W1,Ote),e(Ote,kFo),e(W1,RFo),e(W1,qI),e(qI,SFo),e(W1,PFo),e(se,$Fo),e(se,Q1),e(Q1,Xte),e(Xte,IFo),e(Q1,DFo),e(Q1,GI),e(GI,NFo),e(Q1,jFo),e(se,qFo),e(se,H1),e(H1,Vte),e(Vte,GFo),e(H1,OFo),e(H1,OI),e(OI,XFo),e(H1,VFo),e(se,zFo),e(se,U1),e(U1,zte),e(zte,WFo),e(U1,QFo),e(U1,XI),e(XI,HFo),e(U1,UFo),e(se,JFo),e(se,J1),e(J1,Wte),e(Wte,YFo),e(J1,KFo),e(J1,VI),e(VI,ZFo),e(J1,eCo),e(se,oCo),e(se,Y1),e(Y1,Qte),e(Qte,rCo),e(Y1,tCo),e(Y1,zI),e(zI,aCo),e(Y1,nCo),e(se,sCo),e(se,K1),e(K1,Hte),e(Hte,lCo),e(K1,iCo),e(K1,WI),e(WI,dCo),e(K1,cCo),e(se,fCo),e(se,Z1),e(Z1,Ute),e(Ute,mCo),e(Z1,gCo),e(Z1,QI),e(QI,hCo),e(Z1,pCo),e(se,_Co),e(se,e4),e(e4,Jte),e(Jte,uCo),e(e4,bCo),e(e4,HI),e(HI,vCo),e(e4,TCo),e(Ge,FCo),e(Ge,o4),e(o4,CCo),e(o4,Yte),e(Yte,MCo),e(o4,ECo),e(o4,Kte),e(Kte,yCo),e(Ge,wCo),e(Ge,Zte),e(Zte,ACo),e(Ge,LCo),g(L5,Ge,null),b(c,rRe,u),b(c,fd,u),e(fd,r4),e(r4,eae),g(B5,eae,null),e(fd,BCo),e(fd,oae),e(oae,xCo),b(c,tRe,u),b(c,or,u),g(x5,or,null),e(or,kCo),e(or,md),e(md,RCo),e(md,rae),e(rae,SCo),e(md,PCo),e(md,tae),e(tae,$Co),e(md,ICo),e(or,DCo),e(or,k5),e(k5,NCo),e(k5,aae),e(aae,jCo),e(k5,qCo),e(or,GCo),e(or,Ur),g(R5,Ur,null),e(Ur,OCo),e(Ur,nae),e(nae,XCo),e(Ur,VCo),e(Ur,gd),e(gd,zCo),e(gd,sae),e(sae,WCo),e(gd,QCo),e(gd,lae),e(lae,HCo),e(gd,UCo),e(Ur,JCo),e(Ur,iae),e(iae,YCo),e(Ur,KCo),g(S5,Ur,null),e(or,ZCo),e(or,Oe),g(P5,Oe,null),e(Oe,eMo),e(Oe,dae),e(dae,oMo),e(Oe,rMo),e(Oe,Ua),e(Ua,tMo),e(Ua,cae),e(cae,aMo),e(Ua,nMo),e(Ua,fae),e(fae,sMo),e(Ua,lMo),e(Ua,mae),e(mae,iMo),e(Ua,dMo),e(Oe,cMo),e(Oe,A),e(A,t4),e(t4,gae),e(gae,fMo),e(t4,mMo),e(t4,UI),e(UI,gMo),e(t4,hMo),e(A,pMo),e(A,a4),e(a4,hae),e(hae,_Mo),e(a4,uMo),e(a4,JI),e(JI,bMo),e(a4,vMo),e(A,TMo),e(A,n4),e(n4,pae),e(pae,FMo),e(n4,CMo),e(n4,YI),e(YI,MMo),e(n4,EMo),e(A,yMo),e(A,s4),e(s4,_ae),e(_ae,wMo),e(s4,AMo),e(s4,KI),e(KI,LMo),e(s4,BMo),e(A,xMo),e(A,l4),e(l4,uae),e(uae,kMo),e(l4,RMo),e(l4,ZI),e(ZI,SMo),e(l4,PMo),e(A,$Mo),e(A,i4),e(i4,bae),e(bae,IMo),e(i4,DMo),e(i4,eD),e(eD,NMo),e(i4,jMo),e(A,qMo),e(A,d4),e(d4,vae),e(vae,GMo),e(d4,OMo),e(d4,oD),e(oD,XMo),e(d4,VMo),e(A,zMo),e(A,c4),e(c4,Tae),e(Tae,WMo),e(c4,QMo),e(c4,rD),e(rD,HMo),e(c4,UMo),e(A,JMo),e(A,f4),e(f4,Fae),e(Fae,YMo),e(f4,KMo),e(f4,tD),e(tD,ZMo),e(f4,eEo),e(A,oEo),e(A,m4),e(m4,Cae),e(Cae,rEo),e(m4,tEo),e(m4,aD),e(aD,aEo),e(m4,nEo),e(A,sEo),e(A,g4),e(g4,Mae),e(Mae,lEo),e(g4,iEo),e(g4,nD),e(nD,dEo),e(g4,cEo),e(A,fEo),e(A,h4),e(h4,Eae),e(Eae,mEo),e(h4,gEo),e(h4,sD),e(sD,hEo),e(h4,pEo),e(A,_Eo),e(A,p4),e(p4,yae),e(yae,uEo),e(p4,bEo),e(p4,lD),e(lD,vEo),e(p4,TEo),e(A,FEo),e(A,_4),e(_4,wae),e(wae,CEo),e(_4,MEo),e(_4,iD),e(iD,EEo),e(_4,yEo),e(A,wEo),e(A,u4),e(u4,Aae),e(Aae,AEo),e(u4,LEo),e(u4,dD),e(dD,BEo),e(u4,xEo),e(A,kEo),e(A,b4),e(b4,Lae),e(Lae,REo),e(b4,SEo),e(b4,cD),e(cD,PEo),e(b4,$Eo),e(A,IEo),e(A,v4),e(v4,Bae),e(Bae,DEo),e(v4,NEo),e(v4,fD),e(fD,jEo),e(v4,qEo),e(A,GEo),e(A,T4),e(T4,xae),e(xae,OEo),e(T4,XEo),e(T4,mD),e(mD,VEo),e(T4,zEo),e(A,WEo),e(A,F4),e(F4,kae),e(kae,QEo),e(F4,HEo),e(F4,gD),e(gD,UEo),e(F4,JEo),e(A,YEo),e(A,C4),e(C4,Rae),e(Rae,KEo),e(C4,ZEo),e(C4,hD),e(hD,e5o),e(C4,o5o),e(A,r5o),e(A,M4),e(M4,Sae),e(Sae,t5o),e(M4,a5o),e(M4,pD),e(pD,n5o),e(M4,s5o),e(A,l5o),e(A,E4),e(E4,Pae),e(Pae,i5o),e(E4,d5o),e(E4,_D),e(_D,c5o),e(E4,f5o),e(A,m5o),e(A,y4),e(y4,$ae),e($ae,g5o),e(y4,h5o),e(y4,uD),e(uD,p5o),e(y4,_5o),e(A,u5o),e(A,w4),e(w4,Iae),e(Iae,b5o),e(w4,v5o),e(w4,bD),e(bD,T5o),e(w4,F5o),e(A,C5o),e(A,A4),e(A4,Dae),e(Dae,M5o),e(A4,E5o),e(A4,vD),e(vD,y5o),e(A4,w5o),e(A,A5o),e(A,L4),e(L4,Nae),e(Nae,L5o),e(L4,B5o),e(L4,TD),e(TD,x5o),e(L4,k5o),e(A,R5o),e(A,B4),e(B4,jae),e(jae,S5o),e(B4,P5o),e(B4,FD),e(FD,$5o),e(B4,I5o),e(A,D5o),e(A,x4),e(x4,qae),e(qae,N5o),e(x4,j5o),e(x4,CD),e(CD,q5o),e(x4,G5o),e(A,O5o),e(A,k4),e(k4,Gae),e(Gae,X5o),e(k4,V5o),e(k4,MD),e(MD,z5o),e(k4,W5o),e(A,Q5o),e(A,R4),e(R4,Oae),e(Oae,H5o),e(R4,U5o),e(R4,ED),e(ED,J5o),e(R4,Y5o),e(A,K5o),e(A,S4),e(S4,Xae),e(Xae,Z5o),e(S4,eyo),e(S4,yD),e(yD,oyo),e(S4,ryo),e(A,tyo),e(A,P4),e(P4,Vae),e(Vae,ayo),e(P4,nyo),e(P4,wD),e(wD,syo),e(P4,lyo),e(A,iyo),e(A,$4),e($4,zae),e(zae,dyo),e($4,cyo),e($4,AD),e(AD,fyo),e($4,myo),e(A,gyo),e(A,I4),e(I4,Wae),e(Wae,hyo),e(I4,pyo),e(I4,LD),e(LD,_yo),e(I4,uyo),e(A,byo),e(A,D4),e(D4,Qae),e(Qae,vyo),e(D4,Tyo),e(D4,BD),e(BD,Fyo),e(D4,Cyo),e(A,Myo),e(A,N4),e(N4,Hae),e(Hae,Eyo),e(N4,yyo),e(N4,xD),e(xD,wyo),e(N4,Ayo),e(A,Lyo),e(A,j4),e(j4,Uae),e(Uae,Byo),e(j4,xyo),e(j4,kD),e(kD,kyo),e(j4,Ryo),e(A,Syo),e(A,q4),e(q4,Jae),e(Jae,Pyo),e(q4,$yo),e(q4,RD),e(RD,Iyo),e(q4,Dyo),e(A,Nyo),e(A,G4),e(G4,Yae),e(Yae,jyo),e(G4,qyo),e(G4,SD),e(SD,Gyo),e(G4,Oyo),e(A,Xyo),e(A,O4),e(O4,Kae),e(Kae,Vyo),e(O4,zyo),e(O4,PD),e(PD,Wyo),e(O4,Qyo),e(A,Hyo),e(A,X4),e(X4,Zae),e(Zae,Uyo),e(X4,Jyo),e(X4,$D),e($D,Yyo),e(X4,Kyo),e(A,Zyo),e(A,V4),e(V4,ene),e(ene,ewo),e(V4,owo),e(V4,ID),e(ID,rwo),e(V4,two),e(A,awo),e(A,z4),e(z4,one),e(one,nwo),e(z4,swo),e(z4,DD),e(DD,lwo),e(z4,iwo),e(A,dwo),e(A,W4),e(W4,rne),e(rne,cwo),e(W4,fwo),e(W4,ND),e(ND,mwo),e(W4,gwo),e(A,hwo),e(A,Q4),e(Q4,tne),e(tne,pwo),e(Q4,_wo),e(Q4,jD),e(jD,uwo),e(Q4,bwo),e(A,vwo),e(A,H4),e(H4,ane),e(ane,Two),e(H4,Fwo),e(H4,qD),e(qD,Cwo),e(H4,Mwo),e(Oe,Ewo),e(Oe,U4),e(U4,ywo),e(U4,nne),e(nne,wwo),e(U4,Awo),e(U4,sne),e(sne,Lwo),e(Oe,Bwo),e(Oe,lne),e(lne,xwo),e(Oe,kwo),g($5,Oe,null),b(c,aRe,u),b(c,hd,u),e(hd,J4),e(J4,ine),g(I5,ine,null),e(hd,Rwo),e(hd,dne),e(dne,Swo),b(c,nRe,u),b(c,rr,u),g(D5,rr,null),e(rr,Pwo),e(rr,pd),e(pd,$wo),e(pd,cne),e(cne,Iwo),e(pd,Dwo),e(pd,fne),e(fne,Nwo),e(pd,jwo),e(rr,qwo),e(rr,N5),e(N5,Gwo),e(N5,mne),e(mne,Owo),e(N5,Xwo),e(rr,Vwo),e(rr,Jr),g(j5,Jr,null),e(Jr,zwo),e(Jr,gne),e(gne,Wwo),e(Jr,Qwo),e(Jr,_d),e(_d,Hwo),e(_d,hne),e(hne,Uwo),e(_d,Jwo),e(_d,pne),e(pne,Ywo),e(_d,Kwo),e(Jr,Zwo),e(Jr,_ne),e(_ne,eAo),e(Jr,oAo),g(q5,Jr,null),e(rr,rAo),e(rr,Xe),g(G5,Xe,null),e(Xe,tAo),e(Xe,une),e(une,aAo),e(Xe,nAo),e(Xe,Ja),e(Ja,sAo),e(Ja,bne),e(bne,lAo),e(Ja,iAo),e(Ja,vne),e(vne,dAo),e(Ja,cAo),e(Ja,Tne),e(Tne,fAo),e(Ja,mAo),e(Xe,gAo),e(Xe,G),e(G,Y4),e(Y4,Fne),e(Fne,hAo),e(Y4,pAo),e(Y4,GD),e(GD,_Ao),e(Y4,uAo),e(G,bAo),e(G,K4),e(K4,Cne),e(Cne,vAo),e(K4,TAo),e(K4,OD),e(OD,FAo),e(K4,CAo),e(G,MAo),e(G,Z4),e(Z4,Mne),e(Mne,EAo),e(Z4,yAo),e(Z4,XD),e(XD,wAo),e(Z4,AAo),e(G,LAo),e(G,eb),e(eb,Ene),e(Ene,BAo),e(eb,xAo),e(eb,VD),e(VD,kAo),e(eb,RAo),e(G,SAo),e(G,ob),e(ob,yne),e(yne,PAo),e(ob,$Ao),e(ob,zD),e(zD,IAo),e(ob,DAo),e(G,NAo),e(G,rb),e(rb,wne),e(wne,jAo),e(rb,qAo),e(rb,WD),e(WD,GAo),e(rb,OAo),e(G,XAo),e(G,tb),e(tb,Ane),e(Ane,VAo),e(tb,zAo),e(tb,QD),e(QD,WAo),e(tb,QAo),e(G,HAo),e(G,ab),e(ab,Lne),e(Lne,UAo),e(ab,JAo),e(ab,HD),e(HD,YAo),e(ab,KAo),e(G,ZAo),e(G,nb),e(nb,Bne),e(Bne,e0o),e(nb,o0o),e(nb,UD),e(UD,r0o),e(nb,t0o),e(G,a0o),e(G,sb),e(sb,xne),e(xne,n0o),e(sb,s0o),e(sb,JD),e(JD,l0o),e(sb,i0o),e(G,d0o),e(G,lb),e(lb,kne),e(kne,c0o),e(lb,f0o),e(lb,YD),e(YD,m0o),e(lb,g0o),e(G,h0o),e(G,ib),e(ib,Rne),e(Rne,p0o),e(ib,_0o),e(ib,KD),e(KD,u0o),e(ib,b0o),e(G,v0o),e(G,db),e(db,Sne),e(Sne,T0o),e(db,F0o),e(db,ZD),e(ZD,C0o),e(db,M0o),e(G,E0o),e(G,cb),e(cb,Pne),e(Pne,y0o),e(cb,w0o),e(cb,eN),e(eN,A0o),e(cb,L0o),e(G,B0o),e(G,fb),e(fb,$ne),e($ne,x0o),e(fb,k0o),e(fb,oN),e(oN,R0o),e(fb,S0o),e(G,P0o),e(G,mb),e(mb,Ine),e(Ine,$0o),e(mb,I0o),e(mb,rN),e(rN,D0o),e(mb,N0o),e(G,j0o),e(G,gb),e(gb,Dne),e(Dne,q0o),e(gb,G0o),e(gb,tN),e(tN,O0o),e(gb,X0o),e(G,V0o),e(G,hb),e(hb,Nne),e(Nne,z0o),e(hb,W0o),e(hb,aN),e(aN,Q0o),e(hb,H0o),e(G,U0o),e(G,pb),e(pb,jne),e(jne,J0o),e(pb,Y0o),e(pb,nN),e(nN,K0o),e(pb,Z0o),e(G,eLo),e(G,_b),e(_b,qne),e(qne,oLo),e(_b,rLo),e(_b,sN),e(sN,tLo),e(_b,aLo),e(G,nLo),e(G,ub),e(ub,Gne),e(Gne,sLo),e(ub,lLo),e(ub,lN),e(lN,iLo),e(ub,dLo),e(G,cLo),e(G,bb),e(bb,One),e(One,fLo),e(bb,mLo),e(bb,iN),e(iN,gLo),e(bb,hLo),e(G,pLo),e(G,vb),e(vb,Xne),e(Xne,_Lo),e(vb,uLo),e(vb,dN),e(dN,bLo),e(vb,vLo),e(G,TLo),e(G,Tb),e(Tb,Vne),e(Vne,FLo),e(Tb,CLo),e(Tb,cN),e(cN,MLo),e(Tb,ELo),e(G,yLo),e(G,Fb),e(Fb,zne),e(zne,wLo),e(Fb,ALo),e(Fb,fN),e(fN,LLo),e(Fb,BLo),e(G,xLo),e(G,Cb),e(Cb,Wne),e(Wne,kLo),e(Cb,RLo),e(Cb,mN),e(mN,SLo),e(Cb,PLo),e(G,$Lo),e(G,Mb),e(Mb,Qne),e(Qne,ILo),e(Mb,DLo),e(Mb,gN),e(gN,NLo),e(Mb,jLo),e(G,qLo),e(G,Eb),e(Eb,Hne),e(Hne,GLo),e(Eb,OLo),e(Eb,hN),e(hN,XLo),e(Eb,VLo),e(Xe,zLo),e(Xe,yb),e(yb,WLo),e(yb,Une),e(Une,QLo),e(yb,HLo),e(yb,Jne),e(Jne,ULo),e(Xe,JLo),e(Xe,Yne),e(Yne,YLo),e(Xe,KLo),g(O5,Xe,null),b(c,sRe,u),b(c,ud,u),e(ud,wb),e(wb,Kne),g(X5,Kne,null),e(ud,ZLo),e(ud,Zne),e(Zne,e8o),b(c,lRe,u),b(c,tr,u),g(V5,tr,null),e(tr,o8o),e(tr,bd),e(bd,r8o),e(bd,ese),e(ese,t8o),e(bd,a8o),e(bd,ose),e(ose,n8o),e(bd,s8o),e(tr,l8o),e(tr,z5),e(z5,i8o),e(z5,rse),e(rse,d8o),e(z5,c8o),e(tr,f8o),e(tr,Yr),g(W5,Yr,null),e(Yr,m8o),e(Yr,tse),e(tse,g8o),e(Yr,h8o),e(Yr,vd),e(vd,p8o),e(vd,ase),e(ase,_8o),e(vd,u8o),e(vd,nse),e(nse,b8o),e(vd,v8o),e(Yr,T8o),e(Yr,sse),e(sse,F8o),e(Yr,C8o),g(Q5,Yr,null),e(tr,M8o),e(tr,Ve),g(H5,Ve,null),e(Ve,E8o),e(Ve,lse),e(lse,y8o),e(Ve,w8o),e(Ve,Ya),e(Ya,A8o),e(Ya,ise),e(ise,L8o),e(Ya,B8o),e(Ya,dse),e(dse,x8o),e(Ya,k8o),e(Ya,cse),e(cse,R8o),e(Ya,S8o),e(Ve,P8o),e(Ve,da),e(da,Ab),e(Ab,fse),e(fse,$8o),e(Ab,I8o),e(Ab,pN),e(pN,D8o),e(Ab,N8o),e(da,j8o),e(da,Lb),e(Lb,mse),e(mse,q8o),e(Lb,G8o),e(Lb,_N),e(_N,O8o),e(Lb,X8o),e(da,V8o),e(da,Bb),e(Bb,gse),e(gse,z8o),e(Bb,W8o),e(Bb,uN),e(uN,Q8o),e(Bb,H8o),e(da,U8o),e(da,xb),e(xb,hse),e(hse,J8o),e(xb,Y8o),e(xb,bN),e(bN,K8o),e(xb,Z8o),e(da,e9o),e(da,kb),e(kb,pse),e(pse,o9o),e(kb,r9o),e(kb,vN),e(vN,t9o),e(kb,a9o),e(Ve,n9o),e(Ve,Rb),e(Rb,s9o),e(Rb,_se),e(_se,l9o),e(Rb,i9o),e(Rb,use),e(use,d9o),e(Ve,c9o),e(Ve,bse),e(bse,f9o),e(Ve,m9o),g(U5,Ve,null),b(c,iRe,u),b(c,Td,u),e(Td,Sb),e(Sb,vse),g(J5,vse,null),e(Td,g9o),e(Td,Tse),e(Tse,h9o),b(c,dRe,u),b(c,ar,u),g(Y5,ar,null),e(ar,p9o),e(ar,Fd),e(Fd,_9o),e(Fd,Fse),e(Fse,u9o),e(Fd,b9o),e(Fd,Cse),e(Cse,v9o),e(Fd,T9o),e(ar,F9o),e(ar,K5),e(K5,C9o),e(K5,Mse),e(Mse,M9o),e(K5,E9o),e(ar,y9o),e(ar,Kr),g(Z5,Kr,null),e(Kr,w9o),e(Kr,Ese),e(Ese,A9o),e(Kr,L9o),e(Kr,Cd),e(Cd,B9o),e(Cd,yse),e(yse,x9o),e(Cd,k9o),e(Cd,wse),e(wse,R9o),e(Cd,S9o),e(Kr,P9o),e(Kr,Ase),e(Ase,$9o),e(Kr,I9o),g(ey,Kr,null),e(ar,D9o),e(ar,ze),g(oy,ze,null),e(ze,N9o),e(ze,Lse),e(Lse,j9o),e(ze,q9o),e(ze,Ka),e(Ka,G9o),e(Ka,Bse),e(Bse,O9o),e(Ka,X9o),e(Ka,xse),e(xse,V9o),e(Ka,z9o),e(Ka,kse),e(kse,W9o),e(Ka,Q9o),e(ze,H9o),e(ze,j),e(j,Pb),e(Pb,Rse),e(Rse,U9o),e(Pb,J9o),e(Pb,TN),e(TN,Y9o),e(Pb,K9o),e(j,Z9o),e(j,$b),e($b,Sse),e(Sse,eBo),e($b,oBo),e($b,FN),e(FN,rBo),e($b,tBo),e(j,aBo),e(j,Ib),e(Ib,Pse),e(Pse,nBo),e(Ib,sBo),e(Ib,CN),e(CN,lBo),e(Ib,iBo),e(j,dBo),e(j,Db),e(Db,$se),e($se,cBo),e(Db,fBo),e(Db,MN),e(MN,mBo),e(Db,gBo),e(j,hBo),e(j,Nb),e(Nb,Ise),e(Ise,pBo),e(Nb,_Bo),e(Nb,EN),e(EN,uBo),e(Nb,bBo),e(j,vBo),e(j,jb),e(jb,Dse),e(Dse,TBo),e(jb,FBo),e(jb,yN),e(yN,CBo),e(jb,MBo),e(j,EBo),e(j,qb),e(qb,Nse),e(Nse,yBo),e(qb,wBo),e(qb,wN),e(wN,ABo),e(qb,LBo),e(j,BBo),e(j,Gb),e(Gb,jse),e(jse,xBo),e(Gb,kBo),e(Gb,AN),e(AN,RBo),e(Gb,SBo),e(j,PBo),e(j,Ob),e(Ob,qse),e(qse,$Bo),e(Ob,IBo),e(Ob,LN),e(LN,DBo),e(Ob,NBo),e(j,jBo),e(j,Xb),e(Xb,Gse),e(Gse,qBo),e(Xb,GBo),e(Xb,BN),e(BN,OBo),e(Xb,XBo),e(j,VBo),e(j,Vb),e(Vb,Ose),e(Ose,zBo),e(Vb,WBo),e(Vb,xN),e(xN,QBo),e(Vb,HBo),e(j,UBo),e(j,zb),e(zb,Xse),e(Xse,JBo),e(zb,YBo),e(zb,kN),e(kN,KBo),e(zb,ZBo),e(j,exo),e(j,Wb),e(Wb,Vse),e(Vse,oxo),e(Wb,rxo),e(Wb,RN),e(RN,txo),e(Wb,axo),e(j,nxo),e(j,Qb),e(Qb,zse),e(zse,sxo),e(Qb,lxo),e(Qb,SN),e(SN,ixo),e(Qb,dxo),e(j,cxo),e(j,Hb),e(Hb,Wse),e(Wse,fxo),e(Hb,mxo),e(Hb,PN),e(PN,gxo),e(Hb,hxo),e(j,pxo),e(j,Ub),e(Ub,Qse),e(Qse,_xo),e(Ub,uxo),e(Ub,$N),e($N,bxo),e(Ub,vxo),e(j,Txo),e(j,Jb),e(Jb,Hse),e(Hse,Fxo),e(Jb,Cxo),e(Jb,IN),e(IN,Mxo),e(Jb,Exo),e(j,yxo),e(j,Yb),e(Yb,Use),e(Use,wxo),e(Yb,Axo),e(Yb,DN),e(DN,Lxo),e(Yb,Bxo),e(j,xxo),e(j,Kb),e(Kb,Jse),e(Jse,kxo),e(Kb,Rxo),e(Kb,NN),e(NN,Sxo),e(Kb,Pxo),e(j,$xo),e(j,Zb),e(Zb,Yse),e(Yse,Ixo),e(Zb,Dxo),e(Zb,jN),e(jN,Nxo),e(Zb,jxo),e(j,qxo),e(j,e3),e(e3,Kse),e(Kse,Gxo),e(e3,Oxo),e(e3,qN),e(qN,Xxo),e(e3,Vxo),e(j,zxo),e(j,o3),e(o3,Zse),e(Zse,Wxo),e(o3,Qxo),e(o3,GN),e(GN,Hxo),e(o3,Uxo),e(j,Jxo),e(j,r3),e(r3,ele),e(ele,Yxo),e(r3,Kxo),e(r3,ON),e(ON,Zxo),e(r3,eko),e(j,oko),e(j,t3),e(t3,ole),e(ole,rko),e(t3,tko),e(t3,XN),e(XN,ako),e(t3,nko),e(j,sko),e(j,a3),e(a3,rle),e(rle,lko),e(a3,iko),e(a3,VN),e(VN,dko),e(a3,cko),e(j,fko),e(j,n3),e(n3,tle),e(tle,mko),e(n3,gko),e(n3,zN),e(zN,hko),e(n3,pko),e(j,_ko),e(j,s3),e(s3,ale),e(ale,uko),e(s3,bko),e(s3,WN),e(WN,vko),e(s3,Tko),e(j,Fko),e(j,l3),e(l3,nle),e(nle,Cko),e(l3,Mko),e(l3,QN),e(QN,Eko),e(l3,yko),e(j,wko),e(j,i3),e(i3,sle),e(sle,Ako),e(i3,Lko),e(i3,HN),e(HN,Bko),e(i3,xko),e(j,kko),e(j,d3),e(d3,lle),e(lle,Rko),e(d3,Sko),e(d3,UN),e(UN,Pko),e(d3,$ko),e(j,Iko),e(j,c3),e(c3,ile),e(ile,Dko),e(c3,Nko),e(c3,JN),e(JN,jko),e(c3,qko),e(j,Gko),e(j,f3),e(f3,dle),e(dle,Oko),e(f3,Xko),e(f3,YN),e(YN,Vko),e(f3,zko),e(j,Wko),e(j,m3),e(m3,cle),e(cle,Qko),e(m3,Hko),e(m3,KN),e(KN,Uko),e(m3,Jko),e(ze,Yko),e(ze,g3),e(g3,Kko),e(g3,fle),e(fle,Zko),e(g3,eRo),e(g3,mle),e(mle,oRo),e(ze,rRo),e(ze,gle),e(gle,tRo),e(ze,aRo),g(ry,ze,null),b(c,cRe,u),b(c,Md,u),e(Md,h3),e(h3,hle),g(ty,hle,null),e(Md,nRo),e(Md,ple),e(ple,sRo),b(c,fRe,u),b(c,nr,u),g(ay,nr,null),e(nr,lRo),e(nr,Ed),e(Ed,iRo),e(Ed,_le),e(_le,dRo),e(Ed,cRo),e(Ed,ule),e(ule,fRo),e(Ed,mRo),e(nr,gRo),e(nr,ny),e(ny,hRo),e(ny,ble),e(ble,pRo),e(ny,_Ro),e(nr,uRo),e(nr,Zr),g(sy,Zr,null),e(Zr,bRo),e(Zr,vle),e(vle,vRo),e(Zr,TRo),e(Zr,yd),e(yd,FRo),e(yd,Tle),e(Tle,CRo),e(yd,MRo),e(yd,Fle),e(Fle,ERo),e(yd,yRo),e(Zr,wRo),e(Zr,Cle),e(Cle,ARo),e(Zr,LRo),g(ly,Zr,null),e(nr,BRo),e(nr,We),g(iy,We,null),e(We,xRo),e(We,Mle),e(Mle,kRo),e(We,RRo),e(We,Za),e(Za,SRo),e(Za,Ele),e(Ele,PRo),e(Za,$Ro),e(Za,yle),e(yle,IRo),e(Za,DRo),e(Za,wle),e(wle,NRo),e(Za,jRo),e(We,qRo),e(We,R),e(R,p3),e(p3,Ale),e(Ale,GRo),e(p3,ORo),e(p3,ZN),e(ZN,XRo),e(p3,VRo),e(R,zRo),e(R,_3),e(_3,Lle),e(Lle,WRo),e(_3,QRo),e(_3,ej),e(ej,HRo),e(_3,URo),e(R,JRo),e(R,u3),e(u3,Ble),e(Ble,YRo),e(u3,KRo),e(u3,oj),e(oj,ZRo),e(u3,eSo),e(R,oSo),e(R,b3),e(b3,xle),e(xle,rSo),e(b3,tSo),e(b3,rj),e(rj,aSo),e(b3,nSo),e(R,sSo),e(R,v3),e(v3,kle),e(kle,lSo),e(v3,iSo),e(v3,tj),e(tj,dSo),e(v3,cSo),e(R,fSo),e(R,T3),e(T3,Rle),e(Rle,mSo),e(T3,gSo),e(T3,aj),e(aj,hSo),e(T3,pSo),e(R,_So),e(R,F3),e(F3,Sle),e(Sle,uSo),e(F3,bSo),e(F3,nj),e(nj,vSo),e(F3,TSo),e(R,FSo),e(R,C3),e(C3,Ple),e(Ple,CSo),e(C3,MSo),e(C3,sj),e(sj,ESo),e(C3,ySo),e(R,wSo),e(R,M3),e(M3,$le),e($le,ASo),e(M3,LSo),e(M3,lj),e(lj,BSo),e(M3,xSo),e(R,kSo),e(R,E3),e(E3,Ile),e(Ile,RSo),e(E3,SSo),e(E3,ij),e(ij,PSo),e(E3,$So),e(R,ISo),e(R,y3),e(y3,Dle),e(Dle,DSo),e(y3,NSo),e(y3,dj),e(dj,jSo),e(y3,qSo),e(R,GSo),e(R,w3),e(w3,Nle),e(Nle,OSo),e(w3,XSo),e(w3,cj),e(cj,VSo),e(w3,zSo),e(R,WSo),e(R,A3),e(A3,jle),e(jle,QSo),e(A3,HSo),e(A3,fj),e(fj,USo),e(A3,JSo),e(R,YSo),e(R,L3),e(L3,qle),e(qle,KSo),e(L3,ZSo),e(L3,mj),e(mj,ePo),e(L3,oPo),e(R,rPo),e(R,B3),e(B3,Gle),e(Gle,tPo),e(B3,aPo),e(B3,gj),e(gj,nPo),e(B3,sPo),e(R,lPo),e(R,x3),e(x3,Ole),e(Ole,iPo),e(x3,dPo),e(x3,hj),e(hj,cPo),e(x3,fPo),e(R,mPo),e(R,k3),e(k3,Xle),e(Xle,gPo),e(k3,hPo),e(k3,pj),e(pj,pPo),e(k3,_Po),e(R,uPo),e(R,R3),e(R3,Vle),e(Vle,bPo),e(R3,vPo),e(R3,_j),e(_j,TPo),e(R3,FPo),e(R,CPo),e(R,S3),e(S3,zle),e(zle,MPo),e(S3,EPo),e(S3,uj),e(uj,yPo),e(S3,wPo),e(R,APo),e(R,P3),e(P3,Wle),e(Wle,LPo),e(P3,BPo),e(P3,bj),e(bj,xPo),e(P3,kPo),e(R,RPo),e(R,$3),e($3,Qle),e(Qle,SPo),e($3,PPo),e($3,vj),e(vj,$Po),e($3,IPo),e(R,DPo),e(R,I3),e(I3,Hle),e(Hle,NPo),e(I3,jPo),e(I3,Tj),e(Tj,qPo),e(I3,GPo),e(R,OPo),e(R,D3),e(D3,Ule),e(Ule,XPo),e(D3,VPo),e(D3,Fj),e(Fj,zPo),e(D3,WPo),e(R,QPo),e(R,N3),e(N3,Jle),e(Jle,HPo),e(N3,UPo),e(N3,Cj),e(Cj,JPo),e(N3,YPo),e(R,KPo),e(R,j3),e(j3,Yle),e(Yle,ZPo),e(j3,e$o),e(j3,Mj),e(Mj,o$o),e(j3,r$o),e(R,t$o),e(R,q3),e(q3,Kle),e(Kle,a$o),e(q3,n$o),e(q3,Ej),e(Ej,s$o),e(q3,l$o),e(R,i$o),e(R,G3),e(G3,Zle),e(Zle,d$o),e(G3,c$o),e(G3,yj),e(yj,f$o),e(G3,m$o),e(R,g$o),e(R,O3),e(O3,eie),e(eie,h$o),e(O3,p$o),e(O3,wj),e(wj,_$o),e(O3,u$o),e(R,b$o),e(R,X3),e(X3,oie),e(oie,v$o),e(X3,T$o),e(X3,Aj),e(Aj,F$o),e(X3,C$o),e(R,M$o),e(R,V3),e(V3,rie),e(rie,E$o),e(V3,y$o),e(V3,Lj),e(Lj,w$o),e(V3,A$o),e(R,L$o),e(R,z3),e(z3,tie),e(tie,B$o),e(z3,x$o),e(z3,Bj),e(Bj,k$o),e(z3,R$o),e(R,S$o),e(R,W3),e(W3,aie),e(aie,P$o),e(W3,$$o),e(W3,xj),e(xj,I$o),e(W3,D$o),e(R,N$o),e(R,Q3),e(Q3,nie),e(nie,j$o),e(Q3,q$o),e(Q3,kj),e(kj,G$o),e(Q3,O$o),e(R,X$o),e(R,H3),e(H3,sie),e(sie,V$o),e(H3,z$o),e(H3,Rj),e(Rj,W$o),e(H3,Q$o),e(R,H$o),e(R,U3),e(U3,lie),e(lie,U$o),e(U3,J$o),e(U3,Sj),e(Sj,Y$o),e(U3,K$o),e(R,Z$o),e(R,J3),e(J3,iie),e(iie,eIo),e(J3,oIo),e(J3,Pj),e(Pj,rIo),e(J3,tIo),e(R,aIo),e(R,Y3),e(Y3,die),e(die,nIo),e(Y3,sIo),e(Y3,$j),e($j,lIo),e(Y3,iIo),e(R,dIo),e(R,K3),e(K3,cie),e(cie,cIo),e(K3,fIo),e(K3,Ij),e(Ij,mIo),e(K3,gIo),e(R,hIo),e(R,Z3),e(Z3,fie),e(fie,pIo),e(Z3,_Io),e(Z3,Dj),e(Dj,uIo),e(Z3,bIo),e(We,vIo),e(We,e2),e(e2,TIo),e(e2,mie),e(mie,FIo),e(e2,CIo),e(e2,gie),e(gie,MIo),e(We,EIo),e(We,hie),e(hie,yIo),e(We,wIo),g(dy,We,null),b(c,mRe,u),b(c,wd,u),e(wd,o2),e(o2,pie),g(cy,pie,null),e(wd,AIo),e(wd,_ie),e(_ie,LIo),b(c,gRe,u),b(c,sr,u),g(fy,sr,null),e(sr,BIo),e(sr,Ad),e(Ad,xIo),e(Ad,uie),e(uie,kIo),e(Ad,RIo),e(Ad,bie),e(bie,SIo),e(Ad,PIo),e(sr,$Io),e(sr,my),e(my,IIo),e(my,vie),e(vie,DIo),e(my,NIo),e(sr,jIo),e(sr,et),g(gy,et,null),e(et,qIo),e(et,Tie),e(Tie,GIo),e(et,OIo),e(et,Ld),e(Ld,XIo),e(Ld,Fie),e(Fie,VIo),e(Ld,zIo),e(Ld,Cie),e(Cie,WIo),e(Ld,QIo),e(et,HIo),e(et,Mie),e(Mie,UIo),e(et,JIo),g(hy,et,null),e(sr,YIo),e(sr,Qe),g(py,Qe,null),e(Qe,KIo),e(Qe,Eie),e(Eie,ZIo),e(Qe,eDo),e(Qe,en),e(en,oDo),e(en,yie),e(yie,rDo),e(en,tDo),e(en,wie),e(wie,aDo),e(en,nDo),e(en,Aie),e(Aie,sDo),e(en,lDo),e(Qe,iDo),e(Qe,Lie),e(Lie,r2),e(r2,Bie),e(Bie,dDo),e(r2,cDo),e(r2,Nj),e(Nj,fDo),e(r2,mDo),e(Qe,gDo),e(Qe,t2),e(t2,hDo),e(t2,xie),e(xie,pDo),e(t2,_Do),e(t2,kie),e(kie,uDo),e(Qe,bDo),e(Qe,Rie),e(Rie,vDo),e(Qe,TDo),g(_y,Qe,null),b(c,hRe,u),b(c,Bd,u),e(Bd,a2),e(a2,Sie),g(uy,Sie,null),e(Bd,FDo),e(Bd,Pie),e(Pie,CDo),b(c,pRe,u),b(c,lr,u),g(by,lr,null),e(lr,MDo),e(lr,xd),e(xd,EDo),e(xd,$ie),e($ie,yDo),e(xd,wDo),e(xd,Iie),e(Iie,ADo),e(xd,LDo),e(lr,BDo),e(lr,vy),e(vy,xDo),e(vy,Die),e(Die,kDo),e(vy,RDo),e(lr,SDo),e(lr,ot),g(Ty,ot,null),e(ot,PDo),e(ot,Nie),e(Nie,$Do),e(ot,IDo),e(ot,kd),e(kd,DDo),e(kd,jie),e(jie,NDo),e(kd,jDo),e(kd,qie),e(qie,qDo),e(kd,GDo),e(ot,ODo),e(ot,Gie),e(Gie,XDo),e(ot,VDo),g(Fy,ot,null),e(lr,zDo),e(lr,He),g(Cy,He,null),e(He,WDo),e(He,Oie),e(Oie,QDo),e(He,HDo),e(He,on),e(on,UDo),e(on,Xie),e(Xie,JDo),e(on,YDo),e(on,Vie),e(Vie,KDo),e(on,ZDo),e(on,zie),e(zie,eNo),e(on,oNo),e(He,rNo),e(He,ge),e(ge,n2),e(n2,Wie),e(Wie,tNo),e(n2,aNo),e(n2,jj),e(jj,nNo),e(n2,sNo),e(ge,lNo),e(ge,s2),e(s2,Qie),e(Qie,iNo),e(s2,dNo),e(s2,qj),e(qj,cNo),e(s2,fNo),e(ge,mNo),e(ge,qs),e(qs,Hie),e(Hie,gNo),e(qs,hNo),e(qs,Gj),e(Gj,pNo),e(qs,_No),e(qs,Oj),e(Oj,uNo),e(qs,bNo),e(ge,vNo),e(ge,l2),e(l2,Uie),e(Uie,TNo),e(l2,FNo),e(l2,Xj),e(Xj,CNo),e(l2,MNo),e(ge,ENo),e(ge,ma),e(ma,Jie),e(Jie,yNo),e(ma,wNo),e(ma,Vj),e(Vj,ANo),e(ma,LNo),e(ma,zj),e(zj,BNo),e(ma,xNo),e(ma,Wj),e(Wj,kNo),e(ma,RNo),e(ge,SNo),e(ge,i2),e(i2,Yie),e(Yie,PNo),e(i2,$No),e(i2,Qj),e(Qj,INo),e(i2,DNo),e(ge,NNo),e(ge,d2),e(d2,Kie),e(Kie,jNo),e(d2,qNo),e(d2,Hj),e(Hj,GNo),e(d2,ONo),e(ge,XNo),e(ge,c2),e(c2,Zie),e(Zie,VNo),e(c2,zNo),e(c2,Uj),e(Uj,WNo),e(c2,QNo),e(ge,HNo),e(ge,f2),e(f2,ede),e(ede,UNo),e(f2,JNo),e(f2,Jj),e(Jj,YNo),e(f2,KNo),e(ge,ZNo),e(ge,m2),e(m2,ode),e(ode,ejo),e(m2,ojo),e(m2,Yj),e(Yj,rjo),e(m2,tjo),e(ge,ajo),e(ge,g2),e(g2,rde),e(rde,njo),e(g2,sjo),e(g2,Kj),e(Kj,ljo),e(g2,ijo),e(He,djo),e(He,h2),e(h2,cjo),e(h2,tde),e(tde,fjo),e(h2,mjo),e(h2,ade),e(ade,gjo),e(He,hjo),e(He,nde),e(nde,pjo),e(He,_jo),g(My,He,null),b(c,_Re,u),b(c,Rd,u),e(Rd,p2),e(p2,sde),g(Ey,sde,null),e(Rd,ujo),e(Rd,lde),e(lde,bjo),b(c,uRe,u),b(c,ir,u),g(yy,ir,null),e(ir,vjo),e(ir,Sd),e(Sd,Tjo),e(Sd,ide),e(ide,Fjo),e(Sd,Cjo),e(Sd,dde),e(dde,Mjo),e(Sd,Ejo),e(ir,yjo),e(ir,wy),e(wy,wjo),e(wy,cde),e(cde,Ajo),e(wy,Ljo),e(ir,Bjo),e(ir,rt),g(Ay,rt,null),e(rt,xjo),e(rt,fde),e(fde,kjo),e(rt,Rjo),e(rt,Pd),e(Pd,Sjo),e(Pd,mde),e(mde,Pjo),e(Pd,$jo),e(Pd,gde),e(gde,Ijo),e(Pd,Djo),e(rt,Njo),e(rt,hde),e(hde,jjo),e(rt,qjo),g(Ly,rt,null),e(ir,Gjo),e(ir,Ue),g(By,Ue,null),e(Ue,Ojo),e(Ue,pde),e(pde,Xjo),e(Ue,Vjo),e(Ue,rn),e(rn,zjo),e(rn,_de),e(_de,Wjo),e(rn,Qjo),e(rn,ude),e(ude,Hjo),e(rn,Ujo),e(rn,bde),e(bde,Jjo),e(rn,Yjo),e(Ue,Kjo),e(Ue,vde),e(vde,_2),e(_2,Tde),e(Tde,Zjo),e(_2,eqo),e(_2,Zj),e(Zj,oqo),e(_2,rqo),e(Ue,tqo),e(Ue,u2),e(u2,aqo),e(u2,Fde),e(Fde,nqo),e(u2,sqo),e(u2,Cde),e(Cde,lqo),e(Ue,iqo),e(Ue,Mde),e(Mde,dqo),e(Ue,cqo),g(xy,Ue,null),b(c,bRe,u),b(c,$d,u),e($d,b2),e(b2,Ede),g(ky,Ede,null),e($d,fqo),e($d,yde),e(yde,mqo),b(c,vRe,u),b(c,dr,u),g(Ry,dr,null),e(dr,gqo),e(dr,Id),e(Id,hqo),e(Id,wde),e(wde,pqo),e(Id,_qo),e(Id,Ade),e(Ade,uqo),e(Id,bqo),e(dr,vqo),e(dr,Sy),e(Sy,Tqo),e(Sy,Lde),e(Lde,Fqo),e(Sy,Cqo),e(dr,Mqo),e(dr,tt),g(Py,tt,null),e(tt,Eqo),e(tt,Bde),e(Bde,yqo),e(tt,wqo),e(tt,Dd),e(Dd,Aqo),e(Dd,xde),e(xde,Lqo),e(Dd,Bqo),e(Dd,kde),e(kde,xqo),e(Dd,kqo),e(tt,Rqo),e(tt,Rde),e(Rde,Sqo),e(tt,Pqo),g($y,tt,null),e(dr,$qo),e(dr,Je),g(Iy,Je,null),e(Je,Iqo),e(Je,Sde),e(Sde,Dqo),e(Je,Nqo),e(Je,tn),e(tn,jqo),e(tn,Pde),e(Pde,qqo),e(tn,Gqo),e(tn,$de),e($de,Oqo),e(tn,Xqo),e(tn,Ide),e(Ide,Vqo),e(tn,zqo),e(Je,Wqo),e(Je,ke),e(ke,v2),e(v2,Dde),e(Dde,Qqo),e(v2,Hqo),e(v2,eq),e(eq,Uqo),e(v2,Jqo),e(ke,Yqo),e(ke,T2),e(T2,Nde),e(Nde,Kqo),e(T2,Zqo),e(T2,oq),e(oq,eGo),e(T2,oGo),e(ke,rGo),e(ke,F2),e(F2,jde),e(jde,tGo),e(F2,aGo),e(F2,rq),e(rq,nGo),e(F2,sGo),e(ke,lGo),e(ke,C2),e(C2,qde),e(qde,iGo),e(C2,dGo),e(C2,tq),e(tq,cGo),e(C2,fGo),e(ke,mGo),e(ke,M2),e(M2,Gde),e(Gde,gGo),e(M2,hGo),e(M2,aq),e(aq,pGo),e(M2,_Go),e(ke,uGo),e(ke,E2),e(E2,Ode),e(Ode,bGo),e(E2,vGo),e(E2,nq),e(nq,TGo),e(E2,FGo),e(ke,CGo),e(ke,y2),e(y2,Xde),e(Xde,MGo),e(y2,EGo),e(y2,sq),e(sq,yGo),e(y2,wGo),e(ke,AGo),e(ke,w2),e(w2,Vde),e(Vde,LGo),e(w2,BGo),e(w2,lq),e(lq,xGo),e(w2,kGo),e(Je,RGo),e(Je,A2),e(A2,SGo),e(A2,zde),e(zde,PGo),e(A2,$Go),e(A2,Wde),e(Wde,IGo),e(Je,DGo),e(Je,Qde),e(Qde,NGo),e(Je,jGo),g(Dy,Je,null),b(c,TRe,u),b(c,Nd,u),e(Nd,L2),e(L2,Hde),g(Ny,Hde,null),e(Nd,qGo),e(Nd,Ude),e(Ude,GGo),b(c,FRe,u),b(c,cr,u),g(jy,cr,null),e(cr,OGo),e(cr,jd),e(jd,XGo),e(jd,Jde),e(Jde,VGo),e(jd,zGo),e(jd,Yde),e(Yde,WGo),e(jd,QGo),e(cr,HGo),e(cr,qy),e(qy,UGo),e(qy,Kde),e(Kde,JGo),e(qy,YGo),e(cr,KGo),e(cr,at),g(Gy,at,null),e(at,ZGo),e(at,Zde),e(Zde,eOo),e(at,oOo),e(at,qd),e(qd,rOo),e(qd,ece),e(ece,tOo),e(qd,aOo),e(qd,oce),e(oce,nOo),e(qd,sOo),e(at,lOo),e(at,rce),e(rce,iOo),e(at,dOo),g(Oy,at,null),e(cr,cOo),e(cr,Ye),g(Xy,Ye,null),e(Ye,fOo),e(Ye,tce),e(tce,mOo),e(Ye,gOo),e(Ye,an),e(an,hOo),e(an,ace),e(ace,pOo),e(an,_Oo),e(an,nce),e(nce,uOo),e(an,bOo),e(an,sce),e(sce,vOo),e(an,TOo),e(Ye,FOo),e(Ye,nn),e(nn,B2),e(B2,lce),e(lce,COo),e(B2,MOo),e(B2,iq),e(iq,EOo),e(B2,yOo),e(nn,wOo),e(nn,x2),e(x2,ice),e(ice,AOo),e(x2,LOo),e(x2,dq),e(dq,BOo),e(x2,xOo),e(nn,kOo),e(nn,k2),e(k2,dce),e(dce,ROo),e(k2,SOo),e(k2,cq),e(cq,POo),e(k2,$Oo),e(nn,IOo),e(nn,R2),e(R2,cce),e(cce,DOo),e(R2,NOo),e(R2,fq),e(fq,jOo),e(R2,qOo),e(Ye,GOo),e(Ye,S2),e(S2,OOo),e(S2,fce),e(fce,XOo),e(S2,VOo),e(S2,mce),e(mce,zOo),e(Ye,WOo),e(Ye,gce),e(gce,QOo),e(Ye,HOo),g(Vy,Ye,null),b(c,CRe,u),b(c,Gd,u),e(Gd,P2),e(P2,hce),g(zy,hce,null),e(Gd,UOo),e(Gd,pce),e(pce,JOo),b(c,MRe,u),b(c,fr,u),g(Wy,fr,null),e(fr,YOo),e(fr,Od),e(Od,KOo),e(Od,_ce),e(_ce,ZOo),e(Od,eXo),e(Od,uce),e(uce,oXo),e(Od,rXo),e(fr,tXo),e(fr,Qy),e(Qy,aXo),e(Qy,bce),e(bce,nXo),e(Qy,sXo),e(fr,lXo),e(fr,nt),g(Hy,nt,null),e(nt,iXo),e(nt,vce),e(vce,dXo),e(nt,cXo),e(nt,Xd),e(Xd,fXo),e(Xd,Tce),e(Tce,mXo),e(Xd,gXo),e(Xd,Fce),e(Fce,hXo),e(Xd,pXo),e(nt,_Xo),e(nt,Cce),e(Cce,uXo),e(nt,bXo),g(Uy,nt,null),e(fr,vXo),e(fr,Ke),g(Jy,Ke,null),e(Ke,TXo),e(Ke,Mce),e(Mce,FXo),e(Ke,CXo),e(Ke,sn),e(sn,MXo),e(sn,Ece),e(Ece,EXo),e(sn,yXo),e(sn,yce),e(yce,wXo),e(sn,AXo),e(sn,wce),e(wce,LXo),e(sn,BXo),e(Ke,xXo),e(Ke,Re),e(Re,$2),e($2,Ace),e(Ace,kXo),e($2,RXo),e($2,mq),e(mq,SXo),e($2,PXo),e(Re,$Xo),e(Re,I2),e(I2,Lce),e(Lce,IXo),e(I2,DXo),e(I2,gq),e(gq,NXo),e(I2,jXo),e(Re,qXo),e(Re,D2),e(D2,Bce),e(Bce,GXo),e(D2,OXo),e(D2,hq),e(hq,XXo),e(D2,VXo),e(Re,zXo),e(Re,N2),e(N2,xce),e(xce,WXo),e(N2,QXo),e(N2,pq),e(pq,HXo),e(N2,UXo),e(Re,JXo),e(Re,j2),e(j2,kce),e(kce,YXo),e(j2,KXo),e(j2,_q),e(_q,ZXo),e(j2,eVo),e(Re,oVo),e(Re,q2),e(q2,Rce),e(Rce,rVo),e(q2,tVo),e(q2,uq),e(uq,aVo),e(q2,nVo),e(Re,sVo),e(Re,G2),e(G2,Sce),e(Sce,lVo),e(G2,iVo),e(G2,bq),e(bq,dVo),e(G2,cVo),e(Re,fVo),e(Re,O2),e(O2,Pce),e(Pce,mVo),e(O2,gVo),e(O2,vq),e(vq,hVo),e(O2,pVo),e(Ke,_Vo),e(Ke,X2),e(X2,uVo),e(X2,$ce),e($ce,bVo),e(X2,vVo),e(X2,Ice),e(Ice,TVo),e(Ke,FVo),e(Ke,Dce),e(Dce,CVo),e(Ke,MVo),g(Yy,Ke,null),b(c,ERe,u),b(c,Vd,u),e(Vd,V2),e(V2,Nce),g(Ky,Nce,null),e(Vd,EVo),e(Vd,jce),e(jce,yVo),b(c,yRe,u),b(c,mr,u),g(Zy,mr,null),e(mr,wVo),e(mr,zd),e(zd,AVo),e(zd,qce),e(qce,LVo),e(zd,BVo),e(zd,Gce),e(Gce,xVo),e(zd,kVo),e(mr,RVo),e(mr,ew),e(ew,SVo),e(ew,Oce),e(Oce,PVo),e(ew,$Vo),e(mr,IVo),e(mr,st),g(ow,st,null),e(st,DVo),e(st,Xce),e(Xce,NVo),e(st,jVo),e(st,Wd),e(Wd,qVo),e(Wd,Vce),e(Vce,GVo),e(Wd,OVo),e(Wd,zce),e(zce,XVo),e(Wd,VVo),e(st,zVo),e(st,Wce),e(Wce,WVo),e(st,QVo),g(rw,st,null),e(mr,HVo),e(mr,Ze),g(tw,Ze,null),e(Ze,UVo),e(Ze,Qce),e(Qce,JVo),e(Ze,YVo),e(Ze,ln),e(ln,KVo),e(ln,Hce),e(Hce,ZVo),e(ln,ezo),e(ln,Uce),e(Uce,ozo),e(ln,rzo),e(ln,Jce),e(Jce,tzo),e(ln,azo),e(Ze,nzo),e(Ze,aw),e(aw,z2),e(z2,Yce),e(Yce,szo),e(z2,lzo),e(z2,Tq),e(Tq,izo),e(z2,dzo),e(aw,czo),e(aw,W2),e(W2,Kce),e(Kce,fzo),e(W2,mzo),e(W2,Fq),e(Fq,gzo),e(W2,hzo),e(Ze,pzo),e(Ze,Q2),e(Q2,_zo),e(Q2,Zce),e(Zce,uzo),e(Q2,bzo),e(Q2,efe),e(efe,vzo),e(Ze,Tzo),e(Ze,ofe),e(ofe,Fzo),e(Ze,Czo),g(nw,Ze,null),b(c,wRe,u),b(c,Qd,u),e(Qd,H2),e(H2,rfe),g(sw,rfe,null),e(Qd,Mzo),e(Qd,tfe),e(tfe,Ezo),b(c,ARe,u),b(c,gr,u),g(lw,gr,null),e(gr,yzo),e(gr,Hd),e(Hd,wzo),e(Hd,afe),e(afe,Azo),e(Hd,Lzo),e(Hd,nfe),e(nfe,Bzo),e(Hd,xzo),e(gr,kzo),e(gr,iw),e(iw,Rzo),e(iw,sfe),e(sfe,Szo),e(iw,Pzo),e(gr,$zo),e(gr,lt),g(dw,lt,null),e(lt,Izo),e(lt,lfe),e(lfe,Dzo),e(lt,Nzo),e(lt,Ud),e(Ud,jzo),e(Ud,ife),e(ife,qzo),e(Ud,Gzo),e(Ud,dfe),e(dfe,Ozo),e(Ud,Xzo),e(lt,Vzo),e(lt,cfe),e(cfe,zzo),e(lt,Wzo),g(cw,lt,null),e(gr,Qzo),e(gr,eo),g(fw,eo,null),e(eo,Hzo),e(eo,ffe),e(ffe,Uzo),e(eo,Jzo),e(eo,dn),e(dn,Yzo),e(dn,mfe),e(mfe,Kzo),e(dn,Zzo),e(dn,gfe),e(gfe,eWo),e(dn,oWo),e(dn,hfe),e(hfe,rWo),e(dn,tWo),e(eo,aWo),e(eo,cn),e(cn,U2),e(U2,pfe),e(pfe,nWo),e(U2,sWo),e(U2,Cq),e(Cq,lWo),e(U2,iWo),e(cn,dWo),e(cn,J2),e(J2,_fe),e(_fe,cWo),e(J2,fWo),e(J2,Mq),e(Mq,mWo),e(J2,gWo),e(cn,hWo),e(cn,Y2),e(Y2,ufe),e(ufe,pWo),e(Y2,_Wo),e(Y2,Eq),e(Eq,uWo),e(Y2,bWo),e(cn,vWo),e(cn,K2),e(K2,bfe),e(bfe,TWo),e(K2,FWo),e(K2,yq),e(yq,CWo),e(K2,MWo),e(eo,EWo),e(eo,Z2),e(Z2,yWo),e(Z2,vfe),e(vfe,wWo),e(Z2,AWo),e(Z2,Tfe),e(Tfe,LWo),e(eo,BWo),e(eo,Ffe),e(Ffe,xWo),e(eo,kWo),g(mw,eo,null),b(c,LRe,u),b(c,Jd,u),e(Jd,ev),e(ev,Cfe),g(gw,Cfe,null),e(Jd,RWo),e(Jd,Mfe),e(Mfe,SWo),b(c,BRe,u),b(c,hr,u),g(hw,hr,null),e(hr,PWo),e(hr,Yd),e(Yd,$Wo),e(Yd,Efe),e(Efe,IWo),e(Yd,DWo),e(Yd,yfe),e(yfe,NWo),e(Yd,jWo),e(hr,qWo),e(hr,pw),e(pw,GWo),e(pw,wfe),e(wfe,OWo),e(pw,XWo),e(hr,VWo),e(hr,it),g(_w,it,null),e(it,zWo),e(it,Afe),e(Afe,WWo),e(it,QWo),e(it,Kd),e(Kd,HWo),e(Kd,Lfe),e(Lfe,UWo),e(Kd,JWo),e(Kd,Bfe),e(Bfe,YWo),e(Kd,KWo),e(it,ZWo),e(it,xfe),e(xfe,eQo),e(it,oQo),g(uw,it,null),e(hr,rQo),e(hr,oo),g(bw,oo,null),e(oo,tQo),e(oo,kfe),e(kfe,aQo),e(oo,nQo),e(oo,fn),e(fn,sQo),e(fn,Rfe),e(Rfe,lQo),e(fn,iQo),e(fn,Sfe),e(Sfe,dQo),e(fn,cQo),e(fn,Pfe),e(Pfe,fQo),e(fn,mQo),e(oo,gQo),e(oo,Zd),e(Zd,ov),e(ov,$fe),e($fe,hQo),e(ov,pQo),e(ov,wq),e(wq,_Qo),e(ov,uQo),e(Zd,bQo),e(Zd,rv),e(rv,Ife),e(Ife,vQo),e(rv,TQo),e(rv,Aq),e(Aq,FQo),e(rv,CQo),e(Zd,MQo),e(Zd,tv),e(tv,Dfe),e(Dfe,EQo),e(tv,yQo),e(tv,Lq),e(Lq,wQo),e(tv,AQo),e(oo,LQo),e(oo,av),e(av,BQo),e(av,Nfe),e(Nfe,xQo),e(av,kQo),e(av,jfe),e(jfe,RQo),e(oo,SQo),e(oo,qfe),e(qfe,PQo),e(oo,$Qo),g(vw,oo,null),b(c,xRe,u),b(c,ec,u),e(ec,nv),e(nv,Gfe),g(Tw,Gfe,null),e(ec,IQo),e(ec,Ofe),e(Ofe,DQo),b(c,kRe,u),b(c,pr,u),g(Fw,pr,null),e(pr,NQo),e(pr,oc),e(oc,jQo),e(oc,Xfe),e(Xfe,qQo),e(oc,GQo),e(oc,Vfe),e(Vfe,OQo),e(oc,XQo),e(pr,VQo),e(pr,Cw),e(Cw,zQo),e(Cw,zfe),e(zfe,WQo),e(Cw,QQo),e(pr,HQo),e(pr,dt),g(Mw,dt,null),e(dt,UQo),e(dt,Wfe),e(Wfe,JQo),e(dt,YQo),e(dt,rc),e(rc,KQo),e(rc,Qfe),e(Qfe,ZQo),e(rc,eHo),e(rc,Hfe),e(Hfe,oHo),e(rc,rHo),e(dt,tHo),e(dt,Ufe),e(Ufe,aHo),e(dt,nHo),g(Ew,dt,null),e(pr,sHo),e(pr,ro),g(yw,ro,null),e(ro,lHo),e(ro,Jfe),e(Jfe,iHo),e(ro,dHo),e(ro,mn),e(mn,cHo),e(mn,Yfe),e(Yfe,fHo),e(mn,mHo),e(mn,Kfe),e(Kfe,gHo),e(mn,hHo),e(mn,Zfe),e(Zfe,pHo),e(mn,_Ho),e(ro,uHo),e(ro,eme),e(eme,sv),e(sv,ome),e(ome,bHo),e(sv,vHo),e(sv,Bq),e(Bq,THo),e(sv,FHo),e(ro,CHo),e(ro,lv),e(lv,MHo),e(lv,rme),e(rme,EHo),e(lv,yHo),e(lv,tme),e(tme,wHo),e(ro,AHo),e(ro,ame),e(ame,LHo),e(ro,BHo),g(ww,ro,null),b(c,RRe,u),b(c,tc,u),e(tc,iv),e(iv,nme),g(Aw,nme,null),e(tc,xHo),e(tc,sme),e(sme,kHo),b(c,SRe,u),b(c,_r,u),g(Lw,_r,null),e(_r,RHo),e(_r,ac),e(ac,SHo),e(ac,lme),e(lme,PHo),e(ac,$Ho),e(ac,ime),e(ime,IHo),e(ac,DHo),e(_r,NHo),e(_r,Bw),e(Bw,jHo),e(Bw,dme),e(dme,qHo),e(Bw,GHo),e(_r,OHo),e(_r,ct),g(xw,ct,null),e(ct,XHo),e(ct,cme),e(cme,VHo),e(ct,zHo),e(ct,nc),e(nc,WHo),e(nc,fme),e(fme,QHo),e(nc,HHo),e(nc,mme),e(mme,UHo),e(nc,JHo),e(ct,YHo),e(ct,gme),e(gme,KHo),e(ct,ZHo),g(kw,ct,null),e(_r,eUo),e(_r,to),g(Rw,to,null),e(to,oUo),e(to,hme),e(hme,rUo),e(to,tUo),e(to,gn),e(gn,aUo),e(gn,pme),e(pme,nUo),e(gn,sUo),e(gn,_me),e(_me,lUo),e(gn,iUo),e(gn,ume),e(ume,dUo),e(gn,cUo),e(to,fUo),e(to,bme),e(bme,dv),e(dv,vme),e(vme,mUo),e(dv,gUo),e(dv,xq),e(xq,hUo),e(dv,pUo),e(to,_Uo),e(to,cv),e(cv,uUo),e(cv,Tme),e(Tme,bUo),e(cv,vUo),e(cv,Fme),e(Fme,TUo),e(to,FUo),e(to,Cme),e(Cme,CUo),e(to,MUo),g(Sw,to,null),b(c,PRe,u),b(c,sc,u),e(sc,fv),e(fv,Mme),g(Pw,Mme,null),e(sc,EUo),e(sc,Eme),e(Eme,yUo),b(c,$Re,u),b(c,ur,u),g($w,ur,null),e(ur,wUo),e(ur,lc),e(lc,AUo),e(lc,yme),e(yme,LUo),e(lc,BUo),e(lc,wme),e(wme,xUo),e(lc,kUo),e(ur,RUo),e(ur,Iw),e(Iw,SUo),e(Iw,Ame),e(Ame,PUo),e(Iw,$Uo),e(ur,IUo),e(ur,ft),g(Dw,ft,null),e(ft,DUo),e(ft,Lme),e(Lme,NUo),e(ft,jUo),e(ft,ic),e(ic,qUo),e(ic,Bme),e(Bme,GUo),e(ic,OUo),e(ic,xme),e(xme,XUo),e(ic,VUo),e(ft,zUo),e(ft,kme),e(kme,WUo),e(ft,QUo),g(Nw,ft,null),e(ur,HUo),e(ur,ao),g(jw,ao,null),e(ao,UUo),e(ao,Rme),e(Rme,JUo),e(ao,YUo),e(ao,hn),e(hn,KUo),e(hn,Sme),e(Sme,ZUo),e(hn,eJo),e(hn,Pme),e(Pme,oJo),e(hn,rJo),e(hn,$me),e($me,tJo),e(hn,aJo),e(ao,nJo),e(ao,dc),e(dc,mv),e(mv,Ime),e(Ime,sJo),e(mv,lJo),e(mv,kq),e(kq,iJo),e(mv,dJo),e(dc,cJo),e(dc,gv),e(gv,Dme),e(Dme,fJo),e(gv,mJo),e(gv,Rq),e(Rq,gJo),e(gv,hJo),e(dc,pJo),e(dc,hv),e(hv,Nme),e(Nme,_Jo),e(hv,uJo),e(hv,Sq),e(Sq,bJo),e(hv,vJo),e(ao,TJo),e(ao,pv),e(pv,FJo),e(pv,jme),e(jme,CJo),e(pv,MJo),e(pv,qme),e(qme,EJo),e(ao,yJo),e(ao,Gme),e(Gme,wJo),e(ao,AJo),g(qw,ao,null),b(c,IRe,u),b(c,cc,u),e(cc,_v),e(_v,Ome),g(Gw,Ome,null),e(cc,LJo),e(cc,Xme),e(Xme,BJo),b(c,DRe,u),b(c,br,u),g(Ow,br,null),e(br,xJo),e(br,fc),e(fc,kJo),e(fc,Vme),e(Vme,RJo),e(fc,SJo),e(fc,zme),e(zme,PJo),e(fc,$Jo),e(br,IJo),e(br,Xw),e(Xw,DJo),e(Xw,Wme),e(Wme,NJo),e(Xw,jJo),e(br,qJo),e(br,mt),g(Vw,mt,null),e(mt,GJo),e(mt,Qme),e(Qme,OJo),e(mt,XJo),e(mt,mc),e(mc,VJo),e(mc,Hme),e(Hme,zJo),e(mc,WJo),e(mc,Ume),e(Ume,QJo),e(mc,HJo),e(mt,UJo),e(mt,Jme),e(Jme,JJo),e(mt,YJo),g(zw,mt,null),e(br,KJo),e(br,no),g(Ww,no,null),e(no,ZJo),e(no,Yme),e(Yme,eYo),e(no,oYo),e(no,pn),e(pn,rYo),e(pn,Kme),e(Kme,tYo),e(pn,aYo),e(pn,Zme),e(Zme,nYo),e(pn,sYo),e(pn,ege),e(ege,lYo),e(pn,iYo),e(no,dYo),e(no,oge),e(oge,uv),e(uv,rge),e(rge,cYo),e(uv,fYo),e(uv,Pq),e(Pq,mYo),e(uv,gYo),e(no,hYo),e(no,bv),e(bv,pYo),e(bv,tge),e(tge,_Yo),e(bv,uYo),e(bv,age),e(age,bYo),e(no,vYo),e(no,nge),e(nge,TYo),e(no,FYo),g(Qw,no,null),b(c,NRe,u),b(c,gc,u),e(gc,vv),e(vv,sge),g(Hw,sge,null),e(gc,CYo),e(gc,lge),e(lge,MYo),b(c,jRe,u),b(c,vr,u),g(Uw,vr,null),e(vr,EYo),e(vr,hc),e(hc,yYo),e(hc,ige),e(ige,wYo),e(hc,AYo),e(hc,dge),e(dge,LYo),e(hc,BYo),e(vr,xYo),e(vr,Jw),e(Jw,kYo),e(Jw,cge),e(cge,RYo),e(Jw,SYo),e(vr,PYo),e(vr,gt),g(Yw,gt,null),e(gt,$Yo),e(gt,fge),e(fge,IYo),e(gt,DYo),e(gt,pc),e(pc,NYo),e(pc,mge),e(mge,jYo),e(pc,qYo),e(pc,gge),e(gge,GYo),e(pc,OYo),e(gt,XYo),e(gt,hge),e(hge,VYo),e(gt,zYo),g(Kw,gt,null),e(vr,WYo),e(vr,ho),g(Zw,ho,null),e(ho,QYo),e(ho,pge),e(pge,HYo),e(ho,UYo),e(ho,_n),e(_n,JYo),e(_n,_ge),e(_ge,YYo),e(_n,KYo),e(_n,uge),e(uge,ZYo),e(_n,eKo),e(_n,bge),e(bge,oKo),e(_n,rKo),e(ho,tKo),e(ho,B),e(B,Tv),e(Tv,vge),e(vge,aKo),e(Tv,nKo),e(Tv,$q),e($q,sKo),e(Tv,lKo),e(B,iKo),e(B,Fv),e(Fv,Tge),e(Tge,dKo),e(Fv,cKo),e(Fv,Iq),e(Iq,fKo),e(Fv,mKo),e(B,gKo),e(B,Cv),e(Cv,Fge),e(Fge,hKo),e(Cv,pKo),e(Cv,Dq),e(Dq,_Ko),e(Cv,uKo),e(B,bKo),e(B,Mv),e(Mv,Cge),e(Cge,vKo),e(Mv,TKo),e(Mv,Nq),e(Nq,FKo),e(Mv,CKo),e(B,MKo),e(B,Ev),e(Ev,Mge),e(Mge,EKo),e(Ev,yKo),e(Ev,jq),e(jq,wKo),e(Ev,AKo),e(B,LKo),e(B,yv),e(yv,Ege),e(Ege,BKo),e(yv,xKo),e(yv,qq),e(qq,kKo),e(yv,RKo),e(B,SKo),e(B,wv),e(wv,yge),e(yge,PKo),e(wv,$Ko),e(wv,Gq),e(Gq,IKo),e(wv,DKo),e(B,NKo),e(B,Av),e(Av,wge),e(wge,jKo),e(Av,qKo),e(Av,Oq),e(Oq,GKo),e(Av,OKo),e(B,XKo),e(B,Lv),e(Lv,Age),e(Age,VKo),e(Lv,zKo),e(Lv,Xq),e(Xq,WKo),e(Lv,QKo),e(B,HKo),e(B,Bv),e(Bv,Lge),e(Lge,UKo),e(Bv,JKo),e(Bv,Vq),e(Vq,YKo),e(Bv,KKo),e(B,ZKo),e(B,xv),e(xv,Bge),e(Bge,eZo),e(xv,oZo),e(xv,zq),e(zq,rZo),e(xv,tZo),e(B,aZo),e(B,kv),e(kv,xge),e(xge,nZo),e(kv,sZo),e(kv,Wq),e(Wq,lZo),e(kv,iZo),e(B,dZo),e(B,Rv),e(Rv,kge),e(kge,cZo),e(Rv,fZo),e(Rv,Qq),e(Qq,mZo),e(Rv,gZo),e(B,hZo),e(B,Sv),e(Sv,Rge),e(Rge,pZo),e(Sv,_Zo),e(Sv,Hq),e(Hq,uZo),e(Sv,bZo),e(B,vZo),e(B,Pv),e(Pv,Sge),e(Sge,TZo),e(Pv,FZo),e(Pv,Uq),e(Uq,CZo),e(Pv,MZo),e(B,EZo),e(B,$v),e($v,Pge),e(Pge,yZo),e($v,wZo),e($v,Jq),e(Jq,AZo),e($v,LZo),e(B,BZo),e(B,Gs),e(Gs,$ge),e($ge,xZo),e(Gs,kZo),e(Gs,Yq),e(Yq,RZo),e(Gs,SZo),e(Gs,Kq),e(Kq,PZo),e(Gs,$Zo),e(B,IZo),e(B,Iv),e(Iv,Ige),e(Ige,DZo),e(Iv,NZo),e(Iv,Zq),e(Zq,jZo),e(Iv,qZo),e(B,GZo),e(B,Dv),e(Dv,Dge),e(Dge,OZo),e(Dv,XZo),e(Dv,eG),e(eG,VZo),e(Dv,zZo),e(B,WZo),e(B,Nv),e(Nv,Nge),e(Nge,QZo),e(Nv,HZo),e(Nv,oG),e(oG,UZo),e(Nv,JZo),e(B,YZo),e(B,jv),e(jv,jge),e(jge,KZo),e(jv,ZZo),e(jv,rG),e(rG,eer),e(jv,oer),e(B,rer),e(B,qv),e(qv,qge),e(qge,ter),e(qv,aer),e(qv,tG),e(tG,ner),e(qv,ser),e(B,ler),e(B,Gv),e(Gv,Gge),e(Gge,ier),e(Gv,der),e(Gv,aG),e(aG,cer),e(Gv,fer),e(B,mer),e(B,Ov),e(Ov,Oge),e(Oge,ger),e(Ov,her),e(Ov,nG),e(nG,per),e(Ov,_er),e(B,uer),e(B,Xv),e(Xv,Xge),e(Xge,ber),e(Xv,ver),e(Xv,sG),e(sG,Ter),e(Xv,Fer),e(B,Cer),e(B,Vv),e(Vv,Vge),e(Vge,Mer),e(Vv,Eer),e(Vv,lG),e(lG,yer),e(Vv,wer),e(B,Aer),e(B,zv),e(zv,zge),e(zge,Ler),e(zv,Ber),e(zv,iG),e(iG,xer),e(zv,ker),e(B,Rer),e(B,Wv),e(Wv,Wge),e(Wge,Ser),e(Wv,Per),e(Wv,dG),e(dG,$er),e(Wv,Ier),e(B,Der),e(B,Qv),e(Qv,Qge),e(Qge,Ner),e(Qv,jer),e(Qv,cG),e(cG,qer),e(Qv,Ger),e(B,Oer),e(B,Hv),e(Hv,Hge),e(Hge,Xer),e(Hv,Ver),e(Hv,fG),e(fG,zer),e(Hv,Wer),e(B,Qer),e(B,Uv),e(Uv,Uge),e(Uge,Her),e(Uv,Uer),e(Uv,mG),e(mG,Jer),e(Uv,Yer),e(B,Ker),e(B,Jv),e(Jv,Jge),e(Jge,Zer),e(Jv,eor),e(Jv,gG),e(gG,oor),e(Jv,ror),e(B,tor),e(B,Yv),e(Yv,Yge),e(Yge,aor),e(Yv,nor),e(Yv,hG),e(hG,sor),e(Yv,lor),e(B,ior),e(B,Kv),e(Kv,Kge),e(Kge,dor),e(Kv,cor),e(Kv,pG),e(pG,mor),e(Kv,gor),e(B,hor),e(B,Zv),e(Zv,Zge),e(Zge,por),e(Zv,_or),e(Zv,_G),e(_G,uor),e(Zv,bor),e(B,vor),e(B,e6),e(e6,ehe),e(ehe,Tor),e(e6,For),e(e6,uG),e(uG,Cor),e(e6,Mor),e(B,Eor),e(B,o6),e(o6,ohe),e(ohe,yor),e(o6,wor),e(o6,bG),e(bG,Aor),e(o6,Lor),e(B,Bor),e(B,r6),e(r6,rhe),e(rhe,xor),e(r6,kor),e(r6,vG),e(vG,Ror),e(r6,Sor),e(B,Por),e(B,t6),e(t6,the),e(the,$or),e(t6,Ior),e(t6,TG),e(TG,Dor),e(t6,Nor),e(B,jor),e(B,a6),e(a6,ahe),e(ahe,qor),e(a6,Gor),e(a6,FG),e(FG,Oor),e(a6,Xor),e(B,Vor),e(B,n6),e(n6,nhe),e(nhe,zor),e(n6,Wor),e(n6,CG),e(CG,Qor),e(n6,Hor),e(B,Uor),e(B,s6),e(s6,she),e(she,Jor),e(s6,Yor),e(s6,MG),e(MG,Kor),e(s6,Zor),e(B,err),e(B,l6),e(l6,lhe),e(lhe,orr),e(l6,rrr),e(l6,EG),e(EG,trr),e(l6,arr),e(ho,nrr),e(ho,ihe),e(ihe,srr),e(ho,lrr),g(eA,ho,null),b(c,qRe,u),b(c,_c,u),e(_c,i6),e(i6,dhe),g(oA,dhe,null),e(_c,irr),e(_c,che),e(che,drr),b(c,GRe,u),b(c,Tr,u),g(rA,Tr,null),e(Tr,crr),e(Tr,uc),e(uc,frr),e(uc,fhe),e(fhe,mrr),e(uc,grr),e(uc,mhe),e(mhe,hrr),e(uc,prr),e(Tr,_rr),e(Tr,tA),e(tA,urr),e(tA,ghe),e(ghe,brr),e(tA,vrr),e(Tr,Trr),e(Tr,ht),g(aA,ht,null),e(ht,Frr),e(ht,hhe),e(hhe,Crr),e(ht,Mrr),e(ht,bc),e(bc,Err),e(bc,phe),e(phe,yrr),e(bc,wrr),e(bc,_he),e(_he,Arr),e(bc,Lrr),e(ht,Brr),e(ht,uhe),e(uhe,xrr),e(ht,krr),g(nA,ht,null),e(Tr,Rrr),e(Tr,po),g(sA,po,null),e(po,Srr),e(po,bhe),e(bhe,Prr),e(po,$rr),e(po,un),e(un,Irr),e(un,vhe),e(vhe,Drr),e(un,Nrr),e(un,The),e(The,jrr),e(un,qrr),e(un,Fhe),e(Fhe,Grr),e(un,Orr),e(po,Xrr),e(po,H),e(H,d6),e(d6,Che),e(Che,Vrr),e(d6,zrr),e(d6,yG),e(yG,Wrr),e(d6,Qrr),e(H,Hrr),e(H,c6),e(c6,Mhe),e(Mhe,Urr),e(c6,Jrr),e(c6,wG),e(wG,Yrr),e(c6,Krr),e(H,Zrr),e(H,f6),e(f6,Ehe),e(Ehe,etr),e(f6,otr),e(f6,AG),e(AG,rtr),e(f6,ttr),e(H,atr),e(H,m6),e(m6,yhe),e(yhe,ntr),e(m6,str),e(m6,LG),e(LG,ltr),e(m6,itr),e(H,dtr),e(H,g6),e(g6,whe),e(whe,ctr),e(g6,ftr),e(g6,BG),e(BG,mtr),e(g6,gtr),e(H,htr),e(H,h6),e(h6,Ahe),e(Ahe,ptr),e(h6,_tr),e(h6,xG),e(xG,utr),e(h6,btr),e(H,vtr),e(H,p6),e(p6,Lhe),e(Lhe,Ttr),e(p6,Ftr),e(p6,kG),e(kG,Ctr),e(p6,Mtr),e(H,Etr),e(H,_6),e(_6,Bhe),e(Bhe,ytr),e(_6,wtr),e(_6,RG),e(RG,Atr),e(_6,Ltr),e(H,Btr),e(H,u6),e(u6,xhe),e(xhe,xtr),e(u6,ktr),e(u6,SG),e(SG,Rtr),e(u6,Str),e(H,Ptr),e(H,b6),e(b6,khe),e(khe,$tr),e(b6,Itr),e(b6,PG),e(PG,Dtr),e(b6,Ntr),e(H,jtr),e(H,v6),e(v6,Rhe),e(Rhe,qtr),e(v6,Gtr),e(v6,$G),e($G,Otr),e(v6,Xtr),e(H,Vtr),e(H,T6),e(T6,She),e(She,ztr),e(T6,Wtr),e(T6,IG),e(IG,Qtr),e(T6,Htr),e(H,Utr),e(H,F6),e(F6,Phe),e(Phe,Jtr),e(F6,Ytr),e(F6,DG),e(DG,Ktr),e(F6,Ztr),e(H,ear),e(H,C6),e(C6,$he),e($he,oar),e(C6,rar),e(C6,NG),e(NG,tar),e(C6,aar),e(H,nar),e(H,M6),e(M6,Ihe),e(Ihe,sar),e(M6,lar),e(M6,jG),e(jG,iar),e(M6,dar),e(H,car),e(H,E6),e(E6,Dhe),e(Dhe,far),e(E6,mar),e(E6,qG),e(qG,gar),e(E6,har),e(H,par),e(H,y6),e(y6,Nhe),e(Nhe,_ar),e(y6,uar),e(y6,GG),e(GG,bar),e(y6,Tar),e(H,Far),e(H,w6),e(w6,jhe),e(jhe,Car),e(w6,Mar),e(w6,OG),e(OG,Ear),e(w6,yar),e(H,war),e(H,A6),e(A6,qhe),e(qhe,Aar),e(A6,Lar),e(A6,XG),e(XG,Bar),e(A6,xar),e(H,kar),e(H,L6),e(L6,Ghe),e(Ghe,Rar),e(L6,Sar),e(L6,VG),e(VG,Par),e(L6,$ar),e(H,Iar),e(H,B6),e(B6,Ohe),e(Ohe,Dar),e(B6,Nar),e(B6,zG),e(zG,jar),e(B6,qar),e(H,Gar),e(H,x6),e(x6,Xhe),e(Xhe,Oar),e(x6,Xar),e(x6,WG),e(WG,Var),e(x6,zar),e(po,War),e(po,Vhe),e(Vhe,Qar),e(po,Har),g(lA,po,null),b(c,ORe,u),b(c,vc,u),e(vc,k6),e(k6,zhe),g(iA,zhe,null),e(vc,Uar),e(vc,Whe),e(Whe,Jar),b(c,XRe,u),b(c,Fr,u),g(dA,Fr,null),e(Fr,Yar),e(Fr,Tc),e(Tc,Kar),e(Tc,Qhe),e(Qhe,Zar),e(Tc,enr),e(Tc,Hhe),e(Hhe,onr),e(Tc,rnr),e(Fr,tnr),e(Fr,cA),e(cA,anr),e(cA,Uhe),e(Uhe,nnr),e(cA,snr),e(Fr,lnr),e(Fr,pt),g(fA,pt,null),e(pt,inr),e(pt,Jhe),e(Jhe,dnr),e(pt,cnr),e(pt,Fc),e(Fc,fnr),e(Fc,Yhe),e(Yhe,mnr),e(Fc,gnr),e(Fc,Khe),e(Khe,hnr),e(Fc,pnr),e(pt,_nr),e(pt,Zhe),e(Zhe,unr),e(pt,bnr),g(mA,pt,null),e(Fr,vnr),e(Fr,_o),g(gA,_o,null),e(_o,Tnr),e(_o,epe),e(epe,Fnr),e(_o,Cnr),e(_o,bn),e(bn,Mnr),e(bn,ope),e(ope,Enr),e(bn,ynr),e(bn,rpe),e(rpe,wnr),e(bn,Anr),e(bn,tpe),e(tpe,Lnr),e(bn,Bnr),e(_o,xnr),e(_o,ce),e(ce,R6),e(R6,ape),e(ape,knr),e(R6,Rnr),e(R6,QG),e(QG,Snr),e(R6,Pnr),e(ce,$nr),e(ce,S6),e(S6,npe),e(npe,Inr),e(S6,Dnr),e(S6,HG),e(HG,Nnr),e(S6,jnr),e(ce,qnr),e(ce,P6),e(P6,spe),e(spe,Gnr),e(P6,Onr),e(P6,UG),e(UG,Xnr),e(P6,Vnr),e(ce,znr),e(ce,$6),e($6,lpe),e(lpe,Wnr),e($6,Qnr),e($6,JG),e(JG,Hnr),e($6,Unr),e(ce,Jnr),e(ce,I6),e(I6,ipe),e(ipe,Ynr),e(I6,Knr),e(I6,YG),e(YG,Znr),e(I6,esr),e(ce,osr),e(ce,D6),e(D6,dpe),e(dpe,rsr),e(D6,tsr),e(D6,KG),e(KG,asr),e(D6,nsr),e(ce,ssr),e(ce,N6),e(N6,cpe),e(cpe,lsr),e(N6,isr),e(N6,ZG),e(ZG,dsr),e(N6,csr),e(ce,fsr),e(ce,j6),e(j6,fpe),e(fpe,msr),e(j6,gsr),e(j6,eO),e(eO,hsr),e(j6,psr),e(ce,_sr),e(ce,q6),e(q6,mpe),e(mpe,usr),e(q6,bsr),e(q6,oO),e(oO,vsr),e(q6,Tsr),e(ce,Fsr),e(ce,G6),e(G6,gpe),e(gpe,Csr),e(G6,Msr),e(G6,rO),e(rO,Esr),e(G6,ysr),e(ce,wsr),e(ce,O6),e(O6,hpe),e(hpe,Asr),e(O6,Lsr),e(O6,tO),e(tO,Bsr),e(O6,xsr),e(ce,ksr),e(ce,X6),e(X6,ppe),e(ppe,Rsr),e(X6,Ssr),e(X6,aO),e(aO,Psr),e(X6,$sr),e(_o,Isr),e(_o,_pe),e(_pe,Dsr),e(_o,Nsr),g(hA,_o,null),b(c,VRe,u),b(c,Cc,u),e(Cc,V6),e(V6,upe),g(pA,upe,null),e(Cc,jsr),e(Cc,bpe),e(bpe,qsr),b(c,zRe,u),b(c,Cr,u),g(_A,Cr,null),e(Cr,Gsr),e(Cr,Mc),e(Mc,Osr),e(Mc,vpe),e(vpe,Xsr),e(Mc,Vsr),e(Mc,Tpe),e(Tpe,zsr),e(Mc,Wsr),e(Cr,Qsr),e(Cr,uA),e(uA,Hsr),e(uA,Fpe),e(Fpe,Usr),e(uA,Jsr),e(Cr,Ysr),e(Cr,_t),g(bA,_t,null),e(_t,Ksr),e(_t,Cpe),e(Cpe,Zsr),e(_t,elr),e(_t,Ec),e(Ec,olr),e(Ec,Mpe),e(Mpe,rlr),e(Ec,tlr),e(Ec,Epe),e(Epe,alr),e(Ec,nlr),e(_t,slr),e(_t,ype),e(ype,llr),e(_t,ilr),g(vA,_t,null),e(Cr,dlr),e(Cr,uo),g(TA,uo,null),e(uo,clr),e(uo,wpe),e(wpe,flr),e(uo,mlr),e(uo,vn),e(vn,glr),e(vn,Ape),e(Ape,hlr),e(vn,plr),e(vn,Lpe),e(Lpe,_lr),e(vn,ulr),e(vn,Bpe),e(Bpe,blr),e(vn,vlr),e(uo,Tlr),e(uo,FA),e(FA,z6),e(z6,xpe),e(xpe,Flr),e(z6,Clr),e(z6,nO),e(nO,Mlr),e(z6,Elr),e(FA,ylr),e(FA,W6),e(W6,kpe),e(kpe,wlr),e(W6,Alr),e(W6,sO),e(sO,Llr),e(W6,Blr),e(uo,xlr),e(uo,Rpe),e(Rpe,klr),e(uo,Rlr),g(CA,uo,null),b(c,WRe,u),b(c,yc,u),e(yc,Q6),e(Q6,Spe),g(MA,Spe,null),e(yc,Slr),e(yc,Ppe),e(Ppe,Plr),b(c,QRe,u),b(c,Mr,u),g(EA,Mr,null),e(Mr,$lr),e(Mr,wc),e(wc,Ilr),e(wc,$pe),e($pe,Dlr),e(wc,Nlr),e(wc,Ipe),e(Ipe,jlr),e(wc,qlr),e(Mr,Glr),e(Mr,yA),e(yA,Olr),e(yA,Dpe),e(Dpe,Xlr),e(yA,Vlr),e(Mr,zlr),e(Mr,ut),g(wA,ut,null),e(ut,Wlr),e(ut,Npe),e(Npe,Qlr),e(ut,Hlr),e(ut,Ac),e(Ac,Ulr),e(Ac,jpe),e(jpe,Jlr),e(Ac,Ylr),e(Ac,qpe),e(qpe,Klr),e(Ac,Zlr),e(ut,eir),e(ut,Gpe),e(Gpe,oir),e(ut,rir),g(AA,ut,null),e(Mr,tir),e(Mr,bo),g(LA,bo,null),e(bo,air),e(bo,Ope),e(Ope,nir),e(bo,sir),e(bo,Tn),e(Tn,lir),e(Tn,Xpe),e(Xpe,iir),e(Tn,dir),e(Tn,Vpe),e(Vpe,cir),e(Tn,fir),e(Tn,zpe),e(zpe,mir),e(Tn,gir),e(bo,hir),e(bo,J),e(J,H6),e(H6,Wpe),e(Wpe,pir),e(H6,_ir),e(H6,lO),e(lO,uir),e(H6,bir),e(J,vir),e(J,U6),e(U6,Qpe),e(Qpe,Tir),e(U6,Fir),e(U6,iO),e(iO,Cir),e(U6,Mir),e(J,Eir),e(J,J6),e(J6,Hpe),e(Hpe,yir),e(J6,wir),e(J6,dO),e(dO,Air),e(J6,Lir),e(J,Bir),e(J,Y6),e(Y6,Upe),e(Upe,xir),e(Y6,kir),e(Y6,cO),e(cO,Rir),e(Y6,Sir),e(J,Pir),e(J,K6),e(K6,Jpe),e(Jpe,$ir),e(K6,Iir),e(K6,fO),e(fO,Dir),e(K6,Nir),e(J,jir),e(J,Z6),e(Z6,Ype),e(Ype,qir),e(Z6,Gir),e(Z6,mO),e(mO,Oir),e(Z6,Xir),e(J,Vir),e(J,eT),e(eT,Kpe),e(Kpe,zir),e(eT,Wir),e(eT,gO),e(gO,Qir),e(eT,Hir),e(J,Uir),e(J,oT),e(oT,Zpe),e(Zpe,Jir),e(oT,Yir),e(oT,hO),e(hO,Kir),e(oT,Zir),e(J,edr),e(J,rT),e(rT,e_e),e(e_e,odr),e(rT,rdr),e(rT,pO),e(pO,tdr),e(rT,adr),e(J,ndr),e(J,tT),e(tT,o_e),e(o_e,sdr),e(tT,ldr),e(tT,_O),e(_O,idr),e(tT,ddr),e(J,cdr),e(J,aT),e(aT,r_e),e(r_e,fdr),e(aT,mdr),e(aT,uO),e(uO,gdr),e(aT,hdr),e(J,pdr),e(J,nT),e(nT,t_e),e(t_e,_dr),e(nT,udr),e(nT,bO),e(bO,bdr),e(nT,vdr),e(J,Tdr),e(J,sT),e(sT,a_e),e(a_e,Fdr),e(sT,Cdr),e(sT,vO),e(vO,Mdr),e(sT,Edr),e(J,ydr),e(J,lT),e(lT,n_e),e(n_e,wdr),e(lT,Adr),e(lT,TO),e(TO,Ldr),e(lT,Bdr),e(J,xdr),e(J,iT),e(iT,s_e),e(s_e,kdr),e(iT,Rdr),e(iT,FO),e(FO,Sdr),e(iT,Pdr),e(J,$dr),e(J,dT),e(dT,l_e),e(l_e,Idr),e(dT,Ddr),e(dT,CO),e(CO,Ndr),e(dT,jdr),e(J,qdr),e(J,cT),e(cT,i_e),e(i_e,Gdr),e(cT,Odr),e(cT,MO),e(MO,Xdr),e(cT,Vdr),e(J,zdr),e(J,fT),e(fT,d_e),e(d_e,Wdr),e(fT,Qdr),e(fT,EO),e(EO,Hdr),e(fT,Udr),e(J,Jdr),e(J,mT),e(mT,c_e),e(c_e,Ydr),e(mT,Kdr),e(mT,yO),e(yO,Zdr),e(mT,ecr),e(J,ocr),e(J,gT),e(gT,f_e),e(f_e,rcr),e(gT,tcr),e(gT,wO),e(wO,acr),e(gT,ncr),e(bo,scr),e(bo,m_e),e(m_e,lcr),e(bo,icr),g(BA,bo,null),b(c,HRe,u),b(c,Lc,u),e(Lc,hT),e(hT,g_e),g(xA,g_e,null),e(Lc,dcr),e(Lc,h_e),e(h_e,ccr),b(c,URe,u),b(c,Er,u),g(kA,Er,null),e(Er,fcr),e(Er,Bc),e(Bc,mcr),e(Bc,p_e),e(p_e,gcr),e(Bc,hcr),e(Bc,__e),e(__e,pcr),e(Bc,_cr),e(Er,ucr),e(Er,RA),e(RA,bcr),e(RA,u_e),e(u_e,vcr),e(RA,Tcr),e(Er,Fcr),e(Er,bt),g(SA,bt,null),e(bt,Ccr),e(bt,b_e),e(b_e,Mcr),e(bt,Ecr),e(bt,xc),e(xc,ycr),e(xc,v_e),e(v_e,wcr),e(xc,Acr),e(xc,T_e),e(T_e,Lcr),e(xc,Bcr),e(bt,xcr),e(bt,F_e),e(F_e,kcr),e(bt,Rcr),g(PA,bt,null),e(Er,Scr),e(Er,vo),g($A,vo,null),e(vo,Pcr),e(vo,C_e),e(C_e,$cr),e(vo,Icr),e(vo,Fn),e(Fn,Dcr),e(Fn,M_e),e(M_e,Ncr),e(Fn,jcr),e(Fn,E_e),e(E_e,qcr),e(Fn,Gcr),e(Fn,y_e),e(y_e,Ocr),e(Fn,Xcr),e(vo,Vcr),e(vo,ue),e(ue,pT),e(pT,w_e),e(w_e,zcr),e(pT,Wcr),e(pT,AO),e(AO,Qcr),e(pT,Hcr),e(ue,Ucr),e(ue,_T),e(_T,A_e),e(A_e,Jcr),e(_T,Ycr),e(_T,LO),e(LO,Kcr),e(_T,Zcr),e(ue,efr),e(ue,uT),e(uT,L_e),e(L_e,ofr),e(uT,rfr),e(uT,BO),e(BO,tfr),e(uT,afr),e(ue,nfr),e(ue,bT),e(bT,B_e),e(B_e,sfr),e(bT,lfr),e(bT,xO),e(xO,ifr),e(bT,dfr),e(ue,cfr),e(ue,vT),e(vT,x_e),e(x_e,ffr),e(vT,mfr),e(vT,kO),e(kO,gfr),e(vT,hfr),e(ue,pfr),e(ue,TT),e(TT,k_e),e(k_e,_fr),e(TT,ufr),e(TT,RO),e(RO,bfr),e(TT,vfr),e(ue,Tfr),e(ue,FT),e(FT,R_e),e(R_e,Ffr),e(FT,Cfr),e(FT,SO),e(SO,Mfr),e(FT,Efr),e(ue,yfr),e(ue,CT),e(CT,S_e),e(S_e,wfr),e(CT,Afr),e(CT,PO),e(PO,Lfr),e(CT,Bfr),e(ue,xfr),e(ue,MT),e(MT,P_e),e(P_e,kfr),e(MT,Rfr),e(MT,$O),e($O,Sfr),e(MT,Pfr),e(ue,$fr),e(ue,ET),e(ET,$_e),e($_e,Ifr),e(ET,Dfr),e(ET,IO),e(IO,Nfr),e(ET,jfr),e(vo,qfr),e(vo,I_e),e(I_e,Gfr),e(vo,Ofr),g(IA,vo,null),b(c,JRe,u),b(c,kc,u),e(kc,yT),e(yT,D_e),g(DA,D_e,null),e(kc,Xfr),e(kc,N_e),e(N_e,Vfr),b(c,YRe,u),b(c,yr,u),g(NA,yr,null),e(yr,zfr),e(yr,Rc),e(Rc,Wfr),e(Rc,j_e),e(j_e,Qfr),e(Rc,Hfr),e(Rc,q_e),e(q_e,Ufr),e(Rc,Jfr),e(yr,Yfr),e(yr,jA),e(jA,Kfr),e(jA,G_e),e(G_e,Zfr),e(jA,emr),e(yr,omr),e(yr,vt),g(qA,vt,null),e(vt,rmr),e(vt,O_e),e(O_e,tmr),e(vt,amr),e(vt,Sc),e(Sc,nmr),e(Sc,X_e),e(X_e,smr),e(Sc,lmr),e(Sc,V_e),e(V_e,imr),e(Sc,dmr),e(vt,cmr),e(vt,z_e),e(z_e,fmr),e(vt,mmr),g(GA,vt,null),e(yr,gmr),e(yr,To),g(OA,To,null),e(To,hmr),e(To,W_e),e(W_e,pmr),e(To,_mr),e(To,Cn),e(Cn,umr),e(Cn,Q_e),e(Q_e,bmr),e(Cn,vmr),e(Cn,H_e),e(H_e,Tmr),e(Cn,Fmr),e(Cn,U_e),e(U_e,Cmr),e(Cn,Mmr),e(To,Emr),e(To,X),e(X,wT),e(wT,J_e),e(J_e,ymr),e(wT,wmr),e(wT,DO),e(DO,Amr),e(wT,Lmr),e(X,Bmr),e(X,AT),e(AT,Y_e),e(Y_e,xmr),e(AT,kmr),e(AT,NO),e(NO,Rmr),e(AT,Smr),e(X,Pmr),e(X,LT),e(LT,K_e),e(K_e,$mr),e(LT,Imr),e(LT,jO),e(jO,Dmr),e(LT,Nmr),e(X,jmr),e(X,BT),e(BT,Z_e),e(Z_e,qmr),e(BT,Gmr),e(BT,qO),e(qO,Omr),e(BT,Xmr),e(X,Vmr),e(X,xT),e(xT,eue),e(eue,zmr),e(xT,Wmr),e(xT,GO),e(GO,Qmr),e(xT,Hmr),e(X,Umr),e(X,kT),e(kT,oue),e(oue,Jmr),e(kT,Ymr),e(kT,OO),e(OO,Kmr),e(kT,Zmr),e(X,egr),e(X,RT),e(RT,rue),e(rue,ogr),e(RT,rgr),e(RT,XO),e(XO,tgr),e(RT,agr),e(X,ngr),e(X,ST),e(ST,tue),e(tue,sgr),e(ST,lgr),e(ST,VO),e(VO,igr),e(ST,dgr),e(X,cgr),e(X,PT),e(PT,aue),e(aue,fgr),e(PT,mgr),e(PT,zO),e(zO,ggr),e(PT,hgr),e(X,pgr),e(X,$T),e($T,nue),e(nue,_gr),e($T,ugr),e($T,WO),e(WO,bgr),e($T,vgr),e(X,Tgr),e(X,IT),e(IT,sue),e(sue,Fgr),e(IT,Cgr),e(IT,QO),e(QO,Mgr),e(IT,Egr),e(X,ygr),e(X,DT),e(DT,lue),e(lue,wgr),e(DT,Agr),e(DT,HO),e(HO,Lgr),e(DT,Bgr),e(X,xgr),e(X,NT),e(NT,iue),e(iue,kgr),e(NT,Rgr),e(NT,UO),e(UO,Sgr),e(NT,Pgr),e(X,$gr),e(X,jT),e(jT,due),e(due,Igr),e(jT,Dgr),e(jT,JO),e(JO,Ngr),e(jT,jgr),e(X,qgr),e(X,qT),e(qT,cue),e(cue,Ggr),e(qT,Ogr),e(qT,YO),e(YO,Xgr),e(qT,Vgr),e(X,zgr),e(X,GT),e(GT,fue),e(fue,Wgr),e(GT,Qgr),e(GT,KO),e(KO,Hgr),e(GT,Ugr),e(X,Jgr),e(X,OT),e(OT,mue),e(mue,Ygr),e(OT,Kgr),e(OT,ZO),e(ZO,Zgr),e(OT,ehr),e(X,ohr),e(X,XT),e(XT,gue),e(gue,rhr),e(XT,thr),e(XT,eX),e(eX,ahr),e(XT,nhr),e(X,shr),e(X,VT),e(VT,hue),e(hue,lhr),e(VT,ihr),e(VT,oX),e(oX,dhr),e(VT,chr),e(X,fhr),e(X,zT),e(zT,pue),e(pue,mhr),e(zT,ghr),e(zT,rX),e(rX,hhr),e(zT,phr),e(X,_hr),e(X,WT),e(WT,_ue),e(_ue,uhr),e(WT,bhr),e(WT,tX),e(tX,vhr),e(WT,Thr),e(X,Fhr),e(X,QT),e(QT,uue),e(uue,Chr),e(QT,Mhr),e(QT,aX),e(aX,Ehr),e(QT,yhr),e(X,whr),e(X,HT),e(HT,bue),e(bue,Ahr),e(HT,Lhr),e(HT,nX),e(nX,Bhr),e(HT,xhr),e(X,khr),e(X,UT),e(UT,vue),e(vue,Rhr),e(UT,Shr),e(UT,sX),e(sX,Phr),e(UT,$hr),e(X,Ihr),e(X,JT),e(JT,Tue),e(Tue,Dhr),e(JT,Nhr),e(JT,lX),e(lX,jhr),e(JT,qhr),e(X,Ghr),e(X,YT),e(YT,Fue),e(Fue,Ohr),e(YT,Xhr),e(YT,iX),e(iX,Vhr),e(YT,zhr),e(To,Whr),e(To,Cue),e(Cue,Qhr),e(To,Hhr),g(XA,To,null),b(c,KRe,u),b(c,Pc,u),e(Pc,KT),e(KT,Mue),g(VA,Mue,null),e(Pc,Uhr),e(Pc,Eue),e(Eue,Jhr),b(c,ZRe,u),b(c,wr,u),g(zA,wr,null),e(wr,Yhr),e(wr,$c),e($c,Khr),e($c,yue),e(yue,Zhr),e($c,epr),e($c,wue),e(wue,opr),e($c,rpr),e(wr,tpr),e(wr,WA),e(WA,apr),e(WA,Aue),e(Aue,npr),e(WA,spr),e(wr,lpr),e(wr,Tt),g(QA,Tt,null),e(Tt,ipr),e(Tt,Lue),e(Lue,dpr),e(Tt,cpr),e(Tt,Ic),e(Ic,fpr),e(Ic,Bue),e(Bue,mpr),e(Ic,gpr),e(Ic,xue),e(xue,hpr),e(Ic,ppr),e(Tt,_pr),e(Tt,kue),e(kue,upr),e(Tt,bpr),g(HA,Tt,null),e(wr,vpr),e(wr,Fo),g(UA,Fo,null),e(Fo,Tpr),e(Fo,Rue),e(Rue,Fpr),e(Fo,Cpr),e(Fo,Mn),e(Mn,Mpr),e(Mn,Sue),e(Sue,Epr),e(Mn,ypr),e(Mn,Pue),e(Pue,wpr),e(Mn,Apr),e(Mn,$ue),e($ue,Lpr),e(Mn,Bpr),e(Fo,xpr),e(Fo,ae),e(ae,ZT),e(ZT,Iue),e(Iue,kpr),e(ZT,Rpr),e(ZT,dX),e(dX,Spr),e(ZT,Ppr),e(ae,$pr),e(ae,e7),e(e7,Due),e(Due,Ipr),e(e7,Dpr),e(e7,cX),e(cX,Npr),e(e7,jpr),e(ae,qpr),e(ae,o7),e(o7,Nue),e(Nue,Gpr),e(o7,Opr),e(o7,fX),e(fX,Xpr),e(o7,Vpr),e(ae,zpr),e(ae,r7),e(r7,jue),e(jue,Wpr),e(r7,Qpr),e(r7,mX),e(mX,Hpr),e(r7,Upr),e(ae,Jpr),e(ae,t7),e(t7,que),e(que,Ypr),e(t7,Kpr),e(t7,gX),e(gX,Zpr),e(t7,e_r),e(ae,o_r),e(ae,a7),e(a7,Gue),e(Gue,r_r),e(a7,t_r),e(a7,hX),e(hX,a_r),e(a7,n_r),e(ae,s_r),e(ae,n7),e(n7,Oue),e(Oue,l_r),e(n7,i_r),e(n7,pX),e(pX,d_r),e(n7,c_r),e(ae,f_r),e(ae,s7),e(s7,Xue),e(Xue,m_r),e(s7,g_r),e(s7,_X),e(_X,h_r),e(s7,p_r),e(ae,__r),e(ae,l7),e(l7,Vue),e(Vue,u_r),e(l7,b_r),e(l7,uX),e(uX,v_r),e(l7,T_r),e(ae,F_r),e(ae,i7),e(i7,zue),e(zue,C_r),e(i7,M_r),e(i7,bX),e(bX,E_r),e(i7,y_r),e(ae,w_r),e(ae,d7),e(d7,Wue),e(Wue,A_r),e(d7,L_r),e(d7,vX),e(vX,B_r),e(d7,x_r),e(ae,k_r),e(ae,c7),e(c7,Que),e(Que,R_r),e(c7,S_r),e(c7,TX),e(TX,P_r),e(c7,$_r),e(ae,I_r),e(ae,f7),e(f7,Hue),e(Hue,D_r),e(f7,N_r),e(f7,FX),e(FX,j_r),e(f7,q_r),e(ae,G_r),e(ae,m7),e(m7,Uue),e(Uue,O_r),e(m7,X_r),e(m7,CX),e(CX,V_r),e(m7,z_r),e(ae,W_r),e(ae,g7),e(g7,Jue),e(Jue,Q_r),e(g7,H_r),e(g7,MX),e(MX,U_r),e(g7,J_r),e(ae,Y_r),e(ae,h7),e(h7,Yue),e(Yue,K_r),e(h7,Z_r),e(h7,EX),e(EX,eur),e(h7,our),e(ae,rur),e(ae,p7),e(p7,Kue),e(Kue,tur),e(p7,aur),e(p7,yX),e(yX,nur),e(p7,sur),e(Fo,lur),e(Fo,Zue),e(Zue,iur),e(Fo,dur),g(JA,Fo,null),b(c,eSe,u),b(c,Dc,u),e(Dc,_7),e(_7,e1e),g(YA,e1e,null),e(Dc,cur),e(Dc,o1e),e(o1e,fur),b(c,oSe,u),b(c,Ar,u),g(KA,Ar,null),e(Ar,mur),e(Ar,Nc),e(Nc,gur),e(Nc,r1e),e(r1e,hur),e(Nc,pur),e(Nc,t1e),e(t1e,_ur),e(Nc,uur),e(Ar,bur),e(Ar,ZA),e(ZA,vur),e(ZA,a1e),e(a1e,Tur),e(ZA,Fur),e(Ar,Cur),e(Ar,Ft),g(e0,Ft,null),e(Ft,Mur),e(Ft,n1e),e(n1e,Eur),e(Ft,yur),e(Ft,jc),e(jc,wur),e(jc,s1e),e(s1e,Aur),e(jc,Lur),e(jc,l1e),e(l1e,Bur),e(jc,xur),e(Ft,kur),e(Ft,i1e),e(i1e,Rur),e(Ft,Sur),g(o0,Ft,null),e(Ar,Pur),e(Ar,Co),g(r0,Co,null),e(Co,$ur),e(Co,d1e),e(d1e,Iur),e(Co,Dur),e(Co,En),e(En,Nur),e(En,c1e),e(c1e,jur),e(En,qur),e(En,f1e),e(f1e,Gur),e(En,Our),e(En,m1e),e(m1e,Xur),e(En,Vur),e(Co,zur),e(Co,g1e),e(g1e,u7),e(u7,h1e),e(h1e,Wur),e(u7,Qur),e(u7,wX),e(wX,Hur),e(u7,Uur),e(Co,Jur),e(Co,p1e),e(p1e,Yur),e(Co,Kur),g(t0,Co,null),b(c,rSe,u),b(c,qc,u),e(qc,b7),e(b7,_1e),g(a0,_1e,null),e(qc,Zur),e(qc,u1e),e(u1e,e1r),b(c,tSe,u),b(c,Lr,u),g(n0,Lr,null),e(Lr,o1r),e(Lr,Gc),e(Gc,r1r),e(Gc,b1e),e(b1e,t1r),e(Gc,a1r),e(Gc,v1e),e(v1e,n1r),e(Gc,s1r),e(Lr,l1r),e(Lr,s0),e(s0,i1r),e(s0,T1e),e(T1e,d1r),e(s0,c1r),e(Lr,f1r),e(Lr,Ct),g(l0,Ct,null),e(Ct,m1r),e(Ct,F1e),e(F1e,g1r),e(Ct,h1r),e(Ct,Oc),e(Oc,p1r),e(Oc,C1e),e(C1e,_1r),e(Oc,u1r),e(Oc,M1e),e(M1e,b1r),e(Oc,v1r),e(Ct,T1r),e(Ct,E1e),e(E1e,F1r),e(Ct,C1r),g(i0,Ct,null),e(Lr,M1r),e(Lr,Mo),g(d0,Mo,null),e(Mo,E1r),e(Mo,y1e),e(y1e,y1r),e(Mo,w1r),e(Mo,yn),e(yn,A1r),e(yn,w1e),e(w1e,L1r),e(yn,B1r),e(yn,A1e),e(A1e,x1r),e(yn,k1r),e(yn,L1e),e(L1e,R1r),e(yn,S1r),e(Mo,P1r),e(Mo,Y),e(Y,v7),e(v7,B1e),e(B1e,$1r),e(v7,I1r),e(v7,AX),e(AX,D1r),e(v7,N1r),e(Y,j1r),e(Y,T7),e(T7,x1e),e(x1e,q1r),e(T7,G1r),e(T7,LX),e(LX,O1r),e(T7,X1r),e(Y,V1r),e(Y,F7),e(F7,k1e),e(k1e,z1r),e(F7,W1r),e(F7,BX),e(BX,Q1r),e(F7,H1r),e(Y,U1r),e(Y,C7),e(C7,R1e),e(R1e,J1r),e(C7,Y1r),e(C7,xX),e(xX,K1r),e(C7,Z1r),e(Y,e4r),e(Y,M7),e(M7,S1e),e(S1e,o4r),e(M7,r4r),e(M7,kX),e(kX,t4r),e(M7,a4r),e(Y,n4r),e(Y,E7),e(E7,P1e),e(P1e,s4r),e(E7,l4r),e(E7,RX),e(RX,i4r),e(E7,d4r),e(Y,c4r),e(Y,y7),e(y7,$1e),e($1e,f4r),e(y7,m4r),e(y7,SX),e(SX,g4r),e(y7,h4r),e(Y,p4r),e(Y,w7),e(w7,I1e),e(I1e,_4r),e(w7,u4r),e(w7,PX),e(PX,b4r),e(w7,v4r),e(Y,T4r),e(Y,A7),e(A7,D1e),e(D1e,F4r),e(A7,C4r),e(A7,$X),e($X,M4r),e(A7,E4r),e(Y,y4r),e(Y,L7),e(L7,N1e),e(N1e,w4r),e(L7,A4r),e(L7,IX),e(IX,L4r),e(L7,B4r),e(Y,x4r),e(Y,B7),e(B7,j1e),e(j1e,k4r),e(B7,R4r),e(B7,DX),e(DX,S4r),e(B7,P4r),e(Y,$4r),e(Y,x7),e(x7,q1e),e(q1e,I4r),e(x7,D4r),e(x7,NX),e(NX,N4r),e(x7,j4r),e(Y,q4r),e(Y,k7),e(k7,G1e),e(G1e,G4r),e(k7,O4r),e(k7,jX),e(jX,X4r),e(k7,V4r),e(Y,z4r),e(Y,R7),e(R7,O1e),e(O1e,W4r),e(R7,Q4r),e(R7,qX),e(qX,H4r),e(R7,U4r),e(Y,J4r),e(Y,S7),e(S7,X1e),e(X1e,Y4r),e(S7,K4r),e(S7,GX),e(GX,Z4r),e(S7,ebr),e(Y,obr),e(Y,P7),e(P7,V1e),e(V1e,rbr),e(P7,tbr),e(P7,OX),e(OX,abr),e(P7,nbr),e(Y,sbr),e(Y,$7),e($7,z1e),e(z1e,lbr),e($7,ibr),e($7,XX),e(XX,dbr),e($7,cbr),e(Y,fbr),e(Y,I7),e(I7,W1e),e(W1e,mbr),e(I7,gbr),e(I7,VX),e(VX,hbr),e(I7,pbr),e(Y,_br),e(Y,D7),e(D7,Q1e),e(Q1e,ubr),e(D7,bbr),e(D7,zX),e(zX,vbr),e(D7,Tbr),e(Y,Fbr),e(Y,N7),e(N7,H1e),e(H1e,Cbr),e(N7,Mbr),e(N7,WX),e(WX,Ebr),e(N7,ybr),e(Mo,wbr),e(Mo,U1e),e(U1e,Abr),e(Mo,Lbr),g(c0,Mo,null),b(c,aSe,u),b(c,Xc,u),e(Xc,j7),e(j7,J1e),g(f0,J1e,null),e(Xc,Bbr),e(Xc,Y1e),e(Y1e,xbr),b(c,nSe,u),b(c,Br,u),g(m0,Br,null),e(Br,kbr),e(Br,Vc),e(Vc,Rbr),e(Vc,K1e),e(K1e,Sbr),e(Vc,Pbr),e(Vc,Z1e),e(Z1e,$br),e(Vc,Ibr),e(Br,Dbr),e(Br,g0),e(g0,Nbr),e(g0,e4e),e(e4e,jbr),e(g0,qbr),e(Br,Gbr),e(Br,Mt),g(h0,Mt,null),e(Mt,Obr),e(Mt,o4e),e(o4e,Xbr),e(Mt,Vbr),e(Mt,zc),e(zc,zbr),e(zc,r4e),e(r4e,Wbr),e(zc,Qbr),e(zc,t4e),e(t4e,Hbr),e(zc,Ubr),e(Mt,Jbr),e(Mt,a4e),e(a4e,Ybr),e(Mt,Kbr),g(p0,Mt,null),e(Br,Zbr),e(Br,Eo),g(_0,Eo,null),e(Eo,e3r),e(Eo,n4e),e(n4e,o3r),e(Eo,r3r),e(Eo,wn),e(wn,t3r),e(wn,s4e),e(s4e,a3r),e(wn,n3r),e(wn,l4e),e(l4e,s3r),e(wn,l3r),e(wn,i4e),e(i4e,i3r),e(wn,d3r),e(Eo,c3r),e(Eo,K),e(K,q7),e(q7,d4e),e(d4e,f3r),e(q7,m3r),e(q7,QX),e(QX,g3r),e(q7,h3r),e(K,p3r),e(K,G7),e(G7,c4e),e(c4e,_3r),e(G7,u3r),e(G7,HX),e(HX,b3r),e(G7,v3r),e(K,T3r),e(K,O7),e(O7,f4e),e(f4e,F3r),e(O7,C3r),e(O7,UX),e(UX,M3r),e(O7,E3r),e(K,y3r),e(K,X7),e(X7,m4e),e(m4e,w3r),e(X7,A3r),e(X7,JX),e(JX,L3r),e(X7,B3r),e(K,x3r),e(K,V7),e(V7,g4e),e(g4e,k3r),e(V7,R3r),e(V7,YX),e(YX,S3r),e(V7,P3r),e(K,$3r),e(K,z7),e(z7,h4e),e(h4e,I3r),e(z7,D3r),e(z7,KX),e(KX,N3r),e(z7,j3r),e(K,q3r),e(K,W7),e(W7,p4e),e(p4e,G3r),e(W7,O3r),e(W7,ZX),e(ZX,X3r),e(W7,V3r),e(K,z3r),e(K,Q7),e(Q7,_4e),e(_4e,W3r),e(Q7,Q3r),e(Q7,eV),e(eV,H3r),e(Q7,U3r),e(K,J3r),e(K,H7),e(H7,u4e),e(u4e,Y3r),e(H7,K3r),e(H7,oV),e(oV,Z3r),e(H7,e2r),e(K,o2r),e(K,U7),e(U7,b4e),e(b4e,r2r),e(U7,t2r),e(U7,rV),e(rV,a2r),e(U7,n2r),e(K,s2r),e(K,J7),e(J7,v4e),e(v4e,l2r),e(J7,i2r),e(J7,tV),e(tV,d2r),e(J7,c2r),e(K,f2r),e(K,Y7),e(Y7,T4e),e(T4e,m2r),e(Y7,g2r),e(Y7,aV),e(aV,h2r),e(Y7,p2r),e(K,_2r),e(K,K7),e(K7,F4e),e(F4e,u2r),e(K7,b2r),e(K7,nV),e(nV,v2r),e(K7,T2r),e(K,F2r),e(K,Z7),e(Z7,C4e),e(C4e,C2r),e(Z7,M2r),e(Z7,sV),e(sV,E2r),e(Z7,y2r),e(K,w2r),e(K,eF),e(eF,M4e),e(M4e,A2r),e(eF,L2r),e(eF,lV),e(lV,B2r),e(eF,x2r),e(K,k2r),e(K,oF),e(oF,E4e),e(E4e,R2r),e(oF,S2r),e(oF,iV),e(iV,P2r),e(oF,$2r),e(K,I2r),e(K,rF),e(rF,y4e),e(y4e,D2r),e(rF,N2r),e(rF,dV),e(dV,j2r),e(rF,q2r),e(K,G2r),e(K,tF),e(tF,w4e),e(w4e,O2r),e(tF,X2r),e(tF,cV),e(cV,V2r),e(tF,z2r),e(K,W2r),e(K,aF),e(aF,A4e),e(A4e,Q2r),e(aF,H2r),e(aF,fV),e(fV,U2r),e(aF,J2r),e(K,Y2r),e(K,nF),e(nF,L4e),e(L4e,K2r),e(nF,Z2r),e(nF,mV),e(mV,evr),e(nF,ovr),e(Eo,rvr),e(Eo,B4e),e(B4e,tvr),e(Eo,avr),g(u0,Eo,null),b(c,sSe,u),b(c,Wc,u),e(Wc,sF),e(sF,x4e),g(b0,x4e,null),e(Wc,nvr),e(Wc,k4e),e(k4e,svr),b(c,lSe,u),b(c,xr,u),g(v0,xr,null),e(xr,lvr),e(xr,Qc),e(Qc,ivr),e(Qc,R4e),e(R4e,dvr),e(Qc,cvr),e(Qc,S4e),e(S4e,fvr),e(Qc,mvr),e(xr,gvr),e(xr,T0),e(T0,hvr),e(T0,P4e),e(P4e,pvr),e(T0,_vr),e(xr,uvr),e(xr,Et),g(F0,Et,null),e(Et,bvr),e(Et,$4e),e($4e,vvr),e(Et,Tvr),e(Et,Hc),e(Hc,Fvr),e(Hc,I4e),e(I4e,Cvr),e(Hc,Mvr),e(Hc,D4e),e(D4e,Evr),e(Hc,yvr),e(Et,wvr),e(Et,N4e),e(N4e,Avr),e(Et,Lvr),g(C0,Et,null),e(xr,Bvr),e(xr,yo),g(M0,yo,null),e(yo,xvr),e(yo,j4e),e(j4e,kvr),e(yo,Rvr),e(yo,An),e(An,Svr),e(An,q4e),e(q4e,Pvr),e(An,$vr),e(An,G4e),e(G4e,Ivr),e(An,Dvr),e(An,O4e),e(O4e,Nvr),e(An,jvr),e(yo,qvr),e(yo,X4e),e(X4e,lF),e(lF,V4e),e(V4e,Gvr),e(lF,Ovr),e(lF,gV),e(gV,Xvr),e(lF,Vvr),e(yo,zvr),e(yo,z4e),e(z4e,Wvr),e(yo,Qvr),g(E0,yo,null),b(c,iSe,u),b(c,Uc,u),e(Uc,iF),e(iF,W4e),g(y0,W4e,null),e(Uc,Hvr),e(Uc,Q4e),e(Q4e,Uvr),b(c,dSe,u),b(c,kr,u),g(w0,kr,null),e(kr,Jvr),e(kr,Jc),e(Jc,Yvr),e(Jc,H4e),e(H4e,Kvr),e(Jc,Zvr),e(Jc,U4e),e(U4e,e6r),e(Jc,o6r),e(kr,r6r),e(kr,A0),e(A0,t6r),e(A0,J4e),e(J4e,a6r),e(A0,n6r),e(kr,s6r),e(kr,yt),g(L0,yt,null),e(yt,l6r),e(yt,Y4e),e(Y4e,i6r),e(yt,d6r),e(yt,Yc),e(Yc,c6r),e(Yc,K4e),e(K4e,f6r),e(Yc,m6r),e(Yc,Z4e),e(Z4e,g6r),e(Yc,h6r),e(yt,p6r),e(yt,ebe),e(ebe,_6r),e(yt,u6r),g(B0,yt,null),e(kr,b6r),e(kr,wo),g(x0,wo,null),e(wo,v6r),e(wo,obe),e(obe,T6r),e(wo,F6r),e(wo,Ln),e(Ln,C6r),e(Ln,rbe),e(rbe,M6r),e(Ln,E6r),e(Ln,tbe),e(tbe,y6r),e(Ln,w6r),e(Ln,abe),e(abe,A6r),e(Ln,L6r),e(wo,B6r),e(wo,nbe),e(nbe,dF),e(dF,sbe),e(sbe,x6r),e(dF,k6r),e(dF,hV),e(hV,R6r),e(dF,S6r),e(wo,P6r),e(wo,lbe),e(lbe,$6r),e(wo,I6r),g(k0,wo,null),b(c,cSe,u),b(c,Kc,u),e(Kc,cF),e(cF,ibe),g(R0,ibe,null),e(Kc,D6r),e(Kc,dbe),e(dbe,N6r),b(c,fSe,u),b(c,Rr,u),g(S0,Rr,null),e(Rr,j6r),e(Rr,Zc),e(Zc,q6r),e(Zc,cbe),e(cbe,G6r),e(Zc,O6r),e(Zc,fbe),e(fbe,X6r),e(Zc,V6r),e(Rr,z6r),e(Rr,P0),e(P0,W6r),e(P0,mbe),e(mbe,Q6r),e(P0,H6r),e(Rr,U6r),e(Rr,wt),g($0,wt,null),e(wt,J6r),e(wt,gbe),e(gbe,Y6r),e(wt,K6r),e(wt,ef),e(ef,Z6r),e(ef,hbe),e(hbe,eTr),e(ef,oTr),e(ef,pbe),e(pbe,rTr),e(ef,tTr),e(wt,aTr),e(wt,_be),e(_be,nTr),e(wt,sTr),g(I0,wt,null),e(Rr,lTr),e(Rr,Ao),g(D0,Ao,null),e(Ao,iTr),e(Ao,ube),e(ube,dTr),e(Ao,cTr),e(Ao,Bn),e(Bn,fTr),e(Bn,bbe),e(bbe,mTr),e(Bn,gTr),e(Bn,vbe),e(vbe,hTr),e(Bn,pTr),e(Bn,Tbe),e(Tbe,_Tr),e(Bn,uTr),e(Ao,bTr),e(Ao,z),e(z,fF),e(fF,Fbe),e(Fbe,vTr),e(fF,TTr),e(fF,pV),e(pV,FTr),e(fF,CTr),e(z,MTr),e(z,mF),e(mF,Cbe),e(Cbe,ETr),e(mF,yTr),e(mF,_V),e(_V,wTr),e(mF,ATr),e(z,LTr),e(z,gF),e(gF,Mbe),e(Mbe,BTr),e(gF,xTr),e(gF,uV),e(uV,kTr),e(gF,RTr),e(z,STr),e(z,hF),e(hF,Ebe),e(Ebe,PTr),e(hF,$Tr),e(hF,bV),e(bV,ITr),e(hF,DTr),e(z,NTr),e(z,pF),e(pF,ybe),e(ybe,jTr),e(pF,qTr),e(pF,vV),e(vV,GTr),e(pF,OTr),e(z,XTr),e(z,_F),e(_F,wbe),e(wbe,VTr),e(_F,zTr),e(_F,TV),e(TV,WTr),e(_F,QTr),e(z,HTr),e(z,uF),e(uF,Abe),e(Abe,UTr),e(uF,JTr),e(uF,FV),e(FV,YTr),e(uF,KTr),e(z,ZTr),e(z,bF),e(bF,Lbe),e(Lbe,e7r),e(bF,o7r),e(bF,CV),e(CV,r7r),e(bF,t7r),e(z,a7r),e(z,vF),e(vF,Bbe),e(Bbe,n7r),e(vF,s7r),e(vF,MV),e(MV,l7r),e(vF,i7r),e(z,d7r),e(z,TF),e(TF,xbe),e(xbe,c7r),e(TF,f7r),e(TF,EV),e(EV,m7r),e(TF,g7r),e(z,h7r),e(z,FF),e(FF,kbe),e(kbe,p7r),e(FF,_7r),e(FF,yV),e(yV,u7r),e(FF,b7r),e(z,v7r),e(z,CF),e(CF,Rbe),e(Rbe,T7r),e(CF,F7r),e(CF,wV),e(wV,C7r),e(CF,M7r),e(z,E7r),e(z,MF),e(MF,Sbe),e(Sbe,y7r),e(MF,w7r),e(MF,AV),e(AV,A7r),e(MF,L7r),e(z,B7r),e(z,EF),e(EF,Pbe),e(Pbe,x7r),e(EF,k7r),e(EF,LV),e(LV,R7r),e(EF,S7r),e(z,P7r),e(z,yF),e(yF,$be),e($be,$7r),e(yF,I7r),e(yF,BV),e(BV,D7r),e(yF,N7r),e(z,j7r),e(z,wF),e(wF,Ibe),e(Ibe,q7r),e(wF,G7r),e(wF,xV),e(xV,O7r),e(wF,X7r),e(z,V7r),e(z,AF),e(AF,Dbe),e(Dbe,z7r),e(AF,W7r),e(AF,kV),e(kV,Q7r),e(AF,H7r),e(z,U7r),e(z,LF),e(LF,Nbe),e(Nbe,J7r),e(LF,Y7r),e(LF,RV),e(RV,K7r),e(LF,Z7r),e(z,eFr),e(z,BF),e(BF,jbe),e(jbe,oFr),e(BF,rFr),e(BF,SV),e(SV,tFr),e(BF,aFr),e(z,nFr),e(z,xF),e(xF,qbe),e(qbe,sFr),e(xF,lFr),e(xF,PV),e(PV,iFr),e(xF,dFr),e(z,cFr),e(z,kF),e(kF,Gbe),e(Gbe,fFr),e(kF,mFr),e(kF,$V),e($V,gFr),e(kF,hFr),e(z,pFr),e(z,RF),e(RF,Obe),e(Obe,_Fr),e(RF,uFr),e(RF,IV),e(IV,bFr),e(RF,vFr),e(z,TFr),e(z,SF),e(SF,Xbe),e(Xbe,FFr),e(SF,CFr),e(SF,DV),e(DV,MFr),e(SF,EFr),e(z,yFr),e(z,PF),e(PF,Vbe),e(Vbe,wFr),e(PF,AFr),e(PF,NV),e(NV,LFr),e(PF,BFr),e(z,xFr),e(z,$F),e($F,zbe),e(zbe,kFr),e($F,RFr),e($F,jV),e(jV,SFr),e($F,PFr),e(Ao,$Fr),e(Ao,Wbe),e(Wbe,IFr),e(Ao,DFr),g(N0,Ao,null),b(c,mSe,u),b(c,of,u),e(of,IF),e(IF,Qbe),g(j0,Qbe,null),e(of,NFr),e(of,Hbe),e(Hbe,jFr),b(c,gSe,u),b(c,Sr,u),g(q0,Sr,null),e(Sr,qFr),e(Sr,rf),e(rf,GFr),e(rf,Ube),e(Ube,OFr),e(rf,XFr),e(rf,Jbe),e(Jbe,VFr),e(rf,zFr),e(Sr,WFr),e(Sr,G0),e(G0,QFr),e(G0,Ybe),e(Ybe,HFr),e(G0,UFr),e(Sr,JFr),e(Sr,At),g(O0,At,null),e(At,YFr),e(At,Kbe),e(Kbe,KFr),e(At,ZFr),e(At,tf),e(tf,eCr),e(tf,Zbe),e(Zbe,oCr),e(tf,rCr),e(tf,e3e),e(e3e,tCr),e(tf,aCr),e(At,nCr),e(At,o3e),e(o3e,sCr),e(At,lCr),g(X0,At,null),e(Sr,iCr),e(Sr,Lo),g(V0,Lo,null),e(Lo,dCr),e(Lo,r3e),e(r3e,cCr),e(Lo,fCr),e(Lo,xn),e(xn,mCr),e(xn,t3e),e(t3e,gCr),e(xn,hCr),e(xn,a3e),e(a3e,pCr),e(xn,_Cr),e(xn,n3e),e(n3e,uCr),e(xn,bCr),e(Lo,vCr),e(Lo,ca),e(ca,DF),e(DF,s3e),e(s3e,TCr),e(DF,FCr),e(DF,qV),e(qV,CCr),e(DF,MCr),e(ca,ECr),e(ca,NF),e(NF,l3e),e(l3e,yCr),e(NF,wCr),e(NF,GV),e(GV,ACr),e(NF,LCr),e(ca,BCr),e(ca,jF),e(jF,i3e),e(i3e,xCr),e(jF,kCr),e(jF,OV),e(OV,RCr),e(jF,SCr),e(ca,PCr),e(ca,qF),e(qF,d3e),e(d3e,$Cr),e(qF,ICr),e(qF,XV),e(XV,DCr),e(qF,NCr),e(ca,jCr),e(ca,GF),e(GF,c3e),e(c3e,qCr),e(GF,GCr),e(GF,VV),e(VV,OCr),e(GF,XCr),e(Lo,VCr),e(Lo,f3e),e(f3e,zCr),e(Lo,WCr),g(z0,Lo,null),b(c,hSe,u),b(c,af,u),e(af,OF),e(OF,m3e),g(W0,m3e,null),e(af,QCr),e(af,g3e),e(g3e,HCr),b(c,pSe,u),b(c,Pr,u),g(Q0,Pr,null),e(Pr,UCr),e(Pr,nf),e(nf,JCr),e(nf,h3e),e(h3e,YCr),e(nf,KCr),e(nf,p3e),e(p3e,ZCr),e(nf,eMr),e(Pr,oMr),e(Pr,H0),e(H0,rMr),e(H0,_3e),e(_3e,tMr),e(H0,aMr),e(Pr,nMr),e(Pr,Lt),g(U0,Lt,null),e(Lt,sMr),e(Lt,u3e),e(u3e,lMr),e(Lt,iMr),e(Lt,sf),e(sf,dMr),e(sf,b3e),e(b3e,cMr),e(sf,fMr),e(sf,v3e),e(v3e,mMr),e(sf,gMr),e(Lt,hMr),e(Lt,T3e),e(T3e,pMr),e(Lt,_Mr),g(J0,Lt,null),e(Pr,uMr),e(Pr,Bo),g(Y0,Bo,null),e(Bo,bMr),e(Bo,F3e),e(F3e,vMr),e(Bo,TMr),e(Bo,kn),e(kn,FMr),e(kn,C3e),e(C3e,CMr),e(kn,MMr),e(kn,M3e),e(M3e,EMr),e(kn,yMr),e(kn,E3e),e(E3e,wMr),e(kn,AMr),e(Bo,LMr),e(Bo,fe),e(fe,XF),e(XF,y3e),e(y3e,BMr),e(XF,xMr),e(XF,zV),e(zV,kMr),e(XF,RMr),e(fe,SMr),e(fe,VF),e(VF,w3e),e(w3e,PMr),e(VF,$Mr),e(VF,WV),e(WV,IMr),e(VF,DMr),e(fe,NMr),e(fe,zF),e(zF,A3e),e(A3e,jMr),e(zF,qMr),e(zF,QV),e(QV,GMr),e(zF,OMr),e(fe,XMr),e(fe,WF),e(WF,L3e),e(L3e,VMr),e(WF,zMr),e(WF,HV),e(HV,WMr),e(WF,QMr),e(fe,HMr),e(fe,QF),e(QF,B3e),e(B3e,UMr),e(QF,JMr),e(QF,UV),e(UV,YMr),e(QF,KMr),e(fe,ZMr),e(fe,HF),e(HF,x3e),e(x3e,eEr),e(HF,oEr),e(HF,JV),e(JV,rEr),e(HF,tEr),e(fe,aEr),e(fe,UF),e(UF,k3e),e(k3e,nEr),e(UF,sEr),e(UF,YV),e(YV,lEr),e(UF,iEr),e(fe,dEr),e(fe,JF),e(JF,R3e),e(R3e,cEr),e(JF,fEr),e(JF,KV),e(KV,mEr),e(JF,gEr),e(fe,hEr),e(fe,YF),e(YF,S3e),e(S3e,pEr),e(YF,_Er),e(YF,ZV),e(ZV,uEr),e(YF,bEr),e(fe,vEr),e(fe,KF),e(KF,P3e),e(P3e,TEr),e(KF,FEr),e(KF,ez),e(ez,CEr),e(KF,MEr),e(fe,EEr),e(fe,ZF),e(ZF,$3e),e($3e,yEr),e(ZF,wEr),e(ZF,oz),e(oz,AEr),e(ZF,LEr),e(fe,BEr),e(fe,eC),e(eC,I3e),e(I3e,xEr),e(eC,kEr),e(eC,rz),e(rz,REr),e(eC,SEr),e(Bo,PEr),e(Bo,D3e),e(D3e,$Er),e(Bo,IEr),g(K0,Bo,null),b(c,_Se,u),b(c,lf,u),e(lf,oC),e(oC,N3e),g(Z0,N3e,null),e(lf,DEr),e(lf,j3e),e(j3e,NEr),b(c,uSe,u),b(c,$r,u),g(eL,$r,null),e($r,jEr),e($r,df),e(df,qEr),e(df,q3e),e(q3e,GEr),e(df,OEr),e(df,G3e),e(G3e,XEr),e(df,VEr),e($r,zEr),e($r,oL),e(oL,WEr),e(oL,O3e),e(O3e,QEr),e(oL,HEr),e($r,UEr),e($r,Bt),g(rL,Bt,null),e(Bt,JEr),e(Bt,X3e),e(X3e,YEr),e(Bt,KEr),e(Bt,cf),e(cf,ZEr),e(cf,V3e),e(V3e,e5r),e(cf,o5r),e(cf,z3e),e(z3e,r5r),e(cf,t5r),e(Bt,a5r),e(Bt,W3e),e(W3e,n5r),e(Bt,s5r),g(tL,Bt,null),e($r,l5r),e($r,xo),g(aL,xo,null),e(xo,i5r),e(xo,Q3e),e(Q3e,d5r),e(xo,c5r),e(xo,Rn),e(Rn,f5r),e(Rn,H3e),e(H3e,m5r),e(Rn,g5r),e(Rn,U3e),e(U3e,h5r),e(Rn,p5r),e(Rn,J3e),e(J3e,_5r),e(Rn,u5r),e(xo,b5r),e(xo,be),e(be,rC),e(rC,Y3e),e(Y3e,v5r),e(rC,T5r),e(rC,tz),e(tz,F5r),e(rC,C5r),e(be,M5r),e(be,tC),e(tC,K3e),e(K3e,E5r),e(tC,y5r),e(tC,az),e(az,w5r),e(tC,A5r),e(be,L5r),e(be,aC),e(aC,Z3e),e(Z3e,B5r),e(aC,x5r),e(aC,nz),e(nz,k5r),e(aC,R5r),e(be,S5r),e(be,nC),e(nC,e2e),e(e2e,P5r),e(nC,$5r),e(nC,sz),e(sz,I5r),e(nC,D5r),e(be,N5r),e(be,sC),e(sC,o2e),e(o2e,j5r),e(sC,q5r),e(sC,lz),e(lz,G5r),e(sC,O5r),e(be,X5r),e(be,lC),e(lC,r2e),e(r2e,V5r),e(lC,z5r),e(lC,iz),e(iz,W5r),e(lC,Q5r),e(be,H5r),e(be,iC),e(iC,t2e),e(t2e,U5r),e(iC,J5r),e(iC,dz),e(dz,Y5r),e(iC,K5r),e(be,Z5r),e(be,dC),e(dC,a2e),e(a2e,eyr),e(dC,oyr),e(dC,cz),e(cz,ryr),e(dC,tyr),e(be,ayr),e(be,cC),e(cC,n2e),e(n2e,nyr),e(cC,syr),e(cC,fz),e(fz,lyr),e(cC,iyr),e(be,dyr),e(be,fC),e(fC,s2e),e(s2e,cyr),e(fC,fyr),e(fC,mz),e(mz,myr),e(fC,gyr),e(xo,hyr),e(xo,l2e),e(l2e,pyr),e(xo,_yr),g(nL,xo,null),b(c,bSe,u),b(c,ff,u),e(ff,mC),e(mC,i2e),g(sL,i2e,null),e(ff,uyr),e(ff,d2e),e(d2e,byr),b(c,vSe,u),b(c,Ir,u),g(lL,Ir,null),e(Ir,vyr),e(Ir,mf),e(mf,Tyr),e(mf,c2e),e(c2e,Fyr),e(mf,Cyr),e(mf,f2e),e(f2e,Myr),e(mf,Eyr),e(Ir,yyr),e(Ir,iL),e(iL,wyr),e(iL,m2e),e(m2e,Ayr),e(iL,Lyr),e(Ir,Byr),e(Ir,xt),g(dL,xt,null),e(xt,xyr),e(xt,g2e),e(g2e,kyr),e(xt,Ryr),e(xt,gf),e(gf,Syr),e(gf,h2e),e(h2e,Pyr),e(gf,$yr),e(gf,p2e),e(p2e,Iyr),e(gf,Dyr),e(xt,Nyr),e(xt,_2e),e(_2e,jyr),e(xt,qyr),g(cL,xt,null),e(Ir,Gyr),e(Ir,ko),g(fL,ko,null),e(ko,Oyr),e(ko,u2e),e(u2e,Xyr),e(ko,Vyr),e(ko,Sn),e(Sn,zyr),e(Sn,b2e),e(b2e,Wyr),e(Sn,Qyr),e(Sn,v2e),e(v2e,Hyr),e(Sn,Uyr),e(Sn,T2e),e(T2e,Jyr),e(Sn,Yyr),e(ko,Kyr),e(ko,Me),e(Me,gC),e(gC,F2e),e(F2e,Zyr),e(gC,ewr),e(gC,gz),e(gz,owr),e(gC,rwr),e(Me,twr),e(Me,hC),e(hC,C2e),e(C2e,awr),e(hC,nwr),e(hC,hz),e(hz,swr),e(hC,lwr),e(Me,iwr),e(Me,pC),e(pC,M2e),e(M2e,dwr),e(pC,cwr),e(pC,pz),e(pz,fwr),e(pC,mwr),e(Me,gwr),e(Me,_C),e(_C,E2e),e(E2e,hwr),e(_C,pwr),e(_C,_z),e(_z,_wr),e(_C,uwr),e(Me,bwr),e(Me,uC),e(uC,y2e),e(y2e,vwr),e(uC,Twr),e(uC,uz),e(uz,Fwr),e(uC,Cwr),e(Me,Mwr),e(Me,bC),e(bC,w2e),e(w2e,Ewr),e(bC,ywr),e(bC,bz),e(bz,wwr),e(bC,Awr),e(Me,Lwr),e(Me,vC),e(vC,A2e),e(A2e,Bwr),e(vC,xwr),e(vC,vz),e(vz,kwr),e(vC,Rwr),e(Me,Swr),e(Me,TC),e(TC,L2e),e(L2e,Pwr),e(TC,$wr),e(TC,Tz),e(Tz,Iwr),e(TC,Dwr),e(Me,Nwr),e(Me,FC),e(FC,B2e),e(B2e,jwr),e(FC,qwr),e(FC,Fz),e(Fz,Gwr),e(FC,Owr),e(ko,Xwr),e(ko,x2e),e(x2e,Vwr),e(ko,zwr),g(mL,ko,null),b(c,TSe,u),b(c,hf,u),e(hf,CC),e(CC,k2e),g(gL,k2e,null),e(hf,Wwr),e(hf,R2e),e(R2e,Qwr),b(c,FSe,u),b(c,Dr,u),g(hL,Dr,null),e(Dr,Hwr),e(Dr,pf),e(pf,Uwr),e(pf,S2e),e(S2e,Jwr),e(pf,Ywr),e(pf,P2e),e(P2e,Kwr),e(pf,Zwr),e(Dr,eAr),e(Dr,pL),e(pL,oAr),e(pL,$2e),e($2e,rAr),e(pL,tAr),e(Dr,aAr),e(Dr,kt),g(_L,kt,null),e(kt,nAr),e(kt,I2e),e(I2e,sAr),e(kt,lAr),e(kt,_f),e(_f,iAr),e(_f,D2e),e(D2e,dAr),e(_f,cAr),e(_f,N2e),e(N2e,fAr),e(_f,mAr),e(kt,gAr),e(kt,j2e),e(j2e,hAr),e(kt,pAr),g(uL,kt,null),e(Dr,_Ar),e(Dr,Ro),g(bL,Ro,null),e(Ro,uAr),e(Ro,q2e),e(q2e,bAr),e(Ro,vAr),e(Ro,Pn),e(Pn,TAr),e(Pn,G2e),e(G2e,FAr),e(Pn,CAr),e(Pn,O2e),e(O2e,MAr),e(Pn,EAr),e(Pn,X2e),e(X2e,yAr),e(Pn,wAr),e(Ro,AAr),e(Ro,ve),e(ve,MC),e(MC,V2e),e(V2e,LAr),e(MC,BAr),e(MC,Cz),e(Cz,xAr),e(MC,kAr),e(ve,RAr),e(ve,EC),e(EC,z2e),e(z2e,SAr),e(EC,PAr),e(EC,Mz),e(Mz,$Ar),e(EC,IAr),e(ve,DAr),e(ve,yC),e(yC,W2e),e(W2e,NAr),e(yC,jAr),e(yC,Ez),e(Ez,qAr),e(yC,GAr),e(ve,OAr),e(ve,wC),e(wC,Q2e),e(Q2e,XAr),e(wC,VAr),e(wC,yz),e(yz,zAr),e(wC,WAr),e(ve,QAr),e(ve,AC),e(AC,H2e),e(H2e,HAr),e(AC,UAr),e(AC,wz),e(wz,JAr),e(AC,YAr),e(ve,KAr),e(ve,LC),e(LC,U2e),e(U2e,ZAr),e(LC,e0r),e(LC,Az),e(Az,o0r),e(LC,r0r),e(ve,t0r),e(ve,BC),e(BC,J2e),e(J2e,a0r),e(BC,n0r),e(BC,Lz),e(Lz,s0r),e(BC,l0r),e(ve,i0r),e(ve,xC),e(xC,Y2e),e(Y2e,d0r),e(xC,c0r),e(xC,Bz),e(Bz,f0r),e(xC,m0r),e(ve,g0r),e(ve,kC),e(kC,K2e),e(K2e,h0r),e(kC,p0r),e(kC,xz),e(xz,_0r),e(kC,u0r),e(ve,b0r),e(ve,RC),e(RC,Z2e),e(Z2e,v0r),e(RC,T0r),e(RC,kz),e(kz,F0r),e(RC,C0r),e(Ro,M0r),e(Ro,eve),e(eve,E0r),e(Ro,y0r),g(vL,Ro,null),b(c,CSe,u),b(c,uf,u),e(uf,SC),e(SC,ove),g(TL,ove,null),e(uf,w0r),e(uf,rve),e(rve,A0r),b(c,MSe,u),b(c,Nr,u),g(FL,Nr,null),e(Nr,L0r),e(Nr,bf),e(bf,B0r),e(bf,tve),e(tve,x0r),e(bf,k0r),e(bf,ave),e(ave,R0r),e(bf,S0r),e(Nr,P0r),e(Nr,CL),e(CL,$0r),e(CL,nve),e(nve,I0r),e(CL,D0r),e(Nr,N0r),e(Nr,Rt),g(ML,Rt,null),e(Rt,j0r),e(Rt,sve),e(sve,q0r),e(Rt,G0r),e(Rt,vf),e(vf,O0r),e(vf,lve),e(lve,X0r),e(vf,V0r),e(vf,ive),e(ive,z0r),e(vf,W0r),e(Rt,Q0r),e(Rt,dve),e(dve,H0r),e(Rt,U0r),g(EL,Rt,null),e(Nr,J0r),e(Nr,So),g(yL,So,null),e(So,Y0r),e(So,cve),e(cve,K0r),e(So,Z0r),e(So,$n),e($n,eLr),e($n,fve),e(fve,oLr),e($n,rLr),e($n,mve),e(mve,tLr),e($n,aLr),e($n,gve),e(gve,nLr),e($n,sLr),e(So,lLr),e(So,Te),e(Te,PC),e(PC,hve),e(hve,iLr),e(PC,dLr),e(PC,Rz),e(Rz,cLr),e(PC,fLr),e(Te,mLr),e(Te,$C),e($C,pve),e(pve,gLr),e($C,hLr),e($C,Sz),e(Sz,pLr),e($C,_Lr),e(Te,uLr),e(Te,IC),e(IC,_ve),e(_ve,bLr),e(IC,vLr),e(IC,Pz),e(Pz,TLr),e(IC,FLr),e(Te,CLr),e(Te,DC),e(DC,uve),e(uve,MLr),e(DC,ELr),e(DC,$z),e($z,yLr),e(DC,wLr),e(Te,ALr),e(Te,NC),e(NC,bve),e(bve,LLr),e(NC,BLr),e(NC,Iz),e(Iz,xLr),e(NC,kLr),e(Te,RLr),e(Te,jC),e(jC,vve),e(vve,SLr),e(jC,PLr),e(jC,Dz),e(Dz,$Lr),e(jC,ILr),e(Te,DLr),e(Te,qC),e(qC,Tve),e(Tve,NLr),e(qC,jLr),e(qC,Nz),e(Nz,qLr),e(qC,GLr),e(Te,OLr),e(Te,GC),e(GC,Fve),e(Fve,XLr),e(GC,VLr),e(GC,jz),e(jz,zLr),e(GC,WLr),e(Te,QLr),e(Te,OC),e(OC,Cve),e(Cve,HLr),e(OC,ULr),e(OC,qz),e(qz,JLr),e(OC,YLr),e(Te,KLr),e(Te,XC),e(XC,Mve),e(Mve,ZLr),e(XC,e8r),e(XC,Gz),e(Gz,o8r),e(XC,r8r),e(So,t8r),e(So,Eve),e(Eve,a8r),e(So,n8r),g(wL,So,null),b(c,ESe,u),b(c,Tf,u),e(Tf,VC),e(VC,yve),g(AL,yve,null),e(Tf,s8r),e(Tf,wve),e(wve,l8r),b(c,ySe,u),b(c,jr,u),g(LL,jr,null),e(jr,i8r),e(jr,Ff),e(Ff,d8r),e(Ff,Ave),e(Ave,c8r),e(Ff,f8r),e(Ff,Lve),e(Lve,m8r),e(Ff,g8r),e(jr,h8r),e(jr,BL),e(BL,p8r),e(BL,Bve),e(Bve,_8r),e(BL,u8r),e(jr,b8r),e(jr,St),g(xL,St,null),e(St,v8r),e(St,xve),e(xve,T8r),e(St,F8r),e(St,Cf),e(Cf,C8r),e(Cf,kve),e(kve,M8r),e(Cf,E8r),e(Cf,Rve),e(Rve,y8r),e(Cf,w8r),e(St,A8r),e(St,Sve),e(Sve,L8r),e(St,B8r),g(kL,St,null),e(jr,x8r),e(jr,Po),g(RL,Po,null),e(Po,k8r),e(Po,Pve),e(Pve,R8r),e(Po,S8r),e(Po,In),e(In,P8r),e(In,$ve),e($ve,$8r),e(In,I8r),e(In,Ive),e(Ive,D8r),e(In,N8r),e(In,Dve),e(Dve,j8r),e(In,q8r),e(Po,G8r),e(Po,Se),e(Se,zC),e(zC,Nve),e(Nve,O8r),e(zC,X8r),e(zC,Oz),e(Oz,V8r),e(zC,z8r),e(Se,W8r),e(Se,WC),e(WC,jve),e(jve,Q8r),e(WC,H8r),e(WC,Xz),e(Xz,U8r),e(WC,J8r),e(Se,Y8r),e(Se,QC),e(QC,qve),e(qve,K8r),e(QC,Z8r),e(QC,Vz),e(Vz,e9r),e(QC,o9r),e(Se,r9r),e(Se,HC),e(HC,Gve),e(Gve,t9r),e(HC,a9r),e(HC,zz),e(zz,n9r),e(HC,s9r),e(Se,l9r),e(Se,UC),e(UC,Ove),e(Ove,i9r),e(UC,d9r),e(UC,Wz),e(Wz,c9r),e(UC,f9r),e(Se,m9r),e(Se,JC),e(JC,Xve),e(Xve,g9r),e(JC,h9r),e(JC,Qz),e(Qz,p9r),e(JC,_9r),e(Se,u9r),e(Se,YC),e(YC,Vve),e(Vve,b9r),e(YC,v9r),e(YC,Hz),e(Hz,T9r),e(YC,F9r),e(Se,C9r),e(Se,KC),e(KC,zve),e(zve,M9r),e(KC,E9r),e(KC,Uz),e(Uz,y9r),e(KC,w9r),e(Po,A9r),e(Po,Wve),e(Wve,L9r),e(Po,B9r),g(SL,Po,null),b(c,wSe,u),b(c,Mf,u),e(Mf,ZC),e(ZC,Qve),g(PL,Qve,null),e(Mf,x9r),e(Mf,Hve),e(Hve,k9r),b(c,ASe,u),b(c,qr,u),g($L,qr,null),e(qr,R9r),e(qr,Ef),e(Ef,S9r),e(Ef,Uve),e(Uve,P9r),e(Ef,$9r),e(Ef,Jve),e(Jve,I9r),e(Ef,D9r),e(qr,N9r),e(qr,IL),e(IL,j9r),e(IL,Yve),e(Yve,q9r),e(IL,G9r),e(qr,O9r),e(qr,Pt),g(DL,Pt,null),e(Pt,X9r),e(Pt,Kve),e(Kve,V9r),e(Pt,z9r),e(Pt,yf),e(yf,W9r),e(yf,Zve),e(Zve,Q9r),e(yf,H9r),e(yf,e6e),e(e6e,U9r),e(yf,J9r),e(Pt,Y9r),e(Pt,o6e),e(o6e,K9r),e(Pt,Z9r),g(NL,Pt,null),e(qr,eBr),e(qr,$o),g(jL,$o,null),e($o,oBr),e($o,r6e),e(r6e,rBr),e($o,tBr),e($o,Dn),e(Dn,aBr),e(Dn,t6e),e(t6e,nBr),e(Dn,sBr),e(Dn,a6e),e(a6e,lBr),e(Dn,iBr),e(Dn,n6e),e(n6e,dBr),e(Dn,cBr),e($o,fBr),e($o,Pe),e(Pe,eM),e(eM,s6e),e(s6e,mBr),e(eM,gBr),e(eM,Jz),e(Jz,hBr),e(eM,pBr),e(Pe,_Br),e(Pe,oM),e(oM,l6e),e(l6e,uBr),e(oM,bBr),e(oM,Yz),e(Yz,vBr),e(oM,TBr),e(Pe,FBr),e(Pe,rM),e(rM,i6e),e(i6e,CBr),e(rM,MBr),e(rM,Kz),e(Kz,EBr),e(rM,yBr),e(Pe,wBr),e(Pe,tM),e(tM,d6e),e(d6e,ABr),e(tM,LBr),e(tM,Zz),e(Zz,BBr),e(tM,xBr),e(Pe,kBr),e(Pe,aM),e(aM,c6e),e(c6e,RBr),e(aM,SBr),e(aM,eW),e(eW,PBr),e(aM,$Br),e(Pe,IBr),e(Pe,nM),e(nM,f6e),e(f6e,DBr),e(nM,NBr),e(nM,oW),e(oW,jBr),e(nM,qBr),e(Pe,GBr),e(Pe,sM),e(sM,m6e),e(m6e,OBr),e(sM,XBr),e(sM,rW),e(rW,VBr),e(sM,zBr),e(Pe,WBr),e(Pe,lM),e(lM,g6e),e(g6e,QBr),e(lM,HBr),e(lM,tW),e(tW,UBr),e(lM,JBr),e($o,YBr),e($o,h6e),e(h6e,KBr),e($o,ZBr),g(qL,$o,null),b(c,LSe,u),b(c,wf,u),e(wf,iM),e(iM,p6e),g(GL,p6e,null),e(wf,exr),e(wf,_6e),e(_6e,oxr),b(c,BSe,u),b(c,Gr,u),g(OL,Gr,null),e(Gr,rxr),e(Gr,Af),e(Af,txr),e(Af,u6e),e(u6e,axr),e(Af,nxr),e(Af,b6e),e(b6e,sxr),e(Af,lxr),e(Gr,ixr),e(Gr,XL),e(XL,dxr),e(XL,v6e),e(v6e,cxr),e(XL,fxr),e(Gr,mxr),e(Gr,$t),g(VL,$t,null),e($t,gxr),e($t,T6e),e(T6e,hxr),e($t,pxr),e($t,Lf),e(Lf,_xr),e(Lf,F6e),e(F6e,uxr),e(Lf,bxr),e(Lf,C6e),e(C6e,vxr),e(Lf,Txr),e($t,Fxr),e($t,M6e),e(M6e,Cxr),e($t,Mxr),g(zL,$t,null),e(Gr,Exr),e(Gr,Io),g(WL,Io,null),e(Io,yxr),e(Io,E6e),e(E6e,wxr),e(Io,Axr),e(Io,Nn),e(Nn,Lxr),e(Nn,y6e),e(y6e,Bxr),e(Nn,xxr),e(Nn,w6e),e(w6e,kxr),e(Nn,Rxr),e(Nn,A6e),e(A6e,Sxr),e(Nn,Pxr),e(Io,$xr),e(Io,L6e),e(L6e,dM),e(dM,B6e),e(B6e,Ixr),e(dM,Dxr),e(dM,aW),e(aW,Nxr),e(dM,jxr),e(Io,qxr),e(Io,x6e),e(x6e,Gxr),e(Io,Oxr),g(QL,Io,null),b(c,xSe,u),b(c,Bf,u),e(Bf,cM),e(cM,k6e),g(HL,k6e,null),e(Bf,Xxr),e(Bf,R6e),e(R6e,Vxr),b(c,kSe,u),b(c,Or,u),g(UL,Or,null),e(Or,zxr),e(Or,xf),e(xf,Wxr),e(xf,S6e),e(S6e,Qxr),e(xf,Hxr),e(xf,P6e),e(P6e,Uxr),e(xf,Jxr),e(Or,Yxr),e(Or,JL),e(JL,Kxr),e(JL,$6e),e($6e,Zxr),e(JL,ekr),e(Or,okr),e(Or,It),g(YL,It,null),e(It,rkr),e(It,I6e),e(I6e,tkr),e(It,akr),e(It,kf),e(kf,nkr),e(kf,D6e),e(D6e,skr),e(kf,lkr),e(kf,N6e),e(N6e,ikr),e(kf,dkr),e(It,ckr),e(It,j6e),e(j6e,fkr),e(It,mkr),g(KL,It,null),e(Or,gkr),e(Or,Do),g(ZL,Do,null),e(Do,hkr),e(Do,q6e),e(q6e,pkr),e(Do,_kr),e(Do,jn),e(jn,ukr),e(jn,G6e),e(G6e,bkr),e(jn,vkr),e(jn,O6e),e(O6e,Tkr),e(jn,Fkr),e(jn,X6e),e(X6e,Ckr),e(jn,Mkr),e(Do,Ekr),e(Do,e8),e(e8,fM),e(fM,V6e),e(V6e,ykr),e(fM,wkr),e(fM,nW),e(nW,Akr),e(fM,Lkr),e(e8,Bkr),e(e8,mM),e(mM,z6e),e(z6e,xkr),e(mM,kkr),e(mM,sW),e(sW,Rkr),e(mM,Skr),e(Do,Pkr),e(Do,W6e),e(W6e,$kr),e(Do,Ikr),g(o8,Do,null),b(c,RSe,u),b(c,Rf,u),e(Rf,gM),e(gM,Q6e),g(r8,Q6e,null),e(Rf,Dkr),e(Rf,H6e),e(H6e,Nkr),b(c,SSe,u),b(c,Xr,u),g(t8,Xr,null),e(Xr,jkr),e(Xr,Sf),e(Sf,qkr),e(Sf,U6e),e(U6e,Gkr),e(Sf,Okr),e(Sf,J6e),e(J6e,Xkr),e(Sf,Vkr),e(Xr,zkr),e(Xr,a8),e(a8,Wkr),e(a8,Y6e),e(Y6e,Qkr),e(a8,Hkr),e(Xr,Ukr),e(Xr,Dt),g(n8,Dt,null),e(Dt,Jkr),e(Dt,K6e),e(K6e,Ykr),e(Dt,Kkr),e(Dt,Pf),e(Pf,Zkr),e(Pf,Z6e),e(Z6e,eRr),e(Pf,oRr),e(Pf,eTe),e(eTe,rRr),e(Pf,tRr),e(Dt,aRr),e(Dt,oTe),e(oTe,nRr),e(Dt,sRr),g(s8,Dt,null),e(Xr,lRr),e(Xr,No),g(l8,No,null),e(No,iRr),e(No,rTe),e(rTe,dRr),e(No,cRr),e(No,qn),e(qn,fRr),e(qn,tTe),e(tTe,mRr),e(qn,gRr),e(qn,aTe),e(aTe,hRr),e(qn,pRr),e(qn,nTe),e(nTe,_Rr),e(qn,uRr),e(No,bRr),e(No,sTe),e(sTe,hM),e(hM,lTe),e(lTe,vRr),e(hM,TRr),e(hM,lW),e(lW,FRr),e(hM,CRr),e(No,MRr),e(No,iTe),e(iTe,ERr),e(No,yRr),g(i8,No,null),PSe=!0},p(c,[u]){const d8={};u&2&&(d8.$$scope={dirty:u,ctx:c}),Of.$set(d8);const dTe={};u&2&&(dTe.$$scope={dirty:u,ctx:c}),Sh.$set(dTe);const cTe={};u&2&&(cTe.$$scope={dirty:u,ctx:c}),Vh.$set(cTe)},i(c){PSe||(h(me.$$.fragment,c),h(qa.$$.fragment,c),h(bE.$$.fragment,c),h(vE.$$.fragment,c),h(Of.$$.fragment,c),h(TE.$$.fragment,c),h(FE.$$.fragment,c),h(EE.$$.fragment,c),h(yE.$$.fragment,c),h(wE.$$.fragment,c),h(AE.$$.fragment,c),h(LE.$$.fragment,c),h(kE.$$.fragment,c),h(RE.$$.fragment,c),h(SE.$$.fragment,c),h(PE.$$.fragment,c),h($E.$$.fragment,c),h(NE.$$.fragment,c),h(Sh.$$.fragment,c),h(jE.$$.fragment,c),h(qE.$$.fragment,c),h(GE.$$.fragment,c),h(OE.$$.fragment,c),h(zE.$$.fragment,c),h(Vh.$$.fragment,c),h(WE.$$.fragment,c),h(QE.$$.fragment,c),h(HE.$$.fragment,c),h(UE.$$.fragment,c),h(YE.$$.fragment,c),h(KE.$$.fragment,c),h(ZE.$$.fragment,c),h(e5.$$.fragment,c),h(o5.$$.fragment,c),h(r5.$$.fragment,c),h(a5.$$.fragment,c),h(n5.$$.fragment,c),h(s5.$$.fragment,c),h(l5.$$.fragment,c),h(i5.$$.fragment,c),h(d5.$$.fragment,c),h(f5.$$.fragment,c),h(m5.$$.fragment,c),h(g5.$$.fragment,c),h(h5.$$.fragment,c),h(p5.$$.fragment,c),h(_5.$$.fragment,c),h(b5.$$.fragment,c),h(v5.$$.fragment,c),h(T5.$$.fragment,c),h(F5.$$.fragment,c),h(C5.$$.fragment,c),h(M5.$$.fragment,c),h(y5.$$.fragment,c),h(w5.$$.fragment,c),h(A5.$$.fragment,c),h(L5.$$.fragment,c),h(B5.$$.fragment,c),h(x5.$$.fragment,c),h(R5.$$.fragment,c),h(S5.$$.fragment,c),h(P5.$$.fragment,c),h($5.$$.fragment,c),h(I5.$$.fragment,c),h(D5.$$.fragment,c),h(j5.$$.fragment,c),h(q5.$$.fragment,c),h(G5.$$.fragment,c),h(O5.$$.fragment,c),h(X5.$$.fragment,c),h(V5.$$.fragment,c),h(W5.$$.fragment,c),h(Q5.$$.fragment,c),h(H5.$$.fragment,c),h(U5.$$.fragment,c),h(J5.$$.fragment,c),h(Y5.$$.fragment,c),h(Z5.$$.fragment,c),h(ey.$$.fragment,c),h(oy.$$.fragment,c),h(ry.$$.fragment,c),h(ty.$$.fragment,c),h(ay.$$.fragment,c),h(sy.$$.fragment,c),h(ly.$$.fragment,c),h(iy.$$.fragment,c),h(dy.$$.fragment,c),h(cy.$$.fragment,c),h(fy.$$.fragment,c),h(gy.$$.fragment,c),h(hy.$$.fragment,c),h(py.$$.fragment,c),h(_y.$$.fragment,c),h(uy.$$.fragment,c),h(by.$$.fragment,c),h(Ty.$$.fragment,c),h(Fy.$$.fragment,c),h(Cy.$$.fragment,c),h(My.$$.fragment,c),h(Ey.$$.fragment,c),h(yy.$$.fragment,c),h(Ay.$$.fragment,c),h(Ly.$$.fragment,c),h(By.$$.fragment,c),h(xy.$$.fragment,c),h(ky.$$.fragment,c),h(Ry.$$.fragment,c),h(Py.$$.fragment,c),h($y.$$.fragment,c),h(Iy.$$.fragment,c),h(Dy.$$.fragment,c),h(Ny.$$.fragment,c),h(jy.$$.fragment,c),h(Gy.$$.fragment,c),h(Oy.$$.fragment,c),h(Xy.$$.fragment,c),h(Vy.$$.fragment,c),h(zy.$$.fragment,c),h(Wy.$$.fragment,c),h(Hy.$$.fragment,c),h(Uy.$$.fragment,c),h(Jy.$$.fragment,c),h(Yy.$$.fragment,c),h(Ky.$$.fragment,c),h(Zy.$$.fragment,c),h(ow.$$.fragment,c),h(rw.$$.fragment,c),h(tw.$$.fragment,c),h(nw.$$.fragment,c),h(sw.$$.fragment,c),h(lw.$$.fragment,c),h(dw.$$.fragment,c),h(cw.$$.fragment,c),h(fw.$$.fragment,c),h(mw.$$.fragment,c),h(gw.$$.fragment,c),h(hw.$$.fragment,c),h(_w.$$.fragment,c),h(uw.$$.fragment,c),h(bw.$$.fragment,c),h(vw.$$.fragment,c),h(Tw.$$.fragment,c),h(Fw.$$.fragment,c),h(Mw.$$.fragment,c),h(Ew.$$.fragment,c),h(yw.$$.fragment,c),h(ww.$$.fragment,c),h(Aw.$$.fragment,c),h(Lw.$$.fragment,c),h(xw.$$.fragment,c),h(kw.$$.fragment,c),h(Rw.$$.fragment,c),h(Sw.$$.fragment,c),h(Pw.$$.fragment,c),h($w.$$.fragment,c),h(Dw.$$.fragment,c),h(Nw.$$.fragment,c),h(jw.$$.fragment,c),h(qw.$$.fragment,c),h(Gw.$$.fragment,c),h(Ow.$$.fragment,c),h(Vw.$$.fragment,c),h(zw.$$.fragment,c),h(Ww.$$.fragment,c),h(Qw.$$.fragment,c),h(Hw.$$.fragment,c),h(Uw.$$.fragment,c),h(Yw.$$.fragment,c),h(Kw.$$.fragment,c),h(Zw.$$.fragment,c),h(eA.$$.fragment,c),h(oA.$$.fragment,c),h(rA.$$.fragment,c),h(aA.$$.fragment,c),h(nA.$$.fragment,c),h(sA.$$.fragment,c),h(lA.$$.fragment,c),h(iA.$$.fragment,c),h(dA.$$.fragment,c),h(fA.$$.fragment,c),h(mA.$$.fragment,c),h(gA.$$.fragment,c),h(hA.$$.fragment,c),h(pA.$$.fragment,c),h(_A.$$.fragment,c),h(bA.$$.fragment,c),h(vA.$$.fragment,c),h(TA.$$.fragment,c),h(CA.$$.fragment,c),h(MA.$$.fragment,c),h(EA.$$.fragment,c),h(wA.$$.fragment,c),h(AA.$$.fragment,c),h(LA.$$.fragment,c),h(BA.$$.fragment,c),h(xA.$$.fragment,c),h(kA.$$.fragment,c),h(SA.$$.fragment,c),h(PA.$$.fragment,c),h($A.$$.fragment,c),h(IA.$$.fragment,c),h(DA.$$.fragment,c),h(NA.$$.fragment,c),h(qA.$$.fragment,c),h(GA.$$.fragment,c),h(OA.$$.fragment,c),h(XA.$$.fragment,c),h(VA.$$.fragment,c),h(zA.$$.fragment,c),h(QA.$$.fragment,c),h(HA.$$.fragment,c),h(UA.$$.fragment,c),h(JA.$$.fragment,c),h(YA.$$.fragment,c),h(KA.$$.fragment,c),h(e0.$$.fragment,c),h(o0.$$.fragment,c),h(r0.$$.fragment,c),h(t0.$$.fragment,c),h(a0.$$.fragment,c),h(n0.$$.fragment,c),h(l0.$$.fragment,c),h(i0.$$.fragment,c),h(d0.$$.fragment,c),h(c0.$$.fragment,c),h(f0.$$.fragment,c),h(m0.$$.fragment,c),h(h0.$$.fragment,c),h(p0.$$.fragment,c),h(_0.$$.fragment,c),h(u0.$$.fragment,c),h(b0.$$.fragment,c),h(v0.$$.fragment,c),h(F0.$$.fragment,c),h(C0.$$.fragment,c),h(M0.$$.fragment,c),h(E0.$$.fragment,c),h(y0.$$.fragment,c),h(w0.$$.fragment,c),h(L0.$$.fragment,c),h(B0.$$.fragment,c),h(x0.$$.fragment,c),h(k0.$$.fragment,c),h(R0.$$.fragment,c),h(S0.$$.fragment,c),h($0.$$.fragment,c),h(I0.$$.fragment,c),h(D0.$$.fragment,c),h(N0.$$.fragment,c),h(j0.$$.fragment,c),h(q0.$$.fragment,c),h(O0.$$.fragment,c),h(X0.$$.fragment,c),h(V0.$$.fragment,c),h(z0.$$.fragment,c),h(W0.$$.fragment,c),h(Q0.$$.fragment,c),h(U0.$$.fragment,c),h(J0.$$.fragment,c),h(Y0.$$.fragment,c),h(K0.$$.fragment,c),h(Z0.$$.fragment,c),h(eL.$$.fragment,c),h(rL.$$.fragment,c),h(tL.$$.fragment,c),h(aL.$$.fragment,c),h(nL.$$.fragment,c),h(sL.$$.fragment,c),h(lL.$$.fragment,c),h(dL.$$.fragment,c),h(cL.$$.fragment,c),h(fL.$$.fragment,c),h(mL.$$.fragment,c),h(gL.$$.fragment,c),h(hL.$$.fragment,c),h(_L.$$.fragment,c),h(uL.$$.fragment,c),h(bL.$$.fragment,c),h(vL.$$.fragment,c),h(TL.$$.fragment,c),h(FL.$$.fragment,c),h(ML.$$.fragment,c),h(EL.$$.fragment,c),h(yL.$$.fragment,c),h(wL.$$.fragment,c),h(AL.$$.fragment,c),h(LL.$$.fragment,c),h(xL.$$.fragment,c),h(kL.$$.fragment,c),h(RL.$$.fragment,c),h(SL.$$.fragment,c),h(PL.$$.fragment,c),h($L.$$.fragment,c),h(DL.$$.fragment,c),h(NL.$$.fragment,c),h(jL.$$.fragment,c),h(qL.$$.fragment,c),h(GL.$$.fragment,c),h(OL.$$.fragment,c),h(VL.$$.fragment,c),h(zL.$$.fragment,c),h(WL.$$.fragment,c),h(QL.$$.fragment,c),h(HL.$$.fragment,c),h(UL.$$.fragment,c),h(YL.$$.fragment,c),h(KL.$$.fragment,c),h(ZL.$$.fragment,c),h(o8.$$.fragment,c),h(r8.$$.fragment,c),h(t8.$$.fragment,c),h(n8.$$.fragment,c),h(s8.$$.fragment,c),h(l8.$$.fragment,c),h(i8.$$.fragment,c),PSe=!0)},o(c){p(me.$$.fragment,c),p(qa.$$.fragment,c),p(bE.$$.fragment,c),p(vE.$$.fragment,c),p(Of.$$.fragment,c),p(TE.$$.fragment,c),p(FE.$$.fragment,c),p(EE.$$.fragment,c),p(yE.$$.fragment,c),p(wE.$$.fragment,c),p(AE.$$.fragment,c),p(LE.$$.fragment,c),p(kE.$$.fragment,c),p(RE.$$.fragment,c),p(SE.$$.fragment,c),p(PE.$$.fragment,c),p($E.$$.fragment,c),p(NE.$$.fragment,c),p(Sh.$$.fragment,c),p(jE.$$.fragment,c),p(qE.$$.fragment,c),p(GE.$$.fragment,c),p(OE.$$.fragment,c),p(zE.$$.fragment,c),p(Vh.$$.fragment,c),p(WE.$$.fragment,c),p(QE.$$.fragment,c),p(HE.$$.fragment,c),p(UE.$$.fragment,c),p(YE.$$.fragment,c),p(KE.$$.fragment,c),p(ZE.$$.fragment,c),p(e5.$$.fragment,c),p(o5.$$.fragment,c),p(r5.$$.fragment,c),p(a5.$$.fragment,c),p(n5.$$.fragment,c),p(s5.$$.fragment,c),p(l5.$$.fragment,c),p(i5.$$.fragment,c),p(d5.$$.fragment,c),p(f5.$$.fragment,c),p(m5.$$.fragment,c),p(g5.$$.fragment,c),p(h5.$$.fragment,c),p(p5.$$.fragment,c),p(_5.$$.fragment,c),p(b5.$$.fragment,c),p(v5.$$.fragment,c),p(T5.$$.fragment,c),p(F5.$$.fragment,c),p(C5.$$.fragment,c),p(M5.$$.fragment,c),p(y5.$$.fragment,c),p(w5.$$.fragment,c),p(A5.$$.fragment,c),p(L5.$$.fragment,c),p(B5.$$.fragment,c),p(x5.$$.fragment,c),p(R5.$$.fragment,c),p(S5.$$.fragment,c),p(P5.$$.fragment,c),p($5.$$.fragment,c),p(I5.$$.fragment,c),p(D5.$$.fragment,c),p(j5.$$.fragment,c),p(q5.$$.fragment,c),p(G5.$$.fragment,c),p(O5.$$.fragment,c),p(X5.$$.fragment,c),p(V5.$$.fragment,c),p(W5.$$.fragment,c),p(Q5.$$.fragment,c),p(H5.$$.fragment,c),p(U5.$$.fragment,c),p(J5.$$.fragment,c),p(Y5.$$.fragment,c),p(Z5.$$.fragment,c),p(ey.$$.fragment,c),p(oy.$$.fragment,c),p(ry.$$.fragment,c),p(ty.$$.fragment,c),p(ay.$$.fragment,c),p(sy.$$.fragment,c),p(ly.$$.fragment,c),p(iy.$$.fragment,c),p(dy.$$.fragment,c),p(cy.$$.fragment,c),p(fy.$$.fragment,c),p(gy.$$.fragment,c),p(hy.$$.fragment,c),p(py.$$.fragment,c),p(_y.$$.fragment,c),p(uy.$$.fragment,c),p(by.$$.fragment,c),p(Ty.$$.fragment,c),p(Fy.$$.fragment,c),p(Cy.$$.fragment,c),p(My.$$.fragment,c),p(Ey.$$.fragment,c),p(yy.$$.fragment,c),p(Ay.$$.fragment,c),p(Ly.$$.fragment,c),p(By.$$.fragment,c),p(xy.$$.fragment,c),p(ky.$$.fragment,c),p(Ry.$$.fragment,c),p(Py.$$.fragment,c),p($y.$$.fragment,c),p(Iy.$$.fragment,c),p(Dy.$$.fragment,c),p(Ny.$$.fragment,c),p(jy.$$.fragment,c),p(Gy.$$.fragment,c),p(Oy.$$.fragment,c),p(Xy.$$.fragment,c),p(Vy.$$.fragment,c),p(zy.$$.fragment,c),p(Wy.$$.fragment,c),p(Hy.$$.fragment,c),p(Uy.$$.fragment,c),p(Jy.$$.fragment,c),p(Yy.$$.fragment,c),p(Ky.$$.fragment,c),p(Zy.$$.fragment,c),p(ow.$$.fragment,c),p(rw.$$.fragment,c),p(tw.$$.fragment,c),p(nw.$$.fragment,c),p(sw.$$.fragment,c),p(lw.$$.fragment,c),p(dw.$$.fragment,c),p(cw.$$.fragment,c),p(fw.$$.fragment,c),p(mw.$$.fragment,c),p(gw.$$.fragment,c),p(hw.$$.fragment,c),p(_w.$$.fragment,c),p(uw.$$.fragment,c),p(bw.$$.fragment,c),p(vw.$$.fragment,c),p(Tw.$$.fragment,c),p(Fw.$$.fragment,c),p(Mw.$$.fragment,c),p(Ew.$$.fragment,c),p(yw.$$.fragment,c),p(ww.$$.fragment,c),p(Aw.$$.fragment,c),p(Lw.$$.fragment,c),p(xw.$$.fragment,c),p(kw.$$.fragment,c),p(Rw.$$.fragment,c),p(Sw.$$.fragment,c),p(Pw.$$.fragment,c),p($w.$$.fragment,c),p(Dw.$$.fragment,c),p(Nw.$$.fragment,c),p(jw.$$.fragment,c),p(qw.$$.fragment,c),p(Gw.$$.fragment,c),p(Ow.$$.fragment,c),p(Vw.$$.fragment,c),p(zw.$$.fragment,c),p(Ww.$$.fragment,c),p(Qw.$$.fragment,c),p(Hw.$$.fragment,c),p(Uw.$$.fragment,c),p(Yw.$$.fragment,c),p(Kw.$$.fragment,c),p(Zw.$$.fragment,c),p(eA.$$.fragment,c),p(oA.$$.fragment,c),p(rA.$$.fragment,c),p(aA.$$.fragment,c),p(nA.$$.fragment,c),p(sA.$$.fragment,c),p(lA.$$.fragment,c),p(iA.$$.fragment,c),p(dA.$$.fragment,c),p(fA.$$.fragment,c),p(mA.$$.fragment,c),p(gA.$$.fragment,c),p(hA.$$.fragment,c),p(pA.$$.fragment,c),p(_A.$$.fragment,c),p(bA.$$.fragment,c),p(vA.$$.fragment,c),p(TA.$$.fragment,c),p(CA.$$.fragment,c),p(MA.$$.fragment,c),p(EA.$$.fragment,c),p(wA.$$.fragment,c),p(AA.$$.fragment,c),p(LA.$$.fragment,c),p(BA.$$.fragment,c),p(xA.$$.fragment,c),p(kA.$$.fragment,c),p(SA.$$.fragment,c),p(PA.$$.fragment,c),p($A.$$.fragment,c),p(IA.$$.fragment,c),p(DA.$$.fragment,c),p(NA.$$.fragment,c),p(qA.$$.fragment,c),p(GA.$$.fragment,c),p(OA.$$.fragment,c),p(XA.$$.fragment,c),p(VA.$$.fragment,c),p(zA.$$.fragment,c),p(QA.$$.fragment,c),p(HA.$$.fragment,c),p(UA.$$.fragment,c),p(JA.$$.fragment,c),p(YA.$$.fragment,c),p(KA.$$.fragment,c),p(e0.$$.fragment,c),p(o0.$$.fragment,c),p(r0.$$.fragment,c),p(t0.$$.fragment,c),p(a0.$$.fragment,c),p(n0.$$.fragment,c),p(l0.$$.fragment,c),p(i0.$$.fragment,c),p(d0.$$.fragment,c),p(c0.$$.fragment,c),p(f0.$$.fragment,c),p(m0.$$.fragment,c),p(h0.$$.fragment,c),p(p0.$$.fragment,c),p(_0.$$.fragment,c),p(u0.$$.fragment,c),p(b0.$$.fragment,c),p(v0.$$.fragment,c),p(F0.$$.fragment,c),p(C0.$$.fragment,c),p(M0.$$.fragment,c),p(E0.$$.fragment,c),p(y0.$$.fragment,c),p(w0.$$.fragment,c),p(L0.$$.fragment,c),p(B0.$$.fragment,c),p(x0.$$.fragment,c),p(k0.$$.fragment,c),p(R0.$$.fragment,c),p(S0.$$.fragment,c),p($0.$$.fragment,c),p(I0.$$.fragment,c),p(D0.$$.fragment,c),p(N0.$$.fragment,c),p(j0.$$.fragment,c),p(q0.$$.fragment,c),p(O0.$$.fragment,c),p(X0.$$.fragment,c),p(V0.$$.fragment,c),p(z0.$$.fragment,c),p(W0.$$.fragment,c),p(Q0.$$.fragment,c),p(U0.$$.fragment,c),p(J0.$$.fragment,c),p(Y0.$$.fragment,c),p(K0.$$.fragment,c),p(Z0.$$.fragment,c),p(eL.$$.fragment,c),p(rL.$$.fragment,c),p(tL.$$.fragment,c),p(aL.$$.fragment,c),p(nL.$$.fragment,c),p(sL.$$.fragment,c),p(lL.$$.fragment,c),p(dL.$$.fragment,c),p(cL.$$.fragment,c),p(fL.$$.fragment,c),p(mL.$$.fragment,c),p(gL.$$.fragment,c),p(hL.$$.fragment,c),p(_L.$$.fragment,c),p(uL.$$.fragment,c),p(bL.$$.fragment,c),p(vL.$$.fragment,c),p(TL.$$.fragment,c),p(FL.$$.fragment,c),p(ML.$$.fragment,c),p(EL.$$.fragment,c),p(yL.$$.fragment,c),p(wL.$$.fragment,c),p(AL.$$.fragment,c),p(LL.$$.fragment,c),p(xL.$$.fragment,c),p(kL.$$.fragment,c),p(RL.$$.fragment,c),p(SL.$$.fragment,c),p(PL.$$.fragment,c),p($L.$$.fragment,c),p(DL.$$.fragment,c),p(NL.$$.fragment,c),p(jL.$$.fragment,c),p(qL.$$.fragment,c),p(GL.$$.fragment,c),p(OL.$$.fragment,c),p(VL.$$.fragment,c),p(zL.$$.fragment,c),p(WL.$$.fragment,c),p(QL.$$.fragment,c),p(HL.$$.fragment,c),p(UL.$$.fragment,c),p(YL.$$.fragment,c),p(KL.$$.fragment,c),p(ZL.$$.fragment,c),p(o8.$$.fragment,c),p(r8.$$.fragment,c),p(t8.$$.fragment,c),p(n8.$$.fragment,c),p(s8.$$.fragment,c),p(l8.$$.fragment,c),p(i8.$$.fragment,c),PSe=!1},d(c){t(Z),c&&t(io),c&&t(de),_(me),c&&t(Df),c&&t(fa),c&&t(Be),c&&t(co),c&&t(jf),_(qa,c),c&&t(fo),c&&t(_e),c&&t(zo),c&&t(Ga),c&&t(Ske),c&&t(Xi),_(bE),c&&t(Pke),c&&t(zn),c&&t($ke),_(vE,c),c&&t(Ike),c&&t(f9),c&&t(Dke),_(Of,c),c&&t(Nke),c&&t(Vi),_(TE),c&&t(jke),c&&t(Wo),_(FE),_(EE),_(yE),_(wE),c&&t(qke),c&&t(Wi),_(AE),c&&t(Gke),c&&t(Qo),_(LE),_(kE),_(RE),_(SE),c&&t(Oke),c&&t(Qi),_(PE),c&&t(Xke),c&&t(Ho),_($E),_(NE),_(Sh),_(jE),_(qE),c&&t(Vke),c&&t(Hi),_(GE),c&&t(zke),c&&t(Uo),_(OE),_(zE),_(Vh),_(WE),_(QE),c&&t(Wke),c&&t(Ji),_(HE),c&&t(Qke),c&&t(Jo),_(UE),_(YE),_(KE),_(ZE),_(e5),c&&t(Hke),c&&t(Zi),_(o5),c&&t(Uke),c&&t(Yo),_(r5),_(a5),_(n5),_(s5),_(l5),c&&t(Jke),c&&t(rd),_(i5),c&&t(Yke),c&&t(Ko),_(d5),_(f5),_(m5),_(g5),_(h5),c&&t(Kke),c&&t(nd),_(p5),c&&t(Zke),c&&t(Zo),_(_5),_(b5),_(v5),_(T5),_(F5),c&&t(eRe),c&&t(id),_(C5),c&&t(oRe),c&&t(er),_(M5),_(y5),_(w5),_(A5),_(L5),c&&t(rRe),c&&t(fd),_(B5),c&&t(tRe),c&&t(or),_(x5),_(R5),_(S5),_(P5),_($5),c&&t(aRe),c&&t(hd),_(I5),c&&t(nRe),c&&t(rr),_(D5),_(j5),_(q5),_(G5),_(O5),c&&t(sRe),c&&t(ud),_(X5),c&&t(lRe),c&&t(tr),_(V5),_(W5),_(Q5),_(H5),_(U5),c&&t(iRe),c&&t(Td),_(J5),c&&t(dRe),c&&t(ar),_(Y5),_(Z5),_(ey),_(oy),_(ry),c&&t(cRe),c&&t(Md),_(ty),c&&t(fRe),c&&t(nr),_(ay),_(sy),_(ly),_(iy),_(dy),c&&t(mRe),c&&t(wd),_(cy),c&&t(gRe),c&&t(sr),_(fy),_(gy),_(hy),_(py),_(_y),c&&t(hRe),c&&t(Bd),_(uy),c&&t(pRe),c&&t(lr),_(by),_(Ty),_(Fy),_(Cy),_(My),c&&t(_Re),c&&t(Rd),_(Ey),c&&t(uRe),c&&t(ir),_(yy),_(Ay),_(Ly),_(By),_(xy),c&&t(bRe),c&&t($d),_(ky),c&&t(vRe),c&&t(dr),_(Ry),_(Py),_($y),_(Iy),_(Dy),c&&t(TRe),c&&t(Nd),_(Ny),c&&t(FRe),c&&t(cr),_(jy),_(Gy),_(Oy),_(Xy),_(Vy),c&&t(CRe),c&&t(Gd),_(zy),c&&t(MRe),c&&t(fr),_(Wy),_(Hy),_(Uy),_(Jy),_(Yy),c&&t(ERe),c&&t(Vd),_(Ky),c&&t(yRe),c&&t(mr),_(Zy),_(ow),_(rw),_(tw),_(nw),c&&t(wRe),c&&t(Qd),_(sw),c&&t(ARe),c&&t(gr),_(lw),_(dw),_(cw),_(fw),_(mw),c&&t(LRe),c&&t(Jd),_(gw),c&&t(BRe),c&&t(hr),_(hw),_(_w),_(uw),_(bw),_(vw),c&&t(xRe),c&&t(ec),_(Tw),c&&t(kRe),c&&t(pr),_(Fw),_(Mw),_(Ew),_(yw),_(ww),c&&t(RRe),c&&t(tc),_(Aw),c&&t(SRe),c&&t(_r),_(Lw),_(xw),_(kw),_(Rw),_(Sw),c&&t(PRe),c&&t(sc),_(Pw),c&&t($Re),c&&t(ur),_($w),_(Dw),_(Nw),_(jw),_(qw),c&&t(IRe),c&&t(cc),_(Gw),c&&t(DRe),c&&t(br),_(Ow),_(Vw),_(zw),_(Ww),_(Qw),c&&t(NRe),c&&t(gc),_(Hw),c&&t(jRe),c&&t(vr),_(Uw),_(Yw),_(Kw),_(Zw),_(eA),c&&t(qRe),c&&t(_c),_(oA),c&&t(GRe),c&&t(Tr),_(rA),_(aA),_(nA),_(sA),_(lA),c&&t(ORe),c&&t(vc),_(iA),c&&t(XRe),c&&t(Fr),_(dA),_(fA),_(mA),_(gA),_(hA),c&&t(VRe),c&&t(Cc),_(pA),c&&t(zRe),c&&t(Cr),_(_A),_(bA),_(vA),_(TA),_(CA),c&&t(WRe),c&&t(yc),_(MA),c&&t(QRe),c&&t(Mr),_(EA),_(wA),_(AA),_(LA),_(BA),c&&t(HRe),c&&t(Lc),_(xA),c&&t(URe),c&&t(Er),_(kA),_(SA),_(PA),_($A),_(IA),c&&t(JRe),c&&t(kc),_(DA),c&&t(YRe),c&&t(yr),_(NA),_(qA),_(GA),_(OA),_(XA),c&&t(KRe),c&&t(Pc),_(VA),c&&t(ZRe),c&&t(wr),_(zA),_(QA),_(HA),_(UA),_(JA),c&&t(eSe),c&&t(Dc),_(YA),c&&t(oSe),c&&t(Ar),_(KA),_(e0),_(o0),_(r0),_(t0),c&&t(rSe),c&&t(qc),_(a0),c&&t(tSe),c&&t(Lr),_(n0),_(l0),_(i0),_(d0),_(c0),c&&t(aSe),c&&t(Xc),_(f0),c&&t(nSe),c&&t(Br),_(m0),_(h0),_(p0),_(_0),_(u0),c&&t(sSe),c&&t(Wc),_(b0),c&&t(lSe),c&&t(xr),_(v0),_(F0),_(C0),_(M0),_(E0),c&&t(iSe),c&&t(Uc),_(y0),c&&t(dSe),c&&t(kr),_(w0),_(L0),_(B0),_(x0),_(k0),c&&t(cSe),c&&t(Kc),_(R0),c&&t(fSe),c&&t(Rr),_(S0),_($0),_(I0),_(D0),_(N0),c&&t(mSe),c&&t(of),_(j0),c&&t(gSe),c&&t(Sr),_(q0),_(O0),_(X0),_(V0),_(z0),c&&t(hSe),c&&t(af),_(W0),c&&t(pSe),c&&t(Pr),_(Q0),_(U0),_(J0),_(Y0),_(K0),c&&t(_Se),c&&t(lf),_(Z0),c&&t(uSe),c&&t($r),_(eL),_(rL),_(tL),_(aL),_(nL),c&&t(bSe),c&&t(ff),_(sL),c&&t(vSe),c&&t(Ir),_(lL),_(dL),_(cL),_(fL),_(mL),c&&t(TSe),c&&t(hf),_(gL),c&&t(FSe),c&&t(Dr),_(hL),_(_L),_(uL),_(bL),_(vL),c&&t(CSe),c&&t(uf),_(TL),c&&t(MSe),c&&t(Nr),_(FL),_(ML),_(EL),_(yL),_(wL),c&&t(ESe),c&&t(Tf),_(AL),c&&t(ySe),c&&t(jr),_(LL),_(xL),_(kL),_(RL),_(SL),c&&t(wSe),c&&t(Mf),_(PL),c&&t(ASe),c&&t(qr),_($L),_(DL),_(NL),_(jL),_(qL),c&&t(LSe),c&&t(wf),_(GL),c&&t(BSe),c&&t(Gr),_(OL),_(VL),_(zL),_(WL),_(QL),c&&t(xSe),c&&t(Bf),_(HL),c&&t(kSe),c&&t(Or),_(UL),_(YL),_(KL),_(ZL),_(o8),c&&t(RSe),c&&t(Rf),_(r8),c&&t(SSe),c&&t(Xr),_(t8),_(n8),_(s8),_(l8),_(i8)}}}const HCt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function UCt(If){return XCt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class oMt extends jCt{constructor(Z){super();qCt(this,Z,UCt,QCt,GCt,{})}}export{oMt as default,HCt as metadata};
